
MebX_HWv01_Tests.elf:     file format elf32-littlenios2
MebX_HWv01_Tests.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x81100244

Program Header:
    LOAD off    0x00001020 vaddr 0x81100020 paddr 0x81100020 align 2**12
         filesz 0x0001a0d4 memsz 0x0001a644 flags rwx
    LOAD off    0x0001c000 vaddr 0x86020000 paddr 0x86020000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000000  86020000  86020000  0001c000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  81100020  81100020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00016d80  81100244  81100244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00001514  81116fc4  81116fc4  00017fc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001c1c  811184d8  811184d8  000194d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000570  8111a0f4  8111a0f4  0001b0f4  2**2
                  ALLOC, SMALL_DATA
  6 .m1_ddr2_memory 00000000  00000000  00000000  0001c000  2**0
                  CONTENTS
  7 .m2_ddr2_memory 00000000  40000000  40000000  0001c000  2**0
                  CONTENTS
  8 .onchip_memory 00000000  8111a664  8111a664  0001c000  2**0
                  CONTENTS
  9 .descriptor_memory 00000000  81200800  81200800  0001c000  2**0
                  CONTENTS
 10 .ext_flash    00000000  86020020  86020020  0001c000  2**0
                  CONTENTS
 11 .comment      00000023  00000000  00000000  0001c000  2**0
                  CONTENTS, READONLY
 12 .debug_aranges 00001140  00000000  00000000  0001c028  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_info   0002a557  00000000  00000000  0001d168  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 0000abae  00000000  00000000  000476bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000dcde  00000000  00000000  0005226d  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00003264  00000000  00000000  0005ff4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    0000511f  00000000  00000000  000631b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc    000192ee  00000000  00000000  000682cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_alt_sim_info 00000040  00000000  00000000  000815c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_ranges 00001ab0  00000000  00000000  00081600  2**3
                  CONTENTS, READONLY, DEBUGGING
 21 .thread_model 00000003  00000000  00000000  000877a5  2**0
                  CONTENTS, READONLY
 22 .cpu          0000000c  00000000  00000000  000877a8  2**0
                  CONTENTS, READONLY
 23 .qsys         00000001  00000000  00000000  000877b4  2**0
                  CONTENTS, READONLY
 24 .simulation_enabled 00000001  00000000  00000000  000877b5  2**0
                  CONTENTS, READONLY
 25 .sysid_hash   00000004  00000000  00000000  000877b6  2**0
                  CONTENTS, READONLY
 26 .sysid_base   00000004  00000000  00000000  000877ba  2**0
                  CONTENTS, READONLY
 27 .sysid_time   00000004  00000000  00000000  000877be  2**0
                  CONTENTS, READONLY
 28 .stderr_dev   0000000b  00000000  00000000  000877c2  2**0
                  CONTENTS, READONLY
 29 .stdin_dev    0000000b  00000000  00000000  000877cd  2**0
                  CONTENTS, READONLY
 30 .stdout_dev   0000000b  00000000  00000000  000877d8  2**0
                  CONTENTS, READONLY
 31 .sopc_system_name 00000011  00000000  00000000  000877e3  2**0
                  CONTENTS, READONLY
 32 .quartus_project_dir 0000001f  00000000  00000000  000877f4  2**0
                  CONTENTS, READONLY
 33 .sopcinfo     001ed0cc  00000000  00000000  00087813  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
86020000 l    d  .entry	00000000 .entry
81100020 l    d  .exceptions	00000000 .exceptions
81100244 l    d  .text	00000000 .text
81116fc4 l    d  .rodata	00000000 .rodata
811184d8 l    d  .rwdata	00000000 .rwdata
8111a0f4 l    d  .bss	00000000 .bss
00000000 l    d  .m1_ddr2_memory	00000000 .m1_ddr2_memory
40000000 l    d  .m2_ddr2_memory	00000000 .m2_ddr2_memory
8111a664 l    d  .onchip_memory	00000000 .onchip_memory
81200800 l    d  .descriptor_memory	00000000 .descriptor_memory
86020020 l    d  .ext_flash	00000000 .ext_flash
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../MebX_HWv01_Tests_bsp//obj/HAL/src/crt0.o
81100278 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 i2c.c
00000000 l    df *ABS*	00000000 leds.c
00000000 l    df *ABS*	00000000 power_spi.c
00000000 l    df *ABS*	00000000 seven_seg.c
00000000 l    df *ABS*	00000000 ddr2.c
00000000 l    df *ABS*	00000000 dma.c
00000000 l    df *ABS*	00000000 sense.c
00000000 l    df *ABS*	00000000 mebxhwt01.c
00000000 l    df *ABS*	00000000 util.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 floatunsisf.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
811180d2 l     O .rodata	00000010 zeroes.4404
81107b98 l     F .text	000000bc __sbprintf
811180e2 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
81107da8 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
811098d8 l     F .text	00000008 __fp_unlock
811098ec l     F .text	0000019c __sinit.part.1
81109a88 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
811184d8 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
8111891c l     O .rwdata	00000020 lc_ctype_charset
811188fc l     O .rwdata	00000020 lc_message_charset
8111893c l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
81118114 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
8110cea4 l     F .text	000000fc __sprint_r.part.0
81118248 l     O .rodata	00000010 blanks.4348
81118238 l     O .rodata	00000010 zeroes.4349
8110e430 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
81111970 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
81111a9c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
81111ac8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
81111bb4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
81111c94 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
81111e68 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
8111a0d4 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
81112288 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
811123bc l     F .text	00000034 alt_dev_reg
81118f24 l     O .rwdata	00001060 jtag_uart_0
81119f84 l     O .rwdata	00000030 sgdma_rx
81119fb4 l     O .rwdata	00000030 sgdma_tx
81119fe4 l     O .rwdata	00000060 dma_M1_M2
8111a044 l     O .rwdata	00000060 dma_M2_M1
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
81112734 l     F .text	0000020c altera_avalon_jtag_uart_irq
81112940 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_sgdma.c
81112f78 l     F .text	0000003c alt_get_errno
81113ba8 l     F .text	000000bc alt_avalon_sgdma_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
81113d0c l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_msgdma.c
81113e00 l     F .text	0000003c alt_get_errno
81113e3c l     F .text	00000094 alt_msgdma_write_standard_descriptor
81113ed0 l     F .text	0000012c alt_msgdma_write_extended_descriptor
81113ffc l     F .text	00000184 alt_msgdma_irq
81114180 l     F .text	0000008c alt_msgdma_construct_standard_descriptor
8111420c l     F .text	00000154 alt_msgdma_construct_extended_descriptor
81114360 l     F .text	000002d0 alt_msgdma_descriptor_async_transfer
81114630 l     F .text	00000378 alt_msgdma_descriptor_sync_transfer
81114c78 l     F .text	000000a4 alt_msgdma_construct_prefetcher_standard_descriptor
81114d1c l     F .text	00000194 alt_msgdma_construct_prefetcher_extended_descriptor
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
81115ef8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
811163c8 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
81116508 l     F .text	0000003c alt_get_errno
81116544 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
8111a138 g     O .bss	00000004 alt_instruction_exception_handler
81115b8c g     F .text	0000003c alt_msgdma_standard_descriptor_async_transfer
81105800 g     F .text	00000018 putchar
8110c380 g     F .text	00000074 _mprec_log10
811003d4 g     F .text	00000100 I2C_Read
8110c46c g     F .text	0000008c __any_on
8110eb24 g     F .text	00000054 _isatty_r
81118120 g     O .rodata	00000028 __mprec_tinytens
81111da4 g     F .text	0000007c alt_main
81105818 g     F .text	000000c0 _puts_r
8111a564 g     O .bss	00000100 alt_irq
8110eb78 g     F .text	00000060 _lseek_r
81110c18 g     F .text	00000088 .hidden __eqdf2
811026fc g     F .text	00000044 DMA_DESCRIPTOR_BUFFER_FULL
81101c78 g     F .text	00000384 DDR2_MEMORY_READ_TEST
81101050 g     F .text	00000044 SSDP_UPDATE
81114a58 g     F .text	00000058 alt_msgdma_construct_standard_mm_to_mm_descriptor
8111a664 g       *ABS*	00000000 __alt_heap_start
811057bc g     F .text	0000003c printf
8111a0fc g     O .bss	00000001 SspdConfigControl
811130d8 g     F .text	00000110 alt_avalon_sgdma_do_sync_transfer
8110ec38 g     F .text	0000009c _wcrtomb_r
8110cd64 g     F .text	0000005c __sseek
81109c28 g     F .text	00000010 __sinit
8110e4ec g     F .text	00000140 __swbuf_r
8110a6f0 g     F .text	0000007c _setlocale_r
8111a0fa g     O .bss	00000002 LedsPainelControl
81109a90 g     F .text	00000068 __sfmoreglue
81111e44 g     F .text	00000024 __malloc_unlock
811029d0 g     F .text	0000020c DMA_MULTIPLE_TRANSFER
811041c0 g     F .text	00000440 .hidden __divsf3
811137f0 g     F .text	000003b8 alt_avalon_sgdma_construct_descriptor_burst
8110b278 g     F .text	0000015c memmove
81109c10 g     F .text	00000018 _cleanup
8110b4fc g     F .text	000000a8 _Balloc
811149a8 g     F .text	00000058 alt_msgdma_construct_standard_st_to_mm_descriptor
81102784 g     F .text	000000a0 DMA_DISPATCHER_STOP
81110ca0 g     F .text	000000dc .hidden __gtdf2
811169c4 g     F .text	00000024 altera_nios2_gen2_irq_init
81100730 g     F .text	00000130 i2c_write
86020000 g     F .entry	00000000 __reset
81102e18 g     F .text	000000f0 TEMP_Read
81113340 g     F .text	00000078 alt_avalon_sgdma_construct_stream_to_mem_desc_burst
8110eac8 g     F .text	0000005c _fstat_r
8111a11c g     O .bss	00000004 errno
8110cce0 g     F .text	00000008 __seofread
8111a124 g     O .bss	00000004 alt_argv
811220a4 g       *ABS*	00000000 _gp
81112258 g     F .text	00000030 usleep
811154c8 g     F .text	000000d4 alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits
81118da4 g     O .rwdata	00000180 alt_fd_list
811057f8 g     F .text	00000008 _putchar_r
81116098 g     F .text	00000090 alt_find_dev
81105644 g     F .text	00000148 memcpy
811098e0 g     F .text	0000000c _cleanup_r
811117ec g     F .text	000000dc .hidden __floatsidf
8111648c g     F .text	0000007c alt_io_redirect
81110d7c g     F .text	000000f4 .hidden __ltdf2
81116fc4 g       *ABS*	00000000 __DTOR_END__
811158e8 g     F .text	0000008c alt_msgdma_start_prefetcher_with_extd_desc_list
81115bc8 g     F .text	0000003c alt_msgdma_extended_descriptor_async_transfer
81115b38 g     F .text	00000054 alt_msgdma_register_callback
811058d8 g     F .text	00000014 puts
81116b94 g     F .text	0000009c alt_exception_cause_generated_bad_addr
8110cbc4 g     F .text	00000074 __fpclassifyd
8110c2dc g     F .text	000000a4 __ratio
8110e414 g     F .text	0000001c __vfiprintf_internal
81113438 g     F .text	0000008c alt_avalon_sgdma_construct_mem_to_stream_desc_burst
81112b38 g     F .text	0000021c altera_avalon_jtag_uart_read
811151a8 g     F .text	000000f0 alt_msgdma_prefetcher_add_standard_desc_to_list
8110578c g     F .text	00000030 _printf_r
8110f9c8 g     F .text	00000064 .hidden __udivsi3
81111bf0 g     F .text	000000a4 isatty
8111a0f8 g     O .bss	00000001 LedsBoardControl
81118170 g     O .rodata	000000c8 __mprec_tens
8110a76c g     F .text	0000000c __locale_charset
811004d4 g     F .text	00000158 I2C_MultipleRead
8111a118 g     O .bss	00000004 __malloc_top_pad
8111a0ac g     O .rwdata	00000004 __mb_cur_max
8110a79c g     F .text	0000000c _localeconv_r
8110b908 g     F .text	0000003c __i2b
8110a0ac g     F .text	000004bc __sfvwrite_r
81113570 g     F .text	0000005c alt_avalon_sgdma_stop
8110cc38 g     F .text	00000054 _sbrk_r
8110ebd8 g     F .text	00000060 _read_r
81115ed0 g     F .text	00000028 alt_dcache_flush
8111a0cc g     O .rwdata	00000004 alt_max_fd
8110e7bc g     F .text	000000f0 _fclose_r
811098a8 g     F .text	00000030 fflush
8111a114 g     O .bss	00000004 __malloc_max_sbrked_mem
81105328 g     F .text	00000110 .hidden __extendsfdf2
8110027c g     F .text	00000080 I2C_TestAdress
8110fa84 g     F .text	000008ac .hidden __adddf3
8110c084 g     F .text	0000010c __b2d
81114f08 g     F .text	00000058 alt_msgdma_construct_prefetcher_standard_st_to_mm_descriptor
8110f398 g     F .text	00000538 .hidden __umoddi3
81111cd0 g     F .text	000000d4 lseek
8111a0a4 g     O .rwdata	00000004 _global_impure_ptr
8110c660 g     F .text	00000564 _realloc_r
8111a664 g       *ABS*	00000000 __bss_end
811162d8 g     F .text	000000f0 alt_iic_isr_register
81112fb4 g     F .text	00000124 alt_avalon_sgdma_do_async_transfer
81112150 g     F .text	00000108 alt_tick
811159cc g     F .text	0000016c alt_msgdma_init
8110ee20 g     F .text	00000578 .hidden __udivdi3
8110ea24 g     F .text	00000024 _fputwc_r
81118148 g     O .rodata	00000028 __mprec_bigtens
8110b6ec g     F .text	00000104 __s2b
811118c8 g     F .text	000000a8 .hidden __floatunsidf
8110bdc4 g     F .text	00000060 __mcmp
81115c40 g     F .text	0000003c alt_msgdma_extended_descriptor_sync_transfer
81109c48 g     F .text	00000018 __fp_lock_all
8111628c g     F .text	0000004c alt_ic_irq_enabled
811002fc g     F .text	000000d8 I2C_Write
811120b4 g     F .text	0000009c alt_alarm_stop
81200800 g       *ABS*	00000000 __alt_mem_descriptor_memory
8111a134 g     O .bss	00000004 alt_irq_active
811000fc g     F .exceptions	000000d4 alt_irq_handler
81118d7c g     O .rwdata	00000028 alt_dev_null
81114b40 g     F .text	00000090 alt_msgdma_construct_extended_mm_to_st_descriptor
811135cc g     F .text	00000064 alt_avalon_sgdma_check_descriptor_status
8110062c g     F .text	0000008c i2c_start
8111585c g     F .text	0000008c alt_msgdma_start_prefetcher_with_std_desc_list
81111a7c g     F .text	00000020 alt_dcache_flush_all
8110b7f0 g     F .text	00000068 __hi0bits
8111176c g     F .text	00000080 .hidden __fixdfsi
81100f88 g     F .text	000000c8 SSDP_CONFIG
81100a30 g     F .text	00000078 LEDS_PAINEL_DRIVE
81100000 g       *ABS*	00000000 __alt_mem_onchip_memory
8111a0c4 g     O .rwdata	00000008 alt_dev_list
811122c4 g     F .text	000000f8 write
81113710 g     F .text	00000080 alt_avalon_sgdma_enable_desc_poll
8110c4f8 g     F .text	000000a0 _putc_r
81111b04 g     F .text	000000b0 fstat
811028c4 g     F .text	0000010c DMA_SINGLE_TRANSFER
81103fb0 g     F .text	00000050 _reg_write
81110d7c g     F .text	000000f4 .hidden __ledf2
8110bb3c g     F .text	00000140 __pow5mult
8110cfb8 g     F .text	0000145c ___vfiprintf_internal_r
8111a10c g     O .bss	00000004 __nlocale_changed
8110fa2c g     F .text	00000058 .hidden __umodsi3
81101868 g     F .text	00000410 DDR2_MEMORY_WRITE_TEST
811133b8 g     F .text	00000080 alt_avalon_sgdma_construct_mem_to_stream_desc
81114f60 g     F .text	00000058 alt_msgdma_construct_prefetcher_standard_mm_to_st_descriptor
811134c4 g     F .text	00000054 alt_avalon_sgdma_register_callback
8111a664 g       *ABS*	00000000 end
81112674 g     F .text	000000c0 altera_avalon_jtag_uart_init
811001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
81116fc4 g       *ABS*	00000000 __CTOR_LIST__
811fa000 g       *ABS*	00000000 __alt_stack_pointer
81113790 g     F .text	00000060 alt_avalon_sgdma_disable_desc_poll
81113d84 g     F .text	0000007c alt_avalon_timer_sc_init
811055e0 g     F .text	00000064 .hidden __clzsi2
81112d54 g     F .text	00000224 altera_avalon_jtag_uart_write
811131e8 g     F .text	00000074 alt_avalon_sgdma_construct_mem_to_mem_desc
81109c38 g     F .text	00000004 __sfp_lock_acquire
81102f08 g     F .text	00000040 sense_log_temp
8110b194 g     F .text	000000e4 memchr
81105984 g     F .text	000021f8 ___vfprintf_internal_r
811132e0 g     F .text	00000060 alt_avalon_sgdma_construct_stream_to_mem_desc
81109d9c g     F .text	00000310 _free_r
8111675c g     F .text	0000022c alt_printf
81104050 g     F .text	00000104 _print_codec_status
8110a778 g     F .text	00000010 __locale_mb_cur_max
81102824 g     F .text	000000a0 DMA_DISPATCHER_RESET
81116e10 g     F .text	00000180 __call_exitprocs
81101094 g     F .text	000002a4 DDR2_EEPROM_TEST
8111a108 g     O .bss	00000004 __mlocale_changed
8111a0b0 g     O .rwdata	00000004 __malloc_sbrk_base
81100244 g     F .text	00000038 _start
8111a12c g     O .bss	00000004 _alt_tick_rate
81113630 g     F .text	00000054 alt_avalon_sgdma_open
8110bc7c g     F .text	00000148 __lshift
81114a00 g     F .text	00000058 alt_msgdma_construct_standard_mm_to_st_descriptor
8111a130 g     O .bss	00000004 _alt_nticks
81111ea4 g     F .text	000000fc read
81112428 g     F .text	000000e8 alt_sys_init
811049fc g     F .text	00000124 .hidden __floatsisf
81116cf8 g     F .text	00000118 __register_exitproc
00000000 g       *ABS*	00000000 __alt_mem_m1_ddr2_memory
8110b944 g     F .text	000001f8 __multiply
811129e0 g     F .text	00000068 altera_avalon_jtag_uart_close
8111a13c g     O .bss	00000028 __malloc_current_mallinfo
8110c190 g     F .text	0000014c __d2b
81112510 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
81116af0 g     F .text	000000a4 alt_get_fd
81102618 g     F .text	0000005c DMA_OPEN_DEVICE
81115da8 g     F .text	00000128 alt_busy_sleep
81104154 g     F .text	0000006c _split_codec_status
8110e6a4 g     F .text	00000054 _close_r
81101ffc g     F .text	000002cc DDR2_MEMORY_RANDOM_WRITE_TEST
81114eb0 g     F .text	00000058 alt_msgdma_construct_prefetcher_standard_mm_to_mm_descriptor
81116c7c g     F .text	0000007c memcmp
811125d0 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
8111a664 g       *ABS*	00000000 __alt_stack_base
81112620 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
81114fb8 g     F .text	000000a0 alt_msgdma_construct_prefetcher_extended_st_to_mm_descriptor
81107c54 g     F .text	00000154 __swsetup_r
81103654 g     F .text	0000023c TestLeds
81110330 g     F .text	000008e8 .hidden __divdf3
81109af8 g     F .text	00000118 __sfp
81102740 g     F .text	00000044 DMA_DESCRIPTOR_BUFFER_EMPTY
8110c3f4 g     F .text	00000078 __copybits
81118974 g     O .rwdata	00000408 __malloc_av_
81109c44 g     F .text	00000004 __sinit_lock_release
811006b8 g     F .text	00000078 i2c_stop
81104c10 g     F .text	00000718 .hidden __muldf3
8110cc8c g     F .text	00000054 __sread
811169e8 g     F .text	00000108 alt_find_file
811009b8 g     F .text	00000078 LEDS_BOARD_DRIVE
81115f34 g     F .text	000000a4 alt_dev_llist_insert
81111e20 g     F .text	00000024 __malloc_lock
81112004 g     F .text	000000b0 sbrk
81113518 g     F .text	00000058 alt_avalon_sgdma_start
8110984c g     F .text	0000005c _fflush_r
8110e6f8 g     F .text	000000c4 _calloc_r
81102674 g     F .text	00000044 DMA_CONFIG
8111a0f4 g       *ABS*	00000000 __bss_start
8110b3d4 g     F .text	00000128 memset
81115974 g     F .text	00000058 alt_msgdma_open
81101338 g     F .text	00000530 DDR2_EEPROM_DUMP
811035ec g     F .text	00000068 main
8111a128 g     O .bss	00000004 alt_envp
8111a110 g     O .bss	00000004 __malloc_max_total_mem
81115298 g     F .text	00000198 alt_msgdma_prefetcher_add_extended_desc_to_list
81112570 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
81102bdc g     F .text	0000023c POWER_Read
81100860 g     F .text	00000158 i2c_read
8110e62c g     F .text	00000018 __swbuf
8111a0e0 g     O .rwdata	00000008 alt_sgdma_list
8110cdc0 g     F .text	00000008 __sclose
811fa000 g       *ABS*	00000000 __alt_heap_limit
8110e8ac g     F .text	00000014 fclose
81105438 g     F .text	000001a8 .hidden __truncdfsf2
81107fa8 g     F .text	00001688 _dtoa_r
8111559c g     F .text	000002c0 alt_msgdma_start_prefetcher_with_list_addr
8110a988 g     F .text	0000080c _malloc_r
8110ed94 g     F .text	00000030 __ascii_wctomb
8111a0d0 g     O .rwdata	00000004 alt_errno
811150f0 g     F .text	000000b8 alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor
81100aa8 g     F .text	000004e0 POWER_SPI_RW
8110a568 g     F .text	000000c4 _fwalk
8111a100 g     O .bss	00000004 InitialState
8110c598 g     F .text	000000c8 putc
8110f8d0 g     F .text	00000084 .hidden __divsi3
81109c78 g     F .text	00000124 _malloc_trim_r
81116fc4 g       *ABS*	00000000 __CTOR_END__
81104600 g     F .text	000003fc .hidden __mulsf3
8111a0f4 g     O .bss	00000004 pnt_memory
8110cdc8 g     F .text	000000dc strcmp
81116fc4 g       *ABS*	00000000 __DTOR_LIST__
81104000 g     F .text	00000050 _reg_read
81110c18 g     F .text	00000088 .hidden __nedf2
811123f0 g     F .text	00000038 alt_irq_init
81111fa0 g     F .text	00000064 alt_release_fd
81115c04 g     F .text	0000003c alt_msgdma_standard_descriptor_sync_transfer
81117f8b g     O .rodata	00000100 .hidden __clz_tab
8111a104 g     O .bss	00000004 _PathLocale
81116c30 g     F .text	00000014 atexit
8110e644 g     F .text	00000060 _write_r
8110a7a8 g     F .text	00000018 setlocale
81115058 g     F .text	00000098 alt_msgdma_construct_prefetcher_extended_mm_to_st_descriptor
8111a0a8 g     O .rwdata	00000004 _impure_ptr
8111a120 g     O .bss	00000004 alt_argc
81109630 g     F .text	0000021c __sflush_r
8111a164 g     O .bss	00000400 szData
81116038 g     F .text	00000060 _do_dtors
40000000 g       *ABS*	00000000 __alt_mem_m2_ddr2_memory
8110a794 g     F .text	00000008 __locale_cjk_lang
81102f48 g     F .text	000006a4 sense_log
81100020 g       .exceptions	00000000 alt_irq_entry
8110c020 g     F .text	00000064 __ulp
81109c60 g     F .text	00000018 __fp_unlock_all
8111a0bc g     O .rwdata	00000008 alt_fs_list
8110a7c0 g     F .text	0000000c localeconv
81116128 g     F .text	00000050 alt_ic_isr_register
8111a0f4 g       *ABS*	00000000 _edata
811022c8 g     F .text	000002d8 DDR2_MEMORY_RANDOM_READ_TEST
8111a664 g       *ABS*	00000000 _end
8110e8c0 g     F .text	00000164 __fputwc
81112a48 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
81116200 g     F .text	0000008c alt_ic_irq_disable
81113684 g     F .text	0000008c alt_avalon_sgdma_construct_descriptor
8110cce8 g     F .text	0000007c __swrite
8111a0b4 g     O .rwdata	00000004 __malloc_trim_threshold
8110a788 g     F .text	0000000c __locale_msgcharset
81116c44 g     F .text	00000038 exit
8110a62c g     F .text	000000c4 _fwalk_reent
81115430 g     F .text	00000098 alt_msgdma_prefetcher_set_std_list_own_by_hw_bits
81104b20 g     F .text	000000f0 .hidden __floatunsisf
8110be24 g     F .text	000001fc __mdiff
8110f954 g     F .text	00000074 .hidden __modsi3
81103c20 g     F .text	00000390 TestDMA_M2_M1
811fa000 g       *ABS*	00000000 __alt_data_end
81100020 g     F .exceptions	00000000 alt_exception
81109c3c g     F .text	00000004 __sfp_lock_release
81114bd0 g     F .text	000000a8 alt_msgdma_construct_extended_mm_to_mm_descriptor
84000000 g       *ABS*	00000000 __alt_mem_ext_flash
81114ab0 g     F .text	00000090 alt_msgdma_construct_extended_st_to_mm_descriptor
81116f90 g     F .text	00000034 _exit
81115c7c g     F .text	0000012c alt_alarm_start
8110a7cc g     F .text	000001bc __smakebuf_r
8111a0e8 g     O .rwdata	00000008 alt_msgdma_list
811058ec g     F .text	00000098 strlen
81116608 g     F .text	00000154 open
81110ca0 g     F .text	000000dc .hidden __gedf2
81116988 g     F .text	0000003c alt_putchar
8111a0b8 g     O .rwdata	00000004 __wctomb
8110cfa0 g     F .text	00000018 __sprint_r
8111a0f0 g     O .rwdata	00000004 alt_priority_mask
81116178 g     F .text	00000088 alt_ic_irq_enable
81107b7c g     F .text	0000001c __vfprintf_internal
8110edc4 g     F .text	0000005c _wctomb_r
8111325c g     F .text	00000084 alt_avalon_sgdma_construct_mem_to_mem_desc_burst
81110e70 g     F .text	000008fc .hidden __subdf3
81103890 g     F .text	00000390 TestDMA_M1_M2
8110b858 g     F .text	000000b0 __lo0bits
8111a0d8 g     O .rwdata	00000008 alt_alarm_list
81115fd8 g     F .text	00000060 _do_ctors
811026b8 g     F .text	00000044 DMA_BUSY
8110ecd4 g     F .text	000000c0 wcrtomb
811119ac g     F .text	000000d0 close
811025a0 g     F .text	00000078 xorshift32
81113c64 g     F .text	000000a8 alt_avalon_sgdma_init
8110ea48 g     F .text	00000080 fputwc
81109c40 g     F .text	00000004 __sinit_lock_acquire
8110b5cc g     F .text	00000120 __multadd
8110b5a4 g     F .text	00000028 _Bfree



Disassembly of section .exceptions:

81100020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
81100020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
81100024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
81100028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
8110002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
81100030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
81100034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
81100038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
8110003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
81100040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
81100044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
81100048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
8110004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
81100050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
81100054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
81100058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
8110005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
81100060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
81100064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
81100068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
8110006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
81100070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
81100074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
81100078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
8110007c:	10000326 	beq	r2,zero,8110008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
81100080:	20000226 	beq	r4,zero,8110008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
81100084:	11000fc0 	call	811000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
81100088:	00000706 	br	811000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
8110008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
81100090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
81100094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
81100098:	11001d00 	call	811001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
8110009c:	1000021e 	bne	r2,zero,811000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
811000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
811000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
811000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
811000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
811000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
811000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
811000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
811000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
811000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
811000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
811000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
811000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
811000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
811000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
811000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
811000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
811000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
811000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
811000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
811000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
811000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
811000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
811000f8:	ef80083a 	eret

811000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
811000fc:	defff904 	addi	sp,sp,-28
81100100:	dfc00615 	stw	ra,24(sp)
81100104:	df000515 	stw	fp,20(sp)
81100108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
8110010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
81100110:	0005313a 	rdctl	r2,ipending
81100114:	e0bffe15 	stw	r2,-8(fp)

  return active;
81100118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
8110011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
81100120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
81100124:	00800044 	movi	r2,1
81100128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
8110012c:	e0fffb17 	ldw	r3,-20(fp)
81100130:	e0bffc17 	ldw	r2,-16(fp)
81100134:	1884703a 	and	r2,r3,r2
81100138:	10001426 	beq	r2,zero,8110018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
8110013c:	00a044b4 	movhi	r2,33042
81100140:	10a95904 	addi	r2,r2,-23196
81100144:	e0fffd17 	ldw	r3,-12(fp)
81100148:	180690fa 	slli	r3,r3,3
8110014c:	10c5883a 	add	r2,r2,r3
81100150:	10c00017 	ldw	r3,0(r2)
81100154:	00a044b4 	movhi	r2,33042
81100158:	10a95904 	addi	r2,r2,-23196
8110015c:	e13ffd17 	ldw	r4,-12(fp)
81100160:	200890fa 	slli	r4,r4,3
81100164:	1105883a 	add	r2,r2,r4
81100168:	10800104 	addi	r2,r2,4
8110016c:	10800017 	ldw	r2,0(r2)
81100170:	1009883a 	mov	r4,r2
81100174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
81100178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
8110017c:	0005313a 	rdctl	r2,ipending
81100180:	e0bfff15 	stw	r2,-4(fp)

  return active;
81100184:	e0bfff17 	ldw	r2,-4(fp)
81100188:	00000706 	br	811001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
8110018c:	e0bffc17 	ldw	r2,-16(fp)
81100190:	1085883a 	add	r2,r2,r2
81100194:	e0bffc15 	stw	r2,-16(fp)
      i++;
81100198:	e0bffd17 	ldw	r2,-12(fp)
8110019c:	10800044 	addi	r2,r2,1
811001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
811001a4:	003fe106 	br	8110012c <__reset+0xfb0e012c>

    active = alt_irq_pending ();
811001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
811001ac:	e0bffb17 	ldw	r2,-20(fp)
811001b0:	103fdb1e 	bne	r2,zero,81100120 <__reset+0xfb0e0120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
811001b4:	0001883a 	nop
}
811001b8:	0001883a 	nop
811001bc:	e037883a 	mov	sp,fp
811001c0:	dfc00117 	ldw	ra,4(sp)
811001c4:	df000017 	ldw	fp,0(sp)
811001c8:	dec00204 	addi	sp,sp,8
811001cc:	f800283a 	ret

811001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
811001d0:	defffb04 	addi	sp,sp,-20
811001d4:	dfc00415 	stw	ra,16(sp)
811001d8:	df000315 	stw	fp,12(sp)
811001dc:	df000304 	addi	fp,sp,12
811001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
811001e4:	000531fa 	rdctl	r2,exception
811001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
811001ec:	e0bffd17 	ldw	r2,-12(fp)
811001f0:	10801f0c 	andi	r2,r2,124
811001f4:	1004d0ba 	srli	r2,r2,2
811001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
811001fc:	0005333a 	rdctl	r2,badaddr
81100200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
81100204:	d0a02517 	ldw	r2,-32620(gp)
81100208:	10000726 	beq	r2,zero,81100228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
8110020c:	d0a02517 	ldw	r2,-32620(gp)
81100210:	e0fffd17 	ldw	r3,-12(fp)
81100214:	e1bffe17 	ldw	r6,-8(fp)
81100218:	e17fff17 	ldw	r5,-4(fp)
8110021c:	1809883a 	mov	r4,r3
81100220:	103ee83a 	callr	r2
81100224:	00000206 	br	81100230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
81100228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
8110022c:	0005883a 	mov	r2,zero
}
81100230:	e037883a 	mov	sp,fp
81100234:	dfc00117 	ldw	ra,4(sp)
81100238:	df000017 	ldw	fp,0(sp)
8110023c:	dec00204 	addi	sp,sp,8
81100240:	f800283a 	ret

Disassembly of section .text:

81100244 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
81100244:	06e047f4 	movhi	sp,33055
    ori sp, sp, %lo(__alt_stack_pointer)
81100248:	dee80014 	ori	sp,sp,40960
    movhi gp, %hi(_gp)
8110024c:	06a044b4 	movhi	gp,33042
    ori gp, gp, %lo(_gp)
81100250:	d6882914 	ori	gp,gp,8356
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
81100254:	00a04474 	movhi	r2,33041
    ori r2, r2, %lo(__bss_start)
81100258:	10a83d14 	ori	r2,r2,41204

    movhi r3, %hi(__bss_end)
8110025c:	00e04474 	movhi	r3,33041
    ori r3, r3, %lo(__bss_end)
81100260:	18e99914 	ori	r3,r3,42596

    beq r2, r3, 1f
81100264:	10c00326 	beq	r2,r3,81100274 <_start+0x30>

0:
    stw zero, (r2)
81100268:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
8110026c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
81100270:	10fffd36 	bltu	r2,r3,81100268 <__reset+0xfb0e0268>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
81100274:	1111da40 	call	81111da4 <alt_main>

81100278 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
81100278:	003fff06 	br	81100278 <__reset+0xfb0e0278>

8110027c <I2C_TestAdress>:
void i2c_start(alt_u32 clk_base, alt_u32 data_base);
void i2c_stop(alt_u32 clk_base, alt_u32 data_base);
bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data);
void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck);

bool I2C_TestAdress(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr){
8110027c:	defffa04 	addi	sp,sp,-24
81100280:	dfc00515 	stw	ra,20(sp)
81100284:	df000415 	stw	fp,16(sp)
81100288:	df000404 	addi	fp,sp,16
8110028c:	e13ffd15 	stw	r4,-12(fp)
81100290:	e17ffe15 	stw	r5,-8(fp)
81100294:	3005883a 	mov	r2,r6
81100298:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
8110029c:	00800044 	movi	r2,1
811002a0:	e0bffc15 	stw	r2,-16(fp)
    //alt_u8 DeviceAddr;
    
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
811002a4:	e17ffe17 	ldw	r5,-8(fp)
811002a8:	e13ffd17 	ldw	r4,-12(fp)
811002ac:	110062c0 	call	8110062c <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
811002b0:	e0bfff03 	ldbu	r2,-4(fp)
811002b4:	10803fcc 	andi	r2,r2,255
811002b8:	100d883a 	mov	r6,r2
811002bc:	e17ffe17 	ldw	r5,-8(fp)
811002c0:	e13ffd17 	ldw	r4,-12(fp)
811002c4:	11007300 	call	81100730 <i2c_write>
811002c8:	1000011e 	bne	r2,zero,811002d0 <I2C_TestAdress+0x54>
        bSuccess = FALSE;
811002cc:	e03ffc15 	stw	zero,-16(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    i2c_stop(clk_base, data_base);
811002d0:	e17ffe17 	ldw	r5,-8(fp)
811002d4:	e13ffd17 	ldw	r4,-12(fp)
811002d8:	11006b80 	call	811006b8 <i2c_stop>
    
    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
811002dc:	0106d604 	movi	r4,7000
811002e0:	11122580 	call	81112258 <usleep>
    
    return bSuccess;
811002e4:	e0bffc17 	ldw	r2,-16(fp)

}
811002e8:	e037883a 	mov	sp,fp
811002ec:	dfc00117 	ldw	ra,4(sp)
811002f0:	df000017 	ldw	fp,0(sp)
811002f4:	dec00204 	addi	sp,sp,8
811002f8:	f800283a 	ret

811002fc <I2C_Write>:

bool I2C_Write(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 ControlData){
811002fc:	defff804 	addi	sp,sp,-32
81100300:	dfc00715 	stw	ra,28(sp)
81100304:	df000615 	stw	fp,24(sp)
81100308:	df000604 	addi	fp,sp,24
8110030c:	e13ffb15 	stw	r4,-20(fp)
81100310:	e17ffc15 	stw	r5,-16(fp)
81100314:	3009883a 	mov	r4,r6
81100318:	3807883a 	mov	r3,r7
8110031c:	e0800217 	ldw	r2,8(fp)
81100320:	e13ffd05 	stb	r4,-12(fp)
81100324:	e0fffe05 	stb	r3,-8(fp)
81100328:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
8110032c:	00800044 	movi	r2,1
81100330:	e0bffa15 	stw	r2,-24(fp)
    //alt_u8 DeviceAddr;
    
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
81100334:	e17ffc17 	ldw	r5,-16(fp)
81100338:	e13ffb17 	ldw	r4,-20(fp)
8110033c:	110062c0 	call	8110062c <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
81100340:	e0bffd03 	ldbu	r2,-12(fp)
81100344:	10803fcc 	andi	r2,r2,255
81100348:	100d883a 	mov	r6,r2
8110034c:	e17ffc17 	ldw	r5,-16(fp)
81100350:	e13ffb17 	ldw	r4,-20(fp)
81100354:	11007300 	call	81100730 <i2c_write>
81100358:	1000011e 	bne	r2,zero,81100360 <I2C_Write+0x64>
        bSuccess = FALSE;
8110035c:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
81100360:	e0bffa17 	ldw	r2,-24(fp)
81100364:	10000726 	beq	r2,zero,81100384 <I2C_Write+0x88>
81100368:	e0bffe03 	ldbu	r2,-8(fp)
8110036c:	100d883a 	mov	r6,r2
81100370:	e17ffc17 	ldw	r5,-16(fp)
81100374:	e13ffb17 	ldw	r4,-20(fp)
81100378:	11007300 	call	81100730 <i2c_write>
8110037c:	1000011e 	bne	r2,zero,81100384 <I2C_Write+0x88>
        bSuccess = FALSE;
81100380:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, ControlData)){  
81100384:	e0bffa17 	ldw	r2,-24(fp)
81100388:	10000726 	beq	r2,zero,811003a8 <I2C_Write+0xac>
8110038c:	e0bfff03 	ldbu	r2,-4(fp)
81100390:	100d883a 	mov	r6,r2
81100394:	e17ffc17 	ldw	r5,-16(fp)
81100398:	e13ffb17 	ldw	r4,-20(fp)
8110039c:	11007300 	call	81100730 <i2c_write>
811003a0:	1000011e 	bne	r2,zero,811003a8 <I2C_Write+0xac>
        bSuccess = FALSE;
811003a4:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
    }
    i2c_stop(clk_base, data_base);
811003a8:	e17ffc17 	ldw	r5,-16(fp)
811003ac:	e13ffb17 	ldw	r4,-20(fp)
811003b0:	11006b80 	call	811006b8 <i2c_stop>
    
    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
811003b4:	0106d604 	movi	r4,7000
811003b8:	11122580 	call	81112258 <usleep>
    
    return bSuccess;
811003bc:	e0bffa17 	ldw	r2,-24(fp)

}
811003c0:	e037883a 	mov	sp,fp
811003c4:	dfc00117 	ldw	ra,4(sp)
811003c8:	df000017 	ldw	fp,0(sp)
811003cc:	dec00204 	addi	sp,sp,8
811003d0:	f800283a 	ret

811003d4 <I2C_Read>:

bool I2C_Read(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 *pControlData){
811003d4:	defff904 	addi	sp,sp,-28
811003d8:	dfc00615 	stw	ra,24(sp)
811003dc:	df000515 	stw	fp,20(sp)
811003e0:	df000504 	addi	fp,sp,20
811003e4:	e13ffc15 	stw	r4,-16(fp)
811003e8:	e17ffd15 	stw	r5,-12(fp)
811003ec:	3007883a 	mov	r3,r6
811003f0:	3805883a 	mov	r2,r7
811003f4:	e0fffe05 	stb	r3,-8(fp)
811003f8:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
811003fc:	00800044 	movi	r2,1
81100400:	e0bffb15 	stw	r2,-20(fp)
    //alt_u8 DeviceAddr;
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
81100404:	e17ffd17 	ldw	r5,-12(fp)
81100408:	e13ffc17 	ldw	r4,-16(fp)
8110040c:	110062c0 	call	8110062c <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
81100410:	e0bffe03 	ldbu	r2,-8(fp)
81100414:	10803fcc 	andi	r2,r2,255
81100418:	100d883a 	mov	r6,r2
8110041c:	e17ffd17 	ldw	r5,-12(fp)
81100420:	e13ffc17 	ldw	r4,-16(fp)
81100424:	11007300 	call	81100730 <i2c_write>
81100428:	1000011e 	bne	r2,zero,81100430 <I2C_Read+0x5c>
        bSuccess = FALSE;
8110042c:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
81100430:	e0bffb17 	ldw	r2,-20(fp)
81100434:	10000726 	beq	r2,zero,81100454 <I2C_Read+0x80>
81100438:	e0bfff03 	ldbu	r2,-4(fp)
8110043c:	100d883a 	mov	r6,r2
81100440:	e17ffd17 	ldw	r5,-12(fp)
81100444:	e13ffc17 	ldw	r4,-16(fp)
81100448:	11007300 	call	81100730 <i2c_write>
8110044c:	1000011e 	bne	r2,zero,81100454 <I2C_Read+0x80>
        bSuccess = FALSE;
81100450:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }            
    i2c_start(clk_base, data_base);  // restart
81100454:	e17ffd17 	ldw	r5,-12(fp)
81100458:	e13ffc17 	ldw	r4,-16(fp)
8110045c:	110062c0 	call	8110062c <i2c_start>
    DeviceAddr |= 1; // Read
81100460:	e0bffe03 	ldbu	r2,-8(fp)
81100464:	10800054 	ori	r2,r2,1
81100468:	e0bffe05 	stb	r2,-8(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
8110046c:	e0bffb17 	ldw	r2,-20(fp)
81100470:	10000826 	beq	r2,zero,81100494 <I2C_Read+0xc0>
81100474:	e0bffe03 	ldbu	r2,-8(fp)
81100478:	10803fcc 	andi	r2,r2,255
8110047c:	100d883a 	mov	r6,r2
81100480:	e17ffd17 	ldw	r5,-12(fp)
81100484:	e13ffc17 	ldw	r4,-16(fp)
81100488:	11007300 	call	81100730 <i2c_write>
8110048c:	1000011e 	bne	r2,zero,81100494 <I2C_Read+0xc0>
        bSuccess = FALSE;
81100490:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
81100494:	e0bffb17 	ldw	r2,-20(fp)
81100498:	10000526 	beq	r2,zero,811004b0 <I2C_Read+0xdc>
        i2c_read(clk_base, data_base, pControlData, FALSE);  // read
8110049c:	000f883a 	mov	r7,zero
811004a0:	e1800217 	ldw	r6,8(fp)
811004a4:	e17ffd17 	ldw	r5,-12(fp)
811004a8:	e13ffc17 	ldw	r4,-16(fp)
811004ac:	11008600 	call	81100860 <i2c_read>
    }        
    i2c_stop(clk_base, data_base);
811004b0:	e17ffd17 	ldw	r5,-12(fp)
811004b4:	e13ffc17 	ldw	r4,-16(fp)
811004b8:	11006b80 	call	811006b8 <i2c_stop>
    
    return bSuccess;
811004bc:	e0bffb17 	ldw	r2,-20(fp)
}
811004c0:	e037883a 	mov	sp,fp
811004c4:	dfc00117 	ldw	ra,4(sp)
811004c8:	df000017 	ldw	fp,0(sp)
811004cc:	dec00204 	addi	sp,sp,8
811004d0:	f800283a 	ret

811004d4 <I2C_MultipleRead>:

bool I2C_MultipleRead(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 szData[], alt_u16 len){
811004d4:	defff604 	addi	sp,sp,-40
811004d8:	dfc00915 	stw	ra,36(sp)
811004dc:	df000815 	stw	fp,32(sp)
811004e0:	df000804 	addi	fp,sp,32
811004e4:	e13ffb15 	stw	r4,-20(fp)
811004e8:	e17ffc15 	stw	r5,-16(fp)
811004ec:	3007883a 	mov	r3,r6
811004f0:	e1fffe15 	stw	r7,-8(fp)
811004f4:	e0800217 	ldw	r2,8(fp)
811004f8:	e0fffd05 	stb	r3,-12(fp)
811004fc:	e0bfff0d 	sth	r2,-4(fp)
    int i;
    bool bSuccess = TRUE;
81100500:	00800044 	movi	r2,1
81100504:	e0bff915 	stw	r2,-28(fp)
    //alt_u8 DeviceAddr, 
    alt_u8 ControlAddr = 0;
81100508:	e03ffa05 	stb	zero,-24(fp)
    
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
8110050c:	e17ffc17 	ldw	r5,-16(fp)
81100510:	e13ffb17 	ldw	r4,-20(fp)
81100514:	110062c0 	call	8110062c <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
81100518:	e0bffd03 	ldbu	r2,-12(fp)
8110051c:	10803fcc 	andi	r2,r2,255
81100520:	100d883a 	mov	r6,r2
81100524:	e17ffc17 	ldw	r5,-16(fp)
81100528:	e13ffb17 	ldw	r4,-20(fp)
8110052c:	11007300 	call	81100730 <i2c_write>
81100530:	1000011e 	bne	r2,zero,81100538 <I2C_MultipleRead+0x64>
        bSuccess = FALSE;
81100534:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
81100538:	e0bff917 	ldw	r2,-28(fp)
8110053c:	10000726 	beq	r2,zero,8110055c <I2C_MultipleRead+0x88>
81100540:	e0bffa03 	ldbu	r2,-24(fp)
81100544:	100d883a 	mov	r6,r2
81100548:	e17ffc17 	ldw	r5,-16(fp)
8110054c:	e13ffb17 	ldw	r4,-20(fp)
81100550:	11007300 	call	81100730 <i2c_write>
81100554:	1000011e 	bne	r2,zero,8110055c <I2C_MultipleRead+0x88>
        bSuccess = FALSE;
81100558:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }    
    if (bSuccess)        
8110055c:	e0bff917 	ldw	r2,-28(fp)
81100560:	10000326 	beq	r2,zero,81100570 <I2C_MultipleRead+0x9c>
        i2c_start(clk_base, data_base);  // restart
81100564:	e17ffc17 	ldw	r5,-16(fp)
81100568:	e13ffb17 	ldw	r4,-20(fp)
8110056c:	110062c0 	call	8110062c <i2c_start>
    DeviceAddr |= 1; // Read
81100570:	e0bffd03 	ldbu	r2,-12(fp)
81100574:	10800054 	ori	r2,r2,1
81100578:	e0bffd05 	stb	r2,-12(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
8110057c:	e0bff917 	ldw	r2,-28(fp)
81100580:	10000826 	beq	r2,zero,811005a4 <I2C_MultipleRead+0xd0>
81100584:	e0bffd03 	ldbu	r2,-12(fp)
81100588:	10803fcc 	andi	r2,r2,255
8110058c:	100d883a 	mov	r6,r2
81100590:	e17ffc17 	ldw	r5,-16(fp)
81100594:	e13ffb17 	ldw	r4,-20(fp)
81100598:	11007300 	call	81100730 <i2c_write>
8110059c:	1000011e 	bne	r2,zero,811005a4 <I2C_MultipleRead+0xd0>
        bSuccess = FALSE;
811005a0:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
811005a4:	e0bff917 	ldw	r2,-28(fp)
811005a8:	10001726 	beq	r2,zero,81100608 <I2C_MultipleRead+0x134>
        for(i=0;i<len && bSuccess;i++){
811005ac:	e03ff815 	stw	zero,-32(fp)
811005b0:	00001006 	br	811005f4 <I2C_MultipleRead+0x120>
            i2c_read(clk_base, data_base, &szData[i], (i==(len-1))?FALSE:TRUE);  // read
811005b4:	e0bff817 	ldw	r2,-32(fp)
811005b8:	e0fffe17 	ldw	r3,-8(fp)
811005bc:	1889883a 	add	r4,r3,r2
811005c0:	e0bfff0b 	ldhu	r2,-4(fp)
811005c4:	10ffffc4 	addi	r3,r2,-1
811005c8:	e0bff817 	ldw	r2,-32(fp)
811005cc:	1884c03a 	cmpne	r2,r3,r2
811005d0:	10803fcc 	andi	r2,r2,255
811005d4:	100f883a 	mov	r7,r2
811005d8:	200d883a 	mov	r6,r4
811005dc:	e17ffc17 	ldw	r5,-16(fp)
811005e0:	e13ffb17 	ldw	r4,-20(fp)
811005e4:	11008600 	call	81100860 <i2c_read>
        bSuccess = FALSE;
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
        for(i=0;i<len && bSuccess;i++){
811005e8:	e0bff817 	ldw	r2,-32(fp)
811005ec:	10800044 	addi	r2,r2,1
811005f0:	e0bff815 	stw	r2,-32(fp)
811005f4:	e0bfff0b 	ldhu	r2,-4(fp)
811005f8:	e0fff817 	ldw	r3,-32(fp)
811005fc:	1880020e 	bge	r3,r2,81100608 <I2C_MultipleRead+0x134>
81100600:	e0bff917 	ldw	r2,-28(fp)
81100604:	103feb1e 	bne	r2,zero,811005b4 <__reset+0xfb0e05b4>
            i2c_read(clk_base, data_base, &szData[i], (i==(len-1))?FALSE:TRUE);  // read
        }            
    }        
    i2c_stop(clk_base, data_base);
81100608:	e17ffc17 	ldw	r5,-16(fp)
8110060c:	e13ffb17 	ldw	r4,-20(fp)
81100610:	11006b80 	call	811006b8 <i2c_stop>
    
    return bSuccess;    
81100614:	e0bff917 	ldw	r2,-28(fp)
    
}
81100618:	e037883a 	mov	sp,fp
8110061c:	dfc00117 	ldw	ra,4(sp)
81100620:	df000017 	ldw	fp,0(sp)
81100624:	dec00204 	addi	sp,sp,8
81100628:	f800283a 	ret

8110062c <i2c_start>:
///////////// Interncal function (i2cXXX) body //////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////


//SDA 1->0 while SCL=1
void i2c_start(alt_u32 clk_base, alt_u32 data_base){
8110062c:	defffc04 	addi	sp,sp,-16
81100630:	dfc00315 	stw	ra,12(sp)
81100634:	df000215 	stw	fp,8(sp)
81100638:	df000204 	addi	fp,sp,8
8110063c:	e13ffe15 	stw	r4,-8(fp)
81100640:	e17fff15 	stw	r5,-4(fp)
    
    // make sure it is in normal state
    SDA_DIR_OUT(data_base);  // data output enabled
81100644:	e0bfff17 	ldw	r2,-4(fp)
81100648:	10800104 	addi	r2,r2,4
8110064c:	1007883a 	mov	r3,r2
81100650:	00800044 	movi	r2,1
81100654:	18800035 	stwio	r2,0(r3)
    
    
    
    // start condition
    SDA_HIGH(data_base); // data high
81100658:	e0bfff17 	ldw	r2,-4(fp)
8110065c:	00c00044 	movi	r3,1
81100660:	10c00035 	stwio	r3,0(r2)
    SCL_HIGH(clk_base);
81100664:	e0bffe17 	ldw	r2,-8(fp)
81100668:	00c00044 	movi	r3,1
8110066c:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;
81100670:	01000044 	movi	r4,1
81100674:	11122580 	call	81112258 <usleep>
     
    SDA_LOW(data_base); // data low
81100678:	e0bfff17 	ldw	r2,-4(fp)
8110067c:	0007883a 	mov	r3,zero
81100680:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; 
81100684:	01000044 	movi	r4,1
81100688:	11122580 	call	81112258 <usleep>
    SCL_LOW(clk_base); // clock low
8110068c:	e0bffe17 	ldw	r2,-8(fp)
81100690:	0007883a 	mov	r3,zero
81100694:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;
81100698:	01000044 	movi	r4,1
8110069c:	11122580 	call	81112258 <usleep>
}
811006a0:	0001883a 	nop
811006a4:	e037883a 	mov	sp,fp
811006a8:	dfc00117 	ldw	ra,4(sp)
811006ac:	df000017 	ldw	fp,0(sp)
811006b0:	dec00204 	addi	sp,sp,8
811006b4:	f800283a 	ret

811006b8 <i2c_stop>:

// SDA 0->1 while SCL=1
void i2c_stop(alt_u32 clk_base, alt_u32 data_base){
811006b8:	defffc04 	addi	sp,sp,-16
811006bc:	dfc00315 	stw	ra,12(sp)
811006c0:	df000215 	stw	fp,8(sp)
811006c4:	df000204 	addi	fp,sp,8
811006c8:	e13ffe15 	stw	r4,-8(fp)
811006cc:	e17fff15 	stw	r5,-4(fp)
    // assume SCL = 0
    
    SDA_DIR_OUT(data_base);  // data output enabled
811006d0:	e0bfff17 	ldw	r2,-4(fp)
811006d4:	10800104 	addi	r2,r2,4
811006d8:	1007883a 	mov	r3,r2
811006dc:	00800044 	movi	r2,1
811006e0:	18800035 	stwio	r2,0(r3)
    SDA_LOW(data_base); // Data Low
811006e4:	e0bfff17 	ldw	r2,-4(fp)
811006e8:	0007883a 	mov	r3,zero
811006ec:	10c00035 	stwio	r3,0(r2)
    //SCL_DELAY; 
    SCL_HIGH(clk_base);  // clock high
811006f0:	e0bffe17 	ldw	r2,-8(fp)
811006f4:	00c00044 	movi	r3,1
811006f8:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock high long delay
811006fc:	01000044 	movi	r4,1
81100700:	11122580 	call	81112258 <usleep>
    SDA_HIGH(data_base); // data high
81100704:	e0bfff17 	ldw	r2,-4(fp)
81100708:	00c00044 	movi	r3,1
8110070c:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // data high delay
81100710:	01000044 	movi	r4,1
81100714:	11122580 	call	81112258 <usleep>
    

    
}
81100718:	0001883a 	nop
8110071c:	e037883a 	mov	sp,fp
81100720:	dfc00117 	ldw	ra,4(sp)
81100724:	df000017 	ldw	fp,0(sp)
81100728:	dec00204 	addi	sp,sp,8
8110072c:	f800283a 	ret

81100730 <i2c_write>:

bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data){ // return true if device response ack
81100730:	defff804 	addi	sp,sp,-32
81100734:	dfc00715 	stw	ra,28(sp)
81100738:	df000615 	stw	fp,24(sp)
8110073c:	df000604 	addi	fp,sp,24
81100740:	e13ffd15 	stw	r4,-12(fp)
81100744:	e17ffe15 	stw	r5,-8(fp)
81100748:	3005883a 	mov	r2,r6
8110074c:	e0bfff05 	stb	r2,-4(fp)
    alt_u8 Mask = 0x80;
81100750:	00bfe004 	movi	r2,-128
81100754:	e0bffa05 	stb	r2,-24(fp)
    bool bAck;
    int i;
    
    // assume, SCL = 0
    
    SDA_DIR_OUT(data_base);  // data write mode
81100758:	e0bffe17 	ldw	r2,-8(fp)
8110075c:	10800104 	addi	r2,r2,4
81100760:	1007883a 	mov	r3,r2
81100764:	00800044 	movi	r2,1
81100768:	18800035 	stwio	r2,0(r3)
    
    for(i=0;i<8;i++){
8110076c:	e03ffb15 	stw	zero,-20(fp)
81100770:	00001f06 	br	811007f0 <i2c_write+0xc0>
        SCL_LOW(clk_base);  // new, make sure data change at clk low
81100774:	e0bffd17 	ldw	r2,-12(fp)
81100778:	0007883a 	mov	r3,zero
8110077c:	10c00035 	stwio	r3,0(r2)
        // output data on bus
        if (Data & Mask){ // there is a delay in this command
81100780:	e0ffff03 	ldbu	r3,-4(fp)
81100784:	e0bffa03 	ldbu	r2,-24(fp)
81100788:	1884703a 	and	r2,r3,r2
8110078c:	10803fcc 	andi	r2,r2,255
81100790:	10000426 	beq	r2,zero,811007a4 <i2c_write+0x74>
            SDA_HIGH(data_base);
81100794:	e0bffe17 	ldw	r2,-8(fp)
81100798:	00c00044 	movi	r3,1
8110079c:	10c00035 	stwio	r3,0(r2)
811007a0:	00000306 	br	811007b0 <i2c_write+0x80>
        }else{    
            SDA_LOW(data_base);
811007a4:	e0bffe17 	ldw	r2,-8(fp)
811007a8:	0007883a 	mov	r3,zero
811007ac:	10c00035 	stwio	r3,0(r2)
        }
        Mask >>= 1; // there is a delay in this command
811007b0:	e0bffa03 	ldbu	r2,-24(fp)
811007b4:	1004d07a 	srli	r2,r2,1
811007b8:	e0bffa05 	stb	r2,-24(fp)
        // clock high
        SCL_HIGH(clk_base);
811007bc:	e0bffd17 	ldw	r2,-12(fp)
811007c0:	00c00044 	movi	r3,1
811007c4:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
811007c8:	01000044 	movi	r4,1
811007cc:	11122580 	call	81112258 <usleep>
        SCL_LOW(clk_base);
811007d0:	e0bffd17 	ldw	r2,-12(fp)
811007d4:	0007883a 	mov	r3,zero
811007d8:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
811007dc:	01000044 	movi	r4,1
811007e0:	11122580 	call	81112258 <usleep>
    
    // assume, SCL = 0
    
    SDA_DIR_OUT(data_base);  // data write mode
    
    for(i=0;i<8;i++){
811007e4:	e0bffb17 	ldw	r2,-20(fp)
811007e8:	10800044 	addi	r2,r2,1
811007ec:	e0bffb15 	stw	r2,-20(fp)
811007f0:	e0bffb17 	ldw	r2,-20(fp)
811007f4:	10800210 	cmplti	r2,r2,8
811007f8:	103fde1e 	bne	r2,zero,81100774 <__reset+0xfb0e0774>
        SCL_LOW(clk_base);
        SCL_DELAY;
    }
    
    //===== get ack
    SDA_DIR_IN(data_base);  // data read mode
811007fc:	e0bffe17 	ldw	r2,-8(fp)
81100800:	10800104 	addi	r2,r2,4
81100804:	0007883a 	mov	r3,zero
81100808:	10c00035 	stwio	r3,0(r2)
    //SCL_DELAY;
    // clock high
    SCL_HIGH(clk_base);  // clock high
8110080c:	e0bffd17 	ldw	r2,-12(fp)
81100810:	00c00044 	movi	r3,1
81100814:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;  // clock high delay
81100818:	01000044 	movi	r4,1
8110081c:	11122580 	call	81112258 <usleep>
    bAck = SDA_READ(data_base)?FALSE:TRUE;  // get ack
81100820:	e0bffe17 	ldw	r2,-8(fp)
81100824:	10800037 	ldwio	r2,0(r2)
81100828:	1005003a 	cmpeq	r2,r2,zero
8110082c:	10803fcc 	andi	r2,r2,255
81100830:	e0bffc15 	stw	r2,-16(fp)
    //SCL_DELAY;
    //SDA_DIR_OUT;
    SCL_LOW(clk_base); // clock low         
81100834:	e0bffd17 	ldw	r2,-12(fp)
81100838:	0007883a 	mov	r3,zero
8110083c:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
81100840:	01000044 	movi	r4,1
81100844:	11122580 	call	81112258 <usleep>
    return bAck;
81100848:	e0bffc17 	ldw	r2,-16(fp)
}    
8110084c:	e037883a 	mov	sp,fp
81100850:	dfc00117 	ldw	ra,4(sp)
81100854:	df000017 	ldw	fp,0(sp)
81100858:	dec00204 	addi	sp,sp,8
8110085c:	f800283a 	ret

81100860 <i2c_read>:

void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck){ // return true if device response ack
81100860:	defff804 	addi	sp,sp,-32
81100864:	dfc00715 	stw	ra,28(sp)
81100868:	df000615 	stw	fp,24(sp)
8110086c:	df000604 	addi	fp,sp,24
81100870:	e13ffc15 	stw	r4,-16(fp)
81100874:	e17ffd15 	stw	r5,-12(fp)
81100878:	e1bffe15 	stw	r6,-8(fp)
8110087c:	e1ffff15 	stw	r7,-4(fp)
    alt_u8 Data=0;
81100880:	e03ffa05 	stb	zero,-24(fp)
    int i;
    
    // assume SCL = low
    
    SDA_DIR_IN(data_base);  // set data read mode
81100884:	e0bffd17 	ldw	r2,-12(fp)
81100888:	10800104 	addi	r2,r2,4
8110088c:	0007883a 	mov	r3,zero
81100890:	10c00035 	stwio	r3,0(r2)
    SCL_LOW(clk_base); // clock low
81100894:	e0bffc17 	ldw	r2,-16(fp)
81100898:	0007883a 	mov	r3,zero
8110089c:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
811008a0:	01000044 	movi	r4,1
811008a4:	11122580 	call	81112258 <usleep>

    for(i=0;i<8;i++){
811008a8:	e03ffb15 	stw	zero,-20(fp)
811008ac:	00001606 	br	81100908 <i2c_read+0xa8>
        Data <<= 1;
811008b0:	e0bffa03 	ldbu	r2,-24(fp)
811008b4:	1085883a 	add	r2,r2,r2
811008b8:	e0bffa05 	stb	r2,-24(fp)
        SCL_HIGH(clk_base);  // clock high
811008bc:	e0bffc17 	ldw	r2,-16(fp)
811008c0:	00c00044 	movi	r3,1
811008c4:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
811008c8:	01000044 	movi	r4,1
811008cc:	11122580 	call	81112258 <usleep>
        if (SDA_READ(data_base))  // read data   
811008d0:	e0bffd17 	ldw	r2,-12(fp)
811008d4:	10800037 	ldwio	r2,0(r2)
811008d8:	10000326 	beq	r2,zero,811008e8 <i2c_read+0x88>
            Data |= 0x01;
811008dc:	e0bffa03 	ldbu	r2,-24(fp)
811008e0:	10800054 	ori	r2,r2,1
811008e4:	e0bffa05 	stb	r2,-24(fp)
        SCL_LOW(clk_base);  // clock log  
811008e8:	e0bffc17 	ldw	r2,-16(fp)
811008ec:	0007883a 	mov	r3,zero
811008f0:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
811008f4:	01000044 	movi	r4,1
811008f8:	11122580 	call	81112258 <usleep>
    
    SDA_DIR_IN(data_base);  // set data read mode
    SCL_LOW(clk_base); // clock low
    SCL_DELAY; // clock low delay

    for(i=0;i<8;i++){
811008fc:	e0bffb17 	ldw	r2,-20(fp)
81100900:	10800044 	addi	r2,r2,1
81100904:	e0bffb15 	stw	r2,-20(fp)
81100908:	e0bffb17 	ldw	r2,-20(fp)
8110090c:	10800210 	cmplti	r2,r2,8
81100910:	103fe71e 	bne	r2,zero,811008b0 <__reset+0xfb0e08b0>
        SCL_LOW(clk_base);  // clock log  
        SCL_DELAY;
    }
    
    // send ACK
    SCL_LOW(clk_base);  // new, make sure data change at clk low
81100914:	e0bffc17 	ldw	r2,-16(fp)
81100918:	0007883a 	mov	r3,zero
8110091c:	10c00035 	stwio	r3,0(r2)
    SDA_DIR_OUT(data_base);  // set data write mode
81100920:	e0bffd17 	ldw	r2,-12(fp)
81100924:	10800104 	addi	r2,r2,4
81100928:	1007883a 	mov	r3,r2
8110092c:	00800044 	movi	r2,1
81100930:	18800035 	stwio	r2,0(r3)
    if (bAck)
81100934:	e0bfff17 	ldw	r2,-4(fp)
81100938:	10000426 	beq	r2,zero,8110094c <i2c_read+0xec>
        SDA_LOW(data_base);
8110093c:	e0bffd17 	ldw	r2,-12(fp)
81100940:	0007883a 	mov	r3,zero
81100944:	10c00035 	stwio	r3,0(r2)
81100948:	00000306 	br	81100958 <i2c_read+0xf8>
    else
        SDA_HIGH(data_base);
8110094c:	e0bffd17 	ldw	r2,-12(fp)
81100950:	00c00044 	movi	r3,1
81100954:	10c00035 	stwio	r3,0(r2)
    SCL_HIGH(clk_base); // clock high
81100958:	e0bffc17 	ldw	r2,-16(fp)
8110095c:	00c00044 	movi	r3,1
81100960:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock high  delay
81100964:	01000044 	movi	r4,1
81100968:	11122580 	call	81112258 <usleep>
    SCL_LOW(clk_base); // clock low
8110096c:	e0bffc17 	ldw	r2,-16(fp)
81100970:	0007883a 	mov	r3,zero
81100974:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
81100978:	01000044 	movi	r4,1
8110097c:	11122580 	call	81112258 <usleep>
    SDA_LOW(data_base);  // data low
81100980:	e0bffd17 	ldw	r2,-12(fp)
81100984:	0007883a 	mov	r3,zero
81100988:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // data low delay
8110098c:	01000044 	movi	r4,1
81100990:	11122580 	call	81112258 <usleep>
//    SDA_DIR_IN;  // set data read mode
    
    *pData = Data;
81100994:	e0bffe17 	ldw	r2,-8(fp)
81100998:	e0fffa03 	ldbu	r3,-24(fp)
8110099c:	10c00005 	stb	r3,0(r2)
}
811009a0:	0001883a 	nop
811009a4:	e037883a 	mov	sp,fp
811009a8:	dfc00117 	ldw	ra,4(sp)
811009ac:	df000017 	ldw	fp,0(sp)
811009b0:	dec00204 	addi	sp,sp,8
811009b4:	f800283a 	ret

811009b8 <LEDS_BOARD_DRIVE>:
 * @param [in] LedsMask  Mascara de leds a serem modificados
 *
 * @retval TRUE : Sucesso
 *
 */
bool LEDS_BOARD_DRIVE(bool bDRIVE, alt_u8 LedsMask){
811009b8:	defffd04 	addi	sp,sp,-12
811009bc:	df000215 	stw	fp,8(sp)
811009c0:	df000204 	addi	fp,sp,8
811009c4:	e13ffe15 	stw	r4,-8(fp)
811009c8:	2805883a 	mov	r2,r5
811009cc:	e0bfff05 	stb	r2,-4(fp)

  if (bDRIVE == LEDS_ON){
811009d0:	e0bffe17 	ldw	r2,-8(fp)
811009d4:	10800058 	cmpnei	r2,r2,1
811009d8:	1000051e 	bne	r2,zero,811009f0 <LEDS_BOARD_DRIVE+0x38>
	LedsBoardControl |= LedsMask;
811009dc:	d0e01503 	ldbu	r3,-32684(gp)
811009e0:	e0bfff03 	ldbu	r2,-4(fp)
811009e4:	1884b03a 	or	r2,r3,r2
811009e8:	d0a01505 	stb	r2,-32684(gp)
811009ec:	00000606 	br	81100a08 <LEDS_BOARD_DRIVE+0x50>
  } else {
	LedsBoardControl &= (~LedsMask);
811009f0:	e0bfff03 	ldbu	r2,-4(fp)
811009f4:	0084303a 	nor	r2,zero,r2
811009f8:	1007883a 	mov	r3,r2
811009fc:	d0a01503 	ldbu	r2,-32684(gp)
81100a00:	1884703a 	and	r2,r3,r2
81100a04:	d0a01505 	stb	r2,-32684(gp)
  }
  IOWR_ALTERA_AVALON_PIO_DATA(LEDS_BOARD_BASE, LedsBoardControl);
81100a08:	d0a01503 	ldbu	r2,-32684(gp)
81100a0c:	10c03fcc 	andi	r3,r2,255
81100a10:	00a00034 	movhi	r2,32768
81100a14:	10805404 	addi	r2,r2,336
81100a18:	10c00035 	stwio	r3,0(r2)

  return TRUE;
81100a1c:	00800044 	movi	r2,1
}
81100a20:	e037883a 	mov	sp,fp
81100a24:	df000017 	ldw	fp,0(sp)
81100a28:	dec00104 	addi	sp,sp,4
81100a2c:	f800283a 	ret

81100a30 <LEDS_PAINEL_DRIVE>:
 * @param [in] LedsMask  Mascara de leds a serem modificados
 *
 * @retval TRUE : Sucesso
 *
 */
bool LEDS_PAINEL_DRIVE(bool bDRIVE, alt_u16 LedsMask){
81100a30:	defffd04 	addi	sp,sp,-12
81100a34:	df000215 	stw	fp,8(sp)
81100a38:	df000204 	addi	fp,sp,8
81100a3c:	e13ffe15 	stw	r4,-8(fp)
81100a40:	2805883a 	mov	r2,r5
81100a44:	e0bfff0d 	sth	r2,-4(fp)

  if (bDRIVE == LEDS_ON){
81100a48:	e0bffe17 	ldw	r2,-8(fp)
81100a4c:	10800058 	cmpnei	r2,r2,1
81100a50:	1000051e 	bne	r2,zero,81100a68 <LEDS_PAINEL_DRIVE+0x38>
	LedsPainelControl |= LedsMask;
81100a54:	d0e0158b 	ldhu	r3,-32682(gp)
81100a58:	e0bfff0b 	ldhu	r2,-4(fp)
81100a5c:	1884b03a 	or	r2,r3,r2
81100a60:	d0a0158d 	sth	r2,-32682(gp)
81100a64:	00000606 	br	81100a80 <LEDS_PAINEL_DRIVE+0x50>
  } else {
	LedsPainelControl &= (~LedsMask);
81100a68:	e0bfff0b 	ldhu	r2,-4(fp)
81100a6c:	0084303a 	nor	r2,zero,r2
81100a70:	1007883a 	mov	r3,r2
81100a74:	d0a0158b 	ldhu	r2,-32682(gp)
81100a78:	1884703a 	and	r2,r3,r2
81100a7c:	d0a0158d 	sth	r2,-32682(gp)
  }
  IOWR_ALTERA_AVALON_PIO_DATA(LEDS_PAINEL_BASE, LedsPainelControl);
81100a80:	d0a0158b 	ldhu	r2,-32682(gp)
81100a84:	10ffffcc 	andi	r3,r2,65535
81100a88:	00a00034 	movhi	r2,32768
81100a8c:	10801404 	addi	r2,r2,80
81100a90:	10c00035 	stwio	r3,0(r2)

  return TRUE;
81100a94:	00800044 	movi	r2,1
}
81100a98:	e037883a 	mov	sp,fp
81100a9c:	df000017 	ldw	fp,0(sp)
81100aa0:	dec00104 	addi	sp,sp,4
81100aa4:	f800283a 	ret

81100aa8 <POWER_SPI_RW>:
#define SPI_DELAY     usleep(15)  // based on 50MHZ of CPU clock


// Note. SCK: typical 19.2KHZ (53 ms)
bool POWER_SPI_RW(alt_u8 IcIndex, alt_u8 NextChannel, bool bEN, bool bSIGN, bool bSGL, alt_u32 *pValue)
{
81100aa8:	defff204 	addi	sp,sp,-56
81100aac:	dfc00d15 	stw	ra,52(sp)
81100ab0:	df000c15 	stw	fp,48(sp)
81100ab4:	df000c04 	addi	fp,sp,48
81100ab8:	2007883a 	mov	r3,r4
81100abc:	2805883a 	mov	r2,r5
81100ac0:	e1bffe15 	stw	r6,-8(fp)
81100ac4:	e1ffff15 	stw	r7,-4(fp)
81100ac8:	e0fffc05 	stb	r3,-16(fp)
81100acc:	e0bffd05 	stb	r2,-12(fp)
    bool bSuccess;
    alt_u8 Config8;
    alt_u32 Value32=0, Mask32;
81100ad0:	e03ff515 	stw	zero,-44(fp)
    int i, nWait = 0, nZeroCnt;
81100ad4:	e03ff815 	stw	zero,-32(fp)
    const int nMaxWait = 1000000;
81100ad8:	008003f4 	movhi	r2,15
81100adc:	10909004 	addi	r2,r2,16960
81100ae0:	e0bffa15 	stw	r2,-24(fp)
    
    //
    Config8 = 0x80; 
81100ae4:	00bfe004 	movi	r2,-128
81100ae8:	e0bff405 	stb	r2,-48(fp)
    Config8 |= (bEN)?0x20:0x00;
81100aec:	e0bffe17 	ldw	r2,-8(fp)
81100af0:	10000226 	beq	r2,zero,81100afc <POWER_SPI_RW+0x54>
81100af4:	00800804 	movi	r2,32
81100af8:	00000106 	br	81100b00 <POWER_SPI_RW+0x58>
81100afc:	0005883a 	mov	r2,zero
81100b00:	e0fff403 	ldbu	r3,-48(fp)
81100b04:	10c4b03a 	or	r2,r2,r3
81100b08:	e0bff405 	stb	r2,-48(fp)
    Config8 |= (bSGL)?0x10:0x00;
81100b0c:	e0800217 	ldw	r2,8(fp)
81100b10:	10000226 	beq	r2,zero,81100b1c <POWER_SPI_RW+0x74>
81100b14:	00800404 	movi	r2,16
81100b18:	00000106 	br	81100b20 <POWER_SPI_RW+0x78>
81100b1c:	0005883a 	mov	r2,zero
81100b20:	e0fff403 	ldbu	r3,-48(fp)
81100b24:	10c4b03a 	or	r2,r2,r3
81100b28:	e0bff405 	stb	r2,-48(fp)
    Config8 |= (bSIGN)?0x08:0x00;
81100b2c:	e0bfff17 	ldw	r2,-4(fp)
81100b30:	10000226 	beq	r2,zero,81100b3c <POWER_SPI_RW+0x94>
81100b34:	00800204 	movi	r2,8
81100b38:	00000106 	br	81100b40 <POWER_SPI_RW+0x98>
81100b3c:	0005883a 	mov	r2,zero
81100b40:	e0fff403 	ldbu	r3,-48(fp)
81100b44:	10c4b03a 	or	r2,r2,r3
81100b48:	e0bff405 	stb	r2,-48(fp)
    Config8 |= NextChannel & 0x07; // channel
81100b4c:	e0bffd03 	ldbu	r2,-12(fp)
81100b50:	108001cc 	andi	r2,r2,7
81100b54:	1007883a 	mov	r3,r2
81100b58:	e0bff403 	ldbu	r2,-48(fp)
81100b5c:	1884b03a 	or	r2,r3,r2
81100b60:	e0bff405 	stb	r2,-48(fp)
    
    SPI_FO(0); // use internal conversion clock
81100b64:	0007883a 	mov	r3,zero
81100b68:	00a00034 	movhi	r2,32768
81100b6c:	10801804 	addi	r2,r2,96
81100b70:	10c00035 	stwio	r3,0(r2)
    SPI_SCK(0);  // set low to active extenal serial clock mode.
81100b74:	0007883a 	mov	r3,zero
81100b78:	00a00034 	movhi	r2,32768
81100b7c:	10802004 	addi	r2,r2,128
81100b80:	10c00035 	stwio	r3,0(r2)
    SPI_CS_N(IcIndex, 0);  // chip select: active
81100b84:	e0bffc03 	ldbu	r2,-16(fp)
81100b88:	1000021e 	bne	r2,zero,81100b94 <POWER_SPI_RW+0xec>
81100b8c:	00c00084 	movi	r3,2
81100b90:	00000106 	br	81100b98 <POWER_SPI_RW+0xf0>
81100b94:	00c00044 	movi	r3,1
81100b98:	00a00034 	movhi	r2,32768
81100b9c:	10801c04 	addi	r2,r2,112
81100ba0:	10c00035 	stwio	r3,0(r2)
    SPI_DELAY;
81100ba4:	010003c4 	movi	r4,15
81100ba8:	11122580 	call	81112258 <usleep>
    
    // wait for converion end (when conversion done, SPI_SDO is low)
    while(SPI_SDO && nWait < nMaxWait){
81100bac:	00000306 	br	81100bbc <POWER_SPI_RW+0x114>
        nWait++;
81100bb0:	e0bff817 	ldw	r2,-32(fp)
81100bb4:	10800044 	addi	r2,r2,1
81100bb8:	e0bff815 	stw	r2,-32(fp)
    SPI_SCK(0);  // set low to active extenal serial clock mode.
    SPI_CS_N(IcIndex, 0);  // chip select: active
    SPI_DELAY;
    
    // wait for converion end (when conversion done, SPI_SDO is low)
    while(SPI_SDO && nWait < nMaxWait){
81100bbc:	00a00034 	movhi	r2,32768
81100bc0:	10802804 	addi	r2,r2,160
81100bc4:	10800037 	ldwio	r2,0(r2)
81100bc8:	1080004c 	andi	r2,r2,1
81100bcc:	10000326 	beq	r2,zero,81100bdc <POWER_SPI_RW+0x134>
81100bd0:	e0fff817 	ldw	r3,-32(fp)
81100bd4:	e0bffa17 	ldw	r2,-24(fp)
81100bd8:	18bff516 	blt	r3,r2,81100bb0 <__reset+0xfb0e0bb0>
        nWait++;
    }
    
    if (SPI_SDO){
81100bdc:	00a00034 	movhi	r2,32768
81100be0:	10802804 	addi	r2,r2,160
81100be4:	10800037 	ldwio	r2,0(r2)
81100be8:	1080004c 	andi	r2,r2,1
81100bec:	10000626 	beq	r2,zero,81100c08 <POWER_SPI_RW+0x160>
        SPI_CS_N(IcIndex, 1);  // chip select: inactive
81100bf0:	00c000c4 	movi	r3,3
81100bf4:	00a00034 	movhi	r2,32768
81100bf8:	10801c04 	addi	r2,r2,112
81100bfc:	10c00035 	stwio	r3,0(r2)
//        printf("Timeout \r\n");
        return FALSE;
81100c00:	0005883a 	mov	r2,zero
81100c04:	0000db06 	br	81100f74 <POWER_SPI_RW+0x4cc>
    }
    
    for(i=0;i<2;i++) // send config bits 7:6,
81100c08:	e03ff715 	stw	zero,-36(fp)
81100c0c:	00002406 	br	81100ca0 <POWER_SPI_RW+0x1f8>
    // ignore EOC/ and DMY bits
    {
        SPI_SDI((Config8 & 0x80)?1:0);//sdi=nextch.7; // put data on pin
81100c10:	e0bff403 	ldbu	r2,-48(fp)
81100c14:	10803fcc 	andi	r2,r2,255
81100c18:	1004d1fa 	srli	r2,r2,7
81100c1c:	10c03fcc 	andi	r3,r2,255
81100c20:	00a00034 	movhi	r2,32768
81100c24:	10802404 	addi	r2,r2,144
81100c28:	10c00035 	stwio	r3,0(r2)
        Config8 <<= 1; //nextch = rl(nextch); // get next config bit ready
81100c2c:	e0bff403 	ldbu	r2,-48(fp)
81100c30:	1085883a 	add	r2,r2,r2
81100c34:	e0bff405 	stb	r2,-48(fp)
        Value32 <<= 1;//result_0 = rl(result_0);// get ready to load lsb
81100c38:	e0bff517 	ldw	r2,-44(fp)
81100c3c:	1085883a 	add	r2,r2,r2
81100c40:	e0bff515 	stw	r2,-44(fp)
        Value32 |= SPI_SDO;//result_0.0 = sdo; // load lsb
81100c44:	00a00034 	movhi	r2,32768
81100c48:	10802804 	addi	r2,r2,160
81100c4c:	10800037 	ldwio	r2,0(r2)
81100c50:	1080004c 	andi	r2,r2,1
81100c54:	1007883a 	mov	r3,r2
81100c58:	e0bff517 	ldw	r2,-44(fp)
81100c5c:	10c4b03a 	or	r2,r2,r3
81100c60:	e0bff515 	stw	r2,-44(fp)
        
        SPI_SCK(1);//sck=1; // clock high
81100c64:	00c00044 	movi	r3,1
81100c68:	00a00034 	movhi	r2,32768
81100c6c:	10802004 	addi	r2,r2,128
81100c70:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
81100c74:	010003c4 	movi	r4,15
81100c78:	11122580 	call	81112258 <usleep>
        SPI_SCK(0);//sck=0; // clock low
81100c7c:	0007883a 	mov	r3,zero
81100c80:	00a00034 	movhi	r2,32768
81100c84:	10802004 	addi	r2,r2,128
81100c88:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
81100c8c:	010003c4 	movi	r4,15
81100c90:	11122580 	call	81112258 <usleep>
        SPI_CS_N(IcIndex, 1);  // chip select: inactive
//        printf("Timeout \r\n");
        return FALSE;
    }
    
    for(i=0;i<2;i++) // send config bits 7:6,
81100c94:	e0bff717 	ldw	r2,-36(fp)
81100c98:	10800044 	addi	r2,r2,1
81100c9c:	e0bff715 	stw	r2,-36(fp)
81100ca0:	e0bff717 	ldw	r2,-36(fp)
81100ca4:	10800090 	cmplti	r2,r2,2
81100ca8:	103fd91e 	bne	r2,zero,81100c10 <__reset+0xfb0e0c10>
        SPI_DELAY;
        SPI_SCK(0);//sck=0; // clock low
        SPI_DELAY;
    }
    
    for(i=0;i<8;i++) // send config, read byte 3
81100cac:	e03ff715 	stw	zero,-36(fp)
81100cb0:	00002406 	br	81100d44 <POWER_SPI_RW+0x29c>
    {
        SPI_SDI((Config8 & 0x80)?1:0);//sdi=nextch.7; // put data on pin
81100cb4:	e0bff403 	ldbu	r2,-48(fp)
81100cb8:	10803fcc 	andi	r2,r2,255
81100cbc:	1004d1fa 	srli	r2,r2,7
81100cc0:	10c03fcc 	andi	r3,r2,255
81100cc4:	00a00034 	movhi	r2,32768
81100cc8:	10802404 	addi	r2,r2,144
81100ccc:	10c00035 	stwio	r3,0(r2)
        Config8 <<= 1; //nextch = rl(nextch); // get next config bit ready
81100cd0:	e0bff403 	ldbu	r2,-48(fp)
81100cd4:	1085883a 	add	r2,r2,r2
81100cd8:	e0bff405 	stb	r2,-48(fp)
        
        Value32 <<= 1; //result_3 = rl(result_3);// get ready to load lsb
81100cdc:	e0bff517 	ldw	r2,-44(fp)
81100ce0:	1085883a 	add	r2,r2,r2
81100ce4:	e0bff515 	stw	r2,-44(fp)
        Value32 |= SPI_SDO; //result_3.0 = sdo; // load lsb
81100ce8:	00a00034 	movhi	r2,32768
81100cec:	10802804 	addi	r2,r2,160
81100cf0:	10800037 	ldwio	r2,0(r2)
81100cf4:	1080004c 	andi	r2,r2,1
81100cf8:	1007883a 	mov	r3,r2
81100cfc:	e0bff517 	ldw	r2,-44(fp)
81100d00:	10c4b03a 	or	r2,r2,r3
81100d04:	e0bff515 	stw	r2,-44(fp)
        
        SPI_SCK(1);//sck=1; // clock high
81100d08:	00c00044 	movi	r3,1
81100d0c:	00a00034 	movhi	r2,32768
81100d10:	10802004 	addi	r2,r2,128
81100d14:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
81100d18:	010003c4 	movi	r4,15
81100d1c:	11122580 	call	81112258 <usleep>
        SPI_SCK(0);//sck=0; // clock low
81100d20:	0007883a 	mov	r3,zero
81100d24:	00a00034 	movhi	r2,32768
81100d28:	10802004 	addi	r2,r2,128
81100d2c:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
81100d30:	010003c4 	movi	r4,15
81100d34:	11122580 	call	81112258 <usleep>
        SPI_DELAY;
        SPI_SCK(0);//sck=0; // clock low
        SPI_DELAY;
    }
    
    for(i=0;i<8;i++) // send config, read byte 3
81100d38:	e0bff717 	ldw	r2,-36(fp)
81100d3c:	10800044 	addi	r2,r2,1
81100d40:	e0bff715 	stw	r2,-36(fp)
81100d44:	e0bff717 	ldw	r2,-36(fp)
81100d48:	10800210 	cmplti	r2,r2,8
81100d4c:	103fd91e 	bne	r2,zero,81100cb4 <__reset+0xfb0e0cb4>
        SPI_DELAY;
        SPI_SCK(0);//sck=0; // clock low
        SPI_DELAY;
    }
    
    for(i=0;i<8;i++) // read byte 2
81100d50:	e03ff715 	stw	zero,-36(fp)
81100d54:	00001a06 	br	81100dc0 <POWER_SPI_RW+0x318>
    {
        Value32 <<= 1; //result_2 = rl(result_2);// get ready to load lsb
81100d58:	e0bff517 	ldw	r2,-44(fp)
81100d5c:	1085883a 	add	r2,r2,r2
81100d60:	e0bff515 	stw	r2,-44(fp)
        Value32 |= SPI_SDO; //result_2.0 = sdo; // load lsb
81100d64:	00a00034 	movhi	r2,32768
81100d68:	10802804 	addi	r2,r2,160
81100d6c:	10800037 	ldwio	r2,0(r2)
81100d70:	1080004c 	andi	r2,r2,1
81100d74:	1007883a 	mov	r3,r2
81100d78:	e0bff517 	ldw	r2,-44(fp)
81100d7c:	10c4b03a 	or	r2,r2,r3
81100d80:	e0bff515 	stw	r2,-44(fp)
        
        SPI_SCK(1);//sck=1; // clock high
81100d84:	00c00044 	movi	r3,1
81100d88:	00a00034 	movhi	r2,32768
81100d8c:	10802004 	addi	r2,r2,128
81100d90:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
81100d94:	010003c4 	movi	r4,15
81100d98:	11122580 	call	81112258 <usleep>
        SPI_SCK(0);//sck=0; // clock low
81100d9c:	0007883a 	mov	r3,zero
81100da0:	00a00034 	movhi	r2,32768
81100da4:	10802004 	addi	r2,r2,128
81100da8:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
81100dac:	010003c4 	movi	r4,15
81100db0:	11122580 	call	81112258 <usleep>
        SPI_DELAY;
        SPI_SCK(0);//sck=0; // clock low
        SPI_DELAY;
    }
    
    for(i=0;i<8;i++) // read byte 2
81100db4:	e0bff717 	ldw	r2,-36(fp)
81100db8:	10800044 	addi	r2,r2,1
81100dbc:	e0bff715 	stw	r2,-36(fp)
81100dc0:	e0bff717 	ldw	r2,-36(fp)
81100dc4:	10800210 	cmplti	r2,r2,8
81100dc8:	103fe31e 	bne	r2,zero,81100d58 <__reset+0xfb0e0d58>
        SPI_DELAY;
        SPI_SCK(0);//sck=0; // clock low
        SPI_DELAY;
    }
    
    for(i=0;i<8;i++) // read byte 1
81100dcc:	e03ff715 	stw	zero,-36(fp)
81100dd0:	00001a06 	br	81100e3c <POWER_SPI_RW+0x394>
    {
        Value32 <<= 1; //result_1 = rl(result_1);// get ready to load lsb
81100dd4:	e0bff517 	ldw	r2,-44(fp)
81100dd8:	1085883a 	add	r2,r2,r2
81100ddc:	e0bff515 	stw	r2,-44(fp)
        Value32 |= SPI_SDO;//result_1.0 = sdo; // load lsb
81100de0:	00a00034 	movhi	r2,32768
81100de4:	10802804 	addi	r2,r2,160
81100de8:	10800037 	ldwio	r2,0(r2)
81100dec:	1080004c 	andi	r2,r2,1
81100df0:	1007883a 	mov	r3,r2
81100df4:	e0bff517 	ldw	r2,-44(fp)
81100df8:	10c4b03a 	or	r2,r2,r3
81100dfc:	e0bff515 	stw	r2,-44(fp)
        
        SPI_SCK(1);//sck=1; // clock high
81100e00:	00c00044 	movi	r3,1
81100e04:	00a00034 	movhi	r2,32768
81100e08:	10802004 	addi	r2,r2,128
81100e0c:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
81100e10:	010003c4 	movi	r4,15
81100e14:	11122580 	call	81112258 <usleep>
        SPI_SCK(0);//sck=0; // clock low
81100e18:	0007883a 	mov	r3,zero
81100e1c:	00a00034 	movhi	r2,32768
81100e20:	10802004 	addi	r2,r2,128
81100e24:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
81100e28:	010003c4 	movi	r4,15
81100e2c:	11122580 	call	81112258 <usleep>
        SPI_DELAY;
        SPI_SCK(0);//sck=0; // clock low
        SPI_DELAY;
    }
    
    for(i=0;i<8;i++) // read byte 1
81100e30:	e0bff717 	ldw	r2,-36(fp)
81100e34:	10800044 	addi	r2,r2,1
81100e38:	e0bff715 	stw	r2,-36(fp)
81100e3c:	e0bff717 	ldw	r2,-36(fp)
81100e40:	10800210 	cmplti	r2,r2,8
81100e44:	103fe31e 	bne	r2,zero,81100dd4 <__reset+0xfb0e0dd4>
        SPI_DELAY;
        SPI_SCK(0);//sck=0; // clock low
        SPI_DELAY;
    }
    
    for(i=0;i<6;i++) // read byte 0
81100e48:	e03ff715 	stw	zero,-36(fp)
81100e4c:	00001a06 	br	81100eb8 <POWER_SPI_RW+0x410>
    {
        Value32 <<= 1;//result_0 = rl(result_0);// get ready to load lsb
81100e50:	e0bff517 	ldw	r2,-44(fp)
81100e54:	1085883a 	add	r2,r2,r2
81100e58:	e0bff515 	stw	r2,-44(fp)
        Value32 |= SPI_SDO;//result_0.0 = sdo; // load lsb
81100e5c:	00a00034 	movhi	r2,32768
81100e60:	10802804 	addi	r2,r2,160
81100e64:	10800037 	ldwio	r2,0(r2)
81100e68:	1080004c 	andi	r2,r2,1
81100e6c:	1007883a 	mov	r3,r2
81100e70:	e0bff517 	ldw	r2,-44(fp)
81100e74:	10c4b03a 	or	r2,r2,r3
81100e78:	e0bff515 	stw	r2,-44(fp)
        
        SPI_SCK(1);//sck=1; // clock high
81100e7c:	00c00044 	movi	r3,1
81100e80:	00a00034 	movhi	r2,32768
81100e84:	10802004 	addi	r2,r2,128
81100e88:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
81100e8c:	010003c4 	movi	r4,15
81100e90:	11122580 	call	81112258 <usleep>
        SPI_SCK(0);//sck=0; // clock low
81100e94:	0007883a 	mov	r3,zero
81100e98:	00a00034 	movhi	r2,32768
81100e9c:	10802004 	addi	r2,r2,128
81100ea0:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
81100ea4:	010003c4 	movi	r4,15
81100ea8:	11122580 	call	81112258 <usleep>
        SPI_DELAY;
        SPI_SCK(0);//sck=0; // clock low
        SPI_DELAY;
    }
    
    for(i=0;i<6;i++) // read byte 0
81100eac:	e0bff717 	ldw	r2,-36(fp)
81100eb0:	10800044 	addi	r2,r2,1
81100eb4:	e0bff715 	stw	r2,-36(fp)
81100eb8:	e0bff717 	ldw	r2,-36(fp)
81100ebc:	10800190 	cmplti	r2,r2,6
81100ec0:	103fe31e 	bne	r2,zero,81100e50 <__reset+0xfb0e0e50>
        SPI_SCK(1);//sck=1; // clock high
        SPI_DELAY;
        SPI_SCK(0);//sck=0; // clock low
        SPI_DELAY;
    }
    SPI_SCK(1);
81100ec4:	00c00044 	movi	r3,1
81100ec8:	00a00034 	movhi	r2,32768
81100ecc:	10802004 	addi	r2,r2,128
81100ed0:	10c00035 	stwio	r3,0(r2)
    SPI_DELAY;
81100ed4:	010003c4 	movi	r4,15
81100ed8:	11122580 	call	81112258 <usleep>
    SPI_CS_N(IcIndex, 1);  // chip select: inactive
81100edc:	00c000c4 	movi	r3,3
81100ee0:	00a00034 	movhi	r2,32768
81100ee4:	10801c04 	addi	r2,r2,112
81100ee8:	10c00035 	stwio	r3,0(r2)
    
    // check parity
    nZeroCnt = 0;
81100eec:	e03ff915 	stw	zero,-28(fp)
    Mask32 = 0x01;
81100ef0:	00800044 	movi	r2,1
81100ef4:	e0bff615 	stw	r2,-40(fp)
    for(i=0;i<32;i++){
81100ef8:	e03ff715 	stw	zero,-36(fp)
81100efc:	00000d06 	br	81100f34 <POWER_SPI_RW+0x48c>
        if ((Value32 & Mask32) == 0x00){
81100f00:	e0fff517 	ldw	r3,-44(fp)
81100f04:	e0bff617 	ldw	r2,-40(fp)
81100f08:	1884703a 	and	r2,r3,r2
81100f0c:	1000031e 	bne	r2,zero,81100f1c <POWER_SPI_RW+0x474>
            nZeroCnt++;
81100f10:	e0bff917 	ldw	r2,-28(fp)
81100f14:	10800044 	addi	r2,r2,1
81100f18:	e0bff915 	stw	r2,-28(fp)
        }
        Mask32 <<= 1;
81100f1c:	e0bff617 	ldw	r2,-40(fp)
81100f20:	1085883a 	add	r2,r2,r2
81100f24:	e0bff615 	stw	r2,-40(fp)
    SPI_CS_N(IcIndex, 1);  // chip select: inactive
    
    // check parity
    nZeroCnt = 0;
    Mask32 = 0x01;
    for(i=0;i<32;i++){
81100f28:	e0bff717 	ldw	r2,-36(fp)
81100f2c:	10800044 	addi	r2,r2,1
81100f30:	e0bff715 	stw	r2,-36(fp)
81100f34:	e0bff717 	ldw	r2,-36(fp)
81100f38:	10800810 	cmplti	r2,r2,32
81100f3c:	103ff01e 	bne	r2,zero,81100f00 <__reset+0xfb0e0f00>
        if ((Value32 & Mask32) == 0x00){
            nZeroCnt++;
        }
        Mask32 <<= 1;
    }
    bSuccess = (nZeroCnt&0x01)?FALSE:TRUE;
81100f40:	e0bff917 	ldw	r2,-28(fp)
81100f44:	1080004c 	andi	r2,r2,1
81100f48:	1005003a 	cmpeq	r2,r2,zero
81100f4c:	10803fcc 	andi	r2,r2,255
81100f50:	e0bffb15 	stw	r2,-20(fp)
    if (!bSuccess){
81100f54:	e0bffb17 	ldw	r2,-20(fp)
81100f58:	1000021e 	bne	r2,zero,81100f64 <POWER_SPI_RW+0x4bc>
//        printf("Parity Check Error \r\n");
        return FALSE;
81100f5c:	0005883a 	mov	r2,zero
81100f60:	00000406 	br	81100f74 <POWER_SPI_RW+0x4cc>
    }        
    
    
    *pValue = Value32;
81100f64:	e0800317 	ldw	r2,12(fp)
81100f68:	e0fff517 	ldw	r3,-44(fp)
81100f6c:	10c00015 	stw	r3,0(r2)
    
    return bSuccess;
81100f70:	e0bffb17 	ldw	r2,-20(fp)
}
81100f74:	e037883a 	mov	sp,fp
81100f78:	dfc00117 	ldw	ra,4(sp)
81100f7c:	df000017 	ldw	fp,0(sp)
81100f80:	dec00204 	addi	sp,sp,8
81100f84:	f800283a 	ret

81100f88 <SSDP_CONFIG>:
 *
 * @retval TRUE : Sucesso
 * @retval FALSE : Configuração não especificada
 *
 */
bool SSDP_CONFIG(alt_u8 SsdpConfig){
81100f88:	defffd04 	addi	sp,sp,-12
81100f8c:	df000215 	stw	fp,8(sp)
81100f90:	df000204 	addi	fp,sp,8
81100f94:	2005883a 	mov	r2,r4
81100f98:	e0bfff05 	stb	r2,-4(fp)

    switch(SsdpConfig){
81100f9c:	e0bfff03 	ldbu	r2,-4(fp)
81100fa0:	10c00168 	cmpgeui	r3,r2,5
81100fa4:	18001c1e 	bne	r3,zero,81101018 <SSDP_CONFIG+0x90>
81100fa8:	100690ba 	slli	r3,r2,2
81100fac:	00a04434 	movhi	r2,33040
81100fb0:	1083f004 	addi	r2,r2,4032
81100fb4:	1885883a 	add	r2,r3,r2
81100fb8:	10800017 	ldw	r2,0(r2)
81100fbc:	1000683a 	jmp	r2
81100fc0:	81100fd4 	ori	r4,r16,16447
81100fc4:	81100fe0 	cmpeqi	r4,r16,16447
81100fc8:	81100fec 	andhi	r4,r16,16447
81100fcc:	81101000 	call	88110100 <__reset+0x20f0100>
81100fd0:	81101010 	cmplti	r4,r16,16448
	    case SSDP_NORMAL_MODE:
	        SspdConfigControl = (SSDP_ON_MASK | SSDP_UNLOCK_MASK);
81100fd4:	00800cc4 	movi	r2,51
81100fd8:	d0a01605 	stb	r2,-32680(gp)
	    break;
81100fdc:	00001006 	br	81101020 <SSDP_CONFIG+0x98>
		
	    case SSDP_TEST_MODE:
	        SspdConfigControl = (SSDP_ON_MASK | SSDP_TEST_MASK);
81100fe0:	00801544 	movi	r2,85
81100fe4:	d0a01605 	stb	r2,-32680(gp)
	    break;
81100fe8:	00000d06 	br	81101020 <SSDP_CONFIG+0x98>
		
	    case SSDP_LOCK:
	        SspdConfigControl &= (~SSDP_UNLOCK_MASK);
81100fec:	d0e01603 	ldbu	r3,-32680(gp)
81100ff0:	00bff744 	movi	r2,-35
81100ff4:	1884703a 	and	r2,r3,r2
81100ff8:	d0a01605 	stb	r2,-32680(gp)
	    break;
81100ffc:	00000806 	br	81101020 <SSDP_CONFIG+0x98>
		
	    case SSDP_UNLOCK:
	        SspdConfigControl |= SSDP_UNLOCK_MASK;
81101000:	d0a01603 	ldbu	r2,-32680(gp)
81101004:	10800894 	ori	r2,r2,34
81101008:	d0a01605 	stb	r2,-32680(gp)
	    break;
8110100c:	00000406 	br	81101020 <SSDP_CONFIG+0x98>
		
	    case SSDP_OFF:
	        SspdConfigControl = SSDP_OFF_MASK;
81101010:	d0201605 	stb	zero,-32680(gp)
	    break;
81101014:	00000206 	br	81101020 <SSDP_CONFIG+0x98>
		
		default:
		    return FALSE;
81101018:	0005883a 	mov	r2,zero
8110101c:	00000806 	br	81101040 <SSDP_CONFIG+0xb8>
	}

	alt_u32 *pSsdpAddr = SSDP_BASE;
81101020:	00a00034 	movhi	r2,32768
81101024:	10806404 	addi	r2,r2,400
81101028:	e0bffe15 	stw	r2,-8(fp)
	*(pSsdpAddr + SSDP_CONTROL_REG_OFFSET) = (alt_u32) SspdConfigControl;
8110102c:	d0a01603 	ldbu	r2,-32680(gp)
81101030:	10c03fcc 	andi	r3,r2,255
81101034:	e0bffe17 	ldw	r2,-8(fp)
81101038:	10c00015 	stw	r3,0(r2)
	
	return TRUE;
8110103c:	00800044 	movi	r2,1
}
81101040:	e037883a 	mov	sp,fp
81101044:	df000017 	ldw	fp,0(sp)
81101048:	dec00104 	addi	sp,sp,4
8110104c:	f800283a 	ret

81101050 <SSDP_UPDATE>:
 * @param [in] SsdpData Dado a ser colocado no display de sete segmentos, do tipo unsigned char (alt_u8)
 *
 * @retval TRUE : Sucesso
 *
 */
bool SSDP_UPDATE(alt_u8 SsdpData){
81101050:	defffd04 	addi	sp,sp,-12
81101054:	df000215 	stw	fp,8(sp)
81101058:	df000204 	addi	fp,sp,8
8110105c:	2005883a 	mov	r2,r4
81101060:	e0bfff05 	stb	r2,-4(fp)

	alt_u32 *pSsdpAddr = SSDP_BASE;
81101064:	00a00034 	movhi	r2,32768
81101068:	10806404 	addi	r2,r2,400
8110106c:	e0bffe15 	stw	r2,-8(fp)
	*(pSsdpAddr + SSDP_DATA_REG_OFFSET) = (alt_u32) SsdpData;
81101070:	e0bffe17 	ldw	r2,-8(fp)
81101074:	10800104 	addi	r2,r2,4
81101078:	e0ffff03 	ldbu	r3,-4(fp)
8110107c:	10c00015 	stw	r3,0(r2)
	
	return TRUE;
81101080:	00800044 	movi	r2,1
}
81101084:	e037883a 	mov	sp,fp
81101088:	df000017 	ldw	fp,0(sp)
8110108c:	dec00104 	addi	sp,sp,4
81101090:	f800283a 	ret

81101094 <DDR2_EEPROM_TEST>:
 * @param [in] MemoryId  ID da mémoria a ser testada
 *
 * @retval TRUE : Sucesso
 *
 */
bool DDR2_EEPROM_TEST(alt_u8 MemoryId){
81101094:	defff604 	addi	sp,sp,-40
81101098:	dfc00915 	stw	ra,36(sp)
8110109c:	df000815 	stw	fp,32(sp)
811010a0:	df000804 	addi	fp,sp,32
811010a4:	2005883a 	mov	r2,r4
811010a8:	e0bfff05 	stb	r2,-4(fp)

  printf("===== DE4 DDR2 EEPROM Test =====\n");
811010ac:	01204474 	movhi	r4,33041
811010b0:	211bf104 	addi	r4,r4,28612
811010b4:	11058d80 	call	811058d8 <puts>
  const alt_u8 DeviceAddr = DDR2_EEPROM_I2C_ADDRESS;
811010b8:	00bfe804 	movi	r2,-96
811010bc:	e0bffd05 	stb	r2,-12(fp)
  bool bSuccess;
  alt_u32 I2cSclBase;
  alt_u32 I2cSdaBase;
  int i;
  
  bSuccess = TRUE;
811010c0:	00800044 	movi	r2,1
811010c4:	e0bff915 	stw	r2,-28(fp)
  switch (MemoryId) {
811010c8:	e0bfff03 	ldbu	r2,-4(fp)
811010cc:	10c00060 	cmpeqi	r3,r2,1
811010d0:	1800031e 	bne	r3,zero,811010e0 <DDR2_EEPROM_TEST+0x4c>
811010d4:	108000a0 	cmpeqi	r2,r2,2
811010d8:	1000081e 	bne	r2,zero,811010fc <DDR2_EEPROM_TEST+0x68>
811010dc:	00000e06 	br	81101118 <DDR2_EEPROM_TEST+0x84>
    case DDR2_M1_ID:
      I2cSclBase = DDR2_M1_EEPROM_I2C_SCL_BASE;
811010e0:	00a00034 	movhi	r2,32768
811010e4:	10805c04 	addi	r2,r2,368
811010e8:	e0bffa15 	stw	r2,-24(fp)
      I2cSdaBase = DDR2_M1_EEPROM_I2C_SDA_BASE;
811010ec:	00a00034 	movhi	r2,32768
811010f0:	10806004 	addi	r2,r2,384
811010f4:	e0bffb15 	stw	r2,-20(fp)
    break;
811010f8:	00000d06 	br	81101130 <DDR2_EEPROM_TEST+0x9c>
    case DDR2_M2_ID:
      I2cSclBase = DDR2_M2_EEPROM_I2C_SCL_BASE;
811010fc:	00a00034 	movhi	r2,32768
81101100:	10802c04 	addi	r2,r2,176
81101104:	e0bffa15 	stw	r2,-24(fp)
      I2cSdaBase = DDR2_M2_EEPROM_I2C_SDA_BASE;      
81101108:	00a00034 	movhi	r2,32768
8110110c:	10803004 	addi	r2,r2,192
81101110:	e0bffb15 	stw	r2,-20(fp)
    break;
81101114:	00000606 	br	81101130 <DDR2_EEPROM_TEST+0x9c>
    default:
      bSuccess = FALSE;
81101118:	e03ff915 	stw	zero,-28(fp)
	  printf("DR2 Memory ID not identified!! Aborting Test \n");
8110111c:	01204474 	movhi	r4,33041
81101120:	211bfa04 	addi	r4,r4,28648
81101124:	11058d80 	call	811058d8 <puts>
      return bSuccess;
81101128:	e0bff917 	ldw	r2,-28(fp)
8110112c:	00007d06 	br	81101324 <DDR2_EEPROM_TEST+0x290>
  }
  
  alt_u8 ControlAddr, Value;
  printf("DDR2 EEPROM Read Test\n");
81101130:	01204474 	movhi	r4,33041
81101134:	211c0604 	addi	r4,r4,28696
81101138:	11058d80 	call	811058d8 <puts>
  usleep(20*1000);
8110113c:	01138804 	movi	r4,20000
81101140:	11122580 	call	81112258 <usleep>
  for(i = 0; i < 256 && bSuccess; i++){
81101144:	e03ffc15 	stw	zero,-16(fp)
81101148:	00002006 	br	811011cc <DDR2_EEPROM_TEST+0x138>
    ControlAddr = i;
8110114c:	e0bffc17 	ldw	r2,-16(fp)
81101150:	e0bffd45 	stb	r2,-11(fp)
    bSuccess = I2C_Read(I2cSclBase, I2cSdaBase, DeviceAddr, ControlAddr, &Value);
81101154:	e0bffd03 	ldbu	r2,-12(fp)
81101158:	10c03fcc 	andi	r3,r2,255
8110115c:	18c0201c 	xori	r3,r3,128
81101160:	18ffe004 	addi	r3,r3,-128
81101164:	e13ffd43 	ldbu	r4,-11(fp)
81101168:	e0bffe04 	addi	r2,fp,-8
8110116c:	d8800015 	stw	r2,0(sp)
81101170:	200f883a 	mov	r7,r4
81101174:	180d883a 	mov	r6,r3
81101178:	e17ffb17 	ldw	r5,-20(fp)
8110117c:	e13ffa17 	ldw	r4,-24(fp)
81101180:	11003d40 	call	811003d4 <I2C_Read>
81101184:	e0bff915 	stw	r2,-28(fp)
    if (bSuccess){
81101188:	e0bff917 	ldw	r2,-28(fp)
8110118c:	10000926 	beq	r2,zero,811011b4 <DDR2_EEPROM_TEST+0x120>
      printf("EEPROM[%03d]=%02Xh\n", ControlAddr, Value);
81101190:	e0bffd43 	ldbu	r2,-11(fp)
81101194:	e0fffe03 	ldbu	r3,-8(fp)
81101198:	18c03fcc 	andi	r3,r3,255
8110119c:	180d883a 	mov	r6,r3
811011a0:	100b883a 	mov	r5,r2
811011a4:	01204474 	movhi	r4,33041
811011a8:	211c0c04 	addi	r4,r4,28720
811011ac:	11057bc0 	call	811057bc <printf>
811011b0:	00000306 	br	811011c0 <DDR2_EEPROM_TEST+0x12c>
    }else{
      printf("Failed to read EEPROM\n");
811011b4:	01204474 	movhi	r4,33041
811011b8:	211c1104 	addi	r4,r4,28740
811011bc:	11058d80 	call	811058d8 <puts>
  }
  
  alt_u8 ControlAddr, Value;
  printf("DDR2 EEPROM Read Test\n");
  usleep(20*1000);
  for(i = 0; i < 256 && bSuccess; i++){
811011c0:	e0bffc17 	ldw	r2,-16(fp)
811011c4:	10800044 	addi	r2,r2,1
811011c8:	e0bffc15 	stw	r2,-16(fp)
811011cc:	e0bffc17 	ldw	r2,-16(fp)
811011d0:	10804008 	cmpgei	r2,r2,256
811011d4:	1000021e 	bne	r2,zero,811011e0 <DDR2_EEPROM_TEST+0x14c>
811011d8:	e0bff917 	ldw	r2,-28(fp)
811011dc:	103fdb1e 	bne	r2,zero,8110114c <__reset+0xfb0e114c>
      printf("EEPROM[%03d]=%02Xh\n", ControlAddr, Value);
    }else{
      printf("Failed to read EEPROM\n");
    }
  }
  if (bSuccess){
811011e0:	e0bff917 	ldw	r2,-28(fp)
811011e4:	10000426 	beq	r2,zero,811011f8 <DDR2_EEPROM_TEST+0x164>
    printf("DDR2 EEPROM Read Test Completed\n\n");
811011e8:	01204474 	movhi	r4,33041
811011ec:	211c1704 	addi	r4,r4,28764
811011f0:	11058d80 	call	811058d8 <puts>
811011f4:	00000306 	br	81101204 <DDR2_EEPROM_TEST+0x170>
  } else {
    printf("DDR2 EEPROM Read Test Failed\n\n");
811011f8:	01204474 	movhi	r4,33041
811011fc:	211c2004 	addi	r4,r4,28800
81101200:	11058d80 	call	811058d8 <puts>
  }
  
  printf("DDR2 EEPROM Write Test\n");
81101204:	01204474 	movhi	r4,33041
81101208:	211c2804 	addi	r4,r4,28832
8110120c:	11058d80 	call	811058d8 <puts>
  alt_u8 WriteData = 0x12, TestAddr = 128;
81101210:	00800484 	movi	r2,18
81101214:	e0bffd85 	stb	r2,-10(fp)
81101218:	00bfe004 	movi	r2,-128
8110121c:	e0bffdc5 	stb	r2,-9(fp)
  alt_u8 ReadData;
  usleep(20*1000);
81101220:	01138804 	movi	r4,20000
81101224:	11122580 	call	81112258 <usleep>
  bSuccess = I2C_Write(I2cSclBase, I2cSdaBase, DeviceAddr, TestAddr, WriteData);
81101228:	e0bffd03 	ldbu	r2,-12(fp)
8110122c:	10c03fcc 	andi	r3,r2,255
81101230:	18c0201c 	xori	r3,r3,128
81101234:	18ffe004 	addi	r3,r3,-128
81101238:	e13ffdc3 	ldbu	r4,-9(fp)
8110123c:	e0bffd83 	ldbu	r2,-10(fp)
81101240:	d8800015 	stw	r2,0(sp)
81101244:	200f883a 	mov	r7,r4
81101248:	180d883a 	mov	r6,r3
8110124c:	e17ffb17 	ldw	r5,-20(fp)
81101250:	e13ffa17 	ldw	r4,-24(fp)
81101254:	11002fc0 	call	811002fc <I2C_Write>
81101258:	e0bff915 	stw	r2,-28(fp)
  if (!bSuccess){
8110125c:	e0bff917 	ldw	r2,-28(fp)
81101260:	1000041e 	bne	r2,zero,81101274 <DDR2_EEPROM_TEST+0x1e0>
    printf("Failed to write EEPROM\n");            
81101264:	01204474 	movhi	r4,33041
81101268:	211c2e04 	addi	r4,r4,28856
8110126c:	11058d80 	call	811058d8 <puts>
81101270:	00002006 	br	811012f4 <DDR2_EEPROM_TEST+0x260>
  } else {
    bSuccess = I2C_Read(I2cSclBase, I2cSdaBase, DeviceAddr, TestAddr, &ReadData);
81101274:	e0bffd03 	ldbu	r2,-12(fp)
81101278:	10c03fcc 	andi	r3,r2,255
8110127c:	18c0201c 	xori	r3,r3,128
81101280:	18ffe004 	addi	r3,r3,-128
81101284:	e13ffdc3 	ldbu	r4,-9(fp)
81101288:	e0bffe44 	addi	r2,fp,-7
8110128c:	d8800015 	stw	r2,0(sp)
81101290:	200f883a 	mov	r7,r4
81101294:	180d883a 	mov	r6,r3
81101298:	e17ffb17 	ldw	r5,-20(fp)
8110129c:	e13ffa17 	ldw	r4,-24(fp)
811012a0:	11003d40 	call	811003d4 <I2C_Read>
811012a4:	e0bff915 	stw	r2,-28(fp)
    if (!bSuccess){
811012a8:	e0bff917 	ldw	r2,-28(fp)
811012ac:	1000041e 	bne	r2,zero,811012c0 <DDR2_EEPROM_TEST+0x22c>
      printf("Failed to read EEPROM for verify\n");            
811012b0:	01204474 	movhi	r4,33041
811012b4:	211c3404 	addi	r4,r4,28880
811012b8:	11058d80 	call	811058d8 <puts>
811012bc:	00000d06 	br	811012f4 <DDR2_EEPROM_TEST+0x260>
    } else {
      if (ReadData != WriteData){
811012c0:	e0bffe43 	ldbu	r2,-7(fp)
811012c4:	10c03fcc 	andi	r3,r2,255
811012c8:	e0bffd83 	ldbu	r2,-10(fp)
811012cc:	18800926 	beq	r3,r2,811012f4 <DDR2_EEPROM_TEST+0x260>
        bSuccess = FALSE;
811012d0:	e03ff915 	stw	zero,-28(fp)
        printf("Verify EEPROM write fail, ReadData=%02Xh, WriteData=%02Xh\n", ReadData, WriteData);
811012d4:	e0bffe43 	ldbu	r2,-7(fp)
811012d8:	10803fcc 	andi	r2,r2,255
811012dc:	e0fffd83 	ldbu	r3,-10(fp)
811012e0:	180d883a 	mov	r6,r3
811012e4:	100b883a 	mov	r5,r2
811012e8:	01204474 	movhi	r4,33041
811012ec:	211c3d04 	addi	r4,r4,28916
811012f0:	11057bc0 	call	811057bc <printf>
      }
    }
  }
  if (bSuccess){
811012f4:	e0bff917 	ldw	r2,-28(fp)
811012f8:	10000426 	beq	r2,zero,8110130c <DDR2_EEPROM_TEST+0x278>
    printf("DDR2 EEPROM Write Test Completed\n\n");
811012fc:	01204474 	movhi	r4,33041
81101300:	211c4c04 	addi	r4,r4,28976
81101304:	11058d80 	call	811058d8 <puts>
81101308:	00000306 	br	81101318 <DDR2_EEPROM_TEST+0x284>
  } else {
    printf("DDR2 EEPROM Write Test Failed\n\n");
8110130c:	01204474 	movhi	r4,33041
81101310:	211c5504 	addi	r4,r4,29012
81101314:	11058d80 	call	811058d8 <puts>
  }
  printf("\n");
81101318:	01000284 	movi	r4,10
8110131c:	11058000 	call	81105800 <putchar>

  return bSuccess;
81101320:	e0bff917 	ldw	r2,-28(fp)
}
81101324:	e037883a 	mov	sp,fp
81101328:	dfc00117 	ldw	ra,4(sp)
8110132c:	df000017 	ldw	fp,0(sp)
81101330:	dec00204 	addi	sp,sp,8
81101334:	f800283a 	ret

81101338 <DDR2_EEPROM_DUMP>:
 * @param [in] MemoryId  ID da mémoria a ser testada
 *
 * @retval TRUE : Sucesso
 *
 */
bool DDR2_EEPROM_DUMP(alt_u8 MemoryId){
81101338:	deffb704 	addi	sp,sp,-292
8110133c:	dfc04815 	stw	ra,288(sp)
81101340:	df004715 	stw	fp,284(sp)
81101344:	df004704 	addi	fp,sp,284
81101348:	2005883a 	mov	r2,r4
8110134c:	e0bfff05 	stb	r2,-4(fp)
 
  printf("===== DE4 DDR2 EEPROM Dump =====\n");
81101350:	01204474 	movhi	r4,33041
81101354:	211c5d04 	addi	r4,r4,29044
81101358:	11058d80 	call	811058d8 <puts>
  const alt_u8 DeviceAddr = DDR2_EEPROM_I2C_ADDRESS;
8110135c:	00bfe804 	movi	r2,-96
81101360:	e0bfbd05 	stb	r2,-268(fp)
  bool bSuccess;
  alt_u32 I2cSclBase;
  alt_u32 I2cSdaBase;
  int i;
  
  bSuccess = TRUE;
81101364:	00800044 	movi	r2,1
81101368:	e0bfbe15 	stw	r2,-264(fp)
  switch (MemoryId) {
8110136c:	e0bfff03 	ldbu	r2,-4(fp)
81101370:	10c00060 	cmpeqi	r3,r2,1
81101374:	1800031e 	bne	r3,zero,81101384 <DDR2_EEPROM_DUMP+0x4c>
81101378:	108000a0 	cmpeqi	r2,r2,2
8110137c:	1000081e 	bne	r2,zero,811013a0 <DDR2_EEPROM_DUMP+0x68>
81101380:	00000e06 	br	811013bc <DDR2_EEPROM_DUMP+0x84>
    case DDR2_M1_ID:
      I2cSclBase = DDR2_M1_EEPROM_I2C_SCL_BASE;
81101384:	00a00034 	movhi	r2,32768
81101388:	10805c04 	addi	r2,r2,368
8110138c:	e0bfba15 	stw	r2,-280(fp)
      I2cSdaBase = DDR2_M1_EEPROM_I2C_SDA_BASE;
81101390:	00a00034 	movhi	r2,32768
81101394:	10806004 	addi	r2,r2,384
81101398:	e0bfbb15 	stw	r2,-276(fp)
    break;
8110139c:	00000d06 	br	811013d4 <DDR2_EEPROM_DUMP+0x9c>
    case DDR2_M2_ID:
      I2cSclBase = DDR2_M2_EEPROM_I2C_SCL_BASE;
811013a0:	00a00034 	movhi	r2,32768
811013a4:	10802c04 	addi	r2,r2,176
811013a8:	e0bfba15 	stw	r2,-280(fp)
      I2cSdaBase = DDR2_M2_EEPROM_I2C_SDA_BASE;      
811013ac:	00a00034 	movhi	r2,32768
811013b0:	10803004 	addi	r2,r2,192
811013b4:	e0bfbb15 	stw	r2,-276(fp)
    break;
811013b8:	00000606 	br	811013d4 <DDR2_EEPROM_DUMP+0x9c>
    default:
      bSuccess = FALSE;
811013bc:	e03fbe15 	stw	zero,-264(fp)
	  printf("DR2 Memory ID not identified!! Aborting Dump \n");
811013c0:	01204474 	movhi	r4,33041
811013c4:	211c6604 	addi	r4,r4,29080
811013c8:	11058d80 	call	811058d8 <puts>
      return bSuccess;
811013cc:	e0bfbe17 	ldw	r2,-264(fp)
811013d0:	00012006 	br	81101854 <DDR2_EEPROM_DUMP+0x51c>
  }

  alt_u8 szData[256];
  bSuccess = I2C_MultipleRead(I2cSclBase, I2cSdaBase, DeviceAddr, szData, sizeof(szData));
811013d4:	e0bfbd03 	ldbu	r2,-268(fp)
811013d8:	10c03fcc 	andi	r3,r2,255
811013dc:	18c0201c 	xori	r3,r3,128
811013e0:	18ffe004 	addi	r3,r3,-128
811013e4:	e13fbf04 	addi	r4,fp,-260
811013e8:	00804004 	movi	r2,256
811013ec:	d8800015 	stw	r2,0(sp)
811013f0:	200f883a 	mov	r7,r4
811013f4:	180d883a 	mov	r6,r3
811013f8:	e17fbb17 	ldw	r5,-276(fp)
811013fc:	e13fba17 	ldw	r4,-280(fp)
81101400:	11004d40 	call	811004d4 <I2C_MultipleRead>
81101404:	e0bfbe15 	stw	r2,-264(fp)
  if (bSuccess){
81101408:	e0bfbe17 	ldw	r2,-264(fp)
8110140c:	10010b26 	beq	r2,zero,8110183c <DDR2_EEPROM_DUMP+0x504>
    for(i = 0; i < 256 && bSuccess; i++){
81101410:	e03fbc15 	stw	zero,-272(fp)
81101414:	00010306 	br	81101824 <DDR2_EEPROM_DUMP+0x4ec>
      printf("EEPROM[%03d]=%02Xh ", i, szData[i]);
81101418:	e0ffbf04 	addi	r3,fp,-260
8110141c:	e0bfbc17 	ldw	r2,-272(fp)
81101420:	1885883a 	add	r2,r3,r2
81101424:	10800003 	ldbu	r2,0(r2)
81101428:	10803fcc 	andi	r2,r2,255
8110142c:	100d883a 	mov	r6,r2
81101430:	e17fbc17 	ldw	r5,-272(fp)
81101434:	01204474 	movhi	r4,33041
81101438:	211c7204 	addi	r4,r4,29128
8110143c:	11057bc0 	call	811057bc <printf>
      if (i == 0)
81101440:	e0bfbc17 	ldw	r2,-272(fp)
81101444:	1000041e 	bne	r2,zero,81101458 <DDR2_EEPROM_DUMP+0x120>
        printf("(Number of SPD Bytes Used)\n");
81101448:	01204474 	movhi	r4,33041
8110144c:	211c7704 	addi	r4,r4,29148
81101450:	11058d80 	call	811058d8 <puts>
81101454:	0000f006 	br	81101818 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 1)
81101458:	e0bfbc17 	ldw	r2,-272(fp)
8110145c:	10800058 	cmpnei	r2,r2,1
81101460:	1000041e 	bne	r2,zero,81101474 <DDR2_EEPROM_DUMP+0x13c>
        printf("(Total Number of Bytes in SPD Device, Log2(N))\n");
81101464:	01204474 	movhi	r4,33041
81101468:	211c7e04 	addi	r4,r4,29176
8110146c:	11058d80 	call	811058d8 <puts>
81101470:	0000e906 	br	81101818 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 2)
81101474:	e0bfbc17 	ldw	r2,-272(fp)
81101478:	10800098 	cmpnei	r2,r2,2
8110147c:	1000041e 	bne	r2,zero,81101490 <DDR2_EEPROM_DUMP+0x158>
        printf("(Basic Memory Type[08h:DDR2])\n");
81101480:	01204474 	movhi	r4,33041
81101484:	211c8a04 	addi	r4,r4,29224
81101488:	11058d80 	call	811058d8 <puts>
8110148c:	0000e206 	br	81101818 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 3)
81101490:	e0bfbc17 	ldw	r2,-272(fp)
81101494:	108000d8 	cmpnei	r2,r2,3
81101498:	1000041e 	bne	r2,zero,811014ac <DDR2_EEPROM_DUMP+0x174>
        printf("(Number of Row Addresses on Assembly)\n");
8110149c:	01204474 	movhi	r4,33041
811014a0:	211c9204 	addi	r4,r4,29256
811014a4:	11058d80 	call	811058d8 <puts>
811014a8:	0000db06 	br	81101818 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 4)
811014ac:	e0bfbc17 	ldw	r2,-272(fp)
811014b0:	10800118 	cmpnei	r2,r2,4
811014b4:	1000041e 	bne	r2,zero,811014c8 <DDR2_EEPROM_DUMP+0x190>
        printf("(Number of Column Addresses on Assembly)\n");
811014b8:	01204474 	movhi	r4,33041
811014bc:	211c9c04 	addi	r4,r4,29296
811014c0:	11058d80 	call	811058d8 <puts>
811014c4:	0000d406 	br	81101818 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 5)
811014c8:	e0bfbc17 	ldw	r2,-272(fp)
811014cc:	10800158 	cmpnei	r2,r2,5
811014d0:	1000041e 	bne	r2,zero,811014e4 <DDR2_EEPROM_DUMP+0x1ac>
        printf("(DIMM Height and Module Rank Number[b2b1b0+1])\n");
811014d4:	01204474 	movhi	r4,33041
811014d8:	211ca704 	addi	r4,r4,29340
811014dc:	11058d80 	call	811058d8 <puts>
811014e0:	0000cd06 	br	81101818 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 6)
811014e4:	e0bfbc17 	ldw	r2,-272(fp)
811014e8:	10800198 	cmpnei	r2,r2,6
811014ec:	1000041e 	bne	r2,zero,81101500 <DDR2_EEPROM_DUMP+0x1c8>
        printf("(Module Data Width)\n");
811014f0:	01204474 	movhi	r4,33041
811014f4:	211cb304 	addi	r4,r4,29388
811014f8:	11058d80 	call	811058d8 <puts>
811014fc:	0000c606 	br	81101818 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 7)
81101500:	e0bfbc17 	ldw	r2,-272(fp)
81101504:	108001d8 	cmpnei	r2,r2,7
81101508:	1000041e 	bne	r2,zero,8110151c <DDR2_EEPROM_DUMP+0x1e4>
        printf("(Module Data Width, Continued)\n");
8110150c:	01204474 	movhi	r4,33041
81101510:	211cb804 	addi	r4,r4,29408
81101514:	11058d80 	call	811058d8 <puts>
81101518:	0000bf06 	br	81101818 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 16)
8110151c:	e0bfbc17 	ldw	r2,-272(fp)
81101520:	10800418 	cmpnei	r2,r2,16
81101524:	1000041e 	bne	r2,zero,81101538 <DDR2_EEPROM_DUMP+0x200>
        printf("(Burst Lengths Supported[bitmap: x x x x 8 4 x x])\n");
81101528:	01204474 	movhi	r4,33041
8110152c:	211cc004 	addi	r4,r4,29440
81101530:	11058d80 	call	811058d8 <puts>
81101534:	0000b806 	br	81101818 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 13)
81101538:	e0bfbc17 	ldw	r2,-272(fp)
8110153c:	10800358 	cmpnei	r2,r2,13
81101540:	1000041e 	bne	r2,zero,81101554 <DDR2_EEPROM_DUMP+0x21c>
        printf("(Primary SDRAM width)\n");
81101544:	01204474 	movhi	r4,33041
81101548:	211ccd04 	addi	r4,r4,29492
8110154c:	11058d80 	call	811058d8 <puts>
81101550:	0000b106 	br	81101818 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 14)
81101554:	e0bfbc17 	ldw	r2,-272(fp)
81101558:	10800398 	cmpnei	r2,r2,14
8110155c:	1000041e 	bne	r2,zero,81101570 <DDR2_EEPROM_DUMP+0x238>
        printf("(ECC SDRAM width)\n");
81101560:	01204474 	movhi	r4,33041
81101564:	211cd304 	addi	r4,r4,29516
81101568:	11058d80 	call	811058d8 <puts>
8110156c:	0000aa06 	br	81101818 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 17)
81101570:	e0bfbc17 	ldw	r2,-272(fp)
81101574:	10800458 	cmpnei	r2,r2,17
81101578:	1000041e 	bne	r2,zero,8110158c <DDR2_EEPROM_DUMP+0x254>
        printf("(Banks per SDRAM device)\n");
8110157c:	01204474 	movhi	r4,33041
81101580:	211cd804 	addi	r4,r4,29536
81101584:	11058d80 	call	811058d8 <puts>
81101588:	0000a306 	br	81101818 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 18)
8110158c:	e0bfbc17 	ldw	r2,-272(fp)
81101590:	10800498 	cmpnei	r2,r2,18
81101594:	1000041e 	bne	r2,zero,811015a8 <DDR2_EEPROM_DUMP+0x270>
        printf("(CAS lantencies supported[bitmap: x x 5 4 3 2 x x])\n");
81101598:	01204474 	movhi	r4,33041
8110159c:	211cdf04 	addi	r4,r4,29564
811015a0:	11058d80 	call	811058d8 <puts>
811015a4:	00009c06 	br	81101818 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 20)
811015a8:	e0bfbc17 	ldw	r2,-272(fp)
811015ac:	10800518 	cmpnei	r2,r2,20
811015b0:	1000041e 	bne	r2,zero,811015c4 <DDR2_EEPROM_DUMP+0x28c>
        printf("(DIMM Type: x x Mini-UDIMM Mini-RDIMM Micro-DIMM SO-DIMM UDIMMM RDIMM)\n");
811015b4:	01204474 	movhi	r4,33041
811015b8:	211cec04 	addi	r4,r4,29616
811015bc:	11058d80 	call	811058d8 <puts>
811015c0:	00009506 	br	81101818 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 22)
811015c4:	e0bfbc17 	ldw	r2,-272(fp)
811015c8:	10800598 	cmpnei	r2,r2,22
811015cc:	1000041e 	bne	r2,zero,811015e0 <DDR2_EEPROM_DUMP+0x2a8>
        printf("(Memory Chip feature bitmap)\n");
811015d0:	01204474 	movhi	r4,33041
811015d4:	211cfe04 	addi	r4,r4,29688
811015d8:	11058d80 	call	811058d8 <puts>
811015dc:	00008e06 	br	81101818 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 27)
811015e0:	e0bfbc17 	ldw	r2,-272(fp)
811015e4:	108006d8 	cmpnei	r2,r2,27
811015e8:	1000041e 	bne	r2,zero,811015fc <DDR2_EEPROM_DUMP+0x2c4>
        printf("(Minimun row precharge time[tRP;nsx4])\n");
811015ec:	01204474 	movhi	r4,33041
811015f0:	211d0604 	addi	r4,r4,29720
811015f4:	11058d80 	call	811058d8 <puts>
811015f8:	00008706 	br	81101818 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 28)
811015fc:	e0bfbc17 	ldw	r2,-272(fp)
81101600:	10800718 	cmpnei	r2,r2,28
81101604:	1000041e 	bne	r2,zero,81101618 <DDR2_EEPROM_DUMP+0x2e0>
        printf("(Minimun row active-row activce delay[tRRD;nsx4])\n");
81101608:	01204474 	movhi	r4,33041
8110160c:	211d1004 	addi	r4,r4,29760
81101610:	11058d80 	call	811058d8 <puts>
81101614:	00008006 	br	81101818 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 29)
81101618:	e0bfbc17 	ldw	r2,-272(fp)
8110161c:	10800758 	cmpnei	r2,r2,29
81101620:	1000041e 	bne	r2,zero,81101634 <DDR2_EEPROM_DUMP+0x2fc>
        printf("(Minimun RAS to CAS delay[tRCD;nsx4])\n");
81101624:	01204474 	movhi	r4,33041
81101628:	211d1d04 	addi	r4,r4,29812
8110162c:	11058d80 	call	811058d8 <puts>
81101630:	00007906 	br	81101818 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 30)
81101634:	e0bfbc17 	ldw	r2,-272(fp)
81101638:	10800798 	cmpnei	r2,r2,30
8110163c:	1000041e 	bne	r2,zero,81101650 <DDR2_EEPROM_DUMP+0x318>
        printf("(Minimun acive to precharge time[tRAS;ns])\n");
81101640:	01204474 	movhi	r4,33041
81101644:	211d2704 	addi	r4,r4,29852
81101648:	11058d80 	call	811058d8 <puts>
8110164c:	00007206 	br	81101818 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 31)
81101650:	e0bfbc17 	ldw	r2,-272(fp)
81101654:	108007d8 	cmpnei	r2,r2,31
81101658:	1000041e 	bne	r2,zero,8110166c <DDR2_EEPROM_DUMP+0x334>
        printf("(Size of each rank[bitmap:512MB,256MB,128MB,16GB,8GB,4GB,2GB,1GB)\n");
8110165c:	01204474 	movhi	r4,33041
81101660:	211d3204 	addi	r4,r4,29896
81101664:	11058d80 	call	811058d8 <puts>
81101668:	00006b06 	br	81101818 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 36)
8110166c:	e0bfbc17 	ldw	r2,-272(fp)
81101670:	10800918 	cmpnei	r2,r2,36
81101674:	1000041e 	bne	r2,zero,81101688 <DDR2_EEPROM_DUMP+0x350>
        printf("(Minimun write receovery time[tWR;nsx4])\n");
81101678:	01204474 	movhi	r4,33041
8110167c:	211d4304 	addi	r4,r4,29964
81101680:	11058d80 	call	811058d8 <puts>
81101684:	00006406 	br	81101818 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 37)
81101688:	e0bfbc17 	ldw	r2,-272(fp)
8110168c:	10800958 	cmpnei	r2,r2,37
81101690:	1000041e 	bne	r2,zero,811016a4 <DDR2_EEPROM_DUMP+0x36c>
        printf("(Internal write to read command delay[tWTR;nsx4])\n");
81101694:	01204474 	movhi	r4,33041
81101698:	211d4e04 	addi	r4,r4,30008
8110169c:	11058d80 	call	811058d8 <puts>
811016a0:	00005d06 	br	81101818 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 38)
811016a4:	e0bfbc17 	ldw	r2,-272(fp)
811016a8:	10800998 	cmpnei	r2,r2,38
811016ac:	1000041e 	bne	r2,zero,811016c0 <DDR2_EEPROM_DUMP+0x388>
        printf("(Internal read to precharge command delay[tRTP;nsx4])\n");
811016b0:	01204474 	movhi	r4,33041
811016b4:	211d5b04 	addi	r4,r4,30060
811016b8:	11058d80 	call	811058d8 <puts>
811016bc:	00005606 	br	81101818 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 41)
811016c0:	e0bfbc17 	ldw	r2,-272(fp)
811016c4:	10800a58 	cmpnei	r2,r2,41
811016c8:	1000041e 	bne	r2,zero,811016dc <DDR2_EEPROM_DUMP+0x3a4>
        printf("(Minimun activce to active/refresh time[tRC;ns])\n");
811016cc:	01204474 	movhi	r4,33041
811016d0:	211d6904 	addi	r4,r4,30116
811016d4:	11058d80 	call	811058d8 <puts>
811016d8:	00004f06 	br	81101818 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 42)
811016dc:	e0bfbc17 	ldw	r2,-272(fp)
811016e0:	10800a98 	cmpnei	r2,r2,42
811016e4:	1000041e 	bne	r2,zero,811016f8 <DDR2_EEPROM_DUMP+0x3c0>
        printf("(Minimun refresh to active/refresh time[tRFC;ns])\n");
811016e8:	01204474 	movhi	r4,33041
811016ec:	211d7604 	addi	r4,r4,30168
811016f0:	11058d80 	call	811058d8 <puts>
811016f4:	00004806 	br	81101818 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 62)
811016f8:	e0bfbc17 	ldw	r2,-272(fp)
811016fc:	10800f98 	cmpnei	r2,r2,62
81101700:	1000041e 	bne	r2,zero,81101714 <DDR2_EEPROM_DUMP+0x3dc>
        printf("(SPD Revision)\n");
81101704:	01204474 	movhi	r4,33041
81101708:	211d8304 	addi	r4,r4,30220
8110170c:	11058d80 	call	811058d8 <puts>
81101710:	00004106 	br	81101818 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 63)
81101714:	e0bfbc17 	ldw	r2,-272(fp)
81101718:	10800fd8 	cmpnei	r2,r2,63
8110171c:	1000041e 	bne	r2,zero,81101730 <DDR2_EEPROM_DUMP+0x3f8>
        printf("(Checksum)\n");
81101720:	01204474 	movhi	r4,33041
81101724:	211d8704 	addi	r4,r4,30236
81101728:	11058d80 	call	811058d8 <puts>
8110172c:	00003a06 	br	81101818 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 64)
81101730:	e0bfbc17 	ldw	r2,-272(fp)
81101734:	10801018 	cmpnei	r2,r2,64
81101738:	1000041e 	bne	r2,zero,8110174c <DDR2_EEPROM_DUMP+0x414>
        printf("(64~71: Manufacturer JEDEC ID)\n");
8110173c:	01204474 	movhi	r4,33041
81101740:	211d8a04 	addi	r4,r4,30248
81101744:	11058d80 	call	811058d8 <puts>
81101748:	00003306 	br	81101818 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 72)
8110174c:	e0bfbc17 	ldw	r2,-272(fp)
81101750:	10801218 	cmpnei	r2,r2,72
81101754:	1000041e 	bne	r2,zero,81101768 <DDR2_EEPROM_DUMP+0x430>
        printf("(Module manufacturing location[Vendor-specific code])\n");
81101758:	01204474 	movhi	r4,33041
8110175c:	211d9204 	addi	r4,r4,30280
81101760:	11058d80 	call	811058d8 <puts>
81101764:	00002c06 	br	81101818 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 73)
81101768:	e0bfbc17 	ldw	r2,-272(fp)
8110176c:	10801258 	cmpnei	r2,r2,73
81101770:	1000041e 	bne	r2,zero,81101784 <DDR2_EEPROM_DUMP+0x44c>
        printf("(73~90: Moduloe part number)\n");
81101774:	01204474 	movhi	r4,33041
81101778:	211da004 	addi	r4,r4,30336
8110177c:	11058d80 	call	811058d8 <puts>
81101780:	00002506 	br	81101818 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 91)
81101784:	e0bfbc17 	ldw	r2,-272(fp)
81101788:	108016d8 	cmpnei	r2,r2,91
8110178c:	1000041e 	bne	r2,zero,811017a0 <DDR2_EEPROM_DUMP+0x468>
        printf("(91~92: Moduloe revision code)\n");
81101790:	01204474 	movhi	r4,33041
81101794:	211da804 	addi	r4,r4,30368
81101798:	11058d80 	call	811058d8 <puts>
8110179c:	00001e06 	br	81101818 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 93)
811017a0:	e0bfbc17 	ldw	r2,-272(fp)
811017a4:	10801758 	cmpnei	r2,r2,93
811017a8:	1000041e 	bne	r2,zero,811017bc <DDR2_EEPROM_DUMP+0x484>
        printf("(Manufacture Years since 2000[0-255])\n");
811017ac:	01204474 	movhi	r4,33041
811017b0:	211db004 	addi	r4,r4,30400
811017b4:	11058d80 	call	811058d8 <puts>
811017b8:	00001706 	br	81101818 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 94)
811017bc:	e0bfbc17 	ldw	r2,-272(fp)
811017c0:	10801798 	cmpnei	r2,r2,94
811017c4:	1000041e 	bne	r2,zero,811017d8 <DDR2_EEPROM_DUMP+0x4a0>
        printf("(Manufacture Weeks[1-52])\n");
811017c8:	01204474 	movhi	r4,33041
811017cc:	211dba04 	addi	r4,r4,30440
811017d0:	11058d80 	call	811058d8 <puts>
811017d4:	00001006 	br	81101818 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 95)
811017d8:	e0bfbc17 	ldw	r2,-272(fp)
811017dc:	108017d8 	cmpnei	r2,r2,95
811017e0:	1000041e 	bne	r2,zero,811017f4 <DDR2_EEPROM_DUMP+0x4bc>
        printf("(95~98[4-bytes]: Module serial number)\n");
811017e4:	01204474 	movhi	r4,33041
811017e8:	211dc104 	addi	r4,r4,30468
811017ec:	11058d80 	call	811058d8 <puts>
811017f0:	00000906 	br	81101818 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 99)
811017f4:	e0bfbc17 	ldw	r2,-272(fp)
811017f8:	108018d8 	cmpnei	r2,r2,99
811017fc:	1000041e 	bne	r2,zero,81101810 <DDR2_EEPROM_DUMP+0x4d8>
        printf("(99~128: Manufacturer-specific data)\n");
81101800:	01204474 	movhi	r4,33041
81101804:	211dcb04 	addi	r4,r4,30508
81101808:	11058d80 	call	811058d8 <puts>
8110180c:	00000206 	br	81101818 <DDR2_EEPROM_DUMP+0x4e0>
      else
        printf("\n");
81101810:	01000284 	movi	r4,10
81101814:	11058000 	call	81105800 <putchar>
  }

  alt_u8 szData[256];
  bSuccess = I2C_MultipleRead(I2cSclBase, I2cSdaBase, DeviceAddr, szData, sizeof(szData));
  if (bSuccess){
    for(i = 0; i < 256 && bSuccess; i++){
81101818:	e0bfbc17 	ldw	r2,-272(fp)
8110181c:	10800044 	addi	r2,r2,1
81101820:	e0bfbc15 	stw	r2,-272(fp)
81101824:	e0bfbc17 	ldw	r2,-272(fp)
81101828:	10804008 	cmpgei	r2,r2,256
8110182c:	1000061e 	bne	r2,zero,81101848 <DDR2_EEPROM_DUMP+0x510>
81101830:	e0bfbe17 	ldw	r2,-264(fp)
81101834:	103ef81e 	bne	r2,zero,81101418 <__reset+0xfb0e1418>
81101838:	00000306 	br	81101848 <DDR2_EEPROM_DUMP+0x510>
        printf("(99~128: Manufacturer-specific data)\n");
      else
        printf("\n");
    }
  } else {
    printf("Failed to dump EEPROM\n"); 
8110183c:	01204474 	movhi	r4,33041
81101840:	211dd504 	addi	r4,r4,30548
81101844:	11058d80 	call	811058d8 <puts>
  }
  printf("\n");
81101848:	01000284 	movi	r4,10
8110184c:	11058000 	call	81105800 <putchar>

  return bSuccess;  
81101850:	e0bfbe17 	ldw	r2,-264(fp)
}
81101854:	e037883a 	mov	sp,fp
81101858:	dfc00117 	ldw	ra,4(sp)
8110185c:	df000017 	ldw	fp,0(sp)
81101860:	dec00204 	addi	sp,sp,8
81101864:	f800283a 	ret

81101868 <DDR2_MEMORY_WRITE_TEST>:
 * @param [in] MemoryId  ID da mémoria a ser testada
 *
 * @retval TRUE : Sucesso
 *
 */
bool DDR2_MEMORY_WRITE_TEST(alt_u8 MemoryId){
81101868:	deffe304 	addi	sp,sp,-116
8110186c:	dfc01c15 	stw	ra,112(sp)
81101870:	df001b15 	stw	fp,108(sp)
81101874:	dc401a15 	stw	r17,104(sp)
81101878:	dc001915 	stw	r16,100(sp)
8110187c:	df001b04 	addi	fp,sp,108
81101880:	2005883a 	mov	r2,r4
81101884:	e0bffd05 	stb	r2,-12(fp)

  printf("===== DE4 DDR2 Memory Write Test =====\n");
81101888:	01204474 	movhi	r4,33041
8110188c:	211ddb04 	addi	r4,r4,30572
81101890:	11058d80 	call	811058d8 <puts>
  bool bSuccess;
  alt_u32 Ddr2Base;
  alt_u32 ByteLen;
  
  bSuccess = TRUE;
81101894:	00800044 	movi	r2,1
81101898:	e0bfed15 	stw	r2,-76(fp)
  switch (MemoryId) {
8110189c:	e0bffd03 	ldbu	r2,-12(fp)
811018a0:	10c00060 	cmpeqi	r3,r2,1
811018a4:	1800031e 	bne	r3,zero,811018b4 <DDR2_MEMORY_WRITE_TEST+0x4c>
811018a8:	108000a0 	cmpeqi	r2,r2,2
811018ac:	1000051e 	bne	r2,zero,811018c4 <DDR2_MEMORY_WRITE_TEST+0x5c>
811018b0:	00000906 	br	811018d8 <DDR2_MEMORY_WRITE_TEST+0x70>
    case DDR2_M1_ID:
      Ddr2Base = DDR2_M1_MEMORY_BASE;
811018b4:	e03fe515 	stw	zero,-108(fp)
      ByteLen = DDR2_M1_MEMORY_SIZE;
811018b8:	00900034 	movhi	r2,16384
811018bc:	e0bfe615 	stw	r2,-104(fp)
    break;
811018c0:	00000b06 	br	811018f0 <DDR2_MEMORY_WRITE_TEST+0x88>
    case DDR2_M2_ID:
      Ddr2Base = DDR2_M2_MEMORY_BASE;
811018c4:	00900034 	movhi	r2,16384
811018c8:	e0bfe515 	stw	r2,-108(fp)
      ByteLen = DDR2_M2_MEMORY_SIZE;
811018cc:	00900034 	movhi	r2,16384
811018d0:	e0bfe615 	stw	r2,-104(fp)
    break;
811018d4:	00000606 	br	811018f0 <DDR2_MEMORY_WRITE_TEST+0x88>
    default:
      bSuccess = FALSE;
811018d8:	e03fed15 	stw	zero,-76(fp)
	  printf("DR2 Memory ID not identified!! Aborting Test \n");
811018dc:	01204474 	movhi	r4,33041
811018e0:	211bfa04 	addi	r4,r4,28648
811018e4:	11058d80 	call	811058d8 <puts>
      return bSuccess;
811018e8:	e0bfed17 	ldw	r2,-76(fp)
811018ec:	0000db06 	br	81101c5c <DDR2_MEMORY_WRITE_TEST+0x3f4>
  }
  
  printf("DDR2 Size: %d MBytes\n", ByteLen/1024/1024);
811018f0:	e0bfe617 	ldw	r2,-104(fp)
811018f4:	1004d53a 	srli	r2,r2,20
811018f8:	100b883a 	mov	r5,r2
811018fc:	01204474 	movhi	r4,33041
81101900:	211de504 	addi	r4,r4,30612
81101904:	11057bc0 	call	811057bc <printf>

  int i, nRemainedLen, nAccessLen;
  my_data *pDes;
  
  int nItemNum, nPos;
  const int my_data_size = sizeof(my_data);
81101908:	00800104 	movi	r2,4
8110190c:	e0bfee15 	stw	r2,-72(fp)
  int nProgressIndex = 0;
81101910:	e03fec15 	stw	zero,-80(fp)
  alt_u32 InitValue;
  alt_u32 szProgress[10];
  int TimeStart, TimeElapsed = 0;
81101914:	e03fef15 	stw	zero,-68(fp)
  
  for(i = 0; i < 10; i++){
81101918:	e03fe715 	stw	zero,-100(fp)
8110191c:	00001506 	br	81101974 <DDR2_MEMORY_WRITE_TEST+0x10c>
    szProgress[i] = ByteLen/10*(i+1);
81101920:	e0ffe617 	ldw	r3,-104(fp)
81101924:	00b33374 	movhi	r2,52429
81101928:	10b33344 	addi	r2,r2,-13107
8110192c:	1888383a 	mulxuu	r4,r3,r2
81101930:	1885383a 	mul	r2,r3,r2
81101934:	1021883a 	mov	r16,r2
81101938:	2023883a 	mov	r17,r4
8110193c:	8804d0fa 	srli	r2,r17,3
81101940:	e0ffe717 	ldw	r3,-100(fp)
81101944:	18c00044 	addi	r3,r3,1
81101948:	10c7383a 	mul	r3,r2,r3
8110194c:	e0bfe717 	ldw	r2,-100(fp)
81101950:	1085883a 	add	r2,r2,r2
81101954:	1085883a 	add	r2,r2,r2
81101958:	e13fe504 	addi	r4,fp,-108
8110195c:	2085883a 	add	r2,r4,r2
81101960:	10800e04 	addi	r2,r2,56
81101964:	10c00015 	stw	r3,0(r2)
  int nProgressIndex = 0;
  alt_u32 InitValue;
  alt_u32 szProgress[10];
  int TimeStart, TimeElapsed = 0;
  
  for(i = 0; i < 10; i++){
81101968:	e0bfe717 	ldw	r2,-100(fp)
8110196c:	10800044 	addi	r2,r2,1
81101970:	e0bfe715 	stw	r2,-100(fp)
81101974:	e0bfe717 	ldw	r2,-100(fp)
81101978:	10800290 	cmplti	r2,r2,10
8110197c:	103fe81e 	bne	r2,zero,81101920 <__reset+0xfb0e1920>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
81101980:	d0a02317 	ldw	r2,-32628(gp)
    szProgress[i] = ByteLen/10*(i+1);
  }
  InitValue = alt_nticks();
81101984:	e0bff015 	stw	r2,-64(fp)
  nItemNum = sizeof(szData)/sizeof(szData[0]);
81101988:	00804004 	movi	r2,256
8110198c:	e0bfea15 	stw	r2,-88(fp)
  for(i = 0; i < nItemNum; i++){
81101990:	e03fe715 	stw	zero,-100(fp)
81101994:	00001e06 	br	81101a10 <DDR2_MEMORY_WRITE_TEST+0x1a8>
    if (i == 0) {
81101998:	e0bfe717 	ldw	r2,-100(fp)
8110199c:	1000091e 	bne	r2,zero,811019c4 <DDR2_MEMORY_WRITE_TEST+0x15c>
      szData[i] = InitValue;
811019a0:	00a044b4 	movhi	r2,33042
811019a4:	10a85904 	addi	r2,r2,-24220
811019a8:	e0ffe717 	ldw	r3,-100(fp)
811019ac:	18c7883a 	add	r3,r3,r3
811019b0:	18c7883a 	add	r3,r3,r3
811019b4:	10c5883a 	add	r2,r2,r3
811019b8:	e0fff017 	ldw	r3,-64(fp)
811019bc:	10c00015 	stw	r3,0(r2)
811019c0:	00001006 	br	81101a04 <DDR2_MEMORY_WRITE_TEST+0x19c>
    } else {
      szData[i] = szData[i-1] * 13;
811019c4:	e0bfe717 	ldw	r2,-100(fp)
811019c8:	10ffffc4 	addi	r3,r2,-1
811019cc:	00a044b4 	movhi	r2,33042
811019d0:	10a85904 	addi	r2,r2,-24220
811019d4:	18c7883a 	add	r3,r3,r3
811019d8:	18c7883a 	add	r3,r3,r3
811019dc:	10c5883a 	add	r2,r2,r3
811019e0:	10800017 	ldw	r2,0(r2)
811019e4:	11000364 	muli	r4,r2,13
811019e8:	00a044b4 	movhi	r2,33042
811019ec:	10a85904 	addi	r2,r2,-24220
811019f0:	e0ffe717 	ldw	r3,-100(fp)
811019f4:	18c7883a 	add	r3,r3,r3
811019f8:	18c7883a 	add	r3,r3,r3
811019fc:	10c5883a 	add	r2,r2,r3
81101a00:	11000015 	stw	r4,0(r2)
  for(i = 0; i < 10; i++){
    szProgress[i] = ByteLen/10*(i+1);
  }
  InitValue = alt_nticks();
  nItemNum = sizeof(szData)/sizeof(szData[0]);
  for(i = 0; i < nItemNum; i++){
81101a04:	e0bfe717 	ldw	r2,-100(fp)
81101a08:	10800044 	addi	r2,r2,1
81101a0c:	e0bfe715 	stw	r2,-100(fp)
81101a10:	e0ffe717 	ldw	r3,-100(fp)
81101a14:	e0bfea17 	ldw	r2,-88(fp)
81101a18:	18bfdf16 	blt	r3,r2,81101998 <__reset+0xfb0e1998>
      szData[i] = InitValue;
    } else {
      szData[i] = szData[i-1] * 13;
    }
  }
  szData[nItemNum-1] = 0xAAAAAAAA;
81101a1c:	e0bfea17 	ldw	r2,-88(fp)
81101a20:	10ffffc4 	addi	r3,r2,-1
81101a24:	00a044b4 	movhi	r2,33042
81101a28:	10a85904 	addi	r2,r2,-24220
81101a2c:	18c7883a 	add	r3,r3,r3
81101a30:	18c7883a 	add	r3,r3,r3
81101a34:	10c7883a 	add	r3,r2,r3
81101a38:	00aaaaf4 	movhi	r2,43691
81101a3c:	10aaaa84 	addi	r2,r2,-21846
81101a40:	18800015 	stw	r2,0(r3)
  szData[nItemNum-2] = 0x55555555;
81101a44:	e0bfea17 	ldw	r2,-88(fp)
81101a48:	10ffff84 	addi	r3,r2,-2
81101a4c:	00a044b4 	movhi	r2,33042
81101a50:	10a85904 	addi	r2,r2,-24220
81101a54:	18c7883a 	add	r3,r3,r3
81101a58:	18c7883a 	add	r3,r3,r3
81101a5c:	10c7883a 	add	r3,r2,r3
81101a60:	00955574 	movhi	r2,21845
81101a64:	10955544 	addi	r2,r2,21845
81101a68:	18800015 	stw	r2,0(r3)
  szData[nItemNum-3] = 0x00000000;
81101a6c:	e0bfea17 	ldw	r2,-88(fp)
81101a70:	10ffff44 	addi	r3,r2,-3
81101a74:	00a044b4 	movhi	r2,33042
81101a78:	10a85904 	addi	r2,r2,-24220
81101a7c:	18c7883a 	add	r3,r3,r3
81101a80:	18c7883a 	add	r3,r3,r3
81101a84:	10c5883a 	add	r2,r2,r3
81101a88:	10000015 	stw	zero,0(r2)
  szData[nItemNum-4] = 0xFFFFFFFF;
81101a8c:	e0bfea17 	ldw	r2,-88(fp)
81101a90:	10ffff04 	addi	r3,r2,-4
81101a94:	00a044b4 	movhi	r2,33042
81101a98:	10a85904 	addi	r2,r2,-24220
81101a9c:	18c7883a 	add	r3,r3,r3
81101aa0:	18c7883a 	add	r3,r3,r3
81101aa4:	10c5883a 	add	r2,r2,r3
81101aa8:	00ffffc4 	movi	r3,-1
81101aac:	10c00015 	stw	r3,0(r2)

  printf("Writing data...\n");
81101ab0:	01204474 	movhi	r4,33041
81101ab4:	211deb04 	addi	r4,r4,30636
81101ab8:	11058d80 	call	811058d8 <puts>
81101abc:	d0a02317 	ldw	r2,-32628(gp)
  TimeStart = alt_nticks();
81101ac0:	e0bff115 	stw	r2,-60(fp)
  pDes = (my_data *)Ddr2Base;
81101ac4:	e0bfe517 	ldw	r2,-108(fp)
81101ac8:	e0bfe915 	stw	r2,-92(fp)
  nAccessLen = sizeof(szData);
81101acc:	00810004 	movi	r2,1024
81101ad0:	e0bfe815 	stw	r2,-96(fp)
  nItemNum = nAccessLen / my_data_size;
81101ad4:	e0ffe817 	ldw	r3,-96(fp)
81101ad8:	e0bfee17 	ldw	r2,-72(fp)
81101adc:	1885283a 	div	r2,r3,r2
81101ae0:	e0bfea15 	stw	r2,-88(fp)
  nPos = 0;
81101ae4:	e03feb15 	stw	zero,-84(fp)
  while(nPos < ByteLen){
81101ae8:	00003306 	br	81101bb8 <DDR2_MEMORY_WRITE_TEST+0x350>
    nRemainedLen = ByteLen - nPos;
81101aec:	e0bfeb17 	ldw	r2,-84(fp)
81101af0:	e0ffe617 	ldw	r3,-104(fp)
81101af4:	1885c83a 	sub	r2,r3,r2
81101af8:	e0bff215 	stw	r2,-56(fp)
    if (nAccessLen > nRemainedLen){
81101afc:	e0bfe817 	ldw	r2,-96(fp)
81101b00:	e0fff217 	ldw	r3,-56(fp)
81101b04:	1880060e 	bge	r3,r2,81101b20 <DDR2_MEMORY_WRITE_TEST+0x2b8>
      nAccessLen = nRemainedLen;
81101b08:	e0bff217 	ldw	r2,-56(fp)
81101b0c:	e0bfe815 	stw	r2,-96(fp)
      nItemNum = nAccessLen / my_data_size;
81101b10:	e0ffe817 	ldw	r3,-96(fp)
81101b14:	e0bfee17 	ldw	r2,-72(fp)
81101b18:	1885283a 	div	r2,r3,r2
81101b1c:	e0bfea15 	stw	r2,-88(fp)
    }
    memcpy(pDes, szData, nAccessLen);
81101b20:	e0bfe817 	ldw	r2,-96(fp)
81101b24:	100d883a 	mov	r6,r2
81101b28:	016044b4 	movhi	r5,33042
81101b2c:	29685904 	addi	r5,r5,-24220
81101b30:	e13fe917 	ldw	r4,-92(fp)
81101b34:	11056440 	call	81105644 <memcpy>
    pDes += nItemNum;
81101b38:	e0bfea17 	ldw	r2,-88(fp)
81101b3c:	1085883a 	add	r2,r2,r2
81101b40:	1085883a 	add	r2,r2,r2
81101b44:	1007883a 	mov	r3,r2
81101b48:	e0bfe917 	ldw	r2,-92(fp)
81101b4c:	10c5883a 	add	r2,r2,r3
81101b50:	e0bfe915 	stw	r2,-92(fp)
    nPos += nAccessLen;
81101b54:	e0ffeb17 	ldw	r3,-84(fp)
81101b58:	e0bfe817 	ldw	r2,-96(fp)
81101b5c:	1885883a 	add	r2,r3,r2
81101b60:	e0bfeb15 	stw	r2,-84(fp)
    if (nProgressIndex <= 9 && nPos >= szProgress[nProgressIndex]){
81101b64:	e0bfec17 	ldw	r2,-80(fp)
81101b68:	10800288 	cmpgei	r2,r2,10
81101b6c:	1000121e 	bne	r2,zero,81101bb8 <DDR2_MEMORY_WRITE_TEST+0x350>
81101b70:	e0bfec17 	ldw	r2,-80(fp)
81101b74:	1085883a 	add	r2,r2,r2
81101b78:	1085883a 	add	r2,r2,r2
81101b7c:	e0ffe504 	addi	r3,fp,-108
81101b80:	1885883a 	add	r2,r3,r2
81101b84:	10800e04 	addi	r2,r2,56
81101b88:	10800017 	ldw	r2,0(r2)
81101b8c:	e0ffeb17 	ldw	r3,-84(fp)
81101b90:	18800936 	bltu	r3,r2,81101bb8 <DDR2_MEMORY_WRITE_TEST+0x350>
      nProgressIndex++;
81101b94:	e0bfec17 	ldw	r2,-80(fp)
81101b98:	10800044 	addi	r2,r2,1
81101b9c:	e0bfec15 	stw	r2,-80(fp)
      printf("%02d%% ", nProgressIndex*10);
81101ba0:	e0bfec17 	ldw	r2,-80(fp)
81101ba4:	108002a4 	muli	r2,r2,10
81101ba8:	100b883a 	mov	r5,r2
81101bac:	01204474 	movhi	r4,33041
81101bb0:	211def04 	addi	r4,r4,30652
81101bb4:	11057bc0 	call	811057bc <printf>
  TimeStart = alt_nticks();
  pDes = (my_data *)Ddr2Base;
  nAccessLen = sizeof(szData);
  nItemNum = nAccessLen / my_data_size;
  nPos = 0;
  while(nPos < ByteLen){
81101bb8:	e0ffeb17 	ldw	r3,-84(fp)
81101bbc:	e0bfe617 	ldw	r2,-104(fp)
81101bc0:	18bfca36 	bltu	r3,r2,81101aec <__reset+0xfb0e1aec>
    if (nProgressIndex <= 9 && nPos >= szProgress[nProgressIndex]){
      nProgressIndex++;
      printf("%02d%% ", nProgressIndex*10);
    }
  }
  alt_dcache_flush_all();
81101bc4:	1111a7c0 	call	81111a7c <alt_dcache_flush_all>
  printf("\n");
81101bc8:	01000284 	movi	r4,10
81101bcc:	11058000 	call	81105800 <putchar>
81101bd0:	d0e02317 	ldw	r3,-32628(gp)

  TimeElapsed = alt_nticks() - TimeStart;
81101bd4:	e0bff117 	ldw	r2,-60(fp)
81101bd8:	1885c83a 	sub	r2,r3,r2
81101bdc:	e0bfef15 	stw	r2,-68(fp)
  if (bSuccess){
81101be0:	e0bfed17 	ldw	r2,-76(fp)
81101be4:	10001726 	beq	r2,zero,81101c44 <DDR2_MEMORY_WRITE_TEST+0x3dc>
    printf("DDR2 write test pass, size=%d bytes, %.3f sec\n", ByteLen, (float)TimeElapsed/(float)alt_ticks_per_second());
81101be8:	e13fef17 	ldw	r4,-68(fp)
81101bec:	11049fc0 	call	811049fc <__floatsisf>
81101bf0:	1021883a 	mov	r16,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
81101bf4:	d0a02217 	ldw	r2,-32632(gp)
81101bf8:	1009883a 	mov	r4,r2
81101bfc:	1104b200 	call	81104b20 <__floatunsisf>
81101c00:	1007883a 	mov	r3,r2
81101c04:	180b883a 	mov	r5,r3
81101c08:	8009883a 	mov	r4,r16
81101c0c:	11041c00 	call	811041c0 <__divsf3>
81101c10:	1007883a 	mov	r3,r2
81101c14:	1805883a 	mov	r2,r3
81101c18:	1009883a 	mov	r4,r2
81101c1c:	11053280 	call	81105328 <__extendsfdf2>
81101c20:	1009883a 	mov	r4,r2
81101c24:	180b883a 	mov	r5,r3
81101c28:	200d883a 	mov	r6,r4
81101c2c:	280f883a 	mov	r7,r5
81101c30:	e17fe617 	ldw	r5,-104(fp)
81101c34:	01204474 	movhi	r4,33041
81101c38:	211df104 	addi	r4,r4,30660
81101c3c:	11057bc0 	call	811057bc <printf>
81101c40:	00000306 	br	81101c50 <DDR2_MEMORY_WRITE_TEST+0x3e8>
  } else {
    printf("DDR2 write test fail\n");
81101c44:	01204474 	movhi	r4,33041
81101c48:	211dfd04 	addi	r4,r4,30708
81101c4c:	11058d80 	call	811058d8 <puts>
  }
  printf("\n");
81101c50:	01000284 	movi	r4,10
81101c54:	11058000 	call	81105800 <putchar>

  return bSuccess;
81101c58:	e0bfed17 	ldw	r2,-76(fp)
}
81101c5c:	e6fffe04 	addi	sp,fp,-8
81101c60:	dfc00317 	ldw	ra,12(sp)
81101c64:	df000217 	ldw	fp,8(sp)
81101c68:	dc400117 	ldw	r17,4(sp)
81101c6c:	dc000017 	ldw	r16,0(sp)
81101c70:	dec00404 	addi	sp,sp,16
81101c74:	f800283a 	ret

81101c78 <DDR2_MEMORY_READ_TEST>:
 * @param [in] MemoryId  ID da mémoria a ser testada
 *
 * @retval TRUE : Sucesso
 *
 */
bool DDR2_MEMORY_READ_TEST(alt_u8 MemoryId){
81101c78:	deffe304 	addi	sp,sp,-116
81101c7c:	dfc01c15 	stw	ra,112(sp)
81101c80:	df001b15 	stw	fp,108(sp)
81101c84:	dc401a15 	stw	r17,104(sp)
81101c88:	dc001915 	stw	r16,100(sp)
81101c8c:	df001b04 	addi	fp,sp,108
81101c90:	2005883a 	mov	r2,r4
81101c94:	e0bffd05 	stb	r2,-12(fp)

  printf("===== DE4 DDR2 Memory Read Test =====\n");
81101c98:	01204474 	movhi	r4,33041
81101c9c:	211e0304 	addi	r4,r4,30732
81101ca0:	11058d80 	call	811058d8 <puts>
  bool bSuccess;
  alt_u32 Ddr2Base;
  alt_u32 ByteLen;
  
  bSuccess = TRUE;
81101ca4:	00800044 	movi	r2,1
81101ca8:	e0bfe515 	stw	r2,-108(fp)
  switch (MemoryId) {
81101cac:	e0bffd03 	ldbu	r2,-12(fp)
81101cb0:	10c00060 	cmpeqi	r3,r2,1
81101cb4:	1800031e 	bne	r3,zero,81101cc4 <DDR2_MEMORY_READ_TEST+0x4c>
81101cb8:	108000a0 	cmpeqi	r2,r2,2
81101cbc:	1000051e 	bne	r2,zero,81101cd4 <DDR2_MEMORY_READ_TEST+0x5c>
81101cc0:	00000906 	br	81101ce8 <DDR2_MEMORY_READ_TEST+0x70>
    case DDR2_M1_ID:
      Ddr2Base = DDR2_M1_MEMORY_BASE;
81101cc4:	e03fe615 	stw	zero,-104(fp)
      ByteLen = DDR2_M1_MEMORY_SIZE;
81101cc8:	00900034 	movhi	r2,16384
81101ccc:	e0bfe715 	stw	r2,-100(fp)
    break;
81101cd0:	00000b06 	br	81101d00 <DDR2_MEMORY_READ_TEST+0x88>
    case DDR2_M2_ID:
      Ddr2Base = DDR2_M2_MEMORY_BASE;
81101cd4:	00900034 	movhi	r2,16384
81101cd8:	e0bfe615 	stw	r2,-104(fp)
      ByteLen = DDR2_M2_MEMORY_SIZE;
81101cdc:	00900034 	movhi	r2,16384
81101ce0:	e0bfe715 	stw	r2,-100(fp)
    break;
81101ce4:	00000606 	br	81101d00 <DDR2_MEMORY_READ_TEST+0x88>
    default:
      bSuccess = FALSE;
81101ce8:	e03fe515 	stw	zero,-108(fp)
	  printf("DR2 Memory ID not identified!! Aborting Test \n");
81101cec:	01204474 	movhi	r4,33041
81101cf0:	211bfa04 	addi	r4,r4,28648
81101cf4:	11058d80 	call	811058d8 <puts>
      return bSuccess;
81101cf8:	e0bfe517 	ldw	r2,-108(fp)
81101cfc:	0000b806 	br	81101fe0 <DDR2_MEMORY_READ_TEST+0x368>
  }
  
  printf("DDR2 Size: %d MBytes\n", ByteLen/1024/1024);
81101d00:	e0bfe717 	ldw	r2,-100(fp)
81101d04:	1004d53a 	srli	r2,r2,20
81101d08:	100b883a 	mov	r5,r2
81101d0c:	01204474 	movhi	r4,33041
81101d10:	211de504 	addi	r4,r4,30612
81101d14:	11057bc0 	call	811057bc <printf>

  int i, nRemainedLen, nAccessLen;
  my_data *pDes, *pSrc;
  int nItemNum, nPos;
  nItemNum = sizeof(szData)/sizeof(szData[0]);
81101d18:	00804004 	movi	r2,256
81101d1c:	e0bfec15 	stw	r2,-80(fp)
  const int my_data_size = sizeof(my_data);
81101d20:	00800104 	movi	r2,4
81101d24:	e0bfef15 	stw	r2,-68(fp)
  nAccessLen = nItemNum * my_data_size;
81101d28:	e0ffec17 	ldw	r3,-80(fp)
81101d2c:	e0bfef17 	ldw	r2,-68(fp)
81101d30:	1885383a 	mul	r2,r3,r2
81101d34:	e0bfe915 	stw	r2,-92(fp)
  int nProgressIndex = 0;
81101d38:	e03fee15 	stw	zero,-72(fp)
  alt_u32 szProgress[10];
  int TimeStart, TimeElapsed = 0;
81101d3c:	e03ff015 	stw	zero,-64(fp)

  for(i=0;i<10;i++){
81101d40:	e03fe815 	stw	zero,-96(fp)
81101d44:	00001506 	br	81101d9c <DDR2_MEMORY_READ_TEST+0x124>
    szProgress[i] = ByteLen/10*(i+1);
81101d48:	e0ffe717 	ldw	r3,-100(fp)
81101d4c:	00b33374 	movhi	r2,52429
81101d50:	10b33344 	addi	r2,r2,-13107
81101d54:	1888383a 	mulxuu	r4,r3,r2
81101d58:	1885383a 	mul	r2,r3,r2
81101d5c:	1021883a 	mov	r16,r2
81101d60:	2023883a 	mov	r17,r4
81101d64:	8804d0fa 	srli	r2,r17,3
81101d68:	e0ffe817 	ldw	r3,-96(fp)
81101d6c:	18c00044 	addi	r3,r3,1
81101d70:	10c7383a 	mul	r3,r2,r3
81101d74:	e0bfe817 	ldw	r2,-96(fp)
81101d78:	1085883a 	add	r2,r2,r2
81101d7c:	1085883a 	add	r2,r2,r2
81101d80:	e13fe504 	addi	r4,fp,-108
81101d84:	2085883a 	add	r2,r4,r2
81101d88:	10800e04 	addi	r2,r2,56
81101d8c:	10c00015 	stw	r3,0(r2)
  nAccessLen = nItemNum * my_data_size;
  int nProgressIndex = 0;
  alt_u32 szProgress[10];
  int TimeStart, TimeElapsed = 0;

  for(i=0;i<10;i++){
81101d90:	e0bfe817 	ldw	r2,-96(fp)
81101d94:	10800044 	addi	r2,r2,1
81101d98:	e0bfe815 	stw	r2,-96(fp)
81101d9c:	e0bfe817 	ldw	r2,-96(fp)
81101da0:	10800290 	cmplti	r2,r2,10
81101da4:	103fe81e 	bne	r2,zero,81101d48 <__reset+0xfb0e1d48>
    szProgress[i] = ByteLen/10*(i+1);
  }

  nProgressIndex = 0;
81101da8:	e03fee15 	stw	zero,-72(fp)
  printf("Reading/Verifying Data...\n");
81101dac:	01204474 	movhi	r4,33041
81101db0:	211e0d04 	addi	r4,r4,30772
81101db4:	11058d80 	call	811058d8 <puts>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
81101db8:	d0a02317 	ldw	r2,-32628(gp)
  TimeStart = alt_nticks();
81101dbc:	e0bff115 	stw	r2,-60(fp)

  pSrc = (my_data *)Ddr2Base;
81101dc0:	e0bfe617 	ldw	r2,-104(fp)
81101dc4:	e0bfeb15 	stw	r2,-84(fp)
  nAccessLen = sizeof(szData);
81101dc8:	00810004 	movi	r2,1024
81101dcc:	e0bfe915 	stw	r2,-92(fp)
  nItemNum = nAccessLen / my_data_size;
81101dd0:	e0ffe917 	ldw	r3,-92(fp)
81101dd4:	e0bfef17 	ldw	r2,-68(fp)
81101dd8:	1885283a 	div	r2,r3,r2
81101ddc:	e0bfec15 	stw	r2,-80(fp)
  nPos = 0;
81101de0:	e03fed15 	stw	zero,-76(fp)
  while(bSuccess && nPos < ByteLen){
81101de4:	00005406 	br	81101f38 <DDR2_MEMORY_READ_TEST+0x2c0>
    nRemainedLen = ByteLen - nPos;
81101de8:	e0bfed17 	ldw	r2,-76(fp)
81101dec:	e0ffe717 	ldw	r3,-100(fp)
81101df0:	1885c83a 	sub	r2,r3,r2
81101df4:	e0bff215 	stw	r2,-56(fp)
    if (nAccessLen > nRemainedLen){
81101df8:	e0bfe917 	ldw	r2,-92(fp)
81101dfc:	e0fff217 	ldw	r3,-56(fp)
81101e00:	1880060e 	bge	r3,r2,81101e1c <DDR2_MEMORY_READ_TEST+0x1a4>
      nAccessLen = nRemainedLen;
81101e04:	e0bff217 	ldw	r2,-56(fp)
81101e08:	e0bfe915 	stw	r2,-92(fp)
      nItemNum = nAccessLen / my_data_size;
81101e0c:	e0ffe917 	ldw	r3,-92(fp)
81101e10:	e0bfef17 	ldw	r2,-68(fp)
81101e14:	1885283a 	div	r2,r3,r2
81101e18:	e0bfec15 	stw	r2,-80(fp)
    }
    pDes = szData;
81101e1c:	00a044b4 	movhi	r2,33042
81101e20:	10a85904 	addi	r2,r2,-24220
81101e24:	e0bfea15 	stw	r2,-88(fp)
    for(i=0 ; i < nItemNum && bSuccess; i++){
81101e28:	e03fe815 	stw	zero,-96(fp)
81101e2c:	00002406 	br	81101ec0 <DDR2_MEMORY_READ_TEST+0x248>
      if (*pSrc++ != *pDes++){
81101e30:	e0bfeb17 	ldw	r2,-84(fp)
81101e34:	10c00104 	addi	r3,r2,4
81101e38:	e0ffeb15 	stw	r3,-84(fp)
81101e3c:	10c00017 	ldw	r3,0(r2)
81101e40:	e0bfea17 	ldw	r2,-88(fp)
81101e44:	11000104 	addi	r4,r2,4
81101e48:	e13fea15 	stw	r4,-88(fp)
81101e4c:	10800017 	ldw	r2,0(r2)
81101e50:	18801826 	beq	r3,r2,81101eb4 <DDR2_MEMORY_READ_TEST+0x23c>
        printf("verify ng, read=%08Xh, expected=%08Xh, WordIndex=%Xh\n", (int)*(pSrc-1), (int)szData[i], (nPos/my_data_size)+i);
81101e54:	e0bfeb17 	ldw	r2,-84(fp)
81101e58:	10bfff04 	addi	r2,r2,-4
81101e5c:	10800017 	ldw	r2,0(r2)
81101e60:	1009883a 	mov	r4,r2
81101e64:	00a044b4 	movhi	r2,33042
81101e68:	10a85904 	addi	r2,r2,-24220
81101e6c:	e0ffe817 	ldw	r3,-96(fp)
81101e70:	18c7883a 	add	r3,r3,r3
81101e74:	18c7883a 	add	r3,r3,r3
81101e78:	10c5883a 	add	r2,r2,r3
81101e7c:	10800017 	ldw	r2,0(r2)
81101e80:	100b883a 	mov	r5,r2
81101e84:	e0ffed17 	ldw	r3,-76(fp)
81101e88:	e0bfef17 	ldw	r2,-68(fp)
81101e8c:	1887283a 	div	r3,r3,r2
81101e90:	e0bfe817 	ldw	r2,-96(fp)
81101e94:	1885883a 	add	r2,r3,r2
81101e98:	100f883a 	mov	r7,r2
81101e9c:	280d883a 	mov	r6,r5
81101ea0:	200b883a 	mov	r5,r4
81101ea4:	01204474 	movhi	r4,33041
81101ea8:	211e1404 	addi	r4,r4,30800
81101eac:	11057bc0 	call	811057bc <printf>
        bSuccess = FALSE;
81101eb0:	e03fe515 	stw	zero,-108(fp)
    if (nAccessLen > nRemainedLen){
      nAccessLen = nRemainedLen;
      nItemNum = nAccessLen / my_data_size;
    }
    pDes = szData;
    for(i=0 ; i < nItemNum && bSuccess; i++){
81101eb4:	e0bfe817 	ldw	r2,-96(fp)
81101eb8:	10800044 	addi	r2,r2,1
81101ebc:	e0bfe815 	stw	r2,-96(fp)
81101ec0:	e0ffe817 	ldw	r3,-96(fp)
81101ec4:	e0bfec17 	ldw	r2,-80(fp)
81101ec8:	1880020e 	bge	r3,r2,81101ed4 <DDR2_MEMORY_READ_TEST+0x25c>
81101ecc:	e0bfe517 	ldw	r2,-108(fp)
81101ed0:	103fd71e 	bne	r2,zero,81101e30 <__reset+0xfb0e1e30>
      if (*pSrc++ != *pDes++){
        printf("verify ng, read=%08Xh, expected=%08Xh, WordIndex=%Xh\n", (int)*(pSrc-1), (int)szData[i], (nPos/my_data_size)+i);
        bSuccess = FALSE;
      }
    }
    nPos += nAccessLen;
81101ed4:	e0ffed17 	ldw	r3,-76(fp)
81101ed8:	e0bfe917 	ldw	r2,-92(fp)
81101edc:	1885883a 	add	r2,r3,r2
81101ee0:	e0bfed15 	stw	r2,-76(fp)
    if (nProgressIndex <= 9 && nPos >= szProgress[nProgressIndex]){
81101ee4:	e0bfee17 	ldw	r2,-72(fp)
81101ee8:	10800288 	cmpgei	r2,r2,10
81101eec:	1000121e 	bne	r2,zero,81101f38 <DDR2_MEMORY_READ_TEST+0x2c0>
81101ef0:	e0bfee17 	ldw	r2,-72(fp)
81101ef4:	1085883a 	add	r2,r2,r2
81101ef8:	1085883a 	add	r2,r2,r2
81101efc:	e0ffe504 	addi	r3,fp,-108
81101f00:	1885883a 	add	r2,r3,r2
81101f04:	10800e04 	addi	r2,r2,56
81101f08:	10800017 	ldw	r2,0(r2)
81101f0c:	e0ffed17 	ldw	r3,-76(fp)
81101f10:	18800936 	bltu	r3,r2,81101f38 <DDR2_MEMORY_READ_TEST+0x2c0>
      nProgressIndex++;
81101f14:	e0bfee17 	ldw	r2,-72(fp)
81101f18:	10800044 	addi	r2,r2,1
81101f1c:	e0bfee15 	stw	r2,-72(fp)
      printf("%02d%% ", nProgressIndex*10);
81101f20:	e0bfee17 	ldw	r2,-72(fp)
81101f24:	108002a4 	muli	r2,r2,10
81101f28:	100b883a 	mov	r5,r2
81101f2c:	01204474 	movhi	r4,33041
81101f30:	211def04 	addi	r4,r4,30652
81101f34:	11057bc0 	call	811057bc <printf>

  pSrc = (my_data *)Ddr2Base;
  nAccessLen = sizeof(szData);
  nItemNum = nAccessLen / my_data_size;
  nPos = 0;
  while(bSuccess && nPos < ByteLen){
81101f38:	e0bfe517 	ldw	r2,-108(fp)
81101f3c:	10000326 	beq	r2,zero,81101f4c <DDR2_MEMORY_READ_TEST+0x2d4>
81101f40:	e0ffed17 	ldw	r3,-76(fp)
81101f44:	e0bfe717 	ldw	r2,-100(fp)
81101f48:	18bfa736 	bltu	r3,r2,81101de8 <__reset+0xfb0e1de8>
    if (nProgressIndex <= 9 && nPos >= szProgress[nProgressIndex]){
      nProgressIndex++;
      printf("%02d%% ", nProgressIndex*10);
    }
  }
  printf("\n");
81101f4c:	01000284 	movi	r4,10
81101f50:	11058000 	call	81105800 <putchar>
81101f54:	d0e02317 	ldw	r3,-32628(gp)

  TimeElapsed = alt_nticks() - TimeStart;
81101f58:	e0bff117 	ldw	r2,-60(fp)
81101f5c:	1885c83a 	sub	r2,r3,r2
81101f60:	e0bff015 	stw	r2,-64(fp)
  if (bSuccess){
81101f64:	e0bfe517 	ldw	r2,-108(fp)
81101f68:	10001726 	beq	r2,zero,81101fc8 <DDR2_MEMORY_READ_TEST+0x350>
    printf("DDR2 read test pass, size=%d bytes, %.3f sec\n", ByteLen, (float)TimeElapsed/(float)alt_ticks_per_second());
81101f6c:	e13ff017 	ldw	r4,-64(fp)
81101f70:	11049fc0 	call	811049fc <__floatsisf>
81101f74:	1021883a 	mov	r16,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
81101f78:	d0a02217 	ldw	r2,-32632(gp)
81101f7c:	1009883a 	mov	r4,r2
81101f80:	1104b200 	call	81104b20 <__floatunsisf>
81101f84:	1007883a 	mov	r3,r2
81101f88:	180b883a 	mov	r5,r3
81101f8c:	8009883a 	mov	r4,r16
81101f90:	11041c00 	call	811041c0 <__divsf3>
81101f94:	1007883a 	mov	r3,r2
81101f98:	1805883a 	mov	r2,r3
81101f9c:	1009883a 	mov	r4,r2
81101fa0:	11053280 	call	81105328 <__extendsfdf2>
81101fa4:	1009883a 	mov	r4,r2
81101fa8:	180b883a 	mov	r5,r3
81101fac:	200d883a 	mov	r6,r4
81101fb0:	280f883a 	mov	r7,r5
81101fb4:	e17fe717 	ldw	r5,-100(fp)
81101fb8:	01204474 	movhi	r4,33041
81101fbc:	211e2204 	addi	r4,r4,30856
81101fc0:	11057bc0 	call	811057bc <printf>
81101fc4:	00000306 	br	81101fd4 <DDR2_MEMORY_READ_TEST+0x35c>
  } else {
    printf("DDR2 read test fail\n");
81101fc8:	01204474 	movhi	r4,33041
81101fcc:	211e2e04 	addi	r4,r4,30904
81101fd0:	11058d80 	call	811058d8 <puts>
  }
  printf("\n");
81101fd4:	01000284 	movi	r4,10
81101fd8:	11058000 	call	81105800 <putchar>

  return bSuccess;
81101fdc:	e0bfe517 	ldw	r2,-108(fp)
}
81101fe0:	e6fffe04 	addi	sp,fp,-8
81101fe4:	dfc00317 	ldw	ra,12(sp)
81101fe8:	df000217 	ldw	fp,8(sp)
81101fec:	dc400117 	ldw	r17,4(sp)
81101ff0:	dc000017 	ldw	r16,0(sp)
81101ff4:	dec00404 	addi	sp,sp,16
81101ff8:	f800283a 	ret

81101ffc <DDR2_MEMORY_RANDOM_WRITE_TEST>:
 * @param [in] bTime  Controla se a duração da função será medida
 *
 * @retval TRUE : Sucesso
 *
 */
bool DDR2_MEMORY_RANDOM_WRITE_TEST(alt_u8 MemoryId, bool bVerbose, bool bTime){
81101ffc:	deffed04 	addi	sp,sp,-76
81102000:	dfc01215 	stw	ra,72(sp)
81102004:	df001115 	stw	fp,68(sp)
81102008:	dcc01015 	stw	r19,64(sp)
8110200c:	dc800f15 	stw	r18,60(sp)
81102010:	dc400e15 	stw	r17,56(sp)
81102014:	dc000d15 	stw	r16,52(sp)
81102018:	df001104 	addi	fp,sp,68
8110201c:	2005883a 	mov	r2,r4
81102020:	e17ffa15 	stw	r5,-24(fp)
81102024:	e1bffb15 	stw	r6,-20(fp)
81102028:	e0bff905 	stb	r2,-28(fp)

  printf("===== DE4 DDR2 Memory Random Write Test =====\n");
8110202c:	01204474 	movhi	r4,33041
81102030:	211e3304 	addi	r4,r4,30924
81102034:	11058d80 	call	811058d8 <puts>
  bool bSuccess;
  alt_u32 Ddr2Base;
  alt_u32 ByteLen;
  
  bSuccess = TRUE;
81102038:	00800044 	movi	r2,1
8110203c:	e0bff415 	stw	r2,-48(fp)
  switch (MemoryId) {
81102040:	e0bff903 	ldbu	r2,-28(fp)
81102044:	10c00060 	cmpeqi	r3,r2,1
81102048:	1800031e 	bne	r3,zero,81102058 <DDR2_MEMORY_RANDOM_WRITE_TEST+0x5c>
8110204c:	108000a0 	cmpeqi	r2,r2,2
81102050:	1000051e 	bne	r2,zero,81102068 <DDR2_MEMORY_RANDOM_WRITE_TEST+0x6c>
81102054:	00000906 	br	8110207c <DDR2_MEMORY_RANDOM_WRITE_TEST+0x80>
    case DDR2_M1_ID:
      Ddr2Base = DDR2_M1_MEMORY_BASE;
81102058:	e03fef15 	stw	zero,-68(fp)
      ByteLen = DDR2_M1_MEMORY_SIZE;
8110205c:	00900034 	movhi	r2,16384
81102060:	e0bff015 	stw	r2,-64(fp)
    break;
81102064:	00000b06 	br	81102094 <DDR2_MEMORY_RANDOM_WRITE_TEST+0x98>
    case DDR2_M2_ID:
      Ddr2Base = DDR2_M2_MEMORY_BASE;
81102068:	00900034 	movhi	r2,16384
8110206c:	e0bfef15 	stw	r2,-68(fp)
      ByteLen = DDR2_M2_MEMORY_SIZE;
81102070:	00900034 	movhi	r2,16384
81102074:	e0bff015 	stw	r2,-64(fp)
    break;
81102078:	00000606 	br	81102094 <DDR2_MEMORY_RANDOM_WRITE_TEST+0x98>
    default:
      bSuccess = FALSE;
8110207c:	e03ff415 	stw	zero,-48(fp)
	  printf("DR2 Memory ID not identified!! Aborting Test \n");
81102080:	01204474 	movhi	r4,33041
81102084:	211bfa04 	addi	r4,r4,28648
81102088:	11058d80 	call	811058d8 <puts>
      return bSuccess;
8110208c:	e0bff417 	ldw	r2,-48(fp)
81102090:	00008406 	br	811022a4 <DDR2_MEMORY_RANDOM_WRITE_TEST+0x2a8>
  }
  
  printf("DDR2 Size: %d MBytes\n", ByteLen/1024/1024);
81102094:	e0bff017 	ldw	r2,-64(fp)
81102098:	1004d53a 	srli	r2,r2,20
8110209c:	100b883a 	mov	r5,r2
811020a0:	01204474 	movhi	r4,33041
811020a4:	211de504 	addi	r4,r4,30612
811020a8:	11057bc0 	call	811057bc <printf>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
811020ac:	d0a02317 	ldw	r2,-32628(gp)
  alt_u32 CurrentState;
  alt_u32 MemoryEndAddress;
  alt_u32 NextMilestone;
  alt_u8 Percentage;
  
  InitialState = alt_nticks();
811020b0:	d0a01715 	stw	r2,-32676(gp)
  CurrentState = InitialState;
811020b4:	d0a01717 	ldw	r2,-32676(gp)
811020b8:	e0bff815 	stw	r2,-32(fp)
  MemoryEndAddress = Ddr2Base + ByteLen;
811020bc:	e0ffef17 	ldw	r3,-68(fp)
811020c0:	e0bff017 	ldw	r2,-64(fp)
811020c4:	1885883a 	add	r2,r3,r2
811020c8:	e0bff515 	stw	r2,-44(fp)
  NextMilestone = Ddr2Base + ByteLen/20;
811020cc:	e0fff017 	ldw	r3,-64(fp)
811020d0:	00b33374 	movhi	r2,52429
811020d4:	10b33344 	addi	r2,r2,-13107
811020d8:	1888383a 	mulxuu	r4,r3,r2
811020dc:	1885383a 	mul	r2,r3,r2
811020e0:	1025883a 	mov	r18,r2
811020e4:	2027883a 	mov	r19,r4
811020e8:	9806d13a 	srli	r3,r19,4
811020ec:	e0bfef17 	ldw	r2,-68(fp)
811020f0:	1885883a 	add	r2,r3,r2
811020f4:	e0bff215 	stw	r2,-56(fp)
  Percentage = 5;
811020f8:	00800144 	movi	r2,5
811020fc:	e0bff305 	stb	r2,-52(fp)
  printf("Writing to memory...\n");
81102100:	01204474 	movhi	r4,33041
81102104:	211e3f04 	addi	r4,r4,30972
81102108:	11058d80 	call	811058d8 <puts>
  if (bVerbose == DDR2_VERBOSE) {
8110210c:	e0bffa17 	ldw	r2,-24(fp)
81102110:	10800058 	cmpnei	r2,r2,1
81102114:	1000031e 	bne	r2,zero,81102124 <DDR2_MEMORY_RANDOM_WRITE_TEST+0x128>
    printf("00%%..");
81102118:	01204474 	movhi	r4,33041
8110211c:	211e4504 	addi	r4,r4,30996
81102120:	11057bc0 	call	811057bc <printf>
  }
  int TimeStart, TimeElapsed = 0;
81102124:	e03ff615 	stw	zero,-40(fp)
81102128:	d0a02317 	ldw	r2,-32628(gp)

  TimeStart = alt_nticks();
8110212c:	e0bff715 	stw	r2,-36(fp)
  for (pDestination = (alt_u32*)Ddr2Base; (alt_u32)pDestination < MemoryEndAddress; pDestination++){
81102130:	e0bfef17 	ldw	r2,-68(fp)
81102134:	e0bff115 	stw	r2,-60(fp)
81102138:	00002506 	br	811021d0 <DDR2_MEMORY_RANDOM_WRITE_TEST+0x1d4>
    *pDestination = xorshift32(&CurrentState);
8110213c:	e0bff804 	addi	r2,fp,-32
81102140:	1009883a 	mov	r4,r2
81102144:	11025a00 	call	811025a0 <xorshift32>
81102148:	1007883a 	mov	r3,r2
8110214c:	e0bff117 	ldw	r2,-60(fp)
81102150:	10c00015 	stw	r3,0(r2)
    if ((bVerbose == DDR2_VERBOSE) & ((alt_u32)pDestination > NextMilestone)){
81102154:	e0bffa17 	ldw	r2,-24(fp)
81102158:	10800060 	cmpeqi	r2,r2,1
8110215c:	1009883a 	mov	r4,r2
81102160:	e0bff117 	ldw	r2,-60(fp)
81102164:	e0fff217 	ldw	r3,-56(fp)
81102168:	1885803a 	cmpltu	r2,r3,r2
8110216c:	2084703a 	and	r2,r4,r2
81102170:	10803fcc 	andi	r2,r2,255
81102174:	10001326 	beq	r2,zero,811021c4 <DDR2_MEMORY_RANDOM_WRITE_TEST+0x1c8>
      printf("..%02d%%..",Percentage);
81102178:	e0bff303 	ldbu	r2,-52(fp)
8110217c:	100b883a 	mov	r5,r2
81102180:	01204474 	movhi	r4,33041
81102184:	211e4704 	addi	r4,r4,31004
81102188:	11057bc0 	call	811057bc <printf>
	  NextMilestone += ByteLen/20;
8110218c:	e0fff017 	ldw	r3,-64(fp)
81102190:	00b33374 	movhi	r2,52429
81102194:	10b33344 	addi	r2,r2,-13107
81102198:	1888383a 	mulxuu	r4,r3,r2
8110219c:	1885383a 	mul	r2,r3,r2
811021a0:	1021883a 	mov	r16,r2
811021a4:	2023883a 	mov	r17,r4
811021a8:	8804d13a 	srli	r2,r17,4
811021ac:	e0fff217 	ldw	r3,-56(fp)
811021b0:	1885883a 	add	r2,r3,r2
811021b4:	e0bff215 	stw	r2,-56(fp)
	  Percentage += 5;
811021b8:	e0bff303 	ldbu	r2,-52(fp)
811021bc:	10800144 	addi	r2,r2,5
811021c0:	e0bff305 	stb	r2,-52(fp)
    printf("00%%..");
  }
  int TimeStart, TimeElapsed = 0;

  TimeStart = alt_nticks();
  for (pDestination = (alt_u32*)Ddr2Base; (alt_u32)pDestination < MemoryEndAddress; pDestination++){
811021c4:	e0bff117 	ldw	r2,-60(fp)
811021c8:	10800104 	addi	r2,r2,4
811021cc:	e0bff115 	stw	r2,-60(fp)
811021d0:	e0fff117 	ldw	r3,-60(fp)
811021d4:	e0bff517 	ldw	r2,-44(fp)
811021d8:	18bfd836 	bltu	r3,r2,8110213c <__reset+0xfb0e213c>
      printf("..%02d%%..",Percentage);
	  NextMilestone += ByteLen/20;
	  Percentage += 5;
	}
  }
  alt_dcache_flush_all();
811021dc:	1111a7c0 	call	81111a7c <alt_dcache_flush_all>
  if (bVerbose == DDR2_VERBOSE) {
811021e0:	e0bffa17 	ldw	r2,-24(fp)
811021e4:	10800058 	cmpnei	r2,r2,1
811021e8:	1000031e 	bne	r2,zero,811021f8 <DDR2_MEMORY_RANDOM_WRITE_TEST+0x1fc>
    printf("..100%%\n");
811021ec:	01204474 	movhi	r4,33041
811021f0:	211e4a04 	addi	r4,r4,31016
811021f4:	11057bc0 	call	811057bc <printf>
  }

  if (bSuccess){
811021f8:	e0bff417 	ldw	r2,-48(fp)
811021fc:	10002326 	beq	r2,zero,8110228c <DDR2_MEMORY_RANDOM_WRITE_TEST+0x290>
    if (bTime == TRUE){
81102200:	e0bffb17 	ldw	r2,-20(fp)
81102204:	10800058 	cmpnei	r2,r2,1
81102208:	10001b1e 	bne	r2,zero,81102278 <DDR2_MEMORY_RANDOM_WRITE_TEST+0x27c>
8110220c:	d0e02317 	ldw	r3,-32628(gp)
      TimeElapsed = alt_nticks() - TimeStart;
81102210:	e0bff717 	ldw	r2,-36(fp)
81102214:	1885c83a 	sub	r2,r3,r2
81102218:	e0bff615 	stw	r2,-40(fp)
      printf("DDR2 write test pass, size=%d bytes, %.3f sec\n", ByteLen, (float)TimeElapsed/(float)alt_ticks_per_second());
8110221c:	e13ff617 	ldw	r4,-40(fp)
81102220:	11049fc0 	call	811049fc <__floatsisf>
81102224:	1021883a 	mov	r16,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
81102228:	d0a02217 	ldw	r2,-32632(gp)
8110222c:	1009883a 	mov	r4,r2
81102230:	1104b200 	call	81104b20 <__floatunsisf>
81102234:	1007883a 	mov	r3,r2
81102238:	180b883a 	mov	r5,r3
8110223c:	8009883a 	mov	r4,r16
81102240:	11041c00 	call	811041c0 <__divsf3>
81102244:	1007883a 	mov	r3,r2
81102248:	1805883a 	mov	r2,r3
8110224c:	1009883a 	mov	r4,r2
81102250:	11053280 	call	81105328 <__extendsfdf2>
81102254:	1009883a 	mov	r4,r2
81102258:	180b883a 	mov	r5,r3
8110225c:	200d883a 	mov	r6,r4
81102260:	280f883a 	mov	r7,r5
81102264:	e17ff017 	ldw	r5,-64(fp)
81102268:	01204474 	movhi	r4,33041
8110226c:	211df104 	addi	r4,r4,30660
81102270:	11057bc0 	call	811057bc <printf>
81102274:	00000806 	br	81102298 <DDR2_MEMORY_RANDOM_WRITE_TEST+0x29c>
    } else {
      printf("DDR2 write test pass, size=%d bytes\n", ByteLen);
81102278:	e17ff017 	ldw	r5,-64(fp)
8110227c:	01204474 	movhi	r4,33041
81102280:	211e4d04 	addi	r4,r4,31028
81102284:	11057bc0 	call	811057bc <printf>
81102288:	00000306 	br	81102298 <DDR2_MEMORY_RANDOM_WRITE_TEST+0x29c>
    }
  } else {
    printf("DDR2 write test fail\n");
8110228c:	01204474 	movhi	r4,33041
81102290:	211dfd04 	addi	r4,r4,30708
81102294:	11058d80 	call	811058d8 <puts>
  }
  printf("\n");
81102298:	01000284 	movi	r4,10
8110229c:	11058000 	call	81105800 <putchar>

  return bSuccess;
811022a0:	e0bff417 	ldw	r2,-48(fp)
}
811022a4:	e6fffc04 	addi	sp,fp,-16
811022a8:	dfc00517 	ldw	ra,20(sp)
811022ac:	df000417 	ldw	fp,16(sp)
811022b0:	dcc00317 	ldw	r19,12(sp)
811022b4:	dc800217 	ldw	r18,8(sp)
811022b8:	dc400117 	ldw	r17,4(sp)
811022bc:	dc000017 	ldw	r16,0(sp)
811022c0:	dec00604 	addi	sp,sp,24
811022c4:	f800283a 	ret

811022c8 <DDR2_MEMORY_RANDOM_READ_TEST>:
 * @param [in] bTime  Controla se a duração da função será medida
 *
 * @retval TRUE : Sucesso
 *
 */
bool DDR2_MEMORY_RANDOM_READ_TEST(alt_u8 MemoryId, bool bVerbose, bool bTime){
811022c8:	deffed04 	addi	sp,sp,-76
811022cc:	dfc01215 	stw	ra,72(sp)
811022d0:	df001115 	stw	fp,68(sp)
811022d4:	dcc01015 	stw	r19,64(sp)
811022d8:	dc800f15 	stw	r18,60(sp)
811022dc:	dc400e15 	stw	r17,56(sp)
811022e0:	dc000d15 	stw	r16,52(sp)
811022e4:	df001104 	addi	fp,sp,68
811022e8:	2005883a 	mov	r2,r4
811022ec:	e17ffa15 	stw	r5,-24(fp)
811022f0:	e1bffb15 	stw	r6,-20(fp)
811022f4:	e0bff905 	stb	r2,-28(fp)

  printf("===== DE4 DDR2 Memory Random Read Test =====\n");
811022f8:	01204474 	movhi	r4,33041
811022fc:	211e5704 	addi	r4,r4,31068
81102300:	11058d80 	call	811058d8 <puts>
  bool bSuccess;
  alt_u32 Ddr2Base;
  alt_u32 ByteLen;
  
  bSuccess = TRUE;
81102304:	00800044 	movi	r2,1
81102308:	e0bfef15 	stw	r2,-68(fp)
  switch (MemoryId) {
8110230c:	e0bff903 	ldbu	r2,-28(fp)
81102310:	10c00060 	cmpeqi	r3,r2,1
81102314:	1800031e 	bne	r3,zero,81102324 <DDR2_MEMORY_RANDOM_READ_TEST+0x5c>
81102318:	108000a0 	cmpeqi	r2,r2,2
8110231c:	1000051e 	bne	r2,zero,81102334 <DDR2_MEMORY_RANDOM_READ_TEST+0x6c>
81102320:	00000906 	br	81102348 <DDR2_MEMORY_RANDOM_READ_TEST+0x80>
    case DDR2_M1_ID:
      Ddr2Base = DDR2_M1_MEMORY_BASE;
81102324:	e03ff015 	stw	zero,-64(fp)
      ByteLen = DDR2_M1_MEMORY_SIZE;
81102328:	00900034 	movhi	r2,16384
8110232c:	e0bff115 	stw	r2,-60(fp)
    break;
81102330:	00000b06 	br	81102360 <DDR2_MEMORY_RANDOM_READ_TEST+0x98>
    case DDR2_M2_ID:
      Ddr2Base = DDR2_M2_MEMORY_BASE;
81102334:	00900034 	movhi	r2,16384
81102338:	e0bff015 	stw	r2,-64(fp)
      ByteLen = DDR2_M2_MEMORY_SIZE;
8110233c:	00900034 	movhi	r2,16384
81102340:	e0bff115 	stw	r2,-60(fp)
    break;
81102344:	00000606 	br	81102360 <DDR2_MEMORY_RANDOM_READ_TEST+0x98>
    default:
      bSuccess = FALSE;
81102348:	e03fef15 	stw	zero,-68(fp)
	  printf("DR2 Memory ID not identified!! Aborting Test \n");
8110234c:	01204474 	movhi	r4,33041
81102350:	211bfa04 	addi	r4,r4,28648
81102354:	11058d80 	call	811058d8 <puts>
      return bSuccess;
81102358:	e0bfef17 	ldw	r2,-68(fp)
8110235c:	00008706 	br	8110257c <DDR2_MEMORY_RANDOM_READ_TEST+0x2b4>
  }
  
  printf("DDR2 Size: %d MBytes\n", ByteLen/1024/1024);
81102360:	e0bff117 	ldw	r2,-60(fp)
81102364:	1004d53a 	srli	r2,r2,20
81102368:	100b883a 	mov	r5,r2
8110236c:	01204474 	movhi	r4,33041
81102370:	211de504 	addi	r4,r4,30612
81102374:	11057bc0 	call	811057bc <printf>
  alt_u32 CurrentState;
  alt_u32 MemoryEndAddress;
  alt_u32 NextMilestone;
  alt_u8 Percentage;
  
  CurrentState = InitialState;
81102378:	d0a01717 	ldw	r2,-32676(gp)
8110237c:	e0bff815 	stw	r2,-32(fp)
  MemoryEndAddress = Ddr2Base + ByteLen;
81102380:	e0fff017 	ldw	r3,-64(fp)
81102384:	e0bff117 	ldw	r2,-60(fp)
81102388:	1885883a 	add	r2,r3,r2
8110238c:	e0bff515 	stw	r2,-44(fp)
  NextMilestone = Ddr2Base + ByteLen/20;
81102390:	e0fff117 	ldw	r3,-60(fp)
81102394:	00b33374 	movhi	r2,52429
81102398:	10b33344 	addi	r2,r2,-13107
8110239c:	1888383a 	mulxuu	r4,r3,r2
811023a0:	1885383a 	mul	r2,r3,r2
811023a4:	1025883a 	mov	r18,r2
811023a8:	2027883a 	mov	r19,r4
811023ac:	9806d13a 	srli	r3,r19,4
811023b0:	e0bff017 	ldw	r2,-64(fp)
811023b4:	1885883a 	add	r2,r3,r2
811023b8:	e0bff315 	stw	r2,-52(fp)
  Percentage = 5;
811023bc:	00800144 	movi	r2,5
811023c0:	e0bff405 	stb	r2,-48(fp)
  printf("Reading from memory...\n");
811023c4:	01204474 	movhi	r4,33041
811023c8:	211e6304 	addi	r4,r4,31116
811023cc:	11058d80 	call	811058d8 <puts>
  if (bVerbose == DDR2_VERBOSE) {
811023d0:	e0bffa17 	ldw	r2,-24(fp)
811023d4:	10800058 	cmpnei	r2,r2,1
811023d8:	1000031e 	bne	r2,zero,811023e8 <DDR2_MEMORY_RANDOM_READ_TEST+0x120>
    printf("00%%..");
811023dc:	01204474 	movhi	r4,33041
811023e0:	211e4504 	addi	r4,r4,30996
811023e4:	11057bc0 	call	811057bc <printf>
  }
  
  int TimeStart, TimeElapsed = 0;
811023e8:	e03ff615 	stw	zero,-40(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
811023ec:	d0a02317 	ldw	r2,-32628(gp)

  TimeStart = alt_nticks();
811023f0:	e0bff715 	stw	r2,-36(fp)
  for (pSource = (alt_u32*)Ddr2Base; (alt_u32)pSource < MemoryEndAddress; pSource++){
811023f4:	e0bff017 	ldw	r2,-64(fp)
811023f8:	e0bff215 	stw	r2,-56(fp)
811023fc:	00002b06 	br	811024ac <DDR2_MEMORY_RANDOM_READ_TEST+0x1e4>
    if (xorshift32(&CurrentState) != *pSource){
81102400:	e0bff804 	addi	r2,fp,-32
81102404:	1009883a 	mov	r4,r2
81102408:	11025a00 	call	811025a0 <xorshift32>
8110240c:	1007883a 	mov	r3,r2
81102410:	e0bff217 	ldw	r2,-56(fp)
81102414:	10800017 	ldw	r2,0(r2)
81102418:	18800826 	beq	r3,r2,8110243c <DDR2_MEMORY_RANDOM_READ_TEST+0x174>
      bSuccess = FALSE;
8110241c:	e03fef15 	stw	zero,-68(fp)
	  if (bVerbose == DDR2_VERBOSE) {
81102420:	e0bffa17 	ldw	r2,-24(fp)
81102424:	10800058 	cmpnei	r2,r2,1
81102428:	1000041e 	bne	r2,zero,8110243c <DDR2_MEMORY_RANDOM_READ_TEST+0x174>
        printf("Failed to read adress 0x%08X\n", pSource);
8110242c:	e17ff217 	ldw	r5,-56(fp)
81102430:	01204474 	movhi	r4,33041
81102434:	211e6904 	addi	r4,r4,31140
81102438:	11057bc0 	call	811057bc <printf>
      }
    }
    if ((bVerbose == DDR2_VERBOSE) && ((alt_u32)pSource > NextMilestone)){
8110243c:	e0bffa17 	ldw	r2,-24(fp)
81102440:	10800058 	cmpnei	r2,r2,1
81102444:	1000161e 	bne	r2,zero,811024a0 <DDR2_MEMORY_RANDOM_READ_TEST+0x1d8>
81102448:	e0bff217 	ldw	r2,-56(fp)
8110244c:	e0fff317 	ldw	r3,-52(fp)
81102450:	1880132e 	bgeu	r3,r2,811024a0 <DDR2_MEMORY_RANDOM_READ_TEST+0x1d8>
      printf("..%02d%%..",Percentage);
81102454:	e0bff403 	ldbu	r2,-48(fp)
81102458:	100b883a 	mov	r5,r2
8110245c:	01204474 	movhi	r4,33041
81102460:	211e4704 	addi	r4,r4,31004
81102464:	11057bc0 	call	811057bc <printf>
	  NextMilestone += ByteLen/20;
81102468:	e0fff117 	ldw	r3,-60(fp)
8110246c:	00b33374 	movhi	r2,52429
81102470:	10b33344 	addi	r2,r2,-13107
81102474:	1888383a 	mulxuu	r4,r3,r2
81102478:	1885383a 	mul	r2,r3,r2
8110247c:	1021883a 	mov	r16,r2
81102480:	2023883a 	mov	r17,r4
81102484:	8804d13a 	srli	r2,r17,4
81102488:	e0fff317 	ldw	r3,-52(fp)
8110248c:	1885883a 	add	r2,r3,r2
81102490:	e0bff315 	stw	r2,-52(fp)
	  Percentage += 5;
81102494:	e0bff403 	ldbu	r2,-48(fp)
81102498:	10800144 	addi	r2,r2,5
8110249c:	e0bff405 	stb	r2,-48(fp)
  }
  
  int TimeStart, TimeElapsed = 0;

  TimeStart = alt_nticks();
  for (pSource = (alt_u32*)Ddr2Base; (alt_u32)pSource < MemoryEndAddress; pSource++){
811024a0:	e0bff217 	ldw	r2,-56(fp)
811024a4:	10800104 	addi	r2,r2,4
811024a8:	e0bff215 	stw	r2,-56(fp)
811024ac:	e0fff217 	ldw	r3,-56(fp)
811024b0:	e0bff517 	ldw	r2,-44(fp)
811024b4:	18bfd236 	bltu	r3,r2,81102400 <__reset+0xfb0e2400>
      printf("..%02d%%..",Percentage);
	  NextMilestone += ByteLen/20;
	  Percentage += 5;
	}
  }
  if (bVerbose == DDR2_VERBOSE) {
811024b8:	e0bffa17 	ldw	r2,-24(fp)
811024bc:	10800058 	cmpnei	r2,r2,1
811024c0:	1000031e 	bne	r2,zero,811024d0 <DDR2_MEMORY_RANDOM_READ_TEST+0x208>
    printf("..100%%\n");
811024c4:	01204474 	movhi	r4,33041
811024c8:	211e4a04 	addi	r4,r4,31016
811024cc:	11057bc0 	call	811057bc <printf>
  }

  if (bSuccess){
811024d0:	e0bfef17 	ldw	r2,-68(fp)
811024d4:	10002326 	beq	r2,zero,81102564 <DDR2_MEMORY_RANDOM_READ_TEST+0x29c>
    if (bTime == TRUE){
811024d8:	e0bffb17 	ldw	r2,-20(fp)
811024dc:	10800058 	cmpnei	r2,r2,1
811024e0:	10001b1e 	bne	r2,zero,81102550 <DDR2_MEMORY_RANDOM_READ_TEST+0x288>
811024e4:	d0e02317 	ldw	r3,-32628(gp)
      TimeElapsed = alt_nticks() - TimeStart;
811024e8:	e0bff717 	ldw	r2,-36(fp)
811024ec:	1885c83a 	sub	r2,r3,r2
811024f0:	e0bff615 	stw	r2,-40(fp)
      printf("DDR2 read test pass, size=%d bytes, %.3f sec\n", ByteLen, (float)TimeElapsed/(float)alt_ticks_per_second());
811024f4:	e13ff617 	ldw	r4,-40(fp)
811024f8:	11049fc0 	call	811049fc <__floatsisf>
811024fc:	1021883a 	mov	r16,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
81102500:	d0a02217 	ldw	r2,-32632(gp)
81102504:	1009883a 	mov	r4,r2
81102508:	1104b200 	call	81104b20 <__floatunsisf>
8110250c:	1007883a 	mov	r3,r2
81102510:	180b883a 	mov	r5,r3
81102514:	8009883a 	mov	r4,r16
81102518:	11041c00 	call	811041c0 <__divsf3>
8110251c:	1007883a 	mov	r3,r2
81102520:	1805883a 	mov	r2,r3
81102524:	1009883a 	mov	r4,r2
81102528:	11053280 	call	81105328 <__extendsfdf2>
8110252c:	1009883a 	mov	r4,r2
81102530:	180b883a 	mov	r5,r3
81102534:	200d883a 	mov	r6,r4
81102538:	280f883a 	mov	r7,r5
8110253c:	e17ff117 	ldw	r5,-60(fp)
81102540:	01204474 	movhi	r4,33041
81102544:	211e2204 	addi	r4,r4,30856
81102548:	11057bc0 	call	811057bc <printf>
8110254c:	00000806 	br	81102570 <DDR2_MEMORY_RANDOM_READ_TEST+0x2a8>
    } else {
      printf("DDR2 read test pass, size=%d bytes\n", ByteLen);
81102550:	e17ff117 	ldw	r5,-60(fp)
81102554:	01204474 	movhi	r4,33041
81102558:	211e7104 	addi	r4,r4,31172
8110255c:	11057bc0 	call	811057bc <printf>
81102560:	00000306 	br	81102570 <DDR2_MEMORY_RANDOM_READ_TEST+0x2a8>
    }
  } else {
    printf("DDR2 read test fail\n");
81102564:	01204474 	movhi	r4,33041
81102568:	211e2e04 	addi	r4,r4,30904
8110256c:	11058d80 	call	811058d8 <puts>
  }
  printf("\n");
81102570:	01000284 	movi	r4,10
81102574:	11058000 	call	81105800 <putchar>

  return bSuccess;
81102578:	e0bfef17 	ldw	r2,-68(fp)
}
8110257c:	e6fffc04 	addi	sp,fp,-16
81102580:	dfc00517 	ldw	ra,20(sp)
81102584:	df000417 	ldw	fp,16(sp)
81102588:	dcc00317 	ldw	r19,12(sp)
8110258c:	dc800217 	ldw	r18,8(sp)
81102590:	dc400117 	ldw	r17,4(sp)
81102594:	dc000017 	ldw	r16,0(sp)
81102598:	dec00604 	addi	sp,sp,24
8110259c:	f800283a 	ret

811025a0 <xorshift32>:
 * @param [in] bDRIVE  Estado atual do RNG
  *
 * @retval Número aleatório resultate do RNG
 *
 */
alt_u32 xorshift32(alt_u32 *State){
811025a0:	defffd04 	addi	sp,sp,-12
811025a4:	df000215 	stw	fp,8(sp)
811025a8:	df000204 	addi	fp,sp,8
811025ac:	e13fff15 	stw	r4,-4(fp)

  alt_u32 x = *State;
811025b0:	e0bfff17 	ldw	r2,-4(fp)
811025b4:	10800017 	ldw	r2,0(r2)
811025b8:	e0bffe15 	stw	r2,-8(fp)
  x ^= x << 13;
811025bc:	e0bffe17 	ldw	r2,-8(fp)
811025c0:	1004937a 	slli	r2,r2,13
811025c4:	e0fffe17 	ldw	r3,-8(fp)
811025c8:	1884f03a 	xor	r2,r3,r2
811025cc:	e0bffe15 	stw	r2,-8(fp)
  x ^= x >> 17;
811025d0:	e0bffe17 	ldw	r2,-8(fp)
811025d4:	1004d47a 	srli	r2,r2,17
811025d8:	e0fffe17 	ldw	r3,-8(fp)
811025dc:	1884f03a 	xor	r2,r3,r2
811025e0:	e0bffe15 	stw	r2,-8(fp)
  x ^= x << 5;
811025e4:	e0bffe17 	ldw	r2,-8(fp)
811025e8:	1004917a 	slli	r2,r2,5
811025ec:	e0fffe17 	ldw	r3,-8(fp)
811025f0:	1884f03a 	xor	r2,r3,r2
811025f4:	e0bffe15 	stw	r2,-8(fp)
  *State = x;
811025f8:	e0bfff17 	ldw	r2,-4(fp)
811025fc:	e0fffe17 	ldw	r3,-8(fp)
81102600:	10c00015 	stw	r3,0(r2)

  return x;
81102604:	e0bffe17 	ldw	r2,-8(fp)
}
81102608:	e037883a 	mov	sp,fp
8110260c:	df000017 	ldw	fp,0(sp)
81102610:	dec00104 	addi	sp,sp,4
81102614:	f800283a 	ret

81102618 <DMA_OPEN_DEVICE>:
 * @param [in] DmaName  String com o nome do DMA (XXX_CSR_NAME)
 *
 * @retval TRUE : Sucesso
 *
 */
bool DMA_OPEN_DEVICE(alt_msgdma_dev **DmaDevice, const char* DmaName){
81102618:	defffb04 	addi	sp,sp,-20
8110261c:	dfc00415 	stw	ra,16(sp)
81102620:	df000315 	stw	fp,12(sp)
81102624:	df000304 	addi	fp,sp,12
81102628:	e13ffe15 	stw	r4,-8(fp)
8110262c:	e17fff15 	stw	r5,-4(fp)
  bool bSuccess = TRUE;
81102630:	00800044 	movi	r2,1
81102634:	e0bffd15 	stw	r2,-12(fp)
  
  //Open DMA based on name

  *DmaDevice = alt_msgdma_open((char *)DmaName);
81102638:	e13fff17 	ldw	r4,-4(fp)
8110263c:	11159740 	call	81115974 <alt_msgdma_open>
81102640:	1007883a 	mov	r3,r2
81102644:	e0bffe17 	ldw	r2,-8(fp)
81102648:	10c00015 	stw	r3,0(r2)
  
  //Check if DMA opened correctly;
  if(*DmaDevice == NULL){
8110264c:	e0bffe17 	ldw	r2,-8(fp)
81102650:	10800017 	ldw	r2,0(r2)
81102654:	1000011e 	bne	r2,zero,8110265c <DMA_OPEN_DEVICE+0x44>
    bSuccess = FALSE;
81102658:	e03ffd15 	stw	zero,-12(fp)
  }
  
  return bSuccess;
8110265c:	e0bffd17 	ldw	r2,-12(fp)
}
81102660:	e037883a 	mov	sp,fp
81102664:	dfc00117 	ldw	ra,4(sp)
81102668:	df000017 	ldw	fp,0(sp)
8110266c:	dec00204 	addi	sp,sp,8
81102670:	f800283a 	ret

81102674 <DMA_CONFIG>:
 * @param [in] ConfigMask  Mascara com as configurações do DMA (overwrite)
 *
 * @retval TRUE : Sucesso
 *
 */
bool DMA_CONFIG(alt_msgdma_dev *DmaDevice, alt_u32 ConfigMask){
81102674:	defffc04 	addi	sp,sp,-16
81102678:	df000315 	stw	fp,12(sp)
8110267c:	df000304 	addi	fp,sp,12
81102680:	e13ffe15 	stw	r4,-8(fp)
81102684:	e17fff15 	stw	r5,-4(fp)
  bool bSuccess = TRUE;
81102688:	00800044 	movi	r2,1
8110268c:	e0bffd15 	stw	r2,-12(fp)
  IOWR_ALTERA_MSGDMA_CSR_CONTROL(DmaDevice->csr_base, ConfigMask);
81102690:	e0bffe17 	ldw	r2,-8(fp)
81102694:	10800317 	ldw	r2,12(r2)
81102698:	10800104 	addi	r2,r2,4
8110269c:	e0ffff17 	ldw	r3,-4(fp)
811026a0:	10c00035 	stwio	r3,0(r2)
  return bSuccess;
811026a4:	e0bffd17 	ldw	r2,-12(fp)
}
811026a8:	e037883a 	mov	sp,fp
811026ac:	df000017 	ldw	fp,0(sp)
811026b0:	dec00104 	addi	sp,sp,4
811026b4:	f800283a 	ret

811026b8 <DMA_BUSY>:
 * @param [in] DmaDevice  Ponteiro para o Device do DMA a ser utilizado
 *
 * @retval TRUE : DMA Ocupado
 *
 */
bool DMA_BUSY(alt_msgdma_dev *DmaDevice){
811026b8:	defffd04 	addi	sp,sp,-12
811026bc:	df000215 	stw	fp,8(sp)
811026c0:	df000204 	addi	fp,sp,8
811026c4:	e13fff15 	stw	r4,-4(fp)
  bool bBusy = FALSE;
811026c8:	e03ffe15 	stw	zero,-8(fp)
  if (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_BUSY_MASK){
811026cc:	e0bfff17 	ldw	r2,-4(fp)
811026d0:	10800317 	ldw	r2,12(r2)
811026d4:	10800037 	ldwio	r2,0(r2)
811026d8:	1080004c 	andi	r2,r2,1
811026dc:	10000226 	beq	r2,zero,811026e8 <DMA_BUSY+0x30>
    bBusy = TRUE;
811026e0:	00800044 	movi	r2,1
811026e4:	e0bffe15 	stw	r2,-8(fp)
  }
  return bBusy;
811026e8:	e0bffe17 	ldw	r2,-8(fp)
}
811026ec:	e037883a 	mov	sp,fp
811026f0:	df000017 	ldw	fp,0(sp)
811026f4:	dec00104 	addi	sp,sp,4
811026f8:	f800283a 	ret

811026fc <DMA_DESCRIPTOR_BUFFER_FULL>:
 * @param [in] DmaDevice  Ponteiro para o Device do DMA a ser utilizado
 *
 * @retval TRUE : Buffer Cheio
 *
 */
bool DMA_DESCRIPTOR_BUFFER_FULL(alt_msgdma_dev *DmaDevice){
811026fc:	defffd04 	addi	sp,sp,-12
81102700:	df000215 	stw	fp,8(sp)
81102704:	df000204 	addi	fp,sp,8
81102708:	e13fff15 	stw	r4,-4(fp)
  bool bFull = FALSE;
8110270c:	e03ffe15 	stw	zero,-8(fp)
  if (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK){
81102710:	e0bfff17 	ldw	r2,-4(fp)
81102714:	10800317 	ldw	r2,12(r2)
81102718:	10800037 	ldwio	r2,0(r2)
8110271c:	1080010c 	andi	r2,r2,4
81102720:	10000226 	beq	r2,zero,8110272c <DMA_DESCRIPTOR_BUFFER_FULL+0x30>
    bFull = TRUE;
81102724:	00800044 	movi	r2,1
81102728:	e0bffe15 	stw	r2,-8(fp)
  }
  return bFull;
8110272c:	e0bffe17 	ldw	r2,-8(fp)
}
81102730:	e037883a 	mov	sp,fp
81102734:	df000017 	ldw	fp,0(sp)
81102738:	dec00104 	addi	sp,sp,4
8110273c:	f800283a 	ret

81102740 <DMA_DESCRIPTOR_BUFFER_EMPTY>:
 * @param [in] DmaDevice  Ponteiro para o Device do DMA a ser utilizado
 *
 * @retval TRUE : Buffer Vazio
 *
 */
bool DMA_DESCRIPTOR_BUFFER_EMPTY(alt_msgdma_dev *DmaDevice){
81102740:	defffd04 	addi	sp,sp,-12
81102744:	df000215 	stw	fp,8(sp)
81102748:	df000204 	addi	fp,sp,8
8110274c:	e13fff15 	stw	r4,-4(fp)
  bool bEmpty = FALSE;
81102750:	e03ffe15 	stw	zero,-8(fp)
  if (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_EMPTY_MASK){
81102754:	e0bfff17 	ldw	r2,-4(fp)
81102758:	10800317 	ldw	r2,12(r2)
8110275c:	10800037 	ldwio	r2,0(r2)
81102760:	1080008c 	andi	r2,r2,2
81102764:	10000226 	beq	r2,zero,81102770 <DMA_DESCRIPTOR_BUFFER_EMPTY+0x30>
    bEmpty = TRUE;
81102768:	00800044 	movi	r2,1
8110276c:	e0bffe15 	stw	r2,-8(fp)
  }
  return bEmpty;
81102770:	e0bffe17 	ldw	r2,-8(fp)
}
81102774:	e037883a 	mov	sp,fp
81102778:	df000017 	ldw	fp,0(sp)
8110277c:	dec00104 	addi	sp,sp,4
81102780:	f800283a 	ret

81102784 <DMA_DISPATCHER_STOP>:
 * @param [in] WaitPeriodUs  Define em qual intervalo de tempo a função irá verificar se a transferencia foi concluida
 *
 * @retval TRUE : Sucesso
 *
 */
bool DMA_DISPATCHER_STOP(alt_msgdma_dev *DmaDevice, bool bWait, alt_32 WaitPeriodUs){
81102784:	defffa04 	addi	sp,sp,-24
81102788:	dfc00515 	stw	ra,20(sp)
8110278c:	df000415 	stw	fp,16(sp)
81102790:	df000404 	addi	fp,sp,16
81102794:	e13ffd15 	stw	r4,-12(fp)
81102798:	e17ffe15 	stw	r5,-8(fp)
8110279c:	e1bfff15 	stw	r6,-4(fp)
  bool bSuccess = TRUE;
811027a0:	00800044 	movi	r2,1
811027a4:	e0bffc15 	stw	r2,-16(fp)
  
  //Send stop command
  IOWR_ALTERA_MSGDMA_CSR_CONTROL(DmaDevice->csr_base, ALTERA_MSGDMA_CSR_STOP_MASK);
811027a8:	e0bffd17 	ldw	r2,-12(fp)
811027ac:	10800317 	ldw	r2,12(r2)
811027b0:	10800104 	addi	r2,r2,4
811027b4:	00c00044 	movi	r3,1
811027b8:	10c00035 	stwio	r3,0(r2)
  
  if (bWait == DMA_WAIT) {
811027bc:	e0bffe17 	ldw	r2,-8(fp)
811027c0:	10800058 	cmpnei	r2,r2,1
811027c4:	10000f1e 	bne	r2,zero,81102804 <DMA_DISPATCHER_STOP+0x80>
    //Wait stop to be finished
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_STOP_STATE_MASK) {
811027c8:	00000806 	br	811027ec <DMA_DISPATCHER_STOP+0x68>
      if (WaitPeriodUs == DMA_DEFAULT_WAIT_PERIOD){
811027cc:	e0bfff17 	ldw	r2,-4(fp)
811027d0:	1000031e 	bne	r2,zero,811027e0 <DMA_DISPATCHER_STOP+0x5c>
        usleep(1);
811027d4:	01000044 	movi	r4,1
811027d8:	11122580 	call	81112258 <usleep>
811027dc:	00000306 	br	811027ec <DMA_DISPATCHER_STOP+0x68>
      } else {
        usleep(WaitPeriodUs);
811027e0:	e0bfff17 	ldw	r2,-4(fp)
811027e4:	1009883a 	mov	r4,r2
811027e8:	11122580 	call	81112258 <usleep>
  //Send stop command
  IOWR_ALTERA_MSGDMA_CSR_CONTROL(DmaDevice->csr_base, ALTERA_MSGDMA_CSR_STOP_MASK);
  
  if (bWait == DMA_WAIT) {
    //Wait stop to be finished
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_STOP_STATE_MASK) {
811027ec:	e0bffd17 	ldw	r2,-12(fp)
811027f0:	10800317 	ldw	r2,12(r2)
811027f4:	10800037 	ldwio	r2,0(r2)
811027f8:	1080080c 	andi	r2,r2,32
811027fc:	103ff31e 	bne	r2,zero,811027cc <__reset+0xfb0e27cc>
81102800:	00000206 	br	8110280c <DMA_DISPATCHER_STOP+0x88>
      } else {
        usleep(WaitPeriodUs);
      }
    }
  } else {
    return bSuccess;
81102804:	e0bffc17 	ldw	r2,-16(fp)
81102808:	00000106 	br	81102810 <DMA_DISPATCHER_STOP+0x8c>
  }
  
  return bSuccess;
8110280c:	e0bffc17 	ldw	r2,-16(fp)
}
81102810:	e037883a 	mov	sp,fp
81102814:	dfc00117 	ldw	ra,4(sp)
81102818:	df000017 	ldw	fp,0(sp)
8110281c:	dec00204 	addi	sp,sp,8
81102820:	f800283a 	ret

81102824 <DMA_DISPATCHER_RESET>:
 * @param [in] WaitPeriodUs  Define em qual intervalo de tempo a função irá verificar se a transferencia foi concluida
 *
 * @retval TRUE : Sucesso
 *
 */
bool DMA_DISPATCHER_RESET(alt_msgdma_dev *DmaDevice, bool bWait, alt_32 WaitPeriodUs){
81102824:	defffa04 	addi	sp,sp,-24
81102828:	dfc00515 	stw	ra,20(sp)
8110282c:	df000415 	stw	fp,16(sp)
81102830:	df000404 	addi	fp,sp,16
81102834:	e13ffd15 	stw	r4,-12(fp)
81102838:	e17ffe15 	stw	r5,-8(fp)
8110283c:	e1bfff15 	stw	r6,-4(fp)
  bool bSuccess = TRUE;
81102840:	00800044 	movi	r2,1
81102844:	e0bffc15 	stw	r2,-16(fp)
  
  //Send reset command
  IOWR_ALTERA_MSGDMA_CSR_CONTROL(DmaDevice->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
81102848:	e0bffd17 	ldw	r2,-12(fp)
8110284c:	10800317 	ldw	r2,12(r2)
81102850:	10800104 	addi	r2,r2,4
81102854:	00c00084 	movi	r3,2
81102858:	10c00035 	stwio	r3,0(r2)
  
  if (bWait == DMA_WAIT) {
8110285c:	e0bffe17 	ldw	r2,-8(fp)
81102860:	10800058 	cmpnei	r2,r2,1
81102864:	10000f1e 	bne	r2,zero,811028a4 <DMA_DISPATCHER_RESET+0x80>
    //Wait reset to be finished
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_RESET_STATE_MASK) {
81102868:	00000806 	br	8110288c <DMA_DISPATCHER_RESET+0x68>
      if (WaitPeriodUs == DMA_DEFAULT_WAIT_PERIOD){
8110286c:	e0bfff17 	ldw	r2,-4(fp)
81102870:	1000031e 	bne	r2,zero,81102880 <DMA_DISPATCHER_RESET+0x5c>
        usleep(1);
81102874:	01000044 	movi	r4,1
81102878:	11122580 	call	81112258 <usleep>
8110287c:	00000306 	br	8110288c <DMA_DISPATCHER_RESET+0x68>
      } else {
        usleep(WaitPeriodUs);
81102880:	e0bfff17 	ldw	r2,-4(fp)
81102884:	1009883a 	mov	r4,r2
81102888:	11122580 	call	81112258 <usleep>
  //Send reset command
  IOWR_ALTERA_MSGDMA_CSR_CONTROL(DmaDevice->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
  
  if (bWait == DMA_WAIT) {
    //Wait reset to be finished
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_RESET_STATE_MASK) {
8110288c:	e0bffd17 	ldw	r2,-12(fp)
81102890:	10800317 	ldw	r2,12(r2)
81102894:	10800037 	ldwio	r2,0(r2)
81102898:	1080100c 	andi	r2,r2,64
8110289c:	103ff31e 	bne	r2,zero,8110286c <__reset+0xfb0e286c>
811028a0:	00000206 	br	811028ac <DMA_DISPATCHER_RESET+0x88>
      } else {
        usleep(WaitPeriodUs);
      }
    }
  } else {
    return bSuccess;
811028a4:	e0bffc17 	ldw	r2,-16(fp)
811028a8:	00000106 	br	811028b0 <DMA_DISPATCHER_RESET+0x8c>
  }
  
  return bSuccess;
811028ac:	e0bffc17 	ldw	r2,-16(fp)
}
811028b0:	e037883a 	mov	sp,fp
811028b4:	dfc00117 	ldw	ra,4(sp)
811028b8:	df000017 	ldw	fp,0(sp)
811028bc:	dec00204 	addi	sp,sp,8
811028c0:	f800283a 	ret

811028c4 <DMA_SINGLE_TRANSFER>:
 * @param [in] WaitPeriodUs  Define em qual intervalo de tempo a função irá verificar se a transferencia foi concluida
 *
 * @retval TRUE : Sucesso
 *
 */
bool DMA_SINGLE_TRANSFER(alt_msgdma_dev *DmaDevice, alt_u32 SourceAddress, alt_u32 DestinationAddress, alt_u32 TransferSize, alt_u32 ControlBits, bool bWait, alt_32 WaitPeriodUs){
811028c4:	defff604 	addi	sp,sp,-40
811028c8:	dfc00915 	stw	ra,36(sp)
811028cc:	df000815 	stw	fp,32(sp)
811028d0:	dc000715 	stw	r16,28(sp)
811028d4:	df000804 	addi	fp,sp,32
811028d8:	e13ffb15 	stw	r4,-20(fp)
811028dc:	e17ffc15 	stw	r5,-16(fp)
811028e0:	e1bffd15 	stw	r6,-12(fp)
811028e4:	e1fffe15 	stw	r7,-8(fp)
811028e8:	defff804 	addi	sp,sp,-32
811028ec:	d8800204 	addi	r2,sp,8
811028f0:	108003c4 	addi	r2,r2,15
811028f4:	1004d13a 	srli	r2,r2,4
811028f8:	1020913a 	slli	r16,r2,4
  bool bSuccess = TRUE;
811028fc:	00800044 	movi	r2,1
81102900:	e0bffa15 	stw	r2,-24(fp)
  alt_msgdma_standard_descriptor DmaDescriptor;

  if (alt_msgdma_construct_standard_mm_to_mm_descriptor(DmaDevice, &DmaDescriptor, (alt_u32 *)SourceAddress, (alt_u32 *)DestinationAddress, TransferSize, ControlBits) != 0){
81102904:	e0fffc17 	ldw	r3,-16(fp)
81102908:	e13ffd17 	ldw	r4,-12(fp)
8110290c:	e0800217 	ldw	r2,8(fp)
81102910:	d8800115 	stw	r2,4(sp)
81102914:	e0bffe17 	ldw	r2,-8(fp)
81102918:	d8800015 	stw	r2,0(sp)
8110291c:	200f883a 	mov	r7,r4
81102920:	180d883a 	mov	r6,r3
81102924:	800b883a 	mov	r5,r16
81102928:	e13ffb17 	ldw	r4,-20(fp)
8110292c:	1114a580 	call	81114a58 <alt_msgdma_construct_standard_mm_to_mm_descriptor>
81102930:	10000326 	beq	r2,zero,81102940 <DMA_SINGLE_TRANSFER+0x7c>
    bSuccess = FALSE;
81102934:	e03ffa15 	stw	zero,-24(fp)
    return bSuccess;
81102938:	e0bffa17 	ldw	r2,-24(fp)
8110293c:	00001e06 	br	811029b8 <DMA_SINGLE_TRANSFER+0xf4>
  } else {
    if (alt_msgdma_standard_descriptor_async_transfer(DmaDevice, &DmaDescriptor) != 0) {
81102940:	800b883a 	mov	r5,r16
81102944:	e13ffb17 	ldw	r4,-20(fp)
81102948:	1115b8c0 	call	81115b8c <alt_msgdma_standard_descriptor_async_transfer>
8110294c:	10000326 	beq	r2,zero,8110295c <DMA_SINGLE_TRANSFER+0x98>
      bSuccess = FALSE;
81102950:	e03ffa15 	stw	zero,-24(fp)
      return bSuccess;
81102954:	e0bffa17 	ldw	r2,-24(fp)
81102958:	00001706 	br	811029b8 <DMA_SINGLE_TRANSFER+0xf4>
    }
  }
  
  if ((bSuccess == TRUE) & (bWait == DMA_WAIT)) {
8110295c:	e0bffa17 	ldw	r2,-24(fp)
81102960:	10800060 	cmpeqi	r2,r2,1
81102964:	1007883a 	mov	r3,r2
81102968:	e0800317 	ldw	r2,12(fp)
8110296c:	10800060 	cmpeqi	r2,r2,1
81102970:	1884703a 	and	r2,r3,r2
81102974:	10803fcc 	andi	r2,r2,255
81102978:	10000e26 	beq	r2,zero,811029b4 <DMA_SINGLE_TRANSFER+0xf0>
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_BUSY_MASK) {
8110297c:	00000806 	br	811029a0 <DMA_SINGLE_TRANSFER+0xdc>
      if (WaitPeriodUs == DMA_DEFAULT_WAIT_PERIOD){
81102980:	e0800417 	ldw	r2,16(fp)
81102984:	1000031e 	bne	r2,zero,81102994 <DMA_SINGLE_TRANSFER+0xd0>
        usleep(1000);
81102988:	0100fa04 	movi	r4,1000
8110298c:	11122580 	call	81112258 <usleep>
81102990:	00000306 	br	811029a0 <DMA_SINGLE_TRANSFER+0xdc>
      } else {
        usleep(WaitPeriodUs);
81102994:	e0800417 	ldw	r2,16(fp)
81102998:	1009883a 	mov	r4,r2
8110299c:	11122580 	call	81112258 <usleep>
      return bSuccess;
    }
  }
  
  if ((bSuccess == TRUE) & (bWait == DMA_WAIT)) {
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_BUSY_MASK) {
811029a0:	e0bffb17 	ldw	r2,-20(fp)
811029a4:	10800317 	ldw	r2,12(r2)
811029a8:	10800037 	ldwio	r2,0(r2)
811029ac:	1080004c 	andi	r2,r2,1
811029b0:	103ff31e 	bne	r2,zero,81102980 <__reset+0xfb0e2980>
        usleep(WaitPeriodUs);
      }
    }
  }
  
  return bSuccess;
811029b4:	e0bffa17 	ldw	r2,-24(fp)
}
811029b8:	e6ffff04 	addi	sp,fp,-4
811029bc:	dfc00217 	ldw	ra,8(sp)
811029c0:	df000117 	ldw	fp,4(sp)
811029c4:	dc000017 	ldw	r16,0(sp)
811029c8:	dec00304 	addi	sp,sp,12
811029cc:	f800283a 	ret

811029d0 <DMA_MULTIPLE_TRANSFER>:
 * @param [in] WaitPeriodUs  Define em qual intervalo de tempo a função irá verificar se a transferencia foi concluida
 *
 * @retval TRUE : Sucesso
 *
 */
bool DMA_MULTIPLE_TRANSFER(alt_msgdma_dev *DmaDevice, alt_u32 SourceAddressArray[], alt_u32 DestinationAddressArray[], alt_u8 TransferNumber, alt_u32 TransferSize, alt_u32 ControlBits, bool bWait, alt_32 WaitPeriodUs){
811029d0:	defff504 	addi	sp,sp,-44
811029d4:	dfc00a15 	stw	ra,40(sp)
811029d8:	df000915 	stw	fp,36(sp)
811029dc:	dc000815 	stw	r16,32(sp)
811029e0:	df000904 	addi	fp,sp,36
811029e4:	e13ffb15 	stw	r4,-20(fp)
811029e8:	e17ffc15 	stw	r5,-16(fp)
811029ec:	e1bffd15 	stw	r6,-12(fp)
811029f0:	3805883a 	mov	r2,r7
811029f4:	e0bffe05 	stb	r2,-8(fp)
811029f8:	defff804 	addi	sp,sp,-32
811029fc:	d8800204 	addi	r2,sp,8
81102a00:	108003c4 	addi	r2,r2,15
81102a04:	1004d13a 	srli	r2,r2,4
81102a08:	1020913a 	slli	r16,r2,4
  bool bSuccess = TRUE;
81102a0c:	00800044 	movi	r2,1
81102a10:	e0bff915 	stw	r2,-28(fp)
  alt_msgdma_standard_descriptor DmaDescriptor;
  alt_u8 i = 0;
81102a14:	e03ffa05 	stb	zero,-24(fp)

  while ((bSuccess == TRUE) & (i < (TransferNumber - 1))){
81102a18:	00002506 	br	81102ab0 <DMA_MULTIPLE_TRANSFER+0xe0>
    if (alt_msgdma_construct_standard_mm_to_mm_descriptor(DmaDevice, &DmaDescriptor, (alt_u32 *)SourceAddressArray[i], (alt_u32 *)DestinationAddressArray[i], TransferSize, (ControlBits | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_EARLY_DONE_ENABLE_MASK)) != 0){
81102a1c:	e0bffa03 	ldbu	r2,-24(fp)
81102a20:	1085883a 	add	r2,r2,r2
81102a24:	1085883a 	add	r2,r2,r2
81102a28:	1007883a 	mov	r3,r2
81102a2c:	e0bffc17 	ldw	r2,-16(fp)
81102a30:	10c5883a 	add	r2,r2,r3
81102a34:	10800017 	ldw	r2,0(r2)
81102a38:	1009883a 	mov	r4,r2
81102a3c:	e0bffa03 	ldbu	r2,-24(fp)
81102a40:	1085883a 	add	r2,r2,r2
81102a44:	1085883a 	add	r2,r2,r2
81102a48:	1007883a 	mov	r3,r2
81102a4c:	e0bffd17 	ldw	r2,-12(fp)
81102a50:	10c5883a 	add	r2,r2,r3
81102a54:	10800017 	ldw	r2,0(r2)
81102a58:	1007883a 	mov	r3,r2
81102a5c:	e0800317 	ldw	r2,12(fp)
81102a60:	10804034 	orhi	r2,r2,256
81102a64:	d8800115 	stw	r2,4(sp)
81102a68:	e0800217 	ldw	r2,8(fp)
81102a6c:	d8800015 	stw	r2,0(sp)
81102a70:	180f883a 	mov	r7,r3
81102a74:	200d883a 	mov	r6,r4
81102a78:	800b883a 	mov	r5,r16
81102a7c:	e13ffb17 	ldw	r4,-20(fp)
81102a80:	1114a580 	call	81114a58 <alt_msgdma_construct_standard_mm_to_mm_descriptor>
81102a84:	10000226 	beq	r2,zero,81102a90 <DMA_MULTIPLE_TRANSFER+0xc0>
      bSuccess = FALSE;
81102a88:	e03ff915 	stw	zero,-28(fp)
81102a8c:	00000506 	br	81102aa4 <DMA_MULTIPLE_TRANSFER+0xd4>
    } else {
      if (alt_msgdma_standard_descriptor_async_transfer(DmaDevice, &DmaDescriptor) != 0) {
81102a90:	800b883a 	mov	r5,r16
81102a94:	e13ffb17 	ldw	r4,-20(fp)
81102a98:	1115b8c0 	call	81115b8c <alt_msgdma_standard_descriptor_async_transfer>
81102a9c:	10000126 	beq	r2,zero,81102aa4 <DMA_MULTIPLE_TRANSFER+0xd4>
        bSuccess = FALSE;
81102aa0:	e03ff915 	stw	zero,-28(fp)
      }
    }
	i++;
81102aa4:	e0bffa03 	ldbu	r2,-24(fp)
81102aa8:	10800044 	addi	r2,r2,1
81102aac:	e0bffa05 	stb	r2,-24(fp)
bool DMA_MULTIPLE_TRANSFER(alt_msgdma_dev *DmaDevice, alt_u32 SourceAddressArray[], alt_u32 DestinationAddressArray[], alt_u8 TransferNumber, alt_u32 TransferSize, alt_u32 ControlBits, bool bWait, alt_32 WaitPeriodUs){
  bool bSuccess = TRUE;
  alt_msgdma_standard_descriptor DmaDescriptor;
  alt_u8 i = 0;

  while ((bSuccess == TRUE) & (i < (TransferNumber - 1))){
81102ab0:	e0bff917 	ldw	r2,-28(fp)
81102ab4:	10800060 	cmpeqi	r2,r2,1
81102ab8:	1009883a 	mov	r4,r2
81102abc:	e0fffa03 	ldbu	r3,-24(fp)
81102ac0:	e0bffe03 	ldbu	r2,-8(fp)
81102ac4:	10bfffc4 	addi	r2,r2,-1
81102ac8:	1884803a 	cmplt	r2,r3,r2
81102acc:	2084703a 	and	r2,r4,r2
81102ad0:	10803fcc 	andi	r2,r2,255
81102ad4:	103fd11e 	bne	r2,zero,81102a1c <__reset+0xfb0e2a1c>
        bSuccess = FALSE;
      }
    }
	i++;
  }
  if (bSuccess == TRUE){
81102ad8:	e0bff917 	ldw	r2,-28(fp)
81102adc:	10800058 	cmpnei	r2,r2,1
81102ae0:	1000211e 	bne	r2,zero,81102b68 <DMA_MULTIPLE_TRANSFER+0x198>
    if (alt_msgdma_construct_standard_mm_to_mm_descriptor(DmaDevice, &DmaDescriptor, (alt_u32 *)SourceAddressArray[i], (alt_u32 *)DestinationAddressArray[i], TransferSize, ControlBits) != 0){
81102ae4:	e0bffa03 	ldbu	r2,-24(fp)
81102ae8:	1085883a 	add	r2,r2,r2
81102aec:	1085883a 	add	r2,r2,r2
81102af0:	1007883a 	mov	r3,r2
81102af4:	e0bffc17 	ldw	r2,-16(fp)
81102af8:	10c5883a 	add	r2,r2,r3
81102afc:	10800017 	ldw	r2,0(r2)
81102b00:	1009883a 	mov	r4,r2
81102b04:	e0bffa03 	ldbu	r2,-24(fp)
81102b08:	1085883a 	add	r2,r2,r2
81102b0c:	1085883a 	add	r2,r2,r2
81102b10:	1007883a 	mov	r3,r2
81102b14:	e0bffd17 	ldw	r2,-12(fp)
81102b18:	10c5883a 	add	r2,r2,r3
81102b1c:	10800017 	ldw	r2,0(r2)
81102b20:	1007883a 	mov	r3,r2
81102b24:	e0800317 	ldw	r2,12(fp)
81102b28:	d8800115 	stw	r2,4(sp)
81102b2c:	e0800217 	ldw	r2,8(fp)
81102b30:	d8800015 	stw	r2,0(sp)
81102b34:	180f883a 	mov	r7,r3
81102b38:	200d883a 	mov	r6,r4
81102b3c:	800b883a 	mov	r5,r16
81102b40:	e13ffb17 	ldw	r4,-20(fp)
81102b44:	1114a580 	call	81114a58 <alt_msgdma_construct_standard_mm_to_mm_descriptor>
81102b48:	10000226 	beq	r2,zero,81102b54 <DMA_MULTIPLE_TRANSFER+0x184>
      bSuccess = FALSE;
81102b4c:	e03ff915 	stw	zero,-28(fp)
81102b50:	00000506 	br	81102b68 <DMA_MULTIPLE_TRANSFER+0x198>
    } else {
      if (alt_msgdma_standard_descriptor_async_transfer(DmaDevice, &DmaDescriptor) != 0) {
81102b54:	800b883a 	mov	r5,r16
81102b58:	e13ffb17 	ldw	r4,-20(fp)
81102b5c:	1115b8c0 	call	81115b8c <alt_msgdma_standard_descriptor_async_transfer>
81102b60:	10000126 	beq	r2,zero,81102b68 <DMA_MULTIPLE_TRANSFER+0x198>
        bSuccess = FALSE;
81102b64:	e03ff915 	stw	zero,-28(fp)
      }
    }
  }

  if ((bSuccess == TRUE) & (bWait == DMA_WAIT)) {
81102b68:	e0bff917 	ldw	r2,-28(fp)
81102b6c:	10800060 	cmpeqi	r2,r2,1
81102b70:	1007883a 	mov	r3,r2
81102b74:	e0800417 	ldw	r2,16(fp)
81102b78:	10800060 	cmpeqi	r2,r2,1
81102b7c:	1884703a 	and	r2,r3,r2
81102b80:	10803fcc 	andi	r2,r2,255
81102b84:	10000e26 	beq	r2,zero,81102bc0 <DMA_MULTIPLE_TRANSFER+0x1f0>
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_BUSY_MASK) {
81102b88:	00000806 	br	81102bac <DMA_MULTIPLE_TRANSFER+0x1dc>
      if (WaitPeriodUs == DMA_DEFAULT_WAIT_PERIOD){
81102b8c:	e0800517 	ldw	r2,20(fp)
81102b90:	1000031e 	bne	r2,zero,81102ba0 <DMA_MULTIPLE_TRANSFER+0x1d0>
    	usleep(1000);
81102b94:	0100fa04 	movi	r4,1000
81102b98:	11122580 	call	81112258 <usleep>
81102b9c:	00000306 	br	81102bac <DMA_MULTIPLE_TRANSFER+0x1dc>
      } else {
    	usleep(WaitPeriodUs);
81102ba0:	e0800517 	ldw	r2,20(fp)
81102ba4:	1009883a 	mov	r4,r2
81102ba8:	11122580 	call	81112258 <usleep>
      }
    }
  }

  if ((bSuccess == TRUE) & (bWait == DMA_WAIT)) {
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_BUSY_MASK) {
81102bac:	e0bffb17 	ldw	r2,-20(fp)
81102bb0:	10800317 	ldw	r2,12(r2)
81102bb4:	10800037 	ldwio	r2,0(r2)
81102bb8:	1080004c 	andi	r2,r2,1
81102bbc:	103ff31e 	bne	r2,zero,81102b8c <__reset+0xfb0e2b8c>
    	usleep(WaitPeriodUs);
      }
    }
  }
  
  return bSuccess;
81102bc0:	e0bff917 	ldw	r2,-28(fp)
}
81102bc4:	e6ffff04 	addi	sp,fp,-4
81102bc8:	dfc00217 	ldw	ra,8(sp)
81102bcc:	df000117 	ldw	fp,4(sp)
81102bd0:	dc000017 	ldw	r16,0(sp)
81102bd4:	dec00304 	addi	sp,sp,12
81102bd8:	f800283a 	ret

81102bdc <POWER_Read>:
#include "sense.h"

bool POWER_Read(alt_u32 szVol[POWER_PORT_NUM]){
81102bdc:	deffef04 	addi	sp,sp,-68
81102be0:	dfc01015 	stw	ra,64(sp)
81102be4:	df000f15 	stw	fp,60(sp)
81102be8:	df000f04 	addi	fp,sp,60
81102bec:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess = TRUE;
81102bf0:	00800044 	movi	r2,1
81102bf4:	e0bff315 	stw	r2,-52(fp)
    int i,c, nPortIndex=0;
81102bf8:	e03ff615 	stw	zero,-40(fp)
    int szPortNum[] = {POWER_DEVICE0_PORT_NUM, POWER_DEVICE1_PORT_NUM};
81102bfc:	00800204 	movi	r2,8
81102c00:	e0bffc15 	stw	r2,-16(fp)
81102c04:	00800104 	movi	r2,4
81102c08:	e0bffd15 	stw	r2,-12(fp)
    alt_u32 Value32;
    alt_u8 NextChannel,Channel, HEAD, SIGN, SGL, PARITY;
    const bool bEN=TRUE; // alwasy update next conversion channel
81102c0c:	00800044 	movi	r2,1
81102c10:	e0bff715 	stw	r2,-36(fp)
    const bool bSIGN=TRUE; // VolDrop = CH1-CH0
81102c14:	00800044 	movi	r2,1
81102c18:	e0bff815 	stw	r2,-32(fp)
    const bool bSGL=FALSE; // GSGL=FALSE: Diff
81102c1c:	e03ff915 	stw	zero,-28(fp)
    for(c=0;c<POWER_DEVICE_NUM && bSuccess;c++){
81102c20:	e03ff515 	stw	zero,-44(fp)
81102c24:	00007106 	br	81102dec <POWER_Read+0x210>
        NextChannel = 0;
81102c28:	e03ffa05 	stb	zero,-24(fp)
        bSuccess = POWER_SPI_RW(c, NextChannel, bEN, bSIGN, bSGL, &szVol[0]); // set conversion channel: 0
81102c2c:	e0bff517 	ldw	r2,-44(fp)
81102c30:	10c03fcc 	andi	r3,r2,255
81102c34:	e13ffa03 	ldbu	r4,-24(fp)
81102c38:	e0bfff17 	ldw	r2,-4(fp)
81102c3c:	d8800115 	stw	r2,4(sp)
81102c40:	e0bff917 	ldw	r2,-28(fp)
81102c44:	d8800015 	stw	r2,0(sp)
81102c48:	e1fff817 	ldw	r7,-32(fp)
81102c4c:	e1bff717 	ldw	r6,-36(fp)
81102c50:	200b883a 	mov	r5,r4
81102c54:	1809883a 	mov	r4,r3
81102c58:	1100aa80 	call	81100aa8 <POWER_SPI_RW>
81102c5c:	e0bff315 	stw	r2,-52(fp)
        for(i=0;i<szPortNum[c] && bSuccess;i++){
81102c60:	e03ff415 	stw	zero,-48(fp)
81102c64:	00005306 	br	81102db4 <POWER_Read+0x1d8>
            NextChannel = i + 1;
81102c68:	e0bff417 	ldw	r2,-48(fp)
81102c6c:	10800044 	addi	r2,r2,1
81102c70:	e0bffa05 	stb	r2,-24(fp)
            bSuccess = POWER_SPI_RW(c, NextChannel, bEN, bSIGN, bSGL, &Value32);
81102c74:	e0bff517 	ldw	r2,-44(fp)
81102c78:	10c03fcc 	andi	r3,r2,255
81102c7c:	e13ffa03 	ldbu	r4,-24(fp)
81102c80:	e0bffe04 	addi	r2,fp,-8
81102c84:	d8800115 	stw	r2,4(sp)
81102c88:	e0bff917 	ldw	r2,-28(fp)
81102c8c:	d8800015 	stw	r2,0(sp)
81102c90:	e1fff817 	ldw	r7,-32(fp)
81102c94:	e1bff717 	ldw	r6,-36(fp)
81102c98:	200b883a 	mov	r5,r4
81102c9c:	1809883a 	mov	r4,r3
81102ca0:	1100aa80 	call	81100aa8 <POWER_SPI_RW>
81102ca4:	e0bff315 	stw	r2,-52(fp)
            if (bSuccess){
81102ca8:	e0bff317 	ldw	r2,-52(fp)
81102cac:	10003b26 	beq	r2,zero,81102d9c <POWER_Read+0x1c0>
                HEAD = (Value32 >> 30) & 0x03;
81102cb0:	e0bffe17 	ldw	r2,-8(fp)
81102cb4:	1004d7ba 	srli	r2,r2,30
81102cb8:	e0bffa45 	stb	r2,-23(fp)
                Channel = (Value32 >> 1) & 0x07;
81102cbc:	e0bffe17 	ldw	r2,-8(fp)
81102cc0:	1004d07a 	srli	r2,r2,1
81102cc4:	108001cc 	andi	r2,r2,7
81102cc8:	e0bffa85 	stb	r2,-22(fp)
                SIGN = (Value32 >> 4 ) & 0x01;
81102ccc:	e0bffe17 	ldw	r2,-8(fp)
81102cd0:	1004d13a 	srli	r2,r2,4
81102cd4:	1080004c 	andi	r2,r2,1
81102cd8:	e0bffac5 	stb	r2,-21(fp)
                SGL = (Value32 >> 5 ) & 0x01;
81102cdc:	e0bffe17 	ldw	r2,-8(fp)
81102ce0:	1004d17a 	srli	r2,r2,5
81102ce4:	1080004c 	andi	r2,r2,1
81102ce8:	e0bffb05 	stb	r2,-20(fp)
                PARITY = Value32 & 0x01;
81102cec:	e0bffe17 	ldw	r2,-8(fp)
81102cf0:	1080004c 	andi	r2,r2,1
81102cf4:	e0bffb45 	stb	r2,-19(fp)
                if (HEAD != 0){
81102cf8:	e0bffa43 	ldbu	r2,-23(fp)
81102cfc:	10000626 	beq	r2,zero,81102d18 <POWER_Read+0x13c>
                    printf("[%d]Unexpected HEAD\r\n",i);
81102d00:	e17ff417 	ldw	r5,-48(fp)
81102d04:	01204474 	movhi	r4,33041
81102d08:	211e7a04 	addi	r4,r4,31208
81102d0c:	11057bc0 	call	811057bc <printf>
                    bSuccess = FALSE;
81102d10:	e03ff315 	stw	zero,-52(fp)
81102d14:	00001406 	br	81102d68 <POWER_Read+0x18c>
                }else if (Channel != i){
81102d18:	e0fffa83 	ldbu	r3,-22(fp)
81102d1c:	e0bff417 	ldw	r2,-48(fp)
81102d20:	18800926 	beq	r3,r2,81102d48 <POWER_Read+0x16c>
                    printf("[%d]Unexpected Channel. Expected:%d, Read:%d\r\n", i, i, Channel);
81102d24:	e0bffa83 	ldbu	r2,-22(fp)
81102d28:	100f883a 	mov	r7,r2
81102d2c:	e1bff417 	ldw	r6,-48(fp)
81102d30:	e17ff417 	ldw	r5,-48(fp)
81102d34:	01204474 	movhi	r4,33041
81102d38:	211e8004 	addi	r4,r4,31232
81102d3c:	11057bc0 	call	811057bc <printf>
                    bSuccess = FALSE;
81102d40:	e03ff315 	stw	zero,-52(fp)
81102d44:	00000806 	br	81102d68 <POWER_Read+0x18c>
                }else if (SIGN ^ bSIGN){
81102d48:	e0fffac3 	ldbu	r3,-21(fp)
81102d4c:	e0bff817 	ldw	r2,-32(fp)
81102d50:	18800526 	beq	r3,r2,81102d68 <POWER_Read+0x18c>
                    printf("[%d]Unexpected SIGN\r\n",i);
81102d54:	e17ff417 	ldw	r5,-48(fp)
81102d58:	01204474 	movhi	r4,33041
81102d5c:	211e8c04 	addi	r4,r4,31280
81102d60:	11057bc0 	call	811057bc <printf>
                    bSuccess = FALSE;
81102d64:	e03ff315 	stw	zero,-52(fp)
                }else if (SGL ^ SGL){
                    printf("[%d]Unexpected SGL\r\n",i);
                    bSuccess = FALSE;
                }
                if (bSuccess)
81102d68:	e0bff317 	ldw	r2,-52(fp)
81102d6c:	10000e26 	beq	r2,zero,81102da8 <POWER_Read+0x1cc>
                    szVol[nPortIndex++] = Value32; //(Value32 >> 6) & 0xFFFFFF; // 24 bits
81102d70:	e0bff617 	ldw	r2,-40(fp)
81102d74:	10c00044 	addi	r3,r2,1
81102d78:	e0fff615 	stw	r3,-40(fp)
81102d7c:	1085883a 	add	r2,r2,r2
81102d80:	1085883a 	add	r2,r2,r2
81102d84:	1007883a 	mov	r3,r2
81102d88:	e0bfff17 	ldw	r2,-4(fp)
81102d8c:	10c5883a 	add	r2,r2,r3
81102d90:	e0fffe17 	ldw	r3,-8(fp)
81102d94:	10c00015 	stw	r3,0(r2)
81102d98:	00000306 	br	81102da8 <POWER_Read+0x1cc>
            }else{
                printf("SPI Read Error\r\n");
81102d9c:	01204474 	movhi	r4,33041
81102da0:	211e9204 	addi	r4,r4,31304
81102da4:	11058d80 	call	811058d8 <puts>
    const bool bSIGN=TRUE; // VolDrop = CH1-CH0
    const bool bSGL=FALSE; // GSGL=FALSE: Diff
    for(c=0;c<POWER_DEVICE_NUM && bSuccess;c++){
        NextChannel = 0;
        bSuccess = POWER_SPI_RW(c, NextChannel, bEN, bSIGN, bSGL, &szVol[0]); // set conversion channel: 0
        for(i=0;i<szPortNum[c] && bSuccess;i++){
81102da8:	e0bff417 	ldw	r2,-48(fp)
81102dac:	10800044 	addi	r2,r2,1
81102db0:	e0bff415 	stw	r2,-48(fp)
81102db4:	e0bff517 	ldw	r2,-44(fp)
81102db8:	1085883a 	add	r2,r2,r2
81102dbc:	1085883a 	add	r2,r2,r2
81102dc0:	e0fff304 	addi	r3,fp,-52
81102dc4:	1885883a 	add	r2,r3,r2
81102dc8:	10800904 	addi	r2,r2,36
81102dcc:	10800017 	ldw	r2,0(r2)
81102dd0:	e0fff417 	ldw	r3,-48(fp)
81102dd4:	1880020e 	bge	r3,r2,81102de0 <POWER_Read+0x204>
81102dd8:	e0bff317 	ldw	r2,-52(fp)
81102ddc:	103fa21e 	bne	r2,zero,81102c68 <__reset+0xfb0e2c68>
    alt_u32 Value32;
    alt_u8 NextChannel,Channel, HEAD, SIGN, SGL, PARITY;
    const bool bEN=TRUE; // alwasy update next conversion channel
    const bool bSIGN=TRUE; // VolDrop = CH1-CH0
    const bool bSGL=FALSE; // GSGL=FALSE: Diff
    for(c=0;c<POWER_DEVICE_NUM && bSuccess;c++){
81102de0:	e0bff517 	ldw	r2,-44(fp)
81102de4:	10800044 	addi	r2,r2,1
81102de8:	e0bff515 	stw	r2,-44(fp)
81102dec:	e0bff517 	ldw	r2,-44(fp)
81102df0:	10800088 	cmpgei	r2,r2,2
81102df4:	1000021e 	bne	r2,zero,81102e00 <POWER_Read+0x224>
81102df8:	e0bff317 	ldw	r2,-52(fp)
81102dfc:	103f8a1e 	bne	r2,zero,81102c28 <__reset+0xfb0e2c28>
            }else{
                printf("SPI Read Error\r\n");
            }
        } // for i
    } // for c
    return bSuccess;
81102e00:	e0bff317 	ldw	r2,-52(fp)
 }
81102e04:	e037883a 	mov	sp,fp
81102e08:	dfc00117 	ldw	ra,4(sp)
81102e0c:	df000017 	ldw	fp,0(sp)
81102e10:	dec00204 	addi	sp,sp,8
81102e14:	f800283a 	ret

81102e18 <TEMP_Read>:

 bool TEMP_Read(alt_8 *pFpgaTemp, alt_8 *pBoardTemp){
81102e18:	defff904 	addi	sp,sp,-28
81102e1c:	dfc00615 	stw	ra,24(sp)
81102e20:	df000515 	stw	fp,20(sp)
81102e24:	df000504 	addi	fp,sp,20
81102e28:	e13ffe15 	stw	r4,-8(fp)
81102e2c:	e17fff15 	stw	r5,-4(fp)
        bool bSuccess;
        const alt_u8 DeviceAddr = 0x30;
81102e30:	00800c04 	movi	r2,48
81102e34:	e0bffd85 	stb	r2,-10(fp)
        alt_8 FpgaTemp, BoardTemp;
        char Data;

        // read local temp
        bSuccess = I2C_Read(TEMP_SCL_BASE, TEMP_SDA_BASE, DeviceAddr, 0x00, &Data);
81102e38:	e0bffd83 	ldbu	r2,-10(fp)
81102e3c:	10c03fcc 	andi	r3,r2,255
81102e40:	18c0201c 	xori	r3,r3,128
81102e44:	18ffe004 	addi	r3,r3,-128
81102e48:	e0bffdc4 	addi	r2,fp,-9
81102e4c:	d8800015 	stw	r2,0(sp)
81102e50:	000f883a 	mov	r7,zero
81102e54:	180d883a 	mov	r6,r3
81102e58:	01600034 	movhi	r5,32768
81102e5c:	29403404 	addi	r5,r5,208
81102e60:	01200034 	movhi	r4,32768
81102e64:	21003804 	addi	r4,r4,224
81102e68:	11003d40 	call	811003d4 <I2C_Read>
81102e6c:	e0bffc15 	stw	r2,-16(fp)
        if (bSuccess)
81102e70:	e0bffc17 	ldw	r2,-16(fp)
81102e74:	10000226 	beq	r2,zero,81102e80 <TEMP_Read+0x68>
            BoardTemp = Data;
81102e78:	e0bffdc3 	ldbu	r2,-9(fp)
81102e7c:	e0bffd45 	stb	r2,-11(fp)

        // read remote temp
        if (bSuccess){
81102e80:	e0bffc17 	ldw	r2,-16(fp)
81102e84:	10001226 	beq	r2,zero,81102ed0 <TEMP_Read+0xb8>
            bSuccess = I2C_Read(TEMP_SCL_BASE, TEMP_SDA_BASE, DeviceAddr, 0x01, &Data);
81102e88:	e0bffd83 	ldbu	r2,-10(fp)
81102e8c:	10c03fcc 	andi	r3,r2,255
81102e90:	18c0201c 	xori	r3,r3,128
81102e94:	18ffe004 	addi	r3,r3,-128
81102e98:	e0bffdc4 	addi	r2,fp,-9
81102e9c:	d8800015 	stw	r2,0(sp)
81102ea0:	01c00044 	movi	r7,1
81102ea4:	180d883a 	mov	r6,r3
81102ea8:	01600034 	movhi	r5,32768
81102eac:	29403404 	addi	r5,r5,208
81102eb0:	01200034 	movhi	r4,32768
81102eb4:	21003804 	addi	r4,r4,224
81102eb8:	11003d40 	call	811003d4 <I2C_Read>
81102ebc:	e0bffc15 	stw	r2,-16(fp)
            if (bSuccess)
81102ec0:	e0bffc17 	ldw	r2,-16(fp)
81102ec4:	10000226 	beq	r2,zero,81102ed0 <TEMP_Read+0xb8>
                FpgaTemp = Data;
81102ec8:	e0bffdc3 	ldbu	r2,-9(fp)
81102ecc:	e0bffd05 	stb	r2,-12(fp)
        }
        //
        if (bSuccess){
81102ed0:	e0bffc17 	ldw	r2,-16(fp)
81102ed4:	10000626 	beq	r2,zero,81102ef0 <TEMP_Read+0xd8>
           *pFpgaTemp = FpgaTemp;
81102ed8:	e0bffe17 	ldw	r2,-8(fp)
81102edc:	e0fffd03 	ldbu	r3,-12(fp)
81102ee0:	10c00005 	stb	r3,0(r2)
           *pBoardTemp = BoardTemp;
81102ee4:	e0bfff17 	ldw	r2,-4(fp)
81102ee8:	e0fffd43 	ldbu	r3,-11(fp)
81102eec:	10c00005 	stb	r3,0(r2)
        }

        return bSuccess;
81102ef0:	e0bffc17 	ldw	r2,-16(fp)
 }
81102ef4:	e037883a 	mov	sp,fp
81102ef8:	dfc00117 	ldw	ra,4(sp)
81102efc:	df000017 	ldw	fp,0(sp)
81102f00:	dec00204 	addi	sp,sp,8
81102f04:	f800283a 	ret

81102f08 <sense_log_temp>:


 bool sense_log_temp(alt_u8 *FpgaTemp, alt_u8 *BoardTemp){
81102f08:	defffb04 	addi	sp,sp,-20
81102f0c:	dfc00415 	stw	ra,16(sp)
81102f10:	df000315 	stw	fp,12(sp)
81102f14:	df000304 	addi	fp,sp,12
81102f18:	e13ffe15 	stw	r4,-8(fp)
81102f1c:	e17fff15 	stw	r5,-4(fp)
	bool bSuccess;

	 // show temp
	 bSuccess = TEMP_Read(FpgaTemp, BoardTemp);
81102f20:	e17fff17 	ldw	r5,-4(fp)
81102f24:	e13ffe17 	ldw	r4,-8(fp)
81102f28:	1102e180 	call	81102e18 <TEMP_Read>
81102f2c:	e0bffd15 	stw	r2,-12(fp)

	 return(bSuccess);
81102f30:	e0bffd17 	ldw	r2,-12(fp)
 }
81102f34:	e037883a 	mov	sp,fp
81102f38:	dfc00117 	ldw	ra,4(sp)
81102f3c:	df000017 	ldw	fp,0(sp)
81102f40:	dec00204 	addi	sp,sp,8
81102f44:	f800283a 	ret

81102f48 <sense_log>:


 void sense_log(void){
81102f48:	deff0504 	addi	sp,sp,-1004
81102f4c:	dfc0fa15 	stw	ra,1000(sp)
81102f50:	df00f915 	stw	fp,996(sp)
81102f54:	dd40f815 	stw	r21,992(sp)
81102f58:	dd00f715 	stw	r20,988(sp)
81102f5c:	dcc0f615 	stw	r19,984(sp)
81102f60:	dc80f515 	stw	r18,980(sp)
81102f64:	dc40f415 	stw	r17,976(sp)
81102f68:	dc00f315 	stw	r16,972(sp)
81102f6c:	df00f904 	addi	fp,sp,996
 	  bool bSuccess;
 	    int i;
 	    const float fRef = 5.0; // 5.0V
81102f70:	00902834 	movhi	r2,16544
81102f74:	e0bf0e15 	stw	r2,-968(fp)
 	    float fVolDrop, fCurrent, fPower, fVol;
 	    alt_u32 szVol[POWER_PORT_NUM];
 	    alt_u32 SIG, MSB, RESULT;
 	    float szRes[] = {0.003, 0.001, 0.003, 0.003, 0.003, 0.003, 0.003, 0.003, 0.003, 0.003, 0.003, 0.003};
81102f78:	008ed174 	movhi	r2,15173
81102f7c:	10a6e984 	addi	r2,r2,-25690
81102f80:	e0bf2215 	stw	r2,-888(fp)
81102f84:	008ea0f4 	movhi	r2,14979
81102f88:	10849bc4 	addi	r2,r2,4719
81102f8c:	e0bf2315 	stw	r2,-884(fp)
81102f90:	008ed174 	movhi	r2,15173
81102f94:	10a6e984 	addi	r2,r2,-25690
81102f98:	e0bf2415 	stw	r2,-880(fp)
81102f9c:	008ed174 	movhi	r2,15173
81102fa0:	10a6e984 	addi	r2,r2,-25690
81102fa4:	e0bf2515 	stw	r2,-876(fp)
81102fa8:	008ed174 	movhi	r2,15173
81102fac:	10a6e984 	addi	r2,r2,-25690
81102fb0:	e0bf2615 	stw	r2,-872(fp)
81102fb4:	008ed174 	movhi	r2,15173
81102fb8:	10a6e984 	addi	r2,r2,-25690
81102fbc:	e0bf2715 	stw	r2,-868(fp)
81102fc0:	008ed174 	movhi	r2,15173
81102fc4:	10a6e984 	addi	r2,r2,-25690
81102fc8:	e0bf2815 	stw	r2,-864(fp)
81102fcc:	008ed174 	movhi	r2,15173
81102fd0:	10a6e984 	addi	r2,r2,-25690
81102fd4:	e0bf2915 	stw	r2,-860(fp)
81102fd8:	008ed174 	movhi	r2,15173
81102fdc:	10a6e984 	addi	r2,r2,-25690
81102fe0:	e0bf2a15 	stw	r2,-856(fp)
81102fe4:	008ed174 	movhi	r2,15173
81102fe8:	10a6e984 	addi	r2,r2,-25690
81102fec:	e0bf2b15 	stw	r2,-852(fp)
81102ff0:	008ed174 	movhi	r2,15173
81102ff4:	10a6e984 	addi	r2,r2,-25690
81102ff8:	e0bf2c15 	stw	r2,-848(fp)
81102ffc:	008ed174 	movhi	r2,15173
81103000:	10a6e984 	addi	r2,r2,-25690
81103004:	e0bf2d15 	stw	r2,-844(fp)
 	    float szRefVol[] = {0.9, 0.9, 3.0, 0.9, 1.8, 2.5, 1.8, 2.5, 1.1, 1.4, 3.3, 2.5};
81103008:	008fd9b4 	movhi	r2,16230
8110300c:	10999984 	addi	r2,r2,26214
81103010:	e0bf2e15 	stw	r2,-840(fp)
81103014:	008fd9b4 	movhi	r2,16230
81103018:	10999984 	addi	r2,r2,26214
8110301c:	e0bf2f15 	stw	r2,-836(fp)
81103020:	00901034 	movhi	r2,16448
81103024:	e0bf3015 	stw	r2,-832(fp)
81103028:	008fd9b4 	movhi	r2,16230
8110302c:	10999984 	addi	r2,r2,26214
81103030:	e0bf3115 	stw	r2,-828(fp)
81103034:	008ff9b4 	movhi	r2,16358
81103038:	10999984 	addi	r2,r2,26214
8110303c:	e0bf3215 	stw	r2,-824(fp)
81103040:	00900834 	movhi	r2,16416
81103044:	e0bf3315 	stw	r2,-820(fp)
81103048:	008ff9b4 	movhi	r2,16358
8110304c:	10999984 	addi	r2,r2,26214
81103050:	e0bf3415 	stw	r2,-816(fp)
81103054:	00900834 	movhi	r2,16416
81103058:	e0bf3515 	stw	r2,-812(fp)
8110305c:	008fe374 	movhi	r2,16269
81103060:	10b33344 	addi	r2,r2,-13107
81103064:	e0bf3615 	stw	r2,-808(fp)
81103068:	008fecf4 	movhi	r2,16307
8110306c:	108cccc4 	addi	r2,r2,13107
81103070:	e0bf3715 	stw	r2,-804(fp)
81103074:	009014f4 	movhi	r2,16467
81103078:	108cccc4 	addi	r2,r2,13107
8110307c:	e0bf3815 	stw	r2,-800(fp)
81103080:	00900834 	movhi	r2,16416
81103084:	e0bf3915 	stw	r2,-796(fp)
 	    char szName[][64] = {
81103088:	00a04474 	movhi	r2,33041
8110308c:	109ecac4 	addi	r2,r2,31531
81103090:	e0ff3a04 	addi	r3,fp,-792
81103094:	1009883a 	mov	r4,r2
81103098:	0080c004 	movi	r2,768
8110309c:	100d883a 	mov	r6,r2
811030a0:	200b883a 	mov	r5,r4
811030a4:	1809883a 	mov	r4,r3
811030a8:	11056440 	call	81105644 <memcpy>
 	        "VCC3P3_HSMC",
 	        "HSMB_VCCIO",
 	    };

 	        // show power
 	        bSuccess = POWER_Read(szVol);
811030ac:	e0bf1604 	addi	r2,fp,-936
811030b0:	1009883a 	mov	r4,r2
811030b4:	1102bdc0 	call	81102bdc <POWER_Read>
811030b8:	e0bf0f15 	stw	r2,-964(fp)
 	        if (bSuccess){
811030bc:	e0bf0f17 	ldw	r2,-964(fp)
811030c0:	10013b26 	beq	r2,zero,811035b0 <sense_log+0x668>
 	            for(i=0;i<POWER_PORT_NUM && bSuccess;i++){
811030c4:	e03f0c15 	stw	zero,-976(fp)
811030c8:	00013006 	br	8110358c <sense_log+0x644>
 	                SIG = (szVol[i] >> 29) & 0x01;
811030cc:	e0bf0c17 	ldw	r2,-976(fp)
811030d0:	1085883a 	add	r2,r2,r2
811030d4:	1085883a 	add	r2,r2,r2
811030d8:	e0ff0c04 	addi	r3,fp,-976
811030dc:	1885883a 	add	r2,r3,r2
811030e0:	10800a04 	addi	r2,r2,40
811030e4:	10800017 	ldw	r2,0(r2)
811030e8:	1004d77a 	srli	r2,r2,29
811030ec:	1080004c 	andi	r2,r2,1
811030f0:	e0bf1015 	stw	r2,-960(fp)
 	                MSB = (szVol[i] >> 28) & 0x01;
811030f4:	e0bf0c17 	ldw	r2,-976(fp)
811030f8:	1085883a 	add	r2,r2,r2
811030fc:	1085883a 	add	r2,r2,r2
81103100:	e0ff0c04 	addi	r3,fp,-976
81103104:	1885883a 	add	r2,r3,r2
81103108:	10800a04 	addi	r2,r2,40
8110310c:	10800017 	ldw	r2,0(r2)
81103110:	1004d73a 	srli	r2,r2,28
81103114:	1080004c 	andi	r2,r2,1
81103118:	e0bf1115 	stw	r2,-956(fp)
 	                RESULT = (szVol[i] >> 6) & 0x3FFFFF; // 22 bits
8110311c:	e0bf0c17 	ldw	r2,-976(fp)
81103120:	1085883a 	add	r2,r2,r2
81103124:	1085883a 	add	r2,r2,r2
81103128:	e0ff0c04 	addi	r3,fp,-976
8110312c:	1885883a 	add	r2,r3,r2
81103130:	10800a04 	addi	r2,r2,40
81103134:	10800017 	ldw	r2,0(r2)
81103138:	1006d1ba 	srli	r3,r2,6
8110313c:	00801034 	movhi	r2,64
81103140:	10bfffc4 	addi	r2,r2,-1
81103144:	1884703a 	and	r2,r3,r2
81103148:	e0bf1215 	stw	r2,-952(fp)
 	                if (MSB == 0)
8110314c:	e0bf1117 	ldw	r2,-956(fp)
81103150:	1000091e 	bne	r2,zero,81103178 <sense_log+0x230>
 	                    fVolDrop = (float)(RESULT)/(float)0x400000;
81103154:	e13f1217 	ldw	r4,-952(fp)
81103158:	1104b200 	call	81104b20 <__floatunsisf>
8110315c:	1007883a 	mov	r3,r2
81103160:	0152a034 	movhi	r5,19072
81103164:	1809883a 	mov	r4,r3
81103168:	11041c00 	call	811041c0 <__divsf3>
8110316c:	1007883a 	mov	r3,r2
81103170:	e0ff0d15 	stw	r3,-972(fp)
81103174:	00000106 	br	8110317c <sense_log+0x234>
 	                else
 	                    fVolDrop = 0.0; //always be positive in schematic // -(float)(0x400000-RESULT)/(float)0x400000;
81103178:	e03f0d15 	stw	zero,-972(fp)
 	                if (SIG && MSB){
8110317c:	e0bf1017 	ldw	r2,-960(fp)
81103180:	10001f26 	beq	r2,zero,81103200 <sense_log+0x2b8>
81103184:	e0bf1117 	ldw	r2,-956(fp)
81103188:	10001d26 	beq	r2,zero,81103200 <sense_log+0x2b8>
 	                    fVol = fRef*0.5;
8110318c:	014fc034 	movhi	r5,16128
81103190:	e13f0e17 	ldw	r4,-968(fp)
81103194:	11046000 	call	81104600 <__mulsf3>
81103198:	1007883a 	mov	r3,r2
8110319c:	e0ff1315 	stw	r3,-948(fp)
 	                    printf("[%s:%06XH,Over]\r\n  VolDrop:%f(V)\r\n", szName[i], (int)szVol[i], fVol);
811031a0:	e0ff3a04 	addi	r3,fp,-792
811031a4:	e0bf0c17 	ldw	r2,-976(fp)
811031a8:	100491ba 	slli	r2,r2,6
811031ac:	18a1883a 	add	r16,r3,r2
811031b0:	e0bf0c17 	ldw	r2,-976(fp)
811031b4:	1085883a 	add	r2,r2,r2
811031b8:	1085883a 	add	r2,r2,r2
811031bc:	e0ff0c04 	addi	r3,fp,-976
811031c0:	1885883a 	add	r2,r3,r2
811031c4:	10800a04 	addi	r2,r2,40
811031c8:	10800017 	ldw	r2,0(r2)
811031cc:	1023883a 	mov	r17,r2
811031d0:	e13f1317 	ldw	r4,-948(fp)
811031d4:	11053280 	call	81105328 <__extendsfdf2>
811031d8:	1009883a 	mov	r4,r2
811031dc:	180b883a 	mov	r5,r3
811031e0:	d9400015 	stw	r5,0(sp)
811031e4:	200f883a 	mov	r7,r4
811031e8:	880d883a 	mov	r6,r17
811031ec:	800b883a 	mov	r5,r16
811031f0:	01204474 	movhi	r4,33041
811031f4:	211e9604 	addi	r4,r4,31320
811031f8:	11057bc0 	call	811057bc <printf>
811031fc:	0000e006 	br	81103580 <sense_log+0x638>
 	                }else if (SIG && !MSB){
81103200:	e0bf1017 	ldw	r2,-960(fp)
81103204:	10005d26 	beq	r2,zero,8110337c <sense_log+0x434>
81103208:	e0bf1117 	ldw	r2,-956(fp)
8110320c:	10005b1e 	bne	r2,zero,8110337c <sense_log+0x434>
 	                    fVol = fRef*0.5*fVolDrop;
81103210:	e13f0e17 	ldw	r4,-968(fp)
81103214:	11053280 	call	81105328 <__extendsfdf2>
81103218:	1011883a 	mov	r8,r2
8110321c:	1813883a 	mov	r9,r3
81103220:	000d883a 	mov	r6,zero
81103224:	01cff834 	movhi	r7,16352
81103228:	4009883a 	mov	r4,r8
8110322c:	480b883a 	mov	r5,r9
81103230:	1104c100 	call	81104c10 <__muldf3>
81103234:	1009883a 	mov	r4,r2
81103238:	180b883a 	mov	r5,r3
8110323c:	2021883a 	mov	r16,r4
81103240:	2823883a 	mov	r17,r5
81103244:	e13f0d17 	ldw	r4,-972(fp)
81103248:	11053280 	call	81105328 <__extendsfdf2>
8110324c:	1009883a 	mov	r4,r2
81103250:	180b883a 	mov	r5,r3
81103254:	200d883a 	mov	r6,r4
81103258:	280f883a 	mov	r7,r5
8110325c:	8009883a 	mov	r4,r16
81103260:	880b883a 	mov	r5,r17
81103264:	1104c100 	call	81104c10 <__muldf3>
81103268:	1009883a 	mov	r4,r2
8110326c:	180b883a 	mov	r5,r3
81103270:	2005883a 	mov	r2,r4
81103274:	2807883a 	mov	r3,r5
81103278:	1009883a 	mov	r4,r2
8110327c:	180b883a 	mov	r5,r3
81103280:	11054380 	call	81105438 <__truncdfsf2>
81103284:	1007883a 	mov	r3,r2
81103288:	e0ff1315 	stw	r3,-948(fp)
 	                    fCurrent = fVolDrop / szRes[i];
8110328c:	e0bf0c17 	ldw	r2,-976(fp)
81103290:	1085883a 	add	r2,r2,r2
81103294:	1085883a 	add	r2,r2,r2
81103298:	e0ff0c04 	addi	r3,fp,-976
8110329c:	1885883a 	add	r2,r3,r2
811032a0:	10801604 	addi	r2,r2,88
811032a4:	10c00017 	ldw	r3,0(r2)
811032a8:	180b883a 	mov	r5,r3
811032ac:	e13f0d17 	ldw	r4,-972(fp)
811032b0:	11041c00 	call	811041c0 <__divsf3>
811032b4:	1007883a 	mov	r3,r2
811032b8:	e0ff1415 	stw	r3,-944(fp)
 	                    fPower = szRefVol[i] * fCurrent;
811032bc:	e0bf0c17 	ldw	r2,-976(fp)
811032c0:	1085883a 	add	r2,r2,r2
811032c4:	1085883a 	add	r2,r2,r2
811032c8:	e0ff0c04 	addi	r3,fp,-976
811032cc:	1885883a 	add	r2,r3,r2
811032d0:	10802204 	addi	r2,r2,136
811032d4:	10c00017 	ldw	r3,0(r2)
811032d8:	e17f1417 	ldw	r5,-944(fp)
811032dc:	1809883a 	mov	r4,r3
811032e0:	11046000 	call	81104600 <__mulsf3>
811032e4:	1007883a 	mov	r3,r2
811032e8:	e0ff1515 	stw	r3,-940(fp)
 	                    printf("[%s:%06XH,Pos]\r\n  VolDrop:%f(V), Current:%f(A), Power:%f(W)\r\n", szName[i], (int)szVol[i], fVolDrop, fCurrent, fPower);
811032ec:	e0ff3a04 	addi	r3,fp,-792
811032f0:	e0bf0c17 	ldw	r2,-976(fp)
811032f4:	100491ba 	slli	r2,r2,6
811032f8:	18a9883a 	add	r20,r3,r2
811032fc:	e0bf0c17 	ldw	r2,-976(fp)
81103300:	1085883a 	add	r2,r2,r2
81103304:	1085883a 	add	r2,r2,r2
81103308:	e0ff0c04 	addi	r3,fp,-976
8110330c:	1885883a 	add	r2,r3,r2
81103310:	10800a04 	addi	r2,r2,40
81103314:	10800017 	ldw	r2,0(r2)
81103318:	102b883a 	mov	r21,r2
8110331c:	e13f0d17 	ldw	r4,-972(fp)
81103320:	11053280 	call	81105328 <__extendsfdf2>
81103324:	1025883a 	mov	r18,r2
81103328:	1827883a 	mov	r19,r3
8110332c:	e13f1417 	ldw	r4,-944(fp)
81103330:	11053280 	call	81105328 <__extendsfdf2>
81103334:	1021883a 	mov	r16,r2
81103338:	1823883a 	mov	r17,r3
8110333c:	e13f1517 	ldw	r4,-940(fp)
81103340:	11053280 	call	81105328 <__extendsfdf2>
81103344:	1009883a 	mov	r4,r2
81103348:	180b883a 	mov	r5,r3
8110334c:	d9000315 	stw	r4,12(sp)
81103350:	d9400415 	stw	r5,16(sp)
81103354:	dc000115 	stw	r16,4(sp)
81103358:	dc400215 	stw	r17,8(sp)
8110335c:	dcc00015 	stw	r19,0(sp)
81103360:	900f883a 	mov	r7,r18
81103364:	a80d883a 	mov	r6,r21
81103368:	a00b883a 	mov	r5,r20
8110336c:	01204474 	movhi	r4,33041
81103370:	211e9f04 	addi	r4,r4,31356
81103374:	11057bc0 	call	811057bc <printf>
81103378:	00008106 	br	81103580 <sense_log+0x638>
 	                }else if (!SIG && MSB){
8110337c:	e0bf1017 	ldw	r2,-960(fp)
81103380:	10005d1e 	bne	r2,zero,811034f8 <sense_log+0x5b0>
81103384:	e0bf1117 	ldw	r2,-956(fp)
81103388:	10005b26 	beq	r2,zero,811034f8 <sense_log+0x5b0>
 	                    fVol = fRef*0.5*fVolDrop;
8110338c:	e13f0e17 	ldw	r4,-968(fp)
81103390:	11053280 	call	81105328 <__extendsfdf2>
81103394:	1011883a 	mov	r8,r2
81103398:	1813883a 	mov	r9,r3
8110339c:	000d883a 	mov	r6,zero
811033a0:	01cff834 	movhi	r7,16352
811033a4:	4009883a 	mov	r4,r8
811033a8:	480b883a 	mov	r5,r9
811033ac:	1104c100 	call	81104c10 <__muldf3>
811033b0:	1009883a 	mov	r4,r2
811033b4:	180b883a 	mov	r5,r3
811033b8:	2021883a 	mov	r16,r4
811033bc:	2823883a 	mov	r17,r5
811033c0:	e13f0d17 	ldw	r4,-972(fp)
811033c4:	11053280 	call	81105328 <__extendsfdf2>
811033c8:	1009883a 	mov	r4,r2
811033cc:	180b883a 	mov	r5,r3
811033d0:	200d883a 	mov	r6,r4
811033d4:	280f883a 	mov	r7,r5
811033d8:	8009883a 	mov	r4,r16
811033dc:	880b883a 	mov	r5,r17
811033e0:	1104c100 	call	81104c10 <__muldf3>
811033e4:	1009883a 	mov	r4,r2
811033e8:	180b883a 	mov	r5,r3
811033ec:	2005883a 	mov	r2,r4
811033f0:	2807883a 	mov	r3,r5
811033f4:	1009883a 	mov	r4,r2
811033f8:	180b883a 	mov	r5,r3
811033fc:	11054380 	call	81105438 <__truncdfsf2>
81103400:	1007883a 	mov	r3,r2
81103404:	e0ff1315 	stw	r3,-948(fp)
 	                    fCurrent = fVolDrop / szRes[i];
81103408:	e0bf0c17 	ldw	r2,-976(fp)
8110340c:	1085883a 	add	r2,r2,r2
81103410:	1085883a 	add	r2,r2,r2
81103414:	e0ff0c04 	addi	r3,fp,-976
81103418:	1885883a 	add	r2,r3,r2
8110341c:	10801604 	addi	r2,r2,88
81103420:	10c00017 	ldw	r3,0(r2)
81103424:	180b883a 	mov	r5,r3
81103428:	e13f0d17 	ldw	r4,-972(fp)
8110342c:	11041c00 	call	811041c0 <__divsf3>
81103430:	1007883a 	mov	r3,r2
81103434:	e0ff1415 	stw	r3,-944(fp)
 	                    fPower = szRefVol[i] * fCurrent;
81103438:	e0bf0c17 	ldw	r2,-976(fp)
8110343c:	1085883a 	add	r2,r2,r2
81103440:	1085883a 	add	r2,r2,r2
81103444:	e0ff0c04 	addi	r3,fp,-976
81103448:	1885883a 	add	r2,r3,r2
8110344c:	10802204 	addi	r2,r2,136
81103450:	10c00017 	ldw	r3,0(r2)
81103454:	e17f1417 	ldw	r5,-944(fp)
81103458:	1809883a 	mov	r4,r3
8110345c:	11046000 	call	81104600 <__mulsf3>
81103460:	1007883a 	mov	r3,r2
81103464:	e0ff1515 	stw	r3,-940(fp)
 	                    printf("[%s:%06XH,Neg]\r\n  VolDrop:%f(V), Current:%f(A), Power:%f(W)\r\n", szName[i], (int)szVol[i], fVolDrop, fCurrent, fPower);
81103468:	e0ff3a04 	addi	r3,fp,-792
8110346c:	e0bf0c17 	ldw	r2,-976(fp)
81103470:	100491ba 	slli	r2,r2,6
81103474:	18a9883a 	add	r20,r3,r2
81103478:	e0bf0c17 	ldw	r2,-976(fp)
8110347c:	1085883a 	add	r2,r2,r2
81103480:	1085883a 	add	r2,r2,r2
81103484:	e0ff0c04 	addi	r3,fp,-976
81103488:	1885883a 	add	r2,r3,r2
8110348c:	10800a04 	addi	r2,r2,40
81103490:	10800017 	ldw	r2,0(r2)
81103494:	102b883a 	mov	r21,r2
81103498:	e13f0d17 	ldw	r4,-972(fp)
8110349c:	11053280 	call	81105328 <__extendsfdf2>
811034a0:	1025883a 	mov	r18,r2
811034a4:	1827883a 	mov	r19,r3
811034a8:	e13f1417 	ldw	r4,-944(fp)
811034ac:	11053280 	call	81105328 <__extendsfdf2>
811034b0:	1021883a 	mov	r16,r2
811034b4:	1823883a 	mov	r17,r3
811034b8:	e13f1517 	ldw	r4,-940(fp)
811034bc:	11053280 	call	81105328 <__extendsfdf2>
811034c0:	1009883a 	mov	r4,r2
811034c4:	180b883a 	mov	r5,r3
811034c8:	d9000315 	stw	r4,12(sp)
811034cc:	d9400415 	stw	r5,16(sp)
811034d0:	dc000115 	stw	r16,4(sp)
811034d4:	dc400215 	stw	r17,8(sp)
811034d8:	dcc00015 	stw	r19,0(sp)
811034dc:	900f883a 	mov	r7,r18
811034e0:	a80d883a 	mov	r6,r21
811034e4:	a00b883a 	mov	r5,r20
811034e8:	01204474 	movhi	r4,33041
811034ec:	211eaf04 	addi	r4,r4,31420
811034f0:	11057bc0 	call	811057bc <printf>
811034f4:	00002206 	br	81103580 <sense_log+0x638>
 	                }else if (!SIG && !MSB){
811034f8:	e0bf1017 	ldw	r2,-960(fp)
811034fc:	1000201e 	bne	r2,zero,81103580 <sense_log+0x638>
81103500:	e0bf1117 	ldw	r2,-956(fp)
81103504:	10001e1e 	bne	r2,zero,81103580 <sense_log+0x638>
 	                    fVol = -fRef*0.5;
81103508:	e0bf0e17 	ldw	r2,-968(fp)
8110350c:	10a0003c 	xorhi	r2,r2,32768
81103510:	014fc034 	movhi	r5,16128
81103514:	1009883a 	mov	r4,r2
81103518:	11046000 	call	81104600 <__mulsf3>
8110351c:	1007883a 	mov	r3,r2
81103520:	e0ff1315 	stw	r3,-948(fp)
 	                    printf("[%s:%06XH,Under]\r\n  VolDrop:%f(V)\r\n", szName[i], (int)szVol[i], fVol);
81103524:	e0ff3a04 	addi	r3,fp,-792
81103528:	e0bf0c17 	ldw	r2,-976(fp)
8110352c:	100491ba 	slli	r2,r2,6
81103530:	18a1883a 	add	r16,r3,r2
81103534:	e0bf0c17 	ldw	r2,-976(fp)
81103538:	1085883a 	add	r2,r2,r2
8110353c:	1085883a 	add	r2,r2,r2
81103540:	e0ff0c04 	addi	r3,fp,-976
81103544:	1885883a 	add	r2,r3,r2
81103548:	10800a04 	addi	r2,r2,40
8110354c:	10800017 	ldw	r2,0(r2)
81103550:	1023883a 	mov	r17,r2
81103554:	e13f1317 	ldw	r4,-948(fp)
81103558:	11053280 	call	81105328 <__extendsfdf2>
8110355c:	1009883a 	mov	r4,r2
81103560:	180b883a 	mov	r5,r3
81103564:	d9400015 	stw	r5,0(sp)
81103568:	200f883a 	mov	r7,r4
8110356c:	880d883a 	mov	r6,r17
81103570:	800b883a 	mov	r5,r16
81103574:	01204474 	movhi	r4,33041
81103578:	211ebf04 	addi	r4,r4,31484
8110357c:	11057bc0 	call	811057bc <printf>
 	    };

 	        // show power
 	        bSuccess = POWER_Read(szVol);
 	        if (bSuccess){
 	            for(i=0;i<POWER_PORT_NUM && bSuccess;i++){
81103580:	e0bf0c17 	ldw	r2,-976(fp)
81103584:	10800044 	addi	r2,r2,1
81103588:	e0bf0c15 	stw	r2,-976(fp)
8110358c:	e0bf0c17 	ldw	r2,-976(fp)
81103590:	10800308 	cmpgei	r2,r2,12
81103594:	1000021e 	bne	r2,zero,811035a0 <sense_log+0x658>
81103598:	e0bf0f17 	ldw	r2,-964(fp)
8110359c:	103ecb1e 	bne	r2,zero,811030cc <__reset+0xfb0e30cc>
 	                }else if (!SIG && !MSB){
 	                    fVol = -fRef*0.5;
 	                    printf("[%s:%06XH,Under]\r\n  VolDrop:%f(V)\r\n", szName[i], (int)szVol[i], fVol);
 	                }
 	            }
 	            printf("\r\n");
811035a0:	01204474 	movhi	r4,33041
811035a4:	211ec804 	addi	r4,r4,31520
811035a8:	11058d80 	call	811058d8 <puts>
 	        }else{
 	            printf("Error\r\n");
 	        }
 }
811035ac:	00000306 	br	811035bc <sense_log+0x674>
 	                    printf("[%s:%06XH,Under]\r\n  VolDrop:%f(V)\r\n", szName[i], (int)szVol[i], fVol);
 	                }
 	            }
 	            printf("\r\n");
 	        }else{
 	            printf("Error\r\n");
811035b0:	01204474 	movhi	r4,33041
811035b4:	211ec904 	addi	r4,r4,31524
811035b8:	11058d80 	call	811058d8 <puts>
 	        }
 }
811035bc:	0001883a 	nop
811035c0:	e6fffa04 	addi	sp,fp,-24
811035c4:	dfc00717 	ldw	ra,28(sp)
811035c8:	df000617 	ldw	fp,24(sp)
811035cc:	dd400517 	ldw	r21,20(sp)
811035d0:	dd000417 	ldw	r20,16(sp)
811035d4:	dcc00317 	ldw	r19,12(sp)
811035d8:	dc800217 	ldw	r18,8(sp)
811035dc:	dc400117 	ldw	r17,4(sp)
811035e0:	dc000017 	ldw	r16,0(sp)
811035e4:	dec00804 	addi	sp,sp,32
811035e8:	f800283a 	ret

811035ec <main>:
void TestLeds(void);
bool TestDMA_M1_M2(void);
bool TestDMA_M2_M1(void);

int main(void)
{
811035ec:	defffd04 	addi	sp,sp,-12
811035f0:	dfc00215 	stw	ra,8(sp)
811035f4:	df000115 	stw	fp,4(sp)
811035f8:	df000104 	addi	fp,sp,4

  alt_8 tempFPGA = 0;
811035fc:	e03fff05 	stb	zero,-4(fp)
  alt_8 tempBoard = 0;
81103600:	e03fff45 	stb	zero,-3(fp)

  printf(" \n Nucleo de Sistemas Eletronicos Embarcados - MebX\n\n");
81103604:	01204474 	movhi	r4,33041
81103608:	211f8b04 	addi	r4,r4,32300
8110360c:	11058d80 	call	811058d8 <puts>

  //Configura Display de 7 segmentos
  SSDP_CONFIG(SSDP_NORMAL_MODE);
81103610:	0009883a 	mov	r4,zero
81103614:	1100f880 	call	81100f88 <SSDP_CONFIG>
  
  //Teste de transferencia com DMA (M2 -> M1);
  //TestDMA_M2_M1();

  //Acende os leds de status e atualiza a temperatura da FPGA no display de 7 segmentos a cada 1 segundo
  LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_STATUS_ALL_MASK);
81103618:	01403c04 	movi	r5,240
8110361c:	01000044 	movi	r4,1
81103620:	1100a300 	call	81100a30 <LEDS_PAINEL_DRIVE>
  while(1){
	TEMP_Read(&tempFPGA, &tempBoard);
81103624:	e0bfff44 	addi	r2,fp,-3
81103628:	100b883a 	mov	r5,r2
8110362c:	e13fff04 	addi	r4,fp,-4
81103630:	1102e180 	call	81102e18 <TEMP_Read>
	SSDP_UPDATE(tempFPGA);
81103634:	e0bfff03 	ldbu	r2,-4(fp)
81103638:	10803fcc 	andi	r2,r2,255
8110363c:	1009883a 	mov	r4,r2
81103640:	11010500 	call	81101050 <SSDP_UPDATE>
	usleep(1000*1000);
81103644:	010003f4 	movhi	r4,15
81103648:	21109004 	addi	r4,r4,16960
8110364c:	11122580 	call	81112258 <usleep>
  }
81103650:	003ff406 	br	81103624 <__reset+0xfb0e3624>

81103654 <TestLeds>:

  return 0;
}

void TestLeds (void){
81103654:	defffd04 	addi	sp,sp,-12
81103658:	dfc00215 	stw	ra,8(sp)
8110365c:	df000115 	stw	fp,4(sp)
81103660:	df000104 	addi	fp,sp,4
  alt_8 led = 1;
81103664:	00800044 	movi	r2,1
81103668:	e0bfff05 	stb	r2,-4(fp)
  SSDP_CONFIG(SSDP_TEST_MODE);
8110366c:	01000044 	movi	r4,1
81103670:	1100f880 	call	81100f88 <SSDP_CONFIG>
  
  while(1){
    switch(led){
81103674:	e0bfff07 	ldb	r2,-4(fp)
81103678:	10c00268 	cmpgeui	r3,r2,9
8110367c:	1800761e 	bne	r3,zero,81103858 <TestLeds+0x204>
81103680:	100690ba 	slli	r3,r2,2
81103684:	00a04434 	movhi	r2,33040
81103688:	108da604 	addi	r2,r2,13976
8110368c:	1885883a 	add	r2,r3,r2
81103690:	10800017 	ldw	r2,0(r2)
81103694:	1000683a 	jmp	r2
81103698:	81103858 	cmpnei	r4,r16,16609
8110369c:	811036bc 	xorhi	r4,r16,16602
811036a0:	811036f0 	cmpltui	r4,r16,16603
811036a4:	81103724 	muli	r4,r16,16604
811036a8:	81103758 	cmpnei	r4,r16,16605
811036ac:	8110378c 	andi	r4,r16,16606
811036b0:	811037c0 	call	8811037c <__reset+0x20f037c>
811036b4:	811037f4 	orhi	r4,r16,16607
811036b8:	81103828 	cmpgeui	r4,r16,16608
      case 1:
        LEDS_BOARD_DRIVE(LEDS_ON, LEDS_BOARD_0_MASK);
811036bc:	01400044 	movi	r5,1
811036c0:	01000044 	movi	r4,1
811036c4:	11009b80 	call	811009b8 <LEDS_BOARD_DRIVE>
        LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_STATUS_0_MASK);
811036c8:	01402004 	movi	r5,128
811036cc:	01000044 	movi	r4,1
811036d0:	1100a300 	call	81100a30 <LEDS_PAINEL_DRIVE>
        LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_SPW_A_MASK);
811036d4:	01400044 	movi	r5,1
811036d8:	01000044 	movi	r4,1
811036dc:	1100a300 	call	81100a30 <LEDS_PAINEL_DRIVE>
        led++;
811036e0:	e0bfff03 	ldbu	r2,-4(fp)
811036e4:	10800044 	addi	r2,r2,1
811036e8:	e0bfff05 	stb	r2,-4(fp)
      break;
811036ec:	00005b06 	br	8110385c <TestLeds+0x208>
      case 2:
        LEDS_BOARD_DRIVE(LEDS_ON, LEDS_BOARD_1_MASK);
811036f0:	01400084 	movi	r5,2
811036f4:	01000044 	movi	r4,1
811036f8:	11009b80 	call	811009b8 <LEDS_BOARD_DRIVE>
        LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_STATUS_1_MASK);
811036fc:	01401004 	movi	r5,64
81103700:	01000044 	movi	r4,1
81103704:	1100a300 	call	81100a30 <LEDS_PAINEL_DRIVE>
        LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_SPW_B_MASK);
81103708:	01400104 	movi	r5,4
8110370c:	01000044 	movi	r4,1
81103710:	1100a300 	call	81100a30 <LEDS_PAINEL_DRIVE>
        led++;
81103714:	e0bfff03 	ldbu	r2,-4(fp)
81103718:	10800044 	addi	r2,r2,1
8110371c:	e0bfff05 	stb	r2,-4(fp)
      break;
81103720:	00004e06 	br	8110385c <TestLeds+0x208>
      case 3:
        LEDS_BOARD_DRIVE(LEDS_ON, LEDS_BOARD_2_MASK);
81103724:	01400104 	movi	r5,4
81103728:	01000044 	movi	r4,1
8110372c:	11009b80 	call	811009b8 <LEDS_BOARD_DRIVE>
        LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_STATUS_2_MASK);
81103730:	01400804 	movi	r5,32
81103734:	01000044 	movi	r4,1
81103738:	1100a300 	call	81100a30 <LEDS_PAINEL_DRIVE>
        LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_SPW_C_MASK);
8110373c:	01400084 	movi	r5,2
81103740:	01000044 	movi	r4,1
81103744:	1100a300 	call	81100a30 <LEDS_PAINEL_DRIVE>
        led++;
81103748:	e0bfff03 	ldbu	r2,-4(fp)
8110374c:	10800044 	addi	r2,r2,1
81103750:	e0bfff05 	stb	r2,-4(fp)
      break;
81103754:	00004106 	br	8110385c <TestLeds+0x208>
      case 4:
        LEDS_BOARD_DRIVE(LEDS_ON, LEDS_BOARD_3_MASK);
81103758:	01400204 	movi	r5,8
8110375c:	01000044 	movi	r4,1
81103760:	11009b80 	call	811009b8 <LEDS_BOARD_DRIVE>
        LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_STATUS_3_MASK);
81103764:	01400404 	movi	r5,16
81103768:	01000044 	movi	r4,1
8110376c:	1100a300 	call	81100a30 <LEDS_PAINEL_DRIVE>
        LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_SPW_D_MASK);
81103770:	01400204 	movi	r5,8
81103774:	01000044 	movi	r4,1
81103778:	1100a300 	call	81100a30 <LEDS_PAINEL_DRIVE>
        led++;
8110377c:	e0bfff03 	ldbu	r2,-4(fp)
81103780:	10800044 	addi	r2,r2,1
81103784:	e0bfff05 	stb	r2,-4(fp)
      break;
81103788:	00003406 	br	8110385c <TestLeds+0x208>
      case 5:
        LEDS_BOARD_DRIVE(LEDS_ON, LEDS_BOARD_4_MASK);
8110378c:	01400404 	movi	r5,16
81103790:	01000044 	movi	r4,1
81103794:	11009b80 	call	811009b8 <LEDS_BOARD_DRIVE>
        LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_STATUS_0_MASK);
81103798:	01402004 	movi	r5,128
8110379c:	01000044 	movi	r4,1
811037a0:	1100a300 	call	81100a30 <LEDS_PAINEL_DRIVE>
        LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_SPW_E_MASK);
811037a4:	01404004 	movi	r5,256
811037a8:	01000044 	movi	r4,1
811037ac:	1100a300 	call	81100a30 <LEDS_PAINEL_DRIVE>
        led++;
811037b0:	e0bfff03 	ldbu	r2,-4(fp)
811037b4:	10800044 	addi	r2,r2,1
811037b8:	e0bfff05 	stb	r2,-4(fp)
      break;
811037bc:	00002706 	br	8110385c <TestLeds+0x208>
      case 6:
        LEDS_BOARD_DRIVE(LEDS_ON, LEDS_BOARD_5_MASK);
811037c0:	01400804 	movi	r5,32
811037c4:	01000044 	movi	r4,1
811037c8:	11009b80 	call	811009b8 <LEDS_BOARD_DRIVE>
        LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_STATUS_1_MASK);
811037cc:	01401004 	movi	r5,64
811037d0:	01000044 	movi	r4,1
811037d4:	1100a300 	call	81100a30 <LEDS_PAINEL_DRIVE>
        LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_SPW_F_MASK);
811037d8:	01410004 	movi	r5,1024
811037dc:	01000044 	movi	r4,1
811037e0:	1100a300 	call	81100a30 <LEDS_PAINEL_DRIVE>
        led++;
811037e4:	e0bfff03 	ldbu	r2,-4(fp)
811037e8:	10800044 	addi	r2,r2,1
811037ec:	e0bfff05 	stb	r2,-4(fp)
      break;
811037f0:	00001a06 	br	8110385c <TestLeds+0x208>
      case 7:
        LEDS_BOARD_DRIVE(LEDS_ON, LEDS_BOARD_6_MASK);
811037f4:	01401004 	movi	r5,64
811037f8:	01000044 	movi	r4,1
811037fc:	11009b80 	call	811009b8 <LEDS_BOARD_DRIVE>
        LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_STATUS_2_MASK);
81103800:	01400804 	movi	r5,32
81103804:	01000044 	movi	r4,1
81103808:	1100a300 	call	81100a30 <LEDS_PAINEL_DRIVE>
        LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_SPW_G_MASK);
8110380c:	01408004 	movi	r5,512
81103810:	01000044 	movi	r4,1
81103814:	1100a300 	call	81100a30 <LEDS_PAINEL_DRIVE>
        led++;
81103818:	e0bfff03 	ldbu	r2,-4(fp)
8110381c:	10800044 	addi	r2,r2,1
81103820:	e0bfff05 	stb	r2,-4(fp)
      break;
81103824:	00000d06 	br	8110385c <TestLeds+0x208>
      case 8:
        LEDS_BOARD_DRIVE(LEDS_ON, LEDS_BOARD_7_MASK);
81103828:	01402004 	movi	r5,128
8110382c:	01000044 	movi	r4,1
81103830:	11009b80 	call	811009b8 <LEDS_BOARD_DRIVE>
        LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_STATUS_3_MASK);
81103834:	01400404 	movi	r5,16
81103838:	01000044 	movi	r4,1
8110383c:	1100a300 	call	81100a30 <LEDS_PAINEL_DRIVE>
        LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_SPW_H_MASK);
81103840:	01420004 	movi	r5,2048
81103844:	01000044 	movi	r4,1
81103848:	1100a300 	call	81100a30 <LEDS_PAINEL_DRIVE>
        led = 1;
8110384c:	00800044 	movi	r2,1
81103850:	e0bfff05 	stb	r2,-4(fp)
      break;
81103854:	00000106 	br	8110385c <TestLeds+0x208>
      default:
        led = 0;
81103858:	e03fff05 	stb	zero,-4(fp)
    }
  
  usleep(1000*1000);
8110385c:	010003f4 	movhi	r4,15
81103860:	21109004 	addi	r4,r4,16960
81103864:	11122580 	call	81112258 <usleep>
  
  LEDS_BOARD_DRIVE(LEDS_OFF, LEDS_BOARD_ALL_MASK);
81103868:	01403fc4 	movi	r5,255
8110386c:	0009883a 	mov	r4,zero
81103870:	11009b80 	call	811009b8 <LEDS_BOARD_DRIVE>
  LEDS_PAINEL_DRIVE(LEDS_OFF, LEDS_STATUS_ALL_MASK);
81103874:	01403c04 	movi	r5,240
81103878:	0009883a 	mov	r4,zero
8110387c:	1100a300 	call	81100a30 <LEDS_PAINEL_DRIVE>
  LEDS_PAINEL_DRIVE(LEDS_OFF, LEDS_SPW_ALL_MASK);
81103880:	0143c3c4 	movi	r5,3855
81103884:	0009883a 	mov	r4,zero
81103888:	1100a300 	call	81100a30 <LEDS_PAINEL_DRIVE>
  
  }
8110388c:	003f7906 	br	81103674 <__reset+0xfb0e3674>

81103890 <TestDMA_M1_M2>:
}

bool TestDMA_M1_M2(void){
81103890:	deffd404 	addi	sp,sp,-176
81103894:	dfc02b15 	stw	ra,172(sp)
81103898:	df002a15 	stw	fp,168(sp)
8110389c:	dc002915 	stw	r16,164(sp)
811038a0:	df002a04 	addi	fp,sp,168

  alt_msgdma_dev *DMADev = NULL;
811038a4:	e03fde15 	stw	zero,-136(fp)

  if (DMA_OPEN_DEVICE(&DMADev, (char *)DMA_M1_M2_CSR_NAME) == FALSE){
811038a8:	e0bfde04 	addi	r2,fp,-136
811038ac:	01604474 	movhi	r5,33041
811038b0:	295f9904 	addi	r5,r5,32356
811038b4:	1009883a 	mov	r4,r2
811038b8:	11026180 	call	81102618 <DMA_OPEN_DEVICE>
811038bc:	1000051e 	bne	r2,zero,811038d4 <TestDMA_M1_M2+0x44>
    printf("Error Opening DMA Device");
811038c0:	01204474 	movhi	r4,33041
811038c4:	211f9e04 	addi	r4,r4,32376
811038c8:	11057bc0 	call	811057bc <printf>
    return FALSE;
811038cc:	0005883a 	mov	r2,zero
811038d0:	0000cd06 	br	81103c08 <TestDMA_M1_M2+0x378>
  }

  if (DMA_DISPATCHER_RESET(DMADev, DMA_WAIT, DMA_DEFAULT_WAIT_PERIOD) == FALSE){
811038d4:	e0bfde17 	ldw	r2,-136(fp)
811038d8:	000d883a 	mov	r6,zero
811038dc:	01400044 	movi	r5,1
811038e0:	1009883a 	mov	r4,r2
811038e4:	11028240 	call	81102824 <DMA_DISPATCHER_RESET>
811038e8:	1000051e 	bne	r2,zero,81103900 <TestDMA_M1_M2+0x70>
    printf("Error Reseting Dispatcher");
811038ec:	01204474 	movhi	r4,33041
811038f0:	211fa504 	addi	r4,r4,32404
811038f4:	11057bc0 	call	811057bc <printf>
    return FALSE;
811038f8:	0005883a 	mov	r2,zero
811038fc:	0000c206 	br	81103c08 <TestDMA_M1_M2+0x378>
  }

  alt_u32 control_bits = 0x00000000;
81103900:	e03fda15 	stw	zero,-152(fp)
  
  const alt_u32 step = DDR2_M1_MEMORY_SIZE/16;
81103904:	00810034 	movhi	r2,1024
81103908:	e0bfdb15 	stw	r2,-148(fp)
  alt_u32 read_addr_arr[16];
    read_addr_arr[0] = DDR2_M1_MEMORY_BASE;
8110390c:	e03fdf15 	stw	zero,-132(fp)
    read_addr_arr[1] = read_addr_arr[0] + step;
81103910:	e0ffdf17 	ldw	r3,-132(fp)
81103914:	e0bfdb17 	ldw	r2,-148(fp)
81103918:	1885883a 	add	r2,r3,r2
8110391c:	e0bfe015 	stw	r2,-128(fp)
    read_addr_arr[2] = read_addr_arr[1] + step;
81103920:	e0ffe017 	ldw	r3,-128(fp)
81103924:	e0bfdb17 	ldw	r2,-148(fp)
81103928:	1885883a 	add	r2,r3,r2
8110392c:	e0bfe115 	stw	r2,-124(fp)
    read_addr_arr[3] = read_addr_arr[2] + step;
81103930:	e0ffe117 	ldw	r3,-124(fp)
81103934:	e0bfdb17 	ldw	r2,-148(fp)
81103938:	1885883a 	add	r2,r3,r2
8110393c:	e0bfe215 	stw	r2,-120(fp)
    read_addr_arr[4] = read_addr_arr[3] + step;
81103940:	e0ffe217 	ldw	r3,-120(fp)
81103944:	e0bfdb17 	ldw	r2,-148(fp)
81103948:	1885883a 	add	r2,r3,r2
8110394c:	e0bfe315 	stw	r2,-116(fp)
    read_addr_arr[5] = read_addr_arr[4] + step;
81103950:	e0ffe317 	ldw	r3,-116(fp)
81103954:	e0bfdb17 	ldw	r2,-148(fp)
81103958:	1885883a 	add	r2,r3,r2
8110395c:	e0bfe415 	stw	r2,-112(fp)
    read_addr_arr[6] = read_addr_arr[5] + step;
81103960:	e0ffe417 	ldw	r3,-112(fp)
81103964:	e0bfdb17 	ldw	r2,-148(fp)
81103968:	1885883a 	add	r2,r3,r2
8110396c:	e0bfe515 	stw	r2,-108(fp)
    read_addr_arr[7] = read_addr_arr[6] + step;
81103970:	e0ffe517 	ldw	r3,-108(fp)
81103974:	e0bfdb17 	ldw	r2,-148(fp)
81103978:	1885883a 	add	r2,r3,r2
8110397c:	e0bfe615 	stw	r2,-104(fp)
    read_addr_arr[8] = read_addr_arr[7] + step;
81103980:	e0ffe617 	ldw	r3,-104(fp)
81103984:	e0bfdb17 	ldw	r2,-148(fp)
81103988:	1885883a 	add	r2,r3,r2
8110398c:	e0bfe715 	stw	r2,-100(fp)
    read_addr_arr[9] = read_addr_arr[8] + step;
81103990:	e0ffe717 	ldw	r3,-100(fp)
81103994:	e0bfdb17 	ldw	r2,-148(fp)
81103998:	1885883a 	add	r2,r3,r2
8110399c:	e0bfe815 	stw	r2,-96(fp)
    read_addr_arr[10] = read_addr_arr[9] + step;
811039a0:	e0ffe817 	ldw	r3,-96(fp)
811039a4:	e0bfdb17 	ldw	r2,-148(fp)
811039a8:	1885883a 	add	r2,r3,r2
811039ac:	e0bfe915 	stw	r2,-92(fp)
    read_addr_arr[11] = read_addr_arr[10] + step;
811039b0:	e0ffe917 	ldw	r3,-92(fp)
811039b4:	e0bfdb17 	ldw	r2,-148(fp)
811039b8:	1885883a 	add	r2,r3,r2
811039bc:	e0bfea15 	stw	r2,-88(fp)
    read_addr_arr[12] = read_addr_arr[11] + step;
811039c0:	e0ffea17 	ldw	r3,-88(fp)
811039c4:	e0bfdb17 	ldw	r2,-148(fp)
811039c8:	1885883a 	add	r2,r3,r2
811039cc:	e0bfeb15 	stw	r2,-84(fp)
    read_addr_arr[13] = read_addr_arr[12] + step;
811039d0:	e0ffeb17 	ldw	r3,-84(fp)
811039d4:	e0bfdb17 	ldw	r2,-148(fp)
811039d8:	1885883a 	add	r2,r3,r2
811039dc:	e0bfec15 	stw	r2,-80(fp)
    read_addr_arr[14] = read_addr_arr[13] + step;
811039e0:	e0ffec17 	ldw	r3,-80(fp)
811039e4:	e0bfdb17 	ldw	r2,-148(fp)
811039e8:	1885883a 	add	r2,r3,r2
811039ec:	e0bfed15 	stw	r2,-76(fp)
    read_addr_arr[15] = read_addr_arr[14] + step;
811039f0:	e0ffed17 	ldw	r3,-76(fp)
811039f4:	e0bfdb17 	ldw	r2,-148(fp)
811039f8:	1885883a 	add	r2,r3,r2
811039fc:	e0bfee15 	stw	r2,-72(fp)

  alt_u32 write_addr_arr[16];
    write_addr_arr[0] = DDR2_M2_MEMORY_BASE;
81103a00:	00900034 	movhi	r2,16384
81103a04:	e0bfef15 	stw	r2,-68(fp)
    write_addr_arr[1] = write_addr_arr[0] + step;
81103a08:	e0ffef17 	ldw	r3,-68(fp)
81103a0c:	e0bfdb17 	ldw	r2,-148(fp)
81103a10:	1885883a 	add	r2,r3,r2
81103a14:	e0bff015 	stw	r2,-64(fp)
    write_addr_arr[2] = write_addr_arr[1] + step;
81103a18:	e0fff017 	ldw	r3,-64(fp)
81103a1c:	e0bfdb17 	ldw	r2,-148(fp)
81103a20:	1885883a 	add	r2,r3,r2
81103a24:	e0bff115 	stw	r2,-60(fp)
    write_addr_arr[3] = write_addr_arr[2] + step;
81103a28:	e0fff117 	ldw	r3,-60(fp)
81103a2c:	e0bfdb17 	ldw	r2,-148(fp)
81103a30:	1885883a 	add	r2,r3,r2
81103a34:	e0bff215 	stw	r2,-56(fp)
    write_addr_arr[4] = write_addr_arr[3] + step;
81103a38:	e0fff217 	ldw	r3,-56(fp)
81103a3c:	e0bfdb17 	ldw	r2,-148(fp)
81103a40:	1885883a 	add	r2,r3,r2
81103a44:	e0bff315 	stw	r2,-52(fp)
    write_addr_arr[5] = write_addr_arr[4] + step;
81103a48:	e0fff317 	ldw	r3,-52(fp)
81103a4c:	e0bfdb17 	ldw	r2,-148(fp)
81103a50:	1885883a 	add	r2,r3,r2
81103a54:	e0bff415 	stw	r2,-48(fp)
    write_addr_arr[6] = write_addr_arr[5] + step;
81103a58:	e0fff417 	ldw	r3,-48(fp)
81103a5c:	e0bfdb17 	ldw	r2,-148(fp)
81103a60:	1885883a 	add	r2,r3,r2
81103a64:	e0bff515 	stw	r2,-44(fp)
    write_addr_arr[7] = write_addr_arr[6] + step;
81103a68:	e0fff517 	ldw	r3,-44(fp)
81103a6c:	e0bfdb17 	ldw	r2,-148(fp)
81103a70:	1885883a 	add	r2,r3,r2
81103a74:	e0bff615 	stw	r2,-40(fp)
    write_addr_arr[8] = write_addr_arr[7] + step;
81103a78:	e0fff617 	ldw	r3,-40(fp)
81103a7c:	e0bfdb17 	ldw	r2,-148(fp)
81103a80:	1885883a 	add	r2,r3,r2
81103a84:	e0bff715 	stw	r2,-36(fp)
    write_addr_arr[9] = write_addr_arr[8] + step;
81103a88:	e0fff717 	ldw	r3,-36(fp)
81103a8c:	e0bfdb17 	ldw	r2,-148(fp)
81103a90:	1885883a 	add	r2,r3,r2
81103a94:	e0bff815 	stw	r2,-32(fp)
    write_addr_arr[10] = write_addr_arr[9] + step;
81103a98:	e0fff817 	ldw	r3,-32(fp)
81103a9c:	e0bfdb17 	ldw	r2,-148(fp)
81103aa0:	1885883a 	add	r2,r3,r2
81103aa4:	e0bff915 	stw	r2,-28(fp)
    write_addr_arr[11] = write_addr_arr[10] + step;
81103aa8:	e0fff917 	ldw	r3,-28(fp)
81103aac:	e0bfdb17 	ldw	r2,-148(fp)
81103ab0:	1885883a 	add	r2,r3,r2
81103ab4:	e0bffa15 	stw	r2,-24(fp)
    write_addr_arr[12] = write_addr_arr[11] + step;
81103ab8:	e0fffa17 	ldw	r3,-24(fp)
81103abc:	e0bfdb17 	ldw	r2,-148(fp)
81103ac0:	1885883a 	add	r2,r3,r2
81103ac4:	e0bffb15 	stw	r2,-20(fp)
    write_addr_arr[13] = write_addr_arr[12] + step;
81103ac8:	e0fffb17 	ldw	r3,-20(fp)
81103acc:	e0bfdb17 	ldw	r2,-148(fp)
81103ad0:	1885883a 	add	r2,r3,r2
81103ad4:	e0bffc15 	stw	r2,-16(fp)
    write_addr_arr[14] = write_addr_arr[13] + step;
81103ad8:	e0fffc17 	ldw	r3,-16(fp)
81103adc:	e0bfdb17 	ldw	r2,-148(fp)
81103ae0:	1885883a 	add	r2,r3,r2
81103ae4:	e0bffd15 	stw	r2,-12(fp)
    write_addr_arr[15] = write_addr_arr[14] + step;
81103ae8:	e0fffd17 	ldw	r3,-12(fp)
81103aec:	e0bfdb17 	ldw	r2,-148(fp)
81103af0:	1885883a 	add	r2,r3,r2
81103af4:	e0bffe15 	stw	r2,-8(fp)

  DDR2_MEMORY_RANDOM_WRITE_TEST(DDR2_M1_ID, DDR2_VERBOSE, DDR2_TIME);
81103af8:	01800044 	movi	r6,1
81103afc:	01400044 	movi	r5,1
81103b00:	01000044 	movi	r4,1
81103b04:	1101ffc0 	call	81101ffc <DDR2_MEMORY_RANDOM_WRITE_TEST>
	
  int TimeStart, TimeElapsed = 0;
81103b08:	e03fdc15 	stw	zero,-144(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
81103b0c:	d0a02317 	ldw	r2,-32628(gp)

  TimeStart = alt_nticks();
81103b10:	e0bfdd15 	stw	r2,-140(fp)
  if (DMA_MULTIPLE_TRANSFER(DMADev, read_addr_arr, write_addr_arr, 16, step, control_bits, DMA_WAIT, DMA_DEFAULT_WAIT_PERIOD) == FALSE){
81103b14:	e0ffde17 	ldw	r3,-136(fp)
81103b18:	e17fef04 	addi	r5,fp,-68
81103b1c:	e13fdf04 	addi	r4,fp,-132
81103b20:	d8000315 	stw	zero,12(sp)
81103b24:	00800044 	movi	r2,1
81103b28:	d8800215 	stw	r2,8(sp)
81103b2c:	e0bfda17 	ldw	r2,-152(fp)
81103b30:	d8800115 	stw	r2,4(sp)
81103b34:	e0bfdb17 	ldw	r2,-148(fp)
81103b38:	d8800015 	stw	r2,0(sp)
81103b3c:	01c00404 	movi	r7,16
81103b40:	280d883a 	mov	r6,r5
81103b44:	200b883a 	mov	r5,r4
81103b48:	1809883a 	mov	r4,r3
81103b4c:	11029d00 	call	811029d0 <DMA_MULTIPLE_TRANSFER>
81103b50:	1000051e 	bne	r2,zero,81103b68 <TestDMA_M1_M2+0x2d8>
    printf("Error During DMA Transfer");
81103b54:	01204474 	movhi	r4,33041
81103b58:	211fac04 	addi	r4,r4,32432
81103b5c:	11057bc0 	call	811057bc <printf>
    return FALSE;
81103b60:	0005883a 	mov	r2,zero
81103b64:	00002806 	br	81103c08 <TestDMA_M1_M2+0x378>
81103b68:	d0e02317 	ldw	r3,-32628(gp)
  }
  TimeElapsed = alt_nticks() - TimeStart;
81103b6c:	e0bfdd17 	ldw	r2,-140(fp)
81103b70:	1885c83a 	sub	r2,r3,r2
81103b74:	e0bfdc15 	stw	r2,-144(fp)
  printf("%.3f sec\n", (float)TimeElapsed/(float)alt_ticks_per_second());
81103b78:	e13fdc17 	ldw	r4,-144(fp)
81103b7c:	11049fc0 	call	811049fc <__floatsisf>
81103b80:	1021883a 	mov	r16,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
81103b84:	d0a02217 	ldw	r2,-32632(gp)
81103b88:	1009883a 	mov	r4,r2
81103b8c:	1104b200 	call	81104b20 <__floatunsisf>
81103b90:	1007883a 	mov	r3,r2
81103b94:	180b883a 	mov	r5,r3
81103b98:	8009883a 	mov	r4,r16
81103b9c:	11041c00 	call	811041c0 <__divsf3>
81103ba0:	1007883a 	mov	r3,r2
81103ba4:	1805883a 	mov	r2,r3
81103ba8:	1009883a 	mov	r4,r2
81103bac:	11053280 	call	81105328 <__extendsfdf2>
81103bb0:	100d883a 	mov	r6,r2
81103bb4:	180f883a 	mov	r7,r3
81103bb8:	300b883a 	mov	r5,r6
81103bbc:	380d883a 	mov	r6,r7
81103bc0:	01204474 	movhi	r4,33041
81103bc4:	211fb304 	addi	r4,r4,32460
81103bc8:	11057bc0 	call	811057bc <printf>

  if (DDR2_MEMORY_RANDOM_READ_TEST(DDR2_M2_ID, DDR2_VERBOSE, DDR2_TIME) == TRUE){
81103bcc:	01800044 	movi	r6,1
81103bd0:	01400044 	movi	r5,1
81103bd4:	01000084 	movi	r4,2
81103bd8:	11022c80 	call	811022c8 <DDR2_MEMORY_RANDOM_READ_TEST>
81103bdc:	10800058 	cmpnei	r2,r2,1
81103be0:	1000051e 	bne	r2,zero,81103bf8 <TestDMA_M1_M2+0x368>
    printf("Transfer executed correctly\n");
81103be4:	01204474 	movhi	r4,33041
81103be8:	211fb604 	addi	r4,r4,32472
81103bec:	11058d80 	call	811058d8 <puts>
  } else {
    printf("Transfer failed\n");
    return FALSE;
  }

  return TRUE;
81103bf0:	00800044 	movi	r2,1
81103bf4:	00000406 	br	81103c08 <TestDMA_M1_M2+0x378>
  printf("%.3f sec\n", (float)TimeElapsed/(float)alt_ticks_per_second());

  if (DDR2_MEMORY_RANDOM_READ_TEST(DDR2_M2_ID, DDR2_VERBOSE, DDR2_TIME) == TRUE){
    printf("Transfer executed correctly\n");
  } else {
    printf("Transfer failed\n");
81103bf8:	01204474 	movhi	r4,33041
81103bfc:	211fbd04 	addi	r4,r4,32500
81103c00:	11058d80 	call	811058d8 <puts>
    return FALSE;
81103c04:	0005883a 	mov	r2,zero
  }

  return TRUE;
}
81103c08:	e6ffff04 	addi	sp,fp,-4
81103c0c:	dfc00217 	ldw	ra,8(sp)
81103c10:	df000117 	ldw	fp,4(sp)
81103c14:	dc000017 	ldw	r16,0(sp)
81103c18:	dec00304 	addi	sp,sp,12
81103c1c:	f800283a 	ret

81103c20 <TestDMA_M2_M1>:

bool TestDMA_M2_M1(void){
81103c20:	deffd404 	addi	sp,sp,-176
81103c24:	dfc02b15 	stw	ra,172(sp)
81103c28:	df002a15 	stw	fp,168(sp)
81103c2c:	dc002915 	stw	r16,164(sp)
81103c30:	df002a04 	addi	fp,sp,168

  alt_msgdma_dev *DMADev = NULL;
81103c34:	e03fde15 	stw	zero,-136(fp)

  if (DMA_OPEN_DEVICE(&DMADev, (char *)DMA_M2_M1_CSR_NAME) == FALSE){
81103c38:	e0bfde04 	addi	r2,fp,-136
81103c3c:	01604474 	movhi	r5,33041
81103c40:	295fc104 	addi	r5,r5,32516
81103c44:	1009883a 	mov	r4,r2
81103c48:	11026180 	call	81102618 <DMA_OPEN_DEVICE>
81103c4c:	1000051e 	bne	r2,zero,81103c64 <TestDMA_M2_M1+0x44>
    printf("Error Opening DMA Device");
81103c50:	01204474 	movhi	r4,33041
81103c54:	211f9e04 	addi	r4,r4,32376
81103c58:	11057bc0 	call	811057bc <printf>
    return FALSE;
81103c5c:	0005883a 	mov	r2,zero
81103c60:	0000cd06 	br	81103f98 <TestDMA_M2_M1+0x378>
  }

  if (DMA_DISPATCHER_RESET(DMADev, DMA_WAIT, DMA_DEFAULT_WAIT_PERIOD) == FALSE){
81103c64:	e0bfde17 	ldw	r2,-136(fp)
81103c68:	000d883a 	mov	r6,zero
81103c6c:	01400044 	movi	r5,1
81103c70:	1009883a 	mov	r4,r2
81103c74:	11028240 	call	81102824 <DMA_DISPATCHER_RESET>
81103c78:	1000051e 	bne	r2,zero,81103c90 <TestDMA_M2_M1+0x70>
    printf("Error Reseting Dispatcher");
81103c7c:	01204474 	movhi	r4,33041
81103c80:	211fa504 	addi	r4,r4,32404
81103c84:	11057bc0 	call	811057bc <printf>
    return FALSE;
81103c88:	0005883a 	mov	r2,zero
81103c8c:	0000c206 	br	81103f98 <TestDMA_M2_M1+0x378>
  }

  alt_u32 control_bits = 0x00000000;
81103c90:	e03fda15 	stw	zero,-152(fp)
  
  const alt_u32 step = DDR2_M2_MEMORY_SIZE/16;
81103c94:	00810034 	movhi	r2,1024
81103c98:	e0bfdb15 	stw	r2,-148(fp)
  alt_u32 read_addr_arr[16];
    read_addr_arr[0] = DDR2_M2_MEMORY_BASE;
81103c9c:	00900034 	movhi	r2,16384
81103ca0:	e0bfdf15 	stw	r2,-132(fp)
    read_addr_arr[1] = read_addr_arr[0] + step;
81103ca4:	e0ffdf17 	ldw	r3,-132(fp)
81103ca8:	e0bfdb17 	ldw	r2,-148(fp)
81103cac:	1885883a 	add	r2,r3,r2
81103cb0:	e0bfe015 	stw	r2,-128(fp)
    read_addr_arr[2] = read_addr_arr[1] + step;
81103cb4:	e0ffe017 	ldw	r3,-128(fp)
81103cb8:	e0bfdb17 	ldw	r2,-148(fp)
81103cbc:	1885883a 	add	r2,r3,r2
81103cc0:	e0bfe115 	stw	r2,-124(fp)
    read_addr_arr[3] = read_addr_arr[2] + step;
81103cc4:	e0ffe117 	ldw	r3,-124(fp)
81103cc8:	e0bfdb17 	ldw	r2,-148(fp)
81103ccc:	1885883a 	add	r2,r3,r2
81103cd0:	e0bfe215 	stw	r2,-120(fp)
    read_addr_arr[4] = read_addr_arr[3] + step;
81103cd4:	e0ffe217 	ldw	r3,-120(fp)
81103cd8:	e0bfdb17 	ldw	r2,-148(fp)
81103cdc:	1885883a 	add	r2,r3,r2
81103ce0:	e0bfe315 	stw	r2,-116(fp)
    read_addr_arr[5] = read_addr_arr[4] + step;
81103ce4:	e0ffe317 	ldw	r3,-116(fp)
81103ce8:	e0bfdb17 	ldw	r2,-148(fp)
81103cec:	1885883a 	add	r2,r3,r2
81103cf0:	e0bfe415 	stw	r2,-112(fp)
    read_addr_arr[6] = read_addr_arr[5] + step;
81103cf4:	e0ffe417 	ldw	r3,-112(fp)
81103cf8:	e0bfdb17 	ldw	r2,-148(fp)
81103cfc:	1885883a 	add	r2,r3,r2
81103d00:	e0bfe515 	stw	r2,-108(fp)
    read_addr_arr[7] = read_addr_arr[6] + step;
81103d04:	e0ffe517 	ldw	r3,-108(fp)
81103d08:	e0bfdb17 	ldw	r2,-148(fp)
81103d0c:	1885883a 	add	r2,r3,r2
81103d10:	e0bfe615 	stw	r2,-104(fp)
    read_addr_arr[8] = read_addr_arr[7] + step;
81103d14:	e0ffe617 	ldw	r3,-104(fp)
81103d18:	e0bfdb17 	ldw	r2,-148(fp)
81103d1c:	1885883a 	add	r2,r3,r2
81103d20:	e0bfe715 	stw	r2,-100(fp)
    read_addr_arr[9] = read_addr_arr[8] + step;
81103d24:	e0ffe717 	ldw	r3,-100(fp)
81103d28:	e0bfdb17 	ldw	r2,-148(fp)
81103d2c:	1885883a 	add	r2,r3,r2
81103d30:	e0bfe815 	stw	r2,-96(fp)
    read_addr_arr[10] = read_addr_arr[9] + step;
81103d34:	e0ffe817 	ldw	r3,-96(fp)
81103d38:	e0bfdb17 	ldw	r2,-148(fp)
81103d3c:	1885883a 	add	r2,r3,r2
81103d40:	e0bfe915 	stw	r2,-92(fp)
    read_addr_arr[11] = read_addr_arr[10] + step;
81103d44:	e0ffe917 	ldw	r3,-92(fp)
81103d48:	e0bfdb17 	ldw	r2,-148(fp)
81103d4c:	1885883a 	add	r2,r3,r2
81103d50:	e0bfea15 	stw	r2,-88(fp)
    read_addr_arr[12] = read_addr_arr[11] + step;
81103d54:	e0ffea17 	ldw	r3,-88(fp)
81103d58:	e0bfdb17 	ldw	r2,-148(fp)
81103d5c:	1885883a 	add	r2,r3,r2
81103d60:	e0bfeb15 	stw	r2,-84(fp)
    read_addr_arr[13] = read_addr_arr[12] + step;
81103d64:	e0ffeb17 	ldw	r3,-84(fp)
81103d68:	e0bfdb17 	ldw	r2,-148(fp)
81103d6c:	1885883a 	add	r2,r3,r2
81103d70:	e0bfec15 	stw	r2,-80(fp)
    read_addr_arr[14] = read_addr_arr[13] + step;
81103d74:	e0ffec17 	ldw	r3,-80(fp)
81103d78:	e0bfdb17 	ldw	r2,-148(fp)
81103d7c:	1885883a 	add	r2,r3,r2
81103d80:	e0bfed15 	stw	r2,-76(fp)
    read_addr_arr[15] = read_addr_arr[14] + step;
81103d84:	e0ffed17 	ldw	r3,-76(fp)
81103d88:	e0bfdb17 	ldw	r2,-148(fp)
81103d8c:	1885883a 	add	r2,r3,r2
81103d90:	e0bfee15 	stw	r2,-72(fp)

  alt_u32 write_addr_arr[16];
    write_addr_arr[0] = DDR2_M1_MEMORY_BASE;
81103d94:	e03fef15 	stw	zero,-68(fp)
    write_addr_arr[1] = write_addr_arr[0] + step;
81103d98:	e0ffef17 	ldw	r3,-68(fp)
81103d9c:	e0bfdb17 	ldw	r2,-148(fp)
81103da0:	1885883a 	add	r2,r3,r2
81103da4:	e0bff015 	stw	r2,-64(fp)
    write_addr_arr[2] = write_addr_arr[1] + step;
81103da8:	e0fff017 	ldw	r3,-64(fp)
81103dac:	e0bfdb17 	ldw	r2,-148(fp)
81103db0:	1885883a 	add	r2,r3,r2
81103db4:	e0bff115 	stw	r2,-60(fp)
    write_addr_arr[3] = write_addr_arr[2] + step;
81103db8:	e0fff117 	ldw	r3,-60(fp)
81103dbc:	e0bfdb17 	ldw	r2,-148(fp)
81103dc0:	1885883a 	add	r2,r3,r2
81103dc4:	e0bff215 	stw	r2,-56(fp)
    write_addr_arr[4] = write_addr_arr[3] + step;
81103dc8:	e0fff217 	ldw	r3,-56(fp)
81103dcc:	e0bfdb17 	ldw	r2,-148(fp)
81103dd0:	1885883a 	add	r2,r3,r2
81103dd4:	e0bff315 	stw	r2,-52(fp)
    write_addr_arr[5] = write_addr_arr[4] + step;
81103dd8:	e0fff317 	ldw	r3,-52(fp)
81103ddc:	e0bfdb17 	ldw	r2,-148(fp)
81103de0:	1885883a 	add	r2,r3,r2
81103de4:	e0bff415 	stw	r2,-48(fp)
    write_addr_arr[6] = write_addr_arr[5] + step;
81103de8:	e0fff417 	ldw	r3,-48(fp)
81103dec:	e0bfdb17 	ldw	r2,-148(fp)
81103df0:	1885883a 	add	r2,r3,r2
81103df4:	e0bff515 	stw	r2,-44(fp)
    write_addr_arr[7] = write_addr_arr[6] + step;
81103df8:	e0fff517 	ldw	r3,-44(fp)
81103dfc:	e0bfdb17 	ldw	r2,-148(fp)
81103e00:	1885883a 	add	r2,r3,r2
81103e04:	e0bff615 	stw	r2,-40(fp)
    write_addr_arr[8] = write_addr_arr[7] + step;
81103e08:	e0fff617 	ldw	r3,-40(fp)
81103e0c:	e0bfdb17 	ldw	r2,-148(fp)
81103e10:	1885883a 	add	r2,r3,r2
81103e14:	e0bff715 	stw	r2,-36(fp)
    write_addr_arr[9] = write_addr_arr[8] + step;
81103e18:	e0fff717 	ldw	r3,-36(fp)
81103e1c:	e0bfdb17 	ldw	r2,-148(fp)
81103e20:	1885883a 	add	r2,r3,r2
81103e24:	e0bff815 	stw	r2,-32(fp)
    write_addr_arr[10] = write_addr_arr[9] + step;
81103e28:	e0fff817 	ldw	r3,-32(fp)
81103e2c:	e0bfdb17 	ldw	r2,-148(fp)
81103e30:	1885883a 	add	r2,r3,r2
81103e34:	e0bff915 	stw	r2,-28(fp)
    write_addr_arr[11] = write_addr_arr[10] + step;
81103e38:	e0fff917 	ldw	r3,-28(fp)
81103e3c:	e0bfdb17 	ldw	r2,-148(fp)
81103e40:	1885883a 	add	r2,r3,r2
81103e44:	e0bffa15 	stw	r2,-24(fp)
    write_addr_arr[12] = write_addr_arr[11] + step;
81103e48:	e0fffa17 	ldw	r3,-24(fp)
81103e4c:	e0bfdb17 	ldw	r2,-148(fp)
81103e50:	1885883a 	add	r2,r3,r2
81103e54:	e0bffb15 	stw	r2,-20(fp)
    write_addr_arr[13] = write_addr_arr[12] + step;
81103e58:	e0fffb17 	ldw	r3,-20(fp)
81103e5c:	e0bfdb17 	ldw	r2,-148(fp)
81103e60:	1885883a 	add	r2,r3,r2
81103e64:	e0bffc15 	stw	r2,-16(fp)
    write_addr_arr[14] = write_addr_arr[13] + step;
81103e68:	e0fffc17 	ldw	r3,-16(fp)
81103e6c:	e0bfdb17 	ldw	r2,-148(fp)
81103e70:	1885883a 	add	r2,r3,r2
81103e74:	e0bffd15 	stw	r2,-12(fp)
    write_addr_arr[15] = write_addr_arr[14] + step;
81103e78:	e0fffd17 	ldw	r3,-12(fp)
81103e7c:	e0bfdb17 	ldw	r2,-148(fp)
81103e80:	1885883a 	add	r2,r3,r2
81103e84:	e0bffe15 	stw	r2,-8(fp)

  DDR2_MEMORY_RANDOM_WRITE_TEST(DDR2_M2_ID, DDR2_VERBOSE, DDR2_TIME);
81103e88:	01800044 	movi	r6,1
81103e8c:	01400044 	movi	r5,1
81103e90:	01000084 	movi	r4,2
81103e94:	1101ffc0 	call	81101ffc <DDR2_MEMORY_RANDOM_WRITE_TEST>
	
  int TimeStart, TimeElapsed = 0;
81103e98:	e03fdc15 	stw	zero,-144(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
81103e9c:	d0a02317 	ldw	r2,-32628(gp)

  TimeStart = alt_nticks();
81103ea0:	e0bfdd15 	stw	r2,-140(fp)
  if (DMA_MULTIPLE_TRANSFER(DMADev, read_addr_arr, write_addr_arr, 16, step, control_bits, DMA_WAIT, DMA_DEFAULT_WAIT_PERIOD) == FALSE){
81103ea4:	e0ffde17 	ldw	r3,-136(fp)
81103ea8:	e17fef04 	addi	r5,fp,-68
81103eac:	e13fdf04 	addi	r4,fp,-132
81103eb0:	d8000315 	stw	zero,12(sp)
81103eb4:	00800044 	movi	r2,1
81103eb8:	d8800215 	stw	r2,8(sp)
81103ebc:	e0bfda17 	ldw	r2,-152(fp)
81103ec0:	d8800115 	stw	r2,4(sp)
81103ec4:	e0bfdb17 	ldw	r2,-148(fp)
81103ec8:	d8800015 	stw	r2,0(sp)
81103ecc:	01c00404 	movi	r7,16
81103ed0:	280d883a 	mov	r6,r5
81103ed4:	200b883a 	mov	r5,r4
81103ed8:	1809883a 	mov	r4,r3
81103edc:	11029d00 	call	811029d0 <DMA_MULTIPLE_TRANSFER>
81103ee0:	1000051e 	bne	r2,zero,81103ef8 <TestDMA_M2_M1+0x2d8>
    printf("Error During DMA Transfer");
81103ee4:	01204474 	movhi	r4,33041
81103ee8:	211fac04 	addi	r4,r4,32432
81103eec:	11057bc0 	call	811057bc <printf>
    return FALSE;
81103ef0:	0005883a 	mov	r2,zero
81103ef4:	00002806 	br	81103f98 <TestDMA_M2_M1+0x378>
81103ef8:	d0e02317 	ldw	r3,-32628(gp)
  }
  TimeElapsed = alt_nticks() - TimeStart;
81103efc:	e0bfdd17 	ldw	r2,-140(fp)
81103f00:	1885c83a 	sub	r2,r3,r2
81103f04:	e0bfdc15 	stw	r2,-144(fp)
  printf("%.3f sec\n", (float)TimeElapsed/(float)alt_ticks_per_second());
81103f08:	e13fdc17 	ldw	r4,-144(fp)
81103f0c:	11049fc0 	call	811049fc <__floatsisf>
81103f10:	1021883a 	mov	r16,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
81103f14:	d0a02217 	ldw	r2,-32632(gp)
81103f18:	1009883a 	mov	r4,r2
81103f1c:	1104b200 	call	81104b20 <__floatunsisf>
81103f20:	1007883a 	mov	r3,r2
81103f24:	180b883a 	mov	r5,r3
81103f28:	8009883a 	mov	r4,r16
81103f2c:	11041c00 	call	811041c0 <__divsf3>
81103f30:	1007883a 	mov	r3,r2
81103f34:	1805883a 	mov	r2,r3
81103f38:	1009883a 	mov	r4,r2
81103f3c:	11053280 	call	81105328 <__extendsfdf2>
81103f40:	100d883a 	mov	r6,r2
81103f44:	180f883a 	mov	r7,r3
81103f48:	300b883a 	mov	r5,r6
81103f4c:	380d883a 	mov	r6,r7
81103f50:	01204474 	movhi	r4,33041
81103f54:	211fb304 	addi	r4,r4,32460
81103f58:	11057bc0 	call	811057bc <printf>

  if (DDR2_MEMORY_RANDOM_READ_TEST(DDR2_M1_ID, DDR2_VERBOSE, DDR2_TIME) == TRUE){
81103f5c:	01800044 	movi	r6,1
81103f60:	01400044 	movi	r5,1
81103f64:	01000044 	movi	r4,1
81103f68:	11022c80 	call	811022c8 <DDR2_MEMORY_RANDOM_READ_TEST>
81103f6c:	10800058 	cmpnei	r2,r2,1
81103f70:	1000051e 	bne	r2,zero,81103f88 <TestDMA_M2_M1+0x368>
    printf("Transfer executed correctly\n");
81103f74:	01204474 	movhi	r4,33041
81103f78:	211fb604 	addi	r4,r4,32472
81103f7c:	11058d80 	call	811058d8 <puts>
  } else {
    printf("Transfer failed\n");
    return FALSE;
  }

  return TRUE;
81103f80:	00800044 	movi	r2,1
81103f84:	00000406 	br	81103f98 <TestDMA_M2_M1+0x378>
  printf("%.3f sec\n", (float)TimeElapsed/(float)alt_ticks_per_second());

  if (DDR2_MEMORY_RANDOM_READ_TEST(DDR2_M1_ID, DDR2_VERBOSE, DDR2_TIME) == TRUE){
    printf("Transfer executed correctly\n");
  } else {
    printf("Transfer failed\n");
81103f88:	01204474 	movhi	r4,33041
81103f8c:	211fbd04 	addi	r4,r4,32500
81103f90:	11058d80 	call	811058d8 <puts>
    return FALSE;
81103f94:	0005883a 	mov	r2,zero
  }

  return TRUE;
}
81103f98:	e6ffff04 	addi	sp,fp,-4
81103f9c:	dfc00217 	ldw	ra,8(sp)
81103fa0:	df000117 	ldw	fp,4(sp)
81103fa4:	dc000017 	ldw	r16,0(sp)
81103fa8:	dec00304 	addi	sp,sp,12
81103fac:	f800283a 	ret

81103fb0 <_reg_write>:
 *
 * @retval 1 : Sucesso 
 *
 */

alt_32 _reg_write(int BASE_ADD, alt_32 REG_ADD, alt_32 REG_Dado ){
81103fb0:	defffc04 	addi	sp,sp,-16
81103fb4:	df000315 	stw	fp,12(sp)
81103fb8:	df000304 	addi	fp,sp,12
81103fbc:	e13ffd15 	stw	r4,-12(fp)
81103fc0:	e17ffe15 	stw	r5,-8(fp)
81103fc4:	e1bfff15 	stw	r6,-4(fp)

	IOWR_32DIRECT(BASE_ADD, REG_ADD << 2, REG_Dado);
81103fc8:	e0bffe17 	ldw	r2,-8(fp)
81103fcc:	1085883a 	add	r2,r2,r2
81103fd0:	1085883a 	add	r2,r2,r2
81103fd4:	1007883a 	mov	r3,r2
81103fd8:	e0bffd17 	ldw	r2,-12(fp)
81103fdc:	1885883a 	add	r2,r3,r2
81103fe0:	1007883a 	mov	r3,r2
81103fe4:	e0bfff17 	ldw	r2,-4(fp)
81103fe8:	18800035 	stwio	r2,0(r3)
	return 1;
81103fec:	00800044 	movi	r2,1

}
81103ff0:	e037883a 	mov	sp,fp
81103ff4:	df000017 	ldw	fp,0(sp)
81103ff8:	dec00104 	addi	sp,sp,4
81103ffc:	f800283a 	ret

81104000 <_reg_read>:
 *
 * @retval 1 : Sucesso 
 *
 */

alt_32 _reg_read(int BASE_ADD, alt_32 REG_ADD, alt_32 *REG_Dado ){
81104000:	defffc04 	addi	sp,sp,-16
81104004:	df000315 	stw	fp,12(sp)
81104008:	df000304 	addi	fp,sp,12
8110400c:	e13ffd15 	stw	r4,-12(fp)
81104010:	e17ffe15 	stw	r5,-8(fp)
81104014:	e1bfff15 	stw	r6,-4(fp)

   *REG_Dado = IORD_32DIRECT(BASE_ADD, REG_ADD << 2);
81104018:	e0bffe17 	ldw	r2,-8(fp)
8110401c:	1085883a 	add	r2,r2,r2
81104020:	1085883a 	add	r2,r2,r2
81104024:	1007883a 	mov	r3,r2
81104028:	e0bffd17 	ldw	r2,-12(fp)
8110402c:	1885883a 	add	r2,r3,r2
81104030:	10c00037 	ldwio	r3,0(r2)
81104034:	e0bfff17 	ldw	r2,-4(fp)
81104038:	10c00015 	stw	r3,0(r2)
   return 1;
8110403c:	00800044 	movi	r2,1

}
81104040:	e037883a 	mov	sp,fp
81104044:	df000017 	ldw	fp,0(sp)
81104048:	dec00104 	addi	sp,sp,4
8110404c:	f800283a 	ret

81104050 <_print_codec_status>:
 * @param [in] codec_status
 * *
 * @retval 1 : Sucesso
 *
 */
void _print_codec_status(int codec_status){
81104050:	defffa04 	addi	sp,sp,-24
81104054:	dfc00515 	stw	ra,20(sp)
81104058:	df000415 	stw	fp,16(sp)
8110405c:	df000404 	addi	fp,sp,16
81104060:	e13fff15 	stw	r4,-4(fp)
	int started    = (int)((codec_status >> 6) & 1);
81104064:	e0bfff17 	ldw	r2,-4(fp)
81104068:	1005d1ba 	srai	r2,r2,6
8110406c:	1080004c 	andi	r2,r2,1
81104070:	e0bffc15 	stw	r2,-16(fp)
	int connecting = (int)((codec_status >> 5) & 1);
81104074:	e0bfff17 	ldw	r2,-4(fp)
81104078:	1005d17a 	srai	r2,r2,5
8110407c:	1080004c 	andi	r2,r2,1
81104080:	e0bffd15 	stw	r2,-12(fp)
	int running    = (int)((codec_status >> 4) & 1);
81104084:	e0bfff17 	ldw	r2,-4(fp)
81104088:	1005d13a 	srai	r2,r2,4
8110408c:	1080004c 	andi	r2,r2,1
81104090:	e0bffe15 	stw	r2,-8(fp)

	printf("-------- link status \n");
81104094:	01204474 	movhi	r4,33041
81104098:	211fc604 	addi	r4,r4,32536
8110409c:	11058d80 	call	811058d8 <puts>
	printf("Link started    : %s \n" , (started    == 1) ? "S":"N" );
811040a0:	e0bffc17 	ldw	r2,-16(fp)
811040a4:	10800058 	cmpnei	r2,r2,1
811040a8:	1000031e 	bne	r2,zero,811040b8 <_print_codec_status+0x68>
811040ac:	00a04474 	movhi	r2,33041
811040b0:	109fcc04 	addi	r2,r2,32560
811040b4:	00000206 	br	811040c0 <_print_codec_status+0x70>
811040b8:	00a04474 	movhi	r2,33041
811040bc:	109fcd04 	addi	r2,r2,32564
811040c0:	100b883a 	mov	r5,r2
811040c4:	01204474 	movhi	r4,33041
811040c8:	211fce04 	addi	r4,r4,32568
811040cc:	11057bc0 	call	811057bc <printf>
	printf("Link connecting : %s \n" , (connecting == 1) ? "S":"N" );
811040d0:	e0bffd17 	ldw	r2,-12(fp)
811040d4:	10800058 	cmpnei	r2,r2,1
811040d8:	1000031e 	bne	r2,zero,811040e8 <_print_codec_status+0x98>
811040dc:	00a04474 	movhi	r2,33041
811040e0:	109fcc04 	addi	r2,r2,32560
811040e4:	00000206 	br	811040f0 <_print_codec_status+0xa0>
811040e8:	00a04474 	movhi	r2,33041
811040ec:	109fcd04 	addi	r2,r2,32564
811040f0:	100b883a 	mov	r5,r2
811040f4:	01204474 	movhi	r4,33041
811040f8:	211fd404 	addi	r4,r4,32592
811040fc:	11057bc0 	call	811057bc <printf>
	printf("Link running    : %s \n" , (running    == 1) ? "S":"N" );
81104100:	e0bffe17 	ldw	r2,-8(fp)
81104104:	10800058 	cmpnei	r2,r2,1
81104108:	1000031e 	bne	r2,zero,81104118 <_print_codec_status+0xc8>
8110410c:	00a04474 	movhi	r2,33041
81104110:	109fcc04 	addi	r2,r2,32560
81104114:	00000206 	br	81104120 <_print_codec_status+0xd0>
81104118:	00a04474 	movhi	r2,33041
8110411c:	109fcd04 	addi	r2,r2,32564
81104120:	100b883a 	mov	r5,r2
81104124:	01204474 	movhi	r4,33041
81104128:	211fda04 	addi	r4,r4,32616
8110412c:	11057bc0 	call	811057bc <printf>
	printf("--------  \n");
81104130:	01204474 	movhi	r4,33041
81104134:	211fe004 	addi	r4,r4,32640
81104138:	11058d80 	call	811058d8 <puts>
}
8110413c:	0001883a 	nop
81104140:	e037883a 	mov	sp,fp
81104144:	dfc00117 	ldw	ra,4(sp)
81104148:	df000017 	ldw	fp,0(sp)
8110414c:	dec00204 	addi	sp,sp,8
81104150:	f800283a 	ret

81104154 <_split_codec_status>:
 * @param [in] codec_status
 * *
 * @retval 1 : Sucesso
 *
 */
void _split_codec_status(int codec_status, int *started, int *connecting, int *running){
81104154:	defffb04 	addi	sp,sp,-20
81104158:	df000415 	stw	fp,16(sp)
8110415c:	df000404 	addi	fp,sp,16
81104160:	e13ffc15 	stw	r4,-16(fp)
81104164:	e17ffd15 	stw	r5,-12(fp)
81104168:	e1bffe15 	stw	r6,-8(fp)
8110416c:	e1ffff15 	stw	r7,-4(fp)
	*started    = (int)((codec_status >> 6) & 1);
81104170:	e0bffc17 	ldw	r2,-16(fp)
81104174:	1005d1ba 	srai	r2,r2,6
81104178:	10c0004c 	andi	r3,r2,1
8110417c:	e0bffd17 	ldw	r2,-12(fp)
81104180:	10c00015 	stw	r3,0(r2)
	*connecting = (int)((codec_status >> 5) & 1);
81104184:	e0bffc17 	ldw	r2,-16(fp)
81104188:	1005d17a 	srai	r2,r2,5
8110418c:	10c0004c 	andi	r3,r2,1
81104190:	e0bffe17 	ldw	r2,-8(fp)
81104194:	10c00015 	stw	r3,0(r2)
	*running    = (int)((codec_status >> 4) & 1);
81104198:	e0bffc17 	ldw	r2,-16(fp)
8110419c:	1005d13a 	srai	r2,r2,4
811041a0:	10c0004c 	andi	r3,r2,1
811041a4:	e0bfff17 	ldw	r2,-4(fp)
811041a8:	10c00015 	stw	r3,0(r2)
}
811041ac:	0001883a 	nop
811041b0:	e037883a 	mov	sp,fp
811041b4:	df000017 	ldw	fp,0(sp)
811041b8:	dec00104 	addi	sp,sp,4
811041bc:	f800283a 	ret

811041c0 <__divsf3>:
811041c0:	defff504 	addi	sp,sp,-44
811041c4:	200cd5fa 	srli	r6,r4,23
811041c8:	dcc00415 	stw	r19,16(sp)
811041cc:	2026d7fa 	srli	r19,r4,31
811041d0:	00c02034 	movhi	r3,128
811041d4:	dd800715 	stw	r22,28(sp)
811041d8:	dd000515 	stw	r20,20(sp)
811041dc:	dc800315 	stw	r18,12(sp)
811041e0:	18ffffc4 	addi	r3,r3,-1
811041e4:	dfc00a15 	stw	ra,40(sp)
811041e8:	df000915 	stw	fp,36(sp)
811041ec:	ddc00815 	stw	r23,32(sp)
811041f0:	dd400615 	stw	r21,24(sp)
811041f4:	dc400215 	stw	r17,8(sp)
811041f8:	dc000115 	stw	r16,4(sp)
811041fc:	35003fcc 	andi	r20,r6,255
81104200:	1924703a 	and	r18,r3,r4
81104204:	9d803fcc 	andi	r22,r19,255
81104208:	a0005226 	beq	r20,zero,81104354 <__divsf3+0x194>
8110420c:	00803fc4 	movi	r2,255
81104210:	a0802e26 	beq	r20,r2,811042cc <__divsf3+0x10c>
81104214:	91002034 	orhi	r4,r18,128
81104218:	202490fa 	slli	r18,r4,3
8110421c:	a53fe044 	addi	r20,r20,-127
81104220:	0021883a 	mov	r16,zero
81104224:	002f883a 	mov	r23,zero
81104228:	280cd5fa 	srli	r6,r5,23
8110422c:	282ad7fa 	srli	r21,r5,31
81104230:	00c02034 	movhi	r3,128
81104234:	18ffffc4 	addi	r3,r3,-1
81104238:	31803fcc 	andi	r6,r6,255
8110423c:	1962703a 	and	r17,r3,r5
81104240:	af003fcc 	andi	fp,r21,255
81104244:	30004a26 	beq	r6,zero,81104370 <__divsf3+0x1b0>
81104248:	00803fc4 	movi	r2,255
8110424c:	30804526 	beq	r6,r2,81104364 <__divsf3+0x1a4>
81104250:	89402034 	orhi	r5,r17,128
81104254:	282290fa 	slli	r17,r5,3
81104258:	31bfe044 	addi	r6,r6,-127
8110425c:	000b883a 	mov	r5,zero
81104260:	2c20b03a 	or	r16,r5,r16
81104264:	802090ba 	slli	r16,r16,2
81104268:	00a04434 	movhi	r2,33040
8110426c:	1090a304 	addi	r2,r2,17036
81104270:	80a1883a 	add	r16,r16,r2
81104274:	81000017 	ldw	r4,0(r16)
81104278:	9d46f03a 	xor	r3,r19,r21
8110427c:	180f883a 	mov	r7,r3
81104280:	18803fcc 	andi	r2,r3,255
81104284:	a18dc83a 	sub	r6,r20,r6
81104288:	2000683a 	jmp	r4
8110428c:	81104470 	cmpltui	r4,r16,16657
81104290:	811042f4 	orhi	r4,r16,16651
81104294:	81104464 	muli	r4,r16,16657
81104298:	811042e0 	cmpeqi	r4,r16,16651
8110429c:	81104464 	muli	r4,r16,16657
811042a0:	8110443c 	xorhi	r4,r16,16656
811042a4:	81104464 	muli	r4,r16,16657
811042a8:	811042e0 	cmpeqi	r4,r16,16651
811042ac:	811042f4 	orhi	r4,r16,16651
811042b0:	811042f4 	orhi	r4,r16,16651
811042b4:	8110443c 	xorhi	r4,r16,16656
811042b8:	811042e0 	cmpeqi	r4,r16,16651
811042bc:	81104550 	cmplti	r4,r16,16661
811042c0:	81104550 	cmplti	r4,r16,16661
811042c4:	81104550 	cmplti	r4,r16,16661
811042c8:	81104504 	addi	r4,r16,16660
811042cc:	9000581e 	bne	r18,zero,81104430 <__divsf3+0x270>
811042d0:	04000204 	movi	r16,8
811042d4:	05c00084 	movi	r23,2
811042d8:	003fd306 	br	81104228 <__reset+0xfb0e4228>
811042dc:	0023883a 	mov	r17,zero
811042e0:	e02d883a 	mov	r22,fp
811042e4:	282f883a 	mov	r23,r5
811042e8:	00800084 	movi	r2,2
811042ec:	b8808f1e 	bne	r23,r2,8110452c <__divsf3+0x36c>
811042f0:	b005883a 	mov	r2,r22
811042f4:	11c0004c 	andi	r7,r2,1
811042f8:	013fffc4 	movi	r4,-1
811042fc:	000d883a 	mov	r6,zero
81104300:	21003fcc 	andi	r4,r4,255
81104304:	200895fa 	slli	r4,r4,23
81104308:	38803fcc 	andi	r2,r7,255
8110430c:	00c02034 	movhi	r3,128
81104310:	100497fa 	slli	r2,r2,31
81104314:	18ffffc4 	addi	r3,r3,-1
81104318:	30c6703a 	and	r3,r6,r3
8110431c:	1906b03a 	or	r3,r3,r4
81104320:	1884b03a 	or	r2,r3,r2
81104324:	dfc00a17 	ldw	ra,40(sp)
81104328:	df000917 	ldw	fp,36(sp)
8110432c:	ddc00817 	ldw	r23,32(sp)
81104330:	dd800717 	ldw	r22,28(sp)
81104334:	dd400617 	ldw	r21,24(sp)
81104338:	dd000517 	ldw	r20,20(sp)
8110433c:	dcc00417 	ldw	r19,16(sp)
81104340:	dc800317 	ldw	r18,12(sp)
81104344:	dc400217 	ldw	r17,8(sp)
81104348:	dc000117 	ldw	r16,4(sp)
8110434c:	dec00b04 	addi	sp,sp,44
81104350:	f800283a 	ret
81104354:	90002b1e 	bne	r18,zero,81104404 <__divsf3+0x244>
81104358:	04000104 	movi	r16,4
8110435c:	05c00044 	movi	r23,1
81104360:	003fb106 	br	81104228 <__reset+0xfb0e4228>
81104364:	8800251e 	bne	r17,zero,811043fc <__divsf3+0x23c>
81104368:	01400084 	movi	r5,2
8110436c:	00000206 	br	81104378 <__divsf3+0x1b8>
81104370:	88001a1e 	bne	r17,zero,811043dc <__divsf3+0x21c>
81104374:	01400044 	movi	r5,1
81104378:	8160b03a 	or	r16,r16,r5
8110437c:	802090ba 	slli	r16,r16,2
81104380:	00e04434 	movhi	r3,33040
81104384:	18d0e704 	addi	r3,r3,17308
81104388:	80e1883a 	add	r16,r16,r3
8110438c:	80c00017 	ldw	r3,0(r16)
81104390:	9d44f03a 	xor	r2,r19,r21
81104394:	a18dc83a 	sub	r6,r20,r6
81104398:	1800683a 	jmp	r3
8110439c:	811042f4 	orhi	r4,r16,16651
811043a0:	811042f4 	orhi	r4,r16,16651
811043a4:	81104540 	call	88110454 <__reset+0x20f0454>
811043a8:	811042dc 	xori	r4,r16,16651
811043ac:	81104540 	call	88110454 <__reset+0x20f0454>
811043b0:	8110443c 	xorhi	r4,r16,16656
811043b4:	81104540 	call	88110454 <__reset+0x20f0454>
811043b8:	811042dc 	xori	r4,r16,16651
811043bc:	811042f4 	orhi	r4,r16,16651
811043c0:	811042f4 	orhi	r4,r16,16651
811043c4:	8110443c 	xorhi	r4,r16,16656
811043c8:	811042dc 	xori	r4,r16,16651
811043cc:	81104550 	cmplti	r4,r16,16661
811043d0:	81104550 	cmplti	r4,r16,16661
811043d4:	81104550 	cmplti	r4,r16,16661
811043d8:	81104568 	cmpgeui	r4,r16,16661
811043dc:	8809883a 	mov	r4,r17
811043e0:	11055e00 	call	811055e0 <__clzsi2>
811043e4:	10fffec4 	addi	r3,r2,-5
811043e8:	10801d84 	addi	r2,r2,118
811043ec:	88e2983a 	sll	r17,r17,r3
811043f0:	008dc83a 	sub	r6,zero,r2
811043f4:	000b883a 	mov	r5,zero
811043f8:	003f9906 	br	81104260 <__reset+0xfb0e4260>
811043fc:	014000c4 	movi	r5,3
81104400:	003f9706 	br	81104260 <__reset+0xfb0e4260>
81104404:	9009883a 	mov	r4,r18
81104408:	d9400015 	stw	r5,0(sp)
8110440c:	11055e00 	call	811055e0 <__clzsi2>
81104410:	10fffec4 	addi	r3,r2,-5
81104414:	11801d84 	addi	r6,r2,118
81104418:	90e4983a 	sll	r18,r18,r3
8110441c:	01a9c83a 	sub	r20,zero,r6
81104420:	0021883a 	mov	r16,zero
81104424:	002f883a 	mov	r23,zero
81104428:	d9400017 	ldw	r5,0(sp)
8110442c:	003f7e06 	br	81104228 <__reset+0xfb0e4228>
81104430:	04000304 	movi	r16,12
81104434:	05c000c4 	movi	r23,3
81104438:	003f7b06 	br	81104228 <__reset+0xfb0e4228>
8110443c:	01802034 	movhi	r6,128
81104440:	000f883a 	mov	r7,zero
81104444:	31bfffc4 	addi	r6,r6,-1
81104448:	013fffc4 	movi	r4,-1
8110444c:	003fac06 	br	81104300 <__reset+0xfb0e4300>
81104450:	01400044 	movi	r5,1
81104454:	2909c83a 	sub	r4,r5,r4
81104458:	00c006c4 	movi	r3,27
8110445c:	19004b0e 	bge	r3,r4,8110458c <__divsf3+0x3cc>
81104460:	114e703a 	and	r7,r2,r5
81104464:	0009883a 	mov	r4,zero
81104468:	000d883a 	mov	r6,zero
8110446c:	003fa406 	br	81104300 <__reset+0xfb0e4300>
81104470:	9006917a 	slli	r3,r18,5
81104474:	8822917a 	slli	r17,r17,5
81104478:	1c40372e 	bgeu	r3,r17,81104558 <__divsf3+0x398>
8110447c:	31bfffc4 	addi	r6,r6,-1
81104480:	010006c4 	movi	r4,27
81104484:	000b883a 	mov	r5,zero
81104488:	180f883a 	mov	r7,r3
8110448c:	294b883a 	add	r5,r5,r5
81104490:	18c7883a 	add	r3,r3,r3
81104494:	38000116 	blt	r7,zero,8110449c <__divsf3+0x2dc>
81104498:	1c400236 	bltu	r3,r17,811044a4 <__divsf3+0x2e4>
8110449c:	1c47c83a 	sub	r3,r3,r17
811044a0:	29400054 	ori	r5,r5,1
811044a4:	213fffc4 	addi	r4,r4,-1
811044a8:	203ff71e 	bne	r4,zero,81104488 <__reset+0xfb0e4488>
811044ac:	1806c03a 	cmpne	r3,r3,zero
811044b0:	1962b03a 	or	r17,r3,r5
811044b4:	31001fc4 	addi	r4,r6,127
811044b8:	013fe50e 	bge	zero,r4,81104450 <__reset+0xfb0e4450>
811044bc:	88c001cc 	andi	r3,r17,7
811044c0:	18000426 	beq	r3,zero,811044d4 <__divsf3+0x314>
811044c4:	88c003cc 	andi	r3,r17,15
811044c8:	01400104 	movi	r5,4
811044cc:	19400126 	beq	r3,r5,811044d4 <__divsf3+0x314>
811044d0:	8963883a 	add	r17,r17,r5
811044d4:	88c2002c 	andhi	r3,r17,2048
811044d8:	18000426 	beq	r3,zero,811044ec <__divsf3+0x32c>
811044dc:	00fe0034 	movhi	r3,63488
811044e0:	18ffffc4 	addi	r3,r3,-1
811044e4:	31002004 	addi	r4,r6,128
811044e8:	88e2703a 	and	r17,r17,r3
811044ec:	00c03f84 	movi	r3,254
811044f0:	193f8016 	blt	r3,r4,811042f4 <__reset+0xfb0e42f4>
811044f4:	880c91ba 	slli	r6,r17,6
811044f8:	11c0004c 	andi	r7,r2,1
811044fc:	300cd27a 	srli	r6,r6,9
81104500:	003f7f06 	br	81104300 <__reset+0xfb0e4300>
81104504:	9080102c 	andhi	r2,r18,64
81104508:	10000226 	beq	r2,zero,81104514 <__divsf3+0x354>
8110450c:	8880102c 	andhi	r2,r17,64
81104510:	10001826 	beq	r2,zero,81104574 <__divsf3+0x3b4>
81104514:	00802034 	movhi	r2,128
81104518:	91801034 	orhi	r6,r18,64
8110451c:	10bfffc4 	addi	r2,r2,-1
81104520:	980f883a 	mov	r7,r19
81104524:	308c703a 	and	r6,r6,r2
81104528:	003fc706 	br	81104448 <__reset+0xfb0e4448>
8110452c:	008000c4 	movi	r2,3
81104530:	b8802d26 	beq	r23,r2,811045e8 <__divsf3+0x428>
81104534:	00c00044 	movi	r3,1
81104538:	b005883a 	mov	r2,r22
8110453c:	b8ffdd1e 	bne	r23,r3,811044b4 <__reset+0xfb0e44b4>
81104540:	11c0004c 	andi	r7,r2,1
81104544:	0009883a 	mov	r4,zero
81104548:	000d883a 	mov	r6,zero
8110454c:	003f6c06 	br	81104300 <__reset+0xfb0e4300>
81104550:	9023883a 	mov	r17,r18
81104554:	003f6406 	br	811042e8 <__reset+0xfb0e42e8>
81104558:	1c47c83a 	sub	r3,r3,r17
8110455c:	01000684 	movi	r4,26
81104560:	01400044 	movi	r5,1
81104564:	003fc806 	br	81104488 <__reset+0xfb0e4488>
81104568:	9080102c 	andhi	r2,r18,64
8110456c:	103fe926 	beq	r2,zero,81104514 <__reset+0xfb0e4514>
81104570:	0023883a 	mov	r17,zero
81104574:	00802034 	movhi	r2,128
81104578:	89801034 	orhi	r6,r17,64
8110457c:	10bfffc4 	addi	r2,r2,-1
81104580:	a80f883a 	mov	r7,r21
81104584:	308c703a 	and	r6,r6,r2
81104588:	003faf06 	br	81104448 <__reset+0xfb0e4448>
8110458c:	01c00804 	movi	r7,32
81104590:	390fc83a 	sub	r7,r7,r4
81104594:	89ce983a 	sll	r7,r17,r7
81104598:	890ad83a 	srl	r5,r17,r4
8110459c:	380ec03a 	cmpne	r7,r7,zero
811045a0:	29cab03a 	or	r5,r5,r7
811045a4:	28c001cc 	andi	r3,r5,7
811045a8:	18000426 	beq	r3,zero,811045bc <__divsf3+0x3fc>
811045ac:	28c003cc 	andi	r3,r5,15
811045b0:	01000104 	movi	r4,4
811045b4:	19000126 	beq	r3,r4,811045bc <__divsf3+0x3fc>
811045b8:	290b883a 	add	r5,r5,r4
811045bc:	28c1002c 	andhi	r3,r5,1024
811045c0:	18000426 	beq	r3,zero,811045d4 <__divsf3+0x414>
811045c4:	11c0004c 	andi	r7,r2,1
811045c8:	01000044 	movi	r4,1
811045cc:	000d883a 	mov	r6,zero
811045d0:	003f4b06 	br	81104300 <__reset+0xfb0e4300>
811045d4:	280a91ba 	slli	r5,r5,6
811045d8:	11c0004c 	andi	r7,r2,1
811045dc:	0009883a 	mov	r4,zero
811045e0:	280cd27a 	srli	r6,r5,9
811045e4:	003f4606 	br	81104300 <__reset+0xfb0e4300>
811045e8:	00802034 	movhi	r2,128
811045ec:	89801034 	orhi	r6,r17,64
811045f0:	10bfffc4 	addi	r2,r2,-1
811045f4:	b00f883a 	mov	r7,r22
811045f8:	308c703a 	and	r6,r6,r2
811045fc:	003f9206 	br	81104448 <__reset+0xfb0e4448>

81104600 <__mulsf3>:
81104600:	defff504 	addi	sp,sp,-44
81104604:	dc000115 	stw	r16,4(sp)
81104608:	2020d5fa 	srli	r16,r4,23
8110460c:	dd400615 	stw	r21,24(sp)
81104610:	202ad7fa 	srli	r21,r4,31
81104614:	dc800315 	stw	r18,12(sp)
81104618:	04802034 	movhi	r18,128
8110461c:	df000915 	stw	fp,36(sp)
81104620:	dd000515 	stw	r20,20(sp)
81104624:	94bfffc4 	addi	r18,r18,-1
81104628:	dfc00a15 	stw	ra,40(sp)
8110462c:	ddc00815 	stw	r23,32(sp)
81104630:	dd800715 	stw	r22,28(sp)
81104634:	dcc00415 	stw	r19,16(sp)
81104638:	dc400215 	stw	r17,8(sp)
8110463c:	84003fcc 	andi	r16,r16,255
81104640:	9124703a 	and	r18,r18,r4
81104644:	a829883a 	mov	r20,r21
81104648:	af003fcc 	andi	fp,r21,255
8110464c:	80005426 	beq	r16,zero,811047a0 <__mulsf3+0x1a0>
81104650:	00803fc4 	movi	r2,255
81104654:	80802f26 	beq	r16,r2,81104714 <__mulsf3+0x114>
81104658:	91002034 	orhi	r4,r18,128
8110465c:	202490fa 	slli	r18,r4,3
81104660:	843fe044 	addi	r16,r16,-127
81104664:	0023883a 	mov	r17,zero
81104668:	002f883a 	mov	r23,zero
8110466c:	2804d5fa 	srli	r2,r5,23
81104670:	282cd7fa 	srli	r22,r5,31
81104674:	01002034 	movhi	r4,128
81104678:	213fffc4 	addi	r4,r4,-1
8110467c:	10803fcc 	andi	r2,r2,255
81104680:	2166703a 	and	r19,r4,r5
81104684:	b1803fcc 	andi	r6,r22,255
81104688:	10004c26 	beq	r2,zero,811047bc <__mulsf3+0x1bc>
8110468c:	00c03fc4 	movi	r3,255
81104690:	10c04726 	beq	r2,r3,811047b0 <__mulsf3+0x1b0>
81104694:	99002034 	orhi	r4,r19,128
81104698:	202690fa 	slli	r19,r4,3
8110469c:	10bfe044 	addi	r2,r2,-127
811046a0:	0007883a 	mov	r3,zero
811046a4:	80a1883a 	add	r16,r16,r2
811046a8:	010003c4 	movi	r4,15
811046ac:	1c44b03a 	or	r2,r3,r17
811046b0:	b56af03a 	xor	r21,r22,r21
811046b4:	81c00044 	addi	r7,r16,1
811046b8:	20806b36 	bltu	r4,r2,81104868 <__mulsf3+0x268>
811046bc:	100490ba 	slli	r2,r2,2
811046c0:	01204434 	movhi	r4,33040
811046c4:	2111b504 	addi	r4,r4,18132
811046c8:	1105883a 	add	r2,r2,r4
811046cc:	10800017 	ldw	r2,0(r2)
811046d0:	1000683a 	jmp	r2
811046d4:	81104868 	cmpgeui	r4,r16,16673
811046d8:	81104728 	cmpgeui	r4,r16,16668
811046dc:	81104728 	cmpgeui	r4,r16,16668
811046e0:	81104724 	muli	r4,r16,16668
811046e4:	8110484c 	andi	r4,r16,16673
811046e8:	8110484c 	andi	r4,r16,16673
811046ec:	81104838 	rdprs	r4,r16,16672
811046f0:	81104724 	muli	r4,r16,16668
811046f4:	8110484c 	andi	r4,r16,16673
811046f8:	81104838 	rdprs	r4,r16,16672
811046fc:	8110484c 	andi	r4,r16,16673
81104700:	81104724 	muli	r4,r16,16668
81104704:	81104858 	cmpnei	r4,r16,16673
81104708:	81104858 	cmpnei	r4,r16,16673
8110470c:	81104858 	cmpnei	r4,r16,16673
81104710:	81104934 	orhi	r4,r16,16676
81104714:	90003b1e 	bne	r18,zero,81104804 <__mulsf3+0x204>
81104718:	04400204 	movi	r17,8
8110471c:	05c00084 	movi	r23,2
81104720:	003fd206 	br	8110466c <__reset+0xfb0e466c>
81104724:	302b883a 	mov	r21,r6
81104728:	00800084 	movi	r2,2
8110472c:	18802626 	beq	r3,r2,811047c8 <__mulsf3+0x1c8>
81104730:	008000c4 	movi	r2,3
81104734:	1880ab26 	beq	r3,r2,811049e4 <__mulsf3+0x3e4>
81104738:	00800044 	movi	r2,1
8110473c:	1880a21e 	bne	r3,r2,811049c8 <__mulsf3+0x3c8>
81104740:	a829883a 	mov	r20,r21
81104744:	0007883a 	mov	r3,zero
81104748:	0009883a 	mov	r4,zero
8110474c:	18803fcc 	andi	r2,r3,255
81104750:	100695fa 	slli	r3,r2,23
81104754:	a0803fcc 	andi	r2,r20,255
81104758:	100a97fa 	slli	r5,r2,31
8110475c:	00802034 	movhi	r2,128
81104760:	10bfffc4 	addi	r2,r2,-1
81104764:	2084703a 	and	r2,r4,r2
81104768:	10c4b03a 	or	r2,r2,r3
8110476c:	1144b03a 	or	r2,r2,r5
81104770:	dfc00a17 	ldw	ra,40(sp)
81104774:	df000917 	ldw	fp,36(sp)
81104778:	ddc00817 	ldw	r23,32(sp)
8110477c:	dd800717 	ldw	r22,28(sp)
81104780:	dd400617 	ldw	r21,24(sp)
81104784:	dd000517 	ldw	r20,20(sp)
81104788:	dcc00417 	ldw	r19,16(sp)
8110478c:	dc800317 	ldw	r18,12(sp)
81104790:	dc400217 	ldw	r17,8(sp)
81104794:	dc000117 	ldw	r16,4(sp)
81104798:	dec00b04 	addi	sp,sp,44
8110479c:	f800283a 	ret
811047a0:	90000d1e 	bne	r18,zero,811047d8 <__mulsf3+0x1d8>
811047a4:	04400104 	movi	r17,4
811047a8:	05c00044 	movi	r23,1
811047ac:	003faf06 	br	8110466c <__reset+0xfb0e466c>
811047b0:	9806c03a 	cmpne	r3,r19,zero
811047b4:	18c00084 	addi	r3,r3,2
811047b8:	003fba06 	br	811046a4 <__reset+0xfb0e46a4>
811047bc:	9800141e 	bne	r19,zero,81104810 <__mulsf3+0x210>
811047c0:	00c00044 	movi	r3,1
811047c4:	003fb706 	br	811046a4 <__reset+0xfb0e46a4>
811047c8:	a829883a 	mov	r20,r21
811047cc:	00ffffc4 	movi	r3,-1
811047d0:	0009883a 	mov	r4,zero
811047d4:	003fdd06 	br	8110474c <__reset+0xfb0e474c>
811047d8:	9009883a 	mov	r4,r18
811047dc:	d9400015 	stw	r5,0(sp)
811047e0:	11055e00 	call	811055e0 <__clzsi2>
811047e4:	10fffec4 	addi	r3,r2,-5
811047e8:	10801d84 	addi	r2,r2,118
811047ec:	90e4983a 	sll	r18,r18,r3
811047f0:	00a1c83a 	sub	r16,zero,r2
811047f4:	0023883a 	mov	r17,zero
811047f8:	002f883a 	mov	r23,zero
811047fc:	d9400017 	ldw	r5,0(sp)
81104800:	003f9a06 	br	8110466c <__reset+0xfb0e466c>
81104804:	04400304 	movi	r17,12
81104808:	05c000c4 	movi	r23,3
8110480c:	003f9706 	br	8110466c <__reset+0xfb0e466c>
81104810:	9809883a 	mov	r4,r19
81104814:	d9800015 	stw	r6,0(sp)
81104818:	11055e00 	call	811055e0 <__clzsi2>
8110481c:	10fffec4 	addi	r3,r2,-5
81104820:	10801d84 	addi	r2,r2,118
81104824:	98e6983a 	sll	r19,r19,r3
81104828:	0085c83a 	sub	r2,zero,r2
8110482c:	0007883a 	mov	r3,zero
81104830:	d9800017 	ldw	r6,0(sp)
81104834:	003f9b06 	br	811046a4 <__reset+0xfb0e46a4>
81104838:	01002034 	movhi	r4,128
8110483c:	0029883a 	mov	r20,zero
81104840:	213fffc4 	addi	r4,r4,-1
81104844:	00ffffc4 	movi	r3,-1
81104848:	003fc006 	br	8110474c <__reset+0xfb0e474c>
8110484c:	9027883a 	mov	r19,r18
81104850:	b807883a 	mov	r3,r23
81104854:	003fb406 	br	81104728 <__reset+0xfb0e4728>
81104858:	9027883a 	mov	r19,r18
8110485c:	e02b883a 	mov	r21,fp
81104860:	b807883a 	mov	r3,r23
81104864:	003fb006 	br	81104728 <__reset+0xfb0e4728>
81104868:	9004d43a 	srli	r2,r18,16
8110486c:	9810d43a 	srli	r8,r19,16
81104870:	94bfffcc 	andi	r18,r18,65535
81104874:	993fffcc 	andi	r4,r19,65535
81104878:	910d383a 	mul	r6,r18,r4
8110487c:	20a7383a 	mul	r19,r4,r2
81104880:	9225383a 	mul	r18,r18,r8
81104884:	3006d43a 	srli	r3,r6,16
81104888:	1211383a 	mul	r8,r2,r8
8110488c:	94e5883a 	add	r18,r18,r19
81104890:	1c87883a 	add	r3,r3,r18
81104894:	1cc0022e 	bgeu	r3,r19,811048a0 <__mulsf3+0x2a0>
81104898:	00800074 	movhi	r2,1
8110489c:	4091883a 	add	r8,r8,r2
811048a0:	1804943a 	slli	r2,r3,16
811048a4:	31bfffcc 	andi	r6,r6,65535
811048a8:	1806d43a 	srli	r3,r3,16
811048ac:	1185883a 	add	r2,r2,r6
811048b0:	102691ba 	slli	r19,r2,6
811048b4:	1a07883a 	add	r3,r3,r8
811048b8:	1004d6ba 	srli	r2,r2,26
811048bc:	180891ba 	slli	r4,r3,6
811048c0:	9826c03a 	cmpne	r19,r19,zero
811048c4:	9884b03a 	or	r2,r19,r2
811048c8:	1126b03a 	or	r19,r2,r4
811048cc:	9882002c 	andhi	r2,r19,2048
811048d0:	10000426 	beq	r2,zero,811048e4 <__mulsf3+0x2e4>
811048d4:	9804d07a 	srli	r2,r19,1
811048d8:	9900004c 	andi	r4,r19,1
811048dc:	3821883a 	mov	r16,r7
811048e0:	1126b03a 	or	r19,r2,r4
811048e4:	80c01fc4 	addi	r3,r16,127
811048e8:	00c0210e 	bge	zero,r3,81104970 <__mulsf3+0x370>
811048ec:	988001cc 	andi	r2,r19,7
811048f0:	10000426 	beq	r2,zero,81104904 <__mulsf3+0x304>
811048f4:	988003cc 	andi	r2,r19,15
811048f8:	01000104 	movi	r4,4
811048fc:	11000126 	beq	r2,r4,81104904 <__mulsf3+0x304>
81104900:	9927883a 	add	r19,r19,r4
81104904:	9882002c 	andhi	r2,r19,2048
81104908:	10000426 	beq	r2,zero,8110491c <__mulsf3+0x31c>
8110490c:	00be0034 	movhi	r2,63488
81104910:	10bfffc4 	addi	r2,r2,-1
81104914:	80c02004 	addi	r3,r16,128
81104918:	98a6703a 	and	r19,r19,r2
8110491c:	00803f84 	movi	r2,254
81104920:	10ffa916 	blt	r2,r3,811047c8 <__reset+0xfb0e47c8>
81104924:	980891ba 	slli	r4,r19,6
81104928:	a829883a 	mov	r20,r21
8110492c:	2008d27a 	srli	r4,r4,9
81104930:	003f8606 	br	8110474c <__reset+0xfb0e474c>
81104934:	9080102c 	andhi	r2,r18,64
81104938:	10000826 	beq	r2,zero,8110495c <__mulsf3+0x35c>
8110493c:	9880102c 	andhi	r2,r19,64
81104940:	1000061e 	bne	r2,zero,8110495c <__mulsf3+0x35c>
81104944:	00802034 	movhi	r2,128
81104948:	99001034 	orhi	r4,r19,64
8110494c:	10bfffc4 	addi	r2,r2,-1
81104950:	b029883a 	mov	r20,r22
81104954:	2088703a 	and	r4,r4,r2
81104958:	003fba06 	br	81104844 <__reset+0xfb0e4844>
8110495c:	00802034 	movhi	r2,128
81104960:	91001034 	orhi	r4,r18,64
81104964:	10bfffc4 	addi	r2,r2,-1
81104968:	2088703a 	and	r4,r4,r2
8110496c:	003fb506 	br	81104844 <__reset+0xfb0e4844>
81104970:	00800044 	movi	r2,1
81104974:	10c7c83a 	sub	r3,r2,r3
81104978:	008006c4 	movi	r2,27
8110497c:	10ff7016 	blt	r2,r3,81104740 <__reset+0xfb0e4740>
81104980:	00800804 	movi	r2,32
81104984:	10c5c83a 	sub	r2,r2,r3
81104988:	9884983a 	sll	r2,r19,r2
8110498c:	98c6d83a 	srl	r3,r19,r3
81104990:	1004c03a 	cmpne	r2,r2,zero
81104994:	1884b03a 	or	r2,r3,r2
81104998:	10c001cc 	andi	r3,r2,7
8110499c:	18000426 	beq	r3,zero,811049b0 <__mulsf3+0x3b0>
811049a0:	10c003cc 	andi	r3,r2,15
811049a4:	01000104 	movi	r4,4
811049a8:	19000126 	beq	r3,r4,811049b0 <__mulsf3+0x3b0>
811049ac:	1105883a 	add	r2,r2,r4
811049b0:	10c1002c 	andhi	r3,r2,1024
811049b4:	18000626 	beq	r3,zero,811049d0 <__mulsf3+0x3d0>
811049b8:	a829883a 	mov	r20,r21
811049bc:	00c00044 	movi	r3,1
811049c0:	0009883a 	mov	r4,zero
811049c4:	003f6106 	br	8110474c <__reset+0xfb0e474c>
811049c8:	3821883a 	mov	r16,r7
811049cc:	003fc506 	br	811048e4 <__reset+0xfb0e48e4>
811049d0:	100491ba 	slli	r2,r2,6
811049d4:	a829883a 	mov	r20,r21
811049d8:	0007883a 	mov	r3,zero
811049dc:	1008d27a 	srli	r4,r2,9
811049e0:	003f5a06 	br	8110474c <__reset+0xfb0e474c>
811049e4:	00802034 	movhi	r2,128
811049e8:	99001034 	orhi	r4,r19,64
811049ec:	10bfffc4 	addi	r2,r2,-1
811049f0:	a829883a 	mov	r20,r21
811049f4:	2088703a 	and	r4,r4,r2
811049f8:	003f9206 	br	81104844 <__reset+0xfb0e4844>

811049fc <__floatsisf>:
811049fc:	defffd04 	addi	sp,sp,-12
81104a00:	dfc00215 	stw	ra,8(sp)
81104a04:	dc400115 	stw	r17,4(sp)
81104a08:	dc000015 	stw	r16,0(sp)
81104a0c:	20003526 	beq	r4,zero,81104ae4 <__floatsisf+0xe8>
81104a10:	2021883a 	mov	r16,r4
81104a14:	2022d7fa 	srli	r17,r4,31
81104a18:	20003616 	blt	r4,zero,81104af4 <__floatsisf+0xf8>
81104a1c:	8009883a 	mov	r4,r16
81104a20:	11055e00 	call	811055e0 <__clzsi2>
81104a24:	00c02784 	movi	r3,158
81104a28:	1887c83a 	sub	r3,r3,r2
81104a2c:	01002584 	movi	r4,150
81104a30:	20c01416 	blt	r4,r3,81104a84 <__floatsisf+0x88>
81104a34:	20c9c83a 	sub	r4,r4,r3
81104a38:	8120983a 	sll	r16,r16,r4
81104a3c:	00802034 	movhi	r2,128
81104a40:	10bfffc4 	addi	r2,r2,-1
81104a44:	8809883a 	mov	r4,r17
81104a48:	80a0703a 	and	r16,r16,r2
81104a4c:	18803fcc 	andi	r2,r3,255
81104a50:	100695fa 	slli	r3,r2,23
81104a54:	20803fcc 	andi	r2,r4,255
81104a58:	100897fa 	slli	r4,r2,31
81104a5c:	00802034 	movhi	r2,128
81104a60:	10bfffc4 	addi	r2,r2,-1
81104a64:	8084703a 	and	r2,r16,r2
81104a68:	10c4b03a 	or	r2,r2,r3
81104a6c:	1104b03a 	or	r2,r2,r4
81104a70:	dfc00217 	ldw	ra,8(sp)
81104a74:	dc400117 	ldw	r17,4(sp)
81104a78:	dc000017 	ldw	r16,0(sp)
81104a7c:	dec00304 	addi	sp,sp,12
81104a80:	f800283a 	ret
81104a84:	01002644 	movi	r4,153
81104a88:	20c01c16 	blt	r4,r3,81104afc <__floatsisf+0x100>
81104a8c:	20c9c83a 	sub	r4,r4,r3
81104a90:	8120983a 	sll	r16,r16,r4
81104a94:	013f0034 	movhi	r4,64512
81104a98:	213fffc4 	addi	r4,r4,-1
81104a9c:	814001cc 	andi	r5,r16,7
81104aa0:	8108703a 	and	r4,r16,r4
81104aa4:	28000426 	beq	r5,zero,81104ab8 <__floatsisf+0xbc>
81104aa8:	840003cc 	andi	r16,r16,15
81104aac:	01400104 	movi	r5,4
81104ab0:	81400126 	beq	r16,r5,81104ab8 <__floatsisf+0xbc>
81104ab4:	2149883a 	add	r4,r4,r5
81104ab8:	2141002c 	andhi	r5,r4,1024
81104abc:	28000526 	beq	r5,zero,81104ad4 <__floatsisf+0xd8>
81104ac0:	00c027c4 	movi	r3,159
81104ac4:	1887c83a 	sub	r3,r3,r2
81104ac8:	00bf0034 	movhi	r2,64512
81104acc:	10bfffc4 	addi	r2,r2,-1
81104ad0:	2088703a 	and	r4,r4,r2
81104ad4:	202091ba 	slli	r16,r4,6
81104ad8:	8809883a 	mov	r4,r17
81104adc:	8020d27a 	srli	r16,r16,9
81104ae0:	003fda06 	br	81104a4c <__reset+0xfb0e4a4c>
81104ae4:	0009883a 	mov	r4,zero
81104ae8:	0007883a 	mov	r3,zero
81104aec:	0021883a 	mov	r16,zero
81104af0:	003fd606 	br	81104a4c <__reset+0xfb0e4a4c>
81104af4:	0121c83a 	sub	r16,zero,r4
81104af8:	003fc806 	br	81104a1c <__reset+0xfb0e4a1c>
81104afc:	01002e44 	movi	r4,185
81104b00:	20c9c83a 	sub	r4,r4,r3
81104b04:	01400144 	movi	r5,5
81104b08:	8108983a 	sll	r4,r16,r4
81104b0c:	288bc83a 	sub	r5,r5,r2
81104b10:	8160d83a 	srl	r16,r16,r5
81104b14:	2008c03a 	cmpne	r4,r4,zero
81104b18:	8120b03a 	or	r16,r16,r4
81104b1c:	003fdd06 	br	81104a94 <__reset+0xfb0e4a94>

81104b20 <__floatunsisf>:
81104b20:	defffe04 	addi	sp,sp,-8
81104b24:	dfc00115 	stw	ra,4(sp)
81104b28:	dc000015 	stw	r16,0(sp)
81104b2c:	20002c26 	beq	r4,zero,81104be0 <__floatunsisf+0xc0>
81104b30:	2021883a 	mov	r16,r4
81104b34:	11055e00 	call	811055e0 <__clzsi2>
81104b38:	00c02784 	movi	r3,158
81104b3c:	1887c83a 	sub	r3,r3,r2
81104b40:	01002584 	movi	r4,150
81104b44:	20c00f16 	blt	r4,r3,81104b84 <__floatunsisf+0x64>
81104b48:	20c9c83a 	sub	r4,r4,r3
81104b4c:	8108983a 	sll	r4,r16,r4
81104b50:	00802034 	movhi	r2,128
81104b54:	10bfffc4 	addi	r2,r2,-1
81104b58:	2088703a 	and	r4,r4,r2
81104b5c:	18803fcc 	andi	r2,r3,255
81104b60:	100695fa 	slli	r3,r2,23
81104b64:	00802034 	movhi	r2,128
81104b68:	10bfffc4 	addi	r2,r2,-1
81104b6c:	2084703a 	and	r2,r4,r2
81104b70:	10c4b03a 	or	r2,r2,r3
81104b74:	dfc00117 	ldw	ra,4(sp)
81104b78:	dc000017 	ldw	r16,0(sp)
81104b7c:	dec00204 	addi	sp,sp,8
81104b80:	f800283a 	ret
81104b84:	01002644 	movi	r4,153
81104b88:	20c01816 	blt	r4,r3,81104bec <__floatunsisf+0xcc>
81104b8c:	20c9c83a 	sub	r4,r4,r3
81104b90:	8108983a 	sll	r4,r16,r4
81104b94:	017f0034 	movhi	r5,64512
81104b98:	297fffc4 	addi	r5,r5,-1
81104b9c:	218001cc 	andi	r6,r4,7
81104ba0:	214a703a 	and	r5,r4,r5
81104ba4:	30000426 	beq	r6,zero,81104bb8 <__floatunsisf+0x98>
81104ba8:	210003cc 	andi	r4,r4,15
81104bac:	01800104 	movi	r6,4
81104bb0:	21800126 	beq	r4,r6,81104bb8 <__floatunsisf+0x98>
81104bb4:	298b883a 	add	r5,r5,r6
81104bb8:	2901002c 	andhi	r4,r5,1024
81104bbc:	20000526 	beq	r4,zero,81104bd4 <__floatunsisf+0xb4>
81104bc0:	00c027c4 	movi	r3,159
81104bc4:	1887c83a 	sub	r3,r3,r2
81104bc8:	00bf0034 	movhi	r2,64512
81104bcc:	10bfffc4 	addi	r2,r2,-1
81104bd0:	288a703a 	and	r5,r5,r2
81104bd4:	280891ba 	slli	r4,r5,6
81104bd8:	2008d27a 	srli	r4,r4,9
81104bdc:	003fdf06 	br	81104b5c <__reset+0xfb0e4b5c>
81104be0:	0007883a 	mov	r3,zero
81104be4:	0009883a 	mov	r4,zero
81104be8:	003fdc06 	br	81104b5c <__reset+0xfb0e4b5c>
81104bec:	01402e44 	movi	r5,185
81104bf0:	28cbc83a 	sub	r5,r5,r3
81104bf4:	01000144 	movi	r4,5
81104bf8:	2089c83a 	sub	r4,r4,r2
81104bfc:	814a983a 	sll	r5,r16,r5
81104c00:	8108d83a 	srl	r4,r16,r4
81104c04:	2820c03a 	cmpne	r16,r5,zero
81104c08:	2408b03a 	or	r4,r4,r16
81104c0c:	003fe106 	br	81104b94 <__reset+0xfb0e4b94>

81104c10 <__muldf3>:
81104c10:	defff304 	addi	sp,sp,-52
81104c14:	2804d53a 	srli	r2,r5,20
81104c18:	dd800915 	stw	r22,36(sp)
81104c1c:	282cd7fa 	srli	r22,r5,31
81104c20:	dc000315 	stw	r16,12(sp)
81104c24:	04000434 	movhi	r16,16
81104c28:	dd400815 	stw	r21,32(sp)
81104c2c:	dc800515 	stw	r18,20(sp)
81104c30:	843fffc4 	addi	r16,r16,-1
81104c34:	dfc00c15 	stw	ra,48(sp)
81104c38:	df000b15 	stw	fp,44(sp)
81104c3c:	ddc00a15 	stw	r23,40(sp)
81104c40:	dd000715 	stw	r20,28(sp)
81104c44:	dcc00615 	stw	r19,24(sp)
81104c48:	dc400415 	stw	r17,16(sp)
81104c4c:	1481ffcc 	andi	r18,r2,2047
81104c50:	2c20703a 	and	r16,r5,r16
81104c54:	b02b883a 	mov	r21,r22
81104c58:	b2403fcc 	andi	r9,r22,255
81104c5c:	90006026 	beq	r18,zero,81104de0 <__muldf3+0x1d0>
81104c60:	0081ffc4 	movi	r2,2047
81104c64:	2029883a 	mov	r20,r4
81104c68:	90803626 	beq	r18,r2,81104d44 <__muldf3+0x134>
81104c6c:	80800434 	orhi	r2,r16,16
81104c70:	100490fa 	slli	r2,r2,3
81104c74:	2020d77a 	srli	r16,r4,29
81104c78:	202890fa 	slli	r20,r4,3
81104c7c:	94bf0044 	addi	r18,r18,-1023
81104c80:	80a0b03a 	or	r16,r16,r2
81104c84:	0027883a 	mov	r19,zero
81104c88:	0039883a 	mov	fp,zero
81104c8c:	3804d53a 	srli	r2,r7,20
81104c90:	382ed7fa 	srli	r23,r7,31
81104c94:	04400434 	movhi	r17,16
81104c98:	8c7fffc4 	addi	r17,r17,-1
81104c9c:	1081ffcc 	andi	r2,r2,2047
81104ca0:	3011883a 	mov	r8,r6
81104ca4:	3c62703a 	and	r17,r7,r17
81104ca8:	ba803fcc 	andi	r10,r23,255
81104cac:	10006d26 	beq	r2,zero,81104e64 <__muldf3+0x254>
81104cb0:	00c1ffc4 	movi	r3,2047
81104cb4:	10c06526 	beq	r2,r3,81104e4c <__muldf3+0x23c>
81104cb8:	88c00434 	orhi	r3,r17,16
81104cbc:	180690fa 	slli	r3,r3,3
81104cc0:	3022d77a 	srli	r17,r6,29
81104cc4:	301090fa 	slli	r8,r6,3
81104cc8:	10bf0044 	addi	r2,r2,-1023
81104ccc:	88e2b03a 	or	r17,r17,r3
81104cd0:	000b883a 	mov	r5,zero
81104cd4:	9085883a 	add	r2,r18,r2
81104cd8:	2cc8b03a 	or	r4,r5,r19
81104cdc:	00c003c4 	movi	r3,15
81104ce0:	bdacf03a 	xor	r22,r23,r22
81104ce4:	12c00044 	addi	r11,r2,1
81104ce8:	19009936 	bltu	r3,r4,81104f50 <__muldf3+0x340>
81104cec:	200890ba 	slli	r4,r4,2
81104cf0:	00e04434 	movhi	r3,33040
81104cf4:	18d34104 	addi	r3,r3,19716
81104cf8:	20c9883a 	add	r4,r4,r3
81104cfc:	20c00017 	ldw	r3,0(r4)
81104d00:	1800683a 	jmp	r3
81104d04:	81104f50 	cmplti	r4,r16,16701
81104d08:	81104d64 	muli	r4,r16,16693
81104d0c:	81104d64 	muli	r4,r16,16693
81104d10:	81104d60 	cmpeqi	r4,r16,16693
81104d14:	81104f2c 	andhi	r4,r16,16700
81104d18:	81104f2c 	andhi	r4,r16,16700
81104d1c:	81104f14 	ori	r4,r16,16700
81104d20:	81104d60 	cmpeqi	r4,r16,16693
81104d24:	81104f2c 	andhi	r4,r16,16700
81104d28:	81104f14 	ori	r4,r16,16700
81104d2c:	81104f2c 	andhi	r4,r16,16700
81104d30:	81104d60 	cmpeqi	r4,r16,16693
81104d34:	81104f3c 	xorhi	r4,r16,16700
81104d38:	81104f3c 	xorhi	r4,r16,16700
81104d3c:	81104f3c 	xorhi	r4,r16,16700
81104d40:	81105158 	cmpnei	r4,r16,16709
81104d44:	2404b03a 	or	r2,r4,r16
81104d48:	10006f1e 	bne	r2,zero,81104f08 <__muldf3+0x2f8>
81104d4c:	04c00204 	movi	r19,8
81104d50:	0021883a 	mov	r16,zero
81104d54:	0029883a 	mov	r20,zero
81104d58:	07000084 	movi	fp,2
81104d5c:	003fcb06 	br	81104c8c <__reset+0xfb0e4c8c>
81104d60:	502d883a 	mov	r22,r10
81104d64:	00800084 	movi	r2,2
81104d68:	28805726 	beq	r5,r2,81104ec8 <__muldf3+0x2b8>
81104d6c:	008000c4 	movi	r2,3
81104d70:	28816626 	beq	r5,r2,8110530c <__muldf3+0x6fc>
81104d74:	00800044 	movi	r2,1
81104d78:	2881411e 	bne	r5,r2,81105280 <__muldf3+0x670>
81104d7c:	b02b883a 	mov	r21,r22
81104d80:	0005883a 	mov	r2,zero
81104d84:	000b883a 	mov	r5,zero
81104d88:	0029883a 	mov	r20,zero
81104d8c:	1004953a 	slli	r2,r2,20
81104d90:	a8c03fcc 	andi	r3,r21,255
81104d94:	04400434 	movhi	r17,16
81104d98:	8c7fffc4 	addi	r17,r17,-1
81104d9c:	180697fa 	slli	r3,r3,31
81104da0:	2c4a703a 	and	r5,r5,r17
81104da4:	288ab03a 	or	r5,r5,r2
81104da8:	28c6b03a 	or	r3,r5,r3
81104dac:	a005883a 	mov	r2,r20
81104db0:	dfc00c17 	ldw	ra,48(sp)
81104db4:	df000b17 	ldw	fp,44(sp)
81104db8:	ddc00a17 	ldw	r23,40(sp)
81104dbc:	dd800917 	ldw	r22,36(sp)
81104dc0:	dd400817 	ldw	r21,32(sp)
81104dc4:	dd000717 	ldw	r20,28(sp)
81104dc8:	dcc00617 	ldw	r19,24(sp)
81104dcc:	dc800517 	ldw	r18,20(sp)
81104dd0:	dc400417 	ldw	r17,16(sp)
81104dd4:	dc000317 	ldw	r16,12(sp)
81104dd8:	dec00d04 	addi	sp,sp,52
81104ddc:	f800283a 	ret
81104de0:	2404b03a 	or	r2,r4,r16
81104de4:	2027883a 	mov	r19,r4
81104de8:	10004226 	beq	r2,zero,81104ef4 <__muldf3+0x2e4>
81104dec:	8000fc26 	beq	r16,zero,811051e0 <__muldf3+0x5d0>
81104df0:	8009883a 	mov	r4,r16
81104df4:	d9800215 	stw	r6,8(sp)
81104df8:	d9c00015 	stw	r7,0(sp)
81104dfc:	da400115 	stw	r9,4(sp)
81104e00:	11055e00 	call	811055e0 <__clzsi2>
81104e04:	d9800217 	ldw	r6,8(sp)
81104e08:	d9c00017 	ldw	r7,0(sp)
81104e0c:	da400117 	ldw	r9,4(sp)
81104e10:	113ffd44 	addi	r4,r2,-11
81104e14:	00c00704 	movi	r3,28
81104e18:	1900ed16 	blt	r3,r4,811051d0 <__muldf3+0x5c0>
81104e1c:	00c00744 	movi	r3,29
81104e20:	147ffe04 	addi	r17,r2,-8
81104e24:	1907c83a 	sub	r3,r3,r4
81104e28:	8460983a 	sll	r16,r16,r17
81104e2c:	98c6d83a 	srl	r3,r19,r3
81104e30:	9c68983a 	sll	r20,r19,r17
81104e34:	1c20b03a 	or	r16,r3,r16
81104e38:	1080fcc4 	addi	r2,r2,1011
81104e3c:	00a5c83a 	sub	r18,zero,r2
81104e40:	0027883a 	mov	r19,zero
81104e44:	0039883a 	mov	fp,zero
81104e48:	003f9006 	br	81104c8c <__reset+0xfb0e4c8c>
81104e4c:	3446b03a 	or	r3,r6,r17
81104e50:	1800261e 	bne	r3,zero,81104eec <__muldf3+0x2dc>
81104e54:	0023883a 	mov	r17,zero
81104e58:	0011883a 	mov	r8,zero
81104e5c:	01400084 	movi	r5,2
81104e60:	003f9c06 	br	81104cd4 <__reset+0xfb0e4cd4>
81104e64:	3446b03a 	or	r3,r6,r17
81104e68:	18001c26 	beq	r3,zero,81104edc <__muldf3+0x2cc>
81104e6c:	8800ce26 	beq	r17,zero,811051a8 <__muldf3+0x598>
81104e70:	8809883a 	mov	r4,r17
81104e74:	d9800215 	stw	r6,8(sp)
81104e78:	da400115 	stw	r9,4(sp)
81104e7c:	da800015 	stw	r10,0(sp)
81104e80:	11055e00 	call	811055e0 <__clzsi2>
81104e84:	d9800217 	ldw	r6,8(sp)
81104e88:	da400117 	ldw	r9,4(sp)
81104e8c:	da800017 	ldw	r10,0(sp)
81104e90:	113ffd44 	addi	r4,r2,-11
81104e94:	00c00704 	movi	r3,28
81104e98:	1900bf16 	blt	r3,r4,81105198 <__muldf3+0x588>
81104e9c:	00c00744 	movi	r3,29
81104ea0:	123ffe04 	addi	r8,r2,-8
81104ea4:	1907c83a 	sub	r3,r3,r4
81104ea8:	8a22983a 	sll	r17,r17,r8
81104eac:	30c6d83a 	srl	r3,r6,r3
81104eb0:	3210983a 	sll	r8,r6,r8
81104eb4:	1c62b03a 	or	r17,r3,r17
81104eb8:	1080fcc4 	addi	r2,r2,1011
81104ebc:	0085c83a 	sub	r2,zero,r2
81104ec0:	000b883a 	mov	r5,zero
81104ec4:	003f8306 	br	81104cd4 <__reset+0xfb0e4cd4>
81104ec8:	b02b883a 	mov	r21,r22
81104ecc:	0081ffc4 	movi	r2,2047
81104ed0:	000b883a 	mov	r5,zero
81104ed4:	0029883a 	mov	r20,zero
81104ed8:	003fac06 	br	81104d8c <__reset+0xfb0e4d8c>
81104edc:	0023883a 	mov	r17,zero
81104ee0:	0011883a 	mov	r8,zero
81104ee4:	01400044 	movi	r5,1
81104ee8:	003f7a06 	br	81104cd4 <__reset+0xfb0e4cd4>
81104eec:	014000c4 	movi	r5,3
81104ef0:	003f7806 	br	81104cd4 <__reset+0xfb0e4cd4>
81104ef4:	04c00104 	movi	r19,4
81104ef8:	0021883a 	mov	r16,zero
81104efc:	0029883a 	mov	r20,zero
81104f00:	07000044 	movi	fp,1
81104f04:	003f6106 	br	81104c8c <__reset+0xfb0e4c8c>
81104f08:	04c00304 	movi	r19,12
81104f0c:	070000c4 	movi	fp,3
81104f10:	003f5e06 	br	81104c8c <__reset+0xfb0e4c8c>
81104f14:	01400434 	movhi	r5,16
81104f18:	002b883a 	mov	r21,zero
81104f1c:	297fffc4 	addi	r5,r5,-1
81104f20:	053fffc4 	movi	r20,-1
81104f24:	0081ffc4 	movi	r2,2047
81104f28:	003f9806 	br	81104d8c <__reset+0xfb0e4d8c>
81104f2c:	8023883a 	mov	r17,r16
81104f30:	a011883a 	mov	r8,r20
81104f34:	e00b883a 	mov	r5,fp
81104f38:	003f8a06 	br	81104d64 <__reset+0xfb0e4d64>
81104f3c:	8023883a 	mov	r17,r16
81104f40:	a011883a 	mov	r8,r20
81104f44:	482d883a 	mov	r22,r9
81104f48:	e00b883a 	mov	r5,fp
81104f4c:	003f8506 	br	81104d64 <__reset+0xfb0e4d64>
81104f50:	a00ad43a 	srli	r5,r20,16
81104f54:	401ad43a 	srli	r13,r8,16
81104f58:	a53fffcc 	andi	r20,r20,65535
81104f5c:	423fffcc 	andi	r8,r8,65535
81104f60:	4519383a 	mul	r12,r8,r20
81104f64:	4147383a 	mul	r3,r8,r5
81104f68:	6d09383a 	mul	r4,r13,r20
81104f6c:	600cd43a 	srli	r6,r12,16
81104f70:	2b5d383a 	mul	r14,r5,r13
81104f74:	20c9883a 	add	r4,r4,r3
81104f78:	310d883a 	add	r6,r6,r4
81104f7c:	30c0022e 	bgeu	r6,r3,81104f88 <__muldf3+0x378>
81104f80:	00c00074 	movhi	r3,1
81104f84:	70dd883a 	add	r14,r14,r3
81104f88:	8826d43a 	srli	r19,r17,16
81104f8c:	8bffffcc 	andi	r15,r17,65535
81104f90:	7d23383a 	mul	r17,r15,r20
81104f94:	7949383a 	mul	r4,r15,r5
81104f98:	9d29383a 	mul	r20,r19,r20
81104f9c:	8814d43a 	srli	r10,r17,16
81104fa0:	3012943a 	slli	r9,r6,16
81104fa4:	a129883a 	add	r20,r20,r4
81104fa8:	633fffcc 	andi	r12,r12,65535
81104fac:	5515883a 	add	r10,r10,r20
81104fb0:	3006d43a 	srli	r3,r6,16
81104fb4:	4b13883a 	add	r9,r9,r12
81104fb8:	2ccb383a 	mul	r5,r5,r19
81104fbc:	5100022e 	bgeu	r10,r4,81104fc8 <__muldf3+0x3b8>
81104fc0:	01000074 	movhi	r4,1
81104fc4:	290b883a 	add	r5,r5,r4
81104fc8:	802ad43a 	srli	r21,r16,16
81104fcc:	843fffcc 	andi	r16,r16,65535
81104fd0:	440d383a 	mul	r6,r8,r16
81104fd4:	4565383a 	mul	r18,r8,r21
81104fd8:	8349383a 	mul	r4,r16,r13
81104fdc:	500e943a 	slli	r7,r10,16
81104fe0:	3010d43a 	srli	r8,r6,16
81104fe4:	5028d43a 	srli	r20,r10,16
81104fe8:	2489883a 	add	r4,r4,r18
81104fec:	8abfffcc 	andi	r10,r17,65535
81104ff0:	3a95883a 	add	r10,r7,r10
81104ff4:	4119883a 	add	r12,r8,r4
81104ff8:	a169883a 	add	r20,r20,r5
81104ffc:	1a87883a 	add	r3,r3,r10
81105000:	6d5b383a 	mul	r13,r13,r21
81105004:	6480022e 	bgeu	r12,r18,81105010 <__muldf3+0x400>
81105008:	01000074 	movhi	r4,1
8110500c:	691b883a 	add	r13,r13,r4
81105010:	7c25383a 	mul	r18,r15,r16
81105014:	7d4b383a 	mul	r5,r15,r21
81105018:	84cf383a 	mul	r7,r16,r19
8110501c:	901ed43a 	srli	r15,r18,16
81105020:	6008d43a 	srli	r4,r12,16
81105024:	6010943a 	slli	r8,r12,16
81105028:	394f883a 	add	r7,r7,r5
8110502c:	333fffcc 	andi	r12,r6,65535
81105030:	79df883a 	add	r15,r15,r7
81105034:	235b883a 	add	r13,r4,r13
81105038:	9d63383a 	mul	r17,r19,r21
8110503c:	4309883a 	add	r4,r8,r12
81105040:	7940022e 	bgeu	r15,r5,8110504c <__muldf3+0x43c>
81105044:	01400074 	movhi	r5,1
81105048:	8963883a 	add	r17,r17,r5
8110504c:	780a943a 	slli	r5,r15,16
81105050:	91bfffcc 	andi	r6,r18,65535
81105054:	70c7883a 	add	r3,r14,r3
81105058:	298d883a 	add	r6,r5,r6
8110505c:	1a8f803a 	cmpltu	r7,r3,r10
81105060:	350b883a 	add	r5,r6,r20
81105064:	20c7883a 	add	r3,r4,r3
81105068:	3955883a 	add	r10,r7,r5
8110506c:	1909803a 	cmpltu	r4,r3,r4
81105070:	6a91883a 	add	r8,r13,r10
81105074:	780cd43a 	srli	r6,r15,16
81105078:	2219883a 	add	r12,r4,r8
8110507c:	2d0b803a 	cmpltu	r5,r5,r20
81105080:	51cf803a 	cmpltu	r7,r10,r7
81105084:	29ceb03a 	or	r7,r5,r7
81105088:	4351803a 	cmpltu	r8,r8,r13
8110508c:	610b803a 	cmpltu	r5,r12,r4
81105090:	4148b03a 	or	r4,r8,r5
81105094:	398f883a 	add	r7,r7,r6
81105098:	3909883a 	add	r4,r7,r4
8110509c:	1810927a 	slli	r8,r3,9
811050a0:	2449883a 	add	r4,r4,r17
811050a4:	2008927a 	slli	r4,r4,9
811050a8:	6022d5fa 	srli	r17,r12,23
811050ac:	1806d5fa 	srli	r3,r3,23
811050b0:	4252b03a 	or	r9,r8,r9
811050b4:	600a927a 	slli	r5,r12,9
811050b8:	4810c03a 	cmpne	r8,r9,zero
811050bc:	2462b03a 	or	r17,r4,r17
811050c0:	40c6b03a 	or	r3,r8,r3
811050c4:	8900402c 	andhi	r4,r17,256
811050c8:	1950b03a 	or	r8,r3,r5
811050cc:	20000726 	beq	r4,zero,811050ec <__muldf3+0x4dc>
811050d0:	4006d07a 	srli	r3,r8,1
811050d4:	880497fa 	slli	r2,r17,31
811050d8:	4200004c 	andi	r8,r8,1
811050dc:	8822d07a 	srli	r17,r17,1
811050e0:	1a10b03a 	or	r8,r3,r8
811050e4:	1210b03a 	or	r8,r2,r8
811050e8:	5805883a 	mov	r2,r11
811050ec:	1140ffc4 	addi	r5,r2,1023
811050f0:	0140440e 	bge	zero,r5,81105204 <__muldf3+0x5f4>
811050f4:	40c001cc 	andi	r3,r8,7
811050f8:	18000726 	beq	r3,zero,81105118 <__muldf3+0x508>
811050fc:	40c003cc 	andi	r3,r8,15
81105100:	01000104 	movi	r4,4
81105104:	19000426 	beq	r3,r4,81105118 <__muldf3+0x508>
81105108:	4107883a 	add	r3,r8,r4
8110510c:	1a11803a 	cmpltu	r8,r3,r8
81105110:	8a23883a 	add	r17,r17,r8
81105114:	1811883a 	mov	r8,r3
81105118:	88c0402c 	andhi	r3,r17,256
8110511c:	18000426 	beq	r3,zero,81105130 <__muldf3+0x520>
81105120:	11410004 	addi	r5,r2,1024
81105124:	00bfc034 	movhi	r2,65280
81105128:	10bfffc4 	addi	r2,r2,-1
8110512c:	88a2703a 	and	r17,r17,r2
81105130:	0081ff84 	movi	r2,2046
81105134:	117f6416 	blt	r2,r5,81104ec8 <__reset+0xfb0e4ec8>
81105138:	8828977a 	slli	r20,r17,29
8110513c:	4010d0fa 	srli	r8,r8,3
81105140:	8822927a 	slli	r17,r17,9
81105144:	2881ffcc 	andi	r2,r5,2047
81105148:	a228b03a 	or	r20,r20,r8
8110514c:	880ad33a 	srli	r5,r17,12
81105150:	b02b883a 	mov	r21,r22
81105154:	003f0d06 	br	81104d8c <__reset+0xfb0e4d8c>
81105158:	8080022c 	andhi	r2,r16,8
8110515c:	10000926 	beq	r2,zero,81105184 <__muldf3+0x574>
81105160:	8880022c 	andhi	r2,r17,8
81105164:	1000071e 	bne	r2,zero,81105184 <__muldf3+0x574>
81105168:	00800434 	movhi	r2,16
8110516c:	89400234 	orhi	r5,r17,8
81105170:	10bfffc4 	addi	r2,r2,-1
81105174:	b82b883a 	mov	r21,r23
81105178:	288a703a 	and	r5,r5,r2
8110517c:	4029883a 	mov	r20,r8
81105180:	003f6806 	br	81104f24 <__reset+0xfb0e4f24>
81105184:	00800434 	movhi	r2,16
81105188:	81400234 	orhi	r5,r16,8
8110518c:	10bfffc4 	addi	r2,r2,-1
81105190:	288a703a 	and	r5,r5,r2
81105194:	003f6306 	br	81104f24 <__reset+0xfb0e4f24>
81105198:	147ff604 	addi	r17,r2,-40
8110519c:	3462983a 	sll	r17,r6,r17
811051a0:	0011883a 	mov	r8,zero
811051a4:	003f4406 	br	81104eb8 <__reset+0xfb0e4eb8>
811051a8:	3009883a 	mov	r4,r6
811051ac:	d9800215 	stw	r6,8(sp)
811051b0:	da400115 	stw	r9,4(sp)
811051b4:	da800015 	stw	r10,0(sp)
811051b8:	11055e00 	call	811055e0 <__clzsi2>
811051bc:	10800804 	addi	r2,r2,32
811051c0:	da800017 	ldw	r10,0(sp)
811051c4:	da400117 	ldw	r9,4(sp)
811051c8:	d9800217 	ldw	r6,8(sp)
811051cc:	003f3006 	br	81104e90 <__reset+0xfb0e4e90>
811051d0:	143ff604 	addi	r16,r2,-40
811051d4:	9c20983a 	sll	r16,r19,r16
811051d8:	0029883a 	mov	r20,zero
811051dc:	003f1606 	br	81104e38 <__reset+0xfb0e4e38>
811051e0:	d9800215 	stw	r6,8(sp)
811051e4:	d9c00015 	stw	r7,0(sp)
811051e8:	da400115 	stw	r9,4(sp)
811051ec:	11055e00 	call	811055e0 <__clzsi2>
811051f0:	10800804 	addi	r2,r2,32
811051f4:	da400117 	ldw	r9,4(sp)
811051f8:	d9c00017 	ldw	r7,0(sp)
811051fc:	d9800217 	ldw	r6,8(sp)
81105200:	003f0306 	br	81104e10 <__reset+0xfb0e4e10>
81105204:	00c00044 	movi	r3,1
81105208:	1947c83a 	sub	r3,r3,r5
8110520c:	00800e04 	movi	r2,56
81105210:	10feda16 	blt	r2,r3,81104d7c <__reset+0xfb0e4d7c>
81105214:	008007c4 	movi	r2,31
81105218:	10c01b16 	blt	r2,r3,81105288 <__muldf3+0x678>
8110521c:	00800804 	movi	r2,32
81105220:	10c5c83a 	sub	r2,r2,r3
81105224:	888a983a 	sll	r5,r17,r2
81105228:	40c8d83a 	srl	r4,r8,r3
8110522c:	4084983a 	sll	r2,r8,r2
81105230:	88e2d83a 	srl	r17,r17,r3
81105234:	2906b03a 	or	r3,r5,r4
81105238:	1004c03a 	cmpne	r2,r2,zero
8110523c:	1886b03a 	or	r3,r3,r2
81105240:	188001cc 	andi	r2,r3,7
81105244:	10000726 	beq	r2,zero,81105264 <__muldf3+0x654>
81105248:	188003cc 	andi	r2,r3,15
8110524c:	01000104 	movi	r4,4
81105250:	11000426 	beq	r2,r4,81105264 <__muldf3+0x654>
81105254:	1805883a 	mov	r2,r3
81105258:	10c00104 	addi	r3,r2,4
8110525c:	1885803a 	cmpltu	r2,r3,r2
81105260:	88a3883a 	add	r17,r17,r2
81105264:	8880202c 	andhi	r2,r17,128
81105268:	10001c26 	beq	r2,zero,811052dc <__muldf3+0x6cc>
8110526c:	b02b883a 	mov	r21,r22
81105270:	00800044 	movi	r2,1
81105274:	000b883a 	mov	r5,zero
81105278:	0029883a 	mov	r20,zero
8110527c:	003ec306 	br	81104d8c <__reset+0xfb0e4d8c>
81105280:	5805883a 	mov	r2,r11
81105284:	003f9906 	br	811050ec <__reset+0xfb0e50ec>
81105288:	00bff844 	movi	r2,-31
8110528c:	1145c83a 	sub	r2,r2,r5
81105290:	8888d83a 	srl	r4,r17,r2
81105294:	00800804 	movi	r2,32
81105298:	18801a26 	beq	r3,r2,81105304 <__muldf3+0x6f4>
8110529c:	00801004 	movi	r2,64
811052a0:	10c5c83a 	sub	r2,r2,r3
811052a4:	8884983a 	sll	r2,r17,r2
811052a8:	1204b03a 	or	r2,r2,r8
811052ac:	1004c03a 	cmpne	r2,r2,zero
811052b0:	2084b03a 	or	r2,r4,r2
811052b4:	144001cc 	andi	r17,r2,7
811052b8:	88000d1e 	bne	r17,zero,811052f0 <__muldf3+0x6e0>
811052bc:	000b883a 	mov	r5,zero
811052c0:	1028d0fa 	srli	r20,r2,3
811052c4:	b02b883a 	mov	r21,r22
811052c8:	0005883a 	mov	r2,zero
811052cc:	a468b03a 	or	r20,r20,r17
811052d0:	003eae06 	br	81104d8c <__reset+0xfb0e4d8c>
811052d4:	1007883a 	mov	r3,r2
811052d8:	0023883a 	mov	r17,zero
811052dc:	880a927a 	slli	r5,r17,9
811052e0:	1805883a 	mov	r2,r3
811052e4:	8822977a 	slli	r17,r17,29
811052e8:	280ad33a 	srli	r5,r5,12
811052ec:	003ff406 	br	811052c0 <__reset+0xfb0e52c0>
811052f0:	10c003cc 	andi	r3,r2,15
811052f4:	01000104 	movi	r4,4
811052f8:	193ff626 	beq	r3,r4,811052d4 <__reset+0xfb0e52d4>
811052fc:	0023883a 	mov	r17,zero
81105300:	003fd506 	br	81105258 <__reset+0xfb0e5258>
81105304:	0005883a 	mov	r2,zero
81105308:	003fe706 	br	811052a8 <__reset+0xfb0e52a8>
8110530c:	00800434 	movhi	r2,16
81105310:	89400234 	orhi	r5,r17,8
81105314:	10bfffc4 	addi	r2,r2,-1
81105318:	b02b883a 	mov	r21,r22
8110531c:	288a703a 	and	r5,r5,r2
81105320:	4029883a 	mov	r20,r8
81105324:	003eff06 	br	81104f24 <__reset+0xfb0e4f24>

81105328 <__extendsfdf2>:
81105328:	200ad5fa 	srli	r5,r4,23
8110532c:	defffd04 	addi	sp,sp,-12
81105330:	dc400115 	stw	r17,4(sp)
81105334:	29403fcc 	andi	r5,r5,255
81105338:	29800044 	addi	r6,r5,1
8110533c:	04402034 	movhi	r17,128
81105340:	dc000015 	stw	r16,0(sp)
81105344:	8c7fffc4 	addi	r17,r17,-1
81105348:	dfc00215 	stw	ra,8(sp)
8110534c:	31803fcc 	andi	r6,r6,255
81105350:	00800044 	movi	r2,1
81105354:	8922703a 	and	r17,r17,r4
81105358:	2020d7fa 	srli	r16,r4,31
8110535c:	1180110e 	bge	r2,r6,811053a4 <__extendsfdf2+0x7c>
81105360:	880cd0fa 	srli	r6,r17,3
81105364:	8822977a 	slli	r17,r17,29
81105368:	2940e004 	addi	r5,r5,896
8110536c:	2941ffcc 	andi	r5,r5,2047
81105370:	2804953a 	slli	r2,r5,20
81105374:	01400434 	movhi	r5,16
81105378:	800697fa 	slli	r3,r16,31
8110537c:	297fffc4 	addi	r5,r5,-1
81105380:	314a703a 	and	r5,r6,r5
81105384:	288ab03a 	or	r5,r5,r2
81105388:	28c6b03a 	or	r3,r5,r3
8110538c:	8805883a 	mov	r2,r17
81105390:	dfc00217 	ldw	ra,8(sp)
81105394:	dc400117 	ldw	r17,4(sp)
81105398:	dc000017 	ldw	r16,0(sp)
8110539c:	dec00304 	addi	sp,sp,12
811053a0:	f800283a 	ret
811053a4:	2800111e 	bne	r5,zero,811053ec <__extendsfdf2+0xc4>
811053a8:	88001c26 	beq	r17,zero,8110541c <__extendsfdf2+0xf4>
811053ac:	8809883a 	mov	r4,r17
811053b0:	11055e00 	call	811055e0 <__clzsi2>
811053b4:	00c00284 	movi	r3,10
811053b8:	18801b16 	blt	r3,r2,81105428 <__extendsfdf2+0x100>
811053bc:	018002c4 	movi	r6,11
811053c0:	308dc83a 	sub	r6,r6,r2
811053c4:	11000544 	addi	r4,r2,21
811053c8:	8986d83a 	srl	r3,r17,r6
811053cc:	8922983a 	sll	r17,r17,r4
811053d0:	0180e244 	movi	r6,905
811053d4:	01400434 	movhi	r5,16
811053d8:	3085c83a 	sub	r2,r6,r2
811053dc:	297fffc4 	addi	r5,r5,-1
811053e0:	194c703a 	and	r6,r3,r5
811053e4:	1141ffcc 	andi	r5,r2,2047
811053e8:	003fe006 	br	8110536c <__reset+0xfb0e536c>
811053ec:	88000826 	beq	r17,zero,81105410 <__extendsfdf2+0xe8>
811053f0:	880cd0fa 	srli	r6,r17,3
811053f4:	00800434 	movhi	r2,16
811053f8:	10bfffc4 	addi	r2,r2,-1
811053fc:	31800234 	orhi	r6,r6,8
81105400:	8822977a 	slli	r17,r17,29
81105404:	308c703a 	and	r6,r6,r2
81105408:	0141ffc4 	movi	r5,2047
8110540c:	003fd706 	br	8110536c <__reset+0xfb0e536c>
81105410:	0141ffc4 	movi	r5,2047
81105414:	000d883a 	mov	r6,zero
81105418:	003fd406 	br	8110536c <__reset+0xfb0e536c>
8110541c:	000b883a 	mov	r5,zero
81105420:	000d883a 	mov	r6,zero
81105424:	003fd106 	br	8110536c <__reset+0xfb0e536c>
81105428:	11bffd44 	addi	r6,r2,-11
8110542c:	8986983a 	sll	r3,r17,r6
81105430:	0023883a 	mov	r17,zero
81105434:	003fe606 	br	811053d0 <__reset+0xfb0e53d0>

81105438 <__truncdfsf2>:
81105438:	2810d53a 	srli	r8,r5,20
8110543c:	01c00434 	movhi	r7,16
81105440:	39ffffc4 	addi	r7,r7,-1
81105444:	29ce703a 	and	r7,r5,r7
81105448:	4201ffcc 	andi	r8,r8,2047
8110544c:	380e90fa 	slli	r7,r7,3
81105450:	200cd77a 	srli	r6,r4,29
81105454:	42400044 	addi	r9,r8,1
81105458:	4a41ffcc 	andi	r9,r9,2047
8110545c:	00c00044 	movi	r3,1
81105460:	280ad7fa 	srli	r5,r5,31
81105464:	31ceb03a 	or	r7,r6,r7
81105468:	200490fa 	slli	r2,r4,3
8110546c:	1a40230e 	bge	r3,r9,811054fc <__truncdfsf2+0xc4>
81105470:	40ff2004 	addi	r3,r8,-896
81105474:	01803f84 	movi	r6,254
81105478:	30c01516 	blt	r6,r3,811054d0 <__truncdfsf2+0x98>
8110547c:	00c0380e 	bge	zero,r3,81105560 <__truncdfsf2+0x128>
81105480:	200c91ba 	slli	r6,r4,6
81105484:	380e90fa 	slli	r7,r7,3
81105488:	1004d77a 	srli	r2,r2,29
8110548c:	300cc03a 	cmpne	r6,r6,zero
81105490:	31ccb03a 	or	r6,r6,r7
81105494:	308cb03a 	or	r6,r6,r2
81105498:	308001cc 	andi	r2,r6,7
8110549c:	10000426 	beq	r2,zero,811054b0 <__truncdfsf2+0x78>
811054a0:	308003cc 	andi	r2,r6,15
811054a4:	01000104 	movi	r4,4
811054a8:	11000126 	beq	r2,r4,811054b0 <__truncdfsf2+0x78>
811054ac:	31800104 	addi	r6,r6,4
811054b0:	3081002c 	andhi	r2,r6,1024
811054b4:	10001626 	beq	r2,zero,81105510 <__truncdfsf2+0xd8>
811054b8:	18c00044 	addi	r3,r3,1
811054bc:	00803fc4 	movi	r2,255
811054c0:	18800326 	beq	r3,r2,811054d0 <__truncdfsf2+0x98>
811054c4:	300c91ba 	slli	r6,r6,6
811054c8:	300cd27a 	srli	r6,r6,9
811054cc:	00000206 	br	811054d8 <__truncdfsf2+0xa0>
811054d0:	00ffffc4 	movi	r3,-1
811054d4:	000d883a 	mov	r6,zero
811054d8:	18c03fcc 	andi	r3,r3,255
811054dc:	180895fa 	slli	r4,r3,23
811054e0:	00c02034 	movhi	r3,128
811054e4:	280a97fa 	slli	r5,r5,31
811054e8:	18ffffc4 	addi	r3,r3,-1
811054ec:	30c6703a 	and	r3,r6,r3
811054f0:	1906b03a 	or	r3,r3,r4
811054f4:	1944b03a 	or	r2,r3,r5
811054f8:	f800283a 	ret
811054fc:	40000b1e 	bne	r8,zero,8110552c <__truncdfsf2+0xf4>
81105500:	388cb03a 	or	r6,r7,r2
81105504:	0007883a 	mov	r3,zero
81105508:	30000426 	beq	r6,zero,8110551c <__truncdfsf2+0xe4>
8110550c:	01800144 	movi	r6,5
81105510:	00803fc4 	movi	r2,255
81105514:	300cd0fa 	srli	r6,r6,3
81105518:	18800a26 	beq	r3,r2,81105544 <__truncdfsf2+0x10c>
8110551c:	00802034 	movhi	r2,128
81105520:	10bfffc4 	addi	r2,r2,-1
81105524:	308c703a 	and	r6,r6,r2
81105528:	003feb06 	br	811054d8 <__reset+0xfb0e54d8>
8110552c:	3888b03a 	or	r4,r7,r2
81105530:	203fe726 	beq	r4,zero,811054d0 <__reset+0xfb0e54d0>
81105534:	380c90fa 	slli	r6,r7,3
81105538:	00c03fc4 	movi	r3,255
8110553c:	31808034 	orhi	r6,r6,512
81105540:	003fd506 	br	81105498 <__reset+0xfb0e5498>
81105544:	303fe226 	beq	r6,zero,811054d0 <__reset+0xfb0e54d0>
81105548:	00802034 	movhi	r2,128
8110554c:	31801034 	orhi	r6,r6,64
81105550:	10bfffc4 	addi	r2,r2,-1
81105554:	00ffffc4 	movi	r3,-1
81105558:	308c703a 	and	r6,r6,r2
8110555c:	003fde06 	br	811054d8 <__reset+0xfb0e54d8>
81105560:	013ffa44 	movi	r4,-23
81105564:	19000e16 	blt	r3,r4,811055a0 <__truncdfsf2+0x168>
81105568:	01000784 	movi	r4,30
8110556c:	20c9c83a 	sub	r4,r4,r3
81105570:	018007c4 	movi	r6,31
81105574:	39c02034 	orhi	r7,r7,128
81105578:	31000b16 	blt	r6,r4,811055a8 <__truncdfsf2+0x170>
8110557c:	423f2084 	addi	r8,r8,-894
81105580:	120c983a 	sll	r6,r2,r8
81105584:	3a0e983a 	sll	r7,r7,r8
81105588:	1104d83a 	srl	r2,r2,r4
8110558c:	300cc03a 	cmpne	r6,r6,zero
81105590:	31ceb03a 	or	r7,r6,r7
81105594:	388cb03a 	or	r6,r7,r2
81105598:	0007883a 	mov	r3,zero
8110559c:	003fbe06 	br	81105498 <__reset+0xfb0e5498>
811055a0:	0007883a 	mov	r3,zero
811055a4:	003fd906 	br	8110550c <__reset+0xfb0e550c>
811055a8:	01bfff84 	movi	r6,-2
811055ac:	30cdc83a 	sub	r6,r6,r3
811055b0:	00c00804 	movi	r3,32
811055b4:	398cd83a 	srl	r6,r7,r6
811055b8:	20c00726 	beq	r4,r3,811055d8 <__truncdfsf2+0x1a0>
811055bc:	423f2884 	addi	r8,r8,-862
811055c0:	3a0e983a 	sll	r7,r7,r8
811055c4:	3884b03a 	or	r2,r7,r2
811055c8:	1004c03a 	cmpne	r2,r2,zero
811055cc:	118cb03a 	or	r6,r2,r6
811055d0:	0007883a 	mov	r3,zero
811055d4:	003fb006 	br	81105498 <__reset+0xfb0e5498>
811055d8:	000f883a 	mov	r7,zero
811055dc:	003ff906 	br	811055c4 <__reset+0xfb0e55c4>

811055e0 <__clzsi2>:
811055e0:	00bfffd4 	movui	r2,65535
811055e4:	11000536 	bltu	r2,r4,811055fc <__clzsi2+0x1c>
811055e8:	00803fc4 	movi	r2,255
811055ec:	11000f36 	bltu	r2,r4,8110562c <__clzsi2+0x4c>
811055f0:	00800804 	movi	r2,32
811055f4:	0007883a 	mov	r3,zero
811055f8:	00000506 	br	81105610 <__clzsi2+0x30>
811055fc:	00804034 	movhi	r2,256
81105600:	10bfffc4 	addi	r2,r2,-1
81105604:	11000c2e 	bgeu	r2,r4,81105638 <__clzsi2+0x58>
81105608:	00800204 	movi	r2,8
8110560c:	00c00604 	movi	r3,24
81105610:	20c8d83a 	srl	r4,r4,r3
81105614:	00e04474 	movhi	r3,33041
81105618:	18dfe2c4 	addi	r3,r3,32651
8110561c:	1909883a 	add	r4,r3,r4
81105620:	20c00003 	ldbu	r3,0(r4)
81105624:	10c5c83a 	sub	r2,r2,r3
81105628:	f800283a 	ret
8110562c:	00800604 	movi	r2,24
81105630:	00c00204 	movi	r3,8
81105634:	003ff606 	br	81105610 <__reset+0xfb0e5610>
81105638:	00800404 	movi	r2,16
8110563c:	1007883a 	mov	r3,r2
81105640:	003ff306 	br	81105610 <__reset+0xfb0e5610>

81105644 <memcpy>:
81105644:	defffd04 	addi	sp,sp,-12
81105648:	dfc00215 	stw	ra,8(sp)
8110564c:	dc400115 	stw	r17,4(sp)
81105650:	dc000015 	stw	r16,0(sp)
81105654:	00c003c4 	movi	r3,15
81105658:	2005883a 	mov	r2,r4
8110565c:	1980452e 	bgeu	r3,r6,81105774 <memcpy+0x130>
81105660:	2906b03a 	or	r3,r5,r4
81105664:	18c000cc 	andi	r3,r3,3
81105668:	1800441e 	bne	r3,zero,8110577c <memcpy+0x138>
8110566c:	347ffc04 	addi	r17,r6,-16
81105670:	8822d13a 	srli	r17,r17,4
81105674:	28c00104 	addi	r3,r5,4
81105678:	23400104 	addi	r13,r4,4
8110567c:	8820913a 	slli	r16,r17,4
81105680:	2b000204 	addi	r12,r5,8
81105684:	22c00204 	addi	r11,r4,8
81105688:	84000504 	addi	r16,r16,20
8110568c:	2a800304 	addi	r10,r5,12
81105690:	22400304 	addi	r9,r4,12
81105694:	2c21883a 	add	r16,r5,r16
81105698:	2811883a 	mov	r8,r5
8110569c:	200f883a 	mov	r7,r4
811056a0:	41000017 	ldw	r4,0(r8)
811056a4:	1fc00017 	ldw	ra,0(r3)
811056a8:	63c00017 	ldw	r15,0(r12)
811056ac:	39000015 	stw	r4,0(r7)
811056b0:	53800017 	ldw	r14,0(r10)
811056b4:	6fc00015 	stw	ra,0(r13)
811056b8:	5bc00015 	stw	r15,0(r11)
811056bc:	4b800015 	stw	r14,0(r9)
811056c0:	18c00404 	addi	r3,r3,16
811056c4:	39c00404 	addi	r7,r7,16
811056c8:	42000404 	addi	r8,r8,16
811056cc:	6b400404 	addi	r13,r13,16
811056d0:	63000404 	addi	r12,r12,16
811056d4:	5ac00404 	addi	r11,r11,16
811056d8:	52800404 	addi	r10,r10,16
811056dc:	4a400404 	addi	r9,r9,16
811056e0:	1c3fef1e 	bne	r3,r16,811056a0 <__reset+0xfb0e56a0>
811056e4:	89c00044 	addi	r7,r17,1
811056e8:	380e913a 	slli	r7,r7,4
811056ec:	310003cc 	andi	r4,r6,15
811056f0:	02c000c4 	movi	r11,3
811056f4:	11c7883a 	add	r3,r2,r7
811056f8:	29cb883a 	add	r5,r5,r7
811056fc:	5900212e 	bgeu	r11,r4,81105784 <memcpy+0x140>
81105700:	1813883a 	mov	r9,r3
81105704:	2811883a 	mov	r8,r5
81105708:	200f883a 	mov	r7,r4
8110570c:	42800017 	ldw	r10,0(r8)
81105710:	4a400104 	addi	r9,r9,4
81105714:	39ffff04 	addi	r7,r7,-4
81105718:	4abfff15 	stw	r10,-4(r9)
8110571c:	42000104 	addi	r8,r8,4
81105720:	59fffa36 	bltu	r11,r7,8110570c <__reset+0xfb0e570c>
81105724:	213fff04 	addi	r4,r4,-4
81105728:	2008d0ba 	srli	r4,r4,2
8110572c:	318000cc 	andi	r6,r6,3
81105730:	21000044 	addi	r4,r4,1
81105734:	2109883a 	add	r4,r4,r4
81105738:	2109883a 	add	r4,r4,r4
8110573c:	1907883a 	add	r3,r3,r4
81105740:	290b883a 	add	r5,r5,r4
81105744:	30000626 	beq	r6,zero,81105760 <memcpy+0x11c>
81105748:	198d883a 	add	r6,r3,r6
8110574c:	29c00003 	ldbu	r7,0(r5)
81105750:	18c00044 	addi	r3,r3,1
81105754:	29400044 	addi	r5,r5,1
81105758:	19ffffc5 	stb	r7,-1(r3)
8110575c:	19bffb1e 	bne	r3,r6,8110574c <__reset+0xfb0e574c>
81105760:	dfc00217 	ldw	ra,8(sp)
81105764:	dc400117 	ldw	r17,4(sp)
81105768:	dc000017 	ldw	r16,0(sp)
8110576c:	dec00304 	addi	sp,sp,12
81105770:	f800283a 	ret
81105774:	2007883a 	mov	r3,r4
81105778:	003ff206 	br	81105744 <__reset+0xfb0e5744>
8110577c:	2007883a 	mov	r3,r4
81105780:	003ff106 	br	81105748 <__reset+0xfb0e5748>
81105784:	200d883a 	mov	r6,r4
81105788:	003fee06 	br	81105744 <__reset+0xfb0e5744>

8110578c <_printf_r>:
8110578c:	defffd04 	addi	sp,sp,-12
81105790:	2805883a 	mov	r2,r5
81105794:	dfc00015 	stw	ra,0(sp)
81105798:	d9800115 	stw	r6,4(sp)
8110579c:	d9c00215 	stw	r7,8(sp)
811057a0:	21400217 	ldw	r5,8(r4)
811057a4:	d9c00104 	addi	r7,sp,4
811057a8:	100d883a 	mov	r6,r2
811057ac:	11059840 	call	81105984 <___vfprintf_internal_r>
811057b0:	dfc00017 	ldw	ra,0(sp)
811057b4:	dec00304 	addi	sp,sp,12
811057b8:	f800283a 	ret

811057bc <printf>:
811057bc:	defffc04 	addi	sp,sp,-16
811057c0:	dfc00015 	stw	ra,0(sp)
811057c4:	d9400115 	stw	r5,4(sp)
811057c8:	d9800215 	stw	r6,8(sp)
811057cc:	d9c00315 	stw	r7,12(sp)
811057d0:	00a044b4 	movhi	r2,33042
811057d4:	10a82a04 	addi	r2,r2,-24408
811057d8:	10800017 	ldw	r2,0(r2)
811057dc:	200b883a 	mov	r5,r4
811057e0:	d9800104 	addi	r6,sp,4
811057e4:	11000217 	ldw	r4,8(r2)
811057e8:	1107b7c0 	call	81107b7c <__vfprintf_internal>
811057ec:	dfc00017 	ldw	ra,0(sp)
811057f0:	dec00404 	addi	sp,sp,16
811057f4:	f800283a 	ret

811057f8 <_putchar_r>:
811057f8:	21800217 	ldw	r6,8(r4)
811057fc:	110c4f81 	jmpi	8110c4f8 <_putc_r>

81105800 <putchar>:
81105800:	00a044b4 	movhi	r2,33042
81105804:	10a82a04 	addi	r2,r2,-24408
81105808:	200b883a 	mov	r5,r4
8110580c:	11000017 	ldw	r4,0(r2)
81105810:	21800217 	ldw	r6,8(r4)
81105814:	110c4f81 	jmpi	8110c4f8 <_putc_r>

81105818 <_puts_r>:
81105818:	defff604 	addi	sp,sp,-40
8110581c:	dc000715 	stw	r16,28(sp)
81105820:	2021883a 	mov	r16,r4
81105824:	2809883a 	mov	r4,r5
81105828:	dc400815 	stw	r17,32(sp)
8110582c:	dfc00915 	stw	ra,36(sp)
81105830:	2823883a 	mov	r17,r5
81105834:	11058ec0 	call	811058ec <strlen>
81105838:	10c00044 	addi	r3,r2,1
8110583c:	d8800115 	stw	r2,4(sp)
81105840:	00a044b4 	movhi	r2,33042
81105844:	10a02304 	addi	r2,r2,-32628
81105848:	d8800215 	stw	r2,8(sp)
8110584c:	00800044 	movi	r2,1
81105850:	d8800315 	stw	r2,12(sp)
81105854:	00800084 	movi	r2,2
81105858:	dc400015 	stw	r17,0(sp)
8110585c:	d8c00615 	stw	r3,24(sp)
81105860:	dec00415 	stw	sp,16(sp)
81105864:	d8800515 	stw	r2,20(sp)
81105868:	80000226 	beq	r16,zero,81105874 <_puts_r+0x5c>
8110586c:	80800e17 	ldw	r2,56(r16)
81105870:	10001426 	beq	r2,zero,811058c4 <_puts_r+0xac>
81105874:	81400217 	ldw	r5,8(r16)
81105878:	2880030b 	ldhu	r2,12(r5)
8110587c:	10c8000c 	andi	r3,r2,8192
81105880:	1800061e 	bne	r3,zero,8110589c <_puts_r+0x84>
81105884:	29001917 	ldw	r4,100(r5)
81105888:	00f7ffc4 	movi	r3,-8193
8110588c:	10880014 	ori	r2,r2,8192
81105890:	20c6703a 	and	r3,r4,r3
81105894:	2880030d 	sth	r2,12(r5)
81105898:	28c01915 	stw	r3,100(r5)
8110589c:	d9800404 	addi	r6,sp,16
811058a0:	8009883a 	mov	r4,r16
811058a4:	110a0ac0 	call	8110a0ac <__sfvwrite_r>
811058a8:	1000091e 	bne	r2,zero,811058d0 <_puts_r+0xb8>
811058ac:	00800284 	movi	r2,10
811058b0:	dfc00917 	ldw	ra,36(sp)
811058b4:	dc400817 	ldw	r17,32(sp)
811058b8:	dc000717 	ldw	r16,28(sp)
811058bc:	dec00a04 	addi	sp,sp,40
811058c0:	f800283a 	ret
811058c4:	8009883a 	mov	r4,r16
811058c8:	1109c280 	call	81109c28 <__sinit>
811058cc:	003fe906 	br	81105874 <__reset+0xfb0e5874>
811058d0:	00bfffc4 	movi	r2,-1
811058d4:	003ff606 	br	811058b0 <__reset+0xfb0e58b0>

811058d8 <puts>:
811058d8:	00a044b4 	movhi	r2,33042
811058dc:	10a82a04 	addi	r2,r2,-24408
811058e0:	200b883a 	mov	r5,r4
811058e4:	11000017 	ldw	r4,0(r2)
811058e8:	11058181 	jmpi	81105818 <_puts_r>

811058ec <strlen>:
811058ec:	208000cc 	andi	r2,r4,3
811058f0:	10002026 	beq	r2,zero,81105974 <strlen+0x88>
811058f4:	20800007 	ldb	r2,0(r4)
811058f8:	10002026 	beq	r2,zero,8110597c <strlen+0x90>
811058fc:	2005883a 	mov	r2,r4
81105900:	00000206 	br	8110590c <strlen+0x20>
81105904:	10c00007 	ldb	r3,0(r2)
81105908:	18001826 	beq	r3,zero,8110596c <strlen+0x80>
8110590c:	10800044 	addi	r2,r2,1
81105910:	10c000cc 	andi	r3,r2,3
81105914:	183ffb1e 	bne	r3,zero,81105904 <__reset+0xfb0e5904>
81105918:	10c00017 	ldw	r3,0(r2)
8110591c:	01ffbff4 	movhi	r7,65279
81105920:	39ffbfc4 	addi	r7,r7,-257
81105924:	00ca303a 	nor	r5,zero,r3
81105928:	01a02074 	movhi	r6,32897
8110592c:	19c7883a 	add	r3,r3,r7
81105930:	31a02004 	addi	r6,r6,-32640
81105934:	1946703a 	and	r3,r3,r5
81105938:	1986703a 	and	r3,r3,r6
8110593c:	1800091e 	bne	r3,zero,81105964 <strlen+0x78>
81105940:	10800104 	addi	r2,r2,4
81105944:	10c00017 	ldw	r3,0(r2)
81105948:	19cb883a 	add	r5,r3,r7
8110594c:	00c6303a 	nor	r3,zero,r3
81105950:	28c6703a 	and	r3,r5,r3
81105954:	1986703a 	and	r3,r3,r6
81105958:	183ff926 	beq	r3,zero,81105940 <__reset+0xfb0e5940>
8110595c:	00000106 	br	81105964 <strlen+0x78>
81105960:	10800044 	addi	r2,r2,1
81105964:	10c00007 	ldb	r3,0(r2)
81105968:	183ffd1e 	bne	r3,zero,81105960 <__reset+0xfb0e5960>
8110596c:	1105c83a 	sub	r2,r2,r4
81105970:	f800283a 	ret
81105974:	2005883a 	mov	r2,r4
81105978:	003fe706 	br	81105918 <__reset+0xfb0e5918>
8110597c:	0005883a 	mov	r2,zero
81105980:	f800283a 	ret

81105984 <___vfprintf_internal_r>:
81105984:	deffb804 	addi	sp,sp,-288
81105988:	dfc04715 	stw	ra,284(sp)
8110598c:	ddc04515 	stw	r23,276(sp)
81105990:	dd404315 	stw	r21,268(sp)
81105994:	d9002c15 	stw	r4,176(sp)
81105998:	282f883a 	mov	r23,r5
8110599c:	302b883a 	mov	r21,r6
811059a0:	d9c02d15 	stw	r7,180(sp)
811059a4:	df004615 	stw	fp,280(sp)
811059a8:	dd804415 	stw	r22,272(sp)
811059ac:	dd004215 	stw	r20,264(sp)
811059b0:	dcc04115 	stw	r19,260(sp)
811059b4:	dc804015 	stw	r18,256(sp)
811059b8:	dc403f15 	stw	r17,252(sp)
811059bc:	dc003e15 	stw	r16,248(sp)
811059c0:	110a79c0 	call	8110a79c <_localeconv_r>
811059c4:	10800017 	ldw	r2,0(r2)
811059c8:	1009883a 	mov	r4,r2
811059cc:	d8803415 	stw	r2,208(sp)
811059d0:	11058ec0 	call	811058ec <strlen>
811059d4:	d8803715 	stw	r2,220(sp)
811059d8:	d8802c17 	ldw	r2,176(sp)
811059dc:	10000226 	beq	r2,zero,811059e8 <___vfprintf_internal_r+0x64>
811059e0:	10800e17 	ldw	r2,56(r2)
811059e4:	1000f926 	beq	r2,zero,81105dcc <___vfprintf_internal_r+0x448>
811059e8:	b880030b 	ldhu	r2,12(r23)
811059ec:	10c8000c 	andi	r3,r2,8192
811059f0:	1800061e 	bne	r3,zero,81105a0c <___vfprintf_internal_r+0x88>
811059f4:	b9001917 	ldw	r4,100(r23)
811059f8:	00f7ffc4 	movi	r3,-8193
811059fc:	10880014 	ori	r2,r2,8192
81105a00:	20c6703a 	and	r3,r4,r3
81105a04:	b880030d 	sth	r2,12(r23)
81105a08:	b8c01915 	stw	r3,100(r23)
81105a0c:	10c0020c 	andi	r3,r2,8
81105a10:	1800c126 	beq	r3,zero,81105d18 <___vfprintf_internal_r+0x394>
81105a14:	b8c00417 	ldw	r3,16(r23)
81105a18:	1800bf26 	beq	r3,zero,81105d18 <___vfprintf_internal_r+0x394>
81105a1c:	1080068c 	andi	r2,r2,26
81105a20:	00c00284 	movi	r3,10
81105a24:	10c0c426 	beq	r2,r3,81105d38 <___vfprintf_internal_r+0x3b4>
81105a28:	d8c00404 	addi	r3,sp,16
81105a2c:	052044b4 	movhi	r20,33042
81105a30:	d9001e04 	addi	r4,sp,120
81105a34:	a5203484 	addi	r20,r20,-32558
81105a38:	d8c01e15 	stw	r3,120(sp)
81105a3c:	d8002015 	stw	zero,128(sp)
81105a40:	d8001f15 	stw	zero,124(sp)
81105a44:	d8003315 	stw	zero,204(sp)
81105a48:	d8003615 	stw	zero,216(sp)
81105a4c:	d8003815 	stw	zero,224(sp)
81105a50:	1811883a 	mov	r8,r3
81105a54:	d8003915 	stw	zero,228(sp)
81105a58:	d8003a15 	stw	zero,232(sp)
81105a5c:	d8002f15 	stw	zero,188(sp)
81105a60:	d9002815 	stw	r4,160(sp)
81105a64:	a8800007 	ldb	r2,0(r21)
81105a68:	10027b26 	beq	r2,zero,81106458 <___vfprintf_internal_r+0xad4>
81105a6c:	00c00944 	movi	r3,37
81105a70:	a821883a 	mov	r16,r21
81105a74:	10c0021e 	bne	r2,r3,81105a80 <___vfprintf_internal_r+0xfc>
81105a78:	00001406 	br	81105acc <___vfprintf_internal_r+0x148>
81105a7c:	10c00326 	beq	r2,r3,81105a8c <___vfprintf_internal_r+0x108>
81105a80:	84000044 	addi	r16,r16,1
81105a84:	80800007 	ldb	r2,0(r16)
81105a88:	103ffc1e 	bne	r2,zero,81105a7c <__reset+0xfb0e5a7c>
81105a8c:	8563c83a 	sub	r17,r16,r21
81105a90:	88000e26 	beq	r17,zero,81105acc <___vfprintf_internal_r+0x148>
81105a94:	d8c02017 	ldw	r3,128(sp)
81105a98:	d8801f17 	ldw	r2,124(sp)
81105a9c:	45400015 	stw	r21,0(r8)
81105aa0:	1c47883a 	add	r3,r3,r17
81105aa4:	10800044 	addi	r2,r2,1
81105aa8:	d8c02015 	stw	r3,128(sp)
81105aac:	44400115 	stw	r17,4(r8)
81105ab0:	d8801f15 	stw	r2,124(sp)
81105ab4:	00c001c4 	movi	r3,7
81105ab8:	1880a716 	blt	r3,r2,81105d58 <___vfprintf_internal_r+0x3d4>
81105abc:	42000204 	addi	r8,r8,8
81105ac0:	d9402f17 	ldw	r5,188(sp)
81105ac4:	2c4b883a 	add	r5,r5,r17
81105ac8:	d9402f15 	stw	r5,188(sp)
81105acc:	80800007 	ldb	r2,0(r16)
81105ad0:	1000a826 	beq	r2,zero,81105d74 <___vfprintf_internal_r+0x3f0>
81105ad4:	84400047 	ldb	r17,1(r16)
81105ad8:	00bfffc4 	movi	r2,-1
81105adc:	85400044 	addi	r21,r16,1
81105ae0:	d8002785 	stb	zero,158(sp)
81105ae4:	0007883a 	mov	r3,zero
81105ae8:	000f883a 	mov	r7,zero
81105aec:	d8802915 	stw	r2,164(sp)
81105af0:	d8003115 	stw	zero,196(sp)
81105af4:	0025883a 	mov	r18,zero
81105af8:	01401604 	movi	r5,88
81105afc:	01800244 	movi	r6,9
81105b00:	02800a84 	movi	r10,42
81105b04:	02401b04 	movi	r9,108
81105b08:	ad400044 	addi	r21,r21,1
81105b0c:	88bff804 	addi	r2,r17,-32
81105b10:	28830436 	bltu	r5,r2,81106724 <___vfprintf_internal_r+0xda0>
81105b14:	100490ba 	slli	r2,r2,2
81105b18:	01204434 	movhi	r4,33040
81105b1c:	2116cb04 	addi	r4,r4,23340
81105b20:	1105883a 	add	r2,r2,r4
81105b24:	10800017 	ldw	r2,0(r2)
81105b28:	1000683a 	jmp	r2
81105b2c:	81106644 	addi	r4,r16,16793
81105b30:	81106724 	muli	r4,r16,16796
81105b34:	81106724 	muli	r4,r16,16796
81105b38:	81106664 	muli	r4,r16,16793
81105b3c:	81106724 	muli	r4,r16,16796
81105b40:	81106724 	muli	r4,r16,16796
81105b44:	81106724 	muli	r4,r16,16796
81105b48:	81106724 	muli	r4,r16,16796
81105b4c:	81106724 	muli	r4,r16,16796
81105b50:	81106724 	muli	r4,r16,16796
81105b54:	81105dd8 	cmpnei	r4,r16,16759
81105b58:	81106580 	call	88110658 <__reset+0x20f0658>
81105b5c:	81106724 	muli	r4,r16,16796
81105b60:	81105ca0 	cmpeqi	r4,r16,16754
81105b64:	81105e00 	call	881105e0 <__reset+0x20f05e0>
81105b68:	81106724 	muli	r4,r16,16796
81105b6c:	81105e40 	call	881105e4 <__reset+0x20f05e4>
81105b70:	81105e4c 	andi	r4,r16,16761
81105b74:	81105e4c 	andi	r4,r16,16761
81105b78:	81105e4c 	andi	r4,r16,16761
81105b7c:	81105e4c 	andi	r4,r16,16761
81105b80:	81105e4c 	andi	r4,r16,16761
81105b84:	81105e4c 	andi	r4,r16,16761
81105b88:	81105e4c 	andi	r4,r16,16761
81105b8c:	81105e4c 	andi	r4,r16,16761
81105b90:	81105e4c 	andi	r4,r16,16761
81105b94:	81106724 	muli	r4,r16,16796
81105b98:	81106724 	muli	r4,r16,16796
81105b9c:	81106724 	muli	r4,r16,16796
81105ba0:	81106724 	muli	r4,r16,16796
81105ba4:	81106724 	muli	r4,r16,16796
81105ba8:	81106724 	muli	r4,r16,16796
81105bac:	81106724 	muli	r4,r16,16796
81105bb0:	81106724 	muli	r4,r16,16796
81105bb4:	81106724 	muli	r4,r16,16796
81105bb8:	81106724 	muli	r4,r16,16796
81105bbc:	81105e80 	call	881105e8 <__reset+0x20f05e8>
81105bc0:	81105f3c 	xorhi	r4,r16,16764
81105bc4:	81106724 	muli	r4,r16,16796
81105bc8:	81105f3c 	xorhi	r4,r16,16764
81105bcc:	81106724 	muli	r4,r16,16796
81105bd0:	81106724 	muli	r4,r16,16796
81105bd4:	81106724 	muli	r4,r16,16796
81105bd8:	81106724 	muli	r4,r16,16796
81105bdc:	81105fdc 	xori	r4,r16,16767
81105be0:	81106724 	muli	r4,r16,16796
81105be4:	81106724 	muli	r4,r16,16796
81105be8:	81105fe8 	cmpgeui	r4,r16,16767
81105bec:	81106724 	muli	r4,r16,16796
81105bf0:	81106724 	muli	r4,r16,16796
81105bf4:	81106724 	muli	r4,r16,16796
81105bf8:	81106724 	muli	r4,r16,16796
81105bfc:	81106724 	muli	r4,r16,16796
81105c00:	81106460 	cmpeqi	r4,r16,16785
81105c04:	81106724 	muli	r4,r16,16796
81105c08:	81106724 	muli	r4,r16,16796
81105c0c:	811064c0 	call	8811064c <__reset+0x20f064c>
81105c10:	81106724 	muli	r4,r16,16796
81105c14:	81106724 	muli	r4,r16,16796
81105c18:	81106724 	muli	r4,r16,16796
81105c1c:	81106724 	muli	r4,r16,16796
81105c20:	81106724 	muli	r4,r16,16796
81105c24:	81106724 	muli	r4,r16,16796
81105c28:	81106724 	muli	r4,r16,16796
81105c2c:	81106724 	muli	r4,r16,16796
81105c30:	81106724 	muli	r4,r16,16796
81105c34:	81106724 	muli	r4,r16,16796
81105c38:	811066d0 	cmplti	r4,r16,16795
81105c3c:	81106670 	cmpltui	r4,r16,16793
81105c40:	81105f3c 	xorhi	r4,r16,16764
81105c44:	81105f3c 	xorhi	r4,r16,16764
81105c48:	81105f3c 	xorhi	r4,r16,16764
81105c4c:	81106680 	call	88110668 <__reset+0x20f0668>
81105c50:	81106670 	cmpltui	r4,r16,16793
81105c54:	81106724 	muli	r4,r16,16796
81105c58:	81106724 	muli	r4,r16,16796
81105c5c:	8110668c 	andi	r4,r16,16794
81105c60:	81106724 	muli	r4,r16,16796
81105c64:	8110669c 	xori	r4,r16,16794
81105c68:	81106570 	cmpltui	r4,r16,16789
81105c6c:	81105cac 	andhi	r4,r16,16754
81105c70:	81106590 	cmplti	r4,r16,16790
81105c74:	81106724 	muli	r4,r16,16796
81105c78:	8110659c 	xori	r4,r16,16790
81105c7c:	81106724 	muli	r4,r16,16796
81105c80:	811065f8 	rdprs	r4,r16,16791
81105c84:	81106724 	muli	r4,r16,16796
81105c88:	81106724 	muli	r4,r16,16796
81105c8c:	81106608 	cmpgei	r4,r16,16792
81105c90:	d9003117 	ldw	r4,196(sp)
81105c94:	d8802d15 	stw	r2,180(sp)
81105c98:	0109c83a 	sub	r4,zero,r4
81105c9c:	d9003115 	stw	r4,196(sp)
81105ca0:	94800114 	ori	r18,r18,4
81105ca4:	ac400007 	ldb	r17,0(r21)
81105ca8:	003f9706 	br	81105b08 <__reset+0xfb0e5b08>
81105cac:	00800c04 	movi	r2,48
81105cb0:	d9002d17 	ldw	r4,180(sp)
81105cb4:	d9402917 	ldw	r5,164(sp)
81105cb8:	d8802705 	stb	r2,156(sp)
81105cbc:	00801e04 	movi	r2,120
81105cc0:	d8802745 	stb	r2,157(sp)
81105cc4:	d8002785 	stb	zero,158(sp)
81105cc8:	20c00104 	addi	r3,r4,4
81105ccc:	24c00017 	ldw	r19,0(r4)
81105cd0:	002d883a 	mov	r22,zero
81105cd4:	90800094 	ori	r2,r18,2
81105cd8:	28029a16 	blt	r5,zero,81106744 <___vfprintf_internal_r+0xdc0>
81105cdc:	00bfdfc4 	movi	r2,-129
81105ce0:	90a4703a 	and	r18,r18,r2
81105ce4:	d8c02d15 	stw	r3,180(sp)
81105ce8:	94800094 	ori	r18,r18,2
81105cec:	9802871e 	bne	r19,zero,8110670c <___vfprintf_internal_r+0xd88>
81105cf0:	00a044b4 	movhi	r2,33042
81105cf4:	10a02d04 	addi	r2,r2,-32588
81105cf8:	d8803915 	stw	r2,228(sp)
81105cfc:	04401e04 	movi	r17,120
81105d00:	d8802917 	ldw	r2,164(sp)
81105d04:	0039883a 	mov	fp,zero
81105d08:	1001e926 	beq	r2,zero,811064b0 <___vfprintf_internal_r+0xb2c>
81105d0c:	0027883a 	mov	r19,zero
81105d10:	002d883a 	mov	r22,zero
81105d14:	00020506 	br	8110652c <___vfprintf_internal_r+0xba8>
81105d18:	d9002c17 	ldw	r4,176(sp)
81105d1c:	b80b883a 	mov	r5,r23
81105d20:	1107c540 	call	81107c54 <__swsetup_r>
81105d24:	1005ac1e 	bne	r2,zero,811073d8 <___vfprintf_internal_r+0x1a54>
81105d28:	b880030b 	ldhu	r2,12(r23)
81105d2c:	00c00284 	movi	r3,10
81105d30:	1080068c 	andi	r2,r2,26
81105d34:	10ff3c1e 	bne	r2,r3,81105a28 <__reset+0xfb0e5a28>
81105d38:	b880038f 	ldh	r2,14(r23)
81105d3c:	103f3a16 	blt	r2,zero,81105a28 <__reset+0xfb0e5a28>
81105d40:	d9c02d17 	ldw	r7,180(sp)
81105d44:	d9002c17 	ldw	r4,176(sp)
81105d48:	a80d883a 	mov	r6,r21
81105d4c:	b80b883a 	mov	r5,r23
81105d50:	1107b980 	call	81107b98 <__sbprintf>
81105d54:	00001106 	br	81105d9c <___vfprintf_internal_r+0x418>
81105d58:	d9002c17 	ldw	r4,176(sp)
81105d5c:	d9801e04 	addi	r6,sp,120
81105d60:	b80b883a 	mov	r5,r23
81105d64:	110cfa00 	call	8110cfa0 <__sprint_r>
81105d68:	1000081e 	bne	r2,zero,81105d8c <___vfprintf_internal_r+0x408>
81105d6c:	da000404 	addi	r8,sp,16
81105d70:	003f5306 	br	81105ac0 <__reset+0xfb0e5ac0>
81105d74:	d8802017 	ldw	r2,128(sp)
81105d78:	10000426 	beq	r2,zero,81105d8c <___vfprintf_internal_r+0x408>
81105d7c:	d9002c17 	ldw	r4,176(sp)
81105d80:	d9801e04 	addi	r6,sp,120
81105d84:	b80b883a 	mov	r5,r23
81105d88:	110cfa00 	call	8110cfa0 <__sprint_r>
81105d8c:	b880030b 	ldhu	r2,12(r23)
81105d90:	1080100c 	andi	r2,r2,64
81105d94:	1005901e 	bne	r2,zero,811073d8 <___vfprintf_internal_r+0x1a54>
81105d98:	d8802f17 	ldw	r2,188(sp)
81105d9c:	dfc04717 	ldw	ra,284(sp)
81105da0:	df004617 	ldw	fp,280(sp)
81105da4:	ddc04517 	ldw	r23,276(sp)
81105da8:	dd804417 	ldw	r22,272(sp)
81105dac:	dd404317 	ldw	r21,268(sp)
81105db0:	dd004217 	ldw	r20,264(sp)
81105db4:	dcc04117 	ldw	r19,260(sp)
81105db8:	dc804017 	ldw	r18,256(sp)
81105dbc:	dc403f17 	ldw	r17,252(sp)
81105dc0:	dc003e17 	ldw	r16,248(sp)
81105dc4:	dec04804 	addi	sp,sp,288
81105dc8:	f800283a 	ret
81105dcc:	d9002c17 	ldw	r4,176(sp)
81105dd0:	1109c280 	call	81109c28 <__sinit>
81105dd4:	003f0406 	br	811059e8 <__reset+0xfb0e59e8>
81105dd8:	d8802d17 	ldw	r2,180(sp)
81105ddc:	d9002d17 	ldw	r4,180(sp)
81105de0:	10800017 	ldw	r2,0(r2)
81105de4:	d8803115 	stw	r2,196(sp)
81105de8:	20800104 	addi	r2,r4,4
81105dec:	d9003117 	ldw	r4,196(sp)
81105df0:	203fa716 	blt	r4,zero,81105c90 <__reset+0xfb0e5c90>
81105df4:	d8802d15 	stw	r2,180(sp)
81105df8:	ac400007 	ldb	r17,0(r21)
81105dfc:	003f4206 	br	81105b08 <__reset+0xfb0e5b08>
81105e00:	ac400007 	ldb	r17,0(r21)
81105e04:	aac00044 	addi	r11,r21,1
81105e08:	8a872826 	beq	r17,r10,81107aac <___vfprintf_internal_r+0x2128>
81105e0c:	88bff404 	addi	r2,r17,-48
81105e10:	0009883a 	mov	r4,zero
81105e14:	30867d36 	bltu	r6,r2,8110780c <___vfprintf_internal_r+0x1e88>
81105e18:	5c400007 	ldb	r17,0(r11)
81105e1c:	210002a4 	muli	r4,r4,10
81105e20:	5d400044 	addi	r21,r11,1
81105e24:	a817883a 	mov	r11,r21
81105e28:	2089883a 	add	r4,r4,r2
81105e2c:	88bff404 	addi	r2,r17,-48
81105e30:	30bff92e 	bgeu	r6,r2,81105e18 <__reset+0xfb0e5e18>
81105e34:	2005c916 	blt	r4,zero,8110755c <___vfprintf_internal_r+0x1bd8>
81105e38:	d9002915 	stw	r4,164(sp)
81105e3c:	003f3306 	br	81105b0c <__reset+0xfb0e5b0c>
81105e40:	94802014 	ori	r18,r18,128
81105e44:	ac400007 	ldb	r17,0(r21)
81105e48:	003f2f06 	br	81105b08 <__reset+0xfb0e5b08>
81105e4c:	a809883a 	mov	r4,r21
81105e50:	d8003115 	stw	zero,196(sp)
81105e54:	88bff404 	addi	r2,r17,-48
81105e58:	0017883a 	mov	r11,zero
81105e5c:	24400007 	ldb	r17,0(r4)
81105e60:	5ac002a4 	muli	r11,r11,10
81105e64:	ad400044 	addi	r21,r21,1
81105e68:	a809883a 	mov	r4,r21
81105e6c:	12d7883a 	add	r11,r2,r11
81105e70:	88bff404 	addi	r2,r17,-48
81105e74:	30bff92e 	bgeu	r6,r2,81105e5c <__reset+0xfb0e5e5c>
81105e78:	dac03115 	stw	r11,196(sp)
81105e7c:	003f2306 	br	81105b0c <__reset+0xfb0e5b0c>
81105e80:	18c03fcc 	andi	r3,r3,255
81105e84:	18072b1e 	bne	r3,zero,81107b34 <___vfprintf_internal_r+0x21b0>
81105e88:	94800414 	ori	r18,r18,16
81105e8c:	9080080c 	andi	r2,r18,32
81105e90:	10037b26 	beq	r2,zero,81106c80 <___vfprintf_internal_r+0x12fc>
81105e94:	d9402d17 	ldw	r5,180(sp)
81105e98:	28800117 	ldw	r2,4(r5)
81105e9c:	2cc00017 	ldw	r19,0(r5)
81105ea0:	29400204 	addi	r5,r5,8
81105ea4:	d9402d15 	stw	r5,180(sp)
81105ea8:	102d883a 	mov	r22,r2
81105eac:	10044b16 	blt	r2,zero,81106fdc <___vfprintf_internal_r+0x1658>
81105eb0:	d9402917 	ldw	r5,164(sp)
81105eb4:	df002783 	ldbu	fp,158(sp)
81105eb8:	2803bc16 	blt	r5,zero,81106dac <___vfprintf_internal_r+0x1428>
81105ebc:	00ffdfc4 	movi	r3,-129
81105ec0:	9d84b03a 	or	r2,r19,r22
81105ec4:	90e4703a 	and	r18,r18,r3
81105ec8:	10017726 	beq	r2,zero,811064a8 <___vfprintf_internal_r+0xb24>
81105ecc:	b0038326 	beq	r22,zero,81106cdc <___vfprintf_internal_r+0x1358>
81105ed0:	dc402a15 	stw	r17,168(sp)
81105ed4:	dc001e04 	addi	r16,sp,120
81105ed8:	b023883a 	mov	r17,r22
81105edc:	402d883a 	mov	r22,r8
81105ee0:	9809883a 	mov	r4,r19
81105ee4:	880b883a 	mov	r5,r17
81105ee8:	01800284 	movi	r6,10
81105eec:	000f883a 	mov	r7,zero
81105ef0:	110f3980 	call	8110f398 <__umoddi3>
81105ef4:	10800c04 	addi	r2,r2,48
81105ef8:	843fffc4 	addi	r16,r16,-1
81105efc:	9809883a 	mov	r4,r19
81105f00:	880b883a 	mov	r5,r17
81105f04:	80800005 	stb	r2,0(r16)
81105f08:	01800284 	movi	r6,10
81105f0c:	000f883a 	mov	r7,zero
81105f10:	110ee200 	call	8110ee20 <__udivdi3>
81105f14:	1027883a 	mov	r19,r2
81105f18:	10c4b03a 	or	r2,r2,r3
81105f1c:	1823883a 	mov	r17,r3
81105f20:	103fef1e 	bne	r2,zero,81105ee0 <__reset+0xfb0e5ee0>
81105f24:	d8c02817 	ldw	r3,160(sp)
81105f28:	dc402a17 	ldw	r17,168(sp)
81105f2c:	b011883a 	mov	r8,r22
81105f30:	1c07c83a 	sub	r3,r3,r16
81105f34:	d8c02e15 	stw	r3,184(sp)
81105f38:	00005906 	br	811060a0 <___vfprintf_internal_r+0x71c>
81105f3c:	18c03fcc 	andi	r3,r3,255
81105f40:	1806fa1e 	bne	r3,zero,81107b2c <___vfprintf_internal_r+0x21a8>
81105f44:	9080020c 	andi	r2,r18,8
81105f48:	10048a26 	beq	r2,zero,81107174 <___vfprintf_internal_r+0x17f0>
81105f4c:	d8c02d17 	ldw	r3,180(sp)
81105f50:	d9002d17 	ldw	r4,180(sp)
81105f54:	d9402d17 	ldw	r5,180(sp)
81105f58:	18c00017 	ldw	r3,0(r3)
81105f5c:	21000117 	ldw	r4,4(r4)
81105f60:	29400204 	addi	r5,r5,8
81105f64:	d8c03615 	stw	r3,216(sp)
81105f68:	d9003815 	stw	r4,224(sp)
81105f6c:	d9402d15 	stw	r5,180(sp)
81105f70:	d9003617 	ldw	r4,216(sp)
81105f74:	d9403817 	ldw	r5,224(sp)
81105f78:	da003d15 	stw	r8,244(sp)
81105f7c:	04000044 	movi	r16,1
81105f80:	110cbc40 	call	8110cbc4 <__fpclassifyd>
81105f84:	da003d17 	ldw	r8,244(sp)
81105f88:	14041f1e 	bne	r2,r16,81107008 <___vfprintf_internal_r+0x1684>
81105f8c:	d9003617 	ldw	r4,216(sp)
81105f90:	d9403817 	ldw	r5,224(sp)
81105f94:	000d883a 	mov	r6,zero
81105f98:	000f883a 	mov	r7,zero
81105f9c:	1110d7c0 	call	81110d7c <__ledf2>
81105fa0:	da003d17 	ldw	r8,244(sp)
81105fa4:	1005be16 	blt	r2,zero,811076a0 <___vfprintf_internal_r+0x1d1c>
81105fa8:	df002783 	ldbu	fp,158(sp)
81105fac:	008011c4 	movi	r2,71
81105fb0:	1445330e 	bge	r2,r17,81107480 <___vfprintf_internal_r+0x1afc>
81105fb4:	042044b4 	movhi	r16,33042
81105fb8:	84202504 	addi	r16,r16,-32620
81105fbc:	00c000c4 	movi	r3,3
81105fc0:	00bfdfc4 	movi	r2,-129
81105fc4:	d8c02a15 	stw	r3,168(sp)
81105fc8:	90a4703a 	and	r18,r18,r2
81105fcc:	d8c02e15 	stw	r3,184(sp)
81105fd0:	d8002915 	stw	zero,164(sp)
81105fd4:	d8003215 	stw	zero,200(sp)
81105fd8:	00003706 	br	811060b8 <___vfprintf_internal_r+0x734>
81105fdc:	94800214 	ori	r18,r18,8
81105fe0:	ac400007 	ldb	r17,0(r21)
81105fe4:	003ec806 	br	81105b08 <__reset+0xfb0e5b08>
81105fe8:	18c03fcc 	andi	r3,r3,255
81105fec:	1806db1e 	bne	r3,zero,81107b5c <___vfprintf_internal_r+0x21d8>
81105ff0:	94800414 	ori	r18,r18,16
81105ff4:	9080080c 	andi	r2,r18,32
81105ff8:	1002d826 	beq	r2,zero,81106b5c <___vfprintf_internal_r+0x11d8>
81105ffc:	d9402d17 	ldw	r5,180(sp)
81106000:	d8c02917 	ldw	r3,164(sp)
81106004:	d8002785 	stb	zero,158(sp)
81106008:	28800204 	addi	r2,r5,8
8110600c:	2cc00017 	ldw	r19,0(r5)
81106010:	2d800117 	ldw	r22,4(r5)
81106014:	18048f16 	blt	r3,zero,81107254 <___vfprintf_internal_r+0x18d0>
81106018:	013fdfc4 	movi	r4,-129
8110601c:	9d86b03a 	or	r3,r19,r22
81106020:	d8802d15 	stw	r2,180(sp)
81106024:	9124703a 	and	r18,r18,r4
81106028:	1802d91e 	bne	r3,zero,81106b90 <___vfprintf_internal_r+0x120c>
8110602c:	d8c02917 	ldw	r3,164(sp)
81106030:	0039883a 	mov	fp,zero
81106034:	1805c326 	beq	r3,zero,81107744 <___vfprintf_internal_r+0x1dc0>
81106038:	0027883a 	mov	r19,zero
8110603c:	002d883a 	mov	r22,zero
81106040:	dc001e04 	addi	r16,sp,120
81106044:	9806d0fa 	srli	r3,r19,3
81106048:	b008977a 	slli	r4,r22,29
8110604c:	b02cd0fa 	srli	r22,r22,3
81106050:	9cc001cc 	andi	r19,r19,7
81106054:	98800c04 	addi	r2,r19,48
81106058:	843fffc4 	addi	r16,r16,-1
8110605c:	20e6b03a 	or	r19,r4,r3
81106060:	80800005 	stb	r2,0(r16)
81106064:	9d86b03a 	or	r3,r19,r22
81106068:	183ff61e 	bne	r3,zero,81106044 <__reset+0xfb0e6044>
8110606c:	90c0004c 	andi	r3,r18,1
81106070:	18013b26 	beq	r3,zero,81106560 <___vfprintf_internal_r+0xbdc>
81106074:	10803fcc 	andi	r2,r2,255
81106078:	1080201c 	xori	r2,r2,128
8110607c:	10bfe004 	addi	r2,r2,-128
81106080:	00c00c04 	movi	r3,48
81106084:	10c13626 	beq	r2,r3,81106560 <___vfprintf_internal_r+0xbdc>
81106088:	80ffffc5 	stb	r3,-1(r16)
8110608c:	d8c02817 	ldw	r3,160(sp)
81106090:	80bfffc4 	addi	r2,r16,-1
81106094:	1021883a 	mov	r16,r2
81106098:	1887c83a 	sub	r3,r3,r2
8110609c:	d8c02e15 	stw	r3,184(sp)
811060a0:	d8802e17 	ldw	r2,184(sp)
811060a4:	d9002917 	ldw	r4,164(sp)
811060a8:	1100010e 	bge	r2,r4,811060b0 <___vfprintf_internal_r+0x72c>
811060ac:	2005883a 	mov	r2,r4
811060b0:	d8802a15 	stw	r2,168(sp)
811060b4:	d8003215 	stw	zero,200(sp)
811060b8:	e7003fcc 	andi	fp,fp,255
811060bc:	e700201c 	xori	fp,fp,128
811060c0:	e73fe004 	addi	fp,fp,-128
811060c4:	e0000326 	beq	fp,zero,811060d4 <___vfprintf_internal_r+0x750>
811060c8:	d8c02a17 	ldw	r3,168(sp)
811060cc:	18c00044 	addi	r3,r3,1
811060d0:	d8c02a15 	stw	r3,168(sp)
811060d4:	90c0008c 	andi	r3,r18,2
811060d8:	d8c02b15 	stw	r3,172(sp)
811060dc:	18000326 	beq	r3,zero,811060ec <___vfprintf_internal_r+0x768>
811060e0:	d8c02a17 	ldw	r3,168(sp)
811060e4:	18c00084 	addi	r3,r3,2
811060e8:	d8c02a15 	stw	r3,168(sp)
811060ec:	90c0210c 	andi	r3,r18,132
811060f0:	d8c03015 	stw	r3,192(sp)
811060f4:	1801a31e 	bne	r3,zero,81106784 <___vfprintf_internal_r+0xe00>
811060f8:	d9003117 	ldw	r4,196(sp)
811060fc:	d8c02a17 	ldw	r3,168(sp)
81106100:	20e7c83a 	sub	r19,r4,r3
81106104:	04c19f0e 	bge	zero,r19,81106784 <___vfprintf_internal_r+0xe00>
81106108:	02400404 	movi	r9,16
8110610c:	d8c02017 	ldw	r3,128(sp)
81106110:	d8801f17 	ldw	r2,124(sp)
81106114:	4cc50d0e 	bge	r9,r19,8110754c <___vfprintf_internal_r+0x1bc8>
81106118:	016044b4 	movhi	r5,33042
8110611c:	29603884 	addi	r5,r5,-32542
81106120:	dc403b15 	stw	r17,236(sp)
81106124:	d9403515 	stw	r5,212(sp)
81106128:	9823883a 	mov	r17,r19
8110612c:	482d883a 	mov	r22,r9
81106130:	9027883a 	mov	r19,r18
81106134:	070001c4 	movi	fp,7
81106138:	8025883a 	mov	r18,r16
8110613c:	dc002c17 	ldw	r16,176(sp)
81106140:	00000306 	br	81106150 <___vfprintf_internal_r+0x7cc>
81106144:	8c7ffc04 	addi	r17,r17,-16
81106148:	42000204 	addi	r8,r8,8
8110614c:	b440130e 	bge	r22,r17,8110619c <___vfprintf_internal_r+0x818>
81106150:	012044b4 	movhi	r4,33042
81106154:	18c00404 	addi	r3,r3,16
81106158:	10800044 	addi	r2,r2,1
8110615c:	21203884 	addi	r4,r4,-32542
81106160:	41000015 	stw	r4,0(r8)
81106164:	45800115 	stw	r22,4(r8)
81106168:	d8c02015 	stw	r3,128(sp)
8110616c:	d8801f15 	stw	r2,124(sp)
81106170:	e0bff40e 	bge	fp,r2,81106144 <__reset+0xfb0e6144>
81106174:	d9801e04 	addi	r6,sp,120
81106178:	b80b883a 	mov	r5,r23
8110617c:	8009883a 	mov	r4,r16
81106180:	110cfa00 	call	8110cfa0 <__sprint_r>
81106184:	103f011e 	bne	r2,zero,81105d8c <__reset+0xfb0e5d8c>
81106188:	8c7ffc04 	addi	r17,r17,-16
8110618c:	d8c02017 	ldw	r3,128(sp)
81106190:	d8801f17 	ldw	r2,124(sp)
81106194:	da000404 	addi	r8,sp,16
81106198:	b47fed16 	blt	r22,r17,81106150 <__reset+0xfb0e6150>
8110619c:	9021883a 	mov	r16,r18
811061a0:	9825883a 	mov	r18,r19
811061a4:	8827883a 	mov	r19,r17
811061a8:	dc403b17 	ldw	r17,236(sp)
811061ac:	d9403517 	ldw	r5,212(sp)
811061b0:	98c7883a 	add	r3,r19,r3
811061b4:	10800044 	addi	r2,r2,1
811061b8:	41400015 	stw	r5,0(r8)
811061bc:	44c00115 	stw	r19,4(r8)
811061c0:	d8c02015 	stw	r3,128(sp)
811061c4:	d8801f15 	stw	r2,124(sp)
811061c8:	010001c4 	movi	r4,7
811061cc:	2082a316 	blt	r4,r2,81106c5c <___vfprintf_internal_r+0x12d8>
811061d0:	df002787 	ldb	fp,158(sp)
811061d4:	42000204 	addi	r8,r8,8
811061d8:	e0000c26 	beq	fp,zero,8110620c <___vfprintf_internal_r+0x888>
811061dc:	d8801f17 	ldw	r2,124(sp)
811061e0:	d9002784 	addi	r4,sp,158
811061e4:	18c00044 	addi	r3,r3,1
811061e8:	10800044 	addi	r2,r2,1
811061ec:	41000015 	stw	r4,0(r8)
811061f0:	01000044 	movi	r4,1
811061f4:	41000115 	stw	r4,4(r8)
811061f8:	d8c02015 	stw	r3,128(sp)
811061fc:	d8801f15 	stw	r2,124(sp)
81106200:	010001c4 	movi	r4,7
81106204:	20823c16 	blt	r4,r2,81106af8 <___vfprintf_internal_r+0x1174>
81106208:	42000204 	addi	r8,r8,8
8110620c:	d8802b17 	ldw	r2,172(sp)
81106210:	10000c26 	beq	r2,zero,81106244 <___vfprintf_internal_r+0x8c0>
81106214:	d8801f17 	ldw	r2,124(sp)
81106218:	d9002704 	addi	r4,sp,156
8110621c:	18c00084 	addi	r3,r3,2
81106220:	10800044 	addi	r2,r2,1
81106224:	41000015 	stw	r4,0(r8)
81106228:	01000084 	movi	r4,2
8110622c:	41000115 	stw	r4,4(r8)
81106230:	d8c02015 	stw	r3,128(sp)
81106234:	d8801f15 	stw	r2,124(sp)
81106238:	010001c4 	movi	r4,7
8110623c:	20823616 	blt	r4,r2,81106b18 <___vfprintf_internal_r+0x1194>
81106240:	42000204 	addi	r8,r8,8
81106244:	d9003017 	ldw	r4,192(sp)
81106248:	00802004 	movi	r2,128
8110624c:	20819926 	beq	r4,r2,811068b4 <___vfprintf_internal_r+0xf30>
81106250:	d9402917 	ldw	r5,164(sp)
81106254:	d8802e17 	ldw	r2,184(sp)
81106258:	28adc83a 	sub	r22,r5,r2
8110625c:	0580310e 	bge	zero,r22,81106324 <___vfprintf_internal_r+0x9a0>
81106260:	07000404 	movi	fp,16
81106264:	d8801f17 	ldw	r2,124(sp)
81106268:	e584140e 	bge	fp,r22,811072bc <___vfprintf_internal_r+0x1938>
8110626c:	016044b4 	movhi	r5,33042
81106270:	29603484 	addi	r5,r5,-32558
81106274:	dc402915 	stw	r17,164(sp)
81106278:	d9402b15 	stw	r5,172(sp)
8110627c:	b023883a 	mov	r17,r22
81106280:	04c001c4 	movi	r19,7
81106284:	a82d883a 	mov	r22,r21
81106288:	902b883a 	mov	r21,r18
8110628c:	8025883a 	mov	r18,r16
81106290:	dc002c17 	ldw	r16,176(sp)
81106294:	00000306 	br	811062a4 <___vfprintf_internal_r+0x920>
81106298:	8c7ffc04 	addi	r17,r17,-16
8110629c:	42000204 	addi	r8,r8,8
811062a0:	e440110e 	bge	fp,r17,811062e8 <___vfprintf_internal_r+0x964>
811062a4:	18c00404 	addi	r3,r3,16
811062a8:	10800044 	addi	r2,r2,1
811062ac:	45000015 	stw	r20,0(r8)
811062b0:	47000115 	stw	fp,4(r8)
811062b4:	d8c02015 	stw	r3,128(sp)
811062b8:	d8801f15 	stw	r2,124(sp)
811062bc:	98bff60e 	bge	r19,r2,81106298 <__reset+0xfb0e6298>
811062c0:	d9801e04 	addi	r6,sp,120
811062c4:	b80b883a 	mov	r5,r23
811062c8:	8009883a 	mov	r4,r16
811062cc:	110cfa00 	call	8110cfa0 <__sprint_r>
811062d0:	103eae1e 	bne	r2,zero,81105d8c <__reset+0xfb0e5d8c>
811062d4:	8c7ffc04 	addi	r17,r17,-16
811062d8:	d8c02017 	ldw	r3,128(sp)
811062dc:	d8801f17 	ldw	r2,124(sp)
811062e0:	da000404 	addi	r8,sp,16
811062e4:	e47fef16 	blt	fp,r17,811062a4 <__reset+0xfb0e62a4>
811062e8:	9021883a 	mov	r16,r18
811062ec:	a825883a 	mov	r18,r21
811062f0:	b02b883a 	mov	r21,r22
811062f4:	882d883a 	mov	r22,r17
811062f8:	dc402917 	ldw	r17,164(sp)
811062fc:	d9002b17 	ldw	r4,172(sp)
81106300:	1d87883a 	add	r3,r3,r22
81106304:	10800044 	addi	r2,r2,1
81106308:	41000015 	stw	r4,0(r8)
8110630c:	45800115 	stw	r22,4(r8)
81106310:	d8c02015 	stw	r3,128(sp)
81106314:	d8801f15 	stw	r2,124(sp)
81106318:	010001c4 	movi	r4,7
8110631c:	2081ee16 	blt	r4,r2,81106ad8 <___vfprintf_internal_r+0x1154>
81106320:	42000204 	addi	r8,r8,8
81106324:	9080400c 	andi	r2,r18,256
81106328:	1001181e 	bne	r2,zero,8110678c <___vfprintf_internal_r+0xe08>
8110632c:	d9402e17 	ldw	r5,184(sp)
81106330:	d8801f17 	ldw	r2,124(sp)
81106334:	44000015 	stw	r16,0(r8)
81106338:	1947883a 	add	r3,r3,r5
8110633c:	10800044 	addi	r2,r2,1
81106340:	41400115 	stw	r5,4(r8)
81106344:	d8c02015 	stw	r3,128(sp)
81106348:	d8801f15 	stw	r2,124(sp)
8110634c:	010001c4 	movi	r4,7
81106350:	2081d316 	blt	r4,r2,81106aa0 <___vfprintf_internal_r+0x111c>
81106354:	42000204 	addi	r8,r8,8
81106358:	9480010c 	andi	r18,r18,4
8110635c:	90003226 	beq	r18,zero,81106428 <___vfprintf_internal_r+0xaa4>
81106360:	d9403117 	ldw	r5,196(sp)
81106364:	d8802a17 	ldw	r2,168(sp)
81106368:	28a1c83a 	sub	r16,r5,r2
8110636c:	04002e0e 	bge	zero,r16,81106428 <___vfprintf_internal_r+0xaa4>
81106370:	04400404 	movi	r17,16
81106374:	d8801f17 	ldw	r2,124(sp)
81106378:	8c04a20e 	bge	r17,r16,81107604 <___vfprintf_internal_r+0x1c80>
8110637c:	016044b4 	movhi	r5,33042
81106380:	29603884 	addi	r5,r5,-32542
81106384:	d9403515 	stw	r5,212(sp)
81106388:	048001c4 	movi	r18,7
8110638c:	dcc02c17 	ldw	r19,176(sp)
81106390:	00000306 	br	811063a0 <___vfprintf_internal_r+0xa1c>
81106394:	843ffc04 	addi	r16,r16,-16
81106398:	42000204 	addi	r8,r8,8
8110639c:	8c00130e 	bge	r17,r16,811063ec <___vfprintf_internal_r+0xa68>
811063a0:	012044b4 	movhi	r4,33042
811063a4:	18c00404 	addi	r3,r3,16
811063a8:	10800044 	addi	r2,r2,1
811063ac:	21203884 	addi	r4,r4,-32542
811063b0:	41000015 	stw	r4,0(r8)
811063b4:	44400115 	stw	r17,4(r8)
811063b8:	d8c02015 	stw	r3,128(sp)
811063bc:	d8801f15 	stw	r2,124(sp)
811063c0:	90bff40e 	bge	r18,r2,81106394 <__reset+0xfb0e6394>
811063c4:	d9801e04 	addi	r6,sp,120
811063c8:	b80b883a 	mov	r5,r23
811063cc:	9809883a 	mov	r4,r19
811063d0:	110cfa00 	call	8110cfa0 <__sprint_r>
811063d4:	103e6d1e 	bne	r2,zero,81105d8c <__reset+0xfb0e5d8c>
811063d8:	843ffc04 	addi	r16,r16,-16
811063dc:	d8c02017 	ldw	r3,128(sp)
811063e0:	d8801f17 	ldw	r2,124(sp)
811063e4:	da000404 	addi	r8,sp,16
811063e8:	8c3fed16 	blt	r17,r16,811063a0 <__reset+0xfb0e63a0>
811063ec:	d9403517 	ldw	r5,212(sp)
811063f0:	1c07883a 	add	r3,r3,r16
811063f4:	10800044 	addi	r2,r2,1
811063f8:	41400015 	stw	r5,0(r8)
811063fc:	44000115 	stw	r16,4(r8)
81106400:	d8c02015 	stw	r3,128(sp)
81106404:	d8801f15 	stw	r2,124(sp)
81106408:	010001c4 	movi	r4,7
8110640c:	2080060e 	bge	r4,r2,81106428 <___vfprintf_internal_r+0xaa4>
81106410:	d9002c17 	ldw	r4,176(sp)
81106414:	d9801e04 	addi	r6,sp,120
81106418:	b80b883a 	mov	r5,r23
8110641c:	110cfa00 	call	8110cfa0 <__sprint_r>
81106420:	103e5a1e 	bne	r2,zero,81105d8c <__reset+0xfb0e5d8c>
81106424:	d8c02017 	ldw	r3,128(sp)
81106428:	d8803117 	ldw	r2,196(sp)
8110642c:	d9002a17 	ldw	r4,168(sp)
81106430:	1100010e 	bge	r2,r4,81106438 <___vfprintf_internal_r+0xab4>
81106434:	2005883a 	mov	r2,r4
81106438:	d9402f17 	ldw	r5,188(sp)
8110643c:	288b883a 	add	r5,r5,r2
81106440:	d9402f15 	stw	r5,188(sp)
81106444:	18019e1e 	bne	r3,zero,81106ac0 <___vfprintf_internal_r+0x113c>
81106448:	a8800007 	ldb	r2,0(r21)
8110644c:	d8001f15 	stw	zero,124(sp)
81106450:	da000404 	addi	r8,sp,16
81106454:	103d851e 	bne	r2,zero,81105a6c <__reset+0xfb0e5a6c>
81106458:	a821883a 	mov	r16,r21
8110645c:	003d9b06 	br	81105acc <__reset+0xfb0e5acc>
81106460:	18c03fcc 	andi	r3,r3,255
81106464:	1805c11e 	bne	r3,zero,81107b6c <___vfprintf_internal_r+0x21e8>
81106468:	94800414 	ori	r18,r18,16
8110646c:	9080080c 	andi	r2,r18,32
81106470:	10020c26 	beq	r2,zero,81106ca4 <___vfprintf_internal_r+0x1320>
81106474:	d8802d17 	ldw	r2,180(sp)
81106478:	d9002917 	ldw	r4,164(sp)
8110647c:	d8002785 	stb	zero,158(sp)
81106480:	10c00204 	addi	r3,r2,8
81106484:	14c00017 	ldw	r19,0(r2)
81106488:	15800117 	ldw	r22,4(r2)
8110648c:	20040f16 	blt	r4,zero,811074cc <___vfprintf_internal_r+0x1b48>
81106490:	013fdfc4 	movi	r4,-129
81106494:	9d84b03a 	or	r2,r19,r22
81106498:	d8c02d15 	stw	r3,180(sp)
8110649c:	9124703a 	and	r18,r18,r4
811064a0:	0039883a 	mov	fp,zero
811064a4:	103e891e 	bne	r2,zero,81105ecc <__reset+0xfb0e5ecc>
811064a8:	d9002917 	ldw	r4,164(sp)
811064ac:	2002c11e 	bne	r4,zero,81106fb4 <___vfprintf_internal_r+0x1630>
811064b0:	d8002915 	stw	zero,164(sp)
811064b4:	d8002e15 	stw	zero,184(sp)
811064b8:	dc001e04 	addi	r16,sp,120
811064bc:	003ef806 	br	811060a0 <__reset+0xfb0e60a0>
811064c0:	18c03fcc 	andi	r3,r3,255
811064c4:	18059d1e 	bne	r3,zero,81107b3c <___vfprintf_internal_r+0x21b8>
811064c8:	016044b4 	movhi	r5,33042
811064cc:	29602804 	addi	r5,r5,-32608
811064d0:	d9403915 	stw	r5,228(sp)
811064d4:	9080080c 	andi	r2,r18,32
811064d8:	10005226 	beq	r2,zero,81106624 <___vfprintf_internal_r+0xca0>
811064dc:	d8802d17 	ldw	r2,180(sp)
811064e0:	14c00017 	ldw	r19,0(r2)
811064e4:	15800117 	ldw	r22,4(r2)
811064e8:	10800204 	addi	r2,r2,8
811064ec:	d8802d15 	stw	r2,180(sp)
811064f0:	9080004c 	andi	r2,r18,1
811064f4:	10019026 	beq	r2,zero,81106b38 <___vfprintf_internal_r+0x11b4>
811064f8:	9d84b03a 	or	r2,r19,r22
811064fc:	10036926 	beq	r2,zero,811072a4 <___vfprintf_internal_r+0x1920>
81106500:	d8c02917 	ldw	r3,164(sp)
81106504:	00800c04 	movi	r2,48
81106508:	d8802705 	stb	r2,156(sp)
8110650c:	dc402745 	stb	r17,157(sp)
81106510:	d8002785 	stb	zero,158(sp)
81106514:	90800094 	ori	r2,r18,2
81106518:	18045d16 	blt	r3,zero,81107690 <___vfprintf_internal_r+0x1d0c>
8110651c:	00bfdfc4 	movi	r2,-129
81106520:	90a4703a 	and	r18,r18,r2
81106524:	94800094 	ori	r18,r18,2
81106528:	0039883a 	mov	fp,zero
8110652c:	d9003917 	ldw	r4,228(sp)
81106530:	dc001e04 	addi	r16,sp,120
81106534:	988003cc 	andi	r2,r19,15
81106538:	b006973a 	slli	r3,r22,28
8110653c:	2085883a 	add	r2,r4,r2
81106540:	9826d13a 	srli	r19,r19,4
81106544:	10800003 	ldbu	r2,0(r2)
81106548:	b02cd13a 	srli	r22,r22,4
8110654c:	843fffc4 	addi	r16,r16,-1
81106550:	1ce6b03a 	or	r19,r3,r19
81106554:	80800005 	stb	r2,0(r16)
81106558:	9d84b03a 	or	r2,r19,r22
8110655c:	103ff51e 	bne	r2,zero,81106534 <__reset+0xfb0e6534>
81106560:	d8c02817 	ldw	r3,160(sp)
81106564:	1c07c83a 	sub	r3,r3,r16
81106568:	d8c02e15 	stw	r3,184(sp)
8110656c:	003ecc06 	br	811060a0 <__reset+0xfb0e60a0>
81106570:	18c03fcc 	andi	r3,r3,255
81106574:	183e9f26 	beq	r3,zero,81105ff4 <__reset+0xfb0e5ff4>
81106578:	d9c02785 	stb	r7,158(sp)
8110657c:	003e9d06 	br	81105ff4 <__reset+0xfb0e5ff4>
81106580:	00c00044 	movi	r3,1
81106584:	01c00ac4 	movi	r7,43
81106588:	ac400007 	ldb	r17,0(r21)
8110658c:	003d5e06 	br	81105b08 <__reset+0xfb0e5b08>
81106590:	94800814 	ori	r18,r18,32
81106594:	ac400007 	ldb	r17,0(r21)
81106598:	003d5b06 	br	81105b08 <__reset+0xfb0e5b08>
8110659c:	d8c02d17 	ldw	r3,180(sp)
811065a0:	d8002785 	stb	zero,158(sp)
811065a4:	1c000017 	ldw	r16,0(r3)
811065a8:	1cc00104 	addi	r19,r3,4
811065ac:	80041926 	beq	r16,zero,81107614 <___vfprintf_internal_r+0x1c90>
811065b0:	d9002917 	ldw	r4,164(sp)
811065b4:	2003d016 	blt	r4,zero,811074f8 <___vfprintf_internal_r+0x1b74>
811065b8:	200d883a 	mov	r6,r4
811065bc:	000b883a 	mov	r5,zero
811065c0:	8009883a 	mov	r4,r16
811065c4:	da003d15 	stw	r8,244(sp)
811065c8:	110b1940 	call	8110b194 <memchr>
811065cc:	da003d17 	ldw	r8,244(sp)
811065d0:	10045426 	beq	r2,zero,81107724 <___vfprintf_internal_r+0x1da0>
811065d4:	1405c83a 	sub	r2,r2,r16
811065d8:	d8802e15 	stw	r2,184(sp)
811065dc:	1003cc16 	blt	r2,zero,81107510 <___vfprintf_internal_r+0x1b8c>
811065e0:	df002783 	ldbu	fp,158(sp)
811065e4:	d8802a15 	stw	r2,168(sp)
811065e8:	dcc02d15 	stw	r19,180(sp)
811065ec:	d8002915 	stw	zero,164(sp)
811065f0:	d8003215 	stw	zero,200(sp)
811065f4:	003eb006 	br	811060b8 <__reset+0xfb0e60b8>
811065f8:	18c03fcc 	andi	r3,r3,255
811065fc:	183f9b26 	beq	r3,zero,8110646c <__reset+0xfb0e646c>
81106600:	d9c02785 	stb	r7,158(sp)
81106604:	003f9906 	br	8110646c <__reset+0xfb0e646c>
81106608:	18c03fcc 	andi	r3,r3,255
8110660c:	1805551e 	bne	r3,zero,81107b64 <___vfprintf_internal_r+0x21e0>
81106610:	016044b4 	movhi	r5,33042
81106614:	29602d04 	addi	r5,r5,-32588
81106618:	d9403915 	stw	r5,228(sp)
8110661c:	9080080c 	andi	r2,r18,32
81106620:	103fae1e 	bne	r2,zero,811064dc <__reset+0xfb0e64dc>
81106624:	9080040c 	andi	r2,r18,16
81106628:	1002de26 	beq	r2,zero,811071a4 <___vfprintf_internal_r+0x1820>
8110662c:	d8c02d17 	ldw	r3,180(sp)
81106630:	002d883a 	mov	r22,zero
81106634:	1cc00017 	ldw	r19,0(r3)
81106638:	18c00104 	addi	r3,r3,4
8110663c:	d8c02d15 	stw	r3,180(sp)
81106640:	003fab06 	br	811064f0 <__reset+0xfb0e64f0>
81106644:	38803fcc 	andi	r2,r7,255
81106648:	1080201c 	xori	r2,r2,128
8110664c:	10bfe004 	addi	r2,r2,-128
81106650:	1002d21e 	bne	r2,zero,8110719c <___vfprintf_internal_r+0x1818>
81106654:	00c00044 	movi	r3,1
81106658:	01c00804 	movi	r7,32
8110665c:	ac400007 	ldb	r17,0(r21)
81106660:	003d2906 	br	81105b08 <__reset+0xfb0e5b08>
81106664:	94800054 	ori	r18,r18,1
81106668:	ac400007 	ldb	r17,0(r21)
8110666c:	003d2606 	br	81105b08 <__reset+0xfb0e5b08>
81106670:	18c03fcc 	andi	r3,r3,255
81106674:	183e0526 	beq	r3,zero,81105e8c <__reset+0xfb0e5e8c>
81106678:	d9c02785 	stb	r7,158(sp)
8110667c:	003e0306 	br	81105e8c <__reset+0xfb0e5e8c>
81106680:	94801014 	ori	r18,r18,64
81106684:	ac400007 	ldb	r17,0(r21)
81106688:	003d1f06 	br	81105b08 <__reset+0xfb0e5b08>
8110668c:	ac400007 	ldb	r17,0(r21)
81106690:	8a438726 	beq	r17,r9,811074b0 <___vfprintf_internal_r+0x1b2c>
81106694:	94800414 	ori	r18,r18,16
81106698:	003d1b06 	br	81105b08 <__reset+0xfb0e5b08>
8110669c:	18c03fcc 	andi	r3,r3,255
811066a0:	1805341e 	bne	r3,zero,81107b74 <___vfprintf_internal_r+0x21f0>
811066a4:	9080080c 	andi	r2,r18,32
811066a8:	1002cd26 	beq	r2,zero,811071e0 <___vfprintf_internal_r+0x185c>
811066ac:	d9402d17 	ldw	r5,180(sp)
811066b0:	d9002f17 	ldw	r4,188(sp)
811066b4:	28800017 	ldw	r2,0(r5)
811066b8:	2007d7fa 	srai	r3,r4,31
811066bc:	29400104 	addi	r5,r5,4
811066c0:	d9402d15 	stw	r5,180(sp)
811066c4:	11000015 	stw	r4,0(r2)
811066c8:	10c00115 	stw	r3,4(r2)
811066cc:	003ce506 	br	81105a64 <__reset+0xfb0e5a64>
811066d0:	d8c02d17 	ldw	r3,180(sp)
811066d4:	d9002d17 	ldw	r4,180(sp)
811066d8:	d8002785 	stb	zero,158(sp)
811066dc:	18800017 	ldw	r2,0(r3)
811066e0:	21000104 	addi	r4,r4,4
811066e4:	00c00044 	movi	r3,1
811066e8:	d8c02a15 	stw	r3,168(sp)
811066ec:	d8801405 	stb	r2,80(sp)
811066f0:	d9002d15 	stw	r4,180(sp)
811066f4:	d8c02e15 	stw	r3,184(sp)
811066f8:	d8002915 	stw	zero,164(sp)
811066fc:	d8003215 	stw	zero,200(sp)
81106700:	dc001404 	addi	r16,sp,80
81106704:	0039883a 	mov	fp,zero
81106708:	003e7206 	br	811060d4 <__reset+0xfb0e60d4>
8110670c:	012044b4 	movhi	r4,33042
81106710:	21202d04 	addi	r4,r4,-32588
81106714:	0039883a 	mov	fp,zero
81106718:	d9003915 	stw	r4,228(sp)
8110671c:	04401e04 	movi	r17,120
81106720:	003f8206 	br	8110652c <__reset+0xfb0e652c>
81106724:	18c03fcc 	andi	r3,r3,255
81106728:	1805061e 	bne	r3,zero,81107b44 <___vfprintf_internal_r+0x21c0>
8110672c:	883d9126 	beq	r17,zero,81105d74 <__reset+0xfb0e5d74>
81106730:	00c00044 	movi	r3,1
81106734:	d8c02a15 	stw	r3,168(sp)
81106738:	dc401405 	stb	r17,80(sp)
8110673c:	d8002785 	stb	zero,158(sp)
81106740:	003fec06 	br	811066f4 <__reset+0xfb0e66f4>
81106744:	016044b4 	movhi	r5,33042
81106748:	29602d04 	addi	r5,r5,-32588
8110674c:	d9403915 	stw	r5,228(sp)
81106750:	d8c02d15 	stw	r3,180(sp)
81106754:	1025883a 	mov	r18,r2
81106758:	04401e04 	movi	r17,120
8110675c:	9d84b03a 	or	r2,r19,r22
81106760:	1000fc1e 	bne	r2,zero,81106b54 <___vfprintf_internal_r+0x11d0>
81106764:	0039883a 	mov	fp,zero
81106768:	00800084 	movi	r2,2
8110676c:	10803fcc 	andi	r2,r2,255
81106770:	00c00044 	movi	r3,1
81106774:	10c20f26 	beq	r2,r3,81106fb4 <___vfprintf_internal_r+0x1630>
81106778:	00c00084 	movi	r3,2
8110677c:	10fd6326 	beq	r2,r3,81105d0c <__reset+0xfb0e5d0c>
81106780:	003e2d06 	br	81106038 <__reset+0xfb0e6038>
81106784:	d8c02017 	ldw	r3,128(sp)
81106788:	003e9306 	br	811061d8 <__reset+0xfb0e61d8>
8110678c:	00801944 	movi	r2,101
81106790:	14407e0e 	bge	r2,r17,8110698c <___vfprintf_internal_r+0x1008>
81106794:	d9003617 	ldw	r4,216(sp)
81106798:	d9403817 	ldw	r5,224(sp)
8110679c:	000d883a 	mov	r6,zero
811067a0:	000f883a 	mov	r7,zero
811067a4:	d8c03c15 	stw	r3,240(sp)
811067a8:	da003d15 	stw	r8,244(sp)
811067ac:	1110c180 	call	81110c18 <__eqdf2>
811067b0:	d8c03c17 	ldw	r3,240(sp)
811067b4:	da003d17 	ldw	r8,244(sp)
811067b8:	1000f71e 	bne	r2,zero,81106b98 <___vfprintf_internal_r+0x1214>
811067bc:	d8801f17 	ldw	r2,124(sp)
811067c0:	012044b4 	movhi	r4,33042
811067c4:	21203404 	addi	r4,r4,-32560
811067c8:	18c00044 	addi	r3,r3,1
811067cc:	10800044 	addi	r2,r2,1
811067d0:	41000015 	stw	r4,0(r8)
811067d4:	01000044 	movi	r4,1
811067d8:	41000115 	stw	r4,4(r8)
811067dc:	d8c02015 	stw	r3,128(sp)
811067e0:	d8801f15 	stw	r2,124(sp)
811067e4:	010001c4 	movi	r4,7
811067e8:	2082b816 	blt	r4,r2,811072cc <___vfprintf_internal_r+0x1948>
811067ec:	42000204 	addi	r8,r8,8
811067f0:	d8802617 	ldw	r2,152(sp)
811067f4:	d9403317 	ldw	r5,204(sp)
811067f8:	11400216 	blt	r2,r5,81106804 <___vfprintf_internal_r+0xe80>
811067fc:	9080004c 	andi	r2,r18,1
81106800:	103ed526 	beq	r2,zero,81106358 <__reset+0xfb0e6358>
81106804:	d8803717 	ldw	r2,220(sp)
81106808:	d9003417 	ldw	r4,208(sp)
8110680c:	d9403717 	ldw	r5,220(sp)
81106810:	1887883a 	add	r3,r3,r2
81106814:	d8801f17 	ldw	r2,124(sp)
81106818:	41000015 	stw	r4,0(r8)
8110681c:	41400115 	stw	r5,4(r8)
81106820:	10800044 	addi	r2,r2,1
81106824:	d8c02015 	stw	r3,128(sp)
81106828:	d8801f15 	stw	r2,124(sp)
8110682c:	010001c4 	movi	r4,7
81106830:	20832916 	blt	r4,r2,811074d8 <___vfprintf_internal_r+0x1b54>
81106834:	42000204 	addi	r8,r8,8
81106838:	d8803317 	ldw	r2,204(sp)
8110683c:	143fffc4 	addi	r16,r2,-1
81106840:	043ec50e 	bge	zero,r16,81106358 <__reset+0xfb0e6358>
81106844:	04400404 	movi	r17,16
81106848:	d8801f17 	ldw	r2,124(sp)
8110684c:	8c00880e 	bge	r17,r16,81106a70 <___vfprintf_internal_r+0x10ec>
81106850:	016044b4 	movhi	r5,33042
81106854:	29603484 	addi	r5,r5,-32558
81106858:	d9402b15 	stw	r5,172(sp)
8110685c:	058001c4 	movi	r22,7
81106860:	dcc02c17 	ldw	r19,176(sp)
81106864:	00000306 	br	81106874 <___vfprintf_internal_r+0xef0>
81106868:	42000204 	addi	r8,r8,8
8110686c:	843ffc04 	addi	r16,r16,-16
81106870:	8c00820e 	bge	r17,r16,81106a7c <___vfprintf_internal_r+0x10f8>
81106874:	18c00404 	addi	r3,r3,16
81106878:	10800044 	addi	r2,r2,1
8110687c:	45000015 	stw	r20,0(r8)
81106880:	44400115 	stw	r17,4(r8)
81106884:	d8c02015 	stw	r3,128(sp)
81106888:	d8801f15 	stw	r2,124(sp)
8110688c:	b0bff60e 	bge	r22,r2,81106868 <__reset+0xfb0e6868>
81106890:	d9801e04 	addi	r6,sp,120
81106894:	b80b883a 	mov	r5,r23
81106898:	9809883a 	mov	r4,r19
8110689c:	110cfa00 	call	8110cfa0 <__sprint_r>
811068a0:	103d3a1e 	bne	r2,zero,81105d8c <__reset+0xfb0e5d8c>
811068a4:	d8c02017 	ldw	r3,128(sp)
811068a8:	d8801f17 	ldw	r2,124(sp)
811068ac:	da000404 	addi	r8,sp,16
811068b0:	003fee06 	br	8110686c <__reset+0xfb0e686c>
811068b4:	d9403117 	ldw	r5,196(sp)
811068b8:	d8802a17 	ldw	r2,168(sp)
811068bc:	28adc83a 	sub	r22,r5,r2
811068c0:	05be630e 	bge	zero,r22,81106250 <__reset+0xfb0e6250>
811068c4:	07000404 	movi	fp,16
811068c8:	d8801f17 	ldw	r2,124(sp)
811068cc:	e5838f0e 	bge	fp,r22,8110770c <___vfprintf_internal_r+0x1d88>
811068d0:	016044b4 	movhi	r5,33042
811068d4:	29603484 	addi	r5,r5,-32558
811068d8:	dc403015 	stw	r17,192(sp)
811068dc:	d9402b15 	stw	r5,172(sp)
811068e0:	b023883a 	mov	r17,r22
811068e4:	04c001c4 	movi	r19,7
811068e8:	a82d883a 	mov	r22,r21
811068ec:	902b883a 	mov	r21,r18
811068f0:	8025883a 	mov	r18,r16
811068f4:	dc002c17 	ldw	r16,176(sp)
811068f8:	00000306 	br	81106908 <___vfprintf_internal_r+0xf84>
811068fc:	8c7ffc04 	addi	r17,r17,-16
81106900:	42000204 	addi	r8,r8,8
81106904:	e440110e 	bge	fp,r17,8110694c <___vfprintf_internal_r+0xfc8>
81106908:	18c00404 	addi	r3,r3,16
8110690c:	10800044 	addi	r2,r2,1
81106910:	45000015 	stw	r20,0(r8)
81106914:	47000115 	stw	fp,4(r8)
81106918:	d8c02015 	stw	r3,128(sp)
8110691c:	d8801f15 	stw	r2,124(sp)
81106920:	98bff60e 	bge	r19,r2,811068fc <__reset+0xfb0e68fc>
81106924:	d9801e04 	addi	r6,sp,120
81106928:	b80b883a 	mov	r5,r23
8110692c:	8009883a 	mov	r4,r16
81106930:	110cfa00 	call	8110cfa0 <__sprint_r>
81106934:	103d151e 	bne	r2,zero,81105d8c <__reset+0xfb0e5d8c>
81106938:	8c7ffc04 	addi	r17,r17,-16
8110693c:	d8c02017 	ldw	r3,128(sp)
81106940:	d8801f17 	ldw	r2,124(sp)
81106944:	da000404 	addi	r8,sp,16
81106948:	e47fef16 	blt	fp,r17,81106908 <__reset+0xfb0e6908>
8110694c:	9021883a 	mov	r16,r18
81106950:	a825883a 	mov	r18,r21
81106954:	b02b883a 	mov	r21,r22
81106958:	882d883a 	mov	r22,r17
8110695c:	dc403017 	ldw	r17,192(sp)
81106960:	d9002b17 	ldw	r4,172(sp)
81106964:	1d87883a 	add	r3,r3,r22
81106968:	10800044 	addi	r2,r2,1
8110696c:	41000015 	stw	r4,0(r8)
81106970:	45800115 	stw	r22,4(r8)
81106974:	d8c02015 	stw	r3,128(sp)
81106978:	d8801f15 	stw	r2,124(sp)
8110697c:	010001c4 	movi	r4,7
81106980:	20818e16 	blt	r4,r2,81106fbc <___vfprintf_internal_r+0x1638>
81106984:	42000204 	addi	r8,r8,8
81106988:	003e3106 	br	81106250 <__reset+0xfb0e6250>
8110698c:	d9403317 	ldw	r5,204(sp)
81106990:	00800044 	movi	r2,1
81106994:	18c00044 	addi	r3,r3,1
81106998:	1141530e 	bge	r2,r5,81106ee8 <___vfprintf_internal_r+0x1564>
8110699c:	dc401f17 	ldw	r17,124(sp)
811069a0:	00800044 	movi	r2,1
811069a4:	40800115 	stw	r2,4(r8)
811069a8:	8c400044 	addi	r17,r17,1
811069ac:	44000015 	stw	r16,0(r8)
811069b0:	d8c02015 	stw	r3,128(sp)
811069b4:	dc401f15 	stw	r17,124(sp)
811069b8:	008001c4 	movi	r2,7
811069bc:	14416b16 	blt	r2,r17,81106f6c <___vfprintf_internal_r+0x15e8>
811069c0:	42000204 	addi	r8,r8,8
811069c4:	d8803717 	ldw	r2,220(sp)
811069c8:	d9003417 	ldw	r4,208(sp)
811069cc:	8c400044 	addi	r17,r17,1
811069d0:	10c7883a 	add	r3,r2,r3
811069d4:	40800115 	stw	r2,4(r8)
811069d8:	41000015 	stw	r4,0(r8)
811069dc:	d8c02015 	stw	r3,128(sp)
811069e0:	dc401f15 	stw	r17,124(sp)
811069e4:	008001c4 	movi	r2,7
811069e8:	14416916 	blt	r2,r17,81106f90 <___vfprintf_internal_r+0x160c>
811069ec:	45800204 	addi	r22,r8,8
811069f0:	d9003617 	ldw	r4,216(sp)
811069f4:	d9403817 	ldw	r5,224(sp)
811069f8:	000d883a 	mov	r6,zero
811069fc:	000f883a 	mov	r7,zero
81106a00:	d8c03c15 	stw	r3,240(sp)
81106a04:	1110c180 	call	81110c18 <__eqdf2>
81106a08:	d8c03c17 	ldw	r3,240(sp)
81106a0c:	1000bc26 	beq	r2,zero,81106d00 <___vfprintf_internal_r+0x137c>
81106a10:	d9403317 	ldw	r5,204(sp)
81106a14:	84000044 	addi	r16,r16,1
81106a18:	8c400044 	addi	r17,r17,1
81106a1c:	28bfffc4 	addi	r2,r5,-1
81106a20:	1887883a 	add	r3,r3,r2
81106a24:	b0800115 	stw	r2,4(r22)
81106a28:	b4000015 	stw	r16,0(r22)
81106a2c:	d8c02015 	stw	r3,128(sp)
81106a30:	dc401f15 	stw	r17,124(sp)
81106a34:	008001c4 	movi	r2,7
81106a38:	14414316 	blt	r2,r17,81106f48 <___vfprintf_internal_r+0x15c4>
81106a3c:	b5800204 	addi	r22,r22,8
81106a40:	d9003a17 	ldw	r4,232(sp)
81106a44:	df0022c4 	addi	fp,sp,139
81106a48:	8c400044 	addi	r17,r17,1
81106a4c:	20c7883a 	add	r3,r4,r3
81106a50:	b7000015 	stw	fp,0(r22)
81106a54:	b1000115 	stw	r4,4(r22)
81106a58:	d8c02015 	stw	r3,128(sp)
81106a5c:	dc401f15 	stw	r17,124(sp)
81106a60:	008001c4 	movi	r2,7
81106a64:	14400e16 	blt	r2,r17,81106aa0 <___vfprintf_internal_r+0x111c>
81106a68:	b2000204 	addi	r8,r22,8
81106a6c:	003e3a06 	br	81106358 <__reset+0xfb0e6358>
81106a70:	012044b4 	movhi	r4,33042
81106a74:	21203484 	addi	r4,r4,-32558
81106a78:	d9002b15 	stw	r4,172(sp)
81106a7c:	d9002b17 	ldw	r4,172(sp)
81106a80:	1c07883a 	add	r3,r3,r16
81106a84:	44000115 	stw	r16,4(r8)
81106a88:	41000015 	stw	r4,0(r8)
81106a8c:	10800044 	addi	r2,r2,1
81106a90:	d8c02015 	stw	r3,128(sp)
81106a94:	d8801f15 	stw	r2,124(sp)
81106a98:	010001c4 	movi	r4,7
81106a9c:	20be2d0e 	bge	r4,r2,81106354 <__reset+0xfb0e6354>
81106aa0:	d9002c17 	ldw	r4,176(sp)
81106aa4:	d9801e04 	addi	r6,sp,120
81106aa8:	b80b883a 	mov	r5,r23
81106aac:	110cfa00 	call	8110cfa0 <__sprint_r>
81106ab0:	103cb61e 	bne	r2,zero,81105d8c <__reset+0xfb0e5d8c>
81106ab4:	d8c02017 	ldw	r3,128(sp)
81106ab8:	da000404 	addi	r8,sp,16
81106abc:	003e2606 	br	81106358 <__reset+0xfb0e6358>
81106ac0:	d9002c17 	ldw	r4,176(sp)
81106ac4:	d9801e04 	addi	r6,sp,120
81106ac8:	b80b883a 	mov	r5,r23
81106acc:	110cfa00 	call	8110cfa0 <__sprint_r>
81106ad0:	103e5d26 	beq	r2,zero,81106448 <__reset+0xfb0e6448>
81106ad4:	003cad06 	br	81105d8c <__reset+0xfb0e5d8c>
81106ad8:	d9002c17 	ldw	r4,176(sp)
81106adc:	d9801e04 	addi	r6,sp,120
81106ae0:	b80b883a 	mov	r5,r23
81106ae4:	110cfa00 	call	8110cfa0 <__sprint_r>
81106ae8:	103ca81e 	bne	r2,zero,81105d8c <__reset+0xfb0e5d8c>
81106aec:	d8c02017 	ldw	r3,128(sp)
81106af0:	da000404 	addi	r8,sp,16
81106af4:	003e0b06 	br	81106324 <__reset+0xfb0e6324>
81106af8:	d9002c17 	ldw	r4,176(sp)
81106afc:	d9801e04 	addi	r6,sp,120
81106b00:	b80b883a 	mov	r5,r23
81106b04:	110cfa00 	call	8110cfa0 <__sprint_r>
81106b08:	103ca01e 	bne	r2,zero,81105d8c <__reset+0xfb0e5d8c>
81106b0c:	d8c02017 	ldw	r3,128(sp)
81106b10:	da000404 	addi	r8,sp,16
81106b14:	003dbd06 	br	8110620c <__reset+0xfb0e620c>
81106b18:	d9002c17 	ldw	r4,176(sp)
81106b1c:	d9801e04 	addi	r6,sp,120
81106b20:	b80b883a 	mov	r5,r23
81106b24:	110cfa00 	call	8110cfa0 <__sprint_r>
81106b28:	103c981e 	bne	r2,zero,81105d8c <__reset+0xfb0e5d8c>
81106b2c:	d8c02017 	ldw	r3,128(sp)
81106b30:	da000404 	addi	r8,sp,16
81106b34:	003dc306 	br	81106244 <__reset+0xfb0e6244>
81106b38:	d8802917 	ldw	r2,164(sp)
81106b3c:	d8002785 	stb	zero,158(sp)
81106b40:	103f0616 	blt	r2,zero,8110675c <__reset+0xfb0e675c>
81106b44:	00ffdfc4 	movi	r3,-129
81106b48:	9d84b03a 	or	r2,r19,r22
81106b4c:	90e4703a 	and	r18,r18,r3
81106b50:	103c6b26 	beq	r2,zero,81105d00 <__reset+0xfb0e5d00>
81106b54:	0039883a 	mov	fp,zero
81106b58:	003e7406 	br	8110652c <__reset+0xfb0e652c>
81106b5c:	9080040c 	andi	r2,r18,16
81106b60:	1001b326 	beq	r2,zero,81107230 <___vfprintf_internal_r+0x18ac>
81106b64:	d9002d17 	ldw	r4,180(sp)
81106b68:	d9402917 	ldw	r5,164(sp)
81106b6c:	d8002785 	stb	zero,158(sp)
81106b70:	20800104 	addi	r2,r4,4
81106b74:	24c00017 	ldw	r19,0(r4)
81106b78:	002d883a 	mov	r22,zero
81106b7c:	2801b516 	blt	r5,zero,81107254 <___vfprintf_internal_r+0x18d0>
81106b80:	00ffdfc4 	movi	r3,-129
81106b84:	d8802d15 	stw	r2,180(sp)
81106b88:	90e4703a 	and	r18,r18,r3
81106b8c:	983d2726 	beq	r19,zero,8110602c <__reset+0xfb0e602c>
81106b90:	0039883a 	mov	fp,zero
81106b94:	003d2a06 	br	81106040 <__reset+0xfb0e6040>
81106b98:	dc402617 	ldw	r17,152(sp)
81106b9c:	0441d30e 	bge	zero,r17,811072ec <___vfprintf_internal_r+0x1968>
81106ba0:	dc403217 	ldw	r17,200(sp)
81106ba4:	d8803317 	ldw	r2,204(sp)
81106ba8:	1440010e 	bge	r2,r17,81106bb0 <___vfprintf_internal_r+0x122c>
81106bac:	1023883a 	mov	r17,r2
81106bb0:	04400a0e 	bge	zero,r17,81106bdc <___vfprintf_internal_r+0x1258>
81106bb4:	d8801f17 	ldw	r2,124(sp)
81106bb8:	1c47883a 	add	r3,r3,r17
81106bbc:	44000015 	stw	r16,0(r8)
81106bc0:	10800044 	addi	r2,r2,1
81106bc4:	44400115 	stw	r17,4(r8)
81106bc8:	d8c02015 	stw	r3,128(sp)
81106bcc:	d8801f15 	stw	r2,124(sp)
81106bd0:	010001c4 	movi	r4,7
81106bd4:	20826516 	blt	r4,r2,8110756c <___vfprintf_internal_r+0x1be8>
81106bd8:	42000204 	addi	r8,r8,8
81106bdc:	88026116 	blt	r17,zero,81107564 <___vfprintf_internal_r+0x1be0>
81106be0:	d9003217 	ldw	r4,200(sp)
81106be4:	2463c83a 	sub	r17,r4,r17
81106be8:	04407b0e 	bge	zero,r17,81106dd8 <___vfprintf_internal_r+0x1454>
81106bec:	05800404 	movi	r22,16
81106bf0:	d8801f17 	ldw	r2,124(sp)
81106bf4:	b4419d0e 	bge	r22,r17,8110726c <___vfprintf_internal_r+0x18e8>
81106bf8:	012044b4 	movhi	r4,33042
81106bfc:	21203484 	addi	r4,r4,-32558
81106c00:	d9002b15 	stw	r4,172(sp)
81106c04:	070001c4 	movi	fp,7
81106c08:	dcc02c17 	ldw	r19,176(sp)
81106c0c:	00000306 	br	81106c1c <___vfprintf_internal_r+0x1298>
81106c10:	42000204 	addi	r8,r8,8
81106c14:	8c7ffc04 	addi	r17,r17,-16
81106c18:	b441970e 	bge	r22,r17,81107278 <___vfprintf_internal_r+0x18f4>
81106c1c:	18c00404 	addi	r3,r3,16
81106c20:	10800044 	addi	r2,r2,1
81106c24:	45000015 	stw	r20,0(r8)
81106c28:	45800115 	stw	r22,4(r8)
81106c2c:	d8c02015 	stw	r3,128(sp)
81106c30:	d8801f15 	stw	r2,124(sp)
81106c34:	e0bff60e 	bge	fp,r2,81106c10 <__reset+0xfb0e6c10>
81106c38:	d9801e04 	addi	r6,sp,120
81106c3c:	b80b883a 	mov	r5,r23
81106c40:	9809883a 	mov	r4,r19
81106c44:	110cfa00 	call	8110cfa0 <__sprint_r>
81106c48:	103c501e 	bne	r2,zero,81105d8c <__reset+0xfb0e5d8c>
81106c4c:	d8c02017 	ldw	r3,128(sp)
81106c50:	d8801f17 	ldw	r2,124(sp)
81106c54:	da000404 	addi	r8,sp,16
81106c58:	003fee06 	br	81106c14 <__reset+0xfb0e6c14>
81106c5c:	d9002c17 	ldw	r4,176(sp)
81106c60:	d9801e04 	addi	r6,sp,120
81106c64:	b80b883a 	mov	r5,r23
81106c68:	110cfa00 	call	8110cfa0 <__sprint_r>
81106c6c:	103c471e 	bne	r2,zero,81105d8c <__reset+0xfb0e5d8c>
81106c70:	d8c02017 	ldw	r3,128(sp)
81106c74:	df002787 	ldb	fp,158(sp)
81106c78:	da000404 	addi	r8,sp,16
81106c7c:	003d5606 	br	811061d8 <__reset+0xfb0e61d8>
81106c80:	9080040c 	andi	r2,r18,16
81106c84:	10016126 	beq	r2,zero,8110720c <___vfprintf_internal_r+0x1888>
81106c88:	d8802d17 	ldw	r2,180(sp)
81106c8c:	14c00017 	ldw	r19,0(r2)
81106c90:	10800104 	addi	r2,r2,4
81106c94:	d8802d15 	stw	r2,180(sp)
81106c98:	982dd7fa 	srai	r22,r19,31
81106c9c:	b005883a 	mov	r2,r22
81106ca0:	003c8206 	br	81105eac <__reset+0xfb0e5eac>
81106ca4:	9080040c 	andi	r2,r18,16
81106ca8:	10003526 	beq	r2,zero,81106d80 <___vfprintf_internal_r+0x13fc>
81106cac:	d9402d17 	ldw	r5,180(sp)
81106cb0:	d8c02917 	ldw	r3,164(sp)
81106cb4:	d8002785 	stb	zero,158(sp)
81106cb8:	28800104 	addi	r2,r5,4
81106cbc:	2cc00017 	ldw	r19,0(r5)
81106cc0:	002d883a 	mov	r22,zero
81106cc4:	18003716 	blt	r3,zero,81106da4 <___vfprintf_internal_r+0x1420>
81106cc8:	00ffdfc4 	movi	r3,-129
81106ccc:	d8802d15 	stw	r2,180(sp)
81106cd0:	90e4703a 	and	r18,r18,r3
81106cd4:	0039883a 	mov	fp,zero
81106cd8:	983df326 	beq	r19,zero,811064a8 <__reset+0xfb0e64a8>
81106cdc:	00800244 	movi	r2,9
81106ce0:	14fc7b36 	bltu	r2,r19,81105ed0 <__reset+0xfb0e5ed0>
81106ce4:	d8c02817 	ldw	r3,160(sp)
81106ce8:	dc001dc4 	addi	r16,sp,119
81106cec:	9cc00c04 	addi	r19,r19,48
81106cf0:	1c07c83a 	sub	r3,r3,r16
81106cf4:	dcc01dc5 	stb	r19,119(sp)
81106cf8:	d8c02e15 	stw	r3,184(sp)
81106cfc:	003ce806 	br	811060a0 <__reset+0xfb0e60a0>
81106d00:	d8803317 	ldw	r2,204(sp)
81106d04:	143fffc4 	addi	r16,r2,-1
81106d08:	043f4d0e 	bge	zero,r16,81106a40 <__reset+0xfb0e6a40>
81106d0c:	07000404 	movi	fp,16
81106d10:	e400810e 	bge	fp,r16,81106f18 <___vfprintf_internal_r+0x1594>
81106d14:	016044b4 	movhi	r5,33042
81106d18:	29603484 	addi	r5,r5,-32558
81106d1c:	d9402b15 	stw	r5,172(sp)
81106d20:	01c001c4 	movi	r7,7
81106d24:	dcc02c17 	ldw	r19,176(sp)
81106d28:	00000306 	br	81106d38 <___vfprintf_internal_r+0x13b4>
81106d2c:	b5800204 	addi	r22,r22,8
81106d30:	843ffc04 	addi	r16,r16,-16
81106d34:	e4007b0e 	bge	fp,r16,81106f24 <___vfprintf_internal_r+0x15a0>
81106d38:	18c00404 	addi	r3,r3,16
81106d3c:	8c400044 	addi	r17,r17,1
81106d40:	b5000015 	stw	r20,0(r22)
81106d44:	b7000115 	stw	fp,4(r22)
81106d48:	d8c02015 	stw	r3,128(sp)
81106d4c:	dc401f15 	stw	r17,124(sp)
81106d50:	3c7ff60e 	bge	r7,r17,81106d2c <__reset+0xfb0e6d2c>
81106d54:	d9801e04 	addi	r6,sp,120
81106d58:	b80b883a 	mov	r5,r23
81106d5c:	9809883a 	mov	r4,r19
81106d60:	d9c03c15 	stw	r7,240(sp)
81106d64:	110cfa00 	call	8110cfa0 <__sprint_r>
81106d68:	d9c03c17 	ldw	r7,240(sp)
81106d6c:	103c071e 	bne	r2,zero,81105d8c <__reset+0xfb0e5d8c>
81106d70:	d8c02017 	ldw	r3,128(sp)
81106d74:	dc401f17 	ldw	r17,124(sp)
81106d78:	dd800404 	addi	r22,sp,16
81106d7c:	003fec06 	br	81106d30 <__reset+0xfb0e6d30>
81106d80:	9080100c 	andi	r2,r18,64
81106d84:	d8002785 	stb	zero,158(sp)
81106d88:	10010e26 	beq	r2,zero,811071c4 <___vfprintf_internal_r+0x1840>
81106d8c:	d9002d17 	ldw	r4,180(sp)
81106d90:	d9402917 	ldw	r5,164(sp)
81106d94:	002d883a 	mov	r22,zero
81106d98:	20800104 	addi	r2,r4,4
81106d9c:	24c0000b 	ldhu	r19,0(r4)
81106da0:	283fc90e 	bge	r5,zero,81106cc8 <__reset+0xfb0e6cc8>
81106da4:	d8802d15 	stw	r2,180(sp)
81106da8:	0039883a 	mov	fp,zero
81106dac:	9d84b03a 	or	r2,r19,r22
81106db0:	103c461e 	bne	r2,zero,81105ecc <__reset+0xfb0e5ecc>
81106db4:	00800044 	movi	r2,1
81106db8:	003e6c06 	br	8110676c <__reset+0xfb0e676c>
81106dbc:	d9002c17 	ldw	r4,176(sp)
81106dc0:	d9801e04 	addi	r6,sp,120
81106dc4:	b80b883a 	mov	r5,r23
81106dc8:	110cfa00 	call	8110cfa0 <__sprint_r>
81106dcc:	103bef1e 	bne	r2,zero,81105d8c <__reset+0xfb0e5d8c>
81106dd0:	d8c02017 	ldw	r3,128(sp)
81106dd4:	da000404 	addi	r8,sp,16
81106dd8:	d9003217 	ldw	r4,200(sp)
81106ddc:	d8802617 	ldw	r2,152(sp)
81106de0:	d9403317 	ldw	r5,204(sp)
81106de4:	8123883a 	add	r17,r16,r4
81106de8:	11400216 	blt	r2,r5,81106df4 <___vfprintf_internal_r+0x1470>
81106dec:	9100004c 	andi	r4,r18,1
81106df0:	20000d26 	beq	r4,zero,81106e28 <___vfprintf_internal_r+0x14a4>
81106df4:	d9003717 	ldw	r4,220(sp)
81106df8:	d9403417 	ldw	r5,208(sp)
81106dfc:	1907883a 	add	r3,r3,r4
81106e00:	d9001f17 	ldw	r4,124(sp)
81106e04:	41400015 	stw	r5,0(r8)
81106e08:	d9403717 	ldw	r5,220(sp)
81106e0c:	21000044 	addi	r4,r4,1
81106e10:	d8c02015 	stw	r3,128(sp)
81106e14:	41400115 	stw	r5,4(r8)
81106e18:	d9001f15 	stw	r4,124(sp)
81106e1c:	014001c4 	movi	r5,7
81106e20:	2901e816 	blt	r5,r4,811075c4 <___vfprintf_internal_r+0x1c40>
81106e24:	42000204 	addi	r8,r8,8
81106e28:	d9003317 	ldw	r4,204(sp)
81106e2c:	8121883a 	add	r16,r16,r4
81106e30:	2085c83a 	sub	r2,r4,r2
81106e34:	8461c83a 	sub	r16,r16,r17
81106e38:	1400010e 	bge	r2,r16,81106e40 <___vfprintf_internal_r+0x14bc>
81106e3c:	1021883a 	mov	r16,r2
81106e40:	04000a0e 	bge	zero,r16,81106e6c <___vfprintf_internal_r+0x14e8>
81106e44:	d9001f17 	ldw	r4,124(sp)
81106e48:	1c07883a 	add	r3,r3,r16
81106e4c:	44400015 	stw	r17,0(r8)
81106e50:	21000044 	addi	r4,r4,1
81106e54:	44000115 	stw	r16,4(r8)
81106e58:	d8c02015 	stw	r3,128(sp)
81106e5c:	d9001f15 	stw	r4,124(sp)
81106e60:	014001c4 	movi	r5,7
81106e64:	2901fb16 	blt	r5,r4,81107654 <___vfprintf_internal_r+0x1cd0>
81106e68:	42000204 	addi	r8,r8,8
81106e6c:	8001f716 	blt	r16,zero,8110764c <___vfprintf_internal_r+0x1cc8>
81106e70:	1421c83a 	sub	r16,r2,r16
81106e74:	043d380e 	bge	zero,r16,81106358 <__reset+0xfb0e6358>
81106e78:	04400404 	movi	r17,16
81106e7c:	d8801f17 	ldw	r2,124(sp)
81106e80:	8c3efb0e 	bge	r17,r16,81106a70 <__reset+0xfb0e6a70>
81106e84:	016044b4 	movhi	r5,33042
81106e88:	29603484 	addi	r5,r5,-32558
81106e8c:	d9402b15 	stw	r5,172(sp)
81106e90:	058001c4 	movi	r22,7
81106e94:	dcc02c17 	ldw	r19,176(sp)
81106e98:	00000306 	br	81106ea8 <___vfprintf_internal_r+0x1524>
81106e9c:	42000204 	addi	r8,r8,8
81106ea0:	843ffc04 	addi	r16,r16,-16
81106ea4:	8c3ef50e 	bge	r17,r16,81106a7c <__reset+0xfb0e6a7c>
81106ea8:	18c00404 	addi	r3,r3,16
81106eac:	10800044 	addi	r2,r2,1
81106eb0:	45000015 	stw	r20,0(r8)
81106eb4:	44400115 	stw	r17,4(r8)
81106eb8:	d8c02015 	stw	r3,128(sp)
81106ebc:	d8801f15 	stw	r2,124(sp)
81106ec0:	b0bff60e 	bge	r22,r2,81106e9c <__reset+0xfb0e6e9c>
81106ec4:	d9801e04 	addi	r6,sp,120
81106ec8:	b80b883a 	mov	r5,r23
81106ecc:	9809883a 	mov	r4,r19
81106ed0:	110cfa00 	call	8110cfa0 <__sprint_r>
81106ed4:	103bad1e 	bne	r2,zero,81105d8c <__reset+0xfb0e5d8c>
81106ed8:	d8c02017 	ldw	r3,128(sp)
81106edc:	d8801f17 	ldw	r2,124(sp)
81106ee0:	da000404 	addi	r8,sp,16
81106ee4:	003fee06 	br	81106ea0 <__reset+0xfb0e6ea0>
81106ee8:	9088703a 	and	r4,r18,r2
81106eec:	203eab1e 	bne	r4,zero,8110699c <__reset+0xfb0e699c>
81106ef0:	dc401f17 	ldw	r17,124(sp)
81106ef4:	40800115 	stw	r2,4(r8)
81106ef8:	44000015 	stw	r16,0(r8)
81106efc:	8c400044 	addi	r17,r17,1
81106f00:	d8c02015 	stw	r3,128(sp)
81106f04:	dc401f15 	stw	r17,124(sp)
81106f08:	008001c4 	movi	r2,7
81106f0c:	14400e16 	blt	r2,r17,81106f48 <___vfprintf_internal_r+0x15c4>
81106f10:	45800204 	addi	r22,r8,8
81106f14:	003eca06 	br	81106a40 <__reset+0xfb0e6a40>
81106f18:	012044b4 	movhi	r4,33042
81106f1c:	21203484 	addi	r4,r4,-32558
81106f20:	d9002b15 	stw	r4,172(sp)
81106f24:	d8802b17 	ldw	r2,172(sp)
81106f28:	1c07883a 	add	r3,r3,r16
81106f2c:	8c400044 	addi	r17,r17,1
81106f30:	b0800015 	stw	r2,0(r22)
81106f34:	b4000115 	stw	r16,4(r22)
81106f38:	d8c02015 	stw	r3,128(sp)
81106f3c:	dc401f15 	stw	r17,124(sp)
81106f40:	008001c4 	movi	r2,7
81106f44:	147ebd0e 	bge	r2,r17,81106a3c <__reset+0xfb0e6a3c>
81106f48:	d9002c17 	ldw	r4,176(sp)
81106f4c:	d9801e04 	addi	r6,sp,120
81106f50:	b80b883a 	mov	r5,r23
81106f54:	110cfa00 	call	8110cfa0 <__sprint_r>
81106f58:	103b8c1e 	bne	r2,zero,81105d8c <__reset+0xfb0e5d8c>
81106f5c:	d8c02017 	ldw	r3,128(sp)
81106f60:	dc401f17 	ldw	r17,124(sp)
81106f64:	dd800404 	addi	r22,sp,16
81106f68:	003eb506 	br	81106a40 <__reset+0xfb0e6a40>
81106f6c:	d9002c17 	ldw	r4,176(sp)
81106f70:	d9801e04 	addi	r6,sp,120
81106f74:	b80b883a 	mov	r5,r23
81106f78:	110cfa00 	call	8110cfa0 <__sprint_r>
81106f7c:	103b831e 	bne	r2,zero,81105d8c <__reset+0xfb0e5d8c>
81106f80:	d8c02017 	ldw	r3,128(sp)
81106f84:	dc401f17 	ldw	r17,124(sp)
81106f88:	da000404 	addi	r8,sp,16
81106f8c:	003e8d06 	br	811069c4 <__reset+0xfb0e69c4>
81106f90:	d9002c17 	ldw	r4,176(sp)
81106f94:	d9801e04 	addi	r6,sp,120
81106f98:	b80b883a 	mov	r5,r23
81106f9c:	110cfa00 	call	8110cfa0 <__sprint_r>
81106fa0:	103b7a1e 	bne	r2,zero,81105d8c <__reset+0xfb0e5d8c>
81106fa4:	d8c02017 	ldw	r3,128(sp)
81106fa8:	dc401f17 	ldw	r17,124(sp)
81106fac:	dd800404 	addi	r22,sp,16
81106fb0:	003e8f06 	br	811069f0 <__reset+0xfb0e69f0>
81106fb4:	0027883a 	mov	r19,zero
81106fb8:	003f4a06 	br	81106ce4 <__reset+0xfb0e6ce4>
81106fbc:	d9002c17 	ldw	r4,176(sp)
81106fc0:	d9801e04 	addi	r6,sp,120
81106fc4:	b80b883a 	mov	r5,r23
81106fc8:	110cfa00 	call	8110cfa0 <__sprint_r>
81106fcc:	103b6f1e 	bne	r2,zero,81105d8c <__reset+0xfb0e5d8c>
81106fd0:	d8c02017 	ldw	r3,128(sp)
81106fd4:	da000404 	addi	r8,sp,16
81106fd8:	003c9d06 	br	81106250 <__reset+0xfb0e6250>
81106fdc:	04e7c83a 	sub	r19,zero,r19
81106fe0:	9804c03a 	cmpne	r2,r19,zero
81106fe4:	05adc83a 	sub	r22,zero,r22
81106fe8:	b0adc83a 	sub	r22,r22,r2
81106fec:	d8802917 	ldw	r2,164(sp)
81106ff0:	07000b44 	movi	fp,45
81106ff4:	df002785 	stb	fp,158(sp)
81106ff8:	10017b16 	blt	r2,zero,811075e8 <___vfprintf_internal_r+0x1c64>
81106ffc:	00bfdfc4 	movi	r2,-129
81107000:	90a4703a 	and	r18,r18,r2
81107004:	003bb106 	br	81105ecc <__reset+0xfb0e5ecc>
81107008:	d9003617 	ldw	r4,216(sp)
8110700c:	d9403817 	ldw	r5,224(sp)
81107010:	da003d15 	stw	r8,244(sp)
81107014:	110cbc40 	call	8110cbc4 <__fpclassifyd>
81107018:	da003d17 	ldw	r8,244(sp)
8110701c:	1000f026 	beq	r2,zero,811073e0 <___vfprintf_internal_r+0x1a5c>
81107020:	d9002917 	ldw	r4,164(sp)
81107024:	05bff7c4 	movi	r22,-33
81107028:	00bfffc4 	movi	r2,-1
8110702c:	8dac703a 	and	r22,r17,r22
81107030:	20820026 	beq	r4,r2,81107834 <___vfprintf_internal_r+0x1eb0>
81107034:	008011c4 	movi	r2,71
81107038:	b081f726 	beq	r22,r2,81107818 <___vfprintf_internal_r+0x1e94>
8110703c:	d9003817 	ldw	r4,224(sp)
81107040:	90c04014 	ori	r3,r18,256
81107044:	d8c02b15 	stw	r3,172(sp)
81107048:	20021516 	blt	r4,zero,811078a0 <___vfprintf_internal_r+0x1f1c>
8110704c:	dcc03817 	ldw	r19,224(sp)
81107050:	d8002a05 	stb	zero,168(sp)
81107054:	00801984 	movi	r2,102
81107058:	8881f926 	beq	r17,r2,81107840 <___vfprintf_internal_r+0x1ebc>
8110705c:	00801184 	movi	r2,70
81107060:	88821c26 	beq	r17,r2,811078d4 <___vfprintf_internal_r+0x1f50>
81107064:	00801144 	movi	r2,69
81107068:	b081ef26 	beq	r22,r2,81107828 <___vfprintf_internal_r+0x1ea4>
8110706c:	d8c02917 	ldw	r3,164(sp)
81107070:	d8802104 	addi	r2,sp,132
81107074:	d8800315 	stw	r2,12(sp)
81107078:	d9403617 	ldw	r5,216(sp)
8110707c:	d8802504 	addi	r2,sp,148
81107080:	d9002c17 	ldw	r4,176(sp)
81107084:	d8800215 	stw	r2,8(sp)
81107088:	d8802604 	addi	r2,sp,152
8110708c:	d8c00015 	stw	r3,0(sp)
81107090:	d8800115 	stw	r2,4(sp)
81107094:	01c00084 	movi	r7,2
81107098:	980d883a 	mov	r6,r19
8110709c:	d8c03c15 	stw	r3,240(sp)
811070a0:	da003d15 	stw	r8,244(sp)
811070a4:	1107fa80 	call	81107fa8 <_dtoa_r>
811070a8:	1021883a 	mov	r16,r2
811070ac:	008019c4 	movi	r2,103
811070b0:	d8c03c17 	ldw	r3,240(sp)
811070b4:	da003d17 	ldw	r8,244(sp)
811070b8:	88817126 	beq	r17,r2,81107680 <___vfprintf_internal_r+0x1cfc>
811070bc:	008011c4 	movi	r2,71
811070c0:	88829226 	beq	r17,r2,81107b0c <___vfprintf_internal_r+0x2188>
811070c4:	80f9883a 	add	fp,r16,r3
811070c8:	d9003617 	ldw	r4,216(sp)
811070cc:	000d883a 	mov	r6,zero
811070d0:	000f883a 	mov	r7,zero
811070d4:	980b883a 	mov	r5,r19
811070d8:	da003d15 	stw	r8,244(sp)
811070dc:	1110c180 	call	81110c18 <__eqdf2>
811070e0:	da003d17 	ldw	r8,244(sp)
811070e4:	10018d26 	beq	r2,zero,8110771c <___vfprintf_internal_r+0x1d98>
811070e8:	d8802117 	ldw	r2,132(sp)
811070ec:	1700062e 	bgeu	r2,fp,81107108 <___vfprintf_internal_r+0x1784>
811070f0:	01000c04 	movi	r4,48
811070f4:	10c00044 	addi	r3,r2,1
811070f8:	d8c02115 	stw	r3,132(sp)
811070fc:	11000005 	stb	r4,0(r2)
81107100:	d8802117 	ldw	r2,132(sp)
81107104:	173ffb36 	bltu	r2,fp,811070f4 <__reset+0xfb0e70f4>
81107108:	1405c83a 	sub	r2,r2,r16
8110710c:	d8803315 	stw	r2,204(sp)
81107110:	008011c4 	movi	r2,71
81107114:	b0817626 	beq	r22,r2,811076f0 <___vfprintf_internal_r+0x1d6c>
81107118:	00801944 	movi	r2,101
8110711c:	1442810e 	bge	r2,r17,81107b24 <___vfprintf_internal_r+0x21a0>
81107120:	d8c02617 	ldw	r3,152(sp)
81107124:	00801984 	movi	r2,102
81107128:	d8c03215 	stw	r3,200(sp)
8110712c:	8881fe26 	beq	r17,r2,81107928 <___vfprintf_internal_r+0x1fa4>
81107130:	d8c03217 	ldw	r3,200(sp)
81107134:	d9003317 	ldw	r4,204(sp)
81107138:	1901dd16 	blt	r3,r4,811078b0 <___vfprintf_internal_r+0x1f2c>
8110713c:	9480004c 	andi	r18,r18,1
81107140:	90022b1e 	bne	r18,zero,811079f0 <___vfprintf_internal_r+0x206c>
81107144:	1805883a 	mov	r2,r3
81107148:	18028016 	blt	r3,zero,81107b4c <___vfprintf_internal_r+0x21c8>
8110714c:	d8c03217 	ldw	r3,200(sp)
81107150:	044019c4 	movi	r17,103
81107154:	d8c02e15 	stw	r3,184(sp)
81107158:	df002a07 	ldb	fp,168(sp)
8110715c:	e001531e 	bne	fp,zero,811076ac <___vfprintf_internal_r+0x1d28>
81107160:	df002783 	ldbu	fp,158(sp)
81107164:	d8802a15 	stw	r2,168(sp)
81107168:	dc802b17 	ldw	r18,172(sp)
8110716c:	d8002915 	stw	zero,164(sp)
81107170:	003bd106 	br	811060b8 <__reset+0xfb0e60b8>
81107174:	d8802d17 	ldw	r2,180(sp)
81107178:	d8c02d17 	ldw	r3,180(sp)
8110717c:	d9002d17 	ldw	r4,180(sp)
81107180:	10800017 	ldw	r2,0(r2)
81107184:	18c00117 	ldw	r3,4(r3)
81107188:	21000204 	addi	r4,r4,8
8110718c:	d8803615 	stw	r2,216(sp)
81107190:	d8c03815 	stw	r3,224(sp)
81107194:	d9002d15 	stw	r4,180(sp)
81107198:	003b7506 	br	81105f70 <__reset+0xfb0e5f70>
8110719c:	ac400007 	ldb	r17,0(r21)
811071a0:	003a5906 	br	81105b08 <__reset+0xfb0e5b08>
811071a4:	9080100c 	andi	r2,r18,64
811071a8:	1000a826 	beq	r2,zero,8110744c <___vfprintf_internal_r+0x1ac8>
811071ac:	d9002d17 	ldw	r4,180(sp)
811071b0:	002d883a 	mov	r22,zero
811071b4:	24c0000b 	ldhu	r19,0(r4)
811071b8:	21000104 	addi	r4,r4,4
811071bc:	d9002d15 	stw	r4,180(sp)
811071c0:	003ccb06 	br	811064f0 <__reset+0xfb0e64f0>
811071c4:	d8c02d17 	ldw	r3,180(sp)
811071c8:	d9002917 	ldw	r4,164(sp)
811071cc:	002d883a 	mov	r22,zero
811071d0:	18800104 	addi	r2,r3,4
811071d4:	1cc00017 	ldw	r19,0(r3)
811071d8:	203ebb0e 	bge	r4,zero,81106cc8 <__reset+0xfb0e6cc8>
811071dc:	003ef106 	br	81106da4 <__reset+0xfb0e6da4>
811071e0:	9080040c 	andi	r2,r18,16
811071e4:	1000921e 	bne	r2,zero,81107430 <___vfprintf_internal_r+0x1aac>
811071e8:	9480100c 	andi	r18,r18,64
811071ec:	90013926 	beq	r18,zero,811076d4 <___vfprintf_internal_r+0x1d50>
811071f0:	d9002d17 	ldw	r4,180(sp)
811071f4:	d9402f17 	ldw	r5,188(sp)
811071f8:	20800017 	ldw	r2,0(r4)
811071fc:	21000104 	addi	r4,r4,4
81107200:	d9002d15 	stw	r4,180(sp)
81107204:	1140000d 	sth	r5,0(r2)
81107208:	003a1606 	br	81105a64 <__reset+0xfb0e5a64>
8110720c:	9080100c 	andi	r2,r18,64
81107210:	10008026 	beq	r2,zero,81107414 <___vfprintf_internal_r+0x1a90>
81107214:	d8c02d17 	ldw	r3,180(sp)
81107218:	1cc0000f 	ldh	r19,0(r3)
8110721c:	18c00104 	addi	r3,r3,4
81107220:	d8c02d15 	stw	r3,180(sp)
81107224:	982dd7fa 	srai	r22,r19,31
81107228:	b005883a 	mov	r2,r22
8110722c:	003b1f06 	br	81105eac <__reset+0xfb0e5eac>
81107230:	9080100c 	andi	r2,r18,64
81107234:	d8002785 	stb	zero,158(sp)
81107238:	10008a1e 	bne	r2,zero,81107464 <___vfprintf_internal_r+0x1ae0>
8110723c:	d9402d17 	ldw	r5,180(sp)
81107240:	d8c02917 	ldw	r3,164(sp)
81107244:	002d883a 	mov	r22,zero
81107248:	28800104 	addi	r2,r5,4
8110724c:	2cc00017 	ldw	r19,0(r5)
81107250:	183e4b0e 	bge	r3,zero,81106b80 <__reset+0xfb0e6b80>
81107254:	9d86b03a 	or	r3,r19,r22
81107258:	d8802d15 	stw	r2,180(sp)
8110725c:	183e4c1e 	bne	r3,zero,81106b90 <__reset+0xfb0e6b90>
81107260:	0039883a 	mov	fp,zero
81107264:	0005883a 	mov	r2,zero
81107268:	003d4006 	br	8110676c <__reset+0xfb0e676c>
8110726c:	016044b4 	movhi	r5,33042
81107270:	29603484 	addi	r5,r5,-32558
81107274:	d9402b15 	stw	r5,172(sp)
81107278:	d9402b17 	ldw	r5,172(sp)
8110727c:	1c47883a 	add	r3,r3,r17
81107280:	10800044 	addi	r2,r2,1
81107284:	41400015 	stw	r5,0(r8)
81107288:	44400115 	stw	r17,4(r8)
8110728c:	d8c02015 	stw	r3,128(sp)
81107290:	d8801f15 	stw	r2,124(sp)
81107294:	010001c4 	movi	r4,7
81107298:	20bec816 	blt	r4,r2,81106dbc <__reset+0xfb0e6dbc>
8110729c:	42000204 	addi	r8,r8,8
811072a0:	003ecd06 	br	81106dd8 <__reset+0xfb0e6dd8>
811072a4:	d9002917 	ldw	r4,164(sp)
811072a8:	d8002785 	stb	zero,158(sp)
811072ac:	203d2d16 	blt	r4,zero,81106764 <__reset+0xfb0e6764>
811072b0:	00bfdfc4 	movi	r2,-129
811072b4:	90a4703a 	and	r18,r18,r2
811072b8:	003a9106 	br	81105d00 <__reset+0xfb0e5d00>
811072bc:	012044b4 	movhi	r4,33042
811072c0:	21203484 	addi	r4,r4,-32558
811072c4:	d9002b15 	stw	r4,172(sp)
811072c8:	003c0c06 	br	811062fc <__reset+0xfb0e62fc>
811072cc:	d9002c17 	ldw	r4,176(sp)
811072d0:	d9801e04 	addi	r6,sp,120
811072d4:	b80b883a 	mov	r5,r23
811072d8:	110cfa00 	call	8110cfa0 <__sprint_r>
811072dc:	103aab1e 	bne	r2,zero,81105d8c <__reset+0xfb0e5d8c>
811072e0:	d8c02017 	ldw	r3,128(sp)
811072e4:	da000404 	addi	r8,sp,16
811072e8:	003d4106 	br	811067f0 <__reset+0xfb0e67f0>
811072ec:	d8801f17 	ldw	r2,124(sp)
811072f0:	016044b4 	movhi	r5,33042
811072f4:	01000044 	movi	r4,1
811072f8:	18c00044 	addi	r3,r3,1
811072fc:	10800044 	addi	r2,r2,1
81107300:	29603404 	addi	r5,r5,-32560
81107304:	41000115 	stw	r4,4(r8)
81107308:	41400015 	stw	r5,0(r8)
8110730c:	d8c02015 	stw	r3,128(sp)
81107310:	d8801f15 	stw	r2,124(sp)
81107314:	010001c4 	movi	r4,7
81107318:	20805c16 	blt	r4,r2,8110748c <___vfprintf_internal_r+0x1b08>
8110731c:	42000204 	addi	r8,r8,8
81107320:	8800041e 	bne	r17,zero,81107334 <___vfprintf_internal_r+0x19b0>
81107324:	d8803317 	ldw	r2,204(sp)
81107328:	1000021e 	bne	r2,zero,81107334 <___vfprintf_internal_r+0x19b0>
8110732c:	9080004c 	andi	r2,r18,1
81107330:	103c0926 	beq	r2,zero,81106358 <__reset+0xfb0e6358>
81107334:	d9003717 	ldw	r4,220(sp)
81107338:	d8801f17 	ldw	r2,124(sp)
8110733c:	d9403417 	ldw	r5,208(sp)
81107340:	20c7883a 	add	r3,r4,r3
81107344:	10800044 	addi	r2,r2,1
81107348:	41000115 	stw	r4,4(r8)
8110734c:	41400015 	stw	r5,0(r8)
81107350:	d8c02015 	stw	r3,128(sp)
81107354:	d8801f15 	stw	r2,124(sp)
81107358:	010001c4 	movi	r4,7
8110735c:	20812116 	blt	r4,r2,811077e4 <___vfprintf_internal_r+0x1e60>
81107360:	42000204 	addi	r8,r8,8
81107364:	0463c83a 	sub	r17,zero,r17
81107368:	0440730e 	bge	zero,r17,81107538 <___vfprintf_internal_r+0x1bb4>
8110736c:	05800404 	movi	r22,16
81107370:	b440860e 	bge	r22,r17,8110758c <___vfprintf_internal_r+0x1c08>
81107374:	016044b4 	movhi	r5,33042
81107378:	29603484 	addi	r5,r5,-32558
8110737c:	d9402b15 	stw	r5,172(sp)
81107380:	070001c4 	movi	fp,7
81107384:	dcc02c17 	ldw	r19,176(sp)
81107388:	00000306 	br	81107398 <___vfprintf_internal_r+0x1a14>
8110738c:	42000204 	addi	r8,r8,8
81107390:	8c7ffc04 	addi	r17,r17,-16
81107394:	b440800e 	bge	r22,r17,81107598 <___vfprintf_internal_r+0x1c14>
81107398:	18c00404 	addi	r3,r3,16
8110739c:	10800044 	addi	r2,r2,1
811073a0:	45000015 	stw	r20,0(r8)
811073a4:	45800115 	stw	r22,4(r8)
811073a8:	d8c02015 	stw	r3,128(sp)
811073ac:	d8801f15 	stw	r2,124(sp)
811073b0:	e0bff60e 	bge	fp,r2,8110738c <__reset+0xfb0e738c>
811073b4:	d9801e04 	addi	r6,sp,120
811073b8:	b80b883a 	mov	r5,r23
811073bc:	9809883a 	mov	r4,r19
811073c0:	110cfa00 	call	8110cfa0 <__sprint_r>
811073c4:	103a711e 	bne	r2,zero,81105d8c <__reset+0xfb0e5d8c>
811073c8:	d8c02017 	ldw	r3,128(sp)
811073cc:	d8801f17 	ldw	r2,124(sp)
811073d0:	da000404 	addi	r8,sp,16
811073d4:	003fee06 	br	81107390 <__reset+0xfb0e7390>
811073d8:	00bfffc4 	movi	r2,-1
811073dc:	003a6f06 	br	81105d9c <__reset+0xfb0e5d9c>
811073e0:	008011c4 	movi	r2,71
811073e4:	1440b816 	blt	r2,r17,811076c8 <___vfprintf_internal_r+0x1d44>
811073e8:	042044b4 	movhi	r16,33042
811073ec:	84202604 	addi	r16,r16,-32616
811073f0:	00c000c4 	movi	r3,3
811073f4:	00bfdfc4 	movi	r2,-129
811073f8:	d8c02a15 	stw	r3,168(sp)
811073fc:	90a4703a 	and	r18,r18,r2
81107400:	df002783 	ldbu	fp,158(sp)
81107404:	d8c02e15 	stw	r3,184(sp)
81107408:	d8002915 	stw	zero,164(sp)
8110740c:	d8003215 	stw	zero,200(sp)
81107410:	003b2906 	br	811060b8 <__reset+0xfb0e60b8>
81107414:	d9002d17 	ldw	r4,180(sp)
81107418:	24c00017 	ldw	r19,0(r4)
8110741c:	21000104 	addi	r4,r4,4
81107420:	d9002d15 	stw	r4,180(sp)
81107424:	982dd7fa 	srai	r22,r19,31
81107428:	b005883a 	mov	r2,r22
8110742c:	003a9f06 	br	81105eac <__reset+0xfb0e5eac>
81107430:	d9402d17 	ldw	r5,180(sp)
81107434:	d8c02f17 	ldw	r3,188(sp)
81107438:	28800017 	ldw	r2,0(r5)
8110743c:	29400104 	addi	r5,r5,4
81107440:	d9402d15 	stw	r5,180(sp)
81107444:	10c00015 	stw	r3,0(r2)
81107448:	00398606 	br	81105a64 <__reset+0xfb0e5a64>
8110744c:	d9402d17 	ldw	r5,180(sp)
81107450:	002d883a 	mov	r22,zero
81107454:	2cc00017 	ldw	r19,0(r5)
81107458:	29400104 	addi	r5,r5,4
8110745c:	d9402d15 	stw	r5,180(sp)
81107460:	003c2306 	br	811064f0 <__reset+0xfb0e64f0>
81107464:	d8c02d17 	ldw	r3,180(sp)
81107468:	d9002917 	ldw	r4,164(sp)
8110746c:	002d883a 	mov	r22,zero
81107470:	18800104 	addi	r2,r3,4
81107474:	1cc0000b 	ldhu	r19,0(r3)
81107478:	203dc10e 	bge	r4,zero,81106b80 <__reset+0xfb0e6b80>
8110747c:	003f7506 	br	81107254 <__reset+0xfb0e7254>
81107480:	042044b4 	movhi	r16,33042
81107484:	84202404 	addi	r16,r16,-32624
81107488:	003acc06 	br	81105fbc <__reset+0xfb0e5fbc>
8110748c:	d9002c17 	ldw	r4,176(sp)
81107490:	d9801e04 	addi	r6,sp,120
81107494:	b80b883a 	mov	r5,r23
81107498:	110cfa00 	call	8110cfa0 <__sprint_r>
8110749c:	103a3b1e 	bne	r2,zero,81105d8c <__reset+0xfb0e5d8c>
811074a0:	dc402617 	ldw	r17,152(sp)
811074a4:	d8c02017 	ldw	r3,128(sp)
811074a8:	da000404 	addi	r8,sp,16
811074ac:	003f9c06 	br	81107320 <__reset+0xfb0e7320>
811074b0:	ac400043 	ldbu	r17,1(r21)
811074b4:	94800814 	ori	r18,r18,32
811074b8:	ad400044 	addi	r21,r21,1
811074bc:	8c403fcc 	andi	r17,r17,255
811074c0:	8c40201c 	xori	r17,r17,128
811074c4:	8c7fe004 	addi	r17,r17,-128
811074c8:	00398f06 	br	81105b08 <__reset+0xfb0e5b08>
811074cc:	d8c02d15 	stw	r3,180(sp)
811074d0:	0039883a 	mov	fp,zero
811074d4:	003e3506 	br	81106dac <__reset+0xfb0e6dac>
811074d8:	d9002c17 	ldw	r4,176(sp)
811074dc:	d9801e04 	addi	r6,sp,120
811074e0:	b80b883a 	mov	r5,r23
811074e4:	110cfa00 	call	8110cfa0 <__sprint_r>
811074e8:	103a281e 	bne	r2,zero,81105d8c <__reset+0xfb0e5d8c>
811074ec:	d8c02017 	ldw	r3,128(sp)
811074f0:	da000404 	addi	r8,sp,16
811074f4:	003cd006 	br	81106838 <__reset+0xfb0e6838>
811074f8:	8009883a 	mov	r4,r16
811074fc:	da003d15 	stw	r8,244(sp)
81107500:	11058ec0 	call	811058ec <strlen>
81107504:	d8802e15 	stw	r2,184(sp)
81107508:	da003d17 	ldw	r8,244(sp)
8110750c:	103c340e 	bge	r2,zero,811065e0 <__reset+0xfb0e65e0>
81107510:	0005883a 	mov	r2,zero
81107514:	003c3206 	br	811065e0 <__reset+0xfb0e65e0>
81107518:	d9002c17 	ldw	r4,176(sp)
8110751c:	d9801e04 	addi	r6,sp,120
81107520:	b80b883a 	mov	r5,r23
81107524:	110cfa00 	call	8110cfa0 <__sprint_r>
81107528:	103a181e 	bne	r2,zero,81105d8c <__reset+0xfb0e5d8c>
8110752c:	d8c02017 	ldw	r3,128(sp)
81107530:	d8801f17 	ldw	r2,124(sp)
81107534:	da000404 	addi	r8,sp,16
81107538:	d9403317 	ldw	r5,204(sp)
8110753c:	10800044 	addi	r2,r2,1
81107540:	44000015 	stw	r16,0(r8)
81107544:	28c7883a 	add	r3,r5,r3
81107548:	003b7d06 	br	81106340 <__reset+0xfb0e6340>
8110754c:	012044b4 	movhi	r4,33042
81107550:	21203884 	addi	r4,r4,-32542
81107554:	d9003515 	stw	r4,212(sp)
81107558:	003b1406 	br	811061ac <__reset+0xfb0e61ac>
8110755c:	013fffc4 	movi	r4,-1
81107560:	003a3506 	br	81105e38 <__reset+0xfb0e5e38>
81107564:	0023883a 	mov	r17,zero
81107568:	003d9d06 	br	81106be0 <__reset+0xfb0e6be0>
8110756c:	d9002c17 	ldw	r4,176(sp)
81107570:	d9801e04 	addi	r6,sp,120
81107574:	b80b883a 	mov	r5,r23
81107578:	110cfa00 	call	8110cfa0 <__sprint_r>
8110757c:	103a031e 	bne	r2,zero,81105d8c <__reset+0xfb0e5d8c>
81107580:	d8c02017 	ldw	r3,128(sp)
81107584:	da000404 	addi	r8,sp,16
81107588:	003d9406 	br	81106bdc <__reset+0xfb0e6bdc>
8110758c:	012044b4 	movhi	r4,33042
81107590:	21203484 	addi	r4,r4,-32558
81107594:	d9002b15 	stw	r4,172(sp)
81107598:	d9002b17 	ldw	r4,172(sp)
8110759c:	1c47883a 	add	r3,r3,r17
811075a0:	10800044 	addi	r2,r2,1
811075a4:	41000015 	stw	r4,0(r8)
811075a8:	44400115 	stw	r17,4(r8)
811075ac:	d8c02015 	stw	r3,128(sp)
811075b0:	d8801f15 	stw	r2,124(sp)
811075b4:	010001c4 	movi	r4,7
811075b8:	20bfd716 	blt	r4,r2,81107518 <__reset+0xfb0e7518>
811075bc:	42000204 	addi	r8,r8,8
811075c0:	003fdd06 	br	81107538 <__reset+0xfb0e7538>
811075c4:	d9002c17 	ldw	r4,176(sp)
811075c8:	d9801e04 	addi	r6,sp,120
811075cc:	b80b883a 	mov	r5,r23
811075d0:	110cfa00 	call	8110cfa0 <__sprint_r>
811075d4:	1039ed1e 	bne	r2,zero,81105d8c <__reset+0xfb0e5d8c>
811075d8:	d8802617 	ldw	r2,152(sp)
811075dc:	d8c02017 	ldw	r3,128(sp)
811075e0:	da000404 	addi	r8,sp,16
811075e4:	003e1006 	br	81106e28 <__reset+0xfb0e6e28>
811075e8:	00800044 	movi	r2,1
811075ec:	10803fcc 	andi	r2,r2,255
811075f0:	00c00044 	movi	r3,1
811075f4:	10fa3526 	beq	r2,r3,81105ecc <__reset+0xfb0e5ecc>
811075f8:	00c00084 	movi	r3,2
811075fc:	10fbcb26 	beq	r2,r3,8110652c <__reset+0xfb0e652c>
81107600:	003a8f06 	br	81106040 <__reset+0xfb0e6040>
81107604:	012044b4 	movhi	r4,33042
81107608:	21203884 	addi	r4,r4,-32542
8110760c:	d9003515 	stw	r4,212(sp)
81107610:	003b7606 	br	811063ec <__reset+0xfb0e63ec>
81107614:	d8802917 	ldw	r2,164(sp)
81107618:	00c00184 	movi	r3,6
8110761c:	1880012e 	bgeu	r3,r2,81107624 <___vfprintf_internal_r+0x1ca0>
81107620:	1805883a 	mov	r2,r3
81107624:	d8802e15 	stw	r2,184(sp)
81107628:	1000ef16 	blt	r2,zero,811079e8 <___vfprintf_internal_r+0x2064>
8110762c:	042044b4 	movhi	r16,33042
81107630:	d8802a15 	stw	r2,168(sp)
81107634:	dcc02d15 	stw	r19,180(sp)
81107638:	d8002915 	stw	zero,164(sp)
8110763c:	d8003215 	stw	zero,200(sp)
81107640:	84203204 	addi	r16,r16,-32568
81107644:	0039883a 	mov	fp,zero
81107648:	003aa206 	br	811060d4 <__reset+0xfb0e60d4>
8110764c:	0021883a 	mov	r16,zero
81107650:	003e0706 	br	81106e70 <__reset+0xfb0e6e70>
81107654:	d9002c17 	ldw	r4,176(sp)
81107658:	d9801e04 	addi	r6,sp,120
8110765c:	b80b883a 	mov	r5,r23
81107660:	110cfa00 	call	8110cfa0 <__sprint_r>
81107664:	1039c91e 	bne	r2,zero,81105d8c <__reset+0xfb0e5d8c>
81107668:	d8802617 	ldw	r2,152(sp)
8110766c:	d9403317 	ldw	r5,204(sp)
81107670:	d8c02017 	ldw	r3,128(sp)
81107674:	da000404 	addi	r8,sp,16
81107678:	2885c83a 	sub	r2,r5,r2
8110767c:	003dfb06 	br	81106e6c <__reset+0xfb0e6e6c>
81107680:	9080004c 	andi	r2,r18,1
81107684:	103e8f1e 	bne	r2,zero,811070c4 <__reset+0xfb0e70c4>
81107688:	d8802117 	ldw	r2,132(sp)
8110768c:	003e9e06 	br	81107108 <__reset+0xfb0e7108>
81107690:	1025883a 	mov	r18,r2
81107694:	0039883a 	mov	fp,zero
81107698:	00800084 	movi	r2,2
8110769c:	003fd306 	br	811075ec <__reset+0xfb0e75ec>
811076a0:	07000b44 	movi	fp,45
811076a4:	df002785 	stb	fp,158(sp)
811076a8:	003a4006 	br	81105fac <__reset+0xfb0e5fac>
811076ac:	00c00b44 	movi	r3,45
811076b0:	d8c02785 	stb	r3,158(sp)
811076b4:	d8802a15 	stw	r2,168(sp)
811076b8:	dc802b17 	ldw	r18,172(sp)
811076bc:	d8002915 	stw	zero,164(sp)
811076c0:	07000b44 	movi	fp,45
811076c4:	003a8006 	br	811060c8 <__reset+0xfb0e60c8>
811076c8:	042044b4 	movhi	r16,33042
811076cc:	84202704 	addi	r16,r16,-32612
811076d0:	003f4706 	br	811073f0 <__reset+0xfb0e73f0>
811076d4:	d8c02d17 	ldw	r3,180(sp)
811076d8:	d9002f17 	ldw	r4,188(sp)
811076dc:	18800017 	ldw	r2,0(r3)
811076e0:	18c00104 	addi	r3,r3,4
811076e4:	d8c02d15 	stw	r3,180(sp)
811076e8:	11000015 	stw	r4,0(r2)
811076ec:	0038dd06 	br	81105a64 <__reset+0xfb0e5a64>
811076f0:	dd802617 	ldw	r22,152(sp)
811076f4:	00bfff44 	movi	r2,-3
811076f8:	b0801c16 	blt	r22,r2,8110776c <___vfprintf_internal_r+0x1de8>
811076fc:	d9402917 	ldw	r5,164(sp)
81107700:	2d801a16 	blt	r5,r22,8110776c <___vfprintf_internal_r+0x1de8>
81107704:	dd803215 	stw	r22,200(sp)
81107708:	003e8906 	br	81107130 <__reset+0xfb0e7130>
8110770c:	012044b4 	movhi	r4,33042
81107710:	21203484 	addi	r4,r4,-32558
81107714:	d9002b15 	stw	r4,172(sp)
81107718:	003c9106 	br	81106960 <__reset+0xfb0e6960>
8110771c:	e005883a 	mov	r2,fp
81107720:	003e7906 	br	81107108 <__reset+0xfb0e7108>
81107724:	d9402917 	ldw	r5,164(sp)
81107728:	df002783 	ldbu	fp,158(sp)
8110772c:	dcc02d15 	stw	r19,180(sp)
81107730:	d9402a15 	stw	r5,168(sp)
81107734:	d9402e15 	stw	r5,184(sp)
81107738:	d8002915 	stw	zero,164(sp)
8110773c:	d8003215 	stw	zero,200(sp)
81107740:	003a5d06 	br	811060b8 <__reset+0xfb0e60b8>
81107744:	9080004c 	andi	r2,r18,1
81107748:	0039883a 	mov	fp,zero
8110774c:	10000426 	beq	r2,zero,81107760 <___vfprintf_internal_r+0x1ddc>
81107750:	00800c04 	movi	r2,48
81107754:	dc001dc4 	addi	r16,sp,119
81107758:	d8801dc5 	stb	r2,119(sp)
8110775c:	003b8006 	br	81106560 <__reset+0xfb0e6560>
81107760:	d8002e15 	stw	zero,184(sp)
81107764:	dc001e04 	addi	r16,sp,120
81107768:	003a4d06 	br	811060a0 <__reset+0xfb0e60a0>
8110776c:	8c7fff84 	addi	r17,r17,-2
81107770:	b5bfffc4 	addi	r22,r22,-1
81107774:	dd802615 	stw	r22,152(sp)
81107778:	dc4022c5 	stb	r17,139(sp)
8110777c:	b000bf16 	blt	r22,zero,81107a7c <___vfprintf_internal_r+0x20f8>
81107780:	00800ac4 	movi	r2,43
81107784:	d8802305 	stb	r2,140(sp)
81107788:	00800244 	movi	r2,9
8110778c:	15807016 	blt	r2,r22,81107950 <___vfprintf_internal_r+0x1fcc>
81107790:	00800c04 	movi	r2,48
81107794:	b5800c04 	addi	r22,r22,48
81107798:	d8802345 	stb	r2,141(sp)
8110779c:	dd802385 	stb	r22,142(sp)
811077a0:	d88023c4 	addi	r2,sp,143
811077a4:	df0022c4 	addi	fp,sp,139
811077a8:	d8c03317 	ldw	r3,204(sp)
811077ac:	1739c83a 	sub	fp,r2,fp
811077b0:	d9003317 	ldw	r4,204(sp)
811077b4:	e0c7883a 	add	r3,fp,r3
811077b8:	df003a15 	stw	fp,232(sp)
811077bc:	d8c02e15 	stw	r3,184(sp)
811077c0:	00800044 	movi	r2,1
811077c4:	1100b30e 	bge	r2,r4,81107a94 <___vfprintf_internal_r+0x2110>
811077c8:	d8c02e17 	ldw	r3,184(sp)
811077cc:	18c00044 	addi	r3,r3,1
811077d0:	d8c02e15 	stw	r3,184(sp)
811077d4:	1805883a 	mov	r2,r3
811077d8:	1800ac16 	blt	r3,zero,81107a8c <___vfprintf_internal_r+0x2108>
811077dc:	d8003215 	stw	zero,200(sp)
811077e0:	003e5d06 	br	81107158 <__reset+0xfb0e7158>
811077e4:	d9002c17 	ldw	r4,176(sp)
811077e8:	d9801e04 	addi	r6,sp,120
811077ec:	b80b883a 	mov	r5,r23
811077f0:	110cfa00 	call	8110cfa0 <__sprint_r>
811077f4:	1039651e 	bne	r2,zero,81105d8c <__reset+0xfb0e5d8c>
811077f8:	dc402617 	ldw	r17,152(sp)
811077fc:	d8c02017 	ldw	r3,128(sp)
81107800:	d8801f17 	ldw	r2,124(sp)
81107804:	da000404 	addi	r8,sp,16
81107808:	003ed606 	br	81107364 <__reset+0xfb0e7364>
8110780c:	582b883a 	mov	r21,r11
81107810:	d8002915 	stw	zero,164(sp)
81107814:	0038bd06 	br	81105b0c <__reset+0xfb0e5b0c>
81107818:	d8802917 	ldw	r2,164(sp)
8110781c:	103e071e 	bne	r2,zero,8110703c <__reset+0xfb0e703c>
81107820:	dc002915 	stw	r16,164(sp)
81107824:	003e0506 	br	8110703c <__reset+0xfb0e703c>
81107828:	d9002917 	ldw	r4,164(sp)
8110782c:	20c00044 	addi	r3,r4,1
81107830:	003e0f06 	br	81107070 <__reset+0xfb0e7070>
81107834:	01400184 	movi	r5,6
81107838:	d9402915 	stw	r5,164(sp)
8110783c:	003dff06 	br	8110703c <__reset+0xfb0e703c>
81107840:	d8802104 	addi	r2,sp,132
81107844:	d8800315 	stw	r2,12(sp)
81107848:	d8802504 	addi	r2,sp,148
8110784c:	d8800215 	stw	r2,8(sp)
81107850:	d8802604 	addi	r2,sp,152
81107854:	d8800115 	stw	r2,4(sp)
81107858:	d8802917 	ldw	r2,164(sp)
8110785c:	d9403617 	ldw	r5,216(sp)
81107860:	d9002c17 	ldw	r4,176(sp)
81107864:	d8800015 	stw	r2,0(sp)
81107868:	01c000c4 	movi	r7,3
8110786c:	980d883a 	mov	r6,r19
81107870:	da003d15 	stw	r8,244(sp)
81107874:	1107fa80 	call	81107fa8 <_dtoa_r>
81107878:	d8c02917 	ldw	r3,164(sp)
8110787c:	da003d17 	ldw	r8,244(sp)
81107880:	1021883a 	mov	r16,r2
81107884:	10f9883a 	add	fp,r2,r3
81107888:	81000007 	ldb	r4,0(r16)
8110788c:	00800c04 	movi	r2,48
81107890:	20805e26 	beq	r4,r2,81107a0c <___vfprintf_internal_r+0x2088>
81107894:	d8c02617 	ldw	r3,152(sp)
81107898:	e0f9883a 	add	fp,fp,r3
8110789c:	003e0a06 	br	811070c8 <__reset+0xfb0e70c8>
811078a0:	00c00b44 	movi	r3,45
811078a4:	24e0003c 	xorhi	r19,r4,32768
811078a8:	d8c02a05 	stb	r3,168(sp)
811078ac:	003de906 	br	81107054 <__reset+0xfb0e7054>
811078b0:	d8c03217 	ldw	r3,200(sp)
811078b4:	00c07a0e 	bge	zero,r3,81107aa0 <___vfprintf_internal_r+0x211c>
811078b8:	00800044 	movi	r2,1
811078bc:	d9003317 	ldw	r4,204(sp)
811078c0:	1105883a 	add	r2,r2,r4
811078c4:	d8802e15 	stw	r2,184(sp)
811078c8:	10004e16 	blt	r2,zero,81107a04 <___vfprintf_internal_r+0x2080>
811078cc:	044019c4 	movi	r17,103
811078d0:	003e2106 	br	81107158 <__reset+0xfb0e7158>
811078d4:	d9002917 	ldw	r4,164(sp)
811078d8:	d8802104 	addi	r2,sp,132
811078dc:	d8800315 	stw	r2,12(sp)
811078e0:	d9000015 	stw	r4,0(sp)
811078e4:	d8802504 	addi	r2,sp,148
811078e8:	d9403617 	ldw	r5,216(sp)
811078ec:	d9002c17 	ldw	r4,176(sp)
811078f0:	d8800215 	stw	r2,8(sp)
811078f4:	d8802604 	addi	r2,sp,152
811078f8:	d8800115 	stw	r2,4(sp)
811078fc:	01c000c4 	movi	r7,3
81107900:	980d883a 	mov	r6,r19
81107904:	da003d15 	stw	r8,244(sp)
81107908:	1107fa80 	call	81107fa8 <_dtoa_r>
8110790c:	d8c02917 	ldw	r3,164(sp)
81107910:	da003d17 	ldw	r8,244(sp)
81107914:	1021883a 	mov	r16,r2
81107918:	00801184 	movi	r2,70
8110791c:	80f9883a 	add	fp,r16,r3
81107920:	88bfd926 	beq	r17,r2,81107888 <__reset+0xfb0e7888>
81107924:	003de806 	br	811070c8 <__reset+0xfb0e70c8>
81107928:	d9002917 	ldw	r4,164(sp)
8110792c:	00c04d0e 	bge	zero,r3,81107a64 <___vfprintf_internal_r+0x20e0>
81107930:	2000441e 	bne	r4,zero,81107a44 <___vfprintf_internal_r+0x20c0>
81107934:	9480004c 	andi	r18,r18,1
81107938:	9000421e 	bne	r18,zero,81107a44 <___vfprintf_internal_r+0x20c0>
8110793c:	1805883a 	mov	r2,r3
81107940:	18007016 	blt	r3,zero,81107b04 <___vfprintf_internal_r+0x2180>
81107944:	d8c03217 	ldw	r3,200(sp)
81107948:	d8c02e15 	stw	r3,184(sp)
8110794c:	003e0206 	br	81107158 <__reset+0xfb0e7158>
81107950:	df0022c4 	addi	fp,sp,139
81107954:	dc002915 	stw	r16,164(sp)
81107958:	4027883a 	mov	r19,r8
8110795c:	e021883a 	mov	r16,fp
81107960:	b009883a 	mov	r4,r22
81107964:	01400284 	movi	r5,10
81107968:	110f9540 	call	8110f954 <__modsi3>
8110796c:	10800c04 	addi	r2,r2,48
81107970:	843fffc4 	addi	r16,r16,-1
81107974:	b009883a 	mov	r4,r22
81107978:	01400284 	movi	r5,10
8110797c:	80800005 	stb	r2,0(r16)
81107980:	110f8d00 	call	8110f8d0 <__divsi3>
81107984:	102d883a 	mov	r22,r2
81107988:	00800244 	movi	r2,9
8110798c:	15bff416 	blt	r2,r22,81107960 <__reset+0xfb0e7960>
81107990:	9811883a 	mov	r8,r19
81107994:	b0800c04 	addi	r2,r22,48
81107998:	8027883a 	mov	r19,r16
8110799c:	997fffc4 	addi	r5,r19,-1
811079a0:	98bfffc5 	stb	r2,-1(r19)
811079a4:	dc002917 	ldw	r16,164(sp)
811079a8:	2f006a2e 	bgeu	r5,fp,81107b54 <___vfprintf_internal_r+0x21d0>
811079ac:	d9c02384 	addi	r7,sp,142
811079b0:	3ccfc83a 	sub	r7,r7,r19
811079b4:	d9002344 	addi	r4,sp,141
811079b8:	e1cf883a 	add	r7,fp,r7
811079bc:	00000106 	br	811079c4 <___vfprintf_internal_r+0x2040>
811079c0:	28800003 	ldbu	r2,0(r5)
811079c4:	20800005 	stb	r2,0(r4)
811079c8:	21000044 	addi	r4,r4,1
811079cc:	29400044 	addi	r5,r5,1
811079d0:	393ffb1e 	bne	r7,r4,811079c0 <__reset+0xfb0e79c0>
811079d4:	d8802304 	addi	r2,sp,140
811079d8:	14c5c83a 	sub	r2,r2,r19
811079dc:	d8c02344 	addi	r3,sp,141
811079e0:	1885883a 	add	r2,r3,r2
811079e4:	003f7006 	br	811077a8 <__reset+0xfb0e77a8>
811079e8:	0005883a 	mov	r2,zero
811079ec:	003f0f06 	br	8110762c <__reset+0xfb0e762c>
811079f0:	d8c03217 	ldw	r3,200(sp)
811079f4:	18c00044 	addi	r3,r3,1
811079f8:	d8c02e15 	stw	r3,184(sp)
811079fc:	1805883a 	mov	r2,r3
81107a00:	183fb20e 	bge	r3,zero,811078cc <__reset+0xfb0e78cc>
81107a04:	0005883a 	mov	r2,zero
81107a08:	003fb006 	br	811078cc <__reset+0xfb0e78cc>
81107a0c:	d9003617 	ldw	r4,216(sp)
81107a10:	000d883a 	mov	r6,zero
81107a14:	000f883a 	mov	r7,zero
81107a18:	980b883a 	mov	r5,r19
81107a1c:	d8c03c15 	stw	r3,240(sp)
81107a20:	da003d15 	stw	r8,244(sp)
81107a24:	1110c180 	call	81110c18 <__eqdf2>
81107a28:	d8c03c17 	ldw	r3,240(sp)
81107a2c:	da003d17 	ldw	r8,244(sp)
81107a30:	103f9826 	beq	r2,zero,81107894 <__reset+0xfb0e7894>
81107a34:	00800044 	movi	r2,1
81107a38:	10c7c83a 	sub	r3,r2,r3
81107a3c:	d8c02615 	stw	r3,152(sp)
81107a40:	003f9506 	br	81107898 <__reset+0xfb0e7898>
81107a44:	d9002917 	ldw	r4,164(sp)
81107a48:	d8c03217 	ldw	r3,200(sp)
81107a4c:	20800044 	addi	r2,r4,1
81107a50:	1885883a 	add	r2,r3,r2
81107a54:	d8802e15 	stw	r2,184(sp)
81107a58:	103dbf0e 	bge	r2,zero,81107158 <__reset+0xfb0e7158>
81107a5c:	0005883a 	mov	r2,zero
81107a60:	003dbd06 	br	81107158 <__reset+0xfb0e7158>
81107a64:	2000211e 	bne	r4,zero,81107aec <___vfprintf_internal_r+0x2168>
81107a68:	9480004c 	andi	r18,r18,1
81107a6c:	90001f1e 	bne	r18,zero,81107aec <___vfprintf_internal_r+0x2168>
81107a70:	00800044 	movi	r2,1
81107a74:	d8802e15 	stw	r2,184(sp)
81107a78:	003db706 	br	81107158 <__reset+0xfb0e7158>
81107a7c:	00800b44 	movi	r2,45
81107a80:	05adc83a 	sub	r22,zero,r22
81107a84:	d8802305 	stb	r2,140(sp)
81107a88:	003f3f06 	br	81107788 <__reset+0xfb0e7788>
81107a8c:	0005883a 	mov	r2,zero
81107a90:	003f5206 	br	811077dc <__reset+0xfb0e77dc>
81107a94:	90a4703a 	and	r18,r18,r2
81107a98:	903f4e26 	beq	r18,zero,811077d4 <__reset+0xfb0e77d4>
81107a9c:	003f4a06 	br	811077c8 <__reset+0xfb0e77c8>
81107aa0:	00800084 	movi	r2,2
81107aa4:	10c5c83a 	sub	r2,r2,r3
81107aa8:	003f8406 	br	811078bc <__reset+0xfb0e78bc>
81107aac:	d8802d17 	ldw	r2,180(sp)
81107ab0:	d9002d17 	ldw	r4,180(sp)
81107ab4:	ac400043 	ldbu	r17,1(r21)
81107ab8:	10800017 	ldw	r2,0(r2)
81107abc:	582b883a 	mov	r21,r11
81107ac0:	d8802915 	stw	r2,164(sp)
81107ac4:	20800104 	addi	r2,r4,4
81107ac8:	d9002917 	ldw	r4,164(sp)
81107acc:	d8802d15 	stw	r2,180(sp)
81107ad0:	203e7a0e 	bge	r4,zero,811074bc <__reset+0xfb0e74bc>
81107ad4:	8c403fcc 	andi	r17,r17,255
81107ad8:	00bfffc4 	movi	r2,-1
81107adc:	8c40201c 	xori	r17,r17,128
81107ae0:	d8802915 	stw	r2,164(sp)
81107ae4:	8c7fe004 	addi	r17,r17,-128
81107ae8:	00380706 	br	81105b08 <__reset+0xfb0e5b08>
81107aec:	d8c02917 	ldw	r3,164(sp)
81107af0:	18c00084 	addi	r3,r3,2
81107af4:	d8c02e15 	stw	r3,184(sp)
81107af8:	1805883a 	mov	r2,r3
81107afc:	183d960e 	bge	r3,zero,81107158 <__reset+0xfb0e7158>
81107b00:	003fd606 	br	81107a5c <__reset+0xfb0e7a5c>
81107b04:	0005883a 	mov	r2,zero
81107b08:	003f8e06 	br	81107944 <__reset+0xfb0e7944>
81107b0c:	9080004c 	andi	r2,r18,1
81107b10:	103f811e 	bne	r2,zero,81107918 <__reset+0xfb0e7918>
81107b14:	d8802117 	ldw	r2,132(sp)
81107b18:	1405c83a 	sub	r2,r2,r16
81107b1c:	d8803315 	stw	r2,204(sp)
81107b20:	b47ef326 	beq	r22,r17,811076f0 <__reset+0xfb0e76f0>
81107b24:	dd802617 	ldw	r22,152(sp)
81107b28:	003f1106 	br	81107770 <__reset+0xfb0e7770>
81107b2c:	d9c02785 	stb	r7,158(sp)
81107b30:	00390406 	br	81105f44 <__reset+0xfb0e5f44>
81107b34:	d9c02785 	stb	r7,158(sp)
81107b38:	0038d306 	br	81105e88 <__reset+0xfb0e5e88>
81107b3c:	d9c02785 	stb	r7,158(sp)
81107b40:	003a6106 	br	811064c8 <__reset+0xfb0e64c8>
81107b44:	d9c02785 	stb	r7,158(sp)
81107b48:	003af806 	br	8110672c <__reset+0xfb0e672c>
81107b4c:	0005883a 	mov	r2,zero
81107b50:	003d7e06 	br	8110714c <__reset+0xfb0e714c>
81107b54:	d8802344 	addi	r2,sp,141
81107b58:	003f1306 	br	811077a8 <__reset+0xfb0e77a8>
81107b5c:	d9c02785 	stb	r7,158(sp)
81107b60:	00392306 	br	81105ff0 <__reset+0xfb0e5ff0>
81107b64:	d9c02785 	stb	r7,158(sp)
81107b68:	003aa906 	br	81106610 <__reset+0xfb0e6610>
81107b6c:	d9c02785 	stb	r7,158(sp)
81107b70:	003a3d06 	br	81106468 <__reset+0xfb0e6468>
81107b74:	d9c02785 	stb	r7,158(sp)
81107b78:	003aca06 	br	811066a4 <__reset+0xfb0e66a4>

81107b7c <__vfprintf_internal>:
81107b7c:	00a044b4 	movhi	r2,33042
81107b80:	10a82a04 	addi	r2,r2,-24408
81107b84:	300f883a 	mov	r7,r6
81107b88:	280d883a 	mov	r6,r5
81107b8c:	200b883a 	mov	r5,r4
81107b90:	11000017 	ldw	r4,0(r2)
81107b94:	11059841 	jmpi	81105984 <___vfprintf_internal_r>

81107b98 <__sbprintf>:
81107b98:	2880030b 	ldhu	r2,12(r5)
81107b9c:	2ac01917 	ldw	r11,100(r5)
81107ba0:	2a80038b 	ldhu	r10,14(r5)
81107ba4:	2a400717 	ldw	r9,28(r5)
81107ba8:	2a000917 	ldw	r8,36(r5)
81107bac:	defee204 	addi	sp,sp,-1144
81107bb0:	00c10004 	movi	r3,1024
81107bb4:	dc011a15 	stw	r16,1128(sp)
81107bb8:	10bfff4c 	andi	r2,r2,65533
81107bbc:	2821883a 	mov	r16,r5
81107bc0:	d8cb883a 	add	r5,sp,r3
81107bc4:	dc811c15 	stw	r18,1136(sp)
81107bc8:	dc411b15 	stw	r17,1132(sp)
81107bcc:	dfc11d15 	stw	ra,1140(sp)
81107bd0:	2025883a 	mov	r18,r4
81107bd4:	d881030d 	sth	r2,1036(sp)
81107bd8:	dac11915 	stw	r11,1124(sp)
81107bdc:	da81038d 	sth	r10,1038(sp)
81107be0:	da410715 	stw	r9,1052(sp)
81107be4:	da010915 	stw	r8,1060(sp)
81107be8:	dec10015 	stw	sp,1024(sp)
81107bec:	dec10415 	stw	sp,1040(sp)
81107bf0:	d8c10215 	stw	r3,1032(sp)
81107bf4:	d8c10515 	stw	r3,1044(sp)
81107bf8:	d8010615 	stw	zero,1048(sp)
81107bfc:	11059840 	call	81105984 <___vfprintf_internal_r>
81107c00:	1023883a 	mov	r17,r2
81107c04:	10000416 	blt	r2,zero,81107c18 <__sbprintf+0x80>
81107c08:	d9410004 	addi	r5,sp,1024
81107c0c:	9009883a 	mov	r4,r18
81107c10:	110984c0 	call	8110984c <_fflush_r>
81107c14:	10000d1e 	bne	r2,zero,81107c4c <__sbprintf+0xb4>
81107c18:	d881030b 	ldhu	r2,1036(sp)
81107c1c:	1080100c 	andi	r2,r2,64
81107c20:	10000326 	beq	r2,zero,81107c30 <__sbprintf+0x98>
81107c24:	8080030b 	ldhu	r2,12(r16)
81107c28:	10801014 	ori	r2,r2,64
81107c2c:	8080030d 	sth	r2,12(r16)
81107c30:	8805883a 	mov	r2,r17
81107c34:	dfc11d17 	ldw	ra,1140(sp)
81107c38:	dc811c17 	ldw	r18,1136(sp)
81107c3c:	dc411b17 	ldw	r17,1132(sp)
81107c40:	dc011a17 	ldw	r16,1128(sp)
81107c44:	dec11e04 	addi	sp,sp,1144
81107c48:	f800283a 	ret
81107c4c:	047fffc4 	movi	r17,-1
81107c50:	003ff106 	br	81107c18 <__reset+0xfb0e7c18>

81107c54 <__swsetup_r>:
81107c54:	00a044b4 	movhi	r2,33042
81107c58:	defffd04 	addi	sp,sp,-12
81107c5c:	10a82a04 	addi	r2,r2,-24408
81107c60:	dc400115 	stw	r17,4(sp)
81107c64:	2023883a 	mov	r17,r4
81107c68:	11000017 	ldw	r4,0(r2)
81107c6c:	dc000015 	stw	r16,0(sp)
81107c70:	dfc00215 	stw	ra,8(sp)
81107c74:	2821883a 	mov	r16,r5
81107c78:	20000226 	beq	r4,zero,81107c84 <__swsetup_r+0x30>
81107c7c:	20800e17 	ldw	r2,56(r4)
81107c80:	10003126 	beq	r2,zero,81107d48 <__swsetup_r+0xf4>
81107c84:	8080030b 	ldhu	r2,12(r16)
81107c88:	10c0020c 	andi	r3,r2,8
81107c8c:	1009883a 	mov	r4,r2
81107c90:	18000f26 	beq	r3,zero,81107cd0 <__swsetup_r+0x7c>
81107c94:	80c00417 	ldw	r3,16(r16)
81107c98:	18001526 	beq	r3,zero,81107cf0 <__swsetup_r+0x9c>
81107c9c:	1100004c 	andi	r4,r2,1
81107ca0:	20001c1e 	bne	r4,zero,81107d14 <__swsetup_r+0xc0>
81107ca4:	1080008c 	andi	r2,r2,2
81107ca8:	1000291e 	bne	r2,zero,81107d50 <__swsetup_r+0xfc>
81107cac:	80800517 	ldw	r2,20(r16)
81107cb0:	80800215 	stw	r2,8(r16)
81107cb4:	18001c26 	beq	r3,zero,81107d28 <__swsetup_r+0xd4>
81107cb8:	0005883a 	mov	r2,zero
81107cbc:	dfc00217 	ldw	ra,8(sp)
81107cc0:	dc400117 	ldw	r17,4(sp)
81107cc4:	dc000017 	ldw	r16,0(sp)
81107cc8:	dec00304 	addi	sp,sp,12
81107ccc:	f800283a 	ret
81107cd0:	2080040c 	andi	r2,r4,16
81107cd4:	10002e26 	beq	r2,zero,81107d90 <__swsetup_r+0x13c>
81107cd8:	2080010c 	andi	r2,r4,4
81107cdc:	10001e1e 	bne	r2,zero,81107d58 <__swsetup_r+0x104>
81107ce0:	80c00417 	ldw	r3,16(r16)
81107ce4:	20800214 	ori	r2,r4,8
81107ce8:	8080030d 	sth	r2,12(r16)
81107cec:	183feb1e 	bne	r3,zero,81107c9c <__reset+0xfb0e7c9c>
81107cf0:	1100a00c 	andi	r4,r2,640
81107cf4:	01408004 	movi	r5,512
81107cf8:	217fe826 	beq	r4,r5,81107c9c <__reset+0xfb0e7c9c>
81107cfc:	800b883a 	mov	r5,r16
81107d00:	8809883a 	mov	r4,r17
81107d04:	110a7cc0 	call	8110a7cc <__smakebuf_r>
81107d08:	8080030b 	ldhu	r2,12(r16)
81107d0c:	80c00417 	ldw	r3,16(r16)
81107d10:	003fe206 	br	81107c9c <__reset+0xfb0e7c9c>
81107d14:	80800517 	ldw	r2,20(r16)
81107d18:	80000215 	stw	zero,8(r16)
81107d1c:	0085c83a 	sub	r2,zero,r2
81107d20:	80800615 	stw	r2,24(r16)
81107d24:	183fe41e 	bne	r3,zero,81107cb8 <__reset+0xfb0e7cb8>
81107d28:	80c0030b 	ldhu	r3,12(r16)
81107d2c:	0005883a 	mov	r2,zero
81107d30:	1900200c 	andi	r4,r3,128
81107d34:	203fe126 	beq	r4,zero,81107cbc <__reset+0xfb0e7cbc>
81107d38:	18c01014 	ori	r3,r3,64
81107d3c:	80c0030d 	sth	r3,12(r16)
81107d40:	00bfffc4 	movi	r2,-1
81107d44:	003fdd06 	br	81107cbc <__reset+0xfb0e7cbc>
81107d48:	1109c280 	call	81109c28 <__sinit>
81107d4c:	003fcd06 	br	81107c84 <__reset+0xfb0e7c84>
81107d50:	0005883a 	mov	r2,zero
81107d54:	003fd606 	br	81107cb0 <__reset+0xfb0e7cb0>
81107d58:	81400c17 	ldw	r5,48(r16)
81107d5c:	28000626 	beq	r5,zero,81107d78 <__swsetup_r+0x124>
81107d60:	80801004 	addi	r2,r16,64
81107d64:	28800326 	beq	r5,r2,81107d74 <__swsetup_r+0x120>
81107d68:	8809883a 	mov	r4,r17
81107d6c:	1109d9c0 	call	81109d9c <_free_r>
81107d70:	8100030b 	ldhu	r4,12(r16)
81107d74:	80000c15 	stw	zero,48(r16)
81107d78:	80c00417 	ldw	r3,16(r16)
81107d7c:	00bff6c4 	movi	r2,-37
81107d80:	1108703a 	and	r4,r2,r4
81107d84:	80000115 	stw	zero,4(r16)
81107d88:	80c00015 	stw	r3,0(r16)
81107d8c:	003fd506 	br	81107ce4 <__reset+0xfb0e7ce4>
81107d90:	00800244 	movi	r2,9
81107d94:	88800015 	stw	r2,0(r17)
81107d98:	20801014 	ori	r2,r4,64
81107d9c:	8080030d 	sth	r2,12(r16)
81107da0:	00bfffc4 	movi	r2,-1
81107da4:	003fc506 	br	81107cbc <__reset+0xfb0e7cbc>

81107da8 <quorem>:
81107da8:	defff704 	addi	sp,sp,-36
81107dac:	dc800215 	stw	r18,8(sp)
81107db0:	20800417 	ldw	r2,16(r4)
81107db4:	2c800417 	ldw	r18,16(r5)
81107db8:	dfc00815 	stw	ra,32(sp)
81107dbc:	ddc00715 	stw	r23,28(sp)
81107dc0:	dd800615 	stw	r22,24(sp)
81107dc4:	dd400515 	stw	r21,20(sp)
81107dc8:	dd000415 	stw	r20,16(sp)
81107dcc:	dcc00315 	stw	r19,12(sp)
81107dd0:	dc400115 	stw	r17,4(sp)
81107dd4:	dc000015 	stw	r16,0(sp)
81107dd8:	14807116 	blt	r2,r18,81107fa0 <quorem+0x1f8>
81107ddc:	94bfffc4 	addi	r18,r18,-1
81107de0:	94ad883a 	add	r22,r18,r18
81107de4:	b5ad883a 	add	r22,r22,r22
81107de8:	2c400504 	addi	r17,r5,20
81107dec:	8da9883a 	add	r20,r17,r22
81107df0:	25400504 	addi	r21,r4,20
81107df4:	282f883a 	mov	r23,r5
81107df8:	adad883a 	add	r22,r21,r22
81107dfc:	a1400017 	ldw	r5,0(r20)
81107e00:	2021883a 	mov	r16,r4
81107e04:	b1000017 	ldw	r4,0(r22)
81107e08:	29400044 	addi	r5,r5,1
81107e0c:	110f9c80 	call	8110f9c8 <__udivsi3>
81107e10:	1027883a 	mov	r19,r2
81107e14:	10002c26 	beq	r2,zero,81107ec8 <quorem+0x120>
81107e18:	a813883a 	mov	r9,r21
81107e1c:	880b883a 	mov	r5,r17
81107e20:	0009883a 	mov	r4,zero
81107e24:	000d883a 	mov	r6,zero
81107e28:	2a000017 	ldw	r8,0(r5)
81107e2c:	49c00017 	ldw	r7,0(r9)
81107e30:	29400104 	addi	r5,r5,4
81107e34:	40bfffcc 	andi	r2,r8,65535
81107e38:	14c5383a 	mul	r2,r2,r19
81107e3c:	4010d43a 	srli	r8,r8,16
81107e40:	38ffffcc 	andi	r3,r7,65535
81107e44:	1105883a 	add	r2,r2,r4
81107e48:	1008d43a 	srli	r4,r2,16
81107e4c:	44d1383a 	mul	r8,r8,r19
81107e50:	198d883a 	add	r6,r3,r6
81107e54:	10ffffcc 	andi	r3,r2,65535
81107e58:	30c7c83a 	sub	r3,r6,r3
81107e5c:	380ed43a 	srli	r7,r7,16
81107e60:	4105883a 	add	r2,r8,r4
81107e64:	180dd43a 	srai	r6,r3,16
81107e68:	113fffcc 	andi	r4,r2,65535
81107e6c:	390fc83a 	sub	r7,r7,r4
81107e70:	398d883a 	add	r6,r7,r6
81107e74:	300e943a 	slli	r7,r6,16
81107e78:	18ffffcc 	andi	r3,r3,65535
81107e7c:	1008d43a 	srli	r4,r2,16
81107e80:	38ceb03a 	or	r7,r7,r3
81107e84:	49c00015 	stw	r7,0(r9)
81107e88:	300dd43a 	srai	r6,r6,16
81107e8c:	4a400104 	addi	r9,r9,4
81107e90:	a17fe52e 	bgeu	r20,r5,81107e28 <__reset+0xfb0e7e28>
81107e94:	b0800017 	ldw	r2,0(r22)
81107e98:	10000b1e 	bne	r2,zero,81107ec8 <quorem+0x120>
81107e9c:	b0bfff04 	addi	r2,r22,-4
81107ea0:	a880082e 	bgeu	r21,r2,81107ec4 <quorem+0x11c>
81107ea4:	b0ffff17 	ldw	r3,-4(r22)
81107ea8:	18000326 	beq	r3,zero,81107eb8 <quorem+0x110>
81107eac:	00000506 	br	81107ec4 <quorem+0x11c>
81107eb0:	10c00017 	ldw	r3,0(r2)
81107eb4:	1800031e 	bne	r3,zero,81107ec4 <quorem+0x11c>
81107eb8:	10bfff04 	addi	r2,r2,-4
81107ebc:	94bfffc4 	addi	r18,r18,-1
81107ec0:	a8bffb36 	bltu	r21,r2,81107eb0 <__reset+0xfb0e7eb0>
81107ec4:	84800415 	stw	r18,16(r16)
81107ec8:	b80b883a 	mov	r5,r23
81107ecc:	8009883a 	mov	r4,r16
81107ed0:	110bdc40 	call	8110bdc4 <__mcmp>
81107ed4:	10002616 	blt	r2,zero,81107f70 <quorem+0x1c8>
81107ed8:	9cc00044 	addi	r19,r19,1
81107edc:	a805883a 	mov	r2,r21
81107ee0:	000b883a 	mov	r5,zero
81107ee4:	11000017 	ldw	r4,0(r2)
81107ee8:	89800017 	ldw	r6,0(r17)
81107eec:	10800104 	addi	r2,r2,4
81107ef0:	20ffffcc 	andi	r3,r4,65535
81107ef4:	194b883a 	add	r5,r3,r5
81107ef8:	30ffffcc 	andi	r3,r6,65535
81107efc:	28c7c83a 	sub	r3,r5,r3
81107f00:	300cd43a 	srli	r6,r6,16
81107f04:	2008d43a 	srli	r4,r4,16
81107f08:	180bd43a 	srai	r5,r3,16
81107f0c:	18ffffcc 	andi	r3,r3,65535
81107f10:	2189c83a 	sub	r4,r4,r6
81107f14:	2149883a 	add	r4,r4,r5
81107f18:	200c943a 	slli	r6,r4,16
81107f1c:	8c400104 	addi	r17,r17,4
81107f20:	200bd43a 	srai	r5,r4,16
81107f24:	30c6b03a 	or	r3,r6,r3
81107f28:	10ffff15 	stw	r3,-4(r2)
81107f2c:	a47fed2e 	bgeu	r20,r17,81107ee4 <__reset+0xfb0e7ee4>
81107f30:	9485883a 	add	r2,r18,r18
81107f34:	1085883a 	add	r2,r2,r2
81107f38:	a887883a 	add	r3,r21,r2
81107f3c:	18800017 	ldw	r2,0(r3)
81107f40:	10000b1e 	bne	r2,zero,81107f70 <quorem+0x1c8>
81107f44:	18bfff04 	addi	r2,r3,-4
81107f48:	a880082e 	bgeu	r21,r2,81107f6c <quorem+0x1c4>
81107f4c:	18ffff17 	ldw	r3,-4(r3)
81107f50:	18000326 	beq	r3,zero,81107f60 <quorem+0x1b8>
81107f54:	00000506 	br	81107f6c <quorem+0x1c4>
81107f58:	10c00017 	ldw	r3,0(r2)
81107f5c:	1800031e 	bne	r3,zero,81107f6c <quorem+0x1c4>
81107f60:	10bfff04 	addi	r2,r2,-4
81107f64:	94bfffc4 	addi	r18,r18,-1
81107f68:	a8bffb36 	bltu	r21,r2,81107f58 <__reset+0xfb0e7f58>
81107f6c:	84800415 	stw	r18,16(r16)
81107f70:	9805883a 	mov	r2,r19
81107f74:	dfc00817 	ldw	ra,32(sp)
81107f78:	ddc00717 	ldw	r23,28(sp)
81107f7c:	dd800617 	ldw	r22,24(sp)
81107f80:	dd400517 	ldw	r21,20(sp)
81107f84:	dd000417 	ldw	r20,16(sp)
81107f88:	dcc00317 	ldw	r19,12(sp)
81107f8c:	dc800217 	ldw	r18,8(sp)
81107f90:	dc400117 	ldw	r17,4(sp)
81107f94:	dc000017 	ldw	r16,0(sp)
81107f98:	dec00904 	addi	sp,sp,36
81107f9c:	f800283a 	ret
81107fa0:	0005883a 	mov	r2,zero
81107fa4:	003ff306 	br	81107f74 <__reset+0xfb0e7f74>

81107fa8 <_dtoa_r>:
81107fa8:	20801017 	ldw	r2,64(r4)
81107fac:	deffde04 	addi	sp,sp,-136
81107fb0:	df002015 	stw	fp,128(sp)
81107fb4:	dcc01b15 	stw	r19,108(sp)
81107fb8:	dc801a15 	stw	r18,104(sp)
81107fbc:	dc401915 	stw	r17,100(sp)
81107fc0:	dc001815 	stw	r16,96(sp)
81107fc4:	dfc02115 	stw	ra,132(sp)
81107fc8:	ddc01f15 	stw	r23,124(sp)
81107fcc:	dd801e15 	stw	r22,120(sp)
81107fd0:	dd401d15 	stw	r21,116(sp)
81107fd4:	dd001c15 	stw	r20,112(sp)
81107fd8:	d9c00315 	stw	r7,12(sp)
81107fdc:	2039883a 	mov	fp,r4
81107fe0:	3023883a 	mov	r17,r6
81107fe4:	2825883a 	mov	r18,r5
81107fe8:	dc002417 	ldw	r16,144(sp)
81107fec:	3027883a 	mov	r19,r6
81107ff0:	10000826 	beq	r2,zero,81108014 <_dtoa_r+0x6c>
81107ff4:	21801117 	ldw	r6,68(r4)
81107ff8:	00c00044 	movi	r3,1
81107ffc:	100b883a 	mov	r5,r2
81108000:	1986983a 	sll	r3,r3,r6
81108004:	11800115 	stw	r6,4(r2)
81108008:	10c00215 	stw	r3,8(r2)
8110800c:	110b5a40 	call	8110b5a4 <_Bfree>
81108010:	e0001015 	stw	zero,64(fp)
81108014:	88002e16 	blt	r17,zero,811080d0 <_dtoa_r+0x128>
81108018:	80000015 	stw	zero,0(r16)
8110801c:	889ffc2c 	andhi	r2,r17,32752
81108020:	00dffc34 	movhi	r3,32752
81108024:	10c01c26 	beq	r2,r3,81108098 <_dtoa_r+0xf0>
81108028:	000d883a 	mov	r6,zero
8110802c:	000f883a 	mov	r7,zero
81108030:	9009883a 	mov	r4,r18
81108034:	980b883a 	mov	r5,r19
81108038:	1110c180 	call	81110c18 <__eqdf2>
8110803c:	10002b1e 	bne	r2,zero,811080ec <_dtoa_r+0x144>
81108040:	d9c02317 	ldw	r7,140(sp)
81108044:	00800044 	movi	r2,1
81108048:	38800015 	stw	r2,0(r7)
8110804c:	d8802517 	ldw	r2,148(sp)
81108050:	10019e26 	beq	r2,zero,811086cc <_dtoa_r+0x724>
81108054:	d8c02517 	ldw	r3,148(sp)
81108058:	00a044b4 	movhi	r2,33042
8110805c:	10a03444 	addi	r2,r2,-32559
81108060:	18800015 	stw	r2,0(r3)
81108064:	10bfffc4 	addi	r2,r2,-1
81108068:	dfc02117 	ldw	ra,132(sp)
8110806c:	df002017 	ldw	fp,128(sp)
81108070:	ddc01f17 	ldw	r23,124(sp)
81108074:	dd801e17 	ldw	r22,120(sp)
81108078:	dd401d17 	ldw	r21,116(sp)
8110807c:	dd001c17 	ldw	r20,112(sp)
81108080:	dcc01b17 	ldw	r19,108(sp)
81108084:	dc801a17 	ldw	r18,104(sp)
81108088:	dc401917 	ldw	r17,100(sp)
8110808c:	dc001817 	ldw	r16,96(sp)
81108090:	dec02204 	addi	sp,sp,136
81108094:	f800283a 	ret
81108098:	d8c02317 	ldw	r3,140(sp)
8110809c:	0089c3c4 	movi	r2,9999
811080a0:	18800015 	stw	r2,0(r3)
811080a4:	90017726 	beq	r18,zero,81108684 <_dtoa_r+0x6dc>
811080a8:	00a044b4 	movhi	r2,33042
811080ac:	10a04004 	addi	r2,r2,-32512
811080b0:	d9002517 	ldw	r4,148(sp)
811080b4:	203fec26 	beq	r4,zero,81108068 <__reset+0xfb0e8068>
811080b8:	10c000c7 	ldb	r3,3(r2)
811080bc:	1801781e 	bne	r3,zero,811086a0 <_dtoa_r+0x6f8>
811080c0:	10c000c4 	addi	r3,r2,3
811080c4:	d9802517 	ldw	r6,148(sp)
811080c8:	30c00015 	stw	r3,0(r6)
811080cc:	003fe606 	br	81108068 <__reset+0xfb0e8068>
811080d0:	04e00034 	movhi	r19,32768
811080d4:	9cffffc4 	addi	r19,r19,-1
811080d8:	00800044 	movi	r2,1
811080dc:	8ce6703a 	and	r19,r17,r19
811080e0:	80800015 	stw	r2,0(r16)
811080e4:	9823883a 	mov	r17,r19
811080e8:	003fcc06 	br	8110801c <__reset+0xfb0e801c>
811080ec:	d8800204 	addi	r2,sp,8
811080f0:	d8800015 	stw	r2,0(sp)
811080f4:	d9c00104 	addi	r7,sp,4
811080f8:	900b883a 	mov	r5,r18
811080fc:	980d883a 	mov	r6,r19
81108100:	e009883a 	mov	r4,fp
81108104:	8820d53a 	srli	r16,r17,20
81108108:	110c1900 	call	8110c190 <__d2b>
8110810c:	d8800915 	stw	r2,36(sp)
81108110:	8001651e 	bne	r16,zero,811086a8 <_dtoa_r+0x700>
81108114:	dd800217 	ldw	r22,8(sp)
81108118:	dc000117 	ldw	r16,4(sp)
8110811c:	00800804 	movi	r2,32
81108120:	b421883a 	add	r16,r22,r16
81108124:	80c10c84 	addi	r3,r16,1074
81108128:	10c2d10e 	bge	r2,r3,81108c70 <_dtoa_r+0xcc8>
8110812c:	00801004 	movi	r2,64
81108130:	81010484 	addi	r4,r16,1042
81108134:	10c7c83a 	sub	r3,r2,r3
81108138:	9108d83a 	srl	r4,r18,r4
8110813c:	88e2983a 	sll	r17,r17,r3
81108140:	2448b03a 	or	r4,r4,r17
81108144:	11118c80 	call	811118c8 <__floatunsidf>
81108148:	017f8434 	movhi	r5,65040
8110814c:	01800044 	movi	r6,1
81108150:	1009883a 	mov	r4,r2
81108154:	194b883a 	add	r5,r3,r5
81108158:	843fffc4 	addi	r16,r16,-1
8110815c:	d9801115 	stw	r6,68(sp)
81108160:	000d883a 	mov	r6,zero
81108164:	01cffe34 	movhi	r7,16376
81108168:	1110e700 	call	81110e70 <__subdf3>
8110816c:	0198dbf4 	movhi	r6,25455
81108170:	01cff4f4 	movhi	r7,16339
81108174:	3190d844 	addi	r6,r6,17249
81108178:	39e1e9c4 	addi	r7,r7,-30809
8110817c:	1009883a 	mov	r4,r2
81108180:	180b883a 	mov	r5,r3
81108184:	1104c100 	call	81104c10 <__muldf3>
81108188:	01a2d874 	movhi	r6,35681
8110818c:	01cff1f4 	movhi	r7,16327
81108190:	31b22cc4 	addi	r6,r6,-14157
81108194:	39e28a04 	addi	r7,r7,-30168
81108198:	180b883a 	mov	r5,r3
8110819c:	1009883a 	mov	r4,r2
811081a0:	110fa840 	call	8110fa84 <__adddf3>
811081a4:	8009883a 	mov	r4,r16
811081a8:	1029883a 	mov	r20,r2
811081ac:	1823883a 	mov	r17,r3
811081b0:	11117ec0 	call	811117ec <__floatsidf>
811081b4:	019427f4 	movhi	r6,20639
811081b8:	01cff4f4 	movhi	r7,16339
811081bc:	319e7ec4 	addi	r6,r6,31227
811081c0:	39d104c4 	addi	r7,r7,17427
811081c4:	1009883a 	mov	r4,r2
811081c8:	180b883a 	mov	r5,r3
811081cc:	1104c100 	call	81104c10 <__muldf3>
811081d0:	100d883a 	mov	r6,r2
811081d4:	180f883a 	mov	r7,r3
811081d8:	a009883a 	mov	r4,r20
811081dc:	880b883a 	mov	r5,r17
811081e0:	110fa840 	call	8110fa84 <__adddf3>
811081e4:	1009883a 	mov	r4,r2
811081e8:	180b883a 	mov	r5,r3
811081ec:	1029883a 	mov	r20,r2
811081f0:	1823883a 	mov	r17,r3
811081f4:	111176c0 	call	8111176c <__fixdfsi>
811081f8:	000d883a 	mov	r6,zero
811081fc:	000f883a 	mov	r7,zero
81108200:	a009883a 	mov	r4,r20
81108204:	880b883a 	mov	r5,r17
81108208:	d8800515 	stw	r2,20(sp)
8110820c:	1110d7c0 	call	81110d7c <__ledf2>
81108210:	10028716 	blt	r2,zero,81108c30 <_dtoa_r+0xc88>
81108214:	d8c00517 	ldw	r3,20(sp)
81108218:	00800584 	movi	r2,22
8110821c:	10c27536 	bltu	r2,r3,81108bf4 <_dtoa_r+0xc4c>
81108220:	180490fa 	slli	r2,r3,3
81108224:	00e044b4 	movhi	r3,33042
81108228:	18e05c04 	addi	r3,r3,-32400
8110822c:	1885883a 	add	r2,r3,r2
81108230:	11000017 	ldw	r4,0(r2)
81108234:	11400117 	ldw	r5,4(r2)
81108238:	900d883a 	mov	r6,r18
8110823c:	980f883a 	mov	r7,r19
81108240:	1110ca00 	call	81110ca0 <__gedf2>
81108244:	00828d0e 	bge	zero,r2,81108c7c <_dtoa_r+0xcd4>
81108248:	d9000517 	ldw	r4,20(sp)
8110824c:	d8000e15 	stw	zero,56(sp)
81108250:	213fffc4 	addi	r4,r4,-1
81108254:	d9000515 	stw	r4,20(sp)
81108258:	b42dc83a 	sub	r22,r22,r16
8110825c:	b5bfffc4 	addi	r22,r22,-1
81108260:	b0026f16 	blt	r22,zero,81108c20 <_dtoa_r+0xc78>
81108264:	d8000815 	stw	zero,32(sp)
81108268:	d9c00517 	ldw	r7,20(sp)
8110826c:	38026416 	blt	r7,zero,81108c00 <_dtoa_r+0xc58>
81108270:	b1ed883a 	add	r22,r22,r7
81108274:	d9c00d15 	stw	r7,52(sp)
81108278:	d8000a15 	stw	zero,40(sp)
8110827c:	d9800317 	ldw	r6,12(sp)
81108280:	00800244 	movi	r2,9
81108284:	11811436 	bltu	r2,r6,811086d8 <_dtoa_r+0x730>
81108288:	00800144 	movi	r2,5
8110828c:	1184e10e 	bge	r2,r6,81109614 <_dtoa_r+0x166c>
81108290:	31bfff04 	addi	r6,r6,-4
81108294:	d9800315 	stw	r6,12(sp)
81108298:	0023883a 	mov	r17,zero
8110829c:	d9800317 	ldw	r6,12(sp)
811082a0:	008000c4 	movi	r2,3
811082a4:	30836726 	beq	r6,r2,81109044 <_dtoa_r+0x109c>
811082a8:	1183410e 	bge	r2,r6,81108fb0 <_dtoa_r+0x1008>
811082ac:	d9c00317 	ldw	r7,12(sp)
811082b0:	00800104 	movi	r2,4
811082b4:	38827c26 	beq	r7,r2,81108ca8 <_dtoa_r+0xd00>
811082b8:	00800144 	movi	r2,5
811082bc:	3884c41e 	bne	r7,r2,811095d0 <_dtoa_r+0x1628>
811082c0:	00800044 	movi	r2,1
811082c4:	d8800b15 	stw	r2,44(sp)
811082c8:	d8c00517 	ldw	r3,20(sp)
811082cc:	d9002217 	ldw	r4,136(sp)
811082d0:	1907883a 	add	r3,r3,r4
811082d4:	19800044 	addi	r6,r3,1
811082d8:	d8c00c15 	stw	r3,48(sp)
811082dc:	d9800615 	stw	r6,24(sp)
811082e0:	0183a40e 	bge	zero,r6,81109174 <_dtoa_r+0x11cc>
811082e4:	d9800617 	ldw	r6,24(sp)
811082e8:	3021883a 	mov	r16,r6
811082ec:	e0001115 	stw	zero,68(fp)
811082f0:	008005c4 	movi	r2,23
811082f4:	1184c92e 	bgeu	r2,r6,8110961c <_dtoa_r+0x1674>
811082f8:	00c00044 	movi	r3,1
811082fc:	00800104 	movi	r2,4
81108300:	1085883a 	add	r2,r2,r2
81108304:	11000504 	addi	r4,r2,20
81108308:	180b883a 	mov	r5,r3
8110830c:	18c00044 	addi	r3,r3,1
81108310:	313ffb2e 	bgeu	r6,r4,81108300 <__reset+0xfb0e8300>
81108314:	e1401115 	stw	r5,68(fp)
81108318:	e009883a 	mov	r4,fp
8110831c:	110b4fc0 	call	8110b4fc <_Balloc>
81108320:	d8800715 	stw	r2,28(sp)
81108324:	e0801015 	stw	r2,64(fp)
81108328:	00800384 	movi	r2,14
8110832c:	1400f736 	bltu	r2,r16,8110870c <_dtoa_r+0x764>
81108330:	8800f626 	beq	r17,zero,8110870c <_dtoa_r+0x764>
81108334:	d9c00517 	ldw	r7,20(sp)
81108338:	01c39a0e 	bge	zero,r7,811091a4 <_dtoa_r+0x11fc>
8110833c:	388003cc 	andi	r2,r7,15
81108340:	100490fa 	slli	r2,r2,3
81108344:	382bd13a 	srai	r21,r7,4
81108348:	00e044b4 	movhi	r3,33042
8110834c:	18e05c04 	addi	r3,r3,-32400
81108350:	1885883a 	add	r2,r3,r2
81108354:	a8c0040c 	andi	r3,r21,16
81108358:	12400017 	ldw	r9,0(r2)
8110835c:	12000117 	ldw	r8,4(r2)
81108360:	18037926 	beq	r3,zero,81109148 <_dtoa_r+0x11a0>
81108364:	00a044b4 	movhi	r2,33042
81108368:	10a05204 	addi	r2,r2,-32440
8110836c:	11800817 	ldw	r6,32(r2)
81108370:	11c00917 	ldw	r7,36(r2)
81108374:	9009883a 	mov	r4,r18
81108378:	980b883a 	mov	r5,r19
8110837c:	da001715 	stw	r8,92(sp)
81108380:	da401615 	stw	r9,88(sp)
81108384:	11103300 	call	81110330 <__divdf3>
81108388:	da001717 	ldw	r8,92(sp)
8110838c:	da401617 	ldw	r9,88(sp)
81108390:	ad4003cc 	andi	r21,r21,15
81108394:	040000c4 	movi	r16,3
81108398:	1023883a 	mov	r17,r2
8110839c:	1829883a 	mov	r20,r3
811083a0:	a8001126 	beq	r21,zero,811083e8 <_dtoa_r+0x440>
811083a4:	05e044b4 	movhi	r23,33042
811083a8:	bde05204 	addi	r23,r23,-32440
811083ac:	4805883a 	mov	r2,r9
811083b0:	4007883a 	mov	r3,r8
811083b4:	a980004c 	andi	r6,r21,1
811083b8:	1009883a 	mov	r4,r2
811083bc:	a82bd07a 	srai	r21,r21,1
811083c0:	180b883a 	mov	r5,r3
811083c4:	30000426 	beq	r6,zero,811083d8 <_dtoa_r+0x430>
811083c8:	b9800017 	ldw	r6,0(r23)
811083cc:	b9c00117 	ldw	r7,4(r23)
811083d0:	84000044 	addi	r16,r16,1
811083d4:	1104c100 	call	81104c10 <__muldf3>
811083d8:	bdc00204 	addi	r23,r23,8
811083dc:	a83ff51e 	bne	r21,zero,811083b4 <__reset+0xfb0e83b4>
811083e0:	1013883a 	mov	r9,r2
811083e4:	1811883a 	mov	r8,r3
811083e8:	480d883a 	mov	r6,r9
811083ec:	400f883a 	mov	r7,r8
811083f0:	8809883a 	mov	r4,r17
811083f4:	a00b883a 	mov	r5,r20
811083f8:	11103300 	call	81110330 <__divdf3>
811083fc:	d8800f15 	stw	r2,60(sp)
81108400:	d8c01015 	stw	r3,64(sp)
81108404:	d8c00e17 	ldw	r3,56(sp)
81108408:	18000626 	beq	r3,zero,81108424 <_dtoa_r+0x47c>
8110840c:	d9000f17 	ldw	r4,60(sp)
81108410:	d9401017 	ldw	r5,64(sp)
81108414:	000d883a 	mov	r6,zero
81108418:	01cffc34 	movhi	r7,16368
8110841c:	1110d7c0 	call	81110d7c <__ledf2>
81108420:	10040b16 	blt	r2,zero,81109450 <_dtoa_r+0x14a8>
81108424:	8009883a 	mov	r4,r16
81108428:	11117ec0 	call	811117ec <__floatsidf>
8110842c:	d9800f17 	ldw	r6,60(sp)
81108430:	d9c01017 	ldw	r7,64(sp)
81108434:	1009883a 	mov	r4,r2
81108438:	180b883a 	mov	r5,r3
8110843c:	1104c100 	call	81104c10 <__muldf3>
81108440:	000d883a 	mov	r6,zero
81108444:	01d00734 	movhi	r7,16412
81108448:	1009883a 	mov	r4,r2
8110844c:	180b883a 	mov	r5,r3
81108450:	110fa840 	call	8110fa84 <__adddf3>
81108454:	1021883a 	mov	r16,r2
81108458:	d8800617 	ldw	r2,24(sp)
8110845c:	047f3034 	movhi	r17,64704
81108460:	1c63883a 	add	r17,r3,r17
81108464:	10031826 	beq	r2,zero,811090c8 <_dtoa_r+0x1120>
81108468:	d8c00517 	ldw	r3,20(sp)
8110846c:	db000617 	ldw	r12,24(sp)
81108470:	d8c01315 	stw	r3,76(sp)
81108474:	d9000b17 	ldw	r4,44(sp)
81108478:	20038f26 	beq	r4,zero,811092b8 <_dtoa_r+0x1310>
8110847c:	60bfffc4 	addi	r2,r12,-1
81108480:	100490fa 	slli	r2,r2,3
81108484:	00e044b4 	movhi	r3,33042
81108488:	18e05c04 	addi	r3,r3,-32400
8110848c:	1885883a 	add	r2,r3,r2
81108490:	11800017 	ldw	r6,0(r2)
81108494:	11c00117 	ldw	r7,4(r2)
81108498:	d8800717 	ldw	r2,28(sp)
8110849c:	0009883a 	mov	r4,zero
811084a0:	014ff834 	movhi	r5,16352
811084a4:	db001615 	stw	r12,88(sp)
811084a8:	15c00044 	addi	r23,r2,1
811084ac:	11103300 	call	81110330 <__divdf3>
811084b0:	800d883a 	mov	r6,r16
811084b4:	880f883a 	mov	r7,r17
811084b8:	1009883a 	mov	r4,r2
811084bc:	180b883a 	mov	r5,r3
811084c0:	1110e700 	call	81110e70 <__subdf3>
811084c4:	d9401017 	ldw	r5,64(sp)
811084c8:	d9000f17 	ldw	r4,60(sp)
811084cc:	102b883a 	mov	r21,r2
811084d0:	d8c01215 	stw	r3,72(sp)
811084d4:	111176c0 	call	8111176c <__fixdfsi>
811084d8:	1009883a 	mov	r4,r2
811084dc:	1029883a 	mov	r20,r2
811084e0:	11117ec0 	call	811117ec <__floatsidf>
811084e4:	d9000f17 	ldw	r4,60(sp)
811084e8:	d9401017 	ldw	r5,64(sp)
811084ec:	100d883a 	mov	r6,r2
811084f0:	180f883a 	mov	r7,r3
811084f4:	1110e700 	call	81110e70 <__subdf3>
811084f8:	1823883a 	mov	r17,r3
811084fc:	d8c00717 	ldw	r3,28(sp)
81108500:	d9401217 	ldw	r5,72(sp)
81108504:	a2000c04 	addi	r8,r20,48
81108508:	1021883a 	mov	r16,r2
8110850c:	1a000005 	stb	r8,0(r3)
81108510:	800d883a 	mov	r6,r16
81108514:	880f883a 	mov	r7,r17
81108518:	a809883a 	mov	r4,r21
8110851c:	4029883a 	mov	r20,r8
81108520:	1110ca00 	call	81110ca0 <__gedf2>
81108524:	00841d16 	blt	zero,r2,8110959c <_dtoa_r+0x15f4>
81108528:	800d883a 	mov	r6,r16
8110852c:	880f883a 	mov	r7,r17
81108530:	0009883a 	mov	r4,zero
81108534:	014ffc34 	movhi	r5,16368
81108538:	1110e700 	call	81110e70 <__subdf3>
8110853c:	d9401217 	ldw	r5,72(sp)
81108540:	100d883a 	mov	r6,r2
81108544:	180f883a 	mov	r7,r3
81108548:	a809883a 	mov	r4,r21
8110854c:	1110ca00 	call	81110ca0 <__gedf2>
81108550:	db001617 	ldw	r12,88(sp)
81108554:	00840e16 	blt	zero,r2,81109590 <_dtoa_r+0x15e8>
81108558:	00800044 	movi	r2,1
8110855c:	13006b0e 	bge	r2,r12,8110870c <_dtoa_r+0x764>
81108560:	d9000717 	ldw	r4,28(sp)
81108564:	dd800f15 	stw	r22,60(sp)
81108568:	dcc01015 	stw	r19,64(sp)
8110856c:	2319883a 	add	r12,r4,r12
81108570:	dcc01217 	ldw	r19,72(sp)
81108574:	602d883a 	mov	r22,r12
81108578:	dc801215 	stw	r18,72(sp)
8110857c:	b825883a 	mov	r18,r23
81108580:	00000906 	br	811085a8 <_dtoa_r+0x600>
81108584:	1110e700 	call	81110e70 <__subdf3>
81108588:	a80d883a 	mov	r6,r21
8110858c:	980f883a 	mov	r7,r19
81108590:	1009883a 	mov	r4,r2
81108594:	180b883a 	mov	r5,r3
81108598:	1110d7c0 	call	81110d7c <__ledf2>
8110859c:	1003e816 	blt	r2,zero,81109540 <_dtoa_r+0x1598>
811085a0:	b825883a 	mov	r18,r23
811085a4:	bd83e926 	beq	r23,r22,8110954c <_dtoa_r+0x15a4>
811085a8:	a809883a 	mov	r4,r21
811085ac:	980b883a 	mov	r5,r19
811085b0:	000d883a 	mov	r6,zero
811085b4:	01d00934 	movhi	r7,16420
811085b8:	1104c100 	call	81104c10 <__muldf3>
811085bc:	000d883a 	mov	r6,zero
811085c0:	01d00934 	movhi	r7,16420
811085c4:	8009883a 	mov	r4,r16
811085c8:	880b883a 	mov	r5,r17
811085cc:	102b883a 	mov	r21,r2
811085d0:	1827883a 	mov	r19,r3
811085d4:	1104c100 	call	81104c10 <__muldf3>
811085d8:	180b883a 	mov	r5,r3
811085dc:	1009883a 	mov	r4,r2
811085e0:	1821883a 	mov	r16,r3
811085e4:	1023883a 	mov	r17,r2
811085e8:	111176c0 	call	8111176c <__fixdfsi>
811085ec:	1009883a 	mov	r4,r2
811085f0:	1029883a 	mov	r20,r2
811085f4:	11117ec0 	call	811117ec <__floatsidf>
811085f8:	8809883a 	mov	r4,r17
811085fc:	800b883a 	mov	r5,r16
81108600:	100d883a 	mov	r6,r2
81108604:	180f883a 	mov	r7,r3
81108608:	1110e700 	call	81110e70 <__subdf3>
8110860c:	a5000c04 	addi	r20,r20,48
81108610:	a80d883a 	mov	r6,r21
81108614:	980f883a 	mov	r7,r19
81108618:	1009883a 	mov	r4,r2
8110861c:	180b883a 	mov	r5,r3
81108620:	95000005 	stb	r20,0(r18)
81108624:	1021883a 	mov	r16,r2
81108628:	1823883a 	mov	r17,r3
8110862c:	1110d7c0 	call	81110d7c <__ledf2>
81108630:	bdc00044 	addi	r23,r23,1
81108634:	800d883a 	mov	r6,r16
81108638:	880f883a 	mov	r7,r17
8110863c:	0009883a 	mov	r4,zero
81108640:	014ffc34 	movhi	r5,16368
81108644:	103fcf0e 	bge	r2,zero,81108584 <__reset+0xfb0e8584>
81108648:	d8c01317 	ldw	r3,76(sp)
8110864c:	d8c00515 	stw	r3,20(sp)
81108650:	d9400917 	ldw	r5,36(sp)
81108654:	e009883a 	mov	r4,fp
81108658:	110b5a40 	call	8110b5a4 <_Bfree>
8110865c:	d9000517 	ldw	r4,20(sp)
81108660:	d9802317 	ldw	r6,140(sp)
81108664:	d9c02517 	ldw	r7,148(sp)
81108668:	b8000005 	stb	zero,0(r23)
8110866c:	20800044 	addi	r2,r4,1
81108670:	30800015 	stw	r2,0(r6)
81108674:	3802aa26 	beq	r7,zero,81109120 <_dtoa_r+0x1178>
81108678:	3dc00015 	stw	r23,0(r7)
8110867c:	d8800717 	ldw	r2,28(sp)
81108680:	003e7906 	br	81108068 <__reset+0xfb0e8068>
81108684:	00800434 	movhi	r2,16
81108688:	10bfffc4 	addi	r2,r2,-1
8110868c:	88a2703a 	and	r17,r17,r2
81108690:	883e851e 	bne	r17,zero,811080a8 <__reset+0xfb0e80a8>
81108694:	00a044b4 	movhi	r2,33042
81108698:	10a03d04 	addi	r2,r2,-32524
8110869c:	003e8406 	br	811080b0 <__reset+0xfb0e80b0>
811086a0:	10c00204 	addi	r3,r2,8
811086a4:	003e8706 	br	811080c4 <__reset+0xfb0e80c4>
811086a8:	01400434 	movhi	r5,16
811086ac:	297fffc4 	addi	r5,r5,-1
811086b0:	994a703a 	and	r5,r19,r5
811086b4:	9009883a 	mov	r4,r18
811086b8:	843f0044 	addi	r16,r16,-1023
811086bc:	294ffc34 	orhi	r5,r5,16368
811086c0:	dd800217 	ldw	r22,8(sp)
811086c4:	d8001115 	stw	zero,68(sp)
811086c8:	003ea506 	br	81108160 <__reset+0xfb0e8160>
811086cc:	00a044b4 	movhi	r2,33042
811086d0:	10a03404 	addi	r2,r2,-32560
811086d4:	003e6406 	br	81108068 <__reset+0xfb0e8068>
811086d8:	e0001115 	stw	zero,68(fp)
811086dc:	000b883a 	mov	r5,zero
811086e0:	e009883a 	mov	r4,fp
811086e4:	110b4fc0 	call	8110b4fc <_Balloc>
811086e8:	01bfffc4 	movi	r6,-1
811086ec:	01c00044 	movi	r7,1
811086f0:	d8800715 	stw	r2,28(sp)
811086f4:	d9800c15 	stw	r6,48(sp)
811086f8:	e0801015 	stw	r2,64(fp)
811086fc:	d8000315 	stw	zero,12(sp)
81108700:	d9c00b15 	stw	r7,44(sp)
81108704:	d9800615 	stw	r6,24(sp)
81108708:	d8002215 	stw	zero,136(sp)
8110870c:	d8800117 	ldw	r2,4(sp)
81108710:	10008916 	blt	r2,zero,81108938 <_dtoa_r+0x990>
81108714:	d9000517 	ldw	r4,20(sp)
81108718:	00c00384 	movi	r3,14
8110871c:	19008616 	blt	r3,r4,81108938 <_dtoa_r+0x990>
81108720:	200490fa 	slli	r2,r4,3
81108724:	00e044b4 	movhi	r3,33042
81108728:	d9802217 	ldw	r6,136(sp)
8110872c:	18e05c04 	addi	r3,r3,-32400
81108730:	1885883a 	add	r2,r3,r2
81108734:	14000017 	ldw	r16,0(r2)
81108738:	14400117 	ldw	r17,4(r2)
8110873c:	30016316 	blt	r6,zero,81108ccc <_dtoa_r+0xd24>
81108740:	800d883a 	mov	r6,r16
81108744:	880f883a 	mov	r7,r17
81108748:	9009883a 	mov	r4,r18
8110874c:	980b883a 	mov	r5,r19
81108750:	11103300 	call	81110330 <__divdf3>
81108754:	180b883a 	mov	r5,r3
81108758:	1009883a 	mov	r4,r2
8110875c:	111176c0 	call	8111176c <__fixdfsi>
81108760:	1009883a 	mov	r4,r2
81108764:	102b883a 	mov	r21,r2
81108768:	11117ec0 	call	811117ec <__floatsidf>
8110876c:	800d883a 	mov	r6,r16
81108770:	880f883a 	mov	r7,r17
81108774:	1009883a 	mov	r4,r2
81108778:	180b883a 	mov	r5,r3
8110877c:	1104c100 	call	81104c10 <__muldf3>
81108780:	100d883a 	mov	r6,r2
81108784:	180f883a 	mov	r7,r3
81108788:	9009883a 	mov	r4,r18
8110878c:	980b883a 	mov	r5,r19
81108790:	1110e700 	call	81110e70 <__subdf3>
81108794:	d9c00717 	ldw	r7,28(sp)
81108798:	1009883a 	mov	r4,r2
8110879c:	a8800c04 	addi	r2,r21,48
811087a0:	38800005 	stb	r2,0(r7)
811087a4:	3dc00044 	addi	r23,r7,1
811087a8:	d9c00617 	ldw	r7,24(sp)
811087ac:	01800044 	movi	r6,1
811087b0:	180b883a 	mov	r5,r3
811087b4:	2005883a 	mov	r2,r4
811087b8:	39803826 	beq	r7,r6,8110889c <_dtoa_r+0x8f4>
811087bc:	000d883a 	mov	r6,zero
811087c0:	01d00934 	movhi	r7,16420
811087c4:	1104c100 	call	81104c10 <__muldf3>
811087c8:	000d883a 	mov	r6,zero
811087cc:	000f883a 	mov	r7,zero
811087d0:	1009883a 	mov	r4,r2
811087d4:	180b883a 	mov	r5,r3
811087d8:	1025883a 	mov	r18,r2
811087dc:	1827883a 	mov	r19,r3
811087e0:	1110c180 	call	81110c18 <__eqdf2>
811087e4:	103f9a26 	beq	r2,zero,81108650 <__reset+0xfb0e8650>
811087e8:	d9c00617 	ldw	r7,24(sp)
811087ec:	d8c00717 	ldw	r3,28(sp)
811087f0:	b829883a 	mov	r20,r23
811087f4:	38bfffc4 	addi	r2,r7,-1
811087f8:	18ad883a 	add	r22,r3,r2
811087fc:	00000a06 	br	81108828 <_dtoa_r+0x880>
81108800:	1104c100 	call	81104c10 <__muldf3>
81108804:	000d883a 	mov	r6,zero
81108808:	000f883a 	mov	r7,zero
8110880c:	1009883a 	mov	r4,r2
81108810:	180b883a 	mov	r5,r3
81108814:	1025883a 	mov	r18,r2
81108818:	1827883a 	mov	r19,r3
8110881c:	b829883a 	mov	r20,r23
81108820:	1110c180 	call	81110c18 <__eqdf2>
81108824:	103f8a26 	beq	r2,zero,81108650 <__reset+0xfb0e8650>
81108828:	800d883a 	mov	r6,r16
8110882c:	880f883a 	mov	r7,r17
81108830:	9009883a 	mov	r4,r18
81108834:	980b883a 	mov	r5,r19
81108838:	11103300 	call	81110330 <__divdf3>
8110883c:	180b883a 	mov	r5,r3
81108840:	1009883a 	mov	r4,r2
81108844:	111176c0 	call	8111176c <__fixdfsi>
81108848:	1009883a 	mov	r4,r2
8110884c:	102b883a 	mov	r21,r2
81108850:	11117ec0 	call	811117ec <__floatsidf>
81108854:	800d883a 	mov	r6,r16
81108858:	880f883a 	mov	r7,r17
8110885c:	1009883a 	mov	r4,r2
81108860:	180b883a 	mov	r5,r3
81108864:	1104c100 	call	81104c10 <__muldf3>
81108868:	100d883a 	mov	r6,r2
8110886c:	180f883a 	mov	r7,r3
81108870:	9009883a 	mov	r4,r18
81108874:	980b883a 	mov	r5,r19
81108878:	1110e700 	call	81110e70 <__subdf3>
8110887c:	aa000c04 	addi	r8,r21,48
81108880:	a2000005 	stb	r8,0(r20)
81108884:	000d883a 	mov	r6,zero
81108888:	01d00934 	movhi	r7,16420
8110888c:	1009883a 	mov	r4,r2
81108890:	180b883a 	mov	r5,r3
81108894:	a5c00044 	addi	r23,r20,1
81108898:	b53fd91e 	bne	r22,r20,81108800 <__reset+0xfb0e8800>
8110889c:	100d883a 	mov	r6,r2
811088a0:	180f883a 	mov	r7,r3
811088a4:	1009883a 	mov	r4,r2
811088a8:	180b883a 	mov	r5,r3
811088ac:	110fa840 	call	8110fa84 <__adddf3>
811088b0:	100d883a 	mov	r6,r2
811088b4:	180f883a 	mov	r7,r3
811088b8:	8009883a 	mov	r4,r16
811088bc:	880b883a 	mov	r5,r17
811088c0:	1027883a 	mov	r19,r2
811088c4:	1825883a 	mov	r18,r3
811088c8:	1110d7c0 	call	81110d7c <__ledf2>
811088cc:	10000816 	blt	r2,zero,811088f0 <_dtoa_r+0x948>
811088d0:	980d883a 	mov	r6,r19
811088d4:	900f883a 	mov	r7,r18
811088d8:	8009883a 	mov	r4,r16
811088dc:	880b883a 	mov	r5,r17
811088e0:	1110c180 	call	81110c18 <__eqdf2>
811088e4:	103f5a1e 	bne	r2,zero,81108650 <__reset+0xfb0e8650>
811088e8:	ad40004c 	andi	r21,r21,1
811088ec:	a83f5826 	beq	r21,zero,81108650 <__reset+0xfb0e8650>
811088f0:	bd3fffc3 	ldbu	r20,-1(r23)
811088f4:	b8bfffc4 	addi	r2,r23,-1
811088f8:	1007883a 	mov	r3,r2
811088fc:	01400e44 	movi	r5,57
81108900:	d9800717 	ldw	r6,28(sp)
81108904:	00000506 	br	8110891c <_dtoa_r+0x974>
81108908:	18ffffc4 	addi	r3,r3,-1
8110890c:	11824726 	beq	r2,r6,8110922c <_dtoa_r+0x1284>
81108910:	1d000003 	ldbu	r20,0(r3)
81108914:	102f883a 	mov	r23,r2
81108918:	10bfffc4 	addi	r2,r2,-1
8110891c:	a1003fcc 	andi	r4,r20,255
81108920:	2100201c 	xori	r4,r4,128
81108924:	213fe004 	addi	r4,r4,-128
81108928:	217ff726 	beq	r4,r5,81108908 <__reset+0xfb0e8908>
8110892c:	a2000044 	addi	r8,r20,1
81108930:	12000005 	stb	r8,0(r2)
81108934:	003f4606 	br	81108650 <__reset+0xfb0e8650>
81108938:	d9000b17 	ldw	r4,44(sp)
8110893c:	2000c826 	beq	r4,zero,81108c60 <_dtoa_r+0xcb8>
81108940:	d9800317 	ldw	r6,12(sp)
81108944:	00c00044 	movi	r3,1
81108948:	1980f90e 	bge	r3,r6,81108d30 <_dtoa_r+0xd88>
8110894c:	d8800617 	ldw	r2,24(sp)
81108950:	d8c00a17 	ldw	r3,40(sp)
81108954:	157fffc4 	addi	r21,r2,-1
81108958:	1d41f316 	blt	r3,r21,81109128 <_dtoa_r+0x1180>
8110895c:	1d6bc83a 	sub	r21,r3,r21
81108960:	d9c00617 	ldw	r7,24(sp)
81108964:	3802aa16 	blt	r7,zero,81109410 <_dtoa_r+0x1468>
81108968:	dd000817 	ldw	r20,32(sp)
8110896c:	d8800617 	ldw	r2,24(sp)
81108970:	d8c00817 	ldw	r3,32(sp)
81108974:	01400044 	movi	r5,1
81108978:	e009883a 	mov	r4,fp
8110897c:	1887883a 	add	r3,r3,r2
81108980:	d8c00815 	stw	r3,32(sp)
81108984:	b0ad883a 	add	r22,r22,r2
81108988:	110b9080 	call	8110b908 <__i2b>
8110898c:	1023883a 	mov	r17,r2
81108990:	a0000826 	beq	r20,zero,811089b4 <_dtoa_r+0xa0c>
81108994:	0580070e 	bge	zero,r22,811089b4 <_dtoa_r+0xa0c>
81108998:	a005883a 	mov	r2,r20
8110899c:	b500b916 	blt	r22,r20,81108c84 <_dtoa_r+0xcdc>
811089a0:	d9000817 	ldw	r4,32(sp)
811089a4:	a0a9c83a 	sub	r20,r20,r2
811089a8:	b0adc83a 	sub	r22,r22,r2
811089ac:	2089c83a 	sub	r4,r4,r2
811089b0:	d9000815 	stw	r4,32(sp)
811089b4:	d9800a17 	ldw	r6,40(sp)
811089b8:	0181810e 	bge	zero,r6,81108fc0 <_dtoa_r+0x1018>
811089bc:	d9c00b17 	ldw	r7,44(sp)
811089c0:	3800b326 	beq	r7,zero,81108c90 <_dtoa_r+0xce8>
811089c4:	a800b226 	beq	r21,zero,81108c90 <_dtoa_r+0xce8>
811089c8:	880b883a 	mov	r5,r17
811089cc:	a80d883a 	mov	r6,r21
811089d0:	e009883a 	mov	r4,fp
811089d4:	110bb3c0 	call	8110bb3c <__pow5mult>
811089d8:	d9800917 	ldw	r6,36(sp)
811089dc:	100b883a 	mov	r5,r2
811089e0:	e009883a 	mov	r4,fp
811089e4:	1023883a 	mov	r17,r2
811089e8:	110b9440 	call	8110b944 <__multiply>
811089ec:	1021883a 	mov	r16,r2
811089f0:	d8800a17 	ldw	r2,40(sp)
811089f4:	d9400917 	ldw	r5,36(sp)
811089f8:	e009883a 	mov	r4,fp
811089fc:	1545c83a 	sub	r2,r2,r21
81108a00:	d8800a15 	stw	r2,40(sp)
81108a04:	110b5a40 	call	8110b5a4 <_Bfree>
81108a08:	d8c00a17 	ldw	r3,40(sp)
81108a0c:	18009f1e 	bne	r3,zero,81108c8c <_dtoa_r+0xce4>
81108a10:	05c00044 	movi	r23,1
81108a14:	e009883a 	mov	r4,fp
81108a18:	b80b883a 	mov	r5,r23
81108a1c:	110b9080 	call	8110b908 <__i2b>
81108a20:	d9000d17 	ldw	r4,52(sp)
81108a24:	102b883a 	mov	r21,r2
81108a28:	2000ce26 	beq	r4,zero,81108d64 <_dtoa_r+0xdbc>
81108a2c:	200d883a 	mov	r6,r4
81108a30:	100b883a 	mov	r5,r2
81108a34:	e009883a 	mov	r4,fp
81108a38:	110bb3c0 	call	8110bb3c <__pow5mult>
81108a3c:	d9800317 	ldw	r6,12(sp)
81108a40:	102b883a 	mov	r21,r2
81108a44:	b981810e 	bge	r23,r6,8110904c <_dtoa_r+0x10a4>
81108a48:	0027883a 	mov	r19,zero
81108a4c:	a8800417 	ldw	r2,16(r21)
81108a50:	05c00804 	movi	r23,32
81108a54:	10800104 	addi	r2,r2,4
81108a58:	1085883a 	add	r2,r2,r2
81108a5c:	1085883a 	add	r2,r2,r2
81108a60:	a885883a 	add	r2,r21,r2
81108a64:	11000017 	ldw	r4,0(r2)
81108a68:	110b7f00 	call	8110b7f0 <__hi0bits>
81108a6c:	b885c83a 	sub	r2,r23,r2
81108a70:	1585883a 	add	r2,r2,r22
81108a74:	108007cc 	andi	r2,r2,31
81108a78:	1000b326 	beq	r2,zero,81108d48 <_dtoa_r+0xda0>
81108a7c:	00c00804 	movi	r3,32
81108a80:	1887c83a 	sub	r3,r3,r2
81108a84:	01000104 	movi	r4,4
81108a88:	20c2cd0e 	bge	r4,r3,811095c0 <_dtoa_r+0x1618>
81108a8c:	00c00704 	movi	r3,28
81108a90:	1885c83a 	sub	r2,r3,r2
81108a94:	d8c00817 	ldw	r3,32(sp)
81108a98:	a0a9883a 	add	r20,r20,r2
81108a9c:	b0ad883a 	add	r22,r22,r2
81108aa0:	1887883a 	add	r3,r3,r2
81108aa4:	d8c00815 	stw	r3,32(sp)
81108aa8:	d9800817 	ldw	r6,32(sp)
81108aac:	0180040e 	bge	zero,r6,81108ac0 <_dtoa_r+0xb18>
81108ab0:	800b883a 	mov	r5,r16
81108ab4:	e009883a 	mov	r4,fp
81108ab8:	110bc7c0 	call	8110bc7c <__lshift>
81108abc:	1021883a 	mov	r16,r2
81108ac0:	0580050e 	bge	zero,r22,81108ad8 <_dtoa_r+0xb30>
81108ac4:	a80b883a 	mov	r5,r21
81108ac8:	b00d883a 	mov	r6,r22
81108acc:	e009883a 	mov	r4,fp
81108ad0:	110bc7c0 	call	8110bc7c <__lshift>
81108ad4:	102b883a 	mov	r21,r2
81108ad8:	d9c00e17 	ldw	r7,56(sp)
81108adc:	3801211e 	bne	r7,zero,81108f64 <_dtoa_r+0xfbc>
81108ae0:	d9800617 	ldw	r6,24(sp)
81108ae4:	0181380e 	bge	zero,r6,81108fc8 <_dtoa_r+0x1020>
81108ae8:	d8c00b17 	ldw	r3,44(sp)
81108aec:	1800ab1e 	bne	r3,zero,81108d9c <_dtoa_r+0xdf4>
81108af0:	dc800717 	ldw	r18,28(sp)
81108af4:	dcc00617 	ldw	r19,24(sp)
81108af8:	9029883a 	mov	r20,r18
81108afc:	00000206 	br	81108b08 <_dtoa_r+0xb60>
81108b00:	110b5cc0 	call	8110b5cc <__multadd>
81108b04:	1021883a 	mov	r16,r2
81108b08:	a80b883a 	mov	r5,r21
81108b0c:	8009883a 	mov	r4,r16
81108b10:	1107da80 	call	81107da8 <quorem>
81108b14:	10800c04 	addi	r2,r2,48
81108b18:	90800005 	stb	r2,0(r18)
81108b1c:	94800044 	addi	r18,r18,1
81108b20:	9507c83a 	sub	r3,r18,r20
81108b24:	000f883a 	mov	r7,zero
81108b28:	01800284 	movi	r6,10
81108b2c:	800b883a 	mov	r5,r16
81108b30:	e009883a 	mov	r4,fp
81108b34:	1cfff216 	blt	r3,r19,81108b00 <__reset+0xfb0e8b00>
81108b38:	1011883a 	mov	r8,r2
81108b3c:	d8800617 	ldw	r2,24(sp)
81108b40:	0082370e 	bge	zero,r2,81109420 <_dtoa_r+0x1478>
81108b44:	d9000717 	ldw	r4,28(sp)
81108b48:	0025883a 	mov	r18,zero
81108b4c:	20af883a 	add	r23,r4,r2
81108b50:	01800044 	movi	r6,1
81108b54:	800b883a 	mov	r5,r16
81108b58:	e009883a 	mov	r4,fp
81108b5c:	da001715 	stw	r8,92(sp)
81108b60:	110bc7c0 	call	8110bc7c <__lshift>
81108b64:	a80b883a 	mov	r5,r21
81108b68:	1009883a 	mov	r4,r2
81108b6c:	d8800915 	stw	r2,36(sp)
81108b70:	110bdc40 	call	8110bdc4 <__mcmp>
81108b74:	da001717 	ldw	r8,92(sp)
81108b78:	0081800e 	bge	zero,r2,8110917c <_dtoa_r+0x11d4>
81108b7c:	b93fffc3 	ldbu	r4,-1(r23)
81108b80:	b8bfffc4 	addi	r2,r23,-1
81108b84:	1007883a 	mov	r3,r2
81108b88:	01800e44 	movi	r6,57
81108b8c:	d9c00717 	ldw	r7,28(sp)
81108b90:	00000506 	br	81108ba8 <_dtoa_r+0xc00>
81108b94:	18ffffc4 	addi	r3,r3,-1
81108b98:	11c12326 	beq	r2,r7,81109028 <_dtoa_r+0x1080>
81108b9c:	19000003 	ldbu	r4,0(r3)
81108ba0:	102f883a 	mov	r23,r2
81108ba4:	10bfffc4 	addi	r2,r2,-1
81108ba8:	21403fcc 	andi	r5,r4,255
81108bac:	2940201c 	xori	r5,r5,128
81108bb0:	297fe004 	addi	r5,r5,-128
81108bb4:	29bff726 	beq	r5,r6,81108b94 <__reset+0xfb0e8b94>
81108bb8:	21000044 	addi	r4,r4,1
81108bbc:	11000005 	stb	r4,0(r2)
81108bc0:	a80b883a 	mov	r5,r21
81108bc4:	e009883a 	mov	r4,fp
81108bc8:	110b5a40 	call	8110b5a4 <_Bfree>
81108bcc:	883ea026 	beq	r17,zero,81108650 <__reset+0xfb0e8650>
81108bd0:	90000426 	beq	r18,zero,81108be4 <_dtoa_r+0xc3c>
81108bd4:	94400326 	beq	r18,r17,81108be4 <_dtoa_r+0xc3c>
81108bd8:	900b883a 	mov	r5,r18
81108bdc:	e009883a 	mov	r4,fp
81108be0:	110b5a40 	call	8110b5a4 <_Bfree>
81108be4:	880b883a 	mov	r5,r17
81108be8:	e009883a 	mov	r4,fp
81108bec:	110b5a40 	call	8110b5a4 <_Bfree>
81108bf0:	003e9706 	br	81108650 <__reset+0xfb0e8650>
81108bf4:	01800044 	movi	r6,1
81108bf8:	d9800e15 	stw	r6,56(sp)
81108bfc:	003d9606 	br	81108258 <__reset+0xfb0e8258>
81108c00:	d8800817 	ldw	r2,32(sp)
81108c04:	d8c00517 	ldw	r3,20(sp)
81108c08:	d8000d15 	stw	zero,52(sp)
81108c0c:	10c5c83a 	sub	r2,r2,r3
81108c10:	00c9c83a 	sub	r4,zero,r3
81108c14:	d8800815 	stw	r2,32(sp)
81108c18:	d9000a15 	stw	r4,40(sp)
81108c1c:	003d9706 	br	8110827c <__reset+0xfb0e827c>
81108c20:	05adc83a 	sub	r22,zero,r22
81108c24:	dd800815 	stw	r22,32(sp)
81108c28:	002d883a 	mov	r22,zero
81108c2c:	003d8e06 	br	81108268 <__reset+0xfb0e8268>
81108c30:	d9000517 	ldw	r4,20(sp)
81108c34:	11117ec0 	call	811117ec <__floatsidf>
81108c38:	100d883a 	mov	r6,r2
81108c3c:	180f883a 	mov	r7,r3
81108c40:	a009883a 	mov	r4,r20
81108c44:	880b883a 	mov	r5,r17
81108c48:	1110c180 	call	81110c18 <__eqdf2>
81108c4c:	103d7126 	beq	r2,zero,81108214 <__reset+0xfb0e8214>
81108c50:	d9c00517 	ldw	r7,20(sp)
81108c54:	39ffffc4 	addi	r7,r7,-1
81108c58:	d9c00515 	stw	r7,20(sp)
81108c5c:	003d6d06 	br	81108214 <__reset+0xfb0e8214>
81108c60:	dd400a17 	ldw	r21,40(sp)
81108c64:	dd000817 	ldw	r20,32(sp)
81108c68:	0023883a 	mov	r17,zero
81108c6c:	003f4806 	br	81108990 <__reset+0xfb0e8990>
81108c70:	10e3c83a 	sub	r17,r2,r3
81108c74:	9448983a 	sll	r4,r18,r17
81108c78:	003d3206 	br	81108144 <__reset+0xfb0e8144>
81108c7c:	d8000e15 	stw	zero,56(sp)
81108c80:	003d7506 	br	81108258 <__reset+0xfb0e8258>
81108c84:	b005883a 	mov	r2,r22
81108c88:	003f4506 	br	811089a0 <__reset+0xfb0e89a0>
81108c8c:	dc000915 	stw	r16,36(sp)
81108c90:	d9800a17 	ldw	r6,40(sp)
81108c94:	d9400917 	ldw	r5,36(sp)
81108c98:	e009883a 	mov	r4,fp
81108c9c:	110bb3c0 	call	8110bb3c <__pow5mult>
81108ca0:	1021883a 	mov	r16,r2
81108ca4:	003f5a06 	br	81108a10 <__reset+0xfb0e8a10>
81108ca8:	01c00044 	movi	r7,1
81108cac:	d9c00b15 	stw	r7,44(sp)
81108cb0:	d8802217 	ldw	r2,136(sp)
81108cb4:	0081280e 	bge	zero,r2,81109158 <_dtoa_r+0x11b0>
81108cb8:	100d883a 	mov	r6,r2
81108cbc:	1021883a 	mov	r16,r2
81108cc0:	d8800c15 	stw	r2,48(sp)
81108cc4:	d8800615 	stw	r2,24(sp)
81108cc8:	003d8806 	br	811082ec <__reset+0xfb0e82ec>
81108ccc:	d8800617 	ldw	r2,24(sp)
81108cd0:	00be9b16 	blt	zero,r2,81108740 <__reset+0xfb0e8740>
81108cd4:	10010f1e 	bne	r2,zero,81109114 <_dtoa_r+0x116c>
81108cd8:	880b883a 	mov	r5,r17
81108cdc:	000d883a 	mov	r6,zero
81108ce0:	01d00534 	movhi	r7,16404
81108ce4:	8009883a 	mov	r4,r16
81108ce8:	1104c100 	call	81104c10 <__muldf3>
81108cec:	900d883a 	mov	r6,r18
81108cf0:	980f883a 	mov	r7,r19
81108cf4:	1009883a 	mov	r4,r2
81108cf8:	180b883a 	mov	r5,r3
81108cfc:	1110ca00 	call	81110ca0 <__gedf2>
81108d00:	002b883a 	mov	r21,zero
81108d04:	0023883a 	mov	r17,zero
81108d08:	1000bf16 	blt	r2,zero,81109008 <_dtoa_r+0x1060>
81108d0c:	d9802217 	ldw	r6,136(sp)
81108d10:	ddc00717 	ldw	r23,28(sp)
81108d14:	018c303a 	nor	r6,zero,r6
81108d18:	d9800515 	stw	r6,20(sp)
81108d1c:	a80b883a 	mov	r5,r21
81108d20:	e009883a 	mov	r4,fp
81108d24:	110b5a40 	call	8110b5a4 <_Bfree>
81108d28:	883e4926 	beq	r17,zero,81108650 <__reset+0xfb0e8650>
81108d2c:	003fad06 	br	81108be4 <__reset+0xfb0e8be4>
81108d30:	d9c01117 	ldw	r7,68(sp)
81108d34:	3801bc26 	beq	r7,zero,81109428 <_dtoa_r+0x1480>
81108d38:	10810cc4 	addi	r2,r2,1075
81108d3c:	dd400a17 	ldw	r21,40(sp)
81108d40:	dd000817 	ldw	r20,32(sp)
81108d44:	003f0a06 	br	81108970 <__reset+0xfb0e8970>
81108d48:	00800704 	movi	r2,28
81108d4c:	d9000817 	ldw	r4,32(sp)
81108d50:	a0a9883a 	add	r20,r20,r2
81108d54:	b0ad883a 	add	r22,r22,r2
81108d58:	2089883a 	add	r4,r4,r2
81108d5c:	d9000815 	stw	r4,32(sp)
81108d60:	003f5106 	br	81108aa8 <__reset+0xfb0e8aa8>
81108d64:	d8c00317 	ldw	r3,12(sp)
81108d68:	b8c1fc0e 	bge	r23,r3,8110955c <_dtoa_r+0x15b4>
81108d6c:	0027883a 	mov	r19,zero
81108d70:	b805883a 	mov	r2,r23
81108d74:	003f3e06 	br	81108a70 <__reset+0xfb0e8a70>
81108d78:	880b883a 	mov	r5,r17
81108d7c:	e009883a 	mov	r4,fp
81108d80:	000f883a 	mov	r7,zero
81108d84:	01800284 	movi	r6,10
81108d88:	110b5cc0 	call	8110b5cc <__multadd>
81108d8c:	d9000c17 	ldw	r4,48(sp)
81108d90:	1023883a 	mov	r17,r2
81108d94:	0102040e 	bge	zero,r4,811095a8 <_dtoa_r+0x1600>
81108d98:	d9000615 	stw	r4,24(sp)
81108d9c:	0500050e 	bge	zero,r20,81108db4 <_dtoa_r+0xe0c>
81108da0:	880b883a 	mov	r5,r17
81108da4:	a00d883a 	mov	r6,r20
81108da8:	e009883a 	mov	r4,fp
81108dac:	110bc7c0 	call	8110bc7c <__lshift>
81108db0:	1023883a 	mov	r17,r2
81108db4:	9801241e 	bne	r19,zero,81109248 <_dtoa_r+0x12a0>
81108db8:	8829883a 	mov	r20,r17
81108dbc:	d9000617 	ldw	r4,24(sp)
81108dc0:	dcc00717 	ldw	r19,28(sp)
81108dc4:	9480004c 	andi	r18,r18,1
81108dc8:	20bfffc4 	addi	r2,r4,-1
81108dcc:	9885883a 	add	r2,r19,r2
81108dd0:	d8800415 	stw	r2,16(sp)
81108dd4:	dc800615 	stw	r18,24(sp)
81108dd8:	a80b883a 	mov	r5,r21
81108ddc:	8009883a 	mov	r4,r16
81108de0:	1107da80 	call	81107da8 <quorem>
81108de4:	880b883a 	mov	r5,r17
81108de8:	8009883a 	mov	r4,r16
81108dec:	102f883a 	mov	r23,r2
81108df0:	110bdc40 	call	8110bdc4 <__mcmp>
81108df4:	a80b883a 	mov	r5,r21
81108df8:	a00d883a 	mov	r6,r20
81108dfc:	e009883a 	mov	r4,fp
81108e00:	102d883a 	mov	r22,r2
81108e04:	110be240 	call	8110be24 <__mdiff>
81108e08:	1007883a 	mov	r3,r2
81108e0c:	10800317 	ldw	r2,12(r2)
81108e10:	bc800c04 	addi	r18,r23,48
81108e14:	180b883a 	mov	r5,r3
81108e18:	10004e1e 	bne	r2,zero,81108f54 <_dtoa_r+0xfac>
81108e1c:	8009883a 	mov	r4,r16
81108e20:	d8c01615 	stw	r3,88(sp)
81108e24:	110bdc40 	call	8110bdc4 <__mcmp>
81108e28:	d8c01617 	ldw	r3,88(sp)
81108e2c:	e009883a 	mov	r4,fp
81108e30:	d8801615 	stw	r2,88(sp)
81108e34:	180b883a 	mov	r5,r3
81108e38:	110b5a40 	call	8110b5a4 <_Bfree>
81108e3c:	d8801617 	ldw	r2,88(sp)
81108e40:	1000041e 	bne	r2,zero,81108e54 <_dtoa_r+0xeac>
81108e44:	d9800317 	ldw	r6,12(sp)
81108e48:	3000021e 	bne	r6,zero,81108e54 <_dtoa_r+0xeac>
81108e4c:	d8c00617 	ldw	r3,24(sp)
81108e50:	18003726 	beq	r3,zero,81108f30 <_dtoa_r+0xf88>
81108e54:	b0002016 	blt	r22,zero,81108ed8 <_dtoa_r+0xf30>
81108e58:	b000041e 	bne	r22,zero,81108e6c <_dtoa_r+0xec4>
81108e5c:	d9000317 	ldw	r4,12(sp)
81108e60:	2000021e 	bne	r4,zero,81108e6c <_dtoa_r+0xec4>
81108e64:	d8c00617 	ldw	r3,24(sp)
81108e68:	18001b26 	beq	r3,zero,81108ed8 <_dtoa_r+0xf30>
81108e6c:	00810716 	blt	zero,r2,8110928c <_dtoa_r+0x12e4>
81108e70:	d8c00417 	ldw	r3,16(sp)
81108e74:	9d800044 	addi	r22,r19,1
81108e78:	9c800005 	stb	r18,0(r19)
81108e7c:	b02f883a 	mov	r23,r22
81108e80:	98c10626 	beq	r19,r3,8110929c <_dtoa_r+0x12f4>
81108e84:	800b883a 	mov	r5,r16
81108e88:	000f883a 	mov	r7,zero
81108e8c:	01800284 	movi	r6,10
81108e90:	e009883a 	mov	r4,fp
81108e94:	110b5cc0 	call	8110b5cc <__multadd>
81108e98:	1021883a 	mov	r16,r2
81108e9c:	000f883a 	mov	r7,zero
81108ea0:	01800284 	movi	r6,10
81108ea4:	880b883a 	mov	r5,r17
81108ea8:	e009883a 	mov	r4,fp
81108eac:	8d002526 	beq	r17,r20,81108f44 <_dtoa_r+0xf9c>
81108eb0:	110b5cc0 	call	8110b5cc <__multadd>
81108eb4:	a00b883a 	mov	r5,r20
81108eb8:	000f883a 	mov	r7,zero
81108ebc:	01800284 	movi	r6,10
81108ec0:	e009883a 	mov	r4,fp
81108ec4:	1023883a 	mov	r17,r2
81108ec8:	110b5cc0 	call	8110b5cc <__multadd>
81108ecc:	1029883a 	mov	r20,r2
81108ed0:	b027883a 	mov	r19,r22
81108ed4:	003fc006 	br	81108dd8 <__reset+0xfb0e8dd8>
81108ed8:	9011883a 	mov	r8,r18
81108edc:	00800e0e 	bge	zero,r2,81108f18 <_dtoa_r+0xf70>
81108ee0:	800b883a 	mov	r5,r16
81108ee4:	01800044 	movi	r6,1
81108ee8:	e009883a 	mov	r4,fp
81108eec:	da001715 	stw	r8,92(sp)
81108ef0:	110bc7c0 	call	8110bc7c <__lshift>
81108ef4:	a80b883a 	mov	r5,r21
81108ef8:	1009883a 	mov	r4,r2
81108efc:	1021883a 	mov	r16,r2
81108f00:	110bdc40 	call	8110bdc4 <__mcmp>
81108f04:	da001717 	ldw	r8,92(sp)
81108f08:	0081960e 	bge	zero,r2,81109564 <_dtoa_r+0x15bc>
81108f0c:	00800e44 	movi	r2,57
81108f10:	40817026 	beq	r8,r2,811094d4 <_dtoa_r+0x152c>
81108f14:	ba000c44 	addi	r8,r23,49
81108f18:	8825883a 	mov	r18,r17
81108f1c:	9dc00044 	addi	r23,r19,1
81108f20:	9a000005 	stb	r8,0(r19)
81108f24:	a023883a 	mov	r17,r20
81108f28:	dc000915 	stw	r16,36(sp)
81108f2c:	003f2406 	br	81108bc0 <__reset+0xfb0e8bc0>
81108f30:	00800e44 	movi	r2,57
81108f34:	9011883a 	mov	r8,r18
81108f38:	90816626 	beq	r18,r2,811094d4 <_dtoa_r+0x152c>
81108f3c:	05bff516 	blt	zero,r22,81108f14 <__reset+0xfb0e8f14>
81108f40:	003ff506 	br	81108f18 <__reset+0xfb0e8f18>
81108f44:	110b5cc0 	call	8110b5cc <__multadd>
81108f48:	1023883a 	mov	r17,r2
81108f4c:	1029883a 	mov	r20,r2
81108f50:	003fdf06 	br	81108ed0 <__reset+0xfb0e8ed0>
81108f54:	e009883a 	mov	r4,fp
81108f58:	110b5a40 	call	8110b5a4 <_Bfree>
81108f5c:	00800044 	movi	r2,1
81108f60:	003fbc06 	br	81108e54 <__reset+0xfb0e8e54>
81108f64:	a80b883a 	mov	r5,r21
81108f68:	8009883a 	mov	r4,r16
81108f6c:	110bdc40 	call	8110bdc4 <__mcmp>
81108f70:	103edb0e 	bge	r2,zero,81108ae0 <__reset+0xfb0e8ae0>
81108f74:	800b883a 	mov	r5,r16
81108f78:	000f883a 	mov	r7,zero
81108f7c:	01800284 	movi	r6,10
81108f80:	e009883a 	mov	r4,fp
81108f84:	110b5cc0 	call	8110b5cc <__multadd>
81108f88:	1021883a 	mov	r16,r2
81108f8c:	d8800517 	ldw	r2,20(sp)
81108f90:	d8c00b17 	ldw	r3,44(sp)
81108f94:	10bfffc4 	addi	r2,r2,-1
81108f98:	d8800515 	stw	r2,20(sp)
81108f9c:	183f761e 	bne	r3,zero,81108d78 <__reset+0xfb0e8d78>
81108fa0:	d9000c17 	ldw	r4,48(sp)
81108fa4:	0101730e 	bge	zero,r4,81109574 <_dtoa_r+0x15cc>
81108fa8:	d9000615 	stw	r4,24(sp)
81108fac:	003ed006 	br	81108af0 <__reset+0xfb0e8af0>
81108fb0:	00800084 	movi	r2,2
81108fb4:	3081861e 	bne	r6,r2,811095d0 <_dtoa_r+0x1628>
81108fb8:	d8000b15 	stw	zero,44(sp)
81108fbc:	003f3c06 	br	81108cb0 <__reset+0xfb0e8cb0>
81108fc0:	dc000917 	ldw	r16,36(sp)
81108fc4:	003e9206 	br	81108a10 <__reset+0xfb0e8a10>
81108fc8:	d9c00317 	ldw	r7,12(sp)
81108fcc:	00800084 	movi	r2,2
81108fd0:	11fec50e 	bge	r2,r7,81108ae8 <__reset+0xfb0e8ae8>
81108fd4:	d9000617 	ldw	r4,24(sp)
81108fd8:	20013c1e 	bne	r4,zero,811094cc <_dtoa_r+0x1524>
81108fdc:	a80b883a 	mov	r5,r21
81108fe0:	000f883a 	mov	r7,zero
81108fe4:	01800144 	movi	r6,5
81108fe8:	e009883a 	mov	r4,fp
81108fec:	110b5cc0 	call	8110b5cc <__multadd>
81108ff0:	100b883a 	mov	r5,r2
81108ff4:	8009883a 	mov	r4,r16
81108ff8:	102b883a 	mov	r21,r2
81108ffc:	110bdc40 	call	8110bdc4 <__mcmp>
81109000:	dc000915 	stw	r16,36(sp)
81109004:	00bf410e 	bge	zero,r2,81108d0c <__reset+0xfb0e8d0c>
81109008:	d9c00717 	ldw	r7,28(sp)
8110900c:	00800c44 	movi	r2,49
81109010:	38800005 	stb	r2,0(r7)
81109014:	d8800517 	ldw	r2,20(sp)
81109018:	3dc00044 	addi	r23,r7,1
8110901c:	10800044 	addi	r2,r2,1
81109020:	d8800515 	stw	r2,20(sp)
81109024:	003f3d06 	br	81108d1c <__reset+0xfb0e8d1c>
81109028:	d9800517 	ldw	r6,20(sp)
8110902c:	d9c00717 	ldw	r7,28(sp)
81109030:	00800c44 	movi	r2,49
81109034:	31800044 	addi	r6,r6,1
81109038:	d9800515 	stw	r6,20(sp)
8110903c:	38800005 	stb	r2,0(r7)
81109040:	003edf06 	br	81108bc0 <__reset+0xfb0e8bc0>
81109044:	d8000b15 	stw	zero,44(sp)
81109048:	003c9f06 	br	811082c8 <__reset+0xfb0e82c8>
8110904c:	903e7e1e 	bne	r18,zero,81108a48 <__reset+0xfb0e8a48>
81109050:	00800434 	movhi	r2,16
81109054:	10bfffc4 	addi	r2,r2,-1
81109058:	9884703a 	and	r2,r19,r2
8110905c:	1000ea1e 	bne	r2,zero,81109408 <_dtoa_r+0x1460>
81109060:	9cdffc2c 	andhi	r19,r19,32752
81109064:	9800e826 	beq	r19,zero,81109408 <_dtoa_r+0x1460>
81109068:	d9c00817 	ldw	r7,32(sp)
8110906c:	b5800044 	addi	r22,r22,1
81109070:	04c00044 	movi	r19,1
81109074:	39c00044 	addi	r7,r7,1
81109078:	d9c00815 	stw	r7,32(sp)
8110907c:	d8800d17 	ldw	r2,52(sp)
81109080:	103e721e 	bne	r2,zero,81108a4c <__reset+0xfb0e8a4c>
81109084:	00800044 	movi	r2,1
81109088:	003e7906 	br	81108a70 <__reset+0xfb0e8a70>
8110908c:	8009883a 	mov	r4,r16
81109090:	11117ec0 	call	811117ec <__floatsidf>
81109094:	d9800f17 	ldw	r6,60(sp)
81109098:	d9c01017 	ldw	r7,64(sp)
8110909c:	1009883a 	mov	r4,r2
811090a0:	180b883a 	mov	r5,r3
811090a4:	1104c100 	call	81104c10 <__muldf3>
811090a8:	000d883a 	mov	r6,zero
811090ac:	01d00734 	movhi	r7,16412
811090b0:	1009883a 	mov	r4,r2
811090b4:	180b883a 	mov	r5,r3
811090b8:	110fa840 	call	8110fa84 <__adddf3>
811090bc:	047f3034 	movhi	r17,64704
811090c0:	1021883a 	mov	r16,r2
811090c4:	1c63883a 	add	r17,r3,r17
811090c8:	d9000f17 	ldw	r4,60(sp)
811090cc:	d9401017 	ldw	r5,64(sp)
811090d0:	000d883a 	mov	r6,zero
811090d4:	01d00534 	movhi	r7,16404
811090d8:	1110e700 	call	81110e70 <__subdf3>
811090dc:	800d883a 	mov	r6,r16
811090e0:	880f883a 	mov	r7,r17
811090e4:	1009883a 	mov	r4,r2
811090e8:	180b883a 	mov	r5,r3
811090ec:	102b883a 	mov	r21,r2
811090f0:	1829883a 	mov	r20,r3
811090f4:	1110ca00 	call	81110ca0 <__gedf2>
811090f8:	00806c16 	blt	zero,r2,811092ac <_dtoa_r+0x1304>
811090fc:	89e0003c 	xorhi	r7,r17,32768
81109100:	800d883a 	mov	r6,r16
81109104:	a809883a 	mov	r4,r21
81109108:	a00b883a 	mov	r5,r20
8110910c:	1110d7c0 	call	81110d7c <__ledf2>
81109110:	103d7e0e 	bge	r2,zero,8110870c <__reset+0xfb0e870c>
81109114:	002b883a 	mov	r21,zero
81109118:	0023883a 	mov	r17,zero
8110911c:	003efb06 	br	81108d0c <__reset+0xfb0e8d0c>
81109120:	d8800717 	ldw	r2,28(sp)
81109124:	003bd006 	br	81108068 <__reset+0xfb0e8068>
81109128:	d9000a17 	ldw	r4,40(sp)
8110912c:	d9800d17 	ldw	r6,52(sp)
81109130:	dd400a15 	stw	r21,40(sp)
81109134:	a905c83a 	sub	r2,r21,r4
81109138:	308d883a 	add	r6,r6,r2
8110913c:	d9800d15 	stw	r6,52(sp)
81109140:	002b883a 	mov	r21,zero
81109144:	003e0606 	br	81108960 <__reset+0xfb0e8960>
81109148:	9023883a 	mov	r17,r18
8110914c:	9829883a 	mov	r20,r19
81109150:	04000084 	movi	r16,2
81109154:	003c9206 	br	811083a0 <__reset+0xfb0e83a0>
81109158:	04000044 	movi	r16,1
8110915c:	dc000c15 	stw	r16,48(sp)
81109160:	dc000615 	stw	r16,24(sp)
81109164:	dc002215 	stw	r16,136(sp)
81109168:	e0001115 	stw	zero,68(fp)
8110916c:	000b883a 	mov	r5,zero
81109170:	003c6906 	br	81108318 <__reset+0xfb0e8318>
81109174:	3021883a 	mov	r16,r6
81109178:	003ffb06 	br	81109168 <__reset+0xfb0e9168>
8110917c:	1000021e 	bne	r2,zero,81109188 <_dtoa_r+0x11e0>
81109180:	4200004c 	andi	r8,r8,1
81109184:	403e7d1e 	bne	r8,zero,81108b7c <__reset+0xfb0e8b7c>
81109188:	01000c04 	movi	r4,48
8110918c:	00000106 	br	81109194 <_dtoa_r+0x11ec>
81109190:	102f883a 	mov	r23,r2
81109194:	b8bfffc4 	addi	r2,r23,-1
81109198:	10c00007 	ldb	r3,0(r2)
8110919c:	193ffc26 	beq	r3,r4,81109190 <__reset+0xfb0e9190>
811091a0:	003e8706 	br	81108bc0 <__reset+0xfb0e8bc0>
811091a4:	d8800517 	ldw	r2,20(sp)
811091a8:	00a3c83a 	sub	r17,zero,r2
811091ac:	8800a426 	beq	r17,zero,81109440 <_dtoa_r+0x1498>
811091b0:	888003cc 	andi	r2,r17,15
811091b4:	100490fa 	slli	r2,r2,3
811091b8:	00e044b4 	movhi	r3,33042
811091bc:	18e05c04 	addi	r3,r3,-32400
811091c0:	1885883a 	add	r2,r3,r2
811091c4:	11800017 	ldw	r6,0(r2)
811091c8:	11c00117 	ldw	r7,4(r2)
811091cc:	9009883a 	mov	r4,r18
811091d0:	980b883a 	mov	r5,r19
811091d4:	8823d13a 	srai	r17,r17,4
811091d8:	1104c100 	call	81104c10 <__muldf3>
811091dc:	d8800f15 	stw	r2,60(sp)
811091e0:	d8c01015 	stw	r3,64(sp)
811091e4:	8800e826 	beq	r17,zero,81109588 <_dtoa_r+0x15e0>
811091e8:	052044b4 	movhi	r20,33042
811091ec:	a5205204 	addi	r20,r20,-32440
811091f0:	04000084 	movi	r16,2
811091f4:	8980004c 	andi	r6,r17,1
811091f8:	1009883a 	mov	r4,r2
811091fc:	8823d07a 	srai	r17,r17,1
81109200:	180b883a 	mov	r5,r3
81109204:	30000426 	beq	r6,zero,81109218 <_dtoa_r+0x1270>
81109208:	a1800017 	ldw	r6,0(r20)
8110920c:	a1c00117 	ldw	r7,4(r20)
81109210:	84000044 	addi	r16,r16,1
81109214:	1104c100 	call	81104c10 <__muldf3>
81109218:	a5000204 	addi	r20,r20,8
8110921c:	883ff51e 	bne	r17,zero,811091f4 <__reset+0xfb0e91f4>
81109220:	d8800f15 	stw	r2,60(sp)
81109224:	d8c01015 	stw	r3,64(sp)
81109228:	003c7606 	br	81108404 <__reset+0xfb0e8404>
8110922c:	00c00c04 	movi	r3,48
81109230:	10c00005 	stb	r3,0(r2)
81109234:	d8c00517 	ldw	r3,20(sp)
81109238:	bd3fffc3 	ldbu	r20,-1(r23)
8110923c:	18c00044 	addi	r3,r3,1
81109240:	d8c00515 	stw	r3,20(sp)
81109244:	003db906 	br	8110892c <__reset+0xfb0e892c>
81109248:	89400117 	ldw	r5,4(r17)
8110924c:	e009883a 	mov	r4,fp
81109250:	110b4fc0 	call	8110b4fc <_Balloc>
81109254:	89800417 	ldw	r6,16(r17)
81109258:	89400304 	addi	r5,r17,12
8110925c:	11000304 	addi	r4,r2,12
81109260:	31800084 	addi	r6,r6,2
81109264:	318d883a 	add	r6,r6,r6
81109268:	318d883a 	add	r6,r6,r6
8110926c:	1027883a 	mov	r19,r2
81109270:	11056440 	call	81105644 <memcpy>
81109274:	01800044 	movi	r6,1
81109278:	980b883a 	mov	r5,r19
8110927c:	e009883a 	mov	r4,fp
81109280:	110bc7c0 	call	8110bc7c <__lshift>
81109284:	1029883a 	mov	r20,r2
81109288:	003ecc06 	br	81108dbc <__reset+0xfb0e8dbc>
8110928c:	00800e44 	movi	r2,57
81109290:	90809026 	beq	r18,r2,811094d4 <_dtoa_r+0x152c>
81109294:	92000044 	addi	r8,r18,1
81109298:	003f1f06 	br	81108f18 <__reset+0xfb0e8f18>
8110929c:	9011883a 	mov	r8,r18
811092a0:	8825883a 	mov	r18,r17
811092a4:	a023883a 	mov	r17,r20
811092a8:	003e2906 	br	81108b50 <__reset+0xfb0e8b50>
811092ac:	002b883a 	mov	r21,zero
811092b0:	0023883a 	mov	r17,zero
811092b4:	003f5406 	br	81109008 <__reset+0xfb0e9008>
811092b8:	61bfffc4 	addi	r6,r12,-1
811092bc:	300490fa 	slli	r2,r6,3
811092c0:	00e044b4 	movhi	r3,33042
811092c4:	18e05c04 	addi	r3,r3,-32400
811092c8:	1885883a 	add	r2,r3,r2
811092cc:	11000017 	ldw	r4,0(r2)
811092d0:	11400117 	ldw	r5,4(r2)
811092d4:	d8800717 	ldw	r2,28(sp)
811092d8:	880f883a 	mov	r7,r17
811092dc:	d9801215 	stw	r6,72(sp)
811092e0:	800d883a 	mov	r6,r16
811092e4:	db001615 	stw	r12,88(sp)
811092e8:	15c00044 	addi	r23,r2,1
811092ec:	1104c100 	call	81104c10 <__muldf3>
811092f0:	d9401017 	ldw	r5,64(sp)
811092f4:	d9000f17 	ldw	r4,60(sp)
811092f8:	d8c01515 	stw	r3,84(sp)
811092fc:	d8801415 	stw	r2,80(sp)
81109300:	111176c0 	call	8111176c <__fixdfsi>
81109304:	1009883a 	mov	r4,r2
81109308:	1021883a 	mov	r16,r2
8110930c:	11117ec0 	call	811117ec <__floatsidf>
81109310:	d9000f17 	ldw	r4,60(sp)
81109314:	d9401017 	ldw	r5,64(sp)
81109318:	100d883a 	mov	r6,r2
8110931c:	180f883a 	mov	r7,r3
81109320:	1110e700 	call	81110e70 <__subdf3>
81109324:	1829883a 	mov	r20,r3
81109328:	d8c00717 	ldw	r3,28(sp)
8110932c:	84000c04 	addi	r16,r16,48
81109330:	1023883a 	mov	r17,r2
81109334:	1c000005 	stb	r16,0(r3)
81109338:	db001617 	ldw	r12,88(sp)
8110933c:	00800044 	movi	r2,1
81109340:	60802226 	beq	r12,r2,811093cc <_dtoa_r+0x1424>
81109344:	d9c00717 	ldw	r7,28(sp)
81109348:	8805883a 	mov	r2,r17
8110934c:	b82b883a 	mov	r21,r23
81109350:	3b19883a 	add	r12,r7,r12
81109354:	6023883a 	mov	r17,r12
81109358:	a007883a 	mov	r3,r20
8110935c:	dc800f15 	stw	r18,60(sp)
81109360:	000d883a 	mov	r6,zero
81109364:	01d00934 	movhi	r7,16420
81109368:	1009883a 	mov	r4,r2
8110936c:	180b883a 	mov	r5,r3
81109370:	1104c100 	call	81104c10 <__muldf3>
81109374:	180b883a 	mov	r5,r3
81109378:	1009883a 	mov	r4,r2
8110937c:	1829883a 	mov	r20,r3
81109380:	1025883a 	mov	r18,r2
81109384:	111176c0 	call	8111176c <__fixdfsi>
81109388:	1009883a 	mov	r4,r2
8110938c:	1021883a 	mov	r16,r2
81109390:	11117ec0 	call	811117ec <__floatsidf>
81109394:	100d883a 	mov	r6,r2
81109398:	180f883a 	mov	r7,r3
8110939c:	9009883a 	mov	r4,r18
811093a0:	a00b883a 	mov	r5,r20
811093a4:	84000c04 	addi	r16,r16,48
811093a8:	1110e700 	call	81110e70 <__subdf3>
811093ac:	ad400044 	addi	r21,r21,1
811093b0:	ac3fffc5 	stb	r16,-1(r21)
811093b4:	ac7fea1e 	bne	r21,r17,81109360 <__reset+0xfb0e9360>
811093b8:	1023883a 	mov	r17,r2
811093bc:	d8801217 	ldw	r2,72(sp)
811093c0:	dc800f17 	ldw	r18,60(sp)
811093c4:	1829883a 	mov	r20,r3
811093c8:	b8af883a 	add	r23,r23,r2
811093cc:	d9001417 	ldw	r4,80(sp)
811093d0:	d9401517 	ldw	r5,84(sp)
811093d4:	000d883a 	mov	r6,zero
811093d8:	01cff834 	movhi	r7,16352
811093dc:	110fa840 	call	8110fa84 <__adddf3>
811093e0:	880d883a 	mov	r6,r17
811093e4:	a00f883a 	mov	r7,r20
811093e8:	1009883a 	mov	r4,r2
811093ec:	180b883a 	mov	r5,r3
811093f0:	1110d7c0 	call	81110d7c <__ledf2>
811093f4:	10003e0e 	bge	r2,zero,811094f0 <_dtoa_r+0x1548>
811093f8:	d9001317 	ldw	r4,76(sp)
811093fc:	bd3fffc3 	ldbu	r20,-1(r23)
81109400:	d9000515 	stw	r4,20(sp)
81109404:	003d3b06 	br	811088f4 <__reset+0xfb0e88f4>
81109408:	0027883a 	mov	r19,zero
8110940c:	003f1b06 	br	8110907c <__reset+0xfb0e907c>
81109410:	d8800817 	ldw	r2,32(sp)
81109414:	11e9c83a 	sub	r20,r2,r7
81109418:	0005883a 	mov	r2,zero
8110941c:	003d5406 	br	81108970 <__reset+0xfb0e8970>
81109420:	00800044 	movi	r2,1
81109424:	003dc706 	br	81108b44 <__reset+0xfb0e8b44>
81109428:	d8c00217 	ldw	r3,8(sp)
8110942c:	00800d84 	movi	r2,54
81109430:	dd400a17 	ldw	r21,40(sp)
81109434:	10c5c83a 	sub	r2,r2,r3
81109438:	dd000817 	ldw	r20,32(sp)
8110943c:	003d4c06 	br	81108970 <__reset+0xfb0e8970>
81109440:	dc800f15 	stw	r18,60(sp)
81109444:	dcc01015 	stw	r19,64(sp)
81109448:	04000084 	movi	r16,2
8110944c:	003bed06 	br	81108404 <__reset+0xfb0e8404>
81109450:	d9000617 	ldw	r4,24(sp)
81109454:	203f0d26 	beq	r4,zero,8110908c <__reset+0xfb0e908c>
81109458:	d9800c17 	ldw	r6,48(sp)
8110945c:	01bcab0e 	bge	zero,r6,8110870c <__reset+0xfb0e870c>
81109460:	d9401017 	ldw	r5,64(sp)
81109464:	d9000f17 	ldw	r4,60(sp)
81109468:	000d883a 	mov	r6,zero
8110946c:	01d00934 	movhi	r7,16420
81109470:	1104c100 	call	81104c10 <__muldf3>
81109474:	81000044 	addi	r4,r16,1
81109478:	d8800f15 	stw	r2,60(sp)
8110947c:	d8c01015 	stw	r3,64(sp)
81109480:	11117ec0 	call	811117ec <__floatsidf>
81109484:	d9800f17 	ldw	r6,60(sp)
81109488:	d9c01017 	ldw	r7,64(sp)
8110948c:	1009883a 	mov	r4,r2
81109490:	180b883a 	mov	r5,r3
81109494:	1104c100 	call	81104c10 <__muldf3>
81109498:	01d00734 	movhi	r7,16412
8110949c:	000d883a 	mov	r6,zero
811094a0:	1009883a 	mov	r4,r2
811094a4:	180b883a 	mov	r5,r3
811094a8:	110fa840 	call	8110fa84 <__adddf3>
811094ac:	d9c00517 	ldw	r7,20(sp)
811094b0:	047f3034 	movhi	r17,64704
811094b4:	1021883a 	mov	r16,r2
811094b8:	39ffffc4 	addi	r7,r7,-1
811094bc:	d9c01315 	stw	r7,76(sp)
811094c0:	1c63883a 	add	r17,r3,r17
811094c4:	db000c17 	ldw	r12,48(sp)
811094c8:	003bea06 	br	81108474 <__reset+0xfb0e8474>
811094cc:	dc000915 	stw	r16,36(sp)
811094d0:	003e0e06 	br	81108d0c <__reset+0xfb0e8d0c>
811094d4:	01000e44 	movi	r4,57
811094d8:	8825883a 	mov	r18,r17
811094dc:	9dc00044 	addi	r23,r19,1
811094e0:	99000005 	stb	r4,0(r19)
811094e4:	a023883a 	mov	r17,r20
811094e8:	dc000915 	stw	r16,36(sp)
811094ec:	003da406 	br	81108b80 <__reset+0xfb0e8b80>
811094f0:	d9801417 	ldw	r6,80(sp)
811094f4:	d9c01517 	ldw	r7,84(sp)
811094f8:	0009883a 	mov	r4,zero
811094fc:	014ff834 	movhi	r5,16352
81109500:	1110e700 	call	81110e70 <__subdf3>
81109504:	880d883a 	mov	r6,r17
81109508:	a00f883a 	mov	r7,r20
8110950c:	1009883a 	mov	r4,r2
81109510:	180b883a 	mov	r5,r3
81109514:	1110ca00 	call	81110ca0 <__gedf2>
81109518:	00bc7c0e 	bge	zero,r2,8110870c <__reset+0xfb0e870c>
8110951c:	01000c04 	movi	r4,48
81109520:	00000106 	br	81109528 <_dtoa_r+0x1580>
81109524:	102f883a 	mov	r23,r2
81109528:	b8bfffc4 	addi	r2,r23,-1
8110952c:	10c00007 	ldb	r3,0(r2)
81109530:	193ffc26 	beq	r3,r4,81109524 <__reset+0xfb0e9524>
81109534:	d9801317 	ldw	r6,76(sp)
81109538:	d9800515 	stw	r6,20(sp)
8110953c:	003c4406 	br	81108650 <__reset+0xfb0e8650>
81109540:	d9801317 	ldw	r6,76(sp)
81109544:	d9800515 	stw	r6,20(sp)
81109548:	003cea06 	br	811088f4 <__reset+0xfb0e88f4>
8110954c:	dd800f17 	ldw	r22,60(sp)
81109550:	dcc01017 	ldw	r19,64(sp)
81109554:	dc801217 	ldw	r18,72(sp)
81109558:	003c6c06 	br	8110870c <__reset+0xfb0e870c>
8110955c:	903e031e 	bne	r18,zero,81108d6c <__reset+0xfb0e8d6c>
81109560:	003ebb06 	br	81109050 <__reset+0xfb0e9050>
81109564:	103e6c1e 	bne	r2,zero,81108f18 <__reset+0xfb0e8f18>
81109568:	4080004c 	andi	r2,r8,1
8110956c:	103e6a26 	beq	r2,zero,81108f18 <__reset+0xfb0e8f18>
81109570:	003e6606 	br	81108f0c <__reset+0xfb0e8f0c>
81109574:	d8c00317 	ldw	r3,12(sp)
81109578:	00800084 	movi	r2,2
8110957c:	10c02916 	blt	r2,r3,81109624 <_dtoa_r+0x167c>
81109580:	d9000c17 	ldw	r4,48(sp)
81109584:	003e8806 	br	81108fa8 <__reset+0xfb0e8fa8>
81109588:	04000084 	movi	r16,2
8110958c:	003b9d06 	br	81108404 <__reset+0xfb0e8404>
81109590:	d9001317 	ldw	r4,76(sp)
81109594:	d9000515 	stw	r4,20(sp)
81109598:	003cd606 	br	811088f4 <__reset+0xfb0e88f4>
8110959c:	d8801317 	ldw	r2,76(sp)
811095a0:	d8800515 	stw	r2,20(sp)
811095a4:	003c2a06 	br	81108650 <__reset+0xfb0e8650>
811095a8:	d9800317 	ldw	r6,12(sp)
811095ac:	00800084 	movi	r2,2
811095b0:	11801516 	blt	r2,r6,81109608 <_dtoa_r+0x1660>
811095b4:	d9c00c17 	ldw	r7,48(sp)
811095b8:	d9c00615 	stw	r7,24(sp)
811095bc:	003df706 	br	81108d9c <__reset+0xfb0e8d9c>
811095c0:	193d3926 	beq	r3,r4,81108aa8 <__reset+0xfb0e8aa8>
811095c4:	00c00f04 	movi	r3,60
811095c8:	1885c83a 	sub	r2,r3,r2
811095cc:	003ddf06 	br	81108d4c <__reset+0xfb0e8d4c>
811095d0:	e009883a 	mov	r4,fp
811095d4:	e0001115 	stw	zero,68(fp)
811095d8:	000b883a 	mov	r5,zero
811095dc:	110b4fc0 	call	8110b4fc <_Balloc>
811095e0:	d8800715 	stw	r2,28(sp)
811095e4:	d8c00717 	ldw	r3,28(sp)
811095e8:	00bfffc4 	movi	r2,-1
811095ec:	01000044 	movi	r4,1
811095f0:	d8800c15 	stw	r2,48(sp)
811095f4:	e0c01015 	stw	r3,64(fp)
811095f8:	d9000b15 	stw	r4,44(sp)
811095fc:	d8800615 	stw	r2,24(sp)
81109600:	d8002215 	stw	zero,136(sp)
81109604:	003c4106 	br	8110870c <__reset+0xfb0e870c>
81109608:	d8c00c17 	ldw	r3,48(sp)
8110960c:	d8c00615 	stw	r3,24(sp)
81109610:	003e7006 	br	81108fd4 <__reset+0xfb0e8fd4>
81109614:	04400044 	movi	r17,1
81109618:	003b2006 	br	8110829c <__reset+0xfb0e829c>
8110961c:	000b883a 	mov	r5,zero
81109620:	003b3d06 	br	81108318 <__reset+0xfb0e8318>
81109624:	d8800c17 	ldw	r2,48(sp)
81109628:	d8800615 	stw	r2,24(sp)
8110962c:	003e6906 	br	81108fd4 <__reset+0xfb0e8fd4>

81109630 <__sflush_r>:
81109630:	2880030b 	ldhu	r2,12(r5)
81109634:	defffb04 	addi	sp,sp,-20
81109638:	dcc00315 	stw	r19,12(sp)
8110963c:	dc400115 	stw	r17,4(sp)
81109640:	dfc00415 	stw	ra,16(sp)
81109644:	dc800215 	stw	r18,8(sp)
81109648:	dc000015 	stw	r16,0(sp)
8110964c:	10c0020c 	andi	r3,r2,8
81109650:	2823883a 	mov	r17,r5
81109654:	2027883a 	mov	r19,r4
81109658:	1800311e 	bne	r3,zero,81109720 <__sflush_r+0xf0>
8110965c:	28c00117 	ldw	r3,4(r5)
81109660:	10820014 	ori	r2,r2,2048
81109664:	2880030d 	sth	r2,12(r5)
81109668:	00c04b0e 	bge	zero,r3,81109798 <__sflush_r+0x168>
8110966c:	8a000a17 	ldw	r8,40(r17)
81109670:	40002326 	beq	r8,zero,81109700 <__sflush_r+0xd0>
81109674:	9c000017 	ldw	r16,0(r19)
81109678:	10c4000c 	andi	r3,r2,4096
8110967c:	98000015 	stw	zero,0(r19)
81109680:	18004826 	beq	r3,zero,811097a4 <__sflush_r+0x174>
81109684:	89801417 	ldw	r6,80(r17)
81109688:	10c0010c 	andi	r3,r2,4
8110968c:	18000626 	beq	r3,zero,811096a8 <__sflush_r+0x78>
81109690:	88c00117 	ldw	r3,4(r17)
81109694:	88800c17 	ldw	r2,48(r17)
81109698:	30cdc83a 	sub	r6,r6,r3
8110969c:	10000226 	beq	r2,zero,811096a8 <__sflush_r+0x78>
811096a0:	88800f17 	ldw	r2,60(r17)
811096a4:	308dc83a 	sub	r6,r6,r2
811096a8:	89400717 	ldw	r5,28(r17)
811096ac:	000f883a 	mov	r7,zero
811096b0:	9809883a 	mov	r4,r19
811096b4:	403ee83a 	callr	r8
811096b8:	00ffffc4 	movi	r3,-1
811096bc:	10c04426 	beq	r2,r3,811097d0 <__sflush_r+0x1a0>
811096c0:	88c0030b 	ldhu	r3,12(r17)
811096c4:	89000417 	ldw	r4,16(r17)
811096c8:	88000115 	stw	zero,4(r17)
811096cc:	197dffcc 	andi	r5,r3,63487
811096d0:	8940030d 	sth	r5,12(r17)
811096d4:	89000015 	stw	r4,0(r17)
811096d8:	18c4000c 	andi	r3,r3,4096
811096dc:	18002c1e 	bne	r3,zero,81109790 <__sflush_r+0x160>
811096e0:	89400c17 	ldw	r5,48(r17)
811096e4:	9c000015 	stw	r16,0(r19)
811096e8:	28000526 	beq	r5,zero,81109700 <__sflush_r+0xd0>
811096ec:	88801004 	addi	r2,r17,64
811096f0:	28800226 	beq	r5,r2,811096fc <__sflush_r+0xcc>
811096f4:	9809883a 	mov	r4,r19
811096f8:	1109d9c0 	call	81109d9c <_free_r>
811096fc:	88000c15 	stw	zero,48(r17)
81109700:	0005883a 	mov	r2,zero
81109704:	dfc00417 	ldw	ra,16(sp)
81109708:	dcc00317 	ldw	r19,12(sp)
8110970c:	dc800217 	ldw	r18,8(sp)
81109710:	dc400117 	ldw	r17,4(sp)
81109714:	dc000017 	ldw	r16,0(sp)
81109718:	dec00504 	addi	sp,sp,20
8110971c:	f800283a 	ret
81109720:	2c800417 	ldw	r18,16(r5)
81109724:	903ff626 	beq	r18,zero,81109700 <__reset+0xfb0e9700>
81109728:	2c000017 	ldw	r16,0(r5)
8110972c:	108000cc 	andi	r2,r2,3
81109730:	2c800015 	stw	r18,0(r5)
81109734:	84a1c83a 	sub	r16,r16,r18
81109738:	1000131e 	bne	r2,zero,81109788 <__sflush_r+0x158>
8110973c:	28800517 	ldw	r2,20(r5)
81109740:	88800215 	stw	r2,8(r17)
81109744:	04000316 	blt	zero,r16,81109754 <__sflush_r+0x124>
81109748:	003fed06 	br	81109700 <__reset+0xfb0e9700>
8110974c:	90a5883a 	add	r18,r18,r2
81109750:	043feb0e 	bge	zero,r16,81109700 <__reset+0xfb0e9700>
81109754:	88800917 	ldw	r2,36(r17)
81109758:	89400717 	ldw	r5,28(r17)
8110975c:	800f883a 	mov	r7,r16
81109760:	900d883a 	mov	r6,r18
81109764:	9809883a 	mov	r4,r19
81109768:	103ee83a 	callr	r2
8110976c:	80a1c83a 	sub	r16,r16,r2
81109770:	00bff616 	blt	zero,r2,8110974c <__reset+0xfb0e974c>
81109774:	88c0030b 	ldhu	r3,12(r17)
81109778:	00bfffc4 	movi	r2,-1
8110977c:	18c01014 	ori	r3,r3,64
81109780:	88c0030d 	sth	r3,12(r17)
81109784:	003fdf06 	br	81109704 <__reset+0xfb0e9704>
81109788:	0005883a 	mov	r2,zero
8110978c:	003fec06 	br	81109740 <__reset+0xfb0e9740>
81109790:	88801415 	stw	r2,80(r17)
81109794:	003fd206 	br	811096e0 <__reset+0xfb0e96e0>
81109798:	28c00f17 	ldw	r3,60(r5)
8110979c:	00ffb316 	blt	zero,r3,8110966c <__reset+0xfb0e966c>
811097a0:	003fd706 	br	81109700 <__reset+0xfb0e9700>
811097a4:	89400717 	ldw	r5,28(r17)
811097a8:	000d883a 	mov	r6,zero
811097ac:	01c00044 	movi	r7,1
811097b0:	9809883a 	mov	r4,r19
811097b4:	403ee83a 	callr	r8
811097b8:	100d883a 	mov	r6,r2
811097bc:	00bfffc4 	movi	r2,-1
811097c0:	30801426 	beq	r6,r2,81109814 <__sflush_r+0x1e4>
811097c4:	8880030b 	ldhu	r2,12(r17)
811097c8:	8a000a17 	ldw	r8,40(r17)
811097cc:	003fae06 	br	81109688 <__reset+0xfb0e9688>
811097d0:	98c00017 	ldw	r3,0(r19)
811097d4:	183fba26 	beq	r3,zero,811096c0 <__reset+0xfb0e96c0>
811097d8:	01000744 	movi	r4,29
811097dc:	19000626 	beq	r3,r4,811097f8 <__sflush_r+0x1c8>
811097e0:	01000584 	movi	r4,22
811097e4:	19000426 	beq	r3,r4,811097f8 <__sflush_r+0x1c8>
811097e8:	88c0030b 	ldhu	r3,12(r17)
811097ec:	18c01014 	ori	r3,r3,64
811097f0:	88c0030d 	sth	r3,12(r17)
811097f4:	003fc306 	br	81109704 <__reset+0xfb0e9704>
811097f8:	8880030b 	ldhu	r2,12(r17)
811097fc:	88c00417 	ldw	r3,16(r17)
81109800:	88000115 	stw	zero,4(r17)
81109804:	10bdffcc 	andi	r2,r2,63487
81109808:	8880030d 	sth	r2,12(r17)
8110980c:	88c00015 	stw	r3,0(r17)
81109810:	003fb306 	br	811096e0 <__reset+0xfb0e96e0>
81109814:	98800017 	ldw	r2,0(r19)
81109818:	103fea26 	beq	r2,zero,811097c4 <__reset+0xfb0e97c4>
8110981c:	00c00744 	movi	r3,29
81109820:	10c00226 	beq	r2,r3,8110982c <__sflush_r+0x1fc>
81109824:	00c00584 	movi	r3,22
81109828:	10c0031e 	bne	r2,r3,81109838 <__sflush_r+0x208>
8110982c:	9c000015 	stw	r16,0(r19)
81109830:	0005883a 	mov	r2,zero
81109834:	003fb306 	br	81109704 <__reset+0xfb0e9704>
81109838:	88c0030b 	ldhu	r3,12(r17)
8110983c:	3005883a 	mov	r2,r6
81109840:	18c01014 	ori	r3,r3,64
81109844:	88c0030d 	sth	r3,12(r17)
81109848:	003fae06 	br	81109704 <__reset+0xfb0e9704>

8110984c <_fflush_r>:
8110984c:	defffd04 	addi	sp,sp,-12
81109850:	dc000115 	stw	r16,4(sp)
81109854:	dfc00215 	stw	ra,8(sp)
81109858:	2021883a 	mov	r16,r4
8110985c:	20000226 	beq	r4,zero,81109868 <_fflush_r+0x1c>
81109860:	20800e17 	ldw	r2,56(r4)
81109864:	10000c26 	beq	r2,zero,81109898 <_fflush_r+0x4c>
81109868:	2880030f 	ldh	r2,12(r5)
8110986c:	1000051e 	bne	r2,zero,81109884 <_fflush_r+0x38>
81109870:	0005883a 	mov	r2,zero
81109874:	dfc00217 	ldw	ra,8(sp)
81109878:	dc000117 	ldw	r16,4(sp)
8110987c:	dec00304 	addi	sp,sp,12
81109880:	f800283a 	ret
81109884:	8009883a 	mov	r4,r16
81109888:	dfc00217 	ldw	ra,8(sp)
8110988c:	dc000117 	ldw	r16,4(sp)
81109890:	dec00304 	addi	sp,sp,12
81109894:	11096301 	jmpi	81109630 <__sflush_r>
81109898:	d9400015 	stw	r5,0(sp)
8110989c:	1109c280 	call	81109c28 <__sinit>
811098a0:	d9400017 	ldw	r5,0(sp)
811098a4:	003ff006 	br	81109868 <__reset+0xfb0e9868>

811098a8 <fflush>:
811098a8:	20000526 	beq	r4,zero,811098c0 <fflush+0x18>
811098ac:	00a044b4 	movhi	r2,33042
811098b0:	10a82a04 	addi	r2,r2,-24408
811098b4:	200b883a 	mov	r5,r4
811098b8:	11000017 	ldw	r4,0(r2)
811098bc:	110984c1 	jmpi	8110984c <_fflush_r>
811098c0:	00a044b4 	movhi	r2,33042
811098c4:	10a82904 	addi	r2,r2,-24412
811098c8:	11000017 	ldw	r4,0(r2)
811098cc:	01604474 	movhi	r5,33041
811098d0:	29661304 	addi	r5,r5,-26548
811098d4:	110a62c1 	jmpi	8110a62c <_fwalk_reent>

811098d8 <__fp_unlock>:
811098d8:	0005883a 	mov	r2,zero
811098dc:	f800283a 	ret

811098e0 <_cleanup_r>:
811098e0:	01604474 	movhi	r5,33041
811098e4:	2979ef04 	addi	r5,r5,-6212
811098e8:	110a62c1 	jmpi	8110a62c <_fwalk_reent>

811098ec <__sinit.part.1>:
811098ec:	defff704 	addi	sp,sp,-36
811098f0:	00e04474 	movhi	r3,33041
811098f4:	dfc00815 	stw	ra,32(sp)
811098f8:	ddc00715 	stw	r23,28(sp)
811098fc:	dd800615 	stw	r22,24(sp)
81109900:	dd400515 	stw	r21,20(sp)
81109904:	dd000415 	stw	r20,16(sp)
81109908:	dcc00315 	stw	r19,12(sp)
8110990c:	dc800215 	stw	r18,8(sp)
81109910:	dc400115 	stw	r17,4(sp)
81109914:	dc000015 	stw	r16,0(sp)
81109918:	18e63804 	addi	r3,r3,-26400
8110991c:	24000117 	ldw	r16,4(r4)
81109920:	20c00f15 	stw	r3,60(r4)
81109924:	2080bb04 	addi	r2,r4,748
81109928:	00c000c4 	movi	r3,3
8110992c:	20c0b915 	stw	r3,740(r4)
81109930:	2080ba15 	stw	r2,744(r4)
81109934:	2000b815 	stw	zero,736(r4)
81109938:	05c00204 	movi	r23,8
8110993c:	00800104 	movi	r2,4
81109940:	2025883a 	mov	r18,r4
81109944:	b80d883a 	mov	r6,r23
81109948:	81001704 	addi	r4,r16,92
8110994c:	000b883a 	mov	r5,zero
81109950:	80000015 	stw	zero,0(r16)
81109954:	80000115 	stw	zero,4(r16)
81109958:	80000215 	stw	zero,8(r16)
8110995c:	8080030d 	sth	r2,12(r16)
81109960:	80001915 	stw	zero,100(r16)
81109964:	8000038d 	sth	zero,14(r16)
81109968:	80000415 	stw	zero,16(r16)
8110996c:	80000515 	stw	zero,20(r16)
81109970:	80000615 	stw	zero,24(r16)
81109974:	110b3d40 	call	8110b3d4 <memset>
81109978:	05a04474 	movhi	r22,33041
8110997c:	94400217 	ldw	r17,8(r18)
81109980:	05604474 	movhi	r21,33041
81109984:	05204474 	movhi	r20,33041
81109988:	04e04474 	movhi	r19,33041
8110998c:	b5b32304 	addi	r22,r22,-13172
81109990:	ad733a04 	addi	r21,r21,-13080
81109994:	a5335904 	addi	r20,r20,-12956
81109998:	9cf37004 	addi	r19,r19,-12864
8110999c:	85800815 	stw	r22,32(r16)
811099a0:	85400915 	stw	r21,36(r16)
811099a4:	85000a15 	stw	r20,40(r16)
811099a8:	84c00b15 	stw	r19,44(r16)
811099ac:	84000715 	stw	r16,28(r16)
811099b0:	00800284 	movi	r2,10
811099b4:	8880030d 	sth	r2,12(r17)
811099b8:	00800044 	movi	r2,1
811099bc:	b80d883a 	mov	r6,r23
811099c0:	89001704 	addi	r4,r17,92
811099c4:	000b883a 	mov	r5,zero
811099c8:	88000015 	stw	zero,0(r17)
811099cc:	88000115 	stw	zero,4(r17)
811099d0:	88000215 	stw	zero,8(r17)
811099d4:	88001915 	stw	zero,100(r17)
811099d8:	8880038d 	sth	r2,14(r17)
811099dc:	88000415 	stw	zero,16(r17)
811099e0:	88000515 	stw	zero,20(r17)
811099e4:	88000615 	stw	zero,24(r17)
811099e8:	110b3d40 	call	8110b3d4 <memset>
811099ec:	94000317 	ldw	r16,12(r18)
811099f0:	00800484 	movi	r2,18
811099f4:	8c400715 	stw	r17,28(r17)
811099f8:	8d800815 	stw	r22,32(r17)
811099fc:	8d400915 	stw	r21,36(r17)
81109a00:	8d000a15 	stw	r20,40(r17)
81109a04:	8cc00b15 	stw	r19,44(r17)
81109a08:	8080030d 	sth	r2,12(r16)
81109a0c:	00800084 	movi	r2,2
81109a10:	80000015 	stw	zero,0(r16)
81109a14:	80000115 	stw	zero,4(r16)
81109a18:	80000215 	stw	zero,8(r16)
81109a1c:	80001915 	stw	zero,100(r16)
81109a20:	8080038d 	sth	r2,14(r16)
81109a24:	80000415 	stw	zero,16(r16)
81109a28:	80000515 	stw	zero,20(r16)
81109a2c:	80000615 	stw	zero,24(r16)
81109a30:	b80d883a 	mov	r6,r23
81109a34:	000b883a 	mov	r5,zero
81109a38:	81001704 	addi	r4,r16,92
81109a3c:	110b3d40 	call	8110b3d4 <memset>
81109a40:	00800044 	movi	r2,1
81109a44:	84000715 	stw	r16,28(r16)
81109a48:	85800815 	stw	r22,32(r16)
81109a4c:	85400915 	stw	r21,36(r16)
81109a50:	85000a15 	stw	r20,40(r16)
81109a54:	84c00b15 	stw	r19,44(r16)
81109a58:	90800e15 	stw	r2,56(r18)
81109a5c:	dfc00817 	ldw	ra,32(sp)
81109a60:	ddc00717 	ldw	r23,28(sp)
81109a64:	dd800617 	ldw	r22,24(sp)
81109a68:	dd400517 	ldw	r21,20(sp)
81109a6c:	dd000417 	ldw	r20,16(sp)
81109a70:	dcc00317 	ldw	r19,12(sp)
81109a74:	dc800217 	ldw	r18,8(sp)
81109a78:	dc400117 	ldw	r17,4(sp)
81109a7c:	dc000017 	ldw	r16,0(sp)
81109a80:	dec00904 	addi	sp,sp,36
81109a84:	f800283a 	ret

81109a88 <__fp_lock>:
81109a88:	0005883a 	mov	r2,zero
81109a8c:	f800283a 	ret

81109a90 <__sfmoreglue>:
81109a90:	defffc04 	addi	sp,sp,-16
81109a94:	dc400115 	stw	r17,4(sp)
81109a98:	2c7fffc4 	addi	r17,r5,-1
81109a9c:	8c401a24 	muli	r17,r17,104
81109aa0:	dc800215 	stw	r18,8(sp)
81109aa4:	2825883a 	mov	r18,r5
81109aa8:	89401d04 	addi	r5,r17,116
81109aac:	dc000015 	stw	r16,0(sp)
81109ab0:	dfc00315 	stw	ra,12(sp)
81109ab4:	110a9880 	call	8110a988 <_malloc_r>
81109ab8:	1021883a 	mov	r16,r2
81109abc:	10000726 	beq	r2,zero,81109adc <__sfmoreglue+0x4c>
81109ac0:	11000304 	addi	r4,r2,12
81109ac4:	10000015 	stw	zero,0(r2)
81109ac8:	14800115 	stw	r18,4(r2)
81109acc:	11000215 	stw	r4,8(r2)
81109ad0:	89801a04 	addi	r6,r17,104
81109ad4:	000b883a 	mov	r5,zero
81109ad8:	110b3d40 	call	8110b3d4 <memset>
81109adc:	8005883a 	mov	r2,r16
81109ae0:	dfc00317 	ldw	ra,12(sp)
81109ae4:	dc800217 	ldw	r18,8(sp)
81109ae8:	dc400117 	ldw	r17,4(sp)
81109aec:	dc000017 	ldw	r16,0(sp)
81109af0:	dec00404 	addi	sp,sp,16
81109af4:	f800283a 	ret

81109af8 <__sfp>:
81109af8:	defffb04 	addi	sp,sp,-20
81109afc:	dc000015 	stw	r16,0(sp)
81109b00:	042044b4 	movhi	r16,33042
81109b04:	84282904 	addi	r16,r16,-24412
81109b08:	dcc00315 	stw	r19,12(sp)
81109b0c:	2027883a 	mov	r19,r4
81109b10:	81000017 	ldw	r4,0(r16)
81109b14:	dfc00415 	stw	ra,16(sp)
81109b18:	dc800215 	stw	r18,8(sp)
81109b1c:	20800e17 	ldw	r2,56(r4)
81109b20:	dc400115 	stw	r17,4(sp)
81109b24:	1000021e 	bne	r2,zero,81109b30 <__sfp+0x38>
81109b28:	11098ec0 	call	811098ec <__sinit.part.1>
81109b2c:	81000017 	ldw	r4,0(r16)
81109b30:	2480b804 	addi	r18,r4,736
81109b34:	047fffc4 	movi	r17,-1
81109b38:	91000117 	ldw	r4,4(r18)
81109b3c:	94000217 	ldw	r16,8(r18)
81109b40:	213fffc4 	addi	r4,r4,-1
81109b44:	20000a16 	blt	r4,zero,81109b70 <__sfp+0x78>
81109b48:	8080030f 	ldh	r2,12(r16)
81109b4c:	10000c26 	beq	r2,zero,81109b80 <__sfp+0x88>
81109b50:	80c01d04 	addi	r3,r16,116
81109b54:	00000206 	br	81109b60 <__sfp+0x68>
81109b58:	18bfe60f 	ldh	r2,-104(r3)
81109b5c:	10000826 	beq	r2,zero,81109b80 <__sfp+0x88>
81109b60:	213fffc4 	addi	r4,r4,-1
81109b64:	1c3ffd04 	addi	r16,r3,-12
81109b68:	18c01a04 	addi	r3,r3,104
81109b6c:	247ffa1e 	bne	r4,r17,81109b58 <__reset+0xfb0e9b58>
81109b70:	90800017 	ldw	r2,0(r18)
81109b74:	10001d26 	beq	r2,zero,81109bec <__sfp+0xf4>
81109b78:	1025883a 	mov	r18,r2
81109b7c:	003fee06 	br	81109b38 <__reset+0xfb0e9b38>
81109b80:	00bfffc4 	movi	r2,-1
81109b84:	8080038d 	sth	r2,14(r16)
81109b88:	00800044 	movi	r2,1
81109b8c:	8080030d 	sth	r2,12(r16)
81109b90:	80001915 	stw	zero,100(r16)
81109b94:	80000015 	stw	zero,0(r16)
81109b98:	80000215 	stw	zero,8(r16)
81109b9c:	80000115 	stw	zero,4(r16)
81109ba0:	80000415 	stw	zero,16(r16)
81109ba4:	80000515 	stw	zero,20(r16)
81109ba8:	80000615 	stw	zero,24(r16)
81109bac:	01800204 	movi	r6,8
81109bb0:	000b883a 	mov	r5,zero
81109bb4:	81001704 	addi	r4,r16,92
81109bb8:	110b3d40 	call	8110b3d4 <memset>
81109bbc:	8005883a 	mov	r2,r16
81109bc0:	80000c15 	stw	zero,48(r16)
81109bc4:	80000d15 	stw	zero,52(r16)
81109bc8:	80001115 	stw	zero,68(r16)
81109bcc:	80001215 	stw	zero,72(r16)
81109bd0:	dfc00417 	ldw	ra,16(sp)
81109bd4:	dcc00317 	ldw	r19,12(sp)
81109bd8:	dc800217 	ldw	r18,8(sp)
81109bdc:	dc400117 	ldw	r17,4(sp)
81109be0:	dc000017 	ldw	r16,0(sp)
81109be4:	dec00504 	addi	sp,sp,20
81109be8:	f800283a 	ret
81109bec:	01400104 	movi	r5,4
81109bf0:	9809883a 	mov	r4,r19
81109bf4:	1109a900 	call	81109a90 <__sfmoreglue>
81109bf8:	90800015 	stw	r2,0(r18)
81109bfc:	103fde1e 	bne	r2,zero,81109b78 <__reset+0xfb0e9b78>
81109c00:	00800304 	movi	r2,12
81109c04:	98800015 	stw	r2,0(r19)
81109c08:	0005883a 	mov	r2,zero
81109c0c:	003ff006 	br	81109bd0 <__reset+0xfb0e9bd0>

81109c10 <_cleanup>:
81109c10:	00a044b4 	movhi	r2,33042
81109c14:	10a82904 	addi	r2,r2,-24412
81109c18:	11000017 	ldw	r4,0(r2)
81109c1c:	01604474 	movhi	r5,33041
81109c20:	2979ef04 	addi	r5,r5,-6212
81109c24:	110a62c1 	jmpi	8110a62c <_fwalk_reent>

81109c28 <__sinit>:
81109c28:	20800e17 	ldw	r2,56(r4)
81109c2c:	10000126 	beq	r2,zero,81109c34 <__sinit+0xc>
81109c30:	f800283a 	ret
81109c34:	11098ec1 	jmpi	811098ec <__sinit.part.1>

81109c38 <__sfp_lock_acquire>:
81109c38:	f800283a 	ret

81109c3c <__sfp_lock_release>:
81109c3c:	f800283a 	ret

81109c40 <__sinit_lock_acquire>:
81109c40:	f800283a 	ret

81109c44 <__sinit_lock_release>:
81109c44:	f800283a 	ret

81109c48 <__fp_lock_all>:
81109c48:	00a044b4 	movhi	r2,33042
81109c4c:	10a82a04 	addi	r2,r2,-24408
81109c50:	11000017 	ldw	r4,0(r2)
81109c54:	01604474 	movhi	r5,33041
81109c58:	2966a204 	addi	r5,r5,-25976
81109c5c:	110a5681 	jmpi	8110a568 <_fwalk>

81109c60 <__fp_unlock_all>:
81109c60:	00a044b4 	movhi	r2,33042
81109c64:	10a82a04 	addi	r2,r2,-24408
81109c68:	11000017 	ldw	r4,0(r2)
81109c6c:	01604474 	movhi	r5,33041
81109c70:	29663604 	addi	r5,r5,-26408
81109c74:	110a5681 	jmpi	8110a568 <_fwalk>

81109c78 <_malloc_trim_r>:
81109c78:	defffb04 	addi	sp,sp,-20
81109c7c:	dcc00315 	stw	r19,12(sp)
81109c80:	04e044b4 	movhi	r19,33042
81109c84:	dc800215 	stw	r18,8(sp)
81109c88:	dc400115 	stw	r17,4(sp)
81109c8c:	dc000015 	stw	r16,0(sp)
81109c90:	dfc00415 	stw	ra,16(sp)
81109c94:	2821883a 	mov	r16,r5
81109c98:	9ce25d04 	addi	r19,r19,-30348
81109c9c:	2025883a 	mov	r18,r4
81109ca0:	1111e200 	call	81111e20 <__malloc_lock>
81109ca4:	98800217 	ldw	r2,8(r19)
81109ca8:	14400117 	ldw	r17,4(r2)
81109cac:	00bfff04 	movi	r2,-4
81109cb0:	88a2703a 	and	r17,r17,r2
81109cb4:	8c21c83a 	sub	r16,r17,r16
81109cb8:	8403fbc4 	addi	r16,r16,4079
81109cbc:	8020d33a 	srli	r16,r16,12
81109cc0:	0083ffc4 	movi	r2,4095
81109cc4:	843fffc4 	addi	r16,r16,-1
81109cc8:	8020933a 	slli	r16,r16,12
81109ccc:	1400060e 	bge	r2,r16,81109ce8 <_malloc_trim_r+0x70>
81109cd0:	000b883a 	mov	r5,zero
81109cd4:	9009883a 	mov	r4,r18
81109cd8:	110cc380 	call	8110cc38 <_sbrk_r>
81109cdc:	98c00217 	ldw	r3,8(r19)
81109ce0:	1c47883a 	add	r3,r3,r17
81109ce4:	10c00a26 	beq	r2,r3,81109d10 <_malloc_trim_r+0x98>
81109ce8:	9009883a 	mov	r4,r18
81109cec:	1111e440 	call	81111e44 <__malloc_unlock>
81109cf0:	0005883a 	mov	r2,zero
81109cf4:	dfc00417 	ldw	ra,16(sp)
81109cf8:	dcc00317 	ldw	r19,12(sp)
81109cfc:	dc800217 	ldw	r18,8(sp)
81109d00:	dc400117 	ldw	r17,4(sp)
81109d04:	dc000017 	ldw	r16,0(sp)
81109d08:	dec00504 	addi	sp,sp,20
81109d0c:	f800283a 	ret
81109d10:	040bc83a 	sub	r5,zero,r16
81109d14:	9009883a 	mov	r4,r18
81109d18:	110cc380 	call	8110cc38 <_sbrk_r>
81109d1c:	00ffffc4 	movi	r3,-1
81109d20:	10c00d26 	beq	r2,r3,81109d58 <_malloc_trim_r+0xe0>
81109d24:	00e044b4 	movhi	r3,33042
81109d28:	18e84f04 	addi	r3,r3,-24260
81109d2c:	18800017 	ldw	r2,0(r3)
81109d30:	99000217 	ldw	r4,8(r19)
81109d34:	8c23c83a 	sub	r17,r17,r16
81109d38:	8c400054 	ori	r17,r17,1
81109d3c:	1421c83a 	sub	r16,r2,r16
81109d40:	24400115 	stw	r17,4(r4)
81109d44:	9009883a 	mov	r4,r18
81109d48:	1c000015 	stw	r16,0(r3)
81109d4c:	1111e440 	call	81111e44 <__malloc_unlock>
81109d50:	00800044 	movi	r2,1
81109d54:	003fe706 	br	81109cf4 <__reset+0xfb0e9cf4>
81109d58:	000b883a 	mov	r5,zero
81109d5c:	9009883a 	mov	r4,r18
81109d60:	110cc380 	call	8110cc38 <_sbrk_r>
81109d64:	99000217 	ldw	r4,8(r19)
81109d68:	014003c4 	movi	r5,15
81109d6c:	1107c83a 	sub	r3,r2,r4
81109d70:	28ffdd0e 	bge	r5,r3,81109ce8 <__reset+0xfb0e9ce8>
81109d74:	016044b4 	movhi	r5,33042
81109d78:	29682c04 	addi	r5,r5,-24400
81109d7c:	29400017 	ldw	r5,0(r5)
81109d80:	18c00054 	ori	r3,r3,1
81109d84:	20c00115 	stw	r3,4(r4)
81109d88:	00e044b4 	movhi	r3,33042
81109d8c:	1145c83a 	sub	r2,r2,r5
81109d90:	18e84f04 	addi	r3,r3,-24260
81109d94:	18800015 	stw	r2,0(r3)
81109d98:	003fd306 	br	81109ce8 <__reset+0xfb0e9ce8>

81109d9c <_free_r>:
81109d9c:	28004126 	beq	r5,zero,81109ea4 <_free_r+0x108>
81109da0:	defffd04 	addi	sp,sp,-12
81109da4:	dc400115 	stw	r17,4(sp)
81109da8:	dc000015 	stw	r16,0(sp)
81109dac:	2023883a 	mov	r17,r4
81109db0:	2821883a 	mov	r16,r5
81109db4:	dfc00215 	stw	ra,8(sp)
81109db8:	1111e200 	call	81111e20 <__malloc_lock>
81109dbc:	81ffff17 	ldw	r7,-4(r16)
81109dc0:	00bfff84 	movi	r2,-2
81109dc4:	012044b4 	movhi	r4,33042
81109dc8:	81bffe04 	addi	r6,r16,-8
81109dcc:	3884703a 	and	r2,r7,r2
81109dd0:	21225d04 	addi	r4,r4,-30348
81109dd4:	308b883a 	add	r5,r6,r2
81109dd8:	2a400117 	ldw	r9,4(r5)
81109ddc:	22000217 	ldw	r8,8(r4)
81109de0:	00ffff04 	movi	r3,-4
81109de4:	48c6703a 	and	r3,r9,r3
81109de8:	2a005726 	beq	r5,r8,81109f48 <_free_r+0x1ac>
81109dec:	28c00115 	stw	r3,4(r5)
81109df0:	39c0004c 	andi	r7,r7,1
81109df4:	3800091e 	bne	r7,zero,81109e1c <_free_r+0x80>
81109df8:	823ffe17 	ldw	r8,-8(r16)
81109dfc:	22400204 	addi	r9,r4,8
81109e00:	320dc83a 	sub	r6,r6,r8
81109e04:	31c00217 	ldw	r7,8(r6)
81109e08:	1205883a 	add	r2,r2,r8
81109e0c:	3a406526 	beq	r7,r9,81109fa4 <_free_r+0x208>
81109e10:	32000317 	ldw	r8,12(r6)
81109e14:	3a000315 	stw	r8,12(r7)
81109e18:	41c00215 	stw	r7,8(r8)
81109e1c:	28cf883a 	add	r7,r5,r3
81109e20:	39c00117 	ldw	r7,4(r7)
81109e24:	39c0004c 	andi	r7,r7,1
81109e28:	38003a26 	beq	r7,zero,81109f14 <_free_r+0x178>
81109e2c:	10c00054 	ori	r3,r2,1
81109e30:	30c00115 	stw	r3,4(r6)
81109e34:	3087883a 	add	r3,r6,r2
81109e38:	18800015 	stw	r2,0(r3)
81109e3c:	00c07fc4 	movi	r3,511
81109e40:	18801936 	bltu	r3,r2,81109ea8 <_free_r+0x10c>
81109e44:	1004d0fa 	srli	r2,r2,3
81109e48:	01c00044 	movi	r7,1
81109e4c:	21400117 	ldw	r5,4(r4)
81109e50:	10c00044 	addi	r3,r2,1
81109e54:	18c7883a 	add	r3,r3,r3
81109e58:	1005d0ba 	srai	r2,r2,2
81109e5c:	18c7883a 	add	r3,r3,r3
81109e60:	18c7883a 	add	r3,r3,r3
81109e64:	1907883a 	add	r3,r3,r4
81109e68:	3884983a 	sll	r2,r7,r2
81109e6c:	19c00017 	ldw	r7,0(r3)
81109e70:	1a3ffe04 	addi	r8,r3,-8
81109e74:	1144b03a 	or	r2,r2,r5
81109e78:	32000315 	stw	r8,12(r6)
81109e7c:	31c00215 	stw	r7,8(r6)
81109e80:	20800115 	stw	r2,4(r4)
81109e84:	19800015 	stw	r6,0(r3)
81109e88:	39800315 	stw	r6,12(r7)
81109e8c:	8809883a 	mov	r4,r17
81109e90:	dfc00217 	ldw	ra,8(sp)
81109e94:	dc400117 	ldw	r17,4(sp)
81109e98:	dc000017 	ldw	r16,0(sp)
81109e9c:	dec00304 	addi	sp,sp,12
81109ea0:	1111e441 	jmpi	81111e44 <__malloc_unlock>
81109ea4:	f800283a 	ret
81109ea8:	100ad27a 	srli	r5,r2,9
81109eac:	00c00104 	movi	r3,4
81109eb0:	19404a36 	bltu	r3,r5,81109fdc <_free_r+0x240>
81109eb4:	100ad1ba 	srli	r5,r2,6
81109eb8:	28c00e44 	addi	r3,r5,57
81109ebc:	18c7883a 	add	r3,r3,r3
81109ec0:	29400e04 	addi	r5,r5,56
81109ec4:	18c7883a 	add	r3,r3,r3
81109ec8:	18c7883a 	add	r3,r3,r3
81109ecc:	1909883a 	add	r4,r3,r4
81109ed0:	20c00017 	ldw	r3,0(r4)
81109ed4:	01e044b4 	movhi	r7,33042
81109ed8:	213ffe04 	addi	r4,r4,-8
81109edc:	39e25d04 	addi	r7,r7,-30348
81109ee0:	20c04426 	beq	r4,r3,81109ff4 <_free_r+0x258>
81109ee4:	01ffff04 	movi	r7,-4
81109ee8:	19400117 	ldw	r5,4(r3)
81109eec:	29ca703a 	and	r5,r5,r7
81109ef0:	1140022e 	bgeu	r2,r5,81109efc <_free_r+0x160>
81109ef4:	18c00217 	ldw	r3,8(r3)
81109ef8:	20fffb1e 	bne	r4,r3,81109ee8 <__reset+0xfb0e9ee8>
81109efc:	19000317 	ldw	r4,12(r3)
81109f00:	31000315 	stw	r4,12(r6)
81109f04:	30c00215 	stw	r3,8(r6)
81109f08:	21800215 	stw	r6,8(r4)
81109f0c:	19800315 	stw	r6,12(r3)
81109f10:	003fde06 	br	81109e8c <__reset+0xfb0e9e8c>
81109f14:	29c00217 	ldw	r7,8(r5)
81109f18:	10c5883a 	add	r2,r2,r3
81109f1c:	00e044b4 	movhi	r3,33042
81109f20:	18e25f04 	addi	r3,r3,-30340
81109f24:	38c03b26 	beq	r7,r3,8110a014 <_free_r+0x278>
81109f28:	2a000317 	ldw	r8,12(r5)
81109f2c:	11400054 	ori	r5,r2,1
81109f30:	3087883a 	add	r3,r6,r2
81109f34:	3a000315 	stw	r8,12(r7)
81109f38:	41c00215 	stw	r7,8(r8)
81109f3c:	31400115 	stw	r5,4(r6)
81109f40:	18800015 	stw	r2,0(r3)
81109f44:	003fbd06 	br	81109e3c <__reset+0xfb0e9e3c>
81109f48:	39c0004c 	andi	r7,r7,1
81109f4c:	10c5883a 	add	r2,r2,r3
81109f50:	3800071e 	bne	r7,zero,81109f70 <_free_r+0x1d4>
81109f54:	81fffe17 	ldw	r7,-8(r16)
81109f58:	31cdc83a 	sub	r6,r6,r7
81109f5c:	30c00317 	ldw	r3,12(r6)
81109f60:	31400217 	ldw	r5,8(r6)
81109f64:	11c5883a 	add	r2,r2,r7
81109f68:	28c00315 	stw	r3,12(r5)
81109f6c:	19400215 	stw	r5,8(r3)
81109f70:	10c00054 	ori	r3,r2,1
81109f74:	30c00115 	stw	r3,4(r6)
81109f78:	00e044b4 	movhi	r3,33042
81109f7c:	18e82d04 	addi	r3,r3,-24396
81109f80:	18c00017 	ldw	r3,0(r3)
81109f84:	21800215 	stw	r6,8(r4)
81109f88:	10ffc036 	bltu	r2,r3,81109e8c <__reset+0xfb0e9e8c>
81109f8c:	00a044b4 	movhi	r2,33042
81109f90:	10a84604 	addi	r2,r2,-24296
81109f94:	11400017 	ldw	r5,0(r2)
81109f98:	8809883a 	mov	r4,r17
81109f9c:	1109c780 	call	81109c78 <_malloc_trim_r>
81109fa0:	003fba06 	br	81109e8c <__reset+0xfb0e9e8c>
81109fa4:	28c9883a 	add	r4,r5,r3
81109fa8:	21000117 	ldw	r4,4(r4)
81109fac:	2100004c 	andi	r4,r4,1
81109fb0:	2000391e 	bne	r4,zero,8110a098 <_free_r+0x2fc>
81109fb4:	29c00217 	ldw	r7,8(r5)
81109fb8:	29000317 	ldw	r4,12(r5)
81109fbc:	1885883a 	add	r2,r3,r2
81109fc0:	10c00054 	ori	r3,r2,1
81109fc4:	39000315 	stw	r4,12(r7)
81109fc8:	21c00215 	stw	r7,8(r4)
81109fcc:	30c00115 	stw	r3,4(r6)
81109fd0:	308d883a 	add	r6,r6,r2
81109fd4:	30800015 	stw	r2,0(r6)
81109fd8:	003fac06 	br	81109e8c <__reset+0xfb0e9e8c>
81109fdc:	00c00504 	movi	r3,20
81109fe0:	19401536 	bltu	r3,r5,8110a038 <_free_r+0x29c>
81109fe4:	28c01704 	addi	r3,r5,92
81109fe8:	18c7883a 	add	r3,r3,r3
81109fec:	294016c4 	addi	r5,r5,91
81109ff0:	003fb406 	br	81109ec4 <__reset+0xfb0e9ec4>
81109ff4:	280bd0ba 	srai	r5,r5,2
81109ff8:	00c00044 	movi	r3,1
81109ffc:	38800117 	ldw	r2,4(r7)
8110a000:	194a983a 	sll	r5,r3,r5
8110a004:	2007883a 	mov	r3,r4
8110a008:	2884b03a 	or	r2,r5,r2
8110a00c:	38800115 	stw	r2,4(r7)
8110a010:	003fbb06 	br	81109f00 <__reset+0xfb0e9f00>
8110a014:	21800515 	stw	r6,20(r4)
8110a018:	21800415 	stw	r6,16(r4)
8110a01c:	10c00054 	ori	r3,r2,1
8110a020:	31c00315 	stw	r7,12(r6)
8110a024:	31c00215 	stw	r7,8(r6)
8110a028:	30c00115 	stw	r3,4(r6)
8110a02c:	308d883a 	add	r6,r6,r2
8110a030:	30800015 	stw	r2,0(r6)
8110a034:	003f9506 	br	81109e8c <__reset+0xfb0e9e8c>
8110a038:	00c01504 	movi	r3,84
8110a03c:	19400536 	bltu	r3,r5,8110a054 <_free_r+0x2b8>
8110a040:	100ad33a 	srli	r5,r2,12
8110a044:	28c01bc4 	addi	r3,r5,111
8110a048:	18c7883a 	add	r3,r3,r3
8110a04c:	29401b84 	addi	r5,r5,110
8110a050:	003f9c06 	br	81109ec4 <__reset+0xfb0e9ec4>
8110a054:	00c05504 	movi	r3,340
8110a058:	19400536 	bltu	r3,r5,8110a070 <_free_r+0x2d4>
8110a05c:	100ad3fa 	srli	r5,r2,15
8110a060:	28c01e04 	addi	r3,r5,120
8110a064:	18c7883a 	add	r3,r3,r3
8110a068:	29401dc4 	addi	r5,r5,119
8110a06c:	003f9506 	br	81109ec4 <__reset+0xfb0e9ec4>
8110a070:	00c15504 	movi	r3,1364
8110a074:	19400536 	bltu	r3,r5,8110a08c <_free_r+0x2f0>
8110a078:	100ad4ba 	srli	r5,r2,18
8110a07c:	28c01f44 	addi	r3,r5,125
8110a080:	18c7883a 	add	r3,r3,r3
8110a084:	29401f04 	addi	r5,r5,124
8110a088:	003f8e06 	br	81109ec4 <__reset+0xfb0e9ec4>
8110a08c:	00c03f84 	movi	r3,254
8110a090:	01401f84 	movi	r5,126
8110a094:	003f8b06 	br	81109ec4 <__reset+0xfb0e9ec4>
8110a098:	10c00054 	ori	r3,r2,1
8110a09c:	30c00115 	stw	r3,4(r6)
8110a0a0:	308d883a 	add	r6,r6,r2
8110a0a4:	30800015 	stw	r2,0(r6)
8110a0a8:	003f7806 	br	81109e8c <__reset+0xfb0e9e8c>

8110a0ac <__sfvwrite_r>:
8110a0ac:	30800217 	ldw	r2,8(r6)
8110a0b0:	10006726 	beq	r2,zero,8110a250 <__sfvwrite_r+0x1a4>
8110a0b4:	28c0030b 	ldhu	r3,12(r5)
8110a0b8:	defff404 	addi	sp,sp,-48
8110a0bc:	dd400715 	stw	r21,28(sp)
8110a0c0:	dd000615 	stw	r20,24(sp)
8110a0c4:	dc000215 	stw	r16,8(sp)
8110a0c8:	dfc00b15 	stw	ra,44(sp)
8110a0cc:	df000a15 	stw	fp,40(sp)
8110a0d0:	ddc00915 	stw	r23,36(sp)
8110a0d4:	dd800815 	stw	r22,32(sp)
8110a0d8:	dcc00515 	stw	r19,20(sp)
8110a0dc:	dc800415 	stw	r18,16(sp)
8110a0e0:	dc400315 	stw	r17,12(sp)
8110a0e4:	1880020c 	andi	r2,r3,8
8110a0e8:	2821883a 	mov	r16,r5
8110a0ec:	202b883a 	mov	r21,r4
8110a0f0:	3029883a 	mov	r20,r6
8110a0f4:	10002726 	beq	r2,zero,8110a194 <__sfvwrite_r+0xe8>
8110a0f8:	28800417 	ldw	r2,16(r5)
8110a0fc:	10002526 	beq	r2,zero,8110a194 <__sfvwrite_r+0xe8>
8110a100:	1880008c 	andi	r2,r3,2
8110a104:	a4400017 	ldw	r17,0(r20)
8110a108:	10002a26 	beq	r2,zero,8110a1b4 <__sfvwrite_r+0x108>
8110a10c:	05a00034 	movhi	r22,32768
8110a110:	0027883a 	mov	r19,zero
8110a114:	0025883a 	mov	r18,zero
8110a118:	b5bf0004 	addi	r22,r22,-1024
8110a11c:	980d883a 	mov	r6,r19
8110a120:	a809883a 	mov	r4,r21
8110a124:	90004626 	beq	r18,zero,8110a240 <__sfvwrite_r+0x194>
8110a128:	900f883a 	mov	r7,r18
8110a12c:	b480022e 	bgeu	r22,r18,8110a138 <__sfvwrite_r+0x8c>
8110a130:	01e00034 	movhi	r7,32768
8110a134:	39ff0004 	addi	r7,r7,-1024
8110a138:	80800917 	ldw	r2,36(r16)
8110a13c:	81400717 	ldw	r5,28(r16)
8110a140:	103ee83a 	callr	r2
8110a144:	0080570e 	bge	zero,r2,8110a2a4 <__sfvwrite_r+0x1f8>
8110a148:	a0c00217 	ldw	r3,8(r20)
8110a14c:	98a7883a 	add	r19,r19,r2
8110a150:	90a5c83a 	sub	r18,r18,r2
8110a154:	1885c83a 	sub	r2,r3,r2
8110a158:	a0800215 	stw	r2,8(r20)
8110a15c:	103fef1e 	bne	r2,zero,8110a11c <__reset+0xfb0ea11c>
8110a160:	0005883a 	mov	r2,zero
8110a164:	dfc00b17 	ldw	ra,44(sp)
8110a168:	df000a17 	ldw	fp,40(sp)
8110a16c:	ddc00917 	ldw	r23,36(sp)
8110a170:	dd800817 	ldw	r22,32(sp)
8110a174:	dd400717 	ldw	r21,28(sp)
8110a178:	dd000617 	ldw	r20,24(sp)
8110a17c:	dcc00517 	ldw	r19,20(sp)
8110a180:	dc800417 	ldw	r18,16(sp)
8110a184:	dc400317 	ldw	r17,12(sp)
8110a188:	dc000217 	ldw	r16,8(sp)
8110a18c:	dec00c04 	addi	sp,sp,48
8110a190:	f800283a 	ret
8110a194:	800b883a 	mov	r5,r16
8110a198:	a809883a 	mov	r4,r21
8110a19c:	1107c540 	call	81107c54 <__swsetup_r>
8110a1a0:	1000eb1e 	bne	r2,zero,8110a550 <__sfvwrite_r+0x4a4>
8110a1a4:	80c0030b 	ldhu	r3,12(r16)
8110a1a8:	a4400017 	ldw	r17,0(r20)
8110a1ac:	1880008c 	andi	r2,r3,2
8110a1b0:	103fd61e 	bne	r2,zero,8110a10c <__reset+0xfb0ea10c>
8110a1b4:	1880004c 	andi	r2,r3,1
8110a1b8:	10003f1e 	bne	r2,zero,8110a2b8 <__sfvwrite_r+0x20c>
8110a1bc:	0039883a 	mov	fp,zero
8110a1c0:	0025883a 	mov	r18,zero
8110a1c4:	90001a26 	beq	r18,zero,8110a230 <__sfvwrite_r+0x184>
8110a1c8:	1880800c 	andi	r2,r3,512
8110a1cc:	84c00217 	ldw	r19,8(r16)
8110a1d0:	10002126 	beq	r2,zero,8110a258 <__sfvwrite_r+0x1ac>
8110a1d4:	982f883a 	mov	r23,r19
8110a1d8:	94c09336 	bltu	r18,r19,8110a428 <__sfvwrite_r+0x37c>
8110a1dc:	1881200c 	andi	r2,r3,1152
8110a1e0:	10009e1e 	bne	r2,zero,8110a45c <__sfvwrite_r+0x3b0>
8110a1e4:	81000017 	ldw	r4,0(r16)
8110a1e8:	b80d883a 	mov	r6,r23
8110a1ec:	e00b883a 	mov	r5,fp
8110a1f0:	110b2780 	call	8110b278 <memmove>
8110a1f4:	80c00217 	ldw	r3,8(r16)
8110a1f8:	81000017 	ldw	r4,0(r16)
8110a1fc:	9005883a 	mov	r2,r18
8110a200:	1ce7c83a 	sub	r19,r3,r19
8110a204:	25cf883a 	add	r7,r4,r23
8110a208:	84c00215 	stw	r19,8(r16)
8110a20c:	81c00015 	stw	r7,0(r16)
8110a210:	a0c00217 	ldw	r3,8(r20)
8110a214:	e0b9883a 	add	fp,fp,r2
8110a218:	90a5c83a 	sub	r18,r18,r2
8110a21c:	18a7c83a 	sub	r19,r3,r2
8110a220:	a4c00215 	stw	r19,8(r20)
8110a224:	983fce26 	beq	r19,zero,8110a160 <__reset+0xfb0ea160>
8110a228:	80c0030b 	ldhu	r3,12(r16)
8110a22c:	903fe61e 	bne	r18,zero,8110a1c8 <__reset+0xfb0ea1c8>
8110a230:	8f000017 	ldw	fp,0(r17)
8110a234:	8c800117 	ldw	r18,4(r17)
8110a238:	8c400204 	addi	r17,r17,8
8110a23c:	003fe106 	br	8110a1c4 <__reset+0xfb0ea1c4>
8110a240:	8cc00017 	ldw	r19,0(r17)
8110a244:	8c800117 	ldw	r18,4(r17)
8110a248:	8c400204 	addi	r17,r17,8
8110a24c:	003fb306 	br	8110a11c <__reset+0xfb0ea11c>
8110a250:	0005883a 	mov	r2,zero
8110a254:	f800283a 	ret
8110a258:	81000017 	ldw	r4,0(r16)
8110a25c:	80800417 	ldw	r2,16(r16)
8110a260:	11005736 	bltu	r2,r4,8110a3c0 <__sfvwrite_r+0x314>
8110a264:	85c00517 	ldw	r23,20(r16)
8110a268:	95c05536 	bltu	r18,r23,8110a3c0 <__sfvwrite_r+0x314>
8110a26c:	00a00034 	movhi	r2,32768
8110a270:	10bfffc4 	addi	r2,r2,-1
8110a274:	9009883a 	mov	r4,r18
8110a278:	1480012e 	bgeu	r2,r18,8110a280 <__sfvwrite_r+0x1d4>
8110a27c:	1009883a 	mov	r4,r2
8110a280:	b80b883a 	mov	r5,r23
8110a284:	110f8d00 	call	8110f8d0 <__divsi3>
8110a288:	15cf383a 	mul	r7,r2,r23
8110a28c:	81400717 	ldw	r5,28(r16)
8110a290:	80800917 	ldw	r2,36(r16)
8110a294:	e00d883a 	mov	r6,fp
8110a298:	a809883a 	mov	r4,r21
8110a29c:	103ee83a 	callr	r2
8110a2a0:	00bfdb16 	blt	zero,r2,8110a210 <__reset+0xfb0ea210>
8110a2a4:	8080030b 	ldhu	r2,12(r16)
8110a2a8:	10801014 	ori	r2,r2,64
8110a2ac:	8080030d 	sth	r2,12(r16)
8110a2b0:	00bfffc4 	movi	r2,-1
8110a2b4:	003fab06 	br	8110a164 <__reset+0xfb0ea164>
8110a2b8:	0027883a 	mov	r19,zero
8110a2bc:	0011883a 	mov	r8,zero
8110a2c0:	0039883a 	mov	fp,zero
8110a2c4:	0025883a 	mov	r18,zero
8110a2c8:	90001f26 	beq	r18,zero,8110a348 <__sfvwrite_r+0x29c>
8110a2cc:	40005a26 	beq	r8,zero,8110a438 <__sfvwrite_r+0x38c>
8110a2d0:	982d883a 	mov	r22,r19
8110a2d4:	94c0012e 	bgeu	r18,r19,8110a2dc <__sfvwrite_r+0x230>
8110a2d8:	902d883a 	mov	r22,r18
8110a2dc:	81000017 	ldw	r4,0(r16)
8110a2e0:	80800417 	ldw	r2,16(r16)
8110a2e4:	b02f883a 	mov	r23,r22
8110a2e8:	81c00517 	ldw	r7,20(r16)
8110a2ec:	1100032e 	bgeu	r2,r4,8110a2fc <__sfvwrite_r+0x250>
8110a2f0:	80c00217 	ldw	r3,8(r16)
8110a2f4:	38c7883a 	add	r3,r7,r3
8110a2f8:	1d801816 	blt	r3,r22,8110a35c <__sfvwrite_r+0x2b0>
8110a2fc:	b1c03e16 	blt	r22,r7,8110a3f8 <__sfvwrite_r+0x34c>
8110a300:	80800917 	ldw	r2,36(r16)
8110a304:	81400717 	ldw	r5,28(r16)
8110a308:	e00d883a 	mov	r6,fp
8110a30c:	da000115 	stw	r8,4(sp)
8110a310:	a809883a 	mov	r4,r21
8110a314:	103ee83a 	callr	r2
8110a318:	102f883a 	mov	r23,r2
8110a31c:	da000117 	ldw	r8,4(sp)
8110a320:	00bfe00e 	bge	zero,r2,8110a2a4 <__reset+0xfb0ea2a4>
8110a324:	9de7c83a 	sub	r19,r19,r23
8110a328:	98001f26 	beq	r19,zero,8110a3a8 <__sfvwrite_r+0x2fc>
8110a32c:	a0800217 	ldw	r2,8(r20)
8110a330:	e5f9883a 	add	fp,fp,r23
8110a334:	95e5c83a 	sub	r18,r18,r23
8110a338:	15efc83a 	sub	r23,r2,r23
8110a33c:	a5c00215 	stw	r23,8(r20)
8110a340:	b83f8726 	beq	r23,zero,8110a160 <__reset+0xfb0ea160>
8110a344:	903fe11e 	bne	r18,zero,8110a2cc <__reset+0xfb0ea2cc>
8110a348:	8f000017 	ldw	fp,0(r17)
8110a34c:	8c800117 	ldw	r18,4(r17)
8110a350:	0011883a 	mov	r8,zero
8110a354:	8c400204 	addi	r17,r17,8
8110a358:	003fdb06 	br	8110a2c8 <__reset+0xfb0ea2c8>
8110a35c:	180d883a 	mov	r6,r3
8110a360:	e00b883a 	mov	r5,fp
8110a364:	da000115 	stw	r8,4(sp)
8110a368:	d8c00015 	stw	r3,0(sp)
8110a36c:	110b2780 	call	8110b278 <memmove>
8110a370:	d8c00017 	ldw	r3,0(sp)
8110a374:	80800017 	ldw	r2,0(r16)
8110a378:	800b883a 	mov	r5,r16
8110a37c:	a809883a 	mov	r4,r21
8110a380:	10c5883a 	add	r2,r2,r3
8110a384:	80800015 	stw	r2,0(r16)
8110a388:	d8c00015 	stw	r3,0(sp)
8110a38c:	110984c0 	call	8110984c <_fflush_r>
8110a390:	d8c00017 	ldw	r3,0(sp)
8110a394:	da000117 	ldw	r8,4(sp)
8110a398:	103fc21e 	bne	r2,zero,8110a2a4 <__reset+0xfb0ea2a4>
8110a39c:	182f883a 	mov	r23,r3
8110a3a0:	9de7c83a 	sub	r19,r19,r23
8110a3a4:	983fe11e 	bne	r19,zero,8110a32c <__reset+0xfb0ea32c>
8110a3a8:	800b883a 	mov	r5,r16
8110a3ac:	a809883a 	mov	r4,r21
8110a3b0:	110984c0 	call	8110984c <_fflush_r>
8110a3b4:	103fbb1e 	bne	r2,zero,8110a2a4 <__reset+0xfb0ea2a4>
8110a3b8:	0011883a 	mov	r8,zero
8110a3bc:	003fdb06 	br	8110a32c <__reset+0xfb0ea32c>
8110a3c0:	94c0012e 	bgeu	r18,r19,8110a3c8 <__sfvwrite_r+0x31c>
8110a3c4:	9027883a 	mov	r19,r18
8110a3c8:	980d883a 	mov	r6,r19
8110a3cc:	e00b883a 	mov	r5,fp
8110a3d0:	110b2780 	call	8110b278 <memmove>
8110a3d4:	80800217 	ldw	r2,8(r16)
8110a3d8:	80c00017 	ldw	r3,0(r16)
8110a3dc:	14c5c83a 	sub	r2,r2,r19
8110a3e0:	1cc7883a 	add	r3,r3,r19
8110a3e4:	80800215 	stw	r2,8(r16)
8110a3e8:	80c00015 	stw	r3,0(r16)
8110a3ec:	10004326 	beq	r2,zero,8110a4fc <__sfvwrite_r+0x450>
8110a3f0:	9805883a 	mov	r2,r19
8110a3f4:	003f8606 	br	8110a210 <__reset+0xfb0ea210>
8110a3f8:	b00d883a 	mov	r6,r22
8110a3fc:	e00b883a 	mov	r5,fp
8110a400:	da000115 	stw	r8,4(sp)
8110a404:	110b2780 	call	8110b278 <memmove>
8110a408:	80800217 	ldw	r2,8(r16)
8110a40c:	80c00017 	ldw	r3,0(r16)
8110a410:	da000117 	ldw	r8,4(sp)
8110a414:	1585c83a 	sub	r2,r2,r22
8110a418:	1dad883a 	add	r22,r3,r22
8110a41c:	80800215 	stw	r2,8(r16)
8110a420:	85800015 	stw	r22,0(r16)
8110a424:	003fbf06 	br	8110a324 <__reset+0xfb0ea324>
8110a428:	81000017 	ldw	r4,0(r16)
8110a42c:	9027883a 	mov	r19,r18
8110a430:	902f883a 	mov	r23,r18
8110a434:	003f6c06 	br	8110a1e8 <__reset+0xfb0ea1e8>
8110a438:	900d883a 	mov	r6,r18
8110a43c:	01400284 	movi	r5,10
8110a440:	e009883a 	mov	r4,fp
8110a444:	110b1940 	call	8110b194 <memchr>
8110a448:	10003e26 	beq	r2,zero,8110a544 <__sfvwrite_r+0x498>
8110a44c:	10800044 	addi	r2,r2,1
8110a450:	1727c83a 	sub	r19,r2,fp
8110a454:	02000044 	movi	r8,1
8110a458:	003f9d06 	br	8110a2d0 <__reset+0xfb0ea2d0>
8110a45c:	80800517 	ldw	r2,20(r16)
8110a460:	81400417 	ldw	r5,16(r16)
8110a464:	81c00017 	ldw	r7,0(r16)
8110a468:	10a7883a 	add	r19,r2,r2
8110a46c:	9885883a 	add	r2,r19,r2
8110a470:	1026d7fa 	srli	r19,r2,31
8110a474:	396dc83a 	sub	r22,r7,r5
8110a478:	b1000044 	addi	r4,r22,1
8110a47c:	9885883a 	add	r2,r19,r2
8110a480:	1027d07a 	srai	r19,r2,1
8110a484:	2485883a 	add	r2,r4,r18
8110a488:	980d883a 	mov	r6,r19
8110a48c:	9880022e 	bgeu	r19,r2,8110a498 <__sfvwrite_r+0x3ec>
8110a490:	1027883a 	mov	r19,r2
8110a494:	100d883a 	mov	r6,r2
8110a498:	18c1000c 	andi	r3,r3,1024
8110a49c:	18001c26 	beq	r3,zero,8110a510 <__sfvwrite_r+0x464>
8110a4a0:	300b883a 	mov	r5,r6
8110a4a4:	a809883a 	mov	r4,r21
8110a4a8:	110a9880 	call	8110a988 <_malloc_r>
8110a4ac:	102f883a 	mov	r23,r2
8110a4b0:	10002926 	beq	r2,zero,8110a558 <__sfvwrite_r+0x4ac>
8110a4b4:	81400417 	ldw	r5,16(r16)
8110a4b8:	b00d883a 	mov	r6,r22
8110a4bc:	1009883a 	mov	r4,r2
8110a4c0:	11056440 	call	81105644 <memcpy>
8110a4c4:	8080030b 	ldhu	r2,12(r16)
8110a4c8:	00fedfc4 	movi	r3,-1153
8110a4cc:	10c4703a 	and	r2,r2,r3
8110a4d0:	10802014 	ori	r2,r2,128
8110a4d4:	8080030d 	sth	r2,12(r16)
8110a4d8:	bd89883a 	add	r4,r23,r22
8110a4dc:	9d8fc83a 	sub	r7,r19,r22
8110a4e0:	85c00415 	stw	r23,16(r16)
8110a4e4:	84c00515 	stw	r19,20(r16)
8110a4e8:	81000015 	stw	r4,0(r16)
8110a4ec:	9027883a 	mov	r19,r18
8110a4f0:	81c00215 	stw	r7,8(r16)
8110a4f4:	902f883a 	mov	r23,r18
8110a4f8:	003f3b06 	br	8110a1e8 <__reset+0xfb0ea1e8>
8110a4fc:	800b883a 	mov	r5,r16
8110a500:	a809883a 	mov	r4,r21
8110a504:	110984c0 	call	8110984c <_fflush_r>
8110a508:	103fb926 	beq	r2,zero,8110a3f0 <__reset+0xfb0ea3f0>
8110a50c:	003f6506 	br	8110a2a4 <__reset+0xfb0ea2a4>
8110a510:	a809883a 	mov	r4,r21
8110a514:	110c6600 	call	8110c660 <_realloc_r>
8110a518:	102f883a 	mov	r23,r2
8110a51c:	103fee1e 	bne	r2,zero,8110a4d8 <__reset+0xfb0ea4d8>
8110a520:	81400417 	ldw	r5,16(r16)
8110a524:	a809883a 	mov	r4,r21
8110a528:	1109d9c0 	call	81109d9c <_free_r>
8110a52c:	8080030b 	ldhu	r2,12(r16)
8110a530:	00ffdfc4 	movi	r3,-129
8110a534:	1884703a 	and	r2,r3,r2
8110a538:	00c00304 	movi	r3,12
8110a53c:	a8c00015 	stw	r3,0(r21)
8110a540:	003f5906 	br	8110a2a8 <__reset+0xfb0ea2a8>
8110a544:	94c00044 	addi	r19,r18,1
8110a548:	02000044 	movi	r8,1
8110a54c:	003f6006 	br	8110a2d0 <__reset+0xfb0ea2d0>
8110a550:	00bfffc4 	movi	r2,-1
8110a554:	003f0306 	br	8110a164 <__reset+0xfb0ea164>
8110a558:	00800304 	movi	r2,12
8110a55c:	a8800015 	stw	r2,0(r21)
8110a560:	8080030b 	ldhu	r2,12(r16)
8110a564:	003f5006 	br	8110a2a8 <__reset+0xfb0ea2a8>

8110a568 <_fwalk>:
8110a568:	defff704 	addi	sp,sp,-36
8110a56c:	dd000415 	stw	r20,16(sp)
8110a570:	dfc00815 	stw	ra,32(sp)
8110a574:	ddc00715 	stw	r23,28(sp)
8110a578:	dd800615 	stw	r22,24(sp)
8110a57c:	dd400515 	stw	r21,20(sp)
8110a580:	dcc00315 	stw	r19,12(sp)
8110a584:	dc800215 	stw	r18,8(sp)
8110a588:	dc400115 	stw	r17,4(sp)
8110a58c:	dc000015 	stw	r16,0(sp)
8110a590:	2500b804 	addi	r20,r4,736
8110a594:	a0002326 	beq	r20,zero,8110a624 <_fwalk+0xbc>
8110a598:	282b883a 	mov	r21,r5
8110a59c:	002f883a 	mov	r23,zero
8110a5a0:	05800044 	movi	r22,1
8110a5a4:	04ffffc4 	movi	r19,-1
8110a5a8:	a4400117 	ldw	r17,4(r20)
8110a5ac:	a4800217 	ldw	r18,8(r20)
8110a5b0:	8c7fffc4 	addi	r17,r17,-1
8110a5b4:	88000d16 	blt	r17,zero,8110a5ec <_fwalk+0x84>
8110a5b8:	94000304 	addi	r16,r18,12
8110a5bc:	94800384 	addi	r18,r18,14
8110a5c0:	8080000b 	ldhu	r2,0(r16)
8110a5c4:	8c7fffc4 	addi	r17,r17,-1
8110a5c8:	813ffd04 	addi	r4,r16,-12
8110a5cc:	b080042e 	bgeu	r22,r2,8110a5e0 <_fwalk+0x78>
8110a5d0:	9080000f 	ldh	r2,0(r18)
8110a5d4:	14c00226 	beq	r2,r19,8110a5e0 <_fwalk+0x78>
8110a5d8:	a83ee83a 	callr	r21
8110a5dc:	b8aeb03a 	or	r23,r23,r2
8110a5e0:	84001a04 	addi	r16,r16,104
8110a5e4:	94801a04 	addi	r18,r18,104
8110a5e8:	8cfff51e 	bne	r17,r19,8110a5c0 <__reset+0xfb0ea5c0>
8110a5ec:	a5000017 	ldw	r20,0(r20)
8110a5f0:	a03fed1e 	bne	r20,zero,8110a5a8 <__reset+0xfb0ea5a8>
8110a5f4:	b805883a 	mov	r2,r23
8110a5f8:	dfc00817 	ldw	ra,32(sp)
8110a5fc:	ddc00717 	ldw	r23,28(sp)
8110a600:	dd800617 	ldw	r22,24(sp)
8110a604:	dd400517 	ldw	r21,20(sp)
8110a608:	dd000417 	ldw	r20,16(sp)
8110a60c:	dcc00317 	ldw	r19,12(sp)
8110a610:	dc800217 	ldw	r18,8(sp)
8110a614:	dc400117 	ldw	r17,4(sp)
8110a618:	dc000017 	ldw	r16,0(sp)
8110a61c:	dec00904 	addi	sp,sp,36
8110a620:	f800283a 	ret
8110a624:	002f883a 	mov	r23,zero
8110a628:	003ff206 	br	8110a5f4 <__reset+0xfb0ea5f4>

8110a62c <_fwalk_reent>:
8110a62c:	defff704 	addi	sp,sp,-36
8110a630:	dd000415 	stw	r20,16(sp)
8110a634:	dfc00815 	stw	ra,32(sp)
8110a638:	ddc00715 	stw	r23,28(sp)
8110a63c:	dd800615 	stw	r22,24(sp)
8110a640:	dd400515 	stw	r21,20(sp)
8110a644:	dcc00315 	stw	r19,12(sp)
8110a648:	dc800215 	stw	r18,8(sp)
8110a64c:	dc400115 	stw	r17,4(sp)
8110a650:	dc000015 	stw	r16,0(sp)
8110a654:	2500b804 	addi	r20,r4,736
8110a658:	a0002326 	beq	r20,zero,8110a6e8 <_fwalk_reent+0xbc>
8110a65c:	282b883a 	mov	r21,r5
8110a660:	2027883a 	mov	r19,r4
8110a664:	002f883a 	mov	r23,zero
8110a668:	05800044 	movi	r22,1
8110a66c:	04bfffc4 	movi	r18,-1
8110a670:	a4400117 	ldw	r17,4(r20)
8110a674:	a4000217 	ldw	r16,8(r20)
8110a678:	8c7fffc4 	addi	r17,r17,-1
8110a67c:	88000c16 	blt	r17,zero,8110a6b0 <_fwalk_reent+0x84>
8110a680:	84000304 	addi	r16,r16,12
8110a684:	8080000b 	ldhu	r2,0(r16)
8110a688:	8c7fffc4 	addi	r17,r17,-1
8110a68c:	817ffd04 	addi	r5,r16,-12
8110a690:	b080052e 	bgeu	r22,r2,8110a6a8 <_fwalk_reent+0x7c>
8110a694:	8080008f 	ldh	r2,2(r16)
8110a698:	9809883a 	mov	r4,r19
8110a69c:	14800226 	beq	r2,r18,8110a6a8 <_fwalk_reent+0x7c>
8110a6a0:	a83ee83a 	callr	r21
8110a6a4:	b8aeb03a 	or	r23,r23,r2
8110a6a8:	84001a04 	addi	r16,r16,104
8110a6ac:	8cbff51e 	bne	r17,r18,8110a684 <__reset+0xfb0ea684>
8110a6b0:	a5000017 	ldw	r20,0(r20)
8110a6b4:	a03fee1e 	bne	r20,zero,8110a670 <__reset+0xfb0ea670>
8110a6b8:	b805883a 	mov	r2,r23
8110a6bc:	dfc00817 	ldw	ra,32(sp)
8110a6c0:	ddc00717 	ldw	r23,28(sp)
8110a6c4:	dd800617 	ldw	r22,24(sp)
8110a6c8:	dd400517 	ldw	r21,20(sp)
8110a6cc:	dd000417 	ldw	r20,16(sp)
8110a6d0:	dcc00317 	ldw	r19,12(sp)
8110a6d4:	dc800217 	ldw	r18,8(sp)
8110a6d8:	dc400117 	ldw	r17,4(sp)
8110a6dc:	dc000017 	ldw	r16,0(sp)
8110a6e0:	dec00904 	addi	sp,sp,36
8110a6e4:	f800283a 	ret
8110a6e8:	002f883a 	mov	r23,zero
8110a6ec:	003ff206 	br	8110a6b8 <__reset+0xfb0ea6b8>

8110a6f0 <_setlocale_r>:
8110a6f0:	30001b26 	beq	r6,zero,8110a760 <_setlocale_r+0x70>
8110a6f4:	016044b4 	movhi	r5,33042
8110a6f8:	defffe04 	addi	sp,sp,-8
8110a6fc:	29604204 	addi	r5,r5,-32504
8110a700:	3009883a 	mov	r4,r6
8110a704:	dc000015 	stw	r16,0(sp)
8110a708:	dfc00115 	stw	ra,4(sp)
8110a70c:	3021883a 	mov	r16,r6
8110a710:	110cdc80 	call	8110cdc8 <strcmp>
8110a714:	1000061e 	bne	r2,zero,8110a730 <_setlocale_r+0x40>
8110a718:	00a044b4 	movhi	r2,33042
8110a71c:	10a04104 	addi	r2,r2,-32508
8110a720:	dfc00117 	ldw	ra,4(sp)
8110a724:	dc000017 	ldw	r16,0(sp)
8110a728:	dec00204 	addi	sp,sp,8
8110a72c:	f800283a 	ret
8110a730:	016044b4 	movhi	r5,33042
8110a734:	29604104 	addi	r5,r5,-32508
8110a738:	8009883a 	mov	r4,r16
8110a73c:	110cdc80 	call	8110cdc8 <strcmp>
8110a740:	103ff526 	beq	r2,zero,8110a718 <__reset+0xfb0ea718>
8110a744:	016044b4 	movhi	r5,33042
8110a748:	29602c04 	addi	r5,r5,-32592
8110a74c:	8009883a 	mov	r4,r16
8110a750:	110cdc80 	call	8110cdc8 <strcmp>
8110a754:	103ff026 	beq	r2,zero,8110a718 <__reset+0xfb0ea718>
8110a758:	0005883a 	mov	r2,zero
8110a75c:	003ff006 	br	8110a720 <__reset+0xfb0ea720>
8110a760:	00a044b4 	movhi	r2,33042
8110a764:	10a04104 	addi	r2,r2,-32508
8110a768:	f800283a 	ret

8110a76c <__locale_charset>:
8110a76c:	00a044b4 	movhi	r2,33042
8110a770:	10a24704 	addi	r2,r2,-30436
8110a774:	f800283a 	ret

8110a778 <__locale_mb_cur_max>:
8110a778:	00a044b4 	movhi	r2,33042
8110a77c:	10a82b04 	addi	r2,r2,-24404
8110a780:	10800017 	ldw	r2,0(r2)
8110a784:	f800283a 	ret

8110a788 <__locale_msgcharset>:
8110a788:	00a044b4 	movhi	r2,33042
8110a78c:	10a23f04 	addi	r2,r2,-30468
8110a790:	f800283a 	ret

8110a794 <__locale_cjk_lang>:
8110a794:	0005883a 	mov	r2,zero
8110a798:	f800283a 	ret

8110a79c <_localeconv_r>:
8110a79c:	00a044b4 	movhi	r2,33042
8110a7a0:	10a24f04 	addi	r2,r2,-30404
8110a7a4:	f800283a 	ret

8110a7a8 <setlocale>:
8110a7a8:	00a044b4 	movhi	r2,33042
8110a7ac:	10a82a04 	addi	r2,r2,-24408
8110a7b0:	280d883a 	mov	r6,r5
8110a7b4:	200b883a 	mov	r5,r4
8110a7b8:	11000017 	ldw	r4,0(r2)
8110a7bc:	110a6f01 	jmpi	8110a6f0 <_setlocale_r>

8110a7c0 <localeconv>:
8110a7c0:	00a044b4 	movhi	r2,33042
8110a7c4:	10a24f04 	addi	r2,r2,-30404
8110a7c8:	f800283a 	ret

8110a7cc <__smakebuf_r>:
8110a7cc:	2880030b 	ldhu	r2,12(r5)
8110a7d0:	10c0008c 	andi	r3,r2,2
8110a7d4:	1800411e 	bne	r3,zero,8110a8dc <__smakebuf_r+0x110>
8110a7d8:	deffec04 	addi	sp,sp,-80
8110a7dc:	dc000f15 	stw	r16,60(sp)
8110a7e0:	2821883a 	mov	r16,r5
8110a7e4:	2940038f 	ldh	r5,14(r5)
8110a7e8:	dc401015 	stw	r17,64(sp)
8110a7ec:	dfc01315 	stw	ra,76(sp)
8110a7f0:	dcc01215 	stw	r19,72(sp)
8110a7f4:	dc801115 	stw	r18,68(sp)
8110a7f8:	2023883a 	mov	r17,r4
8110a7fc:	28001c16 	blt	r5,zero,8110a870 <__smakebuf_r+0xa4>
8110a800:	d80d883a 	mov	r6,sp
8110a804:	110eac80 	call	8110eac8 <_fstat_r>
8110a808:	10001816 	blt	r2,zero,8110a86c <__smakebuf_r+0xa0>
8110a80c:	d8800117 	ldw	r2,4(sp)
8110a810:	00e00014 	movui	r3,32768
8110a814:	10bc000c 	andi	r2,r2,61440
8110a818:	14c80020 	cmpeqi	r19,r2,8192
8110a81c:	10c03726 	beq	r2,r3,8110a8fc <__smakebuf_r+0x130>
8110a820:	80c0030b 	ldhu	r3,12(r16)
8110a824:	18c20014 	ori	r3,r3,2048
8110a828:	80c0030d 	sth	r3,12(r16)
8110a82c:	00c80004 	movi	r3,8192
8110a830:	10c0521e 	bne	r2,r3,8110a97c <__smakebuf_r+0x1b0>
8110a834:	8140038f 	ldh	r5,14(r16)
8110a838:	8809883a 	mov	r4,r17
8110a83c:	110eb240 	call	8110eb24 <_isatty_r>
8110a840:	10004c26 	beq	r2,zero,8110a974 <__smakebuf_r+0x1a8>
8110a844:	8080030b 	ldhu	r2,12(r16)
8110a848:	80c010c4 	addi	r3,r16,67
8110a84c:	80c00015 	stw	r3,0(r16)
8110a850:	10800054 	ori	r2,r2,1
8110a854:	8080030d 	sth	r2,12(r16)
8110a858:	00800044 	movi	r2,1
8110a85c:	80c00415 	stw	r3,16(r16)
8110a860:	80800515 	stw	r2,20(r16)
8110a864:	04810004 	movi	r18,1024
8110a868:	00000706 	br	8110a888 <__smakebuf_r+0xbc>
8110a86c:	8080030b 	ldhu	r2,12(r16)
8110a870:	10c0200c 	andi	r3,r2,128
8110a874:	18001f1e 	bne	r3,zero,8110a8f4 <__smakebuf_r+0x128>
8110a878:	04810004 	movi	r18,1024
8110a87c:	10820014 	ori	r2,r2,2048
8110a880:	8080030d 	sth	r2,12(r16)
8110a884:	0027883a 	mov	r19,zero
8110a888:	900b883a 	mov	r5,r18
8110a88c:	8809883a 	mov	r4,r17
8110a890:	110a9880 	call	8110a988 <_malloc_r>
8110a894:	10002c26 	beq	r2,zero,8110a948 <__smakebuf_r+0x17c>
8110a898:	80c0030b 	ldhu	r3,12(r16)
8110a89c:	01204474 	movhi	r4,33041
8110a8a0:	21263804 	addi	r4,r4,-26400
8110a8a4:	89000f15 	stw	r4,60(r17)
8110a8a8:	18c02014 	ori	r3,r3,128
8110a8ac:	80c0030d 	sth	r3,12(r16)
8110a8b0:	80800015 	stw	r2,0(r16)
8110a8b4:	80800415 	stw	r2,16(r16)
8110a8b8:	84800515 	stw	r18,20(r16)
8110a8bc:	98001a1e 	bne	r19,zero,8110a928 <__smakebuf_r+0x15c>
8110a8c0:	dfc01317 	ldw	ra,76(sp)
8110a8c4:	dcc01217 	ldw	r19,72(sp)
8110a8c8:	dc801117 	ldw	r18,68(sp)
8110a8cc:	dc401017 	ldw	r17,64(sp)
8110a8d0:	dc000f17 	ldw	r16,60(sp)
8110a8d4:	dec01404 	addi	sp,sp,80
8110a8d8:	f800283a 	ret
8110a8dc:	288010c4 	addi	r2,r5,67
8110a8e0:	28800015 	stw	r2,0(r5)
8110a8e4:	28800415 	stw	r2,16(r5)
8110a8e8:	00800044 	movi	r2,1
8110a8ec:	28800515 	stw	r2,20(r5)
8110a8f0:	f800283a 	ret
8110a8f4:	04801004 	movi	r18,64
8110a8f8:	003fe006 	br	8110a87c <__reset+0xfb0ea87c>
8110a8fc:	81000a17 	ldw	r4,40(r16)
8110a900:	00e04474 	movhi	r3,33041
8110a904:	18f35904 	addi	r3,r3,-12956
8110a908:	20ffc51e 	bne	r4,r3,8110a820 <__reset+0xfb0ea820>
8110a90c:	8080030b 	ldhu	r2,12(r16)
8110a910:	04810004 	movi	r18,1024
8110a914:	84801315 	stw	r18,76(r16)
8110a918:	1484b03a 	or	r2,r2,r18
8110a91c:	8080030d 	sth	r2,12(r16)
8110a920:	0027883a 	mov	r19,zero
8110a924:	003fd806 	br	8110a888 <__reset+0xfb0ea888>
8110a928:	8140038f 	ldh	r5,14(r16)
8110a92c:	8809883a 	mov	r4,r17
8110a930:	110eb240 	call	8110eb24 <_isatty_r>
8110a934:	103fe226 	beq	r2,zero,8110a8c0 <__reset+0xfb0ea8c0>
8110a938:	8080030b 	ldhu	r2,12(r16)
8110a93c:	10800054 	ori	r2,r2,1
8110a940:	8080030d 	sth	r2,12(r16)
8110a944:	003fde06 	br	8110a8c0 <__reset+0xfb0ea8c0>
8110a948:	8080030b 	ldhu	r2,12(r16)
8110a94c:	10c0800c 	andi	r3,r2,512
8110a950:	183fdb1e 	bne	r3,zero,8110a8c0 <__reset+0xfb0ea8c0>
8110a954:	10800094 	ori	r2,r2,2
8110a958:	80c010c4 	addi	r3,r16,67
8110a95c:	8080030d 	sth	r2,12(r16)
8110a960:	00800044 	movi	r2,1
8110a964:	80c00015 	stw	r3,0(r16)
8110a968:	80c00415 	stw	r3,16(r16)
8110a96c:	80800515 	stw	r2,20(r16)
8110a970:	003fd306 	br	8110a8c0 <__reset+0xfb0ea8c0>
8110a974:	04810004 	movi	r18,1024
8110a978:	003fc306 	br	8110a888 <__reset+0xfb0ea888>
8110a97c:	0027883a 	mov	r19,zero
8110a980:	04810004 	movi	r18,1024
8110a984:	003fc006 	br	8110a888 <__reset+0xfb0ea888>

8110a988 <_malloc_r>:
8110a988:	defff504 	addi	sp,sp,-44
8110a98c:	dc800315 	stw	r18,12(sp)
8110a990:	dfc00a15 	stw	ra,40(sp)
8110a994:	df000915 	stw	fp,36(sp)
8110a998:	ddc00815 	stw	r23,32(sp)
8110a99c:	dd800715 	stw	r22,28(sp)
8110a9a0:	dd400615 	stw	r21,24(sp)
8110a9a4:	dd000515 	stw	r20,20(sp)
8110a9a8:	dcc00415 	stw	r19,16(sp)
8110a9ac:	dc400215 	stw	r17,8(sp)
8110a9b0:	dc000115 	stw	r16,4(sp)
8110a9b4:	288002c4 	addi	r2,r5,11
8110a9b8:	00c00584 	movi	r3,22
8110a9bc:	2025883a 	mov	r18,r4
8110a9c0:	18807f2e 	bgeu	r3,r2,8110abc0 <_malloc_r+0x238>
8110a9c4:	047ffe04 	movi	r17,-8
8110a9c8:	1462703a 	and	r17,r2,r17
8110a9cc:	8800a316 	blt	r17,zero,8110ac5c <_malloc_r+0x2d4>
8110a9d0:	8940a236 	bltu	r17,r5,8110ac5c <_malloc_r+0x2d4>
8110a9d4:	1111e200 	call	81111e20 <__malloc_lock>
8110a9d8:	00807dc4 	movi	r2,503
8110a9dc:	1441e92e 	bgeu	r2,r17,8110b184 <_malloc_r+0x7fc>
8110a9e0:	8804d27a 	srli	r2,r17,9
8110a9e4:	1000a126 	beq	r2,zero,8110ac6c <_malloc_r+0x2e4>
8110a9e8:	00c00104 	movi	r3,4
8110a9ec:	18811e36 	bltu	r3,r2,8110ae68 <_malloc_r+0x4e0>
8110a9f0:	8804d1ba 	srli	r2,r17,6
8110a9f4:	12000e44 	addi	r8,r2,57
8110a9f8:	11c00e04 	addi	r7,r2,56
8110a9fc:	4209883a 	add	r4,r8,r8
8110aa00:	04e044b4 	movhi	r19,33042
8110aa04:	2109883a 	add	r4,r4,r4
8110aa08:	9ce25d04 	addi	r19,r19,-30348
8110aa0c:	2109883a 	add	r4,r4,r4
8110aa10:	9909883a 	add	r4,r19,r4
8110aa14:	24000117 	ldw	r16,4(r4)
8110aa18:	213ffe04 	addi	r4,r4,-8
8110aa1c:	24009726 	beq	r4,r16,8110ac7c <_malloc_r+0x2f4>
8110aa20:	80800117 	ldw	r2,4(r16)
8110aa24:	01bfff04 	movi	r6,-4
8110aa28:	014003c4 	movi	r5,15
8110aa2c:	1184703a 	and	r2,r2,r6
8110aa30:	1447c83a 	sub	r3,r2,r17
8110aa34:	28c00716 	blt	r5,r3,8110aa54 <_malloc_r+0xcc>
8110aa38:	1800920e 	bge	r3,zero,8110ac84 <_malloc_r+0x2fc>
8110aa3c:	84000317 	ldw	r16,12(r16)
8110aa40:	24008e26 	beq	r4,r16,8110ac7c <_malloc_r+0x2f4>
8110aa44:	80800117 	ldw	r2,4(r16)
8110aa48:	1184703a 	and	r2,r2,r6
8110aa4c:	1447c83a 	sub	r3,r2,r17
8110aa50:	28fff90e 	bge	r5,r3,8110aa38 <__reset+0xfb0eaa38>
8110aa54:	3809883a 	mov	r4,r7
8110aa58:	01a044b4 	movhi	r6,33042
8110aa5c:	9c000417 	ldw	r16,16(r19)
8110aa60:	31a25d04 	addi	r6,r6,-30348
8110aa64:	32000204 	addi	r8,r6,8
8110aa68:	82013426 	beq	r16,r8,8110af3c <_malloc_r+0x5b4>
8110aa6c:	80c00117 	ldw	r3,4(r16)
8110aa70:	00bfff04 	movi	r2,-4
8110aa74:	188e703a 	and	r7,r3,r2
8110aa78:	3c45c83a 	sub	r2,r7,r17
8110aa7c:	00c003c4 	movi	r3,15
8110aa80:	18811f16 	blt	r3,r2,8110af00 <_malloc_r+0x578>
8110aa84:	32000515 	stw	r8,20(r6)
8110aa88:	32000415 	stw	r8,16(r6)
8110aa8c:	10007f0e 	bge	r2,zero,8110ac8c <_malloc_r+0x304>
8110aa90:	00807fc4 	movi	r2,511
8110aa94:	11c0fd36 	bltu	r2,r7,8110ae8c <_malloc_r+0x504>
8110aa98:	3806d0fa 	srli	r3,r7,3
8110aa9c:	01c00044 	movi	r7,1
8110aaa0:	30800117 	ldw	r2,4(r6)
8110aaa4:	19400044 	addi	r5,r3,1
8110aaa8:	294b883a 	add	r5,r5,r5
8110aaac:	1807d0ba 	srai	r3,r3,2
8110aab0:	294b883a 	add	r5,r5,r5
8110aab4:	294b883a 	add	r5,r5,r5
8110aab8:	298b883a 	add	r5,r5,r6
8110aabc:	38c6983a 	sll	r3,r7,r3
8110aac0:	29c00017 	ldw	r7,0(r5)
8110aac4:	2a7ffe04 	addi	r9,r5,-8
8110aac8:	1886b03a 	or	r3,r3,r2
8110aacc:	82400315 	stw	r9,12(r16)
8110aad0:	81c00215 	stw	r7,8(r16)
8110aad4:	30c00115 	stw	r3,4(r6)
8110aad8:	2c000015 	stw	r16,0(r5)
8110aadc:	3c000315 	stw	r16,12(r7)
8110aae0:	2005d0ba 	srai	r2,r4,2
8110aae4:	01400044 	movi	r5,1
8110aae8:	288a983a 	sll	r5,r5,r2
8110aaec:	19406f36 	bltu	r3,r5,8110acac <_malloc_r+0x324>
8110aaf0:	28c4703a 	and	r2,r5,r3
8110aaf4:	10000a1e 	bne	r2,zero,8110ab20 <_malloc_r+0x198>
8110aaf8:	00bfff04 	movi	r2,-4
8110aafc:	294b883a 	add	r5,r5,r5
8110ab00:	2088703a 	and	r4,r4,r2
8110ab04:	28c4703a 	and	r2,r5,r3
8110ab08:	21000104 	addi	r4,r4,4
8110ab0c:	1000041e 	bne	r2,zero,8110ab20 <_malloc_r+0x198>
8110ab10:	294b883a 	add	r5,r5,r5
8110ab14:	28c4703a 	and	r2,r5,r3
8110ab18:	21000104 	addi	r4,r4,4
8110ab1c:	103ffc26 	beq	r2,zero,8110ab10 <__reset+0xfb0eab10>
8110ab20:	02bfff04 	movi	r10,-4
8110ab24:	024003c4 	movi	r9,15
8110ab28:	21800044 	addi	r6,r4,1
8110ab2c:	318d883a 	add	r6,r6,r6
8110ab30:	318d883a 	add	r6,r6,r6
8110ab34:	318d883a 	add	r6,r6,r6
8110ab38:	998d883a 	add	r6,r19,r6
8110ab3c:	333ffe04 	addi	r12,r6,-8
8110ab40:	2017883a 	mov	r11,r4
8110ab44:	31800104 	addi	r6,r6,4
8110ab48:	34000017 	ldw	r16,0(r6)
8110ab4c:	31fffd04 	addi	r7,r6,-12
8110ab50:	81c0041e 	bne	r16,r7,8110ab64 <_malloc_r+0x1dc>
8110ab54:	0000fb06 	br	8110af44 <_malloc_r+0x5bc>
8110ab58:	1801030e 	bge	r3,zero,8110af68 <_malloc_r+0x5e0>
8110ab5c:	84000317 	ldw	r16,12(r16)
8110ab60:	81c0f826 	beq	r16,r7,8110af44 <_malloc_r+0x5bc>
8110ab64:	80800117 	ldw	r2,4(r16)
8110ab68:	1284703a 	and	r2,r2,r10
8110ab6c:	1447c83a 	sub	r3,r2,r17
8110ab70:	48fff90e 	bge	r9,r3,8110ab58 <__reset+0xfb0eab58>
8110ab74:	80800317 	ldw	r2,12(r16)
8110ab78:	81000217 	ldw	r4,8(r16)
8110ab7c:	89400054 	ori	r5,r17,1
8110ab80:	81400115 	stw	r5,4(r16)
8110ab84:	20800315 	stw	r2,12(r4)
8110ab88:	11000215 	stw	r4,8(r2)
8110ab8c:	8463883a 	add	r17,r16,r17
8110ab90:	9c400515 	stw	r17,20(r19)
8110ab94:	9c400415 	stw	r17,16(r19)
8110ab98:	18800054 	ori	r2,r3,1
8110ab9c:	88800115 	stw	r2,4(r17)
8110aba0:	8a000315 	stw	r8,12(r17)
8110aba4:	8a000215 	stw	r8,8(r17)
8110aba8:	88e3883a 	add	r17,r17,r3
8110abac:	88c00015 	stw	r3,0(r17)
8110abb0:	9009883a 	mov	r4,r18
8110abb4:	1111e440 	call	81111e44 <__malloc_unlock>
8110abb8:	80800204 	addi	r2,r16,8
8110abbc:	00001b06 	br	8110ac2c <_malloc_r+0x2a4>
8110abc0:	04400404 	movi	r17,16
8110abc4:	89402536 	bltu	r17,r5,8110ac5c <_malloc_r+0x2d4>
8110abc8:	1111e200 	call	81111e20 <__malloc_lock>
8110abcc:	00800184 	movi	r2,6
8110abd0:	01000084 	movi	r4,2
8110abd4:	04e044b4 	movhi	r19,33042
8110abd8:	1085883a 	add	r2,r2,r2
8110abdc:	9ce25d04 	addi	r19,r19,-30348
8110abe0:	1085883a 	add	r2,r2,r2
8110abe4:	9885883a 	add	r2,r19,r2
8110abe8:	14000117 	ldw	r16,4(r2)
8110abec:	10fffe04 	addi	r3,r2,-8
8110abf0:	80c0d926 	beq	r16,r3,8110af58 <_malloc_r+0x5d0>
8110abf4:	80c00117 	ldw	r3,4(r16)
8110abf8:	81000317 	ldw	r4,12(r16)
8110abfc:	00bfff04 	movi	r2,-4
8110ac00:	1884703a 	and	r2,r3,r2
8110ac04:	81400217 	ldw	r5,8(r16)
8110ac08:	8085883a 	add	r2,r16,r2
8110ac0c:	10c00117 	ldw	r3,4(r2)
8110ac10:	29000315 	stw	r4,12(r5)
8110ac14:	21400215 	stw	r5,8(r4)
8110ac18:	18c00054 	ori	r3,r3,1
8110ac1c:	10c00115 	stw	r3,4(r2)
8110ac20:	9009883a 	mov	r4,r18
8110ac24:	1111e440 	call	81111e44 <__malloc_unlock>
8110ac28:	80800204 	addi	r2,r16,8
8110ac2c:	dfc00a17 	ldw	ra,40(sp)
8110ac30:	df000917 	ldw	fp,36(sp)
8110ac34:	ddc00817 	ldw	r23,32(sp)
8110ac38:	dd800717 	ldw	r22,28(sp)
8110ac3c:	dd400617 	ldw	r21,24(sp)
8110ac40:	dd000517 	ldw	r20,20(sp)
8110ac44:	dcc00417 	ldw	r19,16(sp)
8110ac48:	dc800317 	ldw	r18,12(sp)
8110ac4c:	dc400217 	ldw	r17,8(sp)
8110ac50:	dc000117 	ldw	r16,4(sp)
8110ac54:	dec00b04 	addi	sp,sp,44
8110ac58:	f800283a 	ret
8110ac5c:	00800304 	movi	r2,12
8110ac60:	90800015 	stw	r2,0(r18)
8110ac64:	0005883a 	mov	r2,zero
8110ac68:	003ff006 	br	8110ac2c <__reset+0xfb0eac2c>
8110ac6c:	01002004 	movi	r4,128
8110ac70:	02001004 	movi	r8,64
8110ac74:	01c00fc4 	movi	r7,63
8110ac78:	003f6106 	br	8110aa00 <__reset+0xfb0eaa00>
8110ac7c:	4009883a 	mov	r4,r8
8110ac80:	003f7506 	br	8110aa58 <__reset+0xfb0eaa58>
8110ac84:	81000317 	ldw	r4,12(r16)
8110ac88:	003fde06 	br	8110ac04 <__reset+0xfb0eac04>
8110ac8c:	81c5883a 	add	r2,r16,r7
8110ac90:	11400117 	ldw	r5,4(r2)
8110ac94:	9009883a 	mov	r4,r18
8110ac98:	29400054 	ori	r5,r5,1
8110ac9c:	11400115 	stw	r5,4(r2)
8110aca0:	1111e440 	call	81111e44 <__malloc_unlock>
8110aca4:	80800204 	addi	r2,r16,8
8110aca8:	003fe006 	br	8110ac2c <__reset+0xfb0eac2c>
8110acac:	9c000217 	ldw	r16,8(r19)
8110acb0:	00bfff04 	movi	r2,-4
8110acb4:	85800117 	ldw	r22,4(r16)
8110acb8:	b0ac703a 	and	r22,r22,r2
8110acbc:	b4400336 	bltu	r22,r17,8110accc <_malloc_r+0x344>
8110acc0:	b445c83a 	sub	r2,r22,r17
8110acc4:	00c003c4 	movi	r3,15
8110acc8:	18805d16 	blt	r3,r2,8110ae40 <_malloc_r+0x4b8>
8110accc:	05e044b4 	movhi	r23,33042
8110acd0:	00a044b4 	movhi	r2,33042
8110acd4:	10a84604 	addi	r2,r2,-24296
8110acd8:	bde82c04 	addi	r23,r23,-24400
8110acdc:	15400017 	ldw	r21,0(r2)
8110ace0:	b8c00017 	ldw	r3,0(r23)
8110ace4:	00bfffc4 	movi	r2,-1
8110ace8:	858d883a 	add	r6,r16,r22
8110acec:	8d6b883a 	add	r21,r17,r21
8110acf0:	1880ea26 	beq	r3,r2,8110b09c <_malloc_r+0x714>
8110acf4:	ad4403c4 	addi	r21,r21,4111
8110acf8:	00bc0004 	movi	r2,-4096
8110acfc:	a8aa703a 	and	r21,r21,r2
8110ad00:	a80b883a 	mov	r5,r21
8110ad04:	9009883a 	mov	r4,r18
8110ad08:	d9800015 	stw	r6,0(sp)
8110ad0c:	110cc380 	call	8110cc38 <_sbrk_r>
8110ad10:	1029883a 	mov	r20,r2
8110ad14:	00bfffc4 	movi	r2,-1
8110ad18:	d9800017 	ldw	r6,0(sp)
8110ad1c:	a080e826 	beq	r20,r2,8110b0c0 <_malloc_r+0x738>
8110ad20:	a180a636 	bltu	r20,r6,8110afbc <_malloc_r+0x634>
8110ad24:	072044b4 	movhi	fp,33042
8110ad28:	e7284f04 	addi	fp,fp,-24260
8110ad2c:	e0800017 	ldw	r2,0(fp)
8110ad30:	a887883a 	add	r3,r21,r2
8110ad34:	e0c00015 	stw	r3,0(fp)
8110ad38:	3500e626 	beq	r6,r20,8110b0d4 <_malloc_r+0x74c>
8110ad3c:	b9000017 	ldw	r4,0(r23)
8110ad40:	00bfffc4 	movi	r2,-1
8110ad44:	2080ee26 	beq	r4,r2,8110b100 <_malloc_r+0x778>
8110ad48:	a185c83a 	sub	r2,r20,r6
8110ad4c:	10c5883a 	add	r2,r2,r3
8110ad50:	e0800015 	stw	r2,0(fp)
8110ad54:	a0c001cc 	andi	r3,r20,7
8110ad58:	1800bc26 	beq	r3,zero,8110b04c <_malloc_r+0x6c4>
8110ad5c:	a0e9c83a 	sub	r20,r20,r3
8110ad60:	00840204 	movi	r2,4104
8110ad64:	a5000204 	addi	r20,r20,8
8110ad68:	10c7c83a 	sub	r3,r2,r3
8110ad6c:	a545883a 	add	r2,r20,r21
8110ad70:	1083ffcc 	andi	r2,r2,4095
8110ad74:	18abc83a 	sub	r21,r3,r2
8110ad78:	a80b883a 	mov	r5,r21
8110ad7c:	9009883a 	mov	r4,r18
8110ad80:	110cc380 	call	8110cc38 <_sbrk_r>
8110ad84:	00ffffc4 	movi	r3,-1
8110ad88:	10c0e126 	beq	r2,r3,8110b110 <_malloc_r+0x788>
8110ad8c:	1505c83a 	sub	r2,r2,r20
8110ad90:	1545883a 	add	r2,r2,r21
8110ad94:	10800054 	ori	r2,r2,1
8110ad98:	e0c00017 	ldw	r3,0(fp)
8110ad9c:	9d000215 	stw	r20,8(r19)
8110ada0:	a0800115 	stw	r2,4(r20)
8110ada4:	a8c7883a 	add	r3,r21,r3
8110ada8:	e0c00015 	stw	r3,0(fp)
8110adac:	84c00e26 	beq	r16,r19,8110ade8 <_malloc_r+0x460>
8110adb0:	018003c4 	movi	r6,15
8110adb4:	3580a72e 	bgeu	r6,r22,8110b054 <_malloc_r+0x6cc>
8110adb8:	81400117 	ldw	r5,4(r16)
8110adbc:	013ffe04 	movi	r4,-8
8110adc0:	b0bffd04 	addi	r2,r22,-12
8110adc4:	1104703a 	and	r2,r2,r4
8110adc8:	2900004c 	andi	r4,r5,1
8110adcc:	2088b03a 	or	r4,r4,r2
8110add0:	81000115 	stw	r4,4(r16)
8110add4:	01400144 	movi	r5,5
8110add8:	8089883a 	add	r4,r16,r2
8110addc:	21400115 	stw	r5,4(r4)
8110ade0:	21400215 	stw	r5,8(r4)
8110ade4:	3080cd36 	bltu	r6,r2,8110b11c <_malloc_r+0x794>
8110ade8:	00a044b4 	movhi	r2,33042
8110adec:	10a84504 	addi	r2,r2,-24300
8110adf0:	11000017 	ldw	r4,0(r2)
8110adf4:	20c0012e 	bgeu	r4,r3,8110adfc <_malloc_r+0x474>
8110adf8:	10c00015 	stw	r3,0(r2)
8110adfc:	00a044b4 	movhi	r2,33042
8110ae00:	10a84404 	addi	r2,r2,-24304
8110ae04:	11000017 	ldw	r4,0(r2)
8110ae08:	9c000217 	ldw	r16,8(r19)
8110ae0c:	20c0012e 	bgeu	r4,r3,8110ae14 <_malloc_r+0x48c>
8110ae10:	10c00015 	stw	r3,0(r2)
8110ae14:	80c00117 	ldw	r3,4(r16)
8110ae18:	00bfff04 	movi	r2,-4
8110ae1c:	1886703a 	and	r3,r3,r2
8110ae20:	1c45c83a 	sub	r2,r3,r17
8110ae24:	1c400236 	bltu	r3,r17,8110ae30 <_malloc_r+0x4a8>
8110ae28:	00c003c4 	movi	r3,15
8110ae2c:	18800416 	blt	r3,r2,8110ae40 <_malloc_r+0x4b8>
8110ae30:	9009883a 	mov	r4,r18
8110ae34:	1111e440 	call	81111e44 <__malloc_unlock>
8110ae38:	0005883a 	mov	r2,zero
8110ae3c:	003f7b06 	br	8110ac2c <__reset+0xfb0eac2c>
8110ae40:	88c00054 	ori	r3,r17,1
8110ae44:	80c00115 	stw	r3,4(r16)
8110ae48:	8463883a 	add	r17,r16,r17
8110ae4c:	10800054 	ori	r2,r2,1
8110ae50:	9c400215 	stw	r17,8(r19)
8110ae54:	88800115 	stw	r2,4(r17)
8110ae58:	9009883a 	mov	r4,r18
8110ae5c:	1111e440 	call	81111e44 <__malloc_unlock>
8110ae60:	80800204 	addi	r2,r16,8
8110ae64:	003f7106 	br	8110ac2c <__reset+0xfb0eac2c>
8110ae68:	00c00504 	movi	r3,20
8110ae6c:	18804a2e 	bgeu	r3,r2,8110af98 <_malloc_r+0x610>
8110ae70:	00c01504 	movi	r3,84
8110ae74:	18806e36 	bltu	r3,r2,8110b030 <_malloc_r+0x6a8>
8110ae78:	8804d33a 	srli	r2,r17,12
8110ae7c:	12001bc4 	addi	r8,r2,111
8110ae80:	11c01b84 	addi	r7,r2,110
8110ae84:	4209883a 	add	r4,r8,r8
8110ae88:	003edd06 	br	8110aa00 <__reset+0xfb0eaa00>
8110ae8c:	3804d27a 	srli	r2,r7,9
8110ae90:	00c00104 	movi	r3,4
8110ae94:	1880442e 	bgeu	r3,r2,8110afa8 <_malloc_r+0x620>
8110ae98:	00c00504 	movi	r3,20
8110ae9c:	18808136 	bltu	r3,r2,8110b0a4 <_malloc_r+0x71c>
8110aea0:	11401704 	addi	r5,r2,92
8110aea4:	10c016c4 	addi	r3,r2,91
8110aea8:	294b883a 	add	r5,r5,r5
8110aeac:	294b883a 	add	r5,r5,r5
8110aeb0:	294b883a 	add	r5,r5,r5
8110aeb4:	994b883a 	add	r5,r19,r5
8110aeb8:	28800017 	ldw	r2,0(r5)
8110aebc:	01a044b4 	movhi	r6,33042
8110aec0:	297ffe04 	addi	r5,r5,-8
8110aec4:	31a25d04 	addi	r6,r6,-30348
8110aec8:	28806526 	beq	r5,r2,8110b060 <_malloc_r+0x6d8>
8110aecc:	01bfff04 	movi	r6,-4
8110aed0:	10c00117 	ldw	r3,4(r2)
8110aed4:	1986703a 	and	r3,r3,r6
8110aed8:	38c0022e 	bgeu	r7,r3,8110aee4 <_malloc_r+0x55c>
8110aedc:	10800217 	ldw	r2,8(r2)
8110aee0:	28bffb1e 	bne	r5,r2,8110aed0 <__reset+0xfb0eaed0>
8110aee4:	11400317 	ldw	r5,12(r2)
8110aee8:	98c00117 	ldw	r3,4(r19)
8110aeec:	81400315 	stw	r5,12(r16)
8110aef0:	80800215 	stw	r2,8(r16)
8110aef4:	2c000215 	stw	r16,8(r5)
8110aef8:	14000315 	stw	r16,12(r2)
8110aefc:	003ef806 	br	8110aae0 <__reset+0xfb0eaae0>
8110af00:	88c00054 	ori	r3,r17,1
8110af04:	80c00115 	stw	r3,4(r16)
8110af08:	8463883a 	add	r17,r16,r17
8110af0c:	34400515 	stw	r17,20(r6)
8110af10:	34400415 	stw	r17,16(r6)
8110af14:	10c00054 	ori	r3,r2,1
8110af18:	8a000315 	stw	r8,12(r17)
8110af1c:	8a000215 	stw	r8,8(r17)
8110af20:	88c00115 	stw	r3,4(r17)
8110af24:	88a3883a 	add	r17,r17,r2
8110af28:	88800015 	stw	r2,0(r17)
8110af2c:	9009883a 	mov	r4,r18
8110af30:	1111e440 	call	81111e44 <__malloc_unlock>
8110af34:	80800204 	addi	r2,r16,8
8110af38:	003f3c06 	br	8110ac2c <__reset+0xfb0eac2c>
8110af3c:	30c00117 	ldw	r3,4(r6)
8110af40:	003ee706 	br	8110aae0 <__reset+0xfb0eaae0>
8110af44:	5ac00044 	addi	r11,r11,1
8110af48:	588000cc 	andi	r2,r11,3
8110af4c:	31800204 	addi	r6,r6,8
8110af50:	103efd1e 	bne	r2,zero,8110ab48 <__reset+0xfb0eab48>
8110af54:	00002406 	br	8110afe8 <_malloc_r+0x660>
8110af58:	14000317 	ldw	r16,12(r2)
8110af5c:	143f251e 	bne	r2,r16,8110abf4 <__reset+0xfb0eabf4>
8110af60:	21000084 	addi	r4,r4,2
8110af64:	003ebc06 	br	8110aa58 <__reset+0xfb0eaa58>
8110af68:	8085883a 	add	r2,r16,r2
8110af6c:	10c00117 	ldw	r3,4(r2)
8110af70:	81000317 	ldw	r4,12(r16)
8110af74:	81400217 	ldw	r5,8(r16)
8110af78:	18c00054 	ori	r3,r3,1
8110af7c:	10c00115 	stw	r3,4(r2)
8110af80:	29000315 	stw	r4,12(r5)
8110af84:	21400215 	stw	r5,8(r4)
8110af88:	9009883a 	mov	r4,r18
8110af8c:	1111e440 	call	81111e44 <__malloc_unlock>
8110af90:	80800204 	addi	r2,r16,8
8110af94:	003f2506 	br	8110ac2c <__reset+0xfb0eac2c>
8110af98:	12001704 	addi	r8,r2,92
8110af9c:	11c016c4 	addi	r7,r2,91
8110afa0:	4209883a 	add	r4,r8,r8
8110afa4:	003e9606 	br	8110aa00 <__reset+0xfb0eaa00>
8110afa8:	3804d1ba 	srli	r2,r7,6
8110afac:	11400e44 	addi	r5,r2,57
8110afb0:	10c00e04 	addi	r3,r2,56
8110afb4:	294b883a 	add	r5,r5,r5
8110afb8:	003fbc06 	br	8110aeac <__reset+0xfb0eaeac>
8110afbc:	84ff5926 	beq	r16,r19,8110ad24 <__reset+0xfb0ead24>
8110afc0:	00a044b4 	movhi	r2,33042
8110afc4:	10a25d04 	addi	r2,r2,-30348
8110afc8:	14000217 	ldw	r16,8(r2)
8110afcc:	00bfff04 	movi	r2,-4
8110afd0:	80c00117 	ldw	r3,4(r16)
8110afd4:	1886703a 	and	r3,r3,r2
8110afd8:	003f9106 	br	8110ae20 <__reset+0xfb0eae20>
8110afdc:	60800217 	ldw	r2,8(r12)
8110afe0:	213fffc4 	addi	r4,r4,-1
8110afe4:	1300651e 	bne	r2,r12,8110b17c <_malloc_r+0x7f4>
8110afe8:	208000cc 	andi	r2,r4,3
8110afec:	633ffe04 	addi	r12,r12,-8
8110aff0:	103ffa1e 	bne	r2,zero,8110afdc <__reset+0xfb0eafdc>
8110aff4:	98800117 	ldw	r2,4(r19)
8110aff8:	0146303a 	nor	r3,zero,r5
8110affc:	1884703a 	and	r2,r3,r2
8110b000:	98800115 	stw	r2,4(r19)
8110b004:	294b883a 	add	r5,r5,r5
8110b008:	117f2836 	bltu	r2,r5,8110acac <__reset+0xfb0eacac>
8110b00c:	283f2726 	beq	r5,zero,8110acac <__reset+0xfb0eacac>
8110b010:	2886703a 	and	r3,r5,r2
8110b014:	5809883a 	mov	r4,r11
8110b018:	183ec31e 	bne	r3,zero,8110ab28 <__reset+0xfb0eab28>
8110b01c:	294b883a 	add	r5,r5,r5
8110b020:	2886703a 	and	r3,r5,r2
8110b024:	21000104 	addi	r4,r4,4
8110b028:	183ffc26 	beq	r3,zero,8110b01c <__reset+0xfb0eb01c>
8110b02c:	003ebe06 	br	8110ab28 <__reset+0xfb0eab28>
8110b030:	00c05504 	movi	r3,340
8110b034:	18801236 	bltu	r3,r2,8110b080 <_malloc_r+0x6f8>
8110b038:	8804d3fa 	srli	r2,r17,15
8110b03c:	12001e04 	addi	r8,r2,120
8110b040:	11c01dc4 	addi	r7,r2,119
8110b044:	4209883a 	add	r4,r8,r8
8110b048:	003e6d06 	br	8110aa00 <__reset+0xfb0eaa00>
8110b04c:	00c40004 	movi	r3,4096
8110b050:	003f4606 	br	8110ad6c <__reset+0xfb0ead6c>
8110b054:	00800044 	movi	r2,1
8110b058:	a0800115 	stw	r2,4(r20)
8110b05c:	003f7406 	br	8110ae30 <__reset+0xfb0eae30>
8110b060:	1805d0ba 	srai	r2,r3,2
8110b064:	01c00044 	movi	r7,1
8110b068:	30c00117 	ldw	r3,4(r6)
8110b06c:	388e983a 	sll	r7,r7,r2
8110b070:	2805883a 	mov	r2,r5
8110b074:	38c6b03a 	or	r3,r7,r3
8110b078:	30c00115 	stw	r3,4(r6)
8110b07c:	003f9b06 	br	8110aeec <__reset+0xfb0eaeec>
8110b080:	00c15504 	movi	r3,1364
8110b084:	18801a36 	bltu	r3,r2,8110b0f0 <_malloc_r+0x768>
8110b088:	8804d4ba 	srli	r2,r17,18
8110b08c:	12001f44 	addi	r8,r2,125
8110b090:	11c01f04 	addi	r7,r2,124
8110b094:	4209883a 	add	r4,r8,r8
8110b098:	003e5906 	br	8110aa00 <__reset+0xfb0eaa00>
8110b09c:	ad400404 	addi	r21,r21,16
8110b0a0:	003f1706 	br	8110ad00 <__reset+0xfb0ead00>
8110b0a4:	00c01504 	movi	r3,84
8110b0a8:	18802336 	bltu	r3,r2,8110b138 <_malloc_r+0x7b0>
8110b0ac:	3804d33a 	srli	r2,r7,12
8110b0b0:	11401bc4 	addi	r5,r2,111
8110b0b4:	10c01b84 	addi	r3,r2,110
8110b0b8:	294b883a 	add	r5,r5,r5
8110b0bc:	003f7b06 	br	8110aeac <__reset+0xfb0eaeac>
8110b0c0:	9c000217 	ldw	r16,8(r19)
8110b0c4:	00bfff04 	movi	r2,-4
8110b0c8:	80c00117 	ldw	r3,4(r16)
8110b0cc:	1886703a 	and	r3,r3,r2
8110b0d0:	003f5306 	br	8110ae20 <__reset+0xfb0eae20>
8110b0d4:	3083ffcc 	andi	r2,r6,4095
8110b0d8:	103f181e 	bne	r2,zero,8110ad3c <__reset+0xfb0ead3c>
8110b0dc:	99000217 	ldw	r4,8(r19)
8110b0e0:	b545883a 	add	r2,r22,r21
8110b0e4:	10800054 	ori	r2,r2,1
8110b0e8:	20800115 	stw	r2,4(r4)
8110b0ec:	003f3e06 	br	8110ade8 <__reset+0xfb0eade8>
8110b0f0:	01003f84 	movi	r4,254
8110b0f4:	02001fc4 	movi	r8,127
8110b0f8:	01c01f84 	movi	r7,126
8110b0fc:	003e4006 	br	8110aa00 <__reset+0xfb0eaa00>
8110b100:	00a044b4 	movhi	r2,33042
8110b104:	10a82c04 	addi	r2,r2,-24400
8110b108:	15000015 	stw	r20,0(r2)
8110b10c:	003f1106 	br	8110ad54 <__reset+0xfb0ead54>
8110b110:	00800044 	movi	r2,1
8110b114:	002b883a 	mov	r21,zero
8110b118:	003f1f06 	br	8110ad98 <__reset+0xfb0ead98>
8110b11c:	81400204 	addi	r5,r16,8
8110b120:	9009883a 	mov	r4,r18
8110b124:	1109d9c0 	call	81109d9c <_free_r>
8110b128:	00a044b4 	movhi	r2,33042
8110b12c:	10a84f04 	addi	r2,r2,-24260
8110b130:	10c00017 	ldw	r3,0(r2)
8110b134:	003f2c06 	br	8110ade8 <__reset+0xfb0eade8>
8110b138:	00c05504 	movi	r3,340
8110b13c:	18800536 	bltu	r3,r2,8110b154 <_malloc_r+0x7cc>
8110b140:	3804d3fa 	srli	r2,r7,15
8110b144:	11401e04 	addi	r5,r2,120
8110b148:	10c01dc4 	addi	r3,r2,119
8110b14c:	294b883a 	add	r5,r5,r5
8110b150:	003f5606 	br	8110aeac <__reset+0xfb0eaeac>
8110b154:	00c15504 	movi	r3,1364
8110b158:	18800536 	bltu	r3,r2,8110b170 <_malloc_r+0x7e8>
8110b15c:	3804d4ba 	srli	r2,r7,18
8110b160:	11401f44 	addi	r5,r2,125
8110b164:	10c01f04 	addi	r3,r2,124
8110b168:	294b883a 	add	r5,r5,r5
8110b16c:	003f4f06 	br	8110aeac <__reset+0xfb0eaeac>
8110b170:	01403f84 	movi	r5,254
8110b174:	00c01f84 	movi	r3,126
8110b178:	003f4c06 	br	8110aeac <__reset+0xfb0eaeac>
8110b17c:	98800117 	ldw	r2,4(r19)
8110b180:	003fa006 	br	8110b004 <__reset+0xfb0eb004>
8110b184:	8808d0fa 	srli	r4,r17,3
8110b188:	20800044 	addi	r2,r4,1
8110b18c:	1085883a 	add	r2,r2,r2
8110b190:	003e9006 	br	8110abd4 <__reset+0xfb0eabd4>

8110b194 <memchr>:
8110b194:	208000cc 	andi	r2,r4,3
8110b198:	280f883a 	mov	r7,r5
8110b19c:	10003426 	beq	r2,zero,8110b270 <memchr+0xdc>
8110b1a0:	30bfffc4 	addi	r2,r6,-1
8110b1a4:	30001a26 	beq	r6,zero,8110b210 <memchr+0x7c>
8110b1a8:	20c00003 	ldbu	r3,0(r4)
8110b1ac:	29803fcc 	andi	r6,r5,255
8110b1b0:	30c0051e 	bne	r6,r3,8110b1c8 <memchr+0x34>
8110b1b4:	00001806 	br	8110b218 <memchr+0x84>
8110b1b8:	10001526 	beq	r2,zero,8110b210 <memchr+0x7c>
8110b1bc:	20c00003 	ldbu	r3,0(r4)
8110b1c0:	10bfffc4 	addi	r2,r2,-1
8110b1c4:	30c01426 	beq	r6,r3,8110b218 <memchr+0x84>
8110b1c8:	21000044 	addi	r4,r4,1
8110b1cc:	20c000cc 	andi	r3,r4,3
8110b1d0:	183ff91e 	bne	r3,zero,8110b1b8 <__reset+0xfb0eb1b8>
8110b1d4:	020000c4 	movi	r8,3
8110b1d8:	40801136 	bltu	r8,r2,8110b220 <memchr+0x8c>
8110b1dc:	10000c26 	beq	r2,zero,8110b210 <memchr+0x7c>
8110b1e0:	20c00003 	ldbu	r3,0(r4)
8110b1e4:	29403fcc 	andi	r5,r5,255
8110b1e8:	28c00b26 	beq	r5,r3,8110b218 <memchr+0x84>
8110b1ec:	20c00044 	addi	r3,r4,1
8110b1f0:	39803fcc 	andi	r6,r7,255
8110b1f4:	2089883a 	add	r4,r4,r2
8110b1f8:	00000306 	br	8110b208 <memchr+0x74>
8110b1fc:	18c00044 	addi	r3,r3,1
8110b200:	197fffc3 	ldbu	r5,-1(r3)
8110b204:	31400526 	beq	r6,r5,8110b21c <memchr+0x88>
8110b208:	1805883a 	mov	r2,r3
8110b20c:	20fffb1e 	bne	r4,r3,8110b1fc <__reset+0xfb0eb1fc>
8110b210:	0005883a 	mov	r2,zero
8110b214:	f800283a 	ret
8110b218:	2005883a 	mov	r2,r4
8110b21c:	f800283a 	ret
8110b220:	28c03fcc 	andi	r3,r5,255
8110b224:	1812923a 	slli	r9,r3,8
8110b228:	02ffbff4 	movhi	r11,65279
8110b22c:	02a02074 	movhi	r10,32897
8110b230:	48d2b03a 	or	r9,r9,r3
8110b234:	4806943a 	slli	r3,r9,16
8110b238:	5affbfc4 	addi	r11,r11,-257
8110b23c:	52a02004 	addi	r10,r10,-32640
8110b240:	48d2b03a 	or	r9,r9,r3
8110b244:	20c00017 	ldw	r3,0(r4)
8110b248:	48c6f03a 	xor	r3,r9,r3
8110b24c:	1acd883a 	add	r6,r3,r11
8110b250:	00c6303a 	nor	r3,zero,r3
8110b254:	30c6703a 	and	r3,r6,r3
8110b258:	1a86703a 	and	r3,r3,r10
8110b25c:	183fe01e 	bne	r3,zero,8110b1e0 <__reset+0xfb0eb1e0>
8110b260:	10bfff04 	addi	r2,r2,-4
8110b264:	21000104 	addi	r4,r4,4
8110b268:	40bff636 	bltu	r8,r2,8110b244 <__reset+0xfb0eb244>
8110b26c:	003fdb06 	br	8110b1dc <__reset+0xfb0eb1dc>
8110b270:	3005883a 	mov	r2,r6
8110b274:	003fd706 	br	8110b1d4 <__reset+0xfb0eb1d4>

8110b278 <memmove>:
8110b278:	2005883a 	mov	r2,r4
8110b27c:	29000b2e 	bgeu	r5,r4,8110b2ac <memmove+0x34>
8110b280:	298f883a 	add	r7,r5,r6
8110b284:	21c0092e 	bgeu	r4,r7,8110b2ac <memmove+0x34>
8110b288:	2187883a 	add	r3,r4,r6
8110b28c:	198bc83a 	sub	r5,r3,r6
8110b290:	30004826 	beq	r6,zero,8110b3b4 <memmove+0x13c>
8110b294:	39ffffc4 	addi	r7,r7,-1
8110b298:	39000003 	ldbu	r4,0(r7)
8110b29c:	18ffffc4 	addi	r3,r3,-1
8110b2a0:	19000005 	stb	r4,0(r3)
8110b2a4:	28fffb1e 	bne	r5,r3,8110b294 <__reset+0xfb0eb294>
8110b2a8:	f800283a 	ret
8110b2ac:	00c003c4 	movi	r3,15
8110b2b0:	1980412e 	bgeu	r3,r6,8110b3b8 <memmove+0x140>
8110b2b4:	2886b03a 	or	r3,r5,r2
8110b2b8:	18c000cc 	andi	r3,r3,3
8110b2bc:	1800401e 	bne	r3,zero,8110b3c0 <memmove+0x148>
8110b2c0:	33fffc04 	addi	r15,r6,-16
8110b2c4:	781ed13a 	srli	r15,r15,4
8110b2c8:	28c00104 	addi	r3,r5,4
8110b2cc:	13400104 	addi	r13,r2,4
8110b2d0:	781c913a 	slli	r14,r15,4
8110b2d4:	2b000204 	addi	r12,r5,8
8110b2d8:	12c00204 	addi	r11,r2,8
8110b2dc:	73800504 	addi	r14,r14,20
8110b2e0:	2a800304 	addi	r10,r5,12
8110b2e4:	12400304 	addi	r9,r2,12
8110b2e8:	2b9d883a 	add	r14,r5,r14
8110b2ec:	2811883a 	mov	r8,r5
8110b2f0:	100f883a 	mov	r7,r2
8110b2f4:	41000017 	ldw	r4,0(r8)
8110b2f8:	39c00404 	addi	r7,r7,16
8110b2fc:	18c00404 	addi	r3,r3,16
8110b300:	393ffc15 	stw	r4,-16(r7)
8110b304:	193ffc17 	ldw	r4,-16(r3)
8110b308:	6b400404 	addi	r13,r13,16
8110b30c:	5ac00404 	addi	r11,r11,16
8110b310:	693ffc15 	stw	r4,-16(r13)
8110b314:	61000017 	ldw	r4,0(r12)
8110b318:	4a400404 	addi	r9,r9,16
8110b31c:	42000404 	addi	r8,r8,16
8110b320:	593ffc15 	stw	r4,-16(r11)
8110b324:	51000017 	ldw	r4,0(r10)
8110b328:	63000404 	addi	r12,r12,16
8110b32c:	52800404 	addi	r10,r10,16
8110b330:	493ffc15 	stw	r4,-16(r9)
8110b334:	1bbfef1e 	bne	r3,r14,8110b2f4 <__reset+0xfb0eb2f4>
8110b338:	79000044 	addi	r4,r15,1
8110b33c:	2008913a 	slli	r4,r4,4
8110b340:	328003cc 	andi	r10,r6,15
8110b344:	02c000c4 	movi	r11,3
8110b348:	1107883a 	add	r3,r2,r4
8110b34c:	290b883a 	add	r5,r5,r4
8110b350:	5a801e2e 	bgeu	r11,r10,8110b3cc <memmove+0x154>
8110b354:	1813883a 	mov	r9,r3
8110b358:	2811883a 	mov	r8,r5
8110b35c:	500f883a 	mov	r7,r10
8110b360:	41000017 	ldw	r4,0(r8)
8110b364:	4a400104 	addi	r9,r9,4
8110b368:	39ffff04 	addi	r7,r7,-4
8110b36c:	493fff15 	stw	r4,-4(r9)
8110b370:	42000104 	addi	r8,r8,4
8110b374:	59fffa36 	bltu	r11,r7,8110b360 <__reset+0xfb0eb360>
8110b378:	513fff04 	addi	r4,r10,-4
8110b37c:	2008d0ba 	srli	r4,r4,2
8110b380:	318000cc 	andi	r6,r6,3
8110b384:	21000044 	addi	r4,r4,1
8110b388:	2109883a 	add	r4,r4,r4
8110b38c:	2109883a 	add	r4,r4,r4
8110b390:	1907883a 	add	r3,r3,r4
8110b394:	290b883a 	add	r5,r5,r4
8110b398:	30000b26 	beq	r6,zero,8110b3c8 <memmove+0x150>
8110b39c:	198d883a 	add	r6,r3,r6
8110b3a0:	29c00003 	ldbu	r7,0(r5)
8110b3a4:	18c00044 	addi	r3,r3,1
8110b3a8:	29400044 	addi	r5,r5,1
8110b3ac:	19ffffc5 	stb	r7,-1(r3)
8110b3b0:	19bffb1e 	bne	r3,r6,8110b3a0 <__reset+0xfb0eb3a0>
8110b3b4:	f800283a 	ret
8110b3b8:	1007883a 	mov	r3,r2
8110b3bc:	003ff606 	br	8110b398 <__reset+0xfb0eb398>
8110b3c0:	1007883a 	mov	r3,r2
8110b3c4:	003ff506 	br	8110b39c <__reset+0xfb0eb39c>
8110b3c8:	f800283a 	ret
8110b3cc:	500d883a 	mov	r6,r10
8110b3d0:	003ff106 	br	8110b398 <__reset+0xfb0eb398>

8110b3d4 <memset>:
8110b3d4:	20c000cc 	andi	r3,r4,3
8110b3d8:	2005883a 	mov	r2,r4
8110b3dc:	18004426 	beq	r3,zero,8110b4f0 <memset+0x11c>
8110b3e0:	31ffffc4 	addi	r7,r6,-1
8110b3e4:	30004026 	beq	r6,zero,8110b4e8 <memset+0x114>
8110b3e8:	2813883a 	mov	r9,r5
8110b3ec:	200d883a 	mov	r6,r4
8110b3f0:	2007883a 	mov	r3,r4
8110b3f4:	00000406 	br	8110b408 <memset+0x34>
8110b3f8:	3a3fffc4 	addi	r8,r7,-1
8110b3fc:	31800044 	addi	r6,r6,1
8110b400:	38003926 	beq	r7,zero,8110b4e8 <memset+0x114>
8110b404:	400f883a 	mov	r7,r8
8110b408:	18c00044 	addi	r3,r3,1
8110b40c:	32400005 	stb	r9,0(r6)
8110b410:	1a0000cc 	andi	r8,r3,3
8110b414:	403ff81e 	bne	r8,zero,8110b3f8 <__reset+0xfb0eb3f8>
8110b418:	010000c4 	movi	r4,3
8110b41c:	21c02d2e 	bgeu	r4,r7,8110b4d4 <memset+0x100>
8110b420:	29003fcc 	andi	r4,r5,255
8110b424:	200c923a 	slli	r6,r4,8
8110b428:	3108b03a 	or	r4,r6,r4
8110b42c:	200c943a 	slli	r6,r4,16
8110b430:	218cb03a 	or	r6,r4,r6
8110b434:	010003c4 	movi	r4,15
8110b438:	21c0182e 	bgeu	r4,r7,8110b49c <memset+0xc8>
8110b43c:	3b3ffc04 	addi	r12,r7,-16
8110b440:	6018d13a 	srli	r12,r12,4
8110b444:	1a000104 	addi	r8,r3,4
8110b448:	1ac00204 	addi	r11,r3,8
8110b44c:	6008913a 	slli	r4,r12,4
8110b450:	1a800304 	addi	r10,r3,12
8110b454:	1813883a 	mov	r9,r3
8110b458:	21000504 	addi	r4,r4,20
8110b45c:	1909883a 	add	r4,r3,r4
8110b460:	49800015 	stw	r6,0(r9)
8110b464:	41800015 	stw	r6,0(r8)
8110b468:	59800015 	stw	r6,0(r11)
8110b46c:	51800015 	stw	r6,0(r10)
8110b470:	42000404 	addi	r8,r8,16
8110b474:	4a400404 	addi	r9,r9,16
8110b478:	5ac00404 	addi	r11,r11,16
8110b47c:	52800404 	addi	r10,r10,16
8110b480:	413ff71e 	bne	r8,r4,8110b460 <__reset+0xfb0eb460>
8110b484:	63000044 	addi	r12,r12,1
8110b488:	6018913a 	slli	r12,r12,4
8110b48c:	39c003cc 	andi	r7,r7,15
8110b490:	010000c4 	movi	r4,3
8110b494:	1b07883a 	add	r3,r3,r12
8110b498:	21c00e2e 	bgeu	r4,r7,8110b4d4 <memset+0x100>
8110b49c:	1813883a 	mov	r9,r3
8110b4a0:	3811883a 	mov	r8,r7
8110b4a4:	010000c4 	movi	r4,3
8110b4a8:	49800015 	stw	r6,0(r9)
8110b4ac:	423fff04 	addi	r8,r8,-4
8110b4b0:	4a400104 	addi	r9,r9,4
8110b4b4:	223ffc36 	bltu	r4,r8,8110b4a8 <__reset+0xfb0eb4a8>
8110b4b8:	393fff04 	addi	r4,r7,-4
8110b4bc:	2008d0ba 	srli	r4,r4,2
8110b4c0:	39c000cc 	andi	r7,r7,3
8110b4c4:	21000044 	addi	r4,r4,1
8110b4c8:	2109883a 	add	r4,r4,r4
8110b4cc:	2109883a 	add	r4,r4,r4
8110b4d0:	1907883a 	add	r3,r3,r4
8110b4d4:	38000526 	beq	r7,zero,8110b4ec <memset+0x118>
8110b4d8:	19cf883a 	add	r7,r3,r7
8110b4dc:	19400005 	stb	r5,0(r3)
8110b4e0:	18c00044 	addi	r3,r3,1
8110b4e4:	38fffd1e 	bne	r7,r3,8110b4dc <__reset+0xfb0eb4dc>
8110b4e8:	f800283a 	ret
8110b4ec:	f800283a 	ret
8110b4f0:	2007883a 	mov	r3,r4
8110b4f4:	300f883a 	mov	r7,r6
8110b4f8:	003fc706 	br	8110b418 <__reset+0xfb0eb418>

8110b4fc <_Balloc>:
8110b4fc:	20801317 	ldw	r2,76(r4)
8110b500:	defffc04 	addi	sp,sp,-16
8110b504:	dc400115 	stw	r17,4(sp)
8110b508:	dc000015 	stw	r16,0(sp)
8110b50c:	dfc00315 	stw	ra,12(sp)
8110b510:	dc800215 	stw	r18,8(sp)
8110b514:	2023883a 	mov	r17,r4
8110b518:	2821883a 	mov	r16,r5
8110b51c:	10000f26 	beq	r2,zero,8110b55c <_Balloc+0x60>
8110b520:	8407883a 	add	r3,r16,r16
8110b524:	18c7883a 	add	r3,r3,r3
8110b528:	10c7883a 	add	r3,r2,r3
8110b52c:	18800017 	ldw	r2,0(r3)
8110b530:	10001126 	beq	r2,zero,8110b578 <_Balloc+0x7c>
8110b534:	11000017 	ldw	r4,0(r2)
8110b538:	19000015 	stw	r4,0(r3)
8110b53c:	10000415 	stw	zero,16(r2)
8110b540:	10000315 	stw	zero,12(r2)
8110b544:	dfc00317 	ldw	ra,12(sp)
8110b548:	dc800217 	ldw	r18,8(sp)
8110b54c:	dc400117 	ldw	r17,4(sp)
8110b550:	dc000017 	ldw	r16,0(sp)
8110b554:	dec00404 	addi	sp,sp,16
8110b558:	f800283a 	ret
8110b55c:	01800844 	movi	r6,33
8110b560:	01400104 	movi	r5,4
8110b564:	110e6f80 	call	8110e6f8 <_calloc_r>
8110b568:	88801315 	stw	r2,76(r17)
8110b56c:	103fec1e 	bne	r2,zero,8110b520 <__reset+0xfb0eb520>
8110b570:	0005883a 	mov	r2,zero
8110b574:	003ff306 	br	8110b544 <__reset+0xfb0eb544>
8110b578:	01400044 	movi	r5,1
8110b57c:	2c24983a 	sll	r18,r5,r16
8110b580:	8809883a 	mov	r4,r17
8110b584:	91800144 	addi	r6,r18,5
8110b588:	318d883a 	add	r6,r6,r6
8110b58c:	318d883a 	add	r6,r6,r6
8110b590:	110e6f80 	call	8110e6f8 <_calloc_r>
8110b594:	103ff626 	beq	r2,zero,8110b570 <__reset+0xfb0eb570>
8110b598:	14000115 	stw	r16,4(r2)
8110b59c:	14800215 	stw	r18,8(r2)
8110b5a0:	003fe606 	br	8110b53c <__reset+0xfb0eb53c>

8110b5a4 <_Bfree>:
8110b5a4:	28000826 	beq	r5,zero,8110b5c8 <_Bfree+0x24>
8110b5a8:	28c00117 	ldw	r3,4(r5)
8110b5ac:	20801317 	ldw	r2,76(r4)
8110b5b0:	18c7883a 	add	r3,r3,r3
8110b5b4:	18c7883a 	add	r3,r3,r3
8110b5b8:	10c5883a 	add	r2,r2,r3
8110b5bc:	10c00017 	ldw	r3,0(r2)
8110b5c0:	28c00015 	stw	r3,0(r5)
8110b5c4:	11400015 	stw	r5,0(r2)
8110b5c8:	f800283a 	ret

8110b5cc <__multadd>:
8110b5cc:	defffa04 	addi	sp,sp,-24
8110b5d0:	dc800315 	stw	r18,12(sp)
8110b5d4:	dc400215 	stw	r17,8(sp)
8110b5d8:	dc000115 	stw	r16,4(sp)
8110b5dc:	2823883a 	mov	r17,r5
8110b5e0:	2c000417 	ldw	r16,16(r5)
8110b5e4:	dfc00515 	stw	ra,20(sp)
8110b5e8:	dcc00415 	stw	r19,16(sp)
8110b5ec:	2025883a 	mov	r18,r4
8110b5f0:	29400504 	addi	r5,r5,20
8110b5f4:	0011883a 	mov	r8,zero
8110b5f8:	28c00017 	ldw	r3,0(r5)
8110b5fc:	29400104 	addi	r5,r5,4
8110b600:	42000044 	addi	r8,r8,1
8110b604:	18bfffcc 	andi	r2,r3,65535
8110b608:	1185383a 	mul	r2,r2,r6
8110b60c:	1806d43a 	srli	r3,r3,16
8110b610:	11cf883a 	add	r7,r2,r7
8110b614:	3808d43a 	srli	r4,r7,16
8110b618:	1987383a 	mul	r3,r3,r6
8110b61c:	38bfffcc 	andi	r2,r7,65535
8110b620:	1907883a 	add	r3,r3,r4
8110b624:	1808943a 	slli	r4,r3,16
8110b628:	180ed43a 	srli	r7,r3,16
8110b62c:	2085883a 	add	r2,r4,r2
8110b630:	28bfff15 	stw	r2,-4(r5)
8110b634:	443ff016 	blt	r8,r16,8110b5f8 <__reset+0xfb0eb5f8>
8110b638:	38000926 	beq	r7,zero,8110b660 <__multadd+0x94>
8110b63c:	88800217 	ldw	r2,8(r17)
8110b640:	80800f0e 	bge	r16,r2,8110b680 <__multadd+0xb4>
8110b644:	80800144 	addi	r2,r16,5
8110b648:	1085883a 	add	r2,r2,r2
8110b64c:	1085883a 	add	r2,r2,r2
8110b650:	8885883a 	add	r2,r17,r2
8110b654:	11c00015 	stw	r7,0(r2)
8110b658:	84000044 	addi	r16,r16,1
8110b65c:	8c000415 	stw	r16,16(r17)
8110b660:	8805883a 	mov	r2,r17
8110b664:	dfc00517 	ldw	ra,20(sp)
8110b668:	dcc00417 	ldw	r19,16(sp)
8110b66c:	dc800317 	ldw	r18,12(sp)
8110b670:	dc400217 	ldw	r17,8(sp)
8110b674:	dc000117 	ldw	r16,4(sp)
8110b678:	dec00604 	addi	sp,sp,24
8110b67c:	f800283a 	ret
8110b680:	89400117 	ldw	r5,4(r17)
8110b684:	9009883a 	mov	r4,r18
8110b688:	d9c00015 	stw	r7,0(sp)
8110b68c:	29400044 	addi	r5,r5,1
8110b690:	110b4fc0 	call	8110b4fc <_Balloc>
8110b694:	89800417 	ldw	r6,16(r17)
8110b698:	89400304 	addi	r5,r17,12
8110b69c:	11000304 	addi	r4,r2,12
8110b6a0:	31800084 	addi	r6,r6,2
8110b6a4:	318d883a 	add	r6,r6,r6
8110b6a8:	318d883a 	add	r6,r6,r6
8110b6ac:	1027883a 	mov	r19,r2
8110b6b0:	11056440 	call	81105644 <memcpy>
8110b6b4:	d9c00017 	ldw	r7,0(sp)
8110b6b8:	88000a26 	beq	r17,zero,8110b6e4 <__multadd+0x118>
8110b6bc:	88c00117 	ldw	r3,4(r17)
8110b6c0:	90801317 	ldw	r2,76(r18)
8110b6c4:	18c7883a 	add	r3,r3,r3
8110b6c8:	18c7883a 	add	r3,r3,r3
8110b6cc:	10c5883a 	add	r2,r2,r3
8110b6d0:	10c00017 	ldw	r3,0(r2)
8110b6d4:	88c00015 	stw	r3,0(r17)
8110b6d8:	14400015 	stw	r17,0(r2)
8110b6dc:	9823883a 	mov	r17,r19
8110b6e0:	003fd806 	br	8110b644 <__reset+0xfb0eb644>
8110b6e4:	9823883a 	mov	r17,r19
8110b6e8:	003fd606 	br	8110b644 <__reset+0xfb0eb644>

8110b6ec <__s2b>:
8110b6ec:	defff904 	addi	sp,sp,-28
8110b6f0:	dc400115 	stw	r17,4(sp)
8110b6f4:	dc000015 	stw	r16,0(sp)
8110b6f8:	2023883a 	mov	r17,r4
8110b6fc:	2821883a 	mov	r16,r5
8110b700:	39000204 	addi	r4,r7,8
8110b704:	01400244 	movi	r5,9
8110b708:	dcc00315 	stw	r19,12(sp)
8110b70c:	dc800215 	stw	r18,8(sp)
8110b710:	dfc00615 	stw	ra,24(sp)
8110b714:	dd400515 	stw	r21,20(sp)
8110b718:	dd000415 	stw	r20,16(sp)
8110b71c:	3825883a 	mov	r18,r7
8110b720:	3027883a 	mov	r19,r6
8110b724:	110f8d00 	call	8110f8d0 <__divsi3>
8110b728:	00c00044 	movi	r3,1
8110b72c:	000b883a 	mov	r5,zero
8110b730:	1880030e 	bge	r3,r2,8110b740 <__s2b+0x54>
8110b734:	18c7883a 	add	r3,r3,r3
8110b738:	29400044 	addi	r5,r5,1
8110b73c:	18bffd16 	blt	r3,r2,8110b734 <__reset+0xfb0eb734>
8110b740:	8809883a 	mov	r4,r17
8110b744:	110b4fc0 	call	8110b4fc <_Balloc>
8110b748:	d8c00717 	ldw	r3,28(sp)
8110b74c:	10c00515 	stw	r3,20(r2)
8110b750:	00c00044 	movi	r3,1
8110b754:	10c00415 	stw	r3,16(r2)
8110b758:	00c00244 	movi	r3,9
8110b75c:	1cc0210e 	bge	r3,r19,8110b7e4 <__s2b+0xf8>
8110b760:	80eb883a 	add	r21,r16,r3
8110b764:	a829883a 	mov	r20,r21
8110b768:	84e1883a 	add	r16,r16,r19
8110b76c:	a1c00007 	ldb	r7,0(r20)
8110b770:	01800284 	movi	r6,10
8110b774:	a5000044 	addi	r20,r20,1
8110b778:	100b883a 	mov	r5,r2
8110b77c:	39fff404 	addi	r7,r7,-48
8110b780:	8809883a 	mov	r4,r17
8110b784:	110b5cc0 	call	8110b5cc <__multadd>
8110b788:	a43ff81e 	bne	r20,r16,8110b76c <__reset+0xfb0eb76c>
8110b78c:	ace1883a 	add	r16,r21,r19
8110b790:	843ffe04 	addi	r16,r16,-8
8110b794:	9c800a0e 	bge	r19,r18,8110b7c0 <__s2b+0xd4>
8110b798:	94e5c83a 	sub	r18,r18,r19
8110b79c:	84a5883a 	add	r18,r16,r18
8110b7a0:	81c00007 	ldb	r7,0(r16)
8110b7a4:	01800284 	movi	r6,10
8110b7a8:	84000044 	addi	r16,r16,1
8110b7ac:	100b883a 	mov	r5,r2
8110b7b0:	39fff404 	addi	r7,r7,-48
8110b7b4:	8809883a 	mov	r4,r17
8110b7b8:	110b5cc0 	call	8110b5cc <__multadd>
8110b7bc:	84bff81e 	bne	r16,r18,8110b7a0 <__reset+0xfb0eb7a0>
8110b7c0:	dfc00617 	ldw	ra,24(sp)
8110b7c4:	dd400517 	ldw	r21,20(sp)
8110b7c8:	dd000417 	ldw	r20,16(sp)
8110b7cc:	dcc00317 	ldw	r19,12(sp)
8110b7d0:	dc800217 	ldw	r18,8(sp)
8110b7d4:	dc400117 	ldw	r17,4(sp)
8110b7d8:	dc000017 	ldw	r16,0(sp)
8110b7dc:	dec00704 	addi	sp,sp,28
8110b7e0:	f800283a 	ret
8110b7e4:	84000284 	addi	r16,r16,10
8110b7e8:	1827883a 	mov	r19,r3
8110b7ec:	003fe906 	br	8110b794 <__reset+0xfb0eb794>

8110b7f0 <__hi0bits>:
8110b7f0:	20bfffec 	andhi	r2,r4,65535
8110b7f4:	1000141e 	bne	r2,zero,8110b848 <__hi0bits+0x58>
8110b7f8:	2008943a 	slli	r4,r4,16
8110b7fc:	00800404 	movi	r2,16
8110b800:	20ffc02c 	andhi	r3,r4,65280
8110b804:	1800021e 	bne	r3,zero,8110b810 <__hi0bits+0x20>
8110b808:	2008923a 	slli	r4,r4,8
8110b80c:	10800204 	addi	r2,r2,8
8110b810:	20fc002c 	andhi	r3,r4,61440
8110b814:	1800021e 	bne	r3,zero,8110b820 <__hi0bits+0x30>
8110b818:	2008913a 	slli	r4,r4,4
8110b81c:	10800104 	addi	r2,r2,4
8110b820:	20f0002c 	andhi	r3,r4,49152
8110b824:	1800031e 	bne	r3,zero,8110b834 <__hi0bits+0x44>
8110b828:	2109883a 	add	r4,r4,r4
8110b82c:	10800084 	addi	r2,r2,2
8110b830:	2109883a 	add	r4,r4,r4
8110b834:	20000316 	blt	r4,zero,8110b844 <__hi0bits+0x54>
8110b838:	2110002c 	andhi	r4,r4,16384
8110b83c:	2000041e 	bne	r4,zero,8110b850 <__hi0bits+0x60>
8110b840:	00800804 	movi	r2,32
8110b844:	f800283a 	ret
8110b848:	0005883a 	mov	r2,zero
8110b84c:	003fec06 	br	8110b800 <__reset+0xfb0eb800>
8110b850:	10800044 	addi	r2,r2,1
8110b854:	f800283a 	ret

8110b858 <__lo0bits>:
8110b858:	20c00017 	ldw	r3,0(r4)
8110b85c:	188001cc 	andi	r2,r3,7
8110b860:	10000826 	beq	r2,zero,8110b884 <__lo0bits+0x2c>
8110b864:	1880004c 	andi	r2,r3,1
8110b868:	1000211e 	bne	r2,zero,8110b8f0 <__lo0bits+0x98>
8110b86c:	1880008c 	andi	r2,r3,2
8110b870:	1000211e 	bne	r2,zero,8110b8f8 <__lo0bits+0xa0>
8110b874:	1806d0ba 	srli	r3,r3,2
8110b878:	00800084 	movi	r2,2
8110b87c:	20c00015 	stw	r3,0(r4)
8110b880:	f800283a 	ret
8110b884:	18bfffcc 	andi	r2,r3,65535
8110b888:	10001326 	beq	r2,zero,8110b8d8 <__lo0bits+0x80>
8110b88c:	0005883a 	mov	r2,zero
8110b890:	19403fcc 	andi	r5,r3,255
8110b894:	2800021e 	bne	r5,zero,8110b8a0 <__lo0bits+0x48>
8110b898:	1806d23a 	srli	r3,r3,8
8110b89c:	10800204 	addi	r2,r2,8
8110b8a0:	194003cc 	andi	r5,r3,15
8110b8a4:	2800021e 	bne	r5,zero,8110b8b0 <__lo0bits+0x58>
8110b8a8:	1806d13a 	srli	r3,r3,4
8110b8ac:	10800104 	addi	r2,r2,4
8110b8b0:	194000cc 	andi	r5,r3,3
8110b8b4:	2800021e 	bne	r5,zero,8110b8c0 <__lo0bits+0x68>
8110b8b8:	1806d0ba 	srli	r3,r3,2
8110b8bc:	10800084 	addi	r2,r2,2
8110b8c0:	1940004c 	andi	r5,r3,1
8110b8c4:	2800081e 	bne	r5,zero,8110b8e8 <__lo0bits+0x90>
8110b8c8:	1806d07a 	srli	r3,r3,1
8110b8cc:	1800051e 	bne	r3,zero,8110b8e4 <__lo0bits+0x8c>
8110b8d0:	00800804 	movi	r2,32
8110b8d4:	f800283a 	ret
8110b8d8:	1806d43a 	srli	r3,r3,16
8110b8dc:	00800404 	movi	r2,16
8110b8e0:	003feb06 	br	8110b890 <__reset+0xfb0eb890>
8110b8e4:	10800044 	addi	r2,r2,1
8110b8e8:	20c00015 	stw	r3,0(r4)
8110b8ec:	f800283a 	ret
8110b8f0:	0005883a 	mov	r2,zero
8110b8f4:	f800283a 	ret
8110b8f8:	1806d07a 	srli	r3,r3,1
8110b8fc:	00800044 	movi	r2,1
8110b900:	20c00015 	stw	r3,0(r4)
8110b904:	f800283a 	ret

8110b908 <__i2b>:
8110b908:	defffd04 	addi	sp,sp,-12
8110b90c:	dc000015 	stw	r16,0(sp)
8110b910:	04000044 	movi	r16,1
8110b914:	dc400115 	stw	r17,4(sp)
8110b918:	2823883a 	mov	r17,r5
8110b91c:	800b883a 	mov	r5,r16
8110b920:	dfc00215 	stw	ra,8(sp)
8110b924:	110b4fc0 	call	8110b4fc <_Balloc>
8110b928:	14400515 	stw	r17,20(r2)
8110b92c:	14000415 	stw	r16,16(r2)
8110b930:	dfc00217 	ldw	ra,8(sp)
8110b934:	dc400117 	ldw	r17,4(sp)
8110b938:	dc000017 	ldw	r16,0(sp)
8110b93c:	dec00304 	addi	sp,sp,12
8110b940:	f800283a 	ret

8110b944 <__multiply>:
8110b944:	defffa04 	addi	sp,sp,-24
8110b948:	dcc00315 	stw	r19,12(sp)
8110b94c:	dc800215 	stw	r18,8(sp)
8110b950:	34c00417 	ldw	r19,16(r6)
8110b954:	2c800417 	ldw	r18,16(r5)
8110b958:	dd000415 	stw	r20,16(sp)
8110b95c:	dc400115 	stw	r17,4(sp)
8110b960:	dfc00515 	stw	ra,20(sp)
8110b964:	dc000015 	stw	r16,0(sp)
8110b968:	2829883a 	mov	r20,r5
8110b96c:	3023883a 	mov	r17,r6
8110b970:	94c0050e 	bge	r18,r19,8110b988 <__multiply+0x44>
8110b974:	9007883a 	mov	r3,r18
8110b978:	3029883a 	mov	r20,r6
8110b97c:	9825883a 	mov	r18,r19
8110b980:	2823883a 	mov	r17,r5
8110b984:	1827883a 	mov	r19,r3
8110b988:	a0800217 	ldw	r2,8(r20)
8110b98c:	94e1883a 	add	r16,r18,r19
8110b990:	a1400117 	ldw	r5,4(r20)
8110b994:	1400010e 	bge	r2,r16,8110b99c <__multiply+0x58>
8110b998:	29400044 	addi	r5,r5,1
8110b99c:	110b4fc0 	call	8110b4fc <_Balloc>
8110b9a0:	8415883a 	add	r10,r16,r16
8110b9a4:	12c00504 	addi	r11,r2,20
8110b9a8:	5295883a 	add	r10,r10,r10
8110b9ac:	5a95883a 	add	r10,r11,r10
8110b9b0:	5807883a 	mov	r3,r11
8110b9b4:	5a80032e 	bgeu	r11,r10,8110b9c4 <__multiply+0x80>
8110b9b8:	18000015 	stw	zero,0(r3)
8110b9bc:	18c00104 	addi	r3,r3,4
8110b9c0:	1abffd36 	bltu	r3,r10,8110b9b8 <__reset+0xfb0eb9b8>
8110b9c4:	9ce7883a 	add	r19,r19,r19
8110b9c8:	94a5883a 	add	r18,r18,r18
8110b9cc:	89800504 	addi	r6,r17,20
8110b9d0:	9ce7883a 	add	r19,r19,r19
8110b9d4:	a3400504 	addi	r13,r20,20
8110b9d8:	94a5883a 	add	r18,r18,r18
8110b9dc:	34d9883a 	add	r12,r6,r19
8110b9e0:	6c93883a 	add	r9,r13,r18
8110b9e4:	3300422e 	bgeu	r6,r12,8110baf0 <__multiply+0x1ac>
8110b9e8:	37c00017 	ldw	ra,0(r6)
8110b9ec:	fbffffcc 	andi	r15,ra,65535
8110b9f0:	78001b26 	beq	r15,zero,8110ba60 <__multiply+0x11c>
8110b9f4:	5811883a 	mov	r8,r11
8110b9f8:	681d883a 	mov	r14,r13
8110b9fc:	000f883a 	mov	r7,zero
8110ba00:	71000017 	ldw	r4,0(r14)
8110ba04:	40c00017 	ldw	r3,0(r8)
8110ba08:	73800104 	addi	r14,r14,4
8110ba0c:	217fffcc 	andi	r5,r4,65535
8110ba10:	2bcb383a 	mul	r5,r5,r15
8110ba14:	2008d43a 	srli	r4,r4,16
8110ba18:	1c7fffcc 	andi	r17,r3,65535
8110ba1c:	2c4b883a 	add	r5,r5,r17
8110ba20:	29cb883a 	add	r5,r5,r7
8110ba24:	23c9383a 	mul	r4,r4,r15
8110ba28:	1806d43a 	srli	r3,r3,16
8110ba2c:	280ed43a 	srli	r7,r5,16
8110ba30:	297fffcc 	andi	r5,r5,65535
8110ba34:	20c7883a 	add	r3,r4,r3
8110ba38:	19c7883a 	add	r3,r3,r7
8110ba3c:	1808943a 	slli	r4,r3,16
8110ba40:	4023883a 	mov	r17,r8
8110ba44:	180ed43a 	srli	r7,r3,16
8110ba48:	214ab03a 	or	r5,r4,r5
8110ba4c:	41400015 	stw	r5,0(r8)
8110ba50:	42000104 	addi	r8,r8,4
8110ba54:	727fea36 	bltu	r14,r9,8110ba00 <__reset+0xfb0eba00>
8110ba58:	89c00115 	stw	r7,4(r17)
8110ba5c:	37c00017 	ldw	ra,0(r6)
8110ba60:	f83ed43a 	srli	ra,ra,16
8110ba64:	f8001f26 	beq	ra,zero,8110bae4 <__multiply+0x1a0>
8110ba68:	58c00017 	ldw	r3,0(r11)
8110ba6c:	681d883a 	mov	r14,r13
8110ba70:	581f883a 	mov	r15,r11
8110ba74:	1811883a 	mov	r8,r3
8110ba78:	5825883a 	mov	r18,r11
8110ba7c:	000f883a 	mov	r7,zero
8110ba80:	00000106 	br	8110ba88 <__multiply+0x144>
8110ba84:	8825883a 	mov	r18,r17
8110ba88:	7140000b 	ldhu	r5,0(r14)
8110ba8c:	4010d43a 	srli	r8,r8,16
8110ba90:	193fffcc 	andi	r4,r3,65535
8110ba94:	2fcb383a 	mul	r5,r5,ra
8110ba98:	7bc00104 	addi	r15,r15,4
8110ba9c:	73800104 	addi	r14,r14,4
8110baa0:	2a0b883a 	add	r5,r5,r8
8110baa4:	29cb883a 	add	r5,r5,r7
8110baa8:	2806943a 	slli	r3,r5,16
8110baac:	94400104 	addi	r17,r18,4
8110bab0:	280ad43a 	srli	r5,r5,16
8110bab4:	1908b03a 	or	r4,r3,r4
8110bab8:	793fff15 	stw	r4,-4(r15)
8110babc:	70ffff17 	ldw	r3,-4(r14)
8110bac0:	8a000017 	ldw	r8,0(r17)
8110bac4:	1806d43a 	srli	r3,r3,16
8110bac8:	413fffcc 	andi	r4,r8,65535
8110bacc:	1fc7383a 	mul	r3,r3,ra
8110bad0:	1907883a 	add	r3,r3,r4
8110bad4:	1947883a 	add	r3,r3,r5
8110bad8:	180ed43a 	srli	r7,r3,16
8110badc:	727fe936 	bltu	r14,r9,8110ba84 <__reset+0xfb0eba84>
8110bae0:	90c00115 	stw	r3,4(r18)
8110bae4:	31800104 	addi	r6,r6,4
8110bae8:	5ac00104 	addi	r11,r11,4
8110baec:	333fbe36 	bltu	r6,r12,8110b9e8 <__reset+0xfb0eb9e8>
8110baf0:	0400090e 	bge	zero,r16,8110bb18 <__multiply+0x1d4>
8110baf4:	50ffff17 	ldw	r3,-4(r10)
8110baf8:	52bfff04 	addi	r10,r10,-4
8110bafc:	18000326 	beq	r3,zero,8110bb0c <__multiply+0x1c8>
8110bb00:	00000506 	br	8110bb18 <__multiply+0x1d4>
8110bb04:	50c00017 	ldw	r3,0(r10)
8110bb08:	1800031e 	bne	r3,zero,8110bb18 <__multiply+0x1d4>
8110bb0c:	843fffc4 	addi	r16,r16,-1
8110bb10:	52bfff04 	addi	r10,r10,-4
8110bb14:	803ffb1e 	bne	r16,zero,8110bb04 <__reset+0xfb0ebb04>
8110bb18:	14000415 	stw	r16,16(r2)
8110bb1c:	dfc00517 	ldw	ra,20(sp)
8110bb20:	dd000417 	ldw	r20,16(sp)
8110bb24:	dcc00317 	ldw	r19,12(sp)
8110bb28:	dc800217 	ldw	r18,8(sp)
8110bb2c:	dc400117 	ldw	r17,4(sp)
8110bb30:	dc000017 	ldw	r16,0(sp)
8110bb34:	dec00604 	addi	sp,sp,24
8110bb38:	f800283a 	ret

8110bb3c <__pow5mult>:
8110bb3c:	defffa04 	addi	sp,sp,-24
8110bb40:	dcc00315 	stw	r19,12(sp)
8110bb44:	dc000015 	stw	r16,0(sp)
8110bb48:	dfc00515 	stw	ra,20(sp)
8110bb4c:	dd000415 	stw	r20,16(sp)
8110bb50:	dc800215 	stw	r18,8(sp)
8110bb54:	dc400115 	stw	r17,4(sp)
8110bb58:	308000cc 	andi	r2,r6,3
8110bb5c:	3021883a 	mov	r16,r6
8110bb60:	2027883a 	mov	r19,r4
8110bb64:	10002f1e 	bne	r2,zero,8110bc24 <__pow5mult+0xe8>
8110bb68:	2825883a 	mov	r18,r5
8110bb6c:	8021d0ba 	srai	r16,r16,2
8110bb70:	80001a26 	beq	r16,zero,8110bbdc <__pow5mult+0xa0>
8110bb74:	9c401217 	ldw	r17,72(r19)
8110bb78:	8800061e 	bne	r17,zero,8110bb94 <__pow5mult+0x58>
8110bb7c:	00003406 	br	8110bc50 <__pow5mult+0x114>
8110bb80:	8021d07a 	srai	r16,r16,1
8110bb84:	80001526 	beq	r16,zero,8110bbdc <__pow5mult+0xa0>
8110bb88:	88800017 	ldw	r2,0(r17)
8110bb8c:	10001c26 	beq	r2,zero,8110bc00 <__pow5mult+0xc4>
8110bb90:	1023883a 	mov	r17,r2
8110bb94:	8080004c 	andi	r2,r16,1
8110bb98:	103ff926 	beq	r2,zero,8110bb80 <__reset+0xfb0ebb80>
8110bb9c:	880d883a 	mov	r6,r17
8110bba0:	900b883a 	mov	r5,r18
8110bba4:	9809883a 	mov	r4,r19
8110bba8:	110b9440 	call	8110b944 <__multiply>
8110bbac:	90001b26 	beq	r18,zero,8110bc1c <__pow5mult+0xe0>
8110bbb0:	91000117 	ldw	r4,4(r18)
8110bbb4:	98c01317 	ldw	r3,76(r19)
8110bbb8:	8021d07a 	srai	r16,r16,1
8110bbbc:	2109883a 	add	r4,r4,r4
8110bbc0:	2109883a 	add	r4,r4,r4
8110bbc4:	1907883a 	add	r3,r3,r4
8110bbc8:	19000017 	ldw	r4,0(r3)
8110bbcc:	91000015 	stw	r4,0(r18)
8110bbd0:	1c800015 	stw	r18,0(r3)
8110bbd4:	1025883a 	mov	r18,r2
8110bbd8:	803feb1e 	bne	r16,zero,8110bb88 <__reset+0xfb0ebb88>
8110bbdc:	9005883a 	mov	r2,r18
8110bbe0:	dfc00517 	ldw	ra,20(sp)
8110bbe4:	dd000417 	ldw	r20,16(sp)
8110bbe8:	dcc00317 	ldw	r19,12(sp)
8110bbec:	dc800217 	ldw	r18,8(sp)
8110bbf0:	dc400117 	ldw	r17,4(sp)
8110bbf4:	dc000017 	ldw	r16,0(sp)
8110bbf8:	dec00604 	addi	sp,sp,24
8110bbfc:	f800283a 	ret
8110bc00:	880d883a 	mov	r6,r17
8110bc04:	880b883a 	mov	r5,r17
8110bc08:	9809883a 	mov	r4,r19
8110bc0c:	110b9440 	call	8110b944 <__multiply>
8110bc10:	88800015 	stw	r2,0(r17)
8110bc14:	10000015 	stw	zero,0(r2)
8110bc18:	003fdd06 	br	8110bb90 <__reset+0xfb0ebb90>
8110bc1c:	1025883a 	mov	r18,r2
8110bc20:	003fd706 	br	8110bb80 <__reset+0xfb0ebb80>
8110bc24:	10bfffc4 	addi	r2,r2,-1
8110bc28:	1085883a 	add	r2,r2,r2
8110bc2c:	00e044b4 	movhi	r3,33042
8110bc30:	18e04504 	addi	r3,r3,-32492
8110bc34:	1085883a 	add	r2,r2,r2
8110bc38:	1885883a 	add	r2,r3,r2
8110bc3c:	11800017 	ldw	r6,0(r2)
8110bc40:	000f883a 	mov	r7,zero
8110bc44:	110b5cc0 	call	8110b5cc <__multadd>
8110bc48:	1025883a 	mov	r18,r2
8110bc4c:	003fc706 	br	8110bb6c <__reset+0xfb0ebb6c>
8110bc50:	05000044 	movi	r20,1
8110bc54:	a00b883a 	mov	r5,r20
8110bc58:	9809883a 	mov	r4,r19
8110bc5c:	110b4fc0 	call	8110b4fc <_Balloc>
8110bc60:	1023883a 	mov	r17,r2
8110bc64:	00809c44 	movi	r2,625
8110bc68:	88800515 	stw	r2,20(r17)
8110bc6c:	8d000415 	stw	r20,16(r17)
8110bc70:	9c401215 	stw	r17,72(r19)
8110bc74:	88000015 	stw	zero,0(r17)
8110bc78:	003fc606 	br	8110bb94 <__reset+0xfb0ebb94>

8110bc7c <__lshift>:
8110bc7c:	defff904 	addi	sp,sp,-28
8110bc80:	dd400515 	stw	r21,20(sp)
8110bc84:	dcc00315 	stw	r19,12(sp)
8110bc88:	302bd17a 	srai	r21,r6,5
8110bc8c:	2cc00417 	ldw	r19,16(r5)
8110bc90:	28800217 	ldw	r2,8(r5)
8110bc94:	dd000415 	stw	r20,16(sp)
8110bc98:	ace7883a 	add	r19,r21,r19
8110bc9c:	dc800215 	stw	r18,8(sp)
8110bca0:	dc400115 	stw	r17,4(sp)
8110bca4:	dc000015 	stw	r16,0(sp)
8110bca8:	dfc00615 	stw	ra,24(sp)
8110bcac:	9c000044 	addi	r16,r19,1
8110bcb0:	2823883a 	mov	r17,r5
8110bcb4:	3029883a 	mov	r20,r6
8110bcb8:	2025883a 	mov	r18,r4
8110bcbc:	29400117 	ldw	r5,4(r5)
8110bcc0:	1400030e 	bge	r2,r16,8110bcd0 <__lshift+0x54>
8110bcc4:	1085883a 	add	r2,r2,r2
8110bcc8:	29400044 	addi	r5,r5,1
8110bccc:	143ffd16 	blt	r2,r16,8110bcc4 <__reset+0xfb0ebcc4>
8110bcd0:	9009883a 	mov	r4,r18
8110bcd4:	110b4fc0 	call	8110b4fc <_Balloc>
8110bcd8:	10c00504 	addi	r3,r2,20
8110bcdc:	0540070e 	bge	zero,r21,8110bcfc <__lshift+0x80>
8110bce0:	ad6b883a 	add	r21,r21,r21
8110bce4:	ad6b883a 	add	r21,r21,r21
8110bce8:	1809883a 	mov	r4,r3
8110bcec:	1d47883a 	add	r3,r3,r21
8110bcf0:	20000015 	stw	zero,0(r4)
8110bcf4:	21000104 	addi	r4,r4,4
8110bcf8:	193ffd1e 	bne	r3,r4,8110bcf0 <__reset+0xfb0ebcf0>
8110bcfc:	8a000417 	ldw	r8,16(r17)
8110bd00:	89000504 	addi	r4,r17,20
8110bd04:	a18007cc 	andi	r6,r20,31
8110bd08:	4211883a 	add	r8,r8,r8
8110bd0c:	4211883a 	add	r8,r8,r8
8110bd10:	2211883a 	add	r8,r4,r8
8110bd14:	30002326 	beq	r6,zero,8110bda4 <__lshift+0x128>
8110bd18:	02400804 	movi	r9,32
8110bd1c:	4993c83a 	sub	r9,r9,r6
8110bd20:	000b883a 	mov	r5,zero
8110bd24:	21c00017 	ldw	r7,0(r4)
8110bd28:	1815883a 	mov	r10,r3
8110bd2c:	18c00104 	addi	r3,r3,4
8110bd30:	398e983a 	sll	r7,r7,r6
8110bd34:	21000104 	addi	r4,r4,4
8110bd38:	394ab03a 	or	r5,r7,r5
8110bd3c:	197fff15 	stw	r5,-4(r3)
8110bd40:	217fff17 	ldw	r5,-4(r4)
8110bd44:	2a4ad83a 	srl	r5,r5,r9
8110bd48:	223ff636 	bltu	r4,r8,8110bd24 <__reset+0xfb0ebd24>
8110bd4c:	51400115 	stw	r5,4(r10)
8110bd50:	28001a1e 	bne	r5,zero,8110bdbc <__lshift+0x140>
8110bd54:	843fffc4 	addi	r16,r16,-1
8110bd58:	14000415 	stw	r16,16(r2)
8110bd5c:	88000826 	beq	r17,zero,8110bd80 <__lshift+0x104>
8110bd60:	89000117 	ldw	r4,4(r17)
8110bd64:	90c01317 	ldw	r3,76(r18)
8110bd68:	2109883a 	add	r4,r4,r4
8110bd6c:	2109883a 	add	r4,r4,r4
8110bd70:	1907883a 	add	r3,r3,r4
8110bd74:	19000017 	ldw	r4,0(r3)
8110bd78:	89000015 	stw	r4,0(r17)
8110bd7c:	1c400015 	stw	r17,0(r3)
8110bd80:	dfc00617 	ldw	ra,24(sp)
8110bd84:	dd400517 	ldw	r21,20(sp)
8110bd88:	dd000417 	ldw	r20,16(sp)
8110bd8c:	dcc00317 	ldw	r19,12(sp)
8110bd90:	dc800217 	ldw	r18,8(sp)
8110bd94:	dc400117 	ldw	r17,4(sp)
8110bd98:	dc000017 	ldw	r16,0(sp)
8110bd9c:	dec00704 	addi	sp,sp,28
8110bda0:	f800283a 	ret
8110bda4:	21400017 	ldw	r5,0(r4)
8110bda8:	18c00104 	addi	r3,r3,4
8110bdac:	21000104 	addi	r4,r4,4
8110bdb0:	197fff15 	stw	r5,-4(r3)
8110bdb4:	223ffb36 	bltu	r4,r8,8110bda4 <__reset+0xfb0ebda4>
8110bdb8:	003fe606 	br	8110bd54 <__reset+0xfb0ebd54>
8110bdbc:	9c000084 	addi	r16,r19,2
8110bdc0:	003fe406 	br	8110bd54 <__reset+0xfb0ebd54>

8110bdc4 <__mcmp>:
8110bdc4:	20800417 	ldw	r2,16(r4)
8110bdc8:	28c00417 	ldw	r3,16(r5)
8110bdcc:	10c5c83a 	sub	r2,r2,r3
8110bdd0:	1000111e 	bne	r2,zero,8110be18 <__mcmp+0x54>
8110bdd4:	18c7883a 	add	r3,r3,r3
8110bdd8:	18c7883a 	add	r3,r3,r3
8110bddc:	21000504 	addi	r4,r4,20
8110bde0:	29400504 	addi	r5,r5,20
8110bde4:	20c5883a 	add	r2,r4,r3
8110bde8:	28cb883a 	add	r5,r5,r3
8110bdec:	00000106 	br	8110bdf4 <__mcmp+0x30>
8110bdf0:	20800a2e 	bgeu	r4,r2,8110be1c <__mcmp+0x58>
8110bdf4:	10bfff04 	addi	r2,r2,-4
8110bdf8:	297fff04 	addi	r5,r5,-4
8110bdfc:	11800017 	ldw	r6,0(r2)
8110be00:	28c00017 	ldw	r3,0(r5)
8110be04:	30fffa26 	beq	r6,r3,8110bdf0 <__reset+0xfb0ebdf0>
8110be08:	30c00236 	bltu	r6,r3,8110be14 <__mcmp+0x50>
8110be0c:	00800044 	movi	r2,1
8110be10:	f800283a 	ret
8110be14:	00bfffc4 	movi	r2,-1
8110be18:	f800283a 	ret
8110be1c:	0005883a 	mov	r2,zero
8110be20:	f800283a 	ret

8110be24 <__mdiff>:
8110be24:	28c00417 	ldw	r3,16(r5)
8110be28:	30800417 	ldw	r2,16(r6)
8110be2c:	defffa04 	addi	sp,sp,-24
8110be30:	dcc00315 	stw	r19,12(sp)
8110be34:	dc800215 	stw	r18,8(sp)
8110be38:	dfc00515 	stw	ra,20(sp)
8110be3c:	dd000415 	stw	r20,16(sp)
8110be40:	dc400115 	stw	r17,4(sp)
8110be44:	dc000015 	stw	r16,0(sp)
8110be48:	1887c83a 	sub	r3,r3,r2
8110be4c:	2825883a 	mov	r18,r5
8110be50:	3027883a 	mov	r19,r6
8110be54:	1800141e 	bne	r3,zero,8110bea8 <__mdiff+0x84>
8110be58:	1085883a 	add	r2,r2,r2
8110be5c:	1085883a 	add	r2,r2,r2
8110be60:	2a000504 	addi	r8,r5,20
8110be64:	34000504 	addi	r16,r6,20
8110be68:	4087883a 	add	r3,r8,r2
8110be6c:	8085883a 	add	r2,r16,r2
8110be70:	00000106 	br	8110be78 <__mdiff+0x54>
8110be74:	40c0592e 	bgeu	r8,r3,8110bfdc <__mdiff+0x1b8>
8110be78:	18ffff04 	addi	r3,r3,-4
8110be7c:	10bfff04 	addi	r2,r2,-4
8110be80:	19c00017 	ldw	r7,0(r3)
8110be84:	11400017 	ldw	r5,0(r2)
8110be88:	397ffa26 	beq	r7,r5,8110be74 <__reset+0xfb0ebe74>
8110be8c:	3940592e 	bgeu	r7,r5,8110bff4 <__mdiff+0x1d0>
8110be90:	9005883a 	mov	r2,r18
8110be94:	4023883a 	mov	r17,r8
8110be98:	9825883a 	mov	r18,r19
8110be9c:	05000044 	movi	r20,1
8110bea0:	1027883a 	mov	r19,r2
8110bea4:	00000406 	br	8110beb8 <__mdiff+0x94>
8110bea8:	18005616 	blt	r3,zero,8110c004 <__mdiff+0x1e0>
8110beac:	34400504 	addi	r17,r6,20
8110beb0:	2c000504 	addi	r16,r5,20
8110beb4:	0029883a 	mov	r20,zero
8110beb8:	91400117 	ldw	r5,4(r18)
8110bebc:	110b4fc0 	call	8110b4fc <_Balloc>
8110bec0:	92400417 	ldw	r9,16(r18)
8110bec4:	9b000417 	ldw	r12,16(r19)
8110bec8:	12c00504 	addi	r11,r2,20
8110becc:	4a51883a 	add	r8,r9,r9
8110bed0:	6319883a 	add	r12,r12,r12
8110bed4:	4211883a 	add	r8,r8,r8
8110bed8:	6319883a 	add	r12,r12,r12
8110bedc:	15000315 	stw	r20,12(r2)
8110bee0:	8211883a 	add	r8,r16,r8
8110bee4:	8b19883a 	add	r12,r17,r12
8110bee8:	0007883a 	mov	r3,zero
8110beec:	81400017 	ldw	r5,0(r16)
8110bef0:	89c00017 	ldw	r7,0(r17)
8110bef4:	59800104 	addi	r6,r11,4
8110bef8:	293fffcc 	andi	r4,r5,65535
8110befc:	20c7883a 	add	r3,r4,r3
8110bf00:	393fffcc 	andi	r4,r7,65535
8110bf04:	1909c83a 	sub	r4,r3,r4
8110bf08:	280ad43a 	srli	r5,r5,16
8110bf0c:	380ed43a 	srli	r7,r7,16
8110bf10:	2007d43a 	srai	r3,r4,16
8110bf14:	213fffcc 	andi	r4,r4,65535
8110bf18:	29cbc83a 	sub	r5,r5,r7
8110bf1c:	28c7883a 	add	r3,r5,r3
8110bf20:	180a943a 	slli	r5,r3,16
8110bf24:	8c400104 	addi	r17,r17,4
8110bf28:	84000104 	addi	r16,r16,4
8110bf2c:	2908b03a 	or	r4,r5,r4
8110bf30:	59000015 	stw	r4,0(r11)
8110bf34:	1807d43a 	srai	r3,r3,16
8110bf38:	3015883a 	mov	r10,r6
8110bf3c:	3017883a 	mov	r11,r6
8110bf40:	8b3fea36 	bltu	r17,r12,8110beec <__reset+0xfb0ebeec>
8110bf44:	8200162e 	bgeu	r16,r8,8110bfa0 <__mdiff+0x17c>
8110bf48:	8017883a 	mov	r11,r16
8110bf4c:	59400017 	ldw	r5,0(r11)
8110bf50:	31800104 	addi	r6,r6,4
8110bf54:	5ac00104 	addi	r11,r11,4
8110bf58:	293fffcc 	andi	r4,r5,65535
8110bf5c:	20c7883a 	add	r3,r4,r3
8110bf60:	280ed43a 	srli	r7,r5,16
8110bf64:	180bd43a 	srai	r5,r3,16
8110bf68:	193fffcc 	andi	r4,r3,65535
8110bf6c:	3947883a 	add	r3,r7,r5
8110bf70:	180a943a 	slli	r5,r3,16
8110bf74:	1807d43a 	srai	r3,r3,16
8110bf78:	2908b03a 	or	r4,r5,r4
8110bf7c:	313fff15 	stw	r4,-4(r6)
8110bf80:	5a3ff236 	bltu	r11,r8,8110bf4c <__reset+0xfb0ebf4c>
8110bf84:	0406303a 	nor	r3,zero,r16
8110bf88:	1a07883a 	add	r3,r3,r8
8110bf8c:	1806d0ba 	srli	r3,r3,2
8110bf90:	18c00044 	addi	r3,r3,1
8110bf94:	18c7883a 	add	r3,r3,r3
8110bf98:	18c7883a 	add	r3,r3,r3
8110bf9c:	50d5883a 	add	r10,r10,r3
8110bfa0:	50ffff04 	addi	r3,r10,-4
8110bfa4:	2000041e 	bne	r4,zero,8110bfb8 <__mdiff+0x194>
8110bfa8:	18ffff04 	addi	r3,r3,-4
8110bfac:	19000017 	ldw	r4,0(r3)
8110bfb0:	4a7fffc4 	addi	r9,r9,-1
8110bfb4:	203ffc26 	beq	r4,zero,8110bfa8 <__reset+0xfb0ebfa8>
8110bfb8:	12400415 	stw	r9,16(r2)
8110bfbc:	dfc00517 	ldw	ra,20(sp)
8110bfc0:	dd000417 	ldw	r20,16(sp)
8110bfc4:	dcc00317 	ldw	r19,12(sp)
8110bfc8:	dc800217 	ldw	r18,8(sp)
8110bfcc:	dc400117 	ldw	r17,4(sp)
8110bfd0:	dc000017 	ldw	r16,0(sp)
8110bfd4:	dec00604 	addi	sp,sp,24
8110bfd8:	f800283a 	ret
8110bfdc:	000b883a 	mov	r5,zero
8110bfe0:	110b4fc0 	call	8110b4fc <_Balloc>
8110bfe4:	00c00044 	movi	r3,1
8110bfe8:	10c00415 	stw	r3,16(r2)
8110bfec:	10000515 	stw	zero,20(r2)
8110bff0:	003ff206 	br	8110bfbc <__reset+0xfb0ebfbc>
8110bff4:	8023883a 	mov	r17,r16
8110bff8:	0029883a 	mov	r20,zero
8110bffc:	4021883a 	mov	r16,r8
8110c000:	003fad06 	br	8110beb8 <__reset+0xfb0ebeb8>
8110c004:	9005883a 	mov	r2,r18
8110c008:	94400504 	addi	r17,r18,20
8110c00c:	9c000504 	addi	r16,r19,20
8110c010:	9825883a 	mov	r18,r19
8110c014:	05000044 	movi	r20,1
8110c018:	1027883a 	mov	r19,r2
8110c01c:	003fa606 	br	8110beb8 <__reset+0xfb0ebeb8>

8110c020 <__ulp>:
8110c020:	295ffc2c 	andhi	r5,r5,32752
8110c024:	00bf3034 	movhi	r2,64704
8110c028:	2887883a 	add	r3,r5,r2
8110c02c:	00c0020e 	bge	zero,r3,8110c038 <__ulp+0x18>
8110c030:	0005883a 	mov	r2,zero
8110c034:	f800283a 	ret
8110c038:	00c7c83a 	sub	r3,zero,r3
8110c03c:	1807d53a 	srai	r3,r3,20
8110c040:	008004c4 	movi	r2,19
8110c044:	10c00b0e 	bge	r2,r3,8110c074 <__ulp+0x54>
8110c048:	18bffb04 	addi	r2,r3,-20
8110c04c:	01000784 	movi	r4,30
8110c050:	0007883a 	mov	r3,zero
8110c054:	20800516 	blt	r4,r2,8110c06c <__ulp+0x4c>
8110c058:	010007c4 	movi	r4,31
8110c05c:	2089c83a 	sub	r4,r4,r2
8110c060:	00800044 	movi	r2,1
8110c064:	1104983a 	sll	r2,r2,r4
8110c068:	f800283a 	ret
8110c06c:	00800044 	movi	r2,1
8110c070:	f800283a 	ret
8110c074:	01400234 	movhi	r5,8
8110c078:	28c7d83a 	sra	r3,r5,r3
8110c07c:	0005883a 	mov	r2,zero
8110c080:	f800283a 	ret

8110c084 <__b2d>:
8110c084:	defffa04 	addi	sp,sp,-24
8110c088:	dc000015 	stw	r16,0(sp)
8110c08c:	24000417 	ldw	r16,16(r4)
8110c090:	dc400115 	stw	r17,4(sp)
8110c094:	24400504 	addi	r17,r4,20
8110c098:	8421883a 	add	r16,r16,r16
8110c09c:	8421883a 	add	r16,r16,r16
8110c0a0:	8c21883a 	add	r16,r17,r16
8110c0a4:	dc800215 	stw	r18,8(sp)
8110c0a8:	84bfff17 	ldw	r18,-4(r16)
8110c0ac:	dd000415 	stw	r20,16(sp)
8110c0b0:	dcc00315 	stw	r19,12(sp)
8110c0b4:	9009883a 	mov	r4,r18
8110c0b8:	2829883a 	mov	r20,r5
8110c0bc:	dfc00515 	stw	ra,20(sp)
8110c0c0:	110b7f00 	call	8110b7f0 <__hi0bits>
8110c0c4:	00c00804 	movi	r3,32
8110c0c8:	1889c83a 	sub	r4,r3,r2
8110c0cc:	a1000015 	stw	r4,0(r20)
8110c0d0:	01000284 	movi	r4,10
8110c0d4:	84ffff04 	addi	r19,r16,-4
8110c0d8:	20801216 	blt	r4,r2,8110c124 <__b2d+0xa0>
8110c0dc:	018002c4 	movi	r6,11
8110c0e0:	308dc83a 	sub	r6,r6,r2
8110c0e4:	9186d83a 	srl	r3,r18,r6
8110c0e8:	18cffc34 	orhi	r3,r3,16368
8110c0ec:	8cc0212e 	bgeu	r17,r19,8110c174 <__b2d+0xf0>
8110c0f0:	813ffe17 	ldw	r4,-8(r16)
8110c0f4:	218cd83a 	srl	r6,r4,r6
8110c0f8:	10800544 	addi	r2,r2,21
8110c0fc:	9084983a 	sll	r2,r18,r2
8110c100:	1184b03a 	or	r2,r2,r6
8110c104:	dfc00517 	ldw	ra,20(sp)
8110c108:	dd000417 	ldw	r20,16(sp)
8110c10c:	dcc00317 	ldw	r19,12(sp)
8110c110:	dc800217 	ldw	r18,8(sp)
8110c114:	dc400117 	ldw	r17,4(sp)
8110c118:	dc000017 	ldw	r16,0(sp)
8110c11c:	dec00604 	addi	sp,sp,24
8110c120:	f800283a 	ret
8110c124:	8cc00f2e 	bgeu	r17,r19,8110c164 <__b2d+0xe0>
8110c128:	117ffd44 	addi	r5,r2,-11
8110c12c:	80bffe17 	ldw	r2,-8(r16)
8110c130:	28000e26 	beq	r5,zero,8110c16c <__b2d+0xe8>
8110c134:	1949c83a 	sub	r4,r3,r5
8110c138:	9164983a 	sll	r18,r18,r5
8110c13c:	1106d83a 	srl	r3,r2,r4
8110c140:	81bffe04 	addi	r6,r16,-8
8110c144:	948ffc34 	orhi	r18,r18,16368
8110c148:	90c6b03a 	or	r3,r18,r3
8110c14c:	89800e2e 	bgeu	r17,r6,8110c188 <__b2d+0x104>
8110c150:	81bffd17 	ldw	r6,-12(r16)
8110c154:	1144983a 	sll	r2,r2,r5
8110c158:	310ad83a 	srl	r5,r6,r4
8110c15c:	2884b03a 	or	r2,r5,r2
8110c160:	003fe806 	br	8110c104 <__reset+0xfb0ec104>
8110c164:	10bffd44 	addi	r2,r2,-11
8110c168:	1000041e 	bne	r2,zero,8110c17c <__b2d+0xf8>
8110c16c:	90cffc34 	orhi	r3,r18,16368
8110c170:	003fe406 	br	8110c104 <__reset+0xfb0ec104>
8110c174:	000d883a 	mov	r6,zero
8110c178:	003fdf06 	br	8110c0f8 <__reset+0xfb0ec0f8>
8110c17c:	90a4983a 	sll	r18,r18,r2
8110c180:	0005883a 	mov	r2,zero
8110c184:	003ff906 	br	8110c16c <__reset+0xfb0ec16c>
8110c188:	1144983a 	sll	r2,r2,r5
8110c18c:	003fdd06 	br	8110c104 <__reset+0xfb0ec104>

8110c190 <__d2b>:
8110c190:	defff804 	addi	sp,sp,-32
8110c194:	dc000215 	stw	r16,8(sp)
8110c198:	3021883a 	mov	r16,r6
8110c19c:	dc400315 	stw	r17,12(sp)
8110c1a0:	8022907a 	slli	r17,r16,1
8110c1a4:	dd000615 	stw	r20,24(sp)
8110c1a8:	2829883a 	mov	r20,r5
8110c1ac:	01400044 	movi	r5,1
8110c1b0:	dcc00515 	stw	r19,20(sp)
8110c1b4:	dc800415 	stw	r18,16(sp)
8110c1b8:	dfc00715 	stw	ra,28(sp)
8110c1bc:	3825883a 	mov	r18,r7
8110c1c0:	8822d57a 	srli	r17,r17,21
8110c1c4:	110b4fc0 	call	8110b4fc <_Balloc>
8110c1c8:	1027883a 	mov	r19,r2
8110c1cc:	00800434 	movhi	r2,16
8110c1d0:	10bfffc4 	addi	r2,r2,-1
8110c1d4:	808c703a 	and	r6,r16,r2
8110c1d8:	88000126 	beq	r17,zero,8110c1e0 <__d2b+0x50>
8110c1dc:	31800434 	orhi	r6,r6,16
8110c1e0:	d9800015 	stw	r6,0(sp)
8110c1e4:	a0002426 	beq	r20,zero,8110c278 <__d2b+0xe8>
8110c1e8:	d9000104 	addi	r4,sp,4
8110c1ec:	dd000115 	stw	r20,4(sp)
8110c1f0:	110b8580 	call	8110b858 <__lo0bits>
8110c1f4:	d8c00017 	ldw	r3,0(sp)
8110c1f8:	10002f1e 	bne	r2,zero,8110c2b8 <__d2b+0x128>
8110c1fc:	d9000117 	ldw	r4,4(sp)
8110c200:	99000515 	stw	r4,20(r19)
8110c204:	1821003a 	cmpeq	r16,r3,zero
8110c208:	01000084 	movi	r4,2
8110c20c:	2421c83a 	sub	r16,r4,r16
8110c210:	98c00615 	stw	r3,24(r19)
8110c214:	9c000415 	stw	r16,16(r19)
8110c218:	88001f1e 	bne	r17,zero,8110c298 <__d2b+0x108>
8110c21c:	10bef384 	addi	r2,r2,-1074
8110c220:	90800015 	stw	r2,0(r18)
8110c224:	00900034 	movhi	r2,16384
8110c228:	10bfffc4 	addi	r2,r2,-1
8110c22c:	8085883a 	add	r2,r16,r2
8110c230:	1085883a 	add	r2,r2,r2
8110c234:	1085883a 	add	r2,r2,r2
8110c238:	9885883a 	add	r2,r19,r2
8110c23c:	11000517 	ldw	r4,20(r2)
8110c240:	8020917a 	slli	r16,r16,5
8110c244:	110b7f00 	call	8110b7f0 <__hi0bits>
8110c248:	d8c00817 	ldw	r3,32(sp)
8110c24c:	8085c83a 	sub	r2,r16,r2
8110c250:	18800015 	stw	r2,0(r3)
8110c254:	9805883a 	mov	r2,r19
8110c258:	dfc00717 	ldw	ra,28(sp)
8110c25c:	dd000617 	ldw	r20,24(sp)
8110c260:	dcc00517 	ldw	r19,20(sp)
8110c264:	dc800417 	ldw	r18,16(sp)
8110c268:	dc400317 	ldw	r17,12(sp)
8110c26c:	dc000217 	ldw	r16,8(sp)
8110c270:	dec00804 	addi	sp,sp,32
8110c274:	f800283a 	ret
8110c278:	d809883a 	mov	r4,sp
8110c27c:	110b8580 	call	8110b858 <__lo0bits>
8110c280:	d8c00017 	ldw	r3,0(sp)
8110c284:	04000044 	movi	r16,1
8110c288:	9c000415 	stw	r16,16(r19)
8110c28c:	98c00515 	stw	r3,20(r19)
8110c290:	10800804 	addi	r2,r2,32
8110c294:	883fe126 	beq	r17,zero,8110c21c <__reset+0xfb0ec21c>
8110c298:	00c00d44 	movi	r3,53
8110c29c:	8c7ef344 	addi	r17,r17,-1075
8110c2a0:	88a3883a 	add	r17,r17,r2
8110c2a4:	1885c83a 	sub	r2,r3,r2
8110c2a8:	d8c00817 	ldw	r3,32(sp)
8110c2ac:	94400015 	stw	r17,0(r18)
8110c2b0:	18800015 	stw	r2,0(r3)
8110c2b4:	003fe706 	br	8110c254 <__reset+0xfb0ec254>
8110c2b8:	01000804 	movi	r4,32
8110c2bc:	2089c83a 	sub	r4,r4,r2
8110c2c0:	1908983a 	sll	r4,r3,r4
8110c2c4:	d9400117 	ldw	r5,4(sp)
8110c2c8:	1886d83a 	srl	r3,r3,r2
8110c2cc:	2148b03a 	or	r4,r4,r5
8110c2d0:	99000515 	stw	r4,20(r19)
8110c2d4:	d8c00015 	stw	r3,0(sp)
8110c2d8:	003fca06 	br	8110c204 <__reset+0xfb0ec204>

8110c2dc <__ratio>:
8110c2dc:	defff904 	addi	sp,sp,-28
8110c2e0:	dc400315 	stw	r17,12(sp)
8110c2e4:	2823883a 	mov	r17,r5
8110c2e8:	d9400104 	addi	r5,sp,4
8110c2ec:	dfc00615 	stw	ra,24(sp)
8110c2f0:	dcc00515 	stw	r19,20(sp)
8110c2f4:	dc800415 	stw	r18,16(sp)
8110c2f8:	2027883a 	mov	r19,r4
8110c2fc:	dc000215 	stw	r16,8(sp)
8110c300:	110c0840 	call	8110c084 <__b2d>
8110c304:	d80b883a 	mov	r5,sp
8110c308:	8809883a 	mov	r4,r17
8110c30c:	1025883a 	mov	r18,r2
8110c310:	1821883a 	mov	r16,r3
8110c314:	110c0840 	call	8110c084 <__b2d>
8110c318:	8a000417 	ldw	r8,16(r17)
8110c31c:	99000417 	ldw	r4,16(r19)
8110c320:	d9400117 	ldw	r5,4(sp)
8110c324:	2209c83a 	sub	r4,r4,r8
8110c328:	2010917a 	slli	r8,r4,5
8110c32c:	d9000017 	ldw	r4,0(sp)
8110c330:	2909c83a 	sub	r4,r5,r4
8110c334:	4109883a 	add	r4,r8,r4
8110c338:	01000e0e 	bge	zero,r4,8110c374 <__ratio+0x98>
8110c33c:	2008953a 	slli	r4,r4,20
8110c340:	2421883a 	add	r16,r4,r16
8110c344:	100d883a 	mov	r6,r2
8110c348:	180f883a 	mov	r7,r3
8110c34c:	9009883a 	mov	r4,r18
8110c350:	800b883a 	mov	r5,r16
8110c354:	11103300 	call	81110330 <__divdf3>
8110c358:	dfc00617 	ldw	ra,24(sp)
8110c35c:	dcc00517 	ldw	r19,20(sp)
8110c360:	dc800417 	ldw	r18,16(sp)
8110c364:	dc400317 	ldw	r17,12(sp)
8110c368:	dc000217 	ldw	r16,8(sp)
8110c36c:	dec00704 	addi	sp,sp,28
8110c370:	f800283a 	ret
8110c374:	2008953a 	slli	r4,r4,20
8110c378:	1907c83a 	sub	r3,r3,r4
8110c37c:	003ff106 	br	8110c344 <__reset+0xfb0ec344>

8110c380 <_mprec_log10>:
8110c380:	defffe04 	addi	sp,sp,-8
8110c384:	dc000015 	stw	r16,0(sp)
8110c388:	dfc00115 	stw	ra,4(sp)
8110c38c:	008005c4 	movi	r2,23
8110c390:	2021883a 	mov	r16,r4
8110c394:	11000d0e 	bge	r2,r4,8110c3cc <_mprec_log10+0x4c>
8110c398:	0005883a 	mov	r2,zero
8110c39c:	00cffc34 	movhi	r3,16368
8110c3a0:	843fffc4 	addi	r16,r16,-1
8110c3a4:	000d883a 	mov	r6,zero
8110c3a8:	01d00934 	movhi	r7,16420
8110c3ac:	1009883a 	mov	r4,r2
8110c3b0:	180b883a 	mov	r5,r3
8110c3b4:	1104c100 	call	81104c10 <__muldf3>
8110c3b8:	803ff91e 	bne	r16,zero,8110c3a0 <__reset+0xfb0ec3a0>
8110c3bc:	dfc00117 	ldw	ra,4(sp)
8110c3c0:	dc000017 	ldw	r16,0(sp)
8110c3c4:	dec00204 	addi	sp,sp,8
8110c3c8:	f800283a 	ret
8110c3cc:	202090fa 	slli	r16,r4,3
8110c3d0:	00a044b4 	movhi	r2,33042
8110c3d4:	10a05c04 	addi	r2,r2,-32400
8110c3d8:	1421883a 	add	r16,r2,r16
8110c3dc:	80800017 	ldw	r2,0(r16)
8110c3e0:	80c00117 	ldw	r3,4(r16)
8110c3e4:	dfc00117 	ldw	ra,4(sp)
8110c3e8:	dc000017 	ldw	r16,0(sp)
8110c3ec:	dec00204 	addi	sp,sp,8
8110c3f0:	f800283a 	ret

8110c3f4 <__copybits>:
8110c3f4:	297fffc4 	addi	r5,r5,-1
8110c3f8:	280fd17a 	srai	r7,r5,5
8110c3fc:	30c00417 	ldw	r3,16(r6)
8110c400:	30800504 	addi	r2,r6,20
8110c404:	39c00044 	addi	r7,r7,1
8110c408:	18c7883a 	add	r3,r3,r3
8110c40c:	39cf883a 	add	r7,r7,r7
8110c410:	18c7883a 	add	r3,r3,r3
8110c414:	39cf883a 	add	r7,r7,r7
8110c418:	10c7883a 	add	r3,r2,r3
8110c41c:	21cf883a 	add	r7,r4,r7
8110c420:	10c00d2e 	bgeu	r2,r3,8110c458 <__copybits+0x64>
8110c424:	200b883a 	mov	r5,r4
8110c428:	12000017 	ldw	r8,0(r2)
8110c42c:	29400104 	addi	r5,r5,4
8110c430:	10800104 	addi	r2,r2,4
8110c434:	2a3fff15 	stw	r8,-4(r5)
8110c438:	10fffb36 	bltu	r2,r3,8110c428 <__reset+0xfb0ec428>
8110c43c:	1985c83a 	sub	r2,r3,r6
8110c440:	10bffac4 	addi	r2,r2,-21
8110c444:	1004d0ba 	srli	r2,r2,2
8110c448:	10800044 	addi	r2,r2,1
8110c44c:	1085883a 	add	r2,r2,r2
8110c450:	1085883a 	add	r2,r2,r2
8110c454:	2089883a 	add	r4,r4,r2
8110c458:	21c0032e 	bgeu	r4,r7,8110c468 <__copybits+0x74>
8110c45c:	20000015 	stw	zero,0(r4)
8110c460:	21000104 	addi	r4,r4,4
8110c464:	21fffd36 	bltu	r4,r7,8110c45c <__reset+0xfb0ec45c>
8110c468:	f800283a 	ret

8110c46c <__any_on>:
8110c46c:	20c00417 	ldw	r3,16(r4)
8110c470:	2805d17a 	srai	r2,r5,5
8110c474:	21000504 	addi	r4,r4,20
8110c478:	18800d0e 	bge	r3,r2,8110c4b0 <__any_on+0x44>
8110c47c:	18c7883a 	add	r3,r3,r3
8110c480:	18c7883a 	add	r3,r3,r3
8110c484:	20c7883a 	add	r3,r4,r3
8110c488:	20c0192e 	bgeu	r4,r3,8110c4f0 <__any_on+0x84>
8110c48c:	18bfff17 	ldw	r2,-4(r3)
8110c490:	18ffff04 	addi	r3,r3,-4
8110c494:	1000041e 	bne	r2,zero,8110c4a8 <__any_on+0x3c>
8110c498:	20c0142e 	bgeu	r4,r3,8110c4ec <__any_on+0x80>
8110c49c:	18ffff04 	addi	r3,r3,-4
8110c4a0:	19400017 	ldw	r5,0(r3)
8110c4a4:	283ffc26 	beq	r5,zero,8110c498 <__reset+0xfb0ec498>
8110c4a8:	00800044 	movi	r2,1
8110c4ac:	f800283a 	ret
8110c4b0:	10c00a0e 	bge	r2,r3,8110c4dc <__any_on+0x70>
8110c4b4:	1085883a 	add	r2,r2,r2
8110c4b8:	1085883a 	add	r2,r2,r2
8110c4bc:	294007cc 	andi	r5,r5,31
8110c4c0:	2087883a 	add	r3,r4,r2
8110c4c4:	283ff026 	beq	r5,zero,8110c488 <__reset+0xfb0ec488>
8110c4c8:	19800017 	ldw	r6,0(r3)
8110c4cc:	3144d83a 	srl	r2,r6,r5
8110c4d0:	114a983a 	sll	r5,r2,r5
8110c4d4:	317ff41e 	bne	r6,r5,8110c4a8 <__reset+0xfb0ec4a8>
8110c4d8:	003feb06 	br	8110c488 <__reset+0xfb0ec488>
8110c4dc:	1085883a 	add	r2,r2,r2
8110c4e0:	1085883a 	add	r2,r2,r2
8110c4e4:	2087883a 	add	r3,r4,r2
8110c4e8:	003fe706 	br	8110c488 <__reset+0xfb0ec488>
8110c4ec:	f800283a 	ret
8110c4f0:	0005883a 	mov	r2,zero
8110c4f4:	f800283a 	ret

8110c4f8 <_putc_r>:
8110c4f8:	defffc04 	addi	sp,sp,-16
8110c4fc:	dc000215 	stw	r16,8(sp)
8110c500:	dfc00315 	stw	ra,12(sp)
8110c504:	2021883a 	mov	r16,r4
8110c508:	20000226 	beq	r4,zero,8110c514 <_putc_r+0x1c>
8110c50c:	20800e17 	ldw	r2,56(r4)
8110c510:	10001b26 	beq	r2,zero,8110c580 <_putc_r+0x88>
8110c514:	30800217 	ldw	r2,8(r6)
8110c518:	10bfffc4 	addi	r2,r2,-1
8110c51c:	30800215 	stw	r2,8(r6)
8110c520:	10000a16 	blt	r2,zero,8110c54c <_putc_r+0x54>
8110c524:	30800017 	ldw	r2,0(r6)
8110c528:	11400005 	stb	r5,0(r2)
8110c52c:	30800017 	ldw	r2,0(r6)
8110c530:	10c00044 	addi	r3,r2,1
8110c534:	30c00015 	stw	r3,0(r6)
8110c538:	10800003 	ldbu	r2,0(r2)
8110c53c:	dfc00317 	ldw	ra,12(sp)
8110c540:	dc000217 	ldw	r16,8(sp)
8110c544:	dec00404 	addi	sp,sp,16
8110c548:	f800283a 	ret
8110c54c:	30c00617 	ldw	r3,24(r6)
8110c550:	10c00616 	blt	r2,r3,8110c56c <_putc_r+0x74>
8110c554:	30800017 	ldw	r2,0(r6)
8110c558:	00c00284 	movi	r3,10
8110c55c:	11400005 	stb	r5,0(r2)
8110c560:	30800017 	ldw	r2,0(r6)
8110c564:	11400003 	ldbu	r5,0(r2)
8110c568:	28fff11e 	bne	r5,r3,8110c530 <__reset+0xfb0ec530>
8110c56c:	8009883a 	mov	r4,r16
8110c570:	dfc00317 	ldw	ra,12(sp)
8110c574:	dc000217 	ldw	r16,8(sp)
8110c578:	dec00404 	addi	sp,sp,16
8110c57c:	110e4ec1 	jmpi	8110e4ec <__swbuf_r>
8110c580:	d9400015 	stw	r5,0(sp)
8110c584:	d9800115 	stw	r6,4(sp)
8110c588:	1109c280 	call	81109c28 <__sinit>
8110c58c:	d9800117 	ldw	r6,4(sp)
8110c590:	d9400017 	ldw	r5,0(sp)
8110c594:	003fdf06 	br	8110c514 <__reset+0xfb0ec514>

8110c598 <putc>:
8110c598:	00a044b4 	movhi	r2,33042
8110c59c:	defffc04 	addi	sp,sp,-16
8110c5a0:	10a82a04 	addi	r2,r2,-24408
8110c5a4:	dc000115 	stw	r16,4(sp)
8110c5a8:	14000017 	ldw	r16,0(r2)
8110c5ac:	dc400215 	stw	r17,8(sp)
8110c5b0:	dfc00315 	stw	ra,12(sp)
8110c5b4:	2023883a 	mov	r17,r4
8110c5b8:	80000226 	beq	r16,zero,8110c5c4 <putc+0x2c>
8110c5bc:	80800e17 	ldw	r2,56(r16)
8110c5c0:	10001a26 	beq	r2,zero,8110c62c <putc+0x94>
8110c5c4:	28800217 	ldw	r2,8(r5)
8110c5c8:	10bfffc4 	addi	r2,r2,-1
8110c5cc:	28800215 	stw	r2,8(r5)
8110c5d0:	10000b16 	blt	r2,zero,8110c600 <putc+0x68>
8110c5d4:	28800017 	ldw	r2,0(r5)
8110c5d8:	14400005 	stb	r17,0(r2)
8110c5dc:	28800017 	ldw	r2,0(r5)
8110c5e0:	10c00044 	addi	r3,r2,1
8110c5e4:	28c00015 	stw	r3,0(r5)
8110c5e8:	10800003 	ldbu	r2,0(r2)
8110c5ec:	dfc00317 	ldw	ra,12(sp)
8110c5f0:	dc400217 	ldw	r17,8(sp)
8110c5f4:	dc000117 	ldw	r16,4(sp)
8110c5f8:	dec00404 	addi	sp,sp,16
8110c5fc:	f800283a 	ret
8110c600:	28c00617 	ldw	r3,24(r5)
8110c604:	10c00e16 	blt	r2,r3,8110c640 <putc+0xa8>
8110c608:	28800017 	ldw	r2,0(r5)
8110c60c:	01000284 	movi	r4,10
8110c610:	14400005 	stb	r17,0(r2)
8110c614:	28800017 	ldw	r2,0(r5)
8110c618:	10c00003 	ldbu	r3,0(r2)
8110c61c:	193ff01e 	bne	r3,r4,8110c5e0 <__reset+0xfb0ec5e0>
8110c620:	280d883a 	mov	r6,r5
8110c624:	180b883a 	mov	r5,r3
8110c628:	00000706 	br	8110c648 <putc+0xb0>
8110c62c:	8009883a 	mov	r4,r16
8110c630:	d9400015 	stw	r5,0(sp)
8110c634:	1109c280 	call	81109c28 <__sinit>
8110c638:	d9400017 	ldw	r5,0(sp)
8110c63c:	003fe106 	br	8110c5c4 <__reset+0xfb0ec5c4>
8110c640:	280d883a 	mov	r6,r5
8110c644:	880b883a 	mov	r5,r17
8110c648:	8009883a 	mov	r4,r16
8110c64c:	dfc00317 	ldw	ra,12(sp)
8110c650:	dc400217 	ldw	r17,8(sp)
8110c654:	dc000117 	ldw	r16,4(sp)
8110c658:	dec00404 	addi	sp,sp,16
8110c65c:	110e4ec1 	jmpi	8110e4ec <__swbuf_r>

8110c660 <_realloc_r>:
8110c660:	defff604 	addi	sp,sp,-40
8110c664:	dc800215 	stw	r18,8(sp)
8110c668:	dfc00915 	stw	ra,36(sp)
8110c66c:	df000815 	stw	fp,32(sp)
8110c670:	ddc00715 	stw	r23,28(sp)
8110c674:	dd800615 	stw	r22,24(sp)
8110c678:	dd400515 	stw	r21,20(sp)
8110c67c:	dd000415 	stw	r20,16(sp)
8110c680:	dcc00315 	stw	r19,12(sp)
8110c684:	dc400115 	stw	r17,4(sp)
8110c688:	dc000015 	stw	r16,0(sp)
8110c68c:	3025883a 	mov	r18,r6
8110c690:	2800b726 	beq	r5,zero,8110c970 <_realloc_r+0x310>
8110c694:	282b883a 	mov	r21,r5
8110c698:	2029883a 	mov	r20,r4
8110c69c:	1111e200 	call	81111e20 <__malloc_lock>
8110c6a0:	a8bfff17 	ldw	r2,-4(r21)
8110c6a4:	043fff04 	movi	r16,-4
8110c6a8:	90c002c4 	addi	r3,r18,11
8110c6ac:	01000584 	movi	r4,22
8110c6b0:	acfffe04 	addi	r19,r21,-8
8110c6b4:	1420703a 	and	r16,r2,r16
8110c6b8:	20c0332e 	bgeu	r4,r3,8110c788 <_realloc_r+0x128>
8110c6bc:	047ffe04 	movi	r17,-8
8110c6c0:	1c62703a 	and	r17,r3,r17
8110c6c4:	8807883a 	mov	r3,r17
8110c6c8:	88005816 	blt	r17,zero,8110c82c <_realloc_r+0x1cc>
8110c6cc:	8c805736 	bltu	r17,r18,8110c82c <_realloc_r+0x1cc>
8110c6d0:	80c0300e 	bge	r16,r3,8110c794 <_realloc_r+0x134>
8110c6d4:	072044b4 	movhi	fp,33042
8110c6d8:	e7225d04 	addi	fp,fp,-30348
8110c6dc:	e1c00217 	ldw	r7,8(fp)
8110c6e0:	9c09883a 	add	r4,r19,r16
8110c6e4:	22000117 	ldw	r8,4(r4)
8110c6e8:	21c06326 	beq	r4,r7,8110c878 <_realloc_r+0x218>
8110c6ec:	017fff84 	movi	r5,-2
8110c6f0:	414a703a 	and	r5,r8,r5
8110c6f4:	214b883a 	add	r5,r4,r5
8110c6f8:	29800117 	ldw	r6,4(r5)
8110c6fc:	3180004c 	andi	r6,r6,1
8110c700:	30003f26 	beq	r6,zero,8110c800 <_realloc_r+0x1a0>
8110c704:	1080004c 	andi	r2,r2,1
8110c708:	10008326 	beq	r2,zero,8110c918 <_realloc_r+0x2b8>
8110c70c:	900b883a 	mov	r5,r18
8110c710:	a009883a 	mov	r4,r20
8110c714:	110a9880 	call	8110a988 <_malloc_r>
8110c718:	1025883a 	mov	r18,r2
8110c71c:	10011e26 	beq	r2,zero,8110cb98 <_realloc_r+0x538>
8110c720:	a93fff17 	ldw	r4,-4(r21)
8110c724:	10fffe04 	addi	r3,r2,-8
8110c728:	00bfff84 	movi	r2,-2
8110c72c:	2084703a 	and	r2,r4,r2
8110c730:	9885883a 	add	r2,r19,r2
8110c734:	1880ee26 	beq	r3,r2,8110caf0 <_realloc_r+0x490>
8110c738:	81bfff04 	addi	r6,r16,-4
8110c73c:	00800904 	movi	r2,36
8110c740:	1180b836 	bltu	r2,r6,8110ca24 <_realloc_r+0x3c4>
8110c744:	00c004c4 	movi	r3,19
8110c748:	19809636 	bltu	r3,r6,8110c9a4 <_realloc_r+0x344>
8110c74c:	9005883a 	mov	r2,r18
8110c750:	a807883a 	mov	r3,r21
8110c754:	19000017 	ldw	r4,0(r3)
8110c758:	11000015 	stw	r4,0(r2)
8110c75c:	19000117 	ldw	r4,4(r3)
8110c760:	11000115 	stw	r4,4(r2)
8110c764:	18c00217 	ldw	r3,8(r3)
8110c768:	10c00215 	stw	r3,8(r2)
8110c76c:	a80b883a 	mov	r5,r21
8110c770:	a009883a 	mov	r4,r20
8110c774:	1109d9c0 	call	81109d9c <_free_r>
8110c778:	a009883a 	mov	r4,r20
8110c77c:	1111e440 	call	81111e44 <__malloc_unlock>
8110c780:	9005883a 	mov	r2,r18
8110c784:	00001206 	br	8110c7d0 <_realloc_r+0x170>
8110c788:	00c00404 	movi	r3,16
8110c78c:	1823883a 	mov	r17,r3
8110c790:	003fce06 	br	8110c6cc <__reset+0xfb0ec6cc>
8110c794:	a825883a 	mov	r18,r21
8110c798:	8445c83a 	sub	r2,r16,r17
8110c79c:	00c003c4 	movi	r3,15
8110c7a0:	18802636 	bltu	r3,r2,8110c83c <_realloc_r+0x1dc>
8110c7a4:	99800117 	ldw	r6,4(r19)
8110c7a8:	9c07883a 	add	r3,r19,r16
8110c7ac:	3180004c 	andi	r6,r6,1
8110c7b0:	3420b03a 	or	r16,r6,r16
8110c7b4:	9c000115 	stw	r16,4(r19)
8110c7b8:	18800117 	ldw	r2,4(r3)
8110c7bc:	10800054 	ori	r2,r2,1
8110c7c0:	18800115 	stw	r2,4(r3)
8110c7c4:	a009883a 	mov	r4,r20
8110c7c8:	1111e440 	call	81111e44 <__malloc_unlock>
8110c7cc:	9005883a 	mov	r2,r18
8110c7d0:	dfc00917 	ldw	ra,36(sp)
8110c7d4:	df000817 	ldw	fp,32(sp)
8110c7d8:	ddc00717 	ldw	r23,28(sp)
8110c7dc:	dd800617 	ldw	r22,24(sp)
8110c7e0:	dd400517 	ldw	r21,20(sp)
8110c7e4:	dd000417 	ldw	r20,16(sp)
8110c7e8:	dcc00317 	ldw	r19,12(sp)
8110c7ec:	dc800217 	ldw	r18,8(sp)
8110c7f0:	dc400117 	ldw	r17,4(sp)
8110c7f4:	dc000017 	ldw	r16,0(sp)
8110c7f8:	dec00a04 	addi	sp,sp,40
8110c7fc:	f800283a 	ret
8110c800:	017fff04 	movi	r5,-4
8110c804:	414a703a 	and	r5,r8,r5
8110c808:	814d883a 	add	r6,r16,r5
8110c80c:	30c01f16 	blt	r6,r3,8110c88c <_realloc_r+0x22c>
8110c810:	20800317 	ldw	r2,12(r4)
8110c814:	20c00217 	ldw	r3,8(r4)
8110c818:	a825883a 	mov	r18,r21
8110c81c:	3021883a 	mov	r16,r6
8110c820:	18800315 	stw	r2,12(r3)
8110c824:	10c00215 	stw	r3,8(r2)
8110c828:	003fdb06 	br	8110c798 <__reset+0xfb0ec798>
8110c82c:	00800304 	movi	r2,12
8110c830:	a0800015 	stw	r2,0(r20)
8110c834:	0005883a 	mov	r2,zero
8110c838:	003fe506 	br	8110c7d0 <__reset+0xfb0ec7d0>
8110c83c:	98c00117 	ldw	r3,4(r19)
8110c840:	9c4b883a 	add	r5,r19,r17
8110c844:	11000054 	ori	r4,r2,1
8110c848:	18c0004c 	andi	r3,r3,1
8110c84c:	1c62b03a 	or	r17,r3,r17
8110c850:	9c400115 	stw	r17,4(r19)
8110c854:	29000115 	stw	r4,4(r5)
8110c858:	2885883a 	add	r2,r5,r2
8110c85c:	10c00117 	ldw	r3,4(r2)
8110c860:	29400204 	addi	r5,r5,8
8110c864:	a009883a 	mov	r4,r20
8110c868:	18c00054 	ori	r3,r3,1
8110c86c:	10c00115 	stw	r3,4(r2)
8110c870:	1109d9c0 	call	81109d9c <_free_r>
8110c874:	003fd306 	br	8110c7c4 <__reset+0xfb0ec7c4>
8110c878:	017fff04 	movi	r5,-4
8110c87c:	414a703a 	and	r5,r8,r5
8110c880:	89800404 	addi	r6,r17,16
8110c884:	8151883a 	add	r8,r16,r5
8110c888:	4180590e 	bge	r8,r6,8110c9f0 <_realloc_r+0x390>
8110c88c:	1080004c 	andi	r2,r2,1
8110c890:	103f9e1e 	bne	r2,zero,8110c70c <__reset+0xfb0ec70c>
8110c894:	adbffe17 	ldw	r22,-8(r21)
8110c898:	00bfff04 	movi	r2,-4
8110c89c:	9dadc83a 	sub	r22,r19,r22
8110c8a0:	b1800117 	ldw	r6,4(r22)
8110c8a4:	3084703a 	and	r2,r6,r2
8110c8a8:	20002026 	beq	r4,zero,8110c92c <_realloc_r+0x2cc>
8110c8ac:	80af883a 	add	r23,r16,r2
8110c8b0:	b96f883a 	add	r23,r23,r5
8110c8b4:	21c05f26 	beq	r4,r7,8110ca34 <_realloc_r+0x3d4>
8110c8b8:	b8c01c16 	blt	r23,r3,8110c92c <_realloc_r+0x2cc>
8110c8bc:	20800317 	ldw	r2,12(r4)
8110c8c0:	20c00217 	ldw	r3,8(r4)
8110c8c4:	81bfff04 	addi	r6,r16,-4
8110c8c8:	01000904 	movi	r4,36
8110c8cc:	18800315 	stw	r2,12(r3)
8110c8d0:	10c00215 	stw	r3,8(r2)
8110c8d4:	b0c00217 	ldw	r3,8(r22)
8110c8d8:	b0800317 	ldw	r2,12(r22)
8110c8dc:	b4800204 	addi	r18,r22,8
8110c8e0:	18800315 	stw	r2,12(r3)
8110c8e4:	10c00215 	stw	r3,8(r2)
8110c8e8:	21801b36 	bltu	r4,r6,8110c958 <_realloc_r+0x2f8>
8110c8ec:	008004c4 	movi	r2,19
8110c8f0:	1180352e 	bgeu	r2,r6,8110c9c8 <_realloc_r+0x368>
8110c8f4:	a8800017 	ldw	r2,0(r21)
8110c8f8:	b0800215 	stw	r2,8(r22)
8110c8fc:	a8800117 	ldw	r2,4(r21)
8110c900:	b0800315 	stw	r2,12(r22)
8110c904:	008006c4 	movi	r2,27
8110c908:	11807f36 	bltu	r2,r6,8110cb08 <_realloc_r+0x4a8>
8110c90c:	b0800404 	addi	r2,r22,16
8110c910:	ad400204 	addi	r21,r21,8
8110c914:	00002d06 	br	8110c9cc <_realloc_r+0x36c>
8110c918:	adbffe17 	ldw	r22,-8(r21)
8110c91c:	00bfff04 	movi	r2,-4
8110c920:	9dadc83a 	sub	r22,r19,r22
8110c924:	b1000117 	ldw	r4,4(r22)
8110c928:	2084703a 	and	r2,r4,r2
8110c92c:	b03f7726 	beq	r22,zero,8110c70c <__reset+0xfb0ec70c>
8110c930:	80af883a 	add	r23,r16,r2
8110c934:	b8ff7516 	blt	r23,r3,8110c70c <__reset+0xfb0ec70c>
8110c938:	b0800317 	ldw	r2,12(r22)
8110c93c:	b0c00217 	ldw	r3,8(r22)
8110c940:	81bfff04 	addi	r6,r16,-4
8110c944:	01000904 	movi	r4,36
8110c948:	18800315 	stw	r2,12(r3)
8110c94c:	10c00215 	stw	r3,8(r2)
8110c950:	b4800204 	addi	r18,r22,8
8110c954:	21bfe52e 	bgeu	r4,r6,8110c8ec <__reset+0xfb0ec8ec>
8110c958:	a80b883a 	mov	r5,r21
8110c95c:	9009883a 	mov	r4,r18
8110c960:	110b2780 	call	8110b278 <memmove>
8110c964:	b821883a 	mov	r16,r23
8110c968:	b027883a 	mov	r19,r22
8110c96c:	003f8a06 	br	8110c798 <__reset+0xfb0ec798>
8110c970:	300b883a 	mov	r5,r6
8110c974:	dfc00917 	ldw	ra,36(sp)
8110c978:	df000817 	ldw	fp,32(sp)
8110c97c:	ddc00717 	ldw	r23,28(sp)
8110c980:	dd800617 	ldw	r22,24(sp)
8110c984:	dd400517 	ldw	r21,20(sp)
8110c988:	dd000417 	ldw	r20,16(sp)
8110c98c:	dcc00317 	ldw	r19,12(sp)
8110c990:	dc800217 	ldw	r18,8(sp)
8110c994:	dc400117 	ldw	r17,4(sp)
8110c998:	dc000017 	ldw	r16,0(sp)
8110c99c:	dec00a04 	addi	sp,sp,40
8110c9a0:	110a9881 	jmpi	8110a988 <_malloc_r>
8110c9a4:	a8c00017 	ldw	r3,0(r21)
8110c9a8:	90c00015 	stw	r3,0(r18)
8110c9ac:	a8c00117 	ldw	r3,4(r21)
8110c9b0:	90c00115 	stw	r3,4(r18)
8110c9b4:	00c006c4 	movi	r3,27
8110c9b8:	19804536 	bltu	r3,r6,8110cad0 <_realloc_r+0x470>
8110c9bc:	90800204 	addi	r2,r18,8
8110c9c0:	a8c00204 	addi	r3,r21,8
8110c9c4:	003f6306 	br	8110c754 <__reset+0xfb0ec754>
8110c9c8:	9005883a 	mov	r2,r18
8110c9cc:	a8c00017 	ldw	r3,0(r21)
8110c9d0:	b821883a 	mov	r16,r23
8110c9d4:	b027883a 	mov	r19,r22
8110c9d8:	10c00015 	stw	r3,0(r2)
8110c9dc:	a8c00117 	ldw	r3,4(r21)
8110c9e0:	10c00115 	stw	r3,4(r2)
8110c9e4:	a8c00217 	ldw	r3,8(r21)
8110c9e8:	10c00215 	stw	r3,8(r2)
8110c9ec:	003f6a06 	br	8110c798 <__reset+0xfb0ec798>
8110c9f0:	9c67883a 	add	r19,r19,r17
8110c9f4:	4445c83a 	sub	r2,r8,r17
8110c9f8:	e4c00215 	stw	r19,8(fp)
8110c9fc:	10800054 	ori	r2,r2,1
8110ca00:	98800115 	stw	r2,4(r19)
8110ca04:	a8bfff17 	ldw	r2,-4(r21)
8110ca08:	a009883a 	mov	r4,r20
8110ca0c:	1080004c 	andi	r2,r2,1
8110ca10:	1462b03a 	or	r17,r2,r17
8110ca14:	ac7fff15 	stw	r17,-4(r21)
8110ca18:	1111e440 	call	81111e44 <__malloc_unlock>
8110ca1c:	a805883a 	mov	r2,r21
8110ca20:	003f6b06 	br	8110c7d0 <__reset+0xfb0ec7d0>
8110ca24:	a80b883a 	mov	r5,r21
8110ca28:	9009883a 	mov	r4,r18
8110ca2c:	110b2780 	call	8110b278 <memmove>
8110ca30:	003f4e06 	br	8110c76c <__reset+0xfb0ec76c>
8110ca34:	89000404 	addi	r4,r17,16
8110ca38:	b93fbc16 	blt	r23,r4,8110c92c <__reset+0xfb0ec92c>
8110ca3c:	b0800317 	ldw	r2,12(r22)
8110ca40:	b0c00217 	ldw	r3,8(r22)
8110ca44:	81bfff04 	addi	r6,r16,-4
8110ca48:	01000904 	movi	r4,36
8110ca4c:	18800315 	stw	r2,12(r3)
8110ca50:	10c00215 	stw	r3,8(r2)
8110ca54:	b4800204 	addi	r18,r22,8
8110ca58:	21804336 	bltu	r4,r6,8110cb68 <_realloc_r+0x508>
8110ca5c:	008004c4 	movi	r2,19
8110ca60:	11803f2e 	bgeu	r2,r6,8110cb60 <_realloc_r+0x500>
8110ca64:	a8800017 	ldw	r2,0(r21)
8110ca68:	b0800215 	stw	r2,8(r22)
8110ca6c:	a8800117 	ldw	r2,4(r21)
8110ca70:	b0800315 	stw	r2,12(r22)
8110ca74:	008006c4 	movi	r2,27
8110ca78:	11803f36 	bltu	r2,r6,8110cb78 <_realloc_r+0x518>
8110ca7c:	b0800404 	addi	r2,r22,16
8110ca80:	ad400204 	addi	r21,r21,8
8110ca84:	a8c00017 	ldw	r3,0(r21)
8110ca88:	10c00015 	stw	r3,0(r2)
8110ca8c:	a8c00117 	ldw	r3,4(r21)
8110ca90:	10c00115 	stw	r3,4(r2)
8110ca94:	a8c00217 	ldw	r3,8(r21)
8110ca98:	10c00215 	stw	r3,8(r2)
8110ca9c:	b447883a 	add	r3,r22,r17
8110caa0:	bc45c83a 	sub	r2,r23,r17
8110caa4:	e0c00215 	stw	r3,8(fp)
8110caa8:	10800054 	ori	r2,r2,1
8110caac:	18800115 	stw	r2,4(r3)
8110cab0:	b0800117 	ldw	r2,4(r22)
8110cab4:	a009883a 	mov	r4,r20
8110cab8:	1080004c 	andi	r2,r2,1
8110cabc:	1462b03a 	or	r17,r2,r17
8110cac0:	b4400115 	stw	r17,4(r22)
8110cac4:	1111e440 	call	81111e44 <__malloc_unlock>
8110cac8:	9005883a 	mov	r2,r18
8110cacc:	003f4006 	br	8110c7d0 <__reset+0xfb0ec7d0>
8110cad0:	a8c00217 	ldw	r3,8(r21)
8110cad4:	90c00215 	stw	r3,8(r18)
8110cad8:	a8c00317 	ldw	r3,12(r21)
8110cadc:	90c00315 	stw	r3,12(r18)
8110cae0:	30801126 	beq	r6,r2,8110cb28 <_realloc_r+0x4c8>
8110cae4:	90800404 	addi	r2,r18,16
8110cae8:	a8c00404 	addi	r3,r21,16
8110caec:	003f1906 	br	8110c754 <__reset+0xfb0ec754>
8110caf0:	90ffff17 	ldw	r3,-4(r18)
8110caf4:	00bfff04 	movi	r2,-4
8110caf8:	a825883a 	mov	r18,r21
8110cafc:	1884703a 	and	r2,r3,r2
8110cb00:	80a1883a 	add	r16,r16,r2
8110cb04:	003f2406 	br	8110c798 <__reset+0xfb0ec798>
8110cb08:	a8800217 	ldw	r2,8(r21)
8110cb0c:	b0800415 	stw	r2,16(r22)
8110cb10:	a8800317 	ldw	r2,12(r21)
8110cb14:	b0800515 	stw	r2,20(r22)
8110cb18:	31000a26 	beq	r6,r4,8110cb44 <_realloc_r+0x4e4>
8110cb1c:	b0800604 	addi	r2,r22,24
8110cb20:	ad400404 	addi	r21,r21,16
8110cb24:	003fa906 	br	8110c9cc <__reset+0xfb0ec9cc>
8110cb28:	a9000417 	ldw	r4,16(r21)
8110cb2c:	90800604 	addi	r2,r18,24
8110cb30:	a8c00604 	addi	r3,r21,24
8110cb34:	91000415 	stw	r4,16(r18)
8110cb38:	a9000517 	ldw	r4,20(r21)
8110cb3c:	91000515 	stw	r4,20(r18)
8110cb40:	003f0406 	br	8110c754 <__reset+0xfb0ec754>
8110cb44:	a8c00417 	ldw	r3,16(r21)
8110cb48:	ad400604 	addi	r21,r21,24
8110cb4c:	b0800804 	addi	r2,r22,32
8110cb50:	b0c00615 	stw	r3,24(r22)
8110cb54:	a8ffff17 	ldw	r3,-4(r21)
8110cb58:	b0c00715 	stw	r3,28(r22)
8110cb5c:	003f9b06 	br	8110c9cc <__reset+0xfb0ec9cc>
8110cb60:	9005883a 	mov	r2,r18
8110cb64:	003fc706 	br	8110ca84 <__reset+0xfb0eca84>
8110cb68:	a80b883a 	mov	r5,r21
8110cb6c:	9009883a 	mov	r4,r18
8110cb70:	110b2780 	call	8110b278 <memmove>
8110cb74:	003fc906 	br	8110ca9c <__reset+0xfb0eca9c>
8110cb78:	a8800217 	ldw	r2,8(r21)
8110cb7c:	b0800415 	stw	r2,16(r22)
8110cb80:	a8800317 	ldw	r2,12(r21)
8110cb84:	b0800515 	stw	r2,20(r22)
8110cb88:	31000726 	beq	r6,r4,8110cba8 <_realloc_r+0x548>
8110cb8c:	b0800604 	addi	r2,r22,24
8110cb90:	ad400404 	addi	r21,r21,16
8110cb94:	003fbb06 	br	8110ca84 <__reset+0xfb0eca84>
8110cb98:	a009883a 	mov	r4,r20
8110cb9c:	1111e440 	call	81111e44 <__malloc_unlock>
8110cba0:	0005883a 	mov	r2,zero
8110cba4:	003f0a06 	br	8110c7d0 <__reset+0xfb0ec7d0>
8110cba8:	a8c00417 	ldw	r3,16(r21)
8110cbac:	ad400604 	addi	r21,r21,24
8110cbb0:	b0800804 	addi	r2,r22,32
8110cbb4:	b0c00615 	stw	r3,24(r22)
8110cbb8:	a8ffff17 	ldw	r3,-4(r21)
8110cbbc:	b0c00715 	stw	r3,28(r22)
8110cbc0:	003fb006 	br	8110ca84 <__reset+0xfb0eca84>

8110cbc4 <__fpclassifyd>:
8110cbc4:	00a00034 	movhi	r2,32768
8110cbc8:	10bfffc4 	addi	r2,r2,-1
8110cbcc:	2884703a 	and	r2,r5,r2
8110cbd0:	10000726 	beq	r2,zero,8110cbf0 <__fpclassifyd+0x2c>
8110cbd4:	00fffc34 	movhi	r3,65520
8110cbd8:	019ff834 	movhi	r6,32736
8110cbdc:	28c7883a 	add	r3,r5,r3
8110cbe0:	31bfffc4 	addi	r6,r6,-1
8110cbe4:	30c00536 	bltu	r6,r3,8110cbfc <__fpclassifyd+0x38>
8110cbe8:	00800104 	movi	r2,4
8110cbec:	f800283a 	ret
8110cbf0:	2000021e 	bne	r4,zero,8110cbfc <__fpclassifyd+0x38>
8110cbf4:	00800084 	movi	r2,2
8110cbf8:	f800283a 	ret
8110cbfc:	00dffc34 	movhi	r3,32752
8110cc00:	019ff834 	movhi	r6,32736
8110cc04:	28cb883a 	add	r5,r5,r3
8110cc08:	31bfffc4 	addi	r6,r6,-1
8110cc0c:	317ff62e 	bgeu	r6,r5,8110cbe8 <__reset+0xfb0ecbe8>
8110cc10:	01400434 	movhi	r5,16
8110cc14:	297fffc4 	addi	r5,r5,-1
8110cc18:	28800236 	bltu	r5,r2,8110cc24 <__fpclassifyd+0x60>
8110cc1c:	008000c4 	movi	r2,3
8110cc20:	f800283a 	ret
8110cc24:	10c00226 	beq	r2,r3,8110cc30 <__fpclassifyd+0x6c>
8110cc28:	0005883a 	mov	r2,zero
8110cc2c:	f800283a 	ret
8110cc30:	2005003a 	cmpeq	r2,r4,zero
8110cc34:	f800283a 	ret

8110cc38 <_sbrk_r>:
8110cc38:	defffd04 	addi	sp,sp,-12
8110cc3c:	dc000015 	stw	r16,0(sp)
8110cc40:	042044b4 	movhi	r16,33042
8110cc44:	dc400115 	stw	r17,4(sp)
8110cc48:	84284704 	addi	r16,r16,-24292
8110cc4c:	2023883a 	mov	r17,r4
8110cc50:	2809883a 	mov	r4,r5
8110cc54:	dfc00215 	stw	ra,8(sp)
8110cc58:	80000015 	stw	zero,0(r16)
8110cc5c:	11120040 	call	81112004 <sbrk>
8110cc60:	00ffffc4 	movi	r3,-1
8110cc64:	10c00526 	beq	r2,r3,8110cc7c <_sbrk_r+0x44>
8110cc68:	dfc00217 	ldw	ra,8(sp)
8110cc6c:	dc400117 	ldw	r17,4(sp)
8110cc70:	dc000017 	ldw	r16,0(sp)
8110cc74:	dec00304 	addi	sp,sp,12
8110cc78:	f800283a 	ret
8110cc7c:	80c00017 	ldw	r3,0(r16)
8110cc80:	183ff926 	beq	r3,zero,8110cc68 <__reset+0xfb0ecc68>
8110cc84:	88c00015 	stw	r3,0(r17)
8110cc88:	003ff706 	br	8110cc68 <__reset+0xfb0ecc68>

8110cc8c <__sread>:
8110cc8c:	defffe04 	addi	sp,sp,-8
8110cc90:	dc000015 	stw	r16,0(sp)
8110cc94:	2821883a 	mov	r16,r5
8110cc98:	2940038f 	ldh	r5,14(r5)
8110cc9c:	dfc00115 	stw	ra,4(sp)
8110cca0:	110ebd80 	call	8110ebd8 <_read_r>
8110cca4:	10000716 	blt	r2,zero,8110ccc4 <__sread+0x38>
8110cca8:	80c01417 	ldw	r3,80(r16)
8110ccac:	1887883a 	add	r3,r3,r2
8110ccb0:	80c01415 	stw	r3,80(r16)
8110ccb4:	dfc00117 	ldw	ra,4(sp)
8110ccb8:	dc000017 	ldw	r16,0(sp)
8110ccbc:	dec00204 	addi	sp,sp,8
8110ccc0:	f800283a 	ret
8110ccc4:	80c0030b 	ldhu	r3,12(r16)
8110ccc8:	18fbffcc 	andi	r3,r3,61439
8110cccc:	80c0030d 	sth	r3,12(r16)
8110ccd0:	dfc00117 	ldw	ra,4(sp)
8110ccd4:	dc000017 	ldw	r16,0(sp)
8110ccd8:	dec00204 	addi	sp,sp,8
8110ccdc:	f800283a 	ret

8110cce0 <__seofread>:
8110cce0:	0005883a 	mov	r2,zero
8110cce4:	f800283a 	ret

8110cce8 <__swrite>:
8110cce8:	2880030b 	ldhu	r2,12(r5)
8110ccec:	defffb04 	addi	sp,sp,-20
8110ccf0:	dcc00315 	stw	r19,12(sp)
8110ccf4:	dc800215 	stw	r18,8(sp)
8110ccf8:	dc400115 	stw	r17,4(sp)
8110ccfc:	dc000015 	stw	r16,0(sp)
8110cd00:	dfc00415 	stw	ra,16(sp)
8110cd04:	10c0400c 	andi	r3,r2,256
8110cd08:	2821883a 	mov	r16,r5
8110cd0c:	2023883a 	mov	r17,r4
8110cd10:	3025883a 	mov	r18,r6
8110cd14:	3827883a 	mov	r19,r7
8110cd18:	18000526 	beq	r3,zero,8110cd30 <__swrite+0x48>
8110cd1c:	2940038f 	ldh	r5,14(r5)
8110cd20:	01c00084 	movi	r7,2
8110cd24:	000d883a 	mov	r6,zero
8110cd28:	110eb780 	call	8110eb78 <_lseek_r>
8110cd2c:	8080030b 	ldhu	r2,12(r16)
8110cd30:	8140038f 	ldh	r5,14(r16)
8110cd34:	10bbffcc 	andi	r2,r2,61439
8110cd38:	980f883a 	mov	r7,r19
8110cd3c:	900d883a 	mov	r6,r18
8110cd40:	8809883a 	mov	r4,r17
8110cd44:	8080030d 	sth	r2,12(r16)
8110cd48:	dfc00417 	ldw	ra,16(sp)
8110cd4c:	dcc00317 	ldw	r19,12(sp)
8110cd50:	dc800217 	ldw	r18,8(sp)
8110cd54:	dc400117 	ldw	r17,4(sp)
8110cd58:	dc000017 	ldw	r16,0(sp)
8110cd5c:	dec00504 	addi	sp,sp,20
8110cd60:	110e6441 	jmpi	8110e644 <_write_r>

8110cd64 <__sseek>:
8110cd64:	defffe04 	addi	sp,sp,-8
8110cd68:	dc000015 	stw	r16,0(sp)
8110cd6c:	2821883a 	mov	r16,r5
8110cd70:	2940038f 	ldh	r5,14(r5)
8110cd74:	dfc00115 	stw	ra,4(sp)
8110cd78:	110eb780 	call	8110eb78 <_lseek_r>
8110cd7c:	00ffffc4 	movi	r3,-1
8110cd80:	10c00826 	beq	r2,r3,8110cda4 <__sseek+0x40>
8110cd84:	80c0030b 	ldhu	r3,12(r16)
8110cd88:	80801415 	stw	r2,80(r16)
8110cd8c:	18c40014 	ori	r3,r3,4096
8110cd90:	80c0030d 	sth	r3,12(r16)
8110cd94:	dfc00117 	ldw	ra,4(sp)
8110cd98:	dc000017 	ldw	r16,0(sp)
8110cd9c:	dec00204 	addi	sp,sp,8
8110cda0:	f800283a 	ret
8110cda4:	80c0030b 	ldhu	r3,12(r16)
8110cda8:	18fbffcc 	andi	r3,r3,61439
8110cdac:	80c0030d 	sth	r3,12(r16)
8110cdb0:	dfc00117 	ldw	ra,4(sp)
8110cdb4:	dc000017 	ldw	r16,0(sp)
8110cdb8:	dec00204 	addi	sp,sp,8
8110cdbc:	f800283a 	ret

8110cdc0 <__sclose>:
8110cdc0:	2940038f 	ldh	r5,14(r5)
8110cdc4:	110e6a41 	jmpi	8110e6a4 <_close_r>

8110cdc8 <strcmp>:
8110cdc8:	2144b03a 	or	r2,r4,r5
8110cdcc:	108000cc 	andi	r2,r2,3
8110cdd0:	1000171e 	bne	r2,zero,8110ce30 <strcmp+0x68>
8110cdd4:	20800017 	ldw	r2,0(r4)
8110cdd8:	28c00017 	ldw	r3,0(r5)
8110cddc:	10c0141e 	bne	r2,r3,8110ce30 <strcmp+0x68>
8110cde0:	027fbff4 	movhi	r9,65279
8110cde4:	4a7fbfc4 	addi	r9,r9,-257
8110cde8:	0086303a 	nor	r3,zero,r2
8110cdec:	02202074 	movhi	r8,32897
8110cdf0:	1245883a 	add	r2,r2,r9
8110cdf4:	42202004 	addi	r8,r8,-32640
8110cdf8:	10c4703a 	and	r2,r2,r3
8110cdfc:	1204703a 	and	r2,r2,r8
8110ce00:	10000226 	beq	r2,zero,8110ce0c <strcmp+0x44>
8110ce04:	00002306 	br	8110ce94 <strcmp+0xcc>
8110ce08:	1000221e 	bne	r2,zero,8110ce94 <strcmp+0xcc>
8110ce0c:	21000104 	addi	r4,r4,4
8110ce10:	20c00017 	ldw	r3,0(r4)
8110ce14:	29400104 	addi	r5,r5,4
8110ce18:	29800017 	ldw	r6,0(r5)
8110ce1c:	1a4f883a 	add	r7,r3,r9
8110ce20:	00c4303a 	nor	r2,zero,r3
8110ce24:	3884703a 	and	r2,r7,r2
8110ce28:	1204703a 	and	r2,r2,r8
8110ce2c:	19bff626 	beq	r3,r6,8110ce08 <__reset+0xfb0ece08>
8110ce30:	20800003 	ldbu	r2,0(r4)
8110ce34:	10c03fcc 	andi	r3,r2,255
8110ce38:	18c0201c 	xori	r3,r3,128
8110ce3c:	18ffe004 	addi	r3,r3,-128
8110ce40:	18000c26 	beq	r3,zero,8110ce74 <strcmp+0xac>
8110ce44:	29800007 	ldb	r6,0(r5)
8110ce48:	19800326 	beq	r3,r6,8110ce58 <strcmp+0x90>
8110ce4c:	00001306 	br	8110ce9c <strcmp+0xd4>
8110ce50:	29800007 	ldb	r6,0(r5)
8110ce54:	11800b1e 	bne	r2,r6,8110ce84 <strcmp+0xbc>
8110ce58:	21000044 	addi	r4,r4,1
8110ce5c:	20c00003 	ldbu	r3,0(r4)
8110ce60:	29400044 	addi	r5,r5,1
8110ce64:	18803fcc 	andi	r2,r3,255
8110ce68:	1080201c 	xori	r2,r2,128
8110ce6c:	10bfe004 	addi	r2,r2,-128
8110ce70:	103ff71e 	bne	r2,zero,8110ce50 <__reset+0xfb0ece50>
8110ce74:	0007883a 	mov	r3,zero
8110ce78:	28800003 	ldbu	r2,0(r5)
8110ce7c:	1885c83a 	sub	r2,r3,r2
8110ce80:	f800283a 	ret
8110ce84:	28800003 	ldbu	r2,0(r5)
8110ce88:	18c03fcc 	andi	r3,r3,255
8110ce8c:	1885c83a 	sub	r2,r3,r2
8110ce90:	f800283a 	ret
8110ce94:	0005883a 	mov	r2,zero
8110ce98:	f800283a 	ret
8110ce9c:	10c03fcc 	andi	r3,r2,255
8110cea0:	003ff506 	br	8110ce78 <__reset+0xfb0ece78>

8110cea4 <__sprint_r.part.0>:
8110cea4:	28801917 	ldw	r2,100(r5)
8110cea8:	defff604 	addi	sp,sp,-40
8110ceac:	dd400515 	stw	r21,20(sp)
8110ceb0:	dfc00915 	stw	ra,36(sp)
8110ceb4:	df000815 	stw	fp,32(sp)
8110ceb8:	ddc00715 	stw	r23,28(sp)
8110cebc:	dd800615 	stw	r22,24(sp)
8110cec0:	dd000415 	stw	r20,16(sp)
8110cec4:	dcc00315 	stw	r19,12(sp)
8110cec8:	dc800215 	stw	r18,8(sp)
8110cecc:	dc400115 	stw	r17,4(sp)
8110ced0:	dc000015 	stw	r16,0(sp)
8110ced4:	1088000c 	andi	r2,r2,8192
8110ced8:	302b883a 	mov	r21,r6
8110cedc:	10002e26 	beq	r2,zero,8110cf98 <__sprint_r.part.0+0xf4>
8110cee0:	30800217 	ldw	r2,8(r6)
8110cee4:	35800017 	ldw	r22,0(r6)
8110cee8:	10002926 	beq	r2,zero,8110cf90 <__sprint_r.part.0+0xec>
8110ceec:	2827883a 	mov	r19,r5
8110cef0:	2029883a 	mov	r20,r4
8110cef4:	b5c00104 	addi	r23,r22,4
8110cef8:	04bfffc4 	movi	r18,-1
8110cefc:	bc400017 	ldw	r17,0(r23)
8110cf00:	b4000017 	ldw	r16,0(r22)
8110cf04:	0039883a 	mov	fp,zero
8110cf08:	8822d0ba 	srli	r17,r17,2
8110cf0c:	8800031e 	bne	r17,zero,8110cf1c <__sprint_r.part.0+0x78>
8110cf10:	00001806 	br	8110cf74 <__sprint_r.part.0+0xd0>
8110cf14:	84000104 	addi	r16,r16,4
8110cf18:	8f001526 	beq	r17,fp,8110cf70 <__sprint_r.part.0+0xcc>
8110cf1c:	81400017 	ldw	r5,0(r16)
8110cf20:	980d883a 	mov	r6,r19
8110cf24:	a009883a 	mov	r4,r20
8110cf28:	110ea240 	call	8110ea24 <_fputwc_r>
8110cf2c:	e7000044 	addi	fp,fp,1
8110cf30:	14bff81e 	bne	r2,r18,8110cf14 <__reset+0xfb0ecf14>
8110cf34:	9005883a 	mov	r2,r18
8110cf38:	a8000215 	stw	zero,8(r21)
8110cf3c:	a8000115 	stw	zero,4(r21)
8110cf40:	dfc00917 	ldw	ra,36(sp)
8110cf44:	df000817 	ldw	fp,32(sp)
8110cf48:	ddc00717 	ldw	r23,28(sp)
8110cf4c:	dd800617 	ldw	r22,24(sp)
8110cf50:	dd400517 	ldw	r21,20(sp)
8110cf54:	dd000417 	ldw	r20,16(sp)
8110cf58:	dcc00317 	ldw	r19,12(sp)
8110cf5c:	dc800217 	ldw	r18,8(sp)
8110cf60:	dc400117 	ldw	r17,4(sp)
8110cf64:	dc000017 	ldw	r16,0(sp)
8110cf68:	dec00a04 	addi	sp,sp,40
8110cf6c:	f800283a 	ret
8110cf70:	a8800217 	ldw	r2,8(r21)
8110cf74:	8c63883a 	add	r17,r17,r17
8110cf78:	8c63883a 	add	r17,r17,r17
8110cf7c:	1445c83a 	sub	r2,r2,r17
8110cf80:	a8800215 	stw	r2,8(r21)
8110cf84:	b5800204 	addi	r22,r22,8
8110cf88:	bdc00204 	addi	r23,r23,8
8110cf8c:	103fdb1e 	bne	r2,zero,8110cefc <__reset+0xfb0ecefc>
8110cf90:	0005883a 	mov	r2,zero
8110cf94:	003fe806 	br	8110cf38 <__reset+0xfb0ecf38>
8110cf98:	110a0ac0 	call	8110a0ac <__sfvwrite_r>
8110cf9c:	003fe606 	br	8110cf38 <__reset+0xfb0ecf38>

8110cfa0 <__sprint_r>:
8110cfa0:	30c00217 	ldw	r3,8(r6)
8110cfa4:	18000126 	beq	r3,zero,8110cfac <__sprint_r+0xc>
8110cfa8:	110cea41 	jmpi	8110cea4 <__sprint_r.part.0>
8110cfac:	30000115 	stw	zero,4(r6)
8110cfb0:	0005883a 	mov	r2,zero
8110cfb4:	f800283a 	ret

8110cfb8 <___vfiprintf_internal_r>:
8110cfb8:	deffc904 	addi	sp,sp,-220
8110cfbc:	df003515 	stw	fp,212(sp)
8110cfc0:	dd003115 	stw	r20,196(sp)
8110cfc4:	dfc03615 	stw	ra,216(sp)
8110cfc8:	ddc03415 	stw	r23,208(sp)
8110cfcc:	dd803315 	stw	r22,204(sp)
8110cfd0:	dd403215 	stw	r21,200(sp)
8110cfd4:	dcc03015 	stw	r19,192(sp)
8110cfd8:	dc802f15 	stw	r18,188(sp)
8110cfdc:	dc402e15 	stw	r17,184(sp)
8110cfe0:	dc002d15 	stw	r16,180(sp)
8110cfe4:	d9002015 	stw	r4,128(sp)
8110cfe8:	d9c02215 	stw	r7,136(sp)
8110cfec:	2829883a 	mov	r20,r5
8110cff0:	3039883a 	mov	fp,r6
8110cff4:	20000226 	beq	r4,zero,8110d000 <___vfiprintf_internal_r+0x48>
8110cff8:	20800e17 	ldw	r2,56(r4)
8110cffc:	1000cf26 	beq	r2,zero,8110d33c <___vfiprintf_internal_r+0x384>
8110d000:	a080030b 	ldhu	r2,12(r20)
8110d004:	10c8000c 	andi	r3,r2,8192
8110d008:	1800061e 	bne	r3,zero,8110d024 <___vfiprintf_internal_r+0x6c>
8110d00c:	a1001917 	ldw	r4,100(r20)
8110d010:	00f7ffc4 	movi	r3,-8193
8110d014:	10880014 	ori	r2,r2,8192
8110d018:	20c6703a 	and	r3,r4,r3
8110d01c:	a080030d 	sth	r2,12(r20)
8110d020:	a0c01915 	stw	r3,100(r20)
8110d024:	10c0020c 	andi	r3,r2,8
8110d028:	1800a926 	beq	r3,zero,8110d2d0 <___vfiprintf_internal_r+0x318>
8110d02c:	a0c00417 	ldw	r3,16(r20)
8110d030:	1800a726 	beq	r3,zero,8110d2d0 <___vfiprintf_internal_r+0x318>
8110d034:	1080068c 	andi	r2,r2,26
8110d038:	00c00284 	movi	r3,10
8110d03c:	10c0ac26 	beq	r2,r3,8110d2f0 <___vfiprintf_internal_r+0x338>
8110d040:	da801a04 	addi	r10,sp,104
8110d044:	da801e15 	stw	r10,120(sp)
8110d048:	d8801e17 	ldw	r2,120(sp)
8110d04c:	da8019c4 	addi	r10,sp,103
8110d050:	05a044b4 	movhi	r22,33042
8110d054:	05e044b4 	movhi	r23,33042
8110d058:	da801f15 	stw	r10,124(sp)
8110d05c:	1295c83a 	sub	r10,r2,r10
8110d060:	b5a09204 	addi	r22,r22,-32184
8110d064:	bde08e04 	addi	r23,r23,-32200
8110d068:	dec01a15 	stw	sp,104(sp)
8110d06c:	d8001c15 	stw	zero,112(sp)
8110d070:	d8001b15 	stw	zero,108(sp)
8110d074:	d8002615 	stw	zero,152(sp)
8110d078:	d8002315 	stw	zero,140(sp)
8110d07c:	da802715 	stw	r10,156(sp)
8110d080:	d811883a 	mov	r8,sp
8110d084:	dd002115 	stw	r20,132(sp)
8110d088:	e021883a 	mov	r16,fp
8110d08c:	80800007 	ldb	r2,0(r16)
8110d090:	1003ea26 	beq	r2,zero,8110e03c <___vfiprintf_internal_r+0x1084>
8110d094:	00c00944 	movi	r3,37
8110d098:	8025883a 	mov	r18,r16
8110d09c:	10c0021e 	bne	r2,r3,8110d0a8 <___vfiprintf_internal_r+0xf0>
8110d0a0:	00001606 	br	8110d0fc <___vfiprintf_internal_r+0x144>
8110d0a4:	10c00326 	beq	r2,r3,8110d0b4 <___vfiprintf_internal_r+0xfc>
8110d0a8:	94800044 	addi	r18,r18,1
8110d0ac:	90800007 	ldb	r2,0(r18)
8110d0b0:	103ffc1e 	bne	r2,zero,8110d0a4 <__reset+0xfb0ed0a4>
8110d0b4:	9423c83a 	sub	r17,r18,r16
8110d0b8:	88001026 	beq	r17,zero,8110d0fc <___vfiprintf_internal_r+0x144>
8110d0bc:	d8c01c17 	ldw	r3,112(sp)
8110d0c0:	d8801b17 	ldw	r2,108(sp)
8110d0c4:	44000015 	stw	r16,0(r8)
8110d0c8:	88c7883a 	add	r3,r17,r3
8110d0cc:	10800044 	addi	r2,r2,1
8110d0d0:	44400115 	stw	r17,4(r8)
8110d0d4:	d8c01c15 	stw	r3,112(sp)
8110d0d8:	d8801b15 	stw	r2,108(sp)
8110d0dc:	010001c4 	movi	r4,7
8110d0e0:	2080760e 	bge	r4,r2,8110d2bc <___vfiprintf_internal_r+0x304>
8110d0e4:	1803821e 	bne	r3,zero,8110def0 <___vfiprintf_internal_r+0xf38>
8110d0e8:	da802317 	ldw	r10,140(sp)
8110d0ec:	d8001b15 	stw	zero,108(sp)
8110d0f0:	d811883a 	mov	r8,sp
8110d0f4:	5455883a 	add	r10,r10,r17
8110d0f8:	da802315 	stw	r10,140(sp)
8110d0fc:	90800007 	ldb	r2,0(r18)
8110d100:	10044626 	beq	r2,zero,8110e21c <___vfiprintf_internal_r+0x1264>
8110d104:	90c00047 	ldb	r3,1(r18)
8110d108:	94000044 	addi	r16,r18,1
8110d10c:	d8001d85 	stb	zero,118(sp)
8110d110:	0009883a 	mov	r4,zero
8110d114:	000f883a 	mov	r7,zero
8110d118:	027fffc4 	movi	r9,-1
8110d11c:	0023883a 	mov	r17,zero
8110d120:	0029883a 	mov	r20,zero
8110d124:	01401604 	movi	r5,88
8110d128:	01800244 	movi	r6,9
8110d12c:	03400a84 	movi	r13,42
8110d130:	03001b04 	movi	r12,108
8110d134:	84000044 	addi	r16,r16,1
8110d138:	18bff804 	addi	r2,r3,-32
8110d13c:	28827336 	bltu	r5,r2,8110db0c <___vfiprintf_internal_r+0xb54>
8110d140:	100490ba 	slli	r2,r2,2
8110d144:	02a04474 	movhi	r10,33041
8110d148:	52b45604 	addi	r10,r10,-11944
8110d14c:	1285883a 	add	r2,r2,r10
8110d150:	10800017 	ldw	r2,0(r2)
8110d154:	1000683a 	jmp	r2
8110d158:	8110d840 	call	88110d84 <__reset+0x20f0d84>
8110d15c:	8110db0c 	andi	r4,r16,17260
8110d160:	8110db0c 	andi	r4,r16,17260
8110d164:	8110d860 	cmpeqi	r4,r16,17249
8110d168:	8110db0c 	andi	r4,r16,17260
8110d16c:	8110db0c 	andi	r4,r16,17260
8110d170:	8110db0c 	andi	r4,r16,17260
8110d174:	8110db0c 	andi	r4,r16,17260
8110d178:	8110db0c 	andi	r4,r16,17260
8110d17c:	8110db0c 	andi	r4,r16,17260
8110d180:	8110da48 	cmpgei	r4,r16,17257
8110d184:	8110da64 	muli	r4,r16,17257
8110d188:	8110db0c 	andi	r4,r16,17260
8110d18c:	8110d34c 	andi	r4,r16,17229
8110d190:	8110da74 	orhi	r4,r16,17257
8110d194:	8110db0c 	andi	r4,r16,17260
8110d198:	8110d86c 	andhi	r4,r16,17249
8110d19c:	8110d878 	rdprs	r4,r16,17249
8110d1a0:	8110d878 	rdprs	r4,r16,17249
8110d1a4:	8110d878 	rdprs	r4,r16,17249
8110d1a8:	8110d878 	rdprs	r4,r16,17249
8110d1ac:	8110d878 	rdprs	r4,r16,17249
8110d1b0:	8110d878 	rdprs	r4,r16,17249
8110d1b4:	8110d878 	rdprs	r4,r16,17249
8110d1b8:	8110d878 	rdprs	r4,r16,17249
8110d1bc:	8110d878 	rdprs	r4,r16,17249
8110d1c0:	8110db0c 	andi	r4,r16,17260
8110d1c4:	8110db0c 	andi	r4,r16,17260
8110d1c8:	8110db0c 	andi	r4,r16,17260
8110d1cc:	8110db0c 	andi	r4,r16,17260
8110d1d0:	8110db0c 	andi	r4,r16,17260
8110d1d4:	8110db0c 	andi	r4,r16,17260
8110d1d8:	8110db0c 	andi	r4,r16,17260
8110d1dc:	8110db0c 	andi	r4,r16,17260
8110d1e0:	8110db0c 	andi	r4,r16,17260
8110d1e4:	8110db0c 	andi	r4,r16,17260
8110d1e8:	8110d8a4 	muli	r4,r16,17250
8110d1ec:	8110db0c 	andi	r4,r16,17260
8110d1f0:	8110db0c 	andi	r4,r16,17260
8110d1f4:	8110db0c 	andi	r4,r16,17260
8110d1f8:	8110db0c 	andi	r4,r16,17260
8110d1fc:	8110db0c 	andi	r4,r16,17260
8110d200:	8110db0c 	andi	r4,r16,17260
8110d204:	8110db0c 	andi	r4,r16,17260
8110d208:	8110db0c 	andi	r4,r16,17260
8110d20c:	8110db0c 	andi	r4,r16,17260
8110d210:	8110db0c 	andi	r4,r16,17260
8110d214:	8110d8dc 	xori	r4,r16,17251
8110d218:	8110db0c 	andi	r4,r16,17260
8110d21c:	8110db0c 	andi	r4,r16,17260
8110d220:	8110db0c 	andi	r4,r16,17260
8110d224:	8110db0c 	andi	r4,r16,17260
8110d228:	8110db0c 	andi	r4,r16,17260
8110d22c:	8110d934 	orhi	r4,r16,17252
8110d230:	8110db0c 	andi	r4,r16,17260
8110d234:	8110db0c 	andi	r4,r16,17260
8110d238:	8110d9a4 	muli	r4,r16,17254
8110d23c:	8110db0c 	andi	r4,r16,17260
8110d240:	8110db0c 	andi	r4,r16,17260
8110d244:	8110db0c 	andi	r4,r16,17260
8110d248:	8110db0c 	andi	r4,r16,17260
8110d24c:	8110db0c 	andi	r4,r16,17260
8110d250:	8110db0c 	andi	r4,r16,17260
8110d254:	8110db0c 	andi	r4,r16,17260
8110d258:	8110db0c 	andi	r4,r16,17260
8110d25c:	8110db0c 	andi	r4,r16,17260
8110d260:	8110db0c 	andi	r4,r16,17260
8110d264:	8110d750 	cmplti	r4,r16,17245
8110d268:	8110d77c 	xorhi	r4,r16,17245
8110d26c:	8110db0c 	andi	r4,r16,17260
8110d270:	8110db0c 	andi	r4,r16,17260
8110d274:	8110db0c 	andi	r4,r16,17260
8110d278:	8110dab4 	orhi	r4,r16,17258
8110d27c:	8110d77c 	xorhi	r4,r16,17245
8110d280:	8110db0c 	andi	r4,r16,17260
8110d284:	8110db0c 	andi	r4,r16,17260
8110d288:	8110d610 	cmplti	r4,r16,17240
8110d28c:	8110db0c 	andi	r4,r16,17260
8110d290:	8110d620 	cmpeqi	r4,r16,17240
8110d294:	8110d65c 	xori	r4,r16,17241
8110d298:	8110d358 	cmpnei	r4,r16,17229
8110d29c:	8110d604 	addi	r4,r16,17240
8110d2a0:	8110db0c 	andi	r4,r16,17260
8110d2a4:	8110d9e0 	cmpeqi	r4,r16,17255
8110d2a8:	8110db0c 	andi	r4,r16,17260
8110d2ac:	8110da38 	rdprs	r4,r16,17256
8110d2b0:	8110db0c 	andi	r4,r16,17260
8110d2b4:	8110db0c 	andi	r4,r16,17260
8110d2b8:	8110d6fc 	xorhi	r4,r16,17243
8110d2bc:	42000204 	addi	r8,r8,8
8110d2c0:	da802317 	ldw	r10,140(sp)
8110d2c4:	5455883a 	add	r10,r10,r17
8110d2c8:	da802315 	stw	r10,140(sp)
8110d2cc:	003f8b06 	br	8110d0fc <__reset+0xfb0ed0fc>
8110d2d0:	d9002017 	ldw	r4,128(sp)
8110d2d4:	a00b883a 	mov	r5,r20
8110d2d8:	1107c540 	call	81107c54 <__swsetup_r>
8110d2dc:	1003b11e 	bne	r2,zero,8110e1a4 <___vfiprintf_internal_r+0x11ec>
8110d2e0:	a080030b 	ldhu	r2,12(r20)
8110d2e4:	00c00284 	movi	r3,10
8110d2e8:	1080068c 	andi	r2,r2,26
8110d2ec:	10ff541e 	bne	r2,r3,8110d040 <__reset+0xfb0ed040>
8110d2f0:	a080038f 	ldh	r2,14(r20)
8110d2f4:	103f5216 	blt	r2,zero,8110d040 <__reset+0xfb0ed040>
8110d2f8:	d9c02217 	ldw	r7,136(sp)
8110d2fc:	d9002017 	ldw	r4,128(sp)
8110d300:	e00d883a 	mov	r6,fp
8110d304:	a00b883a 	mov	r5,r20
8110d308:	110e4300 	call	8110e430 <__sbprintf>
8110d30c:	dfc03617 	ldw	ra,216(sp)
8110d310:	df003517 	ldw	fp,212(sp)
8110d314:	ddc03417 	ldw	r23,208(sp)
8110d318:	dd803317 	ldw	r22,204(sp)
8110d31c:	dd403217 	ldw	r21,200(sp)
8110d320:	dd003117 	ldw	r20,196(sp)
8110d324:	dcc03017 	ldw	r19,192(sp)
8110d328:	dc802f17 	ldw	r18,188(sp)
8110d32c:	dc402e17 	ldw	r17,184(sp)
8110d330:	dc002d17 	ldw	r16,180(sp)
8110d334:	dec03704 	addi	sp,sp,220
8110d338:	f800283a 	ret
8110d33c:	1109c280 	call	81109c28 <__sinit>
8110d340:	003f2f06 	br	8110d000 <__reset+0xfb0ed000>
8110d344:	0463c83a 	sub	r17,zero,r17
8110d348:	d8802215 	stw	r2,136(sp)
8110d34c:	a5000114 	ori	r20,r20,4
8110d350:	80c00007 	ldb	r3,0(r16)
8110d354:	003f7706 	br	8110d134 <__reset+0xfb0ed134>
8110d358:	00800c04 	movi	r2,48
8110d35c:	da802217 	ldw	r10,136(sp)
8110d360:	d8801d05 	stb	r2,116(sp)
8110d364:	00801e04 	movi	r2,120
8110d368:	d8801d45 	stb	r2,117(sp)
8110d36c:	d8001d85 	stb	zero,118(sp)
8110d370:	50c00104 	addi	r3,r10,4
8110d374:	54800017 	ldw	r18,0(r10)
8110d378:	0027883a 	mov	r19,zero
8110d37c:	a0800094 	ori	r2,r20,2
8110d380:	48030b16 	blt	r9,zero,8110dfb0 <___vfiprintf_internal_r+0xff8>
8110d384:	00bfdfc4 	movi	r2,-129
8110d388:	a096703a 	and	r11,r20,r2
8110d38c:	d8c02215 	stw	r3,136(sp)
8110d390:	5d000094 	ori	r20,r11,2
8110d394:	90032b1e 	bne	r18,zero,8110e044 <___vfiprintf_internal_r+0x108c>
8110d398:	00a044b4 	movhi	r2,33042
8110d39c:	10a02d04 	addi	r2,r2,-32588
8110d3a0:	d8802615 	stw	r2,152(sp)
8110d3a4:	0039883a 	mov	fp,zero
8110d3a8:	48017b1e 	bne	r9,zero,8110d998 <___vfiprintf_internal_r+0x9e0>
8110d3ac:	0013883a 	mov	r9,zero
8110d3b0:	0027883a 	mov	r19,zero
8110d3b4:	dd401a04 	addi	r21,sp,104
8110d3b8:	4825883a 	mov	r18,r9
8110d3bc:	4cc0010e 	bge	r9,r19,8110d3c4 <___vfiprintf_internal_r+0x40c>
8110d3c0:	9825883a 	mov	r18,r19
8110d3c4:	e7003fcc 	andi	fp,fp,255
8110d3c8:	e700201c 	xori	fp,fp,128
8110d3cc:	e73fe004 	addi	fp,fp,-128
8110d3d0:	e0000126 	beq	fp,zero,8110d3d8 <___vfiprintf_internal_r+0x420>
8110d3d4:	94800044 	addi	r18,r18,1
8110d3d8:	a380008c 	andi	r14,r20,2
8110d3dc:	70000126 	beq	r14,zero,8110d3e4 <___vfiprintf_internal_r+0x42c>
8110d3e0:	94800084 	addi	r18,r18,2
8110d3e4:	a700210c 	andi	fp,r20,132
8110d3e8:	e001df1e 	bne	fp,zero,8110db68 <___vfiprintf_internal_r+0xbb0>
8110d3ec:	8c87c83a 	sub	r3,r17,r18
8110d3f0:	00c1dd0e 	bge	zero,r3,8110db68 <___vfiprintf_internal_r+0xbb0>
8110d3f4:	01c00404 	movi	r7,16
8110d3f8:	d8801c17 	ldw	r2,112(sp)
8110d3fc:	38c3ad0e 	bge	r7,r3,8110e2b4 <___vfiprintf_internal_r+0x12fc>
8110d400:	02a044b4 	movhi	r10,33042
8110d404:	52a09204 	addi	r10,r10,-32184
8110d408:	dc002915 	stw	r16,164(sp)
8110d40c:	d9801b17 	ldw	r6,108(sp)
8110d410:	da802415 	stw	r10,144(sp)
8110d414:	03c001c4 	movi	r15,7
8110d418:	da402515 	stw	r9,148(sp)
8110d41c:	db802815 	stw	r14,160(sp)
8110d420:	1821883a 	mov	r16,r3
8110d424:	00000506 	br	8110d43c <___vfiprintf_internal_r+0x484>
8110d428:	31400084 	addi	r5,r6,2
8110d42c:	42000204 	addi	r8,r8,8
8110d430:	200d883a 	mov	r6,r4
8110d434:	843ffc04 	addi	r16,r16,-16
8110d438:	3c000d0e 	bge	r7,r16,8110d470 <___vfiprintf_internal_r+0x4b8>
8110d43c:	10800404 	addi	r2,r2,16
8110d440:	31000044 	addi	r4,r6,1
8110d444:	45800015 	stw	r22,0(r8)
8110d448:	41c00115 	stw	r7,4(r8)
8110d44c:	d8801c15 	stw	r2,112(sp)
8110d450:	d9001b15 	stw	r4,108(sp)
8110d454:	793ff40e 	bge	r15,r4,8110d428 <__reset+0xfb0ed428>
8110d458:	1001b51e 	bne	r2,zero,8110db30 <___vfiprintf_internal_r+0xb78>
8110d45c:	843ffc04 	addi	r16,r16,-16
8110d460:	000d883a 	mov	r6,zero
8110d464:	01400044 	movi	r5,1
8110d468:	d811883a 	mov	r8,sp
8110d46c:	3c3ff316 	blt	r7,r16,8110d43c <__reset+0xfb0ed43c>
8110d470:	8007883a 	mov	r3,r16
8110d474:	da402517 	ldw	r9,148(sp)
8110d478:	db802817 	ldw	r14,160(sp)
8110d47c:	dc002917 	ldw	r16,164(sp)
8110d480:	da802417 	ldw	r10,144(sp)
8110d484:	1885883a 	add	r2,r3,r2
8110d488:	40c00115 	stw	r3,4(r8)
8110d48c:	42800015 	stw	r10,0(r8)
8110d490:	d8801c15 	stw	r2,112(sp)
8110d494:	d9401b15 	stw	r5,108(sp)
8110d498:	00c001c4 	movi	r3,7
8110d49c:	19426016 	blt	r3,r5,8110de20 <___vfiprintf_internal_r+0xe68>
8110d4a0:	d8c01d87 	ldb	r3,118(sp)
8110d4a4:	42000204 	addi	r8,r8,8
8110d4a8:	29000044 	addi	r4,r5,1
8110d4ac:	1801b31e 	bne	r3,zero,8110db7c <___vfiprintf_internal_r+0xbc4>
8110d4b0:	7001c026 	beq	r14,zero,8110dbb4 <___vfiprintf_internal_r+0xbfc>
8110d4b4:	d8c01d04 	addi	r3,sp,116
8110d4b8:	10800084 	addi	r2,r2,2
8110d4bc:	40c00015 	stw	r3,0(r8)
8110d4c0:	00c00084 	movi	r3,2
8110d4c4:	40c00115 	stw	r3,4(r8)
8110d4c8:	d8801c15 	stw	r2,112(sp)
8110d4cc:	d9001b15 	stw	r4,108(sp)
8110d4d0:	00c001c4 	movi	r3,7
8110d4d4:	1902650e 	bge	r3,r4,8110de6c <___vfiprintf_internal_r+0xeb4>
8110d4d8:	10029a1e 	bne	r2,zero,8110df44 <___vfiprintf_internal_r+0xf8c>
8110d4dc:	00c02004 	movi	r3,128
8110d4e0:	01000044 	movi	r4,1
8110d4e4:	000b883a 	mov	r5,zero
8110d4e8:	d811883a 	mov	r8,sp
8110d4ec:	e0c1b31e 	bne	fp,r3,8110dbbc <___vfiprintf_internal_r+0xc04>
8110d4f0:	8cb9c83a 	sub	fp,r17,r18
8110d4f4:	0701b10e 	bge	zero,fp,8110dbbc <___vfiprintf_internal_r+0xc04>
8110d4f8:	01c00404 	movi	r7,16
8110d4fc:	3f03890e 	bge	r7,fp,8110e324 <___vfiprintf_internal_r+0x136c>
8110d500:	00e044b4 	movhi	r3,33042
8110d504:	18e08e04 	addi	r3,r3,-32200
8110d508:	d8c02415 	stw	r3,144(sp)
8110d50c:	8007883a 	mov	r3,r16
8110d510:	034001c4 	movi	r13,7
8110d514:	e021883a 	mov	r16,fp
8110d518:	da402515 	stw	r9,148(sp)
8110d51c:	1839883a 	mov	fp,r3
8110d520:	00000506 	br	8110d538 <___vfiprintf_internal_r+0x580>
8110d524:	29800084 	addi	r6,r5,2
8110d528:	42000204 	addi	r8,r8,8
8110d52c:	180b883a 	mov	r5,r3
8110d530:	843ffc04 	addi	r16,r16,-16
8110d534:	3c000d0e 	bge	r7,r16,8110d56c <___vfiprintf_internal_r+0x5b4>
8110d538:	10800404 	addi	r2,r2,16
8110d53c:	28c00044 	addi	r3,r5,1
8110d540:	45c00015 	stw	r23,0(r8)
8110d544:	41c00115 	stw	r7,4(r8)
8110d548:	d8801c15 	stw	r2,112(sp)
8110d54c:	d8c01b15 	stw	r3,108(sp)
8110d550:	68fff40e 	bge	r13,r3,8110d524 <__reset+0xfb0ed524>
8110d554:	1002241e 	bne	r2,zero,8110dde8 <___vfiprintf_internal_r+0xe30>
8110d558:	843ffc04 	addi	r16,r16,-16
8110d55c:	01800044 	movi	r6,1
8110d560:	000b883a 	mov	r5,zero
8110d564:	d811883a 	mov	r8,sp
8110d568:	3c3ff316 	blt	r7,r16,8110d538 <__reset+0xfb0ed538>
8110d56c:	da402517 	ldw	r9,148(sp)
8110d570:	e007883a 	mov	r3,fp
8110d574:	8039883a 	mov	fp,r16
8110d578:	1821883a 	mov	r16,r3
8110d57c:	d8c02417 	ldw	r3,144(sp)
8110d580:	1705883a 	add	r2,r2,fp
8110d584:	47000115 	stw	fp,4(r8)
8110d588:	40c00015 	stw	r3,0(r8)
8110d58c:	d8801c15 	stw	r2,112(sp)
8110d590:	d9801b15 	stw	r6,108(sp)
8110d594:	00c001c4 	movi	r3,7
8110d598:	19827616 	blt	r3,r6,8110df74 <___vfiprintf_internal_r+0xfbc>
8110d59c:	4cf9c83a 	sub	fp,r9,r19
8110d5a0:	42000204 	addi	r8,r8,8
8110d5a4:	31000044 	addi	r4,r6,1
8110d5a8:	300b883a 	mov	r5,r6
8110d5ac:	07018516 	blt	zero,fp,8110dbc4 <___vfiprintf_internal_r+0xc0c>
8110d5b0:	9885883a 	add	r2,r19,r2
8110d5b4:	45400015 	stw	r21,0(r8)
8110d5b8:	44c00115 	stw	r19,4(r8)
8110d5bc:	d8801c15 	stw	r2,112(sp)
8110d5c0:	d9001b15 	stw	r4,108(sp)
8110d5c4:	00c001c4 	movi	r3,7
8110d5c8:	1901dd0e 	bge	r3,r4,8110dd40 <___vfiprintf_internal_r+0xd88>
8110d5cc:	1002401e 	bne	r2,zero,8110ded0 <___vfiprintf_internal_r+0xf18>
8110d5d0:	d8001b15 	stw	zero,108(sp)
8110d5d4:	a2c0010c 	andi	r11,r20,4
8110d5d8:	58000226 	beq	r11,zero,8110d5e4 <___vfiprintf_internal_r+0x62c>
8110d5dc:	8ca7c83a 	sub	r19,r17,r18
8110d5e0:	04c2f216 	blt	zero,r19,8110e1ac <___vfiprintf_internal_r+0x11f4>
8110d5e4:	8c80010e 	bge	r17,r18,8110d5ec <___vfiprintf_internal_r+0x634>
8110d5e8:	9023883a 	mov	r17,r18
8110d5ec:	da802317 	ldw	r10,140(sp)
8110d5f0:	5455883a 	add	r10,r10,r17
8110d5f4:	da802315 	stw	r10,140(sp)
8110d5f8:	d8001b15 	stw	zero,108(sp)
8110d5fc:	d811883a 	mov	r8,sp
8110d600:	003ea206 	br	8110d08c <__reset+0xfb0ed08c>
8110d604:	a5000814 	ori	r20,r20,32
8110d608:	80c00007 	ldb	r3,0(r16)
8110d60c:	003ec906 	br	8110d134 <__reset+0xfb0ed134>
8110d610:	80c00007 	ldb	r3,0(r16)
8110d614:	1b030926 	beq	r3,r12,8110e23c <___vfiprintf_internal_r+0x1284>
8110d618:	a5000414 	ori	r20,r20,16
8110d61c:	003ec506 	br	8110d134 <__reset+0xfb0ed134>
8110d620:	21003fcc 	andi	r4,r4,255
8110d624:	20035e1e 	bne	r4,zero,8110e3a0 <___vfiprintf_internal_r+0x13e8>
8110d628:	a080080c 	andi	r2,r20,32
8110d62c:	1002a526 	beq	r2,zero,8110e0c4 <___vfiprintf_internal_r+0x110c>
8110d630:	da802217 	ldw	r10,136(sp)
8110d634:	50800017 	ldw	r2,0(r10)
8110d638:	da802317 	ldw	r10,140(sp)
8110d63c:	5007d7fa 	srai	r3,r10,31
8110d640:	da802217 	ldw	r10,136(sp)
8110d644:	10c00115 	stw	r3,4(r2)
8110d648:	52800104 	addi	r10,r10,4
8110d64c:	da802215 	stw	r10,136(sp)
8110d650:	da802317 	ldw	r10,140(sp)
8110d654:	12800015 	stw	r10,0(r2)
8110d658:	003e8c06 	br	8110d08c <__reset+0xfb0ed08c>
8110d65c:	21003fcc 	andi	r4,r4,255
8110d660:	2003511e 	bne	r4,zero,8110e3a8 <___vfiprintf_internal_r+0x13f0>
8110d664:	a080080c 	andi	r2,r20,32
8110d668:	1000a126 	beq	r2,zero,8110d8f0 <___vfiprintf_internal_r+0x938>
8110d66c:	da802217 	ldw	r10,136(sp)
8110d670:	d8001d85 	stb	zero,118(sp)
8110d674:	50800204 	addi	r2,r10,8
8110d678:	54800017 	ldw	r18,0(r10)
8110d67c:	54c00117 	ldw	r19,4(r10)
8110d680:	4802b416 	blt	r9,zero,8110e154 <___vfiprintf_internal_r+0x119c>
8110d684:	013fdfc4 	movi	r4,-129
8110d688:	94c6b03a 	or	r3,r18,r19
8110d68c:	d8802215 	stw	r2,136(sp)
8110d690:	a128703a 	and	r20,r20,r4
8110d694:	1800a226 	beq	r3,zero,8110d920 <___vfiprintf_internal_r+0x968>
8110d698:	0039883a 	mov	fp,zero
8110d69c:	dd401a04 	addi	r21,sp,104
8110d6a0:	9006d0fa 	srli	r3,r18,3
8110d6a4:	9808977a 	slli	r4,r19,29
8110d6a8:	9826d0fa 	srli	r19,r19,3
8110d6ac:	948001cc 	andi	r18,r18,7
8110d6b0:	90800c04 	addi	r2,r18,48
8110d6b4:	ad7fffc4 	addi	r21,r21,-1
8110d6b8:	20e4b03a 	or	r18,r4,r3
8110d6bc:	a8800005 	stb	r2,0(r21)
8110d6c0:	94c6b03a 	or	r3,r18,r19
8110d6c4:	183ff61e 	bne	r3,zero,8110d6a0 <__reset+0xfb0ed6a0>
8110d6c8:	a0c0004c 	andi	r3,r20,1
8110d6cc:	18005926 	beq	r3,zero,8110d834 <___vfiprintf_internal_r+0x87c>
8110d6d0:	10803fcc 	andi	r2,r2,255
8110d6d4:	1080201c 	xori	r2,r2,128
8110d6d8:	10bfe004 	addi	r2,r2,-128
8110d6dc:	00c00c04 	movi	r3,48
8110d6e0:	10c05426 	beq	r2,r3,8110d834 <___vfiprintf_internal_r+0x87c>
8110d6e4:	da801e17 	ldw	r10,120(sp)
8110d6e8:	a8bfffc4 	addi	r2,r21,-1
8110d6ec:	a8ffffc5 	stb	r3,-1(r21)
8110d6f0:	50a7c83a 	sub	r19,r10,r2
8110d6f4:	102b883a 	mov	r21,r2
8110d6f8:	003f2f06 	br	8110d3b8 <__reset+0xfb0ed3b8>
8110d6fc:	21003fcc 	andi	r4,r4,255
8110d700:	2003421e 	bne	r4,zero,8110e40c <___vfiprintf_internal_r+0x1454>
8110d704:	00a044b4 	movhi	r2,33042
8110d708:	10a02d04 	addi	r2,r2,-32588
8110d70c:	d8802615 	stw	r2,152(sp)
8110d710:	a080080c 	andi	r2,r20,32
8110d714:	1000aa26 	beq	r2,zero,8110d9c0 <___vfiprintf_internal_r+0xa08>
8110d718:	da802217 	ldw	r10,136(sp)
8110d71c:	54800017 	ldw	r18,0(r10)
8110d720:	54c00117 	ldw	r19,4(r10)
8110d724:	52800204 	addi	r10,r10,8
8110d728:	da802215 	stw	r10,136(sp)
8110d72c:	a080004c 	andi	r2,r20,1
8110d730:	1001d226 	beq	r2,zero,8110de7c <___vfiprintf_internal_r+0xec4>
8110d734:	94c4b03a 	or	r2,r18,r19
8110d738:	1002351e 	bne	r2,zero,8110e010 <___vfiprintf_internal_r+0x1058>
8110d73c:	d8001d85 	stb	zero,118(sp)
8110d740:	48022216 	blt	r9,zero,8110dfcc <___vfiprintf_internal_r+0x1014>
8110d744:	00bfdfc4 	movi	r2,-129
8110d748:	a0a8703a 	and	r20,r20,r2
8110d74c:	003f1506 	br	8110d3a4 <__reset+0xfb0ed3a4>
8110d750:	da802217 	ldw	r10,136(sp)
8110d754:	04800044 	movi	r18,1
8110d758:	d8001d85 	stb	zero,118(sp)
8110d75c:	50800017 	ldw	r2,0(r10)
8110d760:	52800104 	addi	r10,r10,4
8110d764:	da802215 	stw	r10,136(sp)
8110d768:	d8801005 	stb	r2,64(sp)
8110d76c:	9027883a 	mov	r19,r18
8110d770:	dd401004 	addi	r21,sp,64
8110d774:	0013883a 	mov	r9,zero
8110d778:	003f1706 	br	8110d3d8 <__reset+0xfb0ed3d8>
8110d77c:	21003fcc 	andi	r4,r4,255
8110d780:	2003201e 	bne	r4,zero,8110e404 <___vfiprintf_internal_r+0x144c>
8110d784:	a080080c 	andi	r2,r20,32
8110d788:	10004b26 	beq	r2,zero,8110d8b8 <___vfiprintf_internal_r+0x900>
8110d78c:	da802217 	ldw	r10,136(sp)
8110d790:	50800117 	ldw	r2,4(r10)
8110d794:	54800017 	ldw	r18,0(r10)
8110d798:	52800204 	addi	r10,r10,8
8110d79c:	da802215 	stw	r10,136(sp)
8110d7a0:	1027883a 	mov	r19,r2
8110d7a4:	10022c16 	blt	r2,zero,8110e058 <___vfiprintf_internal_r+0x10a0>
8110d7a8:	df001d83 	ldbu	fp,118(sp)
8110d7ac:	48007216 	blt	r9,zero,8110d978 <___vfiprintf_internal_r+0x9c0>
8110d7b0:	00ffdfc4 	movi	r3,-129
8110d7b4:	94c4b03a 	or	r2,r18,r19
8110d7b8:	a0e8703a 	and	r20,r20,r3
8110d7bc:	1000cc26 	beq	r2,zero,8110daf0 <___vfiprintf_internal_r+0xb38>
8110d7c0:	98021026 	beq	r19,zero,8110e004 <___vfiprintf_internal_r+0x104c>
8110d7c4:	dc402415 	stw	r17,144(sp)
8110d7c8:	dc002515 	stw	r16,148(sp)
8110d7cc:	9823883a 	mov	r17,r19
8110d7d0:	9021883a 	mov	r16,r18
8110d7d4:	dd401a04 	addi	r21,sp,104
8110d7d8:	4825883a 	mov	r18,r9
8110d7dc:	4027883a 	mov	r19,r8
8110d7e0:	8009883a 	mov	r4,r16
8110d7e4:	880b883a 	mov	r5,r17
8110d7e8:	01800284 	movi	r6,10
8110d7ec:	000f883a 	mov	r7,zero
8110d7f0:	110f3980 	call	8110f398 <__umoddi3>
8110d7f4:	10800c04 	addi	r2,r2,48
8110d7f8:	ad7fffc4 	addi	r21,r21,-1
8110d7fc:	8009883a 	mov	r4,r16
8110d800:	880b883a 	mov	r5,r17
8110d804:	a8800005 	stb	r2,0(r21)
8110d808:	01800284 	movi	r6,10
8110d80c:	000f883a 	mov	r7,zero
8110d810:	110ee200 	call	8110ee20 <__udivdi3>
8110d814:	1021883a 	mov	r16,r2
8110d818:	10c4b03a 	or	r2,r2,r3
8110d81c:	1823883a 	mov	r17,r3
8110d820:	103fef1e 	bne	r2,zero,8110d7e0 <__reset+0xfb0ed7e0>
8110d824:	dc402417 	ldw	r17,144(sp)
8110d828:	dc002517 	ldw	r16,148(sp)
8110d82c:	9013883a 	mov	r9,r18
8110d830:	9811883a 	mov	r8,r19
8110d834:	da801e17 	ldw	r10,120(sp)
8110d838:	5567c83a 	sub	r19,r10,r21
8110d83c:	003ede06 	br	8110d3b8 <__reset+0xfb0ed3b8>
8110d840:	38803fcc 	andi	r2,r7,255
8110d844:	1080201c 	xori	r2,r2,128
8110d848:	10bfe004 	addi	r2,r2,-128
8110d84c:	1002371e 	bne	r2,zero,8110e12c <___vfiprintf_internal_r+0x1174>
8110d850:	01000044 	movi	r4,1
8110d854:	01c00804 	movi	r7,32
8110d858:	80c00007 	ldb	r3,0(r16)
8110d85c:	003e3506 	br	8110d134 <__reset+0xfb0ed134>
8110d860:	a5000054 	ori	r20,r20,1
8110d864:	80c00007 	ldb	r3,0(r16)
8110d868:	003e3206 	br	8110d134 <__reset+0xfb0ed134>
8110d86c:	a5002014 	ori	r20,r20,128
8110d870:	80c00007 	ldb	r3,0(r16)
8110d874:	003e2f06 	br	8110d134 <__reset+0xfb0ed134>
8110d878:	8015883a 	mov	r10,r16
8110d87c:	0023883a 	mov	r17,zero
8110d880:	18bff404 	addi	r2,r3,-48
8110d884:	50c00007 	ldb	r3,0(r10)
8110d888:	8c4002a4 	muli	r17,r17,10
8110d88c:	84000044 	addi	r16,r16,1
8110d890:	8015883a 	mov	r10,r16
8110d894:	1463883a 	add	r17,r2,r17
8110d898:	18bff404 	addi	r2,r3,-48
8110d89c:	30bff92e 	bgeu	r6,r2,8110d884 <__reset+0xfb0ed884>
8110d8a0:	003e2506 	br	8110d138 <__reset+0xfb0ed138>
8110d8a4:	21003fcc 	andi	r4,r4,255
8110d8a8:	2002d41e 	bne	r4,zero,8110e3fc <___vfiprintf_internal_r+0x1444>
8110d8ac:	a5000414 	ori	r20,r20,16
8110d8b0:	a080080c 	andi	r2,r20,32
8110d8b4:	103fb51e 	bne	r2,zero,8110d78c <__reset+0xfb0ed78c>
8110d8b8:	a080040c 	andi	r2,r20,16
8110d8bc:	1001f826 	beq	r2,zero,8110e0a0 <___vfiprintf_internal_r+0x10e8>
8110d8c0:	da802217 	ldw	r10,136(sp)
8110d8c4:	54800017 	ldw	r18,0(r10)
8110d8c8:	52800104 	addi	r10,r10,4
8110d8cc:	da802215 	stw	r10,136(sp)
8110d8d0:	9027d7fa 	srai	r19,r18,31
8110d8d4:	9805883a 	mov	r2,r19
8110d8d8:	003fb206 	br	8110d7a4 <__reset+0xfb0ed7a4>
8110d8dc:	21003fcc 	andi	r4,r4,255
8110d8e0:	2002c41e 	bne	r4,zero,8110e3f4 <___vfiprintf_internal_r+0x143c>
8110d8e4:	a5000414 	ori	r20,r20,16
8110d8e8:	a080080c 	andi	r2,r20,32
8110d8ec:	103f5f1e 	bne	r2,zero,8110d66c <__reset+0xfb0ed66c>
8110d8f0:	a080040c 	andi	r2,r20,16
8110d8f4:	10020f26 	beq	r2,zero,8110e134 <___vfiprintf_internal_r+0x117c>
8110d8f8:	da802217 	ldw	r10,136(sp)
8110d8fc:	d8001d85 	stb	zero,118(sp)
8110d900:	0027883a 	mov	r19,zero
8110d904:	50800104 	addi	r2,r10,4
8110d908:	54800017 	ldw	r18,0(r10)
8110d90c:	48021116 	blt	r9,zero,8110e154 <___vfiprintf_internal_r+0x119c>
8110d910:	00ffdfc4 	movi	r3,-129
8110d914:	d8802215 	stw	r2,136(sp)
8110d918:	a0e8703a 	and	r20,r20,r3
8110d91c:	903f5e1e 	bne	r18,zero,8110d698 <__reset+0xfb0ed698>
8110d920:	0039883a 	mov	fp,zero
8110d924:	4802a626 	beq	r9,zero,8110e3c0 <___vfiprintf_internal_r+0x1408>
8110d928:	0025883a 	mov	r18,zero
8110d92c:	0027883a 	mov	r19,zero
8110d930:	003f5a06 	br	8110d69c <__reset+0xfb0ed69c>
8110d934:	21003fcc 	andi	r4,r4,255
8110d938:	20029f1e 	bne	r4,zero,8110e3b8 <___vfiprintf_internal_r+0x1400>
8110d93c:	a5000414 	ori	r20,r20,16
8110d940:	a080080c 	andi	r2,r20,32
8110d944:	10005e1e 	bne	r2,zero,8110dac0 <___vfiprintf_internal_r+0xb08>
8110d948:	a080040c 	andi	r2,r20,16
8110d94c:	1001a21e 	bne	r2,zero,8110dfd8 <___vfiprintf_internal_r+0x1020>
8110d950:	a080100c 	andi	r2,r20,64
8110d954:	d8001d85 	stb	zero,118(sp)
8110d958:	da802217 	ldw	r10,136(sp)
8110d95c:	1002231e 	bne	r2,zero,8110e1ec <___vfiprintf_internal_r+0x1234>
8110d960:	50800104 	addi	r2,r10,4
8110d964:	54800017 	ldw	r18,0(r10)
8110d968:	0027883a 	mov	r19,zero
8110d96c:	4801a00e 	bge	r9,zero,8110dff0 <___vfiprintf_internal_r+0x1038>
8110d970:	d8802215 	stw	r2,136(sp)
8110d974:	0039883a 	mov	fp,zero
8110d978:	94c4b03a 	or	r2,r18,r19
8110d97c:	103f901e 	bne	r2,zero,8110d7c0 <__reset+0xfb0ed7c0>
8110d980:	00800044 	movi	r2,1
8110d984:	10803fcc 	andi	r2,r2,255
8110d988:	00c00044 	movi	r3,1
8110d98c:	10c05926 	beq	r2,r3,8110daf4 <___vfiprintf_internal_r+0xb3c>
8110d990:	00c00084 	movi	r3,2
8110d994:	10ffe41e 	bne	r2,r3,8110d928 <__reset+0xfb0ed928>
8110d998:	0025883a 	mov	r18,zero
8110d99c:	0027883a 	mov	r19,zero
8110d9a0:	00013d06 	br	8110de98 <___vfiprintf_internal_r+0xee0>
8110d9a4:	21003fcc 	andi	r4,r4,255
8110d9a8:	2002811e 	bne	r4,zero,8110e3b0 <___vfiprintf_internal_r+0x13f8>
8110d9ac:	00a044b4 	movhi	r2,33042
8110d9b0:	10a02804 	addi	r2,r2,-32608
8110d9b4:	d8802615 	stw	r2,152(sp)
8110d9b8:	a080080c 	andi	r2,r20,32
8110d9bc:	103f561e 	bne	r2,zero,8110d718 <__reset+0xfb0ed718>
8110d9c0:	a080040c 	andi	r2,r20,16
8110d9c4:	1001d126 	beq	r2,zero,8110e10c <___vfiprintf_internal_r+0x1154>
8110d9c8:	da802217 	ldw	r10,136(sp)
8110d9cc:	0027883a 	mov	r19,zero
8110d9d0:	54800017 	ldw	r18,0(r10)
8110d9d4:	52800104 	addi	r10,r10,4
8110d9d8:	da802215 	stw	r10,136(sp)
8110d9dc:	003f5306 	br	8110d72c <__reset+0xfb0ed72c>
8110d9e0:	da802217 	ldw	r10,136(sp)
8110d9e4:	d8001d85 	stb	zero,118(sp)
8110d9e8:	55400017 	ldw	r21,0(r10)
8110d9ec:	50c00104 	addi	r3,r10,4
8110d9f0:	a8024226 	beq	r21,zero,8110e2fc <___vfiprintf_internal_r+0x1344>
8110d9f4:	48021816 	blt	r9,zero,8110e258 <___vfiprintf_internal_r+0x12a0>
8110d9f8:	480d883a 	mov	r6,r9
8110d9fc:	000b883a 	mov	r5,zero
8110da00:	a809883a 	mov	r4,r21
8110da04:	d8c02a15 	stw	r3,168(sp)
8110da08:	da002b15 	stw	r8,172(sp)
8110da0c:	da402c15 	stw	r9,176(sp)
8110da10:	110b1940 	call	8110b194 <memchr>
8110da14:	d8c02a17 	ldw	r3,168(sp)
8110da18:	da002b17 	ldw	r8,172(sp)
8110da1c:	da402c17 	ldw	r9,176(sp)
8110da20:	10024826 	beq	r2,zero,8110e344 <___vfiprintf_internal_r+0x138c>
8110da24:	1567c83a 	sub	r19,r2,r21
8110da28:	df001d83 	ldbu	fp,118(sp)
8110da2c:	d8c02215 	stw	r3,136(sp)
8110da30:	0013883a 	mov	r9,zero
8110da34:	003e6006 	br	8110d3b8 <__reset+0xfb0ed3b8>
8110da38:	21003fcc 	andi	r4,r4,255
8110da3c:	203fc026 	beq	r4,zero,8110d940 <__reset+0xfb0ed940>
8110da40:	d9c01d85 	stb	r7,118(sp)
8110da44:	003fbe06 	br	8110d940 <__reset+0xfb0ed940>
8110da48:	da802217 	ldw	r10,136(sp)
8110da4c:	54400017 	ldw	r17,0(r10)
8110da50:	50800104 	addi	r2,r10,4
8110da54:	883e3b16 	blt	r17,zero,8110d344 <__reset+0xfb0ed344>
8110da58:	d8802215 	stw	r2,136(sp)
8110da5c:	80c00007 	ldb	r3,0(r16)
8110da60:	003db406 	br	8110d134 <__reset+0xfb0ed134>
8110da64:	01000044 	movi	r4,1
8110da68:	01c00ac4 	movi	r7,43
8110da6c:	80c00007 	ldb	r3,0(r16)
8110da70:	003db006 	br	8110d134 <__reset+0xfb0ed134>
8110da74:	80c00007 	ldb	r3,0(r16)
8110da78:	82800044 	addi	r10,r16,1
8110da7c:	1b423c26 	beq	r3,r13,8110e370 <___vfiprintf_internal_r+0x13b8>
8110da80:	18bff404 	addi	r2,r3,-48
8110da84:	0013883a 	mov	r9,zero
8110da88:	30822b36 	bltu	r6,r2,8110e338 <___vfiprintf_internal_r+0x1380>
8110da8c:	50c00007 	ldb	r3,0(r10)
8110da90:	4a4002a4 	muli	r9,r9,10
8110da94:	54000044 	addi	r16,r10,1
8110da98:	8015883a 	mov	r10,r16
8110da9c:	4893883a 	add	r9,r9,r2
8110daa0:	18bff404 	addi	r2,r3,-48
8110daa4:	30bff92e 	bgeu	r6,r2,8110da8c <__reset+0xfb0eda8c>
8110daa8:	483da30e 	bge	r9,zero,8110d138 <__reset+0xfb0ed138>
8110daac:	027fffc4 	movi	r9,-1
8110dab0:	003da106 	br	8110d138 <__reset+0xfb0ed138>
8110dab4:	a5001014 	ori	r20,r20,64
8110dab8:	80c00007 	ldb	r3,0(r16)
8110dabc:	003d9d06 	br	8110d134 <__reset+0xfb0ed134>
8110dac0:	da802217 	ldw	r10,136(sp)
8110dac4:	d8001d85 	stb	zero,118(sp)
8110dac8:	50c00204 	addi	r3,r10,8
8110dacc:	54800017 	ldw	r18,0(r10)
8110dad0:	54c00117 	ldw	r19,4(r10)
8110dad4:	4801ca16 	blt	r9,zero,8110e200 <___vfiprintf_internal_r+0x1248>
8110dad8:	013fdfc4 	movi	r4,-129
8110dadc:	94c4b03a 	or	r2,r18,r19
8110dae0:	d8c02215 	stw	r3,136(sp)
8110dae4:	a128703a 	and	r20,r20,r4
8110dae8:	0039883a 	mov	fp,zero
8110daec:	103f341e 	bne	r2,zero,8110d7c0 <__reset+0xfb0ed7c0>
8110daf0:	483e2e26 	beq	r9,zero,8110d3ac <__reset+0xfb0ed3ac>
8110daf4:	0025883a 	mov	r18,zero
8110daf8:	94800c04 	addi	r18,r18,48
8110dafc:	dc8019c5 	stb	r18,103(sp)
8110db00:	dcc02717 	ldw	r19,156(sp)
8110db04:	dd4019c4 	addi	r21,sp,103
8110db08:	003e2b06 	br	8110d3b8 <__reset+0xfb0ed3b8>
8110db0c:	21003fcc 	andi	r4,r4,255
8110db10:	2002361e 	bne	r4,zero,8110e3ec <___vfiprintf_internal_r+0x1434>
8110db14:	1801c126 	beq	r3,zero,8110e21c <___vfiprintf_internal_r+0x1264>
8110db18:	04800044 	movi	r18,1
8110db1c:	d8c01005 	stb	r3,64(sp)
8110db20:	d8001d85 	stb	zero,118(sp)
8110db24:	9027883a 	mov	r19,r18
8110db28:	dd401004 	addi	r21,sp,64
8110db2c:	003f1106 	br	8110d774 <__reset+0xfb0ed774>
8110db30:	d9402117 	ldw	r5,132(sp)
8110db34:	d9002017 	ldw	r4,128(sp)
8110db38:	d9801a04 	addi	r6,sp,104
8110db3c:	d9c02b15 	stw	r7,172(sp)
8110db40:	dbc02a15 	stw	r15,168(sp)
8110db44:	110cea40 	call	8110cea4 <__sprint_r.part.0>
8110db48:	d9c02b17 	ldw	r7,172(sp)
8110db4c:	dbc02a17 	ldw	r15,168(sp)
8110db50:	10006d1e 	bne	r2,zero,8110dd08 <___vfiprintf_internal_r+0xd50>
8110db54:	d9801b17 	ldw	r6,108(sp)
8110db58:	d8801c17 	ldw	r2,112(sp)
8110db5c:	d811883a 	mov	r8,sp
8110db60:	31400044 	addi	r5,r6,1
8110db64:	003e3306 	br	8110d434 <__reset+0xfb0ed434>
8110db68:	d9401b17 	ldw	r5,108(sp)
8110db6c:	d8801c17 	ldw	r2,112(sp)
8110db70:	29000044 	addi	r4,r5,1
8110db74:	d8c01d87 	ldb	r3,118(sp)
8110db78:	183e4d26 	beq	r3,zero,8110d4b0 <__reset+0xfb0ed4b0>
8110db7c:	00c00044 	movi	r3,1
8110db80:	d9401d84 	addi	r5,sp,118
8110db84:	10c5883a 	add	r2,r2,r3
8110db88:	41400015 	stw	r5,0(r8)
8110db8c:	40c00115 	stw	r3,4(r8)
8110db90:	d8801c15 	stw	r2,112(sp)
8110db94:	d9001b15 	stw	r4,108(sp)
8110db98:	014001c4 	movi	r5,7
8110db9c:	2900a90e 	bge	r5,r4,8110de44 <___vfiprintf_internal_r+0xe8c>
8110dba0:	1000da1e 	bne	r2,zero,8110df0c <___vfiprintf_internal_r+0xf54>
8110dba4:	7000ab1e 	bne	r14,zero,8110de54 <___vfiprintf_internal_r+0xe9c>
8110dba8:	000b883a 	mov	r5,zero
8110dbac:	1809883a 	mov	r4,r3
8110dbb0:	d811883a 	mov	r8,sp
8110dbb4:	00c02004 	movi	r3,128
8110dbb8:	e0fe4d26 	beq	fp,r3,8110d4f0 <__reset+0xfb0ed4f0>
8110dbbc:	4cf9c83a 	sub	fp,r9,r19
8110dbc0:	073e7b0e 	bge	zero,fp,8110d5b0 <__reset+0xfb0ed5b0>
8110dbc4:	01c00404 	movi	r7,16
8110dbc8:	3f01900e 	bge	r7,fp,8110e20c <___vfiprintf_internal_r+0x1254>
8110dbcc:	00e044b4 	movhi	r3,33042
8110dbd0:	18e08e04 	addi	r3,r3,-32200
8110dbd4:	d8c02415 	stw	r3,144(sp)
8110dbd8:	034001c4 	movi	r13,7
8110dbdc:	00000506 	br	8110dbf4 <___vfiprintf_internal_r+0xc3c>
8110dbe0:	29000084 	addi	r4,r5,2
8110dbe4:	42000204 	addi	r8,r8,8
8110dbe8:	180b883a 	mov	r5,r3
8110dbec:	e73ffc04 	addi	fp,fp,-16
8110dbf0:	3f000d0e 	bge	r7,fp,8110dc28 <___vfiprintf_internal_r+0xc70>
8110dbf4:	10800404 	addi	r2,r2,16
8110dbf8:	28c00044 	addi	r3,r5,1
8110dbfc:	45c00015 	stw	r23,0(r8)
8110dc00:	41c00115 	stw	r7,4(r8)
8110dc04:	d8801c15 	stw	r2,112(sp)
8110dc08:	d8c01b15 	stw	r3,108(sp)
8110dc0c:	68fff40e 	bge	r13,r3,8110dbe0 <__reset+0xfb0edbe0>
8110dc10:	1000101e 	bne	r2,zero,8110dc54 <___vfiprintf_internal_r+0xc9c>
8110dc14:	e73ffc04 	addi	fp,fp,-16
8110dc18:	01000044 	movi	r4,1
8110dc1c:	000b883a 	mov	r5,zero
8110dc20:	d811883a 	mov	r8,sp
8110dc24:	3f3ff316 	blt	r7,fp,8110dbf4 <__reset+0xfb0edbf4>
8110dc28:	da802417 	ldw	r10,144(sp)
8110dc2c:	1705883a 	add	r2,r2,fp
8110dc30:	47000115 	stw	fp,4(r8)
8110dc34:	42800015 	stw	r10,0(r8)
8110dc38:	d8801c15 	stw	r2,112(sp)
8110dc3c:	d9001b15 	stw	r4,108(sp)
8110dc40:	00c001c4 	movi	r3,7
8110dc44:	19003616 	blt	r3,r4,8110dd20 <___vfiprintf_internal_r+0xd68>
8110dc48:	42000204 	addi	r8,r8,8
8110dc4c:	21000044 	addi	r4,r4,1
8110dc50:	003e5706 	br	8110d5b0 <__reset+0xfb0ed5b0>
8110dc54:	d9402117 	ldw	r5,132(sp)
8110dc58:	d9002017 	ldw	r4,128(sp)
8110dc5c:	d9801a04 	addi	r6,sp,104
8110dc60:	d9c02b15 	stw	r7,172(sp)
8110dc64:	db402a15 	stw	r13,168(sp)
8110dc68:	110cea40 	call	8110cea4 <__sprint_r.part.0>
8110dc6c:	d9c02b17 	ldw	r7,172(sp)
8110dc70:	db402a17 	ldw	r13,168(sp)
8110dc74:	1000241e 	bne	r2,zero,8110dd08 <___vfiprintf_internal_r+0xd50>
8110dc78:	d9401b17 	ldw	r5,108(sp)
8110dc7c:	d8801c17 	ldw	r2,112(sp)
8110dc80:	d811883a 	mov	r8,sp
8110dc84:	29000044 	addi	r4,r5,1
8110dc88:	003fd806 	br	8110dbec <__reset+0xfb0edbec>
8110dc8c:	d9401b17 	ldw	r5,108(sp)
8110dc90:	00e044b4 	movhi	r3,33042
8110dc94:	18e09204 	addi	r3,r3,-32184
8110dc98:	d8c02415 	stw	r3,144(sp)
8110dc9c:	29400044 	addi	r5,r5,1
8110dca0:	d8c02417 	ldw	r3,144(sp)
8110dca4:	14c5883a 	add	r2,r2,r19
8110dca8:	44c00115 	stw	r19,4(r8)
8110dcac:	40c00015 	stw	r3,0(r8)
8110dcb0:	d8801c15 	stw	r2,112(sp)
8110dcb4:	d9401b15 	stw	r5,108(sp)
8110dcb8:	00c001c4 	movi	r3,7
8110dcbc:	1940070e 	bge	r3,r5,8110dcdc <___vfiprintf_internal_r+0xd24>
8110dcc0:	103e4826 	beq	r2,zero,8110d5e4 <__reset+0xfb0ed5e4>
8110dcc4:	d9402117 	ldw	r5,132(sp)
8110dcc8:	d9002017 	ldw	r4,128(sp)
8110dccc:	d9801a04 	addi	r6,sp,104
8110dcd0:	110cea40 	call	8110cea4 <__sprint_r.part.0>
8110dcd4:	10000c1e 	bne	r2,zero,8110dd08 <___vfiprintf_internal_r+0xd50>
8110dcd8:	d8801c17 	ldw	r2,112(sp)
8110dcdc:	8c80010e 	bge	r17,r18,8110dce4 <___vfiprintf_internal_r+0xd2c>
8110dce0:	9023883a 	mov	r17,r18
8110dce4:	da802317 	ldw	r10,140(sp)
8110dce8:	5455883a 	add	r10,r10,r17
8110dcec:	da802315 	stw	r10,140(sp)
8110dcf0:	103e4126 	beq	r2,zero,8110d5f8 <__reset+0xfb0ed5f8>
8110dcf4:	d9402117 	ldw	r5,132(sp)
8110dcf8:	d9002017 	ldw	r4,128(sp)
8110dcfc:	d9801a04 	addi	r6,sp,104
8110dd00:	110cea40 	call	8110cea4 <__sprint_r.part.0>
8110dd04:	103e3c26 	beq	r2,zero,8110d5f8 <__reset+0xfb0ed5f8>
8110dd08:	dd002117 	ldw	r20,132(sp)
8110dd0c:	a080030b 	ldhu	r2,12(r20)
8110dd10:	1080100c 	andi	r2,r2,64
8110dd14:	1001231e 	bne	r2,zero,8110e1a4 <___vfiprintf_internal_r+0x11ec>
8110dd18:	d8802317 	ldw	r2,140(sp)
8110dd1c:	003d7b06 	br	8110d30c <__reset+0xfb0ed30c>
8110dd20:	1000991e 	bne	r2,zero,8110df88 <___vfiprintf_internal_r+0xfd0>
8110dd24:	00c00044 	movi	r3,1
8110dd28:	9805883a 	mov	r2,r19
8110dd2c:	dd400015 	stw	r21,0(sp)
8110dd30:	dcc00115 	stw	r19,4(sp)
8110dd34:	dcc01c15 	stw	r19,112(sp)
8110dd38:	d8c01b15 	stw	r3,108(sp)
8110dd3c:	d811883a 	mov	r8,sp
8110dd40:	42000204 	addi	r8,r8,8
8110dd44:	a2c0010c 	andi	r11,r20,4
8110dd48:	583fe426 	beq	r11,zero,8110dcdc <__reset+0xfb0edcdc>
8110dd4c:	8ca7c83a 	sub	r19,r17,r18
8110dd50:	04ffe20e 	bge	zero,r19,8110dcdc <__reset+0xfb0edcdc>
8110dd54:	01c00404 	movi	r7,16
8110dd58:	3cffcc0e 	bge	r7,r19,8110dc8c <__reset+0xfb0edc8c>
8110dd5c:	02a044b4 	movhi	r10,33042
8110dd60:	52a09204 	addi	r10,r10,-32184
8110dd64:	d9001b17 	ldw	r4,108(sp)
8110dd68:	da802415 	stw	r10,144(sp)
8110dd6c:	382b883a 	mov	r21,r7
8110dd70:	050001c4 	movi	r20,7
8110dd74:	df002017 	ldw	fp,128(sp)
8110dd78:	00000506 	br	8110dd90 <___vfiprintf_internal_r+0xdd8>
8110dd7c:	21400084 	addi	r5,r4,2
8110dd80:	42000204 	addi	r8,r8,8
8110dd84:	1809883a 	mov	r4,r3
8110dd88:	9cfffc04 	addi	r19,r19,-16
8110dd8c:	acffc40e 	bge	r21,r19,8110dca0 <__reset+0xfb0edca0>
8110dd90:	10800404 	addi	r2,r2,16
8110dd94:	20c00044 	addi	r3,r4,1
8110dd98:	45800015 	stw	r22,0(r8)
8110dd9c:	45400115 	stw	r21,4(r8)
8110dda0:	d8801c15 	stw	r2,112(sp)
8110dda4:	d8c01b15 	stw	r3,108(sp)
8110dda8:	a0fff40e 	bge	r20,r3,8110dd7c <__reset+0xfb0edd7c>
8110ddac:	1000041e 	bne	r2,zero,8110ddc0 <___vfiprintf_internal_r+0xe08>
8110ddb0:	01400044 	movi	r5,1
8110ddb4:	0009883a 	mov	r4,zero
8110ddb8:	d811883a 	mov	r8,sp
8110ddbc:	003ff206 	br	8110dd88 <__reset+0xfb0edd88>
8110ddc0:	d9402117 	ldw	r5,132(sp)
8110ddc4:	d9801a04 	addi	r6,sp,104
8110ddc8:	e009883a 	mov	r4,fp
8110ddcc:	110cea40 	call	8110cea4 <__sprint_r.part.0>
8110ddd0:	103fcd1e 	bne	r2,zero,8110dd08 <__reset+0xfb0edd08>
8110ddd4:	d9001b17 	ldw	r4,108(sp)
8110ddd8:	d8801c17 	ldw	r2,112(sp)
8110dddc:	d811883a 	mov	r8,sp
8110dde0:	21400044 	addi	r5,r4,1
8110dde4:	003fe806 	br	8110dd88 <__reset+0xfb0edd88>
8110dde8:	d9402117 	ldw	r5,132(sp)
8110ddec:	d9002017 	ldw	r4,128(sp)
8110ddf0:	d9801a04 	addi	r6,sp,104
8110ddf4:	d9c02b15 	stw	r7,172(sp)
8110ddf8:	db402a15 	stw	r13,168(sp)
8110ddfc:	110cea40 	call	8110cea4 <__sprint_r.part.0>
8110de00:	d9c02b17 	ldw	r7,172(sp)
8110de04:	db402a17 	ldw	r13,168(sp)
8110de08:	103fbf1e 	bne	r2,zero,8110dd08 <__reset+0xfb0edd08>
8110de0c:	d9401b17 	ldw	r5,108(sp)
8110de10:	d8801c17 	ldw	r2,112(sp)
8110de14:	d811883a 	mov	r8,sp
8110de18:	29800044 	addi	r6,r5,1
8110de1c:	003dc406 	br	8110d530 <__reset+0xfb0ed530>
8110de20:	1000d21e 	bne	r2,zero,8110e16c <___vfiprintf_internal_r+0x11b4>
8110de24:	d8c01d87 	ldb	r3,118(sp)
8110de28:	18009526 	beq	r3,zero,8110e080 <___vfiprintf_internal_r+0x10c8>
8110de2c:	00800044 	movi	r2,1
8110de30:	d8c01d84 	addi	r3,sp,118
8110de34:	1009883a 	mov	r4,r2
8110de38:	d8c00015 	stw	r3,0(sp)
8110de3c:	d8800115 	stw	r2,4(sp)
8110de40:	d811883a 	mov	r8,sp
8110de44:	200b883a 	mov	r5,r4
8110de48:	42000204 	addi	r8,r8,8
8110de4c:	21000044 	addi	r4,r4,1
8110de50:	003d9706 	br	8110d4b0 <__reset+0xfb0ed4b0>
8110de54:	d9001d04 	addi	r4,sp,116
8110de58:	00800084 	movi	r2,2
8110de5c:	d9000015 	stw	r4,0(sp)
8110de60:	d8800115 	stw	r2,4(sp)
8110de64:	1809883a 	mov	r4,r3
8110de68:	d811883a 	mov	r8,sp
8110de6c:	200b883a 	mov	r5,r4
8110de70:	42000204 	addi	r8,r8,8
8110de74:	21000044 	addi	r4,r4,1
8110de78:	003f4e06 	br	8110dbb4 <__reset+0xfb0edbb4>
8110de7c:	d8001d85 	stb	zero,118(sp)
8110de80:	48005016 	blt	r9,zero,8110dfc4 <___vfiprintf_internal_r+0x100c>
8110de84:	00ffdfc4 	movi	r3,-129
8110de88:	94c4b03a 	or	r2,r18,r19
8110de8c:	a0e8703a 	and	r20,r20,r3
8110de90:	103d4426 	beq	r2,zero,8110d3a4 <__reset+0xfb0ed3a4>
8110de94:	0039883a 	mov	fp,zero
8110de98:	d9002617 	ldw	r4,152(sp)
8110de9c:	dd401a04 	addi	r21,sp,104
8110dea0:	908003cc 	andi	r2,r18,15
8110dea4:	9806973a 	slli	r3,r19,28
8110dea8:	2085883a 	add	r2,r4,r2
8110deac:	9024d13a 	srli	r18,r18,4
8110deb0:	10800003 	ldbu	r2,0(r2)
8110deb4:	9826d13a 	srli	r19,r19,4
8110deb8:	ad7fffc4 	addi	r21,r21,-1
8110debc:	1ca4b03a 	or	r18,r3,r18
8110dec0:	a8800005 	stb	r2,0(r21)
8110dec4:	94c4b03a 	or	r2,r18,r19
8110dec8:	103ff51e 	bne	r2,zero,8110dea0 <__reset+0xfb0edea0>
8110decc:	003e5906 	br	8110d834 <__reset+0xfb0ed834>
8110ded0:	d9402117 	ldw	r5,132(sp)
8110ded4:	d9002017 	ldw	r4,128(sp)
8110ded8:	d9801a04 	addi	r6,sp,104
8110dedc:	110cea40 	call	8110cea4 <__sprint_r.part.0>
8110dee0:	103f891e 	bne	r2,zero,8110dd08 <__reset+0xfb0edd08>
8110dee4:	d8801c17 	ldw	r2,112(sp)
8110dee8:	d811883a 	mov	r8,sp
8110deec:	003f9506 	br	8110dd44 <__reset+0xfb0edd44>
8110def0:	d9402117 	ldw	r5,132(sp)
8110def4:	d9002017 	ldw	r4,128(sp)
8110def8:	d9801a04 	addi	r6,sp,104
8110defc:	110cea40 	call	8110cea4 <__sprint_r.part.0>
8110df00:	103f811e 	bne	r2,zero,8110dd08 <__reset+0xfb0edd08>
8110df04:	d811883a 	mov	r8,sp
8110df08:	003ced06 	br	8110d2c0 <__reset+0xfb0ed2c0>
8110df0c:	d9402117 	ldw	r5,132(sp)
8110df10:	d9002017 	ldw	r4,128(sp)
8110df14:	d9801a04 	addi	r6,sp,104
8110df18:	da402c15 	stw	r9,176(sp)
8110df1c:	db802a15 	stw	r14,168(sp)
8110df20:	110cea40 	call	8110cea4 <__sprint_r.part.0>
8110df24:	da402c17 	ldw	r9,176(sp)
8110df28:	db802a17 	ldw	r14,168(sp)
8110df2c:	103f761e 	bne	r2,zero,8110dd08 <__reset+0xfb0edd08>
8110df30:	d9401b17 	ldw	r5,108(sp)
8110df34:	d8801c17 	ldw	r2,112(sp)
8110df38:	d811883a 	mov	r8,sp
8110df3c:	29000044 	addi	r4,r5,1
8110df40:	003d5b06 	br	8110d4b0 <__reset+0xfb0ed4b0>
8110df44:	d9402117 	ldw	r5,132(sp)
8110df48:	d9002017 	ldw	r4,128(sp)
8110df4c:	d9801a04 	addi	r6,sp,104
8110df50:	da402c15 	stw	r9,176(sp)
8110df54:	110cea40 	call	8110cea4 <__sprint_r.part.0>
8110df58:	da402c17 	ldw	r9,176(sp)
8110df5c:	103f6a1e 	bne	r2,zero,8110dd08 <__reset+0xfb0edd08>
8110df60:	d9401b17 	ldw	r5,108(sp)
8110df64:	d8801c17 	ldw	r2,112(sp)
8110df68:	d811883a 	mov	r8,sp
8110df6c:	29000044 	addi	r4,r5,1
8110df70:	003f1006 	br	8110dbb4 <__reset+0xfb0edbb4>
8110df74:	1000c31e 	bne	r2,zero,8110e284 <___vfiprintf_internal_r+0x12cc>
8110df78:	01000044 	movi	r4,1
8110df7c:	000b883a 	mov	r5,zero
8110df80:	d811883a 	mov	r8,sp
8110df84:	003f0d06 	br	8110dbbc <__reset+0xfb0edbbc>
8110df88:	d9402117 	ldw	r5,132(sp)
8110df8c:	d9002017 	ldw	r4,128(sp)
8110df90:	d9801a04 	addi	r6,sp,104
8110df94:	110cea40 	call	8110cea4 <__sprint_r.part.0>
8110df98:	103f5b1e 	bne	r2,zero,8110dd08 <__reset+0xfb0edd08>
8110df9c:	d9001b17 	ldw	r4,108(sp)
8110dfa0:	d8801c17 	ldw	r2,112(sp)
8110dfa4:	d811883a 	mov	r8,sp
8110dfa8:	21000044 	addi	r4,r4,1
8110dfac:	003d8006 	br	8110d5b0 <__reset+0xfb0ed5b0>
8110dfb0:	012044b4 	movhi	r4,33042
8110dfb4:	21202d04 	addi	r4,r4,-32588
8110dfb8:	d9002615 	stw	r4,152(sp)
8110dfbc:	d8c02215 	stw	r3,136(sp)
8110dfc0:	1029883a 	mov	r20,r2
8110dfc4:	94c4b03a 	or	r2,r18,r19
8110dfc8:	103fb21e 	bne	r2,zero,8110de94 <__reset+0xfb0ede94>
8110dfcc:	0039883a 	mov	fp,zero
8110dfd0:	00800084 	movi	r2,2
8110dfd4:	003e6b06 	br	8110d984 <__reset+0xfb0ed984>
8110dfd8:	da802217 	ldw	r10,136(sp)
8110dfdc:	d8001d85 	stb	zero,118(sp)
8110dfe0:	0027883a 	mov	r19,zero
8110dfe4:	50800104 	addi	r2,r10,4
8110dfe8:	54800017 	ldw	r18,0(r10)
8110dfec:	483e6016 	blt	r9,zero,8110d970 <__reset+0xfb0ed970>
8110dff0:	00ffdfc4 	movi	r3,-129
8110dff4:	d8802215 	stw	r2,136(sp)
8110dff8:	a0e8703a 	and	r20,r20,r3
8110dffc:	0039883a 	mov	fp,zero
8110e000:	903ebb26 	beq	r18,zero,8110daf0 <__reset+0xfb0edaf0>
8110e004:	00800244 	movi	r2,9
8110e008:	14bdee36 	bltu	r2,r18,8110d7c4 <__reset+0xfb0ed7c4>
8110e00c:	003eba06 	br	8110daf8 <__reset+0xfb0edaf8>
8110e010:	00800c04 	movi	r2,48
8110e014:	d8c01d45 	stb	r3,117(sp)
8110e018:	d8801d05 	stb	r2,116(sp)
8110e01c:	d8001d85 	stb	zero,118(sp)
8110e020:	a0c00094 	ori	r3,r20,2
8110e024:	4800a916 	blt	r9,zero,8110e2cc <___vfiprintf_internal_r+0x1314>
8110e028:	00bfdfc4 	movi	r2,-129
8110e02c:	a096703a 	and	r11,r20,r2
8110e030:	5d000094 	ori	r20,r11,2
8110e034:	0039883a 	mov	fp,zero
8110e038:	003f9706 	br	8110de98 <__reset+0xfb0ede98>
8110e03c:	8025883a 	mov	r18,r16
8110e040:	003c2e06 	br	8110d0fc <__reset+0xfb0ed0fc>
8110e044:	00a044b4 	movhi	r2,33042
8110e048:	10a02d04 	addi	r2,r2,-32588
8110e04c:	0039883a 	mov	fp,zero
8110e050:	d8802615 	stw	r2,152(sp)
8110e054:	003f9006 	br	8110de98 <__reset+0xfb0ede98>
8110e058:	04a5c83a 	sub	r18,zero,r18
8110e05c:	07000b44 	movi	fp,45
8110e060:	9004c03a 	cmpne	r2,r18,zero
8110e064:	04e7c83a 	sub	r19,zero,r19
8110e068:	df001d85 	stb	fp,118(sp)
8110e06c:	98a7c83a 	sub	r19,r19,r2
8110e070:	48009f16 	blt	r9,zero,8110e2f0 <___vfiprintf_internal_r+0x1338>
8110e074:	00bfdfc4 	movi	r2,-129
8110e078:	a0a8703a 	and	r20,r20,r2
8110e07c:	003dd006 	br	8110d7c0 <__reset+0xfb0ed7c0>
8110e080:	70004c26 	beq	r14,zero,8110e1b4 <___vfiprintf_internal_r+0x11fc>
8110e084:	00800084 	movi	r2,2
8110e088:	d8c01d04 	addi	r3,sp,116
8110e08c:	d8c00015 	stw	r3,0(sp)
8110e090:	d8800115 	stw	r2,4(sp)
8110e094:	01000044 	movi	r4,1
8110e098:	d811883a 	mov	r8,sp
8110e09c:	003f7306 	br	8110de6c <__reset+0xfb0ede6c>
8110e0a0:	a080100c 	andi	r2,r20,64
8110e0a4:	da802217 	ldw	r10,136(sp)
8110e0a8:	103e0626 	beq	r2,zero,8110d8c4 <__reset+0xfb0ed8c4>
8110e0ac:	5480000f 	ldh	r18,0(r10)
8110e0b0:	52800104 	addi	r10,r10,4
8110e0b4:	da802215 	stw	r10,136(sp)
8110e0b8:	9027d7fa 	srai	r19,r18,31
8110e0bc:	9805883a 	mov	r2,r19
8110e0c0:	003db806 	br	8110d7a4 <__reset+0xfb0ed7a4>
8110e0c4:	a080040c 	andi	r2,r20,16
8110e0c8:	1000091e 	bne	r2,zero,8110e0f0 <___vfiprintf_internal_r+0x1138>
8110e0cc:	a2c0100c 	andi	r11,r20,64
8110e0d0:	58000726 	beq	r11,zero,8110e0f0 <___vfiprintf_internal_r+0x1138>
8110e0d4:	da802217 	ldw	r10,136(sp)
8110e0d8:	50800017 	ldw	r2,0(r10)
8110e0dc:	52800104 	addi	r10,r10,4
8110e0e0:	da802215 	stw	r10,136(sp)
8110e0e4:	da802317 	ldw	r10,140(sp)
8110e0e8:	1280000d 	sth	r10,0(r2)
8110e0ec:	003be706 	br	8110d08c <__reset+0xfb0ed08c>
8110e0f0:	da802217 	ldw	r10,136(sp)
8110e0f4:	50800017 	ldw	r2,0(r10)
8110e0f8:	52800104 	addi	r10,r10,4
8110e0fc:	da802215 	stw	r10,136(sp)
8110e100:	da802317 	ldw	r10,140(sp)
8110e104:	12800015 	stw	r10,0(r2)
8110e108:	003be006 	br	8110d08c <__reset+0xfb0ed08c>
8110e10c:	a080100c 	andi	r2,r20,64
8110e110:	da802217 	ldw	r10,136(sp)
8110e114:	10003026 	beq	r2,zero,8110e1d8 <___vfiprintf_internal_r+0x1220>
8110e118:	5480000b 	ldhu	r18,0(r10)
8110e11c:	52800104 	addi	r10,r10,4
8110e120:	0027883a 	mov	r19,zero
8110e124:	da802215 	stw	r10,136(sp)
8110e128:	003d8006 	br	8110d72c <__reset+0xfb0ed72c>
8110e12c:	80c00007 	ldb	r3,0(r16)
8110e130:	003c0006 	br	8110d134 <__reset+0xfb0ed134>
8110e134:	a080100c 	andi	r2,r20,64
8110e138:	d8001d85 	stb	zero,118(sp)
8110e13c:	da802217 	ldw	r10,136(sp)
8110e140:	1000201e 	bne	r2,zero,8110e1c4 <___vfiprintf_internal_r+0x120c>
8110e144:	50800104 	addi	r2,r10,4
8110e148:	54800017 	ldw	r18,0(r10)
8110e14c:	0027883a 	mov	r19,zero
8110e150:	483def0e 	bge	r9,zero,8110d910 <__reset+0xfb0ed910>
8110e154:	94c6b03a 	or	r3,r18,r19
8110e158:	d8802215 	stw	r2,136(sp)
8110e15c:	183d4e1e 	bne	r3,zero,8110d698 <__reset+0xfb0ed698>
8110e160:	0039883a 	mov	fp,zero
8110e164:	0005883a 	mov	r2,zero
8110e168:	003e0606 	br	8110d984 <__reset+0xfb0ed984>
8110e16c:	d9402117 	ldw	r5,132(sp)
8110e170:	d9002017 	ldw	r4,128(sp)
8110e174:	d9801a04 	addi	r6,sp,104
8110e178:	da402c15 	stw	r9,176(sp)
8110e17c:	db802a15 	stw	r14,168(sp)
8110e180:	110cea40 	call	8110cea4 <__sprint_r.part.0>
8110e184:	da402c17 	ldw	r9,176(sp)
8110e188:	db802a17 	ldw	r14,168(sp)
8110e18c:	103ede1e 	bne	r2,zero,8110dd08 <__reset+0xfb0edd08>
8110e190:	d9401b17 	ldw	r5,108(sp)
8110e194:	d8801c17 	ldw	r2,112(sp)
8110e198:	d811883a 	mov	r8,sp
8110e19c:	29000044 	addi	r4,r5,1
8110e1a0:	003e7406 	br	8110db74 <__reset+0xfb0edb74>
8110e1a4:	00bfffc4 	movi	r2,-1
8110e1a8:	003c5806 	br	8110d30c <__reset+0xfb0ed30c>
8110e1ac:	d811883a 	mov	r8,sp
8110e1b0:	003ee806 	br	8110dd54 <__reset+0xfb0edd54>
8110e1b4:	000b883a 	mov	r5,zero
8110e1b8:	01000044 	movi	r4,1
8110e1bc:	d811883a 	mov	r8,sp
8110e1c0:	003e7c06 	br	8110dbb4 <__reset+0xfb0edbb4>
8110e1c4:	50800104 	addi	r2,r10,4
8110e1c8:	5480000b 	ldhu	r18,0(r10)
8110e1cc:	0027883a 	mov	r19,zero
8110e1d0:	483dcf0e 	bge	r9,zero,8110d910 <__reset+0xfb0ed910>
8110e1d4:	003fdf06 	br	8110e154 <__reset+0xfb0ee154>
8110e1d8:	54800017 	ldw	r18,0(r10)
8110e1dc:	52800104 	addi	r10,r10,4
8110e1e0:	0027883a 	mov	r19,zero
8110e1e4:	da802215 	stw	r10,136(sp)
8110e1e8:	003d5006 	br	8110d72c <__reset+0xfb0ed72c>
8110e1ec:	50800104 	addi	r2,r10,4
8110e1f0:	5480000b 	ldhu	r18,0(r10)
8110e1f4:	0027883a 	mov	r19,zero
8110e1f8:	483f7d0e 	bge	r9,zero,8110dff0 <__reset+0xfb0edff0>
8110e1fc:	003ddc06 	br	8110d970 <__reset+0xfb0ed970>
8110e200:	d8c02215 	stw	r3,136(sp)
8110e204:	0039883a 	mov	fp,zero
8110e208:	003ddb06 	br	8110d978 <__reset+0xfb0ed978>
8110e20c:	02a044b4 	movhi	r10,33042
8110e210:	52a08e04 	addi	r10,r10,-32200
8110e214:	da802415 	stw	r10,144(sp)
8110e218:	003e8306 	br	8110dc28 <__reset+0xfb0edc28>
8110e21c:	d8801c17 	ldw	r2,112(sp)
8110e220:	dd002117 	ldw	r20,132(sp)
8110e224:	103eb926 	beq	r2,zero,8110dd0c <__reset+0xfb0edd0c>
8110e228:	d9002017 	ldw	r4,128(sp)
8110e22c:	d9801a04 	addi	r6,sp,104
8110e230:	a00b883a 	mov	r5,r20
8110e234:	110cea40 	call	8110cea4 <__sprint_r.part.0>
8110e238:	003eb406 	br	8110dd0c <__reset+0xfb0edd0c>
8110e23c:	80c00043 	ldbu	r3,1(r16)
8110e240:	a5000814 	ori	r20,r20,32
8110e244:	84000044 	addi	r16,r16,1
8110e248:	18c03fcc 	andi	r3,r3,255
8110e24c:	18c0201c 	xori	r3,r3,128
8110e250:	18ffe004 	addi	r3,r3,-128
8110e254:	003bb706 	br	8110d134 <__reset+0xfb0ed134>
8110e258:	a809883a 	mov	r4,r21
8110e25c:	d8c02a15 	stw	r3,168(sp)
8110e260:	da002b15 	stw	r8,172(sp)
8110e264:	11058ec0 	call	811058ec <strlen>
8110e268:	d8c02a17 	ldw	r3,168(sp)
8110e26c:	1027883a 	mov	r19,r2
8110e270:	df001d83 	ldbu	fp,118(sp)
8110e274:	d8c02215 	stw	r3,136(sp)
8110e278:	0013883a 	mov	r9,zero
8110e27c:	da002b17 	ldw	r8,172(sp)
8110e280:	003c4d06 	br	8110d3b8 <__reset+0xfb0ed3b8>
8110e284:	d9402117 	ldw	r5,132(sp)
8110e288:	d9002017 	ldw	r4,128(sp)
8110e28c:	d9801a04 	addi	r6,sp,104
8110e290:	da402c15 	stw	r9,176(sp)
8110e294:	110cea40 	call	8110cea4 <__sprint_r.part.0>
8110e298:	da402c17 	ldw	r9,176(sp)
8110e29c:	103e9a1e 	bne	r2,zero,8110dd08 <__reset+0xfb0edd08>
8110e2a0:	d9401b17 	ldw	r5,108(sp)
8110e2a4:	d8801c17 	ldw	r2,112(sp)
8110e2a8:	d811883a 	mov	r8,sp
8110e2ac:	29000044 	addi	r4,r5,1
8110e2b0:	003e4206 	br	8110dbbc <__reset+0xfb0edbbc>
8110e2b4:	d9401b17 	ldw	r5,108(sp)
8110e2b8:	012044b4 	movhi	r4,33042
8110e2bc:	21209204 	addi	r4,r4,-32184
8110e2c0:	d9002415 	stw	r4,144(sp)
8110e2c4:	29400044 	addi	r5,r5,1
8110e2c8:	003c6d06 	br	8110d480 <__reset+0xfb0ed480>
8110e2cc:	0039883a 	mov	fp,zero
8110e2d0:	00800084 	movi	r2,2
8110e2d4:	10803fcc 	andi	r2,r2,255
8110e2d8:	01000044 	movi	r4,1
8110e2dc:	11001e26 	beq	r2,r4,8110e358 <___vfiprintf_internal_r+0x13a0>
8110e2e0:	01000084 	movi	r4,2
8110e2e4:	11001e1e 	bne	r2,r4,8110e360 <___vfiprintf_internal_r+0x13a8>
8110e2e8:	1829883a 	mov	r20,r3
8110e2ec:	003eea06 	br	8110de98 <__reset+0xfb0ede98>
8110e2f0:	a007883a 	mov	r3,r20
8110e2f4:	00800044 	movi	r2,1
8110e2f8:	003ff606 	br	8110e2d4 <__reset+0xfb0ee2d4>
8110e2fc:	00800184 	movi	r2,6
8110e300:	1240012e 	bgeu	r2,r9,8110e308 <___vfiprintf_internal_r+0x1350>
8110e304:	1013883a 	mov	r9,r2
8110e308:	4827883a 	mov	r19,r9
8110e30c:	4825883a 	mov	r18,r9
8110e310:	48001516 	blt	r9,zero,8110e368 <___vfiprintf_internal_r+0x13b0>
8110e314:	056044b4 	movhi	r21,33042
8110e318:	d8c02215 	stw	r3,136(sp)
8110e31c:	ad603204 	addi	r21,r21,-32568
8110e320:	003d1406 	br	8110d774 <__reset+0xfb0ed774>
8110e324:	02a044b4 	movhi	r10,33042
8110e328:	52a08e04 	addi	r10,r10,-32200
8110e32c:	da802415 	stw	r10,144(sp)
8110e330:	200d883a 	mov	r6,r4
8110e334:	003c9106 	br	8110d57c <__reset+0xfb0ed57c>
8110e338:	5021883a 	mov	r16,r10
8110e33c:	0013883a 	mov	r9,zero
8110e340:	003b7d06 	br	8110d138 <__reset+0xfb0ed138>
8110e344:	4827883a 	mov	r19,r9
8110e348:	df001d83 	ldbu	fp,118(sp)
8110e34c:	d8c02215 	stw	r3,136(sp)
8110e350:	0013883a 	mov	r9,zero
8110e354:	003c1806 	br	8110d3b8 <__reset+0xfb0ed3b8>
8110e358:	1829883a 	mov	r20,r3
8110e35c:	003d1806 	br	8110d7c0 <__reset+0xfb0ed7c0>
8110e360:	1829883a 	mov	r20,r3
8110e364:	003ccd06 	br	8110d69c <__reset+0xfb0ed69c>
8110e368:	0025883a 	mov	r18,zero
8110e36c:	003fe906 	br	8110e314 <__reset+0xfb0ee314>
8110e370:	d8802217 	ldw	r2,136(sp)
8110e374:	80c00043 	ldbu	r3,1(r16)
8110e378:	5021883a 	mov	r16,r10
8110e37c:	12400017 	ldw	r9,0(r2)
8110e380:	10800104 	addi	r2,r2,4
8110e384:	d8802215 	stw	r2,136(sp)
8110e388:	483faf0e 	bge	r9,zero,8110e248 <__reset+0xfb0ee248>
8110e38c:	18c03fcc 	andi	r3,r3,255
8110e390:	18c0201c 	xori	r3,r3,128
8110e394:	027fffc4 	movi	r9,-1
8110e398:	18ffe004 	addi	r3,r3,-128
8110e39c:	003b6506 	br	8110d134 <__reset+0xfb0ed134>
8110e3a0:	d9c01d85 	stb	r7,118(sp)
8110e3a4:	003ca006 	br	8110d628 <__reset+0xfb0ed628>
8110e3a8:	d9c01d85 	stb	r7,118(sp)
8110e3ac:	003cad06 	br	8110d664 <__reset+0xfb0ed664>
8110e3b0:	d9c01d85 	stb	r7,118(sp)
8110e3b4:	003d7d06 	br	8110d9ac <__reset+0xfb0ed9ac>
8110e3b8:	d9c01d85 	stb	r7,118(sp)
8110e3bc:	003d5f06 	br	8110d93c <__reset+0xfb0ed93c>
8110e3c0:	a080004c 	andi	r2,r20,1
8110e3c4:	0039883a 	mov	fp,zero
8110e3c8:	10000526 	beq	r2,zero,8110e3e0 <___vfiprintf_internal_r+0x1428>
8110e3cc:	00800c04 	movi	r2,48
8110e3d0:	d88019c5 	stb	r2,103(sp)
8110e3d4:	dcc02717 	ldw	r19,156(sp)
8110e3d8:	dd4019c4 	addi	r21,sp,103
8110e3dc:	003bf606 	br	8110d3b8 <__reset+0xfb0ed3b8>
8110e3e0:	0027883a 	mov	r19,zero
8110e3e4:	dd401a04 	addi	r21,sp,104
8110e3e8:	003bf306 	br	8110d3b8 <__reset+0xfb0ed3b8>
8110e3ec:	d9c01d85 	stb	r7,118(sp)
8110e3f0:	003dc806 	br	8110db14 <__reset+0xfb0edb14>
8110e3f4:	d9c01d85 	stb	r7,118(sp)
8110e3f8:	003d3a06 	br	8110d8e4 <__reset+0xfb0ed8e4>
8110e3fc:	d9c01d85 	stb	r7,118(sp)
8110e400:	003d2a06 	br	8110d8ac <__reset+0xfb0ed8ac>
8110e404:	d9c01d85 	stb	r7,118(sp)
8110e408:	003cde06 	br	8110d784 <__reset+0xfb0ed784>
8110e40c:	d9c01d85 	stb	r7,118(sp)
8110e410:	003cbc06 	br	8110d704 <__reset+0xfb0ed704>

8110e414 <__vfiprintf_internal>:
8110e414:	00a044b4 	movhi	r2,33042
8110e418:	10a82a04 	addi	r2,r2,-24408
8110e41c:	300f883a 	mov	r7,r6
8110e420:	280d883a 	mov	r6,r5
8110e424:	200b883a 	mov	r5,r4
8110e428:	11000017 	ldw	r4,0(r2)
8110e42c:	110cfb81 	jmpi	8110cfb8 <___vfiprintf_internal_r>

8110e430 <__sbprintf>:
8110e430:	2880030b 	ldhu	r2,12(r5)
8110e434:	2ac01917 	ldw	r11,100(r5)
8110e438:	2a80038b 	ldhu	r10,14(r5)
8110e43c:	2a400717 	ldw	r9,28(r5)
8110e440:	2a000917 	ldw	r8,36(r5)
8110e444:	defee204 	addi	sp,sp,-1144
8110e448:	00c10004 	movi	r3,1024
8110e44c:	dc011a15 	stw	r16,1128(sp)
8110e450:	10bfff4c 	andi	r2,r2,65533
8110e454:	2821883a 	mov	r16,r5
8110e458:	d8cb883a 	add	r5,sp,r3
8110e45c:	dc811c15 	stw	r18,1136(sp)
8110e460:	dc411b15 	stw	r17,1132(sp)
8110e464:	dfc11d15 	stw	ra,1140(sp)
8110e468:	2025883a 	mov	r18,r4
8110e46c:	d881030d 	sth	r2,1036(sp)
8110e470:	dac11915 	stw	r11,1124(sp)
8110e474:	da81038d 	sth	r10,1038(sp)
8110e478:	da410715 	stw	r9,1052(sp)
8110e47c:	da010915 	stw	r8,1060(sp)
8110e480:	dec10015 	stw	sp,1024(sp)
8110e484:	dec10415 	stw	sp,1040(sp)
8110e488:	d8c10215 	stw	r3,1032(sp)
8110e48c:	d8c10515 	stw	r3,1044(sp)
8110e490:	d8010615 	stw	zero,1048(sp)
8110e494:	110cfb80 	call	8110cfb8 <___vfiprintf_internal_r>
8110e498:	1023883a 	mov	r17,r2
8110e49c:	10000416 	blt	r2,zero,8110e4b0 <__sbprintf+0x80>
8110e4a0:	d9410004 	addi	r5,sp,1024
8110e4a4:	9009883a 	mov	r4,r18
8110e4a8:	110984c0 	call	8110984c <_fflush_r>
8110e4ac:	10000d1e 	bne	r2,zero,8110e4e4 <__sbprintf+0xb4>
8110e4b0:	d881030b 	ldhu	r2,1036(sp)
8110e4b4:	1080100c 	andi	r2,r2,64
8110e4b8:	10000326 	beq	r2,zero,8110e4c8 <__sbprintf+0x98>
8110e4bc:	8080030b 	ldhu	r2,12(r16)
8110e4c0:	10801014 	ori	r2,r2,64
8110e4c4:	8080030d 	sth	r2,12(r16)
8110e4c8:	8805883a 	mov	r2,r17
8110e4cc:	dfc11d17 	ldw	ra,1140(sp)
8110e4d0:	dc811c17 	ldw	r18,1136(sp)
8110e4d4:	dc411b17 	ldw	r17,1132(sp)
8110e4d8:	dc011a17 	ldw	r16,1128(sp)
8110e4dc:	dec11e04 	addi	sp,sp,1144
8110e4e0:	f800283a 	ret
8110e4e4:	047fffc4 	movi	r17,-1
8110e4e8:	003ff106 	br	8110e4b0 <__reset+0xfb0ee4b0>

8110e4ec <__swbuf_r>:
8110e4ec:	defffb04 	addi	sp,sp,-20
8110e4f0:	dcc00315 	stw	r19,12(sp)
8110e4f4:	dc800215 	stw	r18,8(sp)
8110e4f8:	dc000015 	stw	r16,0(sp)
8110e4fc:	dfc00415 	stw	ra,16(sp)
8110e500:	dc400115 	stw	r17,4(sp)
8110e504:	2025883a 	mov	r18,r4
8110e508:	2827883a 	mov	r19,r5
8110e50c:	3021883a 	mov	r16,r6
8110e510:	20000226 	beq	r4,zero,8110e51c <__swbuf_r+0x30>
8110e514:	20800e17 	ldw	r2,56(r4)
8110e518:	10004226 	beq	r2,zero,8110e624 <__swbuf_r+0x138>
8110e51c:	80800617 	ldw	r2,24(r16)
8110e520:	8100030b 	ldhu	r4,12(r16)
8110e524:	80800215 	stw	r2,8(r16)
8110e528:	2080020c 	andi	r2,r4,8
8110e52c:	10003626 	beq	r2,zero,8110e608 <__swbuf_r+0x11c>
8110e530:	80c00417 	ldw	r3,16(r16)
8110e534:	18003426 	beq	r3,zero,8110e608 <__swbuf_r+0x11c>
8110e538:	2088000c 	andi	r2,r4,8192
8110e53c:	9c403fcc 	andi	r17,r19,255
8110e540:	10001a26 	beq	r2,zero,8110e5ac <__swbuf_r+0xc0>
8110e544:	80800017 	ldw	r2,0(r16)
8110e548:	81000517 	ldw	r4,20(r16)
8110e54c:	10c7c83a 	sub	r3,r2,r3
8110e550:	1900200e 	bge	r3,r4,8110e5d4 <__swbuf_r+0xe8>
8110e554:	18c00044 	addi	r3,r3,1
8110e558:	81000217 	ldw	r4,8(r16)
8110e55c:	11400044 	addi	r5,r2,1
8110e560:	81400015 	stw	r5,0(r16)
8110e564:	213fffc4 	addi	r4,r4,-1
8110e568:	81000215 	stw	r4,8(r16)
8110e56c:	14c00005 	stb	r19,0(r2)
8110e570:	80800517 	ldw	r2,20(r16)
8110e574:	10c01e26 	beq	r2,r3,8110e5f0 <__swbuf_r+0x104>
8110e578:	8080030b 	ldhu	r2,12(r16)
8110e57c:	1080004c 	andi	r2,r2,1
8110e580:	10000226 	beq	r2,zero,8110e58c <__swbuf_r+0xa0>
8110e584:	00800284 	movi	r2,10
8110e588:	88801926 	beq	r17,r2,8110e5f0 <__swbuf_r+0x104>
8110e58c:	8805883a 	mov	r2,r17
8110e590:	dfc00417 	ldw	ra,16(sp)
8110e594:	dcc00317 	ldw	r19,12(sp)
8110e598:	dc800217 	ldw	r18,8(sp)
8110e59c:	dc400117 	ldw	r17,4(sp)
8110e5a0:	dc000017 	ldw	r16,0(sp)
8110e5a4:	dec00504 	addi	sp,sp,20
8110e5a8:	f800283a 	ret
8110e5ac:	81401917 	ldw	r5,100(r16)
8110e5b0:	00b7ffc4 	movi	r2,-8193
8110e5b4:	21080014 	ori	r4,r4,8192
8110e5b8:	2884703a 	and	r2,r5,r2
8110e5bc:	80801915 	stw	r2,100(r16)
8110e5c0:	80800017 	ldw	r2,0(r16)
8110e5c4:	8100030d 	sth	r4,12(r16)
8110e5c8:	81000517 	ldw	r4,20(r16)
8110e5cc:	10c7c83a 	sub	r3,r2,r3
8110e5d0:	193fe016 	blt	r3,r4,8110e554 <__reset+0xfb0ee554>
8110e5d4:	800b883a 	mov	r5,r16
8110e5d8:	9009883a 	mov	r4,r18
8110e5dc:	110984c0 	call	8110984c <_fflush_r>
8110e5e0:	1000071e 	bne	r2,zero,8110e600 <__swbuf_r+0x114>
8110e5e4:	80800017 	ldw	r2,0(r16)
8110e5e8:	00c00044 	movi	r3,1
8110e5ec:	003fda06 	br	8110e558 <__reset+0xfb0ee558>
8110e5f0:	800b883a 	mov	r5,r16
8110e5f4:	9009883a 	mov	r4,r18
8110e5f8:	110984c0 	call	8110984c <_fflush_r>
8110e5fc:	103fe326 	beq	r2,zero,8110e58c <__reset+0xfb0ee58c>
8110e600:	00bfffc4 	movi	r2,-1
8110e604:	003fe206 	br	8110e590 <__reset+0xfb0ee590>
8110e608:	800b883a 	mov	r5,r16
8110e60c:	9009883a 	mov	r4,r18
8110e610:	1107c540 	call	81107c54 <__swsetup_r>
8110e614:	103ffa1e 	bne	r2,zero,8110e600 <__reset+0xfb0ee600>
8110e618:	8100030b 	ldhu	r4,12(r16)
8110e61c:	80c00417 	ldw	r3,16(r16)
8110e620:	003fc506 	br	8110e538 <__reset+0xfb0ee538>
8110e624:	1109c280 	call	81109c28 <__sinit>
8110e628:	003fbc06 	br	8110e51c <__reset+0xfb0ee51c>

8110e62c <__swbuf>:
8110e62c:	00a044b4 	movhi	r2,33042
8110e630:	10a82a04 	addi	r2,r2,-24408
8110e634:	280d883a 	mov	r6,r5
8110e638:	200b883a 	mov	r5,r4
8110e63c:	11000017 	ldw	r4,0(r2)
8110e640:	110e4ec1 	jmpi	8110e4ec <__swbuf_r>

8110e644 <_write_r>:
8110e644:	defffd04 	addi	sp,sp,-12
8110e648:	2805883a 	mov	r2,r5
8110e64c:	dc000015 	stw	r16,0(sp)
8110e650:	042044b4 	movhi	r16,33042
8110e654:	dc400115 	stw	r17,4(sp)
8110e658:	300b883a 	mov	r5,r6
8110e65c:	84284704 	addi	r16,r16,-24292
8110e660:	2023883a 	mov	r17,r4
8110e664:	380d883a 	mov	r6,r7
8110e668:	1009883a 	mov	r4,r2
8110e66c:	dfc00215 	stw	ra,8(sp)
8110e670:	80000015 	stw	zero,0(r16)
8110e674:	11122c40 	call	811122c4 <write>
8110e678:	00ffffc4 	movi	r3,-1
8110e67c:	10c00526 	beq	r2,r3,8110e694 <_write_r+0x50>
8110e680:	dfc00217 	ldw	ra,8(sp)
8110e684:	dc400117 	ldw	r17,4(sp)
8110e688:	dc000017 	ldw	r16,0(sp)
8110e68c:	dec00304 	addi	sp,sp,12
8110e690:	f800283a 	ret
8110e694:	80c00017 	ldw	r3,0(r16)
8110e698:	183ff926 	beq	r3,zero,8110e680 <__reset+0xfb0ee680>
8110e69c:	88c00015 	stw	r3,0(r17)
8110e6a0:	003ff706 	br	8110e680 <__reset+0xfb0ee680>

8110e6a4 <_close_r>:
8110e6a4:	defffd04 	addi	sp,sp,-12
8110e6a8:	dc000015 	stw	r16,0(sp)
8110e6ac:	042044b4 	movhi	r16,33042
8110e6b0:	dc400115 	stw	r17,4(sp)
8110e6b4:	84284704 	addi	r16,r16,-24292
8110e6b8:	2023883a 	mov	r17,r4
8110e6bc:	2809883a 	mov	r4,r5
8110e6c0:	dfc00215 	stw	ra,8(sp)
8110e6c4:	80000015 	stw	zero,0(r16)
8110e6c8:	11119ac0 	call	811119ac <close>
8110e6cc:	00ffffc4 	movi	r3,-1
8110e6d0:	10c00526 	beq	r2,r3,8110e6e8 <_close_r+0x44>
8110e6d4:	dfc00217 	ldw	ra,8(sp)
8110e6d8:	dc400117 	ldw	r17,4(sp)
8110e6dc:	dc000017 	ldw	r16,0(sp)
8110e6e0:	dec00304 	addi	sp,sp,12
8110e6e4:	f800283a 	ret
8110e6e8:	80c00017 	ldw	r3,0(r16)
8110e6ec:	183ff926 	beq	r3,zero,8110e6d4 <__reset+0xfb0ee6d4>
8110e6f0:	88c00015 	stw	r3,0(r17)
8110e6f4:	003ff706 	br	8110e6d4 <__reset+0xfb0ee6d4>

8110e6f8 <_calloc_r>:
8110e6f8:	298b383a 	mul	r5,r5,r6
8110e6fc:	defffe04 	addi	sp,sp,-8
8110e700:	dfc00115 	stw	ra,4(sp)
8110e704:	dc000015 	stw	r16,0(sp)
8110e708:	110a9880 	call	8110a988 <_malloc_r>
8110e70c:	10002926 	beq	r2,zero,8110e7b4 <_calloc_r+0xbc>
8110e710:	11bfff17 	ldw	r6,-4(r2)
8110e714:	1021883a 	mov	r16,r2
8110e718:	00bfff04 	movi	r2,-4
8110e71c:	308c703a 	and	r6,r6,r2
8110e720:	00c00904 	movi	r3,36
8110e724:	308d883a 	add	r6,r6,r2
8110e728:	19801636 	bltu	r3,r6,8110e784 <_calloc_r+0x8c>
8110e72c:	008004c4 	movi	r2,19
8110e730:	11800b2e 	bgeu	r2,r6,8110e760 <_calloc_r+0x68>
8110e734:	80000015 	stw	zero,0(r16)
8110e738:	80000115 	stw	zero,4(r16)
8110e73c:	008006c4 	movi	r2,27
8110e740:	11801a2e 	bgeu	r2,r6,8110e7ac <_calloc_r+0xb4>
8110e744:	80000215 	stw	zero,8(r16)
8110e748:	80000315 	stw	zero,12(r16)
8110e74c:	30c0151e 	bne	r6,r3,8110e7a4 <_calloc_r+0xac>
8110e750:	80000415 	stw	zero,16(r16)
8110e754:	80800604 	addi	r2,r16,24
8110e758:	80000515 	stw	zero,20(r16)
8110e75c:	00000106 	br	8110e764 <_calloc_r+0x6c>
8110e760:	8005883a 	mov	r2,r16
8110e764:	10000015 	stw	zero,0(r2)
8110e768:	10000115 	stw	zero,4(r2)
8110e76c:	10000215 	stw	zero,8(r2)
8110e770:	8005883a 	mov	r2,r16
8110e774:	dfc00117 	ldw	ra,4(sp)
8110e778:	dc000017 	ldw	r16,0(sp)
8110e77c:	dec00204 	addi	sp,sp,8
8110e780:	f800283a 	ret
8110e784:	000b883a 	mov	r5,zero
8110e788:	8009883a 	mov	r4,r16
8110e78c:	110b3d40 	call	8110b3d4 <memset>
8110e790:	8005883a 	mov	r2,r16
8110e794:	dfc00117 	ldw	ra,4(sp)
8110e798:	dc000017 	ldw	r16,0(sp)
8110e79c:	dec00204 	addi	sp,sp,8
8110e7a0:	f800283a 	ret
8110e7a4:	80800404 	addi	r2,r16,16
8110e7a8:	003fee06 	br	8110e764 <__reset+0xfb0ee764>
8110e7ac:	80800204 	addi	r2,r16,8
8110e7b0:	003fec06 	br	8110e764 <__reset+0xfb0ee764>
8110e7b4:	0005883a 	mov	r2,zero
8110e7b8:	003fee06 	br	8110e774 <__reset+0xfb0ee774>

8110e7bc <_fclose_r>:
8110e7bc:	28003926 	beq	r5,zero,8110e8a4 <_fclose_r+0xe8>
8110e7c0:	defffc04 	addi	sp,sp,-16
8110e7c4:	dc400115 	stw	r17,4(sp)
8110e7c8:	dc000015 	stw	r16,0(sp)
8110e7cc:	dfc00315 	stw	ra,12(sp)
8110e7d0:	dc800215 	stw	r18,8(sp)
8110e7d4:	2023883a 	mov	r17,r4
8110e7d8:	2821883a 	mov	r16,r5
8110e7dc:	20000226 	beq	r4,zero,8110e7e8 <_fclose_r+0x2c>
8110e7e0:	20800e17 	ldw	r2,56(r4)
8110e7e4:	10002726 	beq	r2,zero,8110e884 <_fclose_r+0xc8>
8110e7e8:	8080030f 	ldh	r2,12(r16)
8110e7ec:	1000071e 	bne	r2,zero,8110e80c <_fclose_r+0x50>
8110e7f0:	0005883a 	mov	r2,zero
8110e7f4:	dfc00317 	ldw	ra,12(sp)
8110e7f8:	dc800217 	ldw	r18,8(sp)
8110e7fc:	dc400117 	ldw	r17,4(sp)
8110e800:	dc000017 	ldw	r16,0(sp)
8110e804:	dec00404 	addi	sp,sp,16
8110e808:	f800283a 	ret
8110e80c:	800b883a 	mov	r5,r16
8110e810:	8809883a 	mov	r4,r17
8110e814:	11096300 	call	81109630 <__sflush_r>
8110e818:	1025883a 	mov	r18,r2
8110e81c:	80800b17 	ldw	r2,44(r16)
8110e820:	10000426 	beq	r2,zero,8110e834 <_fclose_r+0x78>
8110e824:	81400717 	ldw	r5,28(r16)
8110e828:	8809883a 	mov	r4,r17
8110e82c:	103ee83a 	callr	r2
8110e830:	10001616 	blt	r2,zero,8110e88c <_fclose_r+0xd0>
8110e834:	8080030b 	ldhu	r2,12(r16)
8110e838:	1080200c 	andi	r2,r2,128
8110e83c:	1000151e 	bne	r2,zero,8110e894 <_fclose_r+0xd8>
8110e840:	81400c17 	ldw	r5,48(r16)
8110e844:	28000526 	beq	r5,zero,8110e85c <_fclose_r+0xa0>
8110e848:	80801004 	addi	r2,r16,64
8110e84c:	28800226 	beq	r5,r2,8110e858 <_fclose_r+0x9c>
8110e850:	8809883a 	mov	r4,r17
8110e854:	1109d9c0 	call	81109d9c <_free_r>
8110e858:	80000c15 	stw	zero,48(r16)
8110e85c:	81401117 	ldw	r5,68(r16)
8110e860:	28000326 	beq	r5,zero,8110e870 <_fclose_r+0xb4>
8110e864:	8809883a 	mov	r4,r17
8110e868:	1109d9c0 	call	81109d9c <_free_r>
8110e86c:	80001115 	stw	zero,68(r16)
8110e870:	1109c380 	call	81109c38 <__sfp_lock_acquire>
8110e874:	8000030d 	sth	zero,12(r16)
8110e878:	1109c3c0 	call	81109c3c <__sfp_lock_release>
8110e87c:	9005883a 	mov	r2,r18
8110e880:	003fdc06 	br	8110e7f4 <__reset+0xfb0ee7f4>
8110e884:	1109c280 	call	81109c28 <__sinit>
8110e888:	003fd706 	br	8110e7e8 <__reset+0xfb0ee7e8>
8110e88c:	04bfffc4 	movi	r18,-1
8110e890:	003fe806 	br	8110e834 <__reset+0xfb0ee834>
8110e894:	81400417 	ldw	r5,16(r16)
8110e898:	8809883a 	mov	r4,r17
8110e89c:	1109d9c0 	call	81109d9c <_free_r>
8110e8a0:	003fe706 	br	8110e840 <__reset+0xfb0ee840>
8110e8a4:	0005883a 	mov	r2,zero
8110e8a8:	f800283a 	ret

8110e8ac <fclose>:
8110e8ac:	00a044b4 	movhi	r2,33042
8110e8b0:	10a82a04 	addi	r2,r2,-24408
8110e8b4:	200b883a 	mov	r5,r4
8110e8b8:	11000017 	ldw	r4,0(r2)
8110e8bc:	110e7bc1 	jmpi	8110e7bc <_fclose_r>

8110e8c0 <__fputwc>:
8110e8c0:	defff804 	addi	sp,sp,-32
8110e8c4:	dcc00415 	stw	r19,16(sp)
8110e8c8:	dc800315 	stw	r18,12(sp)
8110e8cc:	dc000115 	stw	r16,4(sp)
8110e8d0:	dfc00715 	stw	ra,28(sp)
8110e8d4:	dd400615 	stw	r21,24(sp)
8110e8d8:	dd000515 	stw	r20,20(sp)
8110e8dc:	dc400215 	stw	r17,8(sp)
8110e8e0:	2027883a 	mov	r19,r4
8110e8e4:	2825883a 	mov	r18,r5
8110e8e8:	3021883a 	mov	r16,r6
8110e8ec:	110a7780 	call	8110a778 <__locale_mb_cur_max>
8110e8f0:	00c00044 	movi	r3,1
8110e8f4:	10c03e26 	beq	r2,r3,8110e9f0 <__fputwc+0x130>
8110e8f8:	81c01704 	addi	r7,r16,92
8110e8fc:	900d883a 	mov	r6,r18
8110e900:	d80b883a 	mov	r5,sp
8110e904:	9809883a 	mov	r4,r19
8110e908:	110ec380 	call	8110ec38 <_wcrtomb_r>
8110e90c:	1029883a 	mov	r20,r2
8110e910:	00bfffc4 	movi	r2,-1
8110e914:	a0802026 	beq	r20,r2,8110e998 <__fputwc+0xd8>
8110e918:	d9400003 	ldbu	r5,0(sp)
8110e91c:	a0001c26 	beq	r20,zero,8110e990 <__fputwc+0xd0>
8110e920:	0023883a 	mov	r17,zero
8110e924:	05400284 	movi	r21,10
8110e928:	00000906 	br	8110e950 <__fputwc+0x90>
8110e92c:	80800017 	ldw	r2,0(r16)
8110e930:	11400005 	stb	r5,0(r2)
8110e934:	80c00017 	ldw	r3,0(r16)
8110e938:	18c00044 	addi	r3,r3,1
8110e93c:	80c00015 	stw	r3,0(r16)
8110e940:	8c400044 	addi	r17,r17,1
8110e944:	dc45883a 	add	r2,sp,r17
8110e948:	8d00112e 	bgeu	r17,r20,8110e990 <__fputwc+0xd0>
8110e94c:	11400003 	ldbu	r5,0(r2)
8110e950:	80c00217 	ldw	r3,8(r16)
8110e954:	18ffffc4 	addi	r3,r3,-1
8110e958:	80c00215 	stw	r3,8(r16)
8110e95c:	183ff30e 	bge	r3,zero,8110e92c <__reset+0xfb0ee92c>
8110e960:	80800617 	ldw	r2,24(r16)
8110e964:	18801916 	blt	r3,r2,8110e9cc <__fputwc+0x10c>
8110e968:	80800017 	ldw	r2,0(r16)
8110e96c:	11400005 	stb	r5,0(r2)
8110e970:	80800017 	ldw	r2,0(r16)
8110e974:	10c00003 	ldbu	r3,0(r2)
8110e978:	10800044 	addi	r2,r2,1
8110e97c:	1d402326 	beq	r3,r21,8110ea0c <__fputwc+0x14c>
8110e980:	80800015 	stw	r2,0(r16)
8110e984:	8c400044 	addi	r17,r17,1
8110e988:	dc45883a 	add	r2,sp,r17
8110e98c:	8d3fef36 	bltu	r17,r20,8110e94c <__reset+0xfb0ee94c>
8110e990:	9005883a 	mov	r2,r18
8110e994:	00000406 	br	8110e9a8 <__fputwc+0xe8>
8110e998:	80c0030b 	ldhu	r3,12(r16)
8110e99c:	a005883a 	mov	r2,r20
8110e9a0:	18c01014 	ori	r3,r3,64
8110e9a4:	80c0030d 	sth	r3,12(r16)
8110e9a8:	dfc00717 	ldw	ra,28(sp)
8110e9ac:	dd400617 	ldw	r21,24(sp)
8110e9b0:	dd000517 	ldw	r20,20(sp)
8110e9b4:	dcc00417 	ldw	r19,16(sp)
8110e9b8:	dc800317 	ldw	r18,12(sp)
8110e9bc:	dc400217 	ldw	r17,8(sp)
8110e9c0:	dc000117 	ldw	r16,4(sp)
8110e9c4:	dec00804 	addi	sp,sp,32
8110e9c8:	f800283a 	ret
8110e9cc:	800d883a 	mov	r6,r16
8110e9d0:	29403fcc 	andi	r5,r5,255
8110e9d4:	9809883a 	mov	r4,r19
8110e9d8:	110e4ec0 	call	8110e4ec <__swbuf_r>
8110e9dc:	10bfffe0 	cmpeqi	r2,r2,-1
8110e9e0:	10803fcc 	andi	r2,r2,255
8110e9e4:	103fd626 	beq	r2,zero,8110e940 <__reset+0xfb0ee940>
8110e9e8:	00bfffc4 	movi	r2,-1
8110e9ec:	003fee06 	br	8110e9a8 <__reset+0xfb0ee9a8>
8110e9f0:	90ffffc4 	addi	r3,r18,-1
8110e9f4:	01003f84 	movi	r4,254
8110e9f8:	20ffbf36 	bltu	r4,r3,8110e8f8 <__reset+0xfb0ee8f8>
8110e9fc:	900b883a 	mov	r5,r18
8110ea00:	dc800005 	stb	r18,0(sp)
8110ea04:	1029883a 	mov	r20,r2
8110ea08:	003fc506 	br	8110e920 <__reset+0xfb0ee920>
8110ea0c:	800d883a 	mov	r6,r16
8110ea10:	a80b883a 	mov	r5,r21
8110ea14:	9809883a 	mov	r4,r19
8110ea18:	110e4ec0 	call	8110e4ec <__swbuf_r>
8110ea1c:	10bfffe0 	cmpeqi	r2,r2,-1
8110ea20:	003fef06 	br	8110e9e0 <__reset+0xfb0ee9e0>

8110ea24 <_fputwc_r>:
8110ea24:	3080030b 	ldhu	r2,12(r6)
8110ea28:	10c8000c 	andi	r3,r2,8192
8110ea2c:	1800051e 	bne	r3,zero,8110ea44 <_fputwc_r+0x20>
8110ea30:	30c01917 	ldw	r3,100(r6)
8110ea34:	10880014 	ori	r2,r2,8192
8110ea38:	3080030d 	sth	r2,12(r6)
8110ea3c:	18880014 	ori	r2,r3,8192
8110ea40:	30801915 	stw	r2,100(r6)
8110ea44:	110e8c01 	jmpi	8110e8c0 <__fputwc>

8110ea48 <fputwc>:
8110ea48:	00a044b4 	movhi	r2,33042
8110ea4c:	defffc04 	addi	sp,sp,-16
8110ea50:	10a82a04 	addi	r2,r2,-24408
8110ea54:	dc000115 	stw	r16,4(sp)
8110ea58:	14000017 	ldw	r16,0(r2)
8110ea5c:	dc400215 	stw	r17,8(sp)
8110ea60:	dfc00315 	stw	ra,12(sp)
8110ea64:	2023883a 	mov	r17,r4
8110ea68:	80000226 	beq	r16,zero,8110ea74 <fputwc+0x2c>
8110ea6c:	80800e17 	ldw	r2,56(r16)
8110ea70:	10001026 	beq	r2,zero,8110eab4 <fputwc+0x6c>
8110ea74:	2880030b 	ldhu	r2,12(r5)
8110ea78:	10c8000c 	andi	r3,r2,8192
8110ea7c:	1800051e 	bne	r3,zero,8110ea94 <fputwc+0x4c>
8110ea80:	28c01917 	ldw	r3,100(r5)
8110ea84:	10880014 	ori	r2,r2,8192
8110ea88:	2880030d 	sth	r2,12(r5)
8110ea8c:	18880014 	ori	r2,r3,8192
8110ea90:	28801915 	stw	r2,100(r5)
8110ea94:	280d883a 	mov	r6,r5
8110ea98:	8009883a 	mov	r4,r16
8110ea9c:	880b883a 	mov	r5,r17
8110eaa0:	dfc00317 	ldw	ra,12(sp)
8110eaa4:	dc400217 	ldw	r17,8(sp)
8110eaa8:	dc000117 	ldw	r16,4(sp)
8110eaac:	dec00404 	addi	sp,sp,16
8110eab0:	110e8c01 	jmpi	8110e8c0 <__fputwc>
8110eab4:	8009883a 	mov	r4,r16
8110eab8:	d9400015 	stw	r5,0(sp)
8110eabc:	1109c280 	call	81109c28 <__sinit>
8110eac0:	d9400017 	ldw	r5,0(sp)
8110eac4:	003feb06 	br	8110ea74 <__reset+0xfb0eea74>

8110eac8 <_fstat_r>:
8110eac8:	defffd04 	addi	sp,sp,-12
8110eacc:	2805883a 	mov	r2,r5
8110ead0:	dc000015 	stw	r16,0(sp)
8110ead4:	042044b4 	movhi	r16,33042
8110ead8:	dc400115 	stw	r17,4(sp)
8110eadc:	84284704 	addi	r16,r16,-24292
8110eae0:	2023883a 	mov	r17,r4
8110eae4:	300b883a 	mov	r5,r6
8110eae8:	1009883a 	mov	r4,r2
8110eaec:	dfc00215 	stw	ra,8(sp)
8110eaf0:	80000015 	stw	zero,0(r16)
8110eaf4:	1111b040 	call	81111b04 <fstat>
8110eaf8:	00ffffc4 	movi	r3,-1
8110eafc:	10c00526 	beq	r2,r3,8110eb14 <_fstat_r+0x4c>
8110eb00:	dfc00217 	ldw	ra,8(sp)
8110eb04:	dc400117 	ldw	r17,4(sp)
8110eb08:	dc000017 	ldw	r16,0(sp)
8110eb0c:	dec00304 	addi	sp,sp,12
8110eb10:	f800283a 	ret
8110eb14:	80c00017 	ldw	r3,0(r16)
8110eb18:	183ff926 	beq	r3,zero,8110eb00 <__reset+0xfb0eeb00>
8110eb1c:	88c00015 	stw	r3,0(r17)
8110eb20:	003ff706 	br	8110eb00 <__reset+0xfb0eeb00>

8110eb24 <_isatty_r>:
8110eb24:	defffd04 	addi	sp,sp,-12
8110eb28:	dc000015 	stw	r16,0(sp)
8110eb2c:	042044b4 	movhi	r16,33042
8110eb30:	dc400115 	stw	r17,4(sp)
8110eb34:	84284704 	addi	r16,r16,-24292
8110eb38:	2023883a 	mov	r17,r4
8110eb3c:	2809883a 	mov	r4,r5
8110eb40:	dfc00215 	stw	ra,8(sp)
8110eb44:	80000015 	stw	zero,0(r16)
8110eb48:	1111bf00 	call	81111bf0 <isatty>
8110eb4c:	00ffffc4 	movi	r3,-1
8110eb50:	10c00526 	beq	r2,r3,8110eb68 <_isatty_r+0x44>
8110eb54:	dfc00217 	ldw	ra,8(sp)
8110eb58:	dc400117 	ldw	r17,4(sp)
8110eb5c:	dc000017 	ldw	r16,0(sp)
8110eb60:	dec00304 	addi	sp,sp,12
8110eb64:	f800283a 	ret
8110eb68:	80c00017 	ldw	r3,0(r16)
8110eb6c:	183ff926 	beq	r3,zero,8110eb54 <__reset+0xfb0eeb54>
8110eb70:	88c00015 	stw	r3,0(r17)
8110eb74:	003ff706 	br	8110eb54 <__reset+0xfb0eeb54>

8110eb78 <_lseek_r>:
8110eb78:	defffd04 	addi	sp,sp,-12
8110eb7c:	2805883a 	mov	r2,r5
8110eb80:	dc000015 	stw	r16,0(sp)
8110eb84:	042044b4 	movhi	r16,33042
8110eb88:	dc400115 	stw	r17,4(sp)
8110eb8c:	300b883a 	mov	r5,r6
8110eb90:	84284704 	addi	r16,r16,-24292
8110eb94:	2023883a 	mov	r17,r4
8110eb98:	380d883a 	mov	r6,r7
8110eb9c:	1009883a 	mov	r4,r2
8110eba0:	dfc00215 	stw	ra,8(sp)
8110eba4:	80000015 	stw	zero,0(r16)
8110eba8:	1111cd00 	call	81111cd0 <lseek>
8110ebac:	00ffffc4 	movi	r3,-1
8110ebb0:	10c00526 	beq	r2,r3,8110ebc8 <_lseek_r+0x50>
8110ebb4:	dfc00217 	ldw	ra,8(sp)
8110ebb8:	dc400117 	ldw	r17,4(sp)
8110ebbc:	dc000017 	ldw	r16,0(sp)
8110ebc0:	dec00304 	addi	sp,sp,12
8110ebc4:	f800283a 	ret
8110ebc8:	80c00017 	ldw	r3,0(r16)
8110ebcc:	183ff926 	beq	r3,zero,8110ebb4 <__reset+0xfb0eebb4>
8110ebd0:	88c00015 	stw	r3,0(r17)
8110ebd4:	003ff706 	br	8110ebb4 <__reset+0xfb0eebb4>

8110ebd8 <_read_r>:
8110ebd8:	defffd04 	addi	sp,sp,-12
8110ebdc:	2805883a 	mov	r2,r5
8110ebe0:	dc000015 	stw	r16,0(sp)
8110ebe4:	042044b4 	movhi	r16,33042
8110ebe8:	dc400115 	stw	r17,4(sp)
8110ebec:	300b883a 	mov	r5,r6
8110ebf0:	84284704 	addi	r16,r16,-24292
8110ebf4:	2023883a 	mov	r17,r4
8110ebf8:	380d883a 	mov	r6,r7
8110ebfc:	1009883a 	mov	r4,r2
8110ec00:	dfc00215 	stw	ra,8(sp)
8110ec04:	80000015 	stw	zero,0(r16)
8110ec08:	1111ea40 	call	81111ea4 <read>
8110ec0c:	00ffffc4 	movi	r3,-1
8110ec10:	10c00526 	beq	r2,r3,8110ec28 <_read_r+0x50>
8110ec14:	dfc00217 	ldw	ra,8(sp)
8110ec18:	dc400117 	ldw	r17,4(sp)
8110ec1c:	dc000017 	ldw	r16,0(sp)
8110ec20:	dec00304 	addi	sp,sp,12
8110ec24:	f800283a 	ret
8110ec28:	80c00017 	ldw	r3,0(r16)
8110ec2c:	183ff926 	beq	r3,zero,8110ec14 <__reset+0xfb0eec14>
8110ec30:	88c00015 	stw	r3,0(r17)
8110ec34:	003ff706 	br	8110ec14 <__reset+0xfb0eec14>

8110ec38 <_wcrtomb_r>:
8110ec38:	defff604 	addi	sp,sp,-40
8110ec3c:	00a044b4 	movhi	r2,33042
8110ec40:	dc800815 	stw	r18,32(sp)
8110ec44:	dc400715 	stw	r17,28(sp)
8110ec48:	dc000615 	stw	r16,24(sp)
8110ec4c:	10a82e04 	addi	r2,r2,-24392
8110ec50:	dfc00915 	stw	ra,36(sp)
8110ec54:	2021883a 	mov	r16,r4
8110ec58:	3823883a 	mov	r17,r7
8110ec5c:	14800017 	ldw	r18,0(r2)
8110ec60:	28001426 	beq	r5,zero,8110ecb4 <_wcrtomb_r+0x7c>
8110ec64:	d9400415 	stw	r5,16(sp)
8110ec68:	d9800515 	stw	r6,20(sp)
8110ec6c:	110a76c0 	call	8110a76c <__locale_charset>
8110ec70:	d9800517 	ldw	r6,20(sp)
8110ec74:	d9400417 	ldw	r5,16(sp)
8110ec78:	100f883a 	mov	r7,r2
8110ec7c:	dc400015 	stw	r17,0(sp)
8110ec80:	8009883a 	mov	r4,r16
8110ec84:	903ee83a 	callr	r18
8110ec88:	00ffffc4 	movi	r3,-1
8110ec8c:	10c0031e 	bne	r2,r3,8110ec9c <_wcrtomb_r+0x64>
8110ec90:	88000015 	stw	zero,0(r17)
8110ec94:	00c02284 	movi	r3,138
8110ec98:	80c00015 	stw	r3,0(r16)
8110ec9c:	dfc00917 	ldw	ra,36(sp)
8110eca0:	dc800817 	ldw	r18,32(sp)
8110eca4:	dc400717 	ldw	r17,28(sp)
8110eca8:	dc000617 	ldw	r16,24(sp)
8110ecac:	dec00a04 	addi	sp,sp,40
8110ecb0:	f800283a 	ret
8110ecb4:	110a76c0 	call	8110a76c <__locale_charset>
8110ecb8:	100f883a 	mov	r7,r2
8110ecbc:	dc400015 	stw	r17,0(sp)
8110ecc0:	000d883a 	mov	r6,zero
8110ecc4:	d9400104 	addi	r5,sp,4
8110ecc8:	8009883a 	mov	r4,r16
8110eccc:	903ee83a 	callr	r18
8110ecd0:	003fed06 	br	8110ec88 <__reset+0xfb0eec88>

8110ecd4 <wcrtomb>:
8110ecd4:	defff604 	addi	sp,sp,-40
8110ecd8:	00a044b4 	movhi	r2,33042
8110ecdc:	dc800615 	stw	r18,24(sp)
8110ece0:	dc400515 	stw	r17,20(sp)
8110ece4:	10a82a04 	addi	r2,r2,-24408
8110ece8:	dfc00915 	stw	ra,36(sp)
8110ecec:	dd000815 	stw	r20,32(sp)
8110ecf0:	dcc00715 	stw	r19,28(sp)
8110ecf4:	dc000415 	stw	r16,16(sp)
8110ecf8:	3025883a 	mov	r18,r6
8110ecfc:	14400017 	ldw	r17,0(r2)
8110ed00:	20001926 	beq	r4,zero,8110ed68 <wcrtomb+0x94>
8110ed04:	00a044b4 	movhi	r2,33042
8110ed08:	10a82e04 	addi	r2,r2,-24392
8110ed0c:	15000017 	ldw	r20,0(r2)
8110ed10:	2021883a 	mov	r16,r4
8110ed14:	2827883a 	mov	r19,r5
8110ed18:	110a76c0 	call	8110a76c <__locale_charset>
8110ed1c:	100f883a 	mov	r7,r2
8110ed20:	dc800015 	stw	r18,0(sp)
8110ed24:	980d883a 	mov	r6,r19
8110ed28:	800b883a 	mov	r5,r16
8110ed2c:	8809883a 	mov	r4,r17
8110ed30:	a03ee83a 	callr	r20
8110ed34:	00ffffc4 	movi	r3,-1
8110ed38:	10c0031e 	bne	r2,r3,8110ed48 <wcrtomb+0x74>
8110ed3c:	90000015 	stw	zero,0(r18)
8110ed40:	00c02284 	movi	r3,138
8110ed44:	88c00015 	stw	r3,0(r17)
8110ed48:	dfc00917 	ldw	ra,36(sp)
8110ed4c:	dd000817 	ldw	r20,32(sp)
8110ed50:	dcc00717 	ldw	r19,28(sp)
8110ed54:	dc800617 	ldw	r18,24(sp)
8110ed58:	dc400517 	ldw	r17,20(sp)
8110ed5c:	dc000417 	ldw	r16,16(sp)
8110ed60:	dec00a04 	addi	sp,sp,40
8110ed64:	f800283a 	ret
8110ed68:	00a044b4 	movhi	r2,33042
8110ed6c:	10a82e04 	addi	r2,r2,-24392
8110ed70:	14000017 	ldw	r16,0(r2)
8110ed74:	110a76c0 	call	8110a76c <__locale_charset>
8110ed78:	100f883a 	mov	r7,r2
8110ed7c:	dc800015 	stw	r18,0(sp)
8110ed80:	000d883a 	mov	r6,zero
8110ed84:	d9400104 	addi	r5,sp,4
8110ed88:	8809883a 	mov	r4,r17
8110ed8c:	803ee83a 	callr	r16
8110ed90:	003fe806 	br	8110ed34 <__reset+0xfb0eed34>

8110ed94 <__ascii_wctomb>:
8110ed94:	28000526 	beq	r5,zero,8110edac <__ascii_wctomb+0x18>
8110ed98:	00803fc4 	movi	r2,255
8110ed9c:	11800536 	bltu	r2,r6,8110edb4 <__ascii_wctomb+0x20>
8110eda0:	29800005 	stb	r6,0(r5)
8110eda4:	00800044 	movi	r2,1
8110eda8:	f800283a 	ret
8110edac:	0005883a 	mov	r2,zero
8110edb0:	f800283a 	ret
8110edb4:	00802284 	movi	r2,138
8110edb8:	20800015 	stw	r2,0(r4)
8110edbc:	00bfffc4 	movi	r2,-1
8110edc0:	f800283a 	ret

8110edc4 <_wctomb_r>:
8110edc4:	00a044b4 	movhi	r2,33042
8110edc8:	defff904 	addi	sp,sp,-28
8110edcc:	10a82e04 	addi	r2,r2,-24392
8110edd0:	dfc00615 	stw	ra,24(sp)
8110edd4:	dc400515 	stw	r17,20(sp)
8110edd8:	dc000415 	stw	r16,16(sp)
8110eddc:	3823883a 	mov	r17,r7
8110ede0:	14000017 	ldw	r16,0(r2)
8110ede4:	d9000115 	stw	r4,4(sp)
8110ede8:	d9400215 	stw	r5,8(sp)
8110edec:	d9800315 	stw	r6,12(sp)
8110edf0:	110a76c0 	call	8110a76c <__locale_charset>
8110edf4:	d9800317 	ldw	r6,12(sp)
8110edf8:	d9400217 	ldw	r5,8(sp)
8110edfc:	d9000117 	ldw	r4,4(sp)
8110ee00:	100f883a 	mov	r7,r2
8110ee04:	dc400015 	stw	r17,0(sp)
8110ee08:	803ee83a 	callr	r16
8110ee0c:	dfc00617 	ldw	ra,24(sp)
8110ee10:	dc400517 	ldw	r17,20(sp)
8110ee14:	dc000417 	ldw	r16,16(sp)
8110ee18:	dec00704 	addi	sp,sp,28
8110ee1c:	f800283a 	ret

8110ee20 <__udivdi3>:
8110ee20:	defff504 	addi	sp,sp,-44
8110ee24:	dcc00415 	stw	r19,16(sp)
8110ee28:	dc000115 	stw	r16,4(sp)
8110ee2c:	dfc00a15 	stw	ra,40(sp)
8110ee30:	df000915 	stw	fp,36(sp)
8110ee34:	ddc00815 	stw	r23,32(sp)
8110ee38:	dd800715 	stw	r22,28(sp)
8110ee3c:	dd400615 	stw	r21,24(sp)
8110ee40:	dd000515 	stw	r20,20(sp)
8110ee44:	dc800315 	stw	r18,12(sp)
8110ee48:	dc400215 	stw	r17,8(sp)
8110ee4c:	2027883a 	mov	r19,r4
8110ee50:	2821883a 	mov	r16,r5
8110ee54:	3800411e 	bne	r7,zero,8110ef5c <__udivdi3+0x13c>
8110ee58:	3023883a 	mov	r17,r6
8110ee5c:	2025883a 	mov	r18,r4
8110ee60:	2980522e 	bgeu	r5,r6,8110efac <__udivdi3+0x18c>
8110ee64:	00bfffd4 	movui	r2,65535
8110ee68:	282d883a 	mov	r22,r5
8110ee6c:	1180a836 	bltu	r2,r6,8110f110 <__udivdi3+0x2f0>
8110ee70:	00803fc4 	movi	r2,255
8110ee74:	1185803a 	cmpltu	r2,r2,r6
8110ee78:	100490fa 	slli	r2,r2,3
8110ee7c:	3086d83a 	srl	r3,r6,r2
8110ee80:	01204474 	movhi	r4,33041
8110ee84:	211fe2c4 	addi	r4,r4,32651
8110ee88:	20c7883a 	add	r3,r4,r3
8110ee8c:	18c00003 	ldbu	r3,0(r3)
8110ee90:	1885883a 	add	r2,r3,r2
8110ee94:	00c00804 	movi	r3,32
8110ee98:	1887c83a 	sub	r3,r3,r2
8110ee9c:	18000526 	beq	r3,zero,8110eeb4 <__udivdi3+0x94>
8110eea0:	80e0983a 	sll	r16,r16,r3
8110eea4:	9884d83a 	srl	r2,r19,r2
8110eea8:	30e2983a 	sll	r17,r6,r3
8110eeac:	98e4983a 	sll	r18,r19,r3
8110eeb0:	142cb03a 	or	r22,r2,r16
8110eeb4:	882ad43a 	srli	r21,r17,16
8110eeb8:	b009883a 	mov	r4,r22
8110eebc:	8d3fffcc 	andi	r20,r17,65535
8110eec0:	a80b883a 	mov	r5,r21
8110eec4:	110fa2c0 	call	8110fa2c <__umodsi3>
8110eec8:	b009883a 	mov	r4,r22
8110eecc:	a80b883a 	mov	r5,r21
8110eed0:	1027883a 	mov	r19,r2
8110eed4:	110f9c80 	call	8110f9c8 <__udivsi3>
8110eed8:	102d883a 	mov	r22,r2
8110eedc:	9826943a 	slli	r19,r19,16
8110eee0:	9004d43a 	srli	r2,r18,16
8110eee4:	a5a1383a 	mul	r16,r20,r22
8110eee8:	14c4b03a 	or	r2,r2,r19
8110eeec:	1400052e 	bgeu	r2,r16,8110ef04 <__udivdi3+0xe4>
8110eef0:	1445883a 	add	r2,r2,r17
8110eef4:	b0ffffc4 	addi	r3,r22,-1
8110eef8:	14400136 	bltu	r2,r17,8110ef00 <__udivdi3+0xe0>
8110eefc:	14012336 	bltu	r2,r16,8110f38c <__udivdi3+0x56c>
8110ef00:	182d883a 	mov	r22,r3
8110ef04:	1421c83a 	sub	r16,r2,r16
8110ef08:	a80b883a 	mov	r5,r21
8110ef0c:	8009883a 	mov	r4,r16
8110ef10:	110fa2c0 	call	8110fa2c <__umodsi3>
8110ef14:	1027883a 	mov	r19,r2
8110ef18:	a80b883a 	mov	r5,r21
8110ef1c:	8009883a 	mov	r4,r16
8110ef20:	110f9c80 	call	8110f9c8 <__udivsi3>
8110ef24:	9826943a 	slli	r19,r19,16
8110ef28:	a0a9383a 	mul	r20,r20,r2
8110ef2c:	94bfffcc 	andi	r18,r18,65535
8110ef30:	94e4b03a 	or	r18,r18,r19
8110ef34:	9500052e 	bgeu	r18,r20,8110ef4c <__udivdi3+0x12c>
8110ef38:	8ca5883a 	add	r18,r17,r18
8110ef3c:	10ffffc4 	addi	r3,r2,-1
8110ef40:	9440f136 	bltu	r18,r17,8110f308 <__udivdi3+0x4e8>
8110ef44:	9500f02e 	bgeu	r18,r20,8110f308 <__udivdi3+0x4e8>
8110ef48:	10bfff84 	addi	r2,r2,-2
8110ef4c:	b00c943a 	slli	r6,r22,16
8110ef50:	0007883a 	mov	r3,zero
8110ef54:	3084b03a 	or	r2,r6,r2
8110ef58:	00005906 	br	8110f0c0 <__udivdi3+0x2a0>
8110ef5c:	29c05636 	bltu	r5,r7,8110f0b8 <__udivdi3+0x298>
8110ef60:	00bfffd4 	movui	r2,65535
8110ef64:	11c0622e 	bgeu	r2,r7,8110f0f0 <__udivdi3+0x2d0>
8110ef68:	00804034 	movhi	r2,256
8110ef6c:	10bfffc4 	addi	r2,r2,-1
8110ef70:	11c0ee36 	bltu	r2,r7,8110f32c <__udivdi3+0x50c>
8110ef74:	00800404 	movi	r2,16
8110ef78:	3886d83a 	srl	r3,r7,r2
8110ef7c:	01204474 	movhi	r4,33041
8110ef80:	211fe2c4 	addi	r4,r4,32651
8110ef84:	20c7883a 	add	r3,r4,r3
8110ef88:	18c00003 	ldbu	r3,0(r3)
8110ef8c:	05400804 	movi	r21,32
8110ef90:	1885883a 	add	r2,r3,r2
8110ef94:	a8abc83a 	sub	r21,r21,r2
8110ef98:	a800621e 	bne	r21,zero,8110f124 <__udivdi3+0x304>
8110ef9c:	3c00e936 	bltu	r7,r16,8110f344 <__udivdi3+0x524>
8110efa0:	9985403a 	cmpgeu	r2,r19,r6
8110efa4:	0007883a 	mov	r3,zero
8110efa8:	00004506 	br	8110f0c0 <__udivdi3+0x2a0>
8110efac:	3000041e 	bne	r6,zero,8110efc0 <__udivdi3+0x1a0>
8110efb0:	000b883a 	mov	r5,zero
8110efb4:	01000044 	movi	r4,1
8110efb8:	110f9c80 	call	8110f9c8 <__udivsi3>
8110efbc:	1023883a 	mov	r17,r2
8110efc0:	00bfffd4 	movui	r2,65535
8110efc4:	14404e2e 	bgeu	r2,r17,8110f100 <__udivdi3+0x2e0>
8110efc8:	00804034 	movhi	r2,256
8110efcc:	10bfffc4 	addi	r2,r2,-1
8110efd0:	1440d836 	bltu	r2,r17,8110f334 <__udivdi3+0x514>
8110efd4:	00800404 	movi	r2,16
8110efd8:	8886d83a 	srl	r3,r17,r2
8110efdc:	01204474 	movhi	r4,33041
8110efe0:	211fe2c4 	addi	r4,r4,32651
8110efe4:	20c7883a 	add	r3,r4,r3
8110efe8:	18c00003 	ldbu	r3,0(r3)
8110efec:	1885883a 	add	r2,r3,r2
8110eff0:	00c00804 	movi	r3,32
8110eff4:	1887c83a 	sub	r3,r3,r2
8110eff8:	18008f1e 	bne	r3,zero,8110f238 <__udivdi3+0x418>
8110effc:	882ad43a 	srli	r21,r17,16
8110f000:	8461c83a 	sub	r16,r16,r17
8110f004:	8d3fffcc 	andi	r20,r17,65535
8110f008:	00c00044 	movi	r3,1
8110f00c:	8009883a 	mov	r4,r16
8110f010:	a80b883a 	mov	r5,r21
8110f014:	d8c00015 	stw	r3,0(sp)
8110f018:	110fa2c0 	call	8110fa2c <__umodsi3>
8110f01c:	8009883a 	mov	r4,r16
8110f020:	a80b883a 	mov	r5,r21
8110f024:	1027883a 	mov	r19,r2
8110f028:	110f9c80 	call	8110f9c8 <__udivsi3>
8110f02c:	9826943a 	slli	r19,r19,16
8110f030:	9008d43a 	srli	r4,r18,16
8110f034:	1521383a 	mul	r16,r2,r20
8110f038:	102d883a 	mov	r22,r2
8110f03c:	24c8b03a 	or	r4,r4,r19
8110f040:	d8c00017 	ldw	r3,0(sp)
8110f044:	2400052e 	bgeu	r4,r16,8110f05c <__udivdi3+0x23c>
8110f048:	2449883a 	add	r4,r4,r17
8110f04c:	b0bfffc4 	addi	r2,r22,-1
8110f050:	24400136 	bltu	r4,r17,8110f058 <__udivdi3+0x238>
8110f054:	2400ca36 	bltu	r4,r16,8110f380 <__udivdi3+0x560>
8110f058:	102d883a 	mov	r22,r2
8110f05c:	2421c83a 	sub	r16,r4,r16
8110f060:	a80b883a 	mov	r5,r21
8110f064:	8009883a 	mov	r4,r16
8110f068:	d8c00015 	stw	r3,0(sp)
8110f06c:	110fa2c0 	call	8110fa2c <__umodsi3>
8110f070:	1027883a 	mov	r19,r2
8110f074:	a80b883a 	mov	r5,r21
8110f078:	8009883a 	mov	r4,r16
8110f07c:	110f9c80 	call	8110f9c8 <__udivsi3>
8110f080:	9826943a 	slli	r19,r19,16
8110f084:	1529383a 	mul	r20,r2,r20
8110f088:	94bfffcc 	andi	r18,r18,65535
8110f08c:	94e4b03a 	or	r18,r18,r19
8110f090:	d8c00017 	ldw	r3,0(sp)
8110f094:	9500052e 	bgeu	r18,r20,8110f0ac <__udivdi3+0x28c>
8110f098:	8ca5883a 	add	r18,r17,r18
8110f09c:	113fffc4 	addi	r4,r2,-1
8110f0a0:	94409736 	bltu	r18,r17,8110f300 <__udivdi3+0x4e0>
8110f0a4:	9500962e 	bgeu	r18,r20,8110f300 <__udivdi3+0x4e0>
8110f0a8:	10bfff84 	addi	r2,r2,-2
8110f0ac:	b00c943a 	slli	r6,r22,16
8110f0b0:	3084b03a 	or	r2,r6,r2
8110f0b4:	00000206 	br	8110f0c0 <__udivdi3+0x2a0>
8110f0b8:	0007883a 	mov	r3,zero
8110f0bc:	0005883a 	mov	r2,zero
8110f0c0:	dfc00a17 	ldw	ra,40(sp)
8110f0c4:	df000917 	ldw	fp,36(sp)
8110f0c8:	ddc00817 	ldw	r23,32(sp)
8110f0cc:	dd800717 	ldw	r22,28(sp)
8110f0d0:	dd400617 	ldw	r21,24(sp)
8110f0d4:	dd000517 	ldw	r20,20(sp)
8110f0d8:	dcc00417 	ldw	r19,16(sp)
8110f0dc:	dc800317 	ldw	r18,12(sp)
8110f0e0:	dc400217 	ldw	r17,8(sp)
8110f0e4:	dc000117 	ldw	r16,4(sp)
8110f0e8:	dec00b04 	addi	sp,sp,44
8110f0ec:	f800283a 	ret
8110f0f0:	00803fc4 	movi	r2,255
8110f0f4:	11c5803a 	cmpltu	r2,r2,r7
8110f0f8:	100490fa 	slli	r2,r2,3
8110f0fc:	003f9e06 	br	8110ef78 <__reset+0xfb0eef78>
8110f100:	00803fc4 	movi	r2,255
8110f104:	1445803a 	cmpltu	r2,r2,r17
8110f108:	100490fa 	slli	r2,r2,3
8110f10c:	003fb206 	br	8110efd8 <__reset+0xfb0eefd8>
8110f110:	00804034 	movhi	r2,256
8110f114:	10bfffc4 	addi	r2,r2,-1
8110f118:	11808836 	bltu	r2,r6,8110f33c <__udivdi3+0x51c>
8110f11c:	00800404 	movi	r2,16
8110f120:	003f5606 	br	8110ee7c <__reset+0xfb0eee7c>
8110f124:	30aed83a 	srl	r23,r6,r2
8110f128:	3d4e983a 	sll	r7,r7,r21
8110f12c:	80acd83a 	srl	r22,r16,r2
8110f130:	9884d83a 	srl	r2,r19,r2
8110f134:	3deeb03a 	or	r23,r7,r23
8110f138:	b824d43a 	srli	r18,r23,16
8110f13c:	8560983a 	sll	r16,r16,r21
8110f140:	b009883a 	mov	r4,r22
8110f144:	900b883a 	mov	r5,r18
8110f148:	3568983a 	sll	r20,r6,r21
8110f14c:	1420b03a 	or	r16,r2,r16
8110f150:	110fa2c0 	call	8110fa2c <__umodsi3>
8110f154:	b009883a 	mov	r4,r22
8110f158:	900b883a 	mov	r5,r18
8110f15c:	1023883a 	mov	r17,r2
8110f160:	110f9c80 	call	8110f9c8 <__udivsi3>
8110f164:	8808943a 	slli	r4,r17,16
8110f168:	bf3fffcc 	andi	fp,r23,65535
8110f16c:	8006d43a 	srli	r3,r16,16
8110f170:	e0a3383a 	mul	r17,fp,r2
8110f174:	100d883a 	mov	r6,r2
8110f178:	1906b03a 	or	r3,r3,r4
8110f17c:	1c40042e 	bgeu	r3,r17,8110f190 <__udivdi3+0x370>
8110f180:	1dc7883a 	add	r3,r3,r23
8110f184:	10bfffc4 	addi	r2,r2,-1
8110f188:	1dc0752e 	bgeu	r3,r23,8110f360 <__udivdi3+0x540>
8110f18c:	100d883a 	mov	r6,r2
8110f190:	1c63c83a 	sub	r17,r3,r17
8110f194:	900b883a 	mov	r5,r18
8110f198:	8809883a 	mov	r4,r17
8110f19c:	d9800015 	stw	r6,0(sp)
8110f1a0:	110fa2c0 	call	8110fa2c <__umodsi3>
8110f1a4:	102d883a 	mov	r22,r2
8110f1a8:	8809883a 	mov	r4,r17
8110f1ac:	900b883a 	mov	r5,r18
8110f1b0:	110f9c80 	call	8110f9c8 <__udivsi3>
8110f1b4:	b02c943a 	slli	r22,r22,16
8110f1b8:	e089383a 	mul	r4,fp,r2
8110f1bc:	843fffcc 	andi	r16,r16,65535
8110f1c0:	85a0b03a 	or	r16,r16,r22
8110f1c4:	d9800017 	ldw	r6,0(sp)
8110f1c8:	8100042e 	bgeu	r16,r4,8110f1dc <__udivdi3+0x3bc>
8110f1cc:	85e1883a 	add	r16,r16,r23
8110f1d0:	10ffffc4 	addi	r3,r2,-1
8110f1d4:	85c05e2e 	bgeu	r16,r23,8110f350 <__udivdi3+0x530>
8110f1d8:	1805883a 	mov	r2,r3
8110f1dc:	300c943a 	slli	r6,r6,16
8110f1e0:	a17fffcc 	andi	r5,r20,65535
8110f1e4:	a028d43a 	srli	r20,r20,16
8110f1e8:	3084b03a 	or	r2,r6,r2
8110f1ec:	10ffffcc 	andi	r3,r2,65535
8110f1f0:	100cd43a 	srli	r6,r2,16
8110f1f4:	194f383a 	mul	r7,r3,r5
8110f1f8:	1d07383a 	mul	r3,r3,r20
8110f1fc:	314b383a 	mul	r5,r6,r5
8110f200:	3810d43a 	srli	r8,r7,16
8110f204:	8121c83a 	sub	r16,r16,r4
8110f208:	1947883a 	add	r3,r3,r5
8110f20c:	40c7883a 	add	r3,r8,r3
8110f210:	350d383a 	mul	r6,r6,r20
8110f214:	1940022e 	bgeu	r3,r5,8110f220 <__udivdi3+0x400>
8110f218:	01000074 	movhi	r4,1
8110f21c:	310d883a 	add	r6,r6,r4
8110f220:	1828d43a 	srli	r20,r3,16
8110f224:	a18d883a 	add	r6,r20,r6
8110f228:	81803e36 	bltu	r16,r6,8110f324 <__udivdi3+0x504>
8110f22c:	81803826 	beq	r16,r6,8110f310 <__udivdi3+0x4f0>
8110f230:	0007883a 	mov	r3,zero
8110f234:	003fa206 	br	8110f0c0 <__reset+0xfb0ef0c0>
8110f238:	88e2983a 	sll	r17,r17,r3
8110f23c:	80a8d83a 	srl	r20,r16,r2
8110f240:	80e0983a 	sll	r16,r16,r3
8110f244:	882ad43a 	srli	r21,r17,16
8110f248:	9884d83a 	srl	r2,r19,r2
8110f24c:	a009883a 	mov	r4,r20
8110f250:	a80b883a 	mov	r5,r21
8110f254:	142eb03a 	or	r23,r2,r16
8110f258:	98e4983a 	sll	r18,r19,r3
8110f25c:	110fa2c0 	call	8110fa2c <__umodsi3>
8110f260:	a009883a 	mov	r4,r20
8110f264:	a80b883a 	mov	r5,r21
8110f268:	1021883a 	mov	r16,r2
8110f26c:	110f9c80 	call	8110f9c8 <__udivsi3>
8110f270:	1039883a 	mov	fp,r2
8110f274:	8d3fffcc 	andi	r20,r17,65535
8110f278:	8020943a 	slli	r16,r16,16
8110f27c:	b804d43a 	srli	r2,r23,16
8110f280:	a72d383a 	mul	r22,r20,fp
8110f284:	1404b03a 	or	r2,r2,r16
8110f288:	1580062e 	bgeu	r2,r22,8110f2a4 <__udivdi3+0x484>
8110f28c:	1445883a 	add	r2,r2,r17
8110f290:	e0ffffc4 	addi	r3,fp,-1
8110f294:	14403836 	bltu	r2,r17,8110f378 <__udivdi3+0x558>
8110f298:	1580372e 	bgeu	r2,r22,8110f378 <__udivdi3+0x558>
8110f29c:	e73fff84 	addi	fp,fp,-2
8110f2a0:	1445883a 	add	r2,r2,r17
8110f2a4:	15adc83a 	sub	r22,r2,r22
8110f2a8:	a80b883a 	mov	r5,r21
8110f2ac:	b009883a 	mov	r4,r22
8110f2b0:	110fa2c0 	call	8110fa2c <__umodsi3>
8110f2b4:	1027883a 	mov	r19,r2
8110f2b8:	b009883a 	mov	r4,r22
8110f2bc:	a80b883a 	mov	r5,r21
8110f2c0:	110f9c80 	call	8110f9c8 <__udivsi3>
8110f2c4:	9826943a 	slli	r19,r19,16
8110f2c8:	a0a1383a 	mul	r16,r20,r2
8110f2cc:	b93fffcc 	andi	r4,r23,65535
8110f2d0:	24c8b03a 	or	r4,r4,r19
8110f2d4:	2400062e 	bgeu	r4,r16,8110f2f0 <__udivdi3+0x4d0>
8110f2d8:	2449883a 	add	r4,r4,r17
8110f2dc:	10ffffc4 	addi	r3,r2,-1
8110f2e0:	24402336 	bltu	r4,r17,8110f370 <__udivdi3+0x550>
8110f2e4:	2400222e 	bgeu	r4,r16,8110f370 <__udivdi3+0x550>
8110f2e8:	10bfff84 	addi	r2,r2,-2
8110f2ec:	2449883a 	add	r4,r4,r17
8110f2f0:	e038943a 	slli	fp,fp,16
8110f2f4:	2421c83a 	sub	r16,r4,r16
8110f2f8:	e086b03a 	or	r3,fp,r2
8110f2fc:	003f4306 	br	8110f00c <__reset+0xfb0ef00c>
8110f300:	2005883a 	mov	r2,r4
8110f304:	003f6906 	br	8110f0ac <__reset+0xfb0ef0ac>
8110f308:	1805883a 	mov	r2,r3
8110f30c:	003f0f06 	br	8110ef4c <__reset+0xfb0eef4c>
8110f310:	1806943a 	slli	r3,r3,16
8110f314:	9d66983a 	sll	r19,r19,r21
8110f318:	39ffffcc 	andi	r7,r7,65535
8110f31c:	19c7883a 	add	r3,r3,r7
8110f320:	98ffc32e 	bgeu	r19,r3,8110f230 <__reset+0xfb0ef230>
8110f324:	10bfffc4 	addi	r2,r2,-1
8110f328:	003fc106 	br	8110f230 <__reset+0xfb0ef230>
8110f32c:	00800604 	movi	r2,24
8110f330:	003f1106 	br	8110ef78 <__reset+0xfb0eef78>
8110f334:	00800604 	movi	r2,24
8110f338:	003f2706 	br	8110efd8 <__reset+0xfb0eefd8>
8110f33c:	00800604 	movi	r2,24
8110f340:	003ece06 	br	8110ee7c <__reset+0xfb0eee7c>
8110f344:	0007883a 	mov	r3,zero
8110f348:	00800044 	movi	r2,1
8110f34c:	003f5c06 	br	8110f0c0 <__reset+0xfb0ef0c0>
8110f350:	813fa12e 	bgeu	r16,r4,8110f1d8 <__reset+0xfb0ef1d8>
8110f354:	10bfff84 	addi	r2,r2,-2
8110f358:	85e1883a 	add	r16,r16,r23
8110f35c:	003f9f06 	br	8110f1dc <__reset+0xfb0ef1dc>
8110f360:	1c7f8a2e 	bgeu	r3,r17,8110f18c <__reset+0xfb0ef18c>
8110f364:	31bfff84 	addi	r6,r6,-2
8110f368:	1dc7883a 	add	r3,r3,r23
8110f36c:	003f8806 	br	8110f190 <__reset+0xfb0ef190>
8110f370:	1805883a 	mov	r2,r3
8110f374:	003fde06 	br	8110f2f0 <__reset+0xfb0ef2f0>
8110f378:	1839883a 	mov	fp,r3
8110f37c:	003fc906 	br	8110f2a4 <__reset+0xfb0ef2a4>
8110f380:	b5bfff84 	addi	r22,r22,-2
8110f384:	2449883a 	add	r4,r4,r17
8110f388:	003f3406 	br	8110f05c <__reset+0xfb0ef05c>
8110f38c:	b5bfff84 	addi	r22,r22,-2
8110f390:	1445883a 	add	r2,r2,r17
8110f394:	003edb06 	br	8110ef04 <__reset+0xfb0eef04>

8110f398 <__umoddi3>:
8110f398:	defff404 	addi	sp,sp,-48
8110f39c:	df000a15 	stw	fp,40(sp)
8110f3a0:	dc400315 	stw	r17,12(sp)
8110f3a4:	dc000215 	stw	r16,8(sp)
8110f3a8:	dfc00b15 	stw	ra,44(sp)
8110f3ac:	ddc00915 	stw	r23,36(sp)
8110f3b0:	dd800815 	stw	r22,32(sp)
8110f3b4:	dd400715 	stw	r21,28(sp)
8110f3b8:	dd000615 	stw	r20,24(sp)
8110f3bc:	dcc00515 	stw	r19,20(sp)
8110f3c0:	dc800415 	stw	r18,16(sp)
8110f3c4:	2021883a 	mov	r16,r4
8110f3c8:	2823883a 	mov	r17,r5
8110f3cc:	2839883a 	mov	fp,r5
8110f3d0:	38003c1e 	bne	r7,zero,8110f4c4 <__umoddi3+0x12c>
8110f3d4:	3027883a 	mov	r19,r6
8110f3d8:	2029883a 	mov	r20,r4
8110f3dc:	2980512e 	bgeu	r5,r6,8110f524 <__umoddi3+0x18c>
8110f3e0:	00bfffd4 	movui	r2,65535
8110f3e4:	11809a36 	bltu	r2,r6,8110f650 <__umoddi3+0x2b8>
8110f3e8:	01003fc4 	movi	r4,255
8110f3ec:	2189803a 	cmpltu	r4,r4,r6
8110f3f0:	200890fa 	slli	r4,r4,3
8110f3f4:	3104d83a 	srl	r2,r6,r4
8110f3f8:	00e04474 	movhi	r3,33041
8110f3fc:	18dfe2c4 	addi	r3,r3,32651
8110f400:	1885883a 	add	r2,r3,r2
8110f404:	10c00003 	ldbu	r3,0(r2)
8110f408:	00800804 	movi	r2,32
8110f40c:	1909883a 	add	r4,r3,r4
8110f410:	1125c83a 	sub	r18,r2,r4
8110f414:	90000526 	beq	r18,zero,8110f42c <__umoddi3+0x94>
8110f418:	8ca2983a 	sll	r17,r17,r18
8110f41c:	8108d83a 	srl	r4,r16,r4
8110f420:	34a6983a 	sll	r19,r6,r18
8110f424:	84a8983a 	sll	r20,r16,r18
8110f428:	2478b03a 	or	fp,r4,r17
8110f42c:	982ed43a 	srli	r23,r19,16
8110f430:	e009883a 	mov	r4,fp
8110f434:	9dbfffcc 	andi	r22,r19,65535
8110f438:	b80b883a 	mov	r5,r23
8110f43c:	110fa2c0 	call	8110fa2c <__umodsi3>
8110f440:	e009883a 	mov	r4,fp
8110f444:	b80b883a 	mov	r5,r23
8110f448:	102b883a 	mov	r21,r2
8110f44c:	110f9c80 	call	8110f9c8 <__udivsi3>
8110f450:	a806943a 	slli	r3,r21,16
8110f454:	a008d43a 	srli	r4,r20,16
8110f458:	b085383a 	mul	r2,r22,r2
8110f45c:	20c8b03a 	or	r4,r4,r3
8110f460:	2080032e 	bgeu	r4,r2,8110f470 <__umoddi3+0xd8>
8110f464:	24c9883a 	add	r4,r4,r19
8110f468:	24c00136 	bltu	r4,r19,8110f470 <__umoddi3+0xd8>
8110f46c:	20811036 	bltu	r4,r2,8110f8b0 <__umoddi3+0x518>
8110f470:	20abc83a 	sub	r21,r4,r2
8110f474:	b80b883a 	mov	r5,r23
8110f478:	a809883a 	mov	r4,r21
8110f47c:	110fa2c0 	call	8110fa2c <__umodsi3>
8110f480:	1023883a 	mov	r17,r2
8110f484:	b80b883a 	mov	r5,r23
8110f488:	a809883a 	mov	r4,r21
8110f48c:	110f9c80 	call	8110f9c8 <__udivsi3>
8110f490:	8822943a 	slli	r17,r17,16
8110f494:	b085383a 	mul	r2,r22,r2
8110f498:	a0ffffcc 	andi	r3,r20,65535
8110f49c:	1c46b03a 	or	r3,r3,r17
8110f4a0:	1880042e 	bgeu	r3,r2,8110f4b4 <__umoddi3+0x11c>
8110f4a4:	1cc7883a 	add	r3,r3,r19
8110f4a8:	1cc00236 	bltu	r3,r19,8110f4b4 <__umoddi3+0x11c>
8110f4ac:	1880012e 	bgeu	r3,r2,8110f4b4 <__umoddi3+0x11c>
8110f4b0:	1cc7883a 	add	r3,r3,r19
8110f4b4:	1885c83a 	sub	r2,r3,r2
8110f4b8:	1484d83a 	srl	r2,r2,r18
8110f4bc:	0007883a 	mov	r3,zero
8110f4c0:	00004f06 	br	8110f600 <__umoddi3+0x268>
8110f4c4:	29c04c36 	bltu	r5,r7,8110f5f8 <__umoddi3+0x260>
8110f4c8:	00bfffd4 	movui	r2,65535
8110f4cc:	11c0582e 	bgeu	r2,r7,8110f630 <__umoddi3+0x298>
8110f4d0:	00804034 	movhi	r2,256
8110f4d4:	10bfffc4 	addi	r2,r2,-1
8110f4d8:	11c0e736 	bltu	r2,r7,8110f878 <__umoddi3+0x4e0>
8110f4dc:	01000404 	movi	r4,16
8110f4e0:	3904d83a 	srl	r2,r7,r4
8110f4e4:	00e04474 	movhi	r3,33041
8110f4e8:	18dfe2c4 	addi	r3,r3,32651
8110f4ec:	1885883a 	add	r2,r3,r2
8110f4f0:	14c00003 	ldbu	r19,0(r2)
8110f4f4:	00c00804 	movi	r3,32
8110f4f8:	9927883a 	add	r19,r19,r4
8110f4fc:	1ce9c83a 	sub	r20,r3,r19
8110f500:	a000581e 	bne	r20,zero,8110f664 <__umoddi3+0x2cc>
8110f504:	3c400136 	bltu	r7,r17,8110f50c <__umoddi3+0x174>
8110f508:	8180eb36 	bltu	r16,r6,8110f8b8 <__umoddi3+0x520>
8110f50c:	8185c83a 	sub	r2,r16,r6
8110f510:	89e3c83a 	sub	r17,r17,r7
8110f514:	8089803a 	cmpltu	r4,r16,r2
8110f518:	8939c83a 	sub	fp,r17,r4
8110f51c:	e007883a 	mov	r3,fp
8110f520:	00003706 	br	8110f600 <__umoddi3+0x268>
8110f524:	3000041e 	bne	r6,zero,8110f538 <__umoddi3+0x1a0>
8110f528:	000b883a 	mov	r5,zero
8110f52c:	01000044 	movi	r4,1
8110f530:	110f9c80 	call	8110f9c8 <__udivsi3>
8110f534:	1027883a 	mov	r19,r2
8110f538:	00bfffd4 	movui	r2,65535
8110f53c:	14c0402e 	bgeu	r2,r19,8110f640 <__umoddi3+0x2a8>
8110f540:	00804034 	movhi	r2,256
8110f544:	10bfffc4 	addi	r2,r2,-1
8110f548:	14c0cd36 	bltu	r2,r19,8110f880 <__umoddi3+0x4e8>
8110f54c:	00800404 	movi	r2,16
8110f550:	9886d83a 	srl	r3,r19,r2
8110f554:	01204474 	movhi	r4,33041
8110f558:	211fe2c4 	addi	r4,r4,32651
8110f55c:	20c7883a 	add	r3,r4,r3
8110f560:	18c00003 	ldbu	r3,0(r3)
8110f564:	1887883a 	add	r3,r3,r2
8110f568:	00800804 	movi	r2,32
8110f56c:	10e5c83a 	sub	r18,r2,r3
8110f570:	9000901e 	bne	r18,zero,8110f7b4 <__umoddi3+0x41c>
8110f574:	982cd43a 	srli	r22,r19,16
8110f578:	8ce3c83a 	sub	r17,r17,r19
8110f57c:	9d7fffcc 	andi	r21,r19,65535
8110f580:	b00b883a 	mov	r5,r22
8110f584:	8809883a 	mov	r4,r17
8110f588:	110fa2c0 	call	8110fa2c <__umodsi3>
8110f58c:	8809883a 	mov	r4,r17
8110f590:	b00b883a 	mov	r5,r22
8110f594:	1021883a 	mov	r16,r2
8110f598:	110f9c80 	call	8110f9c8 <__udivsi3>
8110f59c:	8006943a 	slli	r3,r16,16
8110f5a0:	a008d43a 	srli	r4,r20,16
8110f5a4:	1545383a 	mul	r2,r2,r21
8110f5a8:	20c8b03a 	or	r4,r4,r3
8110f5ac:	2080042e 	bgeu	r4,r2,8110f5c0 <__umoddi3+0x228>
8110f5b0:	24c9883a 	add	r4,r4,r19
8110f5b4:	24c00236 	bltu	r4,r19,8110f5c0 <__umoddi3+0x228>
8110f5b8:	2080012e 	bgeu	r4,r2,8110f5c0 <__umoddi3+0x228>
8110f5bc:	24c9883a 	add	r4,r4,r19
8110f5c0:	20a1c83a 	sub	r16,r4,r2
8110f5c4:	b00b883a 	mov	r5,r22
8110f5c8:	8009883a 	mov	r4,r16
8110f5cc:	110fa2c0 	call	8110fa2c <__umodsi3>
8110f5d0:	1023883a 	mov	r17,r2
8110f5d4:	b00b883a 	mov	r5,r22
8110f5d8:	8009883a 	mov	r4,r16
8110f5dc:	110f9c80 	call	8110f9c8 <__udivsi3>
8110f5e0:	8822943a 	slli	r17,r17,16
8110f5e4:	1545383a 	mul	r2,r2,r21
8110f5e8:	a53fffcc 	andi	r20,r20,65535
8110f5ec:	a446b03a 	or	r3,r20,r17
8110f5f0:	18bfb02e 	bgeu	r3,r2,8110f4b4 <__reset+0xfb0ef4b4>
8110f5f4:	003fab06 	br	8110f4a4 <__reset+0xfb0ef4a4>
8110f5f8:	2005883a 	mov	r2,r4
8110f5fc:	2807883a 	mov	r3,r5
8110f600:	dfc00b17 	ldw	ra,44(sp)
8110f604:	df000a17 	ldw	fp,40(sp)
8110f608:	ddc00917 	ldw	r23,36(sp)
8110f60c:	dd800817 	ldw	r22,32(sp)
8110f610:	dd400717 	ldw	r21,28(sp)
8110f614:	dd000617 	ldw	r20,24(sp)
8110f618:	dcc00517 	ldw	r19,20(sp)
8110f61c:	dc800417 	ldw	r18,16(sp)
8110f620:	dc400317 	ldw	r17,12(sp)
8110f624:	dc000217 	ldw	r16,8(sp)
8110f628:	dec00c04 	addi	sp,sp,48
8110f62c:	f800283a 	ret
8110f630:	04c03fc4 	movi	r19,255
8110f634:	99c9803a 	cmpltu	r4,r19,r7
8110f638:	200890fa 	slli	r4,r4,3
8110f63c:	003fa806 	br	8110f4e0 <__reset+0xfb0ef4e0>
8110f640:	00803fc4 	movi	r2,255
8110f644:	14c5803a 	cmpltu	r2,r2,r19
8110f648:	100490fa 	slli	r2,r2,3
8110f64c:	003fc006 	br	8110f550 <__reset+0xfb0ef550>
8110f650:	00804034 	movhi	r2,256
8110f654:	10bfffc4 	addi	r2,r2,-1
8110f658:	11808b36 	bltu	r2,r6,8110f888 <__umoddi3+0x4f0>
8110f65c:	01000404 	movi	r4,16
8110f660:	003f6406 	br	8110f3f4 <__reset+0xfb0ef3f4>
8110f664:	34c4d83a 	srl	r2,r6,r19
8110f668:	3d0e983a 	sll	r7,r7,r20
8110f66c:	8cf8d83a 	srl	fp,r17,r19
8110f670:	8d10983a 	sll	r8,r17,r20
8110f674:	38aab03a 	or	r21,r7,r2
8110f678:	a82cd43a 	srli	r22,r21,16
8110f67c:	84e2d83a 	srl	r17,r16,r19
8110f680:	e009883a 	mov	r4,fp
8110f684:	b00b883a 	mov	r5,r22
8110f688:	8a22b03a 	or	r17,r17,r8
8110f68c:	3524983a 	sll	r18,r6,r20
8110f690:	110fa2c0 	call	8110fa2c <__umodsi3>
8110f694:	e009883a 	mov	r4,fp
8110f698:	b00b883a 	mov	r5,r22
8110f69c:	102f883a 	mov	r23,r2
8110f6a0:	110f9c80 	call	8110f9c8 <__udivsi3>
8110f6a4:	100d883a 	mov	r6,r2
8110f6a8:	b808943a 	slli	r4,r23,16
8110f6ac:	aa3fffcc 	andi	r8,r21,65535
8110f6b0:	8804d43a 	srli	r2,r17,16
8110f6b4:	41af383a 	mul	r23,r8,r6
8110f6b8:	8520983a 	sll	r16,r16,r20
8110f6bc:	1104b03a 	or	r2,r2,r4
8110f6c0:	15c0042e 	bgeu	r2,r23,8110f6d4 <__umoddi3+0x33c>
8110f6c4:	1545883a 	add	r2,r2,r21
8110f6c8:	30ffffc4 	addi	r3,r6,-1
8110f6cc:	1540742e 	bgeu	r2,r21,8110f8a0 <__umoddi3+0x508>
8110f6d0:	180d883a 	mov	r6,r3
8110f6d4:	15efc83a 	sub	r23,r2,r23
8110f6d8:	b00b883a 	mov	r5,r22
8110f6dc:	b809883a 	mov	r4,r23
8110f6e0:	d9800115 	stw	r6,4(sp)
8110f6e4:	da000015 	stw	r8,0(sp)
8110f6e8:	110fa2c0 	call	8110fa2c <__umodsi3>
8110f6ec:	b00b883a 	mov	r5,r22
8110f6f0:	b809883a 	mov	r4,r23
8110f6f4:	1039883a 	mov	fp,r2
8110f6f8:	110f9c80 	call	8110f9c8 <__udivsi3>
8110f6fc:	da000017 	ldw	r8,0(sp)
8110f700:	e038943a 	slli	fp,fp,16
8110f704:	100b883a 	mov	r5,r2
8110f708:	4089383a 	mul	r4,r8,r2
8110f70c:	8a3fffcc 	andi	r8,r17,65535
8110f710:	4710b03a 	or	r8,r8,fp
8110f714:	d9800117 	ldw	r6,4(sp)
8110f718:	4100042e 	bgeu	r8,r4,8110f72c <__umoddi3+0x394>
8110f71c:	4551883a 	add	r8,r8,r21
8110f720:	10bfffc4 	addi	r2,r2,-1
8110f724:	45405a2e 	bgeu	r8,r21,8110f890 <__umoddi3+0x4f8>
8110f728:	100b883a 	mov	r5,r2
8110f72c:	300c943a 	slli	r6,r6,16
8110f730:	91ffffcc 	andi	r7,r18,65535
8110f734:	9004d43a 	srli	r2,r18,16
8110f738:	314cb03a 	or	r6,r6,r5
8110f73c:	317fffcc 	andi	r5,r6,65535
8110f740:	300cd43a 	srli	r6,r6,16
8110f744:	29d3383a 	mul	r9,r5,r7
8110f748:	288b383a 	mul	r5,r5,r2
8110f74c:	31cf383a 	mul	r7,r6,r7
8110f750:	4806d43a 	srli	r3,r9,16
8110f754:	4111c83a 	sub	r8,r8,r4
8110f758:	29cb883a 	add	r5,r5,r7
8110f75c:	194b883a 	add	r5,r3,r5
8110f760:	3085383a 	mul	r2,r6,r2
8110f764:	29c0022e 	bgeu	r5,r7,8110f770 <__umoddi3+0x3d8>
8110f768:	00c00074 	movhi	r3,1
8110f76c:	10c5883a 	add	r2,r2,r3
8110f770:	2808d43a 	srli	r4,r5,16
8110f774:	280a943a 	slli	r5,r5,16
8110f778:	4a7fffcc 	andi	r9,r9,65535
8110f77c:	2085883a 	add	r2,r4,r2
8110f780:	2a4b883a 	add	r5,r5,r9
8110f784:	40803636 	bltu	r8,r2,8110f860 <__umoddi3+0x4c8>
8110f788:	40804d26 	beq	r8,r2,8110f8c0 <__umoddi3+0x528>
8110f78c:	4089c83a 	sub	r4,r8,r2
8110f790:	280f883a 	mov	r7,r5
8110f794:	81cfc83a 	sub	r7,r16,r7
8110f798:	81c7803a 	cmpltu	r3,r16,r7
8110f79c:	20c7c83a 	sub	r3,r4,r3
8110f7a0:	1cc4983a 	sll	r2,r3,r19
8110f7a4:	3d0ed83a 	srl	r7,r7,r20
8110f7a8:	1d06d83a 	srl	r3,r3,r20
8110f7ac:	11c4b03a 	or	r2,r2,r7
8110f7b0:	003f9306 	br	8110f600 <__reset+0xfb0ef600>
8110f7b4:	9ca6983a 	sll	r19,r19,r18
8110f7b8:	88e8d83a 	srl	r20,r17,r3
8110f7bc:	80c4d83a 	srl	r2,r16,r3
8110f7c0:	982cd43a 	srli	r22,r19,16
8110f7c4:	8ca2983a 	sll	r17,r17,r18
8110f7c8:	a009883a 	mov	r4,r20
8110f7cc:	b00b883a 	mov	r5,r22
8110f7d0:	1478b03a 	or	fp,r2,r17
8110f7d4:	110fa2c0 	call	8110fa2c <__umodsi3>
8110f7d8:	a009883a 	mov	r4,r20
8110f7dc:	b00b883a 	mov	r5,r22
8110f7e0:	1023883a 	mov	r17,r2
8110f7e4:	110f9c80 	call	8110f9c8 <__udivsi3>
8110f7e8:	9d7fffcc 	andi	r21,r19,65535
8110f7ec:	880a943a 	slli	r5,r17,16
8110f7f0:	e008d43a 	srli	r4,fp,16
8110f7f4:	a885383a 	mul	r2,r21,r2
8110f7f8:	84a8983a 	sll	r20,r16,r18
8110f7fc:	2148b03a 	or	r4,r4,r5
8110f800:	2080042e 	bgeu	r4,r2,8110f814 <__umoddi3+0x47c>
8110f804:	24c9883a 	add	r4,r4,r19
8110f808:	24c00236 	bltu	r4,r19,8110f814 <__umoddi3+0x47c>
8110f80c:	2080012e 	bgeu	r4,r2,8110f814 <__umoddi3+0x47c>
8110f810:	24c9883a 	add	r4,r4,r19
8110f814:	20a3c83a 	sub	r17,r4,r2
8110f818:	b00b883a 	mov	r5,r22
8110f81c:	8809883a 	mov	r4,r17
8110f820:	110fa2c0 	call	8110fa2c <__umodsi3>
8110f824:	102f883a 	mov	r23,r2
8110f828:	8809883a 	mov	r4,r17
8110f82c:	b00b883a 	mov	r5,r22
8110f830:	110f9c80 	call	8110f9c8 <__udivsi3>
8110f834:	b82e943a 	slli	r23,r23,16
8110f838:	a885383a 	mul	r2,r21,r2
8110f83c:	e13fffcc 	andi	r4,fp,65535
8110f840:	25c8b03a 	or	r4,r4,r23
8110f844:	2080042e 	bgeu	r4,r2,8110f858 <__umoddi3+0x4c0>
8110f848:	24c9883a 	add	r4,r4,r19
8110f84c:	24c00236 	bltu	r4,r19,8110f858 <__umoddi3+0x4c0>
8110f850:	2080012e 	bgeu	r4,r2,8110f858 <__umoddi3+0x4c0>
8110f854:	24c9883a 	add	r4,r4,r19
8110f858:	20a3c83a 	sub	r17,r4,r2
8110f85c:	003f4806 	br	8110f580 <__reset+0xfb0ef580>
8110f860:	2c8fc83a 	sub	r7,r5,r18
8110f864:	1545c83a 	sub	r2,r2,r21
8110f868:	29cb803a 	cmpltu	r5,r5,r7
8110f86c:	1145c83a 	sub	r2,r2,r5
8110f870:	4089c83a 	sub	r4,r8,r2
8110f874:	003fc706 	br	8110f794 <__reset+0xfb0ef794>
8110f878:	01000604 	movi	r4,24
8110f87c:	003f1806 	br	8110f4e0 <__reset+0xfb0ef4e0>
8110f880:	00800604 	movi	r2,24
8110f884:	003f3206 	br	8110f550 <__reset+0xfb0ef550>
8110f888:	01000604 	movi	r4,24
8110f88c:	003ed906 	br	8110f3f4 <__reset+0xfb0ef3f4>
8110f890:	413fa52e 	bgeu	r8,r4,8110f728 <__reset+0xfb0ef728>
8110f894:	297fff84 	addi	r5,r5,-2
8110f898:	4551883a 	add	r8,r8,r21
8110f89c:	003fa306 	br	8110f72c <__reset+0xfb0ef72c>
8110f8a0:	15ff8b2e 	bgeu	r2,r23,8110f6d0 <__reset+0xfb0ef6d0>
8110f8a4:	31bfff84 	addi	r6,r6,-2
8110f8a8:	1545883a 	add	r2,r2,r21
8110f8ac:	003f8906 	br	8110f6d4 <__reset+0xfb0ef6d4>
8110f8b0:	24c9883a 	add	r4,r4,r19
8110f8b4:	003eee06 	br	8110f470 <__reset+0xfb0ef470>
8110f8b8:	8005883a 	mov	r2,r16
8110f8bc:	003f1706 	br	8110f51c <__reset+0xfb0ef51c>
8110f8c0:	817fe736 	bltu	r16,r5,8110f860 <__reset+0xfb0ef860>
8110f8c4:	280f883a 	mov	r7,r5
8110f8c8:	0009883a 	mov	r4,zero
8110f8cc:	003fb106 	br	8110f794 <__reset+0xfb0ef794>

8110f8d0 <__divsi3>:
8110f8d0:	20001b16 	blt	r4,zero,8110f940 <__divsi3+0x70>
8110f8d4:	000f883a 	mov	r7,zero
8110f8d8:	28001616 	blt	r5,zero,8110f934 <__divsi3+0x64>
8110f8dc:	200d883a 	mov	r6,r4
8110f8e0:	29001a2e 	bgeu	r5,r4,8110f94c <__divsi3+0x7c>
8110f8e4:	00800804 	movi	r2,32
8110f8e8:	00c00044 	movi	r3,1
8110f8ec:	00000106 	br	8110f8f4 <__divsi3+0x24>
8110f8f0:	10000d26 	beq	r2,zero,8110f928 <__divsi3+0x58>
8110f8f4:	294b883a 	add	r5,r5,r5
8110f8f8:	10bfffc4 	addi	r2,r2,-1
8110f8fc:	18c7883a 	add	r3,r3,r3
8110f900:	293ffb36 	bltu	r5,r4,8110f8f0 <__reset+0xfb0ef8f0>
8110f904:	0005883a 	mov	r2,zero
8110f908:	18000726 	beq	r3,zero,8110f928 <__divsi3+0x58>
8110f90c:	0005883a 	mov	r2,zero
8110f910:	31400236 	bltu	r6,r5,8110f91c <__divsi3+0x4c>
8110f914:	314dc83a 	sub	r6,r6,r5
8110f918:	10c4b03a 	or	r2,r2,r3
8110f91c:	1806d07a 	srli	r3,r3,1
8110f920:	280ad07a 	srli	r5,r5,1
8110f924:	183ffa1e 	bne	r3,zero,8110f910 <__reset+0xfb0ef910>
8110f928:	38000126 	beq	r7,zero,8110f930 <__divsi3+0x60>
8110f92c:	0085c83a 	sub	r2,zero,r2
8110f930:	f800283a 	ret
8110f934:	014bc83a 	sub	r5,zero,r5
8110f938:	39c0005c 	xori	r7,r7,1
8110f93c:	003fe706 	br	8110f8dc <__reset+0xfb0ef8dc>
8110f940:	0109c83a 	sub	r4,zero,r4
8110f944:	01c00044 	movi	r7,1
8110f948:	003fe306 	br	8110f8d8 <__reset+0xfb0ef8d8>
8110f94c:	00c00044 	movi	r3,1
8110f950:	003fee06 	br	8110f90c <__reset+0xfb0ef90c>

8110f954 <__modsi3>:
8110f954:	20001716 	blt	r4,zero,8110f9b4 <__modsi3+0x60>
8110f958:	000f883a 	mov	r7,zero
8110f95c:	2005883a 	mov	r2,r4
8110f960:	28001216 	blt	r5,zero,8110f9ac <__modsi3+0x58>
8110f964:	2900162e 	bgeu	r5,r4,8110f9c0 <__modsi3+0x6c>
8110f968:	01800804 	movi	r6,32
8110f96c:	00c00044 	movi	r3,1
8110f970:	00000106 	br	8110f978 <__modsi3+0x24>
8110f974:	30000a26 	beq	r6,zero,8110f9a0 <__modsi3+0x4c>
8110f978:	294b883a 	add	r5,r5,r5
8110f97c:	31bfffc4 	addi	r6,r6,-1
8110f980:	18c7883a 	add	r3,r3,r3
8110f984:	293ffb36 	bltu	r5,r4,8110f974 <__reset+0xfb0ef974>
8110f988:	18000526 	beq	r3,zero,8110f9a0 <__modsi3+0x4c>
8110f98c:	1806d07a 	srli	r3,r3,1
8110f990:	11400136 	bltu	r2,r5,8110f998 <__modsi3+0x44>
8110f994:	1145c83a 	sub	r2,r2,r5
8110f998:	280ad07a 	srli	r5,r5,1
8110f99c:	183ffb1e 	bne	r3,zero,8110f98c <__reset+0xfb0ef98c>
8110f9a0:	38000126 	beq	r7,zero,8110f9a8 <__modsi3+0x54>
8110f9a4:	0085c83a 	sub	r2,zero,r2
8110f9a8:	f800283a 	ret
8110f9ac:	014bc83a 	sub	r5,zero,r5
8110f9b0:	003fec06 	br	8110f964 <__reset+0xfb0ef964>
8110f9b4:	0109c83a 	sub	r4,zero,r4
8110f9b8:	01c00044 	movi	r7,1
8110f9bc:	003fe706 	br	8110f95c <__reset+0xfb0ef95c>
8110f9c0:	00c00044 	movi	r3,1
8110f9c4:	003ff106 	br	8110f98c <__reset+0xfb0ef98c>

8110f9c8 <__udivsi3>:
8110f9c8:	200d883a 	mov	r6,r4
8110f9cc:	2900152e 	bgeu	r5,r4,8110fa24 <__udivsi3+0x5c>
8110f9d0:	28001416 	blt	r5,zero,8110fa24 <__udivsi3+0x5c>
8110f9d4:	00800804 	movi	r2,32
8110f9d8:	00c00044 	movi	r3,1
8110f9dc:	00000206 	br	8110f9e8 <__udivsi3+0x20>
8110f9e0:	10000e26 	beq	r2,zero,8110fa1c <__udivsi3+0x54>
8110f9e4:	28000516 	blt	r5,zero,8110f9fc <__udivsi3+0x34>
8110f9e8:	294b883a 	add	r5,r5,r5
8110f9ec:	10bfffc4 	addi	r2,r2,-1
8110f9f0:	18c7883a 	add	r3,r3,r3
8110f9f4:	293ffa36 	bltu	r5,r4,8110f9e0 <__reset+0xfb0ef9e0>
8110f9f8:	18000826 	beq	r3,zero,8110fa1c <__udivsi3+0x54>
8110f9fc:	0005883a 	mov	r2,zero
8110fa00:	31400236 	bltu	r6,r5,8110fa0c <__udivsi3+0x44>
8110fa04:	314dc83a 	sub	r6,r6,r5
8110fa08:	10c4b03a 	or	r2,r2,r3
8110fa0c:	1806d07a 	srli	r3,r3,1
8110fa10:	280ad07a 	srli	r5,r5,1
8110fa14:	183ffa1e 	bne	r3,zero,8110fa00 <__reset+0xfb0efa00>
8110fa18:	f800283a 	ret
8110fa1c:	0005883a 	mov	r2,zero
8110fa20:	f800283a 	ret
8110fa24:	00c00044 	movi	r3,1
8110fa28:	003ff406 	br	8110f9fc <__reset+0xfb0ef9fc>

8110fa2c <__umodsi3>:
8110fa2c:	2005883a 	mov	r2,r4
8110fa30:	2900122e 	bgeu	r5,r4,8110fa7c <__umodsi3+0x50>
8110fa34:	28001116 	blt	r5,zero,8110fa7c <__umodsi3+0x50>
8110fa38:	01800804 	movi	r6,32
8110fa3c:	00c00044 	movi	r3,1
8110fa40:	00000206 	br	8110fa4c <__umodsi3+0x20>
8110fa44:	30000c26 	beq	r6,zero,8110fa78 <__umodsi3+0x4c>
8110fa48:	28000516 	blt	r5,zero,8110fa60 <__umodsi3+0x34>
8110fa4c:	294b883a 	add	r5,r5,r5
8110fa50:	31bfffc4 	addi	r6,r6,-1
8110fa54:	18c7883a 	add	r3,r3,r3
8110fa58:	293ffa36 	bltu	r5,r4,8110fa44 <__reset+0xfb0efa44>
8110fa5c:	18000626 	beq	r3,zero,8110fa78 <__umodsi3+0x4c>
8110fa60:	1806d07a 	srli	r3,r3,1
8110fa64:	11400136 	bltu	r2,r5,8110fa6c <__umodsi3+0x40>
8110fa68:	1145c83a 	sub	r2,r2,r5
8110fa6c:	280ad07a 	srli	r5,r5,1
8110fa70:	183ffb1e 	bne	r3,zero,8110fa60 <__reset+0xfb0efa60>
8110fa74:	f800283a 	ret
8110fa78:	f800283a 	ret
8110fa7c:	00c00044 	movi	r3,1
8110fa80:	003ff706 	br	8110fa60 <__reset+0xfb0efa60>

8110fa84 <__adddf3>:
8110fa84:	02c00434 	movhi	r11,16
8110fa88:	5affffc4 	addi	r11,r11,-1
8110fa8c:	2806d7fa 	srli	r3,r5,31
8110fa90:	2ad4703a 	and	r10,r5,r11
8110fa94:	3ad2703a 	and	r9,r7,r11
8110fa98:	3804d53a 	srli	r2,r7,20
8110fa9c:	3018d77a 	srli	r12,r6,29
8110faa0:	280ad53a 	srli	r5,r5,20
8110faa4:	501490fa 	slli	r10,r10,3
8110faa8:	2010d77a 	srli	r8,r4,29
8110faac:	481290fa 	slli	r9,r9,3
8110fab0:	380ed7fa 	srli	r7,r7,31
8110fab4:	defffb04 	addi	sp,sp,-20
8110fab8:	dc800215 	stw	r18,8(sp)
8110fabc:	dc400115 	stw	r17,4(sp)
8110fac0:	dc000015 	stw	r16,0(sp)
8110fac4:	dfc00415 	stw	ra,16(sp)
8110fac8:	dcc00315 	stw	r19,12(sp)
8110facc:	1c803fcc 	andi	r18,r3,255
8110fad0:	2c01ffcc 	andi	r16,r5,2047
8110fad4:	5210b03a 	or	r8,r10,r8
8110fad8:	202290fa 	slli	r17,r4,3
8110fadc:	1081ffcc 	andi	r2,r2,2047
8110fae0:	4b12b03a 	or	r9,r9,r12
8110fae4:	300c90fa 	slli	r6,r6,3
8110fae8:	91c07526 	beq	r18,r7,8110fcc0 <__adddf3+0x23c>
8110faec:	8087c83a 	sub	r3,r16,r2
8110faf0:	00c0ab0e 	bge	zero,r3,8110fda0 <__adddf3+0x31c>
8110faf4:	10002a1e 	bne	r2,zero,8110fba0 <__adddf3+0x11c>
8110faf8:	4984b03a 	or	r2,r9,r6
8110fafc:	1000961e 	bne	r2,zero,8110fd58 <__adddf3+0x2d4>
8110fb00:	888001cc 	andi	r2,r17,7
8110fb04:	10000726 	beq	r2,zero,8110fb24 <__adddf3+0xa0>
8110fb08:	888003cc 	andi	r2,r17,15
8110fb0c:	00c00104 	movi	r3,4
8110fb10:	10c00426 	beq	r2,r3,8110fb24 <__adddf3+0xa0>
8110fb14:	88c7883a 	add	r3,r17,r3
8110fb18:	1c63803a 	cmpltu	r17,r3,r17
8110fb1c:	4451883a 	add	r8,r8,r17
8110fb20:	1823883a 	mov	r17,r3
8110fb24:	4080202c 	andhi	r2,r8,128
8110fb28:	10005926 	beq	r2,zero,8110fc90 <__adddf3+0x20c>
8110fb2c:	84000044 	addi	r16,r16,1
8110fb30:	0081ffc4 	movi	r2,2047
8110fb34:	8080ba26 	beq	r16,r2,8110fe20 <__adddf3+0x39c>
8110fb38:	00bfe034 	movhi	r2,65408
8110fb3c:	10bfffc4 	addi	r2,r2,-1
8110fb40:	4090703a 	and	r8,r8,r2
8110fb44:	4004977a 	slli	r2,r8,29
8110fb48:	4010927a 	slli	r8,r8,9
8110fb4c:	8822d0fa 	srli	r17,r17,3
8110fb50:	8401ffcc 	andi	r16,r16,2047
8110fb54:	4010d33a 	srli	r8,r8,12
8110fb58:	9007883a 	mov	r3,r18
8110fb5c:	1444b03a 	or	r2,r2,r17
8110fb60:	8401ffcc 	andi	r16,r16,2047
8110fb64:	8020953a 	slli	r16,r16,20
8110fb68:	18c03fcc 	andi	r3,r3,255
8110fb6c:	01000434 	movhi	r4,16
8110fb70:	213fffc4 	addi	r4,r4,-1
8110fb74:	180697fa 	slli	r3,r3,31
8110fb78:	4110703a 	and	r8,r8,r4
8110fb7c:	4410b03a 	or	r8,r8,r16
8110fb80:	40c6b03a 	or	r3,r8,r3
8110fb84:	dfc00417 	ldw	ra,16(sp)
8110fb88:	dcc00317 	ldw	r19,12(sp)
8110fb8c:	dc800217 	ldw	r18,8(sp)
8110fb90:	dc400117 	ldw	r17,4(sp)
8110fb94:	dc000017 	ldw	r16,0(sp)
8110fb98:	dec00504 	addi	sp,sp,20
8110fb9c:	f800283a 	ret
8110fba0:	0081ffc4 	movi	r2,2047
8110fba4:	80bfd626 	beq	r16,r2,8110fb00 <__reset+0xfb0efb00>
8110fba8:	4a402034 	orhi	r9,r9,128
8110fbac:	00800e04 	movi	r2,56
8110fbb0:	10c09f16 	blt	r2,r3,8110fe30 <__adddf3+0x3ac>
8110fbb4:	008007c4 	movi	r2,31
8110fbb8:	10c0c216 	blt	r2,r3,8110fec4 <__adddf3+0x440>
8110fbbc:	00800804 	movi	r2,32
8110fbc0:	10c5c83a 	sub	r2,r2,r3
8110fbc4:	488a983a 	sll	r5,r9,r2
8110fbc8:	30c8d83a 	srl	r4,r6,r3
8110fbcc:	3084983a 	sll	r2,r6,r2
8110fbd0:	48c6d83a 	srl	r3,r9,r3
8110fbd4:	290cb03a 	or	r6,r5,r4
8110fbd8:	1004c03a 	cmpne	r2,r2,zero
8110fbdc:	308cb03a 	or	r6,r6,r2
8110fbe0:	898dc83a 	sub	r6,r17,r6
8110fbe4:	89a3803a 	cmpltu	r17,r17,r6
8110fbe8:	40d1c83a 	sub	r8,r8,r3
8110fbec:	4451c83a 	sub	r8,r8,r17
8110fbf0:	3023883a 	mov	r17,r6
8110fbf4:	4080202c 	andhi	r2,r8,128
8110fbf8:	10002326 	beq	r2,zero,8110fc88 <__adddf3+0x204>
8110fbfc:	04c02034 	movhi	r19,128
8110fc00:	9cffffc4 	addi	r19,r19,-1
8110fc04:	44e6703a 	and	r19,r8,r19
8110fc08:	98007626 	beq	r19,zero,8110fde4 <__adddf3+0x360>
8110fc0c:	9809883a 	mov	r4,r19
8110fc10:	11055e00 	call	811055e0 <__clzsi2>
8110fc14:	10fffe04 	addi	r3,r2,-8
8110fc18:	010007c4 	movi	r4,31
8110fc1c:	20c07716 	blt	r4,r3,8110fdfc <__adddf3+0x378>
8110fc20:	00800804 	movi	r2,32
8110fc24:	10c5c83a 	sub	r2,r2,r3
8110fc28:	8884d83a 	srl	r2,r17,r2
8110fc2c:	98d0983a 	sll	r8,r19,r3
8110fc30:	88e2983a 	sll	r17,r17,r3
8110fc34:	1204b03a 	or	r2,r2,r8
8110fc38:	1c007416 	blt	r3,r16,8110fe0c <__adddf3+0x388>
8110fc3c:	1c21c83a 	sub	r16,r3,r16
8110fc40:	82000044 	addi	r8,r16,1
8110fc44:	00c007c4 	movi	r3,31
8110fc48:	1a009116 	blt	r3,r8,8110fe90 <__adddf3+0x40c>
8110fc4c:	00c00804 	movi	r3,32
8110fc50:	1a07c83a 	sub	r3,r3,r8
8110fc54:	8a08d83a 	srl	r4,r17,r8
8110fc58:	88e2983a 	sll	r17,r17,r3
8110fc5c:	10c6983a 	sll	r3,r2,r3
8110fc60:	1210d83a 	srl	r8,r2,r8
8110fc64:	8804c03a 	cmpne	r2,r17,zero
8110fc68:	1906b03a 	or	r3,r3,r4
8110fc6c:	18a2b03a 	or	r17,r3,r2
8110fc70:	0021883a 	mov	r16,zero
8110fc74:	003fa206 	br	8110fb00 <__reset+0xfb0efb00>
8110fc78:	1890b03a 	or	r8,r3,r2
8110fc7c:	40017d26 	beq	r8,zero,81110274 <__adddf3+0x7f0>
8110fc80:	1011883a 	mov	r8,r2
8110fc84:	1823883a 	mov	r17,r3
8110fc88:	888001cc 	andi	r2,r17,7
8110fc8c:	103f9e1e 	bne	r2,zero,8110fb08 <__reset+0xfb0efb08>
8110fc90:	4004977a 	slli	r2,r8,29
8110fc94:	8822d0fa 	srli	r17,r17,3
8110fc98:	4010d0fa 	srli	r8,r8,3
8110fc9c:	9007883a 	mov	r3,r18
8110fca0:	1444b03a 	or	r2,r2,r17
8110fca4:	0101ffc4 	movi	r4,2047
8110fca8:	81002426 	beq	r16,r4,8110fd3c <__adddf3+0x2b8>
8110fcac:	8120703a 	and	r16,r16,r4
8110fcb0:	01000434 	movhi	r4,16
8110fcb4:	213fffc4 	addi	r4,r4,-1
8110fcb8:	4110703a 	and	r8,r8,r4
8110fcbc:	003fa806 	br	8110fb60 <__reset+0xfb0efb60>
8110fcc0:	8089c83a 	sub	r4,r16,r2
8110fcc4:	01005e0e 	bge	zero,r4,8110fe40 <__adddf3+0x3bc>
8110fcc8:	10002b26 	beq	r2,zero,8110fd78 <__adddf3+0x2f4>
8110fccc:	0081ffc4 	movi	r2,2047
8110fcd0:	80bf8b26 	beq	r16,r2,8110fb00 <__reset+0xfb0efb00>
8110fcd4:	4a402034 	orhi	r9,r9,128
8110fcd8:	00800e04 	movi	r2,56
8110fcdc:	1100a40e 	bge	r2,r4,8110ff70 <__adddf3+0x4ec>
8110fce0:	498cb03a 	or	r6,r9,r6
8110fce4:	300ac03a 	cmpne	r5,r6,zero
8110fce8:	0013883a 	mov	r9,zero
8110fcec:	2c4b883a 	add	r5,r5,r17
8110fcf0:	2c63803a 	cmpltu	r17,r5,r17
8110fcf4:	4a11883a 	add	r8,r9,r8
8110fcf8:	8a11883a 	add	r8,r17,r8
8110fcfc:	2823883a 	mov	r17,r5
8110fd00:	4080202c 	andhi	r2,r8,128
8110fd04:	103fe026 	beq	r2,zero,8110fc88 <__reset+0xfb0efc88>
8110fd08:	84000044 	addi	r16,r16,1
8110fd0c:	0081ffc4 	movi	r2,2047
8110fd10:	8080d226 	beq	r16,r2,8111005c <__adddf3+0x5d8>
8110fd14:	00bfe034 	movhi	r2,65408
8110fd18:	10bfffc4 	addi	r2,r2,-1
8110fd1c:	4090703a 	and	r8,r8,r2
8110fd20:	880ad07a 	srli	r5,r17,1
8110fd24:	400897fa 	slli	r4,r8,31
8110fd28:	88c0004c 	andi	r3,r17,1
8110fd2c:	28e2b03a 	or	r17,r5,r3
8110fd30:	4010d07a 	srli	r8,r8,1
8110fd34:	2462b03a 	or	r17,r4,r17
8110fd38:	003f7106 	br	8110fb00 <__reset+0xfb0efb00>
8110fd3c:	4088b03a 	or	r4,r8,r2
8110fd40:	20014526 	beq	r4,zero,81110258 <__adddf3+0x7d4>
8110fd44:	01000434 	movhi	r4,16
8110fd48:	42000234 	orhi	r8,r8,8
8110fd4c:	213fffc4 	addi	r4,r4,-1
8110fd50:	4110703a 	and	r8,r8,r4
8110fd54:	003f8206 	br	8110fb60 <__reset+0xfb0efb60>
8110fd58:	18ffffc4 	addi	r3,r3,-1
8110fd5c:	1800491e 	bne	r3,zero,8110fe84 <__adddf3+0x400>
8110fd60:	898bc83a 	sub	r5,r17,r6
8110fd64:	8963803a 	cmpltu	r17,r17,r5
8110fd68:	4251c83a 	sub	r8,r8,r9
8110fd6c:	4451c83a 	sub	r8,r8,r17
8110fd70:	2823883a 	mov	r17,r5
8110fd74:	003f9f06 	br	8110fbf4 <__reset+0xfb0efbf4>
8110fd78:	4984b03a 	or	r2,r9,r6
8110fd7c:	103f6026 	beq	r2,zero,8110fb00 <__reset+0xfb0efb00>
8110fd80:	213fffc4 	addi	r4,r4,-1
8110fd84:	2000931e 	bne	r4,zero,8110ffd4 <__adddf3+0x550>
8110fd88:	898d883a 	add	r6,r17,r6
8110fd8c:	3463803a 	cmpltu	r17,r6,r17
8110fd90:	4251883a 	add	r8,r8,r9
8110fd94:	8a11883a 	add	r8,r17,r8
8110fd98:	3023883a 	mov	r17,r6
8110fd9c:	003fd806 	br	8110fd00 <__reset+0xfb0efd00>
8110fda0:	1800541e 	bne	r3,zero,8110fef4 <__adddf3+0x470>
8110fda4:	80800044 	addi	r2,r16,1
8110fda8:	1081ffcc 	andi	r2,r2,2047
8110fdac:	00c00044 	movi	r3,1
8110fdb0:	1880a00e 	bge	r3,r2,81110034 <__adddf3+0x5b0>
8110fdb4:	8989c83a 	sub	r4,r17,r6
8110fdb8:	8905803a 	cmpltu	r2,r17,r4
8110fdbc:	4267c83a 	sub	r19,r8,r9
8110fdc0:	98a7c83a 	sub	r19,r19,r2
8110fdc4:	9880202c 	andhi	r2,r19,128
8110fdc8:	10006326 	beq	r2,zero,8110ff58 <__adddf3+0x4d4>
8110fdcc:	3463c83a 	sub	r17,r6,r17
8110fdd0:	4a07c83a 	sub	r3,r9,r8
8110fdd4:	344d803a 	cmpltu	r6,r6,r17
8110fdd8:	19a7c83a 	sub	r19,r3,r6
8110fddc:	3825883a 	mov	r18,r7
8110fde0:	983f8a1e 	bne	r19,zero,8110fc0c <__reset+0xfb0efc0c>
8110fde4:	8809883a 	mov	r4,r17
8110fde8:	11055e00 	call	811055e0 <__clzsi2>
8110fdec:	10800804 	addi	r2,r2,32
8110fdf0:	10fffe04 	addi	r3,r2,-8
8110fdf4:	010007c4 	movi	r4,31
8110fdf8:	20ff890e 	bge	r4,r3,8110fc20 <__reset+0xfb0efc20>
8110fdfc:	10bff604 	addi	r2,r2,-40
8110fe00:	8884983a 	sll	r2,r17,r2
8110fe04:	0023883a 	mov	r17,zero
8110fe08:	1c3f8c0e 	bge	r3,r16,8110fc3c <__reset+0xfb0efc3c>
8110fe0c:	023fe034 	movhi	r8,65408
8110fe10:	423fffc4 	addi	r8,r8,-1
8110fe14:	80e1c83a 	sub	r16,r16,r3
8110fe18:	1210703a 	and	r8,r2,r8
8110fe1c:	003f3806 	br	8110fb00 <__reset+0xfb0efb00>
8110fe20:	9007883a 	mov	r3,r18
8110fe24:	0011883a 	mov	r8,zero
8110fe28:	0005883a 	mov	r2,zero
8110fe2c:	003f4c06 	br	8110fb60 <__reset+0xfb0efb60>
8110fe30:	498cb03a 	or	r6,r9,r6
8110fe34:	300cc03a 	cmpne	r6,r6,zero
8110fe38:	0007883a 	mov	r3,zero
8110fe3c:	003f6806 	br	8110fbe0 <__reset+0xfb0efbe0>
8110fe40:	20009c1e 	bne	r4,zero,811100b4 <__adddf3+0x630>
8110fe44:	80800044 	addi	r2,r16,1
8110fe48:	1141ffcc 	andi	r5,r2,2047
8110fe4c:	01000044 	movi	r4,1
8110fe50:	2140670e 	bge	r4,r5,8110fff0 <__adddf3+0x56c>
8110fe54:	0101ffc4 	movi	r4,2047
8110fe58:	11007f26 	beq	r2,r4,81110058 <__adddf3+0x5d4>
8110fe5c:	898d883a 	add	r6,r17,r6
8110fe60:	4247883a 	add	r3,r8,r9
8110fe64:	3451803a 	cmpltu	r8,r6,r17
8110fe68:	40d1883a 	add	r8,r8,r3
8110fe6c:	402297fa 	slli	r17,r8,31
8110fe70:	300cd07a 	srli	r6,r6,1
8110fe74:	4010d07a 	srli	r8,r8,1
8110fe78:	1021883a 	mov	r16,r2
8110fe7c:	89a2b03a 	or	r17,r17,r6
8110fe80:	003f1f06 	br	8110fb00 <__reset+0xfb0efb00>
8110fe84:	0081ffc4 	movi	r2,2047
8110fe88:	80bf481e 	bne	r16,r2,8110fbac <__reset+0xfb0efbac>
8110fe8c:	003f1c06 	br	8110fb00 <__reset+0xfb0efb00>
8110fe90:	843ff844 	addi	r16,r16,-31
8110fe94:	01000804 	movi	r4,32
8110fe98:	1406d83a 	srl	r3,r2,r16
8110fe9c:	41005026 	beq	r8,r4,8110ffe0 <__adddf3+0x55c>
8110fea0:	01001004 	movi	r4,64
8110fea4:	2211c83a 	sub	r8,r4,r8
8110fea8:	1204983a 	sll	r2,r2,r8
8110feac:	88a2b03a 	or	r17,r17,r2
8110feb0:	8822c03a 	cmpne	r17,r17,zero
8110feb4:	1c62b03a 	or	r17,r3,r17
8110feb8:	0011883a 	mov	r8,zero
8110febc:	0021883a 	mov	r16,zero
8110fec0:	003f7106 	br	8110fc88 <__reset+0xfb0efc88>
8110fec4:	193ff804 	addi	r4,r3,-32
8110fec8:	00800804 	movi	r2,32
8110fecc:	4908d83a 	srl	r4,r9,r4
8110fed0:	18804526 	beq	r3,r2,8110ffe8 <__adddf3+0x564>
8110fed4:	00801004 	movi	r2,64
8110fed8:	10c5c83a 	sub	r2,r2,r3
8110fedc:	4886983a 	sll	r3,r9,r2
8110fee0:	198cb03a 	or	r6,r3,r6
8110fee4:	300cc03a 	cmpne	r6,r6,zero
8110fee8:	218cb03a 	or	r6,r4,r6
8110feec:	0007883a 	mov	r3,zero
8110fef0:	003f3b06 	br	8110fbe0 <__reset+0xfb0efbe0>
8110fef4:	80002a26 	beq	r16,zero,8110ffa0 <__adddf3+0x51c>
8110fef8:	0101ffc4 	movi	r4,2047
8110fefc:	11006826 	beq	r2,r4,811100a0 <__adddf3+0x61c>
8110ff00:	00c7c83a 	sub	r3,zero,r3
8110ff04:	42002034 	orhi	r8,r8,128
8110ff08:	01000e04 	movi	r4,56
8110ff0c:	20c07c16 	blt	r4,r3,81110100 <__adddf3+0x67c>
8110ff10:	010007c4 	movi	r4,31
8110ff14:	20c0da16 	blt	r4,r3,81110280 <__adddf3+0x7fc>
8110ff18:	01000804 	movi	r4,32
8110ff1c:	20c9c83a 	sub	r4,r4,r3
8110ff20:	4114983a 	sll	r10,r8,r4
8110ff24:	88cad83a 	srl	r5,r17,r3
8110ff28:	8908983a 	sll	r4,r17,r4
8110ff2c:	40c6d83a 	srl	r3,r8,r3
8110ff30:	5162b03a 	or	r17,r10,r5
8110ff34:	2008c03a 	cmpne	r4,r4,zero
8110ff38:	8922b03a 	or	r17,r17,r4
8110ff3c:	3463c83a 	sub	r17,r6,r17
8110ff40:	48c7c83a 	sub	r3,r9,r3
8110ff44:	344d803a 	cmpltu	r6,r6,r17
8110ff48:	1991c83a 	sub	r8,r3,r6
8110ff4c:	1021883a 	mov	r16,r2
8110ff50:	3825883a 	mov	r18,r7
8110ff54:	003f2706 	br	8110fbf4 <__reset+0xfb0efbf4>
8110ff58:	24d0b03a 	or	r8,r4,r19
8110ff5c:	40001b1e 	bne	r8,zero,8110ffcc <__adddf3+0x548>
8110ff60:	0005883a 	mov	r2,zero
8110ff64:	0007883a 	mov	r3,zero
8110ff68:	0021883a 	mov	r16,zero
8110ff6c:	003f4d06 	br	8110fca4 <__reset+0xfb0efca4>
8110ff70:	008007c4 	movi	r2,31
8110ff74:	11003c16 	blt	r2,r4,81110068 <__adddf3+0x5e4>
8110ff78:	00800804 	movi	r2,32
8110ff7c:	1105c83a 	sub	r2,r2,r4
8110ff80:	488e983a 	sll	r7,r9,r2
8110ff84:	310ad83a 	srl	r5,r6,r4
8110ff88:	3084983a 	sll	r2,r6,r2
8110ff8c:	4912d83a 	srl	r9,r9,r4
8110ff90:	394ab03a 	or	r5,r7,r5
8110ff94:	1004c03a 	cmpne	r2,r2,zero
8110ff98:	288ab03a 	or	r5,r5,r2
8110ff9c:	003f5306 	br	8110fcec <__reset+0xfb0efcec>
8110ffa0:	4448b03a 	or	r4,r8,r17
8110ffa4:	20003e26 	beq	r4,zero,811100a0 <__adddf3+0x61c>
8110ffa8:	00c6303a 	nor	r3,zero,r3
8110ffac:	18003a1e 	bne	r3,zero,81110098 <__adddf3+0x614>
8110ffb0:	3463c83a 	sub	r17,r6,r17
8110ffb4:	4a07c83a 	sub	r3,r9,r8
8110ffb8:	344d803a 	cmpltu	r6,r6,r17
8110ffbc:	1991c83a 	sub	r8,r3,r6
8110ffc0:	1021883a 	mov	r16,r2
8110ffc4:	3825883a 	mov	r18,r7
8110ffc8:	003f0a06 	br	8110fbf4 <__reset+0xfb0efbf4>
8110ffcc:	2023883a 	mov	r17,r4
8110ffd0:	003f0d06 	br	8110fc08 <__reset+0xfb0efc08>
8110ffd4:	0081ffc4 	movi	r2,2047
8110ffd8:	80bf3f1e 	bne	r16,r2,8110fcd8 <__reset+0xfb0efcd8>
8110ffdc:	003ec806 	br	8110fb00 <__reset+0xfb0efb00>
8110ffe0:	0005883a 	mov	r2,zero
8110ffe4:	003fb106 	br	8110feac <__reset+0xfb0efeac>
8110ffe8:	0007883a 	mov	r3,zero
8110ffec:	003fbc06 	br	8110fee0 <__reset+0xfb0efee0>
8110fff0:	4444b03a 	or	r2,r8,r17
8110fff4:	8000871e 	bne	r16,zero,81110214 <__adddf3+0x790>
8110fff8:	1000ba26 	beq	r2,zero,811102e4 <__adddf3+0x860>
8110fffc:	4984b03a 	or	r2,r9,r6
81110000:	103ebf26 	beq	r2,zero,8110fb00 <__reset+0xfb0efb00>
81110004:	8985883a 	add	r2,r17,r6
81110008:	4247883a 	add	r3,r8,r9
8111000c:	1451803a 	cmpltu	r8,r2,r17
81110010:	40d1883a 	add	r8,r8,r3
81110014:	40c0202c 	andhi	r3,r8,128
81110018:	1023883a 	mov	r17,r2
8111001c:	183f1a26 	beq	r3,zero,8110fc88 <__reset+0xfb0efc88>
81110020:	00bfe034 	movhi	r2,65408
81110024:	10bfffc4 	addi	r2,r2,-1
81110028:	2021883a 	mov	r16,r4
8111002c:	4090703a 	and	r8,r8,r2
81110030:	003eb306 	br	8110fb00 <__reset+0xfb0efb00>
81110034:	4444b03a 	or	r2,r8,r17
81110038:	8000291e 	bne	r16,zero,811100e0 <__adddf3+0x65c>
8111003c:	10004b1e 	bne	r2,zero,8111016c <__adddf3+0x6e8>
81110040:	4990b03a 	or	r8,r9,r6
81110044:	40008b26 	beq	r8,zero,81110274 <__adddf3+0x7f0>
81110048:	4811883a 	mov	r8,r9
8111004c:	3023883a 	mov	r17,r6
81110050:	3825883a 	mov	r18,r7
81110054:	003eaa06 	br	8110fb00 <__reset+0xfb0efb00>
81110058:	1021883a 	mov	r16,r2
8111005c:	0011883a 	mov	r8,zero
81110060:	0005883a 	mov	r2,zero
81110064:	003f0f06 	br	8110fca4 <__reset+0xfb0efca4>
81110068:	217ff804 	addi	r5,r4,-32
8111006c:	00800804 	movi	r2,32
81110070:	494ad83a 	srl	r5,r9,r5
81110074:	20807d26 	beq	r4,r2,8111026c <__adddf3+0x7e8>
81110078:	00801004 	movi	r2,64
8111007c:	1109c83a 	sub	r4,r2,r4
81110080:	4912983a 	sll	r9,r9,r4
81110084:	498cb03a 	or	r6,r9,r6
81110088:	300cc03a 	cmpne	r6,r6,zero
8111008c:	298ab03a 	or	r5,r5,r6
81110090:	0013883a 	mov	r9,zero
81110094:	003f1506 	br	8110fcec <__reset+0xfb0efcec>
81110098:	0101ffc4 	movi	r4,2047
8111009c:	113f9a1e 	bne	r2,r4,8110ff08 <__reset+0xfb0eff08>
811100a0:	4811883a 	mov	r8,r9
811100a4:	3023883a 	mov	r17,r6
811100a8:	1021883a 	mov	r16,r2
811100ac:	3825883a 	mov	r18,r7
811100b0:	003e9306 	br	8110fb00 <__reset+0xfb0efb00>
811100b4:	8000161e 	bne	r16,zero,81110110 <__adddf3+0x68c>
811100b8:	444ab03a 	or	r5,r8,r17
811100bc:	28005126 	beq	r5,zero,81110204 <__adddf3+0x780>
811100c0:	0108303a 	nor	r4,zero,r4
811100c4:	20004d1e 	bne	r4,zero,811101fc <__adddf3+0x778>
811100c8:	89a3883a 	add	r17,r17,r6
811100cc:	4253883a 	add	r9,r8,r9
811100d0:	898d803a 	cmpltu	r6,r17,r6
811100d4:	3251883a 	add	r8,r6,r9
811100d8:	1021883a 	mov	r16,r2
811100dc:	003f0806 	br	8110fd00 <__reset+0xfb0efd00>
811100e0:	1000301e 	bne	r2,zero,811101a4 <__adddf3+0x720>
811100e4:	4984b03a 	or	r2,r9,r6
811100e8:	10007126 	beq	r2,zero,811102b0 <__adddf3+0x82c>
811100ec:	4811883a 	mov	r8,r9
811100f0:	3023883a 	mov	r17,r6
811100f4:	3825883a 	mov	r18,r7
811100f8:	0401ffc4 	movi	r16,2047
811100fc:	003e8006 	br	8110fb00 <__reset+0xfb0efb00>
81110100:	4462b03a 	or	r17,r8,r17
81110104:	8822c03a 	cmpne	r17,r17,zero
81110108:	0007883a 	mov	r3,zero
8111010c:	003f8b06 	br	8110ff3c <__reset+0xfb0eff3c>
81110110:	0141ffc4 	movi	r5,2047
81110114:	11403b26 	beq	r2,r5,81110204 <__adddf3+0x780>
81110118:	0109c83a 	sub	r4,zero,r4
8111011c:	42002034 	orhi	r8,r8,128
81110120:	01400e04 	movi	r5,56
81110124:	29006716 	blt	r5,r4,811102c4 <__adddf3+0x840>
81110128:	014007c4 	movi	r5,31
8111012c:	29007016 	blt	r5,r4,811102f0 <__adddf3+0x86c>
81110130:	01400804 	movi	r5,32
81110134:	290bc83a 	sub	r5,r5,r4
81110138:	4154983a 	sll	r10,r8,r5
8111013c:	890ed83a 	srl	r7,r17,r4
81110140:	894a983a 	sll	r5,r17,r5
81110144:	4108d83a 	srl	r4,r8,r4
81110148:	51e2b03a 	or	r17,r10,r7
8111014c:	280ac03a 	cmpne	r5,r5,zero
81110150:	8962b03a 	or	r17,r17,r5
81110154:	89a3883a 	add	r17,r17,r6
81110158:	2253883a 	add	r9,r4,r9
8111015c:	898d803a 	cmpltu	r6,r17,r6
81110160:	3251883a 	add	r8,r6,r9
81110164:	1021883a 	mov	r16,r2
81110168:	003ee506 	br	8110fd00 <__reset+0xfb0efd00>
8111016c:	4984b03a 	or	r2,r9,r6
81110170:	103e6326 	beq	r2,zero,8110fb00 <__reset+0xfb0efb00>
81110174:	8987c83a 	sub	r3,r17,r6
81110178:	88c9803a 	cmpltu	r4,r17,r3
8111017c:	4245c83a 	sub	r2,r8,r9
81110180:	1105c83a 	sub	r2,r2,r4
81110184:	1100202c 	andhi	r4,r2,128
81110188:	203ebb26 	beq	r4,zero,8110fc78 <__reset+0xfb0efc78>
8111018c:	3463c83a 	sub	r17,r6,r17
81110190:	4a07c83a 	sub	r3,r9,r8
81110194:	344d803a 	cmpltu	r6,r6,r17
81110198:	1991c83a 	sub	r8,r3,r6
8111019c:	3825883a 	mov	r18,r7
811101a0:	003e5706 	br	8110fb00 <__reset+0xfb0efb00>
811101a4:	4984b03a 	or	r2,r9,r6
811101a8:	10002e26 	beq	r2,zero,81110264 <__adddf3+0x7e0>
811101ac:	4004d0fa 	srli	r2,r8,3
811101b0:	8822d0fa 	srli	r17,r17,3
811101b4:	4010977a 	slli	r8,r8,29
811101b8:	10c0022c 	andhi	r3,r2,8
811101bc:	4462b03a 	or	r17,r8,r17
811101c0:	18000826 	beq	r3,zero,811101e4 <__adddf3+0x760>
811101c4:	4808d0fa 	srli	r4,r9,3
811101c8:	20c0022c 	andhi	r3,r4,8
811101cc:	1800051e 	bne	r3,zero,811101e4 <__adddf3+0x760>
811101d0:	300cd0fa 	srli	r6,r6,3
811101d4:	4806977a 	slli	r3,r9,29
811101d8:	2005883a 	mov	r2,r4
811101dc:	3825883a 	mov	r18,r7
811101e0:	19a2b03a 	or	r17,r3,r6
811101e4:	8810d77a 	srli	r8,r17,29
811101e8:	100490fa 	slli	r2,r2,3
811101ec:	882290fa 	slli	r17,r17,3
811101f0:	0401ffc4 	movi	r16,2047
811101f4:	4090b03a 	or	r8,r8,r2
811101f8:	003e4106 	br	8110fb00 <__reset+0xfb0efb00>
811101fc:	0141ffc4 	movi	r5,2047
81110200:	117fc71e 	bne	r2,r5,81110120 <__reset+0xfb0f0120>
81110204:	4811883a 	mov	r8,r9
81110208:	3023883a 	mov	r17,r6
8111020c:	1021883a 	mov	r16,r2
81110210:	003e3b06 	br	8110fb00 <__reset+0xfb0efb00>
81110214:	10002f26 	beq	r2,zero,811102d4 <__adddf3+0x850>
81110218:	4984b03a 	or	r2,r9,r6
8111021c:	10001126 	beq	r2,zero,81110264 <__adddf3+0x7e0>
81110220:	4004d0fa 	srli	r2,r8,3
81110224:	8822d0fa 	srli	r17,r17,3
81110228:	4010977a 	slli	r8,r8,29
8111022c:	10c0022c 	andhi	r3,r2,8
81110230:	4462b03a 	or	r17,r8,r17
81110234:	183feb26 	beq	r3,zero,811101e4 <__reset+0xfb0f01e4>
81110238:	4808d0fa 	srli	r4,r9,3
8111023c:	20c0022c 	andhi	r3,r4,8
81110240:	183fe81e 	bne	r3,zero,811101e4 <__reset+0xfb0f01e4>
81110244:	300cd0fa 	srli	r6,r6,3
81110248:	4806977a 	slli	r3,r9,29
8111024c:	2005883a 	mov	r2,r4
81110250:	19a2b03a 	or	r17,r3,r6
81110254:	003fe306 	br	811101e4 <__reset+0xfb0f01e4>
81110258:	0011883a 	mov	r8,zero
8111025c:	0005883a 	mov	r2,zero
81110260:	003e3f06 	br	8110fb60 <__reset+0xfb0efb60>
81110264:	0401ffc4 	movi	r16,2047
81110268:	003e2506 	br	8110fb00 <__reset+0xfb0efb00>
8111026c:	0013883a 	mov	r9,zero
81110270:	003f8406 	br	81110084 <__reset+0xfb0f0084>
81110274:	0005883a 	mov	r2,zero
81110278:	0007883a 	mov	r3,zero
8111027c:	003e8906 	br	8110fca4 <__reset+0xfb0efca4>
81110280:	197ff804 	addi	r5,r3,-32
81110284:	01000804 	movi	r4,32
81110288:	414ad83a 	srl	r5,r8,r5
8111028c:	19002426 	beq	r3,r4,81110320 <__adddf3+0x89c>
81110290:	01001004 	movi	r4,64
81110294:	20c7c83a 	sub	r3,r4,r3
81110298:	40c6983a 	sll	r3,r8,r3
8111029c:	1c46b03a 	or	r3,r3,r17
811102a0:	1806c03a 	cmpne	r3,r3,zero
811102a4:	28e2b03a 	or	r17,r5,r3
811102a8:	0007883a 	mov	r3,zero
811102ac:	003f2306 	br	8110ff3c <__reset+0xfb0eff3c>
811102b0:	0007883a 	mov	r3,zero
811102b4:	5811883a 	mov	r8,r11
811102b8:	00bfffc4 	movi	r2,-1
811102bc:	0401ffc4 	movi	r16,2047
811102c0:	003e7806 	br	8110fca4 <__reset+0xfb0efca4>
811102c4:	4462b03a 	or	r17,r8,r17
811102c8:	8822c03a 	cmpne	r17,r17,zero
811102cc:	0009883a 	mov	r4,zero
811102d0:	003fa006 	br	81110154 <__reset+0xfb0f0154>
811102d4:	4811883a 	mov	r8,r9
811102d8:	3023883a 	mov	r17,r6
811102dc:	0401ffc4 	movi	r16,2047
811102e0:	003e0706 	br	8110fb00 <__reset+0xfb0efb00>
811102e4:	4811883a 	mov	r8,r9
811102e8:	3023883a 	mov	r17,r6
811102ec:	003e0406 	br	8110fb00 <__reset+0xfb0efb00>
811102f0:	21fff804 	addi	r7,r4,-32
811102f4:	01400804 	movi	r5,32
811102f8:	41ced83a 	srl	r7,r8,r7
811102fc:	21400a26 	beq	r4,r5,81110328 <__adddf3+0x8a4>
81110300:	01401004 	movi	r5,64
81110304:	2909c83a 	sub	r4,r5,r4
81110308:	4108983a 	sll	r4,r8,r4
8111030c:	2448b03a 	or	r4,r4,r17
81110310:	2008c03a 	cmpne	r4,r4,zero
81110314:	3922b03a 	or	r17,r7,r4
81110318:	0009883a 	mov	r4,zero
8111031c:	003f8d06 	br	81110154 <__reset+0xfb0f0154>
81110320:	0007883a 	mov	r3,zero
81110324:	003fdd06 	br	8111029c <__reset+0xfb0f029c>
81110328:	0009883a 	mov	r4,zero
8111032c:	003ff706 	br	8111030c <__reset+0xfb0f030c>

81110330 <__divdf3>:
81110330:	defff204 	addi	sp,sp,-56
81110334:	dd400915 	stw	r21,36(sp)
81110338:	282ad53a 	srli	r21,r5,20
8111033c:	dd000815 	stw	r20,32(sp)
81110340:	2828d7fa 	srli	r20,r5,31
81110344:	dc000415 	stw	r16,16(sp)
81110348:	04000434 	movhi	r16,16
8111034c:	df000c15 	stw	fp,48(sp)
81110350:	843fffc4 	addi	r16,r16,-1
81110354:	dfc00d15 	stw	ra,52(sp)
81110358:	ddc00b15 	stw	r23,44(sp)
8111035c:	dd800a15 	stw	r22,40(sp)
81110360:	dcc00715 	stw	r19,28(sp)
81110364:	dc800615 	stw	r18,24(sp)
81110368:	dc400515 	stw	r17,20(sp)
8111036c:	ad41ffcc 	andi	r21,r21,2047
81110370:	2c20703a 	and	r16,r5,r16
81110374:	a7003fcc 	andi	fp,r20,255
81110378:	a8006126 	beq	r21,zero,81110500 <__divdf3+0x1d0>
8111037c:	0081ffc4 	movi	r2,2047
81110380:	2025883a 	mov	r18,r4
81110384:	a8803726 	beq	r21,r2,81110464 <__divdf3+0x134>
81110388:	80800434 	orhi	r2,r16,16
8111038c:	100490fa 	slli	r2,r2,3
81110390:	2020d77a 	srli	r16,r4,29
81110394:	202490fa 	slli	r18,r4,3
81110398:	ad7f0044 	addi	r21,r21,-1023
8111039c:	80a0b03a 	or	r16,r16,r2
811103a0:	0027883a 	mov	r19,zero
811103a4:	0013883a 	mov	r9,zero
811103a8:	3804d53a 	srli	r2,r7,20
811103ac:	382cd7fa 	srli	r22,r7,31
811103b0:	04400434 	movhi	r17,16
811103b4:	8c7fffc4 	addi	r17,r17,-1
811103b8:	1081ffcc 	andi	r2,r2,2047
811103bc:	3011883a 	mov	r8,r6
811103c0:	3c62703a 	and	r17,r7,r17
811103c4:	b5c03fcc 	andi	r23,r22,255
811103c8:	10006c26 	beq	r2,zero,8111057c <__divdf3+0x24c>
811103cc:	00c1ffc4 	movi	r3,2047
811103d0:	10c06426 	beq	r2,r3,81110564 <__divdf3+0x234>
811103d4:	88c00434 	orhi	r3,r17,16
811103d8:	180690fa 	slli	r3,r3,3
811103dc:	3022d77a 	srli	r17,r6,29
811103e0:	301090fa 	slli	r8,r6,3
811103e4:	10bf0044 	addi	r2,r2,-1023
811103e8:	88e2b03a 	or	r17,r17,r3
811103ec:	000f883a 	mov	r7,zero
811103f0:	a58cf03a 	xor	r6,r20,r22
811103f4:	3cc8b03a 	or	r4,r7,r19
811103f8:	a8abc83a 	sub	r21,r21,r2
811103fc:	008003c4 	movi	r2,15
81110400:	3007883a 	mov	r3,r6
81110404:	34c03fcc 	andi	r19,r6,255
81110408:	11009036 	bltu	r2,r4,8111064c <__divdf3+0x31c>
8111040c:	200890ba 	slli	r4,r4,2
81110410:	00a04474 	movhi	r2,33041
81110414:	10810904 	addi	r2,r2,1060
81110418:	2089883a 	add	r4,r4,r2
8111041c:	20800017 	ldw	r2,0(r4)
81110420:	1000683a 	jmp	r2
81110424:	8111064c 	andi	r4,r16,17433
81110428:	8111049c 	xori	r4,r16,17426
8111042c:	8111063c 	xorhi	r4,r16,17432
81110430:	81110490 	cmplti	r4,r16,17426
81110434:	8111063c 	xorhi	r4,r16,17432
81110438:	81110610 	cmplti	r4,r16,17432
8111043c:	8111063c 	xorhi	r4,r16,17432
81110440:	81110490 	cmplti	r4,r16,17426
81110444:	8111049c 	xori	r4,r16,17426
81110448:	8111049c 	xori	r4,r16,17426
8111044c:	81110610 	cmplti	r4,r16,17432
81110450:	81110490 	cmplti	r4,r16,17426
81110454:	81110480 	call	88111048 <__reset+0x20f1048>
81110458:	81110480 	call	88111048 <__reset+0x20f1048>
8111045c:	81110480 	call	88111048 <__reset+0x20f1048>
81110460:	81110930 	cmpltui	r4,r16,17444
81110464:	2404b03a 	or	r2,r4,r16
81110468:	1000661e 	bne	r2,zero,81110604 <__divdf3+0x2d4>
8111046c:	04c00204 	movi	r19,8
81110470:	0021883a 	mov	r16,zero
81110474:	0025883a 	mov	r18,zero
81110478:	02400084 	movi	r9,2
8111047c:	003fca06 	br	811103a8 <__reset+0xfb0f03a8>
81110480:	8023883a 	mov	r17,r16
81110484:	9011883a 	mov	r8,r18
81110488:	e02f883a 	mov	r23,fp
8111048c:	480f883a 	mov	r7,r9
81110490:	00800084 	movi	r2,2
81110494:	3881311e 	bne	r7,r2,8111095c <__divdf3+0x62c>
81110498:	b827883a 	mov	r19,r23
8111049c:	98c0004c 	andi	r3,r19,1
811104a0:	0081ffc4 	movi	r2,2047
811104a4:	000b883a 	mov	r5,zero
811104a8:	0025883a 	mov	r18,zero
811104ac:	1004953a 	slli	r2,r2,20
811104b0:	18c03fcc 	andi	r3,r3,255
811104b4:	04400434 	movhi	r17,16
811104b8:	8c7fffc4 	addi	r17,r17,-1
811104bc:	180697fa 	slli	r3,r3,31
811104c0:	2c4a703a 	and	r5,r5,r17
811104c4:	288ab03a 	or	r5,r5,r2
811104c8:	28c6b03a 	or	r3,r5,r3
811104cc:	9005883a 	mov	r2,r18
811104d0:	dfc00d17 	ldw	ra,52(sp)
811104d4:	df000c17 	ldw	fp,48(sp)
811104d8:	ddc00b17 	ldw	r23,44(sp)
811104dc:	dd800a17 	ldw	r22,40(sp)
811104e0:	dd400917 	ldw	r21,36(sp)
811104e4:	dd000817 	ldw	r20,32(sp)
811104e8:	dcc00717 	ldw	r19,28(sp)
811104ec:	dc800617 	ldw	r18,24(sp)
811104f0:	dc400517 	ldw	r17,20(sp)
811104f4:	dc000417 	ldw	r16,16(sp)
811104f8:	dec00e04 	addi	sp,sp,56
811104fc:	f800283a 	ret
81110500:	2404b03a 	or	r2,r4,r16
81110504:	2027883a 	mov	r19,r4
81110508:	10003926 	beq	r2,zero,811105f0 <__divdf3+0x2c0>
8111050c:	80012e26 	beq	r16,zero,811109c8 <__divdf3+0x698>
81110510:	8009883a 	mov	r4,r16
81110514:	d9800315 	stw	r6,12(sp)
81110518:	d9c00215 	stw	r7,8(sp)
8111051c:	11055e00 	call	811055e0 <__clzsi2>
81110520:	d9800317 	ldw	r6,12(sp)
81110524:	d9c00217 	ldw	r7,8(sp)
81110528:	113ffd44 	addi	r4,r2,-11
8111052c:	00c00704 	movi	r3,28
81110530:	19012116 	blt	r3,r4,811109b8 <__divdf3+0x688>
81110534:	00c00744 	movi	r3,29
81110538:	147ffe04 	addi	r17,r2,-8
8111053c:	1907c83a 	sub	r3,r3,r4
81110540:	8460983a 	sll	r16,r16,r17
81110544:	98c6d83a 	srl	r3,r19,r3
81110548:	9c64983a 	sll	r18,r19,r17
8111054c:	1c20b03a 	or	r16,r3,r16
81110550:	1080fcc4 	addi	r2,r2,1011
81110554:	00abc83a 	sub	r21,zero,r2
81110558:	0027883a 	mov	r19,zero
8111055c:	0013883a 	mov	r9,zero
81110560:	003f9106 	br	811103a8 <__reset+0xfb0f03a8>
81110564:	3446b03a 	or	r3,r6,r17
81110568:	18001f1e 	bne	r3,zero,811105e8 <__divdf3+0x2b8>
8111056c:	0023883a 	mov	r17,zero
81110570:	0011883a 	mov	r8,zero
81110574:	01c00084 	movi	r7,2
81110578:	003f9d06 	br	811103f0 <__reset+0xfb0f03f0>
8111057c:	3446b03a 	or	r3,r6,r17
81110580:	18001526 	beq	r3,zero,811105d8 <__divdf3+0x2a8>
81110584:	88011b26 	beq	r17,zero,811109f4 <__divdf3+0x6c4>
81110588:	8809883a 	mov	r4,r17
8111058c:	d9800315 	stw	r6,12(sp)
81110590:	da400115 	stw	r9,4(sp)
81110594:	11055e00 	call	811055e0 <__clzsi2>
81110598:	d9800317 	ldw	r6,12(sp)
8111059c:	da400117 	ldw	r9,4(sp)
811105a0:	113ffd44 	addi	r4,r2,-11
811105a4:	00c00704 	movi	r3,28
811105a8:	19010e16 	blt	r3,r4,811109e4 <__divdf3+0x6b4>
811105ac:	00c00744 	movi	r3,29
811105b0:	123ffe04 	addi	r8,r2,-8
811105b4:	1907c83a 	sub	r3,r3,r4
811105b8:	8a22983a 	sll	r17,r17,r8
811105bc:	30c6d83a 	srl	r3,r6,r3
811105c0:	3210983a 	sll	r8,r6,r8
811105c4:	1c62b03a 	or	r17,r3,r17
811105c8:	1080fcc4 	addi	r2,r2,1011
811105cc:	0085c83a 	sub	r2,zero,r2
811105d0:	000f883a 	mov	r7,zero
811105d4:	003f8606 	br	811103f0 <__reset+0xfb0f03f0>
811105d8:	0023883a 	mov	r17,zero
811105dc:	0011883a 	mov	r8,zero
811105e0:	01c00044 	movi	r7,1
811105e4:	003f8206 	br	811103f0 <__reset+0xfb0f03f0>
811105e8:	01c000c4 	movi	r7,3
811105ec:	003f8006 	br	811103f0 <__reset+0xfb0f03f0>
811105f0:	04c00104 	movi	r19,4
811105f4:	0021883a 	mov	r16,zero
811105f8:	0025883a 	mov	r18,zero
811105fc:	02400044 	movi	r9,1
81110600:	003f6906 	br	811103a8 <__reset+0xfb0f03a8>
81110604:	04c00304 	movi	r19,12
81110608:	024000c4 	movi	r9,3
8111060c:	003f6606 	br	811103a8 <__reset+0xfb0f03a8>
81110610:	01400434 	movhi	r5,16
81110614:	0007883a 	mov	r3,zero
81110618:	297fffc4 	addi	r5,r5,-1
8111061c:	04bfffc4 	movi	r18,-1
81110620:	0081ffc4 	movi	r2,2047
81110624:	003fa106 	br	811104ac <__reset+0xfb0f04ac>
81110628:	00c00044 	movi	r3,1
8111062c:	1887c83a 	sub	r3,r3,r2
81110630:	01000e04 	movi	r4,56
81110634:	20c1210e 	bge	r4,r3,81110abc <__divdf3+0x78c>
81110638:	98c0004c 	andi	r3,r19,1
8111063c:	0005883a 	mov	r2,zero
81110640:	000b883a 	mov	r5,zero
81110644:	0025883a 	mov	r18,zero
81110648:	003f9806 	br	811104ac <__reset+0xfb0f04ac>
8111064c:	8c00fd36 	bltu	r17,r16,81110a44 <__divdf3+0x714>
81110650:	8440fb26 	beq	r16,r17,81110a40 <__divdf3+0x710>
81110654:	8007883a 	mov	r3,r16
81110658:	ad7fffc4 	addi	r21,r21,-1
8111065c:	0021883a 	mov	r16,zero
81110660:	4004d63a 	srli	r2,r8,24
81110664:	8822923a 	slli	r17,r17,8
81110668:	1809883a 	mov	r4,r3
8111066c:	402c923a 	slli	r22,r8,8
81110670:	88b8b03a 	or	fp,r17,r2
81110674:	e028d43a 	srli	r20,fp,16
81110678:	d8c00015 	stw	r3,0(sp)
8111067c:	e5ffffcc 	andi	r23,fp,65535
81110680:	a00b883a 	mov	r5,r20
81110684:	110f9c80 	call	8110f9c8 <__udivsi3>
81110688:	d8c00017 	ldw	r3,0(sp)
8111068c:	a00b883a 	mov	r5,r20
81110690:	d8800315 	stw	r2,12(sp)
81110694:	1809883a 	mov	r4,r3
81110698:	110fa2c0 	call	8110fa2c <__umodsi3>
8111069c:	d9800317 	ldw	r6,12(sp)
811106a0:	1006943a 	slli	r3,r2,16
811106a4:	9004d43a 	srli	r2,r18,16
811106a8:	b9a3383a 	mul	r17,r23,r6
811106ac:	10c4b03a 	or	r2,r2,r3
811106b0:	1440062e 	bgeu	r2,r17,811106cc <__divdf3+0x39c>
811106b4:	1705883a 	add	r2,r2,fp
811106b8:	30ffffc4 	addi	r3,r6,-1
811106bc:	1700ee36 	bltu	r2,fp,81110a78 <__divdf3+0x748>
811106c0:	1440ed2e 	bgeu	r2,r17,81110a78 <__divdf3+0x748>
811106c4:	31bfff84 	addi	r6,r6,-2
811106c8:	1705883a 	add	r2,r2,fp
811106cc:	1463c83a 	sub	r17,r2,r17
811106d0:	a00b883a 	mov	r5,r20
811106d4:	8809883a 	mov	r4,r17
811106d8:	d9800315 	stw	r6,12(sp)
811106dc:	110f9c80 	call	8110f9c8 <__udivsi3>
811106e0:	a00b883a 	mov	r5,r20
811106e4:	8809883a 	mov	r4,r17
811106e8:	d8800215 	stw	r2,8(sp)
811106ec:	110fa2c0 	call	8110fa2c <__umodsi3>
811106f0:	d9c00217 	ldw	r7,8(sp)
811106f4:	1004943a 	slli	r2,r2,16
811106f8:	94bfffcc 	andi	r18,r18,65535
811106fc:	b9d1383a 	mul	r8,r23,r7
81110700:	90a4b03a 	or	r18,r18,r2
81110704:	d9800317 	ldw	r6,12(sp)
81110708:	9200062e 	bgeu	r18,r8,81110724 <__divdf3+0x3f4>
8111070c:	9725883a 	add	r18,r18,fp
81110710:	38bfffc4 	addi	r2,r7,-1
81110714:	9700d636 	bltu	r18,fp,81110a70 <__divdf3+0x740>
81110718:	9200d52e 	bgeu	r18,r8,81110a70 <__divdf3+0x740>
8111071c:	39ffff84 	addi	r7,r7,-2
81110720:	9725883a 	add	r18,r18,fp
81110724:	3004943a 	slli	r2,r6,16
81110728:	b012d43a 	srli	r9,r22,16
8111072c:	b1bfffcc 	andi	r6,r22,65535
81110730:	11e2b03a 	or	r17,r2,r7
81110734:	8806d43a 	srli	r3,r17,16
81110738:	893fffcc 	andi	r4,r17,65535
8111073c:	218b383a 	mul	r5,r4,r6
81110740:	30c5383a 	mul	r2,r6,r3
81110744:	2249383a 	mul	r4,r4,r9
81110748:	280ed43a 	srli	r7,r5,16
8111074c:	9225c83a 	sub	r18,r18,r8
81110750:	2089883a 	add	r4,r4,r2
81110754:	3909883a 	add	r4,r7,r4
81110758:	1a47383a 	mul	r3,r3,r9
8111075c:	2080022e 	bgeu	r4,r2,81110768 <__divdf3+0x438>
81110760:	00800074 	movhi	r2,1
81110764:	1887883a 	add	r3,r3,r2
81110768:	2004d43a 	srli	r2,r4,16
8111076c:	2008943a 	slli	r4,r4,16
81110770:	297fffcc 	andi	r5,r5,65535
81110774:	10c7883a 	add	r3,r2,r3
81110778:	2149883a 	add	r4,r4,r5
8111077c:	90c0a536 	bltu	r18,r3,81110a14 <__divdf3+0x6e4>
81110780:	90c0bf26 	beq	r18,r3,81110a80 <__divdf3+0x750>
81110784:	90c7c83a 	sub	r3,r18,r3
81110788:	810fc83a 	sub	r7,r16,r4
8111078c:	81e5803a 	cmpltu	r18,r16,r7
81110790:	1ca5c83a 	sub	r18,r3,r18
81110794:	e480c126 	beq	fp,r18,81110a9c <__divdf3+0x76c>
81110798:	a00b883a 	mov	r5,r20
8111079c:	9009883a 	mov	r4,r18
811107a0:	d9800315 	stw	r6,12(sp)
811107a4:	d9c00215 	stw	r7,8(sp)
811107a8:	da400115 	stw	r9,4(sp)
811107ac:	110f9c80 	call	8110f9c8 <__udivsi3>
811107b0:	a00b883a 	mov	r5,r20
811107b4:	9009883a 	mov	r4,r18
811107b8:	d8800015 	stw	r2,0(sp)
811107bc:	110fa2c0 	call	8110fa2c <__umodsi3>
811107c0:	d9c00217 	ldw	r7,8(sp)
811107c4:	da000017 	ldw	r8,0(sp)
811107c8:	1006943a 	slli	r3,r2,16
811107cc:	3804d43a 	srli	r2,r7,16
811107d0:	ba21383a 	mul	r16,r23,r8
811107d4:	d9800317 	ldw	r6,12(sp)
811107d8:	10c4b03a 	or	r2,r2,r3
811107dc:	da400117 	ldw	r9,4(sp)
811107e0:	1400062e 	bgeu	r2,r16,811107fc <__divdf3+0x4cc>
811107e4:	1705883a 	add	r2,r2,fp
811107e8:	40ffffc4 	addi	r3,r8,-1
811107ec:	1700ad36 	bltu	r2,fp,81110aa4 <__divdf3+0x774>
811107f0:	1400ac2e 	bgeu	r2,r16,81110aa4 <__divdf3+0x774>
811107f4:	423fff84 	addi	r8,r8,-2
811107f8:	1705883a 	add	r2,r2,fp
811107fc:	1421c83a 	sub	r16,r2,r16
81110800:	a00b883a 	mov	r5,r20
81110804:	8009883a 	mov	r4,r16
81110808:	d9800315 	stw	r6,12(sp)
8111080c:	d9c00215 	stw	r7,8(sp)
81110810:	da000015 	stw	r8,0(sp)
81110814:	da400115 	stw	r9,4(sp)
81110818:	110f9c80 	call	8110f9c8 <__udivsi3>
8111081c:	8009883a 	mov	r4,r16
81110820:	a00b883a 	mov	r5,r20
81110824:	1025883a 	mov	r18,r2
81110828:	110fa2c0 	call	8110fa2c <__umodsi3>
8111082c:	d9c00217 	ldw	r7,8(sp)
81110830:	1004943a 	slli	r2,r2,16
81110834:	bcaf383a 	mul	r23,r23,r18
81110838:	393fffcc 	andi	r4,r7,65535
8111083c:	2088b03a 	or	r4,r4,r2
81110840:	d9800317 	ldw	r6,12(sp)
81110844:	da000017 	ldw	r8,0(sp)
81110848:	da400117 	ldw	r9,4(sp)
8111084c:	25c0062e 	bgeu	r4,r23,81110868 <__divdf3+0x538>
81110850:	2709883a 	add	r4,r4,fp
81110854:	90bfffc4 	addi	r2,r18,-1
81110858:	27009436 	bltu	r4,fp,81110aac <__divdf3+0x77c>
8111085c:	25c0932e 	bgeu	r4,r23,81110aac <__divdf3+0x77c>
81110860:	94bfff84 	addi	r18,r18,-2
81110864:	2709883a 	add	r4,r4,fp
81110868:	4004943a 	slli	r2,r8,16
8111086c:	25efc83a 	sub	r23,r4,r23
81110870:	1490b03a 	or	r8,r2,r18
81110874:	4008d43a 	srli	r4,r8,16
81110878:	40ffffcc 	andi	r3,r8,65535
8111087c:	30c5383a 	mul	r2,r6,r3
81110880:	1a47383a 	mul	r3,r3,r9
81110884:	310d383a 	mul	r6,r6,r4
81110888:	100ad43a 	srli	r5,r2,16
8111088c:	4913383a 	mul	r9,r9,r4
81110890:	1987883a 	add	r3,r3,r6
81110894:	28c7883a 	add	r3,r5,r3
81110898:	1980022e 	bgeu	r3,r6,811108a4 <__divdf3+0x574>
8111089c:	01000074 	movhi	r4,1
811108a0:	4913883a 	add	r9,r9,r4
811108a4:	1808d43a 	srli	r4,r3,16
811108a8:	1806943a 	slli	r3,r3,16
811108ac:	10bfffcc 	andi	r2,r2,65535
811108b0:	2253883a 	add	r9,r4,r9
811108b4:	1887883a 	add	r3,r3,r2
811108b8:	ba403836 	bltu	r23,r9,8111099c <__divdf3+0x66c>
811108bc:	ba403626 	beq	r23,r9,81110998 <__divdf3+0x668>
811108c0:	42000054 	ori	r8,r8,1
811108c4:	a880ffc4 	addi	r2,r21,1023
811108c8:	00bf570e 	bge	zero,r2,81110628 <__reset+0xfb0f0628>
811108cc:	40c001cc 	andi	r3,r8,7
811108d0:	18000726 	beq	r3,zero,811108f0 <__divdf3+0x5c0>
811108d4:	40c003cc 	andi	r3,r8,15
811108d8:	01000104 	movi	r4,4
811108dc:	19000426 	beq	r3,r4,811108f0 <__divdf3+0x5c0>
811108e0:	4107883a 	add	r3,r8,r4
811108e4:	1a11803a 	cmpltu	r8,r3,r8
811108e8:	8a23883a 	add	r17,r17,r8
811108ec:	1811883a 	mov	r8,r3
811108f0:	88c0402c 	andhi	r3,r17,256
811108f4:	18000426 	beq	r3,zero,81110908 <__divdf3+0x5d8>
811108f8:	00ffc034 	movhi	r3,65280
811108fc:	18ffffc4 	addi	r3,r3,-1
81110900:	a8810004 	addi	r2,r21,1024
81110904:	88e2703a 	and	r17,r17,r3
81110908:	00c1ff84 	movi	r3,2046
8111090c:	18bee316 	blt	r3,r2,8111049c <__reset+0xfb0f049c>
81110910:	8824977a 	slli	r18,r17,29
81110914:	4010d0fa 	srli	r8,r8,3
81110918:	8822927a 	slli	r17,r17,9
8111091c:	1081ffcc 	andi	r2,r2,2047
81110920:	9224b03a 	or	r18,r18,r8
81110924:	880ad33a 	srli	r5,r17,12
81110928:	98c0004c 	andi	r3,r19,1
8111092c:	003edf06 	br	811104ac <__reset+0xfb0f04ac>
81110930:	8080022c 	andhi	r2,r16,8
81110934:	10001226 	beq	r2,zero,81110980 <__divdf3+0x650>
81110938:	8880022c 	andhi	r2,r17,8
8111093c:	1000101e 	bne	r2,zero,81110980 <__divdf3+0x650>
81110940:	00800434 	movhi	r2,16
81110944:	89400234 	orhi	r5,r17,8
81110948:	10bfffc4 	addi	r2,r2,-1
8111094c:	b007883a 	mov	r3,r22
81110950:	288a703a 	and	r5,r5,r2
81110954:	4025883a 	mov	r18,r8
81110958:	003f3106 	br	81110620 <__reset+0xfb0f0620>
8111095c:	008000c4 	movi	r2,3
81110960:	3880a626 	beq	r7,r2,81110bfc <__divdf3+0x8cc>
81110964:	00800044 	movi	r2,1
81110968:	3880521e 	bne	r7,r2,81110ab4 <__divdf3+0x784>
8111096c:	b807883a 	mov	r3,r23
81110970:	0005883a 	mov	r2,zero
81110974:	000b883a 	mov	r5,zero
81110978:	0025883a 	mov	r18,zero
8111097c:	003ecb06 	br	811104ac <__reset+0xfb0f04ac>
81110980:	00800434 	movhi	r2,16
81110984:	81400234 	orhi	r5,r16,8
81110988:	10bfffc4 	addi	r2,r2,-1
8111098c:	a007883a 	mov	r3,r20
81110990:	288a703a 	and	r5,r5,r2
81110994:	003f2206 	br	81110620 <__reset+0xfb0f0620>
81110998:	183fca26 	beq	r3,zero,811108c4 <__reset+0xfb0f08c4>
8111099c:	e5ef883a 	add	r23,fp,r23
811109a0:	40bfffc4 	addi	r2,r8,-1
811109a4:	bf00392e 	bgeu	r23,fp,81110a8c <__divdf3+0x75c>
811109a8:	1011883a 	mov	r8,r2
811109ac:	ba7fc41e 	bne	r23,r9,811108c0 <__reset+0xfb0f08c0>
811109b0:	b0ffc31e 	bne	r22,r3,811108c0 <__reset+0xfb0f08c0>
811109b4:	003fc306 	br	811108c4 <__reset+0xfb0f08c4>
811109b8:	143ff604 	addi	r16,r2,-40
811109bc:	9c20983a 	sll	r16,r19,r16
811109c0:	0025883a 	mov	r18,zero
811109c4:	003ee206 	br	81110550 <__reset+0xfb0f0550>
811109c8:	d9800315 	stw	r6,12(sp)
811109cc:	d9c00215 	stw	r7,8(sp)
811109d0:	11055e00 	call	811055e0 <__clzsi2>
811109d4:	10800804 	addi	r2,r2,32
811109d8:	d9c00217 	ldw	r7,8(sp)
811109dc:	d9800317 	ldw	r6,12(sp)
811109e0:	003ed106 	br	81110528 <__reset+0xfb0f0528>
811109e4:	147ff604 	addi	r17,r2,-40
811109e8:	3462983a 	sll	r17,r6,r17
811109ec:	0011883a 	mov	r8,zero
811109f0:	003ef506 	br	811105c8 <__reset+0xfb0f05c8>
811109f4:	3009883a 	mov	r4,r6
811109f8:	d9800315 	stw	r6,12(sp)
811109fc:	da400115 	stw	r9,4(sp)
81110a00:	11055e00 	call	811055e0 <__clzsi2>
81110a04:	10800804 	addi	r2,r2,32
81110a08:	da400117 	ldw	r9,4(sp)
81110a0c:	d9800317 	ldw	r6,12(sp)
81110a10:	003ee306 	br	811105a0 <__reset+0xfb0f05a0>
81110a14:	85a1883a 	add	r16,r16,r22
81110a18:	8585803a 	cmpltu	r2,r16,r22
81110a1c:	1705883a 	add	r2,r2,fp
81110a20:	14a5883a 	add	r18,r2,r18
81110a24:	88bfffc4 	addi	r2,r17,-1
81110a28:	e4800c2e 	bgeu	fp,r18,81110a5c <__divdf3+0x72c>
81110a2c:	90c03e36 	bltu	r18,r3,81110b28 <__divdf3+0x7f8>
81110a30:	1c806926 	beq	r3,r18,81110bd8 <__divdf3+0x8a8>
81110a34:	90c7c83a 	sub	r3,r18,r3
81110a38:	1023883a 	mov	r17,r2
81110a3c:	003f5206 	br	81110788 <__reset+0xfb0f0788>
81110a40:	923f0436 	bltu	r18,r8,81110654 <__reset+0xfb0f0654>
81110a44:	800897fa 	slli	r4,r16,31
81110a48:	9004d07a 	srli	r2,r18,1
81110a4c:	8006d07a 	srli	r3,r16,1
81110a50:	902097fa 	slli	r16,r18,31
81110a54:	20a4b03a 	or	r18,r4,r2
81110a58:	003f0106 	br	81110660 <__reset+0xfb0f0660>
81110a5c:	e4bff51e 	bne	fp,r18,81110a34 <__reset+0xfb0f0a34>
81110a60:	85bff22e 	bgeu	r16,r22,81110a2c <__reset+0xfb0f0a2c>
81110a64:	e0c7c83a 	sub	r3,fp,r3
81110a68:	1023883a 	mov	r17,r2
81110a6c:	003f4606 	br	81110788 <__reset+0xfb0f0788>
81110a70:	100f883a 	mov	r7,r2
81110a74:	003f2b06 	br	81110724 <__reset+0xfb0f0724>
81110a78:	180d883a 	mov	r6,r3
81110a7c:	003f1306 	br	811106cc <__reset+0xfb0f06cc>
81110a80:	813fe436 	bltu	r16,r4,81110a14 <__reset+0xfb0f0a14>
81110a84:	0007883a 	mov	r3,zero
81110a88:	003f3f06 	br	81110788 <__reset+0xfb0f0788>
81110a8c:	ba402c36 	bltu	r23,r9,81110b40 <__divdf3+0x810>
81110a90:	4dc05426 	beq	r9,r23,81110be4 <__divdf3+0x8b4>
81110a94:	1011883a 	mov	r8,r2
81110a98:	003f8906 	br	811108c0 <__reset+0xfb0f08c0>
81110a9c:	023fffc4 	movi	r8,-1
81110aa0:	003f8806 	br	811108c4 <__reset+0xfb0f08c4>
81110aa4:	1811883a 	mov	r8,r3
81110aa8:	003f5406 	br	811107fc <__reset+0xfb0f07fc>
81110aac:	1025883a 	mov	r18,r2
81110ab0:	003f6d06 	br	81110868 <__reset+0xfb0f0868>
81110ab4:	b827883a 	mov	r19,r23
81110ab8:	003f8206 	br	811108c4 <__reset+0xfb0f08c4>
81110abc:	010007c4 	movi	r4,31
81110ac0:	20c02616 	blt	r4,r3,81110b5c <__divdf3+0x82c>
81110ac4:	00800804 	movi	r2,32
81110ac8:	10c5c83a 	sub	r2,r2,r3
81110acc:	888a983a 	sll	r5,r17,r2
81110ad0:	40c8d83a 	srl	r4,r8,r3
81110ad4:	4084983a 	sll	r2,r8,r2
81110ad8:	88e2d83a 	srl	r17,r17,r3
81110adc:	2906b03a 	or	r3,r5,r4
81110ae0:	1004c03a 	cmpne	r2,r2,zero
81110ae4:	1886b03a 	or	r3,r3,r2
81110ae8:	188001cc 	andi	r2,r3,7
81110aec:	10000726 	beq	r2,zero,81110b0c <__divdf3+0x7dc>
81110af0:	188003cc 	andi	r2,r3,15
81110af4:	01000104 	movi	r4,4
81110af8:	11000426 	beq	r2,r4,81110b0c <__divdf3+0x7dc>
81110afc:	1805883a 	mov	r2,r3
81110b00:	10c00104 	addi	r3,r2,4
81110b04:	1885803a 	cmpltu	r2,r3,r2
81110b08:	88a3883a 	add	r17,r17,r2
81110b0c:	8880202c 	andhi	r2,r17,128
81110b10:	10002726 	beq	r2,zero,81110bb0 <__divdf3+0x880>
81110b14:	98c0004c 	andi	r3,r19,1
81110b18:	00800044 	movi	r2,1
81110b1c:	000b883a 	mov	r5,zero
81110b20:	0025883a 	mov	r18,zero
81110b24:	003e6106 	br	811104ac <__reset+0xfb0f04ac>
81110b28:	85a1883a 	add	r16,r16,r22
81110b2c:	8585803a 	cmpltu	r2,r16,r22
81110b30:	1705883a 	add	r2,r2,fp
81110b34:	14a5883a 	add	r18,r2,r18
81110b38:	8c7fff84 	addi	r17,r17,-2
81110b3c:	003f1106 	br	81110784 <__reset+0xfb0f0784>
81110b40:	b589883a 	add	r4,r22,r22
81110b44:	25ad803a 	cmpltu	r22,r4,r22
81110b48:	b739883a 	add	fp,r22,fp
81110b4c:	40bfff84 	addi	r2,r8,-2
81110b50:	bf2f883a 	add	r23,r23,fp
81110b54:	202d883a 	mov	r22,r4
81110b58:	003f9306 	br	811109a8 <__reset+0xfb0f09a8>
81110b5c:	013ff844 	movi	r4,-31
81110b60:	2085c83a 	sub	r2,r4,r2
81110b64:	8888d83a 	srl	r4,r17,r2
81110b68:	00800804 	movi	r2,32
81110b6c:	18802126 	beq	r3,r2,81110bf4 <__divdf3+0x8c4>
81110b70:	00801004 	movi	r2,64
81110b74:	10c5c83a 	sub	r2,r2,r3
81110b78:	8884983a 	sll	r2,r17,r2
81110b7c:	1204b03a 	or	r2,r2,r8
81110b80:	1004c03a 	cmpne	r2,r2,zero
81110b84:	2084b03a 	or	r2,r4,r2
81110b88:	144001cc 	andi	r17,r2,7
81110b8c:	88000d1e 	bne	r17,zero,81110bc4 <__divdf3+0x894>
81110b90:	000b883a 	mov	r5,zero
81110b94:	1024d0fa 	srli	r18,r2,3
81110b98:	98c0004c 	andi	r3,r19,1
81110b9c:	0005883a 	mov	r2,zero
81110ba0:	9464b03a 	or	r18,r18,r17
81110ba4:	003e4106 	br	811104ac <__reset+0xfb0f04ac>
81110ba8:	1007883a 	mov	r3,r2
81110bac:	0023883a 	mov	r17,zero
81110bb0:	880a927a 	slli	r5,r17,9
81110bb4:	1805883a 	mov	r2,r3
81110bb8:	8822977a 	slli	r17,r17,29
81110bbc:	280ad33a 	srli	r5,r5,12
81110bc0:	003ff406 	br	81110b94 <__reset+0xfb0f0b94>
81110bc4:	10c003cc 	andi	r3,r2,15
81110bc8:	01000104 	movi	r4,4
81110bcc:	193ff626 	beq	r3,r4,81110ba8 <__reset+0xfb0f0ba8>
81110bd0:	0023883a 	mov	r17,zero
81110bd4:	003fca06 	br	81110b00 <__reset+0xfb0f0b00>
81110bd8:	813fd336 	bltu	r16,r4,81110b28 <__reset+0xfb0f0b28>
81110bdc:	1023883a 	mov	r17,r2
81110be0:	003fa806 	br	81110a84 <__reset+0xfb0f0a84>
81110be4:	b0ffd636 	bltu	r22,r3,81110b40 <__reset+0xfb0f0b40>
81110be8:	1011883a 	mov	r8,r2
81110bec:	b0ff341e 	bne	r22,r3,811108c0 <__reset+0xfb0f08c0>
81110bf0:	003f3406 	br	811108c4 <__reset+0xfb0f08c4>
81110bf4:	0005883a 	mov	r2,zero
81110bf8:	003fe006 	br	81110b7c <__reset+0xfb0f0b7c>
81110bfc:	00800434 	movhi	r2,16
81110c00:	89400234 	orhi	r5,r17,8
81110c04:	10bfffc4 	addi	r2,r2,-1
81110c08:	b807883a 	mov	r3,r23
81110c0c:	288a703a 	and	r5,r5,r2
81110c10:	4025883a 	mov	r18,r8
81110c14:	003e8206 	br	81110620 <__reset+0xfb0f0620>

81110c18 <__eqdf2>:
81110c18:	2804d53a 	srli	r2,r5,20
81110c1c:	3806d53a 	srli	r3,r7,20
81110c20:	02000434 	movhi	r8,16
81110c24:	423fffc4 	addi	r8,r8,-1
81110c28:	1081ffcc 	andi	r2,r2,2047
81110c2c:	0281ffc4 	movi	r10,2047
81110c30:	2a12703a 	and	r9,r5,r8
81110c34:	18c1ffcc 	andi	r3,r3,2047
81110c38:	3a10703a 	and	r8,r7,r8
81110c3c:	280ad7fa 	srli	r5,r5,31
81110c40:	380ed7fa 	srli	r7,r7,31
81110c44:	12801026 	beq	r2,r10,81110c88 <__eqdf2+0x70>
81110c48:	0281ffc4 	movi	r10,2047
81110c4c:	1a800a26 	beq	r3,r10,81110c78 <__eqdf2+0x60>
81110c50:	10c00226 	beq	r2,r3,81110c5c <__eqdf2+0x44>
81110c54:	00800044 	movi	r2,1
81110c58:	f800283a 	ret
81110c5c:	4a3ffd1e 	bne	r9,r8,81110c54 <__reset+0xfb0f0c54>
81110c60:	21bffc1e 	bne	r4,r6,81110c54 <__reset+0xfb0f0c54>
81110c64:	29c00c26 	beq	r5,r7,81110c98 <__eqdf2+0x80>
81110c68:	103ffa1e 	bne	r2,zero,81110c54 <__reset+0xfb0f0c54>
81110c6c:	2244b03a 	or	r2,r4,r9
81110c70:	1004c03a 	cmpne	r2,r2,zero
81110c74:	f800283a 	ret
81110c78:	3214b03a 	or	r10,r6,r8
81110c7c:	503ff426 	beq	r10,zero,81110c50 <__reset+0xfb0f0c50>
81110c80:	00800044 	movi	r2,1
81110c84:	f800283a 	ret
81110c88:	2254b03a 	or	r10,r4,r9
81110c8c:	503fee26 	beq	r10,zero,81110c48 <__reset+0xfb0f0c48>
81110c90:	00800044 	movi	r2,1
81110c94:	f800283a 	ret
81110c98:	0005883a 	mov	r2,zero
81110c9c:	f800283a 	ret

81110ca0 <__gedf2>:
81110ca0:	2804d53a 	srli	r2,r5,20
81110ca4:	3806d53a 	srli	r3,r7,20
81110ca8:	02000434 	movhi	r8,16
81110cac:	423fffc4 	addi	r8,r8,-1
81110cb0:	1081ffcc 	andi	r2,r2,2047
81110cb4:	0241ffc4 	movi	r9,2047
81110cb8:	2a14703a 	and	r10,r5,r8
81110cbc:	18c1ffcc 	andi	r3,r3,2047
81110cc0:	3a10703a 	and	r8,r7,r8
81110cc4:	280ad7fa 	srli	r5,r5,31
81110cc8:	380ed7fa 	srli	r7,r7,31
81110ccc:	12401d26 	beq	r2,r9,81110d44 <__gedf2+0xa4>
81110cd0:	0241ffc4 	movi	r9,2047
81110cd4:	1a401226 	beq	r3,r9,81110d20 <__gedf2+0x80>
81110cd8:	1000081e 	bne	r2,zero,81110cfc <__gedf2+0x5c>
81110cdc:	2296b03a 	or	r11,r4,r10
81110ce0:	5813003a 	cmpeq	r9,r11,zero
81110ce4:	1800091e 	bne	r3,zero,81110d0c <__gedf2+0x6c>
81110ce8:	3218b03a 	or	r12,r6,r8
81110cec:	6000071e 	bne	r12,zero,81110d0c <__gedf2+0x6c>
81110cf0:	0005883a 	mov	r2,zero
81110cf4:	5800101e 	bne	r11,zero,81110d38 <__gedf2+0x98>
81110cf8:	f800283a 	ret
81110cfc:	18000c1e 	bne	r3,zero,81110d30 <__gedf2+0x90>
81110d00:	3212b03a 	or	r9,r6,r8
81110d04:	48000c26 	beq	r9,zero,81110d38 <__gedf2+0x98>
81110d08:	0013883a 	mov	r9,zero
81110d0c:	39c03fcc 	andi	r7,r7,255
81110d10:	48000826 	beq	r9,zero,81110d34 <__gedf2+0x94>
81110d14:	38000926 	beq	r7,zero,81110d3c <__gedf2+0x9c>
81110d18:	00800044 	movi	r2,1
81110d1c:	f800283a 	ret
81110d20:	3212b03a 	or	r9,r6,r8
81110d24:	483fec26 	beq	r9,zero,81110cd8 <__reset+0xfb0f0cd8>
81110d28:	00bfff84 	movi	r2,-2
81110d2c:	f800283a 	ret
81110d30:	39c03fcc 	andi	r7,r7,255
81110d34:	29c00626 	beq	r5,r7,81110d50 <__gedf2+0xb0>
81110d38:	283ff726 	beq	r5,zero,81110d18 <__reset+0xfb0f0d18>
81110d3c:	00bfffc4 	movi	r2,-1
81110d40:	f800283a 	ret
81110d44:	2292b03a 	or	r9,r4,r10
81110d48:	483fe126 	beq	r9,zero,81110cd0 <__reset+0xfb0f0cd0>
81110d4c:	003ff606 	br	81110d28 <__reset+0xfb0f0d28>
81110d50:	18bff916 	blt	r3,r2,81110d38 <__reset+0xfb0f0d38>
81110d54:	10c00316 	blt	r2,r3,81110d64 <__gedf2+0xc4>
81110d58:	42bff736 	bltu	r8,r10,81110d38 <__reset+0xfb0f0d38>
81110d5c:	52000326 	beq	r10,r8,81110d6c <__gedf2+0xcc>
81110d60:	5200042e 	bgeu	r10,r8,81110d74 <__gedf2+0xd4>
81110d64:	283fec1e 	bne	r5,zero,81110d18 <__reset+0xfb0f0d18>
81110d68:	003ff406 	br	81110d3c <__reset+0xfb0f0d3c>
81110d6c:	313ff236 	bltu	r6,r4,81110d38 <__reset+0xfb0f0d38>
81110d70:	21bffc36 	bltu	r4,r6,81110d64 <__reset+0xfb0f0d64>
81110d74:	0005883a 	mov	r2,zero
81110d78:	f800283a 	ret

81110d7c <__ledf2>:
81110d7c:	2804d53a 	srli	r2,r5,20
81110d80:	3810d53a 	srli	r8,r7,20
81110d84:	00c00434 	movhi	r3,16
81110d88:	18ffffc4 	addi	r3,r3,-1
81110d8c:	1081ffcc 	andi	r2,r2,2047
81110d90:	0241ffc4 	movi	r9,2047
81110d94:	28d4703a 	and	r10,r5,r3
81110d98:	4201ffcc 	andi	r8,r8,2047
81110d9c:	38c6703a 	and	r3,r7,r3
81110da0:	280ad7fa 	srli	r5,r5,31
81110da4:	380ed7fa 	srli	r7,r7,31
81110da8:	12401f26 	beq	r2,r9,81110e28 <__ledf2+0xac>
81110dac:	0241ffc4 	movi	r9,2047
81110db0:	42401426 	beq	r8,r9,81110e04 <__ledf2+0x88>
81110db4:	1000091e 	bne	r2,zero,81110ddc <__ledf2+0x60>
81110db8:	2296b03a 	or	r11,r4,r10
81110dbc:	5813003a 	cmpeq	r9,r11,zero
81110dc0:	29403fcc 	andi	r5,r5,255
81110dc4:	40000a1e 	bne	r8,zero,81110df0 <__ledf2+0x74>
81110dc8:	30d8b03a 	or	r12,r6,r3
81110dcc:	6000081e 	bne	r12,zero,81110df0 <__ledf2+0x74>
81110dd0:	0005883a 	mov	r2,zero
81110dd4:	5800111e 	bne	r11,zero,81110e1c <__ledf2+0xa0>
81110dd8:	f800283a 	ret
81110ddc:	29403fcc 	andi	r5,r5,255
81110de0:	40000c1e 	bne	r8,zero,81110e14 <__ledf2+0x98>
81110de4:	30d2b03a 	or	r9,r6,r3
81110de8:	48000c26 	beq	r9,zero,81110e1c <__ledf2+0xa0>
81110dec:	0013883a 	mov	r9,zero
81110df0:	39c03fcc 	andi	r7,r7,255
81110df4:	48000826 	beq	r9,zero,81110e18 <__ledf2+0x9c>
81110df8:	38001126 	beq	r7,zero,81110e40 <__ledf2+0xc4>
81110dfc:	00800044 	movi	r2,1
81110e00:	f800283a 	ret
81110e04:	30d2b03a 	or	r9,r6,r3
81110e08:	483fea26 	beq	r9,zero,81110db4 <__reset+0xfb0f0db4>
81110e0c:	00800084 	movi	r2,2
81110e10:	f800283a 	ret
81110e14:	39c03fcc 	andi	r7,r7,255
81110e18:	39400726 	beq	r7,r5,81110e38 <__ledf2+0xbc>
81110e1c:	2800081e 	bne	r5,zero,81110e40 <__ledf2+0xc4>
81110e20:	00800044 	movi	r2,1
81110e24:	f800283a 	ret
81110e28:	2292b03a 	or	r9,r4,r10
81110e2c:	483fdf26 	beq	r9,zero,81110dac <__reset+0xfb0f0dac>
81110e30:	00800084 	movi	r2,2
81110e34:	f800283a 	ret
81110e38:	4080030e 	bge	r8,r2,81110e48 <__ledf2+0xcc>
81110e3c:	383fef26 	beq	r7,zero,81110dfc <__reset+0xfb0f0dfc>
81110e40:	00bfffc4 	movi	r2,-1
81110e44:	f800283a 	ret
81110e48:	123feb16 	blt	r2,r8,81110df8 <__reset+0xfb0f0df8>
81110e4c:	1abff336 	bltu	r3,r10,81110e1c <__reset+0xfb0f0e1c>
81110e50:	50c00326 	beq	r10,r3,81110e60 <__ledf2+0xe4>
81110e54:	50c0042e 	bgeu	r10,r3,81110e68 <__ledf2+0xec>
81110e58:	283fe81e 	bne	r5,zero,81110dfc <__reset+0xfb0f0dfc>
81110e5c:	003ff806 	br	81110e40 <__reset+0xfb0f0e40>
81110e60:	313fee36 	bltu	r6,r4,81110e1c <__reset+0xfb0f0e1c>
81110e64:	21bffc36 	bltu	r4,r6,81110e58 <__reset+0xfb0f0e58>
81110e68:	0005883a 	mov	r2,zero
81110e6c:	f800283a 	ret

81110e70 <__subdf3>:
81110e70:	02000434 	movhi	r8,16
81110e74:	423fffc4 	addi	r8,r8,-1
81110e78:	defffb04 	addi	sp,sp,-20
81110e7c:	2a14703a 	and	r10,r5,r8
81110e80:	3812d53a 	srli	r9,r7,20
81110e84:	3a10703a 	and	r8,r7,r8
81110e88:	2006d77a 	srli	r3,r4,29
81110e8c:	3004d77a 	srli	r2,r6,29
81110e90:	dc000015 	stw	r16,0(sp)
81110e94:	501490fa 	slli	r10,r10,3
81110e98:	2820d53a 	srli	r16,r5,20
81110e9c:	401090fa 	slli	r8,r8,3
81110ea0:	dc800215 	stw	r18,8(sp)
81110ea4:	dc400115 	stw	r17,4(sp)
81110ea8:	dfc00415 	stw	ra,16(sp)
81110eac:	202290fa 	slli	r17,r4,3
81110eb0:	dcc00315 	stw	r19,12(sp)
81110eb4:	4a41ffcc 	andi	r9,r9,2047
81110eb8:	0101ffc4 	movi	r4,2047
81110ebc:	2824d7fa 	srli	r18,r5,31
81110ec0:	8401ffcc 	andi	r16,r16,2047
81110ec4:	50c6b03a 	or	r3,r10,r3
81110ec8:	380ed7fa 	srli	r7,r7,31
81110ecc:	408ab03a 	or	r5,r8,r2
81110ed0:	300c90fa 	slli	r6,r6,3
81110ed4:	49009626 	beq	r9,r4,81111130 <__subdf3+0x2c0>
81110ed8:	39c0005c 	xori	r7,r7,1
81110edc:	8245c83a 	sub	r2,r16,r9
81110ee0:	3c807426 	beq	r7,r18,811110b4 <__subdf3+0x244>
81110ee4:	0080af0e 	bge	zero,r2,811111a4 <__subdf3+0x334>
81110ee8:	48002a1e 	bne	r9,zero,81110f94 <__subdf3+0x124>
81110eec:	2988b03a 	or	r4,r5,r6
81110ef0:	20009a1e 	bne	r4,zero,8111115c <__subdf3+0x2ec>
81110ef4:	888001cc 	andi	r2,r17,7
81110ef8:	10000726 	beq	r2,zero,81110f18 <__subdf3+0xa8>
81110efc:	888003cc 	andi	r2,r17,15
81110f00:	01000104 	movi	r4,4
81110f04:	11000426 	beq	r2,r4,81110f18 <__subdf3+0xa8>
81110f08:	890b883a 	add	r5,r17,r4
81110f0c:	2c63803a 	cmpltu	r17,r5,r17
81110f10:	1c47883a 	add	r3,r3,r17
81110f14:	2823883a 	mov	r17,r5
81110f18:	1880202c 	andhi	r2,r3,128
81110f1c:	10005926 	beq	r2,zero,81111084 <__subdf3+0x214>
81110f20:	84000044 	addi	r16,r16,1
81110f24:	0081ffc4 	movi	r2,2047
81110f28:	8080be26 	beq	r16,r2,81111224 <__subdf3+0x3b4>
81110f2c:	017fe034 	movhi	r5,65408
81110f30:	297fffc4 	addi	r5,r5,-1
81110f34:	1946703a 	and	r3,r3,r5
81110f38:	1804977a 	slli	r2,r3,29
81110f3c:	1806927a 	slli	r3,r3,9
81110f40:	8822d0fa 	srli	r17,r17,3
81110f44:	8401ffcc 	andi	r16,r16,2047
81110f48:	180ad33a 	srli	r5,r3,12
81110f4c:	9100004c 	andi	r4,r18,1
81110f50:	1444b03a 	or	r2,r2,r17
81110f54:	80c1ffcc 	andi	r3,r16,2047
81110f58:	1820953a 	slli	r16,r3,20
81110f5c:	20c03fcc 	andi	r3,r4,255
81110f60:	180897fa 	slli	r4,r3,31
81110f64:	00c00434 	movhi	r3,16
81110f68:	18ffffc4 	addi	r3,r3,-1
81110f6c:	28c6703a 	and	r3,r5,r3
81110f70:	1c06b03a 	or	r3,r3,r16
81110f74:	1906b03a 	or	r3,r3,r4
81110f78:	dfc00417 	ldw	ra,16(sp)
81110f7c:	dcc00317 	ldw	r19,12(sp)
81110f80:	dc800217 	ldw	r18,8(sp)
81110f84:	dc400117 	ldw	r17,4(sp)
81110f88:	dc000017 	ldw	r16,0(sp)
81110f8c:	dec00504 	addi	sp,sp,20
81110f90:	f800283a 	ret
81110f94:	0101ffc4 	movi	r4,2047
81110f98:	813fd626 	beq	r16,r4,81110ef4 <__reset+0xfb0f0ef4>
81110f9c:	29402034 	orhi	r5,r5,128
81110fa0:	01000e04 	movi	r4,56
81110fa4:	2080a316 	blt	r4,r2,81111234 <__subdf3+0x3c4>
81110fa8:	010007c4 	movi	r4,31
81110fac:	2080c616 	blt	r4,r2,811112c8 <__subdf3+0x458>
81110fb0:	01000804 	movi	r4,32
81110fb4:	2089c83a 	sub	r4,r4,r2
81110fb8:	2910983a 	sll	r8,r5,r4
81110fbc:	308ed83a 	srl	r7,r6,r2
81110fc0:	3108983a 	sll	r4,r6,r4
81110fc4:	2884d83a 	srl	r2,r5,r2
81110fc8:	41ccb03a 	or	r6,r8,r7
81110fcc:	2008c03a 	cmpne	r4,r4,zero
81110fd0:	310cb03a 	or	r6,r6,r4
81110fd4:	898dc83a 	sub	r6,r17,r6
81110fd8:	89a3803a 	cmpltu	r17,r17,r6
81110fdc:	1887c83a 	sub	r3,r3,r2
81110fe0:	1c47c83a 	sub	r3,r3,r17
81110fe4:	3023883a 	mov	r17,r6
81110fe8:	1880202c 	andhi	r2,r3,128
81110fec:	10002326 	beq	r2,zero,8111107c <__subdf3+0x20c>
81110ff0:	04c02034 	movhi	r19,128
81110ff4:	9cffffc4 	addi	r19,r19,-1
81110ff8:	1ce6703a 	and	r19,r3,r19
81110ffc:	98007a26 	beq	r19,zero,811111e8 <__subdf3+0x378>
81111000:	9809883a 	mov	r4,r19
81111004:	11055e00 	call	811055e0 <__clzsi2>
81111008:	113ffe04 	addi	r4,r2,-8
8111100c:	00c007c4 	movi	r3,31
81111010:	19007b16 	blt	r3,r4,81111200 <__subdf3+0x390>
81111014:	00800804 	movi	r2,32
81111018:	1105c83a 	sub	r2,r2,r4
8111101c:	8884d83a 	srl	r2,r17,r2
81111020:	9906983a 	sll	r3,r19,r4
81111024:	8922983a 	sll	r17,r17,r4
81111028:	10c4b03a 	or	r2,r2,r3
8111102c:	24007816 	blt	r4,r16,81111210 <__subdf3+0x3a0>
81111030:	2421c83a 	sub	r16,r4,r16
81111034:	80c00044 	addi	r3,r16,1
81111038:	010007c4 	movi	r4,31
8111103c:	20c09516 	blt	r4,r3,81111294 <__subdf3+0x424>
81111040:	01400804 	movi	r5,32
81111044:	28cbc83a 	sub	r5,r5,r3
81111048:	88c8d83a 	srl	r4,r17,r3
8111104c:	8962983a 	sll	r17,r17,r5
81111050:	114a983a 	sll	r5,r2,r5
81111054:	10c6d83a 	srl	r3,r2,r3
81111058:	8804c03a 	cmpne	r2,r17,zero
8111105c:	290ab03a 	or	r5,r5,r4
81111060:	28a2b03a 	or	r17,r5,r2
81111064:	0021883a 	mov	r16,zero
81111068:	003fa206 	br	81110ef4 <__reset+0xfb0f0ef4>
8111106c:	2090b03a 	or	r8,r4,r2
81111070:	40018e26 	beq	r8,zero,811116ac <__subdf3+0x83c>
81111074:	1007883a 	mov	r3,r2
81111078:	2023883a 	mov	r17,r4
8111107c:	888001cc 	andi	r2,r17,7
81111080:	103f9e1e 	bne	r2,zero,81110efc <__reset+0xfb0f0efc>
81111084:	1804977a 	slli	r2,r3,29
81111088:	8822d0fa 	srli	r17,r17,3
8111108c:	1810d0fa 	srli	r8,r3,3
81111090:	9100004c 	andi	r4,r18,1
81111094:	1444b03a 	or	r2,r2,r17
81111098:	00c1ffc4 	movi	r3,2047
8111109c:	80c02826 	beq	r16,r3,81111140 <__subdf3+0x2d0>
811110a0:	01400434 	movhi	r5,16
811110a4:	297fffc4 	addi	r5,r5,-1
811110a8:	80e0703a 	and	r16,r16,r3
811110ac:	414a703a 	and	r5,r8,r5
811110b0:	003fa806 	br	81110f54 <__reset+0xfb0f0f54>
811110b4:	0080630e 	bge	zero,r2,81111244 <__subdf3+0x3d4>
811110b8:	48003026 	beq	r9,zero,8111117c <__subdf3+0x30c>
811110bc:	0101ffc4 	movi	r4,2047
811110c0:	813f8c26 	beq	r16,r4,81110ef4 <__reset+0xfb0f0ef4>
811110c4:	29402034 	orhi	r5,r5,128
811110c8:	01000e04 	movi	r4,56
811110cc:	2080a90e 	bge	r4,r2,81111374 <__subdf3+0x504>
811110d0:	298cb03a 	or	r6,r5,r6
811110d4:	3012c03a 	cmpne	r9,r6,zero
811110d8:	0005883a 	mov	r2,zero
811110dc:	4c53883a 	add	r9,r9,r17
811110e0:	4c63803a 	cmpltu	r17,r9,r17
811110e4:	10c7883a 	add	r3,r2,r3
811110e8:	88c7883a 	add	r3,r17,r3
811110ec:	4823883a 	mov	r17,r9
811110f0:	1880202c 	andhi	r2,r3,128
811110f4:	1000d026 	beq	r2,zero,81111438 <__subdf3+0x5c8>
811110f8:	84000044 	addi	r16,r16,1
811110fc:	0081ffc4 	movi	r2,2047
81111100:	8080fe26 	beq	r16,r2,811114fc <__subdf3+0x68c>
81111104:	00bfe034 	movhi	r2,65408
81111108:	10bfffc4 	addi	r2,r2,-1
8111110c:	1886703a 	and	r3,r3,r2
81111110:	880ad07a 	srli	r5,r17,1
81111114:	180497fa 	slli	r2,r3,31
81111118:	8900004c 	andi	r4,r17,1
8111111c:	2922b03a 	or	r17,r5,r4
81111120:	1806d07a 	srli	r3,r3,1
81111124:	1462b03a 	or	r17,r2,r17
81111128:	3825883a 	mov	r18,r7
8111112c:	003f7106 	br	81110ef4 <__reset+0xfb0f0ef4>
81111130:	2984b03a 	or	r2,r5,r6
81111134:	103f6826 	beq	r2,zero,81110ed8 <__reset+0xfb0f0ed8>
81111138:	39c03fcc 	andi	r7,r7,255
8111113c:	003f6706 	br	81110edc <__reset+0xfb0f0edc>
81111140:	4086b03a 	or	r3,r8,r2
81111144:	18015226 	beq	r3,zero,81111690 <__subdf3+0x820>
81111148:	00c00434 	movhi	r3,16
8111114c:	41400234 	orhi	r5,r8,8
81111150:	18ffffc4 	addi	r3,r3,-1
81111154:	28ca703a 	and	r5,r5,r3
81111158:	003f7e06 	br	81110f54 <__reset+0xfb0f0f54>
8111115c:	10bfffc4 	addi	r2,r2,-1
81111160:	1000491e 	bne	r2,zero,81111288 <__subdf3+0x418>
81111164:	898fc83a 	sub	r7,r17,r6
81111168:	89e3803a 	cmpltu	r17,r17,r7
8111116c:	1947c83a 	sub	r3,r3,r5
81111170:	1c47c83a 	sub	r3,r3,r17
81111174:	3823883a 	mov	r17,r7
81111178:	003f9b06 	br	81110fe8 <__reset+0xfb0f0fe8>
8111117c:	2988b03a 	or	r4,r5,r6
81111180:	203f5c26 	beq	r4,zero,81110ef4 <__reset+0xfb0f0ef4>
81111184:	10bfffc4 	addi	r2,r2,-1
81111188:	1000931e 	bne	r2,zero,811113d8 <__subdf3+0x568>
8111118c:	898d883a 	add	r6,r17,r6
81111190:	3463803a 	cmpltu	r17,r6,r17
81111194:	1947883a 	add	r3,r3,r5
81111198:	88c7883a 	add	r3,r17,r3
8111119c:	3023883a 	mov	r17,r6
811111a0:	003fd306 	br	811110f0 <__reset+0xfb0f10f0>
811111a4:	1000541e 	bne	r2,zero,811112f8 <__subdf3+0x488>
811111a8:	80800044 	addi	r2,r16,1
811111ac:	1081ffcc 	andi	r2,r2,2047
811111b0:	01000044 	movi	r4,1
811111b4:	2080a20e 	bge	r4,r2,81111440 <__subdf3+0x5d0>
811111b8:	8989c83a 	sub	r4,r17,r6
811111bc:	8905803a 	cmpltu	r2,r17,r4
811111c0:	1967c83a 	sub	r19,r3,r5
811111c4:	98a7c83a 	sub	r19,r19,r2
811111c8:	9880202c 	andhi	r2,r19,128
811111cc:	10006326 	beq	r2,zero,8111135c <__subdf3+0x4ec>
811111d0:	3463c83a 	sub	r17,r6,r17
811111d4:	28c7c83a 	sub	r3,r5,r3
811111d8:	344d803a 	cmpltu	r6,r6,r17
811111dc:	19a7c83a 	sub	r19,r3,r6
811111e0:	3825883a 	mov	r18,r7
811111e4:	983f861e 	bne	r19,zero,81111000 <__reset+0xfb0f1000>
811111e8:	8809883a 	mov	r4,r17
811111ec:	11055e00 	call	811055e0 <__clzsi2>
811111f0:	10800804 	addi	r2,r2,32
811111f4:	113ffe04 	addi	r4,r2,-8
811111f8:	00c007c4 	movi	r3,31
811111fc:	193f850e 	bge	r3,r4,81111014 <__reset+0xfb0f1014>
81111200:	10bff604 	addi	r2,r2,-40
81111204:	8884983a 	sll	r2,r17,r2
81111208:	0023883a 	mov	r17,zero
8111120c:	243f880e 	bge	r4,r16,81111030 <__reset+0xfb0f1030>
81111210:	00ffe034 	movhi	r3,65408
81111214:	18ffffc4 	addi	r3,r3,-1
81111218:	8121c83a 	sub	r16,r16,r4
8111121c:	10c6703a 	and	r3,r2,r3
81111220:	003f3406 	br	81110ef4 <__reset+0xfb0f0ef4>
81111224:	9100004c 	andi	r4,r18,1
81111228:	000b883a 	mov	r5,zero
8111122c:	0005883a 	mov	r2,zero
81111230:	003f4806 	br	81110f54 <__reset+0xfb0f0f54>
81111234:	298cb03a 	or	r6,r5,r6
81111238:	300cc03a 	cmpne	r6,r6,zero
8111123c:	0005883a 	mov	r2,zero
81111240:	003f6406 	br	81110fd4 <__reset+0xfb0f0fd4>
81111244:	10009a1e 	bne	r2,zero,811114b0 <__subdf3+0x640>
81111248:	82400044 	addi	r9,r16,1
8111124c:	4881ffcc 	andi	r2,r9,2047
81111250:	02800044 	movi	r10,1
81111254:	5080670e 	bge	r10,r2,811113f4 <__subdf3+0x584>
81111258:	0081ffc4 	movi	r2,2047
8111125c:	4880af26 	beq	r9,r2,8111151c <__subdf3+0x6ac>
81111260:	898d883a 	add	r6,r17,r6
81111264:	1945883a 	add	r2,r3,r5
81111268:	3447803a 	cmpltu	r3,r6,r17
8111126c:	1887883a 	add	r3,r3,r2
81111270:	182297fa 	slli	r17,r3,31
81111274:	300cd07a 	srli	r6,r6,1
81111278:	1806d07a 	srli	r3,r3,1
8111127c:	4821883a 	mov	r16,r9
81111280:	89a2b03a 	or	r17,r17,r6
81111284:	003f1b06 	br	81110ef4 <__reset+0xfb0f0ef4>
81111288:	0101ffc4 	movi	r4,2047
8111128c:	813f441e 	bne	r16,r4,81110fa0 <__reset+0xfb0f0fa0>
81111290:	003f1806 	br	81110ef4 <__reset+0xfb0f0ef4>
81111294:	843ff844 	addi	r16,r16,-31
81111298:	01400804 	movi	r5,32
8111129c:	1408d83a 	srl	r4,r2,r16
811112a0:	19405026 	beq	r3,r5,811113e4 <__subdf3+0x574>
811112a4:	01401004 	movi	r5,64
811112a8:	28c7c83a 	sub	r3,r5,r3
811112ac:	10c4983a 	sll	r2,r2,r3
811112b0:	88a2b03a 	or	r17,r17,r2
811112b4:	8822c03a 	cmpne	r17,r17,zero
811112b8:	2462b03a 	or	r17,r4,r17
811112bc:	0007883a 	mov	r3,zero
811112c0:	0021883a 	mov	r16,zero
811112c4:	003f6d06 	br	8111107c <__reset+0xfb0f107c>
811112c8:	11fff804 	addi	r7,r2,-32
811112cc:	01000804 	movi	r4,32
811112d0:	29ced83a 	srl	r7,r5,r7
811112d4:	11004526 	beq	r2,r4,811113ec <__subdf3+0x57c>
811112d8:	01001004 	movi	r4,64
811112dc:	2089c83a 	sub	r4,r4,r2
811112e0:	2904983a 	sll	r2,r5,r4
811112e4:	118cb03a 	or	r6,r2,r6
811112e8:	300cc03a 	cmpne	r6,r6,zero
811112ec:	398cb03a 	or	r6,r7,r6
811112f0:	0005883a 	mov	r2,zero
811112f4:	003f3706 	br	81110fd4 <__reset+0xfb0f0fd4>
811112f8:	80002a26 	beq	r16,zero,811113a4 <__subdf3+0x534>
811112fc:	0101ffc4 	movi	r4,2047
81111300:	49006626 	beq	r9,r4,8111149c <__subdf3+0x62c>
81111304:	0085c83a 	sub	r2,zero,r2
81111308:	18c02034 	orhi	r3,r3,128
8111130c:	01000e04 	movi	r4,56
81111310:	20807e16 	blt	r4,r2,8111150c <__subdf3+0x69c>
81111314:	010007c4 	movi	r4,31
81111318:	2080e716 	blt	r4,r2,811116b8 <__subdf3+0x848>
8111131c:	01000804 	movi	r4,32
81111320:	2089c83a 	sub	r4,r4,r2
81111324:	1914983a 	sll	r10,r3,r4
81111328:	8890d83a 	srl	r8,r17,r2
8111132c:	8908983a 	sll	r4,r17,r4
81111330:	1884d83a 	srl	r2,r3,r2
81111334:	5222b03a 	or	r17,r10,r8
81111338:	2006c03a 	cmpne	r3,r4,zero
8111133c:	88e2b03a 	or	r17,r17,r3
81111340:	3463c83a 	sub	r17,r6,r17
81111344:	2885c83a 	sub	r2,r5,r2
81111348:	344d803a 	cmpltu	r6,r6,r17
8111134c:	1187c83a 	sub	r3,r2,r6
81111350:	4821883a 	mov	r16,r9
81111354:	3825883a 	mov	r18,r7
81111358:	003f2306 	br	81110fe8 <__reset+0xfb0f0fe8>
8111135c:	24d0b03a 	or	r8,r4,r19
81111360:	40001b1e 	bne	r8,zero,811113d0 <__subdf3+0x560>
81111364:	0005883a 	mov	r2,zero
81111368:	0009883a 	mov	r4,zero
8111136c:	0021883a 	mov	r16,zero
81111370:	003f4906 	br	81111098 <__reset+0xfb0f1098>
81111374:	010007c4 	movi	r4,31
81111378:	20803a16 	blt	r4,r2,81111464 <__subdf3+0x5f4>
8111137c:	01000804 	movi	r4,32
81111380:	2089c83a 	sub	r4,r4,r2
81111384:	2912983a 	sll	r9,r5,r4
81111388:	3090d83a 	srl	r8,r6,r2
8111138c:	3108983a 	sll	r4,r6,r4
81111390:	2884d83a 	srl	r2,r5,r2
81111394:	4a12b03a 	or	r9,r9,r8
81111398:	2008c03a 	cmpne	r4,r4,zero
8111139c:	4912b03a 	or	r9,r9,r4
811113a0:	003f4e06 	br	811110dc <__reset+0xfb0f10dc>
811113a4:	1c48b03a 	or	r4,r3,r17
811113a8:	20003c26 	beq	r4,zero,8111149c <__subdf3+0x62c>
811113ac:	0084303a 	nor	r2,zero,r2
811113b0:	1000381e 	bne	r2,zero,81111494 <__subdf3+0x624>
811113b4:	3463c83a 	sub	r17,r6,r17
811113b8:	28c5c83a 	sub	r2,r5,r3
811113bc:	344d803a 	cmpltu	r6,r6,r17
811113c0:	1187c83a 	sub	r3,r2,r6
811113c4:	4821883a 	mov	r16,r9
811113c8:	3825883a 	mov	r18,r7
811113cc:	003f0606 	br	81110fe8 <__reset+0xfb0f0fe8>
811113d0:	2023883a 	mov	r17,r4
811113d4:	003f0906 	br	81110ffc <__reset+0xfb0f0ffc>
811113d8:	0101ffc4 	movi	r4,2047
811113dc:	813f3a1e 	bne	r16,r4,811110c8 <__reset+0xfb0f10c8>
811113e0:	003ec406 	br	81110ef4 <__reset+0xfb0f0ef4>
811113e4:	0005883a 	mov	r2,zero
811113e8:	003fb106 	br	811112b0 <__reset+0xfb0f12b0>
811113ec:	0005883a 	mov	r2,zero
811113f0:	003fbc06 	br	811112e4 <__reset+0xfb0f12e4>
811113f4:	1c44b03a 	or	r2,r3,r17
811113f8:	80008e1e 	bne	r16,zero,81111634 <__subdf3+0x7c4>
811113fc:	1000c826 	beq	r2,zero,81111720 <__subdf3+0x8b0>
81111400:	2984b03a 	or	r2,r5,r6
81111404:	103ebb26 	beq	r2,zero,81110ef4 <__reset+0xfb0f0ef4>
81111408:	8989883a 	add	r4,r17,r6
8111140c:	1945883a 	add	r2,r3,r5
81111410:	2447803a 	cmpltu	r3,r4,r17
81111414:	1887883a 	add	r3,r3,r2
81111418:	1880202c 	andhi	r2,r3,128
8111141c:	2023883a 	mov	r17,r4
81111420:	103f1626 	beq	r2,zero,8111107c <__reset+0xfb0f107c>
81111424:	00bfe034 	movhi	r2,65408
81111428:	10bfffc4 	addi	r2,r2,-1
8111142c:	5021883a 	mov	r16,r10
81111430:	1886703a 	and	r3,r3,r2
81111434:	003eaf06 	br	81110ef4 <__reset+0xfb0f0ef4>
81111438:	3825883a 	mov	r18,r7
8111143c:	003f0f06 	br	8111107c <__reset+0xfb0f107c>
81111440:	1c44b03a 	or	r2,r3,r17
81111444:	8000251e 	bne	r16,zero,811114dc <__subdf3+0x66c>
81111448:	1000661e 	bne	r2,zero,811115e4 <__subdf3+0x774>
8111144c:	2990b03a 	or	r8,r5,r6
81111450:	40009626 	beq	r8,zero,811116ac <__subdf3+0x83c>
81111454:	2807883a 	mov	r3,r5
81111458:	3023883a 	mov	r17,r6
8111145c:	3825883a 	mov	r18,r7
81111460:	003ea406 	br	81110ef4 <__reset+0xfb0f0ef4>
81111464:	127ff804 	addi	r9,r2,-32
81111468:	01000804 	movi	r4,32
8111146c:	2a52d83a 	srl	r9,r5,r9
81111470:	11008c26 	beq	r2,r4,811116a4 <__subdf3+0x834>
81111474:	01001004 	movi	r4,64
81111478:	2085c83a 	sub	r2,r4,r2
8111147c:	2884983a 	sll	r2,r5,r2
81111480:	118cb03a 	or	r6,r2,r6
81111484:	300cc03a 	cmpne	r6,r6,zero
81111488:	4992b03a 	or	r9,r9,r6
8111148c:	0005883a 	mov	r2,zero
81111490:	003f1206 	br	811110dc <__reset+0xfb0f10dc>
81111494:	0101ffc4 	movi	r4,2047
81111498:	493f9c1e 	bne	r9,r4,8111130c <__reset+0xfb0f130c>
8111149c:	2807883a 	mov	r3,r5
811114a0:	3023883a 	mov	r17,r6
811114a4:	4821883a 	mov	r16,r9
811114a8:	3825883a 	mov	r18,r7
811114ac:	003e9106 	br	81110ef4 <__reset+0xfb0f0ef4>
811114b0:	80001f1e 	bne	r16,zero,81111530 <__subdf3+0x6c0>
811114b4:	1c48b03a 	or	r4,r3,r17
811114b8:	20005a26 	beq	r4,zero,81111624 <__subdf3+0x7b4>
811114bc:	0084303a 	nor	r2,zero,r2
811114c0:	1000561e 	bne	r2,zero,8111161c <__subdf3+0x7ac>
811114c4:	89a3883a 	add	r17,r17,r6
811114c8:	1945883a 	add	r2,r3,r5
811114cc:	898d803a 	cmpltu	r6,r17,r6
811114d0:	3087883a 	add	r3,r6,r2
811114d4:	4821883a 	mov	r16,r9
811114d8:	003f0506 	br	811110f0 <__reset+0xfb0f10f0>
811114dc:	10002b1e 	bne	r2,zero,8111158c <__subdf3+0x71c>
811114e0:	2984b03a 	or	r2,r5,r6
811114e4:	10008026 	beq	r2,zero,811116e8 <__subdf3+0x878>
811114e8:	2807883a 	mov	r3,r5
811114ec:	3023883a 	mov	r17,r6
811114f0:	3825883a 	mov	r18,r7
811114f4:	0401ffc4 	movi	r16,2047
811114f8:	003e7e06 	br	81110ef4 <__reset+0xfb0f0ef4>
811114fc:	3809883a 	mov	r4,r7
81111500:	0011883a 	mov	r8,zero
81111504:	0005883a 	mov	r2,zero
81111508:	003ee306 	br	81111098 <__reset+0xfb0f1098>
8111150c:	1c62b03a 	or	r17,r3,r17
81111510:	8822c03a 	cmpne	r17,r17,zero
81111514:	0005883a 	mov	r2,zero
81111518:	003f8906 	br	81111340 <__reset+0xfb0f1340>
8111151c:	3809883a 	mov	r4,r7
81111520:	4821883a 	mov	r16,r9
81111524:	0011883a 	mov	r8,zero
81111528:	0005883a 	mov	r2,zero
8111152c:	003eda06 	br	81111098 <__reset+0xfb0f1098>
81111530:	0101ffc4 	movi	r4,2047
81111534:	49003b26 	beq	r9,r4,81111624 <__subdf3+0x7b4>
81111538:	0085c83a 	sub	r2,zero,r2
8111153c:	18c02034 	orhi	r3,r3,128
81111540:	01000e04 	movi	r4,56
81111544:	20806e16 	blt	r4,r2,81111700 <__subdf3+0x890>
81111548:	010007c4 	movi	r4,31
8111154c:	20807716 	blt	r4,r2,8111172c <__subdf3+0x8bc>
81111550:	01000804 	movi	r4,32
81111554:	2089c83a 	sub	r4,r4,r2
81111558:	1914983a 	sll	r10,r3,r4
8111155c:	8890d83a 	srl	r8,r17,r2
81111560:	8908983a 	sll	r4,r17,r4
81111564:	1884d83a 	srl	r2,r3,r2
81111568:	5222b03a 	or	r17,r10,r8
8111156c:	2006c03a 	cmpne	r3,r4,zero
81111570:	88e2b03a 	or	r17,r17,r3
81111574:	89a3883a 	add	r17,r17,r6
81111578:	1145883a 	add	r2,r2,r5
8111157c:	898d803a 	cmpltu	r6,r17,r6
81111580:	3087883a 	add	r3,r6,r2
81111584:	4821883a 	mov	r16,r9
81111588:	003ed906 	br	811110f0 <__reset+0xfb0f10f0>
8111158c:	2984b03a 	or	r2,r5,r6
81111590:	10004226 	beq	r2,zero,8111169c <__subdf3+0x82c>
81111594:	1808d0fa 	srli	r4,r3,3
81111598:	8822d0fa 	srli	r17,r17,3
8111159c:	1806977a 	slli	r3,r3,29
811115a0:	2080022c 	andhi	r2,r4,8
811115a4:	1c62b03a 	or	r17,r3,r17
811115a8:	10000826 	beq	r2,zero,811115cc <__subdf3+0x75c>
811115ac:	2812d0fa 	srli	r9,r5,3
811115b0:	4880022c 	andhi	r2,r9,8
811115b4:	1000051e 	bne	r2,zero,811115cc <__subdf3+0x75c>
811115b8:	300cd0fa 	srli	r6,r6,3
811115bc:	2804977a 	slli	r2,r5,29
811115c0:	4809883a 	mov	r4,r9
811115c4:	3825883a 	mov	r18,r7
811115c8:	11a2b03a 	or	r17,r2,r6
811115cc:	8806d77a 	srli	r3,r17,29
811115d0:	200890fa 	slli	r4,r4,3
811115d4:	882290fa 	slli	r17,r17,3
811115d8:	0401ffc4 	movi	r16,2047
811115dc:	1906b03a 	or	r3,r3,r4
811115e0:	003e4406 	br	81110ef4 <__reset+0xfb0f0ef4>
811115e4:	2984b03a 	or	r2,r5,r6
811115e8:	103e4226 	beq	r2,zero,81110ef4 <__reset+0xfb0f0ef4>
811115ec:	8989c83a 	sub	r4,r17,r6
811115f0:	8911803a 	cmpltu	r8,r17,r4
811115f4:	1945c83a 	sub	r2,r3,r5
811115f8:	1205c83a 	sub	r2,r2,r8
811115fc:	1200202c 	andhi	r8,r2,128
81111600:	403e9a26 	beq	r8,zero,8111106c <__reset+0xfb0f106c>
81111604:	3463c83a 	sub	r17,r6,r17
81111608:	28c5c83a 	sub	r2,r5,r3
8111160c:	344d803a 	cmpltu	r6,r6,r17
81111610:	1187c83a 	sub	r3,r2,r6
81111614:	3825883a 	mov	r18,r7
81111618:	003e3606 	br	81110ef4 <__reset+0xfb0f0ef4>
8111161c:	0101ffc4 	movi	r4,2047
81111620:	493fc71e 	bne	r9,r4,81111540 <__reset+0xfb0f1540>
81111624:	2807883a 	mov	r3,r5
81111628:	3023883a 	mov	r17,r6
8111162c:	4821883a 	mov	r16,r9
81111630:	003e3006 	br	81110ef4 <__reset+0xfb0f0ef4>
81111634:	10003626 	beq	r2,zero,81111710 <__subdf3+0x8a0>
81111638:	2984b03a 	or	r2,r5,r6
8111163c:	10001726 	beq	r2,zero,8111169c <__subdf3+0x82c>
81111640:	1808d0fa 	srli	r4,r3,3
81111644:	8822d0fa 	srli	r17,r17,3
81111648:	1806977a 	slli	r3,r3,29
8111164c:	2080022c 	andhi	r2,r4,8
81111650:	1c62b03a 	or	r17,r3,r17
81111654:	10000726 	beq	r2,zero,81111674 <__subdf3+0x804>
81111658:	2812d0fa 	srli	r9,r5,3
8111165c:	4880022c 	andhi	r2,r9,8
81111660:	1000041e 	bne	r2,zero,81111674 <__subdf3+0x804>
81111664:	300cd0fa 	srli	r6,r6,3
81111668:	2804977a 	slli	r2,r5,29
8111166c:	4809883a 	mov	r4,r9
81111670:	11a2b03a 	or	r17,r2,r6
81111674:	8806d77a 	srli	r3,r17,29
81111678:	200890fa 	slli	r4,r4,3
8111167c:	882290fa 	slli	r17,r17,3
81111680:	3825883a 	mov	r18,r7
81111684:	1906b03a 	or	r3,r3,r4
81111688:	0401ffc4 	movi	r16,2047
8111168c:	003e1906 	br	81110ef4 <__reset+0xfb0f0ef4>
81111690:	000b883a 	mov	r5,zero
81111694:	0005883a 	mov	r2,zero
81111698:	003e2e06 	br	81110f54 <__reset+0xfb0f0f54>
8111169c:	0401ffc4 	movi	r16,2047
811116a0:	003e1406 	br	81110ef4 <__reset+0xfb0f0ef4>
811116a4:	0005883a 	mov	r2,zero
811116a8:	003f7506 	br	81111480 <__reset+0xfb0f1480>
811116ac:	0005883a 	mov	r2,zero
811116b0:	0009883a 	mov	r4,zero
811116b4:	003e7806 	br	81111098 <__reset+0xfb0f1098>
811116b8:	123ff804 	addi	r8,r2,-32
811116bc:	01000804 	movi	r4,32
811116c0:	1a10d83a 	srl	r8,r3,r8
811116c4:	11002526 	beq	r2,r4,8111175c <__subdf3+0x8ec>
811116c8:	01001004 	movi	r4,64
811116cc:	2085c83a 	sub	r2,r4,r2
811116d0:	1884983a 	sll	r2,r3,r2
811116d4:	1444b03a 	or	r2,r2,r17
811116d8:	1004c03a 	cmpne	r2,r2,zero
811116dc:	40a2b03a 	or	r17,r8,r2
811116e0:	0005883a 	mov	r2,zero
811116e4:	003f1606 	br	81111340 <__reset+0xfb0f1340>
811116e8:	02000434 	movhi	r8,16
811116ec:	0009883a 	mov	r4,zero
811116f0:	423fffc4 	addi	r8,r8,-1
811116f4:	00bfffc4 	movi	r2,-1
811116f8:	0401ffc4 	movi	r16,2047
811116fc:	003e6606 	br	81111098 <__reset+0xfb0f1098>
81111700:	1c62b03a 	or	r17,r3,r17
81111704:	8822c03a 	cmpne	r17,r17,zero
81111708:	0005883a 	mov	r2,zero
8111170c:	003f9906 	br	81111574 <__reset+0xfb0f1574>
81111710:	2807883a 	mov	r3,r5
81111714:	3023883a 	mov	r17,r6
81111718:	0401ffc4 	movi	r16,2047
8111171c:	003df506 	br	81110ef4 <__reset+0xfb0f0ef4>
81111720:	2807883a 	mov	r3,r5
81111724:	3023883a 	mov	r17,r6
81111728:	003df206 	br	81110ef4 <__reset+0xfb0f0ef4>
8111172c:	123ff804 	addi	r8,r2,-32
81111730:	01000804 	movi	r4,32
81111734:	1a10d83a 	srl	r8,r3,r8
81111738:	11000a26 	beq	r2,r4,81111764 <__subdf3+0x8f4>
8111173c:	01001004 	movi	r4,64
81111740:	2085c83a 	sub	r2,r4,r2
81111744:	1884983a 	sll	r2,r3,r2
81111748:	1444b03a 	or	r2,r2,r17
8111174c:	1004c03a 	cmpne	r2,r2,zero
81111750:	40a2b03a 	or	r17,r8,r2
81111754:	0005883a 	mov	r2,zero
81111758:	003f8606 	br	81111574 <__reset+0xfb0f1574>
8111175c:	0005883a 	mov	r2,zero
81111760:	003fdc06 	br	811116d4 <__reset+0xfb0f16d4>
81111764:	0005883a 	mov	r2,zero
81111768:	003ff706 	br	81111748 <__reset+0xfb0f1748>

8111176c <__fixdfsi>:
8111176c:	280cd53a 	srli	r6,r5,20
81111770:	00c00434 	movhi	r3,16
81111774:	18ffffc4 	addi	r3,r3,-1
81111778:	3181ffcc 	andi	r6,r6,2047
8111177c:	01c0ff84 	movi	r7,1022
81111780:	28c6703a 	and	r3,r5,r3
81111784:	280ad7fa 	srli	r5,r5,31
81111788:	3980120e 	bge	r7,r6,811117d4 <__fixdfsi+0x68>
8111178c:	00810744 	movi	r2,1053
81111790:	11800c16 	blt	r2,r6,811117c4 <__fixdfsi+0x58>
81111794:	00810cc4 	movi	r2,1075
81111798:	1185c83a 	sub	r2,r2,r6
8111179c:	01c007c4 	movi	r7,31
811117a0:	18c00434 	orhi	r3,r3,16
811117a4:	38800d16 	blt	r7,r2,811117dc <__fixdfsi+0x70>
811117a8:	31befb44 	addi	r6,r6,-1043
811117ac:	2084d83a 	srl	r2,r4,r2
811117b0:	1986983a 	sll	r3,r3,r6
811117b4:	1884b03a 	or	r2,r3,r2
811117b8:	28000726 	beq	r5,zero,811117d8 <__fixdfsi+0x6c>
811117bc:	0085c83a 	sub	r2,zero,r2
811117c0:	f800283a 	ret
811117c4:	00a00034 	movhi	r2,32768
811117c8:	10bfffc4 	addi	r2,r2,-1
811117cc:	2885883a 	add	r2,r5,r2
811117d0:	f800283a 	ret
811117d4:	0005883a 	mov	r2,zero
811117d8:	f800283a 	ret
811117dc:	008104c4 	movi	r2,1043
811117e0:	1185c83a 	sub	r2,r2,r6
811117e4:	1884d83a 	srl	r2,r3,r2
811117e8:	003ff306 	br	811117b8 <__reset+0xfb0f17b8>

811117ec <__floatsidf>:
811117ec:	defffd04 	addi	sp,sp,-12
811117f0:	dfc00215 	stw	ra,8(sp)
811117f4:	dc400115 	stw	r17,4(sp)
811117f8:	dc000015 	stw	r16,0(sp)
811117fc:	20002b26 	beq	r4,zero,811118ac <__floatsidf+0xc0>
81111800:	2023883a 	mov	r17,r4
81111804:	2020d7fa 	srli	r16,r4,31
81111808:	20002d16 	blt	r4,zero,811118c0 <__floatsidf+0xd4>
8111180c:	8809883a 	mov	r4,r17
81111810:	11055e00 	call	811055e0 <__clzsi2>
81111814:	01410784 	movi	r5,1054
81111818:	288bc83a 	sub	r5,r5,r2
8111181c:	01010cc4 	movi	r4,1075
81111820:	2149c83a 	sub	r4,r4,r5
81111824:	00c007c4 	movi	r3,31
81111828:	1900160e 	bge	r3,r4,81111884 <__floatsidf+0x98>
8111182c:	00c104c4 	movi	r3,1043
81111830:	1947c83a 	sub	r3,r3,r5
81111834:	88c6983a 	sll	r3,r17,r3
81111838:	00800434 	movhi	r2,16
8111183c:	10bfffc4 	addi	r2,r2,-1
81111840:	1886703a 	and	r3,r3,r2
81111844:	2941ffcc 	andi	r5,r5,2047
81111848:	800d883a 	mov	r6,r16
8111184c:	0005883a 	mov	r2,zero
81111850:	280a953a 	slli	r5,r5,20
81111854:	31803fcc 	andi	r6,r6,255
81111858:	01000434 	movhi	r4,16
8111185c:	300c97fa 	slli	r6,r6,31
81111860:	213fffc4 	addi	r4,r4,-1
81111864:	1906703a 	and	r3,r3,r4
81111868:	1946b03a 	or	r3,r3,r5
8111186c:	1986b03a 	or	r3,r3,r6
81111870:	dfc00217 	ldw	ra,8(sp)
81111874:	dc400117 	ldw	r17,4(sp)
81111878:	dc000017 	ldw	r16,0(sp)
8111187c:	dec00304 	addi	sp,sp,12
81111880:	f800283a 	ret
81111884:	00c002c4 	movi	r3,11
81111888:	1887c83a 	sub	r3,r3,r2
8111188c:	88c6d83a 	srl	r3,r17,r3
81111890:	8904983a 	sll	r2,r17,r4
81111894:	01000434 	movhi	r4,16
81111898:	213fffc4 	addi	r4,r4,-1
8111189c:	2941ffcc 	andi	r5,r5,2047
811118a0:	1906703a 	and	r3,r3,r4
811118a4:	800d883a 	mov	r6,r16
811118a8:	003fe906 	br	81111850 <__reset+0xfb0f1850>
811118ac:	000d883a 	mov	r6,zero
811118b0:	000b883a 	mov	r5,zero
811118b4:	0007883a 	mov	r3,zero
811118b8:	0005883a 	mov	r2,zero
811118bc:	003fe406 	br	81111850 <__reset+0xfb0f1850>
811118c0:	0123c83a 	sub	r17,zero,r4
811118c4:	003fd106 	br	8111180c <__reset+0xfb0f180c>

811118c8 <__floatunsidf>:
811118c8:	defffe04 	addi	sp,sp,-8
811118cc:	dc000015 	stw	r16,0(sp)
811118d0:	dfc00115 	stw	ra,4(sp)
811118d4:	2021883a 	mov	r16,r4
811118d8:	20002226 	beq	r4,zero,81111964 <__floatunsidf+0x9c>
811118dc:	11055e00 	call	811055e0 <__clzsi2>
811118e0:	01010784 	movi	r4,1054
811118e4:	2089c83a 	sub	r4,r4,r2
811118e8:	01810cc4 	movi	r6,1075
811118ec:	310dc83a 	sub	r6,r6,r4
811118f0:	00c007c4 	movi	r3,31
811118f4:	1980120e 	bge	r3,r6,81111940 <__floatunsidf+0x78>
811118f8:	00c104c4 	movi	r3,1043
811118fc:	1907c83a 	sub	r3,r3,r4
81111900:	80ca983a 	sll	r5,r16,r3
81111904:	00800434 	movhi	r2,16
81111908:	10bfffc4 	addi	r2,r2,-1
8111190c:	2101ffcc 	andi	r4,r4,2047
81111910:	0021883a 	mov	r16,zero
81111914:	288a703a 	and	r5,r5,r2
81111918:	2008953a 	slli	r4,r4,20
8111191c:	00c00434 	movhi	r3,16
81111920:	18ffffc4 	addi	r3,r3,-1
81111924:	28c6703a 	and	r3,r5,r3
81111928:	8005883a 	mov	r2,r16
8111192c:	1906b03a 	or	r3,r3,r4
81111930:	dfc00117 	ldw	ra,4(sp)
81111934:	dc000017 	ldw	r16,0(sp)
81111938:	dec00204 	addi	sp,sp,8
8111193c:	f800283a 	ret
81111940:	00c002c4 	movi	r3,11
81111944:	188bc83a 	sub	r5,r3,r2
81111948:	814ad83a 	srl	r5,r16,r5
8111194c:	00c00434 	movhi	r3,16
81111950:	18ffffc4 	addi	r3,r3,-1
81111954:	81a0983a 	sll	r16,r16,r6
81111958:	2101ffcc 	andi	r4,r4,2047
8111195c:	28ca703a 	and	r5,r5,r3
81111960:	003fed06 	br	81111918 <__reset+0xfb0f1918>
81111964:	0009883a 	mov	r4,zero
81111968:	000b883a 	mov	r5,zero
8111196c:	003fea06 	br	81111918 <__reset+0xfb0f1918>

81111970 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
81111970:	defffe04 	addi	sp,sp,-8
81111974:	dfc00115 	stw	ra,4(sp)
81111978:	df000015 	stw	fp,0(sp)
8111197c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
81111980:	d0a00b17 	ldw	r2,-32724(gp)
81111984:	10000326 	beq	r2,zero,81111994 <alt_get_errno+0x24>
81111988:	d0a00b17 	ldw	r2,-32724(gp)
8111198c:	103ee83a 	callr	r2
81111990:	00000106 	br	81111998 <alt_get_errno+0x28>
81111994:	d0a01e04 	addi	r2,gp,-32648
}
81111998:	e037883a 	mov	sp,fp
8111199c:	dfc00117 	ldw	ra,4(sp)
811119a0:	df000017 	ldw	fp,0(sp)
811119a4:	dec00204 	addi	sp,sp,8
811119a8:	f800283a 	ret

811119ac <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
811119ac:	defffb04 	addi	sp,sp,-20
811119b0:	dfc00415 	stw	ra,16(sp)
811119b4:	df000315 	stw	fp,12(sp)
811119b8:	df000304 	addi	fp,sp,12
811119bc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
811119c0:	e0bfff17 	ldw	r2,-4(fp)
811119c4:	10000616 	blt	r2,zero,811119e0 <close+0x34>
811119c8:	e0bfff17 	ldw	r2,-4(fp)
811119cc:	10c00324 	muli	r3,r2,12
811119d0:	00a044b4 	movhi	r2,33042
811119d4:	10a36904 	addi	r2,r2,-29276
811119d8:	1885883a 	add	r2,r3,r2
811119dc:	00000106 	br	811119e4 <close+0x38>
811119e0:	0005883a 	mov	r2,zero
811119e4:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
811119e8:	e0bffd17 	ldw	r2,-12(fp)
811119ec:	10001926 	beq	r2,zero,81111a54 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
811119f0:	e0bffd17 	ldw	r2,-12(fp)
811119f4:	10800017 	ldw	r2,0(r2)
811119f8:	10800417 	ldw	r2,16(r2)
811119fc:	10000626 	beq	r2,zero,81111a18 <close+0x6c>
81111a00:	e0bffd17 	ldw	r2,-12(fp)
81111a04:	10800017 	ldw	r2,0(r2)
81111a08:	10800417 	ldw	r2,16(r2)
81111a0c:	e13ffd17 	ldw	r4,-12(fp)
81111a10:	103ee83a 	callr	r2
81111a14:	00000106 	br	81111a1c <close+0x70>
81111a18:	0005883a 	mov	r2,zero
81111a1c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
81111a20:	e13fff17 	ldw	r4,-4(fp)
81111a24:	1111fa00 	call	81111fa0 <alt_release_fd>
    if (rval < 0)
81111a28:	e0bffe17 	ldw	r2,-8(fp)
81111a2c:	1000070e 	bge	r2,zero,81111a4c <close+0xa0>
    {
      ALT_ERRNO = -rval;
81111a30:	11119700 	call	81111970 <alt_get_errno>
81111a34:	1007883a 	mov	r3,r2
81111a38:	e0bffe17 	ldw	r2,-8(fp)
81111a3c:	0085c83a 	sub	r2,zero,r2
81111a40:	18800015 	stw	r2,0(r3)
      return -1;
81111a44:	00bfffc4 	movi	r2,-1
81111a48:	00000706 	br	81111a68 <close+0xbc>
    }
    return 0;
81111a4c:	0005883a 	mov	r2,zero
81111a50:	00000506 	br	81111a68 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
81111a54:	11119700 	call	81111970 <alt_get_errno>
81111a58:	1007883a 	mov	r3,r2
81111a5c:	00801444 	movi	r2,81
81111a60:	18800015 	stw	r2,0(r3)
    return -1;
81111a64:	00bfffc4 	movi	r2,-1
  }
}
81111a68:	e037883a 	mov	sp,fp
81111a6c:	dfc00117 	ldw	ra,4(sp)
81111a70:	df000017 	ldw	fp,0(sp)
81111a74:	dec00204 	addi	sp,sp,8
81111a78:	f800283a 	ret

81111a7c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
81111a7c:	deffff04 	addi	sp,sp,-4
81111a80:	df000015 	stw	fp,0(sp)
81111a84:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
81111a88:	0001883a 	nop
81111a8c:	e037883a 	mov	sp,fp
81111a90:	df000017 	ldw	fp,0(sp)
81111a94:	dec00104 	addi	sp,sp,4
81111a98:	f800283a 	ret

81111a9c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
81111a9c:	defffc04 	addi	sp,sp,-16
81111aa0:	df000315 	stw	fp,12(sp)
81111aa4:	df000304 	addi	fp,sp,12
81111aa8:	e13ffd15 	stw	r4,-12(fp)
81111aac:	e17ffe15 	stw	r5,-8(fp)
81111ab0:	e1bfff15 	stw	r6,-4(fp)
  return len;
81111ab4:	e0bfff17 	ldw	r2,-4(fp)
}
81111ab8:	e037883a 	mov	sp,fp
81111abc:	df000017 	ldw	fp,0(sp)
81111ac0:	dec00104 	addi	sp,sp,4
81111ac4:	f800283a 	ret

81111ac8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
81111ac8:	defffe04 	addi	sp,sp,-8
81111acc:	dfc00115 	stw	ra,4(sp)
81111ad0:	df000015 	stw	fp,0(sp)
81111ad4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
81111ad8:	d0a00b17 	ldw	r2,-32724(gp)
81111adc:	10000326 	beq	r2,zero,81111aec <alt_get_errno+0x24>
81111ae0:	d0a00b17 	ldw	r2,-32724(gp)
81111ae4:	103ee83a 	callr	r2
81111ae8:	00000106 	br	81111af0 <alt_get_errno+0x28>
81111aec:	d0a01e04 	addi	r2,gp,-32648
}
81111af0:	e037883a 	mov	sp,fp
81111af4:	dfc00117 	ldw	ra,4(sp)
81111af8:	df000017 	ldw	fp,0(sp)
81111afc:	dec00204 	addi	sp,sp,8
81111b00:	f800283a 	ret

81111b04 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
81111b04:	defffb04 	addi	sp,sp,-20
81111b08:	dfc00415 	stw	ra,16(sp)
81111b0c:	df000315 	stw	fp,12(sp)
81111b10:	df000304 	addi	fp,sp,12
81111b14:	e13ffe15 	stw	r4,-8(fp)
81111b18:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
81111b1c:	e0bffe17 	ldw	r2,-8(fp)
81111b20:	10000616 	blt	r2,zero,81111b3c <fstat+0x38>
81111b24:	e0bffe17 	ldw	r2,-8(fp)
81111b28:	10c00324 	muli	r3,r2,12
81111b2c:	00a044b4 	movhi	r2,33042
81111b30:	10a36904 	addi	r2,r2,-29276
81111b34:	1885883a 	add	r2,r3,r2
81111b38:	00000106 	br	81111b40 <fstat+0x3c>
81111b3c:	0005883a 	mov	r2,zero
81111b40:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
81111b44:	e0bffd17 	ldw	r2,-12(fp)
81111b48:	10001026 	beq	r2,zero,81111b8c <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
81111b4c:	e0bffd17 	ldw	r2,-12(fp)
81111b50:	10800017 	ldw	r2,0(r2)
81111b54:	10800817 	ldw	r2,32(r2)
81111b58:	10000726 	beq	r2,zero,81111b78 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
81111b5c:	e0bffd17 	ldw	r2,-12(fp)
81111b60:	10800017 	ldw	r2,0(r2)
81111b64:	10800817 	ldw	r2,32(r2)
81111b68:	e17fff17 	ldw	r5,-4(fp)
81111b6c:	e13ffd17 	ldw	r4,-12(fp)
81111b70:	103ee83a 	callr	r2
81111b74:	00000a06 	br	81111ba0 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
81111b78:	e0bfff17 	ldw	r2,-4(fp)
81111b7c:	00c80004 	movi	r3,8192
81111b80:	10c00115 	stw	r3,4(r2)
      return 0;
81111b84:	0005883a 	mov	r2,zero
81111b88:	00000506 	br	81111ba0 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
81111b8c:	1111ac80 	call	81111ac8 <alt_get_errno>
81111b90:	1007883a 	mov	r3,r2
81111b94:	00801444 	movi	r2,81
81111b98:	18800015 	stw	r2,0(r3)
    return -1;
81111b9c:	00bfffc4 	movi	r2,-1
  }
}
81111ba0:	e037883a 	mov	sp,fp
81111ba4:	dfc00117 	ldw	ra,4(sp)
81111ba8:	df000017 	ldw	fp,0(sp)
81111bac:	dec00204 	addi	sp,sp,8
81111bb0:	f800283a 	ret

81111bb4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
81111bb4:	defffe04 	addi	sp,sp,-8
81111bb8:	dfc00115 	stw	ra,4(sp)
81111bbc:	df000015 	stw	fp,0(sp)
81111bc0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
81111bc4:	d0a00b17 	ldw	r2,-32724(gp)
81111bc8:	10000326 	beq	r2,zero,81111bd8 <alt_get_errno+0x24>
81111bcc:	d0a00b17 	ldw	r2,-32724(gp)
81111bd0:	103ee83a 	callr	r2
81111bd4:	00000106 	br	81111bdc <alt_get_errno+0x28>
81111bd8:	d0a01e04 	addi	r2,gp,-32648
}
81111bdc:	e037883a 	mov	sp,fp
81111be0:	dfc00117 	ldw	ra,4(sp)
81111be4:	df000017 	ldw	fp,0(sp)
81111be8:	dec00204 	addi	sp,sp,8
81111bec:	f800283a 	ret

81111bf0 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
81111bf0:	deffed04 	addi	sp,sp,-76
81111bf4:	dfc01215 	stw	ra,72(sp)
81111bf8:	df001115 	stw	fp,68(sp)
81111bfc:	df001104 	addi	fp,sp,68
81111c00:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
81111c04:	e0bfff17 	ldw	r2,-4(fp)
81111c08:	10000616 	blt	r2,zero,81111c24 <isatty+0x34>
81111c0c:	e0bfff17 	ldw	r2,-4(fp)
81111c10:	10c00324 	muli	r3,r2,12
81111c14:	00a044b4 	movhi	r2,33042
81111c18:	10a36904 	addi	r2,r2,-29276
81111c1c:	1885883a 	add	r2,r3,r2
81111c20:	00000106 	br	81111c28 <isatty+0x38>
81111c24:	0005883a 	mov	r2,zero
81111c28:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
81111c2c:	e0bfef17 	ldw	r2,-68(fp)
81111c30:	10000e26 	beq	r2,zero,81111c6c <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
81111c34:	e0bfef17 	ldw	r2,-68(fp)
81111c38:	10800017 	ldw	r2,0(r2)
81111c3c:	10800817 	ldw	r2,32(r2)
81111c40:	1000021e 	bne	r2,zero,81111c4c <isatty+0x5c>
    {
      return 1;
81111c44:	00800044 	movi	r2,1
81111c48:	00000d06 	br	81111c80 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
81111c4c:	e0bff004 	addi	r2,fp,-64
81111c50:	100b883a 	mov	r5,r2
81111c54:	e13fff17 	ldw	r4,-4(fp)
81111c58:	1111b040 	call	81111b04 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
81111c5c:	e0bff117 	ldw	r2,-60(fp)
81111c60:	10880020 	cmpeqi	r2,r2,8192
81111c64:	10803fcc 	andi	r2,r2,255
81111c68:	00000506 	br	81111c80 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
81111c6c:	1111bb40 	call	81111bb4 <alt_get_errno>
81111c70:	1007883a 	mov	r3,r2
81111c74:	00801444 	movi	r2,81
81111c78:	18800015 	stw	r2,0(r3)
    return 0;
81111c7c:	0005883a 	mov	r2,zero
  }
}
81111c80:	e037883a 	mov	sp,fp
81111c84:	dfc00117 	ldw	ra,4(sp)
81111c88:	df000017 	ldw	fp,0(sp)
81111c8c:	dec00204 	addi	sp,sp,8
81111c90:	f800283a 	ret

81111c94 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
81111c94:	defffe04 	addi	sp,sp,-8
81111c98:	dfc00115 	stw	ra,4(sp)
81111c9c:	df000015 	stw	fp,0(sp)
81111ca0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
81111ca4:	d0a00b17 	ldw	r2,-32724(gp)
81111ca8:	10000326 	beq	r2,zero,81111cb8 <alt_get_errno+0x24>
81111cac:	d0a00b17 	ldw	r2,-32724(gp)
81111cb0:	103ee83a 	callr	r2
81111cb4:	00000106 	br	81111cbc <alt_get_errno+0x28>
81111cb8:	d0a01e04 	addi	r2,gp,-32648
}
81111cbc:	e037883a 	mov	sp,fp
81111cc0:	dfc00117 	ldw	ra,4(sp)
81111cc4:	df000017 	ldw	fp,0(sp)
81111cc8:	dec00204 	addi	sp,sp,8
81111ccc:	f800283a 	ret

81111cd0 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
81111cd0:	defff904 	addi	sp,sp,-28
81111cd4:	dfc00615 	stw	ra,24(sp)
81111cd8:	df000515 	stw	fp,20(sp)
81111cdc:	df000504 	addi	fp,sp,20
81111ce0:	e13ffd15 	stw	r4,-12(fp)
81111ce4:	e17ffe15 	stw	r5,-8(fp)
81111ce8:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
81111cec:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
81111cf0:	e0bffd17 	ldw	r2,-12(fp)
81111cf4:	10000616 	blt	r2,zero,81111d10 <lseek+0x40>
81111cf8:	e0bffd17 	ldw	r2,-12(fp)
81111cfc:	10c00324 	muli	r3,r2,12
81111d00:	00a044b4 	movhi	r2,33042
81111d04:	10a36904 	addi	r2,r2,-29276
81111d08:	1885883a 	add	r2,r3,r2
81111d0c:	00000106 	br	81111d14 <lseek+0x44>
81111d10:	0005883a 	mov	r2,zero
81111d14:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
81111d18:	e0bffc17 	ldw	r2,-16(fp)
81111d1c:	10001026 	beq	r2,zero,81111d60 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
81111d20:	e0bffc17 	ldw	r2,-16(fp)
81111d24:	10800017 	ldw	r2,0(r2)
81111d28:	10800717 	ldw	r2,28(r2)
81111d2c:	10000926 	beq	r2,zero,81111d54 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
81111d30:	e0bffc17 	ldw	r2,-16(fp)
81111d34:	10800017 	ldw	r2,0(r2)
81111d38:	10800717 	ldw	r2,28(r2)
81111d3c:	e1bfff17 	ldw	r6,-4(fp)
81111d40:	e17ffe17 	ldw	r5,-8(fp)
81111d44:	e13ffc17 	ldw	r4,-16(fp)
81111d48:	103ee83a 	callr	r2
81111d4c:	e0bffb15 	stw	r2,-20(fp)
81111d50:	00000506 	br	81111d68 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
81111d54:	00bfde84 	movi	r2,-134
81111d58:	e0bffb15 	stw	r2,-20(fp)
81111d5c:	00000206 	br	81111d68 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
81111d60:	00bfebc4 	movi	r2,-81
81111d64:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
81111d68:	e0bffb17 	ldw	r2,-20(fp)
81111d6c:	1000070e 	bge	r2,zero,81111d8c <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
81111d70:	1111c940 	call	81111c94 <alt_get_errno>
81111d74:	1007883a 	mov	r3,r2
81111d78:	e0bffb17 	ldw	r2,-20(fp)
81111d7c:	0085c83a 	sub	r2,zero,r2
81111d80:	18800015 	stw	r2,0(r3)
    rc = -1;
81111d84:	00bfffc4 	movi	r2,-1
81111d88:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
81111d8c:	e0bffb17 	ldw	r2,-20(fp)
}
81111d90:	e037883a 	mov	sp,fp
81111d94:	dfc00117 	ldw	ra,4(sp)
81111d98:	df000017 	ldw	fp,0(sp)
81111d9c:	dec00204 	addi	sp,sp,8
81111da0:	f800283a 	ret

81111da4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
81111da4:	defffd04 	addi	sp,sp,-12
81111da8:	dfc00215 	stw	ra,8(sp)
81111dac:	df000115 	stw	fp,4(sp)
81111db0:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
81111db4:	0009883a 	mov	r4,zero
81111db8:	11123f00 	call	811123f0 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
81111dbc:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
81111dc0:	11124280 	call	81112428 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
81111dc4:	01a044b4 	movhi	r6,33042
81111dc8:	31a09904 	addi	r6,r6,-32156
81111dcc:	016044b4 	movhi	r5,33042
81111dd0:	29609904 	addi	r5,r5,-32156
81111dd4:	012044b4 	movhi	r4,33042
81111dd8:	21209904 	addi	r4,r4,-32156
81111ddc:	111648c0 	call	8111648c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
81111de0:	1115fd80 	call	81115fd8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
81111de4:	01204474 	movhi	r4,33041
81111de8:	21180e04 	addi	r4,r4,24632
81111dec:	1116c300 	call	81116c30 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
81111df0:	d0a01f17 	ldw	r2,-32644(gp)
81111df4:	d0e02017 	ldw	r3,-32640(gp)
81111df8:	d1202117 	ldw	r4,-32636(gp)
81111dfc:	200d883a 	mov	r6,r4
81111e00:	180b883a 	mov	r5,r3
81111e04:	1009883a 	mov	r4,r2
81111e08:	11035ec0 	call	811035ec <main>
81111e0c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
81111e10:	01000044 	movi	r4,1
81111e14:	11119ac0 	call	811119ac <close>
  exit (result);
81111e18:	e13fff17 	ldw	r4,-4(fp)
81111e1c:	1116c440 	call	81116c44 <exit>

81111e20 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
81111e20:	defffe04 	addi	sp,sp,-8
81111e24:	df000115 	stw	fp,4(sp)
81111e28:	df000104 	addi	fp,sp,4
81111e2c:	e13fff15 	stw	r4,-4(fp)
}
81111e30:	0001883a 	nop
81111e34:	e037883a 	mov	sp,fp
81111e38:	df000017 	ldw	fp,0(sp)
81111e3c:	dec00104 	addi	sp,sp,4
81111e40:	f800283a 	ret

81111e44 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
81111e44:	defffe04 	addi	sp,sp,-8
81111e48:	df000115 	stw	fp,4(sp)
81111e4c:	df000104 	addi	fp,sp,4
81111e50:	e13fff15 	stw	r4,-4(fp)
}
81111e54:	0001883a 	nop
81111e58:	e037883a 	mov	sp,fp
81111e5c:	df000017 	ldw	fp,0(sp)
81111e60:	dec00104 	addi	sp,sp,4
81111e64:	f800283a 	ret

81111e68 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
81111e68:	defffe04 	addi	sp,sp,-8
81111e6c:	dfc00115 	stw	ra,4(sp)
81111e70:	df000015 	stw	fp,0(sp)
81111e74:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
81111e78:	d0a00b17 	ldw	r2,-32724(gp)
81111e7c:	10000326 	beq	r2,zero,81111e8c <alt_get_errno+0x24>
81111e80:	d0a00b17 	ldw	r2,-32724(gp)
81111e84:	103ee83a 	callr	r2
81111e88:	00000106 	br	81111e90 <alt_get_errno+0x28>
81111e8c:	d0a01e04 	addi	r2,gp,-32648
}
81111e90:	e037883a 	mov	sp,fp
81111e94:	dfc00117 	ldw	ra,4(sp)
81111e98:	df000017 	ldw	fp,0(sp)
81111e9c:	dec00204 	addi	sp,sp,8
81111ea0:	f800283a 	ret

81111ea4 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
81111ea4:	defff904 	addi	sp,sp,-28
81111ea8:	dfc00615 	stw	ra,24(sp)
81111eac:	df000515 	stw	fp,20(sp)
81111eb0:	df000504 	addi	fp,sp,20
81111eb4:	e13ffd15 	stw	r4,-12(fp)
81111eb8:	e17ffe15 	stw	r5,-8(fp)
81111ebc:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
81111ec0:	e0bffd17 	ldw	r2,-12(fp)
81111ec4:	10000616 	blt	r2,zero,81111ee0 <read+0x3c>
81111ec8:	e0bffd17 	ldw	r2,-12(fp)
81111ecc:	10c00324 	muli	r3,r2,12
81111ed0:	00a044b4 	movhi	r2,33042
81111ed4:	10a36904 	addi	r2,r2,-29276
81111ed8:	1885883a 	add	r2,r3,r2
81111edc:	00000106 	br	81111ee4 <read+0x40>
81111ee0:	0005883a 	mov	r2,zero
81111ee4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
81111ee8:	e0bffb17 	ldw	r2,-20(fp)
81111eec:	10002226 	beq	r2,zero,81111f78 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
81111ef0:	e0bffb17 	ldw	r2,-20(fp)
81111ef4:	10800217 	ldw	r2,8(r2)
81111ef8:	108000cc 	andi	r2,r2,3
81111efc:	10800060 	cmpeqi	r2,r2,1
81111f00:	1000181e 	bne	r2,zero,81111f64 <read+0xc0>
        (fd->dev->read))
81111f04:	e0bffb17 	ldw	r2,-20(fp)
81111f08:	10800017 	ldw	r2,0(r2)
81111f0c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
81111f10:	10001426 	beq	r2,zero,81111f64 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
81111f14:	e0bffb17 	ldw	r2,-20(fp)
81111f18:	10800017 	ldw	r2,0(r2)
81111f1c:	10800517 	ldw	r2,20(r2)
81111f20:	e0ffff17 	ldw	r3,-4(fp)
81111f24:	180d883a 	mov	r6,r3
81111f28:	e17ffe17 	ldw	r5,-8(fp)
81111f2c:	e13ffb17 	ldw	r4,-20(fp)
81111f30:	103ee83a 	callr	r2
81111f34:	e0bffc15 	stw	r2,-16(fp)
81111f38:	e0bffc17 	ldw	r2,-16(fp)
81111f3c:	1000070e 	bge	r2,zero,81111f5c <read+0xb8>
        {
          ALT_ERRNO = -rval;
81111f40:	1111e680 	call	81111e68 <alt_get_errno>
81111f44:	1007883a 	mov	r3,r2
81111f48:	e0bffc17 	ldw	r2,-16(fp)
81111f4c:	0085c83a 	sub	r2,zero,r2
81111f50:	18800015 	stw	r2,0(r3)
          return -1;
81111f54:	00bfffc4 	movi	r2,-1
81111f58:	00000c06 	br	81111f8c <read+0xe8>
        }
        return rval;
81111f5c:	e0bffc17 	ldw	r2,-16(fp)
81111f60:	00000a06 	br	81111f8c <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
81111f64:	1111e680 	call	81111e68 <alt_get_errno>
81111f68:	1007883a 	mov	r3,r2
81111f6c:	00800344 	movi	r2,13
81111f70:	18800015 	stw	r2,0(r3)
81111f74:	00000406 	br	81111f88 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
81111f78:	1111e680 	call	81111e68 <alt_get_errno>
81111f7c:	1007883a 	mov	r3,r2
81111f80:	00801444 	movi	r2,81
81111f84:	18800015 	stw	r2,0(r3)
  }
  return -1;
81111f88:	00bfffc4 	movi	r2,-1
}
81111f8c:	e037883a 	mov	sp,fp
81111f90:	dfc00117 	ldw	ra,4(sp)
81111f94:	df000017 	ldw	fp,0(sp)
81111f98:	dec00204 	addi	sp,sp,8
81111f9c:	f800283a 	ret

81111fa0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
81111fa0:	defffe04 	addi	sp,sp,-8
81111fa4:	df000115 	stw	fp,4(sp)
81111fa8:	df000104 	addi	fp,sp,4
81111fac:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
81111fb0:	e0bfff17 	ldw	r2,-4(fp)
81111fb4:	108000d0 	cmplti	r2,r2,3
81111fb8:	10000d1e 	bne	r2,zero,81111ff0 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
81111fbc:	00a044b4 	movhi	r2,33042
81111fc0:	10a36904 	addi	r2,r2,-29276
81111fc4:	e0ffff17 	ldw	r3,-4(fp)
81111fc8:	18c00324 	muli	r3,r3,12
81111fcc:	10c5883a 	add	r2,r2,r3
81111fd0:	10800204 	addi	r2,r2,8
81111fd4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
81111fd8:	00a044b4 	movhi	r2,33042
81111fdc:	10a36904 	addi	r2,r2,-29276
81111fe0:	e0ffff17 	ldw	r3,-4(fp)
81111fe4:	18c00324 	muli	r3,r3,12
81111fe8:	10c5883a 	add	r2,r2,r3
81111fec:	10000015 	stw	zero,0(r2)
  }
}
81111ff0:	0001883a 	nop
81111ff4:	e037883a 	mov	sp,fp
81111ff8:	df000017 	ldw	fp,0(sp)
81111ffc:	dec00104 	addi	sp,sp,4
81112000:	f800283a 	ret

81112004 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
81112004:	defff904 	addi	sp,sp,-28
81112008:	df000615 	stw	fp,24(sp)
8111200c:	df000604 	addi	fp,sp,24
81112010:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81112014:	0005303a 	rdctl	r2,status
81112018:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8111201c:	e0fffe17 	ldw	r3,-8(fp)
81112020:	00bfff84 	movi	r2,-2
81112024:	1884703a 	and	r2,r3,r2
81112028:	1001703a 	wrctl	status,r2
  
  return context;
8111202c:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
81112030:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
81112034:	d0a00c17 	ldw	r2,-32720(gp)
81112038:	10c000c4 	addi	r3,r2,3
8111203c:	00bfff04 	movi	r2,-4
81112040:	1884703a 	and	r2,r3,r2
81112044:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
81112048:	d0e00c17 	ldw	r3,-32720(gp)
8111204c:	e0bfff17 	ldw	r2,-4(fp)
81112050:	1887883a 	add	r3,r3,r2
81112054:	00a04834 	movhi	r2,33056
81112058:	10a80004 	addi	r2,r2,-24576
8111205c:	10c0062e 	bgeu	r2,r3,81112078 <sbrk+0x74>
81112060:	e0bffb17 	ldw	r2,-20(fp)
81112064:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81112068:	e0bffa17 	ldw	r2,-24(fp)
8111206c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
81112070:	00bfffc4 	movi	r2,-1
81112074:	00000b06 	br	811120a4 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
81112078:	d0a00c17 	ldw	r2,-32720(gp)
8111207c:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
81112080:	d0e00c17 	ldw	r3,-32720(gp)
81112084:	e0bfff17 	ldw	r2,-4(fp)
81112088:	1885883a 	add	r2,r3,r2
8111208c:	d0a00c15 	stw	r2,-32720(gp)
81112090:	e0bffb17 	ldw	r2,-20(fp)
81112094:	e0bffc15 	stw	r2,-16(fp)
81112098:	e0bffc17 	ldw	r2,-16(fp)
8111209c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
811120a0:	e0bffd17 	ldw	r2,-12(fp)
} 
811120a4:	e037883a 	mov	sp,fp
811120a8:	df000017 	ldw	fp,0(sp)
811120ac:	dec00104 	addi	sp,sp,4
811120b0:	f800283a 	ret

811120b4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
811120b4:	defffa04 	addi	sp,sp,-24
811120b8:	df000515 	stw	fp,20(sp)
811120bc:	df000504 	addi	fp,sp,20
811120c0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811120c4:	0005303a 	rdctl	r2,status
811120c8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811120cc:	e0fffc17 	ldw	r3,-16(fp)
811120d0:	00bfff84 	movi	r2,-2
811120d4:	1884703a 	and	r2,r3,r2
811120d8:	1001703a 	wrctl	status,r2
  
  return context;
811120dc:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
811120e0:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
811120e4:	e0bfff17 	ldw	r2,-4(fp)
811120e8:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
811120ec:	e0bffd17 	ldw	r2,-12(fp)
811120f0:	10800017 	ldw	r2,0(r2)
811120f4:	e0fffd17 	ldw	r3,-12(fp)
811120f8:	18c00117 	ldw	r3,4(r3)
811120fc:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
81112100:	e0bffd17 	ldw	r2,-12(fp)
81112104:	10800117 	ldw	r2,4(r2)
81112108:	e0fffd17 	ldw	r3,-12(fp)
8111210c:	18c00017 	ldw	r3,0(r3)
81112110:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
81112114:	e0bffd17 	ldw	r2,-12(fp)
81112118:	e0fffd17 	ldw	r3,-12(fp)
8111211c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
81112120:	e0bffd17 	ldw	r2,-12(fp)
81112124:	e0fffd17 	ldw	r3,-12(fp)
81112128:	10c00015 	stw	r3,0(r2)
8111212c:	e0bffb17 	ldw	r2,-20(fp)
81112130:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81112134:	e0bffe17 	ldw	r2,-8(fp)
81112138:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
8111213c:	0001883a 	nop
81112140:	e037883a 	mov	sp,fp
81112144:	df000017 	ldw	fp,0(sp)
81112148:	dec00104 	addi	sp,sp,4
8111214c:	f800283a 	ret

81112150 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
81112150:	defffb04 	addi	sp,sp,-20
81112154:	dfc00415 	stw	ra,16(sp)
81112158:	df000315 	stw	fp,12(sp)
8111215c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
81112160:	d0a00d17 	ldw	r2,-32716(gp)
81112164:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
81112168:	d0a02317 	ldw	r2,-32628(gp)
8111216c:	10800044 	addi	r2,r2,1
81112170:	d0a02315 	stw	r2,-32628(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
81112174:	00002e06 	br	81112230 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
81112178:	e0bffd17 	ldw	r2,-12(fp)
8111217c:	10800017 	ldw	r2,0(r2)
81112180:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
81112184:	e0bffd17 	ldw	r2,-12(fp)
81112188:	10800403 	ldbu	r2,16(r2)
8111218c:	10803fcc 	andi	r2,r2,255
81112190:	10000426 	beq	r2,zero,811121a4 <alt_tick+0x54>
81112194:	d0a02317 	ldw	r2,-32628(gp)
81112198:	1000021e 	bne	r2,zero,811121a4 <alt_tick+0x54>
    {
      alarm->rollover = 0;
8111219c:	e0bffd17 	ldw	r2,-12(fp)
811121a0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
811121a4:	e0bffd17 	ldw	r2,-12(fp)
811121a8:	10800217 	ldw	r2,8(r2)
811121ac:	d0e02317 	ldw	r3,-32628(gp)
811121b0:	18801d36 	bltu	r3,r2,81112228 <alt_tick+0xd8>
811121b4:	e0bffd17 	ldw	r2,-12(fp)
811121b8:	10800403 	ldbu	r2,16(r2)
811121bc:	10803fcc 	andi	r2,r2,255
811121c0:	1000191e 	bne	r2,zero,81112228 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
811121c4:	e0bffd17 	ldw	r2,-12(fp)
811121c8:	10800317 	ldw	r2,12(r2)
811121cc:	e0fffd17 	ldw	r3,-12(fp)
811121d0:	18c00517 	ldw	r3,20(r3)
811121d4:	1809883a 	mov	r4,r3
811121d8:	103ee83a 	callr	r2
811121dc:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
811121e0:	e0bfff17 	ldw	r2,-4(fp)
811121e4:	1000031e 	bne	r2,zero,811121f4 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
811121e8:	e13ffd17 	ldw	r4,-12(fp)
811121ec:	11120b40 	call	811120b4 <alt_alarm_stop>
811121f0:	00000d06 	br	81112228 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
811121f4:	e0bffd17 	ldw	r2,-12(fp)
811121f8:	10c00217 	ldw	r3,8(r2)
811121fc:	e0bfff17 	ldw	r2,-4(fp)
81112200:	1887883a 	add	r3,r3,r2
81112204:	e0bffd17 	ldw	r2,-12(fp)
81112208:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
8111220c:	e0bffd17 	ldw	r2,-12(fp)
81112210:	10c00217 	ldw	r3,8(r2)
81112214:	d0a02317 	ldw	r2,-32628(gp)
81112218:	1880032e 	bgeu	r3,r2,81112228 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
8111221c:	e0bffd17 	ldw	r2,-12(fp)
81112220:	00c00044 	movi	r3,1
81112224:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
81112228:	e0bffe17 	ldw	r2,-8(fp)
8111222c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
81112230:	e0fffd17 	ldw	r3,-12(fp)
81112234:	d0a00d04 	addi	r2,gp,-32716
81112238:	18bfcf1e 	bne	r3,r2,81112178 <__reset+0xfb0f2178>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
8111223c:	0001883a 	nop
}
81112240:	0001883a 	nop
81112244:	e037883a 	mov	sp,fp
81112248:	dfc00117 	ldw	ra,4(sp)
8111224c:	df000017 	ldw	fp,0(sp)
81112250:	dec00204 	addi	sp,sp,8
81112254:	f800283a 	ret

81112258 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
81112258:	defffd04 	addi	sp,sp,-12
8111225c:	dfc00215 	stw	ra,8(sp)
81112260:	df000115 	stw	fp,4(sp)
81112264:	df000104 	addi	fp,sp,4
81112268:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
8111226c:	e13fff17 	ldw	r4,-4(fp)
81112270:	1115da80 	call	81115da8 <alt_busy_sleep>
}
81112274:	e037883a 	mov	sp,fp
81112278:	dfc00117 	ldw	ra,4(sp)
8111227c:	df000017 	ldw	fp,0(sp)
81112280:	dec00204 	addi	sp,sp,8
81112284:	f800283a 	ret

81112288 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
81112288:	defffe04 	addi	sp,sp,-8
8111228c:	dfc00115 	stw	ra,4(sp)
81112290:	df000015 	stw	fp,0(sp)
81112294:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
81112298:	d0a00b17 	ldw	r2,-32724(gp)
8111229c:	10000326 	beq	r2,zero,811122ac <alt_get_errno+0x24>
811122a0:	d0a00b17 	ldw	r2,-32724(gp)
811122a4:	103ee83a 	callr	r2
811122a8:	00000106 	br	811122b0 <alt_get_errno+0x28>
811122ac:	d0a01e04 	addi	r2,gp,-32648
}
811122b0:	e037883a 	mov	sp,fp
811122b4:	dfc00117 	ldw	ra,4(sp)
811122b8:	df000017 	ldw	fp,0(sp)
811122bc:	dec00204 	addi	sp,sp,8
811122c0:	f800283a 	ret

811122c4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
811122c4:	defff904 	addi	sp,sp,-28
811122c8:	dfc00615 	stw	ra,24(sp)
811122cc:	df000515 	stw	fp,20(sp)
811122d0:	df000504 	addi	fp,sp,20
811122d4:	e13ffd15 	stw	r4,-12(fp)
811122d8:	e17ffe15 	stw	r5,-8(fp)
811122dc:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
811122e0:	e0bffd17 	ldw	r2,-12(fp)
811122e4:	10000616 	blt	r2,zero,81112300 <write+0x3c>
811122e8:	e0bffd17 	ldw	r2,-12(fp)
811122ec:	10c00324 	muli	r3,r2,12
811122f0:	00a044b4 	movhi	r2,33042
811122f4:	10a36904 	addi	r2,r2,-29276
811122f8:	1885883a 	add	r2,r3,r2
811122fc:	00000106 	br	81112304 <write+0x40>
81112300:	0005883a 	mov	r2,zero
81112304:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
81112308:	e0bffb17 	ldw	r2,-20(fp)
8111230c:	10002126 	beq	r2,zero,81112394 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
81112310:	e0bffb17 	ldw	r2,-20(fp)
81112314:	10800217 	ldw	r2,8(r2)
81112318:	108000cc 	andi	r2,r2,3
8111231c:	10001826 	beq	r2,zero,81112380 <write+0xbc>
81112320:	e0bffb17 	ldw	r2,-20(fp)
81112324:	10800017 	ldw	r2,0(r2)
81112328:	10800617 	ldw	r2,24(r2)
8111232c:	10001426 	beq	r2,zero,81112380 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
81112330:	e0bffb17 	ldw	r2,-20(fp)
81112334:	10800017 	ldw	r2,0(r2)
81112338:	10800617 	ldw	r2,24(r2)
8111233c:	e0ffff17 	ldw	r3,-4(fp)
81112340:	180d883a 	mov	r6,r3
81112344:	e17ffe17 	ldw	r5,-8(fp)
81112348:	e13ffb17 	ldw	r4,-20(fp)
8111234c:	103ee83a 	callr	r2
81112350:	e0bffc15 	stw	r2,-16(fp)
81112354:	e0bffc17 	ldw	r2,-16(fp)
81112358:	1000070e 	bge	r2,zero,81112378 <write+0xb4>
      {
        ALT_ERRNO = -rval;
8111235c:	11122880 	call	81112288 <alt_get_errno>
81112360:	1007883a 	mov	r3,r2
81112364:	e0bffc17 	ldw	r2,-16(fp)
81112368:	0085c83a 	sub	r2,zero,r2
8111236c:	18800015 	stw	r2,0(r3)
        return -1;
81112370:	00bfffc4 	movi	r2,-1
81112374:	00000c06 	br	811123a8 <write+0xe4>
      }
      return rval;
81112378:	e0bffc17 	ldw	r2,-16(fp)
8111237c:	00000a06 	br	811123a8 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
81112380:	11122880 	call	81112288 <alt_get_errno>
81112384:	1007883a 	mov	r3,r2
81112388:	00800344 	movi	r2,13
8111238c:	18800015 	stw	r2,0(r3)
81112390:	00000406 	br	811123a4 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
81112394:	11122880 	call	81112288 <alt_get_errno>
81112398:	1007883a 	mov	r3,r2
8111239c:	00801444 	movi	r2,81
811123a0:	18800015 	stw	r2,0(r3)
  }
  return -1;
811123a4:	00bfffc4 	movi	r2,-1
}
811123a8:	e037883a 	mov	sp,fp
811123ac:	dfc00117 	ldw	ra,4(sp)
811123b0:	df000017 	ldw	fp,0(sp)
811123b4:	dec00204 	addi	sp,sp,8
811123b8:	f800283a 	ret

811123bc <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
811123bc:	defffd04 	addi	sp,sp,-12
811123c0:	dfc00215 	stw	ra,8(sp)
811123c4:	df000115 	stw	fp,4(sp)
811123c8:	df000104 	addi	fp,sp,4
811123cc:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
811123d0:	d1600804 	addi	r5,gp,-32736
811123d4:	e13fff17 	ldw	r4,-4(fp)
811123d8:	1115f340 	call	81115f34 <alt_dev_llist_insert>
}
811123dc:	e037883a 	mov	sp,fp
811123e0:	dfc00117 	ldw	ra,4(sp)
811123e4:	df000017 	ldw	fp,0(sp)
811123e8:	dec00204 	addi	sp,sp,8
811123ec:	f800283a 	ret

811123f0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
811123f0:	defffd04 	addi	sp,sp,-12
811123f4:	dfc00215 	stw	ra,8(sp)
811123f8:	df000115 	stw	fp,4(sp)
811123fc:	df000104 	addi	fp,sp,4
81112400:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
81112404:	11169c40 	call	811169c4 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
81112408:	00800044 	movi	r2,1
8111240c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
81112410:	0001883a 	nop
81112414:	e037883a 	mov	sp,fp
81112418:	dfc00117 	ldw	ra,4(sp)
8111241c:	df000017 	ldw	fp,0(sp)
81112420:	dec00204 	addi	sp,sp,8
81112424:	f800283a 	ret

81112428 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
81112428:	defffe04 	addi	sp,sp,-8
8111242c:	dfc00115 	stw	ra,4(sp)
81112430:	df000015 	stw	fp,0(sp)
81112434:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_1MS, timer_1ms);
81112438:	01c0fa04 	movi	r7,1000
8111243c:	018000c4 	movi	r6,3
81112440:	000b883a 	mov	r5,zero
81112444:	01200034 	movhi	r4,32768
81112448:	21000804 	addi	r4,r4,32
8111244c:	1113d840 	call	81113d84 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1US, timer_1us);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
81112450:	01800084 	movi	r6,2
81112454:	000b883a 	mov	r5,zero
81112458:	012044b4 	movhi	r4,33042
8111245c:	2123d304 	addi	r4,r4,-28852
81112460:	11126740 	call	81112674 <altera_avalon_jtag_uart_init>
81112464:	012044b4 	movhi	r4,33042
81112468:	2123c904 	addi	r4,r4,-28892
8111246c:	11123bc0 	call	811123bc <alt_dev_reg>
    ALTERA_AVALON_SGDMA_INIT ( SGDMA_RX, sgdma_rx);
81112470:	01800044 	movi	r6,1
81112474:	000b883a 	mov	r5,zero
81112478:	012044b4 	movhi	r4,33042
8111247c:	2127e104 	addi	r4,r4,-24700
81112480:	1113c640 	call	81113c64 <alt_avalon_sgdma_init>
    ALTERA_AVALON_SGDMA_INIT ( SGDMA_TX, sgdma_tx);
81112484:	000d883a 	mov	r6,zero
81112488:	000b883a 	mov	r5,zero
8111248c:	012044b4 	movhi	r4,33042
81112490:	2127ed04 	addi	r4,r4,-24652
81112494:	1113c640 	call	81113c64 <alt_avalon_sgdma_init>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS, sysid_qsys);
81112498:	0001883a 	nop
    ALTERA_ETH_TSE_INIT ( TSE_MAC, tse_mac);
8111249c:	0001883a 	nop
    ALTERA_MSGDMA_INIT ( DMA_M1_M2, dma_M1_M2);
811124a0:	00a044b4 	movhi	r2,33042
811124a4:	10a7f904 	addi	r2,r2,-24604
811124a8:	10c00717 	ldw	r3,28(r2)
811124ac:	00a044b4 	movhi	r2,33042
811124b0:	10a7f904 	addi	r2,r2,-24604
811124b4:	10800817 	ldw	r2,32(r2)
811124b8:	100d883a 	mov	r6,r2
811124bc:	180b883a 	mov	r5,r3
811124c0:	012044b4 	movhi	r4,33042
811124c4:	2127f904 	addi	r4,r4,-24604
811124c8:	11159cc0 	call	811159cc <alt_msgdma_init>
    ALTERA_MSGDMA_INIT ( DMA_M2_M1, dma_M2_M1);
811124cc:	00a044b4 	movhi	r2,33042
811124d0:	10a81104 	addi	r2,r2,-24508
811124d4:	10c00717 	ldw	r3,28(r2)
811124d8:	00a044b4 	movhi	r2,33042
811124dc:	10a81104 	addi	r2,r2,-24508
811124e0:	10800817 	ldw	r2,32(r2)
811124e4:	100d883a 	mov	r6,r2
811124e8:	180b883a 	mov	r5,r3
811124ec:	012044b4 	movhi	r4,33042
811124f0:	21281104 	addi	r4,r4,-24508
811124f4:	11159cc0 	call	811159cc <alt_msgdma_init>
}
811124f8:	0001883a 	nop
811124fc:	e037883a 	mov	sp,fp
81112500:	dfc00117 	ldw	ra,4(sp)
81112504:	df000017 	ldw	fp,0(sp)
81112508:	dec00204 	addi	sp,sp,8
8111250c:	f800283a 	ret

81112510 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
81112510:	defffa04 	addi	sp,sp,-24
81112514:	dfc00515 	stw	ra,20(sp)
81112518:	df000415 	stw	fp,16(sp)
8111251c:	df000404 	addi	fp,sp,16
81112520:	e13ffd15 	stw	r4,-12(fp)
81112524:	e17ffe15 	stw	r5,-8(fp)
81112528:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
8111252c:	e0bffd17 	ldw	r2,-12(fp)
81112530:	10800017 	ldw	r2,0(r2)
81112534:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
81112538:	e0bffc17 	ldw	r2,-16(fp)
8111253c:	10c00a04 	addi	r3,r2,40
81112540:	e0bffd17 	ldw	r2,-12(fp)
81112544:	10800217 	ldw	r2,8(r2)
81112548:	100f883a 	mov	r7,r2
8111254c:	e1bfff17 	ldw	r6,-4(fp)
81112550:	e17ffe17 	ldw	r5,-8(fp)
81112554:	1809883a 	mov	r4,r3
81112558:	1112b380 	call	81112b38 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
8111255c:	e037883a 	mov	sp,fp
81112560:	dfc00117 	ldw	ra,4(sp)
81112564:	df000017 	ldw	fp,0(sp)
81112568:	dec00204 	addi	sp,sp,8
8111256c:	f800283a 	ret

81112570 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
81112570:	defffa04 	addi	sp,sp,-24
81112574:	dfc00515 	stw	ra,20(sp)
81112578:	df000415 	stw	fp,16(sp)
8111257c:	df000404 	addi	fp,sp,16
81112580:	e13ffd15 	stw	r4,-12(fp)
81112584:	e17ffe15 	stw	r5,-8(fp)
81112588:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
8111258c:	e0bffd17 	ldw	r2,-12(fp)
81112590:	10800017 	ldw	r2,0(r2)
81112594:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
81112598:	e0bffc17 	ldw	r2,-16(fp)
8111259c:	10c00a04 	addi	r3,r2,40
811125a0:	e0bffd17 	ldw	r2,-12(fp)
811125a4:	10800217 	ldw	r2,8(r2)
811125a8:	100f883a 	mov	r7,r2
811125ac:	e1bfff17 	ldw	r6,-4(fp)
811125b0:	e17ffe17 	ldw	r5,-8(fp)
811125b4:	1809883a 	mov	r4,r3
811125b8:	1112d540 	call	81112d54 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
811125bc:	e037883a 	mov	sp,fp
811125c0:	dfc00117 	ldw	ra,4(sp)
811125c4:	df000017 	ldw	fp,0(sp)
811125c8:	dec00204 	addi	sp,sp,8
811125cc:	f800283a 	ret

811125d0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
811125d0:	defffc04 	addi	sp,sp,-16
811125d4:	dfc00315 	stw	ra,12(sp)
811125d8:	df000215 	stw	fp,8(sp)
811125dc:	df000204 	addi	fp,sp,8
811125e0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
811125e4:	e0bfff17 	ldw	r2,-4(fp)
811125e8:	10800017 	ldw	r2,0(r2)
811125ec:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
811125f0:	e0bffe17 	ldw	r2,-8(fp)
811125f4:	10c00a04 	addi	r3,r2,40
811125f8:	e0bfff17 	ldw	r2,-4(fp)
811125fc:	10800217 	ldw	r2,8(r2)
81112600:	100b883a 	mov	r5,r2
81112604:	1809883a 	mov	r4,r3
81112608:	11129e00 	call	811129e0 <altera_avalon_jtag_uart_close>
}
8111260c:	e037883a 	mov	sp,fp
81112610:	dfc00117 	ldw	ra,4(sp)
81112614:	df000017 	ldw	fp,0(sp)
81112618:	dec00204 	addi	sp,sp,8
8111261c:	f800283a 	ret

81112620 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
81112620:	defffa04 	addi	sp,sp,-24
81112624:	dfc00515 	stw	ra,20(sp)
81112628:	df000415 	stw	fp,16(sp)
8111262c:	df000404 	addi	fp,sp,16
81112630:	e13ffd15 	stw	r4,-12(fp)
81112634:	e17ffe15 	stw	r5,-8(fp)
81112638:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
8111263c:	e0bffd17 	ldw	r2,-12(fp)
81112640:	10800017 	ldw	r2,0(r2)
81112644:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
81112648:	e0bffc17 	ldw	r2,-16(fp)
8111264c:	10800a04 	addi	r2,r2,40
81112650:	e1bfff17 	ldw	r6,-4(fp)
81112654:	e17ffe17 	ldw	r5,-8(fp)
81112658:	1009883a 	mov	r4,r2
8111265c:	1112a480 	call	81112a48 <altera_avalon_jtag_uart_ioctl>
}
81112660:	e037883a 	mov	sp,fp
81112664:	dfc00117 	ldw	ra,4(sp)
81112668:	df000017 	ldw	fp,0(sp)
8111266c:	dec00204 	addi	sp,sp,8
81112670:	f800283a 	ret

81112674 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
81112674:	defffa04 	addi	sp,sp,-24
81112678:	dfc00515 	stw	ra,20(sp)
8111267c:	df000415 	stw	fp,16(sp)
81112680:	df000404 	addi	fp,sp,16
81112684:	e13ffd15 	stw	r4,-12(fp)
81112688:	e17ffe15 	stw	r5,-8(fp)
8111268c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
81112690:	e0bffd17 	ldw	r2,-12(fp)
81112694:	00c00044 	movi	r3,1
81112698:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
8111269c:	e0bffd17 	ldw	r2,-12(fp)
811126a0:	10800017 	ldw	r2,0(r2)
811126a4:	10800104 	addi	r2,r2,4
811126a8:	1007883a 	mov	r3,r2
811126ac:	e0bffd17 	ldw	r2,-12(fp)
811126b0:	10800817 	ldw	r2,32(r2)
811126b4:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
811126b8:	e0bffe17 	ldw	r2,-8(fp)
811126bc:	e0ffff17 	ldw	r3,-4(fp)
811126c0:	d8000015 	stw	zero,0(sp)
811126c4:	e1fffd17 	ldw	r7,-12(fp)
811126c8:	01a04474 	movhi	r6,33041
811126cc:	3189cd04 	addi	r6,r6,10036
811126d0:	180b883a 	mov	r5,r3
811126d4:	1009883a 	mov	r4,r2
811126d8:	11161280 	call	81116128 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
811126dc:	e0bffd17 	ldw	r2,-12(fp)
811126e0:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
811126e4:	e0bffd17 	ldw	r2,-12(fp)
811126e8:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
811126ec:	d0e02217 	ldw	r3,-32632(gp)
811126f0:	e1fffd17 	ldw	r7,-12(fp)
811126f4:	01a04474 	movhi	r6,33041
811126f8:	318a5004 	addi	r6,r6,10560
811126fc:	180b883a 	mov	r5,r3
81112700:	1009883a 	mov	r4,r2
81112704:	1115c7c0 	call	81115c7c <alt_alarm_start>
81112708:	1000040e 	bge	r2,zero,8111271c <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
8111270c:	e0fffd17 	ldw	r3,-12(fp)
81112710:	00a00034 	movhi	r2,32768
81112714:	10bfffc4 	addi	r2,r2,-1
81112718:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
8111271c:	0001883a 	nop
81112720:	e037883a 	mov	sp,fp
81112724:	dfc00117 	ldw	ra,4(sp)
81112728:	df000017 	ldw	fp,0(sp)
8111272c:	dec00204 	addi	sp,sp,8
81112730:	f800283a 	ret

81112734 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
81112734:	defff804 	addi	sp,sp,-32
81112738:	df000715 	stw	fp,28(sp)
8111273c:	df000704 	addi	fp,sp,28
81112740:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
81112744:	e0bfff17 	ldw	r2,-4(fp)
81112748:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
8111274c:	e0bffb17 	ldw	r2,-20(fp)
81112750:	10800017 	ldw	r2,0(r2)
81112754:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
81112758:	e0bffc17 	ldw	r2,-16(fp)
8111275c:	10800104 	addi	r2,r2,4
81112760:	10800037 	ldwio	r2,0(r2)
81112764:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
81112768:	e0bffd17 	ldw	r2,-12(fp)
8111276c:	1080c00c 	andi	r2,r2,768
81112770:	10006d26 	beq	r2,zero,81112928 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
81112774:	e0bffd17 	ldw	r2,-12(fp)
81112778:	1080400c 	andi	r2,r2,256
8111277c:	10003526 	beq	r2,zero,81112854 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
81112780:	00800074 	movhi	r2,1
81112784:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
81112788:	e0bffb17 	ldw	r2,-20(fp)
8111278c:	10800a17 	ldw	r2,40(r2)
81112790:	10800044 	addi	r2,r2,1
81112794:	1081ffcc 	andi	r2,r2,2047
81112798:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
8111279c:	e0bffb17 	ldw	r2,-20(fp)
811127a0:	10c00b17 	ldw	r3,44(r2)
811127a4:	e0bffe17 	ldw	r2,-8(fp)
811127a8:	18801526 	beq	r3,r2,81112800 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
811127ac:	e0bffc17 	ldw	r2,-16(fp)
811127b0:	10800037 	ldwio	r2,0(r2)
811127b4:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
811127b8:	e0bff917 	ldw	r2,-28(fp)
811127bc:	10a0000c 	andi	r2,r2,32768
811127c0:	10001126 	beq	r2,zero,81112808 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
811127c4:	e0bffb17 	ldw	r2,-20(fp)
811127c8:	10800a17 	ldw	r2,40(r2)
811127cc:	e0fff917 	ldw	r3,-28(fp)
811127d0:	1809883a 	mov	r4,r3
811127d4:	e0fffb17 	ldw	r3,-20(fp)
811127d8:	1885883a 	add	r2,r3,r2
811127dc:	10800e04 	addi	r2,r2,56
811127e0:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
811127e4:	e0bffb17 	ldw	r2,-20(fp)
811127e8:	10800a17 	ldw	r2,40(r2)
811127ec:	10800044 	addi	r2,r2,1
811127f0:	10c1ffcc 	andi	r3,r2,2047
811127f4:	e0bffb17 	ldw	r2,-20(fp)
811127f8:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
811127fc:	003fe206 	br	81112788 <__reset+0xfb0f2788>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
81112800:	0001883a 	nop
81112804:	00000106 	br	8111280c <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
81112808:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
8111280c:	e0bff917 	ldw	r2,-28(fp)
81112810:	10bfffec 	andhi	r2,r2,65535
81112814:	10000f26 	beq	r2,zero,81112854 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
81112818:	e0bffb17 	ldw	r2,-20(fp)
8111281c:	10c00817 	ldw	r3,32(r2)
81112820:	00bfff84 	movi	r2,-2
81112824:	1886703a 	and	r3,r3,r2
81112828:	e0bffb17 	ldw	r2,-20(fp)
8111282c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
81112830:	e0bffc17 	ldw	r2,-16(fp)
81112834:	10800104 	addi	r2,r2,4
81112838:	1007883a 	mov	r3,r2
8111283c:	e0bffb17 	ldw	r2,-20(fp)
81112840:	10800817 	ldw	r2,32(r2)
81112844:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
81112848:	e0bffc17 	ldw	r2,-16(fp)
8111284c:	10800104 	addi	r2,r2,4
81112850:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
81112854:	e0bffd17 	ldw	r2,-12(fp)
81112858:	1080800c 	andi	r2,r2,512
8111285c:	103fbe26 	beq	r2,zero,81112758 <__reset+0xfb0f2758>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
81112860:	e0bffd17 	ldw	r2,-12(fp)
81112864:	1004d43a 	srli	r2,r2,16
81112868:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
8111286c:	00001406 	br	811128c0 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
81112870:	e0bffc17 	ldw	r2,-16(fp)
81112874:	e0fffb17 	ldw	r3,-20(fp)
81112878:	18c00d17 	ldw	r3,52(r3)
8111287c:	e13ffb17 	ldw	r4,-20(fp)
81112880:	20c7883a 	add	r3,r4,r3
81112884:	18c20e04 	addi	r3,r3,2104
81112888:	18c00003 	ldbu	r3,0(r3)
8111288c:	18c03fcc 	andi	r3,r3,255
81112890:	18c0201c 	xori	r3,r3,128
81112894:	18ffe004 	addi	r3,r3,-128
81112898:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
8111289c:	e0bffb17 	ldw	r2,-20(fp)
811128a0:	10800d17 	ldw	r2,52(r2)
811128a4:	10800044 	addi	r2,r2,1
811128a8:	10c1ffcc 	andi	r3,r2,2047
811128ac:	e0bffb17 	ldw	r2,-20(fp)
811128b0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
811128b4:	e0bffa17 	ldw	r2,-24(fp)
811128b8:	10bfffc4 	addi	r2,r2,-1
811128bc:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
811128c0:	e0bffa17 	ldw	r2,-24(fp)
811128c4:	10000526 	beq	r2,zero,811128dc <altera_avalon_jtag_uart_irq+0x1a8>
811128c8:	e0bffb17 	ldw	r2,-20(fp)
811128cc:	10c00d17 	ldw	r3,52(r2)
811128d0:	e0bffb17 	ldw	r2,-20(fp)
811128d4:	10800c17 	ldw	r2,48(r2)
811128d8:	18bfe51e 	bne	r3,r2,81112870 <__reset+0xfb0f2870>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
811128dc:	e0bffa17 	ldw	r2,-24(fp)
811128e0:	103f9d26 	beq	r2,zero,81112758 <__reset+0xfb0f2758>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
811128e4:	e0bffb17 	ldw	r2,-20(fp)
811128e8:	10c00817 	ldw	r3,32(r2)
811128ec:	00bfff44 	movi	r2,-3
811128f0:	1886703a 	and	r3,r3,r2
811128f4:	e0bffb17 	ldw	r2,-20(fp)
811128f8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
811128fc:	e0bffb17 	ldw	r2,-20(fp)
81112900:	10800017 	ldw	r2,0(r2)
81112904:	10800104 	addi	r2,r2,4
81112908:	1007883a 	mov	r3,r2
8111290c:	e0bffb17 	ldw	r2,-20(fp)
81112910:	10800817 	ldw	r2,32(r2)
81112914:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
81112918:	e0bffc17 	ldw	r2,-16(fp)
8111291c:	10800104 	addi	r2,r2,4
81112920:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
81112924:	003f8c06 	br	81112758 <__reset+0xfb0f2758>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
81112928:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
8111292c:	0001883a 	nop
81112930:	e037883a 	mov	sp,fp
81112934:	df000017 	ldw	fp,0(sp)
81112938:	dec00104 	addi	sp,sp,4
8111293c:	f800283a 	ret

81112940 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
81112940:	defff804 	addi	sp,sp,-32
81112944:	df000715 	stw	fp,28(sp)
81112948:	df000704 	addi	fp,sp,28
8111294c:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
81112950:	e0bffb17 	ldw	r2,-20(fp)
81112954:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
81112958:	e0bff917 	ldw	r2,-28(fp)
8111295c:	10800017 	ldw	r2,0(r2)
81112960:	10800104 	addi	r2,r2,4
81112964:	10800037 	ldwio	r2,0(r2)
81112968:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
8111296c:	e0bffa17 	ldw	r2,-24(fp)
81112970:	1081000c 	andi	r2,r2,1024
81112974:	10000b26 	beq	r2,zero,811129a4 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
81112978:	e0bff917 	ldw	r2,-28(fp)
8111297c:	10800017 	ldw	r2,0(r2)
81112980:	10800104 	addi	r2,r2,4
81112984:	1007883a 	mov	r3,r2
81112988:	e0bff917 	ldw	r2,-28(fp)
8111298c:	10800817 	ldw	r2,32(r2)
81112990:	10810014 	ori	r2,r2,1024
81112994:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
81112998:	e0bff917 	ldw	r2,-28(fp)
8111299c:	10000915 	stw	zero,36(r2)
811129a0:	00000a06 	br	811129cc <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
811129a4:	e0bff917 	ldw	r2,-28(fp)
811129a8:	10c00917 	ldw	r3,36(r2)
811129ac:	00a00034 	movhi	r2,32768
811129b0:	10bfff04 	addi	r2,r2,-4
811129b4:	10c00536 	bltu	r2,r3,811129cc <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
811129b8:	e0bff917 	ldw	r2,-28(fp)
811129bc:	10800917 	ldw	r2,36(r2)
811129c0:	10c00044 	addi	r3,r2,1
811129c4:	e0bff917 	ldw	r2,-28(fp)
811129c8:	10c00915 	stw	r3,36(r2)
811129cc:	d0a02217 	ldw	r2,-32632(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
811129d0:	e037883a 	mov	sp,fp
811129d4:	df000017 	ldw	fp,0(sp)
811129d8:	dec00104 	addi	sp,sp,4
811129dc:	f800283a 	ret

811129e0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
811129e0:	defffd04 	addi	sp,sp,-12
811129e4:	df000215 	stw	fp,8(sp)
811129e8:	df000204 	addi	fp,sp,8
811129ec:	e13ffe15 	stw	r4,-8(fp)
811129f0:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
811129f4:	00000506 	br	81112a0c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
811129f8:	e0bfff17 	ldw	r2,-4(fp)
811129fc:	1090000c 	andi	r2,r2,16384
81112a00:	10000226 	beq	r2,zero,81112a0c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
81112a04:	00bffd44 	movi	r2,-11
81112a08:	00000b06 	br	81112a38 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
81112a0c:	e0bffe17 	ldw	r2,-8(fp)
81112a10:	10c00d17 	ldw	r3,52(r2)
81112a14:	e0bffe17 	ldw	r2,-8(fp)
81112a18:	10800c17 	ldw	r2,48(r2)
81112a1c:	18800526 	beq	r3,r2,81112a34 <altera_avalon_jtag_uart_close+0x54>
81112a20:	e0bffe17 	ldw	r2,-8(fp)
81112a24:	10c00917 	ldw	r3,36(r2)
81112a28:	e0bffe17 	ldw	r2,-8(fp)
81112a2c:	10800117 	ldw	r2,4(r2)
81112a30:	18bff136 	bltu	r3,r2,811129f8 <__reset+0xfb0f29f8>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
81112a34:	0005883a 	mov	r2,zero
}
81112a38:	e037883a 	mov	sp,fp
81112a3c:	df000017 	ldw	fp,0(sp)
81112a40:	dec00104 	addi	sp,sp,4
81112a44:	f800283a 	ret

81112a48 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
81112a48:	defffa04 	addi	sp,sp,-24
81112a4c:	df000515 	stw	fp,20(sp)
81112a50:	df000504 	addi	fp,sp,20
81112a54:	e13ffd15 	stw	r4,-12(fp)
81112a58:	e17ffe15 	stw	r5,-8(fp)
81112a5c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
81112a60:	00bff9c4 	movi	r2,-25
81112a64:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
81112a68:	e0bffe17 	ldw	r2,-8(fp)
81112a6c:	10da8060 	cmpeqi	r3,r2,27137
81112a70:	1800031e 	bne	r3,zero,81112a80 <altera_avalon_jtag_uart_ioctl+0x38>
81112a74:	109a80a0 	cmpeqi	r2,r2,27138
81112a78:	1000181e 	bne	r2,zero,81112adc <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
81112a7c:	00002906 	br	81112b24 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
81112a80:	e0bffd17 	ldw	r2,-12(fp)
81112a84:	10c00117 	ldw	r3,4(r2)
81112a88:	00a00034 	movhi	r2,32768
81112a8c:	10bfffc4 	addi	r2,r2,-1
81112a90:	18802126 	beq	r3,r2,81112b18 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
81112a94:	e0bfff17 	ldw	r2,-4(fp)
81112a98:	10800017 	ldw	r2,0(r2)
81112a9c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
81112aa0:	e0bffc17 	ldw	r2,-16(fp)
81112aa4:	10800090 	cmplti	r2,r2,2
81112aa8:	1000061e 	bne	r2,zero,81112ac4 <altera_avalon_jtag_uart_ioctl+0x7c>
81112aac:	e0fffc17 	ldw	r3,-16(fp)
81112ab0:	00a00034 	movhi	r2,32768
81112ab4:	10bfffc4 	addi	r2,r2,-1
81112ab8:	18800226 	beq	r3,r2,81112ac4 <altera_avalon_jtag_uart_ioctl+0x7c>
81112abc:	e0bffc17 	ldw	r2,-16(fp)
81112ac0:	00000206 	br	81112acc <altera_avalon_jtag_uart_ioctl+0x84>
81112ac4:	00a00034 	movhi	r2,32768
81112ac8:	10bfff84 	addi	r2,r2,-2
81112acc:	e0fffd17 	ldw	r3,-12(fp)
81112ad0:	18800115 	stw	r2,4(r3)
      rc = 0;
81112ad4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
81112ad8:	00000f06 	br	81112b18 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
81112adc:	e0bffd17 	ldw	r2,-12(fp)
81112ae0:	10c00117 	ldw	r3,4(r2)
81112ae4:	00a00034 	movhi	r2,32768
81112ae8:	10bfffc4 	addi	r2,r2,-1
81112aec:	18800c26 	beq	r3,r2,81112b20 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
81112af0:	e0bffd17 	ldw	r2,-12(fp)
81112af4:	10c00917 	ldw	r3,36(r2)
81112af8:	e0bffd17 	ldw	r2,-12(fp)
81112afc:	10800117 	ldw	r2,4(r2)
81112b00:	1885803a 	cmpltu	r2,r3,r2
81112b04:	10c03fcc 	andi	r3,r2,255
81112b08:	e0bfff17 	ldw	r2,-4(fp)
81112b0c:	10c00015 	stw	r3,0(r2)
      rc = 0;
81112b10:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
81112b14:	00000206 	br	81112b20 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
81112b18:	0001883a 	nop
81112b1c:	00000106 	br	81112b24 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
81112b20:	0001883a 	nop

  default:
    break;
  }

  return rc;
81112b24:	e0bffb17 	ldw	r2,-20(fp)
}
81112b28:	e037883a 	mov	sp,fp
81112b2c:	df000017 	ldw	fp,0(sp)
81112b30:	dec00104 	addi	sp,sp,4
81112b34:	f800283a 	ret

81112b38 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
81112b38:	defff304 	addi	sp,sp,-52
81112b3c:	dfc00c15 	stw	ra,48(sp)
81112b40:	df000b15 	stw	fp,44(sp)
81112b44:	df000b04 	addi	fp,sp,44
81112b48:	e13ffc15 	stw	r4,-16(fp)
81112b4c:	e17ffd15 	stw	r5,-12(fp)
81112b50:	e1bffe15 	stw	r6,-8(fp)
81112b54:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
81112b58:	e0bffd17 	ldw	r2,-12(fp)
81112b5c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
81112b60:	00004706 	br	81112c80 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
81112b64:	e0bffc17 	ldw	r2,-16(fp)
81112b68:	10800a17 	ldw	r2,40(r2)
81112b6c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
81112b70:	e0bffc17 	ldw	r2,-16(fp)
81112b74:	10800b17 	ldw	r2,44(r2)
81112b78:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
81112b7c:	e0fff717 	ldw	r3,-36(fp)
81112b80:	e0bff817 	ldw	r2,-32(fp)
81112b84:	18800536 	bltu	r3,r2,81112b9c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
81112b88:	e0fff717 	ldw	r3,-36(fp)
81112b8c:	e0bff817 	ldw	r2,-32(fp)
81112b90:	1885c83a 	sub	r2,r3,r2
81112b94:	e0bff615 	stw	r2,-40(fp)
81112b98:	00000406 	br	81112bac <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
81112b9c:	00c20004 	movi	r3,2048
81112ba0:	e0bff817 	ldw	r2,-32(fp)
81112ba4:	1885c83a 	sub	r2,r3,r2
81112ba8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
81112bac:	e0bff617 	ldw	r2,-40(fp)
81112bb0:	10001e26 	beq	r2,zero,81112c2c <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
81112bb4:	e0fffe17 	ldw	r3,-8(fp)
81112bb8:	e0bff617 	ldw	r2,-40(fp)
81112bbc:	1880022e 	bgeu	r3,r2,81112bc8 <altera_avalon_jtag_uart_read+0x90>
        n = space;
81112bc0:	e0bffe17 	ldw	r2,-8(fp)
81112bc4:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
81112bc8:	e0bffc17 	ldw	r2,-16(fp)
81112bcc:	10c00e04 	addi	r3,r2,56
81112bd0:	e0bff817 	ldw	r2,-32(fp)
81112bd4:	1885883a 	add	r2,r3,r2
81112bd8:	e1bff617 	ldw	r6,-40(fp)
81112bdc:	100b883a 	mov	r5,r2
81112be0:	e13ff517 	ldw	r4,-44(fp)
81112be4:	11056440 	call	81105644 <memcpy>
      ptr   += n;
81112be8:	e0fff517 	ldw	r3,-44(fp)
81112bec:	e0bff617 	ldw	r2,-40(fp)
81112bf0:	1885883a 	add	r2,r3,r2
81112bf4:	e0bff515 	stw	r2,-44(fp)
      space -= n;
81112bf8:	e0fffe17 	ldw	r3,-8(fp)
81112bfc:	e0bff617 	ldw	r2,-40(fp)
81112c00:	1885c83a 	sub	r2,r3,r2
81112c04:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
81112c08:	e0fff817 	ldw	r3,-32(fp)
81112c0c:	e0bff617 	ldw	r2,-40(fp)
81112c10:	1885883a 	add	r2,r3,r2
81112c14:	10c1ffcc 	andi	r3,r2,2047
81112c18:	e0bffc17 	ldw	r2,-16(fp)
81112c1c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
81112c20:	e0bffe17 	ldw	r2,-8(fp)
81112c24:	00bfcf16 	blt	zero,r2,81112b64 <__reset+0xfb0f2b64>
81112c28:	00000106 	br	81112c30 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
81112c2c:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
81112c30:	e0fff517 	ldw	r3,-44(fp)
81112c34:	e0bffd17 	ldw	r2,-12(fp)
81112c38:	1880141e 	bne	r3,r2,81112c8c <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
81112c3c:	e0bfff17 	ldw	r2,-4(fp)
81112c40:	1090000c 	andi	r2,r2,16384
81112c44:	1000131e 	bne	r2,zero,81112c94 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
81112c48:	0001883a 	nop
81112c4c:	e0bffc17 	ldw	r2,-16(fp)
81112c50:	10c00a17 	ldw	r3,40(r2)
81112c54:	e0bff717 	ldw	r2,-36(fp)
81112c58:	1880051e 	bne	r3,r2,81112c70 <altera_avalon_jtag_uart_read+0x138>
81112c5c:	e0bffc17 	ldw	r2,-16(fp)
81112c60:	10c00917 	ldw	r3,36(r2)
81112c64:	e0bffc17 	ldw	r2,-16(fp)
81112c68:	10800117 	ldw	r2,4(r2)
81112c6c:	18bff736 	bltu	r3,r2,81112c4c <__reset+0xfb0f2c4c>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
81112c70:	e0bffc17 	ldw	r2,-16(fp)
81112c74:	10c00a17 	ldw	r3,40(r2)
81112c78:	e0bff717 	ldw	r2,-36(fp)
81112c7c:	18800726 	beq	r3,r2,81112c9c <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
81112c80:	e0bffe17 	ldw	r2,-8(fp)
81112c84:	00bfb716 	blt	zero,r2,81112b64 <__reset+0xfb0f2b64>
81112c88:	00000506 	br	81112ca0 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
81112c8c:	0001883a 	nop
81112c90:	00000306 	br	81112ca0 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
81112c94:	0001883a 	nop
81112c98:	00000106 	br	81112ca0 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
81112c9c:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
81112ca0:	e0fff517 	ldw	r3,-44(fp)
81112ca4:	e0bffd17 	ldw	r2,-12(fp)
81112ca8:	18801826 	beq	r3,r2,81112d0c <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81112cac:	0005303a 	rdctl	r2,status
81112cb0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81112cb4:	e0fffb17 	ldw	r3,-20(fp)
81112cb8:	00bfff84 	movi	r2,-2
81112cbc:	1884703a 	and	r2,r3,r2
81112cc0:	1001703a 	wrctl	status,r2
  
  return context;
81112cc4:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
81112cc8:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
81112ccc:	e0bffc17 	ldw	r2,-16(fp)
81112cd0:	10800817 	ldw	r2,32(r2)
81112cd4:	10c00054 	ori	r3,r2,1
81112cd8:	e0bffc17 	ldw	r2,-16(fp)
81112cdc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
81112ce0:	e0bffc17 	ldw	r2,-16(fp)
81112ce4:	10800017 	ldw	r2,0(r2)
81112ce8:	10800104 	addi	r2,r2,4
81112cec:	1007883a 	mov	r3,r2
81112cf0:	e0bffc17 	ldw	r2,-16(fp)
81112cf4:	10800817 	ldw	r2,32(r2)
81112cf8:	18800035 	stwio	r2,0(r3)
81112cfc:	e0bffa17 	ldw	r2,-24(fp)
81112d00:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81112d04:	e0bff917 	ldw	r2,-28(fp)
81112d08:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
81112d0c:	e0fff517 	ldw	r3,-44(fp)
81112d10:	e0bffd17 	ldw	r2,-12(fp)
81112d14:	18800426 	beq	r3,r2,81112d28 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
81112d18:	e0fff517 	ldw	r3,-44(fp)
81112d1c:	e0bffd17 	ldw	r2,-12(fp)
81112d20:	1885c83a 	sub	r2,r3,r2
81112d24:	00000606 	br	81112d40 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
81112d28:	e0bfff17 	ldw	r2,-4(fp)
81112d2c:	1090000c 	andi	r2,r2,16384
81112d30:	10000226 	beq	r2,zero,81112d3c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
81112d34:	00bffd44 	movi	r2,-11
81112d38:	00000106 	br	81112d40 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
81112d3c:	00bffec4 	movi	r2,-5
}
81112d40:	e037883a 	mov	sp,fp
81112d44:	dfc00117 	ldw	ra,4(sp)
81112d48:	df000017 	ldw	fp,0(sp)
81112d4c:	dec00204 	addi	sp,sp,8
81112d50:	f800283a 	ret

81112d54 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
81112d54:	defff304 	addi	sp,sp,-52
81112d58:	dfc00c15 	stw	ra,48(sp)
81112d5c:	df000b15 	stw	fp,44(sp)
81112d60:	df000b04 	addi	fp,sp,44
81112d64:	e13ffc15 	stw	r4,-16(fp)
81112d68:	e17ffd15 	stw	r5,-12(fp)
81112d6c:	e1bffe15 	stw	r6,-8(fp)
81112d70:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
81112d74:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
81112d78:	e0bffd17 	ldw	r2,-12(fp)
81112d7c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
81112d80:	00003706 	br	81112e60 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
81112d84:	e0bffc17 	ldw	r2,-16(fp)
81112d88:	10800c17 	ldw	r2,48(r2)
81112d8c:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
81112d90:	e0bffc17 	ldw	r2,-16(fp)
81112d94:	10800d17 	ldw	r2,52(r2)
81112d98:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
81112d9c:	e0fff917 	ldw	r3,-28(fp)
81112da0:	e0bff517 	ldw	r2,-44(fp)
81112da4:	1880062e 	bgeu	r3,r2,81112dc0 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
81112da8:	e0fff517 	ldw	r3,-44(fp)
81112dac:	e0bff917 	ldw	r2,-28(fp)
81112db0:	1885c83a 	sub	r2,r3,r2
81112db4:	10bfffc4 	addi	r2,r2,-1
81112db8:	e0bff615 	stw	r2,-40(fp)
81112dbc:	00000b06 	br	81112dec <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
81112dc0:	e0bff517 	ldw	r2,-44(fp)
81112dc4:	10000526 	beq	r2,zero,81112ddc <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
81112dc8:	00c20004 	movi	r3,2048
81112dcc:	e0bff917 	ldw	r2,-28(fp)
81112dd0:	1885c83a 	sub	r2,r3,r2
81112dd4:	e0bff615 	stw	r2,-40(fp)
81112dd8:	00000406 	br	81112dec <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
81112ddc:	00c1ffc4 	movi	r3,2047
81112de0:	e0bff917 	ldw	r2,-28(fp)
81112de4:	1885c83a 	sub	r2,r3,r2
81112de8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
81112dec:	e0bff617 	ldw	r2,-40(fp)
81112df0:	10001e26 	beq	r2,zero,81112e6c <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
81112df4:	e0fffe17 	ldw	r3,-8(fp)
81112df8:	e0bff617 	ldw	r2,-40(fp)
81112dfc:	1880022e 	bgeu	r3,r2,81112e08 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
81112e00:	e0bffe17 	ldw	r2,-8(fp)
81112e04:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
81112e08:	e0bffc17 	ldw	r2,-16(fp)
81112e0c:	10c20e04 	addi	r3,r2,2104
81112e10:	e0bff917 	ldw	r2,-28(fp)
81112e14:	1885883a 	add	r2,r3,r2
81112e18:	e1bff617 	ldw	r6,-40(fp)
81112e1c:	e17ffd17 	ldw	r5,-12(fp)
81112e20:	1009883a 	mov	r4,r2
81112e24:	11056440 	call	81105644 <memcpy>
      ptr   += n;
81112e28:	e0fffd17 	ldw	r3,-12(fp)
81112e2c:	e0bff617 	ldw	r2,-40(fp)
81112e30:	1885883a 	add	r2,r3,r2
81112e34:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
81112e38:	e0fffe17 	ldw	r3,-8(fp)
81112e3c:	e0bff617 	ldw	r2,-40(fp)
81112e40:	1885c83a 	sub	r2,r3,r2
81112e44:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
81112e48:	e0fff917 	ldw	r3,-28(fp)
81112e4c:	e0bff617 	ldw	r2,-40(fp)
81112e50:	1885883a 	add	r2,r3,r2
81112e54:	10c1ffcc 	andi	r3,r2,2047
81112e58:	e0bffc17 	ldw	r2,-16(fp)
81112e5c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
81112e60:	e0bffe17 	ldw	r2,-8(fp)
81112e64:	00bfc716 	blt	zero,r2,81112d84 <__reset+0xfb0f2d84>
81112e68:	00000106 	br	81112e70 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
81112e6c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81112e70:	0005303a 	rdctl	r2,status
81112e74:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81112e78:	e0fffb17 	ldw	r3,-20(fp)
81112e7c:	00bfff84 	movi	r2,-2
81112e80:	1884703a 	and	r2,r3,r2
81112e84:	1001703a 	wrctl	status,r2
  
  return context;
81112e88:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
81112e8c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
81112e90:	e0bffc17 	ldw	r2,-16(fp)
81112e94:	10800817 	ldw	r2,32(r2)
81112e98:	10c00094 	ori	r3,r2,2
81112e9c:	e0bffc17 	ldw	r2,-16(fp)
81112ea0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
81112ea4:	e0bffc17 	ldw	r2,-16(fp)
81112ea8:	10800017 	ldw	r2,0(r2)
81112eac:	10800104 	addi	r2,r2,4
81112eb0:	1007883a 	mov	r3,r2
81112eb4:	e0bffc17 	ldw	r2,-16(fp)
81112eb8:	10800817 	ldw	r2,32(r2)
81112ebc:	18800035 	stwio	r2,0(r3)
81112ec0:	e0bffa17 	ldw	r2,-24(fp)
81112ec4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81112ec8:	e0bff817 	ldw	r2,-32(fp)
81112ecc:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
81112ed0:	e0bffe17 	ldw	r2,-8(fp)
81112ed4:	0080100e 	bge	zero,r2,81112f18 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
81112ed8:	e0bfff17 	ldw	r2,-4(fp)
81112edc:	1090000c 	andi	r2,r2,16384
81112ee0:	1000101e 	bne	r2,zero,81112f24 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
81112ee4:	0001883a 	nop
81112ee8:	e0bffc17 	ldw	r2,-16(fp)
81112eec:	10c00d17 	ldw	r3,52(r2)
81112ef0:	e0bff517 	ldw	r2,-44(fp)
81112ef4:	1880051e 	bne	r3,r2,81112f0c <altera_avalon_jtag_uart_write+0x1b8>
81112ef8:	e0bffc17 	ldw	r2,-16(fp)
81112efc:	10c00917 	ldw	r3,36(r2)
81112f00:	e0bffc17 	ldw	r2,-16(fp)
81112f04:	10800117 	ldw	r2,4(r2)
81112f08:	18bff736 	bltu	r3,r2,81112ee8 <__reset+0xfb0f2ee8>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
81112f0c:	e0bffc17 	ldw	r2,-16(fp)
81112f10:	10800917 	ldw	r2,36(r2)
81112f14:	1000051e 	bne	r2,zero,81112f2c <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
81112f18:	e0bffe17 	ldw	r2,-8(fp)
81112f1c:	00bfd016 	blt	zero,r2,81112e60 <__reset+0xfb0f2e60>
81112f20:	00000306 	br	81112f30 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
81112f24:	0001883a 	nop
81112f28:	00000106 	br	81112f30 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
81112f2c:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
81112f30:	e0fffd17 	ldw	r3,-12(fp)
81112f34:	e0bff717 	ldw	r2,-36(fp)
81112f38:	18800426 	beq	r3,r2,81112f4c <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
81112f3c:	e0fffd17 	ldw	r3,-12(fp)
81112f40:	e0bff717 	ldw	r2,-36(fp)
81112f44:	1885c83a 	sub	r2,r3,r2
81112f48:	00000606 	br	81112f64 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
81112f4c:	e0bfff17 	ldw	r2,-4(fp)
81112f50:	1090000c 	andi	r2,r2,16384
81112f54:	10000226 	beq	r2,zero,81112f60 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
81112f58:	00bffd44 	movi	r2,-11
81112f5c:	00000106 	br	81112f64 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
81112f60:	00bffec4 	movi	r2,-5
}
81112f64:	e037883a 	mov	sp,fp
81112f68:	dfc00117 	ldw	ra,4(sp)
81112f6c:	df000017 	ldw	fp,0(sp)
81112f70:	dec00204 	addi	sp,sp,8
81112f74:	f800283a 	ret

81112f78 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
81112f78:	defffe04 	addi	sp,sp,-8
81112f7c:	dfc00115 	stw	ra,4(sp)
81112f80:	df000015 	stw	fp,0(sp)
81112f84:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
81112f88:	d0a00b17 	ldw	r2,-32724(gp)
81112f8c:	10000326 	beq	r2,zero,81112f9c <alt_get_errno+0x24>
81112f90:	d0a00b17 	ldw	r2,-32724(gp)
81112f94:	103ee83a 	callr	r2
81112f98:	00000106 	br	81112fa0 <alt_get_errno+0x28>
81112f9c:	d0a01e04 	addi	r2,gp,-32648
}
81112fa0:	e037883a 	mov	sp,fp
81112fa4:	dfc00117 	ldw	ra,4(sp)
81112fa8:	df000017 	ldw	fp,0(sp)
81112fac:	dec00204 	addi	sp,sp,8
81112fb0:	f800283a 	ret

81112fb4 <alt_avalon_sgdma_do_async_transfer>:
 * - 0 for success, or various errors defined in <errno.h>
 */
int alt_avalon_sgdma_do_async_transfer(
  alt_sgdma_dev *dev,
  alt_sgdma_descriptor *desc)
{
81112fb4:	defffc04 	addi	sp,sp,-16
81112fb8:	df000315 	stw	fp,12(sp)
81112fbc:	df000304 	addi	fp,sp,12
81112fc0:	e13ffe15 	stw	r4,-8(fp)
81112fc4:	e17fff15 	stw	r5,-4(fp)
  alt_u32 control;

  /* Return with error immediately if controller is busy */
  if( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
81112fc8:	e0bffe17 	ldw	r2,-8(fp)
81112fcc:	10800317 	ldw	r2,12(r2)
81112fd0:	10800037 	ldwio	r2,0(r2)
81112fd4:	1080040c 	andi	r2,r2,16
81112fd8:	10000226 	beq	r2,zero,81112fe4 <alt_avalon_sgdma_do_async_transfer+0x30>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) ) {
    return -EBUSY;
81112fdc:	00bffc04 	movi	r2,-16
81112fe0:	00003906 	br	811130c8 <alt_avalon_sgdma_do_async_transfer+0x114>
  }

  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
81112fe4:	e0bffe17 	ldw	r2,-8(fp)
81112fe8:	10800317 	ldw	r2,12(r2)
81112fec:	10800404 	addi	r2,r2,16
81112ff0:	e0fffe17 	ldw	r3,-8(fp)
81112ff4:	18c00317 	ldw	r3,12(r3)
81112ff8:	18c00404 	addi	r3,r3,16
81112ffc:	19000037 	ldwio	r4,0(r3)
81113000:	00fff7c4 	movi	r3,-33
81113004:	20c6703a 	and	r3,r4,r3
81113008:	10c00035 	stwio	r3,0(r2)

  /*
   * Clear any (previous) status register information
   * that might occlude our error checking later.
   */
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
8111300c:	e0bffe17 	ldw	r2,-8(fp)
81113010:	10800317 	ldw	r2,12(r2)
81113014:	00c03fc4 	movi	r3,255
81113018:	10c00035 	stwio	r3,0(r2)

  /* Point the controller at the descriptor */
  IOWR_ALTERA_AVALON_SGDMA_NEXT_DESC_POINTER(dev->base, (alt_u32) desc);
8111301c:	e0bffe17 	ldw	r2,-8(fp)
81113020:	10800317 	ldw	r2,12(r2)
81113024:	10800804 	addi	r2,r2,32
81113028:	e0ffff17 	ldw	r3,-4(fp)
8111302c:	10c00035 	stwio	r3,0(r2)
   *  - Stop on an error with any particular descriptor
   *  - Include any control register bits registered with along with
   *    the callback routine (effectively, interrupts are controlled
   *    via the control bits set during callback-register time).
   */
  if(dev->callback) {
81113030:	e0bffe17 	ldw	r2,-8(fp)
81113034:	10800917 	ldw	r2,36(r2)
81113038:	10001126 	beq	r2,zero,81113080 <alt_avalon_sgdma_do_async_transfer+0xcc>
    control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
8111303c:	e0bffe17 	ldw	r2,-8(fp)
81113040:	10800317 	ldw	r2,12(r2)
81113044:	10800404 	addi	r2,r2,16
81113048:	10800037 	ldwio	r2,0(r2)
8111304c:	e0bffd15 	stw	r2,-12(fp)

    control |= (dev->chain_control                          |
81113050:	e0bffe17 	ldw	r2,-8(fp)
81113054:	10c00b17 	ldw	r3,44(r2)
81113058:	e0bffd17 	ldw	r2,-12(fp)
8111305c:	1884b03a 	or	r2,r3,r2
81113060:	10801814 	ori	r2,r2,96
81113064:	e0bffd15 	stw	r2,-12(fp)
                ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK         |
                ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK  );

    IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
81113068:	e0bffe17 	ldw	r2,-8(fp)
8111306c:	10800317 	ldw	r2,12(r2)
81113070:	10800404 	addi	r2,r2,16
81113074:	e0fffd17 	ldw	r3,-12(fp)
81113078:	10c00035 	stwio	r3,0(r2)
8111307c:	00001106 	br	811130c4 <alt_avalon_sgdma_do_async_transfer+0x110>
   *   - Run
   *   - Stop on an error with any particular descriptor
   *   - Disable interrupt generation
   */
  else {
    control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
81113080:	e0bffe17 	ldw	r2,-8(fp)
81113084:	10800317 	ldw	r2,12(r2)
81113088:	10800404 	addi	r2,r2,16
8111308c:	10800037 	ldwio	r2,0(r2)
81113090:	e0bffd15 	stw	r2,-12(fp)

    control |= (ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK         |
81113094:	e0bffd17 	ldw	r2,-12(fp)
81113098:	10801814 	ori	r2,r2,96
8111309c:	e0bffd15 	stw	r2,-12(fp)
                ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK );
    control &= ~ALTERA_AVALON_SGDMA_CONTROL_IE_GLOBAL_MSK;
811130a0:	e0fffd17 	ldw	r3,-12(fp)
811130a4:	00bffbc4 	movi	r2,-17
811130a8:	1884703a 	and	r2,r3,r2
811130ac:	e0bffd15 	stw	r2,-12(fp)

    IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
811130b0:	e0bffe17 	ldw	r2,-8(fp)
811130b4:	10800317 	ldw	r2,12(r2)
811130b8:	10800404 	addi	r2,r2,16
811130bc:	e0fffd17 	ldw	r3,-12(fp)
811130c0:	10c00035 	stwio	r3,0(r2)

  /*
   * Error detection/handling should be performed at the application
   * or callback level as appropriate.
   */
  return 0;
811130c4:	0005883a 	mov	r2,zero
}
811130c8:	e037883a 	mov	sp,fp
811130cc:	df000017 	ldw	fp,0(sp)
811130d0:	dec00104 	addi	sp,sp,4
811130d4:	f800283a 	ret

811130d8 <alt_avalon_sgdma_do_sync_transfer>:
 * - status: Content of SGDMA status register.
 */
alt_u8 alt_avalon_sgdma_do_sync_transfer(
  alt_sgdma_dev *dev,
  alt_sgdma_descriptor *desc)
{
811130d8:	defffc04 	addi	sp,sp,-16
811130dc:	df000315 	stw	fp,12(sp)
811130e0:	df000304 	addi	fp,sp,12
811130e4:	e13ffe15 	stw	r4,-8(fp)
811130e8:	e17fff15 	stw	r5,-4(fp)
  alt_u8 status;

  /* Wait for any pending transfers to complete */
  while ( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
811130ec:	0001883a 	nop
811130f0:	e0bffe17 	ldw	r2,-8(fp)
811130f4:	10800317 	ldw	r2,12(r2)
811130f8:	10800037 	ldwio	r2,0(r2)
811130fc:	1080040c 	andi	r2,r2,16
81113100:	103ffb1e 	bne	r2,zero,811130f0 <__reset+0xfb0f30f0>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) );


  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
81113104:	e0bffe17 	ldw	r2,-8(fp)
81113108:	10800317 	ldw	r2,12(r2)
8111310c:	10800404 	addi	r2,r2,16
81113110:	e0fffe17 	ldw	r3,-8(fp)
81113114:	18c00317 	ldw	r3,12(r3)
81113118:	18c00404 	addi	r3,r3,16
8111311c:	19000037 	ldwio	r4,0(r3)
81113120:	00fff7c4 	movi	r3,-33
81113124:	20c6703a 	and	r3,r4,r3
81113128:	10c00035 	stwio	r3,0(r2)

  /*
   * Clear any (previous) status register information
   * that might occlude our error checking later.
   */
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
8111312c:	e0bffe17 	ldw	r2,-8(fp)
81113130:	10800317 	ldw	r2,12(r2)
81113134:	00c03fc4 	movi	r3,255
81113138:	10c00035 	stwio	r3,0(r2)

  /* Point the controller at the descriptor */
  IOWR_ALTERA_AVALON_SGDMA_NEXT_DESC_POINTER(dev->base, (alt_u32) desc);
8111313c:	e0bffe17 	ldw	r2,-8(fp)
81113140:	10800317 	ldw	r2,12(r2)
81113144:	10800804 	addi	r2,r2,32
81113148:	e0ffff17 	ldw	r3,-4(fp)
8111314c:	10c00035 	stwio	r3,0(r2)
   * Set up SGDMA controller to:
   * - Disable interrupt generation
   * - Run once a valid descriptor is written to controller
   * - Stop on an error with any particular descriptor
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
81113150:	e0bffe17 	ldw	r2,-8(fp)
81113154:	10800317 	ldw	r2,12(r2)
81113158:	10800404 	addi	r2,r2,16
8111315c:	e0fffe17 	ldw	r3,-8(fp)
81113160:	18c00317 	ldw	r3,12(r3)
81113164:	18c00404 	addi	r3,r3,16
81113168:	18c00037 	ldwio	r3,0(r3)
8111316c:	18c01814 	ori	r3,r3,96
81113170:	10c00035 	stwio	r3,0(r2)
    (ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK |
     ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK | 
     IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base)) );

  /* Wait for the descriptor (chain) to complete */
  while ( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
81113174:	0001883a 	nop
81113178:	e0bffe17 	ldw	r2,-8(fp)
8111317c:	10800317 	ldw	r2,12(r2)
81113180:	10800037 	ldwio	r2,0(r2)
81113184:	1080040c 	andi	r2,r2,16
81113188:	103ffb1e 	bne	r2,zero,81113178 <__reset+0xfb0f3178>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) );

  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 
8111318c:	e0bffe17 	ldw	r2,-8(fp)
81113190:	10800317 	ldw	r2,12(r2)
81113194:	10800404 	addi	r2,r2,16
81113198:	e0fffe17 	ldw	r3,-8(fp)
8111319c:	18c00317 	ldw	r3,12(r3)
811131a0:	18c00404 	addi	r3,r3,16
811131a4:	19000037 	ldwio	r4,0(r3)
811131a8:	00fff7c4 	movi	r3,-33
811131ac:	20c6703a 	and	r3,r4,r3
811131b0:	10c00035 	stwio	r3,0(r2)
    (IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base) &
     ~ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK) );

  /* Get & clear status register contents */
  status = IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base);
811131b4:	e0bffe17 	ldw	r2,-8(fp)
811131b8:	10800317 	ldw	r2,12(r2)
811131bc:	10800037 	ldwio	r2,0(r2)
811131c0:	e0bffd05 	stb	r2,-12(fp)
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
811131c4:	e0bffe17 	ldw	r2,-8(fp)
811131c8:	10800317 	ldw	r2,12(r2)
811131cc:	00c03fc4 	movi	r3,255
811131d0:	10c00035 	stwio	r3,0(r2)

  return status;
811131d4:	e0bffd03 	ldbu	r2,-12(fp)
}
811131d8:	e037883a 	mov	sp,fp
811131dc:	df000017 	ldw	fp,0(sp)
811131e0:	dec00104 	addi	sp,sp,4
811131e4:	f800283a 	ret

811131e8 <alt_avalon_sgdma_construct_mem_to_mem_desc>:
  alt_u32              *read_addr,
  alt_u32              *write_addr,
  alt_u16               length,
  int                   read_fixed,
  int                   write_fixed)
{
811131e8:	defff404 	addi	sp,sp,-48
811131ec:	dfc00b15 	stw	ra,44(sp)
811131f0:	df000a15 	stw	fp,40(sp)
811131f4:	df000a04 	addi	fp,sp,40
811131f8:	e13ffb15 	stw	r4,-20(fp)
811131fc:	e17ffc15 	stw	r5,-16(fp)
81113200:	e1bffd15 	stw	r6,-12(fp)
81113204:	e1fffe15 	stw	r7,-8(fp)
81113208:	e0800217 	ldw	r2,8(fp)
8111320c:	e0bfff0d 	sth	r2,-4(fp)
  alt_avalon_sgdma_construct_mem_to_mem_desc_burst(desc, next, read_addr, 
81113210:	e0bfff0b 	ldhu	r2,-4(fp)
81113214:	d8000415 	stw	zero,16(sp)
81113218:	d8000315 	stw	zero,12(sp)
8111321c:	e0c00417 	ldw	r3,16(fp)
81113220:	d8c00215 	stw	r3,8(sp)
81113224:	e0c00317 	ldw	r3,12(fp)
81113228:	d8c00115 	stw	r3,4(sp)
8111322c:	d8800015 	stw	r2,0(sp)
81113230:	e1fffe17 	ldw	r7,-8(fp)
81113234:	e1bffd17 	ldw	r6,-12(fp)
81113238:	e17ffc17 	ldw	r5,-16(fp)
8111323c:	e13ffb17 	ldw	r4,-20(fp)
81113240:	111325c0 	call	8111325c <alt_avalon_sgdma_construct_mem_to_mem_desc_burst>
    write_addr, length, read_fixed, write_fixed, 0, 0);
}
81113244:	0001883a 	nop
81113248:	e037883a 	mov	sp,fp
8111324c:	dfc00117 	ldw	ra,4(sp)
81113250:	df000017 	ldw	fp,0(sp)
81113254:	dec00204 	addi	sp,sp,8
81113258:	f800283a 	ret

8111325c <alt_avalon_sgdma_construct_mem_to_mem_desc_burst>:
  alt_u16               length,
  int                   read_fixed,
  int                   write_fixed,
  int                   read_burst,
  int                   write_burst)
{
8111325c:	defff204 	addi	sp,sp,-56
81113260:	dfc00d15 	stw	ra,52(sp)
81113264:	df000c15 	stw	fp,48(sp)
81113268:	df000c04 	addi	fp,sp,48
8111326c:	e13ffb15 	stw	r4,-20(fp)
81113270:	e17ffc15 	stw	r5,-16(fp)
81113274:	e1bffd15 	stw	r6,-12(fp)
81113278:	e1fffe15 	stw	r7,-8(fp)
8111327c:	e0800217 	ldw	r2,8(fp)
81113280:	e0bfff0d 	sth	r2,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(
81113284:	e0bfff0b 	ldhu	r2,-4(fp)
81113288:	d8000615 	stw	zero,24(sp)
8111328c:	e0c00617 	ldw	r3,24(fp)
81113290:	d8c00515 	stw	r3,20(sp)
81113294:	e0c00517 	ldw	r3,20(fp)
81113298:	d8c00415 	stw	r3,16(sp)
8111329c:	e0c00417 	ldw	r3,16(fp)
811132a0:	d8c00315 	stw	r3,12(sp)
811132a4:	e0c00317 	ldw	r3,12(fp)
811132a8:	d8c00215 	stw	r3,8(sp)
811132ac:	d8000115 	stw	zero,4(sp)
811132b0:	d8800015 	stw	r2,0(sp)
811132b4:	e1fffe17 	ldw	r7,-8(fp)
811132b8:	e1bffd17 	ldw	r6,-12(fp)
811132bc:	e17ffc17 	ldw	r5,-16(fp)
811132c0:	e13ffb17 	ldw	r4,-20(fp)
811132c4:	11137f00 	call	811137f0 <alt_avalon_sgdma_construct_descriptor_burst>
    read_fixed,
    write_fixed,
    read_burst,
    write_burst,
    (alt_u8) 0x0);  // Atlantic channel: N/A in mem-to-mem mode
}
811132c8:	0001883a 	nop
811132cc:	e037883a 	mov	sp,fp
811132d0:	dfc00117 	ldw	ra,4(sp)
811132d4:	df000017 	ldw	fp,0(sp)
811132d8:	dec00204 	addi	sp,sp,8
811132dc:	f800283a 	ret

811132e0 <alt_avalon_sgdma_construct_stream_to_mem_desc>:
  alt_sgdma_descriptor *desc,
  alt_sgdma_descriptor *next,
  alt_u32              *write_addr,
  alt_u16               length_or_eop,
  int                   write_fixed)
{
811132e0:	defff804 	addi	sp,sp,-32
811132e4:	dfc00715 	stw	ra,28(sp)
811132e8:	df000615 	stw	fp,24(sp)
811132ec:	df000604 	addi	fp,sp,24
811132f0:	e13ffc15 	stw	r4,-16(fp)
811132f4:	e17ffd15 	stw	r5,-12(fp)
811132f8:	e1bffe15 	stw	r6,-8(fp)
811132fc:	3805883a 	mov	r2,r7
81113300:	e0bfff0d 	sth	r2,-4(fp)
  alt_avalon_sgdma_construct_stream_to_mem_desc_burst(desc, next, write_addr, 
81113304:	e0ffff0b 	ldhu	r3,-4(fp)
81113308:	d8000115 	stw	zero,4(sp)
8111330c:	e0800217 	ldw	r2,8(fp)
81113310:	d8800015 	stw	r2,0(sp)
81113314:	180f883a 	mov	r7,r3
81113318:	e1bffe17 	ldw	r6,-8(fp)
8111331c:	e17ffd17 	ldw	r5,-12(fp)
81113320:	e13ffc17 	ldw	r4,-16(fp)
81113324:	11133400 	call	81113340 <alt_avalon_sgdma_construct_stream_to_mem_desc_burst>
    length_or_eop, write_fixed, 0);
}
81113328:	0001883a 	nop
8111332c:	e037883a 	mov	sp,fp
81113330:	dfc00117 	ldw	ra,4(sp)
81113334:	df000017 	ldw	fp,0(sp)
81113338:	dec00204 	addi	sp,sp,8
8111333c:	f800283a 	ret

81113340 <alt_avalon_sgdma_construct_stream_to_mem_desc_burst>:
  alt_sgdma_descriptor *next,
  alt_u32              *write_addr,
  alt_u16               length_or_eop,
  int                   write_fixed,
  int                   write_burst)
{
81113340:	defff304 	addi	sp,sp,-52
81113344:	dfc00c15 	stw	ra,48(sp)
81113348:	df000b15 	stw	fp,44(sp)
8111334c:	df000b04 	addi	fp,sp,44
81113350:	e13ffc15 	stw	r4,-16(fp)
81113354:	e17ffd15 	stw	r5,-12(fp)
81113358:	e1bffe15 	stw	r6,-8(fp)
8111335c:	3805883a 	mov	r2,r7
81113360:	e0bfff0d 	sth	r2,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(
81113364:	e0bfff0b 	ldhu	r2,-4(fp)
81113368:	d8000615 	stw	zero,24(sp)
8111336c:	e0c00317 	ldw	r3,12(fp)
81113370:	d8c00515 	stw	r3,20(sp)
81113374:	d8000415 	stw	zero,16(sp)
81113378:	e0c00217 	ldw	r3,8(fp)
8111337c:	d8c00315 	stw	r3,12(sp)
81113380:	d8000215 	stw	zero,8(sp)
81113384:	d8000115 	stw	zero,4(sp)
81113388:	d8800015 	stw	r2,0(sp)
8111338c:	e1fffe17 	ldw	r7,-8(fp)
81113390:	000d883a 	mov	r6,zero
81113394:	e17ffd17 	ldw	r5,-12(fp)
81113398:	e13ffc17 	ldw	r4,-16(fp)
8111339c:	11137f00 	call	811137f0 <alt_avalon_sgdma_construct_descriptor_burst>
    0x0,            // Read fixed: N/A in stream-to-mem mode
    write_fixed,
    0,              // Read_burst : N/A in stream-to-mem mode
    write_burst,
    (alt_u8) 0x0);  // Atlantic channel: N/A in stream-to-mem mode
}
811133a0:	0001883a 	nop
811133a4:	e037883a 	mov	sp,fp
811133a8:	dfc00117 	ldw	ra,4(sp)
811133ac:	df000017 	ldw	fp,0(sp)
811133b0:	dec00204 	addi	sp,sp,8
811133b4:	f800283a 	ret

811133b8 <alt_avalon_sgdma_construct_mem_to_stream_desc>:
  alt_u16               length,
  int                   read_fixed,
  int                   generate_sop,
  int                   generate_eop,
  alt_u8                atlantic_channel)
{
811133b8:	defff404 	addi	sp,sp,-48
811133bc:	dfc00b15 	stw	ra,44(sp)
811133c0:	df000a15 	stw	fp,40(sp)
811133c4:	df000a04 	addi	fp,sp,40
811133c8:	e13ffb15 	stw	r4,-20(fp)
811133cc:	e17ffc15 	stw	r5,-16(fp)
811133d0:	e1bffd15 	stw	r6,-12(fp)
811133d4:	3807883a 	mov	r3,r7
811133d8:	e0800517 	ldw	r2,20(fp)
811133dc:	e0fffe0d 	sth	r3,-8(fp)
811133e0:	e0bfff05 	stb	r2,-4(fp)
  alt_avalon_sgdma_construct_mem_to_stream_desc_burst(desc, next, read_addr, 
811133e4:	e0fffe0b 	ldhu	r3,-8(fp)
811133e8:	e0bfff03 	ldbu	r2,-4(fp)
811133ec:	d8800415 	stw	r2,16(sp)
811133f0:	d8000315 	stw	zero,12(sp)
811133f4:	e0800417 	ldw	r2,16(fp)
811133f8:	d8800215 	stw	r2,8(sp)
811133fc:	e0800317 	ldw	r2,12(fp)
81113400:	d8800115 	stw	r2,4(sp)
81113404:	e0800217 	ldw	r2,8(fp)
81113408:	d8800015 	stw	r2,0(sp)
8111340c:	180f883a 	mov	r7,r3
81113410:	e1bffd17 	ldw	r6,-12(fp)
81113414:	e17ffc17 	ldw	r5,-16(fp)
81113418:	e13ffb17 	ldw	r4,-20(fp)
8111341c:	11134380 	call	81113438 <alt_avalon_sgdma_construct_mem_to_stream_desc_burst>
    length, read_fixed, generate_sop, generate_eop, 0, atlantic_channel);

}
81113420:	0001883a 	nop
81113424:	e037883a 	mov	sp,fp
81113428:	dfc00117 	ldw	ra,4(sp)
8111342c:	df000017 	ldw	fp,0(sp)
81113430:	dec00204 	addi	sp,sp,8
81113434:	f800283a 	ret

81113438 <alt_avalon_sgdma_construct_mem_to_stream_desc_burst>:
  int                   read_fixed,
  int                   generate_sop,
  int                   generate_eop,
  int                   read_burst,
  alt_u8                atlantic_channel)
{
81113438:	defff204 	addi	sp,sp,-56
8111343c:	dfc00d15 	stw	ra,52(sp)
81113440:	df000c15 	stw	fp,48(sp)
81113444:	df000c04 	addi	fp,sp,48
81113448:	e13ffb15 	stw	r4,-20(fp)
8111344c:	e17ffc15 	stw	r5,-16(fp)
81113450:	e1bffd15 	stw	r6,-12(fp)
81113454:	3807883a 	mov	r3,r7
81113458:	e0800617 	ldw	r2,24(fp)
8111345c:	e0fffe0d 	sth	r3,-8(fp)
81113460:	e0bfff05 	stb	r2,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(
81113464:	e0bffe0b 	ldhu	r2,-8(fp)
81113468:	e0ffff03 	ldbu	r3,-4(fp)
8111346c:	d8c00615 	stw	r3,24(sp)
81113470:	d8000515 	stw	zero,20(sp)
81113474:	e0c00517 	ldw	r3,20(fp)
81113478:	d8c00415 	stw	r3,16(sp)
8111347c:	e0c00317 	ldw	r3,12(fp)
81113480:	d8c00315 	stw	r3,12(sp)
81113484:	e0c00217 	ldw	r3,8(fp)
81113488:	d8c00215 	stw	r3,8(sp)
8111348c:	e0c00417 	ldw	r3,16(fp)
81113490:	d8c00115 	stw	r3,4(sp)
81113494:	d8800015 	stw	r2,0(sp)
81113498:	000f883a 	mov	r7,zero
8111349c:	e1bffd17 	ldw	r6,-12(fp)
811134a0:	e17ffc17 	ldw	r5,-16(fp)
811134a4:	e13ffb17 	ldw	r4,-20(fp)
811134a8:	11137f00 	call	811137f0 <alt_avalon_sgdma_construct_descriptor_burst>
    read_fixed,
    generate_sop,
    read_burst,
    0,                 // Write_burst : N/A in mem-to-stream mode
    atlantic_channel);
}
811134ac:	0001883a 	nop
811134b0:	e037883a 	mov	sp,fp
811134b4:	dfc00117 	ldw	ra,4(sp)
811134b8:	df000017 	ldw	fp,0(sp)
811134bc:	dec00204 	addi	sp,sp,8
811134c0:	f800283a 	ret

811134c4 <alt_avalon_sgdma_register_callback>:
void alt_avalon_sgdma_register_callback(
  alt_sgdma_dev *dev,
  alt_avalon_sgdma_callback callback,
  alt_u32 chain_control,
  void *context)
{
811134c4:	defffb04 	addi	sp,sp,-20
811134c8:	df000415 	stw	fp,16(sp)
811134cc:	df000404 	addi	fp,sp,16
811134d0:	e13ffc15 	stw	r4,-16(fp)
811134d4:	e17ffd15 	stw	r5,-12(fp)
811134d8:	e1bffe15 	stw	r6,-8(fp)
811134dc:	e1ffff15 	stw	r7,-4(fp)
  dev->callback         = callback;
811134e0:	e0bffc17 	ldw	r2,-16(fp)
811134e4:	e0fffd17 	ldw	r3,-12(fp)
811134e8:	10c00915 	stw	r3,36(r2)
  dev->callback_context = context;
811134ec:	e0bffc17 	ldw	r2,-16(fp)
811134f0:	e0ffff17 	ldw	r3,-4(fp)
811134f4:	10c00a15 	stw	r3,40(r2)
  dev->chain_control    = chain_control;
811134f8:	e0bffc17 	ldw	r2,-16(fp)
811134fc:	e0fffe17 	ldw	r3,-8(fp)
81113500:	10c00b15 	stw	r3,44(r2)
}
81113504:	0001883a 	nop
81113508:	e037883a 	mov	sp,fp
8111350c:	df000017 	ldw	fp,0(sp)
81113510:	dec00104 	addi	sp,sp,4
81113514:	f800283a 	ret

81113518 <alt_avalon_sgdma_start>:
 *
 * Arguments:
 * - *dev: Pointer to SGDMA device (instance) struct.
 */
void alt_avalon_sgdma_start(alt_sgdma_dev *dev)
{
81113518:	defffd04 	addi	sp,sp,-12
8111351c:	df000215 	stw	fp,8(sp)
81113520:	df000204 	addi	fp,sp,8
81113524:	e13fff15 	stw	r4,-4(fp)
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
81113528:	e0bfff17 	ldw	r2,-4(fp)
8111352c:	10800317 	ldw	r2,12(r2)
81113530:	10800404 	addi	r2,r2,16
81113534:	10800037 	ldwio	r2,0(r2)
81113538:	e0bffe15 	stw	r2,-8(fp)
  control |= ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK;
8111353c:	e0bffe17 	ldw	r2,-8(fp)
81113540:	10800814 	ori	r2,r2,32
81113544:	e0bffe15 	stw	r2,-8(fp)
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
81113548:	e0bfff17 	ldw	r2,-4(fp)
8111354c:	10800317 	ldw	r2,12(r2)
81113550:	10800404 	addi	r2,r2,16
81113554:	e0fffe17 	ldw	r3,-8(fp)
81113558:	10c00035 	stwio	r3,0(r2)
}
8111355c:	0001883a 	nop
81113560:	e037883a 	mov	sp,fp
81113564:	df000017 	ldw	fp,0(sp)
81113568:	dec00104 	addi	sp,sp,4
8111356c:	f800283a 	ret

81113570 <alt_avalon_sgdma_stop>:
 *
 * Arguments:
 * - *dev: Pointer to SGDMA device (instance) struct
 */
void alt_avalon_sgdma_stop(alt_sgdma_dev *dev)
{
81113570:	defffd04 	addi	sp,sp,-12
81113574:	df000215 	stw	fp,8(sp)
81113578:	df000204 	addi	fp,sp,8
8111357c:	e13fff15 	stw	r4,-4(fp)
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
81113580:	e0bfff17 	ldw	r2,-4(fp)
81113584:	10800317 	ldw	r2,12(r2)
81113588:	10800404 	addi	r2,r2,16
8111358c:	10800037 	ldwio	r2,0(r2)
81113590:	e0bffe15 	stw	r2,-8(fp)
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK;
81113594:	e0fffe17 	ldw	r3,-8(fp)
81113598:	00bff7c4 	movi	r2,-33
8111359c:	1884703a 	and	r2,r3,r2
811135a0:	e0bffe15 	stw	r2,-8(fp)
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
811135a4:	e0bfff17 	ldw	r2,-4(fp)
811135a8:	10800317 	ldw	r2,12(r2)
811135ac:	10800404 	addi	r2,r2,16
811135b0:	e0fffe17 	ldw	r3,-8(fp)
811135b4:	10c00035 	stwio	r3,0(r2)
}
811135b8:	0001883a 	nop
811135bc:	e037883a 	mov	sp,fp
811135c0:	df000017 	ldw	fp,0(sp)
811135c4:	dec00104 	addi	sp,sp,4
811135c8:	f800283a 	ret

811135cc <alt_avalon_sgdma_check_descriptor_status>:
 * - 0 if the descriptor is error-free, not "owned by hardware", or
 *   a previously requested transfer has appeared to have completed
 *   normally. Or, various error conditions defined in <errno.h>
 */
int alt_avalon_sgdma_check_descriptor_status(alt_sgdma_descriptor *desc)
{
811135cc:	defffe04 	addi	sp,sp,-8
811135d0:	df000115 	stw	fp,4(sp)
811135d4:	df000104 	addi	fp,sp,4
811135d8:	e13fff15 	stw	r4,-4(fp)
  /* Errors take precedence */
  if( IORD_8DIRECT(&desc->status, 0) &
811135dc:	e0bfff17 	ldw	r2,-4(fp)
811135e0:	10800784 	addi	r2,r2,30
811135e4:	10800023 	ldbuio	r2,0(r2)
811135e8:	10803fcc 	andi	r2,r2,255
811135ec:	10801fcc 	andi	r2,r2,127
811135f0:	10000226 	beq	r2,zero,811135fc <alt_avalon_sgdma_check_descriptor_status+0x30>
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_OVERFLOW_MSK |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_SYNC_MSK     |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_UEOP_MSK     |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_MEOP_MSK     |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_MSOP_MSK ) ) {
    return -EIO;
811135f4:	00bffec4 	movi	r2,-5
811135f8:	00000906 	br	81113620 <alt_avalon_sgdma_check_descriptor_status+0x54>
  }

  if( IORD_8DIRECT(&desc->control, 0) &
811135fc:	e0bfff17 	ldw	r2,-4(fp)
81113600:	108007c4 	addi	r2,r2,31
81113604:	10800023 	ldbuio	r2,0(r2)
81113608:	10803fcc 	andi	r2,r2,255
8111360c:	1080200c 	andi	r2,r2,128
81113610:	10000226 	beq	r2,zero,8111361c <alt_avalon_sgdma_check_descriptor_status+0x50>
      ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_OWNED_BY_HW_MSK) {
    return -EINPROGRESS;
81113614:	00bfe244 	movi	r2,-119
81113618:	00000106 	br	81113620 <alt_avalon_sgdma_check_descriptor_status+0x54>
  }

    return 0;
8111361c:	0005883a 	mov	r2,zero
}
81113620:	e037883a 	mov	sp,fp
81113624:	df000017 	ldw	fp,0(sp)
81113628:	dec00104 	addi	sp,sp,4
8111362c:	f800283a 	ret

81113630 <alt_avalon_sgdma_open>:
 * Returns:
 * - Pointer to SGDMA device instance struct, or null if the device
 *   could not be opened.
 */
alt_sgdma_dev* alt_avalon_sgdma_open (const char* name)
{
81113630:	defffc04 	addi	sp,sp,-16
81113634:	dfc00315 	stw	ra,12(sp)
81113638:	df000215 	stw	fp,8(sp)
8111363c:	df000204 	addi	fp,sp,8
81113640:	e13fff15 	stw	r4,-4(fp)
  alt_sgdma_dev* dev;

  dev = (alt_sgdma_dev*) alt_find_dev (name, &alt_sgdma_list);
81113644:	d1600f04 	addi	r5,gp,-32708
81113648:	e13fff17 	ldw	r4,-4(fp)
8111364c:	11160980 	call	81116098 <alt_find_dev>
81113650:	e0bffe15 	stw	r2,-8(fp)

  if (NULL == dev) {
81113654:	e0bffe17 	ldw	r2,-8(fp)
81113658:	1000041e 	bne	r2,zero,8111366c <alt_avalon_sgdma_open+0x3c>
    ALT_ERRNO = ENODEV;
8111365c:	1112f780 	call	81112f78 <alt_get_errno>
81113660:	1007883a 	mov	r3,r2
81113664:	008004c4 	movi	r2,19
81113668:	18800015 	stw	r2,0(r3)
  }

  return dev;
8111366c:	e0bffe17 	ldw	r2,-8(fp)
}
81113670:	e037883a 	mov	sp,fp
81113674:	dfc00117 	ldw	ra,4(sp)
81113678:	df000017 	ldw	fp,0(sp)
8111367c:	dec00204 	addi	sp,sp,8
81113680:	f800283a 	ret

81113684 <alt_avalon_sgdma_construct_descriptor>:
  alt_u16               length_or_eop,
  int                   generate_eop,
  int                   read_fixed,
  int                   write_fixed_or_sop,
  alt_u8                atlantic_channel)
{
81113684:	defff104 	addi	sp,sp,-60
81113688:	dfc00e15 	stw	ra,56(sp)
8111368c:	df000d15 	stw	fp,52(sp)
81113690:	df000d04 	addi	fp,sp,52
81113694:	e13ffa15 	stw	r4,-24(fp)
81113698:	e17ffb15 	stw	r5,-20(fp)
8111369c:	e1bffc15 	stw	r6,-16(fp)
811136a0:	e1fffd15 	stw	r7,-12(fp)
811136a4:	e0c00217 	ldw	r3,8(fp)
811136a8:	e0800617 	ldw	r2,24(fp)
811136ac:	e0fffe0d 	sth	r3,-8(fp)
811136b0:	e0bfff05 	stb	r2,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(desc, next, read_addr, 
811136b4:	e0bffe0b 	ldhu	r2,-8(fp)
811136b8:	e0ffff03 	ldbu	r3,-4(fp)
811136bc:	d8c00615 	stw	r3,24(sp)
811136c0:	d8000515 	stw	zero,20(sp)
811136c4:	d8000415 	stw	zero,16(sp)
811136c8:	e0c00517 	ldw	r3,20(fp)
811136cc:	d8c00315 	stw	r3,12(sp)
811136d0:	e0c00417 	ldw	r3,16(fp)
811136d4:	d8c00215 	stw	r3,8(sp)
811136d8:	e0c00317 	ldw	r3,12(fp)
811136dc:	d8c00115 	stw	r3,4(sp)
811136e0:	d8800015 	stw	r2,0(sp)
811136e4:	e1fffd17 	ldw	r7,-12(fp)
811136e8:	e1bffc17 	ldw	r6,-16(fp)
811136ec:	e17ffb17 	ldw	r5,-20(fp)
811136f0:	e13ffa17 	ldw	r4,-24(fp)
811136f4:	11137f00 	call	811137f0 <alt_avalon_sgdma_construct_descriptor_burst>
    write_addr, length_or_eop, generate_eop, read_fixed, write_fixed_or_sop, 
    0, 0, atlantic_channel);
}
811136f8:	0001883a 	nop
811136fc:	e037883a 	mov	sp,fp
81113700:	dfc00117 	ldw	ra,4(sp)
81113704:	df000017 	ldw	fp,0(sp)
81113708:	dec00204 	addi	sp,sp,8
8111370c:	f800283a 	ret

81113710 <alt_avalon_sgdma_enable_desc_poll>:
 *
 * Returns:
 * - None
 */
void alt_avalon_sgdma_enable_desc_poll(alt_sgdma_dev *dev, alt_u32 frequency)
{
81113710:	defffc04 	addi	sp,sp,-16
81113714:	df000315 	stw	fp,12(sp)
81113718:	df000304 	addi	fp,sp,12
8111371c:	e13ffe15 	stw	r4,-8(fp)
81113720:	e17fff15 	stw	r5,-4(fp)
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
81113724:	e0bffe17 	ldw	r2,-8(fp)
81113728:	10800317 	ldw	r2,12(r2)
8111372c:	10800404 	addi	r2,r2,16
81113730:	10800037 	ldwio	r2,0(r2)
81113734:	e0bffd15 	stw	r2,-12(fp)
  /* Clear descriptor polling frequency */
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_MSK;
81113738:	e0fffd17 	ldw	r3,-12(fp)
8111373c:	00a00434 	movhi	r2,32784
81113740:	10bfffc4 	addi	r2,r2,-1
81113744:	1884703a 	and	r2,r3,r2
81113748:	e0bffd15 	stw	r2,-12(fp)
  
  control |= ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_EN_MSK | 
            ((frequency << ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_OFST) & 
8111374c:	e0bfff17 	ldw	r2,-4(fp)
81113750:	1004953a 	slli	r2,r2,20
81113754:	10dffc2c 	andhi	r3,r2,32752

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
  /* Clear descriptor polling frequency */
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_MSK;
  
  control |= ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_EN_MSK | 
81113758:	e0bffd17 	ldw	r2,-12(fp)
8111375c:	1884b03a 	or	r2,r3,r2
81113760:	10800134 	orhi	r2,r2,4
81113764:	e0bffd15 	stw	r2,-12(fp)
            ((frequency << ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_OFST) & 
            ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_MSK);
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
81113768:	e0bffe17 	ldw	r2,-8(fp)
8111376c:	10800317 	ldw	r2,12(r2)
81113770:	10800404 	addi	r2,r2,16
81113774:	e0fffd17 	ldw	r3,-12(fp)
81113778:	10c00035 	stwio	r3,0(r2)
  
  return;
8111377c:	0001883a 	nop
}
81113780:	e037883a 	mov	sp,fp
81113784:	df000017 	ldw	fp,0(sp)
81113788:	dec00104 	addi	sp,sp,4
8111378c:	f800283a 	ret

81113790 <alt_avalon_sgdma_disable_desc_poll>:
 *
 * Returns:
 * - None
 */
void alt_avalon_sgdma_disable_desc_poll(alt_sgdma_dev *dev)
{
81113790:	defffd04 	addi	sp,sp,-12
81113794:	df000215 	stw	fp,8(sp)
81113798:	df000204 	addi	fp,sp,8
8111379c:	e13fff15 	stw	r4,-4(fp)
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
811137a0:	e0bfff17 	ldw	r2,-4(fp)
811137a4:	10800317 	ldw	r2,12(r2)
811137a8:	10800404 	addi	r2,r2,16
811137ac:	10800037 	ldwio	r2,0(r2)
811137b0:	e0bffe15 	stw	r2,-8(fp)
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_EN_MSK;
811137b4:	e0fffe17 	ldw	r3,-8(fp)
811137b8:	00bfff34 	movhi	r2,65532
811137bc:	10bfffc4 	addi	r2,r2,-1
811137c0:	1884703a 	and	r2,r3,r2
811137c4:	e0bffe15 	stw	r2,-8(fp)

  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
811137c8:	e0bfff17 	ldw	r2,-4(fp)
811137cc:	10800317 	ldw	r2,12(r2)
811137d0:	10800404 	addi	r2,r2,16
811137d4:	e0fffe17 	ldw	r3,-8(fp)
811137d8:	10c00035 	stwio	r3,0(r2)
  
  return;
811137dc:	0001883a 	nop
}
811137e0:	e037883a 	mov	sp,fp
811137e4:	df000017 	ldw	fp,0(sp)
811137e8:	dec00104 	addi	sp,sp,4
811137ec:	f800283a 	ret

811137f0 <alt_avalon_sgdma_construct_descriptor_burst>:
  int                   read_fixed,
  int                   write_fixed_or_sop,
  int                   read_burst,
  int                   write_burst,
  alt_u8                atlantic_channel)
{
811137f0:	defff804 	addi	sp,sp,-32
811137f4:	dfc00715 	stw	ra,28(sp)
811137f8:	df000615 	stw	fp,24(sp)
811137fc:	df000604 	addi	fp,sp,24
81113800:	e13ffa15 	stw	r4,-24(fp)
81113804:	e17ffb15 	stw	r5,-20(fp)
81113808:	e1bffc15 	stw	r6,-16(fp)
8111380c:	e1fffd15 	stw	r7,-12(fp)
81113810:	e0c00217 	ldw	r3,8(fp)
81113814:	e0800817 	ldw	r2,32(fp)
81113818:	e0fffe0d 	sth	r3,-8(fp)
8111381c:	e0bfff05 	stb	r2,-4(fp)
   * The SGDMA controller from continuing to process the chain. This is
   * done as a single IO write to bypass cache, without flushing
   * the entire descriptor, since only the 8-bit descriptor status must
   * be flushed.
   */
  IOWR_8DIRECT(&next->control, 0,
81113820:	e0bffb17 	ldw	r2,-20(fp)
81113824:	108007c4 	addi	r2,r2,31
81113828:	e0fffb17 	ldw	r3,-20(fp)
8111382c:	18c007c3 	ldbu	r3,31(r3)
81113830:	19003fcc 	andi	r4,r3,255
81113834:	00ffdfc4 	movi	r3,-129
81113838:	20c6703a 	and	r3,r4,r3
8111383c:	10c00025 	stbio	r3,0(r2)
    (next->control & ~ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_OWNED_BY_HW_MSK));

  desc->read_addr                = read_addr;
81113840:	e0bffa17 	ldw	r2,-24(fp)
81113844:	e0fffc17 	ldw	r3,-16(fp)
81113848:	19403fcc 	andi	r5,r3,255
8111384c:	10c00003 	ldbu	r3,0(r2)
81113850:	1806703a 	and	r3,r3,zero
81113854:	1809883a 	mov	r4,r3
81113858:	2807883a 	mov	r3,r5
8111385c:	20c6b03a 	or	r3,r4,r3
81113860:	10c00005 	stb	r3,0(r2)
81113864:	e0fffc17 	ldw	r3,-16(fp)
81113868:	1806d23a 	srli	r3,r3,8
8111386c:	19403fcc 	andi	r5,r3,255
81113870:	10c00043 	ldbu	r3,1(r2)
81113874:	1806703a 	and	r3,r3,zero
81113878:	1809883a 	mov	r4,r3
8111387c:	2807883a 	mov	r3,r5
81113880:	20c6b03a 	or	r3,r4,r3
81113884:	10c00045 	stb	r3,1(r2)
81113888:	e0fffc17 	ldw	r3,-16(fp)
8111388c:	1806d43a 	srli	r3,r3,16
81113890:	19403fcc 	andi	r5,r3,255
81113894:	10c00083 	ldbu	r3,2(r2)
81113898:	1806703a 	and	r3,r3,zero
8111389c:	1809883a 	mov	r4,r3
811138a0:	2807883a 	mov	r3,r5
811138a4:	20c6b03a 	or	r3,r4,r3
811138a8:	10c00085 	stb	r3,2(r2)
811138ac:	e0fffc17 	ldw	r3,-16(fp)
811138b0:	180ad63a 	srli	r5,r3,24
811138b4:	10c000c3 	ldbu	r3,3(r2)
811138b8:	1806703a 	and	r3,r3,zero
811138bc:	1809883a 	mov	r4,r3
811138c0:	2807883a 	mov	r3,r5
811138c4:	20c6b03a 	or	r3,r4,r3
811138c8:	10c000c5 	stb	r3,3(r2)
  desc->write_addr               = write_addr;
811138cc:	e0bffa17 	ldw	r2,-24(fp)
811138d0:	e0fffd17 	ldw	r3,-12(fp)
811138d4:	19403fcc 	andi	r5,r3,255
811138d8:	10c00203 	ldbu	r3,8(r2)
811138dc:	1806703a 	and	r3,r3,zero
811138e0:	1809883a 	mov	r4,r3
811138e4:	2807883a 	mov	r3,r5
811138e8:	20c6b03a 	or	r3,r4,r3
811138ec:	10c00205 	stb	r3,8(r2)
811138f0:	e0fffd17 	ldw	r3,-12(fp)
811138f4:	1806d23a 	srli	r3,r3,8
811138f8:	19403fcc 	andi	r5,r3,255
811138fc:	10c00243 	ldbu	r3,9(r2)
81113900:	1806703a 	and	r3,r3,zero
81113904:	1809883a 	mov	r4,r3
81113908:	2807883a 	mov	r3,r5
8111390c:	20c6b03a 	or	r3,r4,r3
81113910:	10c00245 	stb	r3,9(r2)
81113914:	e0fffd17 	ldw	r3,-12(fp)
81113918:	1806d43a 	srli	r3,r3,16
8111391c:	19403fcc 	andi	r5,r3,255
81113920:	10c00283 	ldbu	r3,10(r2)
81113924:	1806703a 	and	r3,r3,zero
81113928:	1809883a 	mov	r4,r3
8111392c:	2807883a 	mov	r3,r5
81113930:	20c6b03a 	or	r3,r4,r3
81113934:	10c00285 	stb	r3,10(r2)
81113938:	e0fffd17 	ldw	r3,-12(fp)
8111393c:	180ad63a 	srli	r5,r3,24
81113940:	10c002c3 	ldbu	r3,11(r2)
81113944:	1806703a 	and	r3,r3,zero
81113948:	1809883a 	mov	r4,r3
8111394c:	2807883a 	mov	r3,r5
81113950:	20c6b03a 	or	r3,r4,r3
81113954:	10c002c5 	stb	r3,11(r2)
  desc->next                     = (alt_u32 *) next;
81113958:	e0bffa17 	ldw	r2,-24(fp)
8111395c:	e0fffb17 	ldw	r3,-20(fp)
81113960:	19403fcc 	andi	r5,r3,255
81113964:	10c00403 	ldbu	r3,16(r2)
81113968:	1806703a 	and	r3,r3,zero
8111396c:	1809883a 	mov	r4,r3
81113970:	2807883a 	mov	r3,r5
81113974:	20c6b03a 	or	r3,r4,r3
81113978:	10c00405 	stb	r3,16(r2)
8111397c:	e0fffb17 	ldw	r3,-20(fp)
81113980:	1806d23a 	srli	r3,r3,8
81113984:	19403fcc 	andi	r5,r3,255
81113988:	10c00443 	ldbu	r3,17(r2)
8111398c:	1806703a 	and	r3,r3,zero
81113990:	1809883a 	mov	r4,r3
81113994:	2807883a 	mov	r3,r5
81113998:	20c6b03a 	or	r3,r4,r3
8111399c:	10c00445 	stb	r3,17(r2)
811139a0:	e0fffb17 	ldw	r3,-20(fp)
811139a4:	1806d43a 	srli	r3,r3,16
811139a8:	19403fcc 	andi	r5,r3,255
811139ac:	10c00483 	ldbu	r3,18(r2)
811139b0:	1806703a 	and	r3,r3,zero
811139b4:	1809883a 	mov	r4,r3
811139b8:	2807883a 	mov	r3,r5
811139bc:	20c6b03a 	or	r3,r4,r3
811139c0:	10c00485 	stb	r3,18(r2)
811139c4:	e0fffb17 	ldw	r3,-20(fp)
811139c8:	180ad63a 	srli	r5,r3,24
811139cc:	10c004c3 	ldbu	r3,19(r2)
811139d0:	1806703a 	and	r3,r3,zero
811139d4:	1809883a 	mov	r4,r3
811139d8:	2807883a 	mov	r3,r5
811139dc:	20c6b03a 	or	r3,r4,r3
811139e0:	10c004c5 	stb	r3,19(r2)
  desc->read_addr_pad            = 0x0;
811139e4:	e0bffa17 	ldw	r2,-24(fp)
811139e8:	10c00103 	ldbu	r3,4(r2)
811139ec:	1806703a 	and	r3,r3,zero
811139f0:	10c00105 	stb	r3,4(r2)
811139f4:	10c00143 	ldbu	r3,5(r2)
811139f8:	1806703a 	and	r3,r3,zero
811139fc:	10c00145 	stb	r3,5(r2)
81113a00:	10c00183 	ldbu	r3,6(r2)
81113a04:	1806703a 	and	r3,r3,zero
81113a08:	10c00185 	stb	r3,6(r2)
81113a0c:	10c001c3 	ldbu	r3,7(r2)
81113a10:	1806703a 	and	r3,r3,zero
81113a14:	10c001c5 	stb	r3,7(r2)
  desc->write_addr_pad           = 0x0;
81113a18:	e0bffa17 	ldw	r2,-24(fp)
81113a1c:	10c00303 	ldbu	r3,12(r2)
81113a20:	1806703a 	and	r3,r3,zero
81113a24:	10c00305 	stb	r3,12(r2)
81113a28:	10c00343 	ldbu	r3,13(r2)
81113a2c:	1806703a 	and	r3,r3,zero
81113a30:	10c00345 	stb	r3,13(r2)
81113a34:	10c00383 	ldbu	r3,14(r2)
81113a38:	1806703a 	and	r3,r3,zero
81113a3c:	10c00385 	stb	r3,14(r2)
81113a40:	10c003c3 	ldbu	r3,15(r2)
81113a44:	1806703a 	and	r3,r3,zero
81113a48:	10c003c5 	stb	r3,15(r2)
  desc->next_pad                 = 0x0;
81113a4c:	e0bffa17 	ldw	r2,-24(fp)
81113a50:	10c00503 	ldbu	r3,20(r2)
81113a54:	1806703a 	and	r3,r3,zero
81113a58:	10c00505 	stb	r3,20(r2)
81113a5c:	10c00543 	ldbu	r3,21(r2)
81113a60:	1806703a 	and	r3,r3,zero
81113a64:	10c00545 	stb	r3,21(r2)
81113a68:	10c00583 	ldbu	r3,22(r2)
81113a6c:	1806703a 	and	r3,r3,zero
81113a70:	10c00585 	stb	r3,22(r2)
81113a74:	10c005c3 	ldbu	r3,23(r2)
81113a78:	1806703a 	and	r3,r3,zero
81113a7c:	10c005c5 	stb	r3,23(r2)
  desc->bytes_to_transfer        = length_or_eop;
81113a80:	e0bffa17 	ldw	r2,-24(fp)
81113a84:	e0fffe17 	ldw	r3,-8(fp)
81113a88:	19403fcc 	andi	r5,r3,255
81113a8c:	10c00603 	ldbu	r3,24(r2)
81113a90:	1806703a 	and	r3,r3,zero
81113a94:	1809883a 	mov	r4,r3
81113a98:	2807883a 	mov	r3,r5
81113a9c:	20c6b03a 	or	r3,r4,r3
81113aa0:	10c00605 	stb	r3,24(r2)
81113aa4:	e0fffe17 	ldw	r3,-8(fp)
81113aa8:	1806d23a 	srli	r3,r3,8
81113aac:	19403fcc 	andi	r5,r3,255
81113ab0:	10c00643 	ldbu	r3,25(r2)
81113ab4:	1806703a 	and	r3,r3,zero
81113ab8:	1809883a 	mov	r4,r3
81113abc:	2807883a 	mov	r3,r5
81113ac0:	20c6b03a 	or	r3,r4,r3
81113ac4:	10c00645 	stb	r3,25(r2)
  desc->actual_bytes_transferred = 0;
81113ac8:	e0bffa17 	ldw	r2,-24(fp)
81113acc:	10c00703 	ldbu	r3,28(r2)
81113ad0:	1806703a 	and	r3,r3,zero
81113ad4:	10c00705 	stb	r3,28(r2)
81113ad8:	10c00743 	ldbu	r3,29(r2)
81113adc:	1806703a 	and	r3,r3,zero
81113ae0:	10c00745 	stb	r3,29(r2)
  desc->status                   = 0x0;
81113ae4:	e0bffa17 	ldw	r2,-24(fp)
81113ae8:	10000785 	stb	zero,30(r2)

  /* SGDMA burst not currently supported */
  desc->read_burst               = read_burst;
81113aec:	e0800617 	ldw	r2,24(fp)
81113af0:	1007883a 	mov	r3,r2
81113af4:	e0bffa17 	ldw	r2,-24(fp)
81113af8:	10c00685 	stb	r3,26(r2)
  desc->write_burst              = write_burst;
81113afc:	e0800717 	ldw	r2,28(fp)
81113b00:	1007883a 	mov	r3,r2
81113b04:	e0bffa17 	ldw	r2,-24(fp)
81113b08:	10c006c5 	stb	r3,27(r2)
   * Note that this step is performed after all other descriptor information
   * has been filled out so that, if the controller already happens to be
   * pointing at this descriptor, it will not run (via the "owned by hardware"
   * bit) until all other descriptor information has been set up.
   */
  desc->control = (
81113b0c:	e0800317 	ldw	r2,12(fp)
81113b10:	10000226 	beq	r2,zero,81113b1c <alt_avalon_sgdma_construct_descriptor_burst+0x32c>
81113b14:	00bfe044 	movi	r2,-127
81113b18:	00000106 	br	81113b20 <alt_avalon_sgdma_construct_descriptor_burst+0x330>
81113b1c:	00bfe004 	movi	r2,-128
81113b20:	e0c00417 	ldw	r3,16(fp)
81113b24:	18000226 	beq	r3,zero,81113b30 <alt_avalon_sgdma_construct_descriptor_burst+0x340>
81113b28:	00c00084 	movi	r3,2
81113b2c:	00000106 	br	81113b34 <alt_avalon_sgdma_construct_descriptor_burst+0x344>
81113b30:	0007883a 	mov	r3,zero
81113b34:	10c4b03a 	or	r2,r2,r3
81113b38:	1007883a 	mov	r3,r2
81113b3c:	e0800517 	ldw	r2,20(fp)
81113b40:	10000226 	beq	r2,zero,81113b4c <alt_avalon_sgdma_construct_descriptor_burst+0x35c>
81113b44:	00800104 	movi	r2,4
81113b48:	00000106 	br	81113b50 <alt_avalon_sgdma_construct_descriptor_burst+0x360>
81113b4c:	0005883a 	mov	r2,zero
81113b50:	1884b03a 	or	r2,r3,r2
81113b54:	1007883a 	mov	r3,r2
81113b58:	e0bfff03 	ldbu	r2,-4(fp)
81113b5c:	10000426 	beq	r2,zero,81113b70 <alt_avalon_sgdma_construct_descriptor_burst+0x380>
       ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_GENERATE_EOP_MSK : 0x0)        |
    (read_fixed ?
       ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_READ_FIXED_ADDRESS_MSK : 0x0)  |
    (write_fixed_or_sop ?
       ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_WRITE_FIXED_ADDRESS_MSK : 0x0) |
    (atlantic_channel ? ( (atlantic_channel & 0x0F) << 3) : 0)
81113b60:	e0bfff03 	ldbu	r2,-4(fp)
81113b64:	108003cc 	andi	r2,r2,15
81113b68:	100490fa 	slli	r2,r2,3
81113b6c:	00000106 	br	81113b74 <alt_avalon_sgdma_construct_descriptor_burst+0x384>
   * Note that this step is performed after all other descriptor information
   * has been filled out so that, if the controller already happens to be
   * pointing at this descriptor, it will not run (via the "owned by hardware"
   * bit) until all other descriptor information has been set up.
   */
  desc->control = (
81113b70:	0005883a 	mov	r2,zero
81113b74:	1884b03a 	or	r2,r3,r2
81113b78:	1007883a 	mov	r3,r2
81113b7c:	e0bffa17 	ldw	r2,-24(fp)
81113b80:	10c007c5 	stb	r3,31(r2)
  /*
   * Flush completed buffer out of cache. This is done rather than
   * individual cache-bypassed writes to take advantage of any
   * burst-capabilities in the memory we're writing to.
   */
  alt_dcache_flush(desc, sizeof(alt_sgdma_descriptor));
81113b84:	01400804 	movi	r5,32
81113b88:	e13ffa17 	ldw	r4,-24(fp)
81113b8c:	1115ed00 	call	81115ed0 <alt_dcache_flush>
}
81113b90:	0001883a 	nop
81113b94:	e037883a 	mov	sp,fp
81113b98:	dfc00117 	ldw	ra,4(sp)
81113b9c:	df000017 	ldw	fp,0(sp)
81113ba0:	dec00204 	addi	sp,sp,8
81113ba4:	f800283a 	ret

81113ba8 <alt_avalon_sgdma_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_sgdma_irq(void *context)
#else
static void alt_avalon_sgdma_irq(void *context, alt_u32 id)
#endif
{
81113ba8:	defff904 	addi	sp,sp,-28
81113bac:	dfc00615 	stw	ra,24(sp)
81113bb0:	df000515 	stw	fp,20(sp)
81113bb4:	df000504 	addi	fp,sp,20
81113bb8:	e13fff15 	stw	r4,-4(fp)
  alt_sgdma_dev *dev = (alt_sgdma_dev *) context;
81113bbc:	e0bfff17 	ldw	r2,-4(fp)
81113bc0:	e0bffb15 	stw	r2,-20(fp)
   * Note: This is explicitly done before calling user interrupt-handling
   * code rather than after; if user ISR code initiates another SGDMA
   * transfer which completes quickly, reading the control register after
   * the callback routine may result in a lost interrupt.
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 
81113bc4:	e0bffb17 	ldw	r2,-20(fp)
81113bc8:	10800317 	ldw	r2,12(r2)
81113bcc:	10800404 	addi	r2,r2,16
81113bd0:	e0fffb17 	ldw	r3,-20(fp)
81113bd4:	18c00317 	ldw	r3,12(r3)
81113bd8:	18c00404 	addi	r3,r3,16
81113bdc:	18c00037 	ldwio	r3,0(r3)
81113be0:	18e00034 	orhi	r3,r3,32768
81113be4:	10c00035 	stwio	r3,0(r2)
    IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base) | 0x80000000);
  
  /* Dummy read to ensure IRQ is negated before the ISR returns */
  IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
81113be8:	e0bffb17 	ldw	r2,-20(fp)
81113bec:	10800317 	ldw	r2,12(r2)
81113bf0:	10800404 	addi	r2,r2,16
81113bf4:	10800037 	ldwio	r2,0(r2)
   * Other interrupts are explicitly disabled if callbacks
   * are registered because there is no guarantee that they are 
   * preemption-safe. This allows the driver to support 
   * interrupt preemption.
   */
  if(dev->callback) {
81113bf8:	e0bffb17 	ldw	r2,-20(fp)
81113bfc:	10800917 	ldw	r2,36(r2)
81113c00:	10001226 	beq	r2,zero,81113c4c <alt_avalon_sgdma_irq+0xa4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81113c04:	0005303a 	rdctl	r2,status
81113c08:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81113c0c:	e0fffd17 	ldw	r3,-12(fp)
81113c10:	00bfff84 	movi	r2,-2
81113c14:	1884703a 	and	r2,r3,r2
81113c18:	1001703a 	wrctl	status,r2
  
  return context;
81113c1c:	e0bffd17 	ldw	r2,-12(fp)
    cpu_sr = alt_irq_disable_all();
81113c20:	e0bffc15 	stw	r2,-16(fp)
    (dev->callback)(dev->callback_context);
81113c24:	e0bffb17 	ldw	r2,-20(fp)
81113c28:	10800917 	ldw	r2,36(r2)
81113c2c:	e0fffb17 	ldw	r3,-20(fp)
81113c30:	18c00a17 	ldw	r3,40(r3)
81113c34:	1809883a 	mov	r4,r3
81113c38:	103ee83a 	callr	r2
81113c3c:	e0bffc17 	ldw	r2,-16(fp)
81113c40:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81113c44:	e0bffe17 	ldw	r2,-8(fp)
81113c48:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(cpu_sr);
  }
}
81113c4c:	0001883a 	nop
81113c50:	e037883a 	mov	sp,fp
81113c54:	dfc00117 	ldw	ra,4(sp)
81113c58:	df000017 	ldw	fp,0(sp)
81113c5c:	dec00204 	addi	sp,sp,8
81113c60:	f800283a 	ret

81113c64 <alt_avalon_sgdma_init>:
 * This routine disables interrupts, future descriptor processing,
 * registers a specific instance of the device with the HAL,
 * and installs an interrupt handler for the device.
 */
void alt_avalon_sgdma_init (alt_sgdma_dev *dev, alt_u32 ic_id, alt_u32 irq)
{
81113c64:	defffa04 	addi	sp,sp,-24
81113c68:	dfc00515 	stw	ra,20(sp)
81113c6c:	df000415 	stw	fp,16(sp)
81113c70:	df000404 	addi	fp,sp,16
81113c74:	e13ffd15 	stw	r4,-12(fp)
81113c78:	e17ffe15 	stw	r5,-8(fp)
81113c7c:	e1bfff15 	stw	r6,-4(fp)

  /* 
   * Halt any current transactions (reset the device)
   * SW reset is written twice per SGDMA documentation 
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
81113c80:	e0bffd17 	ldw	r2,-12(fp)
81113c84:	10800317 	ldw	r2,12(r2)
81113c88:	10800404 	addi	r2,r2,16
81113c8c:	00c00074 	movhi	r3,1
81113c90:	10c00035 	stwio	r3,0(r2)
    ALTERA_AVALON_SGDMA_CONTROL_SOFTWARERESET_MSK);
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
81113c94:	e0bffd17 	ldw	r2,-12(fp)
81113c98:	10800317 	ldw	r2,12(r2)
81113c9c:	10800404 	addi	r2,r2,16
81113ca0:	00c00074 	movhi	r3,1
81113ca4:	10c00035 	stwio	r3,0(r2)

  /*
   * Disable interrupts, halt future descriptor processing,
   * and clear status register content
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 0x0);
81113ca8:	e0bffd17 	ldw	r2,-12(fp)
81113cac:	10800317 	ldw	r2,12(r2)
81113cb0:	10800404 	addi	r2,r2,16
81113cb4:	0007883a 	mov	r3,zero
81113cb8:	10c00035 	stwio	r3,0(r2)
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
81113cbc:	e0bffd17 	ldw	r2,-12(fp)
81113cc0:	10800317 	ldw	r2,12(r2)
81113cc4:	00c03fc4 	movi	r3,255
81113cc8:	10c00035 	stwio	r3,0(r2)

  /* Register this instance of the SGDMA controller with HAL */
  alt_dev_llist_insert((alt_dev_llist*) dev, &alt_sgdma_list);
81113ccc:	d1600f04 	addi	r5,gp,-32708
81113cd0:	e13ffd17 	ldw	r4,-12(fp)
81113cd4:	1115f340 	call	81115f34 <alt_dev_llist_insert>

  /* Install IRQ handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(ic_id, irq, alt_avalon_sgdma_irq, dev, 0x0);
81113cd8:	d8000015 	stw	zero,0(sp)
81113cdc:	e1fffd17 	ldw	r7,-12(fp)
81113ce0:	01a04474 	movhi	r6,33041
81113ce4:	318eea04 	addi	r6,r6,15272
81113ce8:	e17fff17 	ldw	r5,-4(fp)
81113cec:	e13ffe17 	ldw	r4,-8(fp)
81113cf0:	11161280 	call	81116128 <alt_ic_isr_register>
#else
  alt_irq_register(irq, dev, alt_avalon_sgdma_irq);
#endif  
}
81113cf4:	0001883a 	nop
81113cf8:	e037883a 	mov	sp,fp
81113cfc:	dfc00117 	ldw	ra,4(sp)
81113d00:	df000017 	ldw	fp,0(sp)
81113d04:	dec00204 	addi	sp,sp,8
81113d08:	f800283a 	ret

81113d0c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
81113d0c:	defffa04 	addi	sp,sp,-24
81113d10:	dfc00515 	stw	ra,20(sp)
81113d14:	df000415 	stw	fp,16(sp)
81113d18:	df000404 	addi	fp,sp,16
81113d1c:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
81113d20:	0007883a 	mov	r3,zero
81113d24:	e0bfff17 	ldw	r2,-4(fp)
81113d28:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
81113d2c:	e0bfff17 	ldw	r2,-4(fp)
81113d30:	10800104 	addi	r2,r2,4
81113d34:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81113d38:	0005303a 	rdctl	r2,status
81113d3c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81113d40:	e0fffd17 	ldw	r3,-12(fp)
81113d44:	00bfff84 	movi	r2,-2
81113d48:	1884703a 	and	r2,r3,r2
81113d4c:	1001703a 	wrctl	status,r2
  
  return context;
81113d50:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
81113d54:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
81113d58:	11121500 	call	81112150 <alt_tick>
81113d5c:	e0bffc17 	ldw	r2,-16(fp)
81113d60:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81113d64:	e0bffe17 	ldw	r2,-8(fp)
81113d68:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
81113d6c:	0001883a 	nop
81113d70:	e037883a 	mov	sp,fp
81113d74:	dfc00117 	ldw	ra,4(sp)
81113d78:	df000017 	ldw	fp,0(sp)
81113d7c:	dec00204 	addi	sp,sp,8
81113d80:	f800283a 	ret

81113d84 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
81113d84:	defff804 	addi	sp,sp,-32
81113d88:	dfc00715 	stw	ra,28(sp)
81113d8c:	df000615 	stw	fp,24(sp)
81113d90:	df000604 	addi	fp,sp,24
81113d94:	e13ffc15 	stw	r4,-16(fp)
81113d98:	e17ffd15 	stw	r5,-12(fp)
81113d9c:	e1bffe15 	stw	r6,-8(fp)
81113da0:	e1ffff15 	stw	r7,-4(fp)
81113da4:	e0bfff17 	ldw	r2,-4(fp)
81113da8:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
81113dac:	d0a02217 	ldw	r2,-32632(gp)
81113db0:	1000021e 	bne	r2,zero,81113dbc <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
81113db4:	e0bffb17 	ldw	r2,-20(fp)
81113db8:	d0a02215 	stw	r2,-32632(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
81113dbc:	e0bffc17 	ldw	r2,-16(fp)
81113dc0:	10800104 	addi	r2,r2,4
81113dc4:	00c001c4 	movi	r3,7
81113dc8:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
81113dcc:	d8000015 	stw	zero,0(sp)
81113dd0:	e1fffc17 	ldw	r7,-16(fp)
81113dd4:	01a04474 	movhi	r6,33041
81113dd8:	318f4304 	addi	r6,r6,15628
81113ddc:	e17ffe17 	ldw	r5,-8(fp)
81113de0:	e13ffd17 	ldw	r4,-12(fp)
81113de4:	11161280 	call	81116128 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
81113de8:	0001883a 	nop
81113dec:	e037883a 	mov	sp,fp
81113df0:	dfc00117 	ldw	ra,4(sp)
81113df4:	df000017 	ldw	fp,0(sp)
81113df8:	dec00204 	addi	sp,sp,8
81113dfc:	f800283a 	ret

81113e00 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
81113e00:	defffe04 	addi	sp,sp,-8
81113e04:	dfc00115 	stw	ra,4(sp)
81113e08:	df000015 	stw	fp,0(sp)
81113e0c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
81113e10:	d0a00b17 	ldw	r2,-32724(gp)
81113e14:	10000326 	beq	r2,zero,81113e24 <alt_get_errno+0x24>
81113e18:	d0a00b17 	ldw	r2,-32724(gp)
81113e1c:	103ee83a 	callr	r2
81113e20:	00000106 	br	81113e28 <alt_get_errno+0x28>
81113e24:	d0a01e04 	addi	r2,gp,-32648
}
81113e28:	e037883a 	mov	sp,fp
81113e2c:	dfc00117 	ldw	ra,4(sp)
81113e30:	df000017 	ldw	fp,0(sp)
81113e34:	dec00204 	addi	sp,sp,8
81113e38:	f800283a 	ret

81113e3c <alt_msgdma_write_standard_descriptor>:
 */
static int alt_msgdma_write_standard_descriptor (
	alt_u32 *csr_base, 
	alt_u32 *descriptor_base,
	alt_msgdma_standard_descriptor *descriptor)
{
81113e3c:	defffc04 	addi	sp,sp,-16
81113e40:	df000315 	stw	fp,12(sp)
81113e44:	df000304 	addi	fp,sp,12
81113e48:	e13ffd15 	stw	r4,-12(fp)
81113e4c:	e17ffe15 	stw	r5,-8(fp)
81113e50:	e1bfff15 	stw	r6,-4(fp)
    if (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(csr_base) & 
81113e54:	e0bffd17 	ldw	r2,-12(fp)
81113e58:	10800037 	ldwio	r2,0(r2)
81113e5c:	1080010c 	andi	r2,r2,4
81113e60:	10000226 	beq	r2,zero,81113e6c <alt_msgdma_write_standard_descriptor+0x30>
    	ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK))
    {
      /*at least one descriptor buffer is full, returning so that this function 
		is non-blocking*/
        return -ENOSPC;
81113e64:	00bff904 	movi	r2,-28
81113e68:	00001506 	br	81113ec0 <alt_msgdma_write_standard_descriptor+0x84>
    }

	IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS(descriptor_base, 
81113e6c:	e0bfff17 	ldw	r2,-4(fp)
81113e70:	10800017 	ldw	r2,0(r2)
81113e74:	1007883a 	mov	r3,r2
81113e78:	e0bffe17 	ldw	r2,-8(fp)
81113e7c:	10c00035 	stwio	r3,0(r2)
		(alt_u32)descriptor->read_address);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS(descriptor_base, 
81113e80:	e0bffe17 	ldw	r2,-8(fp)
81113e84:	10800104 	addi	r2,r2,4
81113e88:	e0ffff17 	ldw	r3,-4(fp)
81113e8c:	18c00117 	ldw	r3,4(r3)
81113e90:	10c00035 	stwio	r3,0(r2)
	(	alt_u32)descriptor->write_address);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_LENGTH(descriptor_base, 
81113e94:	e0bffe17 	ldw	r2,-8(fp)
81113e98:	10800204 	addi	r2,r2,8
81113e9c:	e0ffff17 	ldw	r3,-4(fp)
81113ea0:	18c00217 	ldw	r3,8(r3)
81113ea4:	10c00035 	stwio	r3,0(r2)
		descriptor->transfer_length);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_CONTROL_STANDARD(descriptor_base, 
81113ea8:	e0bffe17 	ldw	r2,-8(fp)
81113eac:	10800304 	addi	r2,r2,12
81113eb0:	e0ffff17 	ldw	r3,-4(fp)
81113eb4:	18c00317 	ldw	r3,12(r3)
81113eb8:	10c00035 	stwio	r3,0(r2)
		descriptor->control);
        return 0;
81113ebc:	0005883a 	mov	r2,zero
}
81113ec0:	e037883a 	mov	sp,fp
81113ec4:	df000017 	ldw	fp,0(sp)
81113ec8:	dec00104 	addi	sp,sp,4
81113ecc:	f800283a 	ret

81113ed0 <alt_msgdma_write_extended_descriptor>:
 */
static int alt_msgdma_write_extended_descriptor (
	alt_u32 *csr_base, 
	alt_u32 *descriptor_base,
	alt_msgdma_extended_descriptor *descriptor)
{
81113ed0:	defffc04 	addi	sp,sp,-16
81113ed4:	df000315 	stw	fp,12(sp)
81113ed8:	df000304 	addi	fp,sp,12
81113edc:	e13ffd15 	stw	r4,-12(fp)
81113ee0:	e17ffe15 	stw	r5,-8(fp)
81113ee4:	e1bfff15 	stw	r6,-4(fp)
    if (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(csr_base) & 
81113ee8:	e0bffd17 	ldw	r2,-12(fp)
81113eec:	10800037 	ldwio	r2,0(r2)
81113ef0:	1080010c 	andi	r2,r2,4
81113ef4:	10000226 	beq	r2,zero,81113f00 <alt_msgdma_write_extended_descriptor+0x30>
    	ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK))
    {
      /*at least one descriptor buffer is full, returning so that this function 
	is non-blocking*/
        return -ENOSPC;
81113ef8:	00bff904 	movi	r2,-28
81113efc:	00003b06 	br	81113fec <alt_msgdma_write_extended_descriptor+0x11c>
    }

    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS(
81113f00:	e0bfff17 	ldw	r2,-4(fp)
81113f04:	10800017 	ldw	r2,0(r2)
81113f08:	1007883a 	mov	r3,r2
81113f0c:	e0bffe17 	ldw	r2,-8(fp)
81113f10:	10c00035 	stwio	r3,0(r2)
		descriptor_base, 
    	(alt_u32)descriptor->read_address_low);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS(
81113f14:	e0bffe17 	ldw	r2,-8(fp)
81113f18:	10800104 	addi	r2,r2,4
81113f1c:	e0ffff17 	ldw	r3,-4(fp)
81113f20:	18c00117 	ldw	r3,4(r3)
81113f24:	10c00035 	stwio	r3,0(r2)
		descriptor_base, 
		(alt_u32)descriptor->write_address_low);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_LENGTH(
81113f28:	e0bffe17 	ldw	r2,-8(fp)
81113f2c:	10800204 	addi	r2,r2,8
81113f30:	e0ffff17 	ldw	r3,-4(fp)
81113f34:	18c00217 	ldw	r3,8(r3)
81113f38:	10c00035 	stwio	r3,0(r2)
		descriptor_base, 
    	descriptor->transfer_length);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_SEQUENCE_NUMBER(
81113f3c:	e0bffe17 	ldw	r2,-8(fp)
81113f40:	10800304 	addi	r2,r2,12
81113f44:	e0ffff17 	ldw	r3,-4(fp)
81113f48:	18c0030b 	ldhu	r3,12(r3)
81113f4c:	18ffffcc 	andi	r3,r3,65535
81113f50:	10c0002d 	sthio	r3,0(r2)
		descriptor_base, 
    	descriptor->sequence_number);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_BURST(
81113f54:	e0bffe17 	ldw	r2,-8(fp)
81113f58:	10800384 	addi	r2,r2,14
81113f5c:	e0ffff17 	ldw	r3,-4(fp)
81113f60:	18c00383 	ldbu	r3,14(r3)
81113f64:	18c03fcc 	andi	r3,r3,255
81113f68:	10c00025 	stbio	r3,0(r2)
		descriptor_base, 
    	descriptor->read_burst_count);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_BURST(
81113f6c:	e0bffe17 	ldw	r2,-8(fp)
81113f70:	108003c4 	addi	r2,r2,15
81113f74:	e0ffff17 	ldw	r3,-4(fp)
81113f78:	18c003c3 	ldbu	r3,15(r3)
81113f7c:	18c03fcc 	andi	r3,r3,255
81113f80:	10c00025 	stbio	r3,0(r2)
		descriptor_base, 
    	descriptor->write_burst_count);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_STRIDE(
81113f84:	e0bffe17 	ldw	r2,-8(fp)
81113f88:	10800404 	addi	r2,r2,16
81113f8c:	e0ffff17 	ldw	r3,-4(fp)
81113f90:	18c0040b 	ldhu	r3,16(r3)
81113f94:	18ffffcc 	andi	r3,r3,65535
81113f98:	10c0002d 	sthio	r3,0(r2)
		descriptor_base, 
    	descriptor->read_stride);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_STRIDE(
81113f9c:	e0bffe17 	ldw	r2,-8(fp)
81113fa0:	10800484 	addi	r2,r2,18
81113fa4:	e0ffff17 	ldw	r3,-4(fp)
81113fa8:	18c0048b 	ldhu	r3,18(r3)
81113fac:	18ffffcc 	andi	r3,r3,65535
81113fb0:	10c0002d 	sthio	r3,0(r2)
		descriptor_base, 
    	descriptor->write_stride);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS_HIGH(descriptor_base, 0);
81113fb4:	e0bffe17 	ldw	r2,-8(fp)
81113fb8:	10800504 	addi	r2,r2,20
81113fbc:	0007883a 	mov	r3,zero
81113fc0:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS_HIGH(descriptor_base, 0);
81113fc4:	e0bffe17 	ldw	r2,-8(fp)
81113fc8:	10800604 	addi	r2,r2,24
81113fcc:	0007883a 	mov	r3,zero
81113fd0:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_CONTROL_ENHANCED(
81113fd4:	e0bffe17 	ldw	r2,-8(fp)
81113fd8:	10800704 	addi	r2,r2,28
81113fdc:	e0ffff17 	ldw	r3,-4(fp)
81113fe0:	18c00717 	ldw	r3,28(r3)
81113fe4:	10c00035 	stwio	r3,0(r2)
		descriptor_base, 
    	descriptor->control);
    return 0;
81113fe8:	0005883a 	mov	r2,zero
}
81113fec:	e037883a 	mov	sp,fp
81113ff0:	df000017 	ldw	fp,0(sp)
81113ff4:	dec00104 	addi	sp,sp,4
81113ff8:	f800283a 	ret

81113ffc <alt_msgdma_irq>:
 * alt_msgdma_irq()
 *
 * Interrupt handler for the Modular Scatter-Gather DMA controller.
 */
static void alt_msgdma_irq(void *context)
{
81113ffc:	defff804 	addi	sp,sp,-32
81114000:	dfc00715 	stw	ra,28(sp)
81114004:	df000615 	stw	fp,24(sp)
81114008:	df000604 	addi	fp,sp,24
8111400c:	e13fff15 	stw	r4,-4(fp)
    alt_msgdma_dev *dev = (alt_msgdma_dev *) context;
81114010:	e0bfff17 	ldw	r2,-4(fp)
81114014:	e0bffa15 	stw	r2,-24(fp)
    alt_irq_context cpu_sr;
    alt_u32 temporary_control;

    
    /* disable global interrupt*/
    if (dev->prefetcher_enable)
81114018:	e0bffa17 	ldw	r2,-24(fp)
8111401c:	10801783 	ldbu	r2,94(r2)
81114020:	10803fcc 	andi	r2,r2,255
81114024:	10001126 	beq	r2,zero,8111406c <alt_msgdma_irq+0x70>
    {
        temporary_control = 
        		IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
81114028:	e0bffa17 	ldw	r2,-24(fp)
8111402c:	10800617 	ldw	r2,24(r2)
81114030:	10800037 	ldwio	r2,0(r2)

    
    /* disable global interrupt*/
    if (dev->prefetcher_enable)
    {
        temporary_control = 
81114034:	1007883a 	mov	r3,r2
81114038:	00bffdc4 	movi	r2,-9
8111403c:	1884703a 	and	r2,r3,r2
81114040:	e0bffb15 	stw	r2,-20(fp)
        		IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
				& ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_CLR_MASK;
        
        IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
81114044:	e0bffa17 	ldw	r2,-24(fp)
81114048:	10800617 	ldw	r2,24(r2)
8111404c:	e0fffb17 	ldw	r3,-20(fp)
81114050:	10c00035 	stwio	r3,0(r2)
        		temporary_control);
        
        /* clear the IRQ status- W1C */
        IOWR_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base,
81114054:	e0bffa17 	ldw	r2,-24(fp)
81114058:	10800617 	ldw	r2,24(r2)
8111405c:	10800404 	addi	r2,r2,16
81114060:	00c00044 	movi	r3,1
81114064:	10c00035 	stwio	r3,0(r2)
81114068:	00001106 	br	811140b0 <alt_msgdma_irq+0xb4>
        		ALT_MSGDMA_PREFETCHER_STATUS_IRQ_SET_MASK);
    }
    else
    {
    	temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base)
8111406c:	e0bffa17 	ldw	r2,-24(fp)
81114070:	10800317 	ldw	r2,12(r2)
81114074:	10800104 	addi	r2,r2,4
81114078:	10800037 	ldwio	r2,0(r2)
8111407c:	1007883a 	mov	r3,r2
81114080:	00bffbc4 	movi	r2,-17
81114084:	1884703a 	and	r2,r3,r2
81114088:	e0bffb15 	stw	r2,-20(fp)
    			& (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    	
    	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
8111408c:	e0bffa17 	ldw	r2,-24(fp)
81114090:	10800317 	ldw	r2,12(r2)
81114094:	10800104 	addi	r2,r2,4
81114098:	e0fffb17 	ldw	r3,-20(fp)
8111409c:	10c00035 	stwio	r3,0(r2)
    	/* clear the IRQ status */
    	IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base,
811140a0:	e0bffa17 	ldw	r2,-24(fp)
811140a4:	10800317 	ldw	r2,12(r2)
811140a8:	00c08004 	movi	r3,512
811140ac:	10c00035 	stwio	r3,0(r2)
    * Other interrupts are explicitly disabled if callbacks
    * are registered because there is no guarantee that they are 
    * pre-emption-safe. This allows the driver to support 
    * interrupt pre-emption.
    */
    if(dev->callback) 
811140b0:	e0bffa17 	ldw	r2,-24(fp)
811140b4:	10800b17 	ldw	r2,44(r2)
811140b8:	10001226 	beq	r2,zero,81114104 <alt_msgdma_irq+0x108>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811140bc:	0005303a 	rdctl	r2,status
811140c0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811140c4:	e0fffd17 	ldw	r3,-12(fp)
811140c8:	00bfff84 	movi	r2,-2
811140cc:	1884703a 	and	r2,r3,r2
811140d0:	1001703a 	wrctl	status,r2
  
  return context;
811140d4:	e0bffd17 	ldw	r2,-12(fp)
    {
        cpu_sr = alt_irq_disable_all();
811140d8:	e0bffc15 	stw	r2,-16(fp)
        dev->callback (dev->callback_context);
811140dc:	e0bffa17 	ldw	r2,-24(fp)
811140e0:	10800b17 	ldw	r2,44(r2)
811140e4:	e0fffa17 	ldw	r3,-24(fp)
811140e8:	18c00c17 	ldw	r3,48(r3)
811140ec:	1809883a 	mov	r4,r3
811140f0:	103ee83a 	callr	r2
811140f4:	e0bffc17 	ldw	r2,-16(fp)
811140f8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811140fc:	e0bffe17 	ldw	r2,-8(fp)
81114100:	1001703a 	wrctl	status,r2
        alt_irq_enable_all(cpu_sr);
    }

    /* enable global interrupt */
    if (dev->prefetcher_enable)
81114104:	e0bffa17 	ldw	r2,-24(fp)
81114108:	10801783 	ldbu	r2,94(r2)
8111410c:	10803fcc 	andi	r2,r2,255
81114110:	10000a26 	beq	r2,zero,8111413c <alt_msgdma_irq+0x140>
    {
    	temporary_control = 
    			IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
81114114:	e0bffa17 	ldw	r2,-24(fp)
81114118:	10800617 	ldw	r2,24(r2)
8111411c:	10800037 	ldwio	r2,0(r2)
				| ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
81114120:	10800214 	ori	r2,r2,8
    }

    /* enable global interrupt */
    if (dev->prefetcher_enable)
    {
    	temporary_control = 
81114124:	e0bffb15 	stw	r2,-20(fp)
    			IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
				| ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
    	
    	IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
81114128:	e0bffa17 	ldw	r2,-24(fp)
8111412c:	10800617 	ldw	r2,24(r2)
81114130:	e0fffb17 	ldw	r3,-20(fp)
81114134:	10c00035 	stwio	r3,0(r2)
    			| (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    	
    	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
    }

    return;
81114138:	00000c06 	br	8111416c <alt_msgdma_irq+0x170>
    	IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
    			temporary_control);
    }
    else
    {
    	temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) 
8111413c:	e0bffa17 	ldw	r2,-24(fp)
81114140:	10800317 	ldw	r2,12(r2)
81114144:	10800104 	addi	r2,r2,4
81114148:	10800037 	ldwio	r2,0(r2)
    			| (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
8111414c:	10800414 	ori	r2,r2,16
    	IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
    			temporary_control);
    }
    else
    {
    	temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) 
81114150:	e0bffb15 	stw	r2,-20(fp)
    			| (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    	
    	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
81114154:	e0bffa17 	ldw	r2,-24(fp)
81114158:	10800317 	ldw	r2,12(r2)
8111415c:	10800104 	addi	r2,r2,4
81114160:	e0fffb17 	ldw	r3,-20(fp)
81114164:	10c00035 	stwio	r3,0(r2)
    }

    return;
81114168:	0001883a 	nop
}
8111416c:	e037883a 	mov	sp,fp
81114170:	dfc00117 	ldw	ra,4(sp)
81114174:	df000017 	ldw	fp,0(sp)
81114178:	dec00204 	addi	sp,sp,8
8111417c:	f800283a 	ret

81114180 <alt_msgdma_construct_standard_descriptor>:
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *read_address, 
	alt_u32 *write_address, 
	alt_u32 length, 
	alt_u32 control)
{
81114180:	defffb04 	addi	sp,sp,-20
81114184:	df000415 	stw	fp,16(sp)
81114188:	df000404 	addi	fp,sp,16
8111418c:	e13ffc15 	stw	r4,-16(fp)
81114190:	e17ffd15 	stw	r5,-12(fp)
81114194:	e1bffe15 	stw	r6,-8(fp)
81114198:	e1ffff15 	stw	r7,-4(fp)
    if(dev->max_byte < length ||
8111419c:	e0bffc17 	ldw	r2,-16(fp)
811141a0:	10c01217 	ldw	r3,72(r2)
811141a4:	e0800117 	ldw	r2,4(fp)
811141a8:	18800436 	bltu	r3,r2,811141bc <alt_msgdma_construct_standard_descriptor+0x3c>
       dev->enhanced_features != 0
811141ac:	e0bffc17 	ldw	r2,-16(fp)
811141b0:	10801703 	ldbu	r2,92(r2)
	alt_u32 *read_address, 
	alt_u32 *write_address, 
	alt_u32 length, 
	alt_u32 control)
{
    if(dev->max_byte < length ||
811141b4:	10803fcc 	andi	r2,r2,255
811141b8:	10000226 	beq	r2,zero,811141c4 <alt_msgdma_construct_standard_descriptor+0x44>
       dev->enhanced_features != 0
      )
    {
        return -EINVAL;
811141bc:	00bffa84 	movi	r2,-22
811141c0:	00000e06 	br	811141fc <alt_msgdma_construct_standard_descriptor+0x7c>
    }
    descriptor->read_address = read_address;
811141c4:	e0bffd17 	ldw	r2,-12(fp)
811141c8:	e0fffe17 	ldw	r3,-8(fp)
811141cc:	10c00015 	stw	r3,0(r2)
    descriptor->write_address = write_address;
811141d0:	e0bffd17 	ldw	r2,-12(fp)
811141d4:	e0ffff17 	ldw	r3,-4(fp)
811141d8:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
811141dc:	e0bffd17 	ldw	r2,-12(fp)
811141e0:	e0c00117 	ldw	r3,4(fp)
811141e4:	10c00215 	stw	r3,8(r2)
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
811141e8:	e0800217 	ldw	r2,8(fp)
811141ec:	10e00034 	orhi	r3,r2,32768
811141f0:	e0bffd17 	ldw	r2,-12(fp)
811141f4:	10c00315 	stw	r3,12(r2)
    
    return 0;
811141f8:	0005883a 	mov	r2,zero
}
811141fc:	e037883a 	mov	sp,fp
81114200:	df000017 	ldw	fp,0(sp)
81114204:	dec00104 	addi	sp,sp,4
81114208:	f800283a 	ret

8111420c <alt_msgdma_construct_extended_descriptor>:
	alt_u16 sequence_number, 
	alt_u8 read_burst_count, 
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
8111420c:	defff604 	addi	sp,sp,-40
81114210:	df000915 	stw	fp,36(sp)
81114214:	df000904 	addi	fp,sp,36
81114218:	e13ff715 	stw	r4,-36(fp)
8111421c:	e17ff815 	stw	r5,-32(fp)
81114220:	e1bff915 	stw	r6,-28(fp)
81114224:	e1fffa15 	stw	r7,-24(fp)
81114228:	e1800317 	ldw	r6,12(fp)
8111422c:	e1400417 	ldw	r5,16(fp)
81114230:	e1000517 	ldw	r4,20(fp)
81114234:	e0c00617 	ldw	r3,24(fp)
81114238:	e0800717 	ldw	r2,28(fp)
8111423c:	e1bffb0d 	sth	r6,-20(fp)
81114240:	e17ffc05 	stb	r5,-16(fp)
81114244:	e13ffd05 	stb	r4,-12(fp)
81114248:	e0fffe0d 	sth	r3,-8(fp)
8111424c:	e0bfff0d 	sth	r2,-4(fp)
    if(dev->max_byte < length ||
81114250:	e0bff717 	ldw	r2,-36(fp)
81114254:	10c01217 	ldw	r3,72(r2)
81114258:	e0800117 	ldw	r2,4(fp)
8111425c:	18801936 	bltu	r3,r2,811142c4 <alt_msgdma_construct_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
81114260:	e13ff717 	ldw	r4,-36(fp)
81114264:	20801317 	ldw	r2,76(r4)
81114268:	20c01417 	ldw	r3,80(r4)
8111426c:	e13ffe0b 	ldhu	r4,-8(fp)
81114270:	213fffcc 	andi	r4,r4,65535
81114274:	2015883a 	mov	r10,r4
81114278:	0017883a 	mov	r11,zero
	alt_u8 read_burst_count, 
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
8111427c:	1ac01136 	bltu	r3,r11,811142c4 <alt_msgdma_construct_extended_descriptor+0xb8>
81114280:	58c0011e 	bne	r11,r3,81114288 <alt_msgdma_construct_extended_descriptor+0x7c>
81114284:	12800f36 	bltu	r2,r10,811142c4 <alt_msgdma_construct_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
81114288:	e13ff717 	ldw	r4,-36(fp)
8111428c:	20801317 	ldw	r2,76(r4)
81114290:	20c01417 	ldw	r3,80(r4)
81114294:	e13fff0b 	ldhu	r4,-4(fp)
81114298:	213fffcc 	andi	r4,r4,65535
8111429c:	2011883a 	mov	r8,r4
811142a0:	0013883a 	mov	r9,zero
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
811142a4:	1a400736 	bltu	r3,r9,811142c4 <alt_msgdma_construct_extended_descriptor+0xb8>
811142a8:	48c0011e 	bne	r9,r3,811142b0 <alt_msgdma_construct_extended_descriptor+0xa4>
811142ac:	12000536 	bltu	r2,r8,811142c4 <alt_msgdma_construct_extended_descriptor+0xb8>
       dev->max_stride < write_stride ||
       dev->enhanced_features != 1 
811142b0:	e0bff717 	ldw	r2,-36(fp)
811142b4:	10801703 	ldbu	r2,92(r2)
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
811142b8:	10803fcc 	andi	r2,r2,255
811142bc:	10800060 	cmpeqi	r2,r2,1
811142c0:	1000021e 	bne	r2,zero,811142cc <alt_msgdma_construct_extended_descriptor+0xc0>
       dev->enhanced_features != 1 
      )
    {
        return -EINVAL;
811142c4:	00bffa84 	movi	r2,-22
811142c8:	00002106 	br	81114350 <alt_msgdma_construct_extended_descriptor+0x144>
    }
    
    descriptor->read_address_low = read_address;
811142cc:	e0bff817 	ldw	r2,-32(fp)
811142d0:	e0fff917 	ldw	r3,-28(fp)
811142d4:	10c00015 	stw	r3,0(r2)
    descriptor->write_address_low = write_address;
811142d8:	e0bff817 	ldw	r2,-32(fp)
811142dc:	e0fffa17 	ldw	r3,-24(fp)
811142e0:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
811142e4:	e0bff817 	ldw	r2,-32(fp)
811142e8:	e0c00117 	ldw	r3,4(fp)
811142ec:	10c00215 	stw	r3,8(r2)
    descriptor->sequence_number = sequence_number;
811142f0:	e0bff817 	ldw	r2,-32(fp)
811142f4:	e0fffb0b 	ldhu	r3,-20(fp)
811142f8:	10c0030d 	sth	r3,12(r2)
    descriptor->read_burst_count = read_burst_count;
811142fc:	e0bff817 	ldw	r2,-32(fp)
81114300:	e0fffc03 	ldbu	r3,-16(fp)
81114304:	10c00385 	stb	r3,14(r2)
    descriptor->write_burst_count = write_burst_count;
81114308:	e0bff817 	ldw	r2,-32(fp)
8111430c:	e0fffd03 	ldbu	r3,-12(fp)
81114310:	10c003c5 	stb	r3,15(r2)
    descriptor->read_stride = read_stride;
81114314:	e0bff817 	ldw	r2,-32(fp)
81114318:	e0fffe0b 	ldhu	r3,-8(fp)
8111431c:	10c0040d 	sth	r3,16(r2)
    descriptor->write_stride = write_stride;
81114320:	e0bff817 	ldw	r2,-32(fp)
81114324:	e0ffff0b 	ldhu	r3,-4(fp)
81114328:	10c0048d 	sth	r3,18(r2)
    descriptor->read_address_high = NULL;
8111432c:	e0bff817 	ldw	r2,-32(fp)
81114330:	10000515 	stw	zero,20(r2)
    descriptor->write_address_high = NULL;
81114334:	e0bff817 	ldw	r2,-32(fp)
81114338:	10000615 	stw	zero,24(r2)
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
8111433c:	e0800217 	ldw	r2,8(fp)
81114340:	10e00034 	orhi	r3,r2,32768
81114344:	e0bff817 	ldw	r2,-32(fp)
81114348:	10c00715 	stw	r3,28(r2)

  return 0 ;
8111434c:	0005883a 	mov	r2,zero

}
81114350:	e037883a 	mov	sp,fp
81114354:	df000017 	ldw	fp,0(sp)
81114358:	dec00104 	addi	sp,sp,4
8111435c:	f800283a 	ret

81114360 <alt_msgdma_descriptor_async_transfer>:
 */
static int alt_msgdma_descriptor_async_transfer (
	alt_msgdma_dev *dev, 
	alt_msgdma_standard_descriptor *standard_desc, 
	alt_msgdma_extended_descriptor *extended_desc)
{
81114360:	defff004 	addi	sp,sp,-64
81114364:	dfc00f15 	stw	ra,60(sp)
81114368:	df000e15 	stw	fp,56(sp)
8111436c:	df000e04 	addi	fp,sp,56
81114370:	e13ffd15 	stw	r4,-12(fp)
81114374:	e17ffe15 	stw	r5,-8(fp)
81114378:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 control = 0;
8111437c:	e03ff315 	stw	zero,-52(fp)
    alt_irq_context context = 0;
81114380:	e03ff415 	stw	zero,-48(fp)
    alt_u16 counter = 0;
81114384:	e03ff20d 	sth	zero,-56(fp)
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
81114388:	e0bffd17 	ldw	r2,-12(fp)
8111438c:	10800317 	ldw	r2,12(r2)
81114390:	10800204 	addi	r2,r2,8
81114394:	10800037 	ldwio	r2,0(r2)
	alt_msgdma_extended_descriptor *extended_desc)
{
    alt_u32 control = 0;
    alt_irq_context context = 0;
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
81114398:	10bfffcc 	andi	r2,r2,65535
8111439c:	e0bff515 	stw	r2,-44(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
811143a0:	e0bffd17 	ldw	r2,-12(fp)
811143a4:	10800317 	ldw	r2,12(r2)
811143a8:	10800204 	addi	r2,r2,8
811143ac:	10800037 	ldwio	r2,0(r2)
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
811143b0:	1004d43a 	srli	r2,r2,16
811143b4:	e0bff615 	stw	r2,-40(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;

	/* Return with error immediately if one of read/write buffer is full */
	if((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
811143b8:	e0bffd17 	ldw	r2,-12(fp)
811143bc:	10800917 	ldw	r2,36(r2)
811143c0:	e0fff617 	ldw	r3,-40(fp)
811143c4:	1880042e 	bgeu	r3,r2,811143d8 <alt_msgdma_descriptor_async_transfer+0x78>
		(dev->descriptor_fifo_depth <= fifo_read_fill_level))
811143c8:	e0bffd17 	ldw	r2,-12(fp)
811143cc:	10800917 	ldw	r2,36(r2)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;

	/* Return with error immediately if one of read/write buffer is full */
	if((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
811143d0:	e0fff517 	ldw	r3,-44(fp)
811143d4:	18800236 	bltu	r3,r2,811143e0 <alt_msgdma_descriptor_async_transfer+0x80>
		(dev->descriptor_fifo_depth <= fifo_read_fill_level))
	{
		/*at least one write or read FIFO descriptor buffer is full,
		returning so that this function is non-blocking*/
		return -ENOSPC;
811143d8:	00bff904 	movi	r2,-28
811143dc:	00008f06 	br	8111461c <alt_msgdma_descriptor_async_transfer+0x2bc>
	ALT_SEM_PEND (dev->regs_lock, 0);
	
	/* Stop the msgdma dispatcher from issuing more descriptors to the
	read or write masters  */
	/* stop issuing more descriptors */
	control = ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
811143e0:	00800804 	movi	r2,32
811143e4:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811143e8:	0005303a 	rdctl	r2,status
811143ec:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811143f0:	e0fff717 	ldw	r3,-36(fp)
811143f4:	00bfff84 	movi	r2,-2
811143f8:	1884703a 	and	r2,r3,r2
811143fc:	1001703a 	wrctl	status,r2
  
  return context;
81114400:	e0bff717 	ldw	r2,-36(fp)
	/* making sure the read-modify-write below can't be pre-empted */
	context = alt_irq_disable_all();
81114404:	e0bff415 	stw	r2,-48(fp)
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
81114408:	e0bffd17 	ldw	r2,-12(fp)
8111440c:	10800317 	ldw	r2,12(r2)
81114410:	10800104 	addi	r2,r2,4
81114414:	e0fff317 	ldw	r3,-52(fp)
81114418:	10c00035 	stwio	r3,0(r2)
	/*
	* Clear any (previous) status register information
	* that might occlude our error checking later.
	*/
	IOWR_ALTERA_MSGDMA_CSR_STATUS(
8111441c:	e0bffd17 	ldw	r2,-12(fp)
81114420:	10800317 	ldw	r2,12(r2)
81114424:	e0fffd17 	ldw	r3,-12(fp)
81114428:	18c00317 	ldw	r3,12(r3)
8111442c:	18c00037 	ldwio	r3,0(r3)
81114430:	10c00035 	stwio	r3,0(r2)
81114434:	e0bff417 	ldw	r2,-48(fp)
81114438:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8111443c:	e0bffc17 	ldw	r2,-16(fp)
81114440:	1001703a 	wrctl	status,r2
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
	alt_irq_enable_all(context);

    if (NULL != standard_desc && NULL == extended_desc)
81114444:	e0bffe17 	ldw	r2,-8(fp)
81114448:	10001a26 	beq	r2,zero,811144b4 <alt_msgdma_descriptor_async_transfer+0x154>
8111444c:	e0bfff17 	ldw	r2,-4(fp)
81114450:	1000181e 	bne	r2,zero,811144b4 <alt_msgdma_descriptor_async_transfer+0x154>
    {
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
81114454:	00000d06 	br	8111448c <alt_msgdma_descriptor_async_transfer+0x12c>
		dev->csr_base, dev->descriptor_base, standard_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
81114458:	01000044 	movi	r4,1
8111445c:	1115da80 	call	81115da8 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
81114460:	e0bff20b 	ldhu	r2,-56(fp)
81114464:	1084e230 	cmpltui	r2,r2,5000
81114468:	1000051e 	bne	r2,zero,81114480 <alt_msgdma_descriptor_async_transfer+0x120>
            {
                alt_printf("time out after 5 msec while waiting" 
8111446c:	012044b4 	movhi	r4,33042
81114470:	2120ba04 	addi	r4,r4,-32024
81114474:	111675c0 	call	8111675c <alt_printf>
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
				
                return -ETIME;
81114478:	00bff084 	movi	r2,-62
8111447c:	00006706 	br	8111461c <alt_msgdma_descriptor_async_transfer+0x2bc>
            }
            counter++; 
81114480:	e0bff20b 	ldhu	r2,-56(fp)
81114484:	10800044 	addi	r2,r2,1
81114488:	e0bff20d 	sth	r2,-56(fp)

    if (NULL != standard_desc && NULL == extended_desc)
    {
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
8111448c:	e0bffd17 	ldw	r2,-12(fp)
81114490:	10c00317 	ldw	r3,12(r2)
81114494:	e0bffd17 	ldw	r2,-12(fp)
81114498:	10800417 	ldw	r2,16(r2)
8111449c:	e1bffe17 	ldw	r6,-8(fp)
811144a0:	100b883a 	mov	r5,r2
811144a4:	1809883a 	mov	r4,r3
811144a8:	1113e3c0 	call	81113e3c <alt_msgdma_write_standard_descriptor>
811144ac:	103fea1e 	bne	r2,zero,81114458 <__reset+0xfb0f4458>
	IOWR_ALTERA_MSGDMA_CSR_STATUS(
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
	alt_irq_enable_all(context);

    if (NULL != standard_desc && NULL == extended_desc)
811144b0:	00001f06 	br	81114530 <alt_msgdma_descriptor_async_transfer+0x1d0>
                return -ETIME;
            }
            counter++; 
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
811144b4:	e0bffe17 	ldw	r2,-8(fp)
811144b8:	10001b1e 	bne	r2,zero,81114528 <alt_msgdma_descriptor_async_transfer+0x1c8>
811144bc:	e0bfff17 	ldw	r2,-4(fp)
811144c0:	10001926 	beq	r2,zero,81114528 <alt_msgdma_descriptor_async_transfer+0x1c8>
    {
        counter = 0; /* reset counter */
811144c4:	e03ff20d 	sth	zero,-56(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
811144c8:	00000d06 	br	81114500 <alt_msgdma_descriptor_async_transfer+0x1a0>
		dev->csr_base, 
		dev->descriptor_base, 
		extended_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
811144cc:	01000044 	movi	r4,1
811144d0:	1115da80 	call	81115da8 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
811144d4:	e0bff20b 	ldhu	r2,-56(fp)
811144d8:	1084e230 	cmpltui	r2,r2,5000
811144dc:	1000051e 	bne	r2,zero,811144f4 <alt_msgdma_descriptor_async_transfer+0x194>
            {
                alt_printf("time out after 5 msec while waiting free FIFO buffer" 
811144e0:	012044b4 	movhi	r4,33042
811144e4:	2120d004 	addi	r4,r4,-31936
811144e8:	111675c0 	call	8111675c <alt_printf>
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
				
                return -ETIME;
811144ec:	00bff084 	movi	r2,-62
811144f0:	00004a06 	br	8111461c <alt_msgdma_descriptor_async_transfer+0x2bc>
            }
            counter++; 
811144f4:	e0bff20b 	ldhu	r2,-56(fp)
811144f8:	10800044 	addi	r2,r2,1
811144fc:	e0bff20d 	sth	r2,-56(fp)
    else if (NULL == standard_desc && NULL != extended_desc)
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
81114500:	e0bffd17 	ldw	r2,-12(fp)
81114504:	10c00317 	ldw	r3,12(r2)
81114508:	e0bffd17 	ldw	r2,-12(fp)
8111450c:	10800417 	ldw	r2,16(r2)
81114510:	e1bfff17 	ldw	r6,-4(fp)
81114514:	100b883a 	mov	r5,r2
81114518:	1809883a 	mov	r4,r3
8111451c:	1113ed00 	call	81113ed0 <alt_msgdma_write_extended_descriptor>
81114520:	103fea1e 	bne	r2,zero,811144cc <__reset+0xfb0f44cc>
                return -ETIME;
            }
            counter++; 
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
81114524:	00000206 	br	81114530 <alt_msgdma_descriptor_async_transfer+0x1d0>
		* semaphore so that other threads can access the registers.
		*/
		ALT_SEM_POST (dev->regs_lock);
		
        /* operation not permitted due to descriptor type conflict */
        return -EPERM; 
81114528:	00bfffc4 	movi	r2,-1
8111452c:	00003b06 	br	8111461c <alt_msgdma_descriptor_async_transfer+0x2bc>
    * If a callback routine has been previously registered which will be
    * called from the msgdma ISR. Set up controller to:
    *  - Run
    *  - Stop on an error with any particular descriptor
    */
    if(dev->callback)
81114530:	e0bffd17 	ldw	r2,-12(fp)
81114534:	10800b17 	ldw	r2,44(r2)
81114538:	10001c26 	beq	r2,zero,811145ac <alt_msgdma_descriptor_async_transfer+0x24c>
    {

        control |= (dev->control |
8111453c:	e0bffd17 	ldw	r2,-12(fp)
81114540:	10c00d17 	ldw	r3,52(r2)
81114544:	e0bff317 	ldw	r2,-52(fp)
81114548:	1884b03a 	or	r2,r3,r2
8111454c:	10800514 	ori	r2,r2,20
81114550:	e0bff315 	stw	r2,-52(fp)
                    ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK |
                    ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK );
        control &=  (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
81114554:	e0fff317 	ldw	r3,-52(fp)
81114558:	00bff7c4 	movi	r2,-33
8111455c:	1884703a 	and	r2,r3,r2
81114560:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81114564:	0005303a 	rdctl	r2,status
81114568:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8111456c:	e0fffa17 	ldw	r3,-24(fp)
81114570:	00bfff84 	movi	r2,-2
81114574:	1884703a 	and	r2,r3,r2
81114578:	1001703a 	wrctl	status,r2
  
  return context;
8111457c:	e0bffa17 	ldw	r2,-24(fp)
    /* making sure the read-modify-write below can't be pre-empted */
        context = alt_irq_disable_all(); 
81114580:	e0bff415 	stw	r2,-48(fp)
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
81114584:	e0bffd17 	ldw	r2,-12(fp)
81114588:	10800317 	ldw	r2,12(r2)
8111458c:	10800104 	addi	r2,r2,4
81114590:	e0fff317 	ldw	r3,-52(fp)
81114594:	10c00035 	stwio	r3,0(r2)
81114598:	e0bff417 	ldw	r2,-48(fp)
8111459c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811145a0:	e0bff817 	ldw	r2,-32(fp)
811145a4:	1001703a 	wrctl	status,r2
811145a8:	00001b06 	br	81114618 <alt_msgdma_descriptor_async_transfer+0x2b8>
    *   - Stop on an error with any particular descriptor
    *   - Disable interrupt generation
    */
    else
    {
        control |= (dev->control |
811145ac:	e0bffd17 	ldw	r2,-12(fp)
811145b0:	10c00d17 	ldw	r3,52(r2)
811145b4:	e0bff317 	ldw	r2,-52(fp)
811145b8:	1884b03a 	or	r2,r3,r2
811145bc:	10800114 	ori	r2,r2,4
811145c0:	e0bff315 	stw	r2,-52(fp)
                    ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK );
        control &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) &
811145c4:	e0fff317 	ldw	r3,-52(fp)
811145c8:	00bff3c4 	movi	r2,-49
811145cc:	1884703a 	and	r2,r3,r2
811145d0:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811145d4:	0005303a 	rdctl	r2,status
811145d8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811145dc:	e0fffb17 	ldw	r3,-20(fp)
811145e0:	00bfff84 	movi	r2,-2
811145e4:	1884703a 	and	r2,r3,r2
811145e8:	1001703a 	wrctl	status,r2
  
  return context;
811145ec:	e0bffb17 	ldw	r2,-20(fp)
                   (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
        /* making sure the read-modify-write below can't be pre-empted */
        context = alt_irq_disable_all();
811145f0:	e0bff415 	stw	r2,-48(fp)
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
811145f4:	e0bffd17 	ldw	r2,-12(fp)
811145f8:	10800317 	ldw	r2,12(r2)
811145fc:	10800104 	addi	r2,r2,4
81114600:	e0fff317 	ldw	r3,-52(fp)
81114604:	10c00035 	stwio	r3,0(r2)
81114608:	e0bff417 	ldw	r2,-48(fp)
8111460c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81114610:	e0bff917 	ldw	r2,-28(fp)
81114614:	1001703a 	wrctl	status,r2
	 * Now that access to the registers is complete, release the registers
     * semaphore so that other threads can access the registers.
     */
    ALT_SEM_POST (dev->regs_lock);
    
    return 0;
81114618:	0005883a 	mov	r2,zero
}
8111461c:	e037883a 	mov	sp,fp
81114620:	dfc00117 	ldw	ra,4(sp)
81114624:	df000017 	ldw	fp,0(sp)
81114628:	dec00204 	addi	sp,sp,8
8111462c:	f800283a 	ret

81114630 <alt_msgdma_descriptor_sync_transfer>:
 */
static int alt_msgdma_descriptor_sync_transfer (
	alt_msgdma_dev *dev, 
	alt_msgdma_standard_descriptor *standard_desc, 
	alt_msgdma_extended_descriptor *extended_desc)
{
81114630:	defff004 	addi	sp,sp,-64
81114634:	dfc00f15 	stw	ra,60(sp)
81114638:	df000e15 	stw	fp,56(sp)
8111463c:	df000e04 	addi	fp,sp,56
81114640:	e13ffd15 	stw	r4,-12(fp)
81114644:	e17ffe15 	stw	r5,-8(fp)
81114648:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 control=0;
8111464c:	e03ff615 	stw	zero,-40(fp)
    alt_irq_context context=0;
81114650:	e03ff715 	stw	zero,-36(fp)
    alt_u32 csr_status = 0;
81114654:	e03ff215 	stw	zero,-56(fp)
    alt_u16 counter = 0;
81114658:	e03ff30d 	sth	zero,-52(fp)
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
8111465c:	e0bffd17 	ldw	r2,-12(fp)
81114660:	10800317 	ldw	r2,12(r2)
81114664:	10800204 	addi	r2,r2,8
81114668:	10800037 	ldwio	r2,0(r2)
{
    alt_u32 control=0;
    alt_irq_context context=0;
    alt_u32 csr_status = 0;
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
8111466c:	10bfffcc 	andi	r2,r2,65535
81114670:	e0bff415 	stw	r2,-48(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
81114674:	e0bffd17 	ldw	r2,-12(fp)
81114678:	10800317 	ldw	r2,12(r2)
8111467c:	10800204 	addi	r2,r2,8
81114680:	10800037 	ldwio	r2,0(r2)
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
81114684:	1004d43a 	srli	r2,r2,16
81114688:	e0bff515 	stw	r2,-44(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;
    alt_u32 error = ALTERA_MSGDMA_CSR_STOPPED_ON_ERROR_MASK | 
8111468c:	00807804 	movi	r2,480
81114690:	e0bff815 	stw	r2,-32(fp)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
81114694:	00001906 	br	811146fc <alt_msgdma_descriptor_sync_transfer+0xcc>
    	(dev->descriptor_fifo_depth <= fifo_read_fill_level))
    { 
        alt_busy_sleep(1); /* delay 1us */
81114698:	01000044 	movi	r4,1
8111469c:	1115da80 	call	81115da8 <alt_busy_sleep>
        if(5000 <= counter) /* time_out if waiting longer than 5 msec */
811146a0:	e0bff30b 	ldhu	r2,-52(fp)
811146a4:	1084e230 	cmpltui	r2,r2,5000
811146a8:	1000051e 	bne	r2,zero,811146c0 <alt_msgdma_descriptor_sync_transfer+0x90>
        {
            alt_printf("time out after 5 msec while waiting free FIFO buffer"
811146ac:	012044b4 	movhi	r4,33042
811146b0:	2120e604 	addi	r4,r4,-31848
811146b4:	111675c0 	call	8111675c <alt_printf>
				" for storing descriptor\n");
            return -ETIME;
811146b8:	00bff084 	movi	r2,-62
811146bc:	0000b506 	br	81114994 <alt_msgdma_descriptor_sync_transfer+0x364>
        }
        counter++;  
811146c0:	e0bff30b 	ldhu	r2,-52(fp)
811146c4:	10800044 	addi	r2,r2,1
811146c8:	e0bff30d 	sth	r2,-52(fp)
        fifo_read_fill_level = (
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
811146cc:	e0bffd17 	ldw	r2,-12(fp)
811146d0:	10800317 	ldw	r2,12(r2)
811146d4:	10800204 	addi	r2,r2,8
811146d8:	10800037 	ldwio	r2,0(r2)
            alt_printf("time out after 5 msec while waiting free FIFO buffer"
				" for storing descriptor\n");
            return -ETIME;
        }
        counter++;  
        fifo_read_fill_level = (
811146dc:	10bfffcc 	andi	r2,r2,65535
811146e0:	e0bff415 	stw	r2,-48(fp)
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
        fifo_write_fill_level = (
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
811146e4:	e0bffd17 	ldw	r2,-12(fp)
811146e8:	10800317 	ldw	r2,12(r2)
811146ec:	10800204 	addi	r2,r2,8
811146f0:	10800037 	ldwio	r2,0(r2)
        counter++;  
        fifo_read_fill_level = (
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
        fifo_write_fill_level = (
811146f4:	1004d43a 	srli	r2,r2,16
811146f8:	e0bff515 	stw	r2,-44(fp)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
811146fc:	e0bffd17 	ldw	r2,-12(fp)
81114700:	10800917 	ldw	r2,36(r2)
81114704:	e0fff517 	ldw	r3,-44(fp)
81114708:	18bfe32e 	bgeu	r3,r2,81114698 <__reset+0xfb0f4698>
    	(dev->descriptor_fifo_depth <= fifo_read_fill_level))
8111470c:	e0bffd17 	ldw	r2,-12(fp)
81114710:	10800917 	ldw	r2,36(r2)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
81114714:	e0fff417 	ldw	r3,-48(fp)
81114718:	18bfdf2e 	bgeu	r3,r2,81114698 <__reset+0xfb0f4698>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8111471c:	0005303a 	rdctl	r2,status
81114720:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81114724:	e0fffc17 	ldw	r3,-16(fp)
81114728:	00bfff84 	movi	r2,-2
8111472c:	1884703a 	and	r2,r3,r2
81114730:	1001703a 	wrctl	status,r2
  
  return context;
81114734:	e0bffc17 	ldw	r2,-16(fp)
	ALT_SEM_PEND (dev->regs_lock, 0);
    
    /* Stop the msgdma dispatcher from issuing more descriptors to the
    read or write masters  */
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();
81114738:	e0bff715 	stw	r2,-36(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
8111473c:	e0bffd17 	ldw	r2,-12(fp)
81114740:	10800317 	ldw	r2,12(r2)
81114744:	10800104 	addi	r2,r2,4
81114748:	00c00804 	movi	r3,32
8111474c:	10c00035 	stwio	r3,0(r2)
        ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
    /*
    * Clear any (previous) status register information
    * that might occlude our error checking later.
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
81114750:	e0bffd17 	ldw	r2,-12(fp)
81114754:	10800317 	ldw	r2,12(r2)
81114758:	e0fffd17 	ldw	r3,-12(fp)
8111475c:	18c00317 	ldw	r3,12(r3)
81114760:	18c00037 	ldwio	r3,0(r3)
81114764:	10c00035 	stwio	r3,0(r2)
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));

    if (NULL != standard_desc && NULL == extended_desc)
81114768:	e0bffe17 	ldw	r2,-8(fp)
8111476c:	10001b26 	beq	r2,zero,811147dc <alt_msgdma_descriptor_sync_transfer+0x1ac>
81114770:	e0bfff17 	ldw	r2,-4(fp)
81114774:	1000191e 	bne	r2,zero,811147dc <alt_msgdma_descriptor_sync_transfer+0x1ac>
    {
        counter = 0; /* reset counter */
81114778:	e03ff30d 	sth	zero,-52(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
8111477c:	00000d06 	br	811147b4 <alt_msgdma_descriptor_sync_transfer+0x184>
			dev->csr_base, dev->descriptor_base, standard_desc))
        {     
            alt_busy_sleep(1); /* delay 1us */
81114780:	01000044 	movi	r4,1
81114784:	1115da80 	call	81115da8 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
81114788:	e0bff30b 	ldhu	r2,-52(fp)
8111478c:	1084e230 	cmpltui	r2,r2,5000
81114790:	1000051e 	bne	r2,zero,811147a8 <alt_msgdma_descriptor_sync_transfer+0x178>
            {
                alt_printf("time out after 5 msec while writing standard" 
81114794:	012044b4 	movhi	r4,33042
81114798:	2120fa04 	addi	r4,r4,-31768
8111479c:	111675c0 	call	8111675c <alt_printf>
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
				
                return -ETIME;
811147a0:	00bff084 	movi	r2,-62
811147a4:	00007b06 	br	81114994 <alt_msgdma_descriptor_sync_transfer+0x364>
            }
            counter++;    
811147a8:	e0bff30b 	ldhu	r2,-52(fp)
811147ac:	10800044 	addi	r2,r2,1
811147b0:	e0bff30d 	sth	r2,-52(fp)
    if (NULL != standard_desc && NULL == extended_desc)
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
811147b4:	e0bffd17 	ldw	r2,-12(fp)
811147b8:	10c00317 	ldw	r3,12(r2)
811147bc:	e0bffd17 	ldw	r2,-12(fp)
811147c0:	10800417 	ldw	r2,16(r2)
811147c4:	e1bffe17 	ldw	r6,-8(fp)
811147c8:	100b883a 	mov	r5,r2
811147cc:	1809883a 	mov	r4,r3
811147d0:	1113e3c0 	call	81113e3c <alt_msgdma_write_standard_descriptor>
811147d4:	103fea1e 	bne	r2,zero,81114780 <__reset+0xfb0f4780>
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));

    if (NULL != standard_desc && NULL == extended_desc)
811147d8:	00001f06 	br	81114858 <alt_msgdma_descriptor_sync_transfer+0x228>
                return -ETIME;
            }
            counter++;    
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
811147dc:	e0bffe17 	ldw	r2,-8(fp)
811147e0:	10001b1e 	bne	r2,zero,81114850 <alt_msgdma_descriptor_sync_transfer+0x220>
811147e4:	e0bfff17 	ldw	r2,-4(fp)
811147e8:	10001926 	beq	r2,zero,81114850 <alt_msgdma_descriptor_sync_transfer+0x220>
    {
        counter = 0; /* reset counter */
811147ec:	e03ff30d 	sth	zero,-52(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
811147f0:	00000d06 	br	81114828 <alt_msgdma_descriptor_sync_transfer+0x1f8>
			dev->csr_base, dev->descriptor_base, extended_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
811147f4:	01000044 	movi	r4,1
811147f8:	1115da80 	call	81115da8 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
811147fc:	e0bff30b 	ldhu	r2,-52(fp)
81114800:	1084e230 	cmpltui	r2,r2,5000
81114804:	1000051e 	bne	r2,zero,8111481c <alt_msgdma_descriptor_sync_transfer+0x1ec>
            {
                alt_printf("time out after 5 msec while writing extended" 
81114808:	012044b4 	movhi	r4,33042
8111480c:	21210b04 	addi	r4,r4,-31700
81114810:	111675c0 	call	8111675c <alt_printf>
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
				
                return -ETIME;
81114814:	00bff084 	movi	r2,-62
81114818:	00005e06 	br	81114994 <alt_msgdma_descriptor_sync_transfer+0x364>
            }
            counter++;
8111481c:	e0bff30b 	ldhu	r2,-52(fp)
81114820:	10800044 	addi	r2,r2,1
81114824:	e0bff30d 	sth	r2,-52(fp)
    else if (NULL == standard_desc && NULL != extended_desc)
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
81114828:	e0bffd17 	ldw	r2,-12(fp)
8111482c:	10c00317 	ldw	r3,12(r2)
81114830:	e0bffd17 	ldw	r2,-12(fp)
81114834:	10800417 	ldw	r2,16(r2)
81114838:	e1bfff17 	ldw	r6,-4(fp)
8111483c:	100b883a 	mov	r5,r2
81114840:	1809883a 	mov	r4,r3
81114844:	1113ed00 	call	81113ed0 <alt_msgdma_write_extended_descriptor>
81114848:	103fea1e 	bne	r2,zero,811147f4 <__reset+0xfb0f47f4>
                return -ETIME;
            }
            counter++;    
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
8111484c:	00000206 	br	81114858 <alt_msgdma_descriptor_sync_transfer+0x228>
		* semaphore so that other threads can access the registers.
		*/
		ALT_SEM_POST (dev->regs_lock);
		
        /* operation not permitted due to descriptor type conflict */
        return -EPERM; 
81114850:	00bfffc4 	movi	r2,-1
81114854:	00004f06 	br	81114994 <alt_msgdma_descriptor_sync_transfer+0x364>
    * Set up msgdma controller to:
    * - Disable interrupt generation
    * - Run once a valid descriptor is written to controller
    * - Stop on an error with any particular descriptor
    */
     IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
81114858:	e0bffd17 	ldw	r2,-12(fp)
8111485c:	10800317 	ldw	r2,12(r2)
81114860:	10800104 	addi	r2,r2,4
81114864:	e0fffd17 	ldw	r3,-12(fp)
81114868:	19000d17 	ldw	r4,52(r3)
8111486c:	00fff2c4 	movi	r3,-53
81114870:	20c6703a 	and	r3,r4,r3
81114874:	18c00114 	ori	r3,r3,4
81114878:	10c00035 	stwio	r3,0(r2)
8111487c:	e0bff717 	ldw	r2,-36(fp)
81114880:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81114884:	e0bff917 	ldw	r2,-28(fp)
81114888:	1001703a 	wrctl	status,r2
		(~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) &
		(~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK)) ;
	 
	alt_irq_enable_all(context);
     
    counter = 0; /* reset counter */ 
8111488c:	e03ff30d 	sth	zero,-52(fp)
	
	csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
81114890:	e0bffd17 	ldw	r2,-12(fp)
81114894:	10800317 	ldw	r2,12(r2)
81114898:	10800037 	ldwio	r2,0(r2)
8111489c:	e0bff215 	stw	r2,-56(fp)
	
    /* Wait for any pending transfers to complete or checking any errors or 
    conditions causing descriptor to stop dispatching */
    while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK))
811148a0:	00001106 	br	811148e8 <alt_msgdma_descriptor_sync_transfer+0x2b8>
    {
        alt_busy_sleep(1); /* delay 1us */
811148a4:	01000044 	movi	r4,1
811148a8:	1115da80 	call	81115da8 <alt_busy_sleep>
        if(5000 <= counter) /* time_out if waiting longer than 5 msec */
811148ac:	e0bff30b 	ldhu	r2,-52(fp)
811148b0:	1084e230 	cmpltui	r2,r2,5000
811148b4:	1000051e 	bne	r2,zero,811148cc <alt_msgdma_descriptor_sync_transfer+0x29c>
        {
            alt_printf("time out after 5 msec while waiting for any pending" 
811148b8:	012044b4 	movhi	r4,33042
811148bc:	21211c04 	addi	r4,r4,-31632
811148c0:	111675c0 	call	8111675c <alt_printf>
			* Now that access to the registers is complete, release the registers
			* semaphore so that other threads can access the registers.
			*/
			ALT_SEM_POST (dev->regs_lock);
			
            return -ETIME;
811148c4:	00bff084 	movi	r2,-62
811148c8:	00003206 	br	81114994 <alt_msgdma_descriptor_sync_transfer+0x364>
        }
        counter++;
811148cc:	e0bff30b 	ldhu	r2,-52(fp)
811148d0:	10800044 	addi	r2,r2,1
811148d4:	e0bff30d 	sth	r2,-52(fp)
        csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
811148d8:	e0bffd17 	ldw	r2,-12(fp)
811148dc:	10800317 	ldw	r2,12(r2)
811148e0:	10800037 	ldwio	r2,0(r2)
811148e4:	e0bff215 	stw	r2,-56(fp)
	
	csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
	
    /* Wait for any pending transfers to complete or checking any errors or 
    conditions causing descriptor to stop dispatching */
    while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK))
811148e8:	e0fff217 	ldw	r3,-56(fp)
811148ec:	e0bff817 	ldw	r2,-32(fp)
811148f0:	1884703a 	and	r2,r3,r2
811148f4:	1000031e 	bne	r2,zero,81114904 <alt_msgdma_descriptor_sync_transfer+0x2d4>
811148f8:	e0bff217 	ldw	r2,-56(fp)
811148fc:	1080004c 	andi	r2,r2,1
81114900:	103fe81e 	bne	r2,zero,811148a4 <__reset+0xfb0f48a4>
    }
    

    /*Errors or conditions causing the dispatcher stopping issuing read/write 
      commands to masters*/
    if(0 != (csr_status & error))
81114904:	e0fff217 	ldw	r3,-56(fp)
81114908:	e0bff817 	ldw	r2,-32(fp)
8111490c:	1884703a 	and	r2,r3,r2
81114910:	10000226 	beq	r2,zero,8111491c <alt_msgdma_descriptor_sync_transfer+0x2ec>
		* Now that access to the registers is complete, release the registers
		* semaphore so that other threads can access the registers.
		*/
		ALT_SEM_POST (dev->regs_lock);
		
        return error;
81114914:	e0bff817 	ldw	r2,-32(fp)
81114918:	00001e06 	br	81114994 <alt_msgdma_descriptor_sync_transfer+0x364>
    }

    /* Stop the msgdma dispatcher from issuing more descriptors to the
    read or write masters  */
    /* stop issuing more descriptors */
    control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) | 
8111491c:	e0bffd17 	ldw	r2,-12(fp)
81114920:	10800317 	ldw	r2,12(r2)
81114924:	10800104 	addi	r2,r2,4
81114928:	10800037 	ldwio	r2,0(r2)
8111492c:	10800814 	ori	r2,r2,32
81114930:	e0bff615 	stw	r2,-40(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81114934:	0005303a 	rdctl	r2,status
81114938:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8111493c:	e0fffa17 	ldw	r3,-24(fp)
81114940:	00bfff84 	movi	r2,-2
81114944:	1884703a 	and	r2,r3,r2
81114948:	1001703a 	wrctl	status,r2
  
  return context;
8111494c:	e0bffa17 	ldw	r2,-24(fp)
	ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();  
81114950:	e0bff715 	stw	r2,-36(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
81114954:	e0bffd17 	ldw	r2,-12(fp)
81114958:	10800317 	ldw	r2,12(r2)
8111495c:	10800104 	addi	r2,r2,4
81114960:	e0fff617 	ldw	r3,-40(fp)
81114964:	10c00035 	stwio	r3,0(r2)
    /*
    * Clear any (previous) status register information
    * that might occlude our error checking later.
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
81114968:	e0bffd17 	ldw	r2,-12(fp)
8111496c:	10800317 	ldw	r2,12(r2)
81114970:	e0fffd17 	ldw	r3,-12(fp)
81114974:	18c00317 	ldw	r3,12(r3)
81114978:	18c00037 	ldwio	r3,0(r3)
8111497c:	10c00035 	stwio	r3,0(r2)
81114980:	e0bff717 	ldw	r2,-36(fp)
81114984:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81114988:	e0bffb17 	ldw	r2,-20(fp)
8111498c:	1001703a 	wrctl	status,r2
	* Now that access to the registers is complete, release the registers
	* semaphore so that other threads can access the registers.
	*/
    ALT_SEM_POST (dev->regs_lock);
    
    return 0;
81114990:	0005883a 	mov	r2,zero

}
81114994:	e037883a 	mov	sp,fp
81114998:	dfc00117 	ldw	ra,4(sp)
8111499c:	df000017 	ldw	fp,0(sp)
811149a0:	dec00204 	addi	sp,sp,8
811149a4:	f800283a 	ret

811149a8 <alt_msgdma_construct_standard_st_to_mm_descriptor>:
 */
int alt_msgdma_construct_standard_st_to_mm_descriptor (
    alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *write_address, alt_u32 length, alt_u32 control)
{
811149a8:	defff804 	addi	sp,sp,-32
811149ac:	dfc00715 	stw	ra,28(sp)
811149b0:	df000615 	stw	fp,24(sp)
811149b4:	df000604 	addi	fp,sp,24
811149b8:	e13ffc15 	stw	r4,-16(fp)
811149bc:	e17ffd15 	stw	r5,-12(fp)
811149c0:	e1bffe15 	stw	r6,-8(fp)
811149c4:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, NULL, 
811149c8:	e0800217 	ldw	r2,8(fp)
811149cc:	d8800115 	stw	r2,4(sp)
811149d0:	e0bfff17 	ldw	r2,-4(fp)
811149d4:	d8800015 	stw	r2,0(sp)
811149d8:	e1fffe17 	ldw	r7,-8(fp)
811149dc:	000d883a 	mov	r6,zero
811149e0:	e17ffd17 	ldw	r5,-12(fp)
811149e4:	e13ffc17 	ldw	r4,-16(fp)
811149e8:	11141800 	call	81114180 <alt_msgdma_construct_standard_descriptor>
            write_address, length, control);
}
811149ec:	e037883a 	mov	sp,fp
811149f0:	dfc00117 	ldw	ra,4(sp)
811149f4:	df000017 	ldw	fp,0(sp)
811149f8:	dec00204 	addi	sp,sp,8
811149fc:	f800283a 	ret

81114a00 <alt_msgdma_construct_standard_mm_to_st_descriptor>:
    alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *read_address,
	alt_u32 length,
	alt_u32 control)
{
81114a00:	defff804 	addi	sp,sp,-32
81114a04:	dfc00715 	stw	ra,28(sp)
81114a08:	df000615 	stw	fp,24(sp)
81114a0c:	df000604 	addi	fp,sp,24
81114a10:	e13ffc15 	stw	r4,-16(fp)
81114a14:	e17ffd15 	stw	r5,-12(fp)
81114a18:	e1bffe15 	stw	r6,-8(fp)
81114a1c:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, read_address, 
81114a20:	e0800217 	ldw	r2,8(fp)
81114a24:	d8800115 	stw	r2,4(sp)
81114a28:	e0bfff17 	ldw	r2,-4(fp)
81114a2c:	d8800015 	stw	r2,0(sp)
81114a30:	000f883a 	mov	r7,zero
81114a34:	e1bffe17 	ldw	r6,-8(fp)
81114a38:	e17ffd17 	ldw	r5,-12(fp)
81114a3c:	e13ffc17 	ldw	r4,-16(fp)
81114a40:	11141800 	call	81114180 <alt_msgdma_construct_standard_descriptor>
            NULL, length, control);

}
81114a44:	e037883a 	mov	sp,fp
81114a48:	dfc00117 	ldw	ra,4(sp)
81114a4c:	df000017 	ldw	fp,0(sp)
81114a50:	dec00204 	addi	sp,sp,8
81114a54:	f800283a 	ret

81114a58 <alt_msgdma_construct_standard_mm_to_mm_descriptor>:
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *read_address, 
	alt_u32 *write_address, 
	alt_u32 length, 
	alt_u32 control)
{
81114a58:	defff804 	addi	sp,sp,-32
81114a5c:	dfc00715 	stw	ra,28(sp)
81114a60:	df000615 	stw	fp,24(sp)
81114a64:	df000604 	addi	fp,sp,24
81114a68:	e13ffc15 	stw	r4,-16(fp)
81114a6c:	e17ffd15 	stw	r5,-12(fp)
81114a70:	e1bffe15 	stw	r6,-8(fp)
81114a74:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, read_address, 
81114a78:	e0800317 	ldw	r2,12(fp)
81114a7c:	d8800115 	stw	r2,4(sp)
81114a80:	e0800217 	ldw	r2,8(fp)
81114a84:	d8800015 	stw	r2,0(sp)
81114a88:	e1ffff17 	ldw	r7,-4(fp)
81114a8c:	e1bffe17 	ldw	r6,-8(fp)
81114a90:	e17ffd17 	ldw	r5,-12(fp)
81114a94:	e13ffc17 	ldw	r4,-16(fp)
81114a98:	11141800 	call	81114180 <alt_msgdma_construct_standard_descriptor>
            write_address, length, control);
}
81114a9c:	e037883a 	mov	sp,fp
81114aa0:	dfc00117 	ldw	ra,4(sp)
81114aa4:	df000017 	ldw	fp,0(sp)
81114aa8:	dec00204 	addi	sp,sp,8
81114aac:	f800283a 	ret

81114ab0 <alt_msgdma_construct_extended_st_to_mm_descriptor>:
	alt_u32 length, 
	alt_u32 control, 
	alt_u16 sequence_number, 
	alt_u8 write_burst_count, 
	alt_u16 write_stride)
{
81114ab0:	defff004 	addi	sp,sp,-64
81114ab4:	dfc00f15 	stw	ra,60(sp)
81114ab8:	df000e15 	stw	fp,56(sp)
81114abc:	df000e04 	addi	fp,sp,56
81114ac0:	e13ff915 	stw	r4,-28(fp)
81114ac4:	e17ffa15 	stw	r5,-24(fp)
81114ac8:	e1bffb15 	stw	r6,-20(fp)
81114acc:	e1fffc15 	stw	r7,-16(fp)
81114ad0:	e1000317 	ldw	r4,12(fp)
81114ad4:	e0c00417 	ldw	r3,16(fp)
81114ad8:	e0800517 	ldw	r2,20(fp)
81114adc:	e13ffd0d 	sth	r4,-12(fp)
81114ae0:	e0fffe05 	stb	r3,-8(fp)
81114ae4:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, 
81114ae8:	e0bffd0b 	ldhu	r2,-12(fp)
81114aec:	e0fffe03 	ldbu	r3,-8(fp)
81114af0:	e13fff0b 	ldhu	r4,-4(fp)
81114af4:	d9000615 	stw	r4,24(sp)
81114af8:	d8000515 	stw	zero,20(sp)
81114afc:	d8c00415 	stw	r3,16(sp)
81114b00:	d8000315 	stw	zero,12(sp)
81114b04:	d8800215 	stw	r2,8(sp)
81114b08:	e0800217 	ldw	r2,8(fp)
81114b0c:	d8800115 	stw	r2,4(sp)
81114b10:	e0bffc17 	ldw	r2,-16(fp)
81114b14:	d8800015 	stw	r2,0(sp)
81114b18:	e1fffb17 	ldw	r7,-20(fp)
81114b1c:	000d883a 	mov	r6,zero
81114b20:	e17ffa17 	ldw	r5,-24(fp)
81114b24:	e13ff917 	ldw	r4,-28(fp)
81114b28:	111420c0 	call	8111420c <alt_msgdma_construct_extended_descriptor>
            NULL, write_address, length, control, sequence_number, 0, 
            write_burst_count, 0, write_stride);
}
81114b2c:	e037883a 	mov	sp,fp
81114b30:	dfc00117 	ldw	ra,4(sp)
81114b34:	df000017 	ldw	fp,0(sp)
81114b38:	dec00204 	addi	sp,sp,8
81114b3c:	f800283a 	ret

81114b40 <alt_msgdma_construct_extended_mm_to_st_descriptor>:
	alt_u32 length,
	alt_u32 control,
	alt_u16 sequence_number,
	alt_u8 read_burst_count, 
	alt_u16 read_stride)
{
81114b40:	defff004 	addi	sp,sp,-64
81114b44:	dfc00f15 	stw	ra,60(sp)
81114b48:	df000e15 	stw	fp,56(sp)
81114b4c:	df000e04 	addi	fp,sp,56
81114b50:	e13ff915 	stw	r4,-28(fp)
81114b54:	e17ffa15 	stw	r5,-24(fp)
81114b58:	e1bffb15 	stw	r6,-20(fp)
81114b5c:	e1fffc15 	stw	r7,-16(fp)
81114b60:	e1000317 	ldw	r4,12(fp)
81114b64:	e0c00417 	ldw	r3,16(fp)
81114b68:	e0800517 	ldw	r2,20(fp)
81114b6c:	e13ffd0d 	sth	r4,-12(fp)
81114b70:	e0fffe05 	stb	r3,-8(fp)
81114b74:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, read_address, 
81114b78:	e0bffd0b 	ldhu	r2,-12(fp)
81114b7c:	e0fffe03 	ldbu	r3,-8(fp)
81114b80:	e13fff0b 	ldhu	r4,-4(fp)
81114b84:	d8000615 	stw	zero,24(sp)
81114b88:	d9000515 	stw	r4,20(sp)
81114b8c:	d8000415 	stw	zero,16(sp)
81114b90:	d8c00315 	stw	r3,12(sp)
81114b94:	d8800215 	stw	r2,8(sp)
81114b98:	e0800217 	ldw	r2,8(fp)
81114b9c:	d8800115 	stw	r2,4(sp)
81114ba0:	e0bffc17 	ldw	r2,-16(fp)
81114ba4:	d8800015 	stw	r2,0(sp)
81114ba8:	000f883a 	mov	r7,zero
81114bac:	e1bffb17 	ldw	r6,-20(fp)
81114bb0:	e17ffa17 	ldw	r5,-24(fp)
81114bb4:	e13ff917 	ldw	r4,-28(fp)
81114bb8:	111420c0 	call	8111420c <alt_msgdma_construct_extended_descriptor>
            NULL, length, control, sequence_number, read_burst_count, 0, 
            read_stride, 0);

}
81114bbc:	e037883a 	mov	sp,fp
81114bc0:	dfc00117 	ldw	ra,4(sp)
81114bc4:	df000017 	ldw	fp,0(sp)
81114bc8:	dec00204 	addi	sp,sp,8
81114bcc:	f800283a 	ret

81114bd0 <alt_msgdma_construct_extended_mm_to_mm_descriptor>:
    alt_u16 sequence_number, 
    alt_u8 read_burst_count, 
    alt_u8 write_burst_count,
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
81114bd0:	deffee04 	addi	sp,sp,-72
81114bd4:	dfc01115 	stw	ra,68(sp)
81114bd8:	df001015 	stw	fp,64(sp)
81114bdc:	df001004 	addi	fp,sp,64
81114be0:	e13ff715 	stw	r4,-36(fp)
81114be4:	e17ff815 	stw	r5,-32(fp)
81114be8:	e1bff915 	stw	r6,-28(fp)
81114bec:	e1fffa15 	stw	r7,-24(fp)
81114bf0:	e1800417 	ldw	r6,16(fp)
81114bf4:	e1400517 	ldw	r5,20(fp)
81114bf8:	e1000617 	ldw	r4,24(fp)
81114bfc:	e0c00717 	ldw	r3,28(fp)
81114c00:	e0800817 	ldw	r2,32(fp)
81114c04:	e1bffb0d 	sth	r6,-20(fp)
81114c08:	e17ffc05 	stb	r5,-16(fp)
81114c0c:	e13ffd05 	stb	r4,-12(fp)
81114c10:	e0fffe0d 	sth	r3,-8(fp)
81114c14:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, 
81114c18:	e0bffb0b 	ldhu	r2,-20(fp)
81114c1c:	e0fffc03 	ldbu	r3,-16(fp)
81114c20:	e13ffd03 	ldbu	r4,-12(fp)
81114c24:	e17ffe0b 	ldhu	r5,-8(fp)
81114c28:	e1bfff0b 	ldhu	r6,-4(fp)
81114c2c:	d9800615 	stw	r6,24(sp)
81114c30:	d9400515 	stw	r5,20(sp)
81114c34:	d9000415 	stw	r4,16(sp)
81114c38:	d8c00315 	stw	r3,12(sp)
81114c3c:	d8800215 	stw	r2,8(sp)
81114c40:	e0800317 	ldw	r2,12(fp)
81114c44:	d8800115 	stw	r2,4(sp)
81114c48:	e0800217 	ldw	r2,8(fp)
81114c4c:	d8800015 	stw	r2,0(sp)
81114c50:	e1fffa17 	ldw	r7,-24(fp)
81114c54:	e1bff917 	ldw	r6,-28(fp)
81114c58:	e17ff817 	ldw	r5,-32(fp)
81114c5c:	e13ff717 	ldw	r4,-36(fp)
81114c60:	111420c0 	call	8111420c <alt_msgdma_construct_extended_descriptor>
            read_address, write_address, length, control, sequence_number, 
            read_burst_count, write_burst_count, read_stride, write_stride);

}
81114c64:	e037883a 	mov	sp,fp
81114c68:	dfc00117 	ldw	ra,4(sp)
81114c6c:	df000017 	ldw	fp,0(sp)
81114c70:	dec00204 	addi	sp,sp,8
81114c74:	f800283a 	ret

81114c78 <alt_msgdma_construct_prefetcher_standard_descriptor>:
	alt_msgdma_prefetcher_standard_descriptor *descriptor,
	alt_u32 read_address, 
	alt_u32 write_address, 
	alt_u32 length, 
	alt_u32 control)
{
81114c78:	defffb04 	addi	sp,sp,-20
81114c7c:	df000415 	stw	fp,16(sp)
81114c80:	df000404 	addi	fp,sp,16
81114c84:	e13ffc15 	stw	r4,-16(fp)
81114c88:	e17ffd15 	stw	r5,-12(fp)
81114c8c:	e1bffe15 	stw	r6,-8(fp)
81114c90:	e1ffff15 	stw	r7,-4(fp)
    if(dev->max_byte < length ||
81114c94:	e0bffc17 	ldw	r2,-16(fp)
81114c98:	10c01217 	ldw	r3,72(r2)
81114c9c:	e0800117 	ldw	r2,4(fp)
81114ca0:	18800436 	bltu	r3,r2,81114cb4 <alt_msgdma_construct_prefetcher_standard_descriptor+0x3c>
       dev->enhanced_features != 0
81114ca4:	e0bffc17 	ldw	r2,-16(fp)
81114ca8:	10801703 	ldbu	r2,92(r2)
	alt_u32 read_address, 
	alt_u32 write_address, 
	alt_u32 length, 
	alt_u32 control)
{
    if(dev->max_byte < length ||
81114cac:	10803fcc 	andi	r2,r2,255
81114cb0:	10000226 	beq	r2,zero,81114cbc <alt_msgdma_construct_prefetcher_standard_descriptor+0x44>
       dev->enhanced_features != 0
      )
    {
        return -EINVAL;
81114cb4:	00bffa84 	movi	r2,-22
81114cb8:	00001406 	br	81114d0c <alt_msgdma_construct_prefetcher_standard_descriptor+0x94>
    }
    descriptor->read_address = read_address;
81114cbc:	e0bffd17 	ldw	r2,-12(fp)
81114cc0:	e0fffe17 	ldw	r3,-8(fp)
81114cc4:	10c00015 	stw	r3,0(r2)
    descriptor->write_address = write_address;
81114cc8:	e0bffd17 	ldw	r2,-12(fp)
81114ccc:	e0ffff17 	ldw	r3,-4(fp)
81114cd0:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
81114cd4:	e0bffd17 	ldw	r2,-12(fp)
81114cd8:	e0c00117 	ldw	r3,4(fp)
81114cdc:	10c00215 	stw	r3,8(r2)
    /* have descriptor point to itself for park_mode */
    descriptor->next_desc_ptr = (alt_u32)descriptor;  
81114ce0:	e0fffd17 	ldw	r3,-12(fp)
81114ce4:	e0bffd17 	ldw	r2,-12(fp)
81114ce8:	10c00315 	stw	r3,12(r2)
    
    /* clear control own_by_hw bit field (SW owns this descriptor)*/
    descriptor->control = (control 
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
81114cec:	e0c00217 	ldw	r3,8(fp)
81114cf0:	00900034 	movhi	r2,16384
81114cf4:	10bfffc4 	addi	r2,r2,-1
81114cf8:	1884703a 	and	r2,r3,r2
81114cfc:	10e00034 	orhi	r3,r2,32768
    descriptor->transfer_length = length;
    /* have descriptor point to itself for park_mode */
    descriptor->next_desc_ptr = (alt_u32)descriptor;  
    
    /* clear control own_by_hw bit field (SW owns this descriptor)*/
    descriptor->control = (control 
81114d00:	e0bffd17 	ldw	r2,-12(fp)
81114d04:	10c00715 	stw	r3,28(r2)
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
    
    return 0;
81114d08:	0005883a 	mov	r2,zero
}
81114d0c:	e037883a 	mov	sp,fp
81114d10:	df000017 	ldw	fp,0(sp)
81114d14:	dec00104 	addi	sp,sp,4
81114d18:	f800283a 	ret

81114d1c <alt_msgdma_construct_prefetcher_extended_descriptor>:
	alt_u16 sequence_number, 
	alt_u8 read_burst_count, 
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
81114d1c:	defff404 	addi	sp,sp,-48
81114d20:	df000b15 	stw	fp,44(sp)
81114d24:	df000b04 	addi	fp,sp,44
81114d28:	e13ff715 	stw	r4,-36(fp)
81114d2c:	e17ff815 	stw	r5,-32(fp)
81114d30:	e1bff915 	stw	r6,-28(fp)
81114d34:	e1fffa15 	stw	r7,-24(fp)
81114d38:	e1800517 	ldw	r6,20(fp)
81114d3c:	e1400617 	ldw	r5,24(fp)
81114d40:	e1000717 	ldw	r4,28(fp)
81114d44:	e0c00817 	ldw	r3,32(fp)
81114d48:	e0800917 	ldw	r2,36(fp)
81114d4c:	e1bffb0d 	sth	r6,-20(fp)
81114d50:	e17ffc05 	stb	r5,-16(fp)
81114d54:	e13ffd05 	stb	r4,-12(fp)
81114d58:	e0fffe0d 	sth	r3,-8(fp)
81114d5c:	e0bfff0d 	sth	r2,-4(fp)
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
81114d60:	e0bff717 	ldw	r2,-36(fp)
81114d64:	10c01217 	ldw	r3,72(r2)
81114d68:	e0800317 	ldw	r2,12(fp)
81114d6c:	18801936 	bltu	r3,r2,81114dd4 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
81114d70:	e13ff717 	ldw	r4,-36(fp)
81114d74:	20801317 	ldw	r2,76(r4)
81114d78:	20c01417 	ldw	r3,80(r4)
81114d7c:	e13ffe0b 	ldhu	r4,-8(fp)
81114d80:	213fffcc 	andi	r4,r4,65535
81114d84:	2015883a 	mov	r10,r4
81114d88:	0017883a 	mov	r11,zero
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
81114d8c:	1ac01136 	bltu	r3,r11,81114dd4 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
81114d90:	58c0011e 	bne	r11,r3,81114d98 <alt_msgdma_construct_prefetcher_extended_descriptor+0x7c>
81114d94:	12800f36 	bltu	r2,r10,81114dd4 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
81114d98:	e13ff717 	ldw	r4,-36(fp)
81114d9c:	20801317 	ldw	r2,76(r4)
81114da0:	20c01417 	ldw	r3,80(r4)
81114da4:	e13fff0b 	ldhu	r4,-4(fp)
81114da8:	213fffcc 	andi	r4,r4,65535
81114dac:	2011883a 	mov	r8,r4
81114db0:	0013883a 	mov	r9,zero
	alt_u16 write_stride)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
81114db4:	1a400736 	bltu	r3,r9,81114dd4 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
81114db8:	48c0011e 	bne	r9,r3,81114dc0 <alt_msgdma_construct_prefetcher_extended_descriptor+0xa4>
81114dbc:	12000536 	bltu	r2,r8,81114dd4 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
       dev->max_stride < write_stride ||
       dev->enhanced_features != 1 
81114dc0:	e0bff717 	ldw	r2,-36(fp)
81114dc4:	10801703 	ldbu	r2,92(r2)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
81114dc8:	10803fcc 	andi	r2,r2,255
81114dcc:	10800060 	cmpeqi	r2,r2,1
81114dd0:	1000021e 	bne	r2,zero,81114ddc <alt_msgdma_construct_prefetcher_extended_descriptor+0xc0>
       dev->enhanced_features != 1 
      )
    {
        return -EINVAL;
81114dd4:	00bffa84 	movi	r2,-22
81114dd8:	00003106 	br	81114ea0 <alt_msgdma_construct_prefetcher_extended_descriptor+0x184>
    }
    
    descriptor->read_address_high = read_address_high;
81114ddc:	e0bff817 	ldw	r2,-32(fp)
81114de0:	e0fff917 	ldw	r3,-28(fp)
81114de4:	10c00915 	stw	r3,36(r2)
    descriptor->read_address_low = read_address_low;
81114de8:	e0bff817 	ldw	r2,-32(fp)
81114dec:	e0fffa17 	ldw	r3,-24(fp)
81114df0:	10c00015 	stw	r3,0(r2)
    descriptor->write_address_high = write_address_high;
81114df4:	e0bff817 	ldw	r2,-32(fp)
81114df8:	e0c00117 	ldw	r3,4(fp)
81114dfc:	10c00a15 	stw	r3,40(r2)
    descriptor->write_address_low = write_address_low;
81114e00:	e0bff817 	ldw	r2,-32(fp)
81114e04:	e0c00217 	ldw	r3,8(fp)
81114e08:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
81114e0c:	e0bff817 	ldw	r2,-32(fp)
81114e10:	e0c00317 	ldw	r3,12(fp)
81114e14:	10c00215 	stw	r3,8(r2)
    descriptor->sequence_number = sequence_number;
81114e18:	e0bff817 	ldw	r2,-32(fp)
81114e1c:	e0fffb0b 	ldhu	r3,-20(fp)
81114e20:	10c0070d 	sth	r3,28(r2)
    descriptor->read_burst_count = read_burst_count;
81114e24:	e0bff817 	ldw	r2,-32(fp)
81114e28:	e0fffc03 	ldbu	r3,-16(fp)
81114e2c:	10c00785 	stb	r3,30(r2)
    descriptor->write_burst_count = write_burst_count;
81114e30:	e0bff817 	ldw	r2,-32(fp)
81114e34:	e0fffd03 	ldbu	r3,-12(fp)
81114e38:	10c007c5 	stb	r3,31(r2)
    descriptor->read_stride = read_stride;
81114e3c:	e0bff817 	ldw	r2,-32(fp)
81114e40:	e0fffe0b 	ldhu	r3,-8(fp)
81114e44:	10c0080d 	sth	r3,32(r2)
    descriptor->write_stride = write_stride;
81114e48:	e0bff817 	ldw	r2,-32(fp)
81114e4c:	e0ffff0b 	ldhu	r3,-4(fp)
81114e50:	10c0088d 	sth	r3,34(r2)
    /* have descriptor point to itself */
	node_addr.u64 = (uintptr_t)descriptor;
81114e54:	e0bff817 	ldw	r2,-32(fp)
81114e58:	1019883a 	mov	r12,r2
81114e5c:	001b883a 	mov	r13,zero
81114e60:	e33ff515 	stw	r12,-44(fp)
81114e64:	e37ff615 	stw	r13,-40(fp)
    descriptor->next_desc_ptr_low = node_addr.u32[0];  
81114e68:	e0fff517 	ldw	r3,-44(fp)
81114e6c:	e0bff817 	ldw	r2,-32(fp)
81114e70:	10c00315 	stw	r3,12(r2)
    descriptor->next_desc_ptr_high = node_addr.u32[1];
81114e74:	e0fff617 	ldw	r3,-40(fp)
81114e78:	e0bff817 	ldw	r2,-32(fp)
81114e7c:	10c00b15 	stw	r3,44(r2)
    
    /* clear control own_by_hw bit field (SW still owns this descriptor). */
    descriptor->control = (control 
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
81114e80:	e0c00417 	ldw	r3,16(fp)
81114e84:	00900034 	movhi	r2,16384
81114e88:	10bfffc4 	addi	r2,r2,-1
81114e8c:	1884703a 	and	r2,r3,r2
81114e90:	10e00034 	orhi	r3,r2,32768
	node_addr.u64 = (uintptr_t)descriptor;
    descriptor->next_desc_ptr_low = node_addr.u32[0];  
    descriptor->next_desc_ptr_high = node_addr.u32[1];
    
    /* clear control own_by_hw bit field (SW still owns this descriptor). */
    descriptor->control = (control 
81114e94:	e0bff817 	ldw	r2,-32(fp)
81114e98:	10c00f15 	stw	r3,60(r2)
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;

  return 0 ;
81114e9c:	0005883a 	mov	r2,zero
}
81114ea0:	e037883a 	mov	sp,fp
81114ea4:	df000017 	ldw	fp,0(sp)
81114ea8:	dec00104 	addi	sp,sp,4
81114eac:	f800283a 	ret

81114eb0 <alt_msgdma_construct_prefetcher_standard_mm_to_mm_descriptor>:
	alt_msgdma_prefetcher_standard_descriptor *descriptor,
	alt_u32 read_address,
	alt_u32 write_address,
	alt_u32 length,
	alt_u32 control)
{
81114eb0:	defff804 	addi	sp,sp,-32
81114eb4:	dfc00715 	stw	ra,28(sp)
81114eb8:	df000615 	stw	fp,24(sp)
81114ebc:	df000604 	addi	fp,sp,24
81114ec0:	e13ffc15 	stw	r4,-16(fp)
81114ec4:	e17ffd15 	stw	r5,-12(fp)
81114ec8:	e1bffe15 	stw	r6,-8(fp)
81114ecc:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
81114ed0:	e0800317 	ldw	r2,12(fp)
81114ed4:	d8800115 	stw	r2,4(sp)
81114ed8:	e0800217 	ldw	r2,8(fp)
81114edc:	d8800015 	stw	r2,0(sp)
81114ee0:	e1ffff17 	ldw	r7,-4(fp)
81114ee4:	e1bffe17 	ldw	r6,-8(fp)
81114ee8:	e17ffd17 	ldw	r5,-12(fp)
81114eec:	e13ffc17 	ldw	r4,-16(fp)
81114ef0:	1114c780 	call	81114c78 <alt_msgdma_construct_prefetcher_standard_descriptor>
    		read_address, write_address, length, control);
}
81114ef4:	e037883a 	mov	sp,fp
81114ef8:	dfc00117 	ldw	ra,4(sp)
81114efc:	df000017 	ldw	fp,0(sp)
81114f00:	dec00204 	addi	sp,sp,8
81114f04:	f800283a 	ret

81114f08 <alt_msgdma_construct_prefetcher_standard_st_to_mm_descriptor>:
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_standard_descriptor *descriptor, 
	alt_u32 write_address, 
	alt_u32 length, 
	alt_u32 control)
{
81114f08:	defff804 	addi	sp,sp,-32
81114f0c:	dfc00715 	stw	ra,28(sp)
81114f10:	df000615 	stw	fp,24(sp)
81114f14:	df000604 	addi	fp,sp,24
81114f18:	e13ffc15 	stw	r4,-16(fp)
81114f1c:	e17ffd15 	stw	r5,-12(fp)
81114f20:	e1bffe15 	stw	r6,-8(fp)
81114f24:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
81114f28:	e0800217 	ldw	r2,8(fp)
81114f2c:	d8800115 	stw	r2,4(sp)
81114f30:	e0bfff17 	ldw	r2,-4(fp)
81114f34:	d8800015 	stw	r2,0(sp)
81114f38:	e1fffe17 	ldw	r7,-8(fp)
81114f3c:	000d883a 	mov	r6,zero
81114f40:	e17ffd17 	ldw	r5,-12(fp)
81114f44:	e13ffc17 	ldw	r4,-16(fp)
81114f48:	1114c780 	call	81114c78 <alt_msgdma_construct_prefetcher_standard_descriptor>
    		0, write_address, length, control);
}
81114f4c:	e037883a 	mov	sp,fp
81114f50:	dfc00117 	ldw	ra,4(sp)
81114f54:	df000017 	ldw	fp,0(sp)
81114f58:	dec00204 	addi	sp,sp,8
81114f5c:	f800283a 	ret

81114f60 <alt_msgdma_construct_prefetcher_standard_mm_to_st_descriptor>:
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_standard_descriptor *descriptor, 
	alt_u32 read_address, 
	alt_u32 length, 
	alt_u32 control)
{
81114f60:	defff804 	addi	sp,sp,-32
81114f64:	dfc00715 	stw	ra,28(sp)
81114f68:	df000615 	stw	fp,24(sp)
81114f6c:	df000604 	addi	fp,sp,24
81114f70:	e13ffc15 	stw	r4,-16(fp)
81114f74:	e17ffd15 	stw	r5,-12(fp)
81114f78:	e1bffe15 	stw	r6,-8(fp)
81114f7c:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
81114f80:	e0800217 	ldw	r2,8(fp)
81114f84:	d8800115 	stw	r2,4(sp)
81114f88:	e0bfff17 	ldw	r2,-4(fp)
81114f8c:	d8800015 	stw	r2,0(sp)
81114f90:	000f883a 	mov	r7,zero
81114f94:	e1bffe17 	ldw	r6,-8(fp)
81114f98:	e17ffd17 	ldw	r5,-12(fp)
81114f9c:	e13ffc17 	ldw	r4,-16(fp)
81114fa0:	1114c780 	call	81114c78 <alt_msgdma_construct_prefetcher_standard_descriptor>
    		read_address, 0, length, control);
}
81114fa4:	e037883a 	mov	sp,fp
81114fa8:	dfc00117 	ldw	ra,4(sp)
81114fac:	df000017 	ldw	fp,0(sp)
81114fb0:	dec00204 	addi	sp,sp,8
81114fb4:	f800283a 	ret

81114fb8 <alt_msgdma_construct_prefetcher_extended_st_to_mm_descriptor>:
	alt_u32 length, 
	alt_u32 control, 
	alt_u16 sequence_number,
	alt_u8 write_burst_count,
	alt_u16 write_stride)
{
81114fb8:	deffee04 	addi	sp,sp,-72
81114fbc:	dfc01115 	stw	ra,68(sp)
81114fc0:	df001015 	stw	fp,64(sp)
81114fc4:	df001004 	addi	fp,sp,64
81114fc8:	e13ff915 	stw	r4,-28(fp)
81114fcc:	e17ffa15 	stw	r5,-24(fp)
81114fd0:	e1bffb15 	stw	r6,-20(fp)
81114fd4:	e1fffc15 	stw	r7,-16(fp)
81114fd8:	e1000417 	ldw	r4,16(fp)
81114fdc:	e0c00517 	ldw	r3,20(fp)
81114fe0:	e0800617 	ldw	r2,24(fp)
81114fe4:	e13ffd0d 	sth	r4,-12(fp)
81114fe8:	e0fffe05 	stb	r3,-8(fp)
81114fec:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor, 
81114ff0:	e0bffd0b 	ldhu	r2,-12(fp)
81114ff4:	e0fffe03 	ldbu	r3,-8(fp)
81114ff8:	e13fff0b 	ldhu	r4,-4(fp)
81114ffc:	d9000815 	stw	r4,32(sp)
81115000:	d8000715 	stw	zero,28(sp)
81115004:	d8c00615 	stw	r3,24(sp)
81115008:	d8000515 	stw	zero,20(sp)
8111500c:	d8800415 	stw	r2,16(sp)
81115010:	e0800317 	ldw	r2,12(fp)
81115014:	d8800315 	stw	r2,12(sp)
81115018:	e0800217 	ldw	r2,8(fp)
8111501c:	d8800215 	stw	r2,8(sp)
81115020:	e0bffc17 	ldw	r2,-16(fp)
81115024:	d8800115 	stw	r2,4(sp)
81115028:	e0bffb17 	ldw	r2,-20(fp)
8111502c:	d8800015 	stw	r2,0(sp)
81115030:	000f883a 	mov	r7,zero
81115034:	000d883a 	mov	r6,zero
81115038:	e17ffa17 	ldw	r5,-24(fp)
8111503c:	e13ff917 	ldw	r4,-28(fp)
81115040:	1114d1c0 	call	81114d1c <alt_msgdma_construct_prefetcher_extended_descriptor>
            0, 0, write_address_high, write_address_low, length, control, 
			sequence_number, 0, write_burst_count, 0, write_stride);
}
81115044:	e037883a 	mov	sp,fp
81115048:	dfc00117 	ldw	ra,4(sp)
8111504c:	df000017 	ldw	fp,0(sp)
81115050:	dec00204 	addi	sp,sp,8
81115054:	f800283a 	ret

81115058 <alt_msgdma_construct_prefetcher_extended_mm_to_st_descriptor>:
	alt_u32 length, 
	alt_u32 control, 
	alt_u16 sequence_number, 
	alt_u8 read_burst_count, 
	alt_u16 read_stride)
{
81115058:	deffee04 	addi	sp,sp,-72
8111505c:	dfc01115 	stw	ra,68(sp)
81115060:	df001015 	stw	fp,64(sp)
81115064:	df001004 	addi	fp,sp,64
81115068:	e13ff915 	stw	r4,-28(fp)
8111506c:	e17ffa15 	stw	r5,-24(fp)
81115070:	e1bffb15 	stw	r6,-20(fp)
81115074:	e1fffc15 	stw	r7,-16(fp)
81115078:	e1000417 	ldw	r4,16(fp)
8111507c:	e0c00517 	ldw	r3,20(fp)
81115080:	e0800617 	ldw	r2,24(fp)
81115084:	e13ffd0d 	sth	r4,-12(fp)
81115088:	e0fffe05 	stb	r3,-8(fp)
8111508c:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor,
81115090:	e0bffd0b 	ldhu	r2,-12(fp)
81115094:	e0fffe03 	ldbu	r3,-8(fp)
81115098:	e13fff0b 	ldhu	r4,-4(fp)
8111509c:	d8000815 	stw	zero,32(sp)
811150a0:	d9000715 	stw	r4,28(sp)
811150a4:	d8000615 	stw	zero,24(sp)
811150a8:	d8c00515 	stw	r3,20(sp)
811150ac:	d8800415 	stw	r2,16(sp)
811150b0:	e0800317 	ldw	r2,12(fp)
811150b4:	d8800315 	stw	r2,12(sp)
811150b8:	e0800217 	ldw	r2,8(fp)
811150bc:	d8800215 	stw	r2,8(sp)
811150c0:	d8000115 	stw	zero,4(sp)
811150c4:	d8000015 	stw	zero,0(sp)
811150c8:	e1fffc17 	ldw	r7,-16(fp)
811150cc:	e1bffb17 	ldw	r6,-20(fp)
811150d0:	e17ffa17 	ldw	r5,-24(fp)
811150d4:	e13ff917 	ldw	r4,-28(fp)
811150d8:	1114d1c0 	call	81114d1c <alt_msgdma_construct_prefetcher_extended_descriptor>
    		read_address_high, read_address_low, 0, 0, length, control, 
			sequence_number, read_burst_count, 0, read_stride, 0);
}
811150dc:	e037883a 	mov	sp,fp
811150e0:	dfc00117 	ldw	ra,4(sp)
811150e4:	df000017 	ldw	fp,0(sp)
811150e8:	dec00204 	addi	sp,sp,8
811150ec:	f800283a 	ret

811150f0 <alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor>:
	alt_u16 sequence_number,
	alt_u8 read_burst_count,
	alt_u8 write_burst_count, 
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
811150f0:	deffec04 	addi	sp,sp,-80
811150f4:	dfc01315 	stw	ra,76(sp)
811150f8:	df001215 	stw	fp,72(sp)
811150fc:	df001204 	addi	fp,sp,72
81115100:	e13ff715 	stw	r4,-36(fp)
81115104:	e17ff815 	stw	r5,-32(fp)
81115108:	e1bff915 	stw	r6,-28(fp)
8111510c:	e1fffa15 	stw	r7,-24(fp)
81115110:	e1800617 	ldw	r6,24(fp)
81115114:	e1400717 	ldw	r5,28(fp)
81115118:	e1000817 	ldw	r4,32(fp)
8111511c:	e0c00917 	ldw	r3,36(fp)
81115120:	e0800a17 	ldw	r2,40(fp)
81115124:	e1bffb0d 	sth	r6,-20(fp)
81115128:	e17ffc05 	stb	r5,-16(fp)
8111512c:	e13ffd05 	stb	r4,-12(fp)
81115130:	e0fffe0d 	sth	r3,-8(fp)
81115134:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor,
81115138:	e0bffb0b 	ldhu	r2,-20(fp)
8111513c:	e0fffc03 	ldbu	r3,-16(fp)
81115140:	e13ffd03 	ldbu	r4,-12(fp)
81115144:	e17ffe0b 	ldhu	r5,-8(fp)
81115148:	e1bfff0b 	ldhu	r6,-4(fp)
8111514c:	d9800815 	stw	r6,32(sp)
81115150:	d9400715 	stw	r5,28(sp)
81115154:	d9000615 	stw	r4,24(sp)
81115158:	d8c00515 	stw	r3,20(sp)
8111515c:	d8800415 	stw	r2,16(sp)
81115160:	e0800517 	ldw	r2,20(fp)
81115164:	d8800315 	stw	r2,12(sp)
81115168:	e0800417 	ldw	r2,16(fp)
8111516c:	d8800215 	stw	r2,8(sp)
81115170:	e0800317 	ldw	r2,12(fp)
81115174:	d8800115 	stw	r2,4(sp)
81115178:	e0800217 	ldw	r2,8(fp)
8111517c:	d8800015 	stw	r2,0(sp)
81115180:	e1fffa17 	ldw	r7,-24(fp)
81115184:	e1bff917 	ldw	r6,-28(fp)
81115188:	e17ff817 	ldw	r5,-32(fp)
8111518c:	e13ff717 	ldw	r4,-36(fp)
81115190:	1114d1c0 	call	81114d1c <alt_msgdma_construct_prefetcher_extended_descriptor>
            read_address_high, read_address_low, write_address_high, 
			write_address_low, length, control, sequence_number, 
			read_burst_count, write_burst_count, read_stride, write_stride);

}
81115194:	e037883a 	mov	sp,fp
81115198:	dfc00117 	ldw	ra,4(sp)
8111519c:	df000017 	ldw	fp,0(sp)
811151a0:	dec00204 	addi	sp,sp,8
811151a4:	f800283a 	ret

811151a8 <alt_msgdma_prefetcher_add_standard_desc_to_list>:
 *           descriptor.next_ptr not pointing back to itslef)
 */
int alt_msgdma_prefetcher_add_standard_desc_to_list (
	alt_msgdma_prefetcher_standard_descriptor** list,
	alt_msgdma_prefetcher_standard_descriptor* descriptor)
{
811151a8:	defffc04 	addi	sp,sp,-16
811151ac:	df000315 	stw	fp,12(sp)
811151b0:	df000304 	addi	fp,sp,12
811151b4:	e13ffe15 	stw	r4,-8(fp)
811151b8:	e17fff15 	stw	r5,-4(fp)
	alt_msgdma_prefetcher_standard_descriptor *last_descr_ptr;
	
	if (descriptor == NULL)
811151bc:	e0bfff17 	ldw	r2,-4(fp)
811151c0:	1000021e 	bne	r2,zero,811151cc <alt_msgdma_prefetcher_add_standard_desc_to_list+0x24>
	{
		return -EINVAL;  /* this descriptor cannot be NULL */
811151c4:	00bffa84 	movi	r2,-22
811151c8:	00002f06 	br	81115288 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
	}
	if (descriptor->next_desc_ptr != (alt_u32)descriptor)
811151cc:	e0bfff17 	ldw	r2,-4(fp)
811151d0:	10c00317 	ldw	r3,12(r2)
811151d4:	e0bfff17 	ldw	r2,-4(fp)
811151d8:	18800226 	beq	r3,r2,811151e4 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x3c>
	{
		return -EINVAL;  /* descriptor.next_ptr must point to itself */
811151dc:	00bffa84 	movi	r2,-22
811151e0:	00002906 	br	81115288 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
	}
	if (*list == NULL)
811151e4:	e0bffe17 	ldw	r2,-8(fp)
811151e8:	10800017 	ldw	r2,0(r2)
811151ec:	1000051e 	bne	r2,zero,81115204 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x5c>
	{
		*list = descriptor;  /* make this root-node if list is empty */
811151f0:	e0bffe17 	ldw	r2,-8(fp)
811151f4:	e0ffff17 	ldw	r3,-4(fp)
811151f8:	10c00015 	stw	r3,0(r2)
		return 0;  /* successfully added */
811151fc:	0005883a 	mov	r2,zero
81115200:	00002106 	br	81115288 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
	}
	if (*list == descriptor)
81115204:	e0bffe17 	ldw	r2,-8(fp)
81115208:	10c00017 	ldw	r3,0(r2)
8111520c:	e0bfff17 	ldw	r2,-4(fp)
81115210:	1880021e 	bne	r3,r2,8111521c <alt_msgdma_prefetcher_add_standard_desc_to_list+0x74>
	{
		return -EINVAL;  /* this descriptor cannot already be root-node */
81115214:	00bffa84 	movi	r2,-22
81115218:	00001b06 	br	81115288 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
	}
	
	/* get to last node in the list */
	last_descr_ptr = *list; /* start at list root-node */
8111521c:	e0bffe17 	ldw	r2,-8(fp)
81115220:	10800017 	ldw	r2,0(r2)
81115224:	e0bffd15 	stw	r2,-12(fp)
	/* traverse list until you get the last node */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)*list)  
81115228:	00000906 	br	81115250 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xa8>
	{
		if (last_descr_ptr->next_desc_ptr == (alt_u32)descriptor)
8111522c:	e0bffd17 	ldw	r2,-12(fp)
81115230:	10c00317 	ldw	r3,12(r2)
81115234:	e0bfff17 	ldw	r2,-4(fp)
81115238:	1880021e 	bne	r3,r2,81115244 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x9c>
		{
			return -EINVAL;  /* descriptor cannot already be in the list */
8111523c:	00bffa84 	movi	r2,-22
81115240:	00001106 	br	81115288 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
		}
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
81115244:	e0bffd17 	ldw	r2,-12(fp)
81115248:	10800317 	ldw	r2,12(r2)
	{
		if (last_descr_ptr->next_desc_ptr == (alt_u32)descriptor)
		{
			return -EINVAL;  /* descriptor cannot already be in the list */
		}
		last_descr_ptr = 
8111524c:	e0bffd15 	stw	r2,-12(fp)
	}
	
	/* get to last node in the list */
	last_descr_ptr = *list; /* start at list root-node */
	/* traverse list until you get the last node */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)*list)  
81115250:	e0bffd17 	ldw	r2,-12(fp)
81115254:	10800317 	ldw	r2,12(r2)
81115258:	e0fffe17 	ldw	r3,-8(fp)
8111525c:	18c00017 	ldw	r3,0(r3)
81115260:	10fff21e 	bne	r2,r3,8111522c <__reset+0xfb0f522c>
		}
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
	}
	/* add this descriptor to end of list */
	last_descr_ptr->next_desc_ptr = (alt_u32)((uintptr_t)descriptor);
81115264:	e0ffff17 	ldw	r3,-4(fp)
81115268:	e0bffd17 	ldw	r2,-12(fp)
8111526c:	10c00315 	stw	r3,12(r2)
	/* ensure new last pointer points the start of the list */
	descriptor->next_desc_ptr = (alt_u32)((uintptr_t)*list);  
81115270:	e0bffe17 	ldw	r2,-8(fp)
81115274:	10800017 	ldw	r2,0(r2)
81115278:	1007883a 	mov	r3,r2
8111527c:	e0bfff17 	ldw	r2,-4(fp)
81115280:	10c00315 	stw	r3,12(r2)
	return 0; /* successfully added */
81115284:	0005883a 	mov	r2,zero
}
81115288:	e037883a 	mov	sp,fp
8111528c:	df000017 	ldw	fp,0(sp)
81115290:	dec00104 	addi	sp,sp,4
81115294:	f800283a 	ret

81115298 <alt_msgdma_prefetcher_add_extended_desc_to_list>:

int alt_msgdma_prefetcher_add_extended_desc_to_list (
	alt_msgdma_prefetcher_extended_descriptor** list,
	alt_msgdma_prefetcher_extended_descriptor* descriptor)
{
81115298:	defff804 	addi	sp,sp,-32
8111529c:	df000715 	stw	fp,28(sp)
811152a0:	df000704 	addi	fp,sp,28
811152a4:	e13ffe15 	stw	r4,-8(fp)
811152a8:	e17fff15 	stw	r5,-4(fp)
	alt_msgdma_prefetcher_extended_descriptor *last_descr_ptr;
	msgdma_addr64 root_node_addr, next_node_addr;
	
	if (descriptor == NULL)
811152ac:	e13fff17 	ldw	r4,-4(fp)
811152b0:	2000021e 	bne	r4,zero,811152bc <alt_msgdma_prefetcher_add_extended_desc_to_list+0x24>
	{
		return -EINVAL;  /* this descriptor cannot be NULL */
811152b4:	00bffa84 	movi	r2,-22
811152b8:	00005906 	br	81115420 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
	}
	
	next_node_addr.u64 = (uintptr_t)descriptor;
811152bc:	e13fff17 	ldw	r4,-4(fp)
811152c0:	2015883a 	mov	r10,r4
811152c4:	0017883a 	mov	r11,zero
811152c8:	e2bffc15 	stw	r10,-16(fp)
811152cc:	e2fffd15 	stw	r11,-12(fp)
	if( (descriptor->next_desc_ptr_low != next_node_addr.u32[0]) &&
811152d0:	e13fff17 	ldw	r4,-4(fp)
811152d4:	21400317 	ldw	r5,12(r4)
811152d8:	e13ffc17 	ldw	r4,-16(fp)
811152dc:	29000626 	beq	r5,r4,811152f8 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x60>
		(descriptor->next_desc_ptr_high != next_node_addr.u32[1]))
811152e0:	e13fff17 	ldw	r4,-4(fp)
811152e4:	21400b17 	ldw	r5,44(r4)
811152e8:	e13ffd17 	ldw	r4,-12(fp)
	{
		return -EINVAL;  /* this descriptor cannot be NULL */
	}
	
	next_node_addr.u64 = (uintptr_t)descriptor;
	if( (descriptor->next_desc_ptr_low != next_node_addr.u32[0]) &&
811152ec:	29000226 	beq	r5,r4,811152f8 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x60>
		(descriptor->next_desc_ptr_high != next_node_addr.u32[1]))
	{
		return -EINVAL;  /* descriptor.next_ptr must point to itself */
811152f0:	00bffa84 	movi	r2,-22
811152f4:	00004a06 	br	81115420 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
	}
	
	if (*list == NULL)
811152f8:	e13ffe17 	ldw	r4,-8(fp)
811152fc:	21000017 	ldw	r4,0(r4)
81115300:	2000051e 	bne	r4,zero,81115318 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x80>
	{
		*list = descriptor;  /* make this the root-node if list is empty */
81115304:	e0bffe17 	ldw	r2,-8(fp)
81115308:	e0ffff17 	ldw	r3,-4(fp)
8111530c:	10c00015 	stw	r3,0(r2)
		return 0;
81115310:	0005883a 	mov	r2,zero
81115314:	00004206 	br	81115420 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
	}
	if (*list == descriptor)
81115318:	e13ffe17 	ldw	r4,-8(fp)
8111531c:	21400017 	ldw	r5,0(r4)
81115320:	e13fff17 	ldw	r4,-4(fp)
81115324:	2900021e 	bne	r5,r4,81115330 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x98>
	{
		return -EINVAL;  /* this descriptor cannot already be root-node */
81115328:	00bffa84 	movi	r2,-22
8111532c:	00003c06 	br	81115420 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
	}
	
	/* get to last node in the list */
	last_descr_ptr = *list; /* start at list root-node */
81115330:	e13ffe17 	ldw	r4,-8(fp)
81115334:	21000017 	ldw	r4,0(r4)
81115338:	e13ff915 	stw	r4,-28(fp)
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)*list;
8111533c:	e13ffe17 	ldw	r4,-8(fp)
81115340:	21000017 	ldw	r4,0(r4)
81115344:	2011883a 	mov	r8,r4
81115348:	0013883a 	mov	r9,zero
8111534c:	e23ffa15 	stw	r8,-24(fp)
81115350:	e27ffb15 	stw	r9,-20(fp)
	
	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
81115354:	00001806 	br	811153b8 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x120>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
	{
		/* first check if descriptor already in the list */
		next_node_addr.u64 = (uintptr_t)descriptor;
81115358:	e13fff17 	ldw	r4,-4(fp)
8111535c:	200d883a 	mov	r6,r4
81115360:	000f883a 	mov	r7,zero
81115364:	e1bffc15 	stw	r6,-16(fp)
81115368:	e1fffd15 	stw	r7,-12(fp)
		if ((last_descr_ptr->next_desc_ptr_low == next_node_addr.u32[0])
8111536c:	e13ff917 	ldw	r4,-28(fp)
81115370:	21400317 	ldw	r5,12(r4)
81115374:	e13ffc17 	ldw	r4,-16(fp)
81115378:	2900061e 	bne	r5,r4,81115394 <alt_msgdma_prefetcher_add_extended_desc_to_list+0xfc>
			&& (last_descr_ptr->next_desc_ptr_high == next_node_addr.u32[1]))
8111537c:	e13ff917 	ldw	r4,-28(fp)
81115380:	21400b17 	ldw	r5,44(r4)
81115384:	e13ffd17 	ldw	r4,-12(fp)
81115388:	2900021e 	bne	r5,r4,81115394 <alt_msgdma_prefetcher_add_extended_desc_to_list+0xfc>
		{
			return -EINVAL;  /* descriptor cannot already be in the list */
8111538c:	00bffa84 	movi	r2,-22
81115390:	00002306 	br	81115420 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
		}
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
81115394:	e13ff917 	ldw	r4,-28(fp)
81115398:	21000317 	ldw	r4,12(r4)
8111539c:	e13ffc15 	stw	r4,-16(fp)
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
811153a0:	e13ff917 	ldw	r4,-28(fp)
811153a4:	21000b17 	ldw	r4,44(r4)
811153a8:	e13ffd15 	stw	r4,-12(fp)
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
811153ac:	e13ffc17 	ldw	r4,-16(fp)
811153b0:	e17ffd17 	ldw	r5,-12(fp)
			return -EINVAL;  /* descriptor cannot already be in the list */
		}
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
811153b4:	e13ff915 	stw	r4,-28(fp)
	last_descr_ptr = *list; /* start at list root-node */
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)*list;
	
	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
811153b8:	e13ff917 	ldw	r4,-28(fp)
811153bc:	21400317 	ldw	r5,12(r4)
811153c0:	e13ffa17 	ldw	r4,-24(fp)
811153c4:	29000426 	beq	r5,r4,811153d8 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x140>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
811153c8:	e13ff917 	ldw	r4,-28(fp)
811153cc:	21400b17 	ldw	r5,44(r4)
811153d0:	e13ffb17 	ldw	r4,-20(fp)
811153d4:	293fe01e 	bne	r5,r4,81115358 <__reset+0xfb0f5358>
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
	}
	/* add this descriptor to end of list */
	next_node_addr.u64 = (uintptr_t)descriptor;
811153d8:	e13fff17 	ldw	r4,-4(fp)
811153dc:	2005883a 	mov	r2,r4
811153e0:	0007883a 	mov	r3,zero
811153e4:	e0bffc15 	stw	r2,-16(fp)
811153e8:	e0fffd15 	stw	r3,-12(fp)
	last_descr_ptr->next_desc_ptr_low = next_node_addr.u32[0];
811153ec:	e0fffc17 	ldw	r3,-16(fp)
811153f0:	e0bff917 	ldw	r2,-28(fp)
811153f4:	10c00315 	stw	r3,12(r2)
	last_descr_ptr->next_desc_ptr_high = next_node_addr.u32[1];
811153f8:	e0fffd17 	ldw	r3,-12(fp)
811153fc:	e0bff917 	ldw	r2,-28(fp)
81115400:	10c00b15 	stw	r3,44(r2)
	/* ensure new last pointer points the beginning of the list */
	descriptor->next_desc_ptr_low = root_node_addr.u32[0];
81115404:	e0fffa17 	ldw	r3,-24(fp)
81115408:	e0bfff17 	ldw	r2,-4(fp)
8111540c:	10c00315 	stw	r3,12(r2)
	descriptor->next_desc_ptr_high = root_node_addr.u32[1];
81115410:	e0fffb17 	ldw	r3,-20(fp)
81115414:	e0bfff17 	ldw	r2,-4(fp)
81115418:	10c00b15 	stw	r3,44(r2)
	return 0;
8111541c:	0005883a 	mov	r2,zero
}
81115420:	e037883a 	mov	sp,fp
81115424:	df000017 	ldw	fp,0(sp)
81115428:	dec00104 	addi	sp,sp,4
8111542c:	f800283a 	ret

81115430 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits>:
 * prefetcher since if used the create descriptor APIs the set_by_hw bits are
 * still set to SW owned. 
 */
int alt_msgdma_prefetcher_set_std_list_own_by_hw_bits (
	alt_msgdma_prefetcher_standard_descriptor *list)
{
81115430:	defffc04 	addi	sp,sp,-16
81115434:	df000315 	stw	fp,12(sp)
81115438:	df000304 	addi	fp,sp,12
8111543c:	e13fff15 	stw	r4,-4(fp)
	alt_u32 descriptor_control_field = 0;
81115440:	e03ffe15 	stw	zero,-8(fp)
	alt_msgdma_prefetcher_standard_descriptor *last_descr_ptr;
	if (list == NULL)
81115444:	e0bfff17 	ldw	r2,-4(fp)
81115448:	1000021e 	bne	r2,zero,81115454 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x24>
	{
		return -EINVAL;  /* this list cannot be empty */
8111544c:	00bffa84 	movi	r2,-22
81115450:	00001906 	br	811154b8 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x88>
	}

	/* update all nodes in the list */
	last_descr_ptr = list; /* start at list root-node */
81115454:	e0bfff17 	ldw	r2,-4(fp)
81115458:	e0bffd15 	stw	r2,-12(fp)
	/* traverse list to update all of the nodes */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
8111545c:	00000a06 	br	81115488 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x58>
	{
		/* get current value */
		descriptor_control_field = last_descr_ptr->control;
81115460:	e0bffd17 	ldw	r2,-12(fp)
81115464:	10800717 	ldw	r2,28(r2)
81115468:	e0bffe15 	stw	r2,-8(fp)
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
8111546c:	e0bffe17 	ldw	r2,-8(fp)
81115470:	10d00034 	orhi	r3,r2,16384
	while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
	{
		/* get current value */
		descriptor_control_field = last_descr_ptr->control;
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
81115474:	e0bffd17 	ldw	r2,-12(fp)
81115478:	10c00715 	stw	r3,28(r2)
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list */
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
8111547c:	e0bffd17 	ldw	r2,-12(fp)
81115480:	10800317 	ldw	r2,12(r2)
		descriptor_control_field = last_descr_ptr->control;
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list */
		last_descr_ptr = 
81115484:	e0bffd15 	stw	r2,-12(fp)
	}

	/* update all nodes in the list */
	last_descr_ptr = list; /* start at list root-node */
	/* traverse list to update all of the nodes */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
81115488:	e0bffd17 	ldw	r2,-12(fp)
8111548c:	10c00317 	ldw	r3,12(r2)
81115490:	e0bfff17 	ldw	r2,-4(fp)
81115494:	18bff21e 	bne	r3,r2,81115460 <__reset+0xfb0f5460>
		/* go to next node in list */
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* get current value */
81115498:	e0bffd17 	ldw	r2,-12(fp)
8111549c:	10800717 	ldw	r2,28(r2)
811154a0:	e0bffe15 	stw	r2,-8(fp)
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
811154a4:	e0bffe17 	ldw	r2,-8(fp)
811154a8:	10d00034 	orhi	r3,r2,16384
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* get current value */
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
811154ac:	e0bffd17 	ldw	r2,-12(fp)
811154b0:	10c00715 	stw	r3,28(r2)
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
	
	return 0;
811154b4:	0005883a 	mov	r2,zero
}
811154b8:	e037883a 	mov	sp,fp
811154bc:	df000017 	ldw	fp,0(sp)
811154c0:	dec00104 	addi	sp,sp,4
811154c4:	f800283a 	ret

811154c8 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits>:
 * prefetcher since if used the create descriptor APIs the set_by_hw bits are
 * still set to SW owned. 
 */
int alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits (
	alt_msgdma_prefetcher_extended_descriptor *list)
{
811154c8:	defff804 	addi	sp,sp,-32
811154cc:	df000715 	stw	fp,28(sp)
811154d0:	df000704 	addi	fp,sp,28
811154d4:	e13fff15 	stw	r4,-4(fp)
	alt_u32 descriptor_control_field = 0;
811154d8:	e03ffa15 	stw	zero,-24(fp)
	msgdma_addr64 root_node_addr, next_node_addr;
	alt_msgdma_prefetcher_extended_descriptor *last_descr_ptr;
	
	if (list == NULL)
811154dc:	e13fff17 	ldw	r4,-4(fp)
811154e0:	2000021e 	bne	r4,zero,811154ec <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x24>
	{
		return -EINVAL;  /* this list cannot be empty */
811154e4:	00bffa84 	movi	r2,-22
811154e8:	00002806 	br	8111558c <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0xc4>
	}
	
	/* update all nodes in the list */
	last_descr_ptr = list; /* start at list root-node */
811154ec:	e13fff17 	ldw	r4,-4(fp)
811154f0:	e13ff915 	stw	r4,-28(fp)
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)list;
811154f4:	e13fff17 	ldw	r4,-4(fp)
811154f8:	2005883a 	mov	r2,r4
811154fc:	0007883a 	mov	r3,zero
81115500:	e0bffb15 	stw	r2,-20(fp)
81115504:	e0fffc15 	stw	r3,-16(fp)

	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
81115508:	00001006 	br	8111554c <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x84>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
	{
		/* start with current value */
		descriptor_control_field = last_descr_ptr->control;
8111550c:	e0bff917 	ldw	r2,-28(fp)
81115510:	10800f17 	ldw	r2,60(r2)
81115514:	e0bffa15 	stw	r2,-24(fp)
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
81115518:	e0bffa17 	ldw	r2,-24(fp)
8111551c:	10d00034 	orhi	r3,r2,16384
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
	{
		/* start with current value */
		descriptor_control_field = last_descr_ptr->control;
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
81115520:	e0bff917 	ldw	r2,-28(fp)
81115524:	10c00f15 	stw	r3,60(r2)
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
81115528:	e0bff917 	ldw	r2,-28(fp)
8111552c:	10800317 	ldw	r2,12(r2)
81115530:	e0bffd15 	stw	r2,-12(fp)
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
81115534:	e0bff917 	ldw	r2,-28(fp)
81115538:	10800b17 	ldw	r2,44(r2)
8111553c:	e0bffe15 	stw	r2,-8(fp)
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
81115540:	e0bffd17 	ldw	r2,-12(fp)
81115544:	e0fffe17 	ldw	r3,-8(fp)
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
81115548:	e0bff915 	stw	r2,-28(fp)
	last_descr_ptr = list; /* start at list root-node */
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)list;

	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
8111554c:	e0bff917 	ldw	r2,-28(fp)
81115550:	10c00317 	ldw	r3,12(r2)
81115554:	e0bffb17 	ldw	r2,-20(fp)
81115558:	18800426 	beq	r3,r2,8111556c <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0xa4>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
8111555c:	e0bff917 	ldw	r2,-28(fp)
81115560:	10c00b17 	ldw	r3,44(r2)
81115564:	e0bffc17 	ldw	r2,-16(fp)
81115568:	18bfe81e 	bne	r3,r2,8111550c <__reset+0xfb0f550c>
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* start with current value */
8111556c:	e0bff917 	ldw	r2,-28(fp)
81115570:	10800f17 	ldw	r2,60(r2)
81115574:	e0bffa15 	stw	r2,-24(fp)
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
81115578:	e0bffa17 	ldw	r2,-24(fp)
8111557c:	10d00034 	orhi	r3,r2,16384
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* start with current value */
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
81115580:	e0bff917 	ldw	r2,-28(fp)
81115584:	10c00f15 	stw	r3,60(r2)
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
	return 0;
81115588:	0005883a 	mov	r2,zero
}
8111558c:	e037883a 	mov	sp,fp
81115590:	df000017 	ldw	fp,0(sp)
81115594:	dec00104 	addi	sp,sp,4
81115598:	f800283a 	ret

8111559c <alt_msgdma_start_prefetcher_with_list_addr>:
int alt_msgdma_start_prefetcher_with_list_addr (
	alt_msgdma_dev *dev,
	alt_u64  list_addr,
	alt_u8 park_mode_en,
	alt_u8 poll_en)
{
8111559c:	deffef04 	addi	sp,sp,-68
811155a0:	df001015 	stw	fp,64(sp)
811155a4:	df001004 	addi	fp,sp,64
811155a8:	e13ffb15 	stw	r4,-20(fp)
811155ac:	e17ffc15 	stw	r5,-16(fp)
811155b0:	e1bffd15 	stw	r6,-12(fp)
811155b4:	3807883a 	mov	r3,r7
811155b8:	e0800117 	ldw	r2,4(fp)
811155bc:	e0fffe05 	stb	r3,-8(fp)
811155c0:	e0bfff05 	stb	r2,-4(fp)
	alt_u32 prefetcher_ctl = 0;
811155c4:	e03ff015 	stw	zero,-64(fp)
	alt_u32 dispatcher_ctl = 0;
811155c8:	e03ff115 	stw	zero,-60(fp)
	alt_irq_context context = 0;
811155cc:	e03ff215 	stw	zero,-56(fp)
	
	/* use helper struct to get easy access to hi/low address */
	msgdma_addr64 root_node_addr;
	root_node_addr.u64 = list_addr;  
811155d0:	e0bffc17 	ldw	r2,-16(fp)
811155d4:	e0bff915 	stw	r2,-28(fp)
811155d8:	e0bffd17 	ldw	r2,-12(fp)
811155dc:	e0bffa15 	stw	r2,-24(fp)
	 * semaphore. This ensures that accessing registers is thread-safe.
	 */
	ALT_SEM_PEND (dev->regs_lock, 0);
	
	/* case where prefetcher already started, return busy error */ 
	prefetcher_ctl = IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base);
811155e0:	e0bffb17 	ldw	r2,-20(fp)
811155e4:	10800617 	ldw	r2,24(r2)
811155e8:	10800037 	ldwio	r2,0(r2)
811155ec:	e0bff015 	stw	r2,-64(fp)
	if(ALT_MSGDMA_PREFETCHER_CTRL_RUN_GET(prefetcher_ctl)){
811155f0:	e0bff017 	ldw	r2,-64(fp)
811155f4:	1080004c 	andi	r2,r2,1
811155f8:	10000226 	beq	r2,zero,81115604 <alt_msgdma_start_prefetcher_with_list_addr+0x68>
		/* release the registers semaphore */
		ALT_SEM_POST (dev->regs_lock);
		return -EBUSY;
811155fc:	00bffc04 	movi	r2,-16
81115600:	00009206 	br	8111584c <alt_msgdma_start_prefetcher_with_list_addr+0x2b0>
	}
		
	/* Stop the msgdma dispatcher from issuing more descriptors to the
	   read or write masters  */
	/* stop issuing more descriptors */
	dispatcher_ctl = ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
81115604:	00800804 	movi	r2,32
81115608:	e0bff115 	stw	r2,-60(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8111560c:	0005303a 	rdctl	r2,status
81115610:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81115614:	e0fff517 	ldw	r3,-44(fp)
81115618:	00bfff84 	movi	r2,-2
8111561c:	1884703a 	and	r2,r3,r2
81115620:	1001703a 	wrctl	status,r2
  
  return context;
81115624:	e0bff517 	ldw	r2,-44(fp)
	
	/* making sure the read-modify-write below can't be pre-empted */
	context = alt_irq_disable_all();
81115628:	e0bff215 	stw	r2,-56(fp)
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
8111562c:	e0bffb17 	ldw	r2,-20(fp)
81115630:	10800317 	ldw	r2,12(r2)
81115634:	10800104 	addi	r2,r2,4
81115638:	e0fff117 	ldw	r3,-60(fp)
8111563c:	10c00035 	stwio	r3,0(r2)
	/*
	 * Clear any (previous) status register information
	 * that might occlude our error checking later.
	 */
	IOWR_ALTERA_MSGDMA_CSR_STATUS( dev->csr_base, 
81115640:	e0bffb17 	ldw	r2,-20(fp)
81115644:	10800317 	ldw	r2,12(r2)
81115648:	e0fffb17 	ldw	r3,-20(fp)
8111564c:	18c00317 	ldw	r3,12(r3)
81115650:	18c00037 	ldwio	r3,0(r3)
81115654:	10c00035 	stwio	r3,0(r2)
81115658:	e0bff217 	ldw	r2,-56(fp)
8111565c:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81115660:	e0bff317 	ldw	r2,-52(fp)
81115664:	1001703a 	wrctl	status,r2
	 * If a callback routine has been previously registered which will be
	 * called from the msgdma ISR. Set up dispatcher to:
	 *  - Run
	 *  - Stop on an error with any particular descriptor
	 */
	if(dev->callback)
81115668:	e0bffb17 	ldw	r2,-20(fp)
8111566c:	10800b17 	ldw	r2,44(r2)
81115670:	10002326 	beq	r2,zero,81115700 <alt_msgdma_start_prefetcher_with_list_addr+0x164>
	{
		dispatcher_ctl |= (dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK 
81115674:	e0bffb17 	ldw	r2,-20(fp)
81115678:	10c00d17 	ldw	r3,52(r2)
8111567c:	e0bff117 	ldw	r2,-60(fp)
81115680:	1884b03a 	or	r2,r3,r2
81115684:	10800514 	ori	r2,r2,20
81115688:	e0bff115 	stw	r2,-60(fp)
				| ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK );
		dispatcher_ctl &=  (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
8111568c:	e0fff117 	ldw	r3,-60(fp)
81115690:	00bff7c4 	movi	r2,-33
81115694:	1884703a 	and	r2,r3,r2
81115698:	e0bff115 	stw	r2,-60(fp)
		
		prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
8111569c:	e0bff017 	ldw	r2,-64(fp)
811156a0:	10800214 	ori	r2,r2,8
811156a4:	e0bff015 	stw	r2,-64(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811156a8:	0005303a 	rdctl	r2,status
811156ac:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811156b0:	e0fff717 	ldw	r3,-36(fp)
811156b4:	00bfff84 	movi	r2,-2
811156b8:	1884703a 	and	r2,r3,r2
811156bc:	1001703a 	wrctl	status,r2
  
  return context;
811156c0:	e0bff717 	ldw	r2,-36(fp)
	    /* making sure the read-modify-write below can't be pre-empted */
	    context = alt_irq_disable_all(); 
811156c4:	e0bff215 	stw	r2,-56(fp)
	    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
811156c8:	e0bffb17 	ldw	r2,-20(fp)
811156cc:	10800317 	ldw	r2,12(r2)
811156d0:	10800104 	addi	r2,r2,4
811156d4:	e0fff117 	ldw	r3,-60(fp)
811156d8:	10c00035 	stwio	r3,0(r2)
		IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
811156dc:	e0bffb17 	ldw	r2,-20(fp)
811156e0:	10800617 	ldw	r2,24(r2)
811156e4:	e0fff017 	ldw	r3,-64(fp)
811156e8:	10c00035 	stwio	r3,0(r2)
811156ec:	e0bff217 	ldw	r2,-56(fp)
811156f0:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811156f4:	e0bff417 	ldw	r2,-48(fp)
811156f8:	1001703a 	wrctl	status,r2
811156fc:	00002306 	br	8111578c <alt_msgdma_start_prefetcher_with_list_addr+0x1f0>
	  *   - Stop on an error with any particular descriptor
	  *   - Disable interrupt generation
	  */
	 else
	 {
		 dispatcher_ctl |= (dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK);
81115700:	e0bffb17 	ldw	r2,-20(fp)
81115704:	10c00d17 	ldw	r3,52(r2)
81115708:	e0bff117 	ldw	r2,-60(fp)
8111570c:	1884b03a 	or	r2,r3,r2
81115710:	10800114 	ori	r2,r2,4
81115714:	e0bff115 	stw	r2,-60(fp)
		 dispatcher_ctl &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) 
81115718:	e0fff117 	ldw	r3,-60(fp)
8111571c:	00bff3c4 	movi	r2,-49
81115720:	1884703a 	and	r2,r3,r2
81115724:	e0bff115 	stw	r2,-60(fp)
				 & (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_CLR_MASK;
81115728:	e0fff017 	ldw	r3,-64(fp)
8111572c:	00bffdc4 	movi	r2,-9
81115730:	1884703a 	and	r2,r3,r2
81115734:	e0bff015 	stw	r2,-64(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81115738:	0005303a 	rdctl	r2,status
8111573c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81115740:	e0fff817 	ldw	r3,-32(fp)
81115744:	00bfff84 	movi	r2,-2
81115748:	1884703a 	and	r2,r3,r2
8111574c:	1001703a 	wrctl	status,r2
  
  return context;
81115750:	e0bff817 	ldw	r2,-32(fp)
	     /* making sure the read-modify-write below can't be pre-empted */
	     context = alt_irq_disable_all();
81115754:	e0bff215 	stw	r2,-56(fp)
	     IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
81115758:	e0bffb17 	ldw	r2,-20(fp)
8111575c:	10800317 	ldw	r2,12(r2)
81115760:	10800104 	addi	r2,r2,4
81115764:	e0fff117 	ldw	r3,-60(fp)
81115768:	10c00035 	stwio	r3,0(r2)
	     IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
8111576c:	e0bffb17 	ldw	r2,-20(fp)
81115770:	10800617 	ldw	r2,24(r2)
81115774:	e0fff017 	ldw	r3,-64(fp)
81115778:	10c00035 	stwio	r3,0(r2)
8111577c:	e0bff217 	ldw	r2,-56(fp)
81115780:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81115784:	e0bff617 	ldw	r2,-40(fp)
81115788:	1001703a 	wrctl	status,r2
	     alt_irq_enable_all(context);
	 }   
	
	 /* set next descriptor registers to point to the list root-node */
	 IOWR_ALT_MSGDMA_PREFETCHER_NEXT_DESCRIPTOR_PTR_LOW(dev->prefetcher_base,
8111578c:	e0bffb17 	ldw	r2,-20(fp)
81115790:	10800617 	ldw	r2,24(r2)
81115794:	10800104 	addi	r2,r2,4
81115798:	e0fff917 	ldw	r3,-28(fp)
8111579c:	10c00035 	stwio	r3,0(r2)
			 root_node_addr.u32[0]);
	 IOWR_ALT_MSGDMA_PREFETCHER_NEXT_DESCRIPTOR_PTR_HIGH(dev->prefetcher_base,
811157a0:	e0bffb17 	ldw	r2,-20(fp)
811157a4:	10800617 	ldw	r2,24(r2)
811157a8:	10800204 	addi	r2,r2,8
811157ac:	e0fffa17 	ldw	r3,-24(fp)
811157b0:	10c00035 	stwio	r3,0(r2)
			 root_node_addr.u32[1]);
		
	 /* set park-mode */
	 if (park_mode_en){
811157b4:	e0bffe03 	ldbu	r2,-8(fp)
811157b8:	10000426 	beq	r2,zero,811157cc <alt_msgdma_start_prefetcher_with_list_addr+0x230>
		 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_SET_MASK;
811157bc:	e0bff017 	ldw	r2,-64(fp)
811157c0:	10800414 	ori	r2,r2,16
811157c4:	e0bff015 	stw	r2,-64(fp)
811157c8:	00000406 	br	811157dc <alt_msgdma_start_prefetcher_with_list_addr+0x240>
	 }
	 else {
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_CLR_MASK;
811157cc:	e0fff017 	ldw	r3,-64(fp)
811157d0:	00bffbc4 	movi	r2,-17
811157d4:	1884703a 	and	r2,r3,r2
811157d8:	e0bff015 	stw	r2,-64(fp)
	 }
	 
	 /* set poll-en */
	 if (poll_en){
811157dc:	e0bfff03 	ldbu	r2,-4(fp)
811157e0:	10000e26 	beq	r2,zero,8111581c <alt_msgdma_start_prefetcher_with_list_addr+0x280>
		 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_DESC_POLL_EN_MASK; 
811157e4:	e0bff017 	ldw	r2,-64(fp)
811157e8:	10800094 	ori	r2,r2,2
811157ec:	e0bff015 	stw	r2,-64(fp)
		 if(IORD_ALT_MSGDMA_PREFETCHER_DESCRIPTOR_POLLING_FREQ(
811157f0:	e0bffb17 	ldw	r2,-20(fp)
811157f4:	10800617 	ldw	r2,24(r2)
811157f8:	10800304 	addi	r2,r2,12
811157fc:	10800037 	ldwio	r2,0(r2)
81115800:	10000a1e 	bne	r2,zero,8111582c <alt_msgdma_start_prefetcher_with_list_addr+0x290>
				 dev->prefetcher_base) == 0){
			 /* set poll frequency to some non-zero default value */
			 IOWR_ALT_MSGDMA_PREFETCHER_DESCRIPTOR_POLLING_FREQ(
81115804:	e0bffb17 	ldw	r2,-20(fp)
81115808:	10800617 	ldw	r2,24(r2)
8111580c:	10800304 	addi	r2,r2,12
81115810:	00c03fc4 	movi	r3,255
81115814:	10c00035 	stwio	r3,0(r2)
81115818:	00000406 	br	8111582c <alt_msgdma_start_prefetcher_with_list_addr+0x290>
					 dev->prefetcher_base, 0xFF);
		 }
	 }
	 else {
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_DESC_POLL_EN_CLR_MASK; 
8111581c:	e0fff017 	ldw	r3,-64(fp)
81115820:	00bfff44 	movi	r2,-3
81115824:	1884703a 	and	r2,r3,r2
81115828:	e0bff015 	stw	r2,-64(fp)
	 }
	 
	 /* set the prefetcher run bit */
	 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_RUN_SET_MASK;
8111582c:	e0bff017 	ldw	r2,-64(fp)
81115830:	10800054 	ori	r2,r2,1
81115834:	e0bff015 	stw	r2,-64(fp)
	 /* start the dma since run bit is set */
	 IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
81115838:	e0bffb17 	ldw	r2,-20(fp)
8111583c:	10800617 	ldw	r2,24(r2)
81115840:	e0fff017 	ldw	r3,-64(fp)
81115844:	10c00035 	stwio	r3,0(r2)
	  * Now that access to the registers is complete, release the registers
	  * semaphore so that other threads can access the registers.
	  */
	 ALT_SEM_POST (dev->regs_lock);
	 
	 return 0;
81115848:	0005883a 	mov	r2,zero
}
8111584c:	e037883a 	mov	sp,fp
81115850:	df000017 	ldw	fp,0(sp)
81115854:	dec00104 	addi	sp,sp,4
81115858:	f800283a 	ret

8111585c <alt_msgdma_start_prefetcher_with_std_desc_list>:
int alt_msgdma_start_prefetcher_with_std_desc_list (
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_standard_descriptor *list,
	alt_u8 park_mode_en,
	alt_u8 poll_en)
{	
8111585c:	defff704 	addi	sp,sp,-36
81115860:	dfc00815 	stw	ra,32(sp)
81115864:	df000715 	stw	fp,28(sp)
81115868:	dc400615 	stw	r17,24(sp)
8111586c:	dc000515 	stw	r16,20(sp)
81115870:	df000704 	addi	fp,sp,28
81115874:	e13ffa15 	stw	r4,-24(fp)
81115878:	e17ffb15 	stw	r5,-20(fp)
8111587c:	3007883a 	mov	r3,r6
81115880:	3805883a 	mov	r2,r7
81115884:	e0fffc05 	stb	r3,-16(fp)
81115888:	e0bffd05 	stb	r2,-12(fp)
	if (alt_msgdma_prefetcher_set_std_list_own_by_hw_bits(list) != 0){
8111588c:	e13ffb17 	ldw	r4,-20(fp)
81115890:	11154300 	call	81115430 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits>
81115894:	10000226 	beq	r2,zero,811158a0 <alt_msgdma_start_prefetcher_with_std_desc_list+0x44>
		return -EINVAL;
81115898:	00bffa84 	movi	r2,-22
8111589c:	00000b06 	br	811158cc <alt_msgdma_start_prefetcher_with_std_desc_list+0x70>
	}
	
	return alt_msgdma_start_prefetcher_with_list_addr (dev, (uintptr_t)list,
811158a0:	e0bffb17 	ldw	r2,-20(fp)
811158a4:	1021883a 	mov	r16,r2
811158a8:	0023883a 	mov	r17,zero
811158ac:	e0fffc03 	ldbu	r3,-16(fp)
811158b0:	e0bffd03 	ldbu	r2,-12(fp)
811158b4:	d8800015 	stw	r2,0(sp)
811158b8:	180f883a 	mov	r7,r3
811158bc:	800b883a 	mov	r5,r16
811158c0:	880d883a 	mov	r6,r17
811158c4:	e13ffa17 	ldw	r4,-24(fp)
811158c8:	111559c0 	call	8111559c <alt_msgdma_start_prefetcher_with_list_addr>
			park_mode_en, poll_en);
}
811158cc:	e6fffe04 	addi	sp,fp,-8
811158d0:	dfc00317 	ldw	ra,12(sp)
811158d4:	df000217 	ldw	fp,8(sp)
811158d8:	dc400117 	ldw	r17,4(sp)
811158dc:	dc000017 	ldw	r16,0(sp)
811158e0:	dec00404 	addi	sp,sp,16
811158e4:	f800283a 	ret

811158e8 <alt_msgdma_start_prefetcher_with_extd_desc_list>:
int alt_msgdma_start_prefetcher_with_extd_desc_list (
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_extended_descriptor *list,
	alt_u8 park_mode_en,
	alt_u8 poll_en)
{
811158e8:	defff704 	addi	sp,sp,-36
811158ec:	dfc00815 	stw	ra,32(sp)
811158f0:	df000715 	stw	fp,28(sp)
811158f4:	dc400615 	stw	r17,24(sp)
811158f8:	dc000515 	stw	r16,20(sp)
811158fc:	df000704 	addi	fp,sp,28
81115900:	e13ffa15 	stw	r4,-24(fp)
81115904:	e17ffb15 	stw	r5,-20(fp)
81115908:	3007883a 	mov	r3,r6
8111590c:	3805883a 	mov	r2,r7
81115910:	e0fffc05 	stb	r3,-16(fp)
81115914:	e0bffd05 	stb	r2,-12(fp)
	if (alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits(list) != 0){
81115918:	e13ffb17 	ldw	r4,-20(fp)
8111591c:	11154c80 	call	811154c8 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits>
81115920:	10000226 	beq	r2,zero,8111592c <alt_msgdma_start_prefetcher_with_extd_desc_list+0x44>
		return -EINVAL;
81115924:	00bffa84 	movi	r2,-22
81115928:	00000b06 	br	81115958 <alt_msgdma_start_prefetcher_with_extd_desc_list+0x70>
	}
	return alt_msgdma_start_prefetcher_with_list_addr (dev, (uintptr_t)list, 
8111592c:	e0bffb17 	ldw	r2,-20(fp)
81115930:	1021883a 	mov	r16,r2
81115934:	0023883a 	mov	r17,zero
81115938:	e0fffc03 	ldbu	r3,-16(fp)
8111593c:	e0bffd03 	ldbu	r2,-12(fp)
81115940:	d8800015 	stw	r2,0(sp)
81115944:	180f883a 	mov	r7,r3
81115948:	800b883a 	mov	r5,r16
8111594c:	880d883a 	mov	r6,r17
81115950:	e13ffa17 	ldw	r4,-24(fp)
81115954:	111559c0 	call	8111559c <alt_msgdma_start_prefetcher_with_list_addr>
			park_mode_en, poll_en);
}
81115958:	e6fffe04 	addi	sp,fp,-8
8111595c:	dfc00317 	ldw	ra,12(sp)
81115960:	df000217 	ldw	fp,8(sp)
81115964:	dc400117 	ldw	r17,4(sp)
81115968:	dc000017 	ldw	r16,0(sp)
8111596c:	dec00404 	addi	sp,sp,16
81115970:	f800283a 	ret

81115974 <alt_msgdma_open>:
 * Returns:
 * - Pointer to msgdma device instance structure, or null if the device
 *   could not be opened.
 */
alt_msgdma_dev* alt_msgdma_open (const char* name)
{
81115974:	defffc04 	addi	sp,sp,-16
81115978:	dfc00315 	stw	ra,12(sp)
8111597c:	df000215 	stw	fp,8(sp)
81115980:	df000204 	addi	fp,sp,8
81115984:	e13fff15 	stw	r4,-4(fp)
    alt_msgdma_dev* dev = NULL;
81115988:	e03ffe15 	stw	zero,-8(fp)

    dev = (alt_msgdma_dev*) alt_find_dev (name, &alt_msgdma_list);
8111598c:	d1601104 	addi	r5,gp,-32700
81115990:	e13fff17 	ldw	r4,-4(fp)
81115994:	11160980 	call	81116098 <alt_find_dev>
81115998:	e0bffe15 	stw	r2,-8(fp)

    if (NULL == dev)
8111599c:	e0bffe17 	ldw	r2,-8(fp)
811159a0:	1000041e 	bne	r2,zero,811159b4 <alt_msgdma_open+0x40>
    {
        ALT_ERRNO = ENODEV;
811159a4:	1113e000 	call	81113e00 <alt_get_errno>
811159a8:	1007883a 	mov	r3,r2
811159ac:	008004c4 	movi	r2,19
811159b0:	18800015 	stw	r2,0(r3)
    }

    return dev;
811159b4:	e0bffe17 	ldw	r2,-8(fp)
}
811159b8:	e037883a 	mov	sp,fp
811159bc:	dfc00117 	ldw	ra,4(sp)
811159c0:	df000017 	ldw	fp,0(sp)
811159c4:	dec00204 	addi	sp,sp,8
811159c8:	f800283a 	ret

811159cc <alt_msgdma_init>:
 * This routine disables interrupts, descriptor processing,
 * registers a specific instance of the device with the HAL,
 * and installs an interrupt handler for the device.
 */
void alt_msgdma_init (alt_msgdma_dev *dev, alt_u32 ic_id, alt_u32 irq)
{
811159cc:	defff804 	addi	sp,sp,-32
811159d0:	dfc00715 	stw	ra,28(sp)
811159d4:	df000615 	stw	fp,24(sp)
811159d8:	df000604 	addi	fp,sp,24
811159dc:	e13ffd15 	stw	r4,-12(fp)
811159e0:	e17ffe15 	stw	r5,-8(fp)
811159e4:	e1bfff15 	stw	r6,-4(fp)
    extern alt_llist alt_msgdma_list;
    alt_u32 temporary_control;
    int error;

    if (dev->prefetcher_enable)
811159e8:	e0bffd17 	ldw	r2,-12(fp)
811159ec:	10801783 	ldbu	r2,94(r2)
811159f0:	10803fcc 	andi	r2,r2,255
811159f4:	10000b26 	beq	r2,zero,81115a24 <alt_msgdma_init+0x58>
    {
    	/* start prefetcher reset sequence */
    	IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, 
811159f8:	e0bffd17 	ldw	r2,-12(fp)
811159fc:	10800617 	ldw	r2,24(r2)
81115a00:	00c00104 	movi	r3,4
81115a04:	10c00035 	stwio	r3,0(r2)
    			ALT_MSGDMA_PREFETCHER_CTRL_RESET_SET_MASK);
    	/* wait until hw clears the bit */
    	while(ALT_MSGDMA_PREFETCHER_CTRL_RESET_GET(
81115a08:	0001883a 	nop
81115a0c:	e0bffd17 	ldw	r2,-12(fp)
81115a10:	10800617 	ldw	r2,24(r2)
81115a14:	10800037 	ldwio	r2,0(r2)
81115a18:	1080010c 	andi	r2,r2,4
81115a1c:	1005d0ba 	srai	r2,r2,2
81115a20:	103ffa1e 	bne	r2,zero,81115a0c <__reset+0xfb0f5a0c>
    }    
    
    /* Reset the registers and FIFOs of the dispatcher and master modules */
    /* set the reset bit, no need to read the control register first since 
    this write is going to clear it out */
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
81115a24:	e0bffd17 	ldw	r2,-12(fp)
81115a28:	10800317 	ldw	r2,12(r2)
81115a2c:	10800104 	addi	r2,r2,4
81115a30:	00c00084 	movi	r3,2
81115a34:	10c00035 	stwio	r3,0(r2)
    while(0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base)
81115a38:	0001883a 	nop
81115a3c:	e0bffd17 	ldw	r2,-12(fp)
81115a40:	10800317 	ldw	r2,12(r2)
81115a44:	10800037 	ldwio	r2,0(r2)
    		& ALTERA_MSGDMA_CSR_RESET_STATE_MASK));
81115a48:	1080100c 	andi	r2,r2,64
    
    /* Reset the registers and FIFOs of the dispatcher and master modules */
    /* set the reset bit, no need to read the control register first since 
    this write is going to clear it out */
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
    while(0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base)
81115a4c:	103ffb1e 	bne	r2,zero,81115a3c <__reset+0xfb0f5a3c>
    * Disable interrupts, halt descriptor processing,
    * and clear status register content
    */

    /* disable global interrupt */
    temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base)
81115a50:	e0bffd17 	ldw	r2,-12(fp)
81115a54:	10800317 	ldw	r2,12(r2)
81115a58:	10800104 	addi	r2,r2,4
81115a5c:	10800037 	ldwio	r2,0(r2)
81115a60:	1007883a 	mov	r3,r2
81115a64:	00bffbc4 	movi	r2,-17
81115a68:	1884703a 	and	r2,r3,r2
81115a6c:	e0bffb15 	stw	r2,-20(fp)
    		& (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    /* stopping descriptor */
    temporary_control |= ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
81115a70:	e0bffb17 	ldw	r2,-20(fp)
81115a74:	10800814 	ori	r2,r2,32
81115a78:	e0bffb15 	stw	r2,-20(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
81115a7c:	e0bffd17 	ldw	r2,-12(fp)
81115a80:	10800317 	ldw	r2,12(r2)
81115a84:	10800104 	addi	r2,r2,4
81115a88:	e0fffb17 	ldw	r3,-20(fp)
81115a8c:	10c00035 	stwio	r3,0(r2)

    /* clear the CSR status register */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base, 
81115a90:	e0bffd17 	ldw	r2,-12(fp)
81115a94:	10800317 	ldw	r2,12(r2)
81115a98:	e0fffd17 	ldw	r3,-12(fp)
81115a9c:	18c00317 	ldw	r3,12(r3)
81115aa0:	18c00037 	ldwio	r3,0(r3)
81115aa4:	10c00035 	stwio	r3,0(r2)
    		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
    
    if (dev->prefetcher_enable)
81115aa8:	e0bffd17 	ldw	r2,-12(fp)
81115aac:	10801783 	ldbu	r2,94(r2)
81115ab0:	10803fcc 	andi	r2,r2,255
81115ab4:	10000826 	beq	r2,zero,81115ad8 <alt_msgdma_init+0x10c>
    {
    	/* clear all status bits that are set, since theyre W1C */
    	IOWR_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base, 
81115ab8:	e0bffd17 	ldw	r2,-12(fp)
81115abc:	10800617 	ldw	r2,24(r2)
81115ac0:	10800404 	addi	r2,r2,16
81115ac4:	e0fffd17 	ldw	r3,-12(fp)
81115ac8:	18c00617 	ldw	r3,24(r3)
81115acc:	18c00404 	addi	r3,r3,16
81115ad0:	18c00037 	ldwio	r3,0(r3)
81115ad4:	10c00035 	stwio	r3,0(r2)
    			IORD_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base));
    }

    /* Register this instance of the msgdma controller with HAL */
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_msgdma_list);
81115ad8:	d1601104 	addi	r5,gp,-32700
81115adc:	e13ffd17 	ldw	r4,-12(fp)
81115ae0:	1115f340 	call	81115f34 <alt_dev_llist_insert>
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
81115ae4:	0005883a 	mov	r2,zero

    /*
     * Creating semaphores used to protect access to the registers 
     * when running in a multi-threaded environment.
     */
    error = ALT_SEM_CREATE (&dev->regs_lock, 1);
81115ae8:	e0bffc15 	stw	r2,-16(fp)
            
    if (!error)
81115aec:	e0bffc17 	ldw	r2,-16(fp)
81115af0:	1000081e 	bne	r2,zero,81115b14 <alt_msgdma_init+0x148>
    {        
        /* Install IRQ handler */
        alt_ic_isr_register(ic_id, irq, alt_msgdma_irq, dev, 0x0);
81115af4:	d8000015 	stw	zero,0(sp)
81115af8:	e1fffd17 	ldw	r7,-12(fp)
81115afc:	01a04474 	movhi	r6,33041
81115b00:	318fff04 	addi	r6,r6,16380
81115b04:	e17fff17 	ldw	r5,-4(fp)
81115b08:	e13ffe17 	ldw	r4,-8(fp)
81115b0c:	11161280 	call	81116128 <alt_ic_isr_register>
    else
    {
        alt_printf("failed to create semaphores\n");
    }
    
    return;
81115b10:	00000406 	br	81115b24 <alt_msgdma_init+0x158>
        /* Install IRQ handler */
        alt_ic_isr_register(ic_id, irq, alt_msgdma_irq, dev, 0x0);
    }
    else
    {
        alt_printf("failed to create semaphores\n");
81115b14:	012044b4 	movhi	r4,33042
81115b18:	21212e04 	addi	r4,r4,-31560
81115b1c:	111675c0 	call	8111675c <alt_printf>
    }
    
    return;
81115b20:	0001883a 	nop

}
81115b24:	e037883a 	mov	sp,fp
81115b28:	dfc00117 	ldw	ra,4(sp)
81115b2c:	df000017 	ldw	fp,0(sp)
81115b30:	dec00204 	addi	sp,sp,8
81115b34:	f800283a 	ret

81115b38 <alt_msgdma_register_callback>:
void alt_msgdma_register_callback(
	alt_msgdma_dev *dev,
	alt_msgdma_callback callback,
	alt_u32 control,
	void *context)
{
81115b38:	defffb04 	addi	sp,sp,-20
81115b3c:	df000415 	stw	fp,16(sp)
81115b40:	df000404 	addi	fp,sp,16
81115b44:	e13ffc15 	stw	r4,-16(fp)
81115b48:	e17ffd15 	stw	r5,-12(fp)
81115b4c:	e1bffe15 	stw	r6,-8(fp)
81115b50:	e1ffff15 	stw	r7,-4(fp)
    dev->callback         = callback;
81115b54:	e0bffc17 	ldw	r2,-16(fp)
81115b58:	e0fffd17 	ldw	r3,-12(fp)
81115b5c:	10c00b15 	stw	r3,44(r2)
    dev->callback_context = context;
81115b60:	e0bffc17 	ldw	r2,-16(fp)
81115b64:	e0ffff17 	ldw	r3,-4(fp)
81115b68:	10c00c15 	stw	r3,48(r2)
    dev->control          = control;
81115b6c:	e0bffc17 	ldw	r2,-16(fp)
81115b70:	e0fffe17 	ldw	r3,-8(fp)
81115b74:	10c00d15 	stw	r3,52(r2)

    return ;
81115b78:	0001883a 	nop
}
81115b7c:	e037883a 	mov	sp,fp
81115b80:	df000017 	ldw	fp,0(sp)
81115b84:	dec00104 	addi	sp,sp,4
81115b88:	f800283a 	ret

81115b8c <alt_msgdma_standard_descriptor_async_transfer>:
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
int alt_msgdma_standard_descriptor_async_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *desc)
{
81115b8c:	defffc04 	addi	sp,sp,-16
81115b90:	dfc00315 	stw	ra,12(sp)
81115b94:	df000215 	stw	fp,8(sp)
81115b98:	df000204 	addi	fp,sp,8
81115b9c:	e13ffe15 	stw	r4,-8(fp)
81115ba0:	e17fff15 	stw	r5,-4(fp)
   /*
   * Error detection/handling should be performed at the application
   * or callback level as appropriate.
   */
    return alt_msgdma_descriptor_async_transfer(dev, desc, NULL);
81115ba4:	000d883a 	mov	r6,zero
81115ba8:	e17fff17 	ldw	r5,-4(fp)
81115bac:	e13ffe17 	ldw	r4,-8(fp)
81115bb0:	11143600 	call	81114360 <alt_msgdma_descriptor_async_transfer>

}
81115bb4:	e037883a 	mov	sp,fp
81115bb8:	dfc00117 	ldw	ra,4(sp)
81115bbc:	df000017 	ldw	fp,0(sp)
81115bc0:	dec00204 	addi	sp,sp,8
81115bc4:	f800283a 	ret

81115bc8 <alt_msgdma_extended_descriptor_async_transfer>:
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
int alt_msgdma_extended_descriptor_async_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_extended_descriptor *desc)
{
81115bc8:	defffc04 	addi	sp,sp,-16
81115bcc:	dfc00315 	stw	ra,12(sp)
81115bd0:	df000215 	stw	fp,8(sp)
81115bd4:	df000204 	addi	fp,sp,8
81115bd8:	e13ffe15 	stw	r4,-8(fp)
81115bdc:	e17fff15 	stw	r5,-4(fp)
    /*
    * Error detection/handling should be performed at the application
    * or callback level as appropriate.
    */
    return alt_msgdma_descriptor_async_transfer(dev, NULL, desc);
81115be0:	e1bfff17 	ldw	r6,-4(fp)
81115be4:	000b883a 	mov	r5,zero
81115be8:	e13ffe17 	ldw	r4,-8(fp)
81115bec:	11143600 	call	81114360 <alt_msgdma_descriptor_async_transfer>
}
81115bf0:	e037883a 	mov	sp,fp
81115bf4:	dfc00117 	ldw	ra,4(sp)
81115bf8:	df000017 	ldw	fp,0(sp)
81115bfc:	dec00204 	addi	sp,sp,8
81115c00:	f800283a 	ret

81115c04 <alt_msgdma_standard_descriptor_sync_transfer>:
 *           return -ETIME (Time out and skipping the looping after 5 msec)
 */
int alt_msgdma_standard_descriptor_sync_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *desc)
{
81115c04:	defffc04 	addi	sp,sp,-16
81115c08:	dfc00315 	stw	ra,12(sp)
81115c0c:	df000215 	stw	fp,8(sp)
81115c10:	df000204 	addi	fp,sp,8
81115c14:	e13ffe15 	stw	r4,-8(fp)
81115c18:	e17fff15 	stw	r5,-4(fp)
    return alt_msgdma_descriptor_sync_transfer(dev, desc, NULL);
81115c1c:	000d883a 	mov	r6,zero
81115c20:	e17fff17 	ldw	r5,-4(fp)
81115c24:	e13ffe17 	ldw	r4,-8(fp)
81115c28:	11146300 	call	81114630 <alt_msgdma_descriptor_sync_transfer>
}
81115c2c:	e037883a 	mov	sp,fp
81115c30:	dfc00117 	ldw	ra,4(sp)
81115c34:	df000017 	ldw	fp,0(sp)
81115c38:	dec00204 	addi	sp,sp,8
81115c3c:	f800283a 	ret

81115c40 <alt_msgdma_extended_descriptor_sync_transfer>:
 *           return -ETIME (Time out and skipping the looping after 5 msec)
 */
int alt_msgdma_extended_descriptor_sync_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_extended_descriptor *desc)
{
81115c40:	defffc04 	addi	sp,sp,-16
81115c44:	dfc00315 	stw	ra,12(sp)
81115c48:	df000215 	stw	fp,8(sp)
81115c4c:	df000204 	addi	fp,sp,8
81115c50:	e13ffe15 	stw	r4,-8(fp)
81115c54:	e17fff15 	stw	r5,-4(fp)
    return alt_msgdma_descriptor_sync_transfer(dev, NULL, desc);
81115c58:	e1bfff17 	ldw	r6,-4(fp)
81115c5c:	000b883a 	mov	r5,zero
81115c60:	e13ffe17 	ldw	r4,-8(fp)
81115c64:	11146300 	call	81114630 <alt_msgdma_descriptor_sync_transfer>
}
81115c68:	e037883a 	mov	sp,fp
81115c6c:	dfc00117 	ldw	ra,4(sp)
81115c70:	df000017 	ldw	fp,0(sp)
81115c74:	dec00204 	addi	sp,sp,8
81115c78:	f800283a 	ret

81115c7c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
81115c7c:	defff504 	addi	sp,sp,-44
81115c80:	df000a15 	stw	fp,40(sp)
81115c84:	df000a04 	addi	fp,sp,40
81115c88:	e13ffc15 	stw	r4,-16(fp)
81115c8c:	e17ffd15 	stw	r5,-12(fp)
81115c90:	e1bffe15 	stw	r6,-8(fp)
81115c94:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
81115c98:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
81115c9c:	d0a02217 	ldw	r2,-32632(gp)
  
  if (alt_ticks_per_second ())
81115ca0:	10003c26 	beq	r2,zero,81115d94 <alt_alarm_start+0x118>
  {
    if (alarm)
81115ca4:	e0bffc17 	ldw	r2,-16(fp)
81115ca8:	10003826 	beq	r2,zero,81115d8c <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
81115cac:	e0bffc17 	ldw	r2,-16(fp)
81115cb0:	e0fffe17 	ldw	r3,-8(fp)
81115cb4:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
81115cb8:	e0bffc17 	ldw	r2,-16(fp)
81115cbc:	e0ffff17 	ldw	r3,-4(fp)
81115cc0:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81115cc4:	0005303a 	rdctl	r2,status
81115cc8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81115ccc:	e0fff917 	ldw	r3,-28(fp)
81115cd0:	00bfff84 	movi	r2,-2
81115cd4:	1884703a 	and	r2,r3,r2
81115cd8:	1001703a 	wrctl	status,r2
  
  return context;
81115cdc:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
81115ce0:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
81115ce4:	d0a02317 	ldw	r2,-32628(gp)
      
      current_nticks = alt_nticks();
81115ce8:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
81115cec:	e0fffd17 	ldw	r3,-12(fp)
81115cf0:	e0bff617 	ldw	r2,-40(fp)
81115cf4:	1885883a 	add	r2,r3,r2
81115cf8:	10c00044 	addi	r3,r2,1
81115cfc:	e0bffc17 	ldw	r2,-16(fp)
81115d00:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
81115d04:	e0bffc17 	ldw	r2,-16(fp)
81115d08:	10c00217 	ldw	r3,8(r2)
81115d0c:	e0bff617 	ldw	r2,-40(fp)
81115d10:	1880042e 	bgeu	r3,r2,81115d24 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
81115d14:	e0bffc17 	ldw	r2,-16(fp)
81115d18:	00c00044 	movi	r3,1
81115d1c:	10c00405 	stb	r3,16(r2)
81115d20:	00000206 	br	81115d2c <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
81115d24:	e0bffc17 	ldw	r2,-16(fp)
81115d28:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
81115d2c:	e0bffc17 	ldw	r2,-16(fp)
81115d30:	d0e00d04 	addi	r3,gp,-32716
81115d34:	e0fffa15 	stw	r3,-24(fp)
81115d38:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
81115d3c:	e0bffb17 	ldw	r2,-20(fp)
81115d40:	e0fffa17 	ldw	r3,-24(fp)
81115d44:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
81115d48:	e0bffa17 	ldw	r2,-24(fp)
81115d4c:	10c00017 	ldw	r3,0(r2)
81115d50:	e0bffb17 	ldw	r2,-20(fp)
81115d54:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
81115d58:	e0bffa17 	ldw	r2,-24(fp)
81115d5c:	10800017 	ldw	r2,0(r2)
81115d60:	e0fffb17 	ldw	r3,-20(fp)
81115d64:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
81115d68:	e0bffa17 	ldw	r2,-24(fp)
81115d6c:	e0fffb17 	ldw	r3,-20(fp)
81115d70:	10c00015 	stw	r3,0(r2)
81115d74:	e0bff817 	ldw	r2,-32(fp)
81115d78:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81115d7c:	e0bff717 	ldw	r2,-36(fp)
81115d80:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
81115d84:	0005883a 	mov	r2,zero
81115d88:	00000306 	br	81115d98 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
81115d8c:	00bffa84 	movi	r2,-22
81115d90:	00000106 	br	81115d98 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
81115d94:	00bfde84 	movi	r2,-134
  }
}
81115d98:	e037883a 	mov	sp,fp
81115d9c:	df000017 	ldw	fp,0(sp)
81115da0:	dec00104 	addi	sp,sp,4
81115da4:	f800283a 	ret

81115da8 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
81115da8:	defffb04 	addi	sp,sp,-20
81115dac:	df000415 	stw	fp,16(sp)
81115db0:	df000404 	addi	fp,sp,16
81115db4:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
81115db8:	008000c4 	movi	r2,3
81115dbc:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
81115dc0:	e0fffd17 	ldw	r3,-12(fp)
81115dc4:	008003f4 	movhi	r2,15
81115dc8:	10909004 	addi	r2,r2,16960
81115dcc:	1887383a 	mul	r3,r3,r2
81115dd0:	00817db4 	movhi	r2,1526
81115dd4:	10b84004 	addi	r2,r2,-7936
81115dd8:	10c7203a 	divu	r3,r2,r3
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
81115ddc:	00a00034 	movhi	r2,32768
81115de0:	10bfffc4 	addi	r2,r2,-1
81115de4:	10c5203a 	divu	r2,r2,r3
81115de8:	e0ffff17 	ldw	r3,-4(fp)
81115dec:	1885203a 	divu	r2,r3,r2
81115df0:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
81115df4:	e0bffe17 	ldw	r2,-8(fp)
81115df8:	10002526 	beq	r2,zero,81115e90 <alt_busy_sleep+0xe8>
  {
    for(i=0;i<big_loops;i++)
81115dfc:	e03ffc15 	stw	zero,-16(fp)
81115e00:	00001406 	br	81115e54 <alt_busy_sleep+0xac>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
81115e04:	00a00034 	movhi	r2,32768
81115e08:	10bfffc4 	addi	r2,r2,-1
81115e0c:	10bfffc4 	addi	r2,r2,-1
81115e10:	103ffe1e 	bne	r2,zero,81115e0c <__reset+0xfb0f5e0c>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
81115e14:	e0fffd17 	ldw	r3,-12(fp)
81115e18:	008003f4 	movhi	r2,15
81115e1c:	10909004 	addi	r2,r2,16960
81115e20:	1887383a 	mul	r3,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
81115e24:	00817db4 	movhi	r2,1526
81115e28:	10b84004 	addi	r2,r2,-7936
81115e2c:	10c7203a 	divu	r3,r2,r3
81115e30:	00a00034 	movhi	r2,32768
81115e34:	10bfffc4 	addi	r2,r2,-1
81115e38:	10c5203a 	divu	r2,r2,r3
81115e3c:	e0ffff17 	ldw	r3,-4(fp)
81115e40:	1885c83a 	sub	r2,r3,r2
81115e44:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
81115e48:	e0bffc17 	ldw	r2,-16(fp)
81115e4c:	10800044 	addi	r2,r2,1
81115e50:	e0bffc15 	stw	r2,-16(fp)
81115e54:	e0fffc17 	ldw	r3,-16(fp)
81115e58:	e0bffe17 	ldw	r2,-8(fp)
81115e5c:	18bfe916 	blt	r3,r2,81115e04 <__reset+0xfb0f5e04>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
81115e60:	e0fffd17 	ldw	r3,-12(fp)
81115e64:	008003f4 	movhi	r2,15
81115e68:	10909004 	addi	r2,r2,16960
81115e6c:	1887383a 	mul	r3,r3,r2
81115e70:	00817db4 	movhi	r2,1526
81115e74:	10b84004 	addi	r2,r2,-7936
81115e78:	10c7203a 	divu	r3,r2,r3
81115e7c:	e0bfff17 	ldw	r2,-4(fp)
81115e80:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
81115e84:	10bfffc4 	addi	r2,r2,-1
81115e88:	103ffe1e 	bne	r2,zero,81115e84 <__reset+0xfb0f5e84>
81115e8c:	00000b06 	br	81115ebc <alt_busy_sleep+0x114>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
81115e90:	e0fffd17 	ldw	r3,-12(fp)
81115e94:	008003f4 	movhi	r2,15
81115e98:	10909004 	addi	r2,r2,16960
81115e9c:	1887383a 	mul	r3,r3,r2
81115ea0:	00817db4 	movhi	r2,1526
81115ea4:	10b84004 	addi	r2,r2,-7936
81115ea8:	10c7203a 	divu	r3,r2,r3
81115eac:	e0bfff17 	ldw	r2,-4(fp)
81115eb0:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
81115eb4:	10bfffc4 	addi	r2,r2,-1
81115eb8:	00bffe16 	blt	zero,r2,81115eb4 <__reset+0xfb0f5eb4>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
81115ebc:	0005883a 	mov	r2,zero
}
81115ec0:	e037883a 	mov	sp,fp
81115ec4:	df000017 	ldw	fp,0(sp)
81115ec8:	dec00104 	addi	sp,sp,4
81115ecc:	f800283a 	ret

81115ed0 <alt_dcache_flush>:
 *
 * Any dirty lines in the data cache are written back to memory.
 */

void alt_dcache_flush (void* start, alt_u32 len)
{
81115ed0:	defffd04 	addi	sp,sp,-12
81115ed4:	df000215 	stw	fp,8(sp)
81115ed8:	df000204 	addi	fp,sp,8
81115edc:	e13ffe15 	stw	r4,-8(fp)
81115ee0:	e17fff15 	stw	r5,-4(fp)
  {
    ALT_FLUSH_DATA(i);
  }

#endif /* NIOS2_DCACHE_SIZE > 0 */
}
81115ee4:	0001883a 	nop
81115ee8:	e037883a 	mov	sp,fp
81115eec:	df000017 	ldw	fp,0(sp)
81115ef0:	dec00104 	addi	sp,sp,4
81115ef4:	f800283a 	ret

81115ef8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
81115ef8:	defffe04 	addi	sp,sp,-8
81115efc:	dfc00115 	stw	ra,4(sp)
81115f00:	df000015 	stw	fp,0(sp)
81115f04:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
81115f08:	d0a00b17 	ldw	r2,-32724(gp)
81115f0c:	10000326 	beq	r2,zero,81115f1c <alt_get_errno+0x24>
81115f10:	d0a00b17 	ldw	r2,-32724(gp)
81115f14:	103ee83a 	callr	r2
81115f18:	00000106 	br	81115f20 <alt_get_errno+0x28>
81115f1c:	d0a01e04 	addi	r2,gp,-32648
}
81115f20:	e037883a 	mov	sp,fp
81115f24:	dfc00117 	ldw	ra,4(sp)
81115f28:	df000017 	ldw	fp,0(sp)
81115f2c:	dec00204 	addi	sp,sp,8
81115f30:	f800283a 	ret

81115f34 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
81115f34:	defffa04 	addi	sp,sp,-24
81115f38:	dfc00515 	stw	ra,20(sp)
81115f3c:	df000415 	stw	fp,16(sp)
81115f40:	df000404 	addi	fp,sp,16
81115f44:	e13ffe15 	stw	r4,-8(fp)
81115f48:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
81115f4c:	e0bffe17 	ldw	r2,-8(fp)
81115f50:	10000326 	beq	r2,zero,81115f60 <alt_dev_llist_insert+0x2c>
81115f54:	e0bffe17 	ldw	r2,-8(fp)
81115f58:	10800217 	ldw	r2,8(r2)
81115f5c:	1000061e 	bne	r2,zero,81115f78 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
81115f60:	1115ef80 	call	81115ef8 <alt_get_errno>
81115f64:	1007883a 	mov	r3,r2
81115f68:	00800584 	movi	r2,22
81115f6c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
81115f70:	00bffa84 	movi	r2,-22
81115f74:	00001306 	br	81115fc4 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
81115f78:	e0bffe17 	ldw	r2,-8(fp)
81115f7c:	e0ffff17 	ldw	r3,-4(fp)
81115f80:	e0fffc15 	stw	r3,-16(fp)
81115f84:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
81115f88:	e0bffd17 	ldw	r2,-12(fp)
81115f8c:	e0fffc17 	ldw	r3,-16(fp)
81115f90:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
81115f94:	e0bffc17 	ldw	r2,-16(fp)
81115f98:	10c00017 	ldw	r3,0(r2)
81115f9c:	e0bffd17 	ldw	r2,-12(fp)
81115fa0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
81115fa4:	e0bffc17 	ldw	r2,-16(fp)
81115fa8:	10800017 	ldw	r2,0(r2)
81115fac:	e0fffd17 	ldw	r3,-12(fp)
81115fb0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
81115fb4:	e0bffc17 	ldw	r2,-16(fp)
81115fb8:	e0fffd17 	ldw	r3,-12(fp)
81115fbc:	10c00015 	stw	r3,0(r2)

  return 0;  
81115fc0:	0005883a 	mov	r2,zero
}
81115fc4:	e037883a 	mov	sp,fp
81115fc8:	dfc00117 	ldw	ra,4(sp)
81115fcc:	df000017 	ldw	fp,0(sp)
81115fd0:	dec00204 	addi	sp,sp,8
81115fd4:	f800283a 	ret

81115fd8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
81115fd8:	defffd04 	addi	sp,sp,-12
81115fdc:	dfc00215 	stw	ra,8(sp)
81115fe0:	df000115 	stw	fp,4(sp)
81115fe4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
81115fe8:	00a04474 	movhi	r2,33041
81115fec:	109bf004 	addi	r2,r2,28608
81115ff0:	e0bfff15 	stw	r2,-4(fp)
81115ff4:	00000606 	br	81116010 <_do_ctors+0x38>
        (*ctor) (); 
81115ff8:	e0bfff17 	ldw	r2,-4(fp)
81115ffc:	10800017 	ldw	r2,0(r2)
81116000:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
81116004:	e0bfff17 	ldw	r2,-4(fp)
81116008:	10bfff04 	addi	r2,r2,-4
8111600c:	e0bfff15 	stw	r2,-4(fp)
81116010:	e0ffff17 	ldw	r3,-4(fp)
81116014:	00a04474 	movhi	r2,33041
81116018:	109bf104 	addi	r2,r2,28612
8111601c:	18bff62e 	bgeu	r3,r2,81115ff8 <__reset+0xfb0f5ff8>
        (*ctor) (); 
}
81116020:	0001883a 	nop
81116024:	e037883a 	mov	sp,fp
81116028:	dfc00117 	ldw	ra,4(sp)
8111602c:	df000017 	ldw	fp,0(sp)
81116030:	dec00204 	addi	sp,sp,8
81116034:	f800283a 	ret

81116038 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
81116038:	defffd04 	addi	sp,sp,-12
8111603c:	dfc00215 	stw	ra,8(sp)
81116040:	df000115 	stw	fp,4(sp)
81116044:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
81116048:	00a04474 	movhi	r2,33041
8111604c:	109bf004 	addi	r2,r2,28608
81116050:	e0bfff15 	stw	r2,-4(fp)
81116054:	00000606 	br	81116070 <_do_dtors+0x38>
        (*dtor) (); 
81116058:	e0bfff17 	ldw	r2,-4(fp)
8111605c:	10800017 	ldw	r2,0(r2)
81116060:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
81116064:	e0bfff17 	ldw	r2,-4(fp)
81116068:	10bfff04 	addi	r2,r2,-4
8111606c:	e0bfff15 	stw	r2,-4(fp)
81116070:	e0ffff17 	ldw	r3,-4(fp)
81116074:	00a04474 	movhi	r2,33041
81116078:	109bf104 	addi	r2,r2,28612
8111607c:	18bff62e 	bgeu	r3,r2,81116058 <__reset+0xfb0f6058>
        (*dtor) (); 
}
81116080:	0001883a 	nop
81116084:	e037883a 	mov	sp,fp
81116088:	dfc00117 	ldw	ra,4(sp)
8111608c:	df000017 	ldw	fp,0(sp)
81116090:	dec00204 	addi	sp,sp,8
81116094:	f800283a 	ret

81116098 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
81116098:	defffa04 	addi	sp,sp,-24
8111609c:	dfc00515 	stw	ra,20(sp)
811160a0:	df000415 	stw	fp,16(sp)
811160a4:	df000404 	addi	fp,sp,16
811160a8:	e13ffe15 	stw	r4,-8(fp)
811160ac:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
811160b0:	e0bfff17 	ldw	r2,-4(fp)
811160b4:	10800017 	ldw	r2,0(r2)
811160b8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
811160bc:	e13ffe17 	ldw	r4,-8(fp)
811160c0:	11058ec0 	call	811058ec <strlen>
811160c4:	10800044 	addi	r2,r2,1
811160c8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
811160cc:	00000d06 	br	81116104 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
811160d0:	e0bffc17 	ldw	r2,-16(fp)
811160d4:	10800217 	ldw	r2,8(r2)
811160d8:	e0fffd17 	ldw	r3,-12(fp)
811160dc:	180d883a 	mov	r6,r3
811160e0:	e17ffe17 	ldw	r5,-8(fp)
811160e4:	1009883a 	mov	r4,r2
811160e8:	1116c7c0 	call	81116c7c <memcmp>
811160ec:	1000021e 	bne	r2,zero,811160f8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
811160f0:	e0bffc17 	ldw	r2,-16(fp)
811160f4:	00000706 	br	81116114 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
811160f8:	e0bffc17 	ldw	r2,-16(fp)
811160fc:	10800017 	ldw	r2,0(r2)
81116100:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
81116104:	e0fffc17 	ldw	r3,-16(fp)
81116108:	e0bfff17 	ldw	r2,-4(fp)
8111610c:	18bff01e 	bne	r3,r2,811160d0 <__reset+0xfb0f60d0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
81116110:	0005883a 	mov	r2,zero
}
81116114:	e037883a 	mov	sp,fp
81116118:	dfc00117 	ldw	ra,4(sp)
8111611c:	df000017 	ldw	fp,0(sp)
81116120:	dec00204 	addi	sp,sp,8
81116124:	f800283a 	ret

81116128 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
81116128:	defff904 	addi	sp,sp,-28
8111612c:	dfc00615 	stw	ra,24(sp)
81116130:	df000515 	stw	fp,20(sp)
81116134:	df000504 	addi	fp,sp,20
81116138:	e13ffc15 	stw	r4,-16(fp)
8111613c:	e17ffd15 	stw	r5,-12(fp)
81116140:	e1bffe15 	stw	r6,-8(fp)
81116144:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
81116148:	e0800217 	ldw	r2,8(fp)
8111614c:	d8800015 	stw	r2,0(sp)
81116150:	e1ffff17 	ldw	r7,-4(fp)
81116154:	e1bffe17 	ldw	r6,-8(fp)
81116158:	e17ffd17 	ldw	r5,-12(fp)
8111615c:	e13ffc17 	ldw	r4,-16(fp)
81116160:	11162d80 	call	811162d8 <alt_iic_isr_register>
}  
81116164:	e037883a 	mov	sp,fp
81116168:	dfc00117 	ldw	ra,4(sp)
8111616c:	df000017 	ldw	fp,0(sp)
81116170:	dec00204 	addi	sp,sp,8
81116174:	f800283a 	ret

81116178 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
81116178:	defff904 	addi	sp,sp,-28
8111617c:	df000615 	stw	fp,24(sp)
81116180:	df000604 	addi	fp,sp,24
81116184:	e13ffe15 	stw	r4,-8(fp)
81116188:	e17fff15 	stw	r5,-4(fp)
8111618c:	e0bfff17 	ldw	r2,-4(fp)
81116190:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81116194:	0005303a 	rdctl	r2,status
81116198:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8111619c:	e0fffb17 	ldw	r3,-20(fp)
811161a0:	00bfff84 	movi	r2,-2
811161a4:	1884703a 	and	r2,r3,r2
811161a8:	1001703a 	wrctl	status,r2
  
  return context;
811161ac:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
811161b0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
811161b4:	00c00044 	movi	r3,1
811161b8:	e0bffa17 	ldw	r2,-24(fp)
811161bc:	1884983a 	sll	r2,r3,r2
811161c0:	1007883a 	mov	r3,r2
811161c4:	d0a02417 	ldw	r2,-32624(gp)
811161c8:	1884b03a 	or	r2,r3,r2
811161cc:	d0a02415 	stw	r2,-32624(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
811161d0:	d0a02417 	ldw	r2,-32624(gp)
811161d4:	100170fa 	wrctl	ienable,r2
811161d8:	e0bffc17 	ldw	r2,-16(fp)
811161dc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811161e0:	e0bffd17 	ldw	r2,-12(fp)
811161e4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
811161e8:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
811161ec:	0001883a 	nop
}
811161f0:	e037883a 	mov	sp,fp
811161f4:	df000017 	ldw	fp,0(sp)
811161f8:	dec00104 	addi	sp,sp,4
811161fc:	f800283a 	ret

81116200 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
81116200:	defff904 	addi	sp,sp,-28
81116204:	df000615 	stw	fp,24(sp)
81116208:	df000604 	addi	fp,sp,24
8111620c:	e13ffe15 	stw	r4,-8(fp)
81116210:	e17fff15 	stw	r5,-4(fp)
81116214:	e0bfff17 	ldw	r2,-4(fp)
81116218:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8111621c:	0005303a 	rdctl	r2,status
81116220:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81116224:	e0fffb17 	ldw	r3,-20(fp)
81116228:	00bfff84 	movi	r2,-2
8111622c:	1884703a 	and	r2,r3,r2
81116230:	1001703a 	wrctl	status,r2
  
  return context;
81116234:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
81116238:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
8111623c:	00c00044 	movi	r3,1
81116240:	e0bffa17 	ldw	r2,-24(fp)
81116244:	1884983a 	sll	r2,r3,r2
81116248:	0084303a 	nor	r2,zero,r2
8111624c:	1007883a 	mov	r3,r2
81116250:	d0a02417 	ldw	r2,-32624(gp)
81116254:	1884703a 	and	r2,r3,r2
81116258:	d0a02415 	stw	r2,-32624(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
8111625c:	d0a02417 	ldw	r2,-32624(gp)
81116260:	100170fa 	wrctl	ienable,r2
81116264:	e0bffc17 	ldw	r2,-16(fp)
81116268:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8111626c:	e0bffd17 	ldw	r2,-12(fp)
81116270:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
81116274:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
81116278:	0001883a 	nop
}
8111627c:	e037883a 	mov	sp,fp
81116280:	df000017 	ldw	fp,0(sp)
81116284:	dec00104 	addi	sp,sp,4
81116288:	f800283a 	ret

8111628c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
8111628c:	defffc04 	addi	sp,sp,-16
81116290:	df000315 	stw	fp,12(sp)
81116294:	df000304 	addi	fp,sp,12
81116298:	e13ffe15 	stw	r4,-8(fp)
8111629c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
811162a0:	000530fa 	rdctl	r2,ienable
811162a4:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
811162a8:	00c00044 	movi	r3,1
811162ac:	e0bfff17 	ldw	r2,-4(fp)
811162b0:	1884983a 	sll	r2,r3,r2
811162b4:	1007883a 	mov	r3,r2
811162b8:	e0bffd17 	ldw	r2,-12(fp)
811162bc:	1884703a 	and	r2,r3,r2
811162c0:	1004c03a 	cmpne	r2,r2,zero
811162c4:	10803fcc 	andi	r2,r2,255
}
811162c8:	e037883a 	mov	sp,fp
811162cc:	df000017 	ldw	fp,0(sp)
811162d0:	dec00104 	addi	sp,sp,4
811162d4:	f800283a 	ret

811162d8 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
811162d8:	defff504 	addi	sp,sp,-44
811162dc:	dfc00a15 	stw	ra,40(sp)
811162e0:	df000915 	stw	fp,36(sp)
811162e4:	df000904 	addi	fp,sp,36
811162e8:	e13ffc15 	stw	r4,-16(fp)
811162ec:	e17ffd15 	stw	r5,-12(fp)
811162f0:	e1bffe15 	stw	r6,-8(fp)
811162f4:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
811162f8:	00bffa84 	movi	r2,-22
811162fc:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
81116300:	e0bffd17 	ldw	r2,-12(fp)
81116304:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
81116308:	e0bff817 	ldw	r2,-32(fp)
8111630c:	10800808 	cmpgei	r2,r2,32
81116310:	1000271e 	bne	r2,zero,811163b0 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81116314:	0005303a 	rdctl	r2,status
81116318:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8111631c:	e0fffb17 	ldw	r3,-20(fp)
81116320:	00bfff84 	movi	r2,-2
81116324:	1884703a 	and	r2,r3,r2
81116328:	1001703a 	wrctl	status,r2
  
  return context;
8111632c:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
81116330:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
81116334:	00a044b4 	movhi	r2,33042
81116338:	10a95904 	addi	r2,r2,-23196
8111633c:	e0fff817 	ldw	r3,-32(fp)
81116340:	180690fa 	slli	r3,r3,3
81116344:	10c5883a 	add	r2,r2,r3
81116348:	e0fffe17 	ldw	r3,-8(fp)
8111634c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
81116350:	00a044b4 	movhi	r2,33042
81116354:	10a95904 	addi	r2,r2,-23196
81116358:	e0fff817 	ldw	r3,-32(fp)
8111635c:	180690fa 	slli	r3,r3,3
81116360:	10c5883a 	add	r2,r2,r3
81116364:	10800104 	addi	r2,r2,4
81116368:	e0ffff17 	ldw	r3,-4(fp)
8111636c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
81116370:	e0bffe17 	ldw	r2,-8(fp)
81116374:	10000526 	beq	r2,zero,8111638c <alt_iic_isr_register+0xb4>
81116378:	e0bff817 	ldw	r2,-32(fp)
8111637c:	100b883a 	mov	r5,r2
81116380:	e13ffc17 	ldw	r4,-16(fp)
81116384:	11161780 	call	81116178 <alt_ic_irq_enable>
81116388:	00000406 	br	8111639c <alt_iic_isr_register+0xc4>
8111638c:	e0bff817 	ldw	r2,-32(fp)
81116390:	100b883a 	mov	r5,r2
81116394:	e13ffc17 	ldw	r4,-16(fp)
81116398:	11162000 	call	81116200 <alt_ic_irq_disable>
8111639c:	e0bff715 	stw	r2,-36(fp)
811163a0:	e0bffa17 	ldw	r2,-24(fp)
811163a4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811163a8:	e0bff917 	ldw	r2,-28(fp)
811163ac:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
811163b0:	e0bff717 	ldw	r2,-36(fp)
}
811163b4:	e037883a 	mov	sp,fp
811163b8:	dfc00117 	ldw	ra,4(sp)
811163bc:	df000017 	ldw	fp,0(sp)
811163c0:	dec00204 	addi	sp,sp,8
811163c4:	f800283a 	ret

811163c8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
811163c8:	defff904 	addi	sp,sp,-28
811163cc:	dfc00615 	stw	ra,24(sp)
811163d0:	df000515 	stw	fp,20(sp)
811163d4:	df000504 	addi	fp,sp,20
811163d8:	e13ffc15 	stw	r4,-16(fp)
811163dc:	e17ffd15 	stw	r5,-12(fp)
811163e0:	e1bffe15 	stw	r6,-8(fp)
811163e4:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
811163e8:	e1bfff17 	ldw	r6,-4(fp)
811163ec:	e17ffe17 	ldw	r5,-8(fp)
811163f0:	e13ffd17 	ldw	r4,-12(fp)
811163f4:	11166080 	call	81116608 <open>
811163f8:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
811163fc:	e0bffb17 	ldw	r2,-20(fp)
81116400:	10001c16 	blt	r2,zero,81116474 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
81116404:	00a044b4 	movhi	r2,33042
81116408:	10a36904 	addi	r2,r2,-29276
8111640c:	e0fffb17 	ldw	r3,-20(fp)
81116410:	18c00324 	muli	r3,r3,12
81116414:	10c5883a 	add	r2,r2,r3
81116418:	10c00017 	ldw	r3,0(r2)
8111641c:	e0bffc17 	ldw	r2,-16(fp)
81116420:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
81116424:	00a044b4 	movhi	r2,33042
81116428:	10a36904 	addi	r2,r2,-29276
8111642c:	e0fffb17 	ldw	r3,-20(fp)
81116430:	18c00324 	muli	r3,r3,12
81116434:	10c5883a 	add	r2,r2,r3
81116438:	10800104 	addi	r2,r2,4
8111643c:	10c00017 	ldw	r3,0(r2)
81116440:	e0bffc17 	ldw	r2,-16(fp)
81116444:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
81116448:	00a044b4 	movhi	r2,33042
8111644c:	10a36904 	addi	r2,r2,-29276
81116450:	e0fffb17 	ldw	r3,-20(fp)
81116454:	18c00324 	muli	r3,r3,12
81116458:	10c5883a 	add	r2,r2,r3
8111645c:	10800204 	addi	r2,r2,8
81116460:	10c00017 	ldw	r3,0(r2)
81116464:	e0bffc17 	ldw	r2,-16(fp)
81116468:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
8111646c:	e13ffb17 	ldw	r4,-20(fp)
81116470:	1111fa00 	call	81111fa0 <alt_release_fd>
  }
} 
81116474:	0001883a 	nop
81116478:	e037883a 	mov	sp,fp
8111647c:	dfc00117 	ldw	ra,4(sp)
81116480:	df000017 	ldw	fp,0(sp)
81116484:	dec00204 	addi	sp,sp,8
81116488:	f800283a 	ret

8111648c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
8111648c:	defffb04 	addi	sp,sp,-20
81116490:	dfc00415 	stw	ra,16(sp)
81116494:	df000315 	stw	fp,12(sp)
81116498:	df000304 	addi	fp,sp,12
8111649c:	e13ffd15 	stw	r4,-12(fp)
811164a0:	e17ffe15 	stw	r5,-8(fp)
811164a4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
811164a8:	01c07fc4 	movi	r7,511
811164ac:	01800044 	movi	r6,1
811164b0:	e17ffd17 	ldw	r5,-12(fp)
811164b4:	012044b4 	movhi	r4,33042
811164b8:	21236c04 	addi	r4,r4,-29264
811164bc:	11163c80 	call	811163c8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
811164c0:	01c07fc4 	movi	r7,511
811164c4:	000d883a 	mov	r6,zero
811164c8:	e17ffe17 	ldw	r5,-8(fp)
811164cc:	012044b4 	movhi	r4,33042
811164d0:	21236904 	addi	r4,r4,-29276
811164d4:	11163c80 	call	811163c8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
811164d8:	01c07fc4 	movi	r7,511
811164dc:	01800044 	movi	r6,1
811164e0:	e17fff17 	ldw	r5,-4(fp)
811164e4:	012044b4 	movhi	r4,33042
811164e8:	21236f04 	addi	r4,r4,-29252
811164ec:	11163c80 	call	811163c8 <alt_open_fd>
}  
811164f0:	0001883a 	nop
811164f4:	e037883a 	mov	sp,fp
811164f8:	dfc00117 	ldw	ra,4(sp)
811164fc:	df000017 	ldw	fp,0(sp)
81116500:	dec00204 	addi	sp,sp,8
81116504:	f800283a 	ret

81116508 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
81116508:	defffe04 	addi	sp,sp,-8
8111650c:	dfc00115 	stw	ra,4(sp)
81116510:	df000015 	stw	fp,0(sp)
81116514:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
81116518:	d0a00b17 	ldw	r2,-32724(gp)
8111651c:	10000326 	beq	r2,zero,8111652c <alt_get_errno+0x24>
81116520:	d0a00b17 	ldw	r2,-32724(gp)
81116524:	103ee83a 	callr	r2
81116528:	00000106 	br	81116530 <alt_get_errno+0x28>
8111652c:	d0a01e04 	addi	r2,gp,-32648
}
81116530:	e037883a 	mov	sp,fp
81116534:	dfc00117 	ldw	ra,4(sp)
81116538:	df000017 	ldw	fp,0(sp)
8111653c:	dec00204 	addi	sp,sp,8
81116540:	f800283a 	ret

81116544 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
81116544:	defffd04 	addi	sp,sp,-12
81116548:	df000215 	stw	fp,8(sp)
8111654c:	df000204 	addi	fp,sp,8
81116550:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
81116554:	e0bfff17 	ldw	r2,-4(fp)
81116558:	10800217 	ldw	r2,8(r2)
8111655c:	10d00034 	orhi	r3,r2,16384
81116560:	e0bfff17 	ldw	r2,-4(fp)
81116564:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
81116568:	e03ffe15 	stw	zero,-8(fp)
8111656c:	00001d06 	br	811165e4 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
81116570:	00a044b4 	movhi	r2,33042
81116574:	10a36904 	addi	r2,r2,-29276
81116578:	e0fffe17 	ldw	r3,-8(fp)
8111657c:	18c00324 	muli	r3,r3,12
81116580:	10c5883a 	add	r2,r2,r3
81116584:	10c00017 	ldw	r3,0(r2)
81116588:	e0bfff17 	ldw	r2,-4(fp)
8111658c:	10800017 	ldw	r2,0(r2)
81116590:	1880111e 	bne	r3,r2,811165d8 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
81116594:	00a044b4 	movhi	r2,33042
81116598:	10a36904 	addi	r2,r2,-29276
8111659c:	e0fffe17 	ldw	r3,-8(fp)
811165a0:	18c00324 	muli	r3,r3,12
811165a4:	10c5883a 	add	r2,r2,r3
811165a8:	10800204 	addi	r2,r2,8
811165ac:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
811165b0:	1000090e 	bge	r2,zero,811165d8 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
811165b4:	e0bffe17 	ldw	r2,-8(fp)
811165b8:	10c00324 	muli	r3,r2,12
811165bc:	00a044b4 	movhi	r2,33042
811165c0:	10a36904 	addi	r2,r2,-29276
811165c4:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
811165c8:	e0bfff17 	ldw	r2,-4(fp)
811165cc:	18800226 	beq	r3,r2,811165d8 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
811165d0:	00bffcc4 	movi	r2,-13
811165d4:	00000806 	br	811165f8 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
811165d8:	e0bffe17 	ldw	r2,-8(fp)
811165dc:	10800044 	addi	r2,r2,1
811165e0:	e0bffe15 	stw	r2,-8(fp)
811165e4:	d0a00a17 	ldw	r2,-32728(gp)
811165e8:	1007883a 	mov	r3,r2
811165ec:	e0bffe17 	ldw	r2,-8(fp)
811165f0:	18bfdf2e 	bgeu	r3,r2,81116570 <__reset+0xfb0f6570>
    }
  }
  
  /* The device is not locked */
 
  return 0;
811165f4:	0005883a 	mov	r2,zero
}
811165f8:	e037883a 	mov	sp,fp
811165fc:	df000017 	ldw	fp,0(sp)
81116600:	dec00104 	addi	sp,sp,4
81116604:	f800283a 	ret

81116608 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
81116608:	defff604 	addi	sp,sp,-40
8111660c:	dfc00915 	stw	ra,36(sp)
81116610:	df000815 	stw	fp,32(sp)
81116614:	df000804 	addi	fp,sp,32
81116618:	e13ffd15 	stw	r4,-12(fp)
8111661c:	e17ffe15 	stw	r5,-8(fp)
81116620:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
81116624:	00bfffc4 	movi	r2,-1
81116628:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
8111662c:	00bffb44 	movi	r2,-19
81116630:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
81116634:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
81116638:	d1600804 	addi	r5,gp,-32736
8111663c:	e13ffd17 	ldw	r4,-12(fp)
81116640:	11160980 	call	81116098 <alt_find_dev>
81116644:	e0bff815 	stw	r2,-32(fp)
81116648:	e0bff817 	ldw	r2,-32(fp)
8111664c:	1000051e 	bne	r2,zero,81116664 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
81116650:	e13ffd17 	ldw	r4,-12(fp)
81116654:	11169e80 	call	811169e8 <alt_find_file>
81116658:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
8111665c:	00800044 	movi	r2,1
81116660:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
81116664:	e0bff817 	ldw	r2,-32(fp)
81116668:	10002926 	beq	r2,zero,81116710 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
8111666c:	e13ff817 	ldw	r4,-32(fp)
81116670:	1116af00 	call	81116af0 <alt_get_fd>
81116674:	e0bff915 	stw	r2,-28(fp)
81116678:	e0bff917 	ldw	r2,-28(fp)
8111667c:	1000030e 	bge	r2,zero,8111668c <open+0x84>
    {
      status = index;
81116680:	e0bff917 	ldw	r2,-28(fp)
81116684:	e0bffa15 	stw	r2,-24(fp)
81116688:	00002306 	br	81116718 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
8111668c:	e0bff917 	ldw	r2,-28(fp)
81116690:	10c00324 	muli	r3,r2,12
81116694:	00a044b4 	movhi	r2,33042
81116698:	10a36904 	addi	r2,r2,-29276
8111669c:	1885883a 	add	r2,r3,r2
811166a0:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
811166a4:	e0fffe17 	ldw	r3,-8(fp)
811166a8:	00900034 	movhi	r2,16384
811166ac:	10bfffc4 	addi	r2,r2,-1
811166b0:	1886703a 	and	r3,r3,r2
811166b4:	e0bffc17 	ldw	r2,-16(fp)
811166b8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
811166bc:	e0bffb17 	ldw	r2,-20(fp)
811166c0:	1000051e 	bne	r2,zero,811166d8 <open+0xd0>
811166c4:	e13ffc17 	ldw	r4,-16(fp)
811166c8:	11165440 	call	81116544 <alt_file_locked>
811166cc:	e0bffa15 	stw	r2,-24(fp)
811166d0:	e0bffa17 	ldw	r2,-24(fp)
811166d4:	10001016 	blt	r2,zero,81116718 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
811166d8:	e0bff817 	ldw	r2,-32(fp)
811166dc:	10800317 	ldw	r2,12(r2)
811166e0:	10000826 	beq	r2,zero,81116704 <open+0xfc>
811166e4:	e0bff817 	ldw	r2,-32(fp)
811166e8:	10800317 	ldw	r2,12(r2)
811166ec:	e1ffff17 	ldw	r7,-4(fp)
811166f0:	e1bffe17 	ldw	r6,-8(fp)
811166f4:	e17ffd17 	ldw	r5,-12(fp)
811166f8:	e13ffc17 	ldw	r4,-16(fp)
811166fc:	103ee83a 	callr	r2
81116700:	00000106 	br	81116708 <open+0x100>
81116704:	0005883a 	mov	r2,zero
81116708:	e0bffa15 	stw	r2,-24(fp)
8111670c:	00000206 	br	81116718 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
81116710:	00bffb44 	movi	r2,-19
81116714:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
81116718:	e0bffa17 	ldw	r2,-24(fp)
8111671c:	1000090e 	bge	r2,zero,81116744 <open+0x13c>
  {
    alt_release_fd (index);  
81116720:	e13ff917 	ldw	r4,-28(fp)
81116724:	1111fa00 	call	81111fa0 <alt_release_fd>
    ALT_ERRNO = -status;
81116728:	11165080 	call	81116508 <alt_get_errno>
8111672c:	1007883a 	mov	r3,r2
81116730:	e0bffa17 	ldw	r2,-24(fp)
81116734:	0085c83a 	sub	r2,zero,r2
81116738:	18800015 	stw	r2,0(r3)
    return -1;
8111673c:	00bfffc4 	movi	r2,-1
81116740:	00000106 	br	81116748 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
81116744:	e0bff917 	ldw	r2,-28(fp)
}
81116748:	e037883a 	mov	sp,fp
8111674c:	dfc00117 	ldw	ra,4(sp)
81116750:	df000017 	ldw	fp,0(sp)
81116754:	dec00204 	addi	sp,sp,8
81116758:	f800283a 	ret

8111675c <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
8111675c:	defff204 	addi	sp,sp,-56
81116760:	dfc00a15 	stw	ra,40(sp)
81116764:	df000915 	stw	fp,36(sp)
81116768:	df000904 	addi	fp,sp,36
8111676c:	e13fff15 	stw	r4,-4(fp)
81116770:	e1400215 	stw	r5,8(fp)
81116774:	e1800315 	stw	r6,12(fp)
81116778:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
8111677c:	e0800204 	addi	r2,fp,8
81116780:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
81116784:	e0bfff17 	ldw	r2,-4(fp)
81116788:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
8111678c:	00006f06 	br	8111694c <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
81116790:	e0bff807 	ldb	r2,-32(fp)
81116794:	10800960 	cmpeqi	r2,r2,37
81116798:	1000041e 	bne	r2,zero,811167ac <alt_printf+0x50>
        {
            alt_putchar(c);
8111679c:	e0bff807 	ldb	r2,-32(fp)
811167a0:	1009883a 	mov	r4,r2
811167a4:	11169880 	call	81116988 <alt_putchar>
811167a8:	00006806 	br	8111694c <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
811167ac:	e0bff717 	ldw	r2,-36(fp)
811167b0:	10c00044 	addi	r3,r2,1
811167b4:	e0fff715 	stw	r3,-36(fp)
811167b8:	10800003 	ldbu	r2,0(r2)
811167bc:	e0bff805 	stb	r2,-32(fp)
811167c0:	e0bff807 	ldb	r2,-32(fp)
811167c4:	10006926 	beq	r2,zero,8111696c <alt_printf+0x210>
            {
                if (c == '%')
811167c8:	e0bff807 	ldb	r2,-32(fp)
811167cc:	10800958 	cmpnei	r2,r2,37
811167d0:	1000041e 	bne	r2,zero,811167e4 <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
811167d4:	e0bff807 	ldb	r2,-32(fp)
811167d8:	1009883a 	mov	r4,r2
811167dc:	11169880 	call	81116988 <alt_putchar>
811167e0:	00005a06 	br	8111694c <alt_printf+0x1f0>
                } 
                else if (c == 'c')
811167e4:	e0bff807 	ldb	r2,-32(fp)
811167e8:	108018d8 	cmpnei	r2,r2,99
811167ec:	1000081e 	bne	r2,zero,81116810 <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
811167f0:	e0bffe17 	ldw	r2,-8(fp)
811167f4:	10c00104 	addi	r3,r2,4
811167f8:	e0fffe15 	stw	r3,-8(fp)
811167fc:	10800017 	ldw	r2,0(r2)
81116800:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
81116804:	e13ffd17 	ldw	r4,-12(fp)
81116808:	11169880 	call	81116988 <alt_putchar>
8111680c:	00004f06 	br	8111694c <alt_printf+0x1f0>
                }
                else if (c == 'x')
81116810:	e0bff807 	ldb	r2,-32(fp)
81116814:	10801e18 	cmpnei	r2,r2,120
81116818:	1000341e 	bne	r2,zero,811168ec <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
8111681c:	e0bffe17 	ldw	r2,-8(fp)
81116820:	10c00104 	addi	r3,r2,4
81116824:	e0fffe15 	stw	r3,-8(fp)
81116828:	10800017 	ldw	r2,0(r2)
8111682c:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
81116830:	e0bffb17 	ldw	r2,-20(fp)
81116834:	1000031e 	bne	r2,zero,81116844 <alt_printf+0xe8>
                    {
                        alt_putchar('0');
81116838:	01000c04 	movi	r4,48
8111683c:	11169880 	call	81116988 <alt_putchar>
                        continue;
81116840:	00004206 	br	8111694c <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
81116844:	00800704 	movi	r2,28
81116848:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
8111684c:	00000306 	br	8111685c <alt_printf+0x100>
                        digit_shift -= 4;
81116850:	e0bff917 	ldw	r2,-28(fp)
81116854:	10bfff04 	addi	r2,r2,-4
81116858:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
8111685c:	00c003c4 	movi	r3,15
81116860:	e0bff917 	ldw	r2,-28(fp)
81116864:	1884983a 	sll	r2,r3,r2
81116868:	1007883a 	mov	r3,r2
8111686c:	e0bffb17 	ldw	r2,-20(fp)
81116870:	1884703a 	and	r2,r3,r2
81116874:	103ff626 	beq	r2,zero,81116850 <__reset+0xfb0f6850>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
81116878:	00001906 	br	811168e0 <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
8111687c:	00c003c4 	movi	r3,15
81116880:	e0bff917 	ldw	r2,-28(fp)
81116884:	1884983a 	sll	r2,r3,r2
81116888:	1007883a 	mov	r3,r2
8111688c:	e0bffb17 	ldw	r2,-20(fp)
81116890:	1886703a 	and	r3,r3,r2
81116894:	e0bff917 	ldw	r2,-28(fp)
81116898:	1884d83a 	srl	r2,r3,r2
8111689c:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
811168a0:	e0bffc17 	ldw	r2,-16(fp)
811168a4:	108002a8 	cmpgeui	r2,r2,10
811168a8:	1000041e 	bne	r2,zero,811168bc <alt_printf+0x160>
                            c = '0' + digit;
811168ac:	e0bffc17 	ldw	r2,-16(fp)
811168b0:	10800c04 	addi	r2,r2,48
811168b4:	e0bff805 	stb	r2,-32(fp)
811168b8:	00000306 	br	811168c8 <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
811168bc:	e0bffc17 	ldw	r2,-16(fp)
811168c0:	108015c4 	addi	r2,r2,87
811168c4:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
811168c8:	e0bff807 	ldb	r2,-32(fp)
811168cc:	1009883a 	mov	r4,r2
811168d0:	11169880 	call	81116988 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
811168d4:	e0bff917 	ldw	r2,-28(fp)
811168d8:	10bfff04 	addi	r2,r2,-4
811168dc:	e0bff915 	stw	r2,-28(fp)
811168e0:	e0bff917 	ldw	r2,-28(fp)
811168e4:	103fe50e 	bge	r2,zero,8111687c <__reset+0xfb0f687c>
811168e8:	00001806 	br	8111694c <alt_printf+0x1f0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
811168ec:	e0bff807 	ldb	r2,-32(fp)
811168f0:	10801cd8 	cmpnei	r2,r2,115
811168f4:	1000151e 	bne	r2,zero,8111694c <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
811168f8:	e0bffe17 	ldw	r2,-8(fp)
811168fc:	10c00104 	addi	r3,r2,4
81116900:	e0fffe15 	stw	r3,-8(fp)
81116904:	10800017 	ldw	r2,0(r2)
81116908:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
8111690c:	00000906 	br	81116934 <alt_printf+0x1d8>
                      alt_putchar(*s++);
81116910:	e0bffa17 	ldw	r2,-24(fp)
81116914:	10c00044 	addi	r3,r2,1
81116918:	e0fffa15 	stw	r3,-24(fp)
8111691c:	10800003 	ldbu	r2,0(r2)
81116920:	10803fcc 	andi	r2,r2,255
81116924:	1080201c 	xori	r2,r2,128
81116928:	10bfe004 	addi	r2,r2,-128
8111692c:	1009883a 	mov	r4,r2
81116930:	11169880 	call	81116988 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
81116934:	e0bffa17 	ldw	r2,-24(fp)
81116938:	10800003 	ldbu	r2,0(r2)
8111693c:	10803fcc 	andi	r2,r2,255
81116940:	1080201c 	xori	r2,r2,128
81116944:	10bfe004 	addi	r2,r2,-128
81116948:	103ff11e 	bne	r2,zero,81116910 <__reset+0xfb0f6910>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
8111694c:	e0bff717 	ldw	r2,-36(fp)
81116950:	10c00044 	addi	r3,r2,1
81116954:	e0fff715 	stw	r3,-36(fp)
81116958:	10800003 	ldbu	r2,0(r2)
8111695c:	e0bff805 	stb	r2,-32(fp)
81116960:	e0bff807 	ldb	r2,-32(fp)
81116964:	103f8a1e 	bne	r2,zero,81116790 <__reset+0xfb0f6790>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
81116968:	00000106 	br	81116970 <alt_printf+0x214>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
8111696c:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
81116970:	0001883a 	nop
81116974:	e037883a 	mov	sp,fp
81116978:	dfc00117 	ldw	ra,4(sp)
8111697c:	df000017 	ldw	fp,0(sp)
81116980:	dec00504 	addi	sp,sp,20
81116984:	f800283a 	ret

81116988 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
81116988:	defffd04 	addi	sp,sp,-12
8111698c:	dfc00215 	stw	ra,8(sp)
81116990:	df000115 	stw	fp,4(sp)
81116994:	df000104 	addi	fp,sp,4
81116998:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
8111699c:	d0a00117 	ldw	r2,-32764(gp)
811169a0:	10800217 	ldw	r2,8(r2)
811169a4:	100b883a 	mov	r5,r2
811169a8:	e13fff17 	ldw	r4,-4(fp)
811169ac:	110c5980 	call	8110c598 <putc>
#endif
#endif
}
811169b0:	e037883a 	mov	sp,fp
811169b4:	dfc00117 	ldw	ra,4(sp)
811169b8:	df000017 	ldw	fp,0(sp)
811169bc:	dec00204 	addi	sp,sp,8
811169c0:	f800283a 	ret

811169c4 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
811169c4:	deffff04 	addi	sp,sp,-4
811169c8:	df000015 	stw	fp,0(sp)
811169cc:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
811169d0:	000170fa 	wrctl	ienable,zero
}
811169d4:	0001883a 	nop
811169d8:	e037883a 	mov	sp,fp
811169dc:	df000017 	ldw	fp,0(sp)
811169e0:	dec00104 	addi	sp,sp,4
811169e4:	f800283a 	ret

811169e8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
811169e8:	defffb04 	addi	sp,sp,-20
811169ec:	dfc00415 	stw	ra,16(sp)
811169f0:	df000315 	stw	fp,12(sp)
811169f4:	df000304 	addi	fp,sp,12
811169f8:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
811169fc:	d0a00617 	ldw	r2,-32744(gp)
81116a00:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
81116a04:	00003106 	br	81116acc <alt_find_file+0xe4>
  {
    len = strlen(next->name);
81116a08:	e0bffd17 	ldw	r2,-12(fp)
81116a0c:	10800217 	ldw	r2,8(r2)
81116a10:	1009883a 	mov	r4,r2
81116a14:	11058ec0 	call	811058ec <strlen>
81116a18:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
81116a1c:	e0bffd17 	ldw	r2,-12(fp)
81116a20:	10c00217 	ldw	r3,8(r2)
81116a24:	e0bffe17 	ldw	r2,-8(fp)
81116a28:	10bfffc4 	addi	r2,r2,-1
81116a2c:	1885883a 	add	r2,r3,r2
81116a30:	10800003 	ldbu	r2,0(r2)
81116a34:	10803fcc 	andi	r2,r2,255
81116a38:	1080201c 	xori	r2,r2,128
81116a3c:	10bfe004 	addi	r2,r2,-128
81116a40:	10800bd8 	cmpnei	r2,r2,47
81116a44:	1000031e 	bne	r2,zero,81116a54 <alt_find_file+0x6c>
    {
      len -= 1;
81116a48:	e0bffe17 	ldw	r2,-8(fp)
81116a4c:	10bfffc4 	addi	r2,r2,-1
81116a50:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
81116a54:	e0bffe17 	ldw	r2,-8(fp)
81116a58:	e0ffff17 	ldw	r3,-4(fp)
81116a5c:	1885883a 	add	r2,r3,r2
81116a60:	10800003 	ldbu	r2,0(r2)
81116a64:	10803fcc 	andi	r2,r2,255
81116a68:	1080201c 	xori	r2,r2,128
81116a6c:	10bfe004 	addi	r2,r2,-128
81116a70:	10800be0 	cmpeqi	r2,r2,47
81116a74:	1000081e 	bne	r2,zero,81116a98 <alt_find_file+0xb0>
81116a78:	e0bffe17 	ldw	r2,-8(fp)
81116a7c:	e0ffff17 	ldw	r3,-4(fp)
81116a80:	1885883a 	add	r2,r3,r2
81116a84:	10800003 	ldbu	r2,0(r2)
81116a88:	10803fcc 	andi	r2,r2,255
81116a8c:	1080201c 	xori	r2,r2,128
81116a90:	10bfe004 	addi	r2,r2,-128
81116a94:	10000a1e 	bne	r2,zero,81116ac0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
81116a98:	e0bffd17 	ldw	r2,-12(fp)
81116a9c:	10800217 	ldw	r2,8(r2)
81116aa0:	e0fffe17 	ldw	r3,-8(fp)
81116aa4:	180d883a 	mov	r6,r3
81116aa8:	e17fff17 	ldw	r5,-4(fp)
81116aac:	1009883a 	mov	r4,r2
81116ab0:	1116c7c0 	call	81116c7c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
81116ab4:	1000021e 	bne	r2,zero,81116ac0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
81116ab8:	e0bffd17 	ldw	r2,-12(fp)
81116abc:	00000706 	br	81116adc <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
81116ac0:	e0bffd17 	ldw	r2,-12(fp)
81116ac4:	10800017 	ldw	r2,0(r2)
81116ac8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
81116acc:	e0fffd17 	ldw	r3,-12(fp)
81116ad0:	d0a00604 	addi	r2,gp,-32744
81116ad4:	18bfcc1e 	bne	r3,r2,81116a08 <__reset+0xfb0f6a08>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
81116ad8:	0005883a 	mov	r2,zero
}
81116adc:	e037883a 	mov	sp,fp
81116ae0:	dfc00117 	ldw	ra,4(sp)
81116ae4:	df000017 	ldw	fp,0(sp)
81116ae8:	dec00204 	addi	sp,sp,8
81116aec:	f800283a 	ret

81116af0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
81116af0:	defffc04 	addi	sp,sp,-16
81116af4:	df000315 	stw	fp,12(sp)
81116af8:	df000304 	addi	fp,sp,12
81116afc:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
81116b00:	00bffa04 	movi	r2,-24
81116b04:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
81116b08:	e03ffd15 	stw	zero,-12(fp)
81116b0c:	00001906 	br	81116b74 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
81116b10:	00a044b4 	movhi	r2,33042
81116b14:	10a36904 	addi	r2,r2,-29276
81116b18:	e0fffd17 	ldw	r3,-12(fp)
81116b1c:	18c00324 	muli	r3,r3,12
81116b20:	10c5883a 	add	r2,r2,r3
81116b24:	10800017 	ldw	r2,0(r2)
81116b28:	10000f1e 	bne	r2,zero,81116b68 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
81116b2c:	00a044b4 	movhi	r2,33042
81116b30:	10a36904 	addi	r2,r2,-29276
81116b34:	e0fffd17 	ldw	r3,-12(fp)
81116b38:	18c00324 	muli	r3,r3,12
81116b3c:	10c5883a 	add	r2,r2,r3
81116b40:	e0ffff17 	ldw	r3,-4(fp)
81116b44:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
81116b48:	d0e00a17 	ldw	r3,-32728(gp)
81116b4c:	e0bffd17 	ldw	r2,-12(fp)
81116b50:	1880020e 	bge	r3,r2,81116b5c <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
81116b54:	e0bffd17 	ldw	r2,-12(fp)
81116b58:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
81116b5c:	e0bffd17 	ldw	r2,-12(fp)
81116b60:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
81116b64:	00000606 	br	81116b80 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
81116b68:	e0bffd17 	ldw	r2,-12(fp)
81116b6c:	10800044 	addi	r2,r2,1
81116b70:	e0bffd15 	stw	r2,-12(fp)
81116b74:	e0bffd17 	ldw	r2,-12(fp)
81116b78:	10800810 	cmplti	r2,r2,32
81116b7c:	103fe41e 	bne	r2,zero,81116b10 <__reset+0xfb0f6b10>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
81116b80:	e0bffe17 	ldw	r2,-8(fp)
}
81116b84:	e037883a 	mov	sp,fp
81116b88:	df000017 	ldw	fp,0(sp)
81116b8c:	dec00104 	addi	sp,sp,4
81116b90:	f800283a 	ret

81116b94 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
81116b94:	defffe04 	addi	sp,sp,-8
81116b98:	df000115 	stw	fp,4(sp)
81116b9c:	df000104 	addi	fp,sp,4
81116ba0:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
81116ba4:	e0bfff17 	ldw	r2,-4(fp)
81116ba8:	10bffe84 	addi	r2,r2,-6
81116bac:	10c00428 	cmpgeui	r3,r2,16
81116bb0:	18001a1e 	bne	r3,zero,81116c1c <alt_exception_cause_generated_bad_addr+0x88>
81116bb4:	100690ba 	slli	r3,r2,2
81116bb8:	00a04474 	movhi	r2,33041
81116bbc:	109af304 	addi	r2,r2,27596
81116bc0:	1885883a 	add	r2,r3,r2
81116bc4:	10800017 	ldw	r2,0(r2)
81116bc8:	1000683a 	jmp	r2
81116bcc:	81116c0c 	andi	r4,r16,17840
81116bd0:	81116c0c 	andi	r4,r16,17840
81116bd4:	81116c1c 	xori	r4,r16,17840
81116bd8:	81116c1c 	xori	r4,r16,17840
81116bdc:	81116c1c 	xori	r4,r16,17840
81116be0:	81116c0c 	andi	r4,r16,17840
81116be4:	81116c14 	ori	r4,r16,17840
81116be8:	81116c1c 	xori	r4,r16,17840
81116bec:	81116c0c 	andi	r4,r16,17840
81116bf0:	81116c0c 	andi	r4,r16,17840
81116bf4:	81116c1c 	xori	r4,r16,17840
81116bf8:	81116c0c 	andi	r4,r16,17840
81116bfc:	81116c14 	ori	r4,r16,17840
81116c00:	81116c1c 	xori	r4,r16,17840
81116c04:	81116c1c 	xori	r4,r16,17840
81116c08:	81116c0c 	andi	r4,r16,17840
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
81116c0c:	00800044 	movi	r2,1
81116c10:	00000306 	br	81116c20 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
81116c14:	0005883a 	mov	r2,zero
81116c18:	00000106 	br	81116c20 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
81116c1c:	0005883a 	mov	r2,zero
  }
}
81116c20:	e037883a 	mov	sp,fp
81116c24:	df000017 	ldw	fp,0(sp)
81116c28:	dec00104 	addi	sp,sp,4
81116c2c:	f800283a 	ret

81116c30 <atexit>:
81116c30:	200b883a 	mov	r5,r4
81116c34:	000f883a 	mov	r7,zero
81116c38:	000d883a 	mov	r6,zero
81116c3c:	0009883a 	mov	r4,zero
81116c40:	1116cf81 	jmpi	81116cf8 <__register_exitproc>

81116c44 <exit>:
81116c44:	defffe04 	addi	sp,sp,-8
81116c48:	000b883a 	mov	r5,zero
81116c4c:	dc000015 	stw	r16,0(sp)
81116c50:	dfc00115 	stw	ra,4(sp)
81116c54:	2021883a 	mov	r16,r4
81116c58:	1116e100 	call	81116e10 <__call_exitprocs>
81116c5c:	00a044b4 	movhi	r2,33042
81116c60:	10a82904 	addi	r2,r2,-24412
81116c64:	11000017 	ldw	r4,0(r2)
81116c68:	20800f17 	ldw	r2,60(r4)
81116c6c:	10000126 	beq	r2,zero,81116c74 <exit+0x30>
81116c70:	103ee83a 	callr	r2
81116c74:	8009883a 	mov	r4,r16
81116c78:	1116f900 	call	81116f90 <_exit>

81116c7c <memcmp>:
81116c7c:	01c000c4 	movi	r7,3
81116c80:	3980192e 	bgeu	r7,r6,81116ce8 <memcmp+0x6c>
81116c84:	2144b03a 	or	r2,r4,r5
81116c88:	11c4703a 	and	r2,r2,r7
81116c8c:	10000f26 	beq	r2,zero,81116ccc <memcmp+0x50>
81116c90:	20800003 	ldbu	r2,0(r4)
81116c94:	28c00003 	ldbu	r3,0(r5)
81116c98:	10c0151e 	bne	r2,r3,81116cf0 <memcmp+0x74>
81116c9c:	31bfff84 	addi	r6,r6,-2
81116ca0:	01ffffc4 	movi	r7,-1
81116ca4:	00000406 	br	81116cb8 <memcmp+0x3c>
81116ca8:	20800003 	ldbu	r2,0(r4)
81116cac:	28c00003 	ldbu	r3,0(r5)
81116cb0:	31bfffc4 	addi	r6,r6,-1
81116cb4:	10c00e1e 	bne	r2,r3,81116cf0 <memcmp+0x74>
81116cb8:	21000044 	addi	r4,r4,1
81116cbc:	29400044 	addi	r5,r5,1
81116cc0:	31fff91e 	bne	r6,r7,81116ca8 <__reset+0xfb0f6ca8>
81116cc4:	0005883a 	mov	r2,zero
81116cc8:	f800283a 	ret
81116ccc:	20c00017 	ldw	r3,0(r4)
81116cd0:	28800017 	ldw	r2,0(r5)
81116cd4:	18bfee1e 	bne	r3,r2,81116c90 <__reset+0xfb0f6c90>
81116cd8:	31bfff04 	addi	r6,r6,-4
81116cdc:	21000104 	addi	r4,r4,4
81116ce0:	29400104 	addi	r5,r5,4
81116ce4:	39bff936 	bltu	r7,r6,81116ccc <__reset+0xfb0f6ccc>
81116ce8:	303fe91e 	bne	r6,zero,81116c90 <__reset+0xfb0f6c90>
81116cec:	003ff506 	br	81116cc4 <__reset+0xfb0f6cc4>
81116cf0:	10c5c83a 	sub	r2,r2,r3
81116cf4:	f800283a 	ret

81116cf8 <__register_exitproc>:
81116cf8:	defffa04 	addi	sp,sp,-24
81116cfc:	dc000315 	stw	r16,12(sp)
81116d00:	042044b4 	movhi	r16,33042
81116d04:	84282904 	addi	r16,r16,-24412
81116d08:	80c00017 	ldw	r3,0(r16)
81116d0c:	dc400415 	stw	r17,16(sp)
81116d10:	dfc00515 	stw	ra,20(sp)
81116d14:	18805217 	ldw	r2,328(r3)
81116d18:	2023883a 	mov	r17,r4
81116d1c:	10003726 	beq	r2,zero,81116dfc <__register_exitproc+0x104>
81116d20:	10c00117 	ldw	r3,4(r2)
81116d24:	010007c4 	movi	r4,31
81116d28:	20c00e16 	blt	r4,r3,81116d64 <__register_exitproc+0x6c>
81116d2c:	1a000044 	addi	r8,r3,1
81116d30:	8800221e 	bne	r17,zero,81116dbc <__register_exitproc+0xc4>
81116d34:	18c00084 	addi	r3,r3,2
81116d38:	18c7883a 	add	r3,r3,r3
81116d3c:	18c7883a 	add	r3,r3,r3
81116d40:	12000115 	stw	r8,4(r2)
81116d44:	10c7883a 	add	r3,r2,r3
81116d48:	19400015 	stw	r5,0(r3)
81116d4c:	0005883a 	mov	r2,zero
81116d50:	dfc00517 	ldw	ra,20(sp)
81116d54:	dc400417 	ldw	r17,16(sp)
81116d58:	dc000317 	ldw	r16,12(sp)
81116d5c:	dec00604 	addi	sp,sp,24
81116d60:	f800283a 	ret
81116d64:	00800034 	movhi	r2,0
81116d68:	10800004 	addi	r2,r2,0
81116d6c:	10002626 	beq	r2,zero,81116e08 <__register_exitproc+0x110>
81116d70:	01006404 	movi	r4,400
81116d74:	d9400015 	stw	r5,0(sp)
81116d78:	d9800115 	stw	r6,4(sp)
81116d7c:	d9c00215 	stw	r7,8(sp)
81116d80:	00000000 	call	80000000 <__alt_mem_m2_ddr2_memory+0x40000000>
81116d84:	d9400017 	ldw	r5,0(sp)
81116d88:	d9800117 	ldw	r6,4(sp)
81116d8c:	d9c00217 	ldw	r7,8(sp)
81116d90:	10001d26 	beq	r2,zero,81116e08 <__register_exitproc+0x110>
81116d94:	81000017 	ldw	r4,0(r16)
81116d98:	10000115 	stw	zero,4(r2)
81116d9c:	02000044 	movi	r8,1
81116da0:	22405217 	ldw	r9,328(r4)
81116da4:	0007883a 	mov	r3,zero
81116da8:	12400015 	stw	r9,0(r2)
81116dac:	20805215 	stw	r2,328(r4)
81116db0:	10006215 	stw	zero,392(r2)
81116db4:	10006315 	stw	zero,396(r2)
81116db8:	883fde26 	beq	r17,zero,81116d34 <__reset+0xfb0f6d34>
81116dbc:	18c9883a 	add	r4,r3,r3
81116dc0:	2109883a 	add	r4,r4,r4
81116dc4:	1109883a 	add	r4,r2,r4
81116dc8:	21802215 	stw	r6,136(r4)
81116dcc:	01800044 	movi	r6,1
81116dd0:	12406217 	ldw	r9,392(r2)
81116dd4:	30cc983a 	sll	r6,r6,r3
81116dd8:	4992b03a 	or	r9,r9,r6
81116ddc:	12406215 	stw	r9,392(r2)
81116de0:	21c04215 	stw	r7,264(r4)
81116de4:	01000084 	movi	r4,2
81116de8:	893fd21e 	bne	r17,r4,81116d34 <__reset+0xfb0f6d34>
81116dec:	11006317 	ldw	r4,396(r2)
81116df0:	218cb03a 	or	r6,r4,r6
81116df4:	11806315 	stw	r6,396(r2)
81116df8:	003fce06 	br	81116d34 <__reset+0xfb0f6d34>
81116dfc:	18805304 	addi	r2,r3,332
81116e00:	18805215 	stw	r2,328(r3)
81116e04:	003fc606 	br	81116d20 <__reset+0xfb0f6d20>
81116e08:	00bfffc4 	movi	r2,-1
81116e0c:	003fd006 	br	81116d50 <__reset+0xfb0f6d50>

81116e10 <__call_exitprocs>:
81116e10:	defff504 	addi	sp,sp,-44
81116e14:	df000915 	stw	fp,36(sp)
81116e18:	dd400615 	stw	r21,24(sp)
81116e1c:	dc800315 	stw	r18,12(sp)
81116e20:	dfc00a15 	stw	ra,40(sp)
81116e24:	ddc00815 	stw	r23,32(sp)
81116e28:	dd800715 	stw	r22,28(sp)
81116e2c:	dd000515 	stw	r20,20(sp)
81116e30:	dcc00415 	stw	r19,16(sp)
81116e34:	dc400215 	stw	r17,8(sp)
81116e38:	dc000115 	stw	r16,4(sp)
81116e3c:	d9000015 	stw	r4,0(sp)
81116e40:	2839883a 	mov	fp,r5
81116e44:	04800044 	movi	r18,1
81116e48:	057fffc4 	movi	r21,-1
81116e4c:	00a044b4 	movhi	r2,33042
81116e50:	10a82904 	addi	r2,r2,-24412
81116e54:	12000017 	ldw	r8,0(r2)
81116e58:	45005217 	ldw	r20,328(r8)
81116e5c:	44c05204 	addi	r19,r8,328
81116e60:	a0001c26 	beq	r20,zero,81116ed4 <__call_exitprocs+0xc4>
81116e64:	a0800117 	ldw	r2,4(r20)
81116e68:	15ffffc4 	addi	r23,r2,-1
81116e6c:	b8000d16 	blt	r23,zero,81116ea4 <__call_exitprocs+0x94>
81116e70:	14000044 	addi	r16,r2,1
81116e74:	8421883a 	add	r16,r16,r16
81116e78:	8421883a 	add	r16,r16,r16
81116e7c:	84402004 	addi	r17,r16,128
81116e80:	a463883a 	add	r17,r20,r17
81116e84:	a421883a 	add	r16,r20,r16
81116e88:	e0001e26 	beq	fp,zero,81116f04 <__call_exitprocs+0xf4>
81116e8c:	80804017 	ldw	r2,256(r16)
81116e90:	e0801c26 	beq	fp,r2,81116f04 <__call_exitprocs+0xf4>
81116e94:	bdffffc4 	addi	r23,r23,-1
81116e98:	843fff04 	addi	r16,r16,-4
81116e9c:	8c7fff04 	addi	r17,r17,-4
81116ea0:	bd7ff91e 	bne	r23,r21,81116e88 <__reset+0xfb0f6e88>
81116ea4:	00800034 	movhi	r2,0
81116ea8:	10800004 	addi	r2,r2,0
81116eac:	10000926 	beq	r2,zero,81116ed4 <__call_exitprocs+0xc4>
81116eb0:	a0800117 	ldw	r2,4(r20)
81116eb4:	1000301e 	bne	r2,zero,81116f78 <__call_exitprocs+0x168>
81116eb8:	a0800017 	ldw	r2,0(r20)
81116ebc:	10003226 	beq	r2,zero,81116f88 <__call_exitprocs+0x178>
81116ec0:	a009883a 	mov	r4,r20
81116ec4:	98800015 	stw	r2,0(r19)
81116ec8:	00000000 	call	80000000 <__alt_mem_m2_ddr2_memory+0x40000000>
81116ecc:	9d000017 	ldw	r20,0(r19)
81116ed0:	a03fe41e 	bne	r20,zero,81116e64 <__reset+0xfb0f6e64>
81116ed4:	dfc00a17 	ldw	ra,40(sp)
81116ed8:	df000917 	ldw	fp,36(sp)
81116edc:	ddc00817 	ldw	r23,32(sp)
81116ee0:	dd800717 	ldw	r22,28(sp)
81116ee4:	dd400617 	ldw	r21,24(sp)
81116ee8:	dd000517 	ldw	r20,20(sp)
81116eec:	dcc00417 	ldw	r19,16(sp)
81116ef0:	dc800317 	ldw	r18,12(sp)
81116ef4:	dc400217 	ldw	r17,8(sp)
81116ef8:	dc000117 	ldw	r16,4(sp)
81116efc:	dec00b04 	addi	sp,sp,44
81116f00:	f800283a 	ret
81116f04:	a0800117 	ldw	r2,4(r20)
81116f08:	80c00017 	ldw	r3,0(r16)
81116f0c:	10bfffc4 	addi	r2,r2,-1
81116f10:	15c01426 	beq	r2,r23,81116f64 <__call_exitprocs+0x154>
81116f14:	80000015 	stw	zero,0(r16)
81116f18:	183fde26 	beq	r3,zero,81116e94 <__reset+0xfb0f6e94>
81116f1c:	95c8983a 	sll	r4,r18,r23
81116f20:	a0806217 	ldw	r2,392(r20)
81116f24:	a5800117 	ldw	r22,4(r20)
81116f28:	2084703a 	and	r2,r4,r2
81116f2c:	10000b26 	beq	r2,zero,81116f5c <__call_exitprocs+0x14c>
81116f30:	a0806317 	ldw	r2,396(r20)
81116f34:	2088703a 	and	r4,r4,r2
81116f38:	20000c1e 	bne	r4,zero,81116f6c <__call_exitprocs+0x15c>
81116f3c:	89400017 	ldw	r5,0(r17)
81116f40:	d9000017 	ldw	r4,0(sp)
81116f44:	183ee83a 	callr	r3
81116f48:	a0800117 	ldw	r2,4(r20)
81116f4c:	15bfbf1e 	bne	r2,r22,81116e4c <__reset+0xfb0f6e4c>
81116f50:	98800017 	ldw	r2,0(r19)
81116f54:	153fcf26 	beq	r2,r20,81116e94 <__reset+0xfb0f6e94>
81116f58:	003fbc06 	br	81116e4c <__reset+0xfb0f6e4c>
81116f5c:	183ee83a 	callr	r3
81116f60:	003ff906 	br	81116f48 <__reset+0xfb0f6f48>
81116f64:	a5c00115 	stw	r23,4(r20)
81116f68:	003feb06 	br	81116f18 <__reset+0xfb0f6f18>
81116f6c:	89000017 	ldw	r4,0(r17)
81116f70:	183ee83a 	callr	r3
81116f74:	003ff406 	br	81116f48 <__reset+0xfb0f6f48>
81116f78:	a0800017 	ldw	r2,0(r20)
81116f7c:	a027883a 	mov	r19,r20
81116f80:	1029883a 	mov	r20,r2
81116f84:	003fb606 	br	81116e60 <__reset+0xfb0f6e60>
81116f88:	0005883a 	mov	r2,zero
81116f8c:	003ffb06 	br	81116f7c <__reset+0xfb0f6f7c>

81116f90 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
81116f90:	defffd04 	addi	sp,sp,-12
81116f94:	df000215 	stw	fp,8(sp)
81116f98:	df000204 	addi	fp,sp,8
81116f9c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
81116fa0:	0001883a 	nop
81116fa4:	e0bfff17 	ldw	r2,-4(fp)
81116fa8:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
81116fac:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
81116fb0:	10000226 	beq	r2,zero,81116fbc <_exit+0x2c>
    ALT_SIM_FAIL();
81116fb4:	002af070 	cmpltui	zero,zero,43969
81116fb8:	00000106 	br	81116fc0 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
81116fbc:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
81116fc0:	003fff06 	br	81116fc0 <__reset+0xfb0f6fc0>
