// MebX_Qsys_Project_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 16.1 196

`timescale 1 ps / 1 ps
module MebX_Qsys_Project_mm_interconnect_0 (
		input  wire         clk_100_clk_clk,                                                 //                                               clk_100_clk.clk
		input  wire         m2_ddr2_memory_afi_clk_clk,                                      //                                    m2_ddr2_memory_afi_clk.clk
		input  wire         m2_ddr2_memory_afi_half_clk_clk,                                 //                               m2_ddr2_memory_afi_half_clk.clk
		input  wire         dma_M1_M2_reset_n_reset_bridge_in_reset_reset,                   //                   dma_M1_M2_reset_n_reset_bridge_in_reset.reset
		input  wire         m1_clock_bridge_s0_reset_reset_bridge_in_reset_reset,            //            m1_clock_bridge_s0_reset_reset_bridge_in_reset.reset
		input  wire         m2_ddr2_memory_avl_translator_reset_reset_bridge_in_reset_reset, // m2_ddr2_memory_avl_translator_reset_reset_bridge_in_reset.reset
		input  wire         m2_ddr2_memory_soft_reset_reset_bridge_in_reset_reset,           //           m2_ddr2_memory_soft_reset_reset_bridge_in_reset.reset
		input  wire         nios2_gen2_0_reset_reset_bridge_in_reset_reset,                  //                  nios2_gen2_0_reset_reset_bridge_in_reset.reset
		input  wire         sgdma_tx_reset_reset_bridge_in_reset_reset,                      //                      sgdma_tx_reset_reset_bridge_in_reset.reset
		input  wire [29:0]  dma_M1_M2_mm_read_address,                                       //                                         dma_M1_M2_mm_read.address
		output wire         dma_M1_M2_mm_read_waitrequest,                                   //                                                          .waitrequest
		input  wire [7:0]   dma_M1_M2_mm_read_burstcount,                                    //                                                          .burstcount
		input  wire [3:0]   dma_M1_M2_mm_read_byteenable,                                    //                                                          .byteenable
		input  wire         dma_M1_M2_mm_read_read,                                          //                                                          .read
		output wire [31:0]  dma_M1_M2_mm_read_readdata,                                      //                                                          .readdata
		output wire         dma_M1_M2_mm_read_readdatavalid,                                 //                                                          .readdatavalid
		input  wire [30:0]  dma_M1_M2_mm_write_address,                                      //                                        dma_M1_M2_mm_write.address
		output wire         dma_M1_M2_mm_write_waitrequest,                                  //                                                          .waitrequest
		input  wire [7:0]   dma_M1_M2_mm_write_burstcount,                                   //                                                          .burstcount
		input  wire [3:0]   dma_M1_M2_mm_write_byteenable,                                   //                                                          .byteenable
		input  wire         dma_M1_M2_mm_write_write,                                        //                                                          .write
		input  wire [31:0]  dma_M1_M2_mm_write_writedata,                                    //                                                          .writedata
		input  wire [30:0]  dma_M2_M1_mm_read_address,                                       //                                         dma_M2_M1_mm_read.address
		output wire         dma_M2_M1_mm_read_waitrequest,                                   //                                                          .waitrequest
		input  wire [7:0]   dma_M2_M1_mm_read_burstcount,                                    //                                                          .burstcount
		input  wire [3:0]   dma_M2_M1_mm_read_byteenable,                                    //                                                          .byteenable
		input  wire         dma_M2_M1_mm_read_read,                                          //                                                          .read
		output wire [31:0]  dma_M2_M1_mm_read_readdata,                                      //                                                          .readdata
		output wire         dma_M2_M1_mm_read_readdatavalid,                                 //                                                          .readdatavalid
		input  wire [29:0]  dma_M2_M1_mm_write_address,                                      //                                        dma_M2_M1_mm_write.address
		output wire         dma_M2_M1_mm_write_waitrequest,                                  //                                                          .waitrequest
		input  wire [7:0]   dma_M2_M1_mm_write_burstcount,                                   //                                                          .burstcount
		input  wire [3:0]   dma_M2_M1_mm_write_byteenable,                                   //                                                          .byteenable
		input  wire         dma_M2_M1_mm_write_write,                                        //                                                          .write
		input  wire [31:0]  dma_M2_M1_mm_write_writedata,                                    //                                                          .writedata
		input  wire [31:0]  nios2_gen2_0_data_master_address,                                //                                  nios2_gen2_0_data_master.address
		output wire         nios2_gen2_0_data_master_waitrequest,                            //                                                          .waitrequest
		input  wire [3:0]   nios2_gen2_0_data_master_byteenable,                             //                                                          .byteenable
		input  wire         nios2_gen2_0_data_master_read,                                   //                                                          .read
		output wire [31:0]  nios2_gen2_0_data_master_readdata,                               //                                                          .readdata
		input  wire         nios2_gen2_0_data_master_write,                                  //                                                          .write
		input  wire [31:0]  nios2_gen2_0_data_master_writedata,                              //                                                          .writedata
		input  wire         nios2_gen2_0_data_master_debugaccess,                            //                                                          .debugaccess
		input  wire [31:0]  nios2_gen2_0_instruction_master_address,                         //                           nios2_gen2_0_instruction_master.address
		output wire         nios2_gen2_0_instruction_master_waitrequest,                     //                                                          .waitrequest
		input  wire [3:0]   nios2_gen2_0_instruction_master_burstcount,                      //                                                          .burstcount
		input  wire         nios2_gen2_0_instruction_master_read,                            //                                                          .read
		output wire [31:0]  nios2_gen2_0_instruction_master_readdata,                        //                                                          .readdata
		output wire         nios2_gen2_0_instruction_master_readdatavalid,                   //                                                          .readdatavalid
		input  wire [31:0]  sgdma_rx_descriptor_read_address,                                //                                  sgdma_rx_descriptor_read.address
		output wire         sgdma_rx_descriptor_read_waitrequest,                            //                                                          .waitrequest
		input  wire         sgdma_rx_descriptor_read_read,                                   //                                                          .read
		output wire [31:0]  sgdma_rx_descriptor_read_readdata,                               //                                                          .readdata
		output wire         sgdma_rx_descriptor_read_readdatavalid,                          //                                                          .readdatavalid
		input  wire [31:0]  sgdma_rx_descriptor_write_address,                               //                                 sgdma_rx_descriptor_write.address
		output wire         sgdma_rx_descriptor_write_waitrequest,                           //                                                          .waitrequest
		input  wire         sgdma_rx_descriptor_write_write,                                 //                                                          .write
		input  wire [31:0]  sgdma_rx_descriptor_write_writedata,                             //                                                          .writedata
		input  wire [31:0]  sgdma_rx_m_write_address,                                        //                                          sgdma_rx_m_write.address
		output wire         sgdma_rx_m_write_waitrequest,                                    //                                                          .waitrequest
		input  wire [3:0]   sgdma_rx_m_write_byteenable,                                     //                                                          .byteenable
		input  wire         sgdma_rx_m_write_write,                                          //                                                          .write
		input  wire [31:0]  sgdma_rx_m_write_writedata,                                      //                                                          .writedata
		input  wire [31:0]  sgdma_tx_descriptor_read_address,                                //                                  sgdma_tx_descriptor_read.address
		output wire         sgdma_tx_descriptor_read_waitrequest,                            //                                                          .waitrequest
		input  wire         sgdma_tx_descriptor_read_read,                                   //                                                          .read
		output wire [31:0]  sgdma_tx_descriptor_read_readdata,                               //                                                          .readdata
		output wire         sgdma_tx_descriptor_read_readdatavalid,                          //                                                          .readdatavalid
		input  wire [31:0]  sgdma_tx_descriptor_write_address,                               //                                 sgdma_tx_descriptor_write.address
		output wire         sgdma_tx_descriptor_write_waitrequest,                           //                                                          .waitrequest
		input  wire         sgdma_tx_descriptor_write_write,                                 //                                                          .write
		input  wire [31:0]  sgdma_tx_descriptor_write_writedata,                             //                                                          .writedata
		input  wire [31:0]  sgdma_tx_m_read_address,                                         //                                           sgdma_tx_m_read.address
		output wire         sgdma_tx_m_read_waitrequest,                                     //                                                          .waitrequest
		input  wire         sgdma_tx_m_read_read,                                            //                                                          .read
		output wire [31:0]  sgdma_tx_m_read_readdata,                                        //                                                          .readdata
		output wire         sgdma_tx_m_read_readdatavalid,                                   //                                                          .readdatavalid
		output wire [8:0]   clock_bridge_afi_50_s0_address,                                  //                                    clock_bridge_afi_50_s0.address
		output wire         clock_bridge_afi_50_s0_write,                                    //                                                          .write
		output wire         clock_bridge_afi_50_s0_read,                                     //                                                          .read
		input  wire [31:0]  clock_bridge_afi_50_s0_readdata,                                 //                                                          .readdata
		output wire [31:0]  clock_bridge_afi_50_s0_writedata,                                //                                                          .writedata
		output wire [0:0]   clock_bridge_afi_50_s0_burstcount,                               //                                                          .burstcount
		output wire [3:0]   clock_bridge_afi_50_s0_byteenable,                               //                                                          .byteenable
		input  wire         clock_bridge_afi_50_s0_readdatavalid,                            //                                                          .readdatavalid
		input  wire         clock_bridge_afi_50_s0_waitrequest,                              //                                                          .waitrequest
		output wire         clock_bridge_afi_50_s0_debugaccess,                              //                                                          .debugaccess
		output wire [8:0]   descriptor_memory_s1_address,                                    //                                      descriptor_memory_s1.address
		output wire         descriptor_memory_s1_write,                                      //                                                          .write
		input  wire [31:0]  descriptor_memory_s1_readdata,                                   //                                                          .readdata
		output wire [31:0]  descriptor_memory_s1_writedata,                                  //                                                          .writedata
		output wire [3:0]   descriptor_memory_s1_byteenable,                                 //                                                          .byteenable
		output wire         descriptor_memory_s1_chipselect,                                 //                                                          .chipselect
		output wire         descriptor_memory_s1_clken,                                      //                                                          .clken
		output wire [2:0]   dma_M1_M2_csr_address,                                           //                                             dma_M1_M2_csr.address
		output wire         dma_M1_M2_csr_write,                                             //                                                          .write
		output wire         dma_M1_M2_csr_read,                                              //                                                          .read
		input  wire [31:0]  dma_M1_M2_csr_readdata,                                          //                                                          .readdata
		output wire [31:0]  dma_M1_M2_csr_writedata,                                         //                                                          .writedata
		output wire [3:0]   dma_M1_M2_csr_byteenable,                                        //                                                          .byteenable
		output wire         dma_M1_M2_descriptor_slave_write,                                //                                dma_M1_M2_descriptor_slave.write
		output wire [127:0] dma_M1_M2_descriptor_slave_writedata,                            //                                                          .writedata
		output wire [15:0]  dma_M1_M2_descriptor_slave_byteenable,                           //                                                          .byteenable
		input  wire         dma_M1_M2_descriptor_slave_waitrequest,                          //                                                          .waitrequest
		output wire [2:0]   dma_M2_M1_csr_address,                                           //                                             dma_M2_M1_csr.address
		output wire         dma_M2_M1_csr_write,                                             //                                                          .write
		output wire         dma_M2_M1_csr_read,                                              //                                                          .read
		input  wire [31:0]  dma_M2_M1_csr_readdata,                                          //                                                          .readdata
		output wire [31:0]  dma_M2_M1_csr_writedata,                                         //                                                          .writedata
		output wire [3:0]   dma_M2_M1_csr_byteenable,                                        //                                                          .byteenable
		output wire         dma_M2_M1_descriptor_slave_write,                                //                                dma_M2_M1_descriptor_slave.write
		output wire [127:0] dma_M2_M1_descriptor_slave_writedata,                            //                                                          .writedata
		output wire [15:0]  dma_M2_M1_descriptor_slave_byteenable,                           //                                                          .byteenable
		input  wire         dma_M2_M1_descriptor_slave_waitrequest,                          //                                                          .waitrequest
		output wire [25:0]  ext_flash_uas_address,                                           //                                             ext_flash_uas.address
		output wire         ext_flash_uas_write,                                             //                                                          .write
		output wire         ext_flash_uas_read,                                              //                                                          .read
		input  wire [15:0]  ext_flash_uas_readdata,                                          //                                                          .readdata
		output wire [15:0]  ext_flash_uas_writedata,                                         //                                                          .writedata
		output wire [1:0]   ext_flash_uas_burstcount,                                        //                                                          .burstcount
		output wire [1:0]   ext_flash_uas_byteenable,                                        //                                                          .byteenable
		input  wire         ext_flash_uas_readdatavalid,                                     //                                                          .readdatavalid
		input  wire         ext_flash_uas_waitrequest,                                       //                                                          .waitrequest
		output wire         ext_flash_uas_lock,                                              //                                                          .lock
		output wire         ext_flash_uas_debugaccess,                                       //                                                          .debugaccess
		output wire [0:0]   jtag_uart_0_avalon_jtag_slave_address,                           //                             jtag_uart_0_avalon_jtag_slave.address
		output wire         jtag_uart_0_avalon_jtag_slave_write,                             //                                                          .write
		output wire         jtag_uart_0_avalon_jtag_slave_read,                              //                                                          .read
		input  wire [31:0]  jtag_uart_0_avalon_jtag_slave_readdata,                          //                                                          .readdata
		output wire [31:0]  jtag_uart_0_avalon_jtag_slave_writedata,                         //                                                          .writedata
		input  wire         jtag_uart_0_avalon_jtag_slave_waitrequest,                       //                                                          .waitrequest
		output wire         jtag_uart_0_avalon_jtag_slave_chipselect,                        //                                                          .chipselect
		output wire [29:0]  m1_clock_bridge_s0_address,                                      //                                        m1_clock_bridge_s0.address
		output wire         m1_clock_bridge_s0_write,                                        //                                                          .write
		output wire         m1_clock_bridge_s0_read,                                         //                                                          .read
		input  wire [31:0]  m1_clock_bridge_s0_readdata,                                     //                                                          .readdata
		output wire [31:0]  m1_clock_bridge_s0_writedata,                                    //                                                          .writedata
		output wire [7:0]   m1_clock_bridge_s0_burstcount,                                   //                                                          .burstcount
		output wire [3:0]   m1_clock_bridge_s0_byteenable,                                   //                                                          .byteenable
		input  wire         m1_clock_bridge_s0_readdatavalid,                                //                                                          .readdatavalid
		input  wire         m1_clock_bridge_s0_waitrequest,                                  //                                                          .waitrequest
		output wire         m1_clock_bridge_s0_debugaccess,                                  //                                                          .debugaccess
		output wire [24:0]  m2_ddr2_memory_avl_address,                                      //                                        m2_ddr2_memory_avl.address
		output wire         m2_ddr2_memory_avl_write,                                        //                                                          .write
		output wire         m2_ddr2_memory_avl_read,                                         //                                                          .read
		input  wire [255:0] m2_ddr2_memory_avl_readdata,                                     //                                                          .readdata
		output wire [255:0] m2_ddr2_memory_avl_writedata,                                    //                                                          .writedata
		output wire         m2_ddr2_memory_avl_beginbursttransfer,                           //                                                          .beginbursttransfer
		output wire [2:0]   m2_ddr2_memory_avl_burstcount,                                   //                                                          .burstcount
		output wire [31:0]  m2_ddr2_memory_avl_byteenable,                                   //                                                          .byteenable
		input  wire         m2_ddr2_memory_avl_readdatavalid,                                //                                                          .readdatavalid
		input  wire         m2_ddr2_memory_avl_waitrequest,                                  //                                                          .waitrequest
		output wire [8:0]   nios2_gen2_0_debug_mem_slave_address,                            //                              nios2_gen2_0_debug_mem_slave.address
		output wire         nios2_gen2_0_debug_mem_slave_write,                              //                                                          .write
		output wire         nios2_gen2_0_debug_mem_slave_read,                               //                                                          .read
		input  wire [31:0]  nios2_gen2_0_debug_mem_slave_readdata,                           //                                                          .readdata
		output wire [31:0]  nios2_gen2_0_debug_mem_slave_writedata,                          //                                                          .writedata
		output wire [3:0]   nios2_gen2_0_debug_mem_slave_byteenable,                         //                                                          .byteenable
		input  wire         nios2_gen2_0_debug_mem_slave_waitrequest,                        //                                                          .waitrequest
		output wire         nios2_gen2_0_debug_mem_slave_debugaccess,                        //                                                          .debugaccess
		output wire [17:0]  onchip_memory_s1_address,                                        //                                          onchip_memory_s1.address
		output wire         onchip_memory_s1_write,                                          //                                                          .write
		input  wire [31:0]  onchip_memory_s1_readdata,                                       //                                                          .readdata
		output wire [31:0]  onchip_memory_s1_writedata,                                      //                                                          .writedata
		output wire [3:0]   onchip_memory_s1_byteenable,                                     //                                                          .byteenable
		output wire         onchip_memory_s1_chipselect,                                     //                                                          .chipselect
		output wire         onchip_memory_s1_clken,                                          //                                                          .clken
		output wire [3:0]   sgdma_rx_csr_address,                                            //                                              sgdma_rx_csr.address
		output wire         sgdma_rx_csr_write,                                              //                                                          .write
		output wire         sgdma_rx_csr_read,                                               //                                                          .read
		input  wire [31:0]  sgdma_rx_csr_readdata,                                           //                                                          .readdata
		output wire [31:0]  sgdma_rx_csr_writedata,                                          //                                                          .writedata
		output wire         sgdma_rx_csr_chipselect,                                         //                                                          .chipselect
		output wire [3:0]   sgdma_tx_csr_address,                                            //                                              sgdma_tx_csr.address
		output wire         sgdma_tx_csr_write,                                              //                                                          .write
		output wire         sgdma_tx_csr_read,                                               //                                                          .read
		input  wire [31:0]  sgdma_tx_csr_readdata,                                           //                                                          .readdata
		output wire [31:0]  sgdma_tx_csr_writedata,                                          //                                                          .writedata
		output wire         sgdma_tx_csr_chipselect,                                         //                                                          .chipselect
		output wire [0:0]   sysid_qsys_control_slave_address,                                //                                  sysid_qsys_control_slave.address
		input  wire [31:0]  sysid_qsys_control_slave_readdata,                               //                                                          .readdata
		output wire [7:0]   tse_mac_control_port_address,                                    //                                      tse_mac_control_port.address
		output wire         tse_mac_control_port_write,                                      //                                                          .write
		output wire         tse_mac_control_port_read,                                       //                                                          .read
		input  wire [31:0]  tse_mac_control_port_readdata,                                   //                                                          .readdata
		output wire [31:0]  tse_mac_control_port_writedata,                                  //                                                          .writedata
		input  wire         tse_mac_control_port_waitrequest                                 //                                                          .waitrequest
	);

	wire          nios2_gen2_0_data_master_translator_avalon_universal_master_0_waitrequest;          // nios2_gen2_0_data_master_agent:av_waitrequest -> nios2_gen2_0_data_master_translator:uav_waitrequest
	wire   [31:0] nios2_gen2_0_data_master_translator_avalon_universal_master_0_readdata;             // nios2_gen2_0_data_master_agent:av_readdata -> nios2_gen2_0_data_master_translator:uav_readdata
	wire          nios2_gen2_0_data_master_translator_avalon_universal_master_0_debugaccess;          // nios2_gen2_0_data_master_translator:uav_debugaccess -> nios2_gen2_0_data_master_agent:av_debugaccess
	wire   [31:0] nios2_gen2_0_data_master_translator_avalon_universal_master_0_address;              // nios2_gen2_0_data_master_translator:uav_address -> nios2_gen2_0_data_master_agent:av_address
	wire          nios2_gen2_0_data_master_translator_avalon_universal_master_0_read;                 // nios2_gen2_0_data_master_translator:uav_read -> nios2_gen2_0_data_master_agent:av_read
	wire    [3:0] nios2_gen2_0_data_master_translator_avalon_universal_master_0_byteenable;           // nios2_gen2_0_data_master_translator:uav_byteenable -> nios2_gen2_0_data_master_agent:av_byteenable
	wire          nios2_gen2_0_data_master_translator_avalon_universal_master_0_readdatavalid;        // nios2_gen2_0_data_master_agent:av_readdatavalid -> nios2_gen2_0_data_master_translator:uav_readdatavalid
	wire          nios2_gen2_0_data_master_translator_avalon_universal_master_0_lock;                 // nios2_gen2_0_data_master_translator:uav_lock -> nios2_gen2_0_data_master_agent:av_lock
	wire          nios2_gen2_0_data_master_translator_avalon_universal_master_0_write;                // nios2_gen2_0_data_master_translator:uav_write -> nios2_gen2_0_data_master_agent:av_write
	wire   [31:0] nios2_gen2_0_data_master_translator_avalon_universal_master_0_writedata;            // nios2_gen2_0_data_master_translator:uav_writedata -> nios2_gen2_0_data_master_agent:av_writedata
	wire    [2:0] nios2_gen2_0_data_master_translator_avalon_universal_master_0_burstcount;           // nios2_gen2_0_data_master_translator:uav_burstcount -> nios2_gen2_0_data_master_agent:av_burstcount
	wire          rsp_mux_src_valid;                                                                  // rsp_mux:src_valid -> nios2_gen2_0_data_master_agent:rp_valid
	wire  [119:0] rsp_mux_src_data;                                                                   // rsp_mux:src_data -> nios2_gen2_0_data_master_agent:rp_data
	wire          rsp_mux_src_ready;                                                                  // nios2_gen2_0_data_master_agent:rp_ready -> rsp_mux:src_ready
	wire   [15:0] rsp_mux_src_channel;                                                                // rsp_mux:src_channel -> nios2_gen2_0_data_master_agent:rp_channel
	wire          rsp_mux_src_startofpacket;                                                          // rsp_mux:src_startofpacket -> nios2_gen2_0_data_master_agent:rp_startofpacket
	wire          rsp_mux_src_endofpacket;                                                            // rsp_mux:src_endofpacket -> nios2_gen2_0_data_master_agent:rp_endofpacket
	wire          nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_waitrequest;   // nios2_gen2_0_instruction_master_agent:av_waitrequest -> nios2_gen2_0_instruction_master_translator:uav_waitrequest
	wire   [31:0] nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_readdata;      // nios2_gen2_0_instruction_master_agent:av_readdata -> nios2_gen2_0_instruction_master_translator:uav_readdata
	wire          nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_debugaccess;   // nios2_gen2_0_instruction_master_translator:uav_debugaccess -> nios2_gen2_0_instruction_master_agent:av_debugaccess
	wire   [31:0] nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_address;       // nios2_gen2_0_instruction_master_translator:uav_address -> nios2_gen2_0_instruction_master_agent:av_address
	wire          nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_read;          // nios2_gen2_0_instruction_master_translator:uav_read -> nios2_gen2_0_instruction_master_agent:av_read
	wire    [3:0] nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_byteenable;    // nios2_gen2_0_instruction_master_translator:uav_byteenable -> nios2_gen2_0_instruction_master_agent:av_byteenable
	wire          nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_readdatavalid; // nios2_gen2_0_instruction_master_agent:av_readdatavalid -> nios2_gen2_0_instruction_master_translator:uav_readdatavalid
	wire          nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_lock;          // nios2_gen2_0_instruction_master_translator:uav_lock -> nios2_gen2_0_instruction_master_agent:av_lock
	wire          nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_write;         // nios2_gen2_0_instruction_master_translator:uav_write -> nios2_gen2_0_instruction_master_agent:av_write
	wire   [31:0] nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_writedata;     // nios2_gen2_0_instruction_master_translator:uav_writedata -> nios2_gen2_0_instruction_master_agent:av_writedata
	wire    [5:0] nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_burstcount;    // nios2_gen2_0_instruction_master_translator:uav_burstcount -> nios2_gen2_0_instruction_master_agent:av_burstcount
	wire          sgdma_tx_m_read_translator_avalon_universal_master_0_waitrequest;                   // sgdma_tx_m_read_agent:av_waitrequest -> sgdma_tx_m_read_translator:uav_waitrequest
	wire   [31:0] sgdma_tx_m_read_translator_avalon_universal_master_0_readdata;                      // sgdma_tx_m_read_agent:av_readdata -> sgdma_tx_m_read_translator:uav_readdata
	wire          sgdma_tx_m_read_translator_avalon_universal_master_0_debugaccess;                   // sgdma_tx_m_read_translator:uav_debugaccess -> sgdma_tx_m_read_agent:av_debugaccess
	wire   [31:0] sgdma_tx_m_read_translator_avalon_universal_master_0_address;                       // sgdma_tx_m_read_translator:uav_address -> sgdma_tx_m_read_agent:av_address
	wire          sgdma_tx_m_read_translator_avalon_universal_master_0_read;                          // sgdma_tx_m_read_translator:uav_read -> sgdma_tx_m_read_agent:av_read
	wire    [3:0] sgdma_tx_m_read_translator_avalon_universal_master_0_byteenable;                    // sgdma_tx_m_read_translator:uav_byteenable -> sgdma_tx_m_read_agent:av_byteenable
	wire          sgdma_tx_m_read_translator_avalon_universal_master_0_readdatavalid;                 // sgdma_tx_m_read_agent:av_readdatavalid -> sgdma_tx_m_read_translator:uav_readdatavalid
	wire          sgdma_tx_m_read_translator_avalon_universal_master_0_lock;                          // sgdma_tx_m_read_translator:uav_lock -> sgdma_tx_m_read_agent:av_lock
	wire          sgdma_tx_m_read_translator_avalon_universal_master_0_write;                         // sgdma_tx_m_read_translator:uav_write -> sgdma_tx_m_read_agent:av_write
	wire   [31:0] sgdma_tx_m_read_translator_avalon_universal_master_0_writedata;                     // sgdma_tx_m_read_translator:uav_writedata -> sgdma_tx_m_read_agent:av_writedata
	wire    [2:0] sgdma_tx_m_read_translator_avalon_universal_master_0_burstcount;                    // sgdma_tx_m_read_translator:uav_burstcount -> sgdma_tx_m_read_agent:av_burstcount
	wire          rsp_mux_002_src_valid;                                                              // rsp_mux_002:src_valid -> sgdma_tx_m_read_agent:rp_valid
	wire  [119:0] rsp_mux_002_src_data;                                                               // rsp_mux_002:src_data -> sgdma_tx_m_read_agent:rp_data
	wire          rsp_mux_002_src_ready;                                                              // sgdma_tx_m_read_agent:rp_ready -> rsp_mux_002:src_ready
	wire   [15:0] rsp_mux_002_src_channel;                                                            // rsp_mux_002:src_channel -> sgdma_tx_m_read_agent:rp_channel
	wire          rsp_mux_002_src_startofpacket;                                                      // rsp_mux_002:src_startofpacket -> sgdma_tx_m_read_agent:rp_startofpacket
	wire          rsp_mux_002_src_endofpacket;                                                        // rsp_mux_002:src_endofpacket -> sgdma_tx_m_read_agent:rp_endofpacket
	wire          sgdma_rx_m_write_translator_avalon_universal_master_0_waitrequest;                  // sgdma_rx_m_write_agent:av_waitrequest -> sgdma_rx_m_write_translator:uav_waitrequest
	wire   [31:0] sgdma_rx_m_write_translator_avalon_universal_master_0_readdata;                     // sgdma_rx_m_write_agent:av_readdata -> sgdma_rx_m_write_translator:uav_readdata
	wire          sgdma_rx_m_write_translator_avalon_universal_master_0_debugaccess;                  // sgdma_rx_m_write_translator:uav_debugaccess -> sgdma_rx_m_write_agent:av_debugaccess
	wire   [31:0] sgdma_rx_m_write_translator_avalon_universal_master_0_address;                      // sgdma_rx_m_write_translator:uav_address -> sgdma_rx_m_write_agent:av_address
	wire          sgdma_rx_m_write_translator_avalon_universal_master_0_read;                         // sgdma_rx_m_write_translator:uav_read -> sgdma_rx_m_write_agent:av_read
	wire    [3:0] sgdma_rx_m_write_translator_avalon_universal_master_0_byteenable;                   // sgdma_rx_m_write_translator:uav_byteenable -> sgdma_rx_m_write_agent:av_byteenable
	wire          sgdma_rx_m_write_translator_avalon_universal_master_0_readdatavalid;                // sgdma_rx_m_write_agent:av_readdatavalid -> sgdma_rx_m_write_translator:uav_readdatavalid
	wire          sgdma_rx_m_write_translator_avalon_universal_master_0_lock;                         // sgdma_rx_m_write_translator:uav_lock -> sgdma_rx_m_write_agent:av_lock
	wire          sgdma_rx_m_write_translator_avalon_universal_master_0_write;                        // sgdma_rx_m_write_translator:uav_write -> sgdma_rx_m_write_agent:av_write
	wire   [31:0] sgdma_rx_m_write_translator_avalon_universal_master_0_writedata;                    // sgdma_rx_m_write_translator:uav_writedata -> sgdma_rx_m_write_agent:av_writedata
	wire    [2:0] sgdma_rx_m_write_translator_avalon_universal_master_0_burstcount;                   // sgdma_rx_m_write_translator:uav_burstcount -> sgdma_rx_m_write_agent:av_burstcount
	wire          rsp_mux_003_src_valid;                                                              // rsp_mux_003:src_valid -> sgdma_rx_m_write_agent:rp_valid
	wire  [119:0] rsp_mux_003_src_data;                                                               // rsp_mux_003:src_data -> sgdma_rx_m_write_agent:rp_data
	wire          rsp_mux_003_src_ready;                                                              // sgdma_rx_m_write_agent:rp_ready -> rsp_mux_003:src_ready
	wire   [15:0] rsp_mux_003_src_channel;                                                            // rsp_mux_003:src_channel -> sgdma_rx_m_write_agent:rp_channel
	wire          rsp_mux_003_src_startofpacket;                                                      // rsp_mux_003:src_startofpacket -> sgdma_rx_m_write_agent:rp_startofpacket
	wire          rsp_mux_003_src_endofpacket;                                                        // rsp_mux_003:src_endofpacket -> sgdma_rx_m_write_agent:rp_endofpacket
	wire          sgdma_tx_descriptor_read_translator_avalon_universal_master_0_waitrequest;          // sgdma_tx_descriptor_read_agent:av_waitrequest -> sgdma_tx_descriptor_read_translator:uav_waitrequest
	wire   [31:0] sgdma_tx_descriptor_read_translator_avalon_universal_master_0_readdata;             // sgdma_tx_descriptor_read_agent:av_readdata -> sgdma_tx_descriptor_read_translator:uav_readdata
	wire          sgdma_tx_descriptor_read_translator_avalon_universal_master_0_debugaccess;          // sgdma_tx_descriptor_read_translator:uav_debugaccess -> sgdma_tx_descriptor_read_agent:av_debugaccess
	wire   [31:0] sgdma_tx_descriptor_read_translator_avalon_universal_master_0_address;              // sgdma_tx_descriptor_read_translator:uav_address -> sgdma_tx_descriptor_read_agent:av_address
	wire          sgdma_tx_descriptor_read_translator_avalon_universal_master_0_read;                 // sgdma_tx_descriptor_read_translator:uav_read -> sgdma_tx_descriptor_read_agent:av_read
	wire    [3:0] sgdma_tx_descriptor_read_translator_avalon_universal_master_0_byteenable;           // sgdma_tx_descriptor_read_translator:uav_byteenable -> sgdma_tx_descriptor_read_agent:av_byteenable
	wire          sgdma_tx_descriptor_read_translator_avalon_universal_master_0_readdatavalid;        // sgdma_tx_descriptor_read_agent:av_readdatavalid -> sgdma_tx_descriptor_read_translator:uav_readdatavalid
	wire          sgdma_tx_descriptor_read_translator_avalon_universal_master_0_lock;                 // sgdma_tx_descriptor_read_translator:uav_lock -> sgdma_tx_descriptor_read_agent:av_lock
	wire          sgdma_tx_descriptor_read_translator_avalon_universal_master_0_write;                // sgdma_tx_descriptor_read_translator:uav_write -> sgdma_tx_descriptor_read_agent:av_write
	wire   [31:0] sgdma_tx_descriptor_read_translator_avalon_universal_master_0_writedata;            // sgdma_tx_descriptor_read_translator:uav_writedata -> sgdma_tx_descriptor_read_agent:av_writedata
	wire    [2:0] sgdma_tx_descriptor_read_translator_avalon_universal_master_0_burstcount;           // sgdma_tx_descriptor_read_translator:uav_burstcount -> sgdma_tx_descriptor_read_agent:av_burstcount
	wire          rsp_mux_004_src_valid;                                                              // rsp_mux_004:src_valid -> sgdma_tx_descriptor_read_agent:rp_valid
	wire  [119:0] rsp_mux_004_src_data;                                                               // rsp_mux_004:src_data -> sgdma_tx_descriptor_read_agent:rp_data
	wire          rsp_mux_004_src_ready;                                                              // sgdma_tx_descriptor_read_agent:rp_ready -> rsp_mux_004:src_ready
	wire   [15:0] rsp_mux_004_src_channel;                                                            // rsp_mux_004:src_channel -> sgdma_tx_descriptor_read_agent:rp_channel
	wire          rsp_mux_004_src_startofpacket;                                                      // rsp_mux_004:src_startofpacket -> sgdma_tx_descriptor_read_agent:rp_startofpacket
	wire          rsp_mux_004_src_endofpacket;                                                        // rsp_mux_004:src_endofpacket -> sgdma_tx_descriptor_read_agent:rp_endofpacket
	wire          sgdma_rx_descriptor_read_translator_avalon_universal_master_0_waitrequest;          // sgdma_rx_descriptor_read_agent:av_waitrequest -> sgdma_rx_descriptor_read_translator:uav_waitrequest
	wire   [31:0] sgdma_rx_descriptor_read_translator_avalon_universal_master_0_readdata;             // sgdma_rx_descriptor_read_agent:av_readdata -> sgdma_rx_descriptor_read_translator:uav_readdata
	wire          sgdma_rx_descriptor_read_translator_avalon_universal_master_0_debugaccess;          // sgdma_rx_descriptor_read_translator:uav_debugaccess -> sgdma_rx_descriptor_read_agent:av_debugaccess
	wire   [31:0] sgdma_rx_descriptor_read_translator_avalon_universal_master_0_address;              // sgdma_rx_descriptor_read_translator:uav_address -> sgdma_rx_descriptor_read_agent:av_address
	wire          sgdma_rx_descriptor_read_translator_avalon_universal_master_0_read;                 // sgdma_rx_descriptor_read_translator:uav_read -> sgdma_rx_descriptor_read_agent:av_read
	wire    [3:0] sgdma_rx_descriptor_read_translator_avalon_universal_master_0_byteenable;           // sgdma_rx_descriptor_read_translator:uav_byteenable -> sgdma_rx_descriptor_read_agent:av_byteenable
	wire          sgdma_rx_descriptor_read_translator_avalon_universal_master_0_readdatavalid;        // sgdma_rx_descriptor_read_agent:av_readdatavalid -> sgdma_rx_descriptor_read_translator:uav_readdatavalid
	wire          sgdma_rx_descriptor_read_translator_avalon_universal_master_0_lock;                 // sgdma_rx_descriptor_read_translator:uav_lock -> sgdma_rx_descriptor_read_agent:av_lock
	wire          sgdma_rx_descriptor_read_translator_avalon_universal_master_0_write;                // sgdma_rx_descriptor_read_translator:uav_write -> sgdma_rx_descriptor_read_agent:av_write
	wire   [31:0] sgdma_rx_descriptor_read_translator_avalon_universal_master_0_writedata;            // sgdma_rx_descriptor_read_translator:uav_writedata -> sgdma_rx_descriptor_read_agent:av_writedata
	wire    [2:0] sgdma_rx_descriptor_read_translator_avalon_universal_master_0_burstcount;           // sgdma_rx_descriptor_read_translator:uav_burstcount -> sgdma_rx_descriptor_read_agent:av_burstcount
	wire          rsp_mux_005_src_valid;                                                              // rsp_mux_005:src_valid -> sgdma_rx_descriptor_read_agent:rp_valid
	wire  [119:0] rsp_mux_005_src_data;                                                               // rsp_mux_005:src_data -> sgdma_rx_descriptor_read_agent:rp_data
	wire          rsp_mux_005_src_ready;                                                              // sgdma_rx_descriptor_read_agent:rp_ready -> rsp_mux_005:src_ready
	wire   [15:0] rsp_mux_005_src_channel;                                                            // rsp_mux_005:src_channel -> sgdma_rx_descriptor_read_agent:rp_channel
	wire          rsp_mux_005_src_startofpacket;                                                      // rsp_mux_005:src_startofpacket -> sgdma_rx_descriptor_read_agent:rp_startofpacket
	wire          rsp_mux_005_src_endofpacket;                                                        // rsp_mux_005:src_endofpacket -> sgdma_rx_descriptor_read_agent:rp_endofpacket
	wire          sgdma_tx_descriptor_write_translator_avalon_universal_master_0_waitrequest;         // sgdma_tx_descriptor_write_agent:av_waitrequest -> sgdma_tx_descriptor_write_translator:uav_waitrequest
	wire   [31:0] sgdma_tx_descriptor_write_translator_avalon_universal_master_0_readdata;            // sgdma_tx_descriptor_write_agent:av_readdata -> sgdma_tx_descriptor_write_translator:uav_readdata
	wire          sgdma_tx_descriptor_write_translator_avalon_universal_master_0_debugaccess;         // sgdma_tx_descriptor_write_translator:uav_debugaccess -> sgdma_tx_descriptor_write_agent:av_debugaccess
	wire   [31:0] sgdma_tx_descriptor_write_translator_avalon_universal_master_0_address;             // sgdma_tx_descriptor_write_translator:uav_address -> sgdma_tx_descriptor_write_agent:av_address
	wire          sgdma_tx_descriptor_write_translator_avalon_universal_master_0_read;                // sgdma_tx_descriptor_write_translator:uav_read -> sgdma_tx_descriptor_write_agent:av_read
	wire    [3:0] sgdma_tx_descriptor_write_translator_avalon_universal_master_0_byteenable;          // sgdma_tx_descriptor_write_translator:uav_byteenable -> sgdma_tx_descriptor_write_agent:av_byteenable
	wire          sgdma_tx_descriptor_write_translator_avalon_universal_master_0_readdatavalid;       // sgdma_tx_descriptor_write_agent:av_readdatavalid -> sgdma_tx_descriptor_write_translator:uav_readdatavalid
	wire          sgdma_tx_descriptor_write_translator_avalon_universal_master_0_lock;                // sgdma_tx_descriptor_write_translator:uav_lock -> sgdma_tx_descriptor_write_agent:av_lock
	wire          sgdma_tx_descriptor_write_translator_avalon_universal_master_0_write;               // sgdma_tx_descriptor_write_translator:uav_write -> sgdma_tx_descriptor_write_agent:av_write
	wire   [31:0] sgdma_tx_descriptor_write_translator_avalon_universal_master_0_writedata;           // sgdma_tx_descriptor_write_translator:uav_writedata -> sgdma_tx_descriptor_write_agent:av_writedata
	wire    [2:0] sgdma_tx_descriptor_write_translator_avalon_universal_master_0_burstcount;          // sgdma_tx_descriptor_write_translator:uav_burstcount -> sgdma_tx_descriptor_write_agent:av_burstcount
	wire          rsp_mux_006_src_valid;                                                              // rsp_mux_006:src_valid -> sgdma_tx_descriptor_write_agent:rp_valid
	wire  [119:0] rsp_mux_006_src_data;                                                               // rsp_mux_006:src_data -> sgdma_tx_descriptor_write_agent:rp_data
	wire          rsp_mux_006_src_ready;                                                              // sgdma_tx_descriptor_write_agent:rp_ready -> rsp_mux_006:src_ready
	wire   [15:0] rsp_mux_006_src_channel;                                                            // rsp_mux_006:src_channel -> sgdma_tx_descriptor_write_agent:rp_channel
	wire          rsp_mux_006_src_startofpacket;                                                      // rsp_mux_006:src_startofpacket -> sgdma_tx_descriptor_write_agent:rp_startofpacket
	wire          rsp_mux_006_src_endofpacket;                                                        // rsp_mux_006:src_endofpacket -> sgdma_tx_descriptor_write_agent:rp_endofpacket
	wire          sgdma_rx_descriptor_write_translator_avalon_universal_master_0_waitrequest;         // sgdma_rx_descriptor_write_agent:av_waitrequest -> sgdma_rx_descriptor_write_translator:uav_waitrequest
	wire   [31:0] sgdma_rx_descriptor_write_translator_avalon_universal_master_0_readdata;            // sgdma_rx_descriptor_write_agent:av_readdata -> sgdma_rx_descriptor_write_translator:uav_readdata
	wire          sgdma_rx_descriptor_write_translator_avalon_universal_master_0_debugaccess;         // sgdma_rx_descriptor_write_translator:uav_debugaccess -> sgdma_rx_descriptor_write_agent:av_debugaccess
	wire   [31:0] sgdma_rx_descriptor_write_translator_avalon_universal_master_0_address;             // sgdma_rx_descriptor_write_translator:uav_address -> sgdma_rx_descriptor_write_agent:av_address
	wire          sgdma_rx_descriptor_write_translator_avalon_universal_master_0_read;                // sgdma_rx_descriptor_write_translator:uav_read -> sgdma_rx_descriptor_write_agent:av_read
	wire    [3:0] sgdma_rx_descriptor_write_translator_avalon_universal_master_0_byteenable;          // sgdma_rx_descriptor_write_translator:uav_byteenable -> sgdma_rx_descriptor_write_agent:av_byteenable
	wire          sgdma_rx_descriptor_write_translator_avalon_universal_master_0_readdatavalid;       // sgdma_rx_descriptor_write_agent:av_readdatavalid -> sgdma_rx_descriptor_write_translator:uav_readdatavalid
	wire          sgdma_rx_descriptor_write_translator_avalon_universal_master_0_lock;                // sgdma_rx_descriptor_write_translator:uav_lock -> sgdma_rx_descriptor_write_agent:av_lock
	wire          sgdma_rx_descriptor_write_translator_avalon_universal_master_0_write;               // sgdma_rx_descriptor_write_translator:uav_write -> sgdma_rx_descriptor_write_agent:av_write
	wire   [31:0] sgdma_rx_descriptor_write_translator_avalon_universal_master_0_writedata;           // sgdma_rx_descriptor_write_translator:uav_writedata -> sgdma_rx_descriptor_write_agent:av_writedata
	wire    [2:0] sgdma_rx_descriptor_write_translator_avalon_universal_master_0_burstcount;          // sgdma_rx_descriptor_write_translator:uav_burstcount -> sgdma_rx_descriptor_write_agent:av_burstcount
	wire          rsp_mux_007_src_valid;                                                              // rsp_mux_007:src_valid -> sgdma_rx_descriptor_write_agent:rp_valid
	wire  [119:0] rsp_mux_007_src_data;                                                               // rsp_mux_007:src_data -> sgdma_rx_descriptor_write_agent:rp_data
	wire          rsp_mux_007_src_ready;                                                              // sgdma_rx_descriptor_write_agent:rp_ready -> rsp_mux_007:src_ready
	wire   [15:0] rsp_mux_007_src_channel;                                                            // rsp_mux_007:src_channel -> sgdma_rx_descriptor_write_agent:rp_channel
	wire          rsp_mux_007_src_startofpacket;                                                      // rsp_mux_007:src_startofpacket -> sgdma_rx_descriptor_write_agent:rp_startofpacket
	wire          rsp_mux_007_src_endofpacket;                                                        // rsp_mux_007:src_endofpacket -> sgdma_rx_descriptor_write_agent:rp_endofpacket
	wire          dma_m1_m2_mm_read_translator_avalon_universal_master_0_waitrequest;                 // dma_M1_M2_mm_read_agent:av_waitrequest -> dma_M1_M2_mm_read_translator:uav_waitrequest
	wire   [31:0] dma_m1_m2_mm_read_translator_avalon_universal_master_0_readdata;                    // dma_M1_M2_mm_read_agent:av_readdata -> dma_M1_M2_mm_read_translator:uav_readdata
	wire          dma_m1_m2_mm_read_translator_avalon_universal_master_0_debugaccess;                 // dma_M1_M2_mm_read_translator:uav_debugaccess -> dma_M1_M2_mm_read_agent:av_debugaccess
	wire   [31:0] dma_m1_m2_mm_read_translator_avalon_universal_master_0_address;                     // dma_M1_M2_mm_read_translator:uav_address -> dma_M1_M2_mm_read_agent:av_address
	wire          dma_m1_m2_mm_read_translator_avalon_universal_master_0_read;                        // dma_M1_M2_mm_read_translator:uav_read -> dma_M1_M2_mm_read_agent:av_read
	wire    [3:0] dma_m1_m2_mm_read_translator_avalon_universal_master_0_byteenable;                  // dma_M1_M2_mm_read_translator:uav_byteenable -> dma_M1_M2_mm_read_agent:av_byteenable
	wire          dma_m1_m2_mm_read_translator_avalon_universal_master_0_readdatavalid;               // dma_M1_M2_mm_read_agent:av_readdatavalid -> dma_M1_M2_mm_read_translator:uav_readdatavalid
	wire          dma_m1_m2_mm_read_translator_avalon_universal_master_0_lock;                        // dma_M1_M2_mm_read_translator:uav_lock -> dma_M1_M2_mm_read_agent:av_lock
	wire          dma_m1_m2_mm_read_translator_avalon_universal_master_0_write;                       // dma_M1_M2_mm_read_translator:uav_write -> dma_M1_M2_mm_read_agent:av_write
	wire   [31:0] dma_m1_m2_mm_read_translator_avalon_universal_master_0_writedata;                   // dma_M1_M2_mm_read_translator:uav_writedata -> dma_M1_M2_mm_read_agent:av_writedata
	wire    [9:0] dma_m1_m2_mm_read_translator_avalon_universal_master_0_burstcount;                  // dma_M1_M2_mm_read_translator:uav_burstcount -> dma_M1_M2_mm_read_agent:av_burstcount
	wire          rsp_mux_008_src_valid;                                                              // rsp_mux_008:src_valid -> dma_M1_M2_mm_read_agent:rp_valid
	wire  [119:0] rsp_mux_008_src_data;                                                               // rsp_mux_008:src_data -> dma_M1_M2_mm_read_agent:rp_data
	wire          rsp_mux_008_src_ready;                                                              // dma_M1_M2_mm_read_agent:rp_ready -> rsp_mux_008:src_ready
	wire   [15:0] rsp_mux_008_src_channel;                                                            // rsp_mux_008:src_channel -> dma_M1_M2_mm_read_agent:rp_channel
	wire          rsp_mux_008_src_startofpacket;                                                      // rsp_mux_008:src_startofpacket -> dma_M1_M2_mm_read_agent:rp_startofpacket
	wire          rsp_mux_008_src_endofpacket;                                                        // rsp_mux_008:src_endofpacket -> dma_M1_M2_mm_read_agent:rp_endofpacket
	wire          dma_m2_m1_mm_write_translator_avalon_universal_master_0_waitrequest;                // dma_M2_M1_mm_write_agent:av_waitrequest -> dma_M2_M1_mm_write_translator:uav_waitrequest
	wire   [31:0] dma_m2_m1_mm_write_translator_avalon_universal_master_0_readdata;                   // dma_M2_M1_mm_write_agent:av_readdata -> dma_M2_M1_mm_write_translator:uav_readdata
	wire          dma_m2_m1_mm_write_translator_avalon_universal_master_0_debugaccess;                // dma_M2_M1_mm_write_translator:uav_debugaccess -> dma_M2_M1_mm_write_agent:av_debugaccess
	wire   [31:0] dma_m2_m1_mm_write_translator_avalon_universal_master_0_address;                    // dma_M2_M1_mm_write_translator:uav_address -> dma_M2_M1_mm_write_agent:av_address
	wire          dma_m2_m1_mm_write_translator_avalon_universal_master_0_read;                       // dma_M2_M1_mm_write_translator:uav_read -> dma_M2_M1_mm_write_agent:av_read
	wire    [3:0] dma_m2_m1_mm_write_translator_avalon_universal_master_0_byteenable;                 // dma_M2_M1_mm_write_translator:uav_byteenable -> dma_M2_M1_mm_write_agent:av_byteenable
	wire          dma_m2_m1_mm_write_translator_avalon_universal_master_0_readdatavalid;              // dma_M2_M1_mm_write_agent:av_readdatavalid -> dma_M2_M1_mm_write_translator:uav_readdatavalid
	wire          dma_m2_m1_mm_write_translator_avalon_universal_master_0_lock;                       // dma_M2_M1_mm_write_translator:uav_lock -> dma_M2_M1_mm_write_agent:av_lock
	wire          dma_m2_m1_mm_write_translator_avalon_universal_master_0_write;                      // dma_M2_M1_mm_write_translator:uav_write -> dma_M2_M1_mm_write_agent:av_write
	wire   [31:0] dma_m2_m1_mm_write_translator_avalon_universal_master_0_writedata;                  // dma_M2_M1_mm_write_translator:uav_writedata -> dma_M2_M1_mm_write_agent:av_writedata
	wire    [9:0] dma_m2_m1_mm_write_translator_avalon_universal_master_0_burstcount;                 // dma_M2_M1_mm_write_translator:uav_burstcount -> dma_M2_M1_mm_write_agent:av_burstcount
	wire          rsp_mux_009_src_valid;                                                              // rsp_mux_009:src_valid -> dma_M2_M1_mm_write_agent:rp_valid
	wire  [119:0] rsp_mux_009_src_data;                                                               // rsp_mux_009:src_data -> dma_M2_M1_mm_write_agent:rp_data
	wire          rsp_mux_009_src_ready;                                                              // dma_M2_M1_mm_write_agent:rp_ready -> rsp_mux_009:src_ready
	wire   [15:0] rsp_mux_009_src_channel;                                                            // rsp_mux_009:src_channel -> dma_M2_M1_mm_write_agent:rp_channel
	wire          rsp_mux_009_src_startofpacket;                                                      // rsp_mux_009:src_startofpacket -> dma_M2_M1_mm_write_agent:rp_startofpacket
	wire          rsp_mux_009_src_endofpacket;                                                        // rsp_mux_009:src_endofpacket -> dma_M2_M1_mm_write_agent:rp_endofpacket
	wire          dma_m2_m1_mm_read_translator_avalon_universal_master_0_waitrequest;                 // dma_M2_M1_mm_read_agent:av_waitrequest -> dma_M2_M1_mm_read_translator:uav_waitrequest
	wire   [31:0] dma_m2_m1_mm_read_translator_avalon_universal_master_0_readdata;                    // dma_M2_M1_mm_read_agent:av_readdata -> dma_M2_M1_mm_read_translator:uav_readdata
	wire          dma_m2_m1_mm_read_translator_avalon_universal_master_0_debugaccess;                 // dma_M2_M1_mm_read_translator:uav_debugaccess -> dma_M2_M1_mm_read_agent:av_debugaccess
	wire   [31:0] dma_m2_m1_mm_read_translator_avalon_universal_master_0_address;                     // dma_M2_M1_mm_read_translator:uav_address -> dma_M2_M1_mm_read_agent:av_address
	wire          dma_m2_m1_mm_read_translator_avalon_universal_master_0_read;                        // dma_M2_M1_mm_read_translator:uav_read -> dma_M2_M1_mm_read_agent:av_read
	wire    [3:0] dma_m2_m1_mm_read_translator_avalon_universal_master_0_byteenable;                  // dma_M2_M1_mm_read_translator:uav_byteenable -> dma_M2_M1_mm_read_agent:av_byteenable
	wire          dma_m2_m1_mm_read_translator_avalon_universal_master_0_readdatavalid;               // dma_M2_M1_mm_read_agent:av_readdatavalid -> dma_M2_M1_mm_read_translator:uav_readdatavalid
	wire          dma_m2_m1_mm_read_translator_avalon_universal_master_0_lock;                        // dma_M2_M1_mm_read_translator:uav_lock -> dma_M2_M1_mm_read_agent:av_lock
	wire          dma_m2_m1_mm_read_translator_avalon_universal_master_0_write;                       // dma_M2_M1_mm_read_translator:uav_write -> dma_M2_M1_mm_read_agent:av_write
	wire   [31:0] dma_m2_m1_mm_read_translator_avalon_universal_master_0_writedata;                   // dma_M2_M1_mm_read_translator:uav_writedata -> dma_M2_M1_mm_read_agent:av_writedata
	wire    [9:0] dma_m2_m1_mm_read_translator_avalon_universal_master_0_burstcount;                  // dma_M2_M1_mm_read_translator:uav_burstcount -> dma_M2_M1_mm_read_agent:av_burstcount
	wire          rsp_mux_010_src_valid;                                                              // rsp_mux_010:src_valid -> dma_M2_M1_mm_read_agent:rp_valid
	wire  [119:0] rsp_mux_010_src_data;                                                               // rsp_mux_010:src_data -> dma_M2_M1_mm_read_agent:rp_data
	wire          rsp_mux_010_src_ready;                                                              // dma_M2_M1_mm_read_agent:rp_ready -> rsp_mux_010:src_ready
	wire   [15:0] rsp_mux_010_src_channel;                                                            // rsp_mux_010:src_channel -> dma_M2_M1_mm_read_agent:rp_channel
	wire          rsp_mux_010_src_startofpacket;                                                      // rsp_mux_010:src_startofpacket -> dma_M2_M1_mm_read_agent:rp_startofpacket
	wire          rsp_mux_010_src_endofpacket;                                                        // rsp_mux_010:src_endofpacket -> dma_M2_M1_mm_read_agent:rp_endofpacket
	wire          dma_m1_m2_mm_write_translator_avalon_universal_master_0_waitrequest;                // dma_M1_M2_mm_write_agent:av_waitrequest -> dma_M1_M2_mm_write_translator:uav_waitrequest
	wire   [31:0] dma_m1_m2_mm_write_translator_avalon_universal_master_0_readdata;                   // dma_M1_M2_mm_write_agent:av_readdata -> dma_M1_M2_mm_write_translator:uav_readdata
	wire          dma_m1_m2_mm_write_translator_avalon_universal_master_0_debugaccess;                // dma_M1_M2_mm_write_translator:uav_debugaccess -> dma_M1_M2_mm_write_agent:av_debugaccess
	wire   [31:0] dma_m1_m2_mm_write_translator_avalon_universal_master_0_address;                    // dma_M1_M2_mm_write_translator:uav_address -> dma_M1_M2_mm_write_agent:av_address
	wire          dma_m1_m2_mm_write_translator_avalon_universal_master_0_read;                       // dma_M1_M2_mm_write_translator:uav_read -> dma_M1_M2_mm_write_agent:av_read
	wire    [3:0] dma_m1_m2_mm_write_translator_avalon_universal_master_0_byteenable;                 // dma_M1_M2_mm_write_translator:uav_byteenable -> dma_M1_M2_mm_write_agent:av_byteenable
	wire          dma_m1_m2_mm_write_translator_avalon_universal_master_0_readdatavalid;              // dma_M1_M2_mm_write_agent:av_readdatavalid -> dma_M1_M2_mm_write_translator:uav_readdatavalid
	wire          dma_m1_m2_mm_write_translator_avalon_universal_master_0_lock;                       // dma_M1_M2_mm_write_translator:uav_lock -> dma_M1_M2_mm_write_agent:av_lock
	wire          dma_m1_m2_mm_write_translator_avalon_universal_master_0_write;                      // dma_M1_M2_mm_write_translator:uav_write -> dma_M1_M2_mm_write_agent:av_write
	wire   [31:0] dma_m1_m2_mm_write_translator_avalon_universal_master_0_writedata;                  // dma_M1_M2_mm_write_translator:uav_writedata -> dma_M1_M2_mm_write_agent:av_writedata
	wire    [9:0] dma_m1_m2_mm_write_translator_avalon_universal_master_0_burstcount;                 // dma_M1_M2_mm_write_translator:uav_burstcount -> dma_M1_M2_mm_write_agent:av_burstcount
	wire          rsp_mux_011_src_valid;                                                              // rsp_mux_011:src_valid -> dma_M1_M2_mm_write_agent:rp_valid
	wire  [119:0] rsp_mux_011_src_data;                                                               // rsp_mux_011:src_data -> dma_M1_M2_mm_write_agent:rp_data
	wire          rsp_mux_011_src_ready;                                                              // dma_M1_M2_mm_write_agent:rp_ready -> rsp_mux_011:src_ready
	wire   [15:0] rsp_mux_011_src_channel;                                                            // rsp_mux_011:src_channel -> dma_M1_M2_mm_write_agent:rp_channel
	wire          rsp_mux_011_src_startofpacket;                                                      // rsp_mux_011:src_startofpacket -> dma_M1_M2_mm_write_agent:rp_startofpacket
	wire          rsp_mux_011_src_endofpacket;                                                        // rsp_mux_011:src_endofpacket -> dma_M1_M2_mm_write_agent:rp_endofpacket
	wire   [31:0] jtag_uart_0_avalon_jtag_slave_agent_m0_readdata;                                    // jtag_uart_0_avalon_jtag_slave_translator:uav_readdata -> jtag_uart_0_avalon_jtag_slave_agent:m0_readdata
	wire          jtag_uart_0_avalon_jtag_slave_agent_m0_waitrequest;                                 // jtag_uart_0_avalon_jtag_slave_translator:uav_waitrequest -> jtag_uart_0_avalon_jtag_slave_agent:m0_waitrequest
	wire          jtag_uart_0_avalon_jtag_slave_agent_m0_debugaccess;                                 // jtag_uart_0_avalon_jtag_slave_agent:m0_debugaccess -> jtag_uart_0_avalon_jtag_slave_translator:uav_debugaccess
	wire   [31:0] jtag_uart_0_avalon_jtag_slave_agent_m0_address;                                     // jtag_uart_0_avalon_jtag_slave_agent:m0_address -> jtag_uart_0_avalon_jtag_slave_translator:uav_address
	wire    [3:0] jtag_uart_0_avalon_jtag_slave_agent_m0_byteenable;                                  // jtag_uart_0_avalon_jtag_slave_agent:m0_byteenable -> jtag_uart_0_avalon_jtag_slave_translator:uav_byteenable
	wire          jtag_uart_0_avalon_jtag_slave_agent_m0_read;                                        // jtag_uart_0_avalon_jtag_slave_agent:m0_read -> jtag_uart_0_avalon_jtag_slave_translator:uav_read
	wire          jtag_uart_0_avalon_jtag_slave_agent_m0_readdatavalid;                               // jtag_uart_0_avalon_jtag_slave_translator:uav_readdatavalid -> jtag_uart_0_avalon_jtag_slave_agent:m0_readdatavalid
	wire          jtag_uart_0_avalon_jtag_slave_agent_m0_lock;                                        // jtag_uart_0_avalon_jtag_slave_agent:m0_lock -> jtag_uart_0_avalon_jtag_slave_translator:uav_lock
	wire   [31:0] jtag_uart_0_avalon_jtag_slave_agent_m0_writedata;                                   // jtag_uart_0_avalon_jtag_slave_agent:m0_writedata -> jtag_uart_0_avalon_jtag_slave_translator:uav_writedata
	wire          jtag_uart_0_avalon_jtag_slave_agent_m0_write;                                       // jtag_uart_0_avalon_jtag_slave_agent:m0_write -> jtag_uart_0_avalon_jtag_slave_translator:uav_write
	wire    [2:0] jtag_uart_0_avalon_jtag_slave_agent_m0_burstcount;                                  // jtag_uart_0_avalon_jtag_slave_agent:m0_burstcount -> jtag_uart_0_avalon_jtag_slave_translator:uav_burstcount
	wire          jtag_uart_0_avalon_jtag_slave_agent_rf_source_valid;                                // jtag_uart_0_avalon_jtag_slave_agent:rf_source_valid -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_valid
	wire  [120:0] jtag_uart_0_avalon_jtag_slave_agent_rf_source_data;                                 // jtag_uart_0_avalon_jtag_slave_agent:rf_source_data -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_data
	wire          jtag_uart_0_avalon_jtag_slave_agent_rf_source_ready;                                // jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_ready -> jtag_uart_0_avalon_jtag_slave_agent:rf_source_ready
	wire          jtag_uart_0_avalon_jtag_slave_agent_rf_source_startofpacket;                        // jtag_uart_0_avalon_jtag_slave_agent:rf_source_startofpacket -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_startofpacket
	wire          jtag_uart_0_avalon_jtag_slave_agent_rf_source_endofpacket;                          // jtag_uart_0_avalon_jtag_slave_agent:rf_source_endofpacket -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_endofpacket
	wire          jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_valid;                             // jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_valid -> jtag_uart_0_avalon_jtag_slave_agent:rf_sink_valid
	wire  [120:0] jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_data;                              // jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_data -> jtag_uart_0_avalon_jtag_slave_agent:rf_sink_data
	wire          jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_ready;                             // jtag_uart_0_avalon_jtag_slave_agent:rf_sink_ready -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_ready
	wire          jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket;                     // jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_startofpacket -> jtag_uart_0_avalon_jtag_slave_agent:rf_sink_startofpacket
	wire          jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket;                       // jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_endofpacket -> jtag_uart_0_avalon_jtag_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_src_valid;                                                                  // cmd_mux:src_valid -> jtag_uart_0_avalon_jtag_slave_agent:cp_valid
	wire  [119:0] cmd_mux_src_data;                                                                   // cmd_mux:src_data -> jtag_uart_0_avalon_jtag_slave_agent:cp_data
	wire          cmd_mux_src_ready;                                                                  // jtag_uart_0_avalon_jtag_slave_agent:cp_ready -> cmd_mux:src_ready
	wire   [15:0] cmd_mux_src_channel;                                                                // cmd_mux:src_channel -> jtag_uart_0_avalon_jtag_slave_agent:cp_channel
	wire          cmd_mux_src_startofpacket;                                                          // cmd_mux:src_startofpacket -> jtag_uart_0_avalon_jtag_slave_agent:cp_startofpacket
	wire          cmd_mux_src_endofpacket;                                                            // cmd_mux:src_endofpacket -> jtag_uart_0_avalon_jtag_slave_agent:cp_endofpacket
	wire  [255:0] m2_ddr2_memory_avl_agent_m0_readdata;                                               // m2_ddr2_memory_avl_translator:uav_readdata -> m2_ddr2_memory_avl_agent:m0_readdata
	wire          m2_ddr2_memory_avl_agent_m0_waitrequest;                                            // m2_ddr2_memory_avl_translator:uav_waitrequest -> m2_ddr2_memory_avl_agent:m0_waitrequest
	wire          m2_ddr2_memory_avl_agent_m0_debugaccess;                                            // m2_ddr2_memory_avl_agent:m0_debugaccess -> m2_ddr2_memory_avl_translator:uav_debugaccess
	wire   [31:0] m2_ddr2_memory_avl_agent_m0_address;                                                // m2_ddr2_memory_avl_agent:m0_address -> m2_ddr2_memory_avl_translator:uav_address
	wire   [31:0] m2_ddr2_memory_avl_agent_m0_byteenable;                                             // m2_ddr2_memory_avl_agent:m0_byteenable -> m2_ddr2_memory_avl_translator:uav_byteenable
	wire          m2_ddr2_memory_avl_agent_m0_read;                                                   // m2_ddr2_memory_avl_agent:m0_read -> m2_ddr2_memory_avl_translator:uav_read
	wire          m2_ddr2_memory_avl_agent_m0_readdatavalid;                                          // m2_ddr2_memory_avl_translator:uav_readdatavalid -> m2_ddr2_memory_avl_agent:m0_readdatavalid
	wire          m2_ddr2_memory_avl_agent_m0_lock;                                                   // m2_ddr2_memory_avl_agent:m0_lock -> m2_ddr2_memory_avl_translator:uav_lock
	wire  [255:0] m2_ddr2_memory_avl_agent_m0_writedata;                                              // m2_ddr2_memory_avl_agent:m0_writedata -> m2_ddr2_memory_avl_translator:uav_writedata
	wire          m2_ddr2_memory_avl_agent_m0_write;                                                  // m2_ddr2_memory_avl_agent:m0_write -> m2_ddr2_memory_avl_translator:uav_write
	wire    [7:0] m2_ddr2_memory_avl_agent_m0_burstcount;                                             // m2_ddr2_memory_avl_agent:m0_burstcount -> m2_ddr2_memory_avl_translator:uav_burstcount
	wire          m2_ddr2_memory_avl_agent_rf_source_valid;                                           // m2_ddr2_memory_avl_agent:rf_source_valid -> m2_ddr2_memory_avl_agent_rsp_fifo:in_valid
	wire  [372:0] m2_ddr2_memory_avl_agent_rf_source_data;                                            // m2_ddr2_memory_avl_agent:rf_source_data -> m2_ddr2_memory_avl_agent_rsp_fifo:in_data
	wire          m2_ddr2_memory_avl_agent_rf_source_ready;                                           // m2_ddr2_memory_avl_agent_rsp_fifo:in_ready -> m2_ddr2_memory_avl_agent:rf_source_ready
	wire          m2_ddr2_memory_avl_agent_rf_source_startofpacket;                                   // m2_ddr2_memory_avl_agent:rf_source_startofpacket -> m2_ddr2_memory_avl_agent_rsp_fifo:in_startofpacket
	wire          m2_ddr2_memory_avl_agent_rf_source_endofpacket;                                     // m2_ddr2_memory_avl_agent:rf_source_endofpacket -> m2_ddr2_memory_avl_agent_rsp_fifo:in_endofpacket
	wire          m2_ddr2_memory_avl_agent_rsp_fifo_out_valid;                                        // m2_ddr2_memory_avl_agent_rsp_fifo:out_valid -> m2_ddr2_memory_avl_agent:rf_sink_valid
	wire  [372:0] m2_ddr2_memory_avl_agent_rsp_fifo_out_data;                                         // m2_ddr2_memory_avl_agent_rsp_fifo:out_data -> m2_ddr2_memory_avl_agent:rf_sink_data
	wire          m2_ddr2_memory_avl_agent_rsp_fifo_out_ready;                                        // m2_ddr2_memory_avl_agent:rf_sink_ready -> m2_ddr2_memory_avl_agent_rsp_fifo:out_ready
	wire          m2_ddr2_memory_avl_agent_rsp_fifo_out_startofpacket;                                // m2_ddr2_memory_avl_agent_rsp_fifo:out_startofpacket -> m2_ddr2_memory_avl_agent:rf_sink_startofpacket
	wire          m2_ddr2_memory_avl_agent_rsp_fifo_out_endofpacket;                                  // m2_ddr2_memory_avl_agent_rsp_fifo:out_endofpacket -> m2_ddr2_memory_avl_agent:rf_sink_endofpacket
	wire          m2_ddr2_memory_avl_agent_rdata_fifo_src_valid;                                      // m2_ddr2_memory_avl_agent:rdata_fifo_src_valid -> m2_ddr2_memory_avl_agent_rdata_fifo:in_valid
	wire  [257:0] m2_ddr2_memory_avl_agent_rdata_fifo_src_data;                                       // m2_ddr2_memory_avl_agent:rdata_fifo_src_data -> m2_ddr2_memory_avl_agent_rdata_fifo:in_data
	wire          m2_ddr2_memory_avl_agent_rdata_fifo_src_ready;                                      // m2_ddr2_memory_avl_agent_rdata_fifo:in_ready -> m2_ddr2_memory_avl_agent:rdata_fifo_src_ready
	wire   [31:0] tse_mac_control_port_agent_m0_readdata;                                             // tse_mac_control_port_translator:uav_readdata -> tse_mac_control_port_agent:m0_readdata
	wire          tse_mac_control_port_agent_m0_waitrequest;                                          // tse_mac_control_port_translator:uav_waitrequest -> tse_mac_control_port_agent:m0_waitrequest
	wire          tse_mac_control_port_agent_m0_debugaccess;                                          // tse_mac_control_port_agent:m0_debugaccess -> tse_mac_control_port_translator:uav_debugaccess
	wire   [31:0] tse_mac_control_port_agent_m0_address;                                              // tse_mac_control_port_agent:m0_address -> tse_mac_control_port_translator:uav_address
	wire    [3:0] tse_mac_control_port_agent_m0_byteenable;                                           // tse_mac_control_port_agent:m0_byteenable -> tse_mac_control_port_translator:uav_byteenable
	wire          tse_mac_control_port_agent_m0_read;                                                 // tse_mac_control_port_agent:m0_read -> tse_mac_control_port_translator:uav_read
	wire          tse_mac_control_port_agent_m0_readdatavalid;                                        // tse_mac_control_port_translator:uav_readdatavalid -> tse_mac_control_port_agent:m0_readdatavalid
	wire          tse_mac_control_port_agent_m0_lock;                                                 // tse_mac_control_port_agent:m0_lock -> tse_mac_control_port_translator:uav_lock
	wire   [31:0] tse_mac_control_port_agent_m0_writedata;                                            // tse_mac_control_port_agent:m0_writedata -> tse_mac_control_port_translator:uav_writedata
	wire          tse_mac_control_port_agent_m0_write;                                                // tse_mac_control_port_agent:m0_write -> tse_mac_control_port_translator:uav_write
	wire    [2:0] tse_mac_control_port_agent_m0_burstcount;                                           // tse_mac_control_port_agent:m0_burstcount -> tse_mac_control_port_translator:uav_burstcount
	wire          tse_mac_control_port_agent_rf_source_valid;                                         // tse_mac_control_port_agent:rf_source_valid -> tse_mac_control_port_agent_rsp_fifo:in_valid
	wire  [120:0] tse_mac_control_port_agent_rf_source_data;                                          // tse_mac_control_port_agent:rf_source_data -> tse_mac_control_port_agent_rsp_fifo:in_data
	wire          tse_mac_control_port_agent_rf_source_ready;                                         // tse_mac_control_port_agent_rsp_fifo:in_ready -> tse_mac_control_port_agent:rf_source_ready
	wire          tse_mac_control_port_agent_rf_source_startofpacket;                                 // tse_mac_control_port_agent:rf_source_startofpacket -> tse_mac_control_port_agent_rsp_fifo:in_startofpacket
	wire          tse_mac_control_port_agent_rf_source_endofpacket;                                   // tse_mac_control_port_agent:rf_source_endofpacket -> tse_mac_control_port_agent_rsp_fifo:in_endofpacket
	wire          tse_mac_control_port_agent_rsp_fifo_out_valid;                                      // tse_mac_control_port_agent_rsp_fifo:out_valid -> tse_mac_control_port_agent:rf_sink_valid
	wire  [120:0] tse_mac_control_port_agent_rsp_fifo_out_data;                                       // tse_mac_control_port_agent_rsp_fifo:out_data -> tse_mac_control_port_agent:rf_sink_data
	wire          tse_mac_control_port_agent_rsp_fifo_out_ready;                                      // tse_mac_control_port_agent:rf_sink_ready -> tse_mac_control_port_agent_rsp_fifo:out_ready
	wire          tse_mac_control_port_agent_rsp_fifo_out_startofpacket;                              // tse_mac_control_port_agent_rsp_fifo:out_startofpacket -> tse_mac_control_port_agent:rf_sink_startofpacket
	wire          tse_mac_control_port_agent_rsp_fifo_out_endofpacket;                                // tse_mac_control_port_agent_rsp_fifo:out_endofpacket -> tse_mac_control_port_agent:rf_sink_endofpacket
	wire          cmd_mux_002_src_valid;                                                              // cmd_mux_002:src_valid -> tse_mac_control_port_agent:cp_valid
	wire  [119:0] cmd_mux_002_src_data;                                                               // cmd_mux_002:src_data -> tse_mac_control_port_agent:cp_data
	wire          cmd_mux_002_src_ready;                                                              // tse_mac_control_port_agent:cp_ready -> cmd_mux_002:src_ready
	wire   [15:0] cmd_mux_002_src_channel;                                                            // cmd_mux_002:src_channel -> tse_mac_control_port_agent:cp_channel
	wire          cmd_mux_002_src_startofpacket;                                                      // cmd_mux_002:src_startofpacket -> tse_mac_control_port_agent:cp_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                                        // cmd_mux_002:src_endofpacket -> tse_mac_control_port_agent:cp_endofpacket
	wire   [31:0] sysid_qsys_control_slave_agent_m0_readdata;                                         // sysid_qsys_control_slave_translator:uav_readdata -> sysid_qsys_control_slave_agent:m0_readdata
	wire          sysid_qsys_control_slave_agent_m0_waitrequest;                                      // sysid_qsys_control_slave_translator:uav_waitrequest -> sysid_qsys_control_slave_agent:m0_waitrequest
	wire          sysid_qsys_control_slave_agent_m0_debugaccess;                                      // sysid_qsys_control_slave_agent:m0_debugaccess -> sysid_qsys_control_slave_translator:uav_debugaccess
	wire   [31:0] sysid_qsys_control_slave_agent_m0_address;                                          // sysid_qsys_control_slave_agent:m0_address -> sysid_qsys_control_slave_translator:uav_address
	wire    [3:0] sysid_qsys_control_slave_agent_m0_byteenable;                                       // sysid_qsys_control_slave_agent:m0_byteenable -> sysid_qsys_control_slave_translator:uav_byteenable
	wire          sysid_qsys_control_slave_agent_m0_read;                                             // sysid_qsys_control_slave_agent:m0_read -> sysid_qsys_control_slave_translator:uav_read
	wire          sysid_qsys_control_slave_agent_m0_readdatavalid;                                    // sysid_qsys_control_slave_translator:uav_readdatavalid -> sysid_qsys_control_slave_agent:m0_readdatavalid
	wire          sysid_qsys_control_slave_agent_m0_lock;                                             // sysid_qsys_control_slave_agent:m0_lock -> sysid_qsys_control_slave_translator:uav_lock
	wire   [31:0] sysid_qsys_control_slave_agent_m0_writedata;                                        // sysid_qsys_control_slave_agent:m0_writedata -> sysid_qsys_control_slave_translator:uav_writedata
	wire          sysid_qsys_control_slave_agent_m0_write;                                            // sysid_qsys_control_slave_agent:m0_write -> sysid_qsys_control_slave_translator:uav_write
	wire    [2:0] sysid_qsys_control_slave_agent_m0_burstcount;                                       // sysid_qsys_control_slave_agent:m0_burstcount -> sysid_qsys_control_slave_translator:uav_burstcount
	wire          sysid_qsys_control_slave_agent_rf_source_valid;                                     // sysid_qsys_control_slave_agent:rf_source_valid -> sysid_qsys_control_slave_agent_rsp_fifo:in_valid
	wire  [120:0] sysid_qsys_control_slave_agent_rf_source_data;                                      // sysid_qsys_control_slave_agent:rf_source_data -> sysid_qsys_control_slave_agent_rsp_fifo:in_data
	wire          sysid_qsys_control_slave_agent_rf_source_ready;                                     // sysid_qsys_control_slave_agent_rsp_fifo:in_ready -> sysid_qsys_control_slave_agent:rf_source_ready
	wire          sysid_qsys_control_slave_agent_rf_source_startofpacket;                             // sysid_qsys_control_slave_agent:rf_source_startofpacket -> sysid_qsys_control_slave_agent_rsp_fifo:in_startofpacket
	wire          sysid_qsys_control_slave_agent_rf_source_endofpacket;                               // sysid_qsys_control_slave_agent:rf_source_endofpacket -> sysid_qsys_control_slave_agent_rsp_fifo:in_endofpacket
	wire          sysid_qsys_control_slave_agent_rsp_fifo_out_valid;                                  // sysid_qsys_control_slave_agent_rsp_fifo:out_valid -> sysid_qsys_control_slave_agent:rf_sink_valid
	wire  [120:0] sysid_qsys_control_slave_agent_rsp_fifo_out_data;                                   // sysid_qsys_control_slave_agent_rsp_fifo:out_data -> sysid_qsys_control_slave_agent:rf_sink_data
	wire          sysid_qsys_control_slave_agent_rsp_fifo_out_ready;                                  // sysid_qsys_control_slave_agent:rf_sink_ready -> sysid_qsys_control_slave_agent_rsp_fifo:out_ready
	wire          sysid_qsys_control_slave_agent_rsp_fifo_out_startofpacket;                          // sysid_qsys_control_slave_agent_rsp_fifo:out_startofpacket -> sysid_qsys_control_slave_agent:rf_sink_startofpacket
	wire          sysid_qsys_control_slave_agent_rsp_fifo_out_endofpacket;                            // sysid_qsys_control_slave_agent_rsp_fifo:out_endofpacket -> sysid_qsys_control_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_003_src_valid;                                                              // cmd_mux_003:src_valid -> sysid_qsys_control_slave_agent:cp_valid
	wire  [119:0] cmd_mux_003_src_data;                                                               // cmd_mux_003:src_data -> sysid_qsys_control_slave_agent:cp_data
	wire          cmd_mux_003_src_ready;                                                              // sysid_qsys_control_slave_agent:cp_ready -> cmd_mux_003:src_ready
	wire   [15:0] cmd_mux_003_src_channel;                                                            // cmd_mux_003:src_channel -> sysid_qsys_control_slave_agent:cp_channel
	wire          cmd_mux_003_src_startofpacket;                                                      // cmd_mux_003:src_startofpacket -> sysid_qsys_control_slave_agent:cp_startofpacket
	wire          cmd_mux_003_src_endofpacket;                                                        // cmd_mux_003:src_endofpacket -> sysid_qsys_control_slave_agent:cp_endofpacket
	wire   [31:0] sgdma_tx_csr_agent_m0_readdata;                                                     // sgdma_tx_csr_translator:uav_readdata -> sgdma_tx_csr_agent:m0_readdata
	wire          sgdma_tx_csr_agent_m0_waitrequest;                                                  // sgdma_tx_csr_translator:uav_waitrequest -> sgdma_tx_csr_agent:m0_waitrequest
	wire          sgdma_tx_csr_agent_m0_debugaccess;                                                  // sgdma_tx_csr_agent:m0_debugaccess -> sgdma_tx_csr_translator:uav_debugaccess
	wire   [31:0] sgdma_tx_csr_agent_m0_address;                                                      // sgdma_tx_csr_agent:m0_address -> sgdma_tx_csr_translator:uav_address
	wire    [3:0] sgdma_tx_csr_agent_m0_byteenable;                                                   // sgdma_tx_csr_agent:m0_byteenable -> sgdma_tx_csr_translator:uav_byteenable
	wire          sgdma_tx_csr_agent_m0_read;                                                         // sgdma_tx_csr_agent:m0_read -> sgdma_tx_csr_translator:uav_read
	wire          sgdma_tx_csr_agent_m0_readdatavalid;                                                // sgdma_tx_csr_translator:uav_readdatavalid -> sgdma_tx_csr_agent:m0_readdatavalid
	wire          sgdma_tx_csr_agent_m0_lock;                                                         // sgdma_tx_csr_agent:m0_lock -> sgdma_tx_csr_translator:uav_lock
	wire   [31:0] sgdma_tx_csr_agent_m0_writedata;                                                    // sgdma_tx_csr_agent:m0_writedata -> sgdma_tx_csr_translator:uav_writedata
	wire          sgdma_tx_csr_agent_m0_write;                                                        // sgdma_tx_csr_agent:m0_write -> sgdma_tx_csr_translator:uav_write
	wire    [2:0] sgdma_tx_csr_agent_m0_burstcount;                                                   // sgdma_tx_csr_agent:m0_burstcount -> sgdma_tx_csr_translator:uav_burstcount
	wire          sgdma_tx_csr_agent_rf_source_valid;                                                 // sgdma_tx_csr_agent:rf_source_valid -> sgdma_tx_csr_agent_rsp_fifo:in_valid
	wire  [120:0] sgdma_tx_csr_agent_rf_source_data;                                                  // sgdma_tx_csr_agent:rf_source_data -> sgdma_tx_csr_agent_rsp_fifo:in_data
	wire          sgdma_tx_csr_agent_rf_source_ready;                                                 // sgdma_tx_csr_agent_rsp_fifo:in_ready -> sgdma_tx_csr_agent:rf_source_ready
	wire          sgdma_tx_csr_agent_rf_source_startofpacket;                                         // sgdma_tx_csr_agent:rf_source_startofpacket -> sgdma_tx_csr_agent_rsp_fifo:in_startofpacket
	wire          sgdma_tx_csr_agent_rf_source_endofpacket;                                           // sgdma_tx_csr_agent:rf_source_endofpacket -> sgdma_tx_csr_agent_rsp_fifo:in_endofpacket
	wire          sgdma_tx_csr_agent_rsp_fifo_out_valid;                                              // sgdma_tx_csr_agent_rsp_fifo:out_valid -> sgdma_tx_csr_agent:rf_sink_valid
	wire  [120:0] sgdma_tx_csr_agent_rsp_fifo_out_data;                                               // sgdma_tx_csr_agent_rsp_fifo:out_data -> sgdma_tx_csr_agent:rf_sink_data
	wire          sgdma_tx_csr_agent_rsp_fifo_out_ready;                                              // sgdma_tx_csr_agent:rf_sink_ready -> sgdma_tx_csr_agent_rsp_fifo:out_ready
	wire          sgdma_tx_csr_agent_rsp_fifo_out_startofpacket;                                      // sgdma_tx_csr_agent_rsp_fifo:out_startofpacket -> sgdma_tx_csr_agent:rf_sink_startofpacket
	wire          sgdma_tx_csr_agent_rsp_fifo_out_endofpacket;                                        // sgdma_tx_csr_agent_rsp_fifo:out_endofpacket -> sgdma_tx_csr_agent:rf_sink_endofpacket
	wire          cmd_mux_004_src_valid;                                                              // cmd_mux_004:src_valid -> sgdma_tx_csr_agent:cp_valid
	wire  [119:0] cmd_mux_004_src_data;                                                               // cmd_mux_004:src_data -> sgdma_tx_csr_agent:cp_data
	wire          cmd_mux_004_src_ready;                                                              // sgdma_tx_csr_agent:cp_ready -> cmd_mux_004:src_ready
	wire   [15:0] cmd_mux_004_src_channel;                                                            // cmd_mux_004:src_channel -> sgdma_tx_csr_agent:cp_channel
	wire          cmd_mux_004_src_startofpacket;                                                      // cmd_mux_004:src_startofpacket -> sgdma_tx_csr_agent:cp_startofpacket
	wire          cmd_mux_004_src_endofpacket;                                                        // cmd_mux_004:src_endofpacket -> sgdma_tx_csr_agent:cp_endofpacket
	wire   [31:0] sgdma_rx_csr_agent_m0_readdata;                                                     // sgdma_rx_csr_translator:uav_readdata -> sgdma_rx_csr_agent:m0_readdata
	wire          sgdma_rx_csr_agent_m0_waitrequest;                                                  // sgdma_rx_csr_translator:uav_waitrequest -> sgdma_rx_csr_agent:m0_waitrequest
	wire          sgdma_rx_csr_agent_m0_debugaccess;                                                  // sgdma_rx_csr_agent:m0_debugaccess -> sgdma_rx_csr_translator:uav_debugaccess
	wire   [31:0] sgdma_rx_csr_agent_m0_address;                                                      // sgdma_rx_csr_agent:m0_address -> sgdma_rx_csr_translator:uav_address
	wire    [3:0] sgdma_rx_csr_agent_m0_byteenable;                                                   // sgdma_rx_csr_agent:m0_byteenable -> sgdma_rx_csr_translator:uav_byteenable
	wire          sgdma_rx_csr_agent_m0_read;                                                         // sgdma_rx_csr_agent:m0_read -> sgdma_rx_csr_translator:uav_read
	wire          sgdma_rx_csr_agent_m0_readdatavalid;                                                // sgdma_rx_csr_translator:uav_readdatavalid -> sgdma_rx_csr_agent:m0_readdatavalid
	wire          sgdma_rx_csr_agent_m0_lock;                                                         // sgdma_rx_csr_agent:m0_lock -> sgdma_rx_csr_translator:uav_lock
	wire   [31:0] sgdma_rx_csr_agent_m0_writedata;                                                    // sgdma_rx_csr_agent:m0_writedata -> sgdma_rx_csr_translator:uav_writedata
	wire          sgdma_rx_csr_agent_m0_write;                                                        // sgdma_rx_csr_agent:m0_write -> sgdma_rx_csr_translator:uav_write
	wire    [2:0] sgdma_rx_csr_agent_m0_burstcount;                                                   // sgdma_rx_csr_agent:m0_burstcount -> sgdma_rx_csr_translator:uav_burstcount
	wire          sgdma_rx_csr_agent_rf_source_valid;                                                 // sgdma_rx_csr_agent:rf_source_valid -> sgdma_rx_csr_agent_rsp_fifo:in_valid
	wire  [120:0] sgdma_rx_csr_agent_rf_source_data;                                                  // sgdma_rx_csr_agent:rf_source_data -> sgdma_rx_csr_agent_rsp_fifo:in_data
	wire          sgdma_rx_csr_agent_rf_source_ready;                                                 // sgdma_rx_csr_agent_rsp_fifo:in_ready -> sgdma_rx_csr_agent:rf_source_ready
	wire          sgdma_rx_csr_agent_rf_source_startofpacket;                                         // sgdma_rx_csr_agent:rf_source_startofpacket -> sgdma_rx_csr_agent_rsp_fifo:in_startofpacket
	wire          sgdma_rx_csr_agent_rf_source_endofpacket;                                           // sgdma_rx_csr_agent:rf_source_endofpacket -> sgdma_rx_csr_agent_rsp_fifo:in_endofpacket
	wire          sgdma_rx_csr_agent_rsp_fifo_out_valid;                                              // sgdma_rx_csr_agent_rsp_fifo:out_valid -> sgdma_rx_csr_agent:rf_sink_valid
	wire  [120:0] sgdma_rx_csr_agent_rsp_fifo_out_data;                                               // sgdma_rx_csr_agent_rsp_fifo:out_data -> sgdma_rx_csr_agent:rf_sink_data
	wire          sgdma_rx_csr_agent_rsp_fifo_out_ready;                                              // sgdma_rx_csr_agent:rf_sink_ready -> sgdma_rx_csr_agent_rsp_fifo:out_ready
	wire          sgdma_rx_csr_agent_rsp_fifo_out_startofpacket;                                      // sgdma_rx_csr_agent_rsp_fifo:out_startofpacket -> sgdma_rx_csr_agent:rf_sink_startofpacket
	wire          sgdma_rx_csr_agent_rsp_fifo_out_endofpacket;                                        // sgdma_rx_csr_agent_rsp_fifo:out_endofpacket -> sgdma_rx_csr_agent:rf_sink_endofpacket
	wire          cmd_mux_005_src_valid;                                                              // cmd_mux_005:src_valid -> sgdma_rx_csr_agent:cp_valid
	wire  [119:0] cmd_mux_005_src_data;                                                               // cmd_mux_005:src_data -> sgdma_rx_csr_agent:cp_data
	wire          cmd_mux_005_src_ready;                                                              // sgdma_rx_csr_agent:cp_ready -> cmd_mux_005:src_ready
	wire   [15:0] cmd_mux_005_src_channel;                                                            // cmd_mux_005:src_channel -> sgdma_rx_csr_agent:cp_channel
	wire          cmd_mux_005_src_startofpacket;                                                      // cmd_mux_005:src_startofpacket -> sgdma_rx_csr_agent:cp_startofpacket
	wire          cmd_mux_005_src_endofpacket;                                                        // cmd_mux_005:src_endofpacket -> sgdma_rx_csr_agent:cp_endofpacket
	wire   [31:0] dma_m1_m2_csr_agent_m0_readdata;                                                    // dma_M1_M2_csr_translator:uav_readdata -> dma_M1_M2_csr_agent:m0_readdata
	wire          dma_m1_m2_csr_agent_m0_waitrequest;                                                 // dma_M1_M2_csr_translator:uav_waitrequest -> dma_M1_M2_csr_agent:m0_waitrequest
	wire          dma_m1_m2_csr_agent_m0_debugaccess;                                                 // dma_M1_M2_csr_agent:m0_debugaccess -> dma_M1_M2_csr_translator:uav_debugaccess
	wire   [31:0] dma_m1_m2_csr_agent_m0_address;                                                     // dma_M1_M2_csr_agent:m0_address -> dma_M1_M2_csr_translator:uav_address
	wire    [3:0] dma_m1_m2_csr_agent_m0_byteenable;                                                  // dma_M1_M2_csr_agent:m0_byteenable -> dma_M1_M2_csr_translator:uav_byteenable
	wire          dma_m1_m2_csr_agent_m0_read;                                                        // dma_M1_M2_csr_agent:m0_read -> dma_M1_M2_csr_translator:uav_read
	wire          dma_m1_m2_csr_agent_m0_readdatavalid;                                               // dma_M1_M2_csr_translator:uav_readdatavalid -> dma_M1_M2_csr_agent:m0_readdatavalid
	wire          dma_m1_m2_csr_agent_m0_lock;                                                        // dma_M1_M2_csr_agent:m0_lock -> dma_M1_M2_csr_translator:uav_lock
	wire   [31:0] dma_m1_m2_csr_agent_m0_writedata;                                                   // dma_M1_M2_csr_agent:m0_writedata -> dma_M1_M2_csr_translator:uav_writedata
	wire          dma_m1_m2_csr_agent_m0_write;                                                       // dma_M1_M2_csr_agent:m0_write -> dma_M1_M2_csr_translator:uav_write
	wire    [2:0] dma_m1_m2_csr_agent_m0_burstcount;                                                  // dma_M1_M2_csr_agent:m0_burstcount -> dma_M1_M2_csr_translator:uav_burstcount
	wire          dma_m1_m2_csr_agent_rf_source_valid;                                                // dma_M1_M2_csr_agent:rf_source_valid -> dma_M1_M2_csr_agent_rsp_fifo:in_valid
	wire  [120:0] dma_m1_m2_csr_agent_rf_source_data;                                                 // dma_M1_M2_csr_agent:rf_source_data -> dma_M1_M2_csr_agent_rsp_fifo:in_data
	wire          dma_m1_m2_csr_agent_rf_source_ready;                                                // dma_M1_M2_csr_agent_rsp_fifo:in_ready -> dma_M1_M2_csr_agent:rf_source_ready
	wire          dma_m1_m2_csr_agent_rf_source_startofpacket;                                        // dma_M1_M2_csr_agent:rf_source_startofpacket -> dma_M1_M2_csr_agent_rsp_fifo:in_startofpacket
	wire          dma_m1_m2_csr_agent_rf_source_endofpacket;                                          // dma_M1_M2_csr_agent:rf_source_endofpacket -> dma_M1_M2_csr_agent_rsp_fifo:in_endofpacket
	wire          dma_m1_m2_csr_agent_rsp_fifo_out_valid;                                             // dma_M1_M2_csr_agent_rsp_fifo:out_valid -> dma_M1_M2_csr_agent:rf_sink_valid
	wire  [120:0] dma_m1_m2_csr_agent_rsp_fifo_out_data;                                              // dma_M1_M2_csr_agent_rsp_fifo:out_data -> dma_M1_M2_csr_agent:rf_sink_data
	wire          dma_m1_m2_csr_agent_rsp_fifo_out_ready;                                             // dma_M1_M2_csr_agent:rf_sink_ready -> dma_M1_M2_csr_agent_rsp_fifo:out_ready
	wire          dma_m1_m2_csr_agent_rsp_fifo_out_startofpacket;                                     // dma_M1_M2_csr_agent_rsp_fifo:out_startofpacket -> dma_M1_M2_csr_agent:rf_sink_startofpacket
	wire          dma_m1_m2_csr_agent_rsp_fifo_out_endofpacket;                                       // dma_M1_M2_csr_agent_rsp_fifo:out_endofpacket -> dma_M1_M2_csr_agent:rf_sink_endofpacket
	wire          cmd_mux_006_src_valid;                                                              // cmd_mux_006:src_valid -> dma_M1_M2_csr_agent:cp_valid
	wire  [119:0] cmd_mux_006_src_data;                                                               // cmd_mux_006:src_data -> dma_M1_M2_csr_agent:cp_data
	wire          cmd_mux_006_src_ready;                                                              // dma_M1_M2_csr_agent:cp_ready -> cmd_mux_006:src_ready
	wire   [15:0] cmd_mux_006_src_channel;                                                            // cmd_mux_006:src_channel -> dma_M1_M2_csr_agent:cp_channel
	wire          cmd_mux_006_src_startofpacket;                                                      // cmd_mux_006:src_startofpacket -> dma_M1_M2_csr_agent:cp_startofpacket
	wire          cmd_mux_006_src_endofpacket;                                                        // cmd_mux_006:src_endofpacket -> dma_M1_M2_csr_agent:cp_endofpacket
	wire   [31:0] dma_m2_m1_csr_agent_m0_readdata;                                                    // dma_M2_M1_csr_translator:uav_readdata -> dma_M2_M1_csr_agent:m0_readdata
	wire          dma_m2_m1_csr_agent_m0_waitrequest;                                                 // dma_M2_M1_csr_translator:uav_waitrequest -> dma_M2_M1_csr_agent:m0_waitrequest
	wire          dma_m2_m1_csr_agent_m0_debugaccess;                                                 // dma_M2_M1_csr_agent:m0_debugaccess -> dma_M2_M1_csr_translator:uav_debugaccess
	wire   [31:0] dma_m2_m1_csr_agent_m0_address;                                                     // dma_M2_M1_csr_agent:m0_address -> dma_M2_M1_csr_translator:uav_address
	wire    [3:0] dma_m2_m1_csr_agent_m0_byteenable;                                                  // dma_M2_M1_csr_agent:m0_byteenable -> dma_M2_M1_csr_translator:uav_byteenable
	wire          dma_m2_m1_csr_agent_m0_read;                                                        // dma_M2_M1_csr_agent:m0_read -> dma_M2_M1_csr_translator:uav_read
	wire          dma_m2_m1_csr_agent_m0_readdatavalid;                                               // dma_M2_M1_csr_translator:uav_readdatavalid -> dma_M2_M1_csr_agent:m0_readdatavalid
	wire          dma_m2_m1_csr_agent_m0_lock;                                                        // dma_M2_M1_csr_agent:m0_lock -> dma_M2_M1_csr_translator:uav_lock
	wire   [31:0] dma_m2_m1_csr_agent_m0_writedata;                                                   // dma_M2_M1_csr_agent:m0_writedata -> dma_M2_M1_csr_translator:uav_writedata
	wire          dma_m2_m1_csr_agent_m0_write;                                                       // dma_M2_M1_csr_agent:m0_write -> dma_M2_M1_csr_translator:uav_write
	wire    [2:0] dma_m2_m1_csr_agent_m0_burstcount;                                                  // dma_M2_M1_csr_agent:m0_burstcount -> dma_M2_M1_csr_translator:uav_burstcount
	wire          dma_m2_m1_csr_agent_rf_source_valid;                                                // dma_M2_M1_csr_agent:rf_source_valid -> dma_M2_M1_csr_agent_rsp_fifo:in_valid
	wire  [120:0] dma_m2_m1_csr_agent_rf_source_data;                                                 // dma_M2_M1_csr_agent:rf_source_data -> dma_M2_M1_csr_agent_rsp_fifo:in_data
	wire          dma_m2_m1_csr_agent_rf_source_ready;                                                // dma_M2_M1_csr_agent_rsp_fifo:in_ready -> dma_M2_M1_csr_agent:rf_source_ready
	wire          dma_m2_m1_csr_agent_rf_source_startofpacket;                                        // dma_M2_M1_csr_agent:rf_source_startofpacket -> dma_M2_M1_csr_agent_rsp_fifo:in_startofpacket
	wire          dma_m2_m1_csr_agent_rf_source_endofpacket;                                          // dma_M2_M1_csr_agent:rf_source_endofpacket -> dma_M2_M1_csr_agent_rsp_fifo:in_endofpacket
	wire          dma_m2_m1_csr_agent_rsp_fifo_out_valid;                                             // dma_M2_M1_csr_agent_rsp_fifo:out_valid -> dma_M2_M1_csr_agent:rf_sink_valid
	wire  [120:0] dma_m2_m1_csr_agent_rsp_fifo_out_data;                                              // dma_M2_M1_csr_agent_rsp_fifo:out_data -> dma_M2_M1_csr_agent:rf_sink_data
	wire          dma_m2_m1_csr_agent_rsp_fifo_out_ready;                                             // dma_M2_M1_csr_agent:rf_sink_ready -> dma_M2_M1_csr_agent_rsp_fifo:out_ready
	wire          dma_m2_m1_csr_agent_rsp_fifo_out_startofpacket;                                     // dma_M2_M1_csr_agent_rsp_fifo:out_startofpacket -> dma_M2_M1_csr_agent:rf_sink_startofpacket
	wire          dma_m2_m1_csr_agent_rsp_fifo_out_endofpacket;                                       // dma_M2_M1_csr_agent_rsp_fifo:out_endofpacket -> dma_M2_M1_csr_agent:rf_sink_endofpacket
	wire          cmd_mux_007_src_valid;                                                              // cmd_mux_007:src_valid -> dma_M2_M1_csr_agent:cp_valid
	wire  [119:0] cmd_mux_007_src_data;                                                               // cmd_mux_007:src_data -> dma_M2_M1_csr_agent:cp_data
	wire          cmd_mux_007_src_ready;                                                              // dma_M2_M1_csr_agent:cp_ready -> cmd_mux_007:src_ready
	wire   [15:0] cmd_mux_007_src_channel;                                                            // cmd_mux_007:src_channel -> dma_M2_M1_csr_agent:cp_channel
	wire          cmd_mux_007_src_startofpacket;                                                      // cmd_mux_007:src_startofpacket -> dma_M2_M1_csr_agent:cp_startofpacket
	wire          cmd_mux_007_src_endofpacket;                                                        // cmd_mux_007:src_endofpacket -> dma_M2_M1_csr_agent:cp_endofpacket
	wire   [31:0] nios2_gen2_0_debug_mem_slave_agent_m0_readdata;                                     // nios2_gen2_0_debug_mem_slave_translator:uav_readdata -> nios2_gen2_0_debug_mem_slave_agent:m0_readdata
	wire          nios2_gen2_0_debug_mem_slave_agent_m0_waitrequest;                                  // nios2_gen2_0_debug_mem_slave_translator:uav_waitrequest -> nios2_gen2_0_debug_mem_slave_agent:m0_waitrequest
	wire          nios2_gen2_0_debug_mem_slave_agent_m0_debugaccess;                                  // nios2_gen2_0_debug_mem_slave_agent:m0_debugaccess -> nios2_gen2_0_debug_mem_slave_translator:uav_debugaccess
	wire   [31:0] nios2_gen2_0_debug_mem_slave_agent_m0_address;                                      // nios2_gen2_0_debug_mem_slave_agent:m0_address -> nios2_gen2_0_debug_mem_slave_translator:uav_address
	wire    [3:0] nios2_gen2_0_debug_mem_slave_agent_m0_byteenable;                                   // nios2_gen2_0_debug_mem_slave_agent:m0_byteenable -> nios2_gen2_0_debug_mem_slave_translator:uav_byteenable
	wire          nios2_gen2_0_debug_mem_slave_agent_m0_read;                                         // nios2_gen2_0_debug_mem_slave_agent:m0_read -> nios2_gen2_0_debug_mem_slave_translator:uav_read
	wire          nios2_gen2_0_debug_mem_slave_agent_m0_readdatavalid;                                // nios2_gen2_0_debug_mem_slave_translator:uav_readdatavalid -> nios2_gen2_0_debug_mem_slave_agent:m0_readdatavalid
	wire          nios2_gen2_0_debug_mem_slave_agent_m0_lock;                                         // nios2_gen2_0_debug_mem_slave_agent:m0_lock -> nios2_gen2_0_debug_mem_slave_translator:uav_lock
	wire   [31:0] nios2_gen2_0_debug_mem_slave_agent_m0_writedata;                                    // nios2_gen2_0_debug_mem_slave_agent:m0_writedata -> nios2_gen2_0_debug_mem_slave_translator:uav_writedata
	wire          nios2_gen2_0_debug_mem_slave_agent_m0_write;                                        // nios2_gen2_0_debug_mem_slave_agent:m0_write -> nios2_gen2_0_debug_mem_slave_translator:uav_write
	wire    [2:0] nios2_gen2_0_debug_mem_slave_agent_m0_burstcount;                                   // nios2_gen2_0_debug_mem_slave_agent:m0_burstcount -> nios2_gen2_0_debug_mem_slave_translator:uav_burstcount
	wire          nios2_gen2_0_debug_mem_slave_agent_rf_source_valid;                                 // nios2_gen2_0_debug_mem_slave_agent:rf_source_valid -> nios2_gen2_0_debug_mem_slave_agent_rsp_fifo:in_valid
	wire  [120:0] nios2_gen2_0_debug_mem_slave_agent_rf_source_data;                                  // nios2_gen2_0_debug_mem_slave_agent:rf_source_data -> nios2_gen2_0_debug_mem_slave_agent_rsp_fifo:in_data
	wire          nios2_gen2_0_debug_mem_slave_agent_rf_source_ready;                                 // nios2_gen2_0_debug_mem_slave_agent_rsp_fifo:in_ready -> nios2_gen2_0_debug_mem_slave_agent:rf_source_ready
	wire          nios2_gen2_0_debug_mem_slave_agent_rf_source_startofpacket;                         // nios2_gen2_0_debug_mem_slave_agent:rf_source_startofpacket -> nios2_gen2_0_debug_mem_slave_agent_rsp_fifo:in_startofpacket
	wire          nios2_gen2_0_debug_mem_slave_agent_rf_source_endofpacket;                           // nios2_gen2_0_debug_mem_slave_agent:rf_source_endofpacket -> nios2_gen2_0_debug_mem_slave_agent_rsp_fifo:in_endofpacket
	wire          nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_valid;                              // nios2_gen2_0_debug_mem_slave_agent_rsp_fifo:out_valid -> nios2_gen2_0_debug_mem_slave_agent:rf_sink_valid
	wire  [120:0] nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_data;                               // nios2_gen2_0_debug_mem_slave_agent_rsp_fifo:out_data -> nios2_gen2_0_debug_mem_slave_agent:rf_sink_data
	wire          nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_ready;                              // nios2_gen2_0_debug_mem_slave_agent:rf_sink_ready -> nios2_gen2_0_debug_mem_slave_agent_rsp_fifo:out_ready
	wire          nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_startofpacket;                      // nios2_gen2_0_debug_mem_slave_agent_rsp_fifo:out_startofpacket -> nios2_gen2_0_debug_mem_slave_agent:rf_sink_startofpacket
	wire          nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_endofpacket;                        // nios2_gen2_0_debug_mem_slave_agent_rsp_fifo:out_endofpacket -> nios2_gen2_0_debug_mem_slave_agent:rf_sink_endofpacket
	wire  [127:0] dma_m1_m2_descriptor_slave_agent_m0_readdata;                                       // dma_M1_M2_descriptor_slave_translator:uav_readdata -> dma_M1_M2_descriptor_slave_agent:m0_readdata
	wire          dma_m1_m2_descriptor_slave_agent_m0_waitrequest;                                    // dma_M1_M2_descriptor_slave_translator:uav_waitrequest -> dma_M1_M2_descriptor_slave_agent:m0_waitrequest
	wire          dma_m1_m2_descriptor_slave_agent_m0_debugaccess;                                    // dma_M1_M2_descriptor_slave_agent:m0_debugaccess -> dma_M1_M2_descriptor_slave_translator:uav_debugaccess
	wire   [31:0] dma_m1_m2_descriptor_slave_agent_m0_address;                                        // dma_M1_M2_descriptor_slave_agent:m0_address -> dma_M1_M2_descriptor_slave_translator:uav_address
	wire   [15:0] dma_m1_m2_descriptor_slave_agent_m0_byteenable;                                     // dma_M1_M2_descriptor_slave_agent:m0_byteenable -> dma_M1_M2_descriptor_slave_translator:uav_byteenable
	wire          dma_m1_m2_descriptor_slave_agent_m0_read;                                           // dma_M1_M2_descriptor_slave_agent:m0_read -> dma_M1_M2_descriptor_slave_translator:uav_read
	wire          dma_m1_m2_descriptor_slave_agent_m0_readdatavalid;                                  // dma_M1_M2_descriptor_slave_translator:uav_readdatavalid -> dma_M1_M2_descriptor_slave_agent:m0_readdatavalid
	wire          dma_m1_m2_descriptor_slave_agent_m0_lock;                                           // dma_M1_M2_descriptor_slave_agent:m0_lock -> dma_M1_M2_descriptor_slave_translator:uav_lock
	wire  [127:0] dma_m1_m2_descriptor_slave_agent_m0_writedata;                                      // dma_M1_M2_descriptor_slave_agent:m0_writedata -> dma_M1_M2_descriptor_slave_translator:uav_writedata
	wire          dma_m1_m2_descriptor_slave_agent_m0_write;                                          // dma_M1_M2_descriptor_slave_agent:m0_write -> dma_M1_M2_descriptor_slave_translator:uav_write
	wire    [4:0] dma_m1_m2_descriptor_slave_agent_m0_burstcount;                                     // dma_M1_M2_descriptor_slave_agent:m0_burstcount -> dma_M1_M2_descriptor_slave_translator:uav_burstcount
	wire          dma_m1_m2_descriptor_slave_agent_rf_source_valid;                                   // dma_M1_M2_descriptor_slave_agent:rf_source_valid -> dma_M1_M2_descriptor_slave_agent_rsp_fifo:in_valid
	wire  [228:0] dma_m1_m2_descriptor_slave_agent_rf_source_data;                                    // dma_M1_M2_descriptor_slave_agent:rf_source_data -> dma_M1_M2_descriptor_slave_agent_rsp_fifo:in_data
	wire          dma_m1_m2_descriptor_slave_agent_rf_source_ready;                                   // dma_M1_M2_descriptor_slave_agent_rsp_fifo:in_ready -> dma_M1_M2_descriptor_slave_agent:rf_source_ready
	wire          dma_m1_m2_descriptor_slave_agent_rf_source_startofpacket;                           // dma_M1_M2_descriptor_slave_agent:rf_source_startofpacket -> dma_M1_M2_descriptor_slave_agent_rsp_fifo:in_startofpacket
	wire          dma_m1_m2_descriptor_slave_agent_rf_source_endofpacket;                             // dma_M1_M2_descriptor_slave_agent:rf_source_endofpacket -> dma_M1_M2_descriptor_slave_agent_rsp_fifo:in_endofpacket
	wire          dma_m1_m2_descriptor_slave_agent_rsp_fifo_out_valid;                                // dma_M1_M2_descriptor_slave_agent_rsp_fifo:out_valid -> dma_M1_M2_descriptor_slave_agent:rf_sink_valid
	wire  [228:0] dma_m1_m2_descriptor_slave_agent_rsp_fifo_out_data;                                 // dma_M1_M2_descriptor_slave_agent_rsp_fifo:out_data -> dma_M1_M2_descriptor_slave_agent:rf_sink_data
	wire          dma_m1_m2_descriptor_slave_agent_rsp_fifo_out_ready;                                // dma_M1_M2_descriptor_slave_agent:rf_sink_ready -> dma_M1_M2_descriptor_slave_agent_rsp_fifo:out_ready
	wire          dma_m1_m2_descriptor_slave_agent_rsp_fifo_out_startofpacket;                        // dma_M1_M2_descriptor_slave_agent_rsp_fifo:out_startofpacket -> dma_M1_M2_descriptor_slave_agent:rf_sink_startofpacket
	wire          dma_m1_m2_descriptor_slave_agent_rsp_fifo_out_endofpacket;                          // dma_M1_M2_descriptor_slave_agent_rsp_fifo:out_endofpacket -> dma_M1_M2_descriptor_slave_agent:rf_sink_endofpacket
	wire          dma_m1_m2_descriptor_slave_agent_rdata_fifo_src_valid;                              // dma_M1_M2_descriptor_slave_agent:rdata_fifo_src_valid -> dma_M1_M2_descriptor_slave_agent_rdata_fifo:in_valid
	wire  [129:0] dma_m1_m2_descriptor_slave_agent_rdata_fifo_src_data;                               // dma_M1_M2_descriptor_slave_agent:rdata_fifo_src_data -> dma_M1_M2_descriptor_slave_agent_rdata_fifo:in_data
	wire          dma_m1_m2_descriptor_slave_agent_rdata_fifo_src_ready;                              // dma_M1_M2_descriptor_slave_agent_rdata_fifo:in_ready -> dma_M1_M2_descriptor_slave_agent:rdata_fifo_src_ready
	wire  [127:0] dma_m2_m1_descriptor_slave_agent_m0_readdata;                                       // dma_M2_M1_descriptor_slave_translator:uav_readdata -> dma_M2_M1_descriptor_slave_agent:m0_readdata
	wire          dma_m2_m1_descriptor_slave_agent_m0_waitrequest;                                    // dma_M2_M1_descriptor_slave_translator:uav_waitrequest -> dma_M2_M1_descriptor_slave_agent:m0_waitrequest
	wire          dma_m2_m1_descriptor_slave_agent_m0_debugaccess;                                    // dma_M2_M1_descriptor_slave_agent:m0_debugaccess -> dma_M2_M1_descriptor_slave_translator:uav_debugaccess
	wire   [31:0] dma_m2_m1_descriptor_slave_agent_m0_address;                                        // dma_M2_M1_descriptor_slave_agent:m0_address -> dma_M2_M1_descriptor_slave_translator:uav_address
	wire   [15:0] dma_m2_m1_descriptor_slave_agent_m0_byteenable;                                     // dma_M2_M1_descriptor_slave_agent:m0_byteenable -> dma_M2_M1_descriptor_slave_translator:uav_byteenable
	wire          dma_m2_m1_descriptor_slave_agent_m0_read;                                           // dma_M2_M1_descriptor_slave_agent:m0_read -> dma_M2_M1_descriptor_slave_translator:uav_read
	wire          dma_m2_m1_descriptor_slave_agent_m0_readdatavalid;                                  // dma_M2_M1_descriptor_slave_translator:uav_readdatavalid -> dma_M2_M1_descriptor_slave_agent:m0_readdatavalid
	wire          dma_m2_m1_descriptor_slave_agent_m0_lock;                                           // dma_M2_M1_descriptor_slave_agent:m0_lock -> dma_M2_M1_descriptor_slave_translator:uav_lock
	wire  [127:0] dma_m2_m1_descriptor_slave_agent_m0_writedata;                                      // dma_M2_M1_descriptor_slave_agent:m0_writedata -> dma_M2_M1_descriptor_slave_translator:uav_writedata
	wire          dma_m2_m1_descriptor_slave_agent_m0_write;                                          // dma_M2_M1_descriptor_slave_agent:m0_write -> dma_M2_M1_descriptor_slave_translator:uav_write
	wire    [4:0] dma_m2_m1_descriptor_slave_agent_m0_burstcount;                                     // dma_M2_M1_descriptor_slave_agent:m0_burstcount -> dma_M2_M1_descriptor_slave_translator:uav_burstcount
	wire          dma_m2_m1_descriptor_slave_agent_rf_source_valid;                                   // dma_M2_M1_descriptor_slave_agent:rf_source_valid -> dma_M2_M1_descriptor_slave_agent_rsp_fifo:in_valid
	wire  [228:0] dma_m2_m1_descriptor_slave_agent_rf_source_data;                                    // dma_M2_M1_descriptor_slave_agent:rf_source_data -> dma_M2_M1_descriptor_slave_agent_rsp_fifo:in_data
	wire          dma_m2_m1_descriptor_slave_agent_rf_source_ready;                                   // dma_M2_M1_descriptor_slave_agent_rsp_fifo:in_ready -> dma_M2_M1_descriptor_slave_agent:rf_source_ready
	wire          dma_m2_m1_descriptor_slave_agent_rf_source_startofpacket;                           // dma_M2_M1_descriptor_slave_agent:rf_source_startofpacket -> dma_M2_M1_descriptor_slave_agent_rsp_fifo:in_startofpacket
	wire          dma_m2_m1_descriptor_slave_agent_rf_source_endofpacket;                             // dma_M2_M1_descriptor_slave_agent:rf_source_endofpacket -> dma_M2_M1_descriptor_slave_agent_rsp_fifo:in_endofpacket
	wire          dma_m2_m1_descriptor_slave_agent_rsp_fifo_out_valid;                                // dma_M2_M1_descriptor_slave_agent_rsp_fifo:out_valid -> dma_M2_M1_descriptor_slave_agent:rf_sink_valid
	wire  [228:0] dma_m2_m1_descriptor_slave_agent_rsp_fifo_out_data;                                 // dma_M2_M1_descriptor_slave_agent_rsp_fifo:out_data -> dma_M2_M1_descriptor_slave_agent:rf_sink_data
	wire          dma_m2_m1_descriptor_slave_agent_rsp_fifo_out_ready;                                // dma_M2_M1_descriptor_slave_agent:rf_sink_ready -> dma_M2_M1_descriptor_slave_agent_rsp_fifo:out_ready
	wire          dma_m2_m1_descriptor_slave_agent_rsp_fifo_out_startofpacket;                        // dma_M2_M1_descriptor_slave_agent_rsp_fifo:out_startofpacket -> dma_M2_M1_descriptor_slave_agent:rf_sink_startofpacket
	wire          dma_m2_m1_descriptor_slave_agent_rsp_fifo_out_endofpacket;                          // dma_M2_M1_descriptor_slave_agent_rsp_fifo:out_endofpacket -> dma_M2_M1_descriptor_slave_agent:rf_sink_endofpacket
	wire          dma_m2_m1_descriptor_slave_agent_rdata_fifo_src_valid;                              // dma_M2_M1_descriptor_slave_agent:rdata_fifo_src_valid -> dma_M2_M1_descriptor_slave_agent_rdata_fifo:in_valid
	wire  [129:0] dma_m2_m1_descriptor_slave_agent_rdata_fifo_src_data;                               // dma_M2_M1_descriptor_slave_agent:rdata_fifo_src_data -> dma_M2_M1_descriptor_slave_agent_rdata_fifo:in_data
	wire          dma_m2_m1_descriptor_slave_agent_rdata_fifo_src_ready;                              // dma_M2_M1_descriptor_slave_agent_rdata_fifo:in_ready -> dma_M2_M1_descriptor_slave_agent:rdata_fifo_src_ready
	wire   [31:0] clock_bridge_afi_50_s0_agent_m0_readdata;                                           // clock_bridge_afi_50_s0_translator:uav_readdata -> clock_bridge_afi_50_s0_agent:m0_readdata
	wire          clock_bridge_afi_50_s0_agent_m0_waitrequest;                                        // clock_bridge_afi_50_s0_translator:uav_waitrequest -> clock_bridge_afi_50_s0_agent:m0_waitrequest
	wire          clock_bridge_afi_50_s0_agent_m0_debugaccess;                                        // clock_bridge_afi_50_s0_agent:m0_debugaccess -> clock_bridge_afi_50_s0_translator:uav_debugaccess
	wire   [31:0] clock_bridge_afi_50_s0_agent_m0_address;                                            // clock_bridge_afi_50_s0_agent:m0_address -> clock_bridge_afi_50_s0_translator:uav_address
	wire    [3:0] clock_bridge_afi_50_s0_agent_m0_byteenable;                                         // clock_bridge_afi_50_s0_agent:m0_byteenable -> clock_bridge_afi_50_s0_translator:uav_byteenable
	wire          clock_bridge_afi_50_s0_agent_m0_read;                                               // clock_bridge_afi_50_s0_agent:m0_read -> clock_bridge_afi_50_s0_translator:uav_read
	wire          clock_bridge_afi_50_s0_agent_m0_readdatavalid;                                      // clock_bridge_afi_50_s0_translator:uav_readdatavalid -> clock_bridge_afi_50_s0_agent:m0_readdatavalid
	wire          clock_bridge_afi_50_s0_agent_m0_lock;                                               // clock_bridge_afi_50_s0_agent:m0_lock -> clock_bridge_afi_50_s0_translator:uav_lock
	wire   [31:0] clock_bridge_afi_50_s0_agent_m0_writedata;                                          // clock_bridge_afi_50_s0_agent:m0_writedata -> clock_bridge_afi_50_s0_translator:uav_writedata
	wire          clock_bridge_afi_50_s0_agent_m0_write;                                              // clock_bridge_afi_50_s0_agent:m0_write -> clock_bridge_afi_50_s0_translator:uav_write
	wire    [2:0] clock_bridge_afi_50_s0_agent_m0_burstcount;                                         // clock_bridge_afi_50_s0_agent:m0_burstcount -> clock_bridge_afi_50_s0_translator:uav_burstcount
	wire          clock_bridge_afi_50_s0_agent_rf_source_valid;                                       // clock_bridge_afi_50_s0_agent:rf_source_valid -> clock_bridge_afi_50_s0_agent_rsp_fifo:in_valid
	wire  [120:0] clock_bridge_afi_50_s0_agent_rf_source_data;                                        // clock_bridge_afi_50_s0_agent:rf_source_data -> clock_bridge_afi_50_s0_agent_rsp_fifo:in_data
	wire          clock_bridge_afi_50_s0_agent_rf_source_ready;                                       // clock_bridge_afi_50_s0_agent_rsp_fifo:in_ready -> clock_bridge_afi_50_s0_agent:rf_source_ready
	wire          clock_bridge_afi_50_s0_agent_rf_source_startofpacket;                               // clock_bridge_afi_50_s0_agent:rf_source_startofpacket -> clock_bridge_afi_50_s0_agent_rsp_fifo:in_startofpacket
	wire          clock_bridge_afi_50_s0_agent_rf_source_endofpacket;                                 // clock_bridge_afi_50_s0_agent:rf_source_endofpacket -> clock_bridge_afi_50_s0_agent_rsp_fifo:in_endofpacket
	wire          clock_bridge_afi_50_s0_agent_rsp_fifo_out_valid;                                    // clock_bridge_afi_50_s0_agent_rsp_fifo:out_valid -> clock_bridge_afi_50_s0_agent:rf_sink_valid
	wire  [120:0] clock_bridge_afi_50_s0_agent_rsp_fifo_out_data;                                     // clock_bridge_afi_50_s0_agent_rsp_fifo:out_data -> clock_bridge_afi_50_s0_agent:rf_sink_data
	wire          clock_bridge_afi_50_s0_agent_rsp_fifo_out_ready;                                    // clock_bridge_afi_50_s0_agent:rf_sink_ready -> clock_bridge_afi_50_s0_agent_rsp_fifo:out_ready
	wire          clock_bridge_afi_50_s0_agent_rsp_fifo_out_startofpacket;                            // clock_bridge_afi_50_s0_agent_rsp_fifo:out_startofpacket -> clock_bridge_afi_50_s0_agent:rf_sink_startofpacket
	wire          clock_bridge_afi_50_s0_agent_rsp_fifo_out_endofpacket;                              // clock_bridge_afi_50_s0_agent_rsp_fifo:out_endofpacket -> clock_bridge_afi_50_s0_agent:rf_sink_endofpacket
	wire          cmd_mux_011_src_valid;                                                              // cmd_mux_011:src_valid -> clock_bridge_afi_50_s0_agent:cp_valid
	wire  [119:0] cmd_mux_011_src_data;                                                               // cmd_mux_011:src_data -> clock_bridge_afi_50_s0_agent:cp_data
	wire          cmd_mux_011_src_ready;                                                              // clock_bridge_afi_50_s0_agent:cp_ready -> cmd_mux_011:src_ready
	wire   [15:0] cmd_mux_011_src_channel;                                                            // cmd_mux_011:src_channel -> clock_bridge_afi_50_s0_agent:cp_channel
	wire          cmd_mux_011_src_startofpacket;                                                      // cmd_mux_011:src_startofpacket -> clock_bridge_afi_50_s0_agent:cp_startofpacket
	wire          cmd_mux_011_src_endofpacket;                                                        // cmd_mux_011:src_endofpacket -> clock_bridge_afi_50_s0_agent:cp_endofpacket
	wire   [31:0] m1_clock_bridge_s0_agent_m0_readdata;                                               // m1_clock_bridge_s0_translator:uav_readdata -> m1_clock_bridge_s0_agent:m0_readdata
	wire          m1_clock_bridge_s0_agent_m0_waitrequest;                                            // m1_clock_bridge_s0_translator:uav_waitrequest -> m1_clock_bridge_s0_agent:m0_waitrequest
	wire          m1_clock_bridge_s0_agent_m0_debugaccess;                                            // m1_clock_bridge_s0_agent:m0_debugaccess -> m1_clock_bridge_s0_translator:uav_debugaccess
	wire   [31:0] m1_clock_bridge_s0_agent_m0_address;                                                // m1_clock_bridge_s0_agent:m0_address -> m1_clock_bridge_s0_translator:uav_address
	wire    [3:0] m1_clock_bridge_s0_agent_m0_byteenable;                                             // m1_clock_bridge_s0_agent:m0_byteenable -> m1_clock_bridge_s0_translator:uav_byteenable
	wire          m1_clock_bridge_s0_agent_m0_read;                                                   // m1_clock_bridge_s0_agent:m0_read -> m1_clock_bridge_s0_translator:uav_read
	wire          m1_clock_bridge_s0_agent_m0_readdatavalid;                                          // m1_clock_bridge_s0_translator:uav_readdatavalid -> m1_clock_bridge_s0_agent:m0_readdatavalid
	wire          m1_clock_bridge_s0_agent_m0_lock;                                                   // m1_clock_bridge_s0_agent:m0_lock -> m1_clock_bridge_s0_translator:uav_lock
	wire   [31:0] m1_clock_bridge_s0_agent_m0_writedata;                                              // m1_clock_bridge_s0_agent:m0_writedata -> m1_clock_bridge_s0_translator:uav_writedata
	wire          m1_clock_bridge_s0_agent_m0_write;                                                  // m1_clock_bridge_s0_agent:m0_write -> m1_clock_bridge_s0_translator:uav_write
	wire    [9:0] m1_clock_bridge_s0_agent_m0_burstcount;                                             // m1_clock_bridge_s0_agent:m0_burstcount -> m1_clock_bridge_s0_translator:uav_burstcount
	wire          m1_clock_bridge_s0_agent_rf_source_valid;                                           // m1_clock_bridge_s0_agent:rf_source_valid -> m1_clock_bridge_s0_agent_rsp_fifo:in_valid
	wire  [120:0] m1_clock_bridge_s0_agent_rf_source_data;                                            // m1_clock_bridge_s0_agent:rf_source_data -> m1_clock_bridge_s0_agent_rsp_fifo:in_data
	wire          m1_clock_bridge_s0_agent_rf_source_ready;                                           // m1_clock_bridge_s0_agent_rsp_fifo:in_ready -> m1_clock_bridge_s0_agent:rf_source_ready
	wire          m1_clock_bridge_s0_agent_rf_source_startofpacket;                                   // m1_clock_bridge_s0_agent:rf_source_startofpacket -> m1_clock_bridge_s0_agent_rsp_fifo:in_startofpacket
	wire          m1_clock_bridge_s0_agent_rf_source_endofpacket;                                     // m1_clock_bridge_s0_agent:rf_source_endofpacket -> m1_clock_bridge_s0_agent_rsp_fifo:in_endofpacket
	wire          m1_clock_bridge_s0_agent_rsp_fifo_out_valid;                                        // m1_clock_bridge_s0_agent_rsp_fifo:out_valid -> m1_clock_bridge_s0_agent:rf_sink_valid
	wire  [120:0] m1_clock_bridge_s0_agent_rsp_fifo_out_data;                                         // m1_clock_bridge_s0_agent_rsp_fifo:out_data -> m1_clock_bridge_s0_agent:rf_sink_data
	wire          m1_clock_bridge_s0_agent_rsp_fifo_out_ready;                                        // m1_clock_bridge_s0_agent:rf_sink_ready -> m1_clock_bridge_s0_agent_rsp_fifo:out_ready
	wire          m1_clock_bridge_s0_agent_rsp_fifo_out_startofpacket;                                // m1_clock_bridge_s0_agent_rsp_fifo:out_startofpacket -> m1_clock_bridge_s0_agent:rf_sink_startofpacket
	wire          m1_clock_bridge_s0_agent_rsp_fifo_out_endofpacket;                                  // m1_clock_bridge_s0_agent_rsp_fifo:out_endofpacket -> m1_clock_bridge_s0_agent:rf_sink_endofpacket
	wire          m1_clock_bridge_s0_agent_rdata_fifo_src_valid;                                      // m1_clock_bridge_s0_agent:rdata_fifo_src_valid -> m1_clock_bridge_s0_agent_rdata_fifo:in_valid
	wire   [33:0] m1_clock_bridge_s0_agent_rdata_fifo_src_data;                                       // m1_clock_bridge_s0_agent:rdata_fifo_src_data -> m1_clock_bridge_s0_agent_rdata_fifo:in_data
	wire          m1_clock_bridge_s0_agent_rdata_fifo_src_ready;                                      // m1_clock_bridge_s0_agent_rdata_fifo:in_ready -> m1_clock_bridge_s0_agent:rdata_fifo_src_ready
	wire          cmd_mux_012_src_valid;                                                              // cmd_mux_012:src_valid -> m1_clock_bridge_s0_agent:cp_valid
	wire  [119:0] cmd_mux_012_src_data;                                                               // cmd_mux_012:src_data -> m1_clock_bridge_s0_agent:cp_data
	wire          cmd_mux_012_src_ready;                                                              // m1_clock_bridge_s0_agent:cp_ready -> cmd_mux_012:src_ready
	wire   [15:0] cmd_mux_012_src_channel;                                                            // cmd_mux_012:src_channel -> m1_clock_bridge_s0_agent:cp_channel
	wire          cmd_mux_012_src_startofpacket;                                                      // cmd_mux_012:src_startofpacket -> m1_clock_bridge_s0_agent:cp_startofpacket
	wire          cmd_mux_012_src_endofpacket;                                                        // cmd_mux_012:src_endofpacket -> m1_clock_bridge_s0_agent:cp_endofpacket
	wire   [31:0] onchip_memory_s1_agent_m0_readdata;                                                 // onchip_memory_s1_translator:uav_readdata -> onchip_memory_s1_agent:m0_readdata
	wire          onchip_memory_s1_agent_m0_waitrequest;                                              // onchip_memory_s1_translator:uav_waitrequest -> onchip_memory_s1_agent:m0_waitrequest
	wire          onchip_memory_s1_agent_m0_debugaccess;                                              // onchip_memory_s1_agent:m0_debugaccess -> onchip_memory_s1_translator:uav_debugaccess
	wire   [31:0] onchip_memory_s1_agent_m0_address;                                                  // onchip_memory_s1_agent:m0_address -> onchip_memory_s1_translator:uav_address
	wire    [3:0] onchip_memory_s1_agent_m0_byteenable;                                               // onchip_memory_s1_agent:m0_byteenable -> onchip_memory_s1_translator:uav_byteenable
	wire          onchip_memory_s1_agent_m0_read;                                                     // onchip_memory_s1_agent:m0_read -> onchip_memory_s1_translator:uav_read
	wire          onchip_memory_s1_agent_m0_readdatavalid;                                            // onchip_memory_s1_translator:uav_readdatavalid -> onchip_memory_s1_agent:m0_readdatavalid
	wire          onchip_memory_s1_agent_m0_lock;                                                     // onchip_memory_s1_agent:m0_lock -> onchip_memory_s1_translator:uav_lock
	wire   [31:0] onchip_memory_s1_agent_m0_writedata;                                                // onchip_memory_s1_agent:m0_writedata -> onchip_memory_s1_translator:uav_writedata
	wire          onchip_memory_s1_agent_m0_write;                                                    // onchip_memory_s1_agent:m0_write -> onchip_memory_s1_translator:uav_write
	wire    [2:0] onchip_memory_s1_agent_m0_burstcount;                                               // onchip_memory_s1_agent:m0_burstcount -> onchip_memory_s1_translator:uav_burstcount
	wire          onchip_memory_s1_agent_rf_source_valid;                                             // onchip_memory_s1_agent:rf_source_valid -> onchip_memory_s1_agent_rsp_fifo:in_valid
	wire  [120:0] onchip_memory_s1_agent_rf_source_data;                                              // onchip_memory_s1_agent:rf_source_data -> onchip_memory_s1_agent_rsp_fifo:in_data
	wire          onchip_memory_s1_agent_rf_source_ready;                                             // onchip_memory_s1_agent_rsp_fifo:in_ready -> onchip_memory_s1_agent:rf_source_ready
	wire          onchip_memory_s1_agent_rf_source_startofpacket;                                     // onchip_memory_s1_agent:rf_source_startofpacket -> onchip_memory_s1_agent_rsp_fifo:in_startofpacket
	wire          onchip_memory_s1_agent_rf_source_endofpacket;                                       // onchip_memory_s1_agent:rf_source_endofpacket -> onchip_memory_s1_agent_rsp_fifo:in_endofpacket
	wire          onchip_memory_s1_agent_rsp_fifo_out_valid;                                          // onchip_memory_s1_agent_rsp_fifo:out_valid -> onchip_memory_s1_agent:rf_sink_valid
	wire  [120:0] onchip_memory_s1_agent_rsp_fifo_out_data;                                           // onchip_memory_s1_agent_rsp_fifo:out_data -> onchip_memory_s1_agent:rf_sink_data
	wire          onchip_memory_s1_agent_rsp_fifo_out_ready;                                          // onchip_memory_s1_agent:rf_sink_ready -> onchip_memory_s1_agent_rsp_fifo:out_ready
	wire          onchip_memory_s1_agent_rsp_fifo_out_startofpacket;                                  // onchip_memory_s1_agent_rsp_fifo:out_startofpacket -> onchip_memory_s1_agent:rf_sink_startofpacket
	wire          onchip_memory_s1_agent_rsp_fifo_out_endofpacket;                                    // onchip_memory_s1_agent_rsp_fifo:out_endofpacket -> onchip_memory_s1_agent:rf_sink_endofpacket
	wire   [31:0] descriptor_memory_s1_agent_m0_readdata;                                             // descriptor_memory_s1_translator:uav_readdata -> descriptor_memory_s1_agent:m0_readdata
	wire          descriptor_memory_s1_agent_m0_waitrequest;                                          // descriptor_memory_s1_translator:uav_waitrequest -> descriptor_memory_s1_agent:m0_waitrequest
	wire          descriptor_memory_s1_agent_m0_debugaccess;                                          // descriptor_memory_s1_agent:m0_debugaccess -> descriptor_memory_s1_translator:uav_debugaccess
	wire   [31:0] descriptor_memory_s1_agent_m0_address;                                              // descriptor_memory_s1_agent:m0_address -> descriptor_memory_s1_translator:uav_address
	wire    [3:0] descriptor_memory_s1_agent_m0_byteenable;                                           // descriptor_memory_s1_agent:m0_byteenable -> descriptor_memory_s1_translator:uav_byteenable
	wire          descriptor_memory_s1_agent_m0_read;                                                 // descriptor_memory_s1_agent:m0_read -> descriptor_memory_s1_translator:uav_read
	wire          descriptor_memory_s1_agent_m0_readdatavalid;                                        // descriptor_memory_s1_translator:uav_readdatavalid -> descriptor_memory_s1_agent:m0_readdatavalid
	wire          descriptor_memory_s1_agent_m0_lock;                                                 // descriptor_memory_s1_agent:m0_lock -> descriptor_memory_s1_translator:uav_lock
	wire   [31:0] descriptor_memory_s1_agent_m0_writedata;                                            // descriptor_memory_s1_agent:m0_writedata -> descriptor_memory_s1_translator:uav_writedata
	wire          descriptor_memory_s1_agent_m0_write;                                                // descriptor_memory_s1_agent:m0_write -> descriptor_memory_s1_translator:uav_write
	wire    [2:0] descriptor_memory_s1_agent_m0_burstcount;                                           // descriptor_memory_s1_agent:m0_burstcount -> descriptor_memory_s1_translator:uav_burstcount
	wire          descriptor_memory_s1_agent_rf_source_valid;                                         // descriptor_memory_s1_agent:rf_source_valid -> descriptor_memory_s1_agent_rsp_fifo:in_valid
	wire  [120:0] descriptor_memory_s1_agent_rf_source_data;                                          // descriptor_memory_s1_agent:rf_source_data -> descriptor_memory_s1_agent_rsp_fifo:in_data
	wire          descriptor_memory_s1_agent_rf_source_ready;                                         // descriptor_memory_s1_agent_rsp_fifo:in_ready -> descriptor_memory_s1_agent:rf_source_ready
	wire          descriptor_memory_s1_agent_rf_source_startofpacket;                                 // descriptor_memory_s1_agent:rf_source_startofpacket -> descriptor_memory_s1_agent_rsp_fifo:in_startofpacket
	wire          descriptor_memory_s1_agent_rf_source_endofpacket;                                   // descriptor_memory_s1_agent:rf_source_endofpacket -> descriptor_memory_s1_agent_rsp_fifo:in_endofpacket
	wire          descriptor_memory_s1_agent_rsp_fifo_out_valid;                                      // descriptor_memory_s1_agent_rsp_fifo:out_valid -> descriptor_memory_s1_agent:rf_sink_valid
	wire  [120:0] descriptor_memory_s1_agent_rsp_fifo_out_data;                                       // descriptor_memory_s1_agent_rsp_fifo:out_data -> descriptor_memory_s1_agent:rf_sink_data
	wire          descriptor_memory_s1_agent_rsp_fifo_out_ready;                                      // descriptor_memory_s1_agent:rf_sink_ready -> descriptor_memory_s1_agent_rsp_fifo:out_ready
	wire          descriptor_memory_s1_agent_rsp_fifo_out_startofpacket;                              // descriptor_memory_s1_agent_rsp_fifo:out_startofpacket -> descriptor_memory_s1_agent:rf_sink_startofpacket
	wire          descriptor_memory_s1_agent_rsp_fifo_out_endofpacket;                                // descriptor_memory_s1_agent_rsp_fifo:out_endofpacket -> descriptor_memory_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_014_src_valid;                                                              // cmd_mux_014:src_valid -> descriptor_memory_s1_agent:cp_valid
	wire  [119:0] cmd_mux_014_src_data;                                                               // cmd_mux_014:src_data -> descriptor_memory_s1_agent:cp_data
	wire          cmd_mux_014_src_ready;                                                              // descriptor_memory_s1_agent:cp_ready -> cmd_mux_014:src_ready
	wire   [15:0] cmd_mux_014_src_channel;                                                            // cmd_mux_014:src_channel -> descriptor_memory_s1_agent:cp_channel
	wire          cmd_mux_014_src_startofpacket;                                                      // cmd_mux_014:src_startofpacket -> descriptor_memory_s1_agent:cp_startofpacket
	wire          cmd_mux_014_src_endofpacket;                                                        // cmd_mux_014:src_endofpacket -> descriptor_memory_s1_agent:cp_endofpacket
	wire   [15:0] ext_flash_uas_agent_m0_readdata;                                                    // ext_flash_uas_translator:uav_readdata -> ext_flash_uas_agent:m0_readdata
	wire          ext_flash_uas_agent_m0_waitrequest;                                                 // ext_flash_uas_translator:uav_waitrequest -> ext_flash_uas_agent:m0_waitrequest
	wire          ext_flash_uas_agent_m0_debugaccess;                                                 // ext_flash_uas_agent:m0_debugaccess -> ext_flash_uas_translator:uav_debugaccess
	wire   [31:0] ext_flash_uas_agent_m0_address;                                                     // ext_flash_uas_agent:m0_address -> ext_flash_uas_translator:uav_address
	wire    [1:0] ext_flash_uas_agent_m0_byteenable;                                                  // ext_flash_uas_agent:m0_byteenable -> ext_flash_uas_translator:uav_byteenable
	wire          ext_flash_uas_agent_m0_read;                                                        // ext_flash_uas_agent:m0_read -> ext_flash_uas_translator:uav_read
	wire          ext_flash_uas_agent_m0_readdatavalid;                                               // ext_flash_uas_translator:uav_readdatavalid -> ext_flash_uas_agent:m0_readdatavalid
	wire          ext_flash_uas_agent_m0_lock;                                                        // ext_flash_uas_agent:m0_lock -> ext_flash_uas_translator:uav_lock
	wire   [15:0] ext_flash_uas_agent_m0_writedata;                                                   // ext_flash_uas_agent:m0_writedata -> ext_flash_uas_translator:uav_writedata
	wire          ext_flash_uas_agent_m0_write;                                                       // ext_flash_uas_agent:m0_write -> ext_flash_uas_translator:uav_write
	wire    [1:0] ext_flash_uas_agent_m0_burstcount;                                                  // ext_flash_uas_agent:m0_burstcount -> ext_flash_uas_translator:uav_burstcount
	wire          ext_flash_uas_agent_rf_source_valid;                                                // ext_flash_uas_agent:rf_source_valid -> ext_flash_uas_agent_rsp_fifo:in_valid
	wire  [102:0] ext_flash_uas_agent_rf_source_data;                                                 // ext_flash_uas_agent:rf_source_data -> ext_flash_uas_agent_rsp_fifo:in_data
	wire          ext_flash_uas_agent_rf_source_ready;                                                // ext_flash_uas_agent_rsp_fifo:in_ready -> ext_flash_uas_agent:rf_source_ready
	wire          ext_flash_uas_agent_rf_source_startofpacket;                                        // ext_flash_uas_agent:rf_source_startofpacket -> ext_flash_uas_agent_rsp_fifo:in_startofpacket
	wire          ext_flash_uas_agent_rf_source_endofpacket;                                          // ext_flash_uas_agent:rf_source_endofpacket -> ext_flash_uas_agent_rsp_fifo:in_endofpacket
	wire          ext_flash_uas_agent_rsp_fifo_out_valid;                                             // ext_flash_uas_agent_rsp_fifo:out_valid -> ext_flash_uas_agent:rf_sink_valid
	wire  [102:0] ext_flash_uas_agent_rsp_fifo_out_data;                                              // ext_flash_uas_agent_rsp_fifo:out_data -> ext_flash_uas_agent:rf_sink_data
	wire          ext_flash_uas_agent_rsp_fifo_out_ready;                                             // ext_flash_uas_agent:rf_sink_ready -> ext_flash_uas_agent_rsp_fifo:out_ready
	wire          ext_flash_uas_agent_rsp_fifo_out_startofpacket;                                     // ext_flash_uas_agent_rsp_fifo:out_startofpacket -> ext_flash_uas_agent:rf_sink_startofpacket
	wire          ext_flash_uas_agent_rsp_fifo_out_endofpacket;                                       // ext_flash_uas_agent_rsp_fifo:out_endofpacket -> ext_flash_uas_agent:rf_sink_endofpacket
	wire          ext_flash_uas_agent_rdata_fifo_src_valid;                                           // ext_flash_uas_agent:rdata_fifo_src_valid -> ext_flash_uas_agent_rdata_fifo:in_valid
	wire   [17:0] ext_flash_uas_agent_rdata_fifo_src_data;                                            // ext_flash_uas_agent:rdata_fifo_src_data -> ext_flash_uas_agent_rdata_fifo:in_data
	wire          ext_flash_uas_agent_rdata_fifo_src_ready;                                           // ext_flash_uas_agent_rdata_fifo:in_ready -> ext_flash_uas_agent:rdata_fifo_src_ready
	wire          nios2_gen2_0_data_master_agent_cp_valid;                                            // nios2_gen2_0_data_master_agent:cp_valid -> router:sink_valid
	wire  [119:0] nios2_gen2_0_data_master_agent_cp_data;                                             // nios2_gen2_0_data_master_agent:cp_data -> router:sink_data
	wire          nios2_gen2_0_data_master_agent_cp_ready;                                            // router:sink_ready -> nios2_gen2_0_data_master_agent:cp_ready
	wire          nios2_gen2_0_data_master_agent_cp_startofpacket;                                    // nios2_gen2_0_data_master_agent:cp_startofpacket -> router:sink_startofpacket
	wire          nios2_gen2_0_data_master_agent_cp_endofpacket;                                      // nios2_gen2_0_data_master_agent:cp_endofpacket -> router:sink_endofpacket
	wire          router_src_valid;                                                                   // router:src_valid -> cmd_demux:sink_valid
	wire  [119:0] router_src_data;                                                                    // router:src_data -> cmd_demux:sink_data
	wire          router_src_ready;                                                                   // cmd_demux:sink_ready -> router:src_ready
	wire   [15:0] router_src_channel;                                                                 // router:src_channel -> cmd_demux:sink_channel
	wire          router_src_startofpacket;                                                           // router:src_startofpacket -> cmd_demux:sink_startofpacket
	wire          router_src_endofpacket;                                                             // router:src_endofpacket -> cmd_demux:sink_endofpacket
	wire          nios2_gen2_0_instruction_master_agent_cp_valid;                                     // nios2_gen2_0_instruction_master_agent:cp_valid -> router_001:sink_valid
	wire  [119:0] nios2_gen2_0_instruction_master_agent_cp_data;                                      // nios2_gen2_0_instruction_master_agent:cp_data -> router_001:sink_data
	wire          nios2_gen2_0_instruction_master_agent_cp_ready;                                     // router_001:sink_ready -> nios2_gen2_0_instruction_master_agent:cp_ready
	wire          nios2_gen2_0_instruction_master_agent_cp_startofpacket;                             // nios2_gen2_0_instruction_master_agent:cp_startofpacket -> router_001:sink_startofpacket
	wire          nios2_gen2_0_instruction_master_agent_cp_endofpacket;                               // nios2_gen2_0_instruction_master_agent:cp_endofpacket -> router_001:sink_endofpacket
	wire          sgdma_tx_m_read_agent_cp_valid;                                                     // sgdma_tx_m_read_agent:cp_valid -> router_002:sink_valid
	wire  [119:0] sgdma_tx_m_read_agent_cp_data;                                                      // sgdma_tx_m_read_agent:cp_data -> router_002:sink_data
	wire          sgdma_tx_m_read_agent_cp_ready;                                                     // router_002:sink_ready -> sgdma_tx_m_read_agent:cp_ready
	wire          sgdma_tx_m_read_agent_cp_startofpacket;                                             // sgdma_tx_m_read_agent:cp_startofpacket -> router_002:sink_startofpacket
	wire          sgdma_tx_m_read_agent_cp_endofpacket;                                               // sgdma_tx_m_read_agent:cp_endofpacket -> router_002:sink_endofpacket
	wire          router_002_src_valid;                                                               // router_002:src_valid -> cmd_demux_002:sink_valid
	wire  [119:0] router_002_src_data;                                                                // router_002:src_data -> cmd_demux_002:sink_data
	wire          router_002_src_ready;                                                               // cmd_demux_002:sink_ready -> router_002:src_ready
	wire   [15:0] router_002_src_channel;                                                             // router_002:src_channel -> cmd_demux_002:sink_channel
	wire          router_002_src_startofpacket;                                                       // router_002:src_startofpacket -> cmd_demux_002:sink_startofpacket
	wire          router_002_src_endofpacket;                                                         // router_002:src_endofpacket -> cmd_demux_002:sink_endofpacket
	wire          sgdma_rx_m_write_agent_cp_valid;                                                    // sgdma_rx_m_write_agent:cp_valid -> router_003:sink_valid
	wire  [119:0] sgdma_rx_m_write_agent_cp_data;                                                     // sgdma_rx_m_write_agent:cp_data -> router_003:sink_data
	wire          sgdma_rx_m_write_agent_cp_ready;                                                    // router_003:sink_ready -> sgdma_rx_m_write_agent:cp_ready
	wire          sgdma_rx_m_write_agent_cp_startofpacket;                                            // sgdma_rx_m_write_agent:cp_startofpacket -> router_003:sink_startofpacket
	wire          sgdma_rx_m_write_agent_cp_endofpacket;                                              // sgdma_rx_m_write_agent:cp_endofpacket -> router_003:sink_endofpacket
	wire          router_003_src_valid;                                                               // router_003:src_valid -> cmd_demux_003:sink_valid
	wire  [119:0] router_003_src_data;                                                                // router_003:src_data -> cmd_demux_003:sink_data
	wire          router_003_src_ready;                                                               // cmd_demux_003:sink_ready -> router_003:src_ready
	wire   [15:0] router_003_src_channel;                                                             // router_003:src_channel -> cmd_demux_003:sink_channel
	wire          router_003_src_startofpacket;                                                       // router_003:src_startofpacket -> cmd_demux_003:sink_startofpacket
	wire          router_003_src_endofpacket;                                                         // router_003:src_endofpacket -> cmd_demux_003:sink_endofpacket
	wire          sgdma_tx_descriptor_read_agent_cp_valid;                                            // sgdma_tx_descriptor_read_agent:cp_valid -> router_004:sink_valid
	wire  [119:0] sgdma_tx_descriptor_read_agent_cp_data;                                             // sgdma_tx_descriptor_read_agent:cp_data -> router_004:sink_data
	wire          sgdma_tx_descriptor_read_agent_cp_ready;                                            // router_004:sink_ready -> sgdma_tx_descriptor_read_agent:cp_ready
	wire          sgdma_tx_descriptor_read_agent_cp_startofpacket;                                    // sgdma_tx_descriptor_read_agent:cp_startofpacket -> router_004:sink_startofpacket
	wire          sgdma_tx_descriptor_read_agent_cp_endofpacket;                                      // sgdma_tx_descriptor_read_agent:cp_endofpacket -> router_004:sink_endofpacket
	wire          router_004_src_valid;                                                               // router_004:src_valid -> cmd_demux_004:sink_valid
	wire  [119:0] router_004_src_data;                                                                // router_004:src_data -> cmd_demux_004:sink_data
	wire          router_004_src_ready;                                                               // cmd_demux_004:sink_ready -> router_004:src_ready
	wire   [15:0] router_004_src_channel;                                                             // router_004:src_channel -> cmd_demux_004:sink_channel
	wire          router_004_src_startofpacket;                                                       // router_004:src_startofpacket -> cmd_demux_004:sink_startofpacket
	wire          router_004_src_endofpacket;                                                         // router_004:src_endofpacket -> cmd_demux_004:sink_endofpacket
	wire          sgdma_rx_descriptor_read_agent_cp_valid;                                            // sgdma_rx_descriptor_read_agent:cp_valid -> router_005:sink_valid
	wire  [119:0] sgdma_rx_descriptor_read_agent_cp_data;                                             // sgdma_rx_descriptor_read_agent:cp_data -> router_005:sink_data
	wire          sgdma_rx_descriptor_read_agent_cp_ready;                                            // router_005:sink_ready -> sgdma_rx_descriptor_read_agent:cp_ready
	wire          sgdma_rx_descriptor_read_agent_cp_startofpacket;                                    // sgdma_rx_descriptor_read_agent:cp_startofpacket -> router_005:sink_startofpacket
	wire          sgdma_rx_descriptor_read_agent_cp_endofpacket;                                      // sgdma_rx_descriptor_read_agent:cp_endofpacket -> router_005:sink_endofpacket
	wire          router_005_src_valid;                                                               // router_005:src_valid -> cmd_demux_005:sink_valid
	wire  [119:0] router_005_src_data;                                                                // router_005:src_data -> cmd_demux_005:sink_data
	wire          router_005_src_ready;                                                               // cmd_demux_005:sink_ready -> router_005:src_ready
	wire   [15:0] router_005_src_channel;                                                             // router_005:src_channel -> cmd_demux_005:sink_channel
	wire          router_005_src_startofpacket;                                                       // router_005:src_startofpacket -> cmd_demux_005:sink_startofpacket
	wire          router_005_src_endofpacket;                                                         // router_005:src_endofpacket -> cmd_demux_005:sink_endofpacket
	wire          sgdma_tx_descriptor_write_agent_cp_valid;                                           // sgdma_tx_descriptor_write_agent:cp_valid -> router_006:sink_valid
	wire  [119:0] sgdma_tx_descriptor_write_agent_cp_data;                                            // sgdma_tx_descriptor_write_agent:cp_data -> router_006:sink_data
	wire          sgdma_tx_descriptor_write_agent_cp_ready;                                           // router_006:sink_ready -> sgdma_tx_descriptor_write_agent:cp_ready
	wire          sgdma_tx_descriptor_write_agent_cp_startofpacket;                                   // sgdma_tx_descriptor_write_agent:cp_startofpacket -> router_006:sink_startofpacket
	wire          sgdma_tx_descriptor_write_agent_cp_endofpacket;                                     // sgdma_tx_descriptor_write_agent:cp_endofpacket -> router_006:sink_endofpacket
	wire          router_006_src_valid;                                                               // router_006:src_valid -> cmd_demux_006:sink_valid
	wire  [119:0] router_006_src_data;                                                                // router_006:src_data -> cmd_demux_006:sink_data
	wire          router_006_src_ready;                                                               // cmd_demux_006:sink_ready -> router_006:src_ready
	wire   [15:0] router_006_src_channel;                                                             // router_006:src_channel -> cmd_demux_006:sink_channel
	wire          router_006_src_startofpacket;                                                       // router_006:src_startofpacket -> cmd_demux_006:sink_startofpacket
	wire          router_006_src_endofpacket;                                                         // router_006:src_endofpacket -> cmd_demux_006:sink_endofpacket
	wire          sgdma_rx_descriptor_write_agent_cp_valid;                                           // sgdma_rx_descriptor_write_agent:cp_valid -> router_007:sink_valid
	wire  [119:0] sgdma_rx_descriptor_write_agent_cp_data;                                            // sgdma_rx_descriptor_write_agent:cp_data -> router_007:sink_data
	wire          sgdma_rx_descriptor_write_agent_cp_ready;                                           // router_007:sink_ready -> sgdma_rx_descriptor_write_agent:cp_ready
	wire          sgdma_rx_descriptor_write_agent_cp_startofpacket;                                   // sgdma_rx_descriptor_write_agent:cp_startofpacket -> router_007:sink_startofpacket
	wire          sgdma_rx_descriptor_write_agent_cp_endofpacket;                                     // sgdma_rx_descriptor_write_agent:cp_endofpacket -> router_007:sink_endofpacket
	wire          router_007_src_valid;                                                               // router_007:src_valid -> cmd_demux_007:sink_valid
	wire  [119:0] router_007_src_data;                                                                // router_007:src_data -> cmd_demux_007:sink_data
	wire          router_007_src_ready;                                                               // cmd_demux_007:sink_ready -> router_007:src_ready
	wire   [15:0] router_007_src_channel;                                                             // router_007:src_channel -> cmd_demux_007:sink_channel
	wire          router_007_src_startofpacket;                                                       // router_007:src_startofpacket -> cmd_demux_007:sink_startofpacket
	wire          router_007_src_endofpacket;                                                         // router_007:src_endofpacket -> cmd_demux_007:sink_endofpacket
	wire          dma_m1_m2_mm_read_agent_cp_valid;                                                   // dma_M1_M2_mm_read_agent:cp_valid -> router_008:sink_valid
	wire  [119:0] dma_m1_m2_mm_read_agent_cp_data;                                                    // dma_M1_M2_mm_read_agent:cp_data -> router_008:sink_data
	wire          dma_m1_m2_mm_read_agent_cp_ready;                                                   // router_008:sink_ready -> dma_M1_M2_mm_read_agent:cp_ready
	wire          dma_m1_m2_mm_read_agent_cp_startofpacket;                                           // dma_M1_M2_mm_read_agent:cp_startofpacket -> router_008:sink_startofpacket
	wire          dma_m1_m2_mm_read_agent_cp_endofpacket;                                             // dma_M1_M2_mm_read_agent:cp_endofpacket -> router_008:sink_endofpacket
	wire          router_008_src_valid;                                                               // router_008:src_valid -> cmd_demux_008:sink_valid
	wire  [119:0] router_008_src_data;                                                                // router_008:src_data -> cmd_demux_008:sink_data
	wire          router_008_src_ready;                                                               // cmd_demux_008:sink_ready -> router_008:src_ready
	wire   [15:0] router_008_src_channel;                                                             // router_008:src_channel -> cmd_demux_008:sink_channel
	wire          router_008_src_startofpacket;                                                       // router_008:src_startofpacket -> cmd_demux_008:sink_startofpacket
	wire          router_008_src_endofpacket;                                                         // router_008:src_endofpacket -> cmd_demux_008:sink_endofpacket
	wire          dma_m2_m1_mm_write_agent_cp_valid;                                                  // dma_M2_M1_mm_write_agent:cp_valid -> router_009:sink_valid
	wire  [119:0] dma_m2_m1_mm_write_agent_cp_data;                                                   // dma_M2_M1_mm_write_agent:cp_data -> router_009:sink_data
	wire          dma_m2_m1_mm_write_agent_cp_ready;                                                  // router_009:sink_ready -> dma_M2_M1_mm_write_agent:cp_ready
	wire          dma_m2_m1_mm_write_agent_cp_startofpacket;                                          // dma_M2_M1_mm_write_agent:cp_startofpacket -> router_009:sink_startofpacket
	wire          dma_m2_m1_mm_write_agent_cp_endofpacket;                                            // dma_M2_M1_mm_write_agent:cp_endofpacket -> router_009:sink_endofpacket
	wire          router_009_src_valid;                                                               // router_009:src_valid -> cmd_demux_009:sink_valid
	wire  [119:0] router_009_src_data;                                                                // router_009:src_data -> cmd_demux_009:sink_data
	wire          router_009_src_ready;                                                               // cmd_demux_009:sink_ready -> router_009:src_ready
	wire   [15:0] router_009_src_channel;                                                             // router_009:src_channel -> cmd_demux_009:sink_channel
	wire          router_009_src_startofpacket;                                                       // router_009:src_startofpacket -> cmd_demux_009:sink_startofpacket
	wire          router_009_src_endofpacket;                                                         // router_009:src_endofpacket -> cmd_demux_009:sink_endofpacket
	wire          dma_m2_m1_mm_read_agent_cp_valid;                                                   // dma_M2_M1_mm_read_agent:cp_valid -> router_010:sink_valid
	wire  [119:0] dma_m2_m1_mm_read_agent_cp_data;                                                    // dma_M2_M1_mm_read_agent:cp_data -> router_010:sink_data
	wire          dma_m2_m1_mm_read_agent_cp_ready;                                                   // router_010:sink_ready -> dma_M2_M1_mm_read_agent:cp_ready
	wire          dma_m2_m1_mm_read_agent_cp_startofpacket;                                           // dma_M2_M1_mm_read_agent:cp_startofpacket -> router_010:sink_startofpacket
	wire          dma_m2_m1_mm_read_agent_cp_endofpacket;                                             // dma_M2_M1_mm_read_agent:cp_endofpacket -> router_010:sink_endofpacket
	wire          router_010_src_valid;                                                               // router_010:src_valid -> cmd_demux_010:sink_valid
	wire  [119:0] router_010_src_data;                                                                // router_010:src_data -> cmd_demux_010:sink_data
	wire          router_010_src_ready;                                                               // cmd_demux_010:sink_ready -> router_010:src_ready
	wire   [15:0] router_010_src_channel;                                                             // router_010:src_channel -> cmd_demux_010:sink_channel
	wire          router_010_src_startofpacket;                                                       // router_010:src_startofpacket -> cmd_demux_010:sink_startofpacket
	wire          router_010_src_endofpacket;                                                         // router_010:src_endofpacket -> cmd_demux_010:sink_endofpacket
	wire          dma_m1_m2_mm_write_agent_cp_valid;                                                  // dma_M1_M2_mm_write_agent:cp_valid -> router_011:sink_valid
	wire  [119:0] dma_m1_m2_mm_write_agent_cp_data;                                                   // dma_M1_M2_mm_write_agent:cp_data -> router_011:sink_data
	wire          dma_m1_m2_mm_write_agent_cp_ready;                                                  // router_011:sink_ready -> dma_M1_M2_mm_write_agent:cp_ready
	wire          dma_m1_m2_mm_write_agent_cp_startofpacket;                                          // dma_M1_M2_mm_write_agent:cp_startofpacket -> router_011:sink_startofpacket
	wire          dma_m1_m2_mm_write_agent_cp_endofpacket;                                            // dma_M1_M2_mm_write_agent:cp_endofpacket -> router_011:sink_endofpacket
	wire          router_011_src_valid;                                                               // router_011:src_valid -> cmd_demux_011:sink_valid
	wire  [119:0] router_011_src_data;                                                                // router_011:src_data -> cmd_demux_011:sink_data
	wire          router_011_src_ready;                                                               // cmd_demux_011:sink_ready -> router_011:src_ready
	wire   [15:0] router_011_src_channel;                                                             // router_011:src_channel -> cmd_demux_011:sink_channel
	wire          router_011_src_startofpacket;                                                       // router_011:src_startofpacket -> cmd_demux_011:sink_startofpacket
	wire          router_011_src_endofpacket;                                                         // router_011:src_endofpacket -> cmd_demux_011:sink_endofpacket
	wire          jtag_uart_0_avalon_jtag_slave_agent_rp_valid;                                       // jtag_uart_0_avalon_jtag_slave_agent:rp_valid -> router_012:sink_valid
	wire  [119:0] jtag_uart_0_avalon_jtag_slave_agent_rp_data;                                        // jtag_uart_0_avalon_jtag_slave_agent:rp_data -> router_012:sink_data
	wire          jtag_uart_0_avalon_jtag_slave_agent_rp_ready;                                       // router_012:sink_ready -> jtag_uart_0_avalon_jtag_slave_agent:rp_ready
	wire          jtag_uart_0_avalon_jtag_slave_agent_rp_startofpacket;                               // jtag_uart_0_avalon_jtag_slave_agent:rp_startofpacket -> router_012:sink_startofpacket
	wire          jtag_uart_0_avalon_jtag_slave_agent_rp_endofpacket;                                 // jtag_uart_0_avalon_jtag_slave_agent:rp_endofpacket -> router_012:sink_endofpacket
	wire          router_012_src_valid;                                                               // router_012:src_valid -> rsp_demux:sink_valid
	wire  [119:0] router_012_src_data;                                                                // router_012:src_data -> rsp_demux:sink_data
	wire          router_012_src_ready;                                                               // rsp_demux:sink_ready -> router_012:src_ready
	wire   [15:0] router_012_src_channel;                                                             // router_012:src_channel -> rsp_demux:sink_channel
	wire          router_012_src_startofpacket;                                                       // router_012:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_012_src_endofpacket;                                                         // router_012:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          m2_ddr2_memory_avl_agent_rp_valid;                                                  // m2_ddr2_memory_avl_agent:rp_valid -> router_013:sink_valid
	wire  [371:0] m2_ddr2_memory_avl_agent_rp_data;                                                   // m2_ddr2_memory_avl_agent:rp_data -> router_013:sink_data
	wire          m2_ddr2_memory_avl_agent_rp_ready;                                                  // router_013:sink_ready -> m2_ddr2_memory_avl_agent:rp_ready
	wire          m2_ddr2_memory_avl_agent_rp_startofpacket;                                          // m2_ddr2_memory_avl_agent:rp_startofpacket -> router_013:sink_startofpacket
	wire          m2_ddr2_memory_avl_agent_rp_endofpacket;                                            // m2_ddr2_memory_avl_agent:rp_endofpacket -> router_013:sink_endofpacket
	wire          tse_mac_control_port_agent_rp_valid;                                                // tse_mac_control_port_agent:rp_valid -> router_014:sink_valid
	wire  [119:0] tse_mac_control_port_agent_rp_data;                                                 // tse_mac_control_port_agent:rp_data -> router_014:sink_data
	wire          tse_mac_control_port_agent_rp_ready;                                                // router_014:sink_ready -> tse_mac_control_port_agent:rp_ready
	wire          tse_mac_control_port_agent_rp_startofpacket;                                        // tse_mac_control_port_agent:rp_startofpacket -> router_014:sink_startofpacket
	wire          tse_mac_control_port_agent_rp_endofpacket;                                          // tse_mac_control_port_agent:rp_endofpacket -> router_014:sink_endofpacket
	wire          router_014_src_valid;                                                               // router_014:src_valid -> rsp_demux_002:sink_valid
	wire  [119:0] router_014_src_data;                                                                // router_014:src_data -> rsp_demux_002:sink_data
	wire          router_014_src_ready;                                                               // rsp_demux_002:sink_ready -> router_014:src_ready
	wire   [15:0] router_014_src_channel;                                                             // router_014:src_channel -> rsp_demux_002:sink_channel
	wire          router_014_src_startofpacket;                                                       // router_014:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          router_014_src_endofpacket;                                                         // router_014:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          sysid_qsys_control_slave_agent_rp_valid;                                            // sysid_qsys_control_slave_agent:rp_valid -> router_015:sink_valid
	wire  [119:0] sysid_qsys_control_slave_agent_rp_data;                                             // sysid_qsys_control_slave_agent:rp_data -> router_015:sink_data
	wire          sysid_qsys_control_slave_agent_rp_ready;                                            // router_015:sink_ready -> sysid_qsys_control_slave_agent:rp_ready
	wire          sysid_qsys_control_slave_agent_rp_startofpacket;                                    // sysid_qsys_control_slave_agent:rp_startofpacket -> router_015:sink_startofpacket
	wire          sysid_qsys_control_slave_agent_rp_endofpacket;                                      // sysid_qsys_control_slave_agent:rp_endofpacket -> router_015:sink_endofpacket
	wire          router_015_src_valid;                                                               // router_015:src_valid -> rsp_demux_003:sink_valid
	wire  [119:0] router_015_src_data;                                                                // router_015:src_data -> rsp_demux_003:sink_data
	wire          router_015_src_ready;                                                               // rsp_demux_003:sink_ready -> router_015:src_ready
	wire   [15:0] router_015_src_channel;                                                             // router_015:src_channel -> rsp_demux_003:sink_channel
	wire          router_015_src_startofpacket;                                                       // router_015:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire          router_015_src_endofpacket;                                                         // router_015:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          sgdma_tx_csr_agent_rp_valid;                                                        // sgdma_tx_csr_agent:rp_valid -> router_016:sink_valid
	wire  [119:0] sgdma_tx_csr_agent_rp_data;                                                         // sgdma_tx_csr_agent:rp_data -> router_016:sink_data
	wire          sgdma_tx_csr_agent_rp_ready;                                                        // router_016:sink_ready -> sgdma_tx_csr_agent:rp_ready
	wire          sgdma_tx_csr_agent_rp_startofpacket;                                                // sgdma_tx_csr_agent:rp_startofpacket -> router_016:sink_startofpacket
	wire          sgdma_tx_csr_agent_rp_endofpacket;                                                  // sgdma_tx_csr_agent:rp_endofpacket -> router_016:sink_endofpacket
	wire          router_016_src_valid;                                                               // router_016:src_valid -> rsp_demux_004:sink_valid
	wire  [119:0] router_016_src_data;                                                                // router_016:src_data -> rsp_demux_004:sink_data
	wire          router_016_src_ready;                                                               // rsp_demux_004:sink_ready -> router_016:src_ready
	wire   [15:0] router_016_src_channel;                                                             // router_016:src_channel -> rsp_demux_004:sink_channel
	wire          router_016_src_startofpacket;                                                       // router_016:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire          router_016_src_endofpacket;                                                         // router_016:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire          sgdma_rx_csr_agent_rp_valid;                                                        // sgdma_rx_csr_agent:rp_valid -> router_017:sink_valid
	wire  [119:0] sgdma_rx_csr_agent_rp_data;                                                         // sgdma_rx_csr_agent:rp_data -> router_017:sink_data
	wire          sgdma_rx_csr_agent_rp_ready;                                                        // router_017:sink_ready -> sgdma_rx_csr_agent:rp_ready
	wire          sgdma_rx_csr_agent_rp_startofpacket;                                                // sgdma_rx_csr_agent:rp_startofpacket -> router_017:sink_startofpacket
	wire          sgdma_rx_csr_agent_rp_endofpacket;                                                  // sgdma_rx_csr_agent:rp_endofpacket -> router_017:sink_endofpacket
	wire          router_017_src_valid;                                                               // router_017:src_valid -> rsp_demux_005:sink_valid
	wire  [119:0] router_017_src_data;                                                                // router_017:src_data -> rsp_demux_005:sink_data
	wire          router_017_src_ready;                                                               // rsp_demux_005:sink_ready -> router_017:src_ready
	wire   [15:0] router_017_src_channel;                                                             // router_017:src_channel -> rsp_demux_005:sink_channel
	wire          router_017_src_startofpacket;                                                       // router_017:src_startofpacket -> rsp_demux_005:sink_startofpacket
	wire          router_017_src_endofpacket;                                                         // router_017:src_endofpacket -> rsp_demux_005:sink_endofpacket
	wire          dma_m1_m2_csr_agent_rp_valid;                                                       // dma_M1_M2_csr_agent:rp_valid -> router_018:sink_valid
	wire  [119:0] dma_m1_m2_csr_agent_rp_data;                                                        // dma_M1_M2_csr_agent:rp_data -> router_018:sink_data
	wire          dma_m1_m2_csr_agent_rp_ready;                                                       // router_018:sink_ready -> dma_M1_M2_csr_agent:rp_ready
	wire          dma_m1_m2_csr_agent_rp_startofpacket;                                               // dma_M1_M2_csr_agent:rp_startofpacket -> router_018:sink_startofpacket
	wire          dma_m1_m2_csr_agent_rp_endofpacket;                                                 // dma_M1_M2_csr_agent:rp_endofpacket -> router_018:sink_endofpacket
	wire          router_018_src_valid;                                                               // router_018:src_valid -> rsp_demux_006:sink_valid
	wire  [119:0] router_018_src_data;                                                                // router_018:src_data -> rsp_demux_006:sink_data
	wire          router_018_src_ready;                                                               // rsp_demux_006:sink_ready -> router_018:src_ready
	wire   [15:0] router_018_src_channel;                                                             // router_018:src_channel -> rsp_demux_006:sink_channel
	wire          router_018_src_startofpacket;                                                       // router_018:src_startofpacket -> rsp_demux_006:sink_startofpacket
	wire          router_018_src_endofpacket;                                                         // router_018:src_endofpacket -> rsp_demux_006:sink_endofpacket
	wire          dma_m2_m1_csr_agent_rp_valid;                                                       // dma_M2_M1_csr_agent:rp_valid -> router_019:sink_valid
	wire  [119:0] dma_m2_m1_csr_agent_rp_data;                                                        // dma_M2_M1_csr_agent:rp_data -> router_019:sink_data
	wire          dma_m2_m1_csr_agent_rp_ready;                                                       // router_019:sink_ready -> dma_M2_M1_csr_agent:rp_ready
	wire          dma_m2_m1_csr_agent_rp_startofpacket;                                               // dma_M2_M1_csr_agent:rp_startofpacket -> router_019:sink_startofpacket
	wire          dma_m2_m1_csr_agent_rp_endofpacket;                                                 // dma_M2_M1_csr_agent:rp_endofpacket -> router_019:sink_endofpacket
	wire          router_019_src_valid;                                                               // router_019:src_valid -> rsp_demux_007:sink_valid
	wire  [119:0] router_019_src_data;                                                                // router_019:src_data -> rsp_demux_007:sink_data
	wire          router_019_src_ready;                                                               // rsp_demux_007:sink_ready -> router_019:src_ready
	wire   [15:0] router_019_src_channel;                                                             // router_019:src_channel -> rsp_demux_007:sink_channel
	wire          router_019_src_startofpacket;                                                       // router_019:src_startofpacket -> rsp_demux_007:sink_startofpacket
	wire          router_019_src_endofpacket;                                                         // router_019:src_endofpacket -> rsp_demux_007:sink_endofpacket
	wire          nios2_gen2_0_debug_mem_slave_agent_rp_valid;                                        // nios2_gen2_0_debug_mem_slave_agent:rp_valid -> router_020:sink_valid
	wire  [119:0] nios2_gen2_0_debug_mem_slave_agent_rp_data;                                         // nios2_gen2_0_debug_mem_slave_agent:rp_data -> router_020:sink_data
	wire          nios2_gen2_0_debug_mem_slave_agent_rp_ready;                                        // router_020:sink_ready -> nios2_gen2_0_debug_mem_slave_agent:rp_ready
	wire          nios2_gen2_0_debug_mem_slave_agent_rp_startofpacket;                                // nios2_gen2_0_debug_mem_slave_agent:rp_startofpacket -> router_020:sink_startofpacket
	wire          nios2_gen2_0_debug_mem_slave_agent_rp_endofpacket;                                  // nios2_gen2_0_debug_mem_slave_agent:rp_endofpacket -> router_020:sink_endofpacket
	wire          router_020_src_valid;                                                               // router_020:src_valid -> rsp_demux_008:sink_valid
	wire  [119:0] router_020_src_data;                                                                // router_020:src_data -> rsp_demux_008:sink_data
	wire          router_020_src_ready;                                                               // rsp_demux_008:sink_ready -> router_020:src_ready
	wire   [15:0] router_020_src_channel;                                                             // router_020:src_channel -> rsp_demux_008:sink_channel
	wire          router_020_src_startofpacket;                                                       // router_020:src_startofpacket -> rsp_demux_008:sink_startofpacket
	wire          router_020_src_endofpacket;                                                         // router_020:src_endofpacket -> rsp_demux_008:sink_endofpacket
	wire          dma_m1_m2_descriptor_slave_agent_rp_valid;                                          // dma_M1_M2_descriptor_slave_agent:rp_valid -> router_021:sink_valid
	wire  [227:0] dma_m1_m2_descriptor_slave_agent_rp_data;                                           // dma_M1_M2_descriptor_slave_agent:rp_data -> router_021:sink_data
	wire          dma_m1_m2_descriptor_slave_agent_rp_ready;                                          // router_021:sink_ready -> dma_M1_M2_descriptor_slave_agent:rp_ready
	wire          dma_m1_m2_descriptor_slave_agent_rp_startofpacket;                                  // dma_M1_M2_descriptor_slave_agent:rp_startofpacket -> router_021:sink_startofpacket
	wire          dma_m1_m2_descriptor_slave_agent_rp_endofpacket;                                    // dma_M1_M2_descriptor_slave_agent:rp_endofpacket -> router_021:sink_endofpacket
	wire          dma_m2_m1_descriptor_slave_agent_rp_valid;                                          // dma_M2_M1_descriptor_slave_agent:rp_valid -> router_022:sink_valid
	wire  [227:0] dma_m2_m1_descriptor_slave_agent_rp_data;                                           // dma_M2_M1_descriptor_slave_agent:rp_data -> router_022:sink_data
	wire          dma_m2_m1_descriptor_slave_agent_rp_ready;                                          // router_022:sink_ready -> dma_M2_M1_descriptor_slave_agent:rp_ready
	wire          dma_m2_m1_descriptor_slave_agent_rp_startofpacket;                                  // dma_M2_M1_descriptor_slave_agent:rp_startofpacket -> router_022:sink_startofpacket
	wire          dma_m2_m1_descriptor_slave_agent_rp_endofpacket;                                    // dma_M2_M1_descriptor_slave_agent:rp_endofpacket -> router_022:sink_endofpacket
	wire          clock_bridge_afi_50_s0_agent_rp_valid;                                              // clock_bridge_afi_50_s0_agent:rp_valid -> router_023:sink_valid
	wire  [119:0] clock_bridge_afi_50_s0_agent_rp_data;                                               // clock_bridge_afi_50_s0_agent:rp_data -> router_023:sink_data
	wire          clock_bridge_afi_50_s0_agent_rp_ready;                                              // router_023:sink_ready -> clock_bridge_afi_50_s0_agent:rp_ready
	wire          clock_bridge_afi_50_s0_agent_rp_startofpacket;                                      // clock_bridge_afi_50_s0_agent:rp_startofpacket -> router_023:sink_startofpacket
	wire          clock_bridge_afi_50_s0_agent_rp_endofpacket;                                        // clock_bridge_afi_50_s0_agent:rp_endofpacket -> router_023:sink_endofpacket
	wire          router_023_src_valid;                                                               // router_023:src_valid -> rsp_demux_011:sink_valid
	wire  [119:0] router_023_src_data;                                                                // router_023:src_data -> rsp_demux_011:sink_data
	wire          router_023_src_ready;                                                               // rsp_demux_011:sink_ready -> router_023:src_ready
	wire   [15:0] router_023_src_channel;                                                             // router_023:src_channel -> rsp_demux_011:sink_channel
	wire          router_023_src_startofpacket;                                                       // router_023:src_startofpacket -> rsp_demux_011:sink_startofpacket
	wire          router_023_src_endofpacket;                                                         // router_023:src_endofpacket -> rsp_demux_011:sink_endofpacket
	wire          m1_clock_bridge_s0_agent_rp_valid;                                                  // m1_clock_bridge_s0_agent:rp_valid -> router_024:sink_valid
	wire  [119:0] m1_clock_bridge_s0_agent_rp_data;                                                   // m1_clock_bridge_s0_agent:rp_data -> router_024:sink_data
	wire          m1_clock_bridge_s0_agent_rp_ready;                                                  // router_024:sink_ready -> m1_clock_bridge_s0_agent:rp_ready
	wire          m1_clock_bridge_s0_agent_rp_startofpacket;                                          // m1_clock_bridge_s0_agent:rp_startofpacket -> router_024:sink_startofpacket
	wire          m1_clock_bridge_s0_agent_rp_endofpacket;                                            // m1_clock_bridge_s0_agent:rp_endofpacket -> router_024:sink_endofpacket
	wire          router_024_src_valid;                                                               // router_024:src_valid -> rsp_demux_012:sink_valid
	wire  [119:0] router_024_src_data;                                                                // router_024:src_data -> rsp_demux_012:sink_data
	wire          router_024_src_ready;                                                               // rsp_demux_012:sink_ready -> router_024:src_ready
	wire   [15:0] router_024_src_channel;                                                             // router_024:src_channel -> rsp_demux_012:sink_channel
	wire          router_024_src_startofpacket;                                                       // router_024:src_startofpacket -> rsp_demux_012:sink_startofpacket
	wire          router_024_src_endofpacket;                                                         // router_024:src_endofpacket -> rsp_demux_012:sink_endofpacket
	wire          onchip_memory_s1_agent_rp_valid;                                                    // onchip_memory_s1_agent:rp_valid -> router_025:sink_valid
	wire  [119:0] onchip_memory_s1_agent_rp_data;                                                     // onchip_memory_s1_agent:rp_data -> router_025:sink_data
	wire          onchip_memory_s1_agent_rp_ready;                                                    // router_025:sink_ready -> onchip_memory_s1_agent:rp_ready
	wire          onchip_memory_s1_agent_rp_startofpacket;                                            // onchip_memory_s1_agent:rp_startofpacket -> router_025:sink_startofpacket
	wire          onchip_memory_s1_agent_rp_endofpacket;                                              // onchip_memory_s1_agent:rp_endofpacket -> router_025:sink_endofpacket
	wire          router_025_src_valid;                                                               // router_025:src_valid -> rsp_demux_013:sink_valid
	wire  [119:0] router_025_src_data;                                                                // router_025:src_data -> rsp_demux_013:sink_data
	wire          router_025_src_ready;                                                               // rsp_demux_013:sink_ready -> router_025:src_ready
	wire   [15:0] router_025_src_channel;                                                             // router_025:src_channel -> rsp_demux_013:sink_channel
	wire          router_025_src_startofpacket;                                                       // router_025:src_startofpacket -> rsp_demux_013:sink_startofpacket
	wire          router_025_src_endofpacket;                                                         // router_025:src_endofpacket -> rsp_demux_013:sink_endofpacket
	wire          descriptor_memory_s1_agent_rp_valid;                                                // descriptor_memory_s1_agent:rp_valid -> router_026:sink_valid
	wire  [119:0] descriptor_memory_s1_agent_rp_data;                                                 // descriptor_memory_s1_agent:rp_data -> router_026:sink_data
	wire          descriptor_memory_s1_agent_rp_ready;                                                // router_026:sink_ready -> descriptor_memory_s1_agent:rp_ready
	wire          descriptor_memory_s1_agent_rp_startofpacket;                                        // descriptor_memory_s1_agent:rp_startofpacket -> router_026:sink_startofpacket
	wire          descriptor_memory_s1_agent_rp_endofpacket;                                          // descriptor_memory_s1_agent:rp_endofpacket -> router_026:sink_endofpacket
	wire          router_026_src_valid;                                                               // router_026:src_valid -> rsp_demux_014:sink_valid
	wire  [119:0] router_026_src_data;                                                                // router_026:src_data -> rsp_demux_014:sink_data
	wire          router_026_src_ready;                                                               // rsp_demux_014:sink_ready -> router_026:src_ready
	wire   [15:0] router_026_src_channel;                                                             // router_026:src_channel -> rsp_demux_014:sink_channel
	wire          router_026_src_startofpacket;                                                       // router_026:src_startofpacket -> rsp_demux_014:sink_startofpacket
	wire          router_026_src_endofpacket;                                                         // router_026:src_endofpacket -> rsp_demux_014:sink_endofpacket
	wire          ext_flash_uas_agent_rp_valid;                                                       // ext_flash_uas_agent:rp_valid -> router_027:sink_valid
	wire  [101:0] ext_flash_uas_agent_rp_data;                                                        // ext_flash_uas_agent:rp_data -> router_027:sink_data
	wire          ext_flash_uas_agent_rp_ready;                                                       // router_027:sink_ready -> ext_flash_uas_agent:rp_ready
	wire          ext_flash_uas_agent_rp_startofpacket;                                               // ext_flash_uas_agent:rp_startofpacket -> router_027:sink_startofpacket
	wire          ext_flash_uas_agent_rp_endofpacket;                                                 // ext_flash_uas_agent:rp_endofpacket -> router_027:sink_endofpacket
	wire          router_001_src_valid;                                                               // router_001:src_valid -> nios2_gen2_0_instruction_master_limiter:cmd_sink_valid
	wire  [119:0] router_001_src_data;                                                                // router_001:src_data -> nios2_gen2_0_instruction_master_limiter:cmd_sink_data
	wire          router_001_src_ready;                                                               // nios2_gen2_0_instruction_master_limiter:cmd_sink_ready -> router_001:src_ready
	wire   [15:0] router_001_src_channel;                                                             // router_001:src_channel -> nios2_gen2_0_instruction_master_limiter:cmd_sink_channel
	wire          router_001_src_startofpacket;                                                       // router_001:src_startofpacket -> nios2_gen2_0_instruction_master_limiter:cmd_sink_startofpacket
	wire          router_001_src_endofpacket;                                                         // router_001:src_endofpacket -> nios2_gen2_0_instruction_master_limiter:cmd_sink_endofpacket
	wire  [119:0] nios2_gen2_0_instruction_master_limiter_cmd_src_data;                               // nios2_gen2_0_instruction_master_limiter:cmd_src_data -> cmd_demux_001:sink_data
	wire          nios2_gen2_0_instruction_master_limiter_cmd_src_ready;                              // cmd_demux_001:sink_ready -> nios2_gen2_0_instruction_master_limiter:cmd_src_ready
	wire   [15:0] nios2_gen2_0_instruction_master_limiter_cmd_src_channel;                            // nios2_gen2_0_instruction_master_limiter:cmd_src_channel -> cmd_demux_001:sink_channel
	wire          nios2_gen2_0_instruction_master_limiter_cmd_src_startofpacket;                      // nios2_gen2_0_instruction_master_limiter:cmd_src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          nios2_gen2_0_instruction_master_limiter_cmd_src_endofpacket;                        // nios2_gen2_0_instruction_master_limiter:cmd_src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          rsp_mux_001_src_valid;                                                              // rsp_mux_001:src_valid -> nios2_gen2_0_instruction_master_limiter:rsp_sink_valid
	wire  [119:0] rsp_mux_001_src_data;                                                               // rsp_mux_001:src_data -> nios2_gen2_0_instruction_master_limiter:rsp_sink_data
	wire          rsp_mux_001_src_ready;                                                              // nios2_gen2_0_instruction_master_limiter:rsp_sink_ready -> rsp_mux_001:src_ready
	wire   [15:0] rsp_mux_001_src_channel;                                                            // rsp_mux_001:src_channel -> nios2_gen2_0_instruction_master_limiter:rsp_sink_channel
	wire          rsp_mux_001_src_startofpacket;                                                      // rsp_mux_001:src_startofpacket -> nios2_gen2_0_instruction_master_limiter:rsp_sink_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                                        // rsp_mux_001:src_endofpacket -> nios2_gen2_0_instruction_master_limiter:rsp_sink_endofpacket
	wire          nios2_gen2_0_instruction_master_limiter_rsp_src_valid;                              // nios2_gen2_0_instruction_master_limiter:rsp_src_valid -> nios2_gen2_0_instruction_master_agent:rp_valid
	wire  [119:0] nios2_gen2_0_instruction_master_limiter_rsp_src_data;                               // nios2_gen2_0_instruction_master_limiter:rsp_src_data -> nios2_gen2_0_instruction_master_agent:rp_data
	wire          nios2_gen2_0_instruction_master_limiter_rsp_src_ready;                              // nios2_gen2_0_instruction_master_agent:rp_ready -> nios2_gen2_0_instruction_master_limiter:rsp_src_ready
	wire   [15:0] nios2_gen2_0_instruction_master_limiter_rsp_src_channel;                            // nios2_gen2_0_instruction_master_limiter:rsp_src_channel -> nios2_gen2_0_instruction_master_agent:rp_channel
	wire          nios2_gen2_0_instruction_master_limiter_rsp_src_startofpacket;                      // nios2_gen2_0_instruction_master_limiter:rsp_src_startofpacket -> nios2_gen2_0_instruction_master_agent:rp_startofpacket
	wire          nios2_gen2_0_instruction_master_limiter_rsp_src_endofpacket;                        // nios2_gen2_0_instruction_master_limiter:rsp_src_endofpacket -> nios2_gen2_0_instruction_master_agent:rp_endofpacket
	wire          m2_ddr2_memory_avl_burst_adapter_source0_valid;                                     // m2_ddr2_memory_avl_burst_adapter:source0_valid -> m2_ddr2_memory_avl_agent:cp_valid
	wire  [371:0] m2_ddr2_memory_avl_burst_adapter_source0_data;                                      // m2_ddr2_memory_avl_burst_adapter:source0_data -> m2_ddr2_memory_avl_agent:cp_data
	wire          m2_ddr2_memory_avl_burst_adapter_source0_ready;                                     // m2_ddr2_memory_avl_agent:cp_ready -> m2_ddr2_memory_avl_burst_adapter:source0_ready
	wire   [15:0] m2_ddr2_memory_avl_burst_adapter_source0_channel;                                   // m2_ddr2_memory_avl_burst_adapter:source0_channel -> m2_ddr2_memory_avl_agent:cp_channel
	wire          m2_ddr2_memory_avl_burst_adapter_source0_startofpacket;                             // m2_ddr2_memory_avl_burst_adapter:source0_startofpacket -> m2_ddr2_memory_avl_agent:cp_startofpacket
	wire          m2_ddr2_memory_avl_burst_adapter_source0_endofpacket;                               // m2_ddr2_memory_avl_burst_adapter:source0_endofpacket -> m2_ddr2_memory_avl_agent:cp_endofpacket
	wire          cmd_mux_008_src_valid;                                                              // cmd_mux_008:src_valid -> nios2_gen2_0_debug_mem_slave_burst_adapter:sink0_valid
	wire  [119:0] cmd_mux_008_src_data;                                                               // cmd_mux_008:src_data -> nios2_gen2_0_debug_mem_slave_burst_adapter:sink0_data
	wire          cmd_mux_008_src_ready;                                                              // nios2_gen2_0_debug_mem_slave_burst_adapter:sink0_ready -> cmd_mux_008:src_ready
	wire   [15:0] cmd_mux_008_src_channel;                                                            // cmd_mux_008:src_channel -> nios2_gen2_0_debug_mem_slave_burst_adapter:sink0_channel
	wire          cmd_mux_008_src_startofpacket;                                                      // cmd_mux_008:src_startofpacket -> nios2_gen2_0_debug_mem_slave_burst_adapter:sink0_startofpacket
	wire          cmd_mux_008_src_endofpacket;                                                        // cmd_mux_008:src_endofpacket -> nios2_gen2_0_debug_mem_slave_burst_adapter:sink0_endofpacket
	wire          nios2_gen2_0_debug_mem_slave_burst_adapter_source0_valid;                           // nios2_gen2_0_debug_mem_slave_burst_adapter:source0_valid -> nios2_gen2_0_debug_mem_slave_agent:cp_valid
	wire  [119:0] nios2_gen2_0_debug_mem_slave_burst_adapter_source0_data;                            // nios2_gen2_0_debug_mem_slave_burst_adapter:source0_data -> nios2_gen2_0_debug_mem_slave_agent:cp_data
	wire          nios2_gen2_0_debug_mem_slave_burst_adapter_source0_ready;                           // nios2_gen2_0_debug_mem_slave_agent:cp_ready -> nios2_gen2_0_debug_mem_slave_burst_adapter:source0_ready
	wire   [15:0] nios2_gen2_0_debug_mem_slave_burst_adapter_source0_channel;                         // nios2_gen2_0_debug_mem_slave_burst_adapter:source0_channel -> nios2_gen2_0_debug_mem_slave_agent:cp_channel
	wire          nios2_gen2_0_debug_mem_slave_burst_adapter_source0_startofpacket;                   // nios2_gen2_0_debug_mem_slave_burst_adapter:source0_startofpacket -> nios2_gen2_0_debug_mem_slave_agent:cp_startofpacket
	wire          nios2_gen2_0_debug_mem_slave_burst_adapter_source0_endofpacket;                     // nios2_gen2_0_debug_mem_slave_burst_adapter:source0_endofpacket -> nios2_gen2_0_debug_mem_slave_agent:cp_endofpacket
	wire          cmd_mux_013_src_valid;                                                              // cmd_mux_013:src_valid -> onchip_memory_s1_burst_adapter:sink0_valid
	wire  [119:0] cmd_mux_013_src_data;                                                               // cmd_mux_013:src_data -> onchip_memory_s1_burst_adapter:sink0_data
	wire          cmd_mux_013_src_ready;                                                              // onchip_memory_s1_burst_adapter:sink0_ready -> cmd_mux_013:src_ready
	wire   [15:0] cmd_mux_013_src_channel;                                                            // cmd_mux_013:src_channel -> onchip_memory_s1_burst_adapter:sink0_channel
	wire          cmd_mux_013_src_startofpacket;                                                      // cmd_mux_013:src_startofpacket -> onchip_memory_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_013_src_endofpacket;                                                        // cmd_mux_013:src_endofpacket -> onchip_memory_s1_burst_adapter:sink0_endofpacket
	wire          onchip_memory_s1_burst_adapter_source0_valid;                                       // onchip_memory_s1_burst_adapter:source0_valid -> onchip_memory_s1_agent:cp_valid
	wire  [119:0] onchip_memory_s1_burst_adapter_source0_data;                                        // onchip_memory_s1_burst_adapter:source0_data -> onchip_memory_s1_agent:cp_data
	wire          onchip_memory_s1_burst_adapter_source0_ready;                                       // onchip_memory_s1_agent:cp_ready -> onchip_memory_s1_burst_adapter:source0_ready
	wire   [15:0] onchip_memory_s1_burst_adapter_source0_channel;                                     // onchip_memory_s1_burst_adapter:source0_channel -> onchip_memory_s1_agent:cp_channel
	wire          onchip_memory_s1_burst_adapter_source0_startofpacket;                               // onchip_memory_s1_burst_adapter:source0_startofpacket -> onchip_memory_s1_agent:cp_startofpacket
	wire          onchip_memory_s1_burst_adapter_source0_endofpacket;                                 // onchip_memory_s1_burst_adapter:source0_endofpacket -> onchip_memory_s1_agent:cp_endofpacket
	wire          ext_flash_uas_burst_adapter_source0_valid;                                          // ext_flash_uas_burst_adapter:source0_valid -> ext_flash_uas_agent:cp_valid
	wire  [101:0] ext_flash_uas_burst_adapter_source0_data;                                           // ext_flash_uas_burst_adapter:source0_data -> ext_flash_uas_agent:cp_data
	wire          ext_flash_uas_burst_adapter_source0_ready;                                          // ext_flash_uas_agent:cp_ready -> ext_flash_uas_burst_adapter:source0_ready
	wire   [15:0] ext_flash_uas_burst_adapter_source0_channel;                                        // ext_flash_uas_burst_adapter:source0_channel -> ext_flash_uas_agent:cp_channel
	wire          ext_flash_uas_burst_adapter_source0_startofpacket;                                  // ext_flash_uas_burst_adapter:source0_startofpacket -> ext_flash_uas_agent:cp_startofpacket
	wire          ext_flash_uas_burst_adapter_source0_endofpacket;                                    // ext_flash_uas_burst_adapter:source0_endofpacket -> ext_flash_uas_agent:cp_endofpacket
	wire          cmd_demux_src0_valid;                                                               // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [119:0] cmd_demux_src0_data;                                                                // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                                               // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire   [15:0] cmd_demux_src0_channel;                                                             // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                                                       // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                                                         // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src2_valid;                                                               // cmd_demux:src2_valid -> cmd_mux_002:sink0_valid
	wire  [119:0] cmd_demux_src2_data;                                                                // cmd_demux:src2_data -> cmd_mux_002:sink0_data
	wire          cmd_demux_src2_ready;                                                               // cmd_mux_002:sink0_ready -> cmd_demux:src2_ready
	wire   [15:0] cmd_demux_src2_channel;                                                             // cmd_demux:src2_channel -> cmd_mux_002:sink0_channel
	wire          cmd_demux_src2_startofpacket;                                                       // cmd_demux:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          cmd_demux_src2_endofpacket;                                                         // cmd_demux:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_src3_valid;                                                               // cmd_demux:src3_valid -> cmd_mux_003:sink0_valid
	wire  [119:0] cmd_demux_src3_data;                                                                // cmd_demux:src3_data -> cmd_mux_003:sink0_data
	wire          cmd_demux_src3_ready;                                                               // cmd_mux_003:sink0_ready -> cmd_demux:src3_ready
	wire   [15:0] cmd_demux_src3_channel;                                                             // cmd_demux:src3_channel -> cmd_mux_003:sink0_channel
	wire          cmd_demux_src3_startofpacket;                                                       // cmd_demux:src3_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire          cmd_demux_src3_endofpacket;                                                         // cmd_demux:src3_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          cmd_demux_src4_valid;                                                               // cmd_demux:src4_valid -> cmd_mux_004:sink0_valid
	wire  [119:0] cmd_demux_src4_data;                                                                // cmd_demux:src4_data -> cmd_mux_004:sink0_data
	wire          cmd_demux_src4_ready;                                                               // cmd_mux_004:sink0_ready -> cmd_demux:src4_ready
	wire   [15:0] cmd_demux_src4_channel;                                                             // cmd_demux:src4_channel -> cmd_mux_004:sink0_channel
	wire          cmd_demux_src4_startofpacket;                                                       // cmd_demux:src4_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire          cmd_demux_src4_endofpacket;                                                         // cmd_demux:src4_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire          cmd_demux_src5_valid;                                                               // cmd_demux:src5_valid -> cmd_mux_005:sink0_valid
	wire  [119:0] cmd_demux_src5_data;                                                                // cmd_demux:src5_data -> cmd_mux_005:sink0_data
	wire          cmd_demux_src5_ready;                                                               // cmd_mux_005:sink0_ready -> cmd_demux:src5_ready
	wire   [15:0] cmd_demux_src5_channel;                                                             // cmd_demux:src5_channel -> cmd_mux_005:sink0_channel
	wire          cmd_demux_src5_startofpacket;                                                       // cmd_demux:src5_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire          cmd_demux_src5_endofpacket;                                                         // cmd_demux:src5_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire          cmd_demux_src6_valid;                                                               // cmd_demux:src6_valid -> cmd_mux_006:sink0_valid
	wire  [119:0] cmd_demux_src6_data;                                                                // cmd_demux:src6_data -> cmd_mux_006:sink0_data
	wire          cmd_demux_src6_ready;                                                               // cmd_mux_006:sink0_ready -> cmd_demux:src6_ready
	wire   [15:0] cmd_demux_src6_channel;                                                             // cmd_demux:src6_channel -> cmd_mux_006:sink0_channel
	wire          cmd_demux_src6_startofpacket;                                                       // cmd_demux:src6_startofpacket -> cmd_mux_006:sink0_startofpacket
	wire          cmd_demux_src6_endofpacket;                                                         // cmd_demux:src6_endofpacket -> cmd_mux_006:sink0_endofpacket
	wire          cmd_demux_src7_valid;                                                               // cmd_demux:src7_valid -> cmd_mux_007:sink0_valid
	wire  [119:0] cmd_demux_src7_data;                                                                // cmd_demux:src7_data -> cmd_mux_007:sink0_data
	wire          cmd_demux_src7_ready;                                                               // cmd_mux_007:sink0_ready -> cmd_demux:src7_ready
	wire   [15:0] cmd_demux_src7_channel;                                                             // cmd_demux:src7_channel -> cmd_mux_007:sink0_channel
	wire          cmd_demux_src7_startofpacket;                                                       // cmd_demux:src7_startofpacket -> cmd_mux_007:sink0_startofpacket
	wire          cmd_demux_src7_endofpacket;                                                         // cmd_demux:src7_endofpacket -> cmd_mux_007:sink0_endofpacket
	wire          cmd_demux_src8_valid;                                                               // cmd_demux:src8_valid -> cmd_mux_008:sink0_valid
	wire  [119:0] cmd_demux_src8_data;                                                                // cmd_demux:src8_data -> cmd_mux_008:sink0_data
	wire          cmd_demux_src8_ready;                                                               // cmd_mux_008:sink0_ready -> cmd_demux:src8_ready
	wire   [15:0] cmd_demux_src8_channel;                                                             // cmd_demux:src8_channel -> cmd_mux_008:sink0_channel
	wire          cmd_demux_src8_startofpacket;                                                       // cmd_demux:src8_startofpacket -> cmd_mux_008:sink0_startofpacket
	wire          cmd_demux_src8_endofpacket;                                                         // cmd_demux:src8_endofpacket -> cmd_mux_008:sink0_endofpacket
	wire          cmd_demux_src9_valid;                                                               // cmd_demux:src9_valid -> cmd_mux_009:sink0_valid
	wire  [119:0] cmd_demux_src9_data;                                                                // cmd_demux:src9_data -> cmd_mux_009:sink0_data
	wire          cmd_demux_src9_ready;                                                               // cmd_mux_009:sink0_ready -> cmd_demux:src9_ready
	wire   [15:0] cmd_demux_src9_channel;                                                             // cmd_demux:src9_channel -> cmd_mux_009:sink0_channel
	wire          cmd_demux_src9_startofpacket;                                                       // cmd_demux:src9_startofpacket -> cmd_mux_009:sink0_startofpacket
	wire          cmd_demux_src9_endofpacket;                                                         // cmd_demux:src9_endofpacket -> cmd_mux_009:sink0_endofpacket
	wire          cmd_demux_src10_valid;                                                              // cmd_demux:src10_valid -> cmd_mux_010:sink0_valid
	wire  [119:0] cmd_demux_src10_data;                                                               // cmd_demux:src10_data -> cmd_mux_010:sink0_data
	wire          cmd_demux_src10_ready;                                                              // cmd_mux_010:sink0_ready -> cmd_demux:src10_ready
	wire   [15:0] cmd_demux_src10_channel;                                                            // cmd_demux:src10_channel -> cmd_mux_010:sink0_channel
	wire          cmd_demux_src10_startofpacket;                                                      // cmd_demux:src10_startofpacket -> cmd_mux_010:sink0_startofpacket
	wire          cmd_demux_src10_endofpacket;                                                        // cmd_demux:src10_endofpacket -> cmd_mux_010:sink0_endofpacket
	wire          cmd_demux_src11_valid;                                                              // cmd_demux:src11_valid -> cmd_mux_011:sink0_valid
	wire  [119:0] cmd_demux_src11_data;                                                               // cmd_demux:src11_data -> cmd_mux_011:sink0_data
	wire          cmd_demux_src11_ready;                                                              // cmd_mux_011:sink0_ready -> cmd_demux:src11_ready
	wire   [15:0] cmd_demux_src11_channel;                                                            // cmd_demux:src11_channel -> cmd_mux_011:sink0_channel
	wire          cmd_demux_src11_startofpacket;                                                      // cmd_demux:src11_startofpacket -> cmd_mux_011:sink0_startofpacket
	wire          cmd_demux_src11_endofpacket;                                                        // cmd_demux:src11_endofpacket -> cmd_mux_011:sink0_endofpacket
	wire          cmd_demux_src13_valid;                                                              // cmd_demux:src13_valid -> cmd_mux_013:sink0_valid
	wire  [119:0] cmd_demux_src13_data;                                                               // cmd_demux:src13_data -> cmd_mux_013:sink0_data
	wire          cmd_demux_src13_ready;                                                              // cmd_mux_013:sink0_ready -> cmd_demux:src13_ready
	wire   [15:0] cmd_demux_src13_channel;                                                            // cmd_demux:src13_channel -> cmd_mux_013:sink0_channel
	wire          cmd_demux_src13_startofpacket;                                                      // cmd_demux:src13_startofpacket -> cmd_mux_013:sink0_startofpacket
	wire          cmd_demux_src13_endofpacket;                                                        // cmd_demux:src13_endofpacket -> cmd_mux_013:sink0_endofpacket
	wire          cmd_demux_src14_valid;                                                              // cmd_demux:src14_valid -> cmd_mux_014:sink0_valid
	wire  [119:0] cmd_demux_src14_data;                                                               // cmd_demux:src14_data -> cmd_mux_014:sink0_data
	wire          cmd_demux_src14_ready;                                                              // cmd_mux_014:sink0_ready -> cmd_demux:src14_ready
	wire   [15:0] cmd_demux_src14_channel;                                                            // cmd_demux:src14_channel -> cmd_mux_014:sink0_channel
	wire          cmd_demux_src14_startofpacket;                                                      // cmd_demux:src14_startofpacket -> cmd_mux_014:sink0_startofpacket
	wire          cmd_demux_src14_endofpacket;                                                        // cmd_demux:src14_endofpacket -> cmd_mux_014:sink0_endofpacket
	wire          cmd_demux_src15_valid;                                                              // cmd_demux:src15_valid -> cmd_mux_015:sink0_valid
	wire  [119:0] cmd_demux_src15_data;                                                               // cmd_demux:src15_data -> cmd_mux_015:sink0_data
	wire          cmd_demux_src15_ready;                                                              // cmd_mux_015:sink0_ready -> cmd_demux:src15_ready
	wire   [15:0] cmd_demux_src15_channel;                                                            // cmd_demux:src15_channel -> cmd_mux_015:sink0_channel
	wire          cmd_demux_src15_startofpacket;                                                      // cmd_demux:src15_startofpacket -> cmd_mux_015:sink0_startofpacket
	wire          cmd_demux_src15_endofpacket;                                                        // cmd_demux:src15_endofpacket -> cmd_mux_015:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                                           // cmd_demux_001:src0_valid -> cmd_mux_008:sink1_valid
	wire  [119:0] cmd_demux_001_src0_data;                                                            // cmd_demux_001:src0_data -> cmd_mux_008:sink1_data
	wire          cmd_demux_001_src0_ready;                                                           // cmd_mux_008:sink1_ready -> cmd_demux_001:src0_ready
	wire   [15:0] cmd_demux_001_src0_channel;                                                         // cmd_demux_001:src0_channel -> cmd_mux_008:sink1_channel
	wire          cmd_demux_001_src0_startofpacket;                                                   // cmd_demux_001:src0_startofpacket -> cmd_mux_008:sink1_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                                     // cmd_demux_001:src0_endofpacket -> cmd_mux_008:sink1_endofpacket
	wire          cmd_demux_001_src1_valid;                                                           // cmd_demux_001:src1_valid -> cmd_mux_013:sink1_valid
	wire  [119:0] cmd_demux_001_src1_data;                                                            // cmd_demux_001:src1_data -> cmd_mux_013:sink1_data
	wire          cmd_demux_001_src1_ready;                                                           // cmd_mux_013:sink1_ready -> cmd_demux_001:src1_ready
	wire   [15:0] cmd_demux_001_src1_channel;                                                         // cmd_demux_001:src1_channel -> cmd_mux_013:sink1_channel
	wire          cmd_demux_001_src1_startofpacket;                                                   // cmd_demux_001:src1_startofpacket -> cmd_mux_013:sink1_startofpacket
	wire          cmd_demux_001_src1_endofpacket;                                                     // cmd_demux_001:src1_endofpacket -> cmd_mux_013:sink1_endofpacket
	wire          cmd_demux_001_src2_valid;                                                           // cmd_demux_001:src2_valid -> cmd_mux_015:sink1_valid
	wire  [119:0] cmd_demux_001_src2_data;                                                            // cmd_demux_001:src2_data -> cmd_mux_015:sink1_data
	wire          cmd_demux_001_src2_ready;                                                           // cmd_mux_015:sink1_ready -> cmd_demux_001:src2_ready
	wire   [15:0] cmd_demux_001_src2_channel;                                                         // cmd_demux_001:src2_channel -> cmd_mux_015:sink1_channel
	wire          cmd_demux_001_src2_startofpacket;                                                   // cmd_demux_001:src2_startofpacket -> cmd_mux_015:sink1_startofpacket
	wire          cmd_demux_001_src2_endofpacket;                                                     // cmd_demux_001:src2_endofpacket -> cmd_mux_015:sink1_endofpacket
	wire          cmd_demux_002_src0_valid;                                                           // cmd_demux_002:src0_valid -> cmd_mux_013:sink2_valid
	wire  [119:0] cmd_demux_002_src0_data;                                                            // cmd_demux_002:src0_data -> cmd_mux_013:sink2_data
	wire          cmd_demux_002_src0_ready;                                                           // cmd_mux_013:sink2_ready -> cmd_demux_002:src0_ready
	wire   [15:0] cmd_demux_002_src0_channel;                                                         // cmd_demux_002:src0_channel -> cmd_mux_013:sink2_channel
	wire          cmd_demux_002_src0_startofpacket;                                                   // cmd_demux_002:src0_startofpacket -> cmd_mux_013:sink2_startofpacket
	wire          cmd_demux_002_src0_endofpacket;                                                     // cmd_demux_002:src0_endofpacket -> cmd_mux_013:sink2_endofpacket
	wire          cmd_demux_003_src0_valid;                                                           // cmd_demux_003:src0_valid -> cmd_mux_013:sink3_valid
	wire  [119:0] cmd_demux_003_src0_data;                                                            // cmd_demux_003:src0_data -> cmd_mux_013:sink3_data
	wire          cmd_demux_003_src0_ready;                                                           // cmd_mux_013:sink3_ready -> cmd_demux_003:src0_ready
	wire   [15:0] cmd_demux_003_src0_channel;                                                         // cmd_demux_003:src0_channel -> cmd_mux_013:sink3_channel
	wire          cmd_demux_003_src0_startofpacket;                                                   // cmd_demux_003:src0_startofpacket -> cmd_mux_013:sink3_startofpacket
	wire          cmd_demux_003_src0_endofpacket;                                                     // cmd_demux_003:src0_endofpacket -> cmd_mux_013:sink3_endofpacket
	wire          cmd_demux_004_src0_valid;                                                           // cmd_demux_004:src0_valid -> cmd_mux_014:sink1_valid
	wire  [119:0] cmd_demux_004_src0_data;                                                            // cmd_demux_004:src0_data -> cmd_mux_014:sink1_data
	wire          cmd_demux_004_src0_ready;                                                           // cmd_mux_014:sink1_ready -> cmd_demux_004:src0_ready
	wire   [15:0] cmd_demux_004_src0_channel;                                                         // cmd_demux_004:src0_channel -> cmd_mux_014:sink1_channel
	wire          cmd_demux_004_src0_startofpacket;                                                   // cmd_demux_004:src0_startofpacket -> cmd_mux_014:sink1_startofpacket
	wire          cmd_demux_004_src0_endofpacket;                                                     // cmd_demux_004:src0_endofpacket -> cmd_mux_014:sink1_endofpacket
	wire          cmd_demux_005_src0_valid;                                                           // cmd_demux_005:src0_valid -> cmd_mux_014:sink2_valid
	wire  [119:0] cmd_demux_005_src0_data;                                                            // cmd_demux_005:src0_data -> cmd_mux_014:sink2_data
	wire          cmd_demux_005_src0_ready;                                                           // cmd_mux_014:sink2_ready -> cmd_demux_005:src0_ready
	wire   [15:0] cmd_demux_005_src0_channel;                                                         // cmd_demux_005:src0_channel -> cmd_mux_014:sink2_channel
	wire          cmd_demux_005_src0_startofpacket;                                                   // cmd_demux_005:src0_startofpacket -> cmd_mux_014:sink2_startofpacket
	wire          cmd_demux_005_src0_endofpacket;                                                     // cmd_demux_005:src0_endofpacket -> cmd_mux_014:sink2_endofpacket
	wire          cmd_demux_006_src0_valid;                                                           // cmd_demux_006:src0_valid -> cmd_mux_014:sink3_valid
	wire  [119:0] cmd_demux_006_src0_data;                                                            // cmd_demux_006:src0_data -> cmd_mux_014:sink3_data
	wire          cmd_demux_006_src0_ready;                                                           // cmd_mux_014:sink3_ready -> cmd_demux_006:src0_ready
	wire   [15:0] cmd_demux_006_src0_channel;                                                         // cmd_demux_006:src0_channel -> cmd_mux_014:sink3_channel
	wire          cmd_demux_006_src0_startofpacket;                                                   // cmd_demux_006:src0_startofpacket -> cmd_mux_014:sink3_startofpacket
	wire          cmd_demux_006_src0_endofpacket;                                                     // cmd_demux_006:src0_endofpacket -> cmd_mux_014:sink3_endofpacket
	wire          cmd_demux_007_src0_valid;                                                           // cmd_demux_007:src0_valid -> cmd_mux_014:sink4_valid
	wire  [119:0] cmd_demux_007_src0_data;                                                            // cmd_demux_007:src0_data -> cmd_mux_014:sink4_data
	wire          cmd_demux_007_src0_ready;                                                           // cmd_mux_014:sink4_ready -> cmd_demux_007:src0_ready
	wire   [15:0] cmd_demux_007_src0_channel;                                                         // cmd_demux_007:src0_channel -> cmd_mux_014:sink4_channel
	wire          cmd_demux_007_src0_startofpacket;                                                   // cmd_demux_007:src0_startofpacket -> cmd_mux_014:sink4_startofpacket
	wire          cmd_demux_007_src0_endofpacket;                                                     // cmd_demux_007:src0_endofpacket -> cmd_mux_014:sink4_endofpacket
	wire          rsp_demux_src0_valid;                                                               // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [119:0] rsp_demux_src0_data;                                                                // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                                               // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire   [15:0] rsp_demux_src0_channel;                                                             // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                                                       // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                                                         // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_002_src0_valid;                                                           // rsp_demux_002:src0_valid -> rsp_mux:sink2_valid
	wire  [119:0] rsp_demux_002_src0_data;                                                            // rsp_demux_002:src0_data -> rsp_mux:sink2_data
	wire          rsp_demux_002_src0_ready;                                                           // rsp_mux:sink2_ready -> rsp_demux_002:src0_ready
	wire   [15:0] rsp_demux_002_src0_channel;                                                         // rsp_demux_002:src0_channel -> rsp_mux:sink2_channel
	wire          rsp_demux_002_src0_startofpacket;                                                   // rsp_demux_002:src0_startofpacket -> rsp_mux:sink2_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                                     // rsp_demux_002:src0_endofpacket -> rsp_mux:sink2_endofpacket
	wire          rsp_demux_003_src0_valid;                                                           // rsp_demux_003:src0_valid -> rsp_mux:sink3_valid
	wire  [119:0] rsp_demux_003_src0_data;                                                            // rsp_demux_003:src0_data -> rsp_mux:sink3_data
	wire          rsp_demux_003_src0_ready;                                                           // rsp_mux:sink3_ready -> rsp_demux_003:src0_ready
	wire   [15:0] rsp_demux_003_src0_channel;                                                         // rsp_demux_003:src0_channel -> rsp_mux:sink3_channel
	wire          rsp_demux_003_src0_startofpacket;                                                   // rsp_demux_003:src0_startofpacket -> rsp_mux:sink3_startofpacket
	wire          rsp_demux_003_src0_endofpacket;                                                     // rsp_demux_003:src0_endofpacket -> rsp_mux:sink3_endofpacket
	wire          rsp_demux_004_src0_valid;                                                           // rsp_demux_004:src0_valid -> rsp_mux:sink4_valid
	wire  [119:0] rsp_demux_004_src0_data;                                                            // rsp_demux_004:src0_data -> rsp_mux:sink4_data
	wire          rsp_demux_004_src0_ready;                                                           // rsp_mux:sink4_ready -> rsp_demux_004:src0_ready
	wire   [15:0] rsp_demux_004_src0_channel;                                                         // rsp_demux_004:src0_channel -> rsp_mux:sink4_channel
	wire          rsp_demux_004_src0_startofpacket;                                                   // rsp_demux_004:src0_startofpacket -> rsp_mux:sink4_startofpacket
	wire          rsp_demux_004_src0_endofpacket;                                                     // rsp_demux_004:src0_endofpacket -> rsp_mux:sink4_endofpacket
	wire          rsp_demux_005_src0_valid;                                                           // rsp_demux_005:src0_valid -> rsp_mux:sink5_valid
	wire  [119:0] rsp_demux_005_src0_data;                                                            // rsp_demux_005:src0_data -> rsp_mux:sink5_data
	wire          rsp_demux_005_src0_ready;                                                           // rsp_mux:sink5_ready -> rsp_demux_005:src0_ready
	wire   [15:0] rsp_demux_005_src0_channel;                                                         // rsp_demux_005:src0_channel -> rsp_mux:sink5_channel
	wire          rsp_demux_005_src0_startofpacket;                                                   // rsp_demux_005:src0_startofpacket -> rsp_mux:sink5_startofpacket
	wire          rsp_demux_005_src0_endofpacket;                                                     // rsp_demux_005:src0_endofpacket -> rsp_mux:sink5_endofpacket
	wire          rsp_demux_006_src0_valid;                                                           // rsp_demux_006:src0_valid -> rsp_mux:sink6_valid
	wire  [119:0] rsp_demux_006_src0_data;                                                            // rsp_demux_006:src0_data -> rsp_mux:sink6_data
	wire          rsp_demux_006_src0_ready;                                                           // rsp_mux:sink6_ready -> rsp_demux_006:src0_ready
	wire   [15:0] rsp_demux_006_src0_channel;                                                         // rsp_demux_006:src0_channel -> rsp_mux:sink6_channel
	wire          rsp_demux_006_src0_startofpacket;                                                   // rsp_demux_006:src0_startofpacket -> rsp_mux:sink6_startofpacket
	wire          rsp_demux_006_src0_endofpacket;                                                     // rsp_demux_006:src0_endofpacket -> rsp_mux:sink6_endofpacket
	wire          rsp_demux_007_src0_valid;                                                           // rsp_demux_007:src0_valid -> rsp_mux:sink7_valid
	wire  [119:0] rsp_demux_007_src0_data;                                                            // rsp_demux_007:src0_data -> rsp_mux:sink7_data
	wire          rsp_demux_007_src0_ready;                                                           // rsp_mux:sink7_ready -> rsp_demux_007:src0_ready
	wire   [15:0] rsp_demux_007_src0_channel;                                                         // rsp_demux_007:src0_channel -> rsp_mux:sink7_channel
	wire          rsp_demux_007_src0_startofpacket;                                                   // rsp_demux_007:src0_startofpacket -> rsp_mux:sink7_startofpacket
	wire          rsp_demux_007_src0_endofpacket;                                                     // rsp_demux_007:src0_endofpacket -> rsp_mux:sink7_endofpacket
	wire          rsp_demux_008_src0_valid;                                                           // rsp_demux_008:src0_valid -> rsp_mux:sink8_valid
	wire  [119:0] rsp_demux_008_src0_data;                                                            // rsp_demux_008:src0_data -> rsp_mux:sink8_data
	wire          rsp_demux_008_src0_ready;                                                           // rsp_mux:sink8_ready -> rsp_demux_008:src0_ready
	wire   [15:0] rsp_demux_008_src0_channel;                                                         // rsp_demux_008:src0_channel -> rsp_mux:sink8_channel
	wire          rsp_demux_008_src0_startofpacket;                                                   // rsp_demux_008:src0_startofpacket -> rsp_mux:sink8_startofpacket
	wire          rsp_demux_008_src0_endofpacket;                                                     // rsp_demux_008:src0_endofpacket -> rsp_mux:sink8_endofpacket
	wire          rsp_demux_008_src1_valid;                                                           // rsp_demux_008:src1_valid -> rsp_mux_001:sink0_valid
	wire  [119:0] rsp_demux_008_src1_data;                                                            // rsp_demux_008:src1_data -> rsp_mux_001:sink0_data
	wire          rsp_demux_008_src1_ready;                                                           // rsp_mux_001:sink0_ready -> rsp_demux_008:src1_ready
	wire   [15:0] rsp_demux_008_src1_channel;                                                         // rsp_demux_008:src1_channel -> rsp_mux_001:sink0_channel
	wire          rsp_demux_008_src1_startofpacket;                                                   // rsp_demux_008:src1_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          rsp_demux_008_src1_endofpacket;                                                     // rsp_demux_008:src1_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_009_src0_valid;                                                           // rsp_demux_009:src0_valid -> rsp_mux:sink9_valid
	wire  [119:0] rsp_demux_009_src0_data;                                                            // rsp_demux_009:src0_data -> rsp_mux:sink9_data
	wire          rsp_demux_009_src0_ready;                                                           // rsp_mux:sink9_ready -> rsp_demux_009:src0_ready
	wire   [15:0] rsp_demux_009_src0_channel;                                                         // rsp_demux_009:src0_channel -> rsp_mux:sink9_channel
	wire          rsp_demux_009_src0_startofpacket;                                                   // rsp_demux_009:src0_startofpacket -> rsp_mux:sink9_startofpacket
	wire          rsp_demux_009_src0_endofpacket;                                                     // rsp_demux_009:src0_endofpacket -> rsp_mux:sink9_endofpacket
	wire          rsp_demux_010_src0_valid;                                                           // rsp_demux_010:src0_valid -> rsp_mux:sink10_valid
	wire  [119:0] rsp_demux_010_src0_data;                                                            // rsp_demux_010:src0_data -> rsp_mux:sink10_data
	wire          rsp_demux_010_src0_ready;                                                           // rsp_mux:sink10_ready -> rsp_demux_010:src0_ready
	wire   [15:0] rsp_demux_010_src0_channel;                                                         // rsp_demux_010:src0_channel -> rsp_mux:sink10_channel
	wire          rsp_demux_010_src0_startofpacket;                                                   // rsp_demux_010:src0_startofpacket -> rsp_mux:sink10_startofpacket
	wire          rsp_demux_010_src0_endofpacket;                                                     // rsp_demux_010:src0_endofpacket -> rsp_mux:sink10_endofpacket
	wire          rsp_demux_011_src0_valid;                                                           // rsp_demux_011:src0_valid -> rsp_mux:sink11_valid
	wire  [119:0] rsp_demux_011_src0_data;                                                            // rsp_demux_011:src0_data -> rsp_mux:sink11_data
	wire          rsp_demux_011_src0_ready;                                                           // rsp_mux:sink11_ready -> rsp_demux_011:src0_ready
	wire   [15:0] rsp_demux_011_src0_channel;                                                         // rsp_demux_011:src0_channel -> rsp_mux:sink11_channel
	wire          rsp_demux_011_src0_startofpacket;                                                   // rsp_demux_011:src0_startofpacket -> rsp_mux:sink11_startofpacket
	wire          rsp_demux_011_src0_endofpacket;                                                     // rsp_demux_011:src0_endofpacket -> rsp_mux:sink11_endofpacket
	wire          rsp_demux_013_src0_valid;                                                           // rsp_demux_013:src0_valid -> rsp_mux:sink13_valid
	wire  [119:0] rsp_demux_013_src0_data;                                                            // rsp_demux_013:src0_data -> rsp_mux:sink13_data
	wire          rsp_demux_013_src0_ready;                                                           // rsp_mux:sink13_ready -> rsp_demux_013:src0_ready
	wire   [15:0] rsp_demux_013_src0_channel;                                                         // rsp_demux_013:src0_channel -> rsp_mux:sink13_channel
	wire          rsp_demux_013_src0_startofpacket;                                                   // rsp_demux_013:src0_startofpacket -> rsp_mux:sink13_startofpacket
	wire          rsp_demux_013_src0_endofpacket;                                                     // rsp_demux_013:src0_endofpacket -> rsp_mux:sink13_endofpacket
	wire          rsp_demux_013_src1_valid;                                                           // rsp_demux_013:src1_valid -> rsp_mux_001:sink1_valid
	wire  [119:0] rsp_demux_013_src1_data;                                                            // rsp_demux_013:src1_data -> rsp_mux_001:sink1_data
	wire          rsp_demux_013_src1_ready;                                                           // rsp_mux_001:sink1_ready -> rsp_demux_013:src1_ready
	wire   [15:0] rsp_demux_013_src1_channel;                                                         // rsp_demux_013:src1_channel -> rsp_mux_001:sink1_channel
	wire          rsp_demux_013_src1_startofpacket;                                                   // rsp_demux_013:src1_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire          rsp_demux_013_src1_endofpacket;                                                     // rsp_demux_013:src1_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire          rsp_demux_013_src2_valid;                                                           // rsp_demux_013:src2_valid -> rsp_mux_002:sink0_valid
	wire  [119:0] rsp_demux_013_src2_data;                                                            // rsp_demux_013:src2_data -> rsp_mux_002:sink0_data
	wire          rsp_demux_013_src2_ready;                                                           // rsp_mux_002:sink0_ready -> rsp_demux_013:src2_ready
	wire   [15:0] rsp_demux_013_src2_channel;                                                         // rsp_demux_013:src2_channel -> rsp_mux_002:sink0_channel
	wire          rsp_demux_013_src2_startofpacket;                                                   // rsp_demux_013:src2_startofpacket -> rsp_mux_002:sink0_startofpacket
	wire          rsp_demux_013_src2_endofpacket;                                                     // rsp_demux_013:src2_endofpacket -> rsp_mux_002:sink0_endofpacket
	wire          rsp_demux_013_src3_valid;                                                           // rsp_demux_013:src3_valid -> rsp_mux_003:sink0_valid
	wire  [119:0] rsp_demux_013_src3_data;                                                            // rsp_demux_013:src3_data -> rsp_mux_003:sink0_data
	wire          rsp_demux_013_src3_ready;                                                           // rsp_mux_003:sink0_ready -> rsp_demux_013:src3_ready
	wire   [15:0] rsp_demux_013_src3_channel;                                                         // rsp_demux_013:src3_channel -> rsp_mux_003:sink0_channel
	wire          rsp_demux_013_src3_startofpacket;                                                   // rsp_demux_013:src3_startofpacket -> rsp_mux_003:sink0_startofpacket
	wire          rsp_demux_013_src3_endofpacket;                                                     // rsp_demux_013:src3_endofpacket -> rsp_mux_003:sink0_endofpacket
	wire          rsp_demux_014_src0_valid;                                                           // rsp_demux_014:src0_valid -> rsp_mux:sink14_valid
	wire  [119:0] rsp_demux_014_src0_data;                                                            // rsp_demux_014:src0_data -> rsp_mux:sink14_data
	wire          rsp_demux_014_src0_ready;                                                           // rsp_mux:sink14_ready -> rsp_demux_014:src0_ready
	wire   [15:0] rsp_demux_014_src0_channel;                                                         // rsp_demux_014:src0_channel -> rsp_mux:sink14_channel
	wire          rsp_demux_014_src0_startofpacket;                                                   // rsp_demux_014:src0_startofpacket -> rsp_mux:sink14_startofpacket
	wire          rsp_demux_014_src0_endofpacket;                                                     // rsp_demux_014:src0_endofpacket -> rsp_mux:sink14_endofpacket
	wire          rsp_demux_014_src1_valid;                                                           // rsp_demux_014:src1_valid -> rsp_mux_004:sink0_valid
	wire  [119:0] rsp_demux_014_src1_data;                                                            // rsp_demux_014:src1_data -> rsp_mux_004:sink0_data
	wire          rsp_demux_014_src1_ready;                                                           // rsp_mux_004:sink0_ready -> rsp_demux_014:src1_ready
	wire   [15:0] rsp_demux_014_src1_channel;                                                         // rsp_demux_014:src1_channel -> rsp_mux_004:sink0_channel
	wire          rsp_demux_014_src1_startofpacket;                                                   // rsp_demux_014:src1_startofpacket -> rsp_mux_004:sink0_startofpacket
	wire          rsp_demux_014_src1_endofpacket;                                                     // rsp_demux_014:src1_endofpacket -> rsp_mux_004:sink0_endofpacket
	wire          rsp_demux_014_src2_valid;                                                           // rsp_demux_014:src2_valid -> rsp_mux_005:sink0_valid
	wire  [119:0] rsp_demux_014_src2_data;                                                            // rsp_demux_014:src2_data -> rsp_mux_005:sink0_data
	wire          rsp_demux_014_src2_ready;                                                           // rsp_mux_005:sink0_ready -> rsp_demux_014:src2_ready
	wire   [15:0] rsp_demux_014_src2_channel;                                                         // rsp_demux_014:src2_channel -> rsp_mux_005:sink0_channel
	wire          rsp_demux_014_src2_startofpacket;                                                   // rsp_demux_014:src2_startofpacket -> rsp_mux_005:sink0_startofpacket
	wire          rsp_demux_014_src2_endofpacket;                                                     // rsp_demux_014:src2_endofpacket -> rsp_mux_005:sink0_endofpacket
	wire          rsp_demux_014_src3_valid;                                                           // rsp_demux_014:src3_valid -> rsp_mux_006:sink0_valid
	wire  [119:0] rsp_demux_014_src3_data;                                                            // rsp_demux_014:src3_data -> rsp_mux_006:sink0_data
	wire          rsp_demux_014_src3_ready;                                                           // rsp_mux_006:sink0_ready -> rsp_demux_014:src3_ready
	wire   [15:0] rsp_demux_014_src3_channel;                                                         // rsp_demux_014:src3_channel -> rsp_mux_006:sink0_channel
	wire          rsp_demux_014_src3_startofpacket;                                                   // rsp_demux_014:src3_startofpacket -> rsp_mux_006:sink0_startofpacket
	wire          rsp_demux_014_src3_endofpacket;                                                     // rsp_demux_014:src3_endofpacket -> rsp_mux_006:sink0_endofpacket
	wire          rsp_demux_014_src4_valid;                                                           // rsp_demux_014:src4_valid -> rsp_mux_007:sink0_valid
	wire  [119:0] rsp_demux_014_src4_data;                                                            // rsp_demux_014:src4_data -> rsp_mux_007:sink0_data
	wire          rsp_demux_014_src4_ready;                                                           // rsp_mux_007:sink0_ready -> rsp_demux_014:src4_ready
	wire   [15:0] rsp_demux_014_src4_channel;                                                         // rsp_demux_014:src4_channel -> rsp_mux_007:sink0_channel
	wire          rsp_demux_014_src4_startofpacket;                                                   // rsp_demux_014:src4_startofpacket -> rsp_mux_007:sink0_startofpacket
	wire          rsp_demux_014_src4_endofpacket;                                                     // rsp_demux_014:src4_endofpacket -> rsp_mux_007:sink0_endofpacket
	wire          rsp_demux_015_src0_valid;                                                           // rsp_demux_015:src0_valid -> rsp_mux:sink15_valid
	wire  [119:0] rsp_demux_015_src0_data;                                                            // rsp_demux_015:src0_data -> rsp_mux:sink15_data
	wire          rsp_demux_015_src0_ready;                                                           // rsp_mux:sink15_ready -> rsp_demux_015:src0_ready
	wire   [15:0] rsp_demux_015_src0_channel;                                                         // rsp_demux_015:src0_channel -> rsp_mux:sink15_channel
	wire          rsp_demux_015_src0_startofpacket;                                                   // rsp_demux_015:src0_startofpacket -> rsp_mux:sink15_startofpacket
	wire          rsp_demux_015_src0_endofpacket;                                                     // rsp_demux_015:src0_endofpacket -> rsp_mux:sink15_endofpacket
	wire          rsp_demux_015_src1_valid;                                                           // rsp_demux_015:src1_valid -> rsp_mux_001:sink2_valid
	wire  [119:0] rsp_demux_015_src1_data;                                                            // rsp_demux_015:src1_data -> rsp_mux_001:sink2_data
	wire          rsp_demux_015_src1_ready;                                                           // rsp_mux_001:sink2_ready -> rsp_demux_015:src1_ready
	wire   [15:0] rsp_demux_015_src1_channel;                                                         // rsp_demux_015:src1_channel -> rsp_mux_001:sink2_channel
	wire          rsp_demux_015_src1_startofpacket;                                                   // rsp_demux_015:src1_startofpacket -> rsp_mux_001:sink2_startofpacket
	wire          rsp_demux_015_src1_endofpacket;                                                     // rsp_demux_015:src1_endofpacket -> rsp_mux_001:sink2_endofpacket
	wire          cmd_mux_009_src_valid;                                                              // cmd_mux_009:src_valid -> dma_M1_M2_descriptor_slave_cmd_width_adapter:in_valid
	wire  [119:0] cmd_mux_009_src_data;                                                               // cmd_mux_009:src_data -> dma_M1_M2_descriptor_slave_cmd_width_adapter:in_data
	wire          cmd_mux_009_src_ready;                                                              // dma_M1_M2_descriptor_slave_cmd_width_adapter:in_ready -> cmd_mux_009:src_ready
	wire   [15:0] cmd_mux_009_src_channel;                                                            // cmd_mux_009:src_channel -> dma_M1_M2_descriptor_slave_cmd_width_adapter:in_channel
	wire          cmd_mux_009_src_startofpacket;                                                      // cmd_mux_009:src_startofpacket -> dma_M1_M2_descriptor_slave_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_009_src_endofpacket;                                                        // cmd_mux_009:src_endofpacket -> dma_M1_M2_descriptor_slave_cmd_width_adapter:in_endofpacket
	wire          dma_m1_m2_descriptor_slave_cmd_width_adapter_src_valid;                             // dma_M1_M2_descriptor_slave_cmd_width_adapter:out_valid -> dma_M1_M2_descriptor_slave_agent:cp_valid
	wire  [227:0] dma_m1_m2_descriptor_slave_cmd_width_adapter_src_data;                              // dma_M1_M2_descriptor_slave_cmd_width_adapter:out_data -> dma_M1_M2_descriptor_slave_agent:cp_data
	wire          dma_m1_m2_descriptor_slave_cmd_width_adapter_src_ready;                             // dma_M1_M2_descriptor_slave_agent:cp_ready -> dma_M1_M2_descriptor_slave_cmd_width_adapter:out_ready
	wire   [15:0] dma_m1_m2_descriptor_slave_cmd_width_adapter_src_channel;                           // dma_M1_M2_descriptor_slave_cmd_width_adapter:out_channel -> dma_M1_M2_descriptor_slave_agent:cp_channel
	wire          dma_m1_m2_descriptor_slave_cmd_width_adapter_src_startofpacket;                     // dma_M1_M2_descriptor_slave_cmd_width_adapter:out_startofpacket -> dma_M1_M2_descriptor_slave_agent:cp_startofpacket
	wire          dma_m1_m2_descriptor_slave_cmd_width_adapter_src_endofpacket;                       // dma_M1_M2_descriptor_slave_cmd_width_adapter:out_endofpacket -> dma_M1_M2_descriptor_slave_agent:cp_endofpacket
	wire          cmd_mux_010_src_valid;                                                              // cmd_mux_010:src_valid -> dma_M2_M1_descriptor_slave_cmd_width_adapter:in_valid
	wire  [119:0] cmd_mux_010_src_data;                                                               // cmd_mux_010:src_data -> dma_M2_M1_descriptor_slave_cmd_width_adapter:in_data
	wire          cmd_mux_010_src_ready;                                                              // dma_M2_M1_descriptor_slave_cmd_width_adapter:in_ready -> cmd_mux_010:src_ready
	wire   [15:0] cmd_mux_010_src_channel;                                                            // cmd_mux_010:src_channel -> dma_M2_M1_descriptor_slave_cmd_width_adapter:in_channel
	wire          cmd_mux_010_src_startofpacket;                                                      // cmd_mux_010:src_startofpacket -> dma_M2_M1_descriptor_slave_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_010_src_endofpacket;                                                        // cmd_mux_010:src_endofpacket -> dma_M2_M1_descriptor_slave_cmd_width_adapter:in_endofpacket
	wire          dma_m2_m1_descriptor_slave_cmd_width_adapter_src_valid;                             // dma_M2_M1_descriptor_slave_cmd_width_adapter:out_valid -> dma_M2_M1_descriptor_slave_agent:cp_valid
	wire  [227:0] dma_m2_m1_descriptor_slave_cmd_width_adapter_src_data;                              // dma_M2_M1_descriptor_slave_cmd_width_adapter:out_data -> dma_M2_M1_descriptor_slave_agent:cp_data
	wire          dma_m2_m1_descriptor_slave_cmd_width_adapter_src_ready;                             // dma_M2_M1_descriptor_slave_agent:cp_ready -> dma_M2_M1_descriptor_slave_cmd_width_adapter:out_ready
	wire   [15:0] dma_m2_m1_descriptor_slave_cmd_width_adapter_src_channel;                           // dma_M2_M1_descriptor_slave_cmd_width_adapter:out_channel -> dma_M2_M1_descriptor_slave_agent:cp_channel
	wire          dma_m2_m1_descriptor_slave_cmd_width_adapter_src_startofpacket;                     // dma_M2_M1_descriptor_slave_cmd_width_adapter:out_startofpacket -> dma_M2_M1_descriptor_slave_agent:cp_startofpacket
	wire          dma_m2_m1_descriptor_slave_cmd_width_adapter_src_endofpacket;                       // dma_M2_M1_descriptor_slave_cmd_width_adapter:out_endofpacket -> dma_M2_M1_descriptor_slave_agent:cp_endofpacket
	wire          router_013_src_valid;                                                               // router_013:src_valid -> m2_ddr2_memory_avl_rsp_width_adapter:in_valid
	wire  [371:0] router_013_src_data;                                                                // router_013:src_data -> m2_ddr2_memory_avl_rsp_width_adapter:in_data
	wire          router_013_src_ready;                                                               // m2_ddr2_memory_avl_rsp_width_adapter:in_ready -> router_013:src_ready
	wire   [15:0] router_013_src_channel;                                                             // router_013:src_channel -> m2_ddr2_memory_avl_rsp_width_adapter:in_channel
	wire          router_013_src_startofpacket;                                                       // router_013:src_startofpacket -> m2_ddr2_memory_avl_rsp_width_adapter:in_startofpacket
	wire          router_013_src_endofpacket;                                                         // router_013:src_endofpacket -> m2_ddr2_memory_avl_rsp_width_adapter:in_endofpacket
	wire          m2_ddr2_memory_avl_rsp_width_adapter_src_valid;                                     // m2_ddr2_memory_avl_rsp_width_adapter:out_valid -> rsp_demux_001:sink_valid
	wire  [119:0] m2_ddr2_memory_avl_rsp_width_adapter_src_data;                                      // m2_ddr2_memory_avl_rsp_width_adapter:out_data -> rsp_demux_001:sink_data
	wire          m2_ddr2_memory_avl_rsp_width_adapter_src_ready;                                     // rsp_demux_001:sink_ready -> m2_ddr2_memory_avl_rsp_width_adapter:out_ready
	wire   [15:0] m2_ddr2_memory_avl_rsp_width_adapter_src_channel;                                   // m2_ddr2_memory_avl_rsp_width_adapter:out_channel -> rsp_demux_001:sink_channel
	wire          m2_ddr2_memory_avl_rsp_width_adapter_src_startofpacket;                             // m2_ddr2_memory_avl_rsp_width_adapter:out_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          m2_ddr2_memory_avl_rsp_width_adapter_src_endofpacket;                               // m2_ddr2_memory_avl_rsp_width_adapter:out_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          router_021_src_valid;                                                               // router_021:src_valid -> dma_M1_M2_descriptor_slave_rsp_width_adapter:in_valid
	wire  [227:0] router_021_src_data;                                                                // router_021:src_data -> dma_M1_M2_descriptor_slave_rsp_width_adapter:in_data
	wire          router_021_src_ready;                                                               // dma_M1_M2_descriptor_slave_rsp_width_adapter:in_ready -> router_021:src_ready
	wire   [15:0] router_021_src_channel;                                                             // router_021:src_channel -> dma_M1_M2_descriptor_slave_rsp_width_adapter:in_channel
	wire          router_021_src_startofpacket;                                                       // router_021:src_startofpacket -> dma_M1_M2_descriptor_slave_rsp_width_adapter:in_startofpacket
	wire          router_021_src_endofpacket;                                                         // router_021:src_endofpacket -> dma_M1_M2_descriptor_slave_rsp_width_adapter:in_endofpacket
	wire          dma_m1_m2_descriptor_slave_rsp_width_adapter_src_valid;                             // dma_M1_M2_descriptor_slave_rsp_width_adapter:out_valid -> rsp_demux_009:sink_valid
	wire  [119:0] dma_m1_m2_descriptor_slave_rsp_width_adapter_src_data;                              // dma_M1_M2_descriptor_slave_rsp_width_adapter:out_data -> rsp_demux_009:sink_data
	wire          dma_m1_m2_descriptor_slave_rsp_width_adapter_src_ready;                             // rsp_demux_009:sink_ready -> dma_M1_M2_descriptor_slave_rsp_width_adapter:out_ready
	wire   [15:0] dma_m1_m2_descriptor_slave_rsp_width_adapter_src_channel;                           // dma_M1_M2_descriptor_slave_rsp_width_adapter:out_channel -> rsp_demux_009:sink_channel
	wire          dma_m1_m2_descriptor_slave_rsp_width_adapter_src_startofpacket;                     // dma_M1_M2_descriptor_slave_rsp_width_adapter:out_startofpacket -> rsp_demux_009:sink_startofpacket
	wire          dma_m1_m2_descriptor_slave_rsp_width_adapter_src_endofpacket;                       // dma_M1_M2_descriptor_slave_rsp_width_adapter:out_endofpacket -> rsp_demux_009:sink_endofpacket
	wire          router_022_src_valid;                                                               // router_022:src_valid -> dma_M2_M1_descriptor_slave_rsp_width_adapter:in_valid
	wire  [227:0] router_022_src_data;                                                                // router_022:src_data -> dma_M2_M1_descriptor_slave_rsp_width_adapter:in_data
	wire          router_022_src_ready;                                                               // dma_M2_M1_descriptor_slave_rsp_width_adapter:in_ready -> router_022:src_ready
	wire   [15:0] router_022_src_channel;                                                             // router_022:src_channel -> dma_M2_M1_descriptor_slave_rsp_width_adapter:in_channel
	wire          router_022_src_startofpacket;                                                       // router_022:src_startofpacket -> dma_M2_M1_descriptor_slave_rsp_width_adapter:in_startofpacket
	wire          router_022_src_endofpacket;                                                         // router_022:src_endofpacket -> dma_M2_M1_descriptor_slave_rsp_width_adapter:in_endofpacket
	wire          dma_m2_m1_descriptor_slave_rsp_width_adapter_src_valid;                             // dma_M2_M1_descriptor_slave_rsp_width_adapter:out_valid -> rsp_demux_010:sink_valid
	wire  [119:0] dma_m2_m1_descriptor_slave_rsp_width_adapter_src_data;                              // dma_M2_M1_descriptor_slave_rsp_width_adapter:out_data -> rsp_demux_010:sink_data
	wire          dma_m2_m1_descriptor_slave_rsp_width_adapter_src_ready;                             // rsp_demux_010:sink_ready -> dma_M2_M1_descriptor_slave_rsp_width_adapter:out_ready
	wire   [15:0] dma_m2_m1_descriptor_slave_rsp_width_adapter_src_channel;                           // dma_M2_M1_descriptor_slave_rsp_width_adapter:out_channel -> rsp_demux_010:sink_channel
	wire          dma_m2_m1_descriptor_slave_rsp_width_adapter_src_startofpacket;                     // dma_M2_M1_descriptor_slave_rsp_width_adapter:out_startofpacket -> rsp_demux_010:sink_startofpacket
	wire          dma_m2_m1_descriptor_slave_rsp_width_adapter_src_endofpacket;                       // dma_M2_M1_descriptor_slave_rsp_width_adapter:out_endofpacket -> rsp_demux_010:sink_endofpacket
	wire          router_027_src_valid;                                                               // router_027:src_valid -> ext_flash_uas_rsp_width_adapter:in_valid
	wire  [101:0] router_027_src_data;                                                                // router_027:src_data -> ext_flash_uas_rsp_width_adapter:in_data
	wire          router_027_src_ready;                                                               // ext_flash_uas_rsp_width_adapter:in_ready -> router_027:src_ready
	wire   [15:0] router_027_src_channel;                                                             // router_027:src_channel -> ext_flash_uas_rsp_width_adapter:in_channel
	wire          router_027_src_startofpacket;                                                       // router_027:src_startofpacket -> ext_flash_uas_rsp_width_adapter:in_startofpacket
	wire          router_027_src_endofpacket;                                                         // router_027:src_endofpacket -> ext_flash_uas_rsp_width_adapter:in_endofpacket
	wire          ext_flash_uas_rsp_width_adapter_src_valid;                                          // ext_flash_uas_rsp_width_adapter:out_valid -> rsp_demux_015:sink_valid
	wire  [119:0] ext_flash_uas_rsp_width_adapter_src_data;                                           // ext_flash_uas_rsp_width_adapter:out_data -> rsp_demux_015:sink_data
	wire          ext_flash_uas_rsp_width_adapter_src_ready;                                          // rsp_demux_015:sink_ready -> ext_flash_uas_rsp_width_adapter:out_ready
	wire   [15:0] ext_flash_uas_rsp_width_adapter_src_channel;                                        // ext_flash_uas_rsp_width_adapter:out_channel -> rsp_demux_015:sink_channel
	wire          ext_flash_uas_rsp_width_adapter_src_startofpacket;                                  // ext_flash_uas_rsp_width_adapter:out_startofpacket -> rsp_demux_015:sink_startofpacket
	wire          ext_flash_uas_rsp_width_adapter_src_endofpacket;                                    // ext_flash_uas_rsp_width_adapter:out_endofpacket -> rsp_demux_015:sink_endofpacket
	wire          cmd_mux_001_src_valid;                                                              // cmd_mux_001:src_valid -> m2_ddr2_memory_avl_cmd_width_adapter:in_valid
	wire  [119:0] cmd_mux_001_src_data;                                                               // cmd_mux_001:src_data -> m2_ddr2_memory_avl_cmd_width_adapter:in_data
	wire          cmd_mux_001_src_ready;                                                              // m2_ddr2_memory_avl_cmd_width_adapter:in_ready -> cmd_mux_001:src_ready
	wire   [15:0] cmd_mux_001_src_channel;                                                            // cmd_mux_001:src_channel -> m2_ddr2_memory_avl_cmd_width_adapter:in_channel
	wire          cmd_mux_001_src_startofpacket;                                                      // cmd_mux_001:src_startofpacket -> m2_ddr2_memory_avl_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                                        // cmd_mux_001:src_endofpacket -> m2_ddr2_memory_avl_cmd_width_adapter:in_endofpacket
	wire          m2_ddr2_memory_avl_cmd_width_adapter_src_valid;                                     // m2_ddr2_memory_avl_cmd_width_adapter:out_valid -> m2_ddr2_memory_avl_burst_adapter:sink0_valid
	wire  [371:0] m2_ddr2_memory_avl_cmd_width_adapter_src_data;                                      // m2_ddr2_memory_avl_cmd_width_adapter:out_data -> m2_ddr2_memory_avl_burst_adapter:sink0_data
	wire          m2_ddr2_memory_avl_cmd_width_adapter_src_ready;                                     // m2_ddr2_memory_avl_burst_adapter:sink0_ready -> m2_ddr2_memory_avl_cmd_width_adapter:out_ready
	wire   [15:0] m2_ddr2_memory_avl_cmd_width_adapter_src_channel;                                   // m2_ddr2_memory_avl_cmd_width_adapter:out_channel -> m2_ddr2_memory_avl_burst_adapter:sink0_channel
	wire          m2_ddr2_memory_avl_cmd_width_adapter_src_startofpacket;                             // m2_ddr2_memory_avl_cmd_width_adapter:out_startofpacket -> m2_ddr2_memory_avl_burst_adapter:sink0_startofpacket
	wire          m2_ddr2_memory_avl_cmd_width_adapter_src_endofpacket;                               // m2_ddr2_memory_avl_cmd_width_adapter:out_endofpacket -> m2_ddr2_memory_avl_burst_adapter:sink0_endofpacket
	wire          cmd_mux_015_src_valid;                                                              // cmd_mux_015:src_valid -> ext_flash_uas_cmd_width_adapter:in_valid
	wire  [119:0] cmd_mux_015_src_data;                                                               // cmd_mux_015:src_data -> ext_flash_uas_cmd_width_adapter:in_data
	wire          cmd_mux_015_src_ready;                                                              // ext_flash_uas_cmd_width_adapter:in_ready -> cmd_mux_015:src_ready
	wire   [15:0] cmd_mux_015_src_channel;                                                            // cmd_mux_015:src_channel -> ext_flash_uas_cmd_width_adapter:in_channel
	wire          cmd_mux_015_src_startofpacket;                                                      // cmd_mux_015:src_startofpacket -> ext_flash_uas_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_015_src_endofpacket;                                                        // cmd_mux_015:src_endofpacket -> ext_flash_uas_cmd_width_adapter:in_endofpacket
	wire          ext_flash_uas_cmd_width_adapter_src_valid;                                          // ext_flash_uas_cmd_width_adapter:out_valid -> ext_flash_uas_burst_adapter:sink0_valid
	wire  [101:0] ext_flash_uas_cmd_width_adapter_src_data;                                           // ext_flash_uas_cmd_width_adapter:out_data -> ext_flash_uas_burst_adapter:sink0_data
	wire          ext_flash_uas_cmd_width_adapter_src_ready;                                          // ext_flash_uas_burst_adapter:sink0_ready -> ext_flash_uas_cmd_width_adapter:out_ready
	wire   [15:0] ext_flash_uas_cmd_width_adapter_src_channel;                                        // ext_flash_uas_cmd_width_adapter:out_channel -> ext_flash_uas_burst_adapter:sink0_channel
	wire          ext_flash_uas_cmd_width_adapter_src_startofpacket;                                  // ext_flash_uas_cmd_width_adapter:out_startofpacket -> ext_flash_uas_burst_adapter:sink0_startofpacket
	wire          ext_flash_uas_cmd_width_adapter_src_endofpacket;                                    // ext_flash_uas_cmd_width_adapter:out_endofpacket -> ext_flash_uas_burst_adapter:sink0_endofpacket
	wire          cmd_demux_src1_valid;                                                               // cmd_demux:src1_valid -> crosser:in_valid
	wire  [119:0] cmd_demux_src1_data;                                                                // cmd_demux:src1_data -> crosser:in_data
	wire          cmd_demux_src1_ready;                                                               // crosser:in_ready -> cmd_demux:src1_ready
	wire   [15:0] cmd_demux_src1_channel;                                                             // cmd_demux:src1_channel -> crosser:in_channel
	wire          cmd_demux_src1_startofpacket;                                                       // cmd_demux:src1_startofpacket -> crosser:in_startofpacket
	wire          cmd_demux_src1_endofpacket;                                                         // cmd_demux:src1_endofpacket -> crosser:in_endofpacket
	wire          crosser_out_valid;                                                                  // crosser:out_valid -> cmd_mux_001:sink0_valid
	wire  [119:0] crosser_out_data;                                                                   // crosser:out_data -> cmd_mux_001:sink0_data
	wire          crosser_out_ready;                                                                  // cmd_mux_001:sink0_ready -> crosser:out_ready
	wire   [15:0] crosser_out_channel;                                                                // crosser:out_channel -> cmd_mux_001:sink0_channel
	wire          crosser_out_startofpacket;                                                          // crosser:out_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          crosser_out_endofpacket;                                                            // crosser:out_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_src12_valid;                                                              // cmd_demux:src12_valid -> crosser_001:in_valid
	wire  [119:0] cmd_demux_src12_data;                                                               // cmd_demux:src12_data -> crosser_001:in_data
	wire          cmd_demux_src12_ready;                                                              // crosser_001:in_ready -> cmd_demux:src12_ready
	wire   [15:0] cmd_demux_src12_channel;                                                            // cmd_demux:src12_channel -> crosser_001:in_channel
	wire          cmd_demux_src12_startofpacket;                                                      // cmd_demux:src12_startofpacket -> crosser_001:in_startofpacket
	wire          cmd_demux_src12_endofpacket;                                                        // cmd_demux:src12_endofpacket -> crosser_001:in_endofpacket
	wire          crosser_001_out_valid;                                                              // crosser_001:out_valid -> cmd_mux_012:sink0_valid
	wire  [119:0] crosser_001_out_data;                                                               // crosser_001:out_data -> cmd_mux_012:sink0_data
	wire          crosser_001_out_ready;                                                              // cmd_mux_012:sink0_ready -> crosser_001:out_ready
	wire   [15:0] crosser_001_out_channel;                                                            // crosser_001:out_channel -> cmd_mux_012:sink0_channel
	wire          crosser_001_out_startofpacket;                                                      // crosser_001:out_startofpacket -> cmd_mux_012:sink0_startofpacket
	wire          crosser_001_out_endofpacket;                                                        // crosser_001:out_endofpacket -> cmd_mux_012:sink0_endofpacket
	wire          cmd_demux_008_src0_valid;                                                           // cmd_demux_008:src0_valid -> crosser_002:in_valid
	wire  [119:0] cmd_demux_008_src0_data;                                                            // cmd_demux_008:src0_data -> crosser_002:in_data
	wire          cmd_demux_008_src0_ready;                                                           // crosser_002:in_ready -> cmd_demux_008:src0_ready
	wire   [15:0] cmd_demux_008_src0_channel;                                                         // cmd_demux_008:src0_channel -> crosser_002:in_channel
	wire          cmd_demux_008_src0_startofpacket;                                                   // cmd_demux_008:src0_startofpacket -> crosser_002:in_startofpacket
	wire          cmd_demux_008_src0_endofpacket;                                                     // cmd_demux_008:src0_endofpacket -> crosser_002:in_endofpacket
	wire          crosser_002_out_valid;                                                              // crosser_002:out_valid -> cmd_mux_012:sink1_valid
	wire  [119:0] crosser_002_out_data;                                                               // crosser_002:out_data -> cmd_mux_012:sink1_data
	wire          crosser_002_out_ready;                                                              // cmd_mux_012:sink1_ready -> crosser_002:out_ready
	wire   [15:0] crosser_002_out_channel;                                                            // crosser_002:out_channel -> cmd_mux_012:sink1_channel
	wire          crosser_002_out_startofpacket;                                                      // crosser_002:out_startofpacket -> cmd_mux_012:sink1_startofpacket
	wire          crosser_002_out_endofpacket;                                                        // crosser_002:out_endofpacket -> cmd_mux_012:sink1_endofpacket
	wire          cmd_demux_009_src0_valid;                                                           // cmd_demux_009:src0_valid -> crosser_003:in_valid
	wire  [119:0] cmd_demux_009_src0_data;                                                            // cmd_demux_009:src0_data -> crosser_003:in_data
	wire          cmd_demux_009_src0_ready;                                                           // crosser_003:in_ready -> cmd_demux_009:src0_ready
	wire   [15:0] cmd_demux_009_src0_channel;                                                         // cmd_demux_009:src0_channel -> crosser_003:in_channel
	wire          cmd_demux_009_src0_startofpacket;                                                   // cmd_demux_009:src0_startofpacket -> crosser_003:in_startofpacket
	wire          cmd_demux_009_src0_endofpacket;                                                     // cmd_demux_009:src0_endofpacket -> crosser_003:in_endofpacket
	wire          crosser_003_out_valid;                                                              // crosser_003:out_valid -> cmd_mux_012:sink2_valid
	wire  [119:0] crosser_003_out_data;                                                               // crosser_003:out_data -> cmd_mux_012:sink2_data
	wire          crosser_003_out_ready;                                                              // cmd_mux_012:sink2_ready -> crosser_003:out_ready
	wire   [15:0] crosser_003_out_channel;                                                            // crosser_003:out_channel -> cmd_mux_012:sink2_channel
	wire          crosser_003_out_startofpacket;                                                      // crosser_003:out_startofpacket -> cmd_mux_012:sink2_startofpacket
	wire          crosser_003_out_endofpacket;                                                        // crosser_003:out_endofpacket -> cmd_mux_012:sink2_endofpacket
	wire          cmd_demux_010_src0_valid;                                                           // cmd_demux_010:src0_valid -> crosser_004:in_valid
	wire  [119:0] cmd_demux_010_src0_data;                                                            // cmd_demux_010:src0_data -> crosser_004:in_data
	wire          cmd_demux_010_src0_ready;                                                           // crosser_004:in_ready -> cmd_demux_010:src0_ready
	wire   [15:0] cmd_demux_010_src0_channel;                                                         // cmd_demux_010:src0_channel -> crosser_004:in_channel
	wire          cmd_demux_010_src0_startofpacket;                                                   // cmd_demux_010:src0_startofpacket -> crosser_004:in_startofpacket
	wire          cmd_demux_010_src0_endofpacket;                                                     // cmd_demux_010:src0_endofpacket -> crosser_004:in_endofpacket
	wire          crosser_004_out_valid;                                                              // crosser_004:out_valid -> cmd_mux_001:sink1_valid
	wire  [119:0] crosser_004_out_data;                                                               // crosser_004:out_data -> cmd_mux_001:sink1_data
	wire          crosser_004_out_ready;                                                              // cmd_mux_001:sink1_ready -> crosser_004:out_ready
	wire   [15:0] crosser_004_out_channel;                                                            // crosser_004:out_channel -> cmd_mux_001:sink1_channel
	wire          crosser_004_out_startofpacket;                                                      // crosser_004:out_startofpacket -> cmd_mux_001:sink1_startofpacket
	wire          crosser_004_out_endofpacket;                                                        // crosser_004:out_endofpacket -> cmd_mux_001:sink1_endofpacket
	wire          cmd_demux_011_src0_valid;                                                           // cmd_demux_011:src0_valid -> crosser_005:in_valid
	wire  [119:0] cmd_demux_011_src0_data;                                                            // cmd_demux_011:src0_data -> crosser_005:in_data
	wire          cmd_demux_011_src0_ready;                                                           // crosser_005:in_ready -> cmd_demux_011:src0_ready
	wire   [15:0] cmd_demux_011_src0_channel;                                                         // cmd_demux_011:src0_channel -> crosser_005:in_channel
	wire          cmd_demux_011_src0_startofpacket;                                                   // cmd_demux_011:src0_startofpacket -> crosser_005:in_startofpacket
	wire          cmd_demux_011_src0_endofpacket;                                                     // cmd_demux_011:src0_endofpacket -> crosser_005:in_endofpacket
	wire          crosser_005_out_valid;                                                              // crosser_005:out_valid -> cmd_mux_001:sink2_valid
	wire  [119:0] crosser_005_out_data;                                                               // crosser_005:out_data -> cmd_mux_001:sink2_data
	wire          crosser_005_out_ready;                                                              // cmd_mux_001:sink2_ready -> crosser_005:out_ready
	wire   [15:0] crosser_005_out_channel;                                                            // crosser_005:out_channel -> cmd_mux_001:sink2_channel
	wire          crosser_005_out_startofpacket;                                                      // crosser_005:out_startofpacket -> cmd_mux_001:sink2_startofpacket
	wire          crosser_005_out_endofpacket;                                                        // crosser_005:out_endofpacket -> cmd_mux_001:sink2_endofpacket
	wire          rsp_demux_001_src0_valid;                                                           // rsp_demux_001:src0_valid -> crosser_006:in_valid
	wire  [119:0] rsp_demux_001_src0_data;                                                            // rsp_demux_001:src0_data -> crosser_006:in_data
	wire          rsp_demux_001_src0_ready;                                                           // crosser_006:in_ready -> rsp_demux_001:src0_ready
	wire   [15:0] rsp_demux_001_src0_channel;                                                         // rsp_demux_001:src0_channel -> crosser_006:in_channel
	wire          rsp_demux_001_src0_startofpacket;                                                   // rsp_demux_001:src0_startofpacket -> crosser_006:in_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                                     // rsp_demux_001:src0_endofpacket -> crosser_006:in_endofpacket
	wire          crosser_006_out_valid;                                                              // crosser_006:out_valid -> rsp_mux:sink1_valid
	wire  [119:0] crosser_006_out_data;                                                               // crosser_006:out_data -> rsp_mux:sink1_data
	wire          crosser_006_out_ready;                                                              // rsp_mux:sink1_ready -> crosser_006:out_ready
	wire   [15:0] crosser_006_out_channel;                                                            // crosser_006:out_channel -> rsp_mux:sink1_channel
	wire          crosser_006_out_startofpacket;                                                      // crosser_006:out_startofpacket -> rsp_mux:sink1_startofpacket
	wire          crosser_006_out_endofpacket;                                                        // crosser_006:out_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_001_src1_valid;                                                           // rsp_demux_001:src1_valid -> crosser_007:in_valid
	wire  [119:0] rsp_demux_001_src1_data;                                                            // rsp_demux_001:src1_data -> crosser_007:in_data
	wire          rsp_demux_001_src1_ready;                                                           // crosser_007:in_ready -> rsp_demux_001:src1_ready
	wire   [15:0] rsp_demux_001_src1_channel;                                                         // rsp_demux_001:src1_channel -> crosser_007:in_channel
	wire          rsp_demux_001_src1_startofpacket;                                                   // rsp_demux_001:src1_startofpacket -> crosser_007:in_startofpacket
	wire          rsp_demux_001_src1_endofpacket;                                                     // rsp_demux_001:src1_endofpacket -> crosser_007:in_endofpacket
	wire          crosser_007_out_valid;                                                              // crosser_007:out_valid -> rsp_mux_010:sink0_valid
	wire  [119:0] crosser_007_out_data;                                                               // crosser_007:out_data -> rsp_mux_010:sink0_data
	wire          crosser_007_out_ready;                                                              // rsp_mux_010:sink0_ready -> crosser_007:out_ready
	wire   [15:0] crosser_007_out_channel;                                                            // crosser_007:out_channel -> rsp_mux_010:sink0_channel
	wire          crosser_007_out_startofpacket;                                                      // crosser_007:out_startofpacket -> rsp_mux_010:sink0_startofpacket
	wire          crosser_007_out_endofpacket;                                                        // crosser_007:out_endofpacket -> rsp_mux_010:sink0_endofpacket
	wire          rsp_demux_001_src2_valid;                                                           // rsp_demux_001:src2_valid -> crosser_008:in_valid
	wire  [119:0] rsp_demux_001_src2_data;                                                            // rsp_demux_001:src2_data -> crosser_008:in_data
	wire          rsp_demux_001_src2_ready;                                                           // crosser_008:in_ready -> rsp_demux_001:src2_ready
	wire   [15:0] rsp_demux_001_src2_channel;                                                         // rsp_demux_001:src2_channel -> crosser_008:in_channel
	wire          rsp_demux_001_src2_startofpacket;                                                   // rsp_demux_001:src2_startofpacket -> crosser_008:in_startofpacket
	wire          rsp_demux_001_src2_endofpacket;                                                     // rsp_demux_001:src2_endofpacket -> crosser_008:in_endofpacket
	wire          crosser_008_out_valid;                                                              // crosser_008:out_valid -> rsp_mux_011:sink0_valid
	wire  [119:0] crosser_008_out_data;                                                               // crosser_008:out_data -> rsp_mux_011:sink0_data
	wire          crosser_008_out_ready;                                                              // rsp_mux_011:sink0_ready -> crosser_008:out_ready
	wire   [15:0] crosser_008_out_channel;                                                            // crosser_008:out_channel -> rsp_mux_011:sink0_channel
	wire          crosser_008_out_startofpacket;                                                      // crosser_008:out_startofpacket -> rsp_mux_011:sink0_startofpacket
	wire          crosser_008_out_endofpacket;                                                        // crosser_008:out_endofpacket -> rsp_mux_011:sink0_endofpacket
	wire          rsp_demux_012_src0_valid;                                                           // rsp_demux_012:src0_valid -> crosser_009:in_valid
	wire  [119:0] rsp_demux_012_src0_data;                                                            // rsp_demux_012:src0_data -> crosser_009:in_data
	wire          rsp_demux_012_src0_ready;                                                           // crosser_009:in_ready -> rsp_demux_012:src0_ready
	wire   [15:0] rsp_demux_012_src0_channel;                                                         // rsp_demux_012:src0_channel -> crosser_009:in_channel
	wire          rsp_demux_012_src0_startofpacket;                                                   // rsp_demux_012:src0_startofpacket -> crosser_009:in_startofpacket
	wire          rsp_demux_012_src0_endofpacket;                                                     // rsp_demux_012:src0_endofpacket -> crosser_009:in_endofpacket
	wire          crosser_009_out_valid;                                                              // crosser_009:out_valid -> rsp_mux:sink12_valid
	wire  [119:0] crosser_009_out_data;                                                               // crosser_009:out_data -> rsp_mux:sink12_data
	wire          crosser_009_out_ready;                                                              // rsp_mux:sink12_ready -> crosser_009:out_ready
	wire   [15:0] crosser_009_out_channel;                                                            // crosser_009:out_channel -> rsp_mux:sink12_channel
	wire          crosser_009_out_startofpacket;                                                      // crosser_009:out_startofpacket -> rsp_mux:sink12_startofpacket
	wire          crosser_009_out_endofpacket;                                                        // crosser_009:out_endofpacket -> rsp_mux:sink12_endofpacket
	wire          rsp_demux_012_src1_valid;                                                           // rsp_demux_012:src1_valid -> crosser_010:in_valid
	wire  [119:0] rsp_demux_012_src1_data;                                                            // rsp_demux_012:src1_data -> crosser_010:in_data
	wire          rsp_demux_012_src1_ready;                                                           // crosser_010:in_ready -> rsp_demux_012:src1_ready
	wire   [15:0] rsp_demux_012_src1_channel;                                                         // rsp_demux_012:src1_channel -> crosser_010:in_channel
	wire          rsp_demux_012_src1_startofpacket;                                                   // rsp_demux_012:src1_startofpacket -> crosser_010:in_startofpacket
	wire          rsp_demux_012_src1_endofpacket;                                                     // rsp_demux_012:src1_endofpacket -> crosser_010:in_endofpacket
	wire          crosser_010_out_valid;                                                              // crosser_010:out_valid -> rsp_mux_008:sink0_valid
	wire  [119:0] crosser_010_out_data;                                                               // crosser_010:out_data -> rsp_mux_008:sink0_data
	wire          crosser_010_out_ready;                                                              // rsp_mux_008:sink0_ready -> crosser_010:out_ready
	wire   [15:0] crosser_010_out_channel;                                                            // crosser_010:out_channel -> rsp_mux_008:sink0_channel
	wire          crosser_010_out_startofpacket;                                                      // crosser_010:out_startofpacket -> rsp_mux_008:sink0_startofpacket
	wire          crosser_010_out_endofpacket;                                                        // crosser_010:out_endofpacket -> rsp_mux_008:sink0_endofpacket
	wire          rsp_demux_012_src2_valid;                                                           // rsp_demux_012:src2_valid -> crosser_011:in_valid
	wire  [119:0] rsp_demux_012_src2_data;                                                            // rsp_demux_012:src2_data -> crosser_011:in_data
	wire          rsp_demux_012_src2_ready;                                                           // crosser_011:in_ready -> rsp_demux_012:src2_ready
	wire   [15:0] rsp_demux_012_src2_channel;                                                         // rsp_demux_012:src2_channel -> crosser_011:in_channel
	wire          rsp_demux_012_src2_startofpacket;                                                   // rsp_demux_012:src2_startofpacket -> crosser_011:in_startofpacket
	wire          rsp_demux_012_src2_endofpacket;                                                     // rsp_demux_012:src2_endofpacket -> crosser_011:in_endofpacket
	wire          crosser_011_out_valid;                                                              // crosser_011:out_valid -> rsp_mux_009:sink0_valid
	wire  [119:0] crosser_011_out_data;                                                               // crosser_011:out_data -> rsp_mux_009:sink0_data
	wire          crosser_011_out_ready;                                                              // rsp_mux_009:sink0_ready -> crosser_011:out_ready
	wire   [15:0] crosser_011_out_channel;                                                            // crosser_011:out_channel -> rsp_mux_009:sink0_channel
	wire          crosser_011_out_startofpacket;                                                      // crosser_011:out_startofpacket -> rsp_mux_009:sink0_startofpacket
	wire          crosser_011_out_endofpacket;                                                        // crosser_011:out_endofpacket -> rsp_mux_009:sink0_endofpacket
	wire   [15:0] nios2_gen2_0_instruction_master_limiter_cmd_valid_data;                             // nios2_gen2_0_instruction_master_limiter:cmd_src_valid -> cmd_demux_001:sink_valid
	wire          jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_valid;                           // jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter:in_0_valid
	wire   [33:0] jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_data;                            // jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_src_data -> avalon_st_adapter:in_0_data
	wire          jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_ready;                           // avalon_st_adapter:in_0_ready -> jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_out_0_valid;                                                      // avalon_st_adapter:out_0_valid -> jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_out_0_data;                                                       // avalon_st_adapter:out_0_data -> jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                                      // jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                                      // avalon_st_adapter:out_0_error -> jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_sink_error
	wire          m2_ddr2_memory_avl_agent_rdata_fifo_out_valid;                                      // m2_ddr2_memory_avl_agent_rdata_fifo:out_valid -> avalon_st_adapter_001:in_0_valid
	wire  [257:0] m2_ddr2_memory_avl_agent_rdata_fifo_out_data;                                       // m2_ddr2_memory_avl_agent_rdata_fifo:out_data -> avalon_st_adapter_001:in_0_data
	wire          m2_ddr2_memory_avl_agent_rdata_fifo_out_ready;                                      // avalon_st_adapter_001:in_0_ready -> m2_ddr2_memory_avl_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_001_out_0_valid;                                                  // avalon_st_adapter_001:out_0_valid -> m2_ddr2_memory_avl_agent:rdata_fifo_sink_valid
	wire  [257:0] avalon_st_adapter_001_out_0_data;                                                   // avalon_st_adapter_001:out_0_data -> m2_ddr2_memory_avl_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_001_out_0_ready;                                                  // m2_ddr2_memory_avl_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire    [0:0] avalon_st_adapter_001_out_0_error;                                                  // avalon_st_adapter_001:out_0_error -> m2_ddr2_memory_avl_agent:rdata_fifo_sink_error
	wire          tse_mac_control_port_agent_rdata_fifo_src_valid;                                    // tse_mac_control_port_agent:rdata_fifo_src_valid -> avalon_st_adapter_002:in_0_valid
	wire   [33:0] tse_mac_control_port_agent_rdata_fifo_src_data;                                     // tse_mac_control_port_agent:rdata_fifo_src_data -> avalon_st_adapter_002:in_0_data
	wire          tse_mac_control_port_agent_rdata_fifo_src_ready;                                    // avalon_st_adapter_002:in_0_ready -> tse_mac_control_port_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_002_out_0_valid;                                                  // avalon_st_adapter_002:out_0_valid -> tse_mac_control_port_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_002_out_0_data;                                                   // avalon_st_adapter_002:out_0_data -> tse_mac_control_port_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_002_out_0_ready;                                                  // tse_mac_control_port_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire    [0:0] avalon_st_adapter_002_out_0_error;                                                  // avalon_st_adapter_002:out_0_error -> tse_mac_control_port_agent:rdata_fifo_sink_error
	wire          sysid_qsys_control_slave_agent_rdata_fifo_src_valid;                                // sysid_qsys_control_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_003:in_0_valid
	wire   [33:0] sysid_qsys_control_slave_agent_rdata_fifo_src_data;                                 // sysid_qsys_control_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_003:in_0_data
	wire          sysid_qsys_control_slave_agent_rdata_fifo_src_ready;                                // avalon_st_adapter_003:in_0_ready -> sysid_qsys_control_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_003_out_0_valid;                                                  // avalon_st_adapter_003:out_0_valid -> sysid_qsys_control_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_003_out_0_data;                                                   // avalon_st_adapter_003:out_0_data -> sysid_qsys_control_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_003_out_0_ready;                                                  // sysid_qsys_control_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_003:out_0_ready
	wire    [0:0] avalon_st_adapter_003_out_0_error;                                                  // avalon_st_adapter_003:out_0_error -> sysid_qsys_control_slave_agent:rdata_fifo_sink_error
	wire          sgdma_tx_csr_agent_rdata_fifo_src_valid;                                            // sgdma_tx_csr_agent:rdata_fifo_src_valid -> avalon_st_adapter_004:in_0_valid
	wire   [33:0] sgdma_tx_csr_agent_rdata_fifo_src_data;                                             // sgdma_tx_csr_agent:rdata_fifo_src_data -> avalon_st_adapter_004:in_0_data
	wire          sgdma_tx_csr_agent_rdata_fifo_src_ready;                                            // avalon_st_adapter_004:in_0_ready -> sgdma_tx_csr_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_004_out_0_valid;                                                  // avalon_st_adapter_004:out_0_valid -> sgdma_tx_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_004_out_0_data;                                                   // avalon_st_adapter_004:out_0_data -> sgdma_tx_csr_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_004_out_0_ready;                                                  // sgdma_tx_csr_agent:rdata_fifo_sink_ready -> avalon_st_adapter_004:out_0_ready
	wire    [0:0] avalon_st_adapter_004_out_0_error;                                                  // avalon_st_adapter_004:out_0_error -> sgdma_tx_csr_agent:rdata_fifo_sink_error
	wire          sgdma_rx_csr_agent_rdata_fifo_src_valid;                                            // sgdma_rx_csr_agent:rdata_fifo_src_valid -> avalon_st_adapter_005:in_0_valid
	wire   [33:0] sgdma_rx_csr_agent_rdata_fifo_src_data;                                             // sgdma_rx_csr_agent:rdata_fifo_src_data -> avalon_st_adapter_005:in_0_data
	wire          sgdma_rx_csr_agent_rdata_fifo_src_ready;                                            // avalon_st_adapter_005:in_0_ready -> sgdma_rx_csr_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_005_out_0_valid;                                                  // avalon_st_adapter_005:out_0_valid -> sgdma_rx_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_005_out_0_data;                                                   // avalon_st_adapter_005:out_0_data -> sgdma_rx_csr_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_005_out_0_ready;                                                  // sgdma_rx_csr_agent:rdata_fifo_sink_ready -> avalon_st_adapter_005:out_0_ready
	wire    [0:0] avalon_st_adapter_005_out_0_error;                                                  // avalon_st_adapter_005:out_0_error -> sgdma_rx_csr_agent:rdata_fifo_sink_error
	wire          dma_m1_m2_csr_agent_rdata_fifo_src_valid;                                           // dma_M1_M2_csr_agent:rdata_fifo_src_valid -> avalon_st_adapter_006:in_0_valid
	wire   [33:0] dma_m1_m2_csr_agent_rdata_fifo_src_data;                                            // dma_M1_M2_csr_agent:rdata_fifo_src_data -> avalon_st_adapter_006:in_0_data
	wire          dma_m1_m2_csr_agent_rdata_fifo_src_ready;                                           // avalon_st_adapter_006:in_0_ready -> dma_M1_M2_csr_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_006_out_0_valid;                                                  // avalon_st_adapter_006:out_0_valid -> dma_M1_M2_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_006_out_0_data;                                                   // avalon_st_adapter_006:out_0_data -> dma_M1_M2_csr_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_006_out_0_ready;                                                  // dma_M1_M2_csr_agent:rdata_fifo_sink_ready -> avalon_st_adapter_006:out_0_ready
	wire    [0:0] avalon_st_adapter_006_out_0_error;                                                  // avalon_st_adapter_006:out_0_error -> dma_M1_M2_csr_agent:rdata_fifo_sink_error
	wire          dma_m2_m1_csr_agent_rdata_fifo_src_valid;                                           // dma_M2_M1_csr_agent:rdata_fifo_src_valid -> avalon_st_adapter_007:in_0_valid
	wire   [33:0] dma_m2_m1_csr_agent_rdata_fifo_src_data;                                            // dma_M2_M1_csr_agent:rdata_fifo_src_data -> avalon_st_adapter_007:in_0_data
	wire          dma_m2_m1_csr_agent_rdata_fifo_src_ready;                                           // avalon_st_adapter_007:in_0_ready -> dma_M2_M1_csr_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_007_out_0_valid;                                                  // avalon_st_adapter_007:out_0_valid -> dma_M2_M1_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_007_out_0_data;                                                   // avalon_st_adapter_007:out_0_data -> dma_M2_M1_csr_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_007_out_0_ready;                                                  // dma_M2_M1_csr_agent:rdata_fifo_sink_ready -> avalon_st_adapter_007:out_0_ready
	wire    [0:0] avalon_st_adapter_007_out_0_error;                                                  // avalon_st_adapter_007:out_0_error -> dma_M2_M1_csr_agent:rdata_fifo_sink_error
	wire          nios2_gen2_0_debug_mem_slave_agent_rdata_fifo_src_valid;                            // nios2_gen2_0_debug_mem_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_008:in_0_valid
	wire   [33:0] nios2_gen2_0_debug_mem_slave_agent_rdata_fifo_src_data;                             // nios2_gen2_0_debug_mem_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_008:in_0_data
	wire          nios2_gen2_0_debug_mem_slave_agent_rdata_fifo_src_ready;                            // avalon_st_adapter_008:in_0_ready -> nios2_gen2_0_debug_mem_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_008_out_0_valid;                                                  // avalon_st_adapter_008:out_0_valid -> nios2_gen2_0_debug_mem_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_008_out_0_data;                                                   // avalon_st_adapter_008:out_0_data -> nios2_gen2_0_debug_mem_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_008_out_0_ready;                                                  // nios2_gen2_0_debug_mem_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_008:out_0_ready
	wire    [0:0] avalon_st_adapter_008_out_0_error;                                                  // avalon_st_adapter_008:out_0_error -> nios2_gen2_0_debug_mem_slave_agent:rdata_fifo_sink_error
	wire          dma_m1_m2_descriptor_slave_agent_rdata_fifo_out_valid;                              // dma_M1_M2_descriptor_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_009:in_0_valid
	wire  [129:0] dma_m1_m2_descriptor_slave_agent_rdata_fifo_out_data;                               // dma_M1_M2_descriptor_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_009:in_0_data
	wire          dma_m1_m2_descriptor_slave_agent_rdata_fifo_out_ready;                              // avalon_st_adapter_009:in_0_ready -> dma_M1_M2_descriptor_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_009_out_0_valid;                                                  // avalon_st_adapter_009:out_0_valid -> dma_M1_M2_descriptor_slave_agent:rdata_fifo_sink_valid
	wire  [129:0] avalon_st_adapter_009_out_0_data;                                                   // avalon_st_adapter_009:out_0_data -> dma_M1_M2_descriptor_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_009_out_0_ready;                                                  // dma_M1_M2_descriptor_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_009:out_0_ready
	wire    [0:0] avalon_st_adapter_009_out_0_error;                                                  // avalon_st_adapter_009:out_0_error -> dma_M1_M2_descriptor_slave_agent:rdata_fifo_sink_error
	wire          dma_m2_m1_descriptor_slave_agent_rdata_fifo_out_valid;                              // dma_M2_M1_descriptor_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_010:in_0_valid
	wire  [129:0] dma_m2_m1_descriptor_slave_agent_rdata_fifo_out_data;                               // dma_M2_M1_descriptor_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_010:in_0_data
	wire          dma_m2_m1_descriptor_slave_agent_rdata_fifo_out_ready;                              // avalon_st_adapter_010:in_0_ready -> dma_M2_M1_descriptor_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_010_out_0_valid;                                                  // avalon_st_adapter_010:out_0_valid -> dma_M2_M1_descriptor_slave_agent:rdata_fifo_sink_valid
	wire  [129:0] avalon_st_adapter_010_out_0_data;                                                   // avalon_st_adapter_010:out_0_data -> dma_M2_M1_descriptor_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_010_out_0_ready;                                                  // dma_M2_M1_descriptor_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_010:out_0_ready
	wire    [0:0] avalon_st_adapter_010_out_0_error;                                                  // avalon_st_adapter_010:out_0_error -> dma_M2_M1_descriptor_slave_agent:rdata_fifo_sink_error
	wire          clock_bridge_afi_50_s0_agent_rdata_fifo_src_valid;                                  // clock_bridge_afi_50_s0_agent:rdata_fifo_src_valid -> avalon_st_adapter_011:in_0_valid
	wire   [33:0] clock_bridge_afi_50_s0_agent_rdata_fifo_src_data;                                   // clock_bridge_afi_50_s0_agent:rdata_fifo_src_data -> avalon_st_adapter_011:in_0_data
	wire          clock_bridge_afi_50_s0_agent_rdata_fifo_src_ready;                                  // avalon_st_adapter_011:in_0_ready -> clock_bridge_afi_50_s0_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_011_out_0_valid;                                                  // avalon_st_adapter_011:out_0_valid -> clock_bridge_afi_50_s0_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_011_out_0_data;                                                   // avalon_st_adapter_011:out_0_data -> clock_bridge_afi_50_s0_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_011_out_0_ready;                                                  // clock_bridge_afi_50_s0_agent:rdata_fifo_sink_ready -> avalon_st_adapter_011:out_0_ready
	wire    [0:0] avalon_st_adapter_011_out_0_error;                                                  // avalon_st_adapter_011:out_0_error -> clock_bridge_afi_50_s0_agent:rdata_fifo_sink_error
	wire          m1_clock_bridge_s0_agent_rdata_fifo_out_valid;                                      // m1_clock_bridge_s0_agent_rdata_fifo:out_valid -> avalon_st_adapter_012:in_0_valid
	wire   [33:0] m1_clock_bridge_s0_agent_rdata_fifo_out_data;                                       // m1_clock_bridge_s0_agent_rdata_fifo:out_data -> avalon_st_adapter_012:in_0_data
	wire          m1_clock_bridge_s0_agent_rdata_fifo_out_ready;                                      // avalon_st_adapter_012:in_0_ready -> m1_clock_bridge_s0_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_012_out_0_valid;                                                  // avalon_st_adapter_012:out_0_valid -> m1_clock_bridge_s0_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_012_out_0_data;                                                   // avalon_st_adapter_012:out_0_data -> m1_clock_bridge_s0_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_012_out_0_ready;                                                  // m1_clock_bridge_s0_agent:rdata_fifo_sink_ready -> avalon_st_adapter_012:out_0_ready
	wire    [0:0] avalon_st_adapter_012_out_0_error;                                                  // avalon_st_adapter_012:out_0_error -> m1_clock_bridge_s0_agent:rdata_fifo_sink_error
	wire          onchip_memory_s1_agent_rdata_fifo_src_valid;                                        // onchip_memory_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_013:in_0_valid
	wire   [33:0] onchip_memory_s1_agent_rdata_fifo_src_data;                                         // onchip_memory_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_013:in_0_data
	wire          onchip_memory_s1_agent_rdata_fifo_src_ready;                                        // avalon_st_adapter_013:in_0_ready -> onchip_memory_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_013_out_0_valid;                                                  // avalon_st_adapter_013:out_0_valid -> onchip_memory_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_013_out_0_data;                                                   // avalon_st_adapter_013:out_0_data -> onchip_memory_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_013_out_0_ready;                                                  // onchip_memory_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_013:out_0_ready
	wire    [0:0] avalon_st_adapter_013_out_0_error;                                                  // avalon_st_adapter_013:out_0_error -> onchip_memory_s1_agent:rdata_fifo_sink_error
	wire          descriptor_memory_s1_agent_rdata_fifo_src_valid;                                    // descriptor_memory_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_014:in_0_valid
	wire   [33:0] descriptor_memory_s1_agent_rdata_fifo_src_data;                                     // descriptor_memory_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_014:in_0_data
	wire          descriptor_memory_s1_agent_rdata_fifo_src_ready;                                    // avalon_st_adapter_014:in_0_ready -> descriptor_memory_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_014_out_0_valid;                                                  // avalon_st_adapter_014:out_0_valid -> descriptor_memory_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_014_out_0_data;                                                   // avalon_st_adapter_014:out_0_data -> descriptor_memory_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_014_out_0_ready;                                                  // descriptor_memory_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_014:out_0_ready
	wire    [0:0] avalon_st_adapter_014_out_0_error;                                                  // avalon_st_adapter_014:out_0_error -> descriptor_memory_s1_agent:rdata_fifo_sink_error
	wire          ext_flash_uas_agent_rdata_fifo_out_valid;                                           // ext_flash_uas_agent_rdata_fifo:out_valid -> avalon_st_adapter_015:in_0_valid
	wire   [17:0] ext_flash_uas_agent_rdata_fifo_out_data;                                            // ext_flash_uas_agent_rdata_fifo:out_data -> avalon_st_adapter_015:in_0_data
	wire          ext_flash_uas_agent_rdata_fifo_out_ready;                                           // avalon_st_adapter_015:in_0_ready -> ext_flash_uas_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_015_out_0_valid;                                                  // avalon_st_adapter_015:out_0_valid -> ext_flash_uas_agent:rdata_fifo_sink_valid
	wire   [17:0] avalon_st_adapter_015_out_0_data;                                                   // avalon_st_adapter_015:out_0_data -> ext_flash_uas_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_015_out_0_ready;                                                  // ext_flash_uas_agent:rdata_fifo_sink_ready -> avalon_st_adapter_015:out_0_ready
	wire    [0:0] avalon_st_adapter_015_out_0_error;                                                  // avalon_st_adapter_015:out_0_error -> ext_flash_uas_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) nios2_gen2_0_data_master_translator (
		.clk                    (clk_100_clk_clk),                                                             //                       clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                              //                     reset.reset
		.uav_address            (nios2_gen2_0_data_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (nios2_gen2_0_data_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (nios2_gen2_0_data_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (nios2_gen2_0_data_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (nios2_gen2_0_data_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (nios2_gen2_0_data_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (nios2_gen2_0_data_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (nios2_gen2_0_data_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (nios2_gen2_0_data_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (nios2_gen2_0_data_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (nios2_gen2_0_data_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (nios2_gen2_0_data_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (nios2_gen2_0_data_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (nios2_gen2_0_data_master_byteenable),                                         //                          .byteenable
		.av_read                (nios2_gen2_0_data_master_read),                                               //                          .read
		.av_readdata            (nios2_gen2_0_data_master_readdata),                                           //                          .readdata
		.av_write               (nios2_gen2_0_data_master_write),                                              //                          .write
		.av_writedata           (nios2_gen2_0_data_master_writedata),                                          //                          .writedata
		.av_debugaccess         (nios2_gen2_0_data_master_debugaccess),                                        //                          .debugaccess
		.av_burstcount          (1'b1),                                                                        //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                        //               (terminated)
		.av_begintransfer       (1'b0),                                                                        //               (terminated)
		.av_chipselect          (1'b0),                                                                        //               (terminated)
		.av_readdatavalid       (),                                                                            //               (terminated)
		.av_lock                (1'b0),                                                                        //               (terminated)
		.uav_clken              (),                                                                            //               (terminated)
		.av_clken               (1'b1),                                                                        //               (terminated)
		.uav_response           (2'b00),                                                                       //               (terminated)
		.av_response            (),                                                                            //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                        //               (terminated)
		.av_writeresponsevalid  ()                                                                             //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (4),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (6),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (1),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) nios2_gen2_0_instruction_master_translator (
		.clk                    (clk_100_clk_clk),                                                                    //                       clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                                     //                     reset.reset
		.uav_address            (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (nios2_gen2_0_instruction_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (nios2_gen2_0_instruction_master_waitrequest),                                        //                          .waitrequest
		.av_burstcount          (nios2_gen2_0_instruction_master_burstcount),                                         //                          .burstcount
		.av_read                (nios2_gen2_0_instruction_master_read),                                               //                          .read
		.av_readdata            (nios2_gen2_0_instruction_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (nios2_gen2_0_instruction_master_readdatavalid),                                      //                          .readdatavalid
		.av_byteenable          (4'b1111),                                                                            //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                               //               (terminated)
		.av_begintransfer       (1'b0),                                                                               //               (terminated)
		.av_chipselect          (1'b0),                                                                               //               (terminated)
		.av_write               (1'b0),                                                                               //               (terminated)
		.av_writedata           (32'b00000000000000000000000000000000),                                               //               (terminated)
		.av_lock                (1'b0),                                                                               //               (terminated)
		.av_debugaccess         (1'b0),                                                                               //               (terminated)
		.uav_clken              (),                                                                                   //               (terminated)
		.av_clken               (1'b1),                                                                               //               (terminated)
		.uav_response           (2'b00),                                                                              //               (terminated)
		.av_response            (),                                                                                   //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                               //               (terminated)
		.av_writeresponsevalid  ()                                                                                    //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) sgdma_tx_m_read_translator (
		.clk                    (clk_100_clk_clk),                                                    //                       clk.clk
		.reset                  (sgdma_tx_reset_reset_bridge_in_reset_reset),                         //                     reset.reset
		.uav_address            (sgdma_tx_m_read_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (sgdma_tx_m_read_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (sgdma_tx_m_read_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (sgdma_tx_m_read_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (sgdma_tx_m_read_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (sgdma_tx_m_read_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (sgdma_tx_m_read_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (sgdma_tx_m_read_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (sgdma_tx_m_read_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (sgdma_tx_m_read_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (sgdma_tx_m_read_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (sgdma_tx_m_read_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (sgdma_tx_m_read_waitrequest),                                        //                          .waitrequest
		.av_read                (sgdma_tx_m_read_read),                                               //                          .read
		.av_readdata            (sgdma_tx_m_read_readdata),                                           //                          .readdata
		.av_readdatavalid       (sgdma_tx_m_read_readdatavalid),                                      //                          .readdatavalid
		.av_burstcount          (1'b1),                                                               //               (terminated)
		.av_byteenable          (4'b1111),                                                            //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                               //               (terminated)
		.av_begintransfer       (1'b0),                                                               //               (terminated)
		.av_chipselect          (1'b0),                                                               //               (terminated)
		.av_write               (1'b0),                                                               //               (terminated)
		.av_writedata           (32'b00000000000000000000000000000000),                               //               (terminated)
		.av_lock                (1'b0),                                                               //               (terminated)
		.av_debugaccess         (1'b0),                                                               //               (terminated)
		.uav_clken              (),                                                                   //               (terminated)
		.av_clken               (1'b1),                                                               //               (terminated)
		.uav_response           (2'b00),                                                              //               (terminated)
		.av_response            (),                                                                   //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                               //               (terminated)
		.av_writeresponsevalid  ()                                                                    //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (0),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) sgdma_rx_m_write_translator (
		.clk                    (clk_100_clk_clk),                                                     //                       clk.clk
		.reset                  (sgdma_tx_reset_reset_bridge_in_reset_reset),                          //                     reset.reset
		.uav_address            (sgdma_rx_m_write_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (sgdma_rx_m_write_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (sgdma_rx_m_write_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (sgdma_rx_m_write_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (sgdma_rx_m_write_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (sgdma_rx_m_write_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (sgdma_rx_m_write_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (sgdma_rx_m_write_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (sgdma_rx_m_write_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (sgdma_rx_m_write_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (sgdma_rx_m_write_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (sgdma_rx_m_write_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (sgdma_rx_m_write_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (sgdma_rx_m_write_byteenable),                                         //                          .byteenable
		.av_write               (sgdma_rx_m_write_write),                                              //                          .write
		.av_writedata           (sgdma_rx_m_write_writedata),                                          //                          .writedata
		.av_burstcount          (1'b1),                                                                //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                //               (terminated)
		.av_begintransfer       (1'b0),                                                                //               (terminated)
		.av_chipselect          (1'b0),                                                                //               (terminated)
		.av_read                (1'b0),                                                                //               (terminated)
		.av_readdata            (),                                                                    //               (terminated)
		.av_readdatavalid       (),                                                                    //               (terminated)
		.av_lock                (1'b0),                                                                //               (terminated)
		.av_debugaccess         (1'b0),                                                                //               (terminated)
		.uav_clken              (),                                                                    //               (terminated)
		.av_clken               (1'b1),                                                                //               (terminated)
		.uav_response           (2'b00),                                                               //               (terminated)
		.av_response            (),                                                                    //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                //               (terminated)
		.av_writeresponsevalid  ()                                                                     //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) sgdma_tx_descriptor_read_translator (
		.clk                    (clk_100_clk_clk),                                                             //                       clk.clk
		.reset                  (sgdma_tx_reset_reset_bridge_in_reset_reset),                                  //                     reset.reset
		.uav_address            (sgdma_tx_descriptor_read_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (sgdma_tx_descriptor_read_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (sgdma_tx_descriptor_read_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (sgdma_tx_descriptor_read_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (sgdma_tx_descriptor_read_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (sgdma_tx_descriptor_read_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (sgdma_tx_descriptor_read_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (sgdma_tx_descriptor_read_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (sgdma_tx_descriptor_read_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (sgdma_tx_descriptor_read_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (sgdma_tx_descriptor_read_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (sgdma_tx_descriptor_read_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (sgdma_tx_descriptor_read_waitrequest),                                        //                          .waitrequest
		.av_read                (sgdma_tx_descriptor_read_read),                                               //                          .read
		.av_readdata            (sgdma_tx_descriptor_read_readdata),                                           //                          .readdata
		.av_readdatavalid       (sgdma_tx_descriptor_read_readdatavalid),                                      //                          .readdatavalid
		.av_burstcount          (1'b1),                                                                        //               (terminated)
		.av_byteenable          (4'b1111),                                                                     //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                        //               (terminated)
		.av_begintransfer       (1'b0),                                                                        //               (terminated)
		.av_chipselect          (1'b0),                                                                        //               (terminated)
		.av_write               (1'b0),                                                                        //               (terminated)
		.av_writedata           (32'b00000000000000000000000000000000),                                        //               (terminated)
		.av_lock                (1'b0),                                                                        //               (terminated)
		.av_debugaccess         (1'b0),                                                                        //               (terminated)
		.uav_clken              (),                                                                            //               (terminated)
		.av_clken               (1'b1),                                                                        //               (terminated)
		.uav_response           (2'b00),                                                                       //               (terminated)
		.av_response            (),                                                                            //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                        //               (terminated)
		.av_writeresponsevalid  ()                                                                             //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) sgdma_rx_descriptor_read_translator (
		.clk                    (clk_100_clk_clk),                                                             //                       clk.clk
		.reset                  (sgdma_tx_reset_reset_bridge_in_reset_reset),                                  //                     reset.reset
		.uav_address            (sgdma_rx_descriptor_read_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (sgdma_rx_descriptor_read_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (sgdma_rx_descriptor_read_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (sgdma_rx_descriptor_read_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (sgdma_rx_descriptor_read_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (sgdma_rx_descriptor_read_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (sgdma_rx_descriptor_read_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (sgdma_rx_descriptor_read_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (sgdma_rx_descriptor_read_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (sgdma_rx_descriptor_read_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (sgdma_rx_descriptor_read_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (sgdma_rx_descriptor_read_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (sgdma_rx_descriptor_read_waitrequest),                                        //                          .waitrequest
		.av_read                (sgdma_rx_descriptor_read_read),                                               //                          .read
		.av_readdata            (sgdma_rx_descriptor_read_readdata),                                           //                          .readdata
		.av_readdatavalid       (sgdma_rx_descriptor_read_readdatavalid),                                      //                          .readdatavalid
		.av_burstcount          (1'b1),                                                                        //               (terminated)
		.av_byteenable          (4'b1111),                                                                     //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                        //               (terminated)
		.av_begintransfer       (1'b0),                                                                        //               (terminated)
		.av_chipselect          (1'b0),                                                                        //               (terminated)
		.av_write               (1'b0),                                                                        //               (terminated)
		.av_writedata           (32'b00000000000000000000000000000000),                                        //               (terminated)
		.av_lock                (1'b0),                                                                        //               (terminated)
		.av_debugaccess         (1'b0),                                                                        //               (terminated)
		.uav_clken              (),                                                                            //               (terminated)
		.av_clken               (1'b1),                                                                        //               (terminated)
		.uav_response           (2'b00),                                                                       //               (terminated)
		.av_response            (),                                                                            //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                        //               (terminated)
		.av_writeresponsevalid  ()                                                                             //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (0),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) sgdma_tx_descriptor_write_translator (
		.clk                    (clk_100_clk_clk),                                                              //                       clk.clk
		.reset                  (sgdma_tx_reset_reset_bridge_in_reset_reset),                                   //                     reset.reset
		.uav_address            (sgdma_tx_descriptor_write_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (sgdma_tx_descriptor_write_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (sgdma_tx_descriptor_write_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (sgdma_tx_descriptor_write_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (sgdma_tx_descriptor_write_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (sgdma_tx_descriptor_write_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (sgdma_tx_descriptor_write_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (sgdma_tx_descriptor_write_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (sgdma_tx_descriptor_write_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (sgdma_tx_descriptor_write_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (sgdma_tx_descriptor_write_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (sgdma_tx_descriptor_write_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (sgdma_tx_descriptor_write_waitrequest),                                        //                          .waitrequest
		.av_write               (sgdma_tx_descriptor_write_write),                                              //                          .write
		.av_writedata           (sgdma_tx_descriptor_write_writedata),                                          //                          .writedata
		.av_burstcount          (1'b1),                                                                         //               (terminated)
		.av_byteenable          (4'b1111),                                                                      //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                         //               (terminated)
		.av_begintransfer       (1'b0),                                                                         //               (terminated)
		.av_chipselect          (1'b0),                                                                         //               (terminated)
		.av_read                (1'b0),                                                                         //               (terminated)
		.av_readdata            (),                                                                             //               (terminated)
		.av_readdatavalid       (),                                                                             //               (terminated)
		.av_lock                (1'b0),                                                                         //               (terminated)
		.av_debugaccess         (1'b0),                                                                         //               (terminated)
		.uav_clken              (),                                                                             //               (terminated)
		.av_clken               (1'b1),                                                                         //               (terminated)
		.uav_response           (2'b00),                                                                        //               (terminated)
		.av_response            (),                                                                             //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                         //               (terminated)
		.av_writeresponsevalid  ()                                                                              //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (0),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) sgdma_rx_descriptor_write_translator (
		.clk                    (clk_100_clk_clk),                                                              //                       clk.clk
		.reset                  (sgdma_tx_reset_reset_bridge_in_reset_reset),                                   //                     reset.reset
		.uav_address            (sgdma_rx_descriptor_write_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (sgdma_rx_descriptor_write_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (sgdma_rx_descriptor_write_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (sgdma_rx_descriptor_write_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (sgdma_rx_descriptor_write_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (sgdma_rx_descriptor_write_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (sgdma_rx_descriptor_write_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (sgdma_rx_descriptor_write_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (sgdma_rx_descriptor_write_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (sgdma_rx_descriptor_write_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (sgdma_rx_descriptor_write_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (sgdma_rx_descriptor_write_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (sgdma_rx_descriptor_write_waitrequest),                                        //                          .waitrequest
		.av_write               (sgdma_rx_descriptor_write_write),                                              //                          .write
		.av_writedata           (sgdma_rx_descriptor_write_writedata),                                          //                          .writedata
		.av_burstcount          (1'b1),                                                                         //               (terminated)
		.av_byteenable          (4'b1111),                                                                      //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                         //               (terminated)
		.av_begintransfer       (1'b0),                                                                         //               (terminated)
		.av_chipselect          (1'b0),                                                                         //               (terminated)
		.av_read                (1'b0),                                                                         //               (terminated)
		.av_readdata            (),                                                                             //               (terminated)
		.av_readdatavalid       (),                                                                             //               (terminated)
		.av_lock                (1'b0),                                                                         //               (terminated)
		.av_debugaccess         (1'b0),                                                                         //               (terminated)
		.uav_clken              (),                                                                             //               (terminated)
		.av_clken               (1'b1),                                                                         //               (terminated)
		.uav_response           (2'b00),                                                                        //               (terminated)
		.av_response            (),                                                                             //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                         //               (terminated)
		.av_writeresponsevalid  ()                                                                              //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (30),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (8),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (10),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) dma_m1_m2_mm_read_translator (
		.clk                    (clk_100_clk_clk),                                                      //                       clk.clk
		.reset                  (dma_M1_M2_reset_n_reset_bridge_in_reset_reset),                        //                     reset.reset
		.uav_address            (dma_m1_m2_mm_read_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (dma_m1_m2_mm_read_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (dma_m1_m2_mm_read_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (dma_m1_m2_mm_read_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (dma_m1_m2_mm_read_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (dma_m1_m2_mm_read_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (dma_m1_m2_mm_read_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (dma_m1_m2_mm_read_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (dma_m1_m2_mm_read_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (dma_m1_m2_mm_read_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (dma_m1_m2_mm_read_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (dma_M1_M2_mm_read_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (dma_M1_M2_mm_read_waitrequest),                                        //                          .waitrequest
		.av_burstcount          (dma_M1_M2_mm_read_burstcount),                                         //                          .burstcount
		.av_byteenable          (dma_M1_M2_mm_read_byteenable),                                         //                          .byteenable
		.av_read                (dma_M1_M2_mm_read_read),                                               //                          .read
		.av_readdata            (dma_M1_M2_mm_read_readdata),                                           //                          .readdata
		.av_readdatavalid       (dma_M1_M2_mm_read_readdatavalid),                                      //                          .readdatavalid
		.av_beginbursttransfer  (1'b0),                                                                 //               (terminated)
		.av_begintransfer       (1'b0),                                                                 //               (terminated)
		.av_chipselect          (1'b0),                                                                 //               (terminated)
		.av_write               (1'b0),                                                                 //               (terminated)
		.av_writedata           (32'b00000000000000000000000000000000),                                 //               (terminated)
		.av_lock                (1'b0),                                                                 //               (terminated)
		.av_debugaccess         (1'b0),                                                                 //               (terminated)
		.uav_clken              (),                                                                     //               (terminated)
		.av_clken               (1'b1),                                                                 //               (terminated)
		.uav_response           (2'b00),                                                                //               (terminated)
		.av_response            (),                                                                     //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                 //               (terminated)
		.av_writeresponsevalid  ()                                                                      //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (30),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (8),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (10),
		.USE_READ                    (0),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) dma_m2_m1_mm_write_translator (
		.clk                    (clk_100_clk_clk),                                                       //                       clk.clk
		.reset                  (dma_M1_M2_reset_n_reset_bridge_in_reset_reset),                         //                     reset.reset
		.uav_address            (dma_m2_m1_mm_write_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (dma_m2_m1_mm_write_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (dma_m2_m1_mm_write_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (dma_m2_m1_mm_write_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (dma_m2_m1_mm_write_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (dma_m2_m1_mm_write_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (dma_m2_m1_mm_write_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (dma_m2_m1_mm_write_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (dma_m2_m1_mm_write_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (dma_m2_m1_mm_write_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (dma_m2_m1_mm_write_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (dma_M2_M1_mm_write_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (dma_M2_M1_mm_write_waitrequest),                                        //                          .waitrequest
		.av_burstcount          (dma_M2_M1_mm_write_burstcount),                                         //                          .burstcount
		.av_byteenable          (dma_M2_M1_mm_write_byteenable),                                         //                          .byteenable
		.av_write               (dma_M2_M1_mm_write_write),                                              //                          .write
		.av_writedata           (dma_M2_M1_mm_write_writedata),                                          //                          .writedata
		.av_beginbursttransfer  (1'b0),                                                                  //               (terminated)
		.av_begintransfer       (1'b0),                                                                  //               (terminated)
		.av_chipselect          (1'b0),                                                                  //               (terminated)
		.av_read                (1'b0),                                                                  //               (terminated)
		.av_readdata            (),                                                                      //               (terminated)
		.av_readdatavalid       (),                                                                      //               (terminated)
		.av_lock                (1'b0),                                                                  //               (terminated)
		.av_debugaccess         (1'b0),                                                                  //               (terminated)
		.uav_clken              (),                                                                      //               (terminated)
		.av_clken               (1'b1),                                                                  //               (terminated)
		.uav_response           (2'b00),                                                                 //               (terminated)
		.av_response            (),                                                                      //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                  //               (terminated)
		.av_writeresponsevalid  ()                                                                       //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (31),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (8),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (10),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) dma_m2_m1_mm_read_translator (
		.clk                    (clk_100_clk_clk),                                                      //                       clk.clk
		.reset                  (dma_M1_M2_reset_n_reset_bridge_in_reset_reset),                        //                     reset.reset
		.uav_address            (dma_m2_m1_mm_read_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (dma_m2_m1_mm_read_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (dma_m2_m1_mm_read_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (dma_m2_m1_mm_read_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (dma_m2_m1_mm_read_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (dma_m2_m1_mm_read_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (dma_m2_m1_mm_read_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (dma_m2_m1_mm_read_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (dma_m2_m1_mm_read_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (dma_m2_m1_mm_read_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (dma_m2_m1_mm_read_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (dma_M2_M1_mm_read_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (dma_M2_M1_mm_read_waitrequest),                                        //                          .waitrequest
		.av_burstcount          (dma_M2_M1_mm_read_burstcount),                                         //                          .burstcount
		.av_byteenable          (dma_M2_M1_mm_read_byteenable),                                         //                          .byteenable
		.av_read                (dma_M2_M1_mm_read_read),                                               //                          .read
		.av_readdata            (dma_M2_M1_mm_read_readdata),                                           //                          .readdata
		.av_readdatavalid       (dma_M2_M1_mm_read_readdatavalid),                                      //                          .readdatavalid
		.av_beginbursttransfer  (1'b0),                                                                 //               (terminated)
		.av_begintransfer       (1'b0),                                                                 //               (terminated)
		.av_chipselect          (1'b0),                                                                 //               (terminated)
		.av_write               (1'b0),                                                                 //               (terminated)
		.av_writedata           (32'b00000000000000000000000000000000),                                 //               (terminated)
		.av_lock                (1'b0),                                                                 //               (terminated)
		.av_debugaccess         (1'b0),                                                                 //               (terminated)
		.uav_clken              (),                                                                     //               (terminated)
		.av_clken               (1'b1),                                                                 //               (terminated)
		.uav_response           (2'b00),                                                                //               (terminated)
		.av_response            (),                                                                     //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                 //               (terminated)
		.av_writeresponsevalid  ()                                                                      //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (31),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (8),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (10),
		.USE_READ                    (0),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) dma_m1_m2_mm_write_translator (
		.clk                    (clk_100_clk_clk),                                                       //                       clk.clk
		.reset                  (dma_M1_M2_reset_n_reset_bridge_in_reset_reset),                         //                     reset.reset
		.uav_address            (dma_m1_m2_mm_write_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (dma_m1_m2_mm_write_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (dma_m1_m2_mm_write_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (dma_m1_m2_mm_write_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (dma_m1_m2_mm_write_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (dma_m1_m2_mm_write_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (dma_m1_m2_mm_write_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (dma_m1_m2_mm_write_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (dma_m1_m2_mm_write_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (dma_m1_m2_mm_write_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (dma_m1_m2_mm_write_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (dma_M1_M2_mm_write_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (dma_M1_M2_mm_write_waitrequest),                                        //                          .waitrequest
		.av_burstcount          (dma_M1_M2_mm_write_burstcount),                                         //                          .burstcount
		.av_byteenable          (dma_M1_M2_mm_write_byteenable),                                         //                          .byteenable
		.av_write               (dma_M1_M2_mm_write_write),                                              //                          .write
		.av_writedata           (dma_M1_M2_mm_write_writedata),                                          //                          .writedata
		.av_beginbursttransfer  (1'b0),                                                                  //               (terminated)
		.av_begintransfer       (1'b0),                                                                  //               (terminated)
		.av_chipselect          (1'b0),                                                                  //               (terminated)
		.av_read                (1'b0),                                                                  //               (terminated)
		.av_readdata            (),                                                                      //               (terminated)
		.av_readdatavalid       (),                                                                      //               (terminated)
		.av_lock                (1'b0),                                                                  //               (terminated)
		.av_debugaccess         (1'b0),                                                                  //               (terminated)
		.uav_clken              (),                                                                      //               (terminated)
		.av_clken               (1'b1),                                                                  //               (terminated)
		.uav_response           (2'b00),                                                                 //               (terminated)
		.av_response            (),                                                                      //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                  //               (terminated)
		.av_writeresponsevalid  ()                                                                       //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) jtag_uart_0_avalon_jtag_slave_translator (
		.clk                    (clk_100_clk_clk),                                      //                      clk.clk
		.reset                  (dma_M1_M2_reset_n_reset_bridge_in_reset_reset),        //                    reset.reset
		.uav_address            (jtag_uart_0_avalon_jtag_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (jtag_uart_0_avalon_jtag_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (jtag_uart_0_avalon_jtag_slave_agent_m0_read),          //                         .read
		.uav_write              (jtag_uart_0_avalon_jtag_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (jtag_uart_0_avalon_jtag_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (jtag_uart_0_avalon_jtag_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (jtag_uart_0_avalon_jtag_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (jtag_uart_0_avalon_jtag_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (jtag_uart_0_avalon_jtag_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (jtag_uart_0_avalon_jtag_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (jtag_uart_0_avalon_jtag_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (jtag_uart_0_avalon_jtag_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (jtag_uart_0_avalon_jtag_slave_write),                  //                         .write
		.av_read                (jtag_uart_0_avalon_jtag_slave_read),                   //                         .read
		.av_readdata            (jtag_uart_0_avalon_jtag_slave_readdata),               //                         .readdata
		.av_writedata           (jtag_uart_0_avalon_jtag_slave_writedata),              //                         .writedata
		.av_waitrequest         (jtag_uart_0_avalon_jtag_slave_waitrequest),            //                         .waitrequest
		.av_chipselect          (jtag_uart_0_avalon_jtag_slave_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                                     //              (terminated)
		.av_beginbursttransfer  (),                                                     //              (terminated)
		.av_burstcount          (),                                                     //              (terminated)
		.av_byteenable          (),                                                     //              (terminated)
		.av_readdatavalid       (1'b0),                                                 //              (terminated)
		.av_writebyteenable     (),                                                     //              (terminated)
		.av_lock                (),                                                     //              (terminated)
		.av_clken               (),                                                     //              (terminated)
		.uav_clken              (1'b0),                                                 //              (terminated)
		.av_debugaccess         (),                                                     //              (terminated)
		.av_outputenable        (),                                                     //              (terminated)
		.uav_response           (),                                                     //              (terminated)
		.av_response            (2'b00),                                                //              (terminated)
		.uav_writeresponsevalid (),                                                     //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                  //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (25),
		.AV_DATA_W                      (256),
		.UAV_DATA_W                     (256),
		.AV_BURSTCOUNT_W                (3),
		.AV_BYTEENABLE_W                (32),
		.UAV_BYTEENABLE_W               (32),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (8),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (32),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) m2_ddr2_memory_avl_translator (
		.clk                    (m2_ddr2_memory_afi_clk_clk),                                      //                      clk.clk
		.reset                  (m2_ddr2_memory_avl_translator_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (m2_ddr2_memory_avl_agent_m0_address),                             // avalon_universal_slave_0.address
		.uav_burstcount         (m2_ddr2_memory_avl_agent_m0_burstcount),                          //                         .burstcount
		.uav_read               (m2_ddr2_memory_avl_agent_m0_read),                                //                         .read
		.uav_write              (m2_ddr2_memory_avl_agent_m0_write),                               //                         .write
		.uav_waitrequest        (m2_ddr2_memory_avl_agent_m0_waitrequest),                         //                         .waitrequest
		.uav_readdatavalid      (m2_ddr2_memory_avl_agent_m0_readdatavalid),                       //                         .readdatavalid
		.uav_byteenable         (m2_ddr2_memory_avl_agent_m0_byteenable),                          //                         .byteenable
		.uav_readdata           (m2_ddr2_memory_avl_agent_m0_readdata),                            //                         .readdata
		.uav_writedata          (m2_ddr2_memory_avl_agent_m0_writedata),                           //                         .writedata
		.uav_lock               (m2_ddr2_memory_avl_agent_m0_lock),                                //                         .lock
		.uav_debugaccess        (m2_ddr2_memory_avl_agent_m0_debugaccess),                         //                         .debugaccess
		.av_address             (m2_ddr2_memory_avl_address),                                      //      avalon_anti_slave_0.address
		.av_write               (m2_ddr2_memory_avl_write),                                        //                         .write
		.av_read                (m2_ddr2_memory_avl_read),                                         //                         .read
		.av_readdata            (m2_ddr2_memory_avl_readdata),                                     //                         .readdata
		.av_writedata           (m2_ddr2_memory_avl_writedata),                                    //                         .writedata
		.av_beginbursttransfer  (m2_ddr2_memory_avl_beginbursttransfer),                           //                         .beginbursttransfer
		.av_burstcount          (m2_ddr2_memory_avl_burstcount),                                   //                         .burstcount
		.av_byteenable          (m2_ddr2_memory_avl_byteenable),                                   //                         .byteenable
		.av_readdatavalid       (m2_ddr2_memory_avl_readdatavalid),                                //                         .readdatavalid
		.av_waitrequest         (m2_ddr2_memory_avl_waitrequest),                                  //                         .waitrequest
		.av_begintransfer       (),                                                                //              (terminated)
		.av_writebyteenable     (),                                                                //              (terminated)
		.av_lock                (),                                                                //              (terminated)
		.av_chipselect          (),                                                                //              (terminated)
		.av_clken               (),                                                                //              (terminated)
		.uav_clken              (1'b0),                                                            //              (terminated)
		.av_debugaccess         (),                                                                //              (terminated)
		.av_outputenable        (),                                                                //              (terminated)
		.uav_response           (),                                                                //              (terminated)
		.av_response            (2'b00),                                                           //              (terminated)
		.uav_writeresponsevalid (),                                                                //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                             //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (8),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (1),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) tse_mac_control_port_translator (
		.clk                    (clk_100_clk_clk),                             //                      clk.clk
		.reset                  (sgdma_tx_reset_reset_bridge_in_reset_reset),  //                    reset.reset
		.uav_address            (tse_mac_control_port_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (tse_mac_control_port_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (tse_mac_control_port_agent_m0_read),          //                         .read
		.uav_write              (tse_mac_control_port_agent_m0_write),         //                         .write
		.uav_waitrequest        (tse_mac_control_port_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (tse_mac_control_port_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (tse_mac_control_port_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (tse_mac_control_port_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (tse_mac_control_port_agent_m0_writedata),     //                         .writedata
		.uav_lock               (tse_mac_control_port_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (tse_mac_control_port_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (tse_mac_control_port_address),                //      avalon_anti_slave_0.address
		.av_write               (tse_mac_control_port_write),                  //                         .write
		.av_read                (tse_mac_control_port_read),                   //                         .read
		.av_readdata            (tse_mac_control_port_readdata),               //                         .readdata
		.av_writedata           (tse_mac_control_port_writedata),              //                         .writedata
		.av_waitrequest         (tse_mac_control_port_waitrequest),            //                         .waitrequest
		.av_begintransfer       (),                                            //              (terminated)
		.av_beginbursttransfer  (),                                            //              (terminated)
		.av_burstcount          (),                                            //              (terminated)
		.av_byteenable          (),                                            //              (terminated)
		.av_readdatavalid       (1'b0),                                        //              (terminated)
		.av_writebyteenable     (),                                            //              (terminated)
		.av_lock                (),                                            //              (terminated)
		.av_chipselect          (),                                            //              (terminated)
		.av_clken               (),                                            //              (terminated)
		.uav_clken              (1'b0),                                        //              (terminated)
		.av_debugaccess         (),                                            //              (terminated)
		.av_outputenable        (),                                            //              (terminated)
		.uav_response           (),                                            //              (terminated)
		.av_response            (2'b00),                                       //              (terminated)
		.uav_writeresponsevalid (),                                            //              (terminated)
		.av_writeresponsevalid  (1'b0)                                         //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sysid_qsys_control_slave_translator (
		.clk                    (clk_100_clk_clk),                                 //                      clk.clk
		.reset                  (dma_M1_M2_reset_n_reset_bridge_in_reset_reset),   //                    reset.reset
		.uav_address            (sysid_qsys_control_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (sysid_qsys_control_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (sysid_qsys_control_slave_agent_m0_read),          //                         .read
		.uav_write              (sysid_qsys_control_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (sysid_qsys_control_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (sysid_qsys_control_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (sysid_qsys_control_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (sysid_qsys_control_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (sysid_qsys_control_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (sysid_qsys_control_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (sysid_qsys_control_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (sysid_qsys_control_slave_address),                //      avalon_anti_slave_0.address
		.av_readdata            (sysid_qsys_control_slave_readdata),               //                         .readdata
		.av_write               (),                                                //              (terminated)
		.av_read                (),                                                //              (terminated)
		.av_writedata           (),                                                //              (terminated)
		.av_begintransfer       (),                                                //              (terminated)
		.av_beginbursttransfer  (),                                                //              (terminated)
		.av_burstcount          (),                                                //              (terminated)
		.av_byteenable          (),                                                //              (terminated)
		.av_readdatavalid       (1'b0),                                            //              (terminated)
		.av_waitrequest         (1'b0),                                            //              (terminated)
		.av_writebyteenable     (),                                                //              (terminated)
		.av_lock                (),                                                //              (terminated)
		.av_chipselect          (),                                                //              (terminated)
		.av_clken               (),                                                //              (terminated)
		.uav_clken              (1'b0),                                            //              (terminated)
		.av_debugaccess         (),                                                //              (terminated)
		.av_outputenable        (),                                                //              (terminated)
		.uav_response           (),                                                //              (terminated)
		.av_response            (2'b00),                                           //              (terminated)
		.uav_writeresponsevalid (),                                                //              (terminated)
		.av_writeresponsevalid  (1'b0)                                             //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (4),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sgdma_tx_csr_translator (
		.clk                    (clk_100_clk_clk),                            //                      clk.clk
		.reset                  (sgdma_tx_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sgdma_tx_csr_agent_m0_address),              // avalon_universal_slave_0.address
		.uav_burstcount         (sgdma_tx_csr_agent_m0_burstcount),           //                         .burstcount
		.uav_read               (sgdma_tx_csr_agent_m0_read),                 //                         .read
		.uav_write              (sgdma_tx_csr_agent_m0_write),                //                         .write
		.uav_waitrequest        (sgdma_tx_csr_agent_m0_waitrequest),          //                         .waitrequest
		.uav_readdatavalid      (sgdma_tx_csr_agent_m0_readdatavalid),        //                         .readdatavalid
		.uav_byteenable         (sgdma_tx_csr_agent_m0_byteenable),           //                         .byteenable
		.uav_readdata           (sgdma_tx_csr_agent_m0_readdata),             //                         .readdata
		.uav_writedata          (sgdma_tx_csr_agent_m0_writedata),            //                         .writedata
		.uav_lock               (sgdma_tx_csr_agent_m0_lock),                 //                         .lock
		.uav_debugaccess        (sgdma_tx_csr_agent_m0_debugaccess),          //                         .debugaccess
		.av_address             (sgdma_tx_csr_address),                       //      avalon_anti_slave_0.address
		.av_write               (sgdma_tx_csr_write),                         //                         .write
		.av_read                (sgdma_tx_csr_read),                          //                         .read
		.av_readdata            (sgdma_tx_csr_readdata),                      //                         .readdata
		.av_writedata           (sgdma_tx_csr_writedata),                     //                         .writedata
		.av_chipselect          (sgdma_tx_csr_chipselect),                    //                         .chipselect
		.av_begintransfer       (),                                           //              (terminated)
		.av_beginbursttransfer  (),                                           //              (terminated)
		.av_burstcount          (),                                           //              (terminated)
		.av_byteenable          (),                                           //              (terminated)
		.av_readdatavalid       (1'b0),                                       //              (terminated)
		.av_waitrequest         (1'b0),                                       //              (terminated)
		.av_writebyteenable     (),                                           //              (terminated)
		.av_lock                (),                                           //              (terminated)
		.av_clken               (),                                           //              (terminated)
		.uav_clken              (1'b0),                                       //              (terminated)
		.av_debugaccess         (),                                           //              (terminated)
		.av_outputenable        (),                                           //              (terminated)
		.uav_response           (),                                           //              (terminated)
		.av_response            (2'b00),                                      //              (terminated)
		.uav_writeresponsevalid (),                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (4),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sgdma_rx_csr_translator (
		.clk                    (clk_100_clk_clk),                            //                      clk.clk
		.reset                  (sgdma_tx_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sgdma_rx_csr_agent_m0_address),              // avalon_universal_slave_0.address
		.uav_burstcount         (sgdma_rx_csr_agent_m0_burstcount),           //                         .burstcount
		.uav_read               (sgdma_rx_csr_agent_m0_read),                 //                         .read
		.uav_write              (sgdma_rx_csr_agent_m0_write),                //                         .write
		.uav_waitrequest        (sgdma_rx_csr_agent_m0_waitrequest),          //                         .waitrequest
		.uav_readdatavalid      (sgdma_rx_csr_agent_m0_readdatavalid),        //                         .readdatavalid
		.uav_byteenable         (sgdma_rx_csr_agent_m0_byteenable),           //                         .byteenable
		.uav_readdata           (sgdma_rx_csr_agent_m0_readdata),             //                         .readdata
		.uav_writedata          (sgdma_rx_csr_agent_m0_writedata),            //                         .writedata
		.uav_lock               (sgdma_rx_csr_agent_m0_lock),                 //                         .lock
		.uav_debugaccess        (sgdma_rx_csr_agent_m0_debugaccess),          //                         .debugaccess
		.av_address             (sgdma_rx_csr_address),                       //      avalon_anti_slave_0.address
		.av_write               (sgdma_rx_csr_write),                         //                         .write
		.av_read                (sgdma_rx_csr_read),                          //                         .read
		.av_readdata            (sgdma_rx_csr_readdata),                      //                         .readdata
		.av_writedata           (sgdma_rx_csr_writedata),                     //                         .writedata
		.av_chipselect          (sgdma_rx_csr_chipselect),                    //                         .chipselect
		.av_begintransfer       (),                                           //              (terminated)
		.av_beginbursttransfer  (),                                           //              (terminated)
		.av_burstcount          (),                                           //              (terminated)
		.av_byteenable          (),                                           //              (terminated)
		.av_readdatavalid       (1'b0),                                       //              (terminated)
		.av_waitrequest         (1'b0),                                       //              (terminated)
		.av_writebyteenable     (),                                           //              (terminated)
		.av_lock                (),                                           //              (terminated)
		.av_clken               (),                                           //              (terminated)
		.uav_clken              (1'b0),                                       //              (terminated)
		.av_debugaccess         (),                                           //              (terminated)
		.av_outputenable        (),                                           //              (terminated)
		.uav_response           (),                                           //              (terminated)
		.av_response            (2'b00),                                      //              (terminated)
		.uav_writeresponsevalid (),                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) dma_m1_m2_csr_translator (
		.clk                    (clk_100_clk_clk),                               //                      clk.clk
		.reset                  (dma_M1_M2_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (dma_m1_m2_csr_agent_m0_address),                // avalon_universal_slave_0.address
		.uav_burstcount         (dma_m1_m2_csr_agent_m0_burstcount),             //                         .burstcount
		.uav_read               (dma_m1_m2_csr_agent_m0_read),                   //                         .read
		.uav_write              (dma_m1_m2_csr_agent_m0_write),                  //                         .write
		.uav_waitrequest        (dma_m1_m2_csr_agent_m0_waitrequest),            //                         .waitrequest
		.uav_readdatavalid      (dma_m1_m2_csr_agent_m0_readdatavalid),          //                         .readdatavalid
		.uav_byteenable         (dma_m1_m2_csr_agent_m0_byteenable),             //                         .byteenable
		.uav_readdata           (dma_m1_m2_csr_agent_m0_readdata),               //                         .readdata
		.uav_writedata          (dma_m1_m2_csr_agent_m0_writedata),              //                         .writedata
		.uav_lock               (dma_m1_m2_csr_agent_m0_lock),                   //                         .lock
		.uav_debugaccess        (dma_m1_m2_csr_agent_m0_debugaccess),            //                         .debugaccess
		.av_address             (dma_M1_M2_csr_address),                         //      avalon_anti_slave_0.address
		.av_write               (dma_M1_M2_csr_write),                           //                         .write
		.av_read                (dma_M1_M2_csr_read),                            //                         .read
		.av_readdata            (dma_M1_M2_csr_readdata),                        //                         .readdata
		.av_writedata           (dma_M1_M2_csr_writedata),                       //                         .writedata
		.av_byteenable          (dma_M1_M2_csr_byteenable),                      //                         .byteenable
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_chipselect          (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) dma_m2_m1_csr_translator (
		.clk                    (clk_100_clk_clk),                               //                      clk.clk
		.reset                  (dma_M1_M2_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (dma_m2_m1_csr_agent_m0_address),                // avalon_universal_slave_0.address
		.uav_burstcount         (dma_m2_m1_csr_agent_m0_burstcount),             //                         .burstcount
		.uav_read               (dma_m2_m1_csr_agent_m0_read),                   //                         .read
		.uav_write              (dma_m2_m1_csr_agent_m0_write),                  //                         .write
		.uav_waitrequest        (dma_m2_m1_csr_agent_m0_waitrequest),            //                         .waitrequest
		.uav_readdatavalid      (dma_m2_m1_csr_agent_m0_readdatavalid),          //                         .readdatavalid
		.uav_byteenable         (dma_m2_m1_csr_agent_m0_byteenable),             //                         .byteenable
		.uav_readdata           (dma_m2_m1_csr_agent_m0_readdata),               //                         .readdata
		.uav_writedata          (dma_m2_m1_csr_agent_m0_writedata),              //                         .writedata
		.uav_lock               (dma_m2_m1_csr_agent_m0_lock),                   //                         .lock
		.uav_debugaccess        (dma_m2_m1_csr_agent_m0_debugaccess),            //                         .debugaccess
		.av_address             (dma_M2_M1_csr_address),                         //      avalon_anti_slave_0.address
		.av_write               (dma_M2_M1_csr_write),                           //                         .write
		.av_read                (dma_M2_M1_csr_read),                            //                         .read
		.av_readdata            (dma_M2_M1_csr_readdata),                        //                         .readdata
		.av_writedata           (dma_M2_M1_csr_writedata),                       //                         .writedata
		.av_byteenable          (dma_M2_M1_csr_byteenable),                      //                         .byteenable
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_chipselect          (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (9),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) nios2_gen2_0_debug_mem_slave_translator (
		.clk                    (clk_100_clk_clk),                                     //                      clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset),      //                    reset.reset
		.uav_address            (nios2_gen2_0_debug_mem_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (nios2_gen2_0_debug_mem_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (nios2_gen2_0_debug_mem_slave_agent_m0_read),          //                         .read
		.uav_write              (nios2_gen2_0_debug_mem_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (nios2_gen2_0_debug_mem_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (nios2_gen2_0_debug_mem_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (nios2_gen2_0_debug_mem_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (nios2_gen2_0_debug_mem_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (nios2_gen2_0_debug_mem_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (nios2_gen2_0_debug_mem_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (nios2_gen2_0_debug_mem_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (nios2_gen2_0_debug_mem_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (nios2_gen2_0_debug_mem_slave_write),                  //                         .write
		.av_read                (nios2_gen2_0_debug_mem_slave_read),                   //                         .read
		.av_readdata            (nios2_gen2_0_debug_mem_slave_readdata),               //                         .readdata
		.av_writedata           (nios2_gen2_0_debug_mem_slave_writedata),              //                         .writedata
		.av_byteenable          (nios2_gen2_0_debug_mem_slave_byteenable),             //                         .byteenable
		.av_waitrequest         (nios2_gen2_0_debug_mem_slave_waitrequest),            //                         .waitrequest
		.av_debugaccess         (nios2_gen2_0_debug_mem_slave_debugaccess),            //                         .debugaccess
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.av_chipselect          (),                                                    //              (terminated)
		.av_clken               (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (128),
		.UAV_DATA_W                     (128),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (16),
		.UAV_BYTEENABLE_W               (16),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (5),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (16),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) dma_m1_m2_descriptor_slave_translator (
		.clk                    (clk_100_clk_clk),                                                                                                                       //                      clk.clk
		.reset                  (dma_M1_M2_reset_n_reset_bridge_in_reset_reset),                                                                                         //                    reset.reset
		.uav_address            (dma_m1_m2_descriptor_slave_agent_m0_address),                                                                                           // avalon_universal_slave_0.address
		.uav_burstcount         (dma_m1_m2_descriptor_slave_agent_m0_burstcount),                                                                                        //                         .burstcount
		.uav_read               (dma_m1_m2_descriptor_slave_agent_m0_read),                                                                                              //                         .read
		.uav_write              (dma_m1_m2_descriptor_slave_agent_m0_write),                                                                                             //                         .write
		.uav_waitrequest        (dma_m1_m2_descriptor_slave_agent_m0_waitrequest),                                                                                       //                         .waitrequest
		.uav_readdatavalid      (dma_m1_m2_descriptor_slave_agent_m0_readdatavalid),                                                                                     //                         .readdatavalid
		.uav_byteenable         (dma_m1_m2_descriptor_slave_agent_m0_byteenable),                                                                                        //                         .byteenable
		.uav_readdata           (dma_m1_m2_descriptor_slave_agent_m0_readdata),                                                                                          //                         .readdata
		.uav_writedata          (dma_m1_m2_descriptor_slave_agent_m0_writedata),                                                                                         //                         .writedata
		.uav_lock               (dma_m1_m2_descriptor_slave_agent_m0_lock),                                                                                              //                         .lock
		.uav_debugaccess        (dma_m1_m2_descriptor_slave_agent_m0_debugaccess),                                                                                       //                         .debugaccess
		.av_write               (dma_M1_M2_descriptor_slave_write),                                                                                                      //      avalon_anti_slave_0.write
		.av_writedata           (dma_M1_M2_descriptor_slave_writedata),                                                                                                  //                         .writedata
		.av_byteenable          (dma_M1_M2_descriptor_slave_byteenable),                                                                                                 //                         .byteenable
		.av_waitrequest         (dma_M1_M2_descriptor_slave_waitrequest),                                                                                                //                         .waitrequest
		.av_address             (),                                                                                                                                      //              (terminated)
		.av_read                (),                                                                                                                                      //              (terminated)
		.av_readdata            (128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011011110101011011101111010101101), //              (terminated)
		.av_begintransfer       (),                                                                                                                                      //              (terminated)
		.av_beginbursttransfer  (),                                                                                                                                      //              (terminated)
		.av_burstcount          (),                                                                                                                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                                                                                                                  //              (terminated)
		.av_writebyteenable     (),                                                                                                                                      //              (terminated)
		.av_lock                (),                                                                                                                                      //              (terminated)
		.av_chipselect          (),                                                                                                                                      //              (terminated)
		.av_clken               (),                                                                                                                                      //              (terminated)
		.uav_clken              (1'b0),                                                                                                                                  //              (terminated)
		.av_debugaccess         (),                                                                                                                                      //              (terminated)
		.av_outputenable        (),                                                                                                                                      //              (terminated)
		.uav_response           (),                                                                                                                                      //              (terminated)
		.av_response            (2'b00),                                                                                                                                 //              (terminated)
		.uav_writeresponsevalid (),                                                                                                                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                                                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (128),
		.UAV_DATA_W                     (128),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (16),
		.UAV_BYTEENABLE_W               (16),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (5),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (16),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) dma_m2_m1_descriptor_slave_translator (
		.clk                    (clk_100_clk_clk),                                                                                                                       //                      clk.clk
		.reset                  (dma_M1_M2_reset_n_reset_bridge_in_reset_reset),                                                                                         //                    reset.reset
		.uav_address            (dma_m2_m1_descriptor_slave_agent_m0_address),                                                                                           // avalon_universal_slave_0.address
		.uav_burstcount         (dma_m2_m1_descriptor_slave_agent_m0_burstcount),                                                                                        //                         .burstcount
		.uav_read               (dma_m2_m1_descriptor_slave_agent_m0_read),                                                                                              //                         .read
		.uav_write              (dma_m2_m1_descriptor_slave_agent_m0_write),                                                                                             //                         .write
		.uav_waitrequest        (dma_m2_m1_descriptor_slave_agent_m0_waitrequest),                                                                                       //                         .waitrequest
		.uav_readdatavalid      (dma_m2_m1_descriptor_slave_agent_m0_readdatavalid),                                                                                     //                         .readdatavalid
		.uav_byteenable         (dma_m2_m1_descriptor_slave_agent_m0_byteenable),                                                                                        //                         .byteenable
		.uav_readdata           (dma_m2_m1_descriptor_slave_agent_m0_readdata),                                                                                          //                         .readdata
		.uav_writedata          (dma_m2_m1_descriptor_slave_agent_m0_writedata),                                                                                         //                         .writedata
		.uav_lock               (dma_m2_m1_descriptor_slave_agent_m0_lock),                                                                                              //                         .lock
		.uav_debugaccess        (dma_m2_m1_descriptor_slave_agent_m0_debugaccess),                                                                                       //                         .debugaccess
		.av_write               (dma_M2_M1_descriptor_slave_write),                                                                                                      //      avalon_anti_slave_0.write
		.av_writedata           (dma_M2_M1_descriptor_slave_writedata),                                                                                                  //                         .writedata
		.av_byteenable          (dma_M2_M1_descriptor_slave_byteenable),                                                                                                 //                         .byteenable
		.av_waitrequest         (dma_M2_M1_descriptor_slave_waitrequest),                                                                                                //                         .waitrequest
		.av_address             (),                                                                                                                                      //              (terminated)
		.av_read                (),                                                                                                                                      //              (terminated)
		.av_readdata            (128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011011110101011011101111010101101), //              (terminated)
		.av_begintransfer       (),                                                                                                                                      //              (terminated)
		.av_beginbursttransfer  (),                                                                                                                                      //              (terminated)
		.av_burstcount          (),                                                                                                                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                                                                                                                  //              (terminated)
		.av_writebyteenable     (),                                                                                                                                      //              (terminated)
		.av_lock                (),                                                                                                                                      //              (terminated)
		.av_chipselect          (),                                                                                                                                      //              (terminated)
		.av_clken               (),                                                                                                                                      //              (terminated)
		.uav_clken              (1'b0),                                                                                                                                  //              (terminated)
		.av_debugaccess         (),                                                                                                                                      //              (terminated)
		.av_outputenable        (),                                                                                                                                      //              (terminated)
		.uav_response           (),                                                                                                                                      //              (terminated)
		.av_response            (2'b00),                                                                                                                                 //              (terminated)
		.uav_writeresponsevalid (),                                                                                                                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                                                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (9),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) clock_bridge_afi_50_s0_translator (
		.clk                    (clk_100_clk_clk),                               //                      clk.clk
		.reset                  (dma_M1_M2_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (clock_bridge_afi_50_s0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (clock_bridge_afi_50_s0_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (clock_bridge_afi_50_s0_agent_m0_read),          //                         .read
		.uav_write              (clock_bridge_afi_50_s0_agent_m0_write),         //                         .write
		.uav_waitrequest        (clock_bridge_afi_50_s0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (clock_bridge_afi_50_s0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (clock_bridge_afi_50_s0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (clock_bridge_afi_50_s0_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (clock_bridge_afi_50_s0_agent_m0_writedata),     //                         .writedata
		.uav_lock               (clock_bridge_afi_50_s0_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (clock_bridge_afi_50_s0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (clock_bridge_afi_50_s0_address),                //      avalon_anti_slave_0.address
		.av_write               (clock_bridge_afi_50_s0_write),                  //                         .write
		.av_read                (clock_bridge_afi_50_s0_read),                   //                         .read
		.av_readdata            (clock_bridge_afi_50_s0_readdata),               //                         .readdata
		.av_writedata           (clock_bridge_afi_50_s0_writedata),              //                         .writedata
		.av_burstcount          (clock_bridge_afi_50_s0_burstcount),             //                         .burstcount
		.av_byteenable          (clock_bridge_afi_50_s0_byteenable),             //                         .byteenable
		.av_readdatavalid       (clock_bridge_afi_50_s0_readdatavalid),          //                         .readdatavalid
		.av_waitrequest         (clock_bridge_afi_50_s0_waitrequest),            //                         .waitrequest
		.av_debugaccess         (clock_bridge_afi_50_s0_debugaccess),            //                         .debugaccess
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_chipselect          (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (30),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (8),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (10),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) m1_clock_bridge_s0_translator (
		.clk                    (m2_ddr2_memory_afi_half_clk_clk),                      //                      clk.clk
		.reset                  (m1_clock_bridge_s0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (m1_clock_bridge_s0_agent_m0_address),                  // avalon_universal_slave_0.address
		.uav_burstcount         (m1_clock_bridge_s0_agent_m0_burstcount),               //                         .burstcount
		.uav_read               (m1_clock_bridge_s0_agent_m0_read),                     //                         .read
		.uav_write              (m1_clock_bridge_s0_agent_m0_write),                    //                         .write
		.uav_waitrequest        (m1_clock_bridge_s0_agent_m0_waitrequest),              //                         .waitrequest
		.uav_readdatavalid      (m1_clock_bridge_s0_agent_m0_readdatavalid),            //                         .readdatavalid
		.uav_byteenable         (m1_clock_bridge_s0_agent_m0_byteenable),               //                         .byteenable
		.uav_readdata           (m1_clock_bridge_s0_agent_m0_readdata),                 //                         .readdata
		.uav_writedata          (m1_clock_bridge_s0_agent_m0_writedata),                //                         .writedata
		.uav_lock               (m1_clock_bridge_s0_agent_m0_lock),                     //                         .lock
		.uav_debugaccess        (m1_clock_bridge_s0_agent_m0_debugaccess),              //                         .debugaccess
		.av_address             (m1_clock_bridge_s0_address),                           //      avalon_anti_slave_0.address
		.av_write               (m1_clock_bridge_s0_write),                             //                         .write
		.av_read                (m1_clock_bridge_s0_read),                              //                         .read
		.av_readdata            (m1_clock_bridge_s0_readdata),                          //                         .readdata
		.av_writedata           (m1_clock_bridge_s0_writedata),                         //                         .writedata
		.av_burstcount          (m1_clock_bridge_s0_burstcount),                        //                         .burstcount
		.av_byteenable          (m1_clock_bridge_s0_byteenable),                        //                         .byteenable
		.av_readdatavalid       (m1_clock_bridge_s0_readdatavalid),                     //                         .readdatavalid
		.av_waitrequest         (m1_clock_bridge_s0_waitrequest),                       //                         .waitrequest
		.av_debugaccess         (m1_clock_bridge_s0_debugaccess),                       //                         .debugaccess
		.av_begintransfer       (),                                                     //              (terminated)
		.av_beginbursttransfer  (),                                                     //              (terminated)
		.av_writebyteenable     (),                                                     //              (terminated)
		.av_lock                (),                                                     //              (terminated)
		.av_chipselect          (),                                                     //              (terminated)
		.av_clken               (),                                                     //              (terminated)
		.uav_clken              (1'b0),                                                 //              (terminated)
		.av_outputenable        (),                                                     //              (terminated)
		.uav_response           (),                                                     //              (terminated)
		.av_response            (2'b00),                                                //              (terminated)
		.uav_writeresponsevalid (),                                                     //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                  //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (18),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) onchip_memory_s1_translator (
		.clk                    (clk_100_clk_clk),                               //                      clk.clk
		.reset                  (dma_M1_M2_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (onchip_memory_s1_agent_m0_address),             // avalon_universal_slave_0.address
		.uav_burstcount         (onchip_memory_s1_agent_m0_burstcount),          //                         .burstcount
		.uav_read               (onchip_memory_s1_agent_m0_read),                //                         .read
		.uav_write              (onchip_memory_s1_agent_m0_write),               //                         .write
		.uav_waitrequest        (onchip_memory_s1_agent_m0_waitrequest),         //                         .waitrequest
		.uav_readdatavalid      (onchip_memory_s1_agent_m0_readdatavalid),       //                         .readdatavalid
		.uav_byteenable         (onchip_memory_s1_agent_m0_byteenable),          //                         .byteenable
		.uav_readdata           (onchip_memory_s1_agent_m0_readdata),            //                         .readdata
		.uav_writedata          (onchip_memory_s1_agent_m0_writedata),           //                         .writedata
		.uav_lock               (onchip_memory_s1_agent_m0_lock),                //                         .lock
		.uav_debugaccess        (onchip_memory_s1_agent_m0_debugaccess),         //                         .debugaccess
		.av_address             (onchip_memory_s1_address),                      //      avalon_anti_slave_0.address
		.av_write               (onchip_memory_s1_write),                        //                         .write
		.av_readdata            (onchip_memory_s1_readdata),                     //                         .readdata
		.av_writedata           (onchip_memory_s1_writedata),                    //                         .writedata
		.av_byteenable          (onchip_memory_s1_byteenable),                   //                         .byteenable
		.av_chipselect          (onchip_memory_s1_chipselect),                   //                         .chipselect
		.av_clken               (onchip_memory_s1_clken),                        //                         .clken
		.av_read                (),                                              //              (terminated)
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (9),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) descriptor_memory_s1_translator (
		.clk                    (clk_100_clk_clk),                             //                      clk.clk
		.reset                  (sgdma_tx_reset_reset_bridge_in_reset_reset),  //                    reset.reset
		.uav_address            (descriptor_memory_s1_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (descriptor_memory_s1_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (descriptor_memory_s1_agent_m0_read),          //                         .read
		.uav_write              (descriptor_memory_s1_agent_m0_write),         //                         .write
		.uav_waitrequest        (descriptor_memory_s1_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (descriptor_memory_s1_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (descriptor_memory_s1_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (descriptor_memory_s1_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (descriptor_memory_s1_agent_m0_writedata),     //                         .writedata
		.uav_lock               (descriptor_memory_s1_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (descriptor_memory_s1_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (descriptor_memory_s1_address),                //      avalon_anti_slave_0.address
		.av_write               (descriptor_memory_s1_write),                  //                         .write
		.av_readdata            (descriptor_memory_s1_readdata),               //                         .readdata
		.av_writedata           (descriptor_memory_s1_writedata),              //                         .writedata
		.av_byteenable          (descriptor_memory_s1_byteenable),             //                         .byteenable
		.av_chipselect          (descriptor_memory_s1_chipselect),             //                         .chipselect
		.av_clken               (descriptor_memory_s1_clken),                  //                         .clken
		.av_read                (),                                            //              (terminated)
		.av_begintransfer       (),                                            //              (terminated)
		.av_beginbursttransfer  (),                                            //              (terminated)
		.av_burstcount          (),                                            //              (terminated)
		.av_readdatavalid       (1'b0),                                        //              (terminated)
		.av_waitrequest         (1'b0),                                        //              (terminated)
		.av_writebyteenable     (),                                            //              (terminated)
		.av_lock                (),                                            //              (terminated)
		.uav_clken              (1'b0),                                        //              (terminated)
		.av_debugaccess         (),                                            //              (terminated)
		.av_outputenable        (),                                            //              (terminated)
		.uav_response           (),                                            //              (terminated)
		.av_response            (2'b00),                                       //              (terminated)
		.uav_writeresponsevalid (),                                            //              (terminated)
		.av_writeresponsevalid  (1'b0)                                         //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (26),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (16),
		.AV_BURSTCOUNT_W                (2),
		.AV_BYTEENABLE_W                (2),
		.UAV_BYTEENABLE_W               (2),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (2),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (2),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (1),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) ext_flash_uas_translator (
		.clk                    (clk_100_clk_clk),                            //                      clk.clk
		.reset                  (sgdma_tx_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (ext_flash_uas_agent_m0_address),             // avalon_universal_slave_0.address
		.uav_burstcount         (ext_flash_uas_agent_m0_burstcount),          //                         .burstcount
		.uav_read               (ext_flash_uas_agent_m0_read),                //                         .read
		.uav_write              (ext_flash_uas_agent_m0_write),               //                         .write
		.uav_waitrequest        (ext_flash_uas_agent_m0_waitrequest),         //                         .waitrequest
		.uav_readdatavalid      (ext_flash_uas_agent_m0_readdatavalid),       //                         .readdatavalid
		.uav_byteenable         (ext_flash_uas_agent_m0_byteenable),          //                         .byteenable
		.uav_readdata           (ext_flash_uas_agent_m0_readdata),            //                         .readdata
		.uav_writedata          (ext_flash_uas_agent_m0_writedata),           //                         .writedata
		.uav_lock               (ext_flash_uas_agent_m0_lock),                //                         .lock
		.uav_debugaccess        (ext_flash_uas_agent_m0_debugaccess),         //                         .debugaccess
		.av_address             (ext_flash_uas_address),                      //      avalon_anti_slave_0.address
		.av_write               (ext_flash_uas_write),                        //                         .write
		.av_read                (ext_flash_uas_read),                         //                         .read
		.av_readdata            (ext_flash_uas_readdata),                     //                         .readdata
		.av_writedata           (ext_flash_uas_writedata),                    //                         .writedata
		.av_burstcount          (ext_flash_uas_burstcount),                   //                         .burstcount
		.av_byteenable          (ext_flash_uas_byteenable),                   //                         .byteenable
		.av_readdatavalid       (ext_flash_uas_readdatavalid),                //                         .readdatavalid
		.av_waitrequest         (ext_flash_uas_waitrequest),                  //                         .waitrequest
		.av_lock                (ext_flash_uas_lock),                         //                         .lock
		.av_debugaccess         (ext_flash_uas_debugaccess),                  //                         .debugaccess
		.av_begintransfer       (),                                           //              (terminated)
		.av_beginbursttransfer  (),                                           //              (terminated)
		.av_writebyteenable     (),                                           //              (terminated)
		.av_chipselect          (),                                           //              (terminated)
		.av_clken               (),                                           //              (terminated)
		.uav_clken              (1'b0),                                       //              (terminated)
		.av_outputenable        (),                                           //              (terminated)
		.uav_response           (),                                           //              (terminated)
		.av_response            (2'b00),                                      //              (terminated)
		.uav_writeresponsevalid (),                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                        //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (119),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_QOS_H                 (98),
		.PKT_QOS_L                 (98),
		.PKT_DATA_SIDEBAND_H       (96),
		.PKT_DATA_SIDEBAND_L       (96),
		.PKT_ADDR_SIDEBAND_H       (95),
		.PKT_ADDR_SIDEBAND_L       (95),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_CACHE_H               (114),
		.PKT_CACHE_L               (111),
		.PKT_THREAD_ID_H           (107),
		.PKT_THREAD_ID_L           (107),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (102),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (106),
		.PKT_DEST_ID_L             (103),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (16),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (4),
		.BURSTWRAP_VALUE           (63),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) nios2_gen2_0_data_master_agent (
		.clk                   (clk_100_clk_clk),                                                             //       clk.clk
		.reset                 (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                              // clk_reset.reset
		.av_address            (nios2_gen2_0_data_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (nios2_gen2_0_data_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (nios2_gen2_0_data_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (nios2_gen2_0_data_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (nios2_gen2_0_data_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (nios2_gen2_0_data_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (nios2_gen2_0_data_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (nios2_gen2_0_data_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (nios2_gen2_0_data_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (nios2_gen2_0_data_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (nios2_gen2_0_data_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (nios2_gen2_0_data_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (nios2_gen2_0_data_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (nios2_gen2_0_data_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (nios2_gen2_0_data_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (nios2_gen2_0_data_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_src_valid),                                                           //        rp.valid
		.rp_data               (rsp_mux_src_data),                                                            //          .data
		.rp_channel            (rsp_mux_src_channel),                                                         //          .channel
		.rp_startofpacket      (rsp_mux_src_startofpacket),                                                   //          .startofpacket
		.rp_endofpacket        (rsp_mux_src_endofpacket),                                                     //          .endofpacket
		.rp_ready              (rsp_mux_src_ready),                                                           //          .ready
		.av_response           (),                                                                            // (terminated)
		.av_writeresponsevalid ()                                                                             // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (119),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_QOS_H                 (98),
		.PKT_QOS_L                 (98),
		.PKT_DATA_SIDEBAND_H       (96),
		.PKT_DATA_SIDEBAND_L       (96),
		.PKT_ADDR_SIDEBAND_H       (95),
		.PKT_ADDR_SIDEBAND_L       (95),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_CACHE_H               (114),
		.PKT_CACHE_L               (111),
		.PKT_THREAD_ID_H           (107),
		.PKT_THREAD_ID_L           (107),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (102),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (106),
		.PKT_DEST_ID_L             (103),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (16),
		.AV_BURSTCOUNT_W           (6),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (5),
		.BURSTWRAP_VALUE           (31),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) nios2_gen2_0_instruction_master_agent (
		.clk                   (clk_100_clk_clk),                                                                    //       clk.clk
		.reset                 (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                                     // clk_reset.reset
		.av_address            (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (nios2_gen2_0_instruction_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (nios2_gen2_0_instruction_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (nios2_gen2_0_instruction_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (nios2_gen2_0_instruction_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (nios2_gen2_0_instruction_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (nios2_gen2_0_instruction_master_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (nios2_gen2_0_instruction_master_limiter_rsp_src_data),                               //          .data
		.rp_channel            (nios2_gen2_0_instruction_master_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (nios2_gen2_0_instruction_master_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (nios2_gen2_0_instruction_master_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (nios2_gen2_0_instruction_master_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                                   // (terminated)
		.av_writeresponsevalid ()                                                                                    // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (119),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_QOS_H                 (98),
		.PKT_QOS_L                 (98),
		.PKT_DATA_SIDEBAND_H       (96),
		.PKT_DATA_SIDEBAND_L       (96),
		.PKT_ADDR_SIDEBAND_H       (95),
		.PKT_ADDR_SIDEBAND_L       (95),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_CACHE_H               (114),
		.PKT_CACHE_L               (111),
		.PKT_THREAD_ID_H           (107),
		.PKT_THREAD_ID_L           (107),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (102),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (106),
		.PKT_DEST_ID_L             (103),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (16),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (11),
		.BURSTWRAP_VALUE           (63),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) sgdma_tx_m_read_agent (
		.clk                   (clk_100_clk_clk),                                                    //       clk.clk
		.reset                 (sgdma_tx_reset_reset_bridge_in_reset_reset),                         // clk_reset.reset
		.av_address            (sgdma_tx_m_read_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (sgdma_tx_m_read_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (sgdma_tx_m_read_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (sgdma_tx_m_read_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (sgdma_tx_m_read_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (sgdma_tx_m_read_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (sgdma_tx_m_read_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (sgdma_tx_m_read_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (sgdma_tx_m_read_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (sgdma_tx_m_read_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (sgdma_tx_m_read_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (sgdma_tx_m_read_agent_cp_valid),                                     //        cp.valid
		.cp_data               (sgdma_tx_m_read_agent_cp_data),                                      //          .data
		.cp_startofpacket      (sgdma_tx_m_read_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (sgdma_tx_m_read_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (sgdma_tx_m_read_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_002_src_valid),                                              //        rp.valid
		.rp_data               (rsp_mux_002_src_data),                                               //          .data
		.rp_channel            (rsp_mux_002_src_channel),                                            //          .channel
		.rp_startofpacket      (rsp_mux_002_src_startofpacket),                                      //          .startofpacket
		.rp_endofpacket        (rsp_mux_002_src_endofpacket),                                        //          .endofpacket
		.rp_ready              (rsp_mux_002_src_ready),                                              //          .ready
		.av_response           (),                                                                   // (terminated)
		.av_writeresponsevalid ()                                                                    // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (119),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_QOS_H                 (98),
		.PKT_QOS_L                 (98),
		.PKT_DATA_SIDEBAND_H       (96),
		.PKT_DATA_SIDEBAND_L       (96),
		.PKT_ADDR_SIDEBAND_H       (95),
		.PKT_ADDR_SIDEBAND_L       (95),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_CACHE_H               (114),
		.PKT_CACHE_L               (111),
		.PKT_THREAD_ID_H           (107),
		.PKT_THREAD_ID_L           (107),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (102),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (106),
		.PKT_DEST_ID_L             (103),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (16),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (8),
		.BURSTWRAP_VALUE           (63),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) sgdma_rx_m_write_agent (
		.clk                   (clk_100_clk_clk),                                                     //       clk.clk
		.reset                 (sgdma_tx_reset_reset_bridge_in_reset_reset),                          // clk_reset.reset
		.av_address            (sgdma_rx_m_write_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (sgdma_rx_m_write_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (sgdma_rx_m_write_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (sgdma_rx_m_write_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (sgdma_rx_m_write_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (sgdma_rx_m_write_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (sgdma_rx_m_write_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (sgdma_rx_m_write_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (sgdma_rx_m_write_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (sgdma_rx_m_write_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (sgdma_rx_m_write_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (sgdma_rx_m_write_agent_cp_valid),                                     //        cp.valid
		.cp_data               (sgdma_rx_m_write_agent_cp_data),                                      //          .data
		.cp_startofpacket      (sgdma_rx_m_write_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (sgdma_rx_m_write_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (sgdma_rx_m_write_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_003_src_valid),                                               //        rp.valid
		.rp_data               (rsp_mux_003_src_data),                                                //          .data
		.rp_channel            (rsp_mux_003_src_channel),                                             //          .channel
		.rp_startofpacket      (rsp_mux_003_src_startofpacket),                                       //          .startofpacket
		.rp_endofpacket        (rsp_mux_003_src_endofpacket),                                         //          .endofpacket
		.rp_ready              (rsp_mux_003_src_ready),                                               //          .ready
		.av_response           (),                                                                    // (terminated)
		.av_writeresponsevalid ()                                                                     // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (119),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_QOS_H                 (98),
		.PKT_QOS_L                 (98),
		.PKT_DATA_SIDEBAND_H       (96),
		.PKT_DATA_SIDEBAND_L       (96),
		.PKT_ADDR_SIDEBAND_H       (95),
		.PKT_ADDR_SIDEBAND_L       (95),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_CACHE_H               (114),
		.PKT_CACHE_L               (111),
		.PKT_THREAD_ID_H           (107),
		.PKT_THREAD_ID_L           (107),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (102),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (106),
		.PKT_DEST_ID_L             (103),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (16),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (9),
		.BURSTWRAP_VALUE           (63),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) sgdma_tx_descriptor_read_agent (
		.clk                   (clk_100_clk_clk),                                                             //       clk.clk
		.reset                 (sgdma_tx_reset_reset_bridge_in_reset_reset),                                  // clk_reset.reset
		.av_address            (sgdma_tx_descriptor_read_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (sgdma_tx_descriptor_read_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (sgdma_tx_descriptor_read_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (sgdma_tx_descriptor_read_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (sgdma_tx_descriptor_read_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (sgdma_tx_descriptor_read_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (sgdma_tx_descriptor_read_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (sgdma_tx_descriptor_read_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (sgdma_tx_descriptor_read_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (sgdma_tx_descriptor_read_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (sgdma_tx_descriptor_read_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (sgdma_tx_descriptor_read_agent_cp_valid),                                     //        cp.valid
		.cp_data               (sgdma_tx_descriptor_read_agent_cp_data),                                      //          .data
		.cp_startofpacket      (sgdma_tx_descriptor_read_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (sgdma_tx_descriptor_read_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (sgdma_tx_descriptor_read_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_004_src_valid),                                                       //        rp.valid
		.rp_data               (rsp_mux_004_src_data),                                                        //          .data
		.rp_channel            (rsp_mux_004_src_channel),                                                     //          .channel
		.rp_startofpacket      (rsp_mux_004_src_startofpacket),                                               //          .startofpacket
		.rp_endofpacket        (rsp_mux_004_src_endofpacket),                                                 //          .endofpacket
		.rp_ready              (rsp_mux_004_src_ready),                                                       //          .ready
		.av_response           (),                                                                            // (terminated)
		.av_writeresponsevalid ()                                                                             // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (119),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_QOS_H                 (98),
		.PKT_QOS_L                 (98),
		.PKT_DATA_SIDEBAND_H       (96),
		.PKT_DATA_SIDEBAND_L       (96),
		.PKT_ADDR_SIDEBAND_H       (95),
		.PKT_ADDR_SIDEBAND_L       (95),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_CACHE_H               (114),
		.PKT_CACHE_L               (111),
		.PKT_THREAD_ID_H           (107),
		.PKT_THREAD_ID_L           (107),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (102),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (106),
		.PKT_DEST_ID_L             (103),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (16),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (6),
		.BURSTWRAP_VALUE           (63),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) sgdma_rx_descriptor_read_agent (
		.clk                   (clk_100_clk_clk),                                                             //       clk.clk
		.reset                 (sgdma_tx_reset_reset_bridge_in_reset_reset),                                  // clk_reset.reset
		.av_address            (sgdma_rx_descriptor_read_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (sgdma_rx_descriptor_read_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (sgdma_rx_descriptor_read_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (sgdma_rx_descriptor_read_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (sgdma_rx_descriptor_read_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (sgdma_rx_descriptor_read_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (sgdma_rx_descriptor_read_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (sgdma_rx_descriptor_read_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (sgdma_rx_descriptor_read_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (sgdma_rx_descriptor_read_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (sgdma_rx_descriptor_read_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (sgdma_rx_descriptor_read_agent_cp_valid),                                     //        cp.valid
		.cp_data               (sgdma_rx_descriptor_read_agent_cp_data),                                      //          .data
		.cp_startofpacket      (sgdma_rx_descriptor_read_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (sgdma_rx_descriptor_read_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (sgdma_rx_descriptor_read_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_005_src_valid),                                                       //        rp.valid
		.rp_data               (rsp_mux_005_src_data),                                                        //          .data
		.rp_channel            (rsp_mux_005_src_channel),                                                     //          .channel
		.rp_startofpacket      (rsp_mux_005_src_startofpacket),                                               //          .startofpacket
		.rp_endofpacket        (rsp_mux_005_src_endofpacket),                                                 //          .endofpacket
		.rp_ready              (rsp_mux_005_src_ready),                                                       //          .ready
		.av_response           (),                                                                            // (terminated)
		.av_writeresponsevalid ()                                                                             // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (119),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_QOS_H                 (98),
		.PKT_QOS_L                 (98),
		.PKT_DATA_SIDEBAND_H       (96),
		.PKT_DATA_SIDEBAND_L       (96),
		.PKT_ADDR_SIDEBAND_H       (95),
		.PKT_ADDR_SIDEBAND_L       (95),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_CACHE_H               (114),
		.PKT_CACHE_L               (111),
		.PKT_THREAD_ID_H           (107),
		.PKT_THREAD_ID_L           (107),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (102),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (106),
		.PKT_DEST_ID_L             (103),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (16),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (10),
		.BURSTWRAP_VALUE           (63),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) sgdma_tx_descriptor_write_agent (
		.clk                   (clk_100_clk_clk),                                                              //       clk.clk
		.reset                 (sgdma_tx_reset_reset_bridge_in_reset_reset),                                   // clk_reset.reset
		.av_address            (sgdma_tx_descriptor_write_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (sgdma_tx_descriptor_write_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (sgdma_tx_descriptor_write_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (sgdma_tx_descriptor_write_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (sgdma_tx_descriptor_write_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (sgdma_tx_descriptor_write_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (sgdma_tx_descriptor_write_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (sgdma_tx_descriptor_write_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (sgdma_tx_descriptor_write_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (sgdma_tx_descriptor_write_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (sgdma_tx_descriptor_write_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (sgdma_tx_descriptor_write_agent_cp_valid),                                     //        cp.valid
		.cp_data               (sgdma_tx_descriptor_write_agent_cp_data),                                      //          .data
		.cp_startofpacket      (sgdma_tx_descriptor_write_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (sgdma_tx_descriptor_write_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (sgdma_tx_descriptor_write_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_006_src_valid),                                                        //        rp.valid
		.rp_data               (rsp_mux_006_src_data),                                                         //          .data
		.rp_channel            (rsp_mux_006_src_channel),                                                      //          .channel
		.rp_startofpacket      (rsp_mux_006_src_startofpacket),                                                //          .startofpacket
		.rp_endofpacket        (rsp_mux_006_src_endofpacket),                                                  //          .endofpacket
		.rp_ready              (rsp_mux_006_src_ready),                                                        //          .ready
		.av_response           (),                                                                             // (terminated)
		.av_writeresponsevalid ()                                                                              // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (119),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_QOS_H                 (98),
		.PKT_QOS_L                 (98),
		.PKT_DATA_SIDEBAND_H       (96),
		.PKT_DATA_SIDEBAND_L       (96),
		.PKT_ADDR_SIDEBAND_H       (95),
		.PKT_ADDR_SIDEBAND_L       (95),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_CACHE_H               (114),
		.PKT_CACHE_L               (111),
		.PKT_THREAD_ID_H           (107),
		.PKT_THREAD_ID_L           (107),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (102),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (106),
		.PKT_DEST_ID_L             (103),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (16),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (7),
		.BURSTWRAP_VALUE           (63),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) sgdma_rx_descriptor_write_agent (
		.clk                   (clk_100_clk_clk),                                                              //       clk.clk
		.reset                 (sgdma_tx_reset_reset_bridge_in_reset_reset),                                   // clk_reset.reset
		.av_address            (sgdma_rx_descriptor_write_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (sgdma_rx_descriptor_write_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (sgdma_rx_descriptor_write_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (sgdma_rx_descriptor_write_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (sgdma_rx_descriptor_write_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (sgdma_rx_descriptor_write_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (sgdma_rx_descriptor_write_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (sgdma_rx_descriptor_write_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (sgdma_rx_descriptor_write_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (sgdma_rx_descriptor_write_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (sgdma_rx_descriptor_write_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (sgdma_rx_descriptor_write_agent_cp_valid),                                     //        cp.valid
		.cp_data               (sgdma_rx_descriptor_write_agent_cp_data),                                      //          .data
		.cp_startofpacket      (sgdma_rx_descriptor_write_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (sgdma_rx_descriptor_write_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (sgdma_rx_descriptor_write_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_007_src_valid),                                                        //        rp.valid
		.rp_data               (rsp_mux_007_src_data),                                                         //          .data
		.rp_channel            (rsp_mux_007_src_channel),                                                      //          .channel
		.rp_startofpacket      (rsp_mux_007_src_startofpacket),                                                //          .startofpacket
		.rp_endofpacket        (rsp_mux_007_src_endofpacket),                                                  //          .endofpacket
		.rp_ready              (rsp_mux_007_src_ready),                                                        //          .ready
		.av_response           (),                                                                             // (terminated)
		.av_writeresponsevalid ()                                                                              // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (119),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_QOS_H                 (98),
		.PKT_QOS_L                 (98),
		.PKT_DATA_SIDEBAND_H       (96),
		.PKT_DATA_SIDEBAND_L       (96),
		.PKT_ADDR_SIDEBAND_H       (95),
		.PKT_ADDR_SIDEBAND_L       (95),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_CACHE_H               (114),
		.PKT_CACHE_L               (111),
		.PKT_THREAD_ID_H           (107),
		.PKT_THREAD_ID_L           (107),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (102),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (106),
		.PKT_DEST_ID_L             (103),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (16),
		.AV_BURSTCOUNT_W           (10),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (0),
		.BURSTWRAP_VALUE           (63),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) dma_m1_m2_mm_read_agent (
		.clk                   (clk_100_clk_clk),                                                      //       clk.clk
		.reset                 (dma_M1_M2_reset_n_reset_bridge_in_reset_reset),                        // clk_reset.reset
		.av_address            (dma_m1_m2_mm_read_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (dma_m1_m2_mm_read_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (dma_m1_m2_mm_read_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (dma_m1_m2_mm_read_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (dma_m1_m2_mm_read_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (dma_m1_m2_mm_read_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (dma_m1_m2_mm_read_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (dma_m1_m2_mm_read_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (dma_m1_m2_mm_read_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (dma_m1_m2_mm_read_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (dma_m1_m2_mm_read_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (dma_m1_m2_mm_read_agent_cp_valid),                                     //        cp.valid
		.cp_data               (dma_m1_m2_mm_read_agent_cp_data),                                      //          .data
		.cp_startofpacket      (dma_m1_m2_mm_read_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (dma_m1_m2_mm_read_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (dma_m1_m2_mm_read_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_008_src_valid),                                                //        rp.valid
		.rp_data               (rsp_mux_008_src_data),                                                 //          .data
		.rp_channel            (rsp_mux_008_src_channel),                                              //          .channel
		.rp_startofpacket      (rsp_mux_008_src_startofpacket),                                        //          .startofpacket
		.rp_endofpacket        (rsp_mux_008_src_endofpacket),                                          //          .endofpacket
		.rp_ready              (rsp_mux_008_src_ready),                                                //          .ready
		.av_response           (),                                                                     // (terminated)
		.av_writeresponsevalid ()                                                                      // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (119),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_QOS_H                 (98),
		.PKT_QOS_L                 (98),
		.PKT_DATA_SIDEBAND_H       (96),
		.PKT_DATA_SIDEBAND_L       (96),
		.PKT_ADDR_SIDEBAND_H       (95),
		.PKT_ADDR_SIDEBAND_L       (95),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_CACHE_H               (114),
		.PKT_CACHE_L               (111),
		.PKT_THREAD_ID_H           (107),
		.PKT_THREAD_ID_L           (107),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (102),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (106),
		.PKT_DEST_ID_L             (103),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (16),
		.AV_BURSTCOUNT_W           (10),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (3),
		.BURSTWRAP_VALUE           (63),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) dma_m2_m1_mm_write_agent (
		.clk                   (clk_100_clk_clk),                                                       //       clk.clk
		.reset                 (dma_M1_M2_reset_n_reset_bridge_in_reset_reset),                         // clk_reset.reset
		.av_address            (dma_m2_m1_mm_write_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (dma_m2_m1_mm_write_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (dma_m2_m1_mm_write_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (dma_m2_m1_mm_write_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (dma_m2_m1_mm_write_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (dma_m2_m1_mm_write_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (dma_m2_m1_mm_write_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (dma_m2_m1_mm_write_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (dma_m2_m1_mm_write_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (dma_m2_m1_mm_write_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (dma_m2_m1_mm_write_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (dma_m2_m1_mm_write_agent_cp_valid),                                     //        cp.valid
		.cp_data               (dma_m2_m1_mm_write_agent_cp_data),                                      //          .data
		.cp_startofpacket      (dma_m2_m1_mm_write_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (dma_m2_m1_mm_write_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (dma_m2_m1_mm_write_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_009_src_valid),                                                 //        rp.valid
		.rp_data               (rsp_mux_009_src_data),                                                  //          .data
		.rp_channel            (rsp_mux_009_src_channel),                                               //          .channel
		.rp_startofpacket      (rsp_mux_009_src_startofpacket),                                         //          .startofpacket
		.rp_endofpacket        (rsp_mux_009_src_endofpacket),                                           //          .endofpacket
		.rp_ready              (rsp_mux_009_src_ready),                                                 //          .ready
		.av_response           (),                                                                      // (terminated)
		.av_writeresponsevalid ()                                                                       // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (119),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_QOS_H                 (98),
		.PKT_QOS_L                 (98),
		.PKT_DATA_SIDEBAND_H       (96),
		.PKT_DATA_SIDEBAND_L       (96),
		.PKT_ADDR_SIDEBAND_H       (95),
		.PKT_ADDR_SIDEBAND_L       (95),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_CACHE_H               (114),
		.PKT_CACHE_L               (111),
		.PKT_THREAD_ID_H           (107),
		.PKT_THREAD_ID_L           (107),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (102),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (106),
		.PKT_DEST_ID_L             (103),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (16),
		.AV_BURSTCOUNT_W           (10),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (2),
		.BURSTWRAP_VALUE           (63),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) dma_m2_m1_mm_read_agent (
		.clk                   (clk_100_clk_clk),                                                      //       clk.clk
		.reset                 (dma_M1_M2_reset_n_reset_bridge_in_reset_reset),                        // clk_reset.reset
		.av_address            (dma_m2_m1_mm_read_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (dma_m2_m1_mm_read_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (dma_m2_m1_mm_read_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (dma_m2_m1_mm_read_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (dma_m2_m1_mm_read_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (dma_m2_m1_mm_read_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (dma_m2_m1_mm_read_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (dma_m2_m1_mm_read_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (dma_m2_m1_mm_read_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (dma_m2_m1_mm_read_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (dma_m2_m1_mm_read_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (dma_m2_m1_mm_read_agent_cp_valid),                                     //        cp.valid
		.cp_data               (dma_m2_m1_mm_read_agent_cp_data),                                      //          .data
		.cp_startofpacket      (dma_m2_m1_mm_read_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (dma_m2_m1_mm_read_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (dma_m2_m1_mm_read_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_010_src_valid),                                                //        rp.valid
		.rp_data               (rsp_mux_010_src_data),                                                 //          .data
		.rp_channel            (rsp_mux_010_src_channel),                                              //          .channel
		.rp_startofpacket      (rsp_mux_010_src_startofpacket),                                        //          .startofpacket
		.rp_endofpacket        (rsp_mux_010_src_endofpacket),                                          //          .endofpacket
		.rp_ready              (rsp_mux_010_src_ready),                                                //          .ready
		.av_response           (),                                                                     // (terminated)
		.av_writeresponsevalid ()                                                                      // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (119),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_QOS_H                 (98),
		.PKT_QOS_L                 (98),
		.PKT_DATA_SIDEBAND_H       (96),
		.PKT_DATA_SIDEBAND_L       (96),
		.PKT_ADDR_SIDEBAND_H       (95),
		.PKT_ADDR_SIDEBAND_L       (95),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_CACHE_H               (114),
		.PKT_CACHE_L               (111),
		.PKT_THREAD_ID_H           (107),
		.PKT_THREAD_ID_L           (107),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (102),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (106),
		.PKT_DEST_ID_L             (103),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (16),
		.AV_BURSTCOUNT_W           (10),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (1),
		.BURSTWRAP_VALUE           (63),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) dma_m1_m2_mm_write_agent (
		.clk                   (clk_100_clk_clk),                                                       //       clk.clk
		.reset                 (dma_M1_M2_reset_n_reset_bridge_in_reset_reset),                         // clk_reset.reset
		.av_address            (dma_m1_m2_mm_write_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (dma_m1_m2_mm_write_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (dma_m1_m2_mm_write_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (dma_m1_m2_mm_write_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (dma_m1_m2_mm_write_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (dma_m1_m2_mm_write_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (dma_m1_m2_mm_write_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (dma_m1_m2_mm_write_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (dma_m1_m2_mm_write_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (dma_m1_m2_mm_write_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (dma_m1_m2_mm_write_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (dma_m1_m2_mm_write_agent_cp_valid),                                     //        cp.valid
		.cp_data               (dma_m1_m2_mm_write_agent_cp_data),                                      //          .data
		.cp_startofpacket      (dma_m1_m2_mm_write_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (dma_m1_m2_mm_write_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (dma_m1_m2_mm_write_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_011_src_valid),                                                 //        rp.valid
		.rp_data               (rsp_mux_011_src_data),                                                  //          .data
		.rp_channel            (rsp_mux_011_src_channel),                                               //          .channel
		.rp_startofpacket      (rsp_mux_011_src_startofpacket),                                         //          .startofpacket
		.rp_endofpacket        (rsp_mux_011_src_endofpacket),                                           //          .endofpacket
		.rp_ready              (rsp_mux_011_src_ready),                                                 //          .ready
		.av_response           (),                                                                      // (terminated)
		.av_writeresponsevalid ()                                                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (119),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (102),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (106),
		.PKT_DEST_ID_L             (103),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (16),
		.ST_DATA_W                 (120),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) jtag_uart_0_avalon_jtag_slave_agent (
		.clk                     (clk_100_clk_clk),                                                //             clk.clk
		.reset                   (dma_M1_M2_reset_n_reset_bridge_in_reset_reset),                  //       clk_reset.reset
		.m0_address              (jtag_uart_0_avalon_jtag_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (jtag_uart_0_avalon_jtag_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (jtag_uart_0_avalon_jtag_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (jtag_uart_0_avalon_jtag_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (jtag_uart_0_avalon_jtag_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (jtag_uart_0_avalon_jtag_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (jtag_uart_0_avalon_jtag_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (jtag_uart_0_avalon_jtag_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (jtag_uart_0_avalon_jtag_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (jtag_uart_0_avalon_jtag_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (jtag_uart_0_avalon_jtag_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (jtag_uart_0_avalon_jtag_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (jtag_uart_0_avalon_jtag_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (jtag_uart_0_avalon_jtag_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (jtag_uart_0_avalon_jtag_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (jtag_uart_0_avalon_jtag_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_src_ready),                                              //              cp.ready
		.cp_valid                (cmd_mux_src_valid),                                              //                .valid
		.cp_data                 (cmd_mux_src_data),                                               //                .data
		.cp_startofpacket        (cmd_mux_src_startofpacket),                                      //                .startofpacket
		.cp_endofpacket          (cmd_mux_src_endofpacket),                                        //                .endofpacket
		.cp_channel              (cmd_mux_src_channel),                                            //                .channel
		.rf_sink_ready           (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (jtag_uart_0_avalon_jtag_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (jtag_uart_0_avalon_jtag_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (jtag_uart_0_avalon_jtag_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (jtag_uart_0_avalon_jtag_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (jtag_uart_0_avalon_jtag_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                                  // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                                  //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                                   //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                                  //                .error
		.rdata_fifo_src_ready    (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (121),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo (
		.clk               (clk_100_clk_clk),                                                //       clk.clk
		.reset             (dma_M1_M2_reset_n_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.in_data           (jtag_uart_0_avalon_jtag_slave_agent_rf_source_data),             //        in.data
		.in_valid          (jtag_uart_0_avalon_jtag_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (jtag_uart_0_avalon_jtag_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (jtag_uart_0_avalon_jtag_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (jtag_uart_0_avalon_jtag_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                          // (terminated)
		.csr_read          (1'b0),                                                           // (terminated)
		.csr_write         (1'b0),                                                           // (terminated)
		.csr_readdata      (),                                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                           // (terminated)
		.almost_full_data  (),                                                               // (terminated)
		.almost_empty_data (),                                                               // (terminated)
		.in_empty          (1'b0),                                                           // (terminated)
		.out_empty         (),                                                               // (terminated)
		.in_error          (1'b0),                                                           // (terminated)
		.out_error         (),                                                               // (terminated)
		.in_channel        (1'b0),                                                           // (terminated)
		.out_channel       ()                                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (371),
		.PKT_ORI_BURST_SIZE_L      (369),
		.PKT_RESPONSE_STATUS_H     (368),
		.PKT_RESPONSE_STATUS_L     (367),
		.PKT_BURST_SIZE_H          (344),
		.PKT_BURST_SIZE_L          (342),
		.PKT_TRANS_LOCK            (324),
		.PKT_BEGIN_BURST           (349),
		.PKT_PROTECTION_H          (362),
		.PKT_PROTECTION_L          (360),
		.PKT_BURSTWRAP_H           (341),
		.PKT_BURSTWRAP_L           (336),
		.PKT_BYTE_CNT_H            (335),
		.PKT_BYTE_CNT_L            (326),
		.PKT_ADDR_H                (319),
		.PKT_ADDR_L                (288),
		.PKT_TRANS_COMPRESSED_READ (320),
		.PKT_TRANS_POSTED          (321),
		.PKT_TRANS_WRITE           (322),
		.PKT_TRANS_READ            (323),
		.PKT_DATA_H                (255),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (287),
		.PKT_BYTEEN_L              (256),
		.PKT_SRC_ID_H              (354),
		.PKT_SRC_ID_L              (351),
		.PKT_DEST_ID_H             (358),
		.PKT_DEST_ID_L             (355),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (16),
		.ST_DATA_W                 (372),
		.AVS_BURSTCOUNT_W          (8),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) m2_ddr2_memory_avl_agent (
		.clk                     (m2_ddr2_memory_afi_clk_clk),                                      //             clk.clk
		.reset                   (m2_ddr2_memory_avl_translator_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (m2_ddr2_memory_avl_agent_m0_address),                             //              m0.address
		.m0_burstcount           (m2_ddr2_memory_avl_agent_m0_burstcount),                          //                .burstcount
		.m0_byteenable           (m2_ddr2_memory_avl_agent_m0_byteenable),                          //                .byteenable
		.m0_debugaccess          (m2_ddr2_memory_avl_agent_m0_debugaccess),                         //                .debugaccess
		.m0_lock                 (m2_ddr2_memory_avl_agent_m0_lock),                                //                .lock
		.m0_readdata             (m2_ddr2_memory_avl_agent_m0_readdata),                            //                .readdata
		.m0_readdatavalid        (m2_ddr2_memory_avl_agent_m0_readdatavalid),                       //                .readdatavalid
		.m0_read                 (m2_ddr2_memory_avl_agent_m0_read),                                //                .read
		.m0_waitrequest          (m2_ddr2_memory_avl_agent_m0_waitrequest),                         //                .waitrequest
		.m0_writedata            (m2_ddr2_memory_avl_agent_m0_writedata),                           //                .writedata
		.m0_write                (m2_ddr2_memory_avl_agent_m0_write),                               //                .write
		.rp_endofpacket          (m2_ddr2_memory_avl_agent_rp_endofpacket),                         //              rp.endofpacket
		.rp_ready                (m2_ddr2_memory_avl_agent_rp_ready),                               //                .ready
		.rp_valid                (m2_ddr2_memory_avl_agent_rp_valid),                               //                .valid
		.rp_data                 (m2_ddr2_memory_avl_agent_rp_data),                                //                .data
		.rp_startofpacket        (m2_ddr2_memory_avl_agent_rp_startofpacket),                       //                .startofpacket
		.cp_ready                (m2_ddr2_memory_avl_burst_adapter_source0_ready),                  //              cp.ready
		.cp_valid                (m2_ddr2_memory_avl_burst_adapter_source0_valid),                  //                .valid
		.cp_data                 (m2_ddr2_memory_avl_burst_adapter_source0_data),                   //                .data
		.cp_startofpacket        (m2_ddr2_memory_avl_burst_adapter_source0_startofpacket),          //                .startofpacket
		.cp_endofpacket          (m2_ddr2_memory_avl_burst_adapter_source0_endofpacket),            //                .endofpacket
		.cp_channel              (m2_ddr2_memory_avl_burst_adapter_source0_channel),                //                .channel
		.rf_sink_ready           (m2_ddr2_memory_avl_agent_rsp_fifo_out_ready),                     //         rf_sink.ready
		.rf_sink_valid           (m2_ddr2_memory_avl_agent_rsp_fifo_out_valid),                     //                .valid
		.rf_sink_startofpacket   (m2_ddr2_memory_avl_agent_rsp_fifo_out_startofpacket),             //                .startofpacket
		.rf_sink_endofpacket     (m2_ddr2_memory_avl_agent_rsp_fifo_out_endofpacket),               //                .endofpacket
		.rf_sink_data            (m2_ddr2_memory_avl_agent_rsp_fifo_out_data),                      //                .data
		.rf_source_ready         (m2_ddr2_memory_avl_agent_rf_source_ready),                        //       rf_source.ready
		.rf_source_valid         (m2_ddr2_memory_avl_agent_rf_source_valid),                        //                .valid
		.rf_source_startofpacket (m2_ddr2_memory_avl_agent_rf_source_startofpacket),                //                .startofpacket
		.rf_source_endofpacket   (m2_ddr2_memory_avl_agent_rf_source_endofpacket),                  //                .endofpacket
		.rf_source_data          (m2_ddr2_memory_avl_agent_rf_source_data),                         //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),                               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),                               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),                                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),                               //                .error
		.rdata_fifo_src_ready    (m2_ddr2_memory_avl_agent_rdata_fifo_src_ready),                   //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (m2_ddr2_memory_avl_agent_rdata_fifo_src_valid),                   //                .valid
		.rdata_fifo_src_data     (m2_ddr2_memory_avl_agent_rdata_fifo_src_data),                    //                .data
		.m0_response             (2'b00),                                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (373),
		.FIFO_DEPTH          (33),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) m2_ddr2_memory_avl_agent_rsp_fifo (
		.clk               (m2_ddr2_memory_afi_clk_clk),                                      //       clk.clk
		.reset             (m2_ddr2_memory_avl_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (m2_ddr2_memory_avl_agent_rf_source_data),                         //        in.data
		.in_valid          (m2_ddr2_memory_avl_agent_rf_source_valid),                        //          .valid
		.in_ready          (m2_ddr2_memory_avl_agent_rf_source_ready),                        //          .ready
		.in_startofpacket  (m2_ddr2_memory_avl_agent_rf_source_startofpacket),                //          .startofpacket
		.in_endofpacket    (m2_ddr2_memory_avl_agent_rf_source_endofpacket),                  //          .endofpacket
		.out_data          (m2_ddr2_memory_avl_agent_rsp_fifo_out_data),                      //       out.data
		.out_valid         (m2_ddr2_memory_avl_agent_rsp_fifo_out_valid),                     //          .valid
		.out_ready         (m2_ddr2_memory_avl_agent_rsp_fifo_out_ready),                     //          .ready
		.out_startofpacket (m2_ddr2_memory_avl_agent_rsp_fifo_out_startofpacket),             //          .startofpacket
		.out_endofpacket   (m2_ddr2_memory_avl_agent_rsp_fifo_out_endofpacket),               //          .endofpacket
		.csr_address       (2'b00),                                                           // (terminated)
		.csr_read          (1'b0),                                                            // (terminated)
		.csr_write         (1'b0),                                                            // (terminated)
		.csr_readdata      (),                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                            // (terminated)
		.almost_full_data  (),                                                                // (terminated)
		.almost_empty_data (),                                                                // (terminated)
		.in_empty          (1'b0),                                                            // (terminated)
		.out_empty         (),                                                                // (terminated)
		.in_error          (1'b0),                                                            // (terminated)
		.out_error         (),                                                                // (terminated)
		.in_channel        (1'b0),                                                            // (terminated)
		.out_channel       ()                                                                 // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (258),
		.FIFO_DEPTH          (256),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) m2_ddr2_memory_avl_agent_rdata_fifo (
		.clk               (m2_ddr2_memory_afi_clk_clk),                                      //       clk.clk
		.reset             (m2_ddr2_memory_avl_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (m2_ddr2_memory_avl_agent_rdata_fifo_src_data),                    //        in.data
		.in_valid          (m2_ddr2_memory_avl_agent_rdata_fifo_src_valid),                   //          .valid
		.in_ready          (m2_ddr2_memory_avl_agent_rdata_fifo_src_ready),                   //          .ready
		.out_data          (m2_ddr2_memory_avl_agent_rdata_fifo_out_data),                    //       out.data
		.out_valid         (m2_ddr2_memory_avl_agent_rdata_fifo_out_valid),                   //          .valid
		.out_ready         (m2_ddr2_memory_avl_agent_rdata_fifo_out_ready),                   //          .ready
		.csr_address       (2'b00),                                                           // (terminated)
		.csr_read          (1'b0),                                                            // (terminated)
		.csr_write         (1'b0),                                                            // (terminated)
		.csr_readdata      (),                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                            // (terminated)
		.almost_full_data  (),                                                                // (terminated)
		.almost_empty_data (),                                                                // (terminated)
		.in_startofpacket  (1'b0),                                                            // (terminated)
		.in_endofpacket    (1'b0),                                                            // (terminated)
		.out_startofpacket (),                                                                // (terminated)
		.out_endofpacket   (),                                                                // (terminated)
		.in_empty          (1'b0),                                                            // (terminated)
		.out_empty         (),                                                                // (terminated)
		.in_error          (1'b0),                                                            // (terminated)
		.out_error         (),                                                                // (terminated)
		.in_channel        (1'b0),                                                            // (terminated)
		.out_channel       ()                                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (119),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (102),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (106),
		.PKT_DEST_ID_L             (103),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (16),
		.ST_DATA_W                 (120),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) tse_mac_control_port_agent (
		.clk                     (clk_100_clk_clk),                                       //             clk.clk
		.reset                   (sgdma_tx_reset_reset_bridge_in_reset_reset),            //       clk_reset.reset
		.m0_address              (tse_mac_control_port_agent_m0_address),                 //              m0.address
		.m0_burstcount           (tse_mac_control_port_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (tse_mac_control_port_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (tse_mac_control_port_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (tse_mac_control_port_agent_m0_lock),                    //                .lock
		.m0_readdata             (tse_mac_control_port_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (tse_mac_control_port_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (tse_mac_control_port_agent_m0_read),                    //                .read
		.m0_waitrequest          (tse_mac_control_port_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (tse_mac_control_port_agent_m0_writedata),               //                .writedata
		.m0_write                (tse_mac_control_port_agent_m0_write),                   //                .write
		.rp_endofpacket          (tse_mac_control_port_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (tse_mac_control_port_agent_rp_ready),                   //                .ready
		.rp_valid                (tse_mac_control_port_agent_rp_valid),                   //                .valid
		.rp_data                 (tse_mac_control_port_agent_rp_data),                    //                .data
		.rp_startofpacket        (tse_mac_control_port_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_002_src_ready),                                 //              cp.ready
		.cp_valid                (cmd_mux_002_src_valid),                                 //                .valid
		.cp_data                 (cmd_mux_002_src_data),                                  //                .data
		.cp_startofpacket        (cmd_mux_002_src_startofpacket),                         //                .startofpacket
		.cp_endofpacket          (cmd_mux_002_src_endofpacket),                           //                .endofpacket
		.cp_channel              (cmd_mux_002_src_channel),                               //                .channel
		.rf_sink_ready           (tse_mac_control_port_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (tse_mac_control_port_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (tse_mac_control_port_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (tse_mac_control_port_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (tse_mac_control_port_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (tse_mac_control_port_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (tse_mac_control_port_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (tse_mac_control_port_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (tse_mac_control_port_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (tse_mac_control_port_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),                     //                .error
		.rdata_fifo_src_ready    (tse_mac_control_port_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (tse_mac_control_port_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (tse_mac_control_port_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (121),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) tse_mac_control_port_agent_rsp_fifo (
		.clk               (clk_100_clk_clk),                                       //       clk.clk
		.reset             (sgdma_tx_reset_reset_bridge_in_reset_reset),            // clk_reset.reset
		.in_data           (tse_mac_control_port_agent_rf_source_data),             //        in.data
		.in_valid          (tse_mac_control_port_agent_rf_source_valid),            //          .valid
		.in_ready          (tse_mac_control_port_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (tse_mac_control_port_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (tse_mac_control_port_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (tse_mac_control_port_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (tse_mac_control_port_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (tse_mac_control_port_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (tse_mac_control_port_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (tse_mac_control_port_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                 // (terminated)
		.csr_read          (1'b0),                                                  // (terminated)
		.csr_write         (1'b0),                                                  // (terminated)
		.csr_readdata      (),                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated)
		.almost_full_data  (),                                                      // (terminated)
		.almost_empty_data (),                                                      // (terminated)
		.in_empty          (1'b0),                                                  // (terminated)
		.out_empty         (),                                                      // (terminated)
		.in_error          (1'b0),                                                  // (terminated)
		.out_error         (),                                                      // (terminated)
		.in_channel        (1'b0),                                                  // (terminated)
		.out_channel       ()                                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (119),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (102),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (106),
		.PKT_DEST_ID_L             (103),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (16),
		.ST_DATA_W                 (120),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sysid_qsys_control_slave_agent (
		.clk                     (clk_100_clk_clk),                                           //             clk.clk
		.reset                   (dma_M1_M2_reset_n_reset_bridge_in_reset_reset),             //       clk_reset.reset
		.m0_address              (sysid_qsys_control_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (sysid_qsys_control_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (sysid_qsys_control_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (sysid_qsys_control_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (sysid_qsys_control_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (sysid_qsys_control_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (sysid_qsys_control_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (sysid_qsys_control_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (sysid_qsys_control_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (sysid_qsys_control_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (sysid_qsys_control_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (sysid_qsys_control_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (sysid_qsys_control_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (sysid_qsys_control_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (sysid_qsys_control_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (sysid_qsys_control_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_003_src_ready),                                     //              cp.ready
		.cp_valid                (cmd_mux_003_src_valid),                                     //                .valid
		.cp_data                 (cmd_mux_003_src_data),                                      //                .data
		.cp_startofpacket        (cmd_mux_003_src_startofpacket),                             //                .startofpacket
		.cp_endofpacket          (cmd_mux_003_src_endofpacket),                               //                .endofpacket
		.cp_channel              (cmd_mux_003_src_channel),                                   //                .channel
		.rf_sink_ready           (sysid_qsys_control_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (sysid_qsys_control_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (sysid_qsys_control_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (sysid_qsys_control_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (sysid_qsys_control_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (sysid_qsys_control_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (sysid_qsys_control_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (sysid_qsys_control_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (sysid_qsys_control_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (sysid_qsys_control_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_003_out_0_ready),                         // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_003_out_0_valid),                         //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_003_out_0_data),                          //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_003_out_0_error),                         //                .error
		.rdata_fifo_src_ready    (sysid_qsys_control_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sysid_qsys_control_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (sysid_qsys_control_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                     //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                       //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (121),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sysid_qsys_control_slave_agent_rsp_fifo (
		.clk               (clk_100_clk_clk),                                           //       clk.clk
		.reset             (dma_M1_M2_reset_n_reset_bridge_in_reset_reset),             // clk_reset.reset
		.in_data           (sysid_qsys_control_slave_agent_rf_source_data),             //        in.data
		.in_valid          (sysid_qsys_control_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (sysid_qsys_control_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sysid_qsys_control_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sysid_qsys_control_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sysid_qsys_control_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sysid_qsys_control_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sysid_qsys_control_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sysid_qsys_control_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sysid_qsys_control_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                     // (terminated)
		.csr_read          (1'b0),                                                      // (terminated)
		.csr_write         (1'b0),                                                      // (terminated)
		.csr_readdata      (),                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                      // (terminated)
		.almost_full_data  (),                                                          // (terminated)
		.almost_empty_data (),                                                          // (terminated)
		.in_empty          (1'b0),                                                      // (terminated)
		.out_empty         (),                                                          // (terminated)
		.in_error          (1'b0),                                                      // (terminated)
		.out_error         (),                                                          // (terminated)
		.in_channel        (1'b0),                                                      // (terminated)
		.out_channel       ()                                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (119),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (102),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (106),
		.PKT_DEST_ID_L             (103),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (16),
		.ST_DATA_W                 (120),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sgdma_tx_csr_agent (
		.clk                     (clk_100_clk_clk),                               //             clk.clk
		.reset                   (sgdma_tx_reset_reset_bridge_in_reset_reset),    //       clk_reset.reset
		.m0_address              (sgdma_tx_csr_agent_m0_address),                 //              m0.address
		.m0_burstcount           (sgdma_tx_csr_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (sgdma_tx_csr_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (sgdma_tx_csr_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (sgdma_tx_csr_agent_m0_lock),                    //                .lock
		.m0_readdata             (sgdma_tx_csr_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (sgdma_tx_csr_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (sgdma_tx_csr_agent_m0_read),                    //                .read
		.m0_waitrequest          (sgdma_tx_csr_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (sgdma_tx_csr_agent_m0_writedata),               //                .writedata
		.m0_write                (sgdma_tx_csr_agent_m0_write),                   //                .write
		.rp_endofpacket          (sgdma_tx_csr_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (sgdma_tx_csr_agent_rp_ready),                   //                .ready
		.rp_valid                (sgdma_tx_csr_agent_rp_valid),                   //                .valid
		.rp_data                 (sgdma_tx_csr_agent_rp_data),                    //                .data
		.rp_startofpacket        (sgdma_tx_csr_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_004_src_ready),                         //              cp.ready
		.cp_valid                (cmd_mux_004_src_valid),                         //                .valid
		.cp_data                 (cmd_mux_004_src_data),                          //                .data
		.cp_startofpacket        (cmd_mux_004_src_startofpacket),                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_004_src_endofpacket),                   //                .endofpacket
		.cp_channel              (cmd_mux_004_src_channel),                       //                .channel
		.rf_sink_ready           (sgdma_tx_csr_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (sgdma_tx_csr_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (sgdma_tx_csr_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (sgdma_tx_csr_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (sgdma_tx_csr_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (sgdma_tx_csr_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (sgdma_tx_csr_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (sgdma_tx_csr_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (sgdma_tx_csr_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (sgdma_tx_csr_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_004_out_0_ready),             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_004_out_0_valid),             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_004_out_0_data),              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_004_out_0_error),             //                .error
		.rdata_fifo_src_ready    (sgdma_tx_csr_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sgdma_tx_csr_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (sgdma_tx_csr_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (121),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sgdma_tx_csr_agent_rsp_fifo (
		.clk               (clk_100_clk_clk),                               //       clk.clk
		.reset             (sgdma_tx_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.in_data           (sgdma_tx_csr_agent_rf_source_data),             //        in.data
		.in_valid          (sgdma_tx_csr_agent_rf_source_valid),            //          .valid
		.in_ready          (sgdma_tx_csr_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sgdma_tx_csr_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sgdma_tx_csr_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sgdma_tx_csr_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sgdma_tx_csr_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sgdma_tx_csr_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sgdma_tx_csr_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sgdma_tx_csr_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (119),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (102),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (106),
		.PKT_DEST_ID_L             (103),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (16),
		.ST_DATA_W                 (120),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sgdma_rx_csr_agent (
		.clk                     (clk_100_clk_clk),                               //             clk.clk
		.reset                   (sgdma_tx_reset_reset_bridge_in_reset_reset),    //       clk_reset.reset
		.m0_address              (sgdma_rx_csr_agent_m0_address),                 //              m0.address
		.m0_burstcount           (sgdma_rx_csr_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (sgdma_rx_csr_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (sgdma_rx_csr_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (sgdma_rx_csr_agent_m0_lock),                    //                .lock
		.m0_readdata             (sgdma_rx_csr_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (sgdma_rx_csr_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (sgdma_rx_csr_agent_m0_read),                    //                .read
		.m0_waitrequest          (sgdma_rx_csr_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (sgdma_rx_csr_agent_m0_writedata),               //                .writedata
		.m0_write                (sgdma_rx_csr_agent_m0_write),                   //                .write
		.rp_endofpacket          (sgdma_rx_csr_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (sgdma_rx_csr_agent_rp_ready),                   //                .ready
		.rp_valid                (sgdma_rx_csr_agent_rp_valid),                   //                .valid
		.rp_data                 (sgdma_rx_csr_agent_rp_data),                    //                .data
		.rp_startofpacket        (sgdma_rx_csr_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_005_src_ready),                         //              cp.ready
		.cp_valid                (cmd_mux_005_src_valid),                         //                .valid
		.cp_data                 (cmd_mux_005_src_data),                          //                .data
		.cp_startofpacket        (cmd_mux_005_src_startofpacket),                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_005_src_endofpacket),                   //                .endofpacket
		.cp_channel              (cmd_mux_005_src_channel),                       //                .channel
		.rf_sink_ready           (sgdma_rx_csr_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (sgdma_rx_csr_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (sgdma_rx_csr_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (sgdma_rx_csr_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (sgdma_rx_csr_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (sgdma_rx_csr_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (sgdma_rx_csr_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (sgdma_rx_csr_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (sgdma_rx_csr_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (sgdma_rx_csr_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_005_out_0_ready),             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_005_out_0_valid),             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_005_out_0_data),              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_005_out_0_error),             //                .error
		.rdata_fifo_src_ready    (sgdma_rx_csr_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sgdma_rx_csr_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (sgdma_rx_csr_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (121),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sgdma_rx_csr_agent_rsp_fifo (
		.clk               (clk_100_clk_clk),                               //       clk.clk
		.reset             (sgdma_tx_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.in_data           (sgdma_rx_csr_agent_rf_source_data),             //        in.data
		.in_valid          (sgdma_rx_csr_agent_rf_source_valid),            //          .valid
		.in_ready          (sgdma_rx_csr_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sgdma_rx_csr_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sgdma_rx_csr_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sgdma_rx_csr_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sgdma_rx_csr_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sgdma_rx_csr_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sgdma_rx_csr_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sgdma_rx_csr_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (119),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (102),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (106),
		.PKT_DEST_ID_L             (103),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (16),
		.ST_DATA_W                 (120),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) dma_m1_m2_csr_agent (
		.clk                     (clk_100_clk_clk),                                //             clk.clk
		.reset                   (dma_M1_M2_reset_n_reset_bridge_in_reset_reset),  //       clk_reset.reset
		.m0_address              (dma_m1_m2_csr_agent_m0_address),                 //              m0.address
		.m0_burstcount           (dma_m1_m2_csr_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (dma_m1_m2_csr_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (dma_m1_m2_csr_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (dma_m1_m2_csr_agent_m0_lock),                    //                .lock
		.m0_readdata             (dma_m1_m2_csr_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (dma_m1_m2_csr_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (dma_m1_m2_csr_agent_m0_read),                    //                .read
		.m0_waitrequest          (dma_m1_m2_csr_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (dma_m1_m2_csr_agent_m0_writedata),               //                .writedata
		.m0_write                (dma_m1_m2_csr_agent_m0_write),                   //                .write
		.rp_endofpacket          (dma_m1_m2_csr_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (dma_m1_m2_csr_agent_rp_ready),                   //                .ready
		.rp_valid                (dma_m1_m2_csr_agent_rp_valid),                   //                .valid
		.rp_data                 (dma_m1_m2_csr_agent_rp_data),                    //                .data
		.rp_startofpacket        (dma_m1_m2_csr_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_006_src_ready),                          //              cp.ready
		.cp_valid                (cmd_mux_006_src_valid),                          //                .valid
		.cp_data                 (cmd_mux_006_src_data),                           //                .data
		.cp_startofpacket        (cmd_mux_006_src_startofpacket),                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_006_src_endofpacket),                    //                .endofpacket
		.cp_channel              (cmd_mux_006_src_channel),                        //                .channel
		.rf_sink_ready           (dma_m1_m2_csr_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (dma_m1_m2_csr_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (dma_m1_m2_csr_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (dma_m1_m2_csr_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (dma_m1_m2_csr_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (dma_m1_m2_csr_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (dma_m1_m2_csr_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (dma_m1_m2_csr_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (dma_m1_m2_csr_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (dma_m1_m2_csr_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_006_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_006_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_006_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_006_out_0_error),              //                .error
		.rdata_fifo_src_ready    (dma_m1_m2_csr_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (dma_m1_m2_csr_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (dma_m1_m2_csr_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (121),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dma_m1_m2_csr_agent_rsp_fifo (
		.clk               (clk_100_clk_clk),                                //       clk.clk
		.reset             (dma_M1_M2_reset_n_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (dma_m1_m2_csr_agent_rf_source_data),             //        in.data
		.in_valid          (dma_m1_m2_csr_agent_rf_source_valid),            //          .valid
		.in_ready          (dma_m1_m2_csr_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (dma_m1_m2_csr_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (dma_m1_m2_csr_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (dma_m1_m2_csr_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (dma_m1_m2_csr_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (dma_m1_m2_csr_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (dma_m1_m2_csr_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (dma_m1_m2_csr_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (119),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (102),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (106),
		.PKT_DEST_ID_L             (103),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (16),
		.ST_DATA_W                 (120),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) dma_m2_m1_csr_agent (
		.clk                     (clk_100_clk_clk),                                //             clk.clk
		.reset                   (dma_M1_M2_reset_n_reset_bridge_in_reset_reset),  //       clk_reset.reset
		.m0_address              (dma_m2_m1_csr_agent_m0_address),                 //              m0.address
		.m0_burstcount           (dma_m2_m1_csr_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (dma_m2_m1_csr_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (dma_m2_m1_csr_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (dma_m2_m1_csr_agent_m0_lock),                    //                .lock
		.m0_readdata             (dma_m2_m1_csr_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (dma_m2_m1_csr_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (dma_m2_m1_csr_agent_m0_read),                    //                .read
		.m0_waitrequest          (dma_m2_m1_csr_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (dma_m2_m1_csr_agent_m0_writedata),               //                .writedata
		.m0_write                (dma_m2_m1_csr_agent_m0_write),                   //                .write
		.rp_endofpacket          (dma_m2_m1_csr_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (dma_m2_m1_csr_agent_rp_ready),                   //                .ready
		.rp_valid                (dma_m2_m1_csr_agent_rp_valid),                   //                .valid
		.rp_data                 (dma_m2_m1_csr_agent_rp_data),                    //                .data
		.rp_startofpacket        (dma_m2_m1_csr_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_007_src_ready),                          //              cp.ready
		.cp_valid                (cmd_mux_007_src_valid),                          //                .valid
		.cp_data                 (cmd_mux_007_src_data),                           //                .data
		.cp_startofpacket        (cmd_mux_007_src_startofpacket),                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_007_src_endofpacket),                    //                .endofpacket
		.cp_channel              (cmd_mux_007_src_channel),                        //                .channel
		.rf_sink_ready           (dma_m2_m1_csr_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (dma_m2_m1_csr_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (dma_m2_m1_csr_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (dma_m2_m1_csr_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (dma_m2_m1_csr_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (dma_m2_m1_csr_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (dma_m2_m1_csr_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (dma_m2_m1_csr_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (dma_m2_m1_csr_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (dma_m2_m1_csr_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_007_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_007_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_007_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_007_out_0_error),              //                .error
		.rdata_fifo_src_ready    (dma_m2_m1_csr_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (dma_m2_m1_csr_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (dma_m2_m1_csr_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (121),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dma_m2_m1_csr_agent_rsp_fifo (
		.clk               (clk_100_clk_clk),                                //       clk.clk
		.reset             (dma_M1_M2_reset_n_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (dma_m2_m1_csr_agent_rf_source_data),             //        in.data
		.in_valid          (dma_m2_m1_csr_agent_rf_source_valid),            //          .valid
		.in_ready          (dma_m2_m1_csr_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (dma_m2_m1_csr_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (dma_m2_m1_csr_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (dma_m2_m1_csr_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (dma_m2_m1_csr_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (dma_m2_m1_csr_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (dma_m2_m1_csr_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (dma_m2_m1_csr_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (119),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (102),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (106),
		.PKT_DEST_ID_L             (103),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (16),
		.ST_DATA_W                 (120),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) nios2_gen2_0_debug_mem_slave_agent (
		.clk                     (clk_100_clk_clk),                                                  //             clk.clk
		.reset                   (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                   //       clk_reset.reset
		.m0_address              (nios2_gen2_0_debug_mem_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (nios2_gen2_0_debug_mem_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (nios2_gen2_0_debug_mem_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (nios2_gen2_0_debug_mem_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (nios2_gen2_0_debug_mem_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (nios2_gen2_0_debug_mem_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (nios2_gen2_0_debug_mem_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (nios2_gen2_0_debug_mem_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (nios2_gen2_0_debug_mem_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (nios2_gen2_0_debug_mem_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (nios2_gen2_0_debug_mem_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (nios2_gen2_0_debug_mem_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (nios2_gen2_0_debug_mem_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (nios2_gen2_0_debug_mem_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (nios2_gen2_0_debug_mem_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (nios2_gen2_0_debug_mem_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (nios2_gen2_0_debug_mem_slave_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (nios2_gen2_0_debug_mem_slave_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (nios2_gen2_0_debug_mem_slave_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (nios2_gen2_0_debug_mem_slave_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (nios2_gen2_0_debug_mem_slave_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (nios2_gen2_0_debug_mem_slave_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (nios2_gen2_0_debug_mem_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (nios2_gen2_0_debug_mem_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (nios2_gen2_0_debug_mem_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (nios2_gen2_0_debug_mem_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (nios2_gen2_0_debug_mem_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_008_out_0_ready),                                // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_008_out_0_valid),                                //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_008_out_0_data),                                 //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_008_out_0_error),                                //                .error
		.rdata_fifo_src_ready    (nios2_gen2_0_debug_mem_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (nios2_gen2_0_debug_mem_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (nios2_gen2_0_debug_mem_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                            //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                              //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (121),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nios2_gen2_0_debug_mem_slave_agent_rsp_fifo (
		.clk               (clk_100_clk_clk),                                               //       clk.clk
		.reset             (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.in_data           (nios2_gen2_0_debug_mem_slave_agent_rf_source_data),             //        in.data
		.in_valid          (nios2_gen2_0_debug_mem_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (nios2_gen2_0_debug_mem_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (nios2_gen2_0_debug_mem_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (nios2_gen2_0_debug_mem_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                         // (terminated)
		.csr_read          (1'b0),                                                          // (terminated)
		.csr_write         (1'b0),                                                          // (terminated)
		.csr_readdata      (),                                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                          // (terminated)
		.almost_full_data  (),                                                              // (terminated)
		.almost_empty_data (),                                                              // (terminated)
		.in_empty          (1'b0),                                                          // (terminated)
		.out_empty         (),                                                              // (terminated)
		.in_error          (1'b0),                                                          // (terminated)
		.out_error         (),                                                              // (terminated)
		.in_channel        (1'b0),                                                          // (terminated)
		.out_channel       ()                                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (227),
		.PKT_ORI_BURST_SIZE_L      (225),
		.PKT_RESPONSE_STATUS_H     (224),
		.PKT_RESPONSE_STATUS_L     (223),
		.PKT_BURST_SIZE_H          (200),
		.PKT_BURST_SIZE_L          (198),
		.PKT_TRANS_LOCK            (180),
		.PKT_BEGIN_BURST           (205),
		.PKT_PROTECTION_H          (218),
		.PKT_PROTECTION_L          (216),
		.PKT_BURSTWRAP_H           (197),
		.PKT_BURSTWRAP_L           (192),
		.PKT_BYTE_CNT_H            (191),
		.PKT_BYTE_CNT_L            (182),
		.PKT_ADDR_H                (175),
		.PKT_ADDR_L                (144),
		.PKT_TRANS_COMPRESSED_READ (176),
		.PKT_TRANS_POSTED          (177),
		.PKT_TRANS_WRITE           (178),
		.PKT_TRANS_READ            (179),
		.PKT_DATA_H                (127),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (143),
		.PKT_BYTEEN_L              (128),
		.PKT_SRC_ID_H              (210),
		.PKT_SRC_ID_L              (207),
		.PKT_DEST_ID_H             (214),
		.PKT_DEST_ID_L             (211),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (16),
		.ST_DATA_W                 (228),
		.AVS_BURSTCOUNT_W          (5),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) dma_m1_m2_descriptor_slave_agent (
		.clk                     (clk_100_clk_clk),                                                //             clk.clk
		.reset                   (dma_M1_M2_reset_n_reset_bridge_in_reset_reset),                  //       clk_reset.reset
		.m0_address              (dma_m1_m2_descriptor_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (dma_m1_m2_descriptor_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (dma_m1_m2_descriptor_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (dma_m1_m2_descriptor_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (dma_m1_m2_descriptor_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (dma_m1_m2_descriptor_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (dma_m1_m2_descriptor_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (dma_m1_m2_descriptor_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (dma_m1_m2_descriptor_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (dma_m1_m2_descriptor_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (dma_m1_m2_descriptor_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (dma_m1_m2_descriptor_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (dma_m1_m2_descriptor_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (dma_m1_m2_descriptor_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (dma_m1_m2_descriptor_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (dma_m1_m2_descriptor_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (dma_m1_m2_descriptor_slave_cmd_width_adapter_src_ready),         //              cp.ready
		.cp_valid                (dma_m1_m2_descriptor_slave_cmd_width_adapter_src_valid),         //                .valid
		.cp_data                 (dma_m1_m2_descriptor_slave_cmd_width_adapter_src_data),          //                .data
		.cp_startofpacket        (dma_m1_m2_descriptor_slave_cmd_width_adapter_src_startofpacket), //                .startofpacket
		.cp_endofpacket          (dma_m1_m2_descriptor_slave_cmd_width_adapter_src_endofpacket),   //                .endofpacket
		.cp_channel              (dma_m1_m2_descriptor_slave_cmd_width_adapter_src_channel),       //                .channel
		.rf_sink_ready           (dma_m1_m2_descriptor_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (dma_m1_m2_descriptor_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (dma_m1_m2_descriptor_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (dma_m1_m2_descriptor_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (dma_m1_m2_descriptor_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (dma_m1_m2_descriptor_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (dma_m1_m2_descriptor_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (dma_m1_m2_descriptor_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (dma_m1_m2_descriptor_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (dma_m1_m2_descriptor_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_009_out_0_ready),                              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_009_out_0_valid),                              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_009_out_0_data),                               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_009_out_0_error),                              //                .error
		.rdata_fifo_src_ready    (dma_m1_m2_descriptor_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (dma_m1_m2_descriptor_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (dma_m1_m2_descriptor_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (229),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dma_m1_m2_descriptor_slave_agent_rsp_fifo (
		.clk               (clk_100_clk_clk),                                             //       clk.clk
		.reset             (dma_M1_M2_reset_n_reset_bridge_in_reset_reset),               // clk_reset.reset
		.in_data           (dma_m1_m2_descriptor_slave_agent_rf_source_data),             //        in.data
		.in_valid          (dma_m1_m2_descriptor_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (dma_m1_m2_descriptor_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (dma_m1_m2_descriptor_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (dma_m1_m2_descriptor_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (dma_m1_m2_descriptor_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (dma_m1_m2_descriptor_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (dma_m1_m2_descriptor_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (dma_m1_m2_descriptor_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (dma_m1_m2_descriptor_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                       // (terminated)
		.csr_read          (1'b0),                                                        // (terminated)
		.csr_write         (1'b0),                                                        // (terminated)
		.csr_readdata      (),                                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                        // (terminated)
		.almost_full_data  (),                                                            // (terminated)
		.almost_empty_data (),                                                            // (terminated)
		.in_empty          (1'b0),                                                        // (terminated)
		.out_empty         (),                                                            // (terminated)
		.in_error          (1'b0),                                                        // (terminated)
		.out_error         (),                                                            // (terminated)
		.in_channel        (1'b0),                                                        // (terminated)
		.out_channel       ()                                                             // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (130),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dma_m1_m2_descriptor_slave_agent_rdata_fifo (
		.clk               (clk_100_clk_clk),                                       //       clk.clk
		.reset             (dma_M1_M2_reset_n_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_data           (dma_m1_m2_descriptor_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (dma_m1_m2_descriptor_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (dma_m1_m2_descriptor_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (dma_m1_m2_descriptor_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (dma_m1_m2_descriptor_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (dma_m1_m2_descriptor_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                 // (terminated)
		.csr_read          (1'b0),                                                  // (terminated)
		.csr_write         (1'b0),                                                  // (terminated)
		.csr_readdata      (),                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated)
		.almost_full_data  (),                                                      // (terminated)
		.almost_empty_data (),                                                      // (terminated)
		.in_startofpacket  (1'b0),                                                  // (terminated)
		.in_endofpacket    (1'b0),                                                  // (terminated)
		.out_startofpacket (),                                                      // (terminated)
		.out_endofpacket   (),                                                      // (terminated)
		.in_empty          (1'b0),                                                  // (terminated)
		.out_empty         (),                                                      // (terminated)
		.in_error          (1'b0),                                                  // (terminated)
		.out_error         (),                                                      // (terminated)
		.in_channel        (1'b0),                                                  // (terminated)
		.out_channel       ()                                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (227),
		.PKT_ORI_BURST_SIZE_L      (225),
		.PKT_RESPONSE_STATUS_H     (224),
		.PKT_RESPONSE_STATUS_L     (223),
		.PKT_BURST_SIZE_H          (200),
		.PKT_BURST_SIZE_L          (198),
		.PKT_TRANS_LOCK            (180),
		.PKT_BEGIN_BURST           (205),
		.PKT_PROTECTION_H          (218),
		.PKT_PROTECTION_L          (216),
		.PKT_BURSTWRAP_H           (197),
		.PKT_BURSTWRAP_L           (192),
		.PKT_BYTE_CNT_H            (191),
		.PKT_BYTE_CNT_L            (182),
		.PKT_ADDR_H                (175),
		.PKT_ADDR_L                (144),
		.PKT_TRANS_COMPRESSED_READ (176),
		.PKT_TRANS_POSTED          (177),
		.PKT_TRANS_WRITE           (178),
		.PKT_TRANS_READ            (179),
		.PKT_DATA_H                (127),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (143),
		.PKT_BYTEEN_L              (128),
		.PKT_SRC_ID_H              (210),
		.PKT_SRC_ID_L              (207),
		.PKT_DEST_ID_H             (214),
		.PKT_DEST_ID_L             (211),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (16),
		.ST_DATA_W                 (228),
		.AVS_BURSTCOUNT_W          (5),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) dma_m2_m1_descriptor_slave_agent (
		.clk                     (clk_100_clk_clk),                                                //             clk.clk
		.reset                   (dma_M1_M2_reset_n_reset_bridge_in_reset_reset),                  //       clk_reset.reset
		.m0_address              (dma_m2_m1_descriptor_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (dma_m2_m1_descriptor_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (dma_m2_m1_descriptor_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (dma_m2_m1_descriptor_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (dma_m2_m1_descriptor_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (dma_m2_m1_descriptor_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (dma_m2_m1_descriptor_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (dma_m2_m1_descriptor_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (dma_m2_m1_descriptor_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (dma_m2_m1_descriptor_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (dma_m2_m1_descriptor_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (dma_m2_m1_descriptor_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (dma_m2_m1_descriptor_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (dma_m2_m1_descriptor_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (dma_m2_m1_descriptor_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (dma_m2_m1_descriptor_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (dma_m2_m1_descriptor_slave_cmd_width_adapter_src_ready),         //              cp.ready
		.cp_valid                (dma_m2_m1_descriptor_slave_cmd_width_adapter_src_valid),         //                .valid
		.cp_data                 (dma_m2_m1_descriptor_slave_cmd_width_adapter_src_data),          //                .data
		.cp_startofpacket        (dma_m2_m1_descriptor_slave_cmd_width_adapter_src_startofpacket), //                .startofpacket
		.cp_endofpacket          (dma_m2_m1_descriptor_slave_cmd_width_adapter_src_endofpacket),   //                .endofpacket
		.cp_channel              (dma_m2_m1_descriptor_slave_cmd_width_adapter_src_channel),       //                .channel
		.rf_sink_ready           (dma_m2_m1_descriptor_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (dma_m2_m1_descriptor_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (dma_m2_m1_descriptor_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (dma_m2_m1_descriptor_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (dma_m2_m1_descriptor_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (dma_m2_m1_descriptor_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (dma_m2_m1_descriptor_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (dma_m2_m1_descriptor_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (dma_m2_m1_descriptor_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (dma_m2_m1_descriptor_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_010_out_0_ready),                              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_010_out_0_valid),                              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_010_out_0_data),                               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_010_out_0_error),                              //                .error
		.rdata_fifo_src_ready    (dma_m2_m1_descriptor_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (dma_m2_m1_descriptor_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (dma_m2_m1_descriptor_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (229),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dma_m2_m1_descriptor_slave_agent_rsp_fifo (
		.clk               (clk_100_clk_clk),                                             //       clk.clk
		.reset             (dma_M1_M2_reset_n_reset_bridge_in_reset_reset),               // clk_reset.reset
		.in_data           (dma_m2_m1_descriptor_slave_agent_rf_source_data),             //        in.data
		.in_valid          (dma_m2_m1_descriptor_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (dma_m2_m1_descriptor_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (dma_m2_m1_descriptor_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (dma_m2_m1_descriptor_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (dma_m2_m1_descriptor_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (dma_m2_m1_descriptor_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (dma_m2_m1_descriptor_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (dma_m2_m1_descriptor_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (dma_m2_m1_descriptor_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                       // (terminated)
		.csr_read          (1'b0),                                                        // (terminated)
		.csr_write         (1'b0),                                                        // (terminated)
		.csr_readdata      (),                                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                        // (terminated)
		.almost_full_data  (),                                                            // (terminated)
		.almost_empty_data (),                                                            // (terminated)
		.in_empty          (1'b0),                                                        // (terminated)
		.out_empty         (),                                                            // (terminated)
		.in_error          (1'b0),                                                        // (terminated)
		.out_error         (),                                                            // (terminated)
		.in_channel        (1'b0),                                                        // (terminated)
		.out_channel       ()                                                             // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (130),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dma_m2_m1_descriptor_slave_agent_rdata_fifo (
		.clk               (clk_100_clk_clk),                                       //       clk.clk
		.reset             (dma_M1_M2_reset_n_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_data           (dma_m2_m1_descriptor_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (dma_m2_m1_descriptor_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (dma_m2_m1_descriptor_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (dma_m2_m1_descriptor_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (dma_m2_m1_descriptor_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (dma_m2_m1_descriptor_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                 // (terminated)
		.csr_read          (1'b0),                                                  // (terminated)
		.csr_write         (1'b0),                                                  // (terminated)
		.csr_readdata      (),                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated)
		.almost_full_data  (),                                                      // (terminated)
		.almost_empty_data (),                                                      // (terminated)
		.in_startofpacket  (1'b0),                                                  // (terminated)
		.in_endofpacket    (1'b0),                                                  // (terminated)
		.out_startofpacket (),                                                      // (terminated)
		.out_endofpacket   (),                                                      // (terminated)
		.in_empty          (1'b0),                                                  // (terminated)
		.out_empty         (),                                                      // (terminated)
		.in_error          (1'b0),                                                  // (terminated)
		.out_error         (),                                                      // (terminated)
		.in_channel        (1'b0),                                                  // (terminated)
		.out_channel       ()                                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (119),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (102),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (106),
		.PKT_DEST_ID_L             (103),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (16),
		.ST_DATA_W                 (120),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) clock_bridge_afi_50_s0_agent (
		.clk                     (clk_100_clk_clk),                                         //             clk.clk
		.reset                   (dma_M1_M2_reset_n_reset_bridge_in_reset_reset),           //       clk_reset.reset
		.m0_address              (clock_bridge_afi_50_s0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (clock_bridge_afi_50_s0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (clock_bridge_afi_50_s0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (clock_bridge_afi_50_s0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (clock_bridge_afi_50_s0_agent_m0_lock),                    //                .lock
		.m0_readdata             (clock_bridge_afi_50_s0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (clock_bridge_afi_50_s0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (clock_bridge_afi_50_s0_agent_m0_read),                    //                .read
		.m0_waitrequest          (clock_bridge_afi_50_s0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (clock_bridge_afi_50_s0_agent_m0_writedata),               //                .writedata
		.m0_write                (clock_bridge_afi_50_s0_agent_m0_write),                   //                .write
		.rp_endofpacket          (clock_bridge_afi_50_s0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (clock_bridge_afi_50_s0_agent_rp_ready),                   //                .ready
		.rp_valid                (clock_bridge_afi_50_s0_agent_rp_valid),                   //                .valid
		.rp_data                 (clock_bridge_afi_50_s0_agent_rp_data),                    //                .data
		.rp_startofpacket        (clock_bridge_afi_50_s0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_011_src_ready),                                   //              cp.ready
		.cp_valid                (cmd_mux_011_src_valid),                                   //                .valid
		.cp_data                 (cmd_mux_011_src_data),                                    //                .data
		.cp_startofpacket        (cmd_mux_011_src_startofpacket),                           //                .startofpacket
		.cp_endofpacket          (cmd_mux_011_src_endofpacket),                             //                .endofpacket
		.cp_channel              (cmd_mux_011_src_channel),                                 //                .channel
		.rf_sink_ready           (clock_bridge_afi_50_s0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (clock_bridge_afi_50_s0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (clock_bridge_afi_50_s0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (clock_bridge_afi_50_s0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (clock_bridge_afi_50_s0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (clock_bridge_afi_50_s0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (clock_bridge_afi_50_s0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (clock_bridge_afi_50_s0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (clock_bridge_afi_50_s0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (clock_bridge_afi_50_s0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_011_out_0_ready),                       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_011_out_0_valid),                       //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_011_out_0_data),                        //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_011_out_0_error),                       //                .error
		.rdata_fifo_src_ready    (clock_bridge_afi_50_s0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (clock_bridge_afi_50_s0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (clock_bridge_afi_50_s0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                   //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                     //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (121),
		.FIFO_DEPTH          (9),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) clock_bridge_afi_50_s0_agent_rsp_fifo (
		.clk               (clk_100_clk_clk),                                         //       clk.clk
		.reset             (dma_M1_M2_reset_n_reset_bridge_in_reset_reset),           // clk_reset.reset
		.in_data           (clock_bridge_afi_50_s0_agent_rf_source_data),             //        in.data
		.in_valid          (clock_bridge_afi_50_s0_agent_rf_source_valid),            //          .valid
		.in_ready          (clock_bridge_afi_50_s0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (clock_bridge_afi_50_s0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (clock_bridge_afi_50_s0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (clock_bridge_afi_50_s0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (clock_bridge_afi_50_s0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (clock_bridge_afi_50_s0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (clock_bridge_afi_50_s0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (clock_bridge_afi_50_s0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                   // (terminated)
		.csr_read          (1'b0),                                                    // (terminated)
		.csr_write         (1'b0),                                                    // (terminated)
		.csr_readdata      (),                                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                    // (terminated)
		.almost_full_data  (),                                                        // (terminated)
		.almost_empty_data (),                                                        // (terminated)
		.in_empty          (1'b0),                                                    // (terminated)
		.out_empty         (),                                                        // (terminated)
		.in_error          (1'b0),                                                    // (terminated)
		.out_error         (),                                                        // (terminated)
		.in_channel        (1'b0),                                                    // (terminated)
		.out_channel       ()                                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (119),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (102),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (106),
		.PKT_DEST_ID_L             (103),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (16),
		.ST_DATA_W                 (120),
		.AVS_BURSTCOUNT_W          (10),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) m1_clock_bridge_s0_agent (
		.clk                     (m2_ddr2_memory_afi_half_clk_clk),                      //             clk.clk
		.reset                   (m1_clock_bridge_s0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (m1_clock_bridge_s0_agent_m0_address),                  //              m0.address
		.m0_burstcount           (m1_clock_bridge_s0_agent_m0_burstcount),               //                .burstcount
		.m0_byteenable           (m1_clock_bridge_s0_agent_m0_byteenable),               //                .byteenable
		.m0_debugaccess          (m1_clock_bridge_s0_agent_m0_debugaccess),              //                .debugaccess
		.m0_lock                 (m1_clock_bridge_s0_agent_m0_lock),                     //                .lock
		.m0_readdata             (m1_clock_bridge_s0_agent_m0_readdata),                 //                .readdata
		.m0_readdatavalid        (m1_clock_bridge_s0_agent_m0_readdatavalid),            //                .readdatavalid
		.m0_read                 (m1_clock_bridge_s0_agent_m0_read),                     //                .read
		.m0_waitrequest          (m1_clock_bridge_s0_agent_m0_waitrequest),              //                .waitrequest
		.m0_writedata            (m1_clock_bridge_s0_agent_m0_writedata),                //                .writedata
		.m0_write                (m1_clock_bridge_s0_agent_m0_write),                    //                .write
		.rp_endofpacket          (m1_clock_bridge_s0_agent_rp_endofpacket),              //              rp.endofpacket
		.rp_ready                (m1_clock_bridge_s0_agent_rp_ready),                    //                .ready
		.rp_valid                (m1_clock_bridge_s0_agent_rp_valid),                    //                .valid
		.rp_data                 (m1_clock_bridge_s0_agent_rp_data),                     //                .data
		.rp_startofpacket        (m1_clock_bridge_s0_agent_rp_startofpacket),            //                .startofpacket
		.cp_ready                (cmd_mux_012_src_ready),                                //              cp.ready
		.cp_valid                (cmd_mux_012_src_valid),                                //                .valid
		.cp_data                 (cmd_mux_012_src_data),                                 //                .data
		.cp_startofpacket        (cmd_mux_012_src_startofpacket),                        //                .startofpacket
		.cp_endofpacket          (cmd_mux_012_src_endofpacket),                          //                .endofpacket
		.cp_channel              (cmd_mux_012_src_channel),                              //                .channel
		.rf_sink_ready           (m1_clock_bridge_s0_agent_rsp_fifo_out_ready),          //         rf_sink.ready
		.rf_sink_valid           (m1_clock_bridge_s0_agent_rsp_fifo_out_valid),          //                .valid
		.rf_sink_startofpacket   (m1_clock_bridge_s0_agent_rsp_fifo_out_startofpacket),  //                .startofpacket
		.rf_sink_endofpacket     (m1_clock_bridge_s0_agent_rsp_fifo_out_endofpacket),    //                .endofpacket
		.rf_sink_data            (m1_clock_bridge_s0_agent_rsp_fifo_out_data),           //                .data
		.rf_source_ready         (m1_clock_bridge_s0_agent_rf_source_ready),             //       rf_source.ready
		.rf_source_valid         (m1_clock_bridge_s0_agent_rf_source_valid),             //                .valid
		.rf_source_startofpacket (m1_clock_bridge_s0_agent_rf_source_startofpacket),     //                .startofpacket
		.rf_source_endofpacket   (m1_clock_bridge_s0_agent_rf_source_endofpacket),       //                .endofpacket
		.rf_source_data          (m1_clock_bridge_s0_agent_rf_source_data),              //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_012_out_0_ready),                    // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_012_out_0_valid),                    //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_012_out_0_data),                     //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_012_out_0_error),                    //                .error
		.rdata_fifo_src_ready    (m1_clock_bridge_s0_agent_rdata_fifo_src_ready),        //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (m1_clock_bridge_s0_agent_rdata_fifo_src_valid),        //                .valid
		.rdata_fifo_src_data     (m1_clock_bridge_s0_agent_rdata_fifo_src_data),         //                .data
		.m0_response             (2'b00),                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (121),
		.FIFO_DEPTH          (129),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) m1_clock_bridge_s0_agent_rsp_fifo (
		.clk               (m2_ddr2_memory_afi_half_clk_clk),                      //       clk.clk
		.reset             (m1_clock_bridge_s0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (m1_clock_bridge_s0_agent_rf_source_data),              //        in.data
		.in_valid          (m1_clock_bridge_s0_agent_rf_source_valid),             //          .valid
		.in_ready          (m1_clock_bridge_s0_agent_rf_source_ready),             //          .ready
		.in_startofpacket  (m1_clock_bridge_s0_agent_rf_source_startofpacket),     //          .startofpacket
		.in_endofpacket    (m1_clock_bridge_s0_agent_rf_source_endofpacket),       //          .endofpacket
		.out_data          (m1_clock_bridge_s0_agent_rsp_fifo_out_data),           //       out.data
		.out_valid         (m1_clock_bridge_s0_agent_rsp_fifo_out_valid),          //          .valid
		.out_ready         (m1_clock_bridge_s0_agent_rsp_fifo_out_ready),          //          .ready
		.out_startofpacket (m1_clock_bridge_s0_agent_rsp_fifo_out_startofpacket),  //          .startofpacket
		.out_endofpacket   (m1_clock_bridge_s0_agent_rsp_fifo_out_endofpacket),    //          .endofpacket
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (32768),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) m1_clock_bridge_s0_agent_rdata_fifo (
		.clk               (m2_ddr2_memory_afi_half_clk_clk),                      //       clk.clk
		.reset             (m1_clock_bridge_s0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (m1_clock_bridge_s0_agent_rdata_fifo_src_data),         //        in.data
		.in_valid          (m1_clock_bridge_s0_agent_rdata_fifo_src_valid),        //          .valid
		.in_ready          (m1_clock_bridge_s0_agent_rdata_fifo_src_ready),        //          .ready
		.out_data          (m1_clock_bridge_s0_agent_rdata_fifo_out_data),         //       out.data
		.out_valid         (m1_clock_bridge_s0_agent_rdata_fifo_out_valid),        //          .valid
		.out_ready         (m1_clock_bridge_s0_agent_rdata_fifo_out_ready),        //          .ready
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_startofpacket  (1'b0),                                                 // (terminated)
		.in_endofpacket    (1'b0),                                                 // (terminated)
		.out_startofpacket (),                                                     // (terminated)
		.out_endofpacket   (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (119),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (102),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (106),
		.PKT_DEST_ID_L             (103),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (16),
		.ST_DATA_W                 (120),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) onchip_memory_s1_agent (
		.clk                     (clk_100_clk_clk),                                      //             clk.clk
		.reset                   (dma_M1_M2_reset_n_reset_bridge_in_reset_reset),        //       clk_reset.reset
		.m0_address              (onchip_memory_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (onchip_memory_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (onchip_memory_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (onchip_memory_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (onchip_memory_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (onchip_memory_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (onchip_memory_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (onchip_memory_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (onchip_memory_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (onchip_memory_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (onchip_memory_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (onchip_memory_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (onchip_memory_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (onchip_memory_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (onchip_memory_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (onchip_memory_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (onchip_memory_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (onchip_memory_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (onchip_memory_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (onchip_memory_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (onchip_memory_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (onchip_memory_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (onchip_memory_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (onchip_memory_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (onchip_memory_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (onchip_memory_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (onchip_memory_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (onchip_memory_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (onchip_memory_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (onchip_memory_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (onchip_memory_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (onchip_memory_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_013_out_0_ready),                    // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_013_out_0_valid),                    //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_013_out_0_data),                     //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_013_out_0_error),                    //                .error
		.rdata_fifo_src_ready    (onchip_memory_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (onchip_memory_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (onchip_memory_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (121),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) onchip_memory_s1_agent_rsp_fifo (
		.clk               (clk_100_clk_clk),                                   //       clk.clk
		.reset             (dma_M1_M2_reset_n_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_data           (onchip_memory_s1_agent_rf_source_data),             //        in.data
		.in_valid          (onchip_memory_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (onchip_memory_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (onchip_memory_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (onchip_memory_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (onchip_memory_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (onchip_memory_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (onchip_memory_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (onchip_memory_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (onchip_memory_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (119),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (102),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (106),
		.PKT_DEST_ID_L             (103),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (16),
		.ST_DATA_W                 (120),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) descriptor_memory_s1_agent (
		.clk                     (clk_100_clk_clk),                                       //             clk.clk
		.reset                   (sgdma_tx_reset_reset_bridge_in_reset_reset),            //       clk_reset.reset
		.m0_address              (descriptor_memory_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (descriptor_memory_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (descriptor_memory_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (descriptor_memory_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (descriptor_memory_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (descriptor_memory_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (descriptor_memory_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (descriptor_memory_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (descriptor_memory_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (descriptor_memory_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (descriptor_memory_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (descriptor_memory_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (descriptor_memory_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (descriptor_memory_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (descriptor_memory_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (descriptor_memory_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_014_src_ready),                                 //              cp.ready
		.cp_valid                (cmd_mux_014_src_valid),                                 //                .valid
		.cp_data                 (cmd_mux_014_src_data),                                  //                .data
		.cp_startofpacket        (cmd_mux_014_src_startofpacket),                         //                .startofpacket
		.cp_endofpacket          (cmd_mux_014_src_endofpacket),                           //                .endofpacket
		.cp_channel              (cmd_mux_014_src_channel),                               //                .channel
		.rf_sink_ready           (descriptor_memory_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (descriptor_memory_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (descriptor_memory_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (descriptor_memory_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (descriptor_memory_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (descriptor_memory_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (descriptor_memory_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (descriptor_memory_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (descriptor_memory_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (descriptor_memory_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_014_out_0_ready),                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_014_out_0_valid),                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_014_out_0_data),                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_014_out_0_error),                     //                .error
		.rdata_fifo_src_ready    (descriptor_memory_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (descriptor_memory_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (descriptor_memory_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (121),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) descriptor_memory_s1_agent_rsp_fifo (
		.clk               (clk_100_clk_clk),                                       //       clk.clk
		.reset             (sgdma_tx_reset_reset_bridge_in_reset_reset),            // clk_reset.reset
		.in_data           (descriptor_memory_s1_agent_rf_source_data),             //        in.data
		.in_valid          (descriptor_memory_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (descriptor_memory_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (descriptor_memory_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (descriptor_memory_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (descriptor_memory_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (descriptor_memory_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (descriptor_memory_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (descriptor_memory_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (descriptor_memory_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                 // (terminated)
		.csr_read          (1'b0),                                                  // (terminated)
		.csr_write         (1'b0),                                                  // (terminated)
		.csr_readdata      (),                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated)
		.almost_full_data  (),                                                      // (terminated)
		.almost_empty_data (),                                                      // (terminated)
		.in_empty          (1'b0),                                                  // (terminated)
		.out_empty         (),                                                      // (terminated)
		.in_error          (1'b0),                                                  // (terminated)
		.out_error         (),                                                      // (terminated)
		.in_channel        (1'b0),                                                  // (terminated)
		.out_channel       ()                                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (101),
		.PKT_ORI_BURST_SIZE_L      (99),
		.PKT_RESPONSE_STATUS_H     (98),
		.PKT_RESPONSE_STATUS_L     (97),
		.PKT_BURST_SIZE_H          (74),
		.PKT_BURST_SIZE_L          (72),
		.PKT_TRANS_LOCK            (54),
		.PKT_BEGIN_BURST           (79),
		.PKT_PROTECTION_H          (92),
		.PKT_PROTECTION_L          (90),
		.PKT_BURSTWRAP_H           (71),
		.PKT_BURSTWRAP_L           (66),
		.PKT_BYTE_CNT_H            (65),
		.PKT_BYTE_CNT_L            (56),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (18),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_DATA_H                (15),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_SRC_ID_H              (84),
		.PKT_SRC_ID_L              (81),
		.PKT_DEST_ID_H             (88),
		.PKT_DEST_ID_L             (85),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (16),
		.ST_DATA_W                 (102),
		.AVS_BURSTCOUNT_W          (2),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) ext_flash_uas_agent (
		.clk                     (clk_100_clk_clk),                                   //             clk.clk
		.reset                   (sgdma_tx_reset_reset_bridge_in_reset_reset),        //       clk_reset.reset
		.m0_address              (ext_flash_uas_agent_m0_address),                    //              m0.address
		.m0_burstcount           (ext_flash_uas_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (ext_flash_uas_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (ext_flash_uas_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (ext_flash_uas_agent_m0_lock),                       //                .lock
		.m0_readdata             (ext_flash_uas_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (ext_flash_uas_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (ext_flash_uas_agent_m0_read),                       //                .read
		.m0_waitrequest          (ext_flash_uas_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (ext_flash_uas_agent_m0_writedata),                  //                .writedata
		.m0_write                (ext_flash_uas_agent_m0_write),                      //                .write
		.rp_endofpacket          (ext_flash_uas_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (ext_flash_uas_agent_rp_ready),                      //                .ready
		.rp_valid                (ext_flash_uas_agent_rp_valid),                      //                .valid
		.rp_data                 (ext_flash_uas_agent_rp_data),                       //                .data
		.rp_startofpacket        (ext_flash_uas_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (ext_flash_uas_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (ext_flash_uas_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (ext_flash_uas_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (ext_flash_uas_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (ext_flash_uas_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (ext_flash_uas_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (ext_flash_uas_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (ext_flash_uas_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (ext_flash_uas_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (ext_flash_uas_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (ext_flash_uas_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (ext_flash_uas_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (ext_flash_uas_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (ext_flash_uas_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (ext_flash_uas_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (ext_flash_uas_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_015_out_0_ready),                 // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_015_out_0_valid),                 //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_015_out_0_data),                  //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_015_out_0_error),                 //                .error
		.rdata_fifo_src_ready    (ext_flash_uas_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (ext_flash_uas_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (ext_flash_uas_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (103),
		.FIFO_DEPTH          (4),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ext_flash_uas_agent_rsp_fifo (
		.clk               (clk_100_clk_clk),                                //       clk.clk
		.reset             (sgdma_tx_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_data           (ext_flash_uas_agent_rf_source_data),             //        in.data
		.in_valid          (ext_flash_uas_agent_rf_source_valid),            //          .valid
		.in_ready          (ext_flash_uas_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (ext_flash_uas_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (ext_flash_uas_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (ext_flash_uas_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (ext_flash_uas_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (ext_flash_uas_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (ext_flash_uas_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (ext_flash_uas_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (18),
		.FIFO_DEPTH          (4),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ext_flash_uas_agent_rdata_fifo (
		.clk               (clk_100_clk_clk),                            //       clk.clk
		.reset             (sgdma_tx_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (ext_flash_uas_agent_rdata_fifo_src_data),    //        in.data
		.in_valid          (ext_flash_uas_agent_rdata_fifo_src_valid),   //          .valid
		.in_ready          (ext_flash_uas_agent_rdata_fifo_src_ready),   //          .ready
		.out_data          (ext_flash_uas_agent_rdata_fifo_out_data),    //       out.data
		.out_valid         (ext_flash_uas_agent_rdata_fifo_out_valid),   //          .valid
		.out_ready         (ext_flash_uas_agent_rdata_fifo_out_ready),   //          .ready
		.csr_address       (2'b00),                                      // (terminated)
		.csr_read          (1'b0),                                       // (terminated)
		.csr_write         (1'b0),                                       // (terminated)
		.csr_readdata      (),                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),       // (terminated)
		.almost_full_data  (),                                           // (terminated)
		.almost_empty_data (),                                           // (terminated)
		.in_startofpacket  (1'b0),                                       // (terminated)
		.in_endofpacket    (1'b0),                                       // (terminated)
		.out_startofpacket (),                                           // (terminated)
		.out_endofpacket   (),                                           // (terminated)
		.in_empty          (1'b0),                                       // (terminated)
		.out_empty         (),                                           // (terminated)
		.in_error          (1'b0),                                       // (terminated)
		.out_error         (),                                           // (terminated)
		.in_channel        (1'b0),                                       // (terminated)
		.out_channel       ()                                            // (terminated)
	);

	MebX_Qsys_Project_mm_interconnect_0_router router (
		.sink_ready         (nios2_gen2_0_data_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (nios2_gen2_0_data_master_agent_cp_valid),         //          .valid
		.sink_data          (nios2_gen2_0_data_master_agent_cp_data),          //          .data
		.sink_startofpacket (nios2_gen2_0_data_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (nios2_gen2_0_data_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_100_clk_clk),                                 //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_src_ready),                                //       src.ready
		.src_valid          (router_src_valid),                                //          .valid
		.src_data           (router_src_data),                                 //          .data
		.src_channel        (router_src_channel),                              //          .channel
		.src_startofpacket  (router_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                           //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_router_001 router_001 (
		.sink_ready         (nios2_gen2_0_instruction_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (nios2_gen2_0_instruction_master_agent_cp_valid),         //          .valid
		.sink_data          (nios2_gen2_0_instruction_master_agent_cp_data),          //          .data
		.sink_startofpacket (nios2_gen2_0_instruction_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (nios2_gen2_0_instruction_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_100_clk_clk),                                        //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.src_ready          (router_001_src_ready),                                   //       src.ready
		.src_valid          (router_001_src_valid),                                   //          .valid
		.src_data           (router_001_src_data),                                    //          .data
		.src_channel        (router_001_src_channel),                                 //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                           //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                              //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_router_002 router_002 (
		.sink_ready         (sgdma_tx_m_read_agent_cp_ready),             //      sink.ready
		.sink_valid         (sgdma_tx_m_read_agent_cp_valid),             //          .valid
		.sink_data          (sgdma_tx_m_read_agent_cp_data),              //          .data
		.sink_startofpacket (sgdma_tx_m_read_agent_cp_startofpacket),     //          .startofpacket
		.sink_endofpacket   (sgdma_tx_m_read_agent_cp_endofpacket),       //          .endofpacket
		.clk                (clk_100_clk_clk),                            //       clk.clk
		.reset              (sgdma_tx_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_002_src_ready),                       //       src.ready
		.src_valid          (router_002_src_valid),                       //          .valid
		.src_data           (router_002_src_data),                        //          .data
		.src_channel        (router_002_src_channel),                     //          .channel
		.src_startofpacket  (router_002_src_startofpacket),               //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                  //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_router_002 router_003 (
		.sink_ready         (sgdma_rx_m_write_agent_cp_ready),            //      sink.ready
		.sink_valid         (sgdma_rx_m_write_agent_cp_valid),            //          .valid
		.sink_data          (sgdma_rx_m_write_agent_cp_data),             //          .data
		.sink_startofpacket (sgdma_rx_m_write_agent_cp_startofpacket),    //          .startofpacket
		.sink_endofpacket   (sgdma_rx_m_write_agent_cp_endofpacket),      //          .endofpacket
		.clk                (clk_100_clk_clk),                            //       clk.clk
		.reset              (sgdma_tx_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_003_src_ready),                       //       src.ready
		.src_valid          (router_003_src_valid),                       //          .valid
		.src_data           (router_003_src_data),                        //          .data
		.src_channel        (router_003_src_channel),                     //          .channel
		.src_startofpacket  (router_003_src_startofpacket),               //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                  //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_router_004 router_004 (
		.sink_ready         (sgdma_tx_descriptor_read_agent_cp_ready),         //      sink.ready
		.sink_valid         (sgdma_tx_descriptor_read_agent_cp_valid),         //          .valid
		.sink_data          (sgdma_tx_descriptor_read_agent_cp_data),          //          .data
		.sink_startofpacket (sgdma_tx_descriptor_read_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (sgdma_tx_descriptor_read_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_100_clk_clk),                                 //       clk.clk
		.reset              (sgdma_tx_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.src_ready          (router_004_src_ready),                            //       src.ready
		.src_valid          (router_004_src_valid),                            //          .valid
		.src_data           (router_004_src_data),                             //          .data
		.src_channel        (router_004_src_channel),                          //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                    //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                       //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_router_004 router_005 (
		.sink_ready         (sgdma_rx_descriptor_read_agent_cp_ready),         //      sink.ready
		.sink_valid         (sgdma_rx_descriptor_read_agent_cp_valid),         //          .valid
		.sink_data          (sgdma_rx_descriptor_read_agent_cp_data),          //          .data
		.sink_startofpacket (sgdma_rx_descriptor_read_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (sgdma_rx_descriptor_read_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_100_clk_clk),                                 //       clk.clk
		.reset              (sgdma_tx_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.src_ready          (router_005_src_ready),                            //       src.ready
		.src_valid          (router_005_src_valid),                            //          .valid
		.src_data           (router_005_src_data),                             //          .data
		.src_channel        (router_005_src_channel),                          //          .channel
		.src_startofpacket  (router_005_src_startofpacket),                    //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                       //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_router_004 router_006 (
		.sink_ready         (sgdma_tx_descriptor_write_agent_cp_ready),         //      sink.ready
		.sink_valid         (sgdma_tx_descriptor_write_agent_cp_valid),         //          .valid
		.sink_data          (sgdma_tx_descriptor_write_agent_cp_data),          //          .data
		.sink_startofpacket (sgdma_tx_descriptor_write_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (sgdma_tx_descriptor_write_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_100_clk_clk),                                  //       clk.clk
		.reset              (sgdma_tx_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.src_ready          (router_006_src_ready),                             //       src.ready
		.src_valid          (router_006_src_valid),                             //          .valid
		.src_data           (router_006_src_data),                              //          .data
		.src_channel        (router_006_src_channel),                           //          .channel
		.src_startofpacket  (router_006_src_startofpacket),                     //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                        //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_router_004 router_007 (
		.sink_ready         (sgdma_rx_descriptor_write_agent_cp_ready),         //      sink.ready
		.sink_valid         (sgdma_rx_descriptor_write_agent_cp_valid),         //          .valid
		.sink_data          (sgdma_rx_descriptor_write_agent_cp_data),          //          .data
		.sink_startofpacket (sgdma_rx_descriptor_write_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (sgdma_rx_descriptor_write_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_100_clk_clk),                                  //       clk.clk
		.reset              (sgdma_tx_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.src_ready          (router_007_src_ready),                             //       src.ready
		.src_valid          (router_007_src_valid),                             //          .valid
		.src_data           (router_007_src_data),                              //          .data
		.src_channel        (router_007_src_channel),                           //          .channel
		.src_startofpacket  (router_007_src_startofpacket),                     //          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                        //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_router_008 router_008 (
		.sink_ready         (dma_m1_m2_mm_read_agent_cp_ready),              //      sink.ready
		.sink_valid         (dma_m1_m2_mm_read_agent_cp_valid),              //          .valid
		.sink_data          (dma_m1_m2_mm_read_agent_cp_data),               //          .data
		.sink_startofpacket (dma_m1_m2_mm_read_agent_cp_startofpacket),      //          .startofpacket
		.sink_endofpacket   (dma_m1_m2_mm_read_agent_cp_endofpacket),        //          .endofpacket
		.clk                (clk_100_clk_clk),                               //       clk.clk
		.reset              (dma_M1_M2_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_008_src_ready),                          //       src.ready
		.src_valid          (router_008_src_valid),                          //          .valid
		.src_data           (router_008_src_data),                           //          .data
		.src_channel        (router_008_src_channel),                        //          .channel
		.src_startofpacket  (router_008_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_008_src_endofpacket)                     //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_router_008 router_009 (
		.sink_ready         (dma_m2_m1_mm_write_agent_cp_ready),             //      sink.ready
		.sink_valid         (dma_m2_m1_mm_write_agent_cp_valid),             //          .valid
		.sink_data          (dma_m2_m1_mm_write_agent_cp_data),              //          .data
		.sink_startofpacket (dma_m2_m1_mm_write_agent_cp_startofpacket),     //          .startofpacket
		.sink_endofpacket   (dma_m2_m1_mm_write_agent_cp_endofpacket),       //          .endofpacket
		.clk                (clk_100_clk_clk),                               //       clk.clk
		.reset              (dma_M1_M2_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_009_src_ready),                          //       src.ready
		.src_valid          (router_009_src_valid),                          //          .valid
		.src_data           (router_009_src_data),                           //          .data
		.src_channel        (router_009_src_channel),                        //          .channel
		.src_startofpacket  (router_009_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_009_src_endofpacket)                     //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_router_010 router_010 (
		.sink_ready         (dma_m2_m1_mm_read_agent_cp_ready),              //      sink.ready
		.sink_valid         (dma_m2_m1_mm_read_agent_cp_valid),              //          .valid
		.sink_data          (dma_m2_m1_mm_read_agent_cp_data),               //          .data
		.sink_startofpacket (dma_m2_m1_mm_read_agent_cp_startofpacket),      //          .startofpacket
		.sink_endofpacket   (dma_m2_m1_mm_read_agent_cp_endofpacket),        //          .endofpacket
		.clk                (clk_100_clk_clk),                               //       clk.clk
		.reset              (dma_M1_M2_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_010_src_ready),                          //       src.ready
		.src_valid          (router_010_src_valid),                          //          .valid
		.src_data           (router_010_src_data),                           //          .data
		.src_channel        (router_010_src_channel),                        //          .channel
		.src_startofpacket  (router_010_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_010_src_endofpacket)                     //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_router_010 router_011 (
		.sink_ready         (dma_m1_m2_mm_write_agent_cp_ready),             //      sink.ready
		.sink_valid         (dma_m1_m2_mm_write_agent_cp_valid),             //          .valid
		.sink_data          (dma_m1_m2_mm_write_agent_cp_data),              //          .data
		.sink_startofpacket (dma_m1_m2_mm_write_agent_cp_startofpacket),     //          .startofpacket
		.sink_endofpacket   (dma_m1_m2_mm_write_agent_cp_endofpacket),       //          .endofpacket
		.clk                (clk_100_clk_clk),                               //       clk.clk
		.reset              (dma_M1_M2_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_011_src_ready),                          //       src.ready
		.src_valid          (router_011_src_valid),                          //          .valid
		.src_data           (router_011_src_data),                           //          .data
		.src_channel        (router_011_src_channel),                        //          .channel
		.src_startofpacket  (router_011_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_011_src_endofpacket)                     //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_router_012 router_012 (
		.sink_ready         (jtag_uart_0_avalon_jtag_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (jtag_uart_0_avalon_jtag_slave_agent_rp_valid),         //          .valid
		.sink_data          (jtag_uart_0_avalon_jtag_slave_agent_rp_data),          //          .data
		.sink_startofpacket (jtag_uart_0_avalon_jtag_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (jtag_uart_0_avalon_jtag_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_100_clk_clk),                                      //       clk.clk
		.reset              (dma_M1_M2_reset_n_reset_bridge_in_reset_reset),        // clk_reset.reset
		.src_ready          (router_012_src_ready),                                 //       src.ready
		.src_valid          (router_012_src_valid),                                 //          .valid
		.src_data           (router_012_src_data),                                  //          .data
		.src_channel        (router_012_src_channel),                               //          .channel
		.src_startofpacket  (router_012_src_startofpacket),                         //          .startofpacket
		.src_endofpacket    (router_012_src_endofpacket)                            //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_router_013 router_013 (
		.sink_ready         (m2_ddr2_memory_avl_agent_rp_ready),                               //      sink.ready
		.sink_valid         (m2_ddr2_memory_avl_agent_rp_valid),                               //          .valid
		.sink_data          (m2_ddr2_memory_avl_agent_rp_data),                                //          .data
		.sink_startofpacket (m2_ddr2_memory_avl_agent_rp_startofpacket),                       //          .startofpacket
		.sink_endofpacket   (m2_ddr2_memory_avl_agent_rp_endofpacket),                         //          .endofpacket
		.clk                (m2_ddr2_memory_afi_clk_clk),                                      //       clk.clk
		.reset              (m2_ddr2_memory_avl_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_013_src_ready),                                            //       src.ready
		.src_valid          (router_013_src_valid),                                            //          .valid
		.src_data           (router_013_src_data),                                             //          .data
		.src_channel        (router_013_src_channel),                                          //          .channel
		.src_startofpacket  (router_013_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket    (router_013_src_endofpacket)                                       //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_router_012 router_014 (
		.sink_ready         (tse_mac_control_port_agent_rp_ready),         //      sink.ready
		.sink_valid         (tse_mac_control_port_agent_rp_valid),         //          .valid
		.sink_data          (tse_mac_control_port_agent_rp_data),          //          .data
		.sink_startofpacket (tse_mac_control_port_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (tse_mac_control_port_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_100_clk_clk),                             //       clk.clk
		.reset              (sgdma_tx_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_014_src_ready),                        //       src.ready
		.src_valid          (router_014_src_valid),                        //          .valid
		.src_data           (router_014_src_data),                         //          .data
		.src_channel        (router_014_src_channel),                      //          .channel
		.src_startofpacket  (router_014_src_startofpacket),                //          .startofpacket
		.src_endofpacket    (router_014_src_endofpacket)                   //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_router_012 router_015 (
		.sink_ready         (sysid_qsys_control_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (sysid_qsys_control_slave_agent_rp_valid),         //          .valid
		.sink_data          (sysid_qsys_control_slave_agent_rp_data),          //          .data
		.sink_startofpacket (sysid_qsys_control_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (sysid_qsys_control_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_100_clk_clk),                                 //       clk.clk
		.reset              (dma_M1_M2_reset_n_reset_bridge_in_reset_reset),   // clk_reset.reset
		.src_ready          (router_015_src_ready),                            //       src.ready
		.src_valid          (router_015_src_valid),                            //          .valid
		.src_data           (router_015_src_data),                             //          .data
		.src_channel        (router_015_src_channel),                          //          .channel
		.src_startofpacket  (router_015_src_startofpacket),                    //          .startofpacket
		.src_endofpacket    (router_015_src_endofpacket)                       //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_router_012 router_016 (
		.sink_ready         (sgdma_tx_csr_agent_rp_ready),                //      sink.ready
		.sink_valid         (sgdma_tx_csr_agent_rp_valid),                //          .valid
		.sink_data          (sgdma_tx_csr_agent_rp_data),                 //          .data
		.sink_startofpacket (sgdma_tx_csr_agent_rp_startofpacket),        //          .startofpacket
		.sink_endofpacket   (sgdma_tx_csr_agent_rp_endofpacket),          //          .endofpacket
		.clk                (clk_100_clk_clk),                            //       clk.clk
		.reset              (sgdma_tx_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_016_src_ready),                       //       src.ready
		.src_valid          (router_016_src_valid),                       //          .valid
		.src_data           (router_016_src_data),                        //          .data
		.src_channel        (router_016_src_channel),                     //          .channel
		.src_startofpacket  (router_016_src_startofpacket),               //          .startofpacket
		.src_endofpacket    (router_016_src_endofpacket)                  //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_router_012 router_017 (
		.sink_ready         (sgdma_rx_csr_agent_rp_ready),                //      sink.ready
		.sink_valid         (sgdma_rx_csr_agent_rp_valid),                //          .valid
		.sink_data          (sgdma_rx_csr_agent_rp_data),                 //          .data
		.sink_startofpacket (sgdma_rx_csr_agent_rp_startofpacket),        //          .startofpacket
		.sink_endofpacket   (sgdma_rx_csr_agent_rp_endofpacket),          //          .endofpacket
		.clk                (clk_100_clk_clk),                            //       clk.clk
		.reset              (sgdma_tx_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_017_src_ready),                       //       src.ready
		.src_valid          (router_017_src_valid),                       //          .valid
		.src_data           (router_017_src_data),                        //          .data
		.src_channel        (router_017_src_channel),                     //          .channel
		.src_startofpacket  (router_017_src_startofpacket),               //          .startofpacket
		.src_endofpacket    (router_017_src_endofpacket)                  //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_router_012 router_018 (
		.sink_ready         (dma_m1_m2_csr_agent_rp_ready),                  //      sink.ready
		.sink_valid         (dma_m1_m2_csr_agent_rp_valid),                  //          .valid
		.sink_data          (dma_m1_m2_csr_agent_rp_data),                   //          .data
		.sink_startofpacket (dma_m1_m2_csr_agent_rp_startofpacket),          //          .startofpacket
		.sink_endofpacket   (dma_m1_m2_csr_agent_rp_endofpacket),            //          .endofpacket
		.clk                (clk_100_clk_clk),                               //       clk.clk
		.reset              (dma_M1_M2_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_018_src_ready),                          //       src.ready
		.src_valid          (router_018_src_valid),                          //          .valid
		.src_data           (router_018_src_data),                           //          .data
		.src_channel        (router_018_src_channel),                        //          .channel
		.src_startofpacket  (router_018_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_018_src_endofpacket)                     //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_router_012 router_019 (
		.sink_ready         (dma_m2_m1_csr_agent_rp_ready),                  //      sink.ready
		.sink_valid         (dma_m2_m1_csr_agent_rp_valid),                  //          .valid
		.sink_data          (dma_m2_m1_csr_agent_rp_data),                   //          .data
		.sink_startofpacket (dma_m2_m1_csr_agent_rp_startofpacket),          //          .startofpacket
		.sink_endofpacket   (dma_m2_m1_csr_agent_rp_endofpacket),            //          .endofpacket
		.clk                (clk_100_clk_clk),                               //       clk.clk
		.reset              (dma_M1_M2_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_019_src_ready),                          //       src.ready
		.src_valid          (router_019_src_valid),                          //          .valid
		.src_data           (router_019_src_data),                           //          .data
		.src_channel        (router_019_src_channel),                        //          .channel
		.src_startofpacket  (router_019_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_019_src_endofpacket)                     //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_router_020 router_020 (
		.sink_ready         (nios2_gen2_0_debug_mem_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (nios2_gen2_0_debug_mem_slave_agent_rp_valid),         //          .valid
		.sink_data          (nios2_gen2_0_debug_mem_slave_agent_rp_data),          //          .data
		.sink_startofpacket (nios2_gen2_0_debug_mem_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (nios2_gen2_0_debug_mem_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_100_clk_clk),                                     //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.src_ready          (router_020_src_ready),                                //       src.ready
		.src_valid          (router_020_src_valid),                                //          .valid
		.src_data           (router_020_src_data),                                 //          .data
		.src_channel        (router_020_src_channel),                              //          .channel
		.src_startofpacket  (router_020_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_020_src_endofpacket)                           //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_router_021 router_021 (
		.sink_ready         (dma_m1_m2_descriptor_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (dma_m1_m2_descriptor_slave_agent_rp_valid),         //          .valid
		.sink_data          (dma_m1_m2_descriptor_slave_agent_rp_data),          //          .data
		.sink_startofpacket (dma_m1_m2_descriptor_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (dma_m1_m2_descriptor_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_100_clk_clk),                                   //       clk.clk
		.reset              (dma_M1_M2_reset_n_reset_bridge_in_reset_reset),     // clk_reset.reset
		.src_ready          (router_021_src_ready),                              //       src.ready
		.src_valid          (router_021_src_valid),                              //          .valid
		.src_data           (router_021_src_data),                               //          .data
		.src_channel        (router_021_src_channel),                            //          .channel
		.src_startofpacket  (router_021_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_021_src_endofpacket)                         //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_router_021 router_022 (
		.sink_ready         (dma_m2_m1_descriptor_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (dma_m2_m1_descriptor_slave_agent_rp_valid),         //          .valid
		.sink_data          (dma_m2_m1_descriptor_slave_agent_rp_data),          //          .data
		.sink_startofpacket (dma_m2_m1_descriptor_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (dma_m2_m1_descriptor_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_100_clk_clk),                                   //       clk.clk
		.reset              (dma_M1_M2_reset_n_reset_bridge_in_reset_reset),     // clk_reset.reset
		.src_ready          (router_022_src_ready),                              //       src.ready
		.src_valid          (router_022_src_valid),                              //          .valid
		.src_data           (router_022_src_data),                               //          .data
		.src_channel        (router_022_src_channel),                            //          .channel
		.src_startofpacket  (router_022_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_022_src_endofpacket)                         //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_router_012 router_023 (
		.sink_ready         (clock_bridge_afi_50_s0_agent_rp_ready),         //      sink.ready
		.sink_valid         (clock_bridge_afi_50_s0_agent_rp_valid),         //          .valid
		.sink_data          (clock_bridge_afi_50_s0_agent_rp_data),          //          .data
		.sink_startofpacket (clock_bridge_afi_50_s0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (clock_bridge_afi_50_s0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_100_clk_clk),                               //       clk.clk
		.reset              (dma_M1_M2_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_023_src_ready),                          //       src.ready
		.src_valid          (router_023_src_valid),                          //          .valid
		.src_data           (router_023_src_data),                           //          .data
		.src_channel        (router_023_src_channel),                        //          .channel
		.src_startofpacket  (router_023_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_023_src_endofpacket)                     //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_router_024 router_024 (
		.sink_ready         (m1_clock_bridge_s0_agent_rp_ready),                    //      sink.ready
		.sink_valid         (m1_clock_bridge_s0_agent_rp_valid),                    //          .valid
		.sink_data          (m1_clock_bridge_s0_agent_rp_data),                     //          .data
		.sink_startofpacket (m1_clock_bridge_s0_agent_rp_startofpacket),            //          .startofpacket
		.sink_endofpacket   (m1_clock_bridge_s0_agent_rp_endofpacket),              //          .endofpacket
		.clk                (m2_ddr2_memory_afi_half_clk_clk),                      //       clk.clk
		.reset              (m1_clock_bridge_s0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_024_src_ready),                                 //       src.ready
		.src_valid          (router_024_src_valid),                                 //          .valid
		.src_data           (router_024_src_data),                                  //          .data
		.src_channel        (router_024_src_channel),                               //          .channel
		.src_startofpacket  (router_024_src_startofpacket),                         //          .startofpacket
		.src_endofpacket    (router_024_src_endofpacket)                            //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_router_025 router_025 (
		.sink_ready         (onchip_memory_s1_agent_rp_ready),               //      sink.ready
		.sink_valid         (onchip_memory_s1_agent_rp_valid),               //          .valid
		.sink_data          (onchip_memory_s1_agent_rp_data),                //          .data
		.sink_startofpacket (onchip_memory_s1_agent_rp_startofpacket),       //          .startofpacket
		.sink_endofpacket   (onchip_memory_s1_agent_rp_endofpacket),         //          .endofpacket
		.clk                (clk_100_clk_clk),                               //       clk.clk
		.reset              (dma_M1_M2_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_025_src_ready),                          //       src.ready
		.src_valid          (router_025_src_valid),                          //          .valid
		.src_data           (router_025_src_data),                           //          .data
		.src_channel        (router_025_src_channel),                        //          .channel
		.src_startofpacket  (router_025_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_025_src_endofpacket)                     //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_router_026 router_026 (
		.sink_ready         (descriptor_memory_s1_agent_rp_ready),         //      sink.ready
		.sink_valid         (descriptor_memory_s1_agent_rp_valid),         //          .valid
		.sink_data          (descriptor_memory_s1_agent_rp_data),          //          .data
		.sink_startofpacket (descriptor_memory_s1_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (descriptor_memory_s1_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_100_clk_clk),                             //       clk.clk
		.reset              (sgdma_tx_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_026_src_ready),                        //       src.ready
		.src_valid          (router_026_src_valid),                        //          .valid
		.src_data           (router_026_src_data),                         //          .data
		.src_channel        (router_026_src_channel),                      //          .channel
		.src_startofpacket  (router_026_src_startofpacket),                //          .startofpacket
		.src_endofpacket    (router_026_src_endofpacket)                   //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_router_027 router_027 (
		.sink_ready         (ext_flash_uas_agent_rp_ready),               //      sink.ready
		.sink_valid         (ext_flash_uas_agent_rp_valid),               //          .valid
		.sink_data          (ext_flash_uas_agent_rp_data),                //          .data
		.sink_startofpacket (ext_flash_uas_agent_rp_startofpacket),       //          .startofpacket
		.sink_endofpacket   (ext_flash_uas_agent_rp_endofpacket),         //          .endofpacket
		.clk                (clk_100_clk_clk),                            //       clk.clk
		.reset              (sgdma_tx_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_027_src_ready),                       //       src.ready
		.src_valid          (router_027_src_valid),                       //          .valid
		.src_data           (router_027_src_data),                        //          .data
		.src_channel        (router_027_src_channel),                     //          .channel
		.src_startofpacket  (router_027_src_startofpacket),               //          .startofpacket
		.src_endofpacket    (router_027_src_endofpacket)                  //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (106),
		.PKT_DEST_ID_L             (103),
		.PKT_SRC_ID_H              (102),
		.PKT_SRC_ID_L              (99),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.MAX_OUTSTANDING_RESPONSES (5),
		.PIPELINED                 (0),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (16),
		.VALID_WIDTH               (16),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) nios2_gen2_0_instruction_master_limiter (
		.clk                    (clk_100_clk_clk),                                               //       clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.cmd_sink_ready         (router_001_src_ready),                                          //  cmd_sink.ready
		.cmd_sink_valid         (router_001_src_valid),                                          //          .valid
		.cmd_sink_data          (router_001_src_data),                                           //          .data
		.cmd_sink_channel       (router_001_src_channel),                                        //          .channel
		.cmd_sink_startofpacket (router_001_src_startofpacket),                                  //          .startofpacket
		.cmd_sink_endofpacket   (router_001_src_endofpacket),                                    //          .endofpacket
		.cmd_src_ready          (nios2_gen2_0_instruction_master_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (nios2_gen2_0_instruction_master_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (nios2_gen2_0_instruction_master_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (nios2_gen2_0_instruction_master_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (nios2_gen2_0_instruction_master_limiter_cmd_src_endofpacket),   //          .endofpacket
		.rsp_sink_ready         (rsp_mux_001_src_ready),                                         //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_001_src_valid),                                         //          .valid
		.rsp_sink_channel       (rsp_mux_001_src_channel),                                       //          .channel
		.rsp_sink_data          (rsp_mux_001_src_data),                                          //          .data
		.rsp_sink_startofpacket (rsp_mux_001_src_startofpacket),                                 //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_001_src_endofpacket),                                   //          .endofpacket
		.rsp_src_ready          (nios2_gen2_0_instruction_master_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (nios2_gen2_0_instruction_master_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (nios2_gen2_0_instruction_master_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (nios2_gen2_0_instruction_master_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (nios2_gen2_0_instruction_master_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (nios2_gen2_0_instruction_master_limiter_rsp_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (nios2_gen2_0_instruction_master_limiter_cmd_valid_data)         // cmd_valid.data
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (319),
		.PKT_ADDR_L                (288),
		.PKT_BEGIN_BURST           (349),
		.PKT_BYTE_CNT_H            (335),
		.PKT_BYTE_CNT_L            (326),
		.PKT_BYTEEN_H              (287),
		.PKT_BYTEEN_L              (256),
		.PKT_BURST_SIZE_H          (344),
		.PKT_BURST_SIZE_L          (342),
		.PKT_BURST_TYPE_H          (346),
		.PKT_BURST_TYPE_L          (345),
		.PKT_BURSTWRAP_H           (341),
		.PKT_BURSTWRAP_L           (336),
		.PKT_TRANS_COMPRESSED_READ (320),
		.PKT_TRANS_WRITE           (322),
		.PKT_TRANS_READ            (323),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (372),
		.ST_CHANNEL_W              (16),
		.OUT_BYTE_CNT_H            (333),
		.OUT_BURSTWRAP_H           (341),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (63),
		.BURSTWRAP_CONST_VALUE     (63),
		.ADAPTER_VERSION           ("13.1")
	) m2_ddr2_memory_avl_burst_adapter (
		.clk                   (m2_ddr2_memory_afi_clk_clk),                                      //       cr0.clk
		.reset                 (m2_ddr2_memory_avl_translator_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (m2_ddr2_memory_avl_cmd_width_adapter_src_valid),                  //     sink0.valid
		.sink0_data            (m2_ddr2_memory_avl_cmd_width_adapter_src_data),                   //          .data
		.sink0_channel         (m2_ddr2_memory_avl_cmd_width_adapter_src_channel),                //          .channel
		.sink0_startofpacket   (m2_ddr2_memory_avl_cmd_width_adapter_src_startofpacket),          //          .startofpacket
		.sink0_endofpacket     (m2_ddr2_memory_avl_cmd_width_adapter_src_endofpacket),            //          .endofpacket
		.sink0_ready           (m2_ddr2_memory_avl_cmd_width_adapter_src_ready),                  //          .ready
		.source0_valid         (m2_ddr2_memory_avl_burst_adapter_source0_valid),                  //   source0.valid
		.source0_data          (m2_ddr2_memory_avl_burst_adapter_source0_data),                   //          .data
		.source0_channel       (m2_ddr2_memory_avl_burst_adapter_source0_channel),                //          .channel
		.source0_startofpacket (m2_ddr2_memory_avl_burst_adapter_source0_startofpacket),          //          .startofpacket
		.source0_endofpacket   (m2_ddr2_memory_avl_burst_adapter_source0_endofpacket),            //          .endofpacket
		.source0_ready         (m2_ddr2_memory_avl_burst_adapter_source0_ready)                   //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (97),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (84),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (16),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (89),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (31),
		.BURSTWRAP_CONST_VALUE     (31),
		.ADAPTER_VERSION           ("13.1")
	) nios2_gen2_0_debug_mem_slave_burst_adapter (
		.clk                   (clk_100_clk_clk),                                                  //       cr0.clk
		.reset                 (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                   // cr0_reset.reset
		.sink0_valid           (cmd_mux_008_src_valid),                                            //     sink0.valid
		.sink0_data            (cmd_mux_008_src_data),                                             //          .data
		.sink0_channel         (cmd_mux_008_src_channel),                                          //          .channel
		.sink0_startofpacket   (cmd_mux_008_src_startofpacket),                                    //          .startofpacket
		.sink0_endofpacket     (cmd_mux_008_src_endofpacket),                                      //          .endofpacket
		.sink0_ready           (cmd_mux_008_src_ready),                                            //          .ready
		.source0_valid         (nios2_gen2_0_debug_mem_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (nios2_gen2_0_debug_mem_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (nios2_gen2_0_debug_mem_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (nios2_gen2_0_debug_mem_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (nios2_gen2_0_debug_mem_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (nios2_gen2_0_debug_mem_slave_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (97),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (84),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (16),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (89),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (31),
		.BURSTWRAP_CONST_VALUE     (31),
		.ADAPTER_VERSION           ("13.1")
	) onchip_memory_s1_burst_adapter (
		.clk                   (clk_100_clk_clk),                                      //       cr0.clk
		.reset                 (dma_M1_M2_reset_n_reset_bridge_in_reset_reset),        // cr0_reset.reset
		.sink0_valid           (cmd_mux_013_src_valid),                                //     sink0.valid
		.sink0_data            (cmd_mux_013_src_data),                                 //          .data
		.sink0_channel         (cmd_mux_013_src_channel),                              //          .channel
		.sink0_startofpacket   (cmd_mux_013_src_startofpacket),                        //          .startofpacket
		.sink0_endofpacket     (cmd_mux_013_src_endofpacket),                          //          .endofpacket
		.sink0_ready           (cmd_mux_013_src_ready),                                //          .ready
		.source0_valid         (onchip_memory_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (onchip_memory_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (onchip_memory_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (onchip_memory_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (onchip_memory_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (onchip_memory_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (18),
		.PKT_BEGIN_BURST           (79),
		.PKT_BYTE_CNT_H            (65),
		.PKT_BYTE_CNT_L            (56),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_BURST_SIZE_H          (74),
		.PKT_BURST_SIZE_L          (72),
		.PKT_BURST_TYPE_H          (76),
		.PKT_BURST_TYPE_L          (75),
		.PKT_BURSTWRAP_H           (71),
		.PKT_BURSTWRAP_L           (66),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (102),
		.ST_CHANNEL_W              (16),
		.OUT_BYTE_CNT_H            (57),
		.OUT_BURSTWRAP_H           (71),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (31),
		.BURSTWRAP_CONST_VALUE     (31),
		.ADAPTER_VERSION           ("13.1")
	) ext_flash_uas_burst_adapter (
		.clk                   (clk_100_clk_clk),                                   //       cr0.clk
		.reset                 (sgdma_tx_reset_reset_bridge_in_reset_reset),        // cr0_reset.reset
		.sink0_valid           (ext_flash_uas_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (ext_flash_uas_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (ext_flash_uas_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (ext_flash_uas_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (ext_flash_uas_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (ext_flash_uas_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (ext_flash_uas_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (ext_flash_uas_burst_adapter_source0_data),          //          .data
		.source0_channel       (ext_flash_uas_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (ext_flash_uas_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (ext_flash_uas_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (ext_flash_uas_burst_adapter_source0_ready)          //          .ready
	);

	MebX_Qsys_Project_mm_interconnect_0_cmd_demux cmd_demux (
		.clk                 (clk_100_clk_clk),                                //       clk.clk
		.reset               (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready          (router_src_ready),                               //      sink.ready
		.sink_channel        (router_src_channel),                             //          .channel
		.sink_data           (router_src_data),                                //          .data
		.sink_startofpacket  (router_src_startofpacket),                       //          .startofpacket
		.sink_endofpacket    (router_src_endofpacket),                         //          .endofpacket
		.sink_valid          (router_src_valid),                               //          .valid
		.src0_ready          (cmd_demux_src0_ready),                           //      src0.ready
		.src0_valid          (cmd_demux_src0_valid),                           //          .valid
		.src0_data           (cmd_demux_src0_data),                            //          .data
		.src0_channel        (cmd_demux_src0_channel),                         //          .channel
		.src0_startofpacket  (cmd_demux_src0_startofpacket),                   //          .startofpacket
		.src0_endofpacket    (cmd_demux_src0_endofpacket),                     //          .endofpacket
		.src1_ready          (cmd_demux_src1_ready),                           //      src1.ready
		.src1_valid          (cmd_demux_src1_valid),                           //          .valid
		.src1_data           (cmd_demux_src1_data),                            //          .data
		.src1_channel        (cmd_demux_src1_channel),                         //          .channel
		.src1_startofpacket  (cmd_demux_src1_startofpacket),                   //          .startofpacket
		.src1_endofpacket    (cmd_demux_src1_endofpacket),                     //          .endofpacket
		.src2_ready          (cmd_demux_src2_ready),                           //      src2.ready
		.src2_valid          (cmd_demux_src2_valid),                           //          .valid
		.src2_data           (cmd_demux_src2_data),                            //          .data
		.src2_channel        (cmd_demux_src2_channel),                         //          .channel
		.src2_startofpacket  (cmd_demux_src2_startofpacket),                   //          .startofpacket
		.src2_endofpacket    (cmd_demux_src2_endofpacket),                     //          .endofpacket
		.src3_ready          (cmd_demux_src3_ready),                           //      src3.ready
		.src3_valid          (cmd_demux_src3_valid),                           //          .valid
		.src3_data           (cmd_demux_src3_data),                            //          .data
		.src3_channel        (cmd_demux_src3_channel),                         //          .channel
		.src3_startofpacket  (cmd_demux_src3_startofpacket),                   //          .startofpacket
		.src3_endofpacket    (cmd_demux_src3_endofpacket),                     //          .endofpacket
		.src4_ready          (cmd_demux_src4_ready),                           //      src4.ready
		.src4_valid          (cmd_demux_src4_valid),                           //          .valid
		.src4_data           (cmd_demux_src4_data),                            //          .data
		.src4_channel        (cmd_demux_src4_channel),                         //          .channel
		.src4_startofpacket  (cmd_demux_src4_startofpacket),                   //          .startofpacket
		.src4_endofpacket    (cmd_demux_src4_endofpacket),                     //          .endofpacket
		.src5_ready          (cmd_demux_src5_ready),                           //      src5.ready
		.src5_valid          (cmd_demux_src5_valid),                           //          .valid
		.src5_data           (cmd_demux_src5_data),                            //          .data
		.src5_channel        (cmd_demux_src5_channel),                         //          .channel
		.src5_startofpacket  (cmd_demux_src5_startofpacket),                   //          .startofpacket
		.src5_endofpacket    (cmd_demux_src5_endofpacket),                     //          .endofpacket
		.src6_ready          (cmd_demux_src6_ready),                           //      src6.ready
		.src6_valid          (cmd_demux_src6_valid),                           //          .valid
		.src6_data           (cmd_demux_src6_data),                            //          .data
		.src6_channel        (cmd_demux_src6_channel),                         //          .channel
		.src6_startofpacket  (cmd_demux_src6_startofpacket),                   //          .startofpacket
		.src6_endofpacket    (cmd_demux_src6_endofpacket),                     //          .endofpacket
		.src7_ready          (cmd_demux_src7_ready),                           //      src7.ready
		.src7_valid          (cmd_demux_src7_valid),                           //          .valid
		.src7_data           (cmd_demux_src7_data),                            //          .data
		.src7_channel        (cmd_demux_src7_channel),                         //          .channel
		.src7_startofpacket  (cmd_demux_src7_startofpacket),                   //          .startofpacket
		.src7_endofpacket    (cmd_demux_src7_endofpacket),                     //          .endofpacket
		.src8_ready          (cmd_demux_src8_ready),                           //      src8.ready
		.src8_valid          (cmd_demux_src8_valid),                           //          .valid
		.src8_data           (cmd_demux_src8_data),                            //          .data
		.src8_channel        (cmd_demux_src8_channel),                         //          .channel
		.src8_startofpacket  (cmd_demux_src8_startofpacket),                   //          .startofpacket
		.src8_endofpacket    (cmd_demux_src8_endofpacket),                     //          .endofpacket
		.src9_ready          (cmd_demux_src9_ready),                           //      src9.ready
		.src9_valid          (cmd_demux_src9_valid),                           //          .valid
		.src9_data           (cmd_demux_src9_data),                            //          .data
		.src9_channel        (cmd_demux_src9_channel),                         //          .channel
		.src9_startofpacket  (cmd_demux_src9_startofpacket),                   //          .startofpacket
		.src9_endofpacket    (cmd_demux_src9_endofpacket),                     //          .endofpacket
		.src10_ready         (cmd_demux_src10_ready),                          //     src10.ready
		.src10_valid         (cmd_demux_src10_valid),                          //          .valid
		.src10_data          (cmd_demux_src10_data),                           //          .data
		.src10_channel       (cmd_demux_src10_channel),                        //          .channel
		.src10_startofpacket (cmd_demux_src10_startofpacket),                  //          .startofpacket
		.src10_endofpacket   (cmd_demux_src10_endofpacket),                    //          .endofpacket
		.src11_ready         (cmd_demux_src11_ready),                          //     src11.ready
		.src11_valid         (cmd_demux_src11_valid),                          //          .valid
		.src11_data          (cmd_demux_src11_data),                           //          .data
		.src11_channel       (cmd_demux_src11_channel),                        //          .channel
		.src11_startofpacket (cmd_demux_src11_startofpacket),                  //          .startofpacket
		.src11_endofpacket   (cmd_demux_src11_endofpacket),                    //          .endofpacket
		.src12_ready         (cmd_demux_src12_ready),                          //     src12.ready
		.src12_valid         (cmd_demux_src12_valid),                          //          .valid
		.src12_data          (cmd_demux_src12_data),                           //          .data
		.src12_channel       (cmd_demux_src12_channel),                        //          .channel
		.src12_startofpacket (cmd_demux_src12_startofpacket),                  //          .startofpacket
		.src12_endofpacket   (cmd_demux_src12_endofpacket),                    //          .endofpacket
		.src13_ready         (cmd_demux_src13_ready),                          //     src13.ready
		.src13_valid         (cmd_demux_src13_valid),                          //          .valid
		.src13_data          (cmd_demux_src13_data),                           //          .data
		.src13_channel       (cmd_demux_src13_channel),                        //          .channel
		.src13_startofpacket (cmd_demux_src13_startofpacket),                  //          .startofpacket
		.src13_endofpacket   (cmd_demux_src13_endofpacket),                    //          .endofpacket
		.src14_ready         (cmd_demux_src14_ready),                          //     src14.ready
		.src14_valid         (cmd_demux_src14_valid),                          //          .valid
		.src14_data          (cmd_demux_src14_data),                           //          .data
		.src14_channel       (cmd_demux_src14_channel),                        //          .channel
		.src14_startofpacket (cmd_demux_src14_startofpacket),                  //          .startofpacket
		.src14_endofpacket   (cmd_demux_src14_endofpacket),                    //          .endofpacket
		.src15_ready         (cmd_demux_src15_ready),                          //     src15.ready
		.src15_valid         (cmd_demux_src15_valid),                          //          .valid
		.src15_data          (cmd_demux_src15_data),                           //          .data
		.src15_channel       (cmd_demux_src15_channel),                        //          .channel
		.src15_startofpacket (cmd_demux_src15_startofpacket),                  //          .startofpacket
		.src15_endofpacket   (cmd_demux_src15_endofpacket)                     //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_cmd_demux_001 cmd_demux_001 (
		.clk                (clk_100_clk_clk),                                               //        clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                //  clk_reset.reset
		.sink_ready         (nios2_gen2_0_instruction_master_limiter_cmd_src_ready),         //       sink.ready
		.sink_channel       (nios2_gen2_0_instruction_master_limiter_cmd_src_channel),       //           .channel
		.sink_data          (nios2_gen2_0_instruction_master_limiter_cmd_src_data),          //           .data
		.sink_startofpacket (nios2_gen2_0_instruction_master_limiter_cmd_src_startofpacket), //           .startofpacket
		.sink_endofpacket   (nios2_gen2_0_instruction_master_limiter_cmd_src_endofpacket),   //           .endofpacket
		.sink_valid         (nios2_gen2_0_instruction_master_limiter_cmd_valid_data),        // sink_valid.data
		.src0_ready         (cmd_demux_001_src0_ready),                                      //       src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                                      //           .valid
		.src0_data          (cmd_demux_001_src0_data),                                       //           .data
		.src0_channel       (cmd_demux_001_src0_channel),                                    //           .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),                              //           .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket),                                //           .endofpacket
		.src1_ready         (cmd_demux_001_src1_ready),                                      //       src1.ready
		.src1_valid         (cmd_demux_001_src1_valid),                                      //           .valid
		.src1_data          (cmd_demux_001_src1_data),                                       //           .data
		.src1_channel       (cmd_demux_001_src1_channel),                                    //           .channel
		.src1_startofpacket (cmd_demux_001_src1_startofpacket),                              //           .startofpacket
		.src1_endofpacket   (cmd_demux_001_src1_endofpacket),                                //           .endofpacket
		.src2_ready         (cmd_demux_001_src2_ready),                                      //       src2.ready
		.src2_valid         (cmd_demux_001_src2_valid),                                      //           .valid
		.src2_data          (cmd_demux_001_src2_data),                                       //           .data
		.src2_channel       (cmd_demux_001_src2_channel),                                    //           .channel
		.src2_startofpacket (cmd_demux_001_src2_startofpacket),                              //           .startofpacket
		.src2_endofpacket   (cmd_demux_001_src2_endofpacket)                                 //           .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_cmd_demux_002 cmd_demux_002 (
		.clk                (clk_100_clk_clk),                            //       clk.clk
		.reset              (sgdma_tx_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_002_src_ready),                       //      sink.ready
		.sink_channel       (router_002_src_channel),                     //          .channel
		.sink_data          (router_002_src_data),                        //          .data
		.sink_startofpacket (router_002_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_002_src_valid),                       //          .valid
		.src0_ready         (cmd_demux_002_src0_ready),                   //      src0.ready
		.src0_valid         (cmd_demux_002_src0_valid),                   //          .valid
		.src0_data          (cmd_demux_002_src0_data),                    //          .data
		.src0_channel       (cmd_demux_002_src0_channel),                 //          .channel
		.src0_startofpacket (cmd_demux_002_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (cmd_demux_002_src0_endofpacket)              //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_cmd_demux_002 cmd_demux_003 (
		.clk                (clk_100_clk_clk),                            //       clk.clk
		.reset              (sgdma_tx_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_003_src_ready),                       //      sink.ready
		.sink_channel       (router_003_src_channel),                     //          .channel
		.sink_data          (router_003_src_data),                        //          .data
		.sink_startofpacket (router_003_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_003_src_valid),                       //          .valid
		.src0_ready         (cmd_demux_003_src0_ready),                   //      src0.ready
		.src0_valid         (cmd_demux_003_src0_valid),                   //          .valid
		.src0_data          (cmd_demux_003_src0_data),                    //          .data
		.src0_channel       (cmd_demux_003_src0_channel),                 //          .channel
		.src0_startofpacket (cmd_demux_003_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (cmd_demux_003_src0_endofpacket)              //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_cmd_demux_002 cmd_demux_004 (
		.clk                (clk_100_clk_clk),                            //       clk.clk
		.reset              (sgdma_tx_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_004_src_ready),                       //      sink.ready
		.sink_channel       (router_004_src_channel),                     //          .channel
		.sink_data          (router_004_src_data),                        //          .data
		.sink_startofpacket (router_004_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_004_src_valid),                       //          .valid
		.src0_ready         (cmd_demux_004_src0_ready),                   //      src0.ready
		.src0_valid         (cmd_demux_004_src0_valid),                   //          .valid
		.src0_data          (cmd_demux_004_src0_data),                    //          .data
		.src0_channel       (cmd_demux_004_src0_channel),                 //          .channel
		.src0_startofpacket (cmd_demux_004_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (cmd_demux_004_src0_endofpacket)              //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_cmd_demux_002 cmd_demux_005 (
		.clk                (clk_100_clk_clk),                            //       clk.clk
		.reset              (sgdma_tx_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_005_src_ready),                       //      sink.ready
		.sink_channel       (router_005_src_channel),                     //          .channel
		.sink_data          (router_005_src_data),                        //          .data
		.sink_startofpacket (router_005_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_005_src_valid),                       //          .valid
		.src0_ready         (cmd_demux_005_src0_ready),                   //      src0.ready
		.src0_valid         (cmd_demux_005_src0_valid),                   //          .valid
		.src0_data          (cmd_demux_005_src0_data),                    //          .data
		.src0_channel       (cmd_demux_005_src0_channel),                 //          .channel
		.src0_startofpacket (cmd_demux_005_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (cmd_demux_005_src0_endofpacket)              //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_cmd_demux_002 cmd_demux_006 (
		.clk                (clk_100_clk_clk),                            //       clk.clk
		.reset              (sgdma_tx_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_006_src_ready),                       //      sink.ready
		.sink_channel       (router_006_src_channel),                     //          .channel
		.sink_data          (router_006_src_data),                        //          .data
		.sink_startofpacket (router_006_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_006_src_valid),                       //          .valid
		.src0_ready         (cmd_demux_006_src0_ready),                   //      src0.ready
		.src0_valid         (cmd_demux_006_src0_valid),                   //          .valid
		.src0_data          (cmd_demux_006_src0_data),                    //          .data
		.src0_channel       (cmd_demux_006_src0_channel),                 //          .channel
		.src0_startofpacket (cmd_demux_006_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (cmd_demux_006_src0_endofpacket)              //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_cmd_demux_002 cmd_demux_007 (
		.clk                (clk_100_clk_clk),                            //       clk.clk
		.reset              (sgdma_tx_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_007_src_ready),                       //      sink.ready
		.sink_channel       (router_007_src_channel),                     //          .channel
		.sink_data          (router_007_src_data),                        //          .data
		.sink_startofpacket (router_007_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_007_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_007_src_valid),                       //          .valid
		.src0_ready         (cmd_demux_007_src0_ready),                   //      src0.ready
		.src0_valid         (cmd_demux_007_src0_valid),                   //          .valid
		.src0_data          (cmd_demux_007_src0_data),                    //          .data
		.src0_channel       (cmd_demux_007_src0_channel),                 //          .channel
		.src0_startofpacket (cmd_demux_007_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (cmd_demux_007_src0_endofpacket)              //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_cmd_demux_002 cmd_demux_008 (
		.clk                (clk_100_clk_clk),                               //       clk.clk
		.reset              (dma_M1_M2_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_008_src_ready),                          //      sink.ready
		.sink_channel       (router_008_src_channel),                        //          .channel
		.sink_data          (router_008_src_data),                           //          .data
		.sink_startofpacket (router_008_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_008_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_008_src_valid),                          //          .valid
		.src0_ready         (cmd_demux_008_src0_ready),                      //      src0.ready
		.src0_valid         (cmd_demux_008_src0_valid),                      //          .valid
		.src0_data          (cmd_demux_008_src0_data),                       //          .data
		.src0_channel       (cmd_demux_008_src0_channel),                    //          .channel
		.src0_startofpacket (cmd_demux_008_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (cmd_demux_008_src0_endofpacket)                 //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_cmd_demux_002 cmd_demux_009 (
		.clk                (clk_100_clk_clk),                               //       clk.clk
		.reset              (dma_M1_M2_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_009_src_ready),                          //      sink.ready
		.sink_channel       (router_009_src_channel),                        //          .channel
		.sink_data          (router_009_src_data),                           //          .data
		.sink_startofpacket (router_009_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_009_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_009_src_valid),                          //          .valid
		.src0_ready         (cmd_demux_009_src0_ready),                      //      src0.ready
		.src0_valid         (cmd_demux_009_src0_valid),                      //          .valid
		.src0_data          (cmd_demux_009_src0_data),                       //          .data
		.src0_channel       (cmd_demux_009_src0_channel),                    //          .channel
		.src0_startofpacket (cmd_demux_009_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (cmd_demux_009_src0_endofpacket)                 //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_cmd_demux_002 cmd_demux_010 (
		.clk                (clk_100_clk_clk),                               //       clk.clk
		.reset              (dma_M1_M2_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_010_src_ready),                          //      sink.ready
		.sink_channel       (router_010_src_channel),                        //          .channel
		.sink_data          (router_010_src_data),                           //          .data
		.sink_startofpacket (router_010_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_010_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_010_src_valid),                          //          .valid
		.src0_ready         (cmd_demux_010_src0_ready),                      //      src0.ready
		.src0_valid         (cmd_demux_010_src0_valid),                      //          .valid
		.src0_data          (cmd_demux_010_src0_data),                       //          .data
		.src0_channel       (cmd_demux_010_src0_channel),                    //          .channel
		.src0_startofpacket (cmd_demux_010_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (cmd_demux_010_src0_endofpacket)                 //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_cmd_demux_002 cmd_demux_011 (
		.clk                (clk_100_clk_clk),                               //       clk.clk
		.reset              (dma_M1_M2_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_011_src_ready),                          //      sink.ready
		.sink_channel       (router_011_src_channel),                        //          .channel
		.sink_data          (router_011_src_data),                           //          .data
		.sink_startofpacket (router_011_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_011_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_011_src_valid),                          //          .valid
		.src0_ready         (cmd_demux_011_src0_ready),                      //      src0.ready
		.src0_valid         (cmd_demux_011_src0_valid),                      //          .valid
		.src0_data          (cmd_demux_011_src0_data),                       //          .data
		.src0_channel       (cmd_demux_011_src0_channel),                    //          .channel
		.src0_startofpacket (cmd_demux_011_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (cmd_demux_011_src0_endofpacket)                 //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_cmd_mux cmd_mux (
		.clk                 (clk_100_clk_clk),                               //       clk.clk
		.reset               (dma_M1_M2_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                             //       src.ready
		.src_valid           (cmd_mux_src_valid),                             //          .valid
		.src_data            (cmd_mux_src_data),                              //          .data
		.src_channel         (cmd_mux_src_channel),                           //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                          //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                        //          .channel
		.sink0_data          (cmd_demux_src0_data),                           //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket)                     //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_cmd_mux_001 cmd_mux_001 (
		.clk                 (m2_ddr2_memory_afi_clk_clk),                                      //       clk.clk
		.reset               (m2_ddr2_memory_avl_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                                           //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                                           //          .valid
		.src_data            (cmd_mux_001_src_data),                                            //          .data
		.src_channel         (cmd_mux_001_src_channel),                                         //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                                   //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                                     //          .endofpacket
		.sink0_ready         (crosser_out_ready),                                               //     sink0.ready
		.sink0_valid         (crosser_out_valid),                                               //          .valid
		.sink0_channel       (crosser_out_channel),                                             //          .channel
		.sink0_data          (crosser_out_data),                                                //          .data
		.sink0_startofpacket (crosser_out_startofpacket),                                       //          .startofpacket
		.sink0_endofpacket   (crosser_out_endofpacket),                                         //          .endofpacket
		.sink1_ready         (crosser_004_out_ready),                                           //     sink1.ready
		.sink1_valid         (crosser_004_out_valid),                                           //          .valid
		.sink1_channel       (crosser_004_out_channel),                                         //          .channel
		.sink1_data          (crosser_004_out_data),                                            //          .data
		.sink1_startofpacket (crosser_004_out_startofpacket),                                   //          .startofpacket
		.sink1_endofpacket   (crosser_004_out_endofpacket),                                     //          .endofpacket
		.sink2_ready         (crosser_005_out_ready),                                           //     sink2.ready
		.sink2_valid         (crosser_005_out_valid),                                           //          .valid
		.sink2_channel       (crosser_005_out_channel),                                         //          .channel
		.sink2_data          (crosser_005_out_data),                                            //          .data
		.sink2_startofpacket (crosser_005_out_startofpacket),                                   //          .startofpacket
		.sink2_endofpacket   (crosser_005_out_endofpacket)                                      //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_cmd_mux cmd_mux_002 (
		.clk                 (clk_100_clk_clk),                            //       clk.clk
		.reset               (sgdma_tx_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                      //          .valid
		.src_data            (cmd_mux_002_src_data),                       //          .data
		.src_channel         (cmd_mux_002_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                //          .endofpacket
		.sink0_ready         (cmd_demux_src2_ready),                       //     sink0.ready
		.sink0_valid         (cmd_demux_src2_valid),                       //          .valid
		.sink0_channel       (cmd_demux_src2_channel),                     //          .channel
		.sink0_data          (cmd_demux_src2_data),                        //          .data
		.sink0_startofpacket (cmd_demux_src2_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src2_endofpacket)                  //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_cmd_mux cmd_mux_003 (
		.clk                 (clk_100_clk_clk),                               //       clk.clk
		.reset               (dma_M1_M2_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                         //          .valid
		.src_data            (cmd_mux_003_src_data),                          //          .data
		.src_channel         (cmd_mux_003_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src3_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_src3_valid),                          //          .valid
		.sink0_channel       (cmd_demux_src3_channel),                        //          .channel
		.sink0_data          (cmd_demux_src3_data),                           //          .data
		.sink0_startofpacket (cmd_demux_src3_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src3_endofpacket)                     //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_cmd_mux cmd_mux_004 (
		.clk                 (clk_100_clk_clk),                            //       clk.clk
		.reset               (sgdma_tx_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                      //          .valid
		.src_data            (cmd_mux_004_src_data),                       //          .data
		.src_channel         (cmd_mux_004_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),                //          .endofpacket
		.sink0_ready         (cmd_demux_src4_ready),                       //     sink0.ready
		.sink0_valid         (cmd_demux_src4_valid),                       //          .valid
		.sink0_channel       (cmd_demux_src4_channel),                     //          .channel
		.sink0_data          (cmd_demux_src4_data),                        //          .data
		.sink0_startofpacket (cmd_demux_src4_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src4_endofpacket)                  //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_cmd_mux cmd_mux_005 (
		.clk                 (clk_100_clk_clk),                            //       clk.clk
		.reset               (sgdma_tx_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_005_src_valid),                      //          .valid
		.src_data            (cmd_mux_005_src_data),                       //          .data
		.src_channel         (cmd_mux_005_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),                //          .endofpacket
		.sink0_ready         (cmd_demux_src5_ready),                       //     sink0.ready
		.sink0_valid         (cmd_demux_src5_valid),                       //          .valid
		.sink0_channel       (cmd_demux_src5_channel),                     //          .channel
		.sink0_data          (cmd_demux_src5_data),                        //          .data
		.sink0_startofpacket (cmd_demux_src5_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src5_endofpacket)                  //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_cmd_mux cmd_mux_006 (
		.clk                 (clk_100_clk_clk),                               //       clk.clk
		.reset               (dma_M1_M2_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_006_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_006_src_valid),                         //          .valid
		.src_data            (cmd_mux_006_src_data),                          //          .data
		.src_channel         (cmd_mux_006_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_006_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_006_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src6_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_src6_valid),                          //          .valid
		.sink0_channel       (cmd_demux_src6_channel),                        //          .channel
		.sink0_data          (cmd_demux_src6_data),                           //          .data
		.sink0_startofpacket (cmd_demux_src6_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src6_endofpacket)                     //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_cmd_mux cmd_mux_007 (
		.clk                 (clk_100_clk_clk),                               //       clk.clk
		.reset               (dma_M1_M2_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_007_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_007_src_valid),                         //          .valid
		.src_data            (cmd_mux_007_src_data),                          //          .data
		.src_channel         (cmd_mux_007_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_007_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_007_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src7_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_src7_valid),                          //          .valid
		.sink0_channel       (cmd_demux_src7_channel),                        //          .channel
		.sink0_data          (cmd_demux_src7_data),                           //          .data
		.sink0_startofpacket (cmd_demux_src7_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src7_endofpacket)                     //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_cmd_mux_008 cmd_mux_008 (
		.clk                 (clk_100_clk_clk),                                //       clk.clk
		.reset               (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_008_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_008_src_valid),                          //          .valid
		.src_data            (cmd_mux_008_src_data),                           //          .data
		.src_channel         (cmd_mux_008_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_008_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_008_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_src8_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_src8_valid),                           //          .valid
		.sink0_channel       (cmd_demux_src8_channel),                         //          .channel
		.sink0_data          (cmd_demux_src8_data),                            //          .data
		.sink0_startofpacket (cmd_demux_src8_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src8_endofpacket),                     //          .endofpacket
		.sink1_ready         (cmd_demux_001_src0_ready),                       //     sink1.ready
		.sink1_valid         (cmd_demux_001_src0_valid),                       //          .valid
		.sink1_channel       (cmd_demux_001_src0_channel),                     //          .channel
		.sink1_data          (cmd_demux_001_src0_data),                        //          .data
		.sink1_startofpacket (cmd_demux_001_src0_startofpacket),               //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src0_endofpacket)                  //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_cmd_mux cmd_mux_009 (
		.clk                 (clk_100_clk_clk),                               //       clk.clk
		.reset               (dma_M1_M2_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_009_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_009_src_valid),                         //          .valid
		.src_data            (cmd_mux_009_src_data),                          //          .data
		.src_channel         (cmd_mux_009_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_009_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_009_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src9_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_src9_valid),                          //          .valid
		.sink0_channel       (cmd_demux_src9_channel),                        //          .channel
		.sink0_data          (cmd_demux_src9_data),                           //          .data
		.sink0_startofpacket (cmd_demux_src9_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src9_endofpacket)                     //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_cmd_mux cmd_mux_010 (
		.clk                 (clk_100_clk_clk),                               //       clk.clk
		.reset               (dma_M1_M2_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_010_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_010_src_valid),                         //          .valid
		.src_data            (cmd_mux_010_src_data),                          //          .data
		.src_channel         (cmd_mux_010_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_010_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_010_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src10_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src10_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src10_channel),                       //          .channel
		.sink0_data          (cmd_demux_src10_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src10_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src10_endofpacket)                    //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_cmd_mux cmd_mux_011 (
		.clk                 (clk_100_clk_clk),                               //       clk.clk
		.reset               (dma_M1_M2_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_011_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_011_src_valid),                         //          .valid
		.src_data            (cmd_mux_011_src_data),                          //          .data
		.src_channel         (cmd_mux_011_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_011_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_011_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src11_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src11_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src11_channel),                       //          .channel
		.sink0_data          (cmd_demux_src11_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src11_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src11_endofpacket)                    //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_cmd_mux_001 cmd_mux_012 (
		.clk                 (m2_ddr2_memory_afi_half_clk_clk),                      //       clk.clk
		.reset               (m1_clock_bridge_s0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_012_src_ready),                                //       src.ready
		.src_valid           (cmd_mux_012_src_valid),                                //          .valid
		.src_data            (cmd_mux_012_src_data),                                 //          .data
		.src_channel         (cmd_mux_012_src_channel),                              //          .channel
		.src_startofpacket   (cmd_mux_012_src_startofpacket),                        //          .startofpacket
		.src_endofpacket     (cmd_mux_012_src_endofpacket),                          //          .endofpacket
		.sink0_ready         (crosser_001_out_ready),                                //     sink0.ready
		.sink0_valid         (crosser_001_out_valid),                                //          .valid
		.sink0_channel       (crosser_001_out_channel),                              //          .channel
		.sink0_data          (crosser_001_out_data),                                 //          .data
		.sink0_startofpacket (crosser_001_out_startofpacket),                        //          .startofpacket
		.sink0_endofpacket   (crosser_001_out_endofpacket),                          //          .endofpacket
		.sink1_ready         (crosser_002_out_ready),                                //     sink1.ready
		.sink1_valid         (crosser_002_out_valid),                                //          .valid
		.sink1_channel       (crosser_002_out_channel),                              //          .channel
		.sink1_data          (crosser_002_out_data),                                 //          .data
		.sink1_startofpacket (crosser_002_out_startofpacket),                        //          .startofpacket
		.sink1_endofpacket   (crosser_002_out_endofpacket),                          //          .endofpacket
		.sink2_ready         (crosser_003_out_ready),                                //     sink2.ready
		.sink2_valid         (crosser_003_out_valid),                                //          .valid
		.sink2_channel       (crosser_003_out_channel),                              //          .channel
		.sink2_data          (crosser_003_out_data),                                 //          .data
		.sink2_startofpacket (crosser_003_out_startofpacket),                        //          .startofpacket
		.sink2_endofpacket   (crosser_003_out_endofpacket)                           //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_cmd_mux_013 cmd_mux_013 (
		.clk                 (clk_100_clk_clk),                               //       clk.clk
		.reset               (dma_M1_M2_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_013_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_013_src_valid),                         //          .valid
		.src_data            (cmd_mux_013_src_data),                          //          .data
		.src_channel         (cmd_mux_013_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_013_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_013_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src13_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src13_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src13_channel),                       //          .channel
		.sink0_data          (cmd_demux_src13_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src13_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src13_endofpacket),                   //          .endofpacket
		.sink1_ready         (cmd_demux_001_src1_ready),                      //     sink1.ready
		.sink1_valid         (cmd_demux_001_src1_valid),                      //          .valid
		.sink1_channel       (cmd_demux_001_src1_channel),                    //          .channel
		.sink1_data          (cmd_demux_001_src1_data),                       //          .data
		.sink1_startofpacket (cmd_demux_001_src1_startofpacket),              //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src1_endofpacket),                //          .endofpacket
		.sink2_ready         (cmd_demux_002_src0_ready),                      //     sink2.ready
		.sink2_valid         (cmd_demux_002_src0_valid),                      //          .valid
		.sink2_channel       (cmd_demux_002_src0_channel),                    //          .channel
		.sink2_data          (cmd_demux_002_src0_data),                       //          .data
		.sink2_startofpacket (cmd_demux_002_src0_startofpacket),              //          .startofpacket
		.sink2_endofpacket   (cmd_demux_002_src0_endofpacket),                //          .endofpacket
		.sink3_ready         (cmd_demux_003_src0_ready),                      //     sink3.ready
		.sink3_valid         (cmd_demux_003_src0_valid),                      //          .valid
		.sink3_channel       (cmd_demux_003_src0_channel),                    //          .channel
		.sink3_data          (cmd_demux_003_src0_data),                       //          .data
		.sink3_startofpacket (cmd_demux_003_src0_startofpacket),              //          .startofpacket
		.sink3_endofpacket   (cmd_demux_003_src0_endofpacket)                 //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_cmd_mux_014 cmd_mux_014 (
		.clk                 (clk_100_clk_clk),                            //       clk.clk
		.reset               (sgdma_tx_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_014_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_014_src_valid),                      //          .valid
		.src_data            (cmd_mux_014_src_data),                       //          .data
		.src_channel         (cmd_mux_014_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_014_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_014_src_endofpacket),                //          .endofpacket
		.sink0_ready         (cmd_demux_src14_ready),                      //     sink0.ready
		.sink0_valid         (cmd_demux_src14_valid),                      //          .valid
		.sink0_channel       (cmd_demux_src14_channel),                    //          .channel
		.sink0_data          (cmd_demux_src14_data),                       //          .data
		.sink0_startofpacket (cmd_demux_src14_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src14_endofpacket),                //          .endofpacket
		.sink1_ready         (cmd_demux_004_src0_ready),                   //     sink1.ready
		.sink1_valid         (cmd_demux_004_src0_valid),                   //          .valid
		.sink1_channel       (cmd_demux_004_src0_channel),                 //          .channel
		.sink1_data          (cmd_demux_004_src0_data),                    //          .data
		.sink1_startofpacket (cmd_demux_004_src0_startofpacket),           //          .startofpacket
		.sink1_endofpacket   (cmd_demux_004_src0_endofpacket),             //          .endofpacket
		.sink2_ready         (cmd_demux_005_src0_ready),                   //     sink2.ready
		.sink2_valid         (cmd_demux_005_src0_valid),                   //          .valid
		.sink2_channel       (cmd_demux_005_src0_channel),                 //          .channel
		.sink2_data          (cmd_demux_005_src0_data),                    //          .data
		.sink2_startofpacket (cmd_demux_005_src0_startofpacket),           //          .startofpacket
		.sink2_endofpacket   (cmd_demux_005_src0_endofpacket),             //          .endofpacket
		.sink3_ready         (cmd_demux_006_src0_ready),                   //     sink3.ready
		.sink3_valid         (cmd_demux_006_src0_valid),                   //          .valid
		.sink3_channel       (cmd_demux_006_src0_channel),                 //          .channel
		.sink3_data          (cmd_demux_006_src0_data),                    //          .data
		.sink3_startofpacket (cmd_demux_006_src0_startofpacket),           //          .startofpacket
		.sink3_endofpacket   (cmd_demux_006_src0_endofpacket),             //          .endofpacket
		.sink4_ready         (cmd_demux_007_src0_ready),                   //     sink4.ready
		.sink4_valid         (cmd_demux_007_src0_valid),                   //          .valid
		.sink4_channel       (cmd_demux_007_src0_channel),                 //          .channel
		.sink4_data          (cmd_demux_007_src0_data),                    //          .data
		.sink4_startofpacket (cmd_demux_007_src0_startofpacket),           //          .startofpacket
		.sink4_endofpacket   (cmd_demux_007_src0_endofpacket)              //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_cmd_mux_008 cmd_mux_015 (
		.clk                 (clk_100_clk_clk),                            //       clk.clk
		.reset               (sgdma_tx_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_015_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_015_src_valid),                      //          .valid
		.src_data            (cmd_mux_015_src_data),                       //          .data
		.src_channel         (cmd_mux_015_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_015_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_015_src_endofpacket),                //          .endofpacket
		.sink0_ready         (cmd_demux_src15_ready),                      //     sink0.ready
		.sink0_valid         (cmd_demux_src15_valid),                      //          .valid
		.sink0_channel       (cmd_demux_src15_channel),                    //          .channel
		.sink0_data          (cmd_demux_src15_data),                       //          .data
		.sink0_startofpacket (cmd_demux_src15_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src15_endofpacket),                //          .endofpacket
		.sink1_ready         (cmd_demux_001_src2_ready),                   //     sink1.ready
		.sink1_valid         (cmd_demux_001_src2_valid),                   //          .valid
		.sink1_channel       (cmd_demux_001_src2_channel),                 //          .channel
		.sink1_data          (cmd_demux_001_src2_data),                    //          .data
		.sink1_startofpacket (cmd_demux_001_src2_startofpacket),           //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src2_endofpacket)              //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_cmd_demux_002 rsp_demux (
		.clk                (clk_100_clk_clk),                               //       clk.clk
		.reset              (dma_M1_M2_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_012_src_ready),                          //      sink.ready
		.sink_channel       (router_012_src_channel),                        //          .channel
		.sink_data          (router_012_src_data),                           //          .data
		.sink_startofpacket (router_012_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_012_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_012_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_src0_ready),                          //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                          //          .valid
		.src0_data          (rsp_demux_src0_data),                           //          .data
		.src0_channel       (rsp_demux_src0_channel),                        //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                  //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                     //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_rsp_demux_001 rsp_demux_001 (
		.clk                (m2_ddr2_memory_afi_clk_clk),                                      //       clk.clk
		.reset              (m2_ddr2_memory_avl_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (m2_ddr2_memory_avl_rsp_width_adapter_src_ready),                  //      sink.ready
		.sink_channel       (m2_ddr2_memory_avl_rsp_width_adapter_src_channel),                //          .channel
		.sink_data          (m2_ddr2_memory_avl_rsp_width_adapter_src_data),                   //          .data
		.sink_startofpacket (m2_ddr2_memory_avl_rsp_width_adapter_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (m2_ddr2_memory_avl_rsp_width_adapter_src_endofpacket),            //          .endofpacket
		.sink_valid         (m2_ddr2_memory_avl_rsp_width_adapter_src_valid),                  //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                                        //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                                        //          .valid
		.src0_data          (rsp_demux_001_src0_data),                                         //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                                      //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                                //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket),                                  //          .endofpacket
		.src1_ready         (rsp_demux_001_src1_ready),                                        //      src1.ready
		.src1_valid         (rsp_demux_001_src1_valid),                                        //          .valid
		.src1_data          (rsp_demux_001_src1_data),                                         //          .data
		.src1_channel       (rsp_demux_001_src1_channel),                                      //          .channel
		.src1_startofpacket (rsp_demux_001_src1_startofpacket),                                //          .startofpacket
		.src1_endofpacket   (rsp_demux_001_src1_endofpacket),                                  //          .endofpacket
		.src2_ready         (rsp_demux_001_src2_ready),                                        //      src2.ready
		.src2_valid         (rsp_demux_001_src2_valid),                                        //          .valid
		.src2_data          (rsp_demux_001_src2_data),                                         //          .data
		.src2_channel       (rsp_demux_001_src2_channel),                                      //          .channel
		.src2_startofpacket (rsp_demux_001_src2_startofpacket),                                //          .startofpacket
		.src2_endofpacket   (rsp_demux_001_src2_endofpacket)                                   //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_cmd_demux_002 rsp_demux_002 (
		.clk                (clk_100_clk_clk),                            //       clk.clk
		.reset              (sgdma_tx_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_014_src_ready),                       //      sink.ready
		.sink_channel       (router_014_src_channel),                     //          .channel
		.sink_data          (router_014_src_data),                        //          .data
		.sink_startofpacket (router_014_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_014_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_014_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_002_src0_data),                    //          .data
		.src0_channel       (rsp_demux_002_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket)              //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_cmd_demux_002 rsp_demux_003 (
		.clk                (clk_100_clk_clk),                               //       clk.clk
		.reset              (dma_M1_M2_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_015_src_ready),                          //      sink.ready
		.sink_channel       (router_015_src_channel),                        //          .channel
		.sink_data          (router_015_src_data),                           //          .data
		.sink_startofpacket (router_015_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_015_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_015_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_003_src0_data),                       //          .data
		.src0_channel       (rsp_demux_003_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket)                 //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_cmd_demux_002 rsp_demux_004 (
		.clk                (clk_100_clk_clk),                            //       clk.clk
		.reset              (sgdma_tx_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_016_src_ready),                       //      sink.ready
		.sink_channel       (router_016_src_channel),                     //          .channel
		.sink_data          (router_016_src_data),                        //          .data
		.sink_startofpacket (router_016_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_016_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_016_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_004_src0_data),                    //          .data
		.src0_channel       (rsp_demux_004_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket)              //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_cmd_demux_002 rsp_demux_005 (
		.clk                (clk_100_clk_clk),                            //       clk.clk
		.reset              (sgdma_tx_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_017_src_ready),                       //      sink.ready
		.sink_channel       (router_017_src_channel),                     //          .channel
		.sink_data          (router_017_src_data),                        //          .data
		.sink_startofpacket (router_017_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_017_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_017_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_005_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_005_src0_data),                    //          .data
		.src0_channel       (rsp_demux_005_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket)              //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_cmd_demux_002 rsp_demux_006 (
		.clk                (clk_100_clk_clk),                               //       clk.clk
		.reset              (dma_M1_M2_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_018_src_ready),                          //      sink.ready
		.sink_channel       (router_018_src_channel),                        //          .channel
		.sink_data          (router_018_src_data),                           //          .data
		.sink_startofpacket (router_018_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_018_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_018_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_006_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_006_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_006_src0_data),                       //          .data
		.src0_channel       (rsp_demux_006_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_006_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_006_src0_endofpacket)                 //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_cmd_demux_002 rsp_demux_007 (
		.clk                (clk_100_clk_clk),                               //       clk.clk
		.reset              (dma_M1_M2_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_019_src_ready),                          //      sink.ready
		.sink_channel       (router_019_src_channel),                        //          .channel
		.sink_data          (router_019_src_data),                           //          .data
		.sink_startofpacket (router_019_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_019_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_019_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_007_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_007_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_007_src0_data),                       //          .data
		.src0_channel       (rsp_demux_007_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_007_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_007_src0_endofpacket)                 //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_rsp_demux_008 rsp_demux_008 (
		.clk                (clk_100_clk_clk),                                //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_020_src_ready),                           //      sink.ready
		.sink_channel       (router_020_src_channel),                         //          .channel
		.sink_data          (router_020_src_data),                            //          .data
		.sink_startofpacket (router_020_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_020_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_020_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_008_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_008_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_008_src0_data),                        //          .data
		.src0_channel       (rsp_demux_008_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_008_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_008_src0_endofpacket),                 //          .endofpacket
		.src1_ready         (rsp_demux_008_src1_ready),                       //      src1.ready
		.src1_valid         (rsp_demux_008_src1_valid),                       //          .valid
		.src1_data          (rsp_demux_008_src1_data),                        //          .data
		.src1_channel       (rsp_demux_008_src1_channel),                     //          .channel
		.src1_startofpacket (rsp_demux_008_src1_startofpacket),               //          .startofpacket
		.src1_endofpacket   (rsp_demux_008_src1_endofpacket)                  //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_cmd_demux_002 rsp_demux_009 (
		.clk                (clk_100_clk_clk),                                                //       clk.clk
		.reset              (dma_M1_M2_reset_n_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.sink_ready         (dma_m1_m2_descriptor_slave_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (dma_m1_m2_descriptor_slave_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (dma_m1_m2_descriptor_slave_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (dma_m1_m2_descriptor_slave_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (dma_m1_m2_descriptor_slave_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (dma_m1_m2_descriptor_slave_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_009_src0_ready),                                       //      src0.ready
		.src0_valid         (rsp_demux_009_src0_valid),                                       //          .valid
		.src0_data          (rsp_demux_009_src0_data),                                        //          .data
		.src0_channel       (rsp_demux_009_src0_channel),                                     //          .channel
		.src0_startofpacket (rsp_demux_009_src0_startofpacket),                               //          .startofpacket
		.src0_endofpacket   (rsp_demux_009_src0_endofpacket)                                  //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_cmd_demux_002 rsp_demux_010 (
		.clk                (clk_100_clk_clk),                                                //       clk.clk
		.reset              (dma_M1_M2_reset_n_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.sink_ready         (dma_m2_m1_descriptor_slave_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (dma_m2_m1_descriptor_slave_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (dma_m2_m1_descriptor_slave_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (dma_m2_m1_descriptor_slave_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (dma_m2_m1_descriptor_slave_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (dma_m2_m1_descriptor_slave_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_010_src0_ready),                                       //      src0.ready
		.src0_valid         (rsp_demux_010_src0_valid),                                       //          .valid
		.src0_data          (rsp_demux_010_src0_data),                                        //          .data
		.src0_channel       (rsp_demux_010_src0_channel),                                     //          .channel
		.src0_startofpacket (rsp_demux_010_src0_startofpacket),                               //          .startofpacket
		.src0_endofpacket   (rsp_demux_010_src0_endofpacket)                                  //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_cmd_demux_002 rsp_demux_011 (
		.clk                (clk_100_clk_clk),                               //       clk.clk
		.reset              (dma_M1_M2_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_023_src_ready),                          //      sink.ready
		.sink_channel       (router_023_src_channel),                        //          .channel
		.sink_data          (router_023_src_data),                           //          .data
		.sink_startofpacket (router_023_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_023_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_023_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_011_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_011_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_011_src0_data),                       //          .data
		.src0_channel       (rsp_demux_011_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_011_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_011_src0_endofpacket)                 //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_rsp_demux_012 rsp_demux_012 (
		.clk                (m2_ddr2_memory_afi_half_clk_clk),                      //       clk.clk
		.reset              (m1_clock_bridge_s0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_024_src_ready),                                 //      sink.ready
		.sink_channel       (router_024_src_channel),                               //          .channel
		.sink_data          (router_024_src_data),                                  //          .data
		.sink_startofpacket (router_024_src_startofpacket),                         //          .startofpacket
		.sink_endofpacket   (router_024_src_endofpacket),                           //          .endofpacket
		.sink_valid         (router_024_src_valid),                                 //          .valid
		.src0_ready         (rsp_demux_012_src0_ready),                             //      src0.ready
		.src0_valid         (rsp_demux_012_src0_valid),                             //          .valid
		.src0_data          (rsp_demux_012_src0_data),                              //          .data
		.src0_channel       (rsp_demux_012_src0_channel),                           //          .channel
		.src0_startofpacket (rsp_demux_012_src0_startofpacket),                     //          .startofpacket
		.src0_endofpacket   (rsp_demux_012_src0_endofpacket),                       //          .endofpacket
		.src1_ready         (rsp_demux_012_src1_ready),                             //      src1.ready
		.src1_valid         (rsp_demux_012_src1_valid),                             //          .valid
		.src1_data          (rsp_demux_012_src1_data),                              //          .data
		.src1_channel       (rsp_demux_012_src1_channel),                           //          .channel
		.src1_startofpacket (rsp_demux_012_src1_startofpacket),                     //          .startofpacket
		.src1_endofpacket   (rsp_demux_012_src1_endofpacket),                       //          .endofpacket
		.src2_ready         (rsp_demux_012_src2_ready),                             //      src2.ready
		.src2_valid         (rsp_demux_012_src2_valid),                             //          .valid
		.src2_data          (rsp_demux_012_src2_data),                              //          .data
		.src2_channel       (rsp_demux_012_src2_channel),                           //          .channel
		.src2_startofpacket (rsp_demux_012_src2_startofpacket),                     //          .startofpacket
		.src2_endofpacket   (rsp_demux_012_src2_endofpacket)                        //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_rsp_demux_013 rsp_demux_013 (
		.clk                (clk_100_clk_clk),                               //       clk.clk
		.reset              (dma_M1_M2_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_025_src_ready),                          //      sink.ready
		.sink_channel       (router_025_src_channel),                        //          .channel
		.sink_data          (router_025_src_data),                           //          .data
		.sink_startofpacket (router_025_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_025_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_025_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_013_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_013_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_013_src0_data),                       //          .data
		.src0_channel       (rsp_demux_013_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_013_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_013_src0_endofpacket),                //          .endofpacket
		.src1_ready         (rsp_demux_013_src1_ready),                      //      src1.ready
		.src1_valid         (rsp_demux_013_src1_valid),                      //          .valid
		.src1_data          (rsp_demux_013_src1_data),                       //          .data
		.src1_channel       (rsp_demux_013_src1_channel),                    //          .channel
		.src1_startofpacket (rsp_demux_013_src1_startofpacket),              //          .startofpacket
		.src1_endofpacket   (rsp_demux_013_src1_endofpacket),                //          .endofpacket
		.src2_ready         (rsp_demux_013_src2_ready),                      //      src2.ready
		.src2_valid         (rsp_demux_013_src2_valid),                      //          .valid
		.src2_data          (rsp_demux_013_src2_data),                       //          .data
		.src2_channel       (rsp_demux_013_src2_channel),                    //          .channel
		.src2_startofpacket (rsp_demux_013_src2_startofpacket),              //          .startofpacket
		.src2_endofpacket   (rsp_demux_013_src2_endofpacket),                //          .endofpacket
		.src3_ready         (rsp_demux_013_src3_ready),                      //      src3.ready
		.src3_valid         (rsp_demux_013_src3_valid),                      //          .valid
		.src3_data          (rsp_demux_013_src3_data),                       //          .data
		.src3_channel       (rsp_demux_013_src3_channel),                    //          .channel
		.src3_startofpacket (rsp_demux_013_src3_startofpacket),              //          .startofpacket
		.src3_endofpacket   (rsp_demux_013_src3_endofpacket)                 //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_rsp_demux_014 rsp_demux_014 (
		.clk                (clk_100_clk_clk),                            //       clk.clk
		.reset              (sgdma_tx_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_026_src_ready),                       //      sink.ready
		.sink_channel       (router_026_src_channel),                     //          .channel
		.sink_data          (router_026_src_data),                        //          .data
		.sink_startofpacket (router_026_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_026_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_026_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_014_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_014_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_014_src0_data),                    //          .data
		.src0_channel       (rsp_demux_014_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_014_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_014_src0_endofpacket),             //          .endofpacket
		.src1_ready         (rsp_demux_014_src1_ready),                   //      src1.ready
		.src1_valid         (rsp_demux_014_src1_valid),                   //          .valid
		.src1_data          (rsp_demux_014_src1_data),                    //          .data
		.src1_channel       (rsp_demux_014_src1_channel),                 //          .channel
		.src1_startofpacket (rsp_demux_014_src1_startofpacket),           //          .startofpacket
		.src1_endofpacket   (rsp_demux_014_src1_endofpacket),             //          .endofpacket
		.src2_ready         (rsp_demux_014_src2_ready),                   //      src2.ready
		.src2_valid         (rsp_demux_014_src2_valid),                   //          .valid
		.src2_data          (rsp_demux_014_src2_data),                    //          .data
		.src2_channel       (rsp_demux_014_src2_channel),                 //          .channel
		.src2_startofpacket (rsp_demux_014_src2_startofpacket),           //          .startofpacket
		.src2_endofpacket   (rsp_demux_014_src2_endofpacket),             //          .endofpacket
		.src3_ready         (rsp_demux_014_src3_ready),                   //      src3.ready
		.src3_valid         (rsp_demux_014_src3_valid),                   //          .valid
		.src3_data          (rsp_demux_014_src3_data),                    //          .data
		.src3_channel       (rsp_demux_014_src3_channel),                 //          .channel
		.src3_startofpacket (rsp_demux_014_src3_startofpacket),           //          .startofpacket
		.src3_endofpacket   (rsp_demux_014_src3_endofpacket),             //          .endofpacket
		.src4_ready         (rsp_demux_014_src4_ready),                   //      src4.ready
		.src4_valid         (rsp_demux_014_src4_valid),                   //          .valid
		.src4_data          (rsp_demux_014_src4_data),                    //          .data
		.src4_channel       (rsp_demux_014_src4_channel),                 //          .channel
		.src4_startofpacket (rsp_demux_014_src4_startofpacket),           //          .startofpacket
		.src4_endofpacket   (rsp_demux_014_src4_endofpacket)              //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_rsp_demux_008 rsp_demux_015 (
		.clk                (clk_100_clk_clk),                                   //       clk.clk
		.reset              (sgdma_tx_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.sink_ready         (ext_flash_uas_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (ext_flash_uas_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (ext_flash_uas_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (ext_flash_uas_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (ext_flash_uas_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (ext_flash_uas_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_015_src0_ready),                          //      src0.ready
		.src0_valid         (rsp_demux_015_src0_valid),                          //          .valid
		.src0_data          (rsp_demux_015_src0_data),                           //          .data
		.src0_channel       (rsp_demux_015_src0_channel),                        //          .channel
		.src0_startofpacket (rsp_demux_015_src0_startofpacket),                  //          .startofpacket
		.src0_endofpacket   (rsp_demux_015_src0_endofpacket),                    //          .endofpacket
		.src1_ready         (rsp_demux_015_src1_ready),                          //      src1.ready
		.src1_valid         (rsp_demux_015_src1_valid),                          //          .valid
		.src1_data          (rsp_demux_015_src1_data),                           //          .data
		.src1_channel       (rsp_demux_015_src1_channel),                        //          .channel
		.src1_startofpacket (rsp_demux_015_src1_startofpacket),                  //          .startofpacket
		.src1_endofpacket   (rsp_demux_015_src1_endofpacket)                     //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_rsp_mux rsp_mux (
		.clk                  (clk_100_clk_clk),                                //       clk.clk
		.reset                (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready            (rsp_mux_src_ready),                              //       src.ready
		.src_valid            (rsp_mux_src_valid),                              //          .valid
		.src_data             (rsp_mux_src_data),                               //          .data
		.src_channel          (rsp_mux_src_channel),                            //          .channel
		.src_startofpacket    (rsp_mux_src_startofpacket),                      //          .startofpacket
		.src_endofpacket      (rsp_mux_src_endofpacket),                        //          .endofpacket
		.sink0_ready          (rsp_demux_src0_ready),                           //     sink0.ready
		.sink0_valid          (rsp_demux_src0_valid),                           //          .valid
		.sink0_channel        (rsp_demux_src0_channel),                         //          .channel
		.sink0_data           (rsp_demux_src0_data),                            //          .data
		.sink0_startofpacket  (rsp_demux_src0_startofpacket),                   //          .startofpacket
		.sink0_endofpacket    (rsp_demux_src0_endofpacket),                     //          .endofpacket
		.sink1_ready          (crosser_006_out_ready),                          //     sink1.ready
		.sink1_valid          (crosser_006_out_valid),                          //          .valid
		.sink1_channel        (crosser_006_out_channel),                        //          .channel
		.sink1_data           (crosser_006_out_data),                           //          .data
		.sink1_startofpacket  (crosser_006_out_startofpacket),                  //          .startofpacket
		.sink1_endofpacket    (crosser_006_out_endofpacket),                    //          .endofpacket
		.sink2_ready          (rsp_demux_002_src0_ready),                       //     sink2.ready
		.sink2_valid          (rsp_demux_002_src0_valid),                       //          .valid
		.sink2_channel        (rsp_demux_002_src0_channel),                     //          .channel
		.sink2_data           (rsp_demux_002_src0_data),                        //          .data
		.sink2_startofpacket  (rsp_demux_002_src0_startofpacket),               //          .startofpacket
		.sink2_endofpacket    (rsp_demux_002_src0_endofpacket),                 //          .endofpacket
		.sink3_ready          (rsp_demux_003_src0_ready),                       //     sink3.ready
		.sink3_valid          (rsp_demux_003_src0_valid),                       //          .valid
		.sink3_channel        (rsp_demux_003_src0_channel),                     //          .channel
		.sink3_data           (rsp_demux_003_src0_data),                        //          .data
		.sink3_startofpacket  (rsp_demux_003_src0_startofpacket),               //          .startofpacket
		.sink3_endofpacket    (rsp_demux_003_src0_endofpacket),                 //          .endofpacket
		.sink4_ready          (rsp_demux_004_src0_ready),                       //     sink4.ready
		.sink4_valid          (rsp_demux_004_src0_valid),                       //          .valid
		.sink4_channel        (rsp_demux_004_src0_channel),                     //          .channel
		.sink4_data           (rsp_demux_004_src0_data),                        //          .data
		.sink4_startofpacket  (rsp_demux_004_src0_startofpacket),               //          .startofpacket
		.sink4_endofpacket    (rsp_demux_004_src0_endofpacket),                 //          .endofpacket
		.sink5_ready          (rsp_demux_005_src0_ready),                       //     sink5.ready
		.sink5_valid          (rsp_demux_005_src0_valid),                       //          .valid
		.sink5_channel        (rsp_demux_005_src0_channel),                     //          .channel
		.sink5_data           (rsp_demux_005_src0_data),                        //          .data
		.sink5_startofpacket  (rsp_demux_005_src0_startofpacket),               //          .startofpacket
		.sink5_endofpacket    (rsp_demux_005_src0_endofpacket),                 //          .endofpacket
		.sink6_ready          (rsp_demux_006_src0_ready),                       //     sink6.ready
		.sink6_valid          (rsp_demux_006_src0_valid),                       //          .valid
		.sink6_channel        (rsp_demux_006_src0_channel),                     //          .channel
		.sink6_data           (rsp_demux_006_src0_data),                        //          .data
		.sink6_startofpacket  (rsp_demux_006_src0_startofpacket),               //          .startofpacket
		.sink6_endofpacket    (rsp_demux_006_src0_endofpacket),                 //          .endofpacket
		.sink7_ready          (rsp_demux_007_src0_ready),                       //     sink7.ready
		.sink7_valid          (rsp_demux_007_src0_valid),                       //          .valid
		.sink7_channel        (rsp_demux_007_src0_channel),                     //          .channel
		.sink7_data           (rsp_demux_007_src0_data),                        //          .data
		.sink7_startofpacket  (rsp_demux_007_src0_startofpacket),               //          .startofpacket
		.sink7_endofpacket    (rsp_demux_007_src0_endofpacket),                 //          .endofpacket
		.sink8_ready          (rsp_demux_008_src0_ready),                       //     sink8.ready
		.sink8_valid          (rsp_demux_008_src0_valid),                       //          .valid
		.sink8_channel        (rsp_demux_008_src0_channel),                     //          .channel
		.sink8_data           (rsp_demux_008_src0_data),                        //          .data
		.sink8_startofpacket  (rsp_demux_008_src0_startofpacket),               //          .startofpacket
		.sink8_endofpacket    (rsp_demux_008_src0_endofpacket),                 //          .endofpacket
		.sink9_ready          (rsp_demux_009_src0_ready),                       //     sink9.ready
		.sink9_valid          (rsp_demux_009_src0_valid),                       //          .valid
		.sink9_channel        (rsp_demux_009_src0_channel),                     //          .channel
		.sink9_data           (rsp_demux_009_src0_data),                        //          .data
		.sink9_startofpacket  (rsp_demux_009_src0_startofpacket),               //          .startofpacket
		.sink9_endofpacket    (rsp_demux_009_src0_endofpacket),                 //          .endofpacket
		.sink10_ready         (rsp_demux_010_src0_ready),                       //    sink10.ready
		.sink10_valid         (rsp_demux_010_src0_valid),                       //          .valid
		.sink10_channel       (rsp_demux_010_src0_channel),                     //          .channel
		.sink10_data          (rsp_demux_010_src0_data),                        //          .data
		.sink10_startofpacket (rsp_demux_010_src0_startofpacket),               //          .startofpacket
		.sink10_endofpacket   (rsp_demux_010_src0_endofpacket),                 //          .endofpacket
		.sink11_ready         (rsp_demux_011_src0_ready),                       //    sink11.ready
		.sink11_valid         (rsp_demux_011_src0_valid),                       //          .valid
		.sink11_channel       (rsp_demux_011_src0_channel),                     //          .channel
		.sink11_data          (rsp_demux_011_src0_data),                        //          .data
		.sink11_startofpacket (rsp_demux_011_src0_startofpacket),               //          .startofpacket
		.sink11_endofpacket   (rsp_demux_011_src0_endofpacket),                 //          .endofpacket
		.sink12_ready         (crosser_009_out_ready),                          //    sink12.ready
		.sink12_valid         (crosser_009_out_valid),                          //          .valid
		.sink12_channel       (crosser_009_out_channel),                        //          .channel
		.sink12_data          (crosser_009_out_data),                           //          .data
		.sink12_startofpacket (crosser_009_out_startofpacket),                  //          .startofpacket
		.sink12_endofpacket   (crosser_009_out_endofpacket),                    //          .endofpacket
		.sink13_ready         (rsp_demux_013_src0_ready),                       //    sink13.ready
		.sink13_valid         (rsp_demux_013_src0_valid),                       //          .valid
		.sink13_channel       (rsp_demux_013_src0_channel),                     //          .channel
		.sink13_data          (rsp_demux_013_src0_data),                        //          .data
		.sink13_startofpacket (rsp_demux_013_src0_startofpacket),               //          .startofpacket
		.sink13_endofpacket   (rsp_demux_013_src0_endofpacket),                 //          .endofpacket
		.sink14_ready         (rsp_demux_014_src0_ready),                       //    sink14.ready
		.sink14_valid         (rsp_demux_014_src0_valid),                       //          .valid
		.sink14_channel       (rsp_demux_014_src0_channel),                     //          .channel
		.sink14_data          (rsp_demux_014_src0_data),                        //          .data
		.sink14_startofpacket (rsp_demux_014_src0_startofpacket),               //          .startofpacket
		.sink14_endofpacket   (rsp_demux_014_src0_endofpacket),                 //          .endofpacket
		.sink15_ready         (rsp_demux_015_src0_ready),                       //    sink15.ready
		.sink15_valid         (rsp_demux_015_src0_valid),                       //          .valid
		.sink15_channel       (rsp_demux_015_src0_channel),                     //          .channel
		.sink15_data          (rsp_demux_015_src0_data),                        //          .data
		.sink15_startofpacket (rsp_demux_015_src0_startofpacket),               //          .startofpacket
		.sink15_endofpacket   (rsp_demux_015_src0_endofpacket)                  //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_rsp_mux_001 rsp_mux_001 (
		.clk                 (clk_100_clk_clk),                                //       clk.clk
		.reset               (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                          //       src.ready
		.src_valid           (rsp_mux_001_src_valid),                          //          .valid
		.src_data            (rsp_mux_001_src_data),                           //          .data
		.src_channel         (rsp_mux_001_src_channel),                        //          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (rsp_demux_008_src1_ready),                       //     sink0.ready
		.sink0_valid         (rsp_demux_008_src1_valid),                       //          .valid
		.sink0_channel       (rsp_demux_008_src1_channel),                     //          .channel
		.sink0_data          (rsp_demux_008_src1_data),                        //          .data
		.sink0_startofpacket (rsp_demux_008_src1_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (rsp_demux_008_src1_endofpacket),                 //          .endofpacket
		.sink1_ready         (rsp_demux_013_src1_ready),                       //     sink1.ready
		.sink1_valid         (rsp_demux_013_src1_valid),                       //          .valid
		.sink1_channel       (rsp_demux_013_src1_channel),                     //          .channel
		.sink1_data          (rsp_demux_013_src1_data),                        //          .data
		.sink1_startofpacket (rsp_demux_013_src1_startofpacket),               //          .startofpacket
		.sink1_endofpacket   (rsp_demux_013_src1_endofpacket),                 //          .endofpacket
		.sink2_ready         (rsp_demux_015_src1_ready),                       //     sink2.ready
		.sink2_valid         (rsp_demux_015_src1_valid),                       //          .valid
		.sink2_channel       (rsp_demux_015_src1_channel),                     //          .channel
		.sink2_data          (rsp_demux_015_src1_data),                        //          .data
		.sink2_startofpacket (rsp_demux_015_src1_startofpacket),               //          .startofpacket
		.sink2_endofpacket   (rsp_demux_015_src1_endofpacket)                  //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_rsp_mux_002 rsp_mux_002 (
		.clk                 (clk_100_clk_clk),                            //       clk.clk
		.reset               (sgdma_tx_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_002_src_ready),                      //       src.ready
		.src_valid           (rsp_mux_002_src_valid),                      //          .valid
		.src_data            (rsp_mux_002_src_data),                       //          .data
		.src_channel         (rsp_mux_002_src_channel),                    //          .channel
		.src_startofpacket   (rsp_mux_002_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (rsp_mux_002_src_endofpacket),                //          .endofpacket
		.sink0_ready         (rsp_demux_013_src2_ready),                   //     sink0.ready
		.sink0_valid         (rsp_demux_013_src2_valid),                   //          .valid
		.sink0_channel       (rsp_demux_013_src2_channel),                 //          .channel
		.sink0_data          (rsp_demux_013_src2_data),                    //          .data
		.sink0_startofpacket (rsp_demux_013_src2_startofpacket),           //          .startofpacket
		.sink0_endofpacket   (rsp_demux_013_src2_endofpacket)              //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_rsp_mux_002 rsp_mux_003 (
		.clk                 (clk_100_clk_clk),                            //       clk.clk
		.reset               (sgdma_tx_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_003_src_ready),                      //       src.ready
		.src_valid           (rsp_mux_003_src_valid),                      //          .valid
		.src_data            (rsp_mux_003_src_data),                       //          .data
		.src_channel         (rsp_mux_003_src_channel),                    //          .channel
		.src_startofpacket   (rsp_mux_003_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (rsp_mux_003_src_endofpacket),                //          .endofpacket
		.sink0_ready         (rsp_demux_013_src3_ready),                   //     sink0.ready
		.sink0_valid         (rsp_demux_013_src3_valid),                   //          .valid
		.sink0_channel       (rsp_demux_013_src3_channel),                 //          .channel
		.sink0_data          (rsp_demux_013_src3_data),                    //          .data
		.sink0_startofpacket (rsp_demux_013_src3_startofpacket),           //          .startofpacket
		.sink0_endofpacket   (rsp_demux_013_src3_endofpacket)              //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_rsp_mux_002 rsp_mux_004 (
		.clk                 (clk_100_clk_clk),                            //       clk.clk
		.reset               (sgdma_tx_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_004_src_ready),                      //       src.ready
		.src_valid           (rsp_mux_004_src_valid),                      //          .valid
		.src_data            (rsp_mux_004_src_data),                       //          .data
		.src_channel         (rsp_mux_004_src_channel),                    //          .channel
		.src_startofpacket   (rsp_mux_004_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (rsp_mux_004_src_endofpacket),                //          .endofpacket
		.sink0_ready         (rsp_demux_014_src1_ready),                   //     sink0.ready
		.sink0_valid         (rsp_demux_014_src1_valid),                   //          .valid
		.sink0_channel       (rsp_demux_014_src1_channel),                 //          .channel
		.sink0_data          (rsp_demux_014_src1_data),                    //          .data
		.sink0_startofpacket (rsp_demux_014_src1_startofpacket),           //          .startofpacket
		.sink0_endofpacket   (rsp_demux_014_src1_endofpacket)              //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_rsp_mux_002 rsp_mux_005 (
		.clk                 (clk_100_clk_clk),                            //       clk.clk
		.reset               (sgdma_tx_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_005_src_ready),                      //       src.ready
		.src_valid           (rsp_mux_005_src_valid),                      //          .valid
		.src_data            (rsp_mux_005_src_data),                       //          .data
		.src_channel         (rsp_mux_005_src_channel),                    //          .channel
		.src_startofpacket   (rsp_mux_005_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (rsp_mux_005_src_endofpacket),                //          .endofpacket
		.sink0_ready         (rsp_demux_014_src2_ready),                   //     sink0.ready
		.sink0_valid         (rsp_demux_014_src2_valid),                   //          .valid
		.sink0_channel       (rsp_demux_014_src2_channel),                 //          .channel
		.sink0_data          (rsp_demux_014_src2_data),                    //          .data
		.sink0_startofpacket (rsp_demux_014_src2_startofpacket),           //          .startofpacket
		.sink0_endofpacket   (rsp_demux_014_src2_endofpacket)              //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_rsp_mux_002 rsp_mux_006 (
		.clk                 (clk_100_clk_clk),                            //       clk.clk
		.reset               (sgdma_tx_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_006_src_ready),                      //       src.ready
		.src_valid           (rsp_mux_006_src_valid),                      //          .valid
		.src_data            (rsp_mux_006_src_data),                       //          .data
		.src_channel         (rsp_mux_006_src_channel),                    //          .channel
		.src_startofpacket   (rsp_mux_006_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (rsp_mux_006_src_endofpacket),                //          .endofpacket
		.sink0_ready         (rsp_demux_014_src3_ready),                   //     sink0.ready
		.sink0_valid         (rsp_demux_014_src3_valid),                   //          .valid
		.sink0_channel       (rsp_demux_014_src3_channel),                 //          .channel
		.sink0_data          (rsp_demux_014_src3_data),                    //          .data
		.sink0_startofpacket (rsp_demux_014_src3_startofpacket),           //          .startofpacket
		.sink0_endofpacket   (rsp_demux_014_src3_endofpacket)              //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_rsp_mux_002 rsp_mux_007 (
		.clk                 (clk_100_clk_clk),                            //       clk.clk
		.reset               (sgdma_tx_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_007_src_ready),                      //       src.ready
		.src_valid           (rsp_mux_007_src_valid),                      //          .valid
		.src_data            (rsp_mux_007_src_data),                       //          .data
		.src_channel         (rsp_mux_007_src_channel),                    //          .channel
		.src_startofpacket   (rsp_mux_007_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (rsp_mux_007_src_endofpacket),                //          .endofpacket
		.sink0_ready         (rsp_demux_014_src4_ready),                   //     sink0.ready
		.sink0_valid         (rsp_demux_014_src4_valid),                   //          .valid
		.sink0_channel       (rsp_demux_014_src4_channel),                 //          .channel
		.sink0_data          (rsp_demux_014_src4_data),                    //          .data
		.sink0_startofpacket (rsp_demux_014_src4_startofpacket),           //          .startofpacket
		.sink0_endofpacket   (rsp_demux_014_src4_endofpacket)              //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_rsp_mux_002 rsp_mux_008 (
		.clk                 (clk_100_clk_clk),                               //       clk.clk
		.reset               (dma_M1_M2_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_008_src_ready),                         //       src.ready
		.src_valid           (rsp_mux_008_src_valid),                         //          .valid
		.src_data            (rsp_mux_008_src_data),                          //          .data
		.src_channel         (rsp_mux_008_src_channel),                       //          .channel
		.src_startofpacket   (rsp_mux_008_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (rsp_mux_008_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (crosser_010_out_ready),                         //     sink0.ready
		.sink0_valid         (crosser_010_out_valid),                         //          .valid
		.sink0_channel       (crosser_010_out_channel),                       //          .channel
		.sink0_data          (crosser_010_out_data),                          //          .data
		.sink0_startofpacket (crosser_010_out_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (crosser_010_out_endofpacket)                    //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_rsp_mux_002 rsp_mux_009 (
		.clk                 (clk_100_clk_clk),                               //       clk.clk
		.reset               (dma_M1_M2_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_009_src_ready),                         //       src.ready
		.src_valid           (rsp_mux_009_src_valid),                         //          .valid
		.src_data            (rsp_mux_009_src_data),                          //          .data
		.src_channel         (rsp_mux_009_src_channel),                       //          .channel
		.src_startofpacket   (rsp_mux_009_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (rsp_mux_009_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (crosser_011_out_ready),                         //     sink0.ready
		.sink0_valid         (crosser_011_out_valid),                         //          .valid
		.sink0_channel       (crosser_011_out_channel),                       //          .channel
		.sink0_data          (crosser_011_out_data),                          //          .data
		.sink0_startofpacket (crosser_011_out_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (crosser_011_out_endofpacket)                    //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_rsp_mux_002 rsp_mux_010 (
		.clk                 (clk_100_clk_clk),                               //       clk.clk
		.reset               (dma_M1_M2_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_010_src_ready),                         //       src.ready
		.src_valid           (rsp_mux_010_src_valid),                         //          .valid
		.src_data            (rsp_mux_010_src_data),                          //          .data
		.src_channel         (rsp_mux_010_src_channel),                       //          .channel
		.src_startofpacket   (rsp_mux_010_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (rsp_mux_010_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (crosser_007_out_ready),                         //     sink0.ready
		.sink0_valid         (crosser_007_out_valid),                         //          .valid
		.sink0_channel       (crosser_007_out_channel),                       //          .channel
		.sink0_data          (crosser_007_out_data),                          //          .data
		.sink0_startofpacket (crosser_007_out_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (crosser_007_out_endofpacket)                    //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_0_rsp_mux_002 rsp_mux_011 (
		.clk                 (clk_100_clk_clk),                               //       clk.clk
		.reset               (dma_M1_M2_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_011_src_ready),                         //       src.ready
		.src_valid           (rsp_mux_011_src_valid),                         //          .valid
		.src_data            (rsp_mux_011_src_data),                          //          .data
		.src_channel         (rsp_mux_011_src_channel),                       //          .channel
		.src_startofpacket   (rsp_mux_011_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (rsp_mux_011_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (crosser_008_out_ready),                         //     sink0.ready
		.sink0_valid         (crosser_008_out_valid),                         //          .valid
		.sink0_channel       (crosser_008_out_channel),                       //          .channel
		.sink0_data          (crosser_008_out_data),                          //          .data
		.sink0_startofpacket (crosser_008_out_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (crosser_008_out_endofpacket)                    //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (83),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (89),
		.IN_PKT_BURSTWRAP_L            (84),
		.IN_PKT_BURST_SIZE_H           (92),
		.IN_PKT_BURST_SIZE_L           (90),
		.IN_PKT_RESPONSE_STATUS_H      (116),
		.IN_PKT_RESPONSE_STATUS_L      (115),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (94),
		.IN_PKT_BURST_TYPE_L           (93),
		.IN_PKT_ORI_BURST_SIZE_L       (117),
		.IN_PKT_ORI_BURST_SIZE_H       (119),
		.IN_ST_DATA_W                  (120),
		.OUT_PKT_ADDR_H                (175),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (191),
		.OUT_PKT_BYTE_CNT_L            (182),
		.OUT_PKT_TRANS_COMPRESSED_READ (176),
		.OUT_PKT_BURST_SIZE_H          (200),
		.OUT_PKT_BURST_SIZE_L          (198),
		.OUT_PKT_RESPONSE_STATUS_H     (224),
		.OUT_PKT_RESPONSE_STATUS_L     (223),
		.OUT_PKT_TRANS_EXCLUSIVE       (181),
		.OUT_PKT_BURST_TYPE_H          (202),
		.OUT_PKT_BURST_TYPE_L          (201),
		.OUT_PKT_ORI_BURST_SIZE_L      (225),
		.OUT_PKT_ORI_BURST_SIZE_H      (227),
		.OUT_ST_DATA_W                 (228),
		.ST_CHANNEL_W                  (16),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) dma_m1_m2_descriptor_slave_cmd_width_adapter (
		.clk                  (clk_100_clk_clk),                                                //       clk.clk
		.reset                (dma_M1_M2_reset_n_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.in_valid             (cmd_mux_009_src_valid),                                          //      sink.valid
		.in_channel           (cmd_mux_009_src_channel),                                        //          .channel
		.in_startofpacket     (cmd_mux_009_src_startofpacket),                                  //          .startofpacket
		.in_endofpacket       (cmd_mux_009_src_endofpacket),                                    //          .endofpacket
		.in_ready             (cmd_mux_009_src_ready),                                          //          .ready
		.in_data              (cmd_mux_009_src_data),                                           //          .data
		.out_endofpacket      (dma_m1_m2_descriptor_slave_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (dma_m1_m2_descriptor_slave_cmd_width_adapter_src_data),          //          .data
		.out_channel          (dma_m1_m2_descriptor_slave_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (dma_m1_m2_descriptor_slave_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (dma_m1_m2_descriptor_slave_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (dma_m1_m2_descriptor_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                          // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (83),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (89),
		.IN_PKT_BURSTWRAP_L            (84),
		.IN_PKT_BURST_SIZE_H           (92),
		.IN_PKT_BURST_SIZE_L           (90),
		.IN_PKT_RESPONSE_STATUS_H      (116),
		.IN_PKT_RESPONSE_STATUS_L      (115),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (94),
		.IN_PKT_BURST_TYPE_L           (93),
		.IN_PKT_ORI_BURST_SIZE_L       (117),
		.IN_PKT_ORI_BURST_SIZE_H       (119),
		.IN_ST_DATA_W                  (120),
		.OUT_PKT_ADDR_H                (175),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (191),
		.OUT_PKT_BYTE_CNT_L            (182),
		.OUT_PKT_TRANS_COMPRESSED_READ (176),
		.OUT_PKT_BURST_SIZE_H          (200),
		.OUT_PKT_BURST_SIZE_L          (198),
		.OUT_PKT_RESPONSE_STATUS_H     (224),
		.OUT_PKT_RESPONSE_STATUS_L     (223),
		.OUT_PKT_TRANS_EXCLUSIVE       (181),
		.OUT_PKT_BURST_TYPE_H          (202),
		.OUT_PKT_BURST_TYPE_L          (201),
		.OUT_PKT_ORI_BURST_SIZE_L      (225),
		.OUT_PKT_ORI_BURST_SIZE_H      (227),
		.OUT_ST_DATA_W                 (228),
		.ST_CHANNEL_W                  (16),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) dma_m2_m1_descriptor_slave_cmd_width_adapter (
		.clk                  (clk_100_clk_clk),                                                //       clk.clk
		.reset                (dma_M1_M2_reset_n_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.in_valid             (cmd_mux_010_src_valid),                                          //      sink.valid
		.in_channel           (cmd_mux_010_src_channel),                                        //          .channel
		.in_startofpacket     (cmd_mux_010_src_startofpacket),                                  //          .startofpacket
		.in_endofpacket       (cmd_mux_010_src_endofpacket),                                    //          .endofpacket
		.in_ready             (cmd_mux_010_src_ready),                                          //          .ready
		.in_data              (cmd_mux_010_src_data),                                           //          .data
		.out_endofpacket      (dma_m2_m1_descriptor_slave_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (dma_m2_m1_descriptor_slave_cmd_width_adapter_src_data),          //          .data
		.out_channel          (dma_m2_m1_descriptor_slave_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (dma_m2_m1_descriptor_slave_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (dma_m2_m1_descriptor_slave_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (dma_m2_m1_descriptor_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                          // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (319),
		.IN_PKT_ADDR_L                 (288),
		.IN_PKT_DATA_H                 (255),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (287),
		.IN_PKT_BYTEEN_L               (256),
		.IN_PKT_BYTE_CNT_H             (335),
		.IN_PKT_BYTE_CNT_L             (326),
		.IN_PKT_TRANS_COMPRESSED_READ  (320),
		.IN_PKT_TRANS_WRITE            (322),
		.IN_PKT_BURSTWRAP_H            (341),
		.IN_PKT_BURSTWRAP_L            (336),
		.IN_PKT_BURST_SIZE_H           (344),
		.IN_PKT_BURST_SIZE_L           (342),
		.IN_PKT_RESPONSE_STATUS_H      (368),
		.IN_PKT_RESPONSE_STATUS_L      (367),
		.IN_PKT_TRANS_EXCLUSIVE        (325),
		.IN_PKT_BURST_TYPE_H           (346),
		.IN_PKT_BURST_TYPE_L           (345),
		.IN_PKT_ORI_BURST_SIZE_L       (369),
		.IN_PKT_ORI_BURST_SIZE_H       (371),
		.IN_ST_DATA_W                  (372),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (83),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (92),
		.OUT_PKT_BURST_SIZE_L          (90),
		.OUT_PKT_RESPONSE_STATUS_H     (116),
		.OUT_PKT_RESPONSE_STATUS_L     (115),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (94),
		.OUT_PKT_BURST_TYPE_L          (93),
		.OUT_PKT_ORI_BURST_SIZE_L      (117),
		.OUT_PKT_ORI_BURST_SIZE_H      (119),
		.OUT_ST_DATA_W                 (120),
		.ST_CHANNEL_W                  (16),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) m2_ddr2_memory_avl_rsp_width_adapter (
		.clk                  (m2_ddr2_memory_afi_clk_clk),                                      //       clk.clk
		.reset                (m2_ddr2_memory_avl_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (router_013_src_valid),                                            //      sink.valid
		.in_channel           (router_013_src_channel),                                          //          .channel
		.in_startofpacket     (router_013_src_startofpacket),                                    //          .startofpacket
		.in_endofpacket       (router_013_src_endofpacket),                                      //          .endofpacket
		.in_ready             (router_013_src_ready),                                            //          .ready
		.in_data              (router_013_src_data),                                             //          .data
		.out_endofpacket      (m2_ddr2_memory_avl_rsp_width_adapter_src_endofpacket),            //       src.endofpacket
		.out_data             (m2_ddr2_memory_avl_rsp_width_adapter_src_data),                   //          .data
		.out_channel          (m2_ddr2_memory_avl_rsp_width_adapter_src_channel),                //          .channel
		.out_valid            (m2_ddr2_memory_avl_rsp_width_adapter_src_valid),                  //          .valid
		.out_ready            (m2_ddr2_memory_avl_rsp_width_adapter_src_ready),                  //          .ready
		.out_startofpacket    (m2_ddr2_memory_avl_rsp_width_adapter_src_startofpacket),          //          .startofpacket
		.in_command_size_data (3'b000)                                                           // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (175),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (191),
		.IN_PKT_BYTE_CNT_L             (182),
		.IN_PKT_TRANS_COMPRESSED_READ  (176),
		.IN_PKT_TRANS_WRITE            (178),
		.IN_PKT_BURSTWRAP_H            (197),
		.IN_PKT_BURSTWRAP_L            (192),
		.IN_PKT_BURST_SIZE_H           (200),
		.IN_PKT_BURST_SIZE_L           (198),
		.IN_PKT_RESPONSE_STATUS_H      (224),
		.IN_PKT_RESPONSE_STATUS_L      (223),
		.IN_PKT_TRANS_EXCLUSIVE        (181),
		.IN_PKT_BURST_TYPE_H           (202),
		.IN_PKT_BURST_TYPE_L           (201),
		.IN_PKT_ORI_BURST_SIZE_L       (225),
		.IN_PKT_ORI_BURST_SIZE_H       (227),
		.IN_ST_DATA_W                  (228),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (83),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (92),
		.OUT_PKT_BURST_SIZE_L          (90),
		.OUT_PKT_RESPONSE_STATUS_H     (116),
		.OUT_PKT_RESPONSE_STATUS_L     (115),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (94),
		.OUT_PKT_BURST_TYPE_L          (93),
		.OUT_PKT_ORI_BURST_SIZE_L      (117),
		.OUT_PKT_ORI_BURST_SIZE_H      (119),
		.OUT_ST_DATA_W                 (120),
		.ST_CHANNEL_W                  (16),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) dma_m1_m2_descriptor_slave_rsp_width_adapter (
		.clk                  (clk_100_clk_clk),                                                //       clk.clk
		.reset                (dma_M1_M2_reset_n_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.in_valid             (router_021_src_valid),                                           //      sink.valid
		.in_channel           (router_021_src_channel),                                         //          .channel
		.in_startofpacket     (router_021_src_startofpacket),                                   //          .startofpacket
		.in_endofpacket       (router_021_src_endofpacket),                                     //          .endofpacket
		.in_ready             (router_021_src_ready),                                           //          .ready
		.in_data              (router_021_src_data),                                            //          .data
		.out_endofpacket      (dma_m1_m2_descriptor_slave_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (dma_m1_m2_descriptor_slave_rsp_width_adapter_src_data),          //          .data
		.out_channel          (dma_m1_m2_descriptor_slave_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (dma_m1_m2_descriptor_slave_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (dma_m1_m2_descriptor_slave_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (dma_m1_m2_descriptor_slave_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                          // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (175),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (191),
		.IN_PKT_BYTE_CNT_L             (182),
		.IN_PKT_TRANS_COMPRESSED_READ  (176),
		.IN_PKT_TRANS_WRITE            (178),
		.IN_PKT_BURSTWRAP_H            (197),
		.IN_PKT_BURSTWRAP_L            (192),
		.IN_PKT_BURST_SIZE_H           (200),
		.IN_PKT_BURST_SIZE_L           (198),
		.IN_PKT_RESPONSE_STATUS_H      (224),
		.IN_PKT_RESPONSE_STATUS_L      (223),
		.IN_PKT_TRANS_EXCLUSIVE        (181),
		.IN_PKT_BURST_TYPE_H           (202),
		.IN_PKT_BURST_TYPE_L           (201),
		.IN_PKT_ORI_BURST_SIZE_L       (225),
		.IN_PKT_ORI_BURST_SIZE_H       (227),
		.IN_ST_DATA_W                  (228),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (83),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (92),
		.OUT_PKT_BURST_SIZE_L          (90),
		.OUT_PKT_RESPONSE_STATUS_H     (116),
		.OUT_PKT_RESPONSE_STATUS_L     (115),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (94),
		.OUT_PKT_BURST_TYPE_L          (93),
		.OUT_PKT_ORI_BURST_SIZE_L      (117),
		.OUT_PKT_ORI_BURST_SIZE_H      (119),
		.OUT_ST_DATA_W                 (120),
		.ST_CHANNEL_W                  (16),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) dma_m2_m1_descriptor_slave_rsp_width_adapter (
		.clk                  (clk_100_clk_clk),                                                //       clk.clk
		.reset                (dma_M1_M2_reset_n_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.in_valid             (router_022_src_valid),                                           //      sink.valid
		.in_channel           (router_022_src_channel),                                         //          .channel
		.in_startofpacket     (router_022_src_startofpacket),                                   //          .startofpacket
		.in_endofpacket       (router_022_src_endofpacket),                                     //          .endofpacket
		.in_ready             (router_022_src_ready),                                           //          .ready
		.in_data              (router_022_src_data),                                            //          .data
		.out_endofpacket      (dma_m2_m1_descriptor_slave_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (dma_m2_m1_descriptor_slave_rsp_width_adapter_src_data),          //          .data
		.out_channel          (dma_m2_m1_descriptor_slave_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (dma_m2_m1_descriptor_slave_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (dma_m2_m1_descriptor_slave_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (dma_m2_m1_descriptor_slave_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                          // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (49),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (65),
		.IN_PKT_BYTE_CNT_L             (56),
		.IN_PKT_TRANS_COMPRESSED_READ  (50),
		.IN_PKT_TRANS_WRITE            (52),
		.IN_PKT_BURSTWRAP_H            (71),
		.IN_PKT_BURSTWRAP_L            (66),
		.IN_PKT_BURST_SIZE_H           (74),
		.IN_PKT_BURST_SIZE_L           (72),
		.IN_PKT_RESPONSE_STATUS_H      (98),
		.IN_PKT_RESPONSE_STATUS_L      (97),
		.IN_PKT_TRANS_EXCLUSIVE        (55),
		.IN_PKT_BURST_TYPE_H           (76),
		.IN_PKT_BURST_TYPE_L           (75),
		.IN_PKT_ORI_BURST_SIZE_L       (99),
		.IN_PKT_ORI_BURST_SIZE_H       (101),
		.IN_ST_DATA_W                  (102),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (83),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (92),
		.OUT_PKT_BURST_SIZE_L          (90),
		.OUT_PKT_RESPONSE_STATUS_H     (116),
		.OUT_PKT_RESPONSE_STATUS_L     (115),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (94),
		.OUT_PKT_BURST_TYPE_L          (93),
		.OUT_PKT_ORI_BURST_SIZE_L      (117),
		.OUT_PKT_ORI_BURST_SIZE_H      (119),
		.OUT_ST_DATA_W                 (120),
		.ST_CHANNEL_W                  (16),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) ext_flash_uas_rsp_width_adapter (
		.clk                  (clk_100_clk_clk),                                   //       clk.clk
		.reset                (sgdma_tx_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.in_valid             (router_027_src_valid),                              //      sink.valid
		.in_channel           (router_027_src_channel),                            //          .channel
		.in_startofpacket     (router_027_src_startofpacket),                      //          .startofpacket
		.in_endofpacket       (router_027_src_endofpacket),                        //          .endofpacket
		.in_ready             (router_027_src_ready),                              //          .ready
		.in_data              (router_027_src_data),                               //          .data
		.out_endofpacket      (ext_flash_uas_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (ext_flash_uas_rsp_width_adapter_src_data),          //          .data
		.out_channel          (ext_flash_uas_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (ext_flash_uas_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (ext_flash_uas_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (ext_flash_uas_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                             // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (83),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (89),
		.IN_PKT_BURSTWRAP_L            (84),
		.IN_PKT_BURST_SIZE_H           (92),
		.IN_PKT_BURST_SIZE_L           (90),
		.IN_PKT_RESPONSE_STATUS_H      (116),
		.IN_PKT_RESPONSE_STATUS_L      (115),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (94),
		.IN_PKT_BURST_TYPE_L           (93),
		.IN_PKT_ORI_BURST_SIZE_L       (117),
		.IN_PKT_ORI_BURST_SIZE_H       (119),
		.IN_ST_DATA_W                  (120),
		.OUT_PKT_ADDR_H                (319),
		.OUT_PKT_ADDR_L                (288),
		.OUT_PKT_DATA_H                (255),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (287),
		.OUT_PKT_BYTEEN_L              (256),
		.OUT_PKT_BYTE_CNT_H            (335),
		.OUT_PKT_BYTE_CNT_L            (326),
		.OUT_PKT_TRANS_COMPRESSED_READ (320),
		.OUT_PKT_BURST_SIZE_H          (344),
		.OUT_PKT_BURST_SIZE_L          (342),
		.OUT_PKT_RESPONSE_STATUS_H     (368),
		.OUT_PKT_RESPONSE_STATUS_L     (367),
		.OUT_PKT_TRANS_EXCLUSIVE       (325),
		.OUT_PKT_BURST_TYPE_H          (346),
		.OUT_PKT_BURST_TYPE_L          (345),
		.OUT_PKT_ORI_BURST_SIZE_L      (369),
		.OUT_PKT_ORI_BURST_SIZE_H      (371),
		.OUT_ST_DATA_W                 (372),
		.ST_CHANNEL_W                  (16),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) m2_ddr2_memory_avl_cmd_width_adapter (
		.clk                  (m2_ddr2_memory_afi_clk_clk),                                      //       clk.clk
		.reset                (m2_ddr2_memory_avl_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (cmd_mux_001_src_valid),                                           //      sink.valid
		.in_channel           (cmd_mux_001_src_channel),                                         //          .channel
		.in_startofpacket     (cmd_mux_001_src_startofpacket),                                   //          .startofpacket
		.in_endofpacket       (cmd_mux_001_src_endofpacket),                                     //          .endofpacket
		.in_ready             (cmd_mux_001_src_ready),                                           //          .ready
		.in_data              (cmd_mux_001_src_data),                                            //          .data
		.out_endofpacket      (m2_ddr2_memory_avl_cmd_width_adapter_src_endofpacket),            //       src.endofpacket
		.out_data             (m2_ddr2_memory_avl_cmd_width_adapter_src_data),                   //          .data
		.out_channel          (m2_ddr2_memory_avl_cmd_width_adapter_src_channel),                //          .channel
		.out_valid            (m2_ddr2_memory_avl_cmd_width_adapter_src_valid),                  //          .valid
		.out_ready            (m2_ddr2_memory_avl_cmd_width_adapter_src_ready),                  //          .ready
		.out_startofpacket    (m2_ddr2_memory_avl_cmd_width_adapter_src_startofpacket),          //          .startofpacket
		.in_command_size_data (3'b000)                                                           // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (83),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (89),
		.IN_PKT_BURSTWRAP_L            (84),
		.IN_PKT_BURST_SIZE_H           (92),
		.IN_PKT_BURST_SIZE_L           (90),
		.IN_PKT_RESPONSE_STATUS_H      (116),
		.IN_PKT_RESPONSE_STATUS_L      (115),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (94),
		.IN_PKT_BURST_TYPE_L           (93),
		.IN_PKT_ORI_BURST_SIZE_L       (117),
		.IN_PKT_ORI_BURST_SIZE_H       (119),
		.IN_ST_DATA_W                  (120),
		.OUT_PKT_ADDR_H                (49),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (65),
		.OUT_PKT_BYTE_CNT_L            (56),
		.OUT_PKT_TRANS_COMPRESSED_READ (50),
		.OUT_PKT_BURST_SIZE_H          (74),
		.OUT_PKT_BURST_SIZE_L          (72),
		.OUT_PKT_RESPONSE_STATUS_H     (98),
		.OUT_PKT_RESPONSE_STATUS_L     (97),
		.OUT_PKT_TRANS_EXCLUSIVE       (55),
		.OUT_PKT_BURST_TYPE_H          (76),
		.OUT_PKT_BURST_TYPE_L          (75),
		.OUT_PKT_ORI_BURST_SIZE_L      (99),
		.OUT_PKT_ORI_BURST_SIZE_H      (101),
		.OUT_ST_DATA_W                 (102),
		.ST_CHANNEL_W                  (16),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) ext_flash_uas_cmd_width_adapter (
		.clk                  (clk_100_clk_clk),                                   //       clk.clk
		.reset                (sgdma_tx_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.in_valid             (cmd_mux_015_src_valid),                             //      sink.valid
		.in_channel           (cmd_mux_015_src_channel),                           //          .channel
		.in_startofpacket     (cmd_mux_015_src_startofpacket),                     //          .startofpacket
		.in_endofpacket       (cmd_mux_015_src_endofpacket),                       //          .endofpacket
		.in_ready             (cmd_mux_015_src_ready),                             //          .ready
		.in_data              (cmd_mux_015_src_data),                              //          .data
		.out_endofpacket      (ext_flash_uas_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (ext_flash_uas_cmd_width_adapter_src_data),          //          .data
		.out_channel          (ext_flash_uas_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (ext_flash_uas_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (ext_flash_uas_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (ext_flash_uas_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                             // (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (120),
		.BITS_PER_SYMBOL     (120),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (16),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser (
		.in_clk            (clk_100_clk_clk),                                                 //        in_clk.clk
		.in_reset          (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                  //  in_clk_reset.reset
		.out_clk           (m2_ddr2_memory_afi_clk_clk),                                      //       out_clk.clk
		.out_reset         (m2_ddr2_memory_avl_translator_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_src1_ready),                                            //            in.ready
		.in_valid          (cmd_demux_src1_valid),                                            //              .valid
		.in_startofpacket  (cmd_demux_src1_startofpacket),                                    //              .startofpacket
		.in_endofpacket    (cmd_demux_src1_endofpacket),                                      //              .endofpacket
		.in_channel        (cmd_demux_src1_channel),                                          //              .channel
		.in_data           (cmd_demux_src1_data),                                             //              .data
		.out_ready         (crosser_out_ready),                                               //           out.ready
		.out_valid         (crosser_out_valid),                                               //              .valid
		.out_startofpacket (crosser_out_startofpacket),                                       //              .startofpacket
		.out_endofpacket   (crosser_out_endofpacket),                                         //              .endofpacket
		.out_channel       (crosser_out_channel),                                             //              .channel
		.out_data          (crosser_out_data),                                                //              .data
		.in_empty          (1'b0),                                                            //   (terminated)
		.in_error          (1'b0),                                                            //   (terminated)
		.out_empty         (),                                                                //   (terminated)
		.out_error         ()                                                                 //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (120),
		.BITS_PER_SYMBOL     (120),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (16),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_001 (
		.in_clk            (clk_100_clk_clk),                                      //        in_clk.clk
		.in_reset          (nios2_gen2_0_reset_reset_bridge_in_reset_reset),       //  in_clk_reset.reset
		.out_clk           (m2_ddr2_memory_afi_half_clk_clk),                      //       out_clk.clk
		.out_reset         (m1_clock_bridge_s0_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_src12_ready),                                //            in.ready
		.in_valid          (cmd_demux_src12_valid),                                //              .valid
		.in_startofpacket  (cmd_demux_src12_startofpacket),                        //              .startofpacket
		.in_endofpacket    (cmd_demux_src12_endofpacket),                          //              .endofpacket
		.in_channel        (cmd_demux_src12_channel),                              //              .channel
		.in_data           (cmd_demux_src12_data),                                 //              .data
		.out_ready         (crosser_001_out_ready),                                //           out.ready
		.out_valid         (crosser_001_out_valid),                                //              .valid
		.out_startofpacket (crosser_001_out_startofpacket),                        //              .startofpacket
		.out_endofpacket   (crosser_001_out_endofpacket),                          //              .endofpacket
		.out_channel       (crosser_001_out_channel),                              //              .channel
		.out_data          (crosser_001_out_data),                                 //              .data
		.in_empty          (1'b0),                                                 //   (terminated)
		.in_error          (1'b0),                                                 //   (terminated)
		.out_empty         (),                                                     //   (terminated)
		.out_error         ()                                                      //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (120),
		.BITS_PER_SYMBOL     (120),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (16),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_002 (
		.in_clk            (clk_100_clk_clk),                                      //        in_clk.clk
		.in_reset          (dma_M1_M2_reset_n_reset_bridge_in_reset_reset),        //  in_clk_reset.reset
		.out_clk           (m2_ddr2_memory_afi_half_clk_clk),                      //       out_clk.clk
		.out_reset         (m1_clock_bridge_s0_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_008_src0_ready),                             //            in.ready
		.in_valid          (cmd_demux_008_src0_valid),                             //              .valid
		.in_startofpacket  (cmd_demux_008_src0_startofpacket),                     //              .startofpacket
		.in_endofpacket    (cmd_demux_008_src0_endofpacket),                       //              .endofpacket
		.in_channel        (cmd_demux_008_src0_channel),                           //              .channel
		.in_data           (cmd_demux_008_src0_data),                              //              .data
		.out_ready         (crosser_002_out_ready),                                //           out.ready
		.out_valid         (crosser_002_out_valid),                                //              .valid
		.out_startofpacket (crosser_002_out_startofpacket),                        //              .startofpacket
		.out_endofpacket   (crosser_002_out_endofpacket),                          //              .endofpacket
		.out_channel       (crosser_002_out_channel),                              //              .channel
		.out_data          (crosser_002_out_data),                                 //              .data
		.in_empty          (1'b0),                                                 //   (terminated)
		.in_error          (1'b0),                                                 //   (terminated)
		.out_empty         (),                                                     //   (terminated)
		.out_error         ()                                                      //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (120),
		.BITS_PER_SYMBOL     (120),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (16),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_003 (
		.in_clk            (clk_100_clk_clk),                                      //        in_clk.clk
		.in_reset          (dma_M1_M2_reset_n_reset_bridge_in_reset_reset),        //  in_clk_reset.reset
		.out_clk           (m2_ddr2_memory_afi_half_clk_clk),                      //       out_clk.clk
		.out_reset         (m1_clock_bridge_s0_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_009_src0_ready),                             //            in.ready
		.in_valid          (cmd_demux_009_src0_valid),                             //              .valid
		.in_startofpacket  (cmd_demux_009_src0_startofpacket),                     //              .startofpacket
		.in_endofpacket    (cmd_demux_009_src0_endofpacket),                       //              .endofpacket
		.in_channel        (cmd_demux_009_src0_channel),                           //              .channel
		.in_data           (cmd_demux_009_src0_data),                              //              .data
		.out_ready         (crosser_003_out_ready),                                //           out.ready
		.out_valid         (crosser_003_out_valid),                                //              .valid
		.out_startofpacket (crosser_003_out_startofpacket),                        //              .startofpacket
		.out_endofpacket   (crosser_003_out_endofpacket),                          //              .endofpacket
		.out_channel       (crosser_003_out_channel),                              //              .channel
		.out_data          (crosser_003_out_data),                                 //              .data
		.in_empty          (1'b0),                                                 //   (terminated)
		.in_error          (1'b0),                                                 //   (terminated)
		.out_empty         (),                                                     //   (terminated)
		.out_error         ()                                                      //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (120),
		.BITS_PER_SYMBOL     (120),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (16),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_004 (
		.in_clk            (clk_100_clk_clk),                                                 //        in_clk.clk
		.in_reset          (dma_M1_M2_reset_n_reset_bridge_in_reset_reset),                   //  in_clk_reset.reset
		.out_clk           (m2_ddr2_memory_afi_clk_clk),                                      //       out_clk.clk
		.out_reset         (m2_ddr2_memory_avl_translator_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_010_src0_ready),                                        //            in.ready
		.in_valid          (cmd_demux_010_src0_valid),                                        //              .valid
		.in_startofpacket  (cmd_demux_010_src0_startofpacket),                                //              .startofpacket
		.in_endofpacket    (cmd_demux_010_src0_endofpacket),                                  //              .endofpacket
		.in_channel        (cmd_demux_010_src0_channel),                                      //              .channel
		.in_data           (cmd_demux_010_src0_data),                                         //              .data
		.out_ready         (crosser_004_out_ready),                                           //           out.ready
		.out_valid         (crosser_004_out_valid),                                           //              .valid
		.out_startofpacket (crosser_004_out_startofpacket),                                   //              .startofpacket
		.out_endofpacket   (crosser_004_out_endofpacket),                                     //              .endofpacket
		.out_channel       (crosser_004_out_channel),                                         //              .channel
		.out_data          (crosser_004_out_data),                                            //              .data
		.in_empty          (1'b0),                                                            //   (terminated)
		.in_error          (1'b0),                                                            //   (terminated)
		.out_empty         (),                                                                //   (terminated)
		.out_error         ()                                                                 //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (120),
		.BITS_PER_SYMBOL     (120),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (16),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_005 (
		.in_clk            (clk_100_clk_clk),                                                 //        in_clk.clk
		.in_reset          (dma_M1_M2_reset_n_reset_bridge_in_reset_reset),                   //  in_clk_reset.reset
		.out_clk           (m2_ddr2_memory_afi_clk_clk),                                      //       out_clk.clk
		.out_reset         (m2_ddr2_memory_avl_translator_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_011_src0_ready),                                        //            in.ready
		.in_valid          (cmd_demux_011_src0_valid),                                        //              .valid
		.in_startofpacket  (cmd_demux_011_src0_startofpacket),                                //              .startofpacket
		.in_endofpacket    (cmd_demux_011_src0_endofpacket),                                  //              .endofpacket
		.in_channel        (cmd_demux_011_src0_channel),                                      //              .channel
		.in_data           (cmd_demux_011_src0_data),                                         //              .data
		.out_ready         (crosser_005_out_ready),                                           //           out.ready
		.out_valid         (crosser_005_out_valid),                                           //              .valid
		.out_startofpacket (crosser_005_out_startofpacket),                                   //              .startofpacket
		.out_endofpacket   (crosser_005_out_endofpacket),                                     //              .endofpacket
		.out_channel       (crosser_005_out_channel),                                         //              .channel
		.out_data          (crosser_005_out_data),                                            //              .data
		.in_empty          (1'b0),                                                            //   (terminated)
		.in_error          (1'b0),                                                            //   (terminated)
		.out_empty         (),                                                                //   (terminated)
		.out_error         ()                                                                 //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (120),
		.BITS_PER_SYMBOL     (120),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (16),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_006 (
		.in_clk            (m2_ddr2_memory_afi_clk_clk),                                      //        in_clk.clk
		.in_reset          (m2_ddr2_memory_avl_translator_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_100_clk_clk),                                                 //       out_clk.clk
		.out_reset         (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                  // out_clk_reset.reset
		.in_ready          (rsp_demux_001_src0_ready),                                        //            in.ready
		.in_valid          (rsp_demux_001_src0_valid),                                        //              .valid
		.in_startofpacket  (rsp_demux_001_src0_startofpacket),                                //              .startofpacket
		.in_endofpacket    (rsp_demux_001_src0_endofpacket),                                  //              .endofpacket
		.in_channel        (rsp_demux_001_src0_channel),                                      //              .channel
		.in_data           (rsp_demux_001_src0_data),                                         //              .data
		.out_ready         (crosser_006_out_ready),                                           //           out.ready
		.out_valid         (crosser_006_out_valid),                                           //              .valid
		.out_startofpacket (crosser_006_out_startofpacket),                                   //              .startofpacket
		.out_endofpacket   (crosser_006_out_endofpacket),                                     //              .endofpacket
		.out_channel       (crosser_006_out_channel),                                         //              .channel
		.out_data          (crosser_006_out_data),                                            //              .data
		.in_empty          (1'b0),                                                            //   (terminated)
		.in_error          (1'b0),                                                            //   (terminated)
		.out_empty         (),                                                                //   (terminated)
		.out_error         ()                                                                 //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (120),
		.BITS_PER_SYMBOL     (120),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (16),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_007 (
		.in_clk            (m2_ddr2_memory_afi_clk_clk),                                      //        in_clk.clk
		.in_reset          (m2_ddr2_memory_avl_translator_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_100_clk_clk),                                                 //       out_clk.clk
		.out_reset         (dma_M1_M2_reset_n_reset_bridge_in_reset_reset),                   // out_clk_reset.reset
		.in_ready          (rsp_demux_001_src1_ready),                                        //            in.ready
		.in_valid          (rsp_demux_001_src1_valid),                                        //              .valid
		.in_startofpacket  (rsp_demux_001_src1_startofpacket),                                //              .startofpacket
		.in_endofpacket    (rsp_demux_001_src1_endofpacket),                                  //              .endofpacket
		.in_channel        (rsp_demux_001_src1_channel),                                      //              .channel
		.in_data           (rsp_demux_001_src1_data),                                         //              .data
		.out_ready         (crosser_007_out_ready),                                           //           out.ready
		.out_valid         (crosser_007_out_valid),                                           //              .valid
		.out_startofpacket (crosser_007_out_startofpacket),                                   //              .startofpacket
		.out_endofpacket   (crosser_007_out_endofpacket),                                     //              .endofpacket
		.out_channel       (crosser_007_out_channel),                                         //              .channel
		.out_data          (crosser_007_out_data),                                            //              .data
		.in_empty          (1'b0),                                                            //   (terminated)
		.in_error          (1'b0),                                                            //   (terminated)
		.out_empty         (),                                                                //   (terminated)
		.out_error         ()                                                                 //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (120),
		.BITS_PER_SYMBOL     (120),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (16),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_008 (
		.in_clk            (m2_ddr2_memory_afi_clk_clk),                                      //        in_clk.clk
		.in_reset          (m2_ddr2_memory_avl_translator_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_100_clk_clk),                                                 //       out_clk.clk
		.out_reset         (dma_M1_M2_reset_n_reset_bridge_in_reset_reset),                   // out_clk_reset.reset
		.in_ready          (rsp_demux_001_src2_ready),                                        //            in.ready
		.in_valid          (rsp_demux_001_src2_valid),                                        //              .valid
		.in_startofpacket  (rsp_demux_001_src2_startofpacket),                                //              .startofpacket
		.in_endofpacket    (rsp_demux_001_src2_endofpacket),                                  //              .endofpacket
		.in_channel        (rsp_demux_001_src2_channel),                                      //              .channel
		.in_data           (rsp_demux_001_src2_data),                                         //              .data
		.out_ready         (crosser_008_out_ready),                                           //           out.ready
		.out_valid         (crosser_008_out_valid),                                           //              .valid
		.out_startofpacket (crosser_008_out_startofpacket),                                   //              .startofpacket
		.out_endofpacket   (crosser_008_out_endofpacket),                                     //              .endofpacket
		.out_channel       (crosser_008_out_channel),                                         //              .channel
		.out_data          (crosser_008_out_data),                                            //              .data
		.in_empty          (1'b0),                                                            //   (terminated)
		.in_error          (1'b0),                                                            //   (terminated)
		.out_empty         (),                                                                //   (terminated)
		.out_error         ()                                                                 //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (120),
		.BITS_PER_SYMBOL     (120),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (16),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_009 (
		.in_clk            (m2_ddr2_memory_afi_half_clk_clk),                      //        in_clk.clk
		.in_reset          (m1_clock_bridge_s0_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_100_clk_clk),                                      //       out_clk.clk
		.out_reset         (nios2_gen2_0_reset_reset_bridge_in_reset_reset),       // out_clk_reset.reset
		.in_ready          (rsp_demux_012_src0_ready),                             //            in.ready
		.in_valid          (rsp_demux_012_src0_valid),                             //              .valid
		.in_startofpacket  (rsp_demux_012_src0_startofpacket),                     //              .startofpacket
		.in_endofpacket    (rsp_demux_012_src0_endofpacket),                       //              .endofpacket
		.in_channel        (rsp_demux_012_src0_channel),                           //              .channel
		.in_data           (rsp_demux_012_src0_data),                              //              .data
		.out_ready         (crosser_009_out_ready),                                //           out.ready
		.out_valid         (crosser_009_out_valid),                                //              .valid
		.out_startofpacket (crosser_009_out_startofpacket),                        //              .startofpacket
		.out_endofpacket   (crosser_009_out_endofpacket),                          //              .endofpacket
		.out_channel       (crosser_009_out_channel),                              //              .channel
		.out_data          (crosser_009_out_data),                                 //              .data
		.in_empty          (1'b0),                                                 //   (terminated)
		.in_error          (1'b0),                                                 //   (terminated)
		.out_empty         (),                                                     //   (terminated)
		.out_error         ()                                                      //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (120),
		.BITS_PER_SYMBOL     (120),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (16),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_010 (
		.in_clk            (m2_ddr2_memory_afi_half_clk_clk),                      //        in_clk.clk
		.in_reset          (m1_clock_bridge_s0_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_100_clk_clk),                                      //       out_clk.clk
		.out_reset         (dma_M1_M2_reset_n_reset_bridge_in_reset_reset),        // out_clk_reset.reset
		.in_ready          (rsp_demux_012_src1_ready),                             //            in.ready
		.in_valid          (rsp_demux_012_src1_valid),                             //              .valid
		.in_startofpacket  (rsp_demux_012_src1_startofpacket),                     //              .startofpacket
		.in_endofpacket    (rsp_demux_012_src1_endofpacket),                       //              .endofpacket
		.in_channel        (rsp_demux_012_src1_channel),                           //              .channel
		.in_data           (rsp_demux_012_src1_data),                              //              .data
		.out_ready         (crosser_010_out_ready),                                //           out.ready
		.out_valid         (crosser_010_out_valid),                                //              .valid
		.out_startofpacket (crosser_010_out_startofpacket),                        //              .startofpacket
		.out_endofpacket   (crosser_010_out_endofpacket),                          //              .endofpacket
		.out_channel       (crosser_010_out_channel),                              //              .channel
		.out_data          (crosser_010_out_data),                                 //              .data
		.in_empty          (1'b0),                                                 //   (terminated)
		.in_error          (1'b0),                                                 //   (terminated)
		.out_empty         (),                                                     //   (terminated)
		.out_error         ()                                                      //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (120),
		.BITS_PER_SYMBOL     (120),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (16),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_011 (
		.in_clk            (m2_ddr2_memory_afi_half_clk_clk),                      //        in_clk.clk
		.in_reset          (m1_clock_bridge_s0_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_100_clk_clk),                                      //       out_clk.clk
		.out_reset         (dma_M1_M2_reset_n_reset_bridge_in_reset_reset),        // out_clk_reset.reset
		.in_ready          (rsp_demux_012_src2_ready),                             //            in.ready
		.in_valid          (rsp_demux_012_src2_valid),                             //              .valid
		.in_startofpacket  (rsp_demux_012_src2_startofpacket),                     //              .startofpacket
		.in_endofpacket    (rsp_demux_012_src2_endofpacket),                       //              .endofpacket
		.in_channel        (rsp_demux_012_src2_channel),                           //              .channel
		.in_data           (rsp_demux_012_src2_data),                              //              .data
		.out_ready         (crosser_011_out_ready),                                //           out.ready
		.out_valid         (crosser_011_out_valid),                                //              .valid
		.out_startofpacket (crosser_011_out_startofpacket),                        //              .startofpacket
		.out_endofpacket   (crosser_011_out_endofpacket),                          //              .endofpacket
		.out_channel       (crosser_011_out_channel),                              //              .channel
		.out_data          (crosser_011_out_data),                                 //              .data
		.in_empty          (1'b0),                                                 //   (terminated)
		.in_error          (1'b0),                                                 //   (terminated)
		.out_empty         (),                                                     //   (terminated)
		.out_error         ()                                                      //   (terminated)
	);

	MebX_Qsys_Project_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (clk_100_clk_clk),                                          // in_clk_0.clk
		.in_rst_0_reset (dma_M1_M2_reset_n_reset_bridge_in_reset_reset),            // in_rst_0.reset
		.in_0_data      (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                             //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                            //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                            //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                             //         .error
	);

	MebX_Qsys_Project_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (258),
		.inUsePackets    (0),
		.inDataWidth     (258),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (258),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (m2_ddr2_memory_afi_clk_clk),                                      // in_clk_0.clk
		.in_rst_0_reset (m2_ddr2_memory_avl_translator_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (m2_ddr2_memory_avl_agent_rdata_fifo_out_data),                    //     in_0.data
		.in_0_valid     (m2_ddr2_memory_avl_agent_rdata_fifo_out_valid),                   //         .valid
		.in_0_ready     (m2_ddr2_memory_avl_agent_rdata_fifo_out_ready),                   //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),                                //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),                               //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),                               //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)                                //         .error
	);

	MebX_Qsys_Project_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_clk_0_clk   (clk_100_clk_clk),                                 // in_clk_0.clk
		.in_rst_0_reset (sgdma_tx_reset_reset_bridge_in_reset_reset),      // in_rst_0.reset
		.in_0_data      (tse_mac_control_port_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (tse_mac_control_port_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (tse_mac_control_port_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_002_out_0_data),                //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),               //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),               //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)                //         .error
	);

	MebX_Qsys_Project_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_003 (
		.in_clk_0_clk   (clk_100_clk_clk),                                     // in_clk_0.clk
		.in_rst_0_reset (dma_M1_M2_reset_n_reset_bridge_in_reset_reset),       // in_rst_0.reset
		.in_0_data      (sysid_qsys_control_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (sysid_qsys_control_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (sysid_qsys_control_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_003_out_0_data),                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_003_out_0_valid),                   //         .valid
		.out_0_ready    (avalon_st_adapter_003_out_0_ready),                   //         .ready
		.out_0_error    (avalon_st_adapter_003_out_0_error)                    //         .error
	);

	MebX_Qsys_Project_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_004 (
		.in_clk_0_clk   (clk_100_clk_clk),                            // in_clk_0.clk
		.in_rst_0_reset (sgdma_tx_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (sgdma_tx_csr_agent_rdata_fifo_src_data),     //     in_0.data
		.in_0_valid     (sgdma_tx_csr_agent_rdata_fifo_src_valid),    //         .valid
		.in_0_ready     (sgdma_tx_csr_agent_rdata_fifo_src_ready),    //         .ready
		.out_0_data     (avalon_st_adapter_004_out_0_data),           //    out_0.data
		.out_0_valid    (avalon_st_adapter_004_out_0_valid),          //         .valid
		.out_0_ready    (avalon_st_adapter_004_out_0_ready),          //         .ready
		.out_0_error    (avalon_st_adapter_004_out_0_error)           //         .error
	);

	MebX_Qsys_Project_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_005 (
		.in_clk_0_clk   (clk_100_clk_clk),                            // in_clk_0.clk
		.in_rst_0_reset (sgdma_tx_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (sgdma_rx_csr_agent_rdata_fifo_src_data),     //     in_0.data
		.in_0_valid     (sgdma_rx_csr_agent_rdata_fifo_src_valid),    //         .valid
		.in_0_ready     (sgdma_rx_csr_agent_rdata_fifo_src_ready),    //         .ready
		.out_0_data     (avalon_st_adapter_005_out_0_data),           //    out_0.data
		.out_0_valid    (avalon_st_adapter_005_out_0_valid),          //         .valid
		.out_0_ready    (avalon_st_adapter_005_out_0_ready),          //         .ready
		.out_0_error    (avalon_st_adapter_005_out_0_error)           //         .error
	);

	MebX_Qsys_Project_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_006 (
		.in_clk_0_clk   (clk_100_clk_clk),                               // in_clk_0.clk
		.in_rst_0_reset (dma_M1_M2_reset_n_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (dma_m1_m2_csr_agent_rdata_fifo_src_data),       //     in_0.data
		.in_0_valid     (dma_m1_m2_csr_agent_rdata_fifo_src_valid),      //         .valid
		.in_0_ready     (dma_m1_m2_csr_agent_rdata_fifo_src_ready),      //         .ready
		.out_0_data     (avalon_st_adapter_006_out_0_data),              //    out_0.data
		.out_0_valid    (avalon_st_adapter_006_out_0_valid),             //         .valid
		.out_0_ready    (avalon_st_adapter_006_out_0_ready),             //         .ready
		.out_0_error    (avalon_st_adapter_006_out_0_error)              //         .error
	);

	MebX_Qsys_Project_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_007 (
		.in_clk_0_clk   (clk_100_clk_clk),                               // in_clk_0.clk
		.in_rst_0_reset (dma_M1_M2_reset_n_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (dma_m2_m1_csr_agent_rdata_fifo_src_data),       //     in_0.data
		.in_0_valid     (dma_m2_m1_csr_agent_rdata_fifo_src_valid),      //         .valid
		.in_0_ready     (dma_m2_m1_csr_agent_rdata_fifo_src_ready),      //         .ready
		.out_0_data     (avalon_st_adapter_007_out_0_data),              //    out_0.data
		.out_0_valid    (avalon_st_adapter_007_out_0_valid),             //         .valid
		.out_0_ready    (avalon_st_adapter_007_out_0_ready),             //         .ready
		.out_0_error    (avalon_st_adapter_007_out_0_error)              //         .error
	);

	MebX_Qsys_Project_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_008 (
		.in_clk_0_clk   (clk_100_clk_clk),                                         // in_clk_0.clk
		.in_rst_0_reset (nios2_gen2_0_reset_reset_bridge_in_reset_reset),          // in_rst_0.reset
		.in_0_data      (nios2_gen2_0_debug_mem_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (nios2_gen2_0_debug_mem_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (nios2_gen2_0_debug_mem_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_008_out_0_data),                        //    out_0.data
		.out_0_valid    (avalon_st_adapter_008_out_0_valid),                       //         .valid
		.out_0_ready    (avalon_st_adapter_008_out_0_ready),                       //         .ready
		.out_0_error    (avalon_st_adapter_008_out_0_error)                        //         .error
	);

	MebX_Qsys_Project_mm_interconnect_0_avalon_st_adapter_009 #(
		.inBitsPerSymbol (130),
		.inUsePackets    (0),
		.inDataWidth     (130),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (130),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_009 (
		.in_clk_0_clk   (clk_100_clk_clk),                                       // in_clk_0.clk
		.in_rst_0_reset (dma_M1_M2_reset_n_reset_bridge_in_reset_reset),         // in_rst_0.reset
		.in_0_data      (dma_m1_m2_descriptor_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (dma_m1_m2_descriptor_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (dma_m1_m2_descriptor_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_009_out_0_data),                      //    out_0.data
		.out_0_valid    (avalon_st_adapter_009_out_0_valid),                     //         .valid
		.out_0_ready    (avalon_st_adapter_009_out_0_ready),                     //         .ready
		.out_0_error    (avalon_st_adapter_009_out_0_error)                      //         .error
	);

	MebX_Qsys_Project_mm_interconnect_0_avalon_st_adapter_009 #(
		.inBitsPerSymbol (130),
		.inUsePackets    (0),
		.inDataWidth     (130),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (130),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_010 (
		.in_clk_0_clk   (clk_100_clk_clk),                                       // in_clk_0.clk
		.in_rst_0_reset (dma_M1_M2_reset_n_reset_bridge_in_reset_reset),         // in_rst_0.reset
		.in_0_data      (dma_m2_m1_descriptor_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (dma_m2_m1_descriptor_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (dma_m2_m1_descriptor_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_010_out_0_data),                      //    out_0.data
		.out_0_valid    (avalon_st_adapter_010_out_0_valid),                     //         .valid
		.out_0_ready    (avalon_st_adapter_010_out_0_ready),                     //         .ready
		.out_0_error    (avalon_st_adapter_010_out_0_error)                      //         .error
	);

	MebX_Qsys_Project_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_011 (
		.in_clk_0_clk   (clk_100_clk_clk),                                   // in_clk_0.clk
		.in_rst_0_reset (dma_M1_M2_reset_n_reset_bridge_in_reset_reset),     // in_rst_0.reset
		.in_0_data      (clock_bridge_afi_50_s0_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (clock_bridge_afi_50_s0_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (clock_bridge_afi_50_s0_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_011_out_0_data),                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_011_out_0_valid),                 //         .valid
		.out_0_ready    (avalon_st_adapter_011_out_0_ready),                 //         .ready
		.out_0_error    (avalon_st_adapter_011_out_0_error)                  //         .error
	);

	MebX_Qsys_Project_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_012 (
		.in_clk_0_clk   (m2_ddr2_memory_afi_half_clk_clk),                      // in_clk_0.clk
		.in_rst_0_reset (m1_clock_bridge_s0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (m1_clock_bridge_s0_agent_rdata_fifo_out_data),         //     in_0.data
		.in_0_valid     (m1_clock_bridge_s0_agent_rdata_fifo_out_valid),        //         .valid
		.in_0_ready     (m1_clock_bridge_s0_agent_rdata_fifo_out_ready),        //         .ready
		.out_0_data     (avalon_st_adapter_012_out_0_data),                     //    out_0.data
		.out_0_valid    (avalon_st_adapter_012_out_0_valid),                    //         .valid
		.out_0_ready    (avalon_st_adapter_012_out_0_ready),                    //         .ready
		.out_0_error    (avalon_st_adapter_012_out_0_error)                     //         .error
	);

	MebX_Qsys_Project_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_013 (
		.in_clk_0_clk   (clk_100_clk_clk),                               // in_clk_0.clk
		.in_rst_0_reset (dma_M1_M2_reset_n_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (onchip_memory_s1_agent_rdata_fifo_src_data),    //     in_0.data
		.in_0_valid     (onchip_memory_s1_agent_rdata_fifo_src_valid),   //         .valid
		.in_0_ready     (onchip_memory_s1_agent_rdata_fifo_src_ready),   //         .ready
		.out_0_data     (avalon_st_adapter_013_out_0_data),              //    out_0.data
		.out_0_valid    (avalon_st_adapter_013_out_0_valid),             //         .valid
		.out_0_ready    (avalon_st_adapter_013_out_0_ready),             //         .ready
		.out_0_error    (avalon_st_adapter_013_out_0_error)              //         .error
	);

	MebX_Qsys_Project_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_014 (
		.in_clk_0_clk   (clk_100_clk_clk),                                 // in_clk_0.clk
		.in_rst_0_reset (sgdma_tx_reset_reset_bridge_in_reset_reset),      // in_rst_0.reset
		.in_0_data      (descriptor_memory_s1_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (descriptor_memory_s1_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (descriptor_memory_s1_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_014_out_0_data),                //    out_0.data
		.out_0_valid    (avalon_st_adapter_014_out_0_valid),               //         .valid
		.out_0_ready    (avalon_st_adapter_014_out_0_ready),               //         .ready
		.out_0_error    (avalon_st_adapter_014_out_0_error)                //         .error
	);

	MebX_Qsys_Project_mm_interconnect_0_avalon_st_adapter_015 #(
		.inBitsPerSymbol (18),
		.inUsePackets    (0),
		.inDataWidth     (18),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (18),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_015 (
		.in_clk_0_clk   (clk_100_clk_clk),                            // in_clk_0.clk
		.in_rst_0_reset (sgdma_tx_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (ext_flash_uas_agent_rdata_fifo_out_data),    //     in_0.data
		.in_0_valid     (ext_flash_uas_agent_rdata_fifo_out_valid),   //         .valid
		.in_0_ready     (ext_flash_uas_agent_rdata_fifo_out_ready),   //         .ready
		.out_0_data     (avalon_st_adapter_015_out_0_data),           //    out_0.data
		.out_0_valid    (avalon_st_adapter_015_out_0_valid),          //         .valid
		.out_0_ready    (avalon_st_adapter_015_out_0_ready),          //         .ready
		.out_0_error    (avalon_st_adapter_015_out_0_error)           //         .error
	);

endmodule
