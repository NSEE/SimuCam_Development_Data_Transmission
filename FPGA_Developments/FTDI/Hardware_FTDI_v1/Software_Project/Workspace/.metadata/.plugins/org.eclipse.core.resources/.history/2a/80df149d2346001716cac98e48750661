/*************/
/* Includes	 */
/*************/

#include <stdio.h>
#include <io.h>
#include <unistd.h>
#include "system.h"

#include "altera_avalon_pio_regs.h"
#include "sys/alt_irq.h"
#include <sys/alt_cache.h>
#include "sys/alt_timestamp.h"
#include <altera_msgdma.h>

//#include "includes.h"

#include "utils/util.h"
#include "utils/meb_includes.h"

#include "driver/i2c/i2c.h"
#include "driver/leds/leds.h"
#include "driver/power_spi/power_spi.h"
#include "driver/seven_seg/seven_seg.h"

#include "logic/dma/dma.h"
#include "logic/sense/sense.h"
#include "logic/ddr2/ddr2.h"

/**************************************************
 * Global
**************************************************/

void write_ddr2(alt_u32 address, alt_u16 size){
	alt_u32 *pDes;
	pDes = (alt_u32 *)address;

	alt_u16 i;

	for(i=0 ; i < size; i++){
		*pDes = (alt_u32)i;
		printf("Writing 0x%08X at address 0x%08X\n", i, pDes);
		pDes++;
	}
	printf("Done writing\n\n");
}

void read_ddr2(alt_u32 address, alt_u16 size){
	alt_u32 *pSrc;
	pSrc = (alt_u32 *)address;

	alt_u16 i;

	for(i=0 ; i < size; i++){
		printf("Reading address 0x%08X; Data = 0x%08X\n", pSrc, *pSrc);
		pSrc++;
	}
	printf("Done reading\n\n");
}

int main(void)
{

	  alt_8 tempFPGA = 0;
	  alt_8 tempBoard = 0;
	  alt_8 led = 1;

  printf(" \n Nucleo de Sistemas Eletronicos Embarcados\n\n");

  SSDP_CONFIG(SSDP_NORMAL_MODE);
//  SSDP_CONFIG(SSDP_TEST_MODE);
/*
  while(1){
	  
	  switch(led){
		  case 1:
			LEDS_BOARD_DRIVE(LEDS_ON, LEDS_BOARD_0_MASK);
			LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_STATUS_0_MASK);
			LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_SPW_A_MASK);
			led++;
		  break;
		  case 2:
			LEDS_BOARD_DRIVE(LEDS_ON, LEDS_BOARD_1_MASK);
			LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_STATUS_1_MASK);
			LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_SPW_B_MASK);
			led++;
		  break;
		  case 3:
			LEDS_BOARD_DRIVE(LEDS_ON, LEDS_BOARD_2_MASK);
			LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_STATUS_2_MASK);
			LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_SPW_C_MASK);
			led++;
		  break;
		  case 4:
			LEDS_BOARD_DRIVE(LEDS_ON, LEDS_BOARD_3_MASK);
			LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_STATUS_3_MASK);
			LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_SPW_D_MASK);
			led++;
		  break;
		  case 5:
			LEDS_BOARD_DRIVE(LEDS_ON, LEDS_BOARD_4_MASK);
			LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_STATUS_0_MASK);
			LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_SPW_E_MASK);
			led++;
		  break;
		  case 6:
			LEDS_BOARD_DRIVE(LEDS_ON, LEDS_BOARD_5_MASK);
			LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_STATUS_1_MASK);
			LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_SPW_F_MASK);
			led++;
		  break;
		  case 7:
			LEDS_BOARD_DRIVE(LEDS_ON, LEDS_BOARD_6_MASK);
			LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_STATUS_2_MASK);
			LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_SPW_G_MASK);
			led++;
		  break;
		  case 8:
			LEDS_BOARD_DRIVE(LEDS_ON, LEDS_BOARD_7_MASK);
			LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_STATUS_3_MASK);
			LEDS_PAINEL_DRIVE(LEDS_ON, LEDS_SPW_H_MASK);
			led = 1;
		  break;
		  default:
			led = 0;
		}

		usleep(1000*1000);
	
		LEDS_BOARD_DRIVE(LEDS_OFF, LEDS_BOARD_ALL_MASK);
		LEDS_PAINEL_DRIVE(LEDS_OFF, LEDS_STATUS_ALL_MASK);
		LEDS_PAINEL_DRIVE(LEDS_OFF, LEDS_SPW_ALL_MASK);
	}
*/
//  DDR2_EEPROM_TEST(DDR2_M1_ID);
//  DDR2_EEPROM_TEST(DDR2_M2_ID);
  
//  DDR2_EEPROM_DUMP(DDR2_M1_ID);
//  DDR2_EEPROM_DUMP(DDR2_M2_ID);
  
//  DDR2_MEMORY_WRITE_TEST(DDR2_M1_ID);
//  DDR2_MEMORY_READ_TEST(DDR2_M1_ID);

//  DDR2_MEMORY_WRITE_TEST(DDR2_M2_ID);
//  DDR2_MEMORY_READ_TEST(DDR2_M2_ID);

  //write_ddr2(DDR2_M1_MEMORY_BASE, 256);
  //read_ddr2(DDR2_M1_MEMORY_BASE, 256);

  //DMA Operation, simple model

  //Variables for creating DMA
  alt_msgdma_dev *DMADev;
  //alt_u8  DMAName[32] = DMA_A_CSR_NAME;
  alt_u32 DMACSR =  DMA_M1_M2_CSR_BASE;

  //Reset Dispatcher on turn on
  IOWR_ALTERA_MSGDMA_CSR_CONTROL(DMACSR, 0x0002);
  //Wait reset to be finished
  while (IORD_ALTERA_MSGDMA_CSR_STATUS (DMACSR) & 0x0040) {
  	usleep(1000*1000);
  }

  //Open DMA based on name
  DMADev = alt_msgdma_open((char *)DMA_M1_M2_CSR_NAME);
  //Check if DMA opened correctely;
  if(DMADev == NULL){
  	printf("Error creating DMA device \n");
  }

  //Variaveis para cópia
  alt_msgdma_standard_descriptor DMAdescriptor;
  alt_u32 read_addr;
  alt_u32 write_addr;
  alt_u32 size = 256;
  //alt_u32 control_bits = 0 << 14; //Disable DMA
  alt_u32 control_bits = ALTERA_MSGDMA_DESCRIPTOR_CONTROL_TRANSFER_COMPLETE_IRQ_MASK;
  int rtn;

  //Create descriptor
  rtn = alt_msgdma_construct_standard_mm_to_mm_descriptor(DMADev, &DMAdescriptor, (alt_u32 *)read_addr, (alt_u32 *)write_addr, size, control_bits);
  if (rtn != 0){
  	printf("Error creating descriptor \n");
  }

  //Initiate Transfer
  if (rtn = 0){
  	alt_msgdma_standard_descriptor_async_transfer(DMADev, &DMAdescriptor);
  	if (rtn != 0){
  		printf("Error initiating transfer \n");
  	}
  }


  alt_msgdma_dev *dev_M1_M2 = alt_msgdma_open(DMA_M1_M2_CSR_NAME);
	alt_msgdma_dev dev_M1_M2_d = *dev_M1_M2;
	alt_u32 read_address = DDR2_M1_MEMORY_BASE;
	alt_u32 write_address = DDR2_M2_MEMORY_BASE;
	alt_u32 size = 256;
	alt_u32 control_bits = 0;

  alt_msgdma_standard_descriptor descriptor;
  alt_msgdma_construct_standard_mm_to_mm_descriptor(dev_M1_M2, &descriptor, (alt_u32 *)read_address, (alt_u32 *)write_address, size, control_bits);
  //alt_msgdma_standard_descriptor_sync_transfer(dev_M1_M2, &descriptor);

  //read_ddr2(DDR2_M2_MEMORY_BASE, 256);


	printf("Name of msgdma in Qsys system = %s\n", dev_M1_M2 -> name);
	alt_u32 base = dev_M1_M2_d.csr_base;
	printf("Base address of control and status register = 0x%08X\n", base);
	printf("Base address of the descriptor slave port = 0x%08X\n", dev_M1_M2 -> descriptor_base);
	printf("Base address of the response register = 0x%08X\n", dev_M1_M2 -> response_base);
  printf("Base address of the prefetcher register = 0x%08X\n", dev_M1_M2 -> prefetcher_base);
	printf("device IRQ controller ID = 0x%08X\n", dev_M1_M2 -> irq_controller_ID);
	printf("device IRQ ID = 0x%08X", (dev_M1_M2 -> irq_ID));
	printf("FIFO size to store descriptor count, { 8, 16, 32, 64,default:128, 256, 512, 1024 } = 0x%08X\n", dev_M1_M2 -> descriptor_fifo_depth);
	printf("FIFO size to store response count = 0x%08X\n", dev_M1_M2 -> response_fifo_depth);
	printf("user define control setting during interrupt registering = 0x%08X\n", dev_M1_M2 -> control);
	printf("Enable burst transfer = 0x%02X\n", dev_M1_M2 -> burst_enable);
	printf("Enable burst wrapping = 0x%02X\n", dev_M1_M2 -> burst_wrapping_support);
  printf("Depth of the internal data path FIFO = 0x%08X\n", dev_M1_M2 -> data_fifo_depth);
	printf("Data path Width. This parameter affect both read master and write master data width = 0x%08X\n", dev_M1_M2 -> data_width);
	printf("Maximum burst count = 0x%08X\n", dev_M1_M2 -> max_burst_count);
	printf("Maximum transfer length = 0x%08X\n", dev_M1_M2 -> max_byte);
	printf("Maximum stride count = 0x%16X\n", dev_M1_M2 -> max_stride);
	printf("Enable dynamic burst programming = 0x%02X\n", dev_M1_M2 -> programmable_burst_enable);
	printf("Enable stride addressing = 0x%02X\n", dev_M1_M2 -> stride_enable);
	printf("Supported transaction type = %s\n", dev_M1_M2 -> transfer_type);
  printf("Extended feature support enable 1-enable  0-disable  = 0x%02X\n", dev_M1_M2 -> enhanced_features);
  printf("Enable response port 0-memory-mapped, 1-streaming, 2-disable  = 0x%02X\n", dev_M1_M2 -> response_port);
  printf("Prefetcher enabled 0-disabled, 1-enabled = 0x%02X\n", dev_M1_M2 -> prefetcher_enable);

  while(1){
	TEMP_Read(&tempFPGA, &tempBoard);
	SSDP_UPDATE(tempFPGA);
	usleep(1000*1000);
  }

  return 0;
}



