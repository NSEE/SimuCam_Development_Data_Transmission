 /**
  * @file   dma.c
  * @Author Rodrigo França (rodrigo.franca@maua.br | rodmarfra@gmail.com)
  * @date   Junho, 2017
  * @brief  Source File para testes e acesso ao módulo DMA
  *
  */

#include "dma.h"

bool DMA_OPEN_DEVICE(alt_msgdma_dev **DmaDevice, const char* DmaName){
  bool bSuccess = TRUE;
  
  //Open DMA based on name

  *DmaDevice = alt_msgdma_open((char *)DmaName);
  
  //Check if DMA opened correctly;
  if(*DmaDevice == NULL){
    bSuccess = FALSE;
  }
  
  return bSuccess;
}

bool DMA_CONFIG(alt_msgdma_dev *DmaDevice, alt_u32 ConfigMask){
  bool bSuccess = TRUE;
  IOWR_ALTERA_MSGDMA_CSR_CONTROL(DmaDevice->csr_base, ConfigMask);
  return bSuccess;
}

bool DMA_BUSY(alt_msgdma_dev *DmaDevice){
  bool bBusy = FALSE;
  if (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_BUSY_MASK){
    bBusy = TRUE;
  }
  return bBusy;
}

bool DMA_DESCRIPTOR_BUFFER_FULL(alt_msgdma_dev *DmaDevice){
  bool bFull = FALSE;
  if (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK){
    bFull = TRUE;
  }
  return bFull;
}

bool DMA_DESCRIPTOR_BUFFER_EMPTY(alt_msgdma_dev *DmaDevice){
  bool bEmpty = FALSE;
  if (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_EMPTY_MASK){
    bEmpty = TRUE;
  }
  return bEmpty;
}

bool DMA_DISPATCHER_STOP(alt_msgdma_dev *DmaDevice, bool bWait){
  bool bSuccess = TRUE;
  
  //Send stop command
  IOWR_ALTERA_MSGDMA_CSR_CONTROL(DmaDevice->csr_base, ALTERA_MSGDMA_CSR_STOP_MASK);
  
  if (bWait == DMA_WAIT) {
    //Wait stop to be finished
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_STOP_STATE_MASK) {
      usleep(1);
    }
  } else {
    return bSuccess;
  }
  
  return bSuccess;
}

bool DMA_DISPATCHER_RESET(alt_msgdma_dev *DmaDevice, bool bWait){
  bool bSuccess = TRUE;
  
  //Send reset command
  IOWR_ALTERA_MSGDMA_CSR_CONTROL(DmaDevice->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
  
  if (bWait == DMA_WAIT) {
    //Wait reset to be finished
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_RESET_STATE_MASK) {
      usleep(1);
    }
  } else {
    return bSuccess;
  }
  
  return bSuccess;
}

bool DMA_SINGLE_TRANSFER(alt_msgdma_dev *DmaDevice, alt_u32 SourceAddress, alt_u32 DestinationAddress, alt_u32 TransferSize, alt_u32 ControlBits, bool bWait){
  bool bSuccess = TRUE;
  alt_msgdma_standard_descriptor DmaDescriptor;

  if (alt_msgdma_construct_standard_mm_to_mm_descriptor(DmaDevice, &DmaDescriptor, (alt_u32 *)SourceAddress, (alt_u32 *)DestinationAddress, TransferSize, ControlBits) != 0){
    bSuccess = FALSE;
    return bSuccess;
  } else {
    if (alt_msgdma_standard_descriptor_async_transfer(DmaDevice, &DmaDescriptor) != 0) {
      bSuccess = FALSE;
      return bSuccess;
    }
  }
  
  if (bWait == DMA_WAIT) {
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_BUSY_MASK) {
      usleep(1000);
    }
  }
  
  return bSuccess;
}

bool DMA_MULTIPLE_TRANSFER(alt_msgdma_dev *DmaDevice, alt_u32 SourceAddressArray[], alt_u32 DestinationAddressArray[], alt_u8 TransferNumber, alt_u32 TransferSize, alt_u32 ControlBits, bool bWait){
  bool bSuccess = TRUE;
  alt_msgdma_standard_descriptor DmaDescriptor;
  alt_u8 i = 0;

  while ((bSuccess == TRUE) & (i < (TransferNumber - 1))){
    if (alt_msgdma_construct_standard_mm_to_mm_descriptor(DmaDevice, &DmaDescriptor, (alt_u32 *)SourceAddressArray[i], (alt_u32 *)DestinationAddressArray[i], TransferSize, (ControlBits | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_EARLY_DONE_ENABLE_MASK)) != 0){
      bSuccess = FALSE;
    } else {
      if (alt_msgdma_standard_descriptor_async_transfer(DmaDevice, &DmaDescriptor) != 0) {
        bSuccess = FALSE;
      }
    }
	i++;
  }
  if (alt_msgdma_construct_standard_mm_to_mm_descriptor(DmaDevice, &DmaDescriptor, (alt_u32 *)SourceAddressArray[i], (alt_u32 *)DestinationAddressArray[i], TransferSize, (ControlBits | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_EARLY_DONE_ENABLE_MASK)) != 0){
    bSuccess = FALSE;
  } else {
    if (alt_msgdma_standard_descriptor_async_transfer(DmaDevice, &DmaDescriptor) != 0) {
      bSuccess = FALSE;
    }
  }
  
  if ((bSuccess == TRUE) & (bWait == DMA_WAIT)) {
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_BUSY_MASK) {
      usleep(1000);
    }
  }
  
  return bSuccess;
}
