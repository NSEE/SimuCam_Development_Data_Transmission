// MebX_Qsys_Project_mm_interconnect_3.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 16.1 196

`timescale 1 ps / 1 ps
module MebX_Qsys_Project_mm_interconnect_3 (
		input  wire         m1_ddr2_memory_afi_clk_clk,                                      //                                    m1_ddr2_memory_afi_clk.clk
		input  wire         m1_ddr2_memory_afi_half_clk_clk,                                 //                               m1_ddr2_memory_afi_half_clk.clk
		input  wire         m1_clock_bridge_m0_reset_reset_bridge_in_reset_reset,            //            m1_clock_bridge_m0_reset_reset_bridge_in_reset.reset
		input  wire         m1_ddr2_memory_avl_translator_reset_reset_bridge_in_reset_reset, // m1_ddr2_memory_avl_translator_reset_reset_bridge_in_reset.reset
		input  wire         m1_ddr2_memory_soft_reset_reset_bridge_in_reset_reset,           //           m1_ddr2_memory_soft_reset_reset_bridge_in_reset.reset
		input  wire [30:0]  m1_clock_bridge_m0_address,                                      //                                        m1_clock_bridge_m0.address
		output wire         m1_clock_bridge_m0_waitrequest,                                  //                                                          .waitrequest
		input  wire [4:0]   m1_clock_bridge_m0_burstcount,                                   //                                                          .burstcount
		input  wire [7:0]   m1_clock_bridge_m0_byteenable,                                   //                                                          .byteenable
		input  wire         m1_clock_bridge_m0_read,                                         //                                                          .read
		output wire [63:0]  m1_clock_bridge_m0_readdata,                                     //                                                          .readdata
		output wire         m1_clock_bridge_m0_readdatavalid,                                //                                                          .readdatavalid
		input  wire         m1_clock_bridge_m0_write,                                        //                                                          .write
		input  wire [63:0]  m1_clock_bridge_m0_writedata,                                    //                                                          .writedata
		input  wire         m1_clock_bridge_m0_debugaccess,                                  //                                                          .debugaccess
		output wire [25:0]  m1_ddr2_memory_avl_address,                                      //                                        m1_ddr2_memory_avl.address
		output wire         m1_ddr2_memory_avl_write,                                        //                                                          .write
		output wire         m1_ddr2_memory_avl_read,                                         //                                                          .read
		input  wire [255:0] m1_ddr2_memory_avl_readdata,                                     //                                                          .readdata
		output wire [255:0] m1_ddr2_memory_avl_writedata,                                    //                                                          .writedata
		output wire         m1_ddr2_memory_avl_beginbursttransfer,                           //                                                          .beginbursttransfer
		output wire [7:0]   m1_ddr2_memory_avl_burstcount,                                   //                                                          .burstcount
		output wire [31:0]  m1_ddr2_memory_avl_byteenable,                                   //                                                          .byteenable
		input  wire         m1_ddr2_memory_avl_readdatavalid,                                //                                                          .readdatavalid
		input  wire         m1_ddr2_memory_avl_waitrequest                                   //                                                          .waitrequest
	);

	wire          m1_clock_bridge_m0_translator_avalon_universal_master_0_waitrequest;   // m1_clock_bridge_m0_agent:av_waitrequest -> m1_clock_bridge_m0_translator:uav_waitrequest
	wire   [63:0] m1_clock_bridge_m0_translator_avalon_universal_master_0_readdata;      // m1_clock_bridge_m0_agent:av_readdata -> m1_clock_bridge_m0_translator:uav_readdata
	wire          m1_clock_bridge_m0_translator_avalon_universal_master_0_debugaccess;   // m1_clock_bridge_m0_translator:uav_debugaccess -> m1_clock_bridge_m0_agent:av_debugaccess
	wire   [30:0] m1_clock_bridge_m0_translator_avalon_universal_master_0_address;       // m1_clock_bridge_m0_translator:uav_address -> m1_clock_bridge_m0_agent:av_address
	wire          m1_clock_bridge_m0_translator_avalon_universal_master_0_read;          // m1_clock_bridge_m0_translator:uav_read -> m1_clock_bridge_m0_agent:av_read
	wire    [7:0] m1_clock_bridge_m0_translator_avalon_universal_master_0_byteenable;    // m1_clock_bridge_m0_translator:uav_byteenable -> m1_clock_bridge_m0_agent:av_byteenable
	wire          m1_clock_bridge_m0_translator_avalon_universal_master_0_readdatavalid; // m1_clock_bridge_m0_agent:av_readdatavalid -> m1_clock_bridge_m0_translator:uav_readdatavalid
	wire          m1_clock_bridge_m0_translator_avalon_universal_master_0_lock;          // m1_clock_bridge_m0_translator:uav_lock -> m1_clock_bridge_m0_agent:av_lock
	wire          m1_clock_bridge_m0_translator_avalon_universal_master_0_write;         // m1_clock_bridge_m0_translator:uav_write -> m1_clock_bridge_m0_agent:av_write
	wire   [63:0] m1_clock_bridge_m0_translator_avalon_universal_master_0_writedata;     // m1_clock_bridge_m0_translator:uav_writedata -> m1_clock_bridge_m0_agent:av_writedata
	wire    [7:0] m1_clock_bridge_m0_translator_avalon_universal_master_0_burstcount;    // m1_clock_bridge_m0_translator:uav_burstcount -> m1_clock_bridge_m0_agent:av_burstcount
	wire          rsp_mux_src_valid;                                                     // rsp_mux:src_valid -> m1_clock_bridge_m0_agent:rp_valid
	wire  [146:0] rsp_mux_src_data;                                                      // rsp_mux:src_data -> m1_clock_bridge_m0_agent:rp_data
	wire          rsp_mux_src_ready;                                                     // m1_clock_bridge_m0_agent:rp_ready -> rsp_mux:src_ready
	wire    [0:0] rsp_mux_src_channel;                                                   // rsp_mux:src_channel -> m1_clock_bridge_m0_agent:rp_channel
	wire          rsp_mux_src_startofpacket;                                             // rsp_mux:src_startofpacket -> m1_clock_bridge_m0_agent:rp_startofpacket
	wire          rsp_mux_src_endofpacket;                                               // rsp_mux:src_endofpacket -> m1_clock_bridge_m0_agent:rp_endofpacket
	wire  [255:0] m1_ddr2_memory_avl_agent_m0_readdata;                                  // m1_ddr2_memory_avl_translator:uav_readdata -> m1_ddr2_memory_avl_agent:m0_readdata
	wire          m1_ddr2_memory_avl_agent_m0_waitrequest;                               // m1_ddr2_memory_avl_translator:uav_waitrequest -> m1_ddr2_memory_avl_agent:m0_waitrequest
	wire          m1_ddr2_memory_avl_agent_m0_debugaccess;                               // m1_ddr2_memory_avl_agent:m0_debugaccess -> m1_ddr2_memory_avl_translator:uav_debugaccess
	wire   [30:0] m1_ddr2_memory_avl_agent_m0_address;                                   // m1_ddr2_memory_avl_agent:m0_address -> m1_ddr2_memory_avl_translator:uav_address
	wire   [31:0] m1_ddr2_memory_avl_agent_m0_byteenable;                                // m1_ddr2_memory_avl_agent:m0_byteenable -> m1_ddr2_memory_avl_translator:uav_byteenable
	wire          m1_ddr2_memory_avl_agent_m0_read;                                      // m1_ddr2_memory_avl_agent:m0_read -> m1_ddr2_memory_avl_translator:uav_read
	wire          m1_ddr2_memory_avl_agent_m0_readdatavalid;                             // m1_ddr2_memory_avl_translator:uav_readdatavalid -> m1_ddr2_memory_avl_agent:m0_readdatavalid
	wire          m1_ddr2_memory_avl_agent_m0_lock;                                      // m1_ddr2_memory_avl_agent:m0_lock -> m1_ddr2_memory_avl_translator:uav_lock
	wire  [255:0] m1_ddr2_memory_avl_agent_m0_writedata;                                 // m1_ddr2_memory_avl_agent:m0_writedata -> m1_ddr2_memory_avl_translator:uav_writedata
	wire          m1_ddr2_memory_avl_agent_m0_write;                                     // m1_ddr2_memory_avl_agent:m0_write -> m1_ddr2_memory_avl_translator:uav_write
	wire   [12:0] m1_ddr2_memory_avl_agent_m0_burstcount;                                // m1_ddr2_memory_avl_agent:m0_burstcount -> m1_ddr2_memory_avl_translator:uav_burstcount
	wire          m1_ddr2_memory_avl_agent_rf_source_valid;                              // m1_ddr2_memory_avl_agent:rf_source_valid -> m1_ddr2_memory_avl_agent_rsp_fifo:in_valid
	wire  [363:0] m1_ddr2_memory_avl_agent_rf_source_data;                               // m1_ddr2_memory_avl_agent:rf_source_data -> m1_ddr2_memory_avl_agent_rsp_fifo:in_data
	wire          m1_ddr2_memory_avl_agent_rf_source_ready;                              // m1_ddr2_memory_avl_agent_rsp_fifo:in_ready -> m1_ddr2_memory_avl_agent:rf_source_ready
	wire          m1_ddr2_memory_avl_agent_rf_source_startofpacket;                      // m1_ddr2_memory_avl_agent:rf_source_startofpacket -> m1_ddr2_memory_avl_agent_rsp_fifo:in_startofpacket
	wire          m1_ddr2_memory_avl_agent_rf_source_endofpacket;                        // m1_ddr2_memory_avl_agent:rf_source_endofpacket -> m1_ddr2_memory_avl_agent_rsp_fifo:in_endofpacket
	wire          m1_ddr2_memory_avl_agent_rsp_fifo_out_valid;                           // m1_ddr2_memory_avl_agent_rsp_fifo:out_valid -> m1_ddr2_memory_avl_agent:rf_sink_valid
	wire  [363:0] m1_ddr2_memory_avl_agent_rsp_fifo_out_data;                            // m1_ddr2_memory_avl_agent_rsp_fifo:out_data -> m1_ddr2_memory_avl_agent:rf_sink_data
	wire          m1_ddr2_memory_avl_agent_rsp_fifo_out_ready;                           // m1_ddr2_memory_avl_agent:rf_sink_ready -> m1_ddr2_memory_avl_agent_rsp_fifo:out_ready
	wire          m1_ddr2_memory_avl_agent_rsp_fifo_out_startofpacket;                   // m1_ddr2_memory_avl_agent_rsp_fifo:out_startofpacket -> m1_ddr2_memory_avl_agent:rf_sink_startofpacket
	wire          m1_ddr2_memory_avl_agent_rsp_fifo_out_endofpacket;                     // m1_ddr2_memory_avl_agent_rsp_fifo:out_endofpacket -> m1_ddr2_memory_avl_agent:rf_sink_endofpacket
	wire          m1_ddr2_memory_avl_agent_rdata_fifo_src_valid;                         // m1_ddr2_memory_avl_agent:rdata_fifo_src_valid -> m1_ddr2_memory_avl_agent_rdata_fifo:in_valid
	wire  [257:0] m1_ddr2_memory_avl_agent_rdata_fifo_src_data;                          // m1_ddr2_memory_avl_agent:rdata_fifo_src_data -> m1_ddr2_memory_avl_agent_rdata_fifo:in_data
	wire          m1_ddr2_memory_avl_agent_rdata_fifo_src_ready;                         // m1_ddr2_memory_avl_agent_rdata_fifo:in_ready -> m1_ddr2_memory_avl_agent:rdata_fifo_src_ready
	wire          m1_clock_bridge_m0_agent_cp_valid;                                     // m1_clock_bridge_m0_agent:cp_valid -> router:sink_valid
	wire  [146:0] m1_clock_bridge_m0_agent_cp_data;                                      // m1_clock_bridge_m0_agent:cp_data -> router:sink_data
	wire          m1_clock_bridge_m0_agent_cp_ready;                                     // router:sink_ready -> m1_clock_bridge_m0_agent:cp_ready
	wire          m1_clock_bridge_m0_agent_cp_startofpacket;                             // m1_clock_bridge_m0_agent:cp_startofpacket -> router:sink_startofpacket
	wire          m1_clock_bridge_m0_agent_cp_endofpacket;                               // m1_clock_bridge_m0_agent:cp_endofpacket -> router:sink_endofpacket
	wire          router_src_valid;                                                      // router:src_valid -> cmd_demux:sink_valid
	wire  [146:0] router_src_data;                                                       // router:src_data -> cmd_demux:sink_data
	wire          router_src_ready;                                                      // cmd_demux:sink_ready -> router:src_ready
	wire    [0:0] router_src_channel;                                                    // router:src_channel -> cmd_demux:sink_channel
	wire          router_src_startofpacket;                                              // router:src_startofpacket -> cmd_demux:sink_startofpacket
	wire          router_src_endofpacket;                                                // router:src_endofpacket -> cmd_demux:sink_endofpacket
	wire          m1_ddr2_memory_avl_agent_rp_valid;                                     // m1_ddr2_memory_avl_agent:rp_valid -> router_001:sink_valid
	wire  [362:0] m1_ddr2_memory_avl_agent_rp_data;                                      // m1_ddr2_memory_avl_agent:rp_data -> router_001:sink_data
	wire          m1_ddr2_memory_avl_agent_rp_ready;                                     // router_001:sink_ready -> m1_ddr2_memory_avl_agent:rp_ready
	wire          m1_ddr2_memory_avl_agent_rp_startofpacket;                             // m1_ddr2_memory_avl_agent:rp_startofpacket -> router_001:sink_startofpacket
	wire          m1_ddr2_memory_avl_agent_rp_endofpacket;                               // m1_ddr2_memory_avl_agent:rp_endofpacket -> router_001:sink_endofpacket
	wire          cmd_mux_src_valid;                                                     // cmd_mux:src_valid -> m1_ddr2_memory_avl_cmd_width_adapter:in_valid
	wire  [146:0] cmd_mux_src_data;                                                      // cmd_mux:src_data -> m1_ddr2_memory_avl_cmd_width_adapter:in_data
	wire          cmd_mux_src_ready;                                                     // m1_ddr2_memory_avl_cmd_width_adapter:in_ready -> cmd_mux:src_ready
	wire    [0:0] cmd_mux_src_channel;                                                   // cmd_mux:src_channel -> m1_ddr2_memory_avl_cmd_width_adapter:in_channel
	wire          cmd_mux_src_startofpacket;                                             // cmd_mux:src_startofpacket -> m1_ddr2_memory_avl_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_src_endofpacket;                                               // cmd_mux:src_endofpacket -> m1_ddr2_memory_avl_cmd_width_adapter:in_endofpacket
	wire          m1_ddr2_memory_avl_cmd_width_adapter_src_valid;                        // m1_ddr2_memory_avl_cmd_width_adapter:out_valid -> m1_ddr2_memory_avl_agent:cp_valid
	wire  [362:0] m1_ddr2_memory_avl_cmd_width_adapter_src_data;                         // m1_ddr2_memory_avl_cmd_width_adapter:out_data -> m1_ddr2_memory_avl_agent:cp_data
	wire          m1_ddr2_memory_avl_cmd_width_adapter_src_ready;                        // m1_ddr2_memory_avl_agent:cp_ready -> m1_ddr2_memory_avl_cmd_width_adapter:out_ready
	wire    [0:0] m1_ddr2_memory_avl_cmd_width_adapter_src_channel;                      // m1_ddr2_memory_avl_cmd_width_adapter:out_channel -> m1_ddr2_memory_avl_agent:cp_channel
	wire          m1_ddr2_memory_avl_cmd_width_adapter_src_startofpacket;                // m1_ddr2_memory_avl_cmd_width_adapter:out_startofpacket -> m1_ddr2_memory_avl_agent:cp_startofpacket
	wire          m1_ddr2_memory_avl_cmd_width_adapter_src_endofpacket;                  // m1_ddr2_memory_avl_cmd_width_adapter:out_endofpacket -> m1_ddr2_memory_avl_agent:cp_endofpacket
	wire          router_001_src_valid;                                                  // router_001:src_valid -> m1_ddr2_memory_avl_rsp_width_adapter:in_valid
	wire  [362:0] router_001_src_data;                                                   // router_001:src_data -> m1_ddr2_memory_avl_rsp_width_adapter:in_data
	wire          router_001_src_ready;                                                  // m1_ddr2_memory_avl_rsp_width_adapter:in_ready -> router_001:src_ready
	wire    [0:0] router_001_src_channel;                                                // router_001:src_channel -> m1_ddr2_memory_avl_rsp_width_adapter:in_channel
	wire          router_001_src_startofpacket;                                          // router_001:src_startofpacket -> m1_ddr2_memory_avl_rsp_width_adapter:in_startofpacket
	wire          router_001_src_endofpacket;                                            // router_001:src_endofpacket -> m1_ddr2_memory_avl_rsp_width_adapter:in_endofpacket
	wire          m1_ddr2_memory_avl_rsp_width_adapter_src_valid;                        // m1_ddr2_memory_avl_rsp_width_adapter:out_valid -> rsp_demux:sink_valid
	wire  [146:0] m1_ddr2_memory_avl_rsp_width_adapter_src_data;                         // m1_ddr2_memory_avl_rsp_width_adapter:out_data -> rsp_demux:sink_data
	wire          m1_ddr2_memory_avl_rsp_width_adapter_src_ready;                        // rsp_demux:sink_ready -> m1_ddr2_memory_avl_rsp_width_adapter:out_ready
	wire    [0:0] m1_ddr2_memory_avl_rsp_width_adapter_src_channel;                      // m1_ddr2_memory_avl_rsp_width_adapter:out_channel -> rsp_demux:sink_channel
	wire          m1_ddr2_memory_avl_rsp_width_adapter_src_startofpacket;                // m1_ddr2_memory_avl_rsp_width_adapter:out_startofpacket -> rsp_demux:sink_startofpacket
	wire          m1_ddr2_memory_avl_rsp_width_adapter_src_endofpacket;                  // m1_ddr2_memory_avl_rsp_width_adapter:out_endofpacket -> rsp_demux:sink_endofpacket
	wire          cmd_demux_src0_valid;                                                  // cmd_demux:src0_valid -> crosser:in_valid
	wire  [146:0] cmd_demux_src0_data;                                                   // cmd_demux:src0_data -> crosser:in_data
	wire          cmd_demux_src0_ready;                                                  // crosser:in_ready -> cmd_demux:src0_ready
	wire    [0:0] cmd_demux_src0_channel;                                                // cmd_demux:src0_channel -> crosser:in_channel
	wire          cmd_demux_src0_startofpacket;                                          // cmd_demux:src0_startofpacket -> crosser:in_startofpacket
	wire          cmd_demux_src0_endofpacket;                                            // cmd_demux:src0_endofpacket -> crosser:in_endofpacket
	wire          crosser_out_valid;                                                     // crosser:out_valid -> cmd_mux:sink0_valid
	wire  [146:0] crosser_out_data;                                                      // crosser:out_data -> cmd_mux:sink0_data
	wire          crosser_out_ready;                                                     // cmd_mux:sink0_ready -> crosser:out_ready
	wire    [0:0] crosser_out_channel;                                                   // crosser:out_channel -> cmd_mux:sink0_channel
	wire          crosser_out_startofpacket;                                             // crosser:out_startofpacket -> cmd_mux:sink0_startofpacket
	wire          crosser_out_endofpacket;                                               // crosser:out_endofpacket -> cmd_mux:sink0_endofpacket
	wire          rsp_demux_src0_valid;                                                  // rsp_demux:src0_valid -> crosser_001:in_valid
	wire  [146:0] rsp_demux_src0_data;                                                   // rsp_demux:src0_data -> crosser_001:in_data
	wire          rsp_demux_src0_ready;                                                  // crosser_001:in_ready -> rsp_demux:src0_ready
	wire    [0:0] rsp_demux_src0_channel;                                                // rsp_demux:src0_channel -> crosser_001:in_channel
	wire          rsp_demux_src0_startofpacket;                                          // rsp_demux:src0_startofpacket -> crosser_001:in_startofpacket
	wire          rsp_demux_src0_endofpacket;                                            // rsp_demux:src0_endofpacket -> crosser_001:in_endofpacket
	wire          crosser_001_out_valid;                                                 // crosser_001:out_valid -> rsp_mux:sink0_valid
	wire  [146:0] crosser_001_out_data;                                                  // crosser_001:out_data -> rsp_mux:sink0_data
	wire          crosser_001_out_ready;                                                 // rsp_mux:sink0_ready -> crosser_001:out_ready
	wire    [0:0] crosser_001_out_channel;                                               // crosser_001:out_channel -> rsp_mux:sink0_channel
	wire          crosser_001_out_startofpacket;                                         // crosser_001:out_startofpacket -> rsp_mux:sink0_startofpacket
	wire          crosser_001_out_endofpacket;                                           // crosser_001:out_endofpacket -> rsp_mux:sink0_endofpacket
	wire          m1_ddr2_memory_avl_agent_rdata_fifo_out_valid;                         // m1_ddr2_memory_avl_agent_rdata_fifo:out_valid -> avalon_st_adapter:in_0_valid
	wire  [257:0] m1_ddr2_memory_avl_agent_rdata_fifo_out_data;                          // m1_ddr2_memory_avl_agent_rdata_fifo:out_data -> avalon_st_adapter:in_0_data
	wire          m1_ddr2_memory_avl_agent_rdata_fifo_out_ready;                         // avalon_st_adapter:in_0_ready -> m1_ddr2_memory_avl_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_out_0_valid;                                         // avalon_st_adapter:out_0_valid -> m1_ddr2_memory_avl_agent:rdata_fifo_sink_valid
	wire  [257:0] avalon_st_adapter_out_0_data;                                          // avalon_st_adapter:out_0_data -> m1_ddr2_memory_avl_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                         // m1_ddr2_memory_avl_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                         // avalon_st_adapter:out_0_error -> m1_ddr2_memory_avl_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (31),
		.AV_DATA_W                   (64),
		.AV_BURSTCOUNT_W             (5),
		.AV_BYTEENABLE_W             (8),
		.UAV_ADDRESS_W               (31),
		.UAV_BURSTCOUNT_W            (8),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (8),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) m1_clock_bridge_m0_translator (
		.clk                    (m1_ddr2_memory_afi_half_clk_clk),                                       //                       clk.clk
		.reset                  (m1_clock_bridge_m0_reset_reset_bridge_in_reset_reset),                  //                     reset.reset
		.uav_address            (m1_clock_bridge_m0_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (m1_clock_bridge_m0_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (m1_clock_bridge_m0_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (m1_clock_bridge_m0_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (m1_clock_bridge_m0_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (m1_clock_bridge_m0_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (m1_clock_bridge_m0_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (m1_clock_bridge_m0_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (m1_clock_bridge_m0_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (m1_clock_bridge_m0_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (m1_clock_bridge_m0_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (m1_clock_bridge_m0_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (m1_clock_bridge_m0_waitrequest),                                        //                          .waitrequest
		.av_burstcount          (m1_clock_bridge_m0_burstcount),                                         //                          .burstcount
		.av_byteenable          (m1_clock_bridge_m0_byteenable),                                         //                          .byteenable
		.av_read                (m1_clock_bridge_m0_read),                                               //                          .read
		.av_readdata            (m1_clock_bridge_m0_readdata),                                           //                          .readdata
		.av_readdatavalid       (m1_clock_bridge_m0_readdatavalid),                                      //                          .readdatavalid
		.av_write               (m1_clock_bridge_m0_write),                                              //                          .write
		.av_writedata           (m1_clock_bridge_m0_writedata),                                          //                          .writedata
		.av_debugaccess         (m1_clock_bridge_m0_debugaccess),                                        //                          .debugaccess
		.av_beginbursttransfer  (1'b0),                                                                  //               (terminated)
		.av_begintransfer       (1'b0),                                                                  //               (terminated)
		.av_chipselect          (1'b0),                                                                  //               (terminated)
		.av_lock                (1'b0),                                                                  //               (terminated)
		.uav_clken              (),                                                                      //               (terminated)
		.av_clken               (1'b1),                                                                  //               (terminated)
		.uav_response           (2'b00),                                                                 //               (terminated)
		.av_response            (),                                                                      //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                  //               (terminated)
		.av_writeresponsevalid  ()                                                                       //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (26),
		.AV_DATA_W                      (256),
		.UAV_DATA_W                     (256),
		.AV_BURSTCOUNT_W                (8),
		.AV_BYTEENABLE_W                (32),
		.UAV_BYTEENABLE_W               (32),
		.UAV_ADDRESS_W                  (31),
		.UAV_BURSTCOUNT_W               (13),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (32),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) m1_ddr2_memory_avl_translator (
		.clk                    (m1_ddr2_memory_afi_clk_clk),                                      //                      clk.clk
		.reset                  (m1_ddr2_memory_avl_translator_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (m1_ddr2_memory_avl_agent_m0_address),                             // avalon_universal_slave_0.address
		.uav_burstcount         (m1_ddr2_memory_avl_agent_m0_burstcount),                          //                         .burstcount
		.uav_read               (m1_ddr2_memory_avl_agent_m0_read),                                //                         .read
		.uav_write              (m1_ddr2_memory_avl_agent_m0_write),                               //                         .write
		.uav_waitrequest        (m1_ddr2_memory_avl_agent_m0_waitrequest),                         //                         .waitrequest
		.uav_readdatavalid      (m1_ddr2_memory_avl_agent_m0_readdatavalid),                       //                         .readdatavalid
		.uav_byteenable         (m1_ddr2_memory_avl_agent_m0_byteenable),                          //                         .byteenable
		.uav_readdata           (m1_ddr2_memory_avl_agent_m0_readdata),                            //                         .readdata
		.uav_writedata          (m1_ddr2_memory_avl_agent_m0_writedata),                           //                         .writedata
		.uav_lock               (m1_ddr2_memory_avl_agent_m0_lock),                                //                         .lock
		.uav_debugaccess        (m1_ddr2_memory_avl_agent_m0_debugaccess),                         //                         .debugaccess
		.av_address             (m1_ddr2_memory_avl_address),                                      //      avalon_anti_slave_0.address
		.av_write               (m1_ddr2_memory_avl_write),                                        //                         .write
		.av_read                (m1_ddr2_memory_avl_read),                                         //                         .read
		.av_readdata            (m1_ddr2_memory_avl_readdata),                                     //                         .readdata
		.av_writedata           (m1_ddr2_memory_avl_writedata),                                    //                         .writedata
		.av_beginbursttransfer  (m1_ddr2_memory_avl_beginbursttransfer),                           //                         .beginbursttransfer
		.av_burstcount          (m1_ddr2_memory_avl_burstcount),                                   //                         .burstcount
		.av_byteenable          (m1_ddr2_memory_avl_byteenable),                                   //                         .byteenable
		.av_readdatavalid       (m1_ddr2_memory_avl_readdatavalid),                                //                         .readdatavalid
		.av_waitrequest         (m1_ddr2_memory_avl_waitrequest),                                  //                         .waitrequest
		.av_begintransfer       (),                                                                //              (terminated)
		.av_writebyteenable     (),                                                                //              (terminated)
		.av_lock                (),                                                                //              (terminated)
		.av_chipselect          (),                                                                //              (terminated)
		.av_clken               (),                                                                //              (terminated)
		.uav_clken              (1'b0),                                                            //              (terminated)
		.av_debugaccess         (),                                                                //              (terminated)
		.av_outputenable        (),                                                                //              (terminated)
		.uav_response           (),                                                                //              (terminated)
		.av_response            (2'b00),                                                           //              (terminated)
		.uav_writeresponsevalid (),                                                                //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                             //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (146),
		.PKT_ORI_BURST_SIZE_L      (144),
		.PKT_RESPONSE_STATUS_H     (143),
		.PKT_RESPONSE_STATUS_L     (142),
		.PKT_QOS_H                 (131),
		.PKT_QOS_L                 (131),
		.PKT_DATA_SIDEBAND_H       (129),
		.PKT_DATA_SIDEBAND_L       (129),
		.PKT_ADDR_SIDEBAND_H       (128),
		.PKT_ADDR_SIDEBAND_L       (128),
		.PKT_BURST_TYPE_H          (127),
		.PKT_BURST_TYPE_L          (126),
		.PKT_CACHE_H               (141),
		.PKT_CACHE_L               (138),
		.PKT_THREAD_ID_H           (134),
		.PKT_THREAD_ID_L           (134),
		.PKT_BURST_SIZE_H          (125),
		.PKT_BURST_SIZE_L          (123),
		.PKT_TRANS_EXCLUSIVE       (108),
		.PKT_TRANS_LOCK            (107),
		.PKT_BEGIN_BURST           (130),
		.PKT_PROTECTION_H          (137),
		.PKT_PROTECTION_L          (135),
		.PKT_BURSTWRAP_H           (122),
		.PKT_BURSTWRAP_L           (122),
		.PKT_BYTE_CNT_H            (121),
		.PKT_BYTE_CNT_L            (109),
		.PKT_ADDR_H                (102),
		.PKT_ADDR_L                (72),
		.PKT_TRANS_COMPRESSED_READ (103),
		.PKT_TRANS_POSTED          (104),
		.PKT_TRANS_WRITE           (105),
		.PKT_TRANS_READ            (106),
		.PKT_DATA_H                (63),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_SRC_ID_H              (132),
		.PKT_SRC_ID_L              (132),
		.PKT_DEST_ID_H             (133),
		.PKT_DEST_ID_L             (133),
		.ST_DATA_W                 (147),
		.ST_CHANNEL_W              (1),
		.AV_BURSTCOUNT_W           (8),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (0),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) m1_clock_bridge_m0_agent (
		.clk                   (m1_ddr2_memory_afi_half_clk_clk),                                       //       clk.clk
		.reset                 (m1_clock_bridge_m0_reset_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.av_address            (m1_clock_bridge_m0_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (m1_clock_bridge_m0_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (m1_clock_bridge_m0_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (m1_clock_bridge_m0_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (m1_clock_bridge_m0_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (m1_clock_bridge_m0_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (m1_clock_bridge_m0_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (m1_clock_bridge_m0_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (m1_clock_bridge_m0_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (m1_clock_bridge_m0_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (m1_clock_bridge_m0_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (m1_clock_bridge_m0_agent_cp_valid),                                     //        cp.valid
		.cp_data               (m1_clock_bridge_m0_agent_cp_data),                                      //          .data
		.cp_startofpacket      (m1_clock_bridge_m0_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (m1_clock_bridge_m0_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (m1_clock_bridge_m0_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_src_valid),                                                     //        rp.valid
		.rp_data               (rsp_mux_src_data),                                                      //          .data
		.rp_channel            (rsp_mux_src_channel),                                                   //          .channel
		.rp_startofpacket      (rsp_mux_src_startofpacket),                                             //          .startofpacket
		.rp_endofpacket        (rsp_mux_src_endofpacket),                                               //          .endofpacket
		.rp_ready              (rsp_mux_src_ready),                                                     //          .ready
		.av_response           (),                                                                      // (terminated)
		.av_writeresponsevalid ()                                                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (362),
		.PKT_ORI_BURST_SIZE_L      (360),
		.PKT_RESPONSE_STATUS_H     (359),
		.PKT_RESPONSE_STATUS_L     (358),
		.PKT_BURST_SIZE_H          (341),
		.PKT_BURST_SIZE_L          (339),
		.PKT_TRANS_LOCK            (323),
		.PKT_BEGIN_BURST           (346),
		.PKT_PROTECTION_H          (353),
		.PKT_PROTECTION_L          (351),
		.PKT_BURSTWRAP_H           (338),
		.PKT_BURSTWRAP_L           (338),
		.PKT_BYTE_CNT_H            (337),
		.PKT_BYTE_CNT_L            (325),
		.PKT_ADDR_H                (318),
		.PKT_ADDR_L                (288),
		.PKT_TRANS_COMPRESSED_READ (319),
		.PKT_TRANS_POSTED          (320),
		.PKT_TRANS_WRITE           (321),
		.PKT_TRANS_READ            (322),
		.PKT_DATA_H                (255),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (287),
		.PKT_BYTEEN_L              (256),
		.PKT_SRC_ID_H              (348),
		.PKT_SRC_ID_L              (348),
		.PKT_DEST_ID_H             (349),
		.PKT_DEST_ID_L             (349),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (1),
		.ST_DATA_W                 (363),
		.AVS_BURSTCOUNT_W          (13),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) m1_ddr2_memory_avl_agent (
		.clk                     (m1_ddr2_memory_afi_clk_clk),                                      //             clk.clk
		.reset                   (m1_ddr2_memory_avl_translator_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (m1_ddr2_memory_avl_agent_m0_address),                             //              m0.address
		.m0_burstcount           (m1_ddr2_memory_avl_agent_m0_burstcount),                          //                .burstcount
		.m0_byteenable           (m1_ddr2_memory_avl_agent_m0_byteenable),                          //                .byteenable
		.m0_debugaccess          (m1_ddr2_memory_avl_agent_m0_debugaccess),                         //                .debugaccess
		.m0_lock                 (m1_ddr2_memory_avl_agent_m0_lock),                                //                .lock
		.m0_readdata             (m1_ddr2_memory_avl_agent_m0_readdata),                            //                .readdata
		.m0_readdatavalid        (m1_ddr2_memory_avl_agent_m0_readdatavalid),                       //                .readdatavalid
		.m0_read                 (m1_ddr2_memory_avl_agent_m0_read),                                //                .read
		.m0_waitrequest          (m1_ddr2_memory_avl_agent_m0_waitrequest),                         //                .waitrequest
		.m0_writedata            (m1_ddr2_memory_avl_agent_m0_writedata),                           //                .writedata
		.m0_write                (m1_ddr2_memory_avl_agent_m0_write),                               //                .write
		.rp_endofpacket          (m1_ddr2_memory_avl_agent_rp_endofpacket),                         //              rp.endofpacket
		.rp_ready                (m1_ddr2_memory_avl_agent_rp_ready),                               //                .ready
		.rp_valid                (m1_ddr2_memory_avl_agent_rp_valid),                               //                .valid
		.rp_data                 (m1_ddr2_memory_avl_agent_rp_data),                                //                .data
		.rp_startofpacket        (m1_ddr2_memory_avl_agent_rp_startofpacket),                       //                .startofpacket
		.cp_ready                (m1_ddr2_memory_avl_cmd_width_adapter_src_ready),                  //              cp.ready
		.cp_valid                (m1_ddr2_memory_avl_cmd_width_adapter_src_valid),                  //                .valid
		.cp_data                 (m1_ddr2_memory_avl_cmd_width_adapter_src_data),                   //                .data
		.cp_startofpacket        (m1_ddr2_memory_avl_cmd_width_adapter_src_startofpacket),          //                .startofpacket
		.cp_endofpacket          (m1_ddr2_memory_avl_cmd_width_adapter_src_endofpacket),            //                .endofpacket
		.cp_channel              (m1_ddr2_memory_avl_cmd_width_adapter_src_channel),                //                .channel
		.rf_sink_ready           (m1_ddr2_memory_avl_agent_rsp_fifo_out_ready),                     //         rf_sink.ready
		.rf_sink_valid           (m1_ddr2_memory_avl_agent_rsp_fifo_out_valid),                     //                .valid
		.rf_sink_startofpacket   (m1_ddr2_memory_avl_agent_rsp_fifo_out_startofpacket),             //                .startofpacket
		.rf_sink_endofpacket     (m1_ddr2_memory_avl_agent_rsp_fifo_out_endofpacket),               //                .endofpacket
		.rf_sink_data            (m1_ddr2_memory_avl_agent_rsp_fifo_out_data),                      //                .data
		.rf_source_ready         (m1_ddr2_memory_avl_agent_rf_source_ready),                        //       rf_source.ready
		.rf_source_valid         (m1_ddr2_memory_avl_agent_rf_source_valid),                        //                .valid
		.rf_source_startofpacket (m1_ddr2_memory_avl_agent_rf_source_startofpacket),                //                .startofpacket
		.rf_source_endofpacket   (m1_ddr2_memory_avl_agent_rf_source_endofpacket),                  //                .endofpacket
		.rf_source_data          (m1_ddr2_memory_avl_agent_rf_source_data),                         //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                                   //                .error
		.rdata_fifo_src_ready    (m1_ddr2_memory_avl_agent_rdata_fifo_src_ready),                   //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (m1_ddr2_memory_avl_agent_rdata_fifo_src_valid),                   //                .valid
		.rdata_fifo_src_data     (m1_ddr2_memory_avl_agent_rdata_fifo_src_data),                    //                .data
		.m0_response             (2'b00),                                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (364),
		.FIFO_DEPTH          (33),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) m1_ddr2_memory_avl_agent_rsp_fifo (
		.clk               (m1_ddr2_memory_afi_clk_clk),                                      //       clk.clk
		.reset             (m1_ddr2_memory_avl_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (m1_ddr2_memory_avl_agent_rf_source_data),                         //        in.data
		.in_valid          (m1_ddr2_memory_avl_agent_rf_source_valid),                        //          .valid
		.in_ready          (m1_ddr2_memory_avl_agent_rf_source_ready),                        //          .ready
		.in_startofpacket  (m1_ddr2_memory_avl_agent_rf_source_startofpacket),                //          .startofpacket
		.in_endofpacket    (m1_ddr2_memory_avl_agent_rf_source_endofpacket),                  //          .endofpacket
		.out_data          (m1_ddr2_memory_avl_agent_rsp_fifo_out_data),                      //       out.data
		.out_valid         (m1_ddr2_memory_avl_agent_rsp_fifo_out_valid),                     //          .valid
		.out_ready         (m1_ddr2_memory_avl_agent_rsp_fifo_out_ready),                     //          .ready
		.out_startofpacket (m1_ddr2_memory_avl_agent_rsp_fifo_out_startofpacket),             //          .startofpacket
		.out_endofpacket   (m1_ddr2_memory_avl_agent_rsp_fifo_out_endofpacket),               //          .endofpacket
		.csr_address       (2'b00),                                                           // (terminated)
		.csr_read          (1'b0),                                                            // (terminated)
		.csr_write         (1'b0),                                                            // (terminated)
		.csr_readdata      (),                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                            // (terminated)
		.almost_full_data  (),                                                                // (terminated)
		.almost_empty_data (),                                                                // (terminated)
		.in_empty          (1'b0),                                                            // (terminated)
		.out_empty         (),                                                                // (terminated)
		.in_error          (1'b0),                                                            // (terminated)
		.out_error         (),                                                                // (terminated)
		.in_channel        (1'b0),                                                            // (terminated)
		.out_channel       ()                                                                 // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (258),
		.FIFO_DEPTH          (256),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) m1_ddr2_memory_avl_agent_rdata_fifo (
		.clk               (m1_ddr2_memory_afi_clk_clk),                                      //       clk.clk
		.reset             (m1_ddr2_memory_avl_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (m1_ddr2_memory_avl_agent_rdata_fifo_src_data),                    //        in.data
		.in_valid          (m1_ddr2_memory_avl_agent_rdata_fifo_src_valid),                   //          .valid
		.in_ready          (m1_ddr2_memory_avl_agent_rdata_fifo_src_ready),                   //          .ready
		.out_data          (m1_ddr2_memory_avl_agent_rdata_fifo_out_data),                    //       out.data
		.out_valid         (m1_ddr2_memory_avl_agent_rdata_fifo_out_valid),                   //          .valid
		.out_ready         (m1_ddr2_memory_avl_agent_rdata_fifo_out_ready),                   //          .ready
		.csr_address       (2'b00),                                                           // (terminated)
		.csr_read          (1'b0),                                                            // (terminated)
		.csr_write         (1'b0),                                                            // (terminated)
		.csr_readdata      (),                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                            // (terminated)
		.almost_full_data  (),                                                                // (terminated)
		.almost_empty_data (),                                                                // (terminated)
		.in_startofpacket  (1'b0),                                                            // (terminated)
		.in_endofpacket    (1'b0),                                                            // (terminated)
		.out_startofpacket (),                                                                // (terminated)
		.out_endofpacket   (),                                                                // (terminated)
		.in_empty          (1'b0),                                                            // (terminated)
		.out_empty         (),                                                                // (terminated)
		.in_error          (1'b0),                                                            // (terminated)
		.out_error         (),                                                                // (terminated)
		.in_channel        (1'b0),                                                            // (terminated)
		.out_channel       ()                                                                 // (terminated)
	);

	MebX_Qsys_Project_mm_interconnect_3_router router (
		.sink_ready         (m1_clock_bridge_m0_agent_cp_ready),                    //      sink.ready
		.sink_valid         (m1_clock_bridge_m0_agent_cp_valid),                    //          .valid
		.sink_data          (m1_clock_bridge_m0_agent_cp_data),                     //          .data
		.sink_startofpacket (m1_clock_bridge_m0_agent_cp_startofpacket),            //          .startofpacket
		.sink_endofpacket   (m1_clock_bridge_m0_agent_cp_endofpacket),              //          .endofpacket
		.clk                (m1_ddr2_memory_afi_half_clk_clk),                      //       clk.clk
		.reset              (m1_clock_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_src_ready),                                     //       src.ready
		.src_valid          (router_src_valid),                                     //          .valid
		.src_data           (router_src_data),                                      //          .data
		.src_channel        (router_src_channel),                                   //          .channel
		.src_startofpacket  (router_src_startofpacket),                             //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_3_router_001 router_001 (
		.sink_ready         (m1_ddr2_memory_avl_agent_rp_ready),                               //      sink.ready
		.sink_valid         (m1_ddr2_memory_avl_agent_rp_valid),                               //          .valid
		.sink_data          (m1_ddr2_memory_avl_agent_rp_data),                                //          .data
		.sink_startofpacket (m1_ddr2_memory_avl_agent_rp_startofpacket),                       //          .startofpacket
		.sink_endofpacket   (m1_ddr2_memory_avl_agent_rp_endofpacket),                         //          .endofpacket
		.clk                (m1_ddr2_memory_afi_clk_clk),                                      //       clk.clk
		.reset              (m1_ddr2_memory_avl_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_001_src_ready),                                            //       src.ready
		.src_valid          (router_001_src_valid),                                            //          .valid
		.src_data           (router_001_src_data),                                             //          .data
		.src_channel        (router_001_src_channel),                                          //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                                       //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_3_cmd_demux cmd_demux (
		.clk                (m1_ddr2_memory_afi_half_clk_clk),                      //       clk.clk
		.reset              (m1_clock_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_src_ready),                                     //      sink.ready
		.sink_channel       (router_src_channel),                                   //          .channel
		.sink_data          (router_src_data),                                      //          .data
		.sink_startofpacket (router_src_startofpacket),                             //          .startofpacket
		.sink_endofpacket   (router_src_endofpacket),                               //          .endofpacket
		.sink_valid         (router_src_valid),                                     //          .valid
		.src0_ready         (cmd_demux_src0_ready),                                 //      src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                 //          .valid
		.src0_data          (cmd_demux_src0_data),                                  //          .data
		.src0_channel       (cmd_demux_src0_channel),                               //          .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                         //          .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket)                            //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_3_cmd_mux cmd_mux (
		.clk                 (m1_ddr2_memory_afi_clk_clk),                                      //       clk.clk
		.reset               (m1_ddr2_memory_avl_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                               //       src.ready
		.src_valid           (cmd_mux_src_valid),                                               //          .valid
		.src_data            (cmd_mux_src_data),                                                //          .data
		.src_channel         (cmd_mux_src_channel),                                             //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                                       //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                                         //          .endofpacket
		.sink0_ready         (crosser_out_ready),                                               //     sink0.ready
		.sink0_valid         (crosser_out_valid),                                               //          .valid
		.sink0_channel       (crosser_out_channel),                                             //          .channel
		.sink0_data          (crosser_out_data),                                                //          .data
		.sink0_startofpacket (crosser_out_startofpacket),                                       //          .startofpacket
		.sink0_endofpacket   (crosser_out_endofpacket)                                          //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_3_rsp_demux rsp_demux (
		.clk                (m1_ddr2_memory_afi_clk_clk),                                      //       clk.clk
		.reset              (m1_ddr2_memory_avl_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (m1_ddr2_memory_avl_rsp_width_adapter_src_ready),                  //      sink.ready
		.sink_channel       (m1_ddr2_memory_avl_rsp_width_adapter_src_channel),                //          .channel
		.sink_data          (m1_ddr2_memory_avl_rsp_width_adapter_src_data),                   //          .data
		.sink_startofpacket (m1_ddr2_memory_avl_rsp_width_adapter_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (m1_ddr2_memory_avl_rsp_width_adapter_src_endofpacket),            //          .endofpacket
		.sink_valid         (m1_ddr2_memory_avl_rsp_width_adapter_src_valid),                  //          .valid
		.src0_ready         (rsp_demux_src0_ready),                                            //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                            //          .valid
		.src0_data          (rsp_demux_src0_data),                                             //          .data
		.src0_channel       (rsp_demux_src0_channel),                                          //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                                       //          .endofpacket
	);

	MebX_Qsys_Project_mm_interconnect_3_rsp_mux rsp_mux (
		.clk                 (m1_ddr2_memory_afi_half_clk_clk),                      //       clk.clk
		.reset               (m1_clock_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                    //       src.ready
		.src_valid           (rsp_mux_src_valid),                                    //          .valid
		.src_data            (rsp_mux_src_data),                                     //          .data
		.src_channel         (rsp_mux_src_channel),                                  //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                            //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                              //          .endofpacket
		.sink0_ready         (crosser_001_out_ready),                                //     sink0.ready
		.sink0_valid         (crosser_001_out_valid),                                //          .valid
		.sink0_channel       (crosser_001_out_channel),                              //          .channel
		.sink0_data          (crosser_001_out_data),                                 //          .data
		.sink0_startofpacket (crosser_001_out_startofpacket),                        //          .startofpacket
		.sink0_endofpacket   (crosser_001_out_endofpacket)                           //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (102),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (121),
		.IN_PKT_BYTE_CNT_L             (109),
		.IN_PKT_TRANS_COMPRESSED_READ  (103),
		.IN_PKT_TRANS_WRITE            (105),
		.IN_PKT_BURSTWRAP_H            (122),
		.IN_PKT_BURSTWRAP_L            (122),
		.IN_PKT_BURST_SIZE_H           (125),
		.IN_PKT_BURST_SIZE_L           (123),
		.IN_PKT_RESPONSE_STATUS_H      (143),
		.IN_PKT_RESPONSE_STATUS_L      (142),
		.IN_PKT_TRANS_EXCLUSIVE        (108),
		.IN_PKT_BURST_TYPE_H           (127),
		.IN_PKT_BURST_TYPE_L           (126),
		.IN_PKT_ORI_BURST_SIZE_L       (144),
		.IN_PKT_ORI_BURST_SIZE_H       (146),
		.IN_ST_DATA_W                  (147),
		.OUT_PKT_ADDR_H                (318),
		.OUT_PKT_ADDR_L                (288),
		.OUT_PKT_DATA_H                (255),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (287),
		.OUT_PKT_BYTEEN_L              (256),
		.OUT_PKT_BYTE_CNT_H            (337),
		.OUT_PKT_BYTE_CNT_L            (325),
		.OUT_PKT_TRANS_COMPRESSED_READ (319),
		.OUT_PKT_BURST_SIZE_H          (341),
		.OUT_PKT_BURST_SIZE_L          (339),
		.OUT_PKT_RESPONSE_STATUS_H     (359),
		.OUT_PKT_RESPONSE_STATUS_L     (358),
		.OUT_PKT_TRANS_EXCLUSIVE       (324),
		.OUT_PKT_BURST_TYPE_H          (343),
		.OUT_PKT_BURST_TYPE_L          (342),
		.OUT_PKT_ORI_BURST_SIZE_L      (360),
		.OUT_PKT_ORI_BURST_SIZE_H      (362),
		.OUT_ST_DATA_W                 (363),
		.ST_CHANNEL_W                  (1),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) m1_ddr2_memory_avl_cmd_width_adapter (
		.clk                  (m1_ddr2_memory_afi_clk_clk),                                      //       clk.clk
		.reset                (m1_ddr2_memory_avl_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (cmd_mux_src_valid),                                               //      sink.valid
		.in_channel           (cmd_mux_src_channel),                                             //          .channel
		.in_startofpacket     (cmd_mux_src_startofpacket),                                       //          .startofpacket
		.in_endofpacket       (cmd_mux_src_endofpacket),                                         //          .endofpacket
		.in_ready             (cmd_mux_src_ready),                                               //          .ready
		.in_data              (cmd_mux_src_data),                                                //          .data
		.out_endofpacket      (m1_ddr2_memory_avl_cmd_width_adapter_src_endofpacket),            //       src.endofpacket
		.out_data             (m1_ddr2_memory_avl_cmd_width_adapter_src_data),                   //          .data
		.out_channel          (m1_ddr2_memory_avl_cmd_width_adapter_src_channel),                //          .channel
		.out_valid            (m1_ddr2_memory_avl_cmd_width_adapter_src_valid),                  //          .valid
		.out_ready            (m1_ddr2_memory_avl_cmd_width_adapter_src_ready),                  //          .ready
		.out_startofpacket    (m1_ddr2_memory_avl_cmd_width_adapter_src_startofpacket),          //          .startofpacket
		.in_command_size_data (3'b000)                                                           // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (318),
		.IN_PKT_ADDR_L                 (288),
		.IN_PKT_DATA_H                 (255),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (287),
		.IN_PKT_BYTEEN_L               (256),
		.IN_PKT_BYTE_CNT_H             (337),
		.IN_PKT_BYTE_CNT_L             (325),
		.IN_PKT_TRANS_COMPRESSED_READ  (319),
		.IN_PKT_TRANS_WRITE            (321),
		.IN_PKT_BURSTWRAP_H            (338),
		.IN_PKT_BURSTWRAP_L            (338),
		.IN_PKT_BURST_SIZE_H           (341),
		.IN_PKT_BURST_SIZE_L           (339),
		.IN_PKT_RESPONSE_STATUS_H      (359),
		.IN_PKT_RESPONSE_STATUS_L      (358),
		.IN_PKT_TRANS_EXCLUSIVE        (324),
		.IN_PKT_BURST_TYPE_H           (343),
		.IN_PKT_BURST_TYPE_L           (342),
		.IN_PKT_ORI_BURST_SIZE_L       (360),
		.IN_PKT_ORI_BURST_SIZE_H       (362),
		.IN_ST_DATA_W                  (363),
		.OUT_PKT_ADDR_H                (102),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (121),
		.OUT_PKT_BYTE_CNT_L            (109),
		.OUT_PKT_TRANS_COMPRESSED_READ (103),
		.OUT_PKT_BURST_SIZE_H          (125),
		.OUT_PKT_BURST_SIZE_L          (123),
		.OUT_PKT_RESPONSE_STATUS_H     (143),
		.OUT_PKT_RESPONSE_STATUS_L     (142),
		.OUT_PKT_TRANS_EXCLUSIVE       (108),
		.OUT_PKT_BURST_TYPE_H          (127),
		.OUT_PKT_BURST_TYPE_L          (126),
		.OUT_PKT_ORI_BURST_SIZE_L      (144),
		.OUT_PKT_ORI_BURST_SIZE_H      (146),
		.OUT_ST_DATA_W                 (147),
		.ST_CHANNEL_W                  (1),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) m1_ddr2_memory_avl_rsp_width_adapter (
		.clk                  (m1_ddr2_memory_afi_clk_clk),                                      //       clk.clk
		.reset                (m1_ddr2_memory_avl_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (router_001_src_valid),                                            //      sink.valid
		.in_channel           (router_001_src_channel),                                          //          .channel
		.in_startofpacket     (router_001_src_startofpacket),                                    //          .startofpacket
		.in_endofpacket       (router_001_src_endofpacket),                                      //          .endofpacket
		.in_ready             (router_001_src_ready),                                            //          .ready
		.in_data              (router_001_src_data),                                             //          .data
		.out_endofpacket      (m1_ddr2_memory_avl_rsp_width_adapter_src_endofpacket),            //       src.endofpacket
		.out_data             (m1_ddr2_memory_avl_rsp_width_adapter_src_data),                   //          .data
		.out_channel          (m1_ddr2_memory_avl_rsp_width_adapter_src_channel),                //          .channel
		.out_valid            (m1_ddr2_memory_avl_rsp_width_adapter_src_valid),                  //          .valid
		.out_ready            (m1_ddr2_memory_avl_rsp_width_adapter_src_ready),                  //          .ready
		.out_startofpacket    (m1_ddr2_memory_avl_rsp_width_adapter_src_startofpacket),          //          .startofpacket
		.in_command_size_data (3'b000)                                                           // (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (147),
		.BITS_PER_SYMBOL     (147),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (1),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser (
		.in_clk            (m1_ddr2_memory_afi_half_clk_clk),                                 //        in_clk.clk
		.in_reset          (m1_clock_bridge_m0_reset_reset_bridge_in_reset_reset),            //  in_clk_reset.reset
		.out_clk           (m1_ddr2_memory_afi_clk_clk),                                      //       out_clk.clk
		.out_reset         (m1_ddr2_memory_avl_translator_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_src0_ready),                                            //            in.ready
		.in_valid          (cmd_demux_src0_valid),                                            //              .valid
		.in_startofpacket  (cmd_demux_src0_startofpacket),                                    //              .startofpacket
		.in_endofpacket    (cmd_demux_src0_endofpacket),                                      //              .endofpacket
		.in_channel        (cmd_demux_src0_channel),                                          //              .channel
		.in_data           (cmd_demux_src0_data),                                             //              .data
		.out_ready         (crosser_out_ready),                                               //           out.ready
		.out_valid         (crosser_out_valid),                                               //              .valid
		.out_startofpacket (crosser_out_startofpacket),                                       //              .startofpacket
		.out_endofpacket   (crosser_out_endofpacket),                                         //              .endofpacket
		.out_channel       (crosser_out_channel),                                             //              .channel
		.out_data          (crosser_out_data),                                                //              .data
		.in_empty          (1'b0),                                                            //   (terminated)
		.in_error          (1'b0),                                                            //   (terminated)
		.out_empty         (),                                                                //   (terminated)
		.out_error         ()                                                                 //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (147),
		.BITS_PER_SYMBOL     (147),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (1),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_001 (
		.in_clk            (m1_ddr2_memory_afi_clk_clk),                                      //        in_clk.clk
		.in_reset          (m1_ddr2_memory_avl_translator_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (m1_ddr2_memory_afi_half_clk_clk),                                 //       out_clk.clk
		.out_reset         (m1_clock_bridge_m0_reset_reset_bridge_in_reset_reset),            // out_clk_reset.reset
		.in_ready          (rsp_demux_src0_ready),                                            //            in.ready
		.in_valid          (rsp_demux_src0_valid),                                            //              .valid
		.in_startofpacket  (rsp_demux_src0_startofpacket),                                    //              .startofpacket
		.in_endofpacket    (rsp_demux_src0_endofpacket),                                      //              .endofpacket
		.in_channel        (rsp_demux_src0_channel),                                          //              .channel
		.in_data           (rsp_demux_src0_data),                                             //              .data
		.out_ready         (crosser_001_out_ready),                                           //           out.ready
		.out_valid         (crosser_001_out_valid),                                           //              .valid
		.out_startofpacket (crosser_001_out_startofpacket),                                   //              .startofpacket
		.out_endofpacket   (crosser_001_out_endofpacket),                                     //              .endofpacket
		.out_channel       (crosser_001_out_channel),                                         //              .channel
		.out_data          (crosser_001_out_data),                                            //              .data
		.in_empty          (1'b0),                                                            //   (terminated)
		.in_error          (1'b0),                                                            //   (terminated)
		.out_empty         (),                                                                //   (terminated)
		.out_error         ()                                                                 //   (terminated)
	);

	MebX_Qsys_Project_mm_interconnect_0_avalon_st_adapter_017 #(
		.inBitsPerSymbol (258),
		.inUsePackets    (0),
		.inDataWidth     (258),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (258),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (m1_ddr2_memory_afi_clk_clk),                                      // in_clk_0.clk
		.in_rst_0_reset (m1_ddr2_memory_avl_translator_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (m1_ddr2_memory_avl_agent_rdata_fifo_out_data),                    //     in_0.data
		.in_0_valid     (m1_ddr2_memory_avl_agent_rdata_fifo_out_valid),                   //         .valid
		.in_0_ready     (m1_ddr2_memory_avl_agent_rdata_fifo_out_ready),                   //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                                   //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                                   //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                                    //         .error
	);

endmodule
