
SerialTest.elf:     file format elf32-littlenios2
SerialTest.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x80200244

Program Header:
    LOAD off    0x00001020 vaddr 0x80200020 paddr 0x80200020 align 2**12
         filesz 0x000142f4 memsz 0x00014454 flags rwx
    LOAD off    0x00016000 vaddr 0x86020000 paddr 0x86020000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000000  86020000  86020000  00016000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  80200020  80200020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00011e80  80200244  80200244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000594  802120c4  802120c4  000130c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001cb4  80212660  80212660  00013660  2**4
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000160  80214314  80214314  00015314  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  80214474  80214474  00016000  2**0
                  CONTENTS
  7 .ext_flash    00000000  86020020  86020020  00016000  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00016000  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000f98  00000000  00000000  00016028  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0002711d  00000000  00000000  00016fc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00009cd2  00000000  00000000  0003e0dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000c4d9  00000000  00000000  00047daf  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002898  00000000  00000000  00054288  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000463d  00000000  00000000  00056b20  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00017a8c  00000000  00000000  0005b15d  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  00072bec  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000018e8  00000000  00000000  00072c30  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  000780c5  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  000780c8  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000780d4  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  000780d5  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  000780d6  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  000780da  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  000780de  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  000780e2  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  000780ed  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  000780f8  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000011  00000000  00000000  00078103  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000057  00000000  00000000  00078114  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     002608b4  00000000  00000000  0007816b  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
86020000 l    d  .entry	00000000 .entry
80200020 l    d  .exceptions	00000000 .exceptions
80200244 l    d  .text	00000000 .text
802120c4 l    d  .rodata	00000000 .rodata
80212660 l    d  .rwdata	00000000 .rwdata
80214314 l    d  .bss	00000000 .bss
80214474 l    d  .onchip_memory	00000000 .onchip_memory
86020020 l    d  .ext_flash	00000000 .ext_flash
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../SerialTest_bsp//obj/HAL/src/crt0.o
80200278 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
80212132 l     O .rodata	00000010 zeroes.4404
8020278c l     F .text	000000bc __sbprintf
80212142 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
8020299c l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
802044cc l     F .text	00000008 __fp_unlock
802044e0 l     F .text	0000019c __sinit.part.1
8020467c l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
80212660 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
80212aa4 l     O .rwdata	00000020 lc_ctype_charset
80212a84 l     O .rwdata	00000020 lc_message_charset
80212ac4 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
80212174 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
80207a78 l     F .text	000000fc __sprint_r.part.0
802122a8 l     O .rodata	00000010 blanks.4348
80212298 l     O .rodata	00000010 zeroes.4349
80209004 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
8020ccc0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
8020cdcc l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
8020cdf8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
8020cee4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
8020cfc4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
8020d198 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
802142fc l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
8020d414 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
8020d548 l     F .text	00000034 alt_dev_reg
802130b0 l     O .rwdata	00001060 jtag_uart_0
80214110 l     O .rwdata	000000c4 rs232_uart
802141e0 l     O .rwdata	00000060 dma_DDR_M1
80214240 l     O .rwdata	00000060 dma_DDR_M2
802142a0 l     O .rwdata	0000002c Altera_UP_SD_Card_Avalon_Interface_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
8020d8c0 l     F .text	0000020c altera_avalon_jtag_uart_irq
8020dacc l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
8020e104 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
8020e3b4 l     F .text	0000009c altera_avalon_uart_irq
8020e450 l     F .text	000000e4 altera_avalon_uart_rxirq
8020e534 l     F .text	00000148 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
8020e6d0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
8020e8e8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_msgdma.c
8020ead0 l     F .text	0000003c alt_get_errno
8020eb0c l     F .text	00000094 alt_msgdma_write_standard_descriptor
8020eba0 l     F .text	0000012c alt_msgdma_write_extended_descriptor
8020eccc l     F .text	00000184 alt_msgdma_irq
8020ee50 l     F .text	0000008c alt_msgdma_construct_standard_descriptor
8020eedc l     F .text	00000154 alt_msgdma_construct_extended_descriptor
8020f030 l     F .text	000002d0 alt_msgdma_descriptor_async_transfer
8020f300 l     F .text	00000378 alt_msgdma_descriptor_sync_transfer
8020f948 l     F .text	000000a4 alt_msgdma_construct_prefetcher_standard_descriptor
8020f9ec l     F .text	00000194 alt_msgdma_construct_prefetcher_extended_descriptor
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
80210cec l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
802111bc l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
802112fc l     F .text	0000003c alt_get_errno
80211338 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
80214348 g     O .bss	00000004 alt_instruction_exception_handler
80210980 g     F .text	0000003c alt_msgdma_standard_descriptor_async_transfer
802070bc g     F .text	00000074 _mprec_log10
802071a8 g     F .text	0000008c __any_on
802095a0 g     F .text	00000054 _isatty_r
80212180 g     O .rodata	00000028 __mprec_tinytens
8020d0d4 g     F .text	0000007c alt_main
8020040c g     F .text	000000c0 _puts_r
80214374 g     O .bss	00000100 alt_irq
802095f4 g     F .text	00000060 _lseek_r
8020b7ec g     F .text	00000088 .hidden __eqdf2
8020f728 g     F .text	00000058 alt_msgdma_construct_standard_mm_to_mm_descriptor
80214474 g       *ABS*	00000000 __alt_heap_start
802003d0 g     F .text	0000003c printf
8020980c g     F .text	0000009c _wcrtomb_r
80207938 g     F .text	0000005c __sseek
8020481c g     F .text	00000010 __sinit
802096b4 g     F .text	00000140 __swbuf_r
802052e4 g     F .text	0000007c _setlocale_r
80204684 g     F .text	00000068 __sfmoreglue
8020d174 g     F .text	00000024 __malloc_unlock
80205fb4 g     F .text	0000015c memmove
80204804 g     F .text	00000018 _cleanup
80206238 g     F .text	000000a8 _Balloc
8020f678 g     F .text	00000058 alt_msgdma_construct_standard_st_to_mm_descriptor
8020b874 g     F .text	000000dc .hidden __gtdf2
8021195c g     F .text	00000024 altera_nios2_gen2_irq_init
86020000 g     F .entry	00000000 __reset
80209544 g     F .text	0000005c _fstat_r
8021432c g     O .bss	00000004 errno
802078b4 g     F .text	00000008 __seofread
80214334 g     O .bss	00000004 alt_argv
8021c2cc g       *ABS*	00000000 _gp
8020d3e4 g     F .text	00000030 usleep
8021020c g     F .text	00000144 alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits
80212f2c g     O .rwdata	00000180 alt_fd_list
80210e8c g     F .text	00000090 alt_find_dev
80205e6c g     F .text	00000148 memcpy
802044d4 g     F .text	0000000c _cleanup_r
8020cad8 g     F .text	000000dc .hidden __floatsidf
80211280 g     F .text	0000007c alt_io_redirect
8020b950 g     F .text	000000f4 .hidden __ltdf2
802120c4 g       *ABS*	00000000 __DTOR_END__
802106bc g     F .text	000000ac alt_msgdma_start_prefetcher_with_extd_desc_list
802109bc g     F .text	0000003c alt_msgdma_extended_descriptor_async_transfer
8021092c g     F .text	00000054 alt_msgdma_register_callback
802004cc g     F .text	00000014 puts
80211b2c g     F .text	0000009c alt_exception_cause_generated_bad_addr
80207798 g     F .text	00000074 __fpclassifyd
80207018 g     F .text	000000a4 __ratio
80208fe8 g     F .text	0000001c __vfiprintf_internal
8020dcc4 g     F .text	0000021c altera_avalon_jtag_uart_read
8020fe78 g     F .text	000000f0 alt_msgdma_prefetcher_add_standard_desc_to_list
802003a0 g     F .text	00000030 _printf_r
8020a59c g     F .text	00000064 .hidden __udivsi3
8020cf20 g     F .text	000000a4 isatty
802121d0 g     O .rodata	000000c8 __mprec_tens
80205360 g     F .text	0000000c __locale_charset
80214328 g     O .bss	00000004 __malloc_top_pad
802142d4 g     O .rwdata	00000004 __mb_cur_max
80205390 g     F .text	0000000c _localeconv_r
80206644 g     F .text	0000003c __i2b
80204ca0 g     F .text	000004bc __sfvwrite_r
8020780c g     F .text	00000054 _sbrk_r
80209654 g     F .text	00000060 _read_r
80210cc4 g     F .text	00000028 alt_dcache_flush
802142f4 g     O .rwdata	00000004 alt_max_fd
80209238 g     F .text	000000f0 _fclose_r
8020449c g     F .text	00000030 fflush
80214324 g     O .bss	00000004 __malloc_max_sbrked_mem
8020a658 g     F .text	000008ac .hidden __adddf3
80206dc0 g     F .text	0000010c __b2d
8020fbd8 g     F .text	00000058 alt_msgdma_construct_prefetcher_standard_st_to_mm_descriptor
80209f6c g     F .text	00000538 .hidden __umoddi3
8020d000 g     F .text	000000d4 lseek
802142cc g     O .rwdata	00000004 _global_impure_ptr
80207234 g     F .text	00000564 _realloc_r
80214474 g       *ABS*	00000000 __bss_end
802110cc g     F .text	000000f0 alt_iic_isr_register
80211854 g     F .text	00000108 alt_tick
802107c0 g     F .text	0000016c alt_msgdma_init
802099f4 g     F .text	00000578 .hidden __udivdi3
802094a0 g     F .text	00000024 _fputwc_r
802121a8 g     O .rodata	00000028 __mprec_bigtens
80206428 g     F .text	00000104 __s2b
8020cbb4 g     F .text	000000a8 .hidden __floatunsidf
80206b00 g     F .text	00000060 __mcmp
8020e308 g     F .text	000000ac altera_avalon_uart_init
80210a34 g     F .text	0000003c alt_msgdma_extended_descriptor_sync_transfer
8020483c g     F .text	00000018 __fp_lock_all
80211080 g     F .text	0000004c alt_ic_irq_enabled
802117b8 g     F .text	0000009c alt_alarm_stop
8021433c g     O .bss	00000004 alt_irq_active
802000fc g     F .exceptions	000000d4 alt_irq_handler
80212f04 g     O .rwdata	00000028 alt_dev_null
8020f810 g     F .text	00000090 alt_msgdma_construct_extended_mm_to_st_descriptor
80210610 g     F .text	000000ac alt_msgdma_start_prefetcher_with_std_desc_list
8020652c g     F .text	00000068 __hi0bits
8020ca58 g     F .text	00000080 .hidden __fixdfsi
80200000 g       *ABS*	00000000 __alt_mem_onchip_memory
802142ec g     O .rwdata	00000008 alt_dev_list
8020d450 g     F .text	000000f8 write
80211c90 g     F .text	000000a0 _putc_r
8020ce34 g     F .text	000000b0 fstat
8020b950 g     F .text	000000f4 .hidden __ledf2
80206878 g     F .text	00000140 __pow5mult
80207b8c g     F .text	0000145c ___vfiprintf_internal_r
8021431c g     O .bss	00000004 __nlocale_changed
8020a600 g     F .text	00000058 .hidden __umodsi3
8020fc30 g     F .text	00000058 alt_msgdma_construct_prefetcher_standard_mm_to_st_descriptor
80214474 g       *ABS*	00000000 end
8020e924 g     F .text	000001ac altera_avalon_uart_write
8020d800 g     F .text	000000c0 altera_avalon_jtag_uart_init
802001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
802120c4 g       *ABS*	00000000 __CTOR_LIST__
802e0000 g       *ABS*	00000000 __alt_stack_pointer
8020e17c g     F .text	0000007c alt_avalon_timer_sc_init
8020e258 g     F .text	00000060 altera_avalon_uart_write_fd
8020cc5c g     F .text	00000064 .hidden __clzsi2
8020e2b8 g     F .text	00000050 altera_avalon_uart_close_fd
8020dee0 g     F .text	00000224 altera_avalon_jtag_uart_write
8020482c g     F .text	00000004 __sfp_lock_acquire
80205d88 g     F .text	000000e4 memchr
80200578 g     F .text	000021f8 ___vfprintf_internal_r
80204990 g     F .text	00000310 _free_r
80211550 g     F .text	0000022c alt_printf
8020536c g     F .text	00000010 __locale_mb_cur_max
80211f10 g     F .text	00000180 __call_exitprocs
80214318 g     O .bss	00000004 __mlocale_changed
802142d8 g     O .rwdata	00000004 __malloc_sbrk_base
80200244 g     F .text	00000038 _start
80214340 g     O .bss	00000004 _alt_tick_rate
802069b8 g     F .text	00000148 __lshift
80214344 g     O .bss	00000004 _alt_nticks
8020f6d0 g     F .text	00000058 alt_msgdma_construct_standard_mm_to_st_descriptor
8020d1d4 g     F .text	000000fc read
8020d5b4 g     F .text	000000e8 alt_sys_init
80211df8 g     F .text	00000118 __register_exitproc
80206680 g     F .text	000001f8 __multiply
8020db6c g     F .text	00000068 altera_avalon_jtag_uart_close
8021434c g     O .bss	00000028 __malloc_current_mallinfo
80206ecc g     F .text	0000014c __d2b
8020d69c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
80211a88 g     F .text	000000a4 alt_get_fd
80210b9c g     F .text	00000128 alt_busy_sleep
80209120 g     F .text	00000054 _close_r
8020fb80 g     F .text	00000058 alt_msgdma_construct_prefetcher_standard_mm_to_mm_descriptor
80211c14 g     F .text	0000007c memcmp
8020d75c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
80214474 g       *ABS*	00000000 __alt_stack_base
8020d7ac g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
8020fc88 g     F .text	000000a0 alt_msgdma_construct_prefetcher_extended_st_to_mm_descriptor
80202848 g     F .text	00000154 __swsetup_r
8020af04 g     F .text	000008e8 .hidden __divdf3
802046ec g     F .text	00000118 __sfp
80207130 g     F .text	00000078 __copybits
80212afc g     O .rwdata	00000408 __malloc_av_
80204838 g     F .text	00000004 __sinit_lock_release
8020ba44 g     F .text	00000718 .hidden __muldf3
80207860 g     F .text	00000054 __sread
80211980 g     F .text	00000108 alt_find_file
80210d28 g     F .text	000000a4 alt_dev_llist_insert
8020d150 g     F .text	00000024 __malloc_lock
8020d334 g     F .text	000000b0 sbrk
80204440 g     F .text	0000005c _fflush_r
80209174 g     F .text	000000c4 _calloc_r
80214314 g       *ABS*	00000000 __bss_start
80206110 g     F .text	00000128 memset
80210768 g     F .text	00000058 alt_msgdma_open
8020027c g     F .text	00000124 main
80214338 g     O .bss	00000004 alt_envp
80214320 g     O .bss	00000004 __malloc_max_total_mem
8020ff68 g     F .text	00000198 alt_msgdma_prefetcher_add_extended_desc_to_list
8020d6fc g     F .text	00000060 altera_avalon_jtag_uart_write_fd
802097f4 g     F .text	00000018 __swbuf
80207994 g     F .text	00000008 __sclose
802e0000 g       *ABS*	00000000 __alt_heap_limit
80209328 g     F .text	00000014 fclose
80202b9c g     F .text	00001688 _dtoa_r
80210350 g     F .text	000002c0 alt_msgdma_start_prefetcher_with_list_addr
8020557c g     F .text	0000080c _malloc_r
80209968 g     F .text	00000030 __ascii_wctomb
802142f8 g     O .rwdata	00000004 alt_errno
8020fdc0 g     F .text	000000b8 alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor
8020515c g     F .text	000000c4 _fwalk
80211d30 g     F .text	000000c8 putc
8020a4a4 g     F .text	00000084 .hidden __divsi3
8020486c g     F .text	00000124 _malloc_trim_r
802120c4 g       *ABS*	00000000 __CTOR_END__
8020799c g     F .text	000000dc strcmp
802120c4 g       *ABS*	00000000 __DTOR_LIST__
8020b7ec g     F .text	00000088 .hidden __nedf2
8020d57c g     F .text	00000038 alt_irq_init
8020d2d0 g     F .text	00000064 alt_release_fd
802109f8 g     F .text	0000003c alt_msgdma_standard_descriptor_sync_transfer
802122b8 g     O .rodata	00000100 .hidden __clz_tab
80214314 g     O .bss	00000004 _PathLocale
80211bc8 g     F .text	00000014 atexit
802090c0 g     F .text	00000060 _write_r
8020539c g     F .text	00000018 setlocale
8020fd28 g     F .text	00000098 alt_msgdma_construct_prefetcher_extended_mm_to_st_descriptor
802142d0 g     O .rwdata	00000004 _impure_ptr
80214330 g     O .bss	00000004 alt_argc
80204224 g     F .text	0000021c __sflush_r
80210e2c g     F .text	00000060 _do_dtors
80205388 g     F .text	00000008 __locale_cjk_lang
80200020 g       .exceptions	00000000 alt_irq_entry
80206d5c g     F .text	00000064 __ulp
80204854 g     F .text	00000018 __fp_unlock_all
802142e4 g     O .rwdata	00000008 alt_fs_list
802053b4 g     F .text	0000000c localeconv
80210f1c g     F .text	00000050 alt_ic_isr_register
80214314 g       *ABS*	00000000 _edata
8020e1f8 g     F .text	00000060 altera_avalon_uart_read_fd
80214474 g       *ABS*	00000000 _end
8020933c g     F .text	00000164 __fputwc
8020dbd4 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
80210ff4 g     F .text	0000008c alt_ic_irq_disable
802078bc g     F .text	0000007c __swrite
802142dc g     O .rwdata	00000004 __malloc_trim_threshold
8020537c g     F .text	0000000c __locale_msgcharset
80211bdc g     F .text	00000038 exit
80205220 g     F .text	000000c4 _fwalk_reent
80210100 g     F .text	0000010c alt_msgdma_prefetcher_set_std_list_own_by_hw_bits
80206b60 g     F .text	000001fc __mdiff
8020a528 g     F .text	00000074 .hidden __modsi3
802e0000 g       *ABS*	00000000 __alt_data_end
80200020 g     F .exceptions	00000000 alt_exception
80204830 g     F .text	00000004 __sfp_lock_release
8020f8a0 g     F .text	000000a8 alt_msgdma_construct_extended_mm_to_mm_descriptor
84000000 g       *ABS*	00000000 __alt_mem_ext_flash
8020f780 g     F .text	00000090 alt_msgdma_construct_extended_st_to_mm_descriptor
8020e67c g     F .text	00000054 altera_avalon_uart_close
80212090 g     F .text	00000034 _exit
80210a70 g     F .text	0000012c alt_alarm_start
802053c0 g     F .text	000001bc __smakebuf_r
80214300 g     O .rwdata	00000008 alt_msgdma_list
802004e0 g     F .text	00000098 strlen
802113fc g     F .text	00000154 open
8020b874 g     F .text	000000dc .hidden __gedf2
8021177c g     F .text	0000003c alt_putchar
802142e0 g     O .rwdata	00000004 __wctomb
80207b74 g     F .text	00000018 __sprint_r
80214308 g     O .rwdata	00000004 alt_priority_mask
80210f6c g     F .text	00000088 alt_ic_irq_enable
80202770 g     F .text	0000001c __vfprintf_internal
8020e70c g     F .text	000001dc altera_avalon_uart_read
80209998 g     F .text	0000005c _wctomb_r
8020c15c g     F .text	000008fc .hidden __subdf3
80206594 g     F .text	000000b0 __lo0bits
8021430c g     O .rwdata	00000008 alt_alarm_list
80210dcc g     F .text	00000060 _do_ctors
802098a8 g     F .text	000000c0 wcrtomb
8020ccfc g     F .text	000000d0 close
802094c4 g     F .text	00000080 fputwc
80204834 g     F .text	00000004 __sinit_lock_acquire
80206308 g     F .text	00000120 __multadd
802062e0 g     F .text	00000028 _Bfree



Disassembly of section .exceptions:

80200020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
80200020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
80200024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
80200028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
8020002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
80200030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
80200034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
80200038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
8020003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
80200040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
80200044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
80200048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
8020004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
80200050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
80200054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
80200058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
8020005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
80200060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
80200064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
80200068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
8020006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
80200070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
80200074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
80200078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
8020007c:	10000326 	beq	r2,zero,8020008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
80200080:	20000226 	beq	r4,zero,8020008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
80200084:	02000fc0 	call	802000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
80200088:	00000706 	br	802000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
8020008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
80200090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
80200094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
80200098:	02001d00 	call	802001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
8020009c:	1000021e 	bne	r2,zero,802000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
802000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
802000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
802000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
802000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
802000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
802000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
802000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
802000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
802000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
802000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
802000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
802000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
802000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
802000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
802000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
802000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
802000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
802000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
802000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
802000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
802000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
802000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
802000f8:	ef80083a 	eret

802000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
802000fc:	defff904 	addi	sp,sp,-28
80200100:	dfc00615 	stw	ra,24(sp)
80200104:	df000515 	stw	fp,20(sp)
80200108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
8020010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
80200110:	0005313a 	rdctl	r2,ipending
80200114:	e0bffe15 	stw	r2,-8(fp)

  return active;
80200118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
8020011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
80200120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
80200124:	00800044 	movi	r2,1
80200128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
8020012c:	e0fffb17 	ldw	r3,-20(fp)
80200130:	e0bffc17 	ldw	r2,-16(fp)
80200134:	1884703a 	and	r2,r3,r2
80200138:	10001426 	beq	r2,zero,8020018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
8020013c:	00a00874 	movhi	r2,32801
80200140:	1090dd04 	addi	r2,r2,17268
80200144:	e0fffd17 	ldw	r3,-12(fp)
80200148:	180690fa 	slli	r3,r3,3
8020014c:	10c5883a 	add	r2,r2,r3
80200150:	10c00017 	ldw	r3,0(r2)
80200154:	00a00874 	movhi	r2,32801
80200158:	1090dd04 	addi	r2,r2,17268
8020015c:	e13ffd17 	ldw	r4,-12(fp)
80200160:	200890fa 	slli	r4,r4,3
80200164:	1105883a 	add	r2,r2,r4
80200168:	10800104 	addi	r2,r2,4
8020016c:	10800017 	ldw	r2,0(r2)
80200170:	1009883a 	mov	r4,r2
80200174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
80200178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
8020017c:	0005313a 	rdctl	r2,ipending
80200180:	e0bfff15 	stw	r2,-4(fp)

  return active;
80200184:	e0bfff17 	ldw	r2,-4(fp)
80200188:	00000706 	br	802001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
8020018c:	e0bffc17 	ldw	r2,-16(fp)
80200190:	1085883a 	add	r2,r2,r2
80200194:	e0bffc15 	stw	r2,-16(fp)
      i++;
80200198:	e0bffd17 	ldw	r2,-12(fp)
8020019c:	10800044 	addi	r2,r2,1
802001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
802001a4:	003fe106 	br	8020012c <__reset+0xfa1e012c>

    active = alt_irq_pending ();
802001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
802001ac:	e0bffb17 	ldw	r2,-20(fp)
802001b0:	103fdb1e 	bne	r2,zero,80200120 <__reset+0xfa1e0120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
802001b4:	0001883a 	nop
}
802001b8:	0001883a 	nop
802001bc:	e037883a 	mov	sp,fp
802001c0:	dfc00117 	ldw	ra,4(sp)
802001c4:	df000017 	ldw	fp,0(sp)
802001c8:	dec00204 	addi	sp,sp,8
802001cc:	f800283a 	ret

802001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
802001d0:	defffb04 	addi	sp,sp,-20
802001d4:	dfc00415 	stw	ra,16(sp)
802001d8:	df000315 	stw	fp,12(sp)
802001dc:	df000304 	addi	fp,sp,12
802001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
802001e4:	000531fa 	rdctl	r2,exception
802001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
802001ec:	e0bffd17 	ldw	r2,-12(fp)
802001f0:	10801f0c 	andi	r2,r2,124
802001f4:	1004d0ba 	srli	r2,r2,2
802001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
802001fc:	0005333a 	rdctl	r2,badaddr
80200200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
80200204:	d0a01f17 	ldw	r2,-32644(gp)
80200208:	10000726 	beq	r2,zero,80200228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
8020020c:	d0a01f17 	ldw	r2,-32644(gp)
80200210:	e0fffd17 	ldw	r3,-12(fp)
80200214:	e1bffe17 	ldw	r6,-8(fp)
80200218:	e17fff17 	ldw	r5,-4(fp)
8020021c:	1809883a 	mov	r4,r3
80200220:	103ee83a 	callr	r2
80200224:	00000206 	br	80200230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
80200228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
8020022c:	0005883a 	mov	r2,zero
}
80200230:	e037883a 	mov	sp,fp
80200234:	dfc00117 	ldw	ra,4(sp)
80200238:	df000017 	ldw	fp,0(sp)
8020023c:	dec00204 	addi	sp,sp,8
80200240:	f800283a 	ret

Disassembly of section .text:

80200244 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
80200244:	06e00bb4 	movhi	sp,32814
    ori sp, sp, %lo(__alt_stack_pointer)
80200248:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
8020024c:	06a00874 	movhi	gp,32801
    ori gp, gp, %lo(_gp)
80200250:	d6b0b314 	ori	gp,gp,49868
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
80200254:	00a00874 	movhi	r2,32801
    ori r2, r2, %lo(__bss_start)
80200258:	1090c514 	ori	r2,r2,17172

    movhi r3, %hi(__bss_end)
8020025c:	00e00874 	movhi	r3,32801
    ori r3, r3, %lo(__bss_end)
80200260:	18d11d14 	ori	r3,r3,17524

    beq r2, r3, 1f
80200264:	10c00326 	beq	r2,r3,80200274 <_start+0x30>

0:
    stw zero, (r2)
80200268:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
8020026c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
80200270:	10fffd36 	bltu	r2,r3,80200268 <__reset+0xfa1e0268>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
80200274:	020d0d40 	call	8020d0d4 <alt_main>

80200278 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
80200278:	003fff06 	br	80200278 <__reset+0xfa1e0278>

8020027c <main>:
	bool    bUartRxEmpty;
	alt_u32 uliUartRxRddata;
} TUartModule;

int main()
{
8020027c:	defffd04 	addi	sp,sp,-12
80200280:	dfc00215 	stw	ra,8(sp)
80200284:	df000115 	stw	fp,4(sp)
80200288:	df000104 	addi	fp,sp,4
  printf("Hello from Nios II!\n");
8020028c:	01200874 	movhi	r4,32801
80200290:	21083104 	addi	r4,r4,8388
80200294:	02004cc0 	call	802004cc <puts>

  volatile TUartModule *vpxUartModule = (TUartModule *)UART_MODULE_TOP_0_BASE;
80200298:	00a08034 	movhi	r2,33280
8020029c:	10830004 	addi	r2,r2,3072
802002a0:	e0bfff15 	stw	r2,-4(fp)



  while (1) {

	  if (!vpxUartModule->bUartRxEmpty){
802002a4:	e0bfff17 	ldw	r2,-4(fp)
802002a8:	10800283 	ldbu	r2,10(r2)
802002ac:	1080005c 	xori	r2,r2,1
802002b0:	10803fcc 	andi	r2,r2,255
802002b4:	10000c26 	beq	r2,zero,802002e8 <main+0x6c>
		  printf("Incoming data: %c \n", (char)vpxUartModule->uliUartRxRddata);
802002b8:	e0bfff17 	ldw	r2,-4(fp)
802002bc:	10800317 	ldw	r2,12(r2)
802002c0:	10803fcc 	andi	r2,r2,255
802002c4:	1080201c 	xori	r2,r2,128
802002c8:	10bfe004 	addi	r2,r2,-128
802002cc:	100b883a 	mov	r5,r2
802002d0:	01200874 	movhi	r4,32801
802002d4:	21083604 	addi	r4,r4,8408
802002d8:	02003d00 	call	802003d0 <printf>
		  vpxUartModule->bUartRxRdreq = true;
802002dc:	e0bfff17 	ldw	r2,-4(fp)
802002e0:	00c00044 	movi	r3,1
802002e4:	10c00245 	stb	r3,9(r2)
	  }

	  vpxUartModule->uliUartTxWrdata = (alt_u32)'c';
802002e8:	e0bfff17 	ldw	r2,-4(fp)
802002ec:	00c018c4 	movi	r3,99
802002f0:	10c00115 	stw	r3,4(r2)
	  vpxUartModule->bUartTxWrreq = true;
802002f4:	e0bfff17 	ldw	r2,-4(fp)
802002f8:	00c00044 	movi	r3,1
802002fc:	10c00005 	stb	r3,0(r2)
	  vpxUartModule->uliUartTxWrdata = (alt_u32)'u';
80200300:	e0bfff17 	ldw	r2,-4(fp)
80200304:	00c01d44 	movi	r3,117
80200308:	10c00115 	stw	r3,4(r2)
	  vpxUartModule->bUartTxWrreq = true;
8020030c:	e0bfff17 	ldw	r2,-4(fp)
80200310:	00c00044 	movi	r3,1
80200314:	10c00005 	stb	r3,0(r2)
	  vpxUartModule->uliUartTxWrdata = (alt_u32)'a';
80200318:	e0bfff17 	ldw	r2,-4(fp)
8020031c:	00c01844 	movi	r3,97
80200320:	10c00115 	stw	r3,4(r2)
	  vpxUartModule->bUartTxWrreq = true;
80200324:	e0bfff17 	ldw	r2,-4(fp)
80200328:	00c00044 	movi	r3,1
8020032c:	10c00005 	stb	r3,0(r2)
	  vpxUartModule->uliUartTxWrdata = (alt_u32)'t';
80200330:	e0bfff17 	ldw	r2,-4(fp)
80200334:	00c01d04 	movi	r3,116
80200338:	10c00115 	stw	r3,4(r2)
	  vpxUartModule->bUartTxWrreq = true;
8020033c:	e0bfff17 	ldw	r2,-4(fp)
80200340:	00c00044 	movi	r3,1
80200344:	10c00005 	stb	r3,0(r2)
	  vpxUartModule->uliUartTxWrdata = (alt_u32)'r';
80200348:	e0bfff17 	ldw	r2,-4(fp)
8020034c:	00c01c84 	movi	r3,114
80200350:	10c00115 	stw	r3,4(r2)
	  vpxUartModule->bUartTxWrreq = true;
80200354:	e0bfff17 	ldw	r2,-4(fp)
80200358:	00c00044 	movi	r3,1
8020035c:	10c00005 	stb	r3,0(r2)
	  vpxUartModule->uliUartTxWrdata = (alt_u32)'o';
80200360:	e0bfff17 	ldw	r2,-4(fp)
80200364:	00c01bc4 	movi	r3,111
80200368:	10c00115 	stw	r3,4(r2)
	  vpxUartModule->bUartTxWrreq = true;
8020036c:	e0bfff17 	ldw	r2,-4(fp)
80200370:	00c00044 	movi	r3,1
80200374:	10c00005 	stb	r3,0(r2)
	  vpxUartModule->uliUartTxWrdata = (alt_u32)'\n';
80200378:	e0bfff17 	ldw	r2,-4(fp)
8020037c:	00c00284 	movi	r3,10
80200380:	10c00115 	stw	r3,4(r2)
	  vpxUartModule->bUartTxWrreq = true;
80200384:	e0bfff17 	ldw	r2,-4(fp)
80200388:	00c00044 	movi	r3,1
8020038c:	10c00005 	stb	r3,0(r2)

	  usleep(1000000);
80200390:	010003f4 	movhi	r4,15
80200394:	21109004 	addi	r4,r4,16960
80200398:	020d3e40 	call	8020d3e4 <usleep>

  }
8020039c:	003fc106 	br	802002a4 <__reset+0xfa1e02a4>

802003a0 <_printf_r>:
802003a0:	defffd04 	addi	sp,sp,-12
802003a4:	2805883a 	mov	r2,r5
802003a8:	dfc00015 	stw	ra,0(sp)
802003ac:	d9800115 	stw	r6,4(sp)
802003b0:	d9c00215 	stw	r7,8(sp)
802003b4:	21400217 	ldw	r5,8(r4)
802003b8:	d9c00104 	addi	r7,sp,4
802003bc:	100d883a 	mov	r6,r2
802003c0:	02005780 	call	80200578 <___vfprintf_internal_r>
802003c4:	dfc00017 	ldw	ra,0(sp)
802003c8:	dec00304 	addi	sp,sp,12
802003cc:	f800283a 	ret

802003d0 <printf>:
802003d0:	defffc04 	addi	sp,sp,-16
802003d4:	dfc00015 	stw	ra,0(sp)
802003d8:	d9400115 	stw	r5,4(sp)
802003dc:	d9800215 	stw	r6,8(sp)
802003e0:	d9c00315 	stw	r7,12(sp)
802003e4:	00a00874 	movhi	r2,32801
802003e8:	1090b404 	addi	r2,r2,17104
802003ec:	10800017 	ldw	r2,0(r2)
802003f0:	200b883a 	mov	r5,r4
802003f4:	d9800104 	addi	r6,sp,4
802003f8:	11000217 	ldw	r4,8(r2)
802003fc:	02027700 	call	80202770 <__vfprintf_internal>
80200400:	dfc00017 	ldw	ra,0(sp)
80200404:	dec00404 	addi	sp,sp,16
80200408:	f800283a 	ret

8020040c <_puts_r>:
8020040c:	defff604 	addi	sp,sp,-40
80200410:	dc000715 	stw	r16,28(sp)
80200414:	2021883a 	mov	r16,r4
80200418:	2809883a 	mov	r4,r5
8020041c:	dc400815 	stw	r17,32(sp)
80200420:	dfc00915 	stw	ra,36(sp)
80200424:	2823883a 	mov	r17,r5
80200428:	02004e00 	call	802004e0 <strlen>
8020042c:	10c00044 	addi	r3,r2,1
80200430:	d8800115 	stw	r2,4(sp)
80200434:	00a00874 	movhi	r2,32801
80200438:	10883b04 	addi	r2,r2,8428
8020043c:	d8800215 	stw	r2,8(sp)
80200440:	00800044 	movi	r2,1
80200444:	d8800315 	stw	r2,12(sp)
80200448:	00800084 	movi	r2,2
8020044c:	dc400015 	stw	r17,0(sp)
80200450:	d8c00615 	stw	r3,24(sp)
80200454:	dec00415 	stw	sp,16(sp)
80200458:	d8800515 	stw	r2,20(sp)
8020045c:	80000226 	beq	r16,zero,80200468 <_puts_r+0x5c>
80200460:	80800e17 	ldw	r2,56(r16)
80200464:	10001426 	beq	r2,zero,802004b8 <_puts_r+0xac>
80200468:	81400217 	ldw	r5,8(r16)
8020046c:	2880030b 	ldhu	r2,12(r5)
80200470:	10c8000c 	andi	r3,r2,8192
80200474:	1800061e 	bne	r3,zero,80200490 <_puts_r+0x84>
80200478:	29001917 	ldw	r4,100(r5)
8020047c:	00f7ffc4 	movi	r3,-8193
80200480:	10880014 	ori	r2,r2,8192
80200484:	20c6703a 	and	r3,r4,r3
80200488:	2880030d 	sth	r2,12(r5)
8020048c:	28c01915 	stw	r3,100(r5)
80200490:	d9800404 	addi	r6,sp,16
80200494:	8009883a 	mov	r4,r16
80200498:	0204ca00 	call	80204ca0 <__sfvwrite_r>
8020049c:	1000091e 	bne	r2,zero,802004c4 <_puts_r+0xb8>
802004a0:	00800284 	movi	r2,10
802004a4:	dfc00917 	ldw	ra,36(sp)
802004a8:	dc400817 	ldw	r17,32(sp)
802004ac:	dc000717 	ldw	r16,28(sp)
802004b0:	dec00a04 	addi	sp,sp,40
802004b4:	f800283a 	ret
802004b8:	8009883a 	mov	r4,r16
802004bc:	020481c0 	call	8020481c <__sinit>
802004c0:	003fe906 	br	80200468 <__reset+0xfa1e0468>
802004c4:	00bfffc4 	movi	r2,-1
802004c8:	003ff606 	br	802004a4 <__reset+0xfa1e04a4>

802004cc <puts>:
802004cc:	00a00874 	movhi	r2,32801
802004d0:	1090b404 	addi	r2,r2,17104
802004d4:	200b883a 	mov	r5,r4
802004d8:	11000017 	ldw	r4,0(r2)
802004dc:	020040c1 	jmpi	8020040c <_puts_r>

802004e0 <strlen>:
802004e0:	208000cc 	andi	r2,r4,3
802004e4:	10002026 	beq	r2,zero,80200568 <strlen+0x88>
802004e8:	20800007 	ldb	r2,0(r4)
802004ec:	10002026 	beq	r2,zero,80200570 <strlen+0x90>
802004f0:	2005883a 	mov	r2,r4
802004f4:	00000206 	br	80200500 <strlen+0x20>
802004f8:	10c00007 	ldb	r3,0(r2)
802004fc:	18001826 	beq	r3,zero,80200560 <strlen+0x80>
80200500:	10800044 	addi	r2,r2,1
80200504:	10c000cc 	andi	r3,r2,3
80200508:	183ffb1e 	bne	r3,zero,802004f8 <__reset+0xfa1e04f8>
8020050c:	10c00017 	ldw	r3,0(r2)
80200510:	01ffbff4 	movhi	r7,65279
80200514:	39ffbfc4 	addi	r7,r7,-257
80200518:	00ca303a 	nor	r5,zero,r3
8020051c:	01a02074 	movhi	r6,32897
80200520:	19c7883a 	add	r3,r3,r7
80200524:	31a02004 	addi	r6,r6,-32640
80200528:	1946703a 	and	r3,r3,r5
8020052c:	1986703a 	and	r3,r3,r6
80200530:	1800091e 	bne	r3,zero,80200558 <strlen+0x78>
80200534:	10800104 	addi	r2,r2,4
80200538:	10c00017 	ldw	r3,0(r2)
8020053c:	19cb883a 	add	r5,r3,r7
80200540:	00c6303a 	nor	r3,zero,r3
80200544:	28c6703a 	and	r3,r5,r3
80200548:	1986703a 	and	r3,r3,r6
8020054c:	183ff926 	beq	r3,zero,80200534 <__reset+0xfa1e0534>
80200550:	00000106 	br	80200558 <strlen+0x78>
80200554:	10800044 	addi	r2,r2,1
80200558:	10c00007 	ldb	r3,0(r2)
8020055c:	183ffd1e 	bne	r3,zero,80200554 <__reset+0xfa1e0554>
80200560:	1105c83a 	sub	r2,r2,r4
80200564:	f800283a 	ret
80200568:	2005883a 	mov	r2,r4
8020056c:	003fe706 	br	8020050c <__reset+0xfa1e050c>
80200570:	0005883a 	mov	r2,zero
80200574:	f800283a 	ret

80200578 <___vfprintf_internal_r>:
80200578:	deffb804 	addi	sp,sp,-288
8020057c:	dfc04715 	stw	ra,284(sp)
80200580:	ddc04515 	stw	r23,276(sp)
80200584:	dd404315 	stw	r21,268(sp)
80200588:	d9002c15 	stw	r4,176(sp)
8020058c:	282f883a 	mov	r23,r5
80200590:	302b883a 	mov	r21,r6
80200594:	d9c02d15 	stw	r7,180(sp)
80200598:	df004615 	stw	fp,280(sp)
8020059c:	dd804415 	stw	r22,272(sp)
802005a0:	dd004215 	stw	r20,264(sp)
802005a4:	dcc04115 	stw	r19,260(sp)
802005a8:	dc804015 	stw	r18,256(sp)
802005ac:	dc403f15 	stw	r17,252(sp)
802005b0:	dc003e15 	stw	r16,248(sp)
802005b4:	02053900 	call	80205390 <_localeconv_r>
802005b8:	10800017 	ldw	r2,0(r2)
802005bc:	1009883a 	mov	r4,r2
802005c0:	d8803415 	stw	r2,208(sp)
802005c4:	02004e00 	call	802004e0 <strlen>
802005c8:	d8803715 	stw	r2,220(sp)
802005cc:	d8802c17 	ldw	r2,176(sp)
802005d0:	10000226 	beq	r2,zero,802005dc <___vfprintf_internal_r+0x64>
802005d4:	10800e17 	ldw	r2,56(r2)
802005d8:	1000f926 	beq	r2,zero,802009c0 <___vfprintf_internal_r+0x448>
802005dc:	b880030b 	ldhu	r2,12(r23)
802005e0:	10c8000c 	andi	r3,r2,8192
802005e4:	1800061e 	bne	r3,zero,80200600 <___vfprintf_internal_r+0x88>
802005e8:	b9001917 	ldw	r4,100(r23)
802005ec:	00f7ffc4 	movi	r3,-8193
802005f0:	10880014 	ori	r2,r2,8192
802005f4:	20c6703a 	and	r3,r4,r3
802005f8:	b880030d 	sth	r2,12(r23)
802005fc:	b8c01915 	stw	r3,100(r23)
80200600:	10c0020c 	andi	r3,r2,8
80200604:	1800c126 	beq	r3,zero,8020090c <___vfprintf_internal_r+0x394>
80200608:	b8c00417 	ldw	r3,16(r23)
8020060c:	1800bf26 	beq	r3,zero,8020090c <___vfprintf_internal_r+0x394>
80200610:	1080068c 	andi	r2,r2,26
80200614:	00c00284 	movi	r3,10
80200618:	10c0c426 	beq	r2,r3,8020092c <___vfprintf_internal_r+0x3b4>
8020061c:	d8c00404 	addi	r3,sp,16
80200620:	05200874 	movhi	r20,32801
80200624:	d9001e04 	addi	r4,sp,120
80200628:	a5084c84 	addi	r20,r20,8498
8020062c:	d8c01e15 	stw	r3,120(sp)
80200630:	d8002015 	stw	zero,128(sp)
80200634:	d8001f15 	stw	zero,124(sp)
80200638:	d8003315 	stw	zero,204(sp)
8020063c:	d8003615 	stw	zero,216(sp)
80200640:	d8003815 	stw	zero,224(sp)
80200644:	1811883a 	mov	r8,r3
80200648:	d8003915 	stw	zero,228(sp)
8020064c:	d8003a15 	stw	zero,232(sp)
80200650:	d8002f15 	stw	zero,188(sp)
80200654:	d9002815 	stw	r4,160(sp)
80200658:	a8800007 	ldb	r2,0(r21)
8020065c:	10027b26 	beq	r2,zero,8020104c <___vfprintf_internal_r+0xad4>
80200660:	00c00944 	movi	r3,37
80200664:	a821883a 	mov	r16,r21
80200668:	10c0021e 	bne	r2,r3,80200674 <___vfprintf_internal_r+0xfc>
8020066c:	00001406 	br	802006c0 <___vfprintf_internal_r+0x148>
80200670:	10c00326 	beq	r2,r3,80200680 <___vfprintf_internal_r+0x108>
80200674:	84000044 	addi	r16,r16,1
80200678:	80800007 	ldb	r2,0(r16)
8020067c:	103ffc1e 	bne	r2,zero,80200670 <__reset+0xfa1e0670>
80200680:	8563c83a 	sub	r17,r16,r21
80200684:	88000e26 	beq	r17,zero,802006c0 <___vfprintf_internal_r+0x148>
80200688:	d8c02017 	ldw	r3,128(sp)
8020068c:	d8801f17 	ldw	r2,124(sp)
80200690:	45400015 	stw	r21,0(r8)
80200694:	1c47883a 	add	r3,r3,r17
80200698:	10800044 	addi	r2,r2,1
8020069c:	d8c02015 	stw	r3,128(sp)
802006a0:	44400115 	stw	r17,4(r8)
802006a4:	d8801f15 	stw	r2,124(sp)
802006a8:	00c001c4 	movi	r3,7
802006ac:	1880a716 	blt	r3,r2,8020094c <___vfprintf_internal_r+0x3d4>
802006b0:	42000204 	addi	r8,r8,8
802006b4:	d9402f17 	ldw	r5,188(sp)
802006b8:	2c4b883a 	add	r5,r5,r17
802006bc:	d9402f15 	stw	r5,188(sp)
802006c0:	80800007 	ldb	r2,0(r16)
802006c4:	1000a826 	beq	r2,zero,80200968 <___vfprintf_internal_r+0x3f0>
802006c8:	84400047 	ldb	r17,1(r16)
802006cc:	00bfffc4 	movi	r2,-1
802006d0:	85400044 	addi	r21,r16,1
802006d4:	d8002785 	stb	zero,158(sp)
802006d8:	0007883a 	mov	r3,zero
802006dc:	000f883a 	mov	r7,zero
802006e0:	d8802915 	stw	r2,164(sp)
802006e4:	d8003115 	stw	zero,196(sp)
802006e8:	0025883a 	mov	r18,zero
802006ec:	01401604 	movi	r5,88
802006f0:	01800244 	movi	r6,9
802006f4:	02800a84 	movi	r10,42
802006f8:	02401b04 	movi	r9,108
802006fc:	ad400044 	addi	r21,r21,1
80200700:	88bff804 	addi	r2,r17,-32
80200704:	28830436 	bltu	r5,r2,80201318 <___vfprintf_internal_r+0xda0>
80200708:	100490ba 	slli	r2,r2,2
8020070c:	01200834 	movhi	r4,32800
80200710:	2101c804 	addi	r4,r4,1824
80200714:	1105883a 	add	r2,r2,r4
80200718:	10800017 	ldw	r2,0(r2)
8020071c:	1000683a 	jmp	r2
80200720:	80201238 	rdprs	zero,r16,-32696
80200724:	80201318 	cmpnei	zero,r16,-32692
80200728:	80201318 	cmpnei	zero,r16,-32692
8020072c:	80201258 	cmpnei	zero,r16,-32695
80200730:	80201318 	cmpnei	zero,r16,-32692
80200734:	80201318 	cmpnei	zero,r16,-32692
80200738:	80201318 	cmpnei	zero,r16,-32692
8020073c:	80201318 	cmpnei	zero,r16,-32692
80200740:	80201318 	cmpnei	zero,r16,-32692
80200744:	80201318 	cmpnei	zero,r16,-32692
80200748:	802009cc 	andi	zero,r16,32807
8020074c:	80201174 	orhi	zero,r16,32837
80200750:	80201318 	cmpnei	zero,r16,-32692
80200754:	80200894 	ori	zero,r16,32802
80200758:	802009f4 	orhi	zero,r16,32807
8020075c:	80201318 	cmpnei	zero,r16,-32692
80200760:	80200a34 	orhi	zero,r16,32808
80200764:	80200a40 	call	880200a4 <__reset+0x20000a4>
80200768:	80200a40 	call	880200a4 <__reset+0x20000a4>
8020076c:	80200a40 	call	880200a4 <__reset+0x20000a4>
80200770:	80200a40 	call	880200a4 <__reset+0x20000a4>
80200774:	80200a40 	call	880200a4 <__reset+0x20000a4>
80200778:	80200a40 	call	880200a4 <__reset+0x20000a4>
8020077c:	80200a40 	call	880200a4 <__reset+0x20000a4>
80200780:	80200a40 	call	880200a4 <__reset+0x20000a4>
80200784:	80200a40 	call	880200a4 <__reset+0x20000a4>
80200788:	80201318 	cmpnei	zero,r16,-32692
8020078c:	80201318 	cmpnei	zero,r16,-32692
80200790:	80201318 	cmpnei	zero,r16,-32692
80200794:	80201318 	cmpnei	zero,r16,-32692
80200798:	80201318 	cmpnei	zero,r16,-32692
8020079c:	80201318 	cmpnei	zero,r16,-32692
802007a0:	80201318 	cmpnei	zero,r16,-32692
802007a4:	80201318 	cmpnei	zero,r16,-32692
802007a8:	80201318 	cmpnei	zero,r16,-32692
802007ac:	80201318 	cmpnei	zero,r16,-32692
802007b0:	80200a74 	orhi	zero,r16,32809
802007b4:	80200b30 	cmpltui	zero,r16,32812
802007b8:	80201318 	cmpnei	zero,r16,-32692
802007bc:	80200b30 	cmpltui	zero,r16,32812
802007c0:	80201318 	cmpnei	zero,r16,-32692
802007c4:	80201318 	cmpnei	zero,r16,-32692
802007c8:	80201318 	cmpnei	zero,r16,-32692
802007cc:	80201318 	cmpnei	zero,r16,-32692
802007d0:	80200bd0 	cmplti	zero,r16,-32721
802007d4:	80201318 	cmpnei	zero,r16,-32692
802007d8:	80201318 	cmpnei	zero,r16,-32692
802007dc:	80200bdc 	xori	zero,r16,32815
802007e0:	80201318 	cmpnei	zero,r16,-32692
802007e4:	80201318 	cmpnei	zero,r16,-32692
802007e8:	80201318 	cmpnei	zero,r16,-32692
802007ec:	80201318 	cmpnei	zero,r16,-32692
802007f0:	80201318 	cmpnei	zero,r16,-32692
802007f4:	80201054 	ori	zero,r16,32833
802007f8:	80201318 	cmpnei	zero,r16,-32692
802007fc:	80201318 	cmpnei	zero,r16,-32692
80200800:	802010b4 	orhi	zero,r16,32834
80200804:	80201318 	cmpnei	zero,r16,-32692
80200808:	80201318 	cmpnei	zero,r16,-32692
8020080c:	80201318 	cmpnei	zero,r16,-32692
80200810:	80201318 	cmpnei	zero,r16,-32692
80200814:	80201318 	cmpnei	zero,r16,-32692
80200818:	80201318 	cmpnei	zero,r16,-32692
8020081c:	80201318 	cmpnei	zero,r16,-32692
80200820:	80201318 	cmpnei	zero,r16,-32692
80200824:	80201318 	cmpnei	zero,r16,-32692
80200828:	80201318 	cmpnei	zero,r16,-32692
8020082c:	802012c4 	addi	zero,r16,-32693
80200830:	80201264 	muli	zero,r16,-32695
80200834:	80200b30 	cmpltui	zero,r16,32812
80200838:	80200b30 	cmpltui	zero,r16,32812
8020083c:	80200b30 	cmpltui	zero,r16,32812
80200840:	80201274 	orhi	zero,r16,32841
80200844:	80201264 	muli	zero,r16,-32695
80200848:	80201318 	cmpnei	zero,r16,-32692
8020084c:	80201318 	cmpnei	zero,r16,-32692
80200850:	80201280 	call	88020128 <__reset+0x2000128>
80200854:	80201318 	cmpnei	zero,r16,-32692
80200858:	80201290 	cmplti	zero,r16,-32694
8020085c:	80201164 	muli	zero,r16,-32699
80200860:	802008a0 	cmpeqi	zero,r16,-32734
80200864:	80201184 	addi	zero,r16,-32698
80200868:	80201318 	cmpnei	zero,r16,-32692
8020086c:	80201190 	cmplti	zero,r16,-32698
80200870:	80201318 	cmpnei	zero,r16,-32692
80200874:	802011ec 	andhi	zero,r16,32839
80200878:	80201318 	cmpnei	zero,r16,-32692
8020087c:	80201318 	cmpnei	zero,r16,-32692
80200880:	802011fc 	xorhi	zero,r16,32839
80200884:	d9003117 	ldw	r4,196(sp)
80200888:	d8802d15 	stw	r2,180(sp)
8020088c:	0109c83a 	sub	r4,zero,r4
80200890:	d9003115 	stw	r4,196(sp)
80200894:	94800114 	ori	r18,r18,4
80200898:	ac400007 	ldb	r17,0(r21)
8020089c:	003f9706 	br	802006fc <__reset+0xfa1e06fc>
802008a0:	00800c04 	movi	r2,48
802008a4:	d9002d17 	ldw	r4,180(sp)
802008a8:	d9402917 	ldw	r5,164(sp)
802008ac:	d8802705 	stb	r2,156(sp)
802008b0:	00801e04 	movi	r2,120
802008b4:	d8802745 	stb	r2,157(sp)
802008b8:	d8002785 	stb	zero,158(sp)
802008bc:	20c00104 	addi	r3,r4,4
802008c0:	24c00017 	ldw	r19,0(r4)
802008c4:	002d883a 	mov	r22,zero
802008c8:	90800094 	ori	r2,r18,2
802008cc:	28029a16 	blt	r5,zero,80201338 <___vfprintf_internal_r+0xdc0>
802008d0:	00bfdfc4 	movi	r2,-129
802008d4:	90a4703a 	and	r18,r18,r2
802008d8:	d8c02d15 	stw	r3,180(sp)
802008dc:	94800094 	ori	r18,r18,2
802008e0:	9802871e 	bne	r19,zero,80201300 <___vfprintf_internal_r+0xd88>
802008e4:	00a00874 	movhi	r2,32801
802008e8:	10884504 	addi	r2,r2,8468
802008ec:	d8803915 	stw	r2,228(sp)
802008f0:	04401e04 	movi	r17,120
802008f4:	d8802917 	ldw	r2,164(sp)
802008f8:	0039883a 	mov	fp,zero
802008fc:	1001e926 	beq	r2,zero,802010a4 <___vfprintf_internal_r+0xb2c>
80200900:	0027883a 	mov	r19,zero
80200904:	002d883a 	mov	r22,zero
80200908:	00020506 	br	80201120 <___vfprintf_internal_r+0xba8>
8020090c:	d9002c17 	ldw	r4,176(sp)
80200910:	b80b883a 	mov	r5,r23
80200914:	02028480 	call	80202848 <__swsetup_r>
80200918:	1005ac1e 	bne	r2,zero,80201fcc <___vfprintf_internal_r+0x1a54>
8020091c:	b880030b 	ldhu	r2,12(r23)
80200920:	00c00284 	movi	r3,10
80200924:	1080068c 	andi	r2,r2,26
80200928:	10ff3c1e 	bne	r2,r3,8020061c <__reset+0xfa1e061c>
8020092c:	b880038f 	ldh	r2,14(r23)
80200930:	103f3a16 	blt	r2,zero,8020061c <__reset+0xfa1e061c>
80200934:	d9c02d17 	ldw	r7,180(sp)
80200938:	d9002c17 	ldw	r4,176(sp)
8020093c:	a80d883a 	mov	r6,r21
80200940:	b80b883a 	mov	r5,r23
80200944:	020278c0 	call	8020278c <__sbprintf>
80200948:	00001106 	br	80200990 <___vfprintf_internal_r+0x418>
8020094c:	d9002c17 	ldw	r4,176(sp)
80200950:	d9801e04 	addi	r6,sp,120
80200954:	b80b883a 	mov	r5,r23
80200958:	0207b740 	call	80207b74 <__sprint_r>
8020095c:	1000081e 	bne	r2,zero,80200980 <___vfprintf_internal_r+0x408>
80200960:	da000404 	addi	r8,sp,16
80200964:	003f5306 	br	802006b4 <__reset+0xfa1e06b4>
80200968:	d8802017 	ldw	r2,128(sp)
8020096c:	10000426 	beq	r2,zero,80200980 <___vfprintf_internal_r+0x408>
80200970:	d9002c17 	ldw	r4,176(sp)
80200974:	d9801e04 	addi	r6,sp,120
80200978:	b80b883a 	mov	r5,r23
8020097c:	0207b740 	call	80207b74 <__sprint_r>
80200980:	b880030b 	ldhu	r2,12(r23)
80200984:	1080100c 	andi	r2,r2,64
80200988:	1005901e 	bne	r2,zero,80201fcc <___vfprintf_internal_r+0x1a54>
8020098c:	d8802f17 	ldw	r2,188(sp)
80200990:	dfc04717 	ldw	ra,284(sp)
80200994:	df004617 	ldw	fp,280(sp)
80200998:	ddc04517 	ldw	r23,276(sp)
8020099c:	dd804417 	ldw	r22,272(sp)
802009a0:	dd404317 	ldw	r21,268(sp)
802009a4:	dd004217 	ldw	r20,264(sp)
802009a8:	dcc04117 	ldw	r19,260(sp)
802009ac:	dc804017 	ldw	r18,256(sp)
802009b0:	dc403f17 	ldw	r17,252(sp)
802009b4:	dc003e17 	ldw	r16,248(sp)
802009b8:	dec04804 	addi	sp,sp,288
802009bc:	f800283a 	ret
802009c0:	d9002c17 	ldw	r4,176(sp)
802009c4:	020481c0 	call	8020481c <__sinit>
802009c8:	003f0406 	br	802005dc <__reset+0xfa1e05dc>
802009cc:	d8802d17 	ldw	r2,180(sp)
802009d0:	d9002d17 	ldw	r4,180(sp)
802009d4:	10800017 	ldw	r2,0(r2)
802009d8:	d8803115 	stw	r2,196(sp)
802009dc:	20800104 	addi	r2,r4,4
802009e0:	d9003117 	ldw	r4,196(sp)
802009e4:	203fa716 	blt	r4,zero,80200884 <__reset+0xfa1e0884>
802009e8:	d8802d15 	stw	r2,180(sp)
802009ec:	ac400007 	ldb	r17,0(r21)
802009f0:	003f4206 	br	802006fc <__reset+0xfa1e06fc>
802009f4:	ac400007 	ldb	r17,0(r21)
802009f8:	aac00044 	addi	r11,r21,1
802009fc:	8a872826 	beq	r17,r10,802026a0 <___vfprintf_internal_r+0x2128>
80200a00:	88bff404 	addi	r2,r17,-48
80200a04:	0009883a 	mov	r4,zero
80200a08:	30867d36 	bltu	r6,r2,80202400 <___vfprintf_internal_r+0x1e88>
80200a0c:	5c400007 	ldb	r17,0(r11)
80200a10:	210002a4 	muli	r4,r4,10
80200a14:	5d400044 	addi	r21,r11,1
80200a18:	a817883a 	mov	r11,r21
80200a1c:	2089883a 	add	r4,r4,r2
80200a20:	88bff404 	addi	r2,r17,-48
80200a24:	30bff92e 	bgeu	r6,r2,80200a0c <__reset+0xfa1e0a0c>
80200a28:	2005c916 	blt	r4,zero,80202150 <___vfprintf_internal_r+0x1bd8>
80200a2c:	d9002915 	stw	r4,164(sp)
80200a30:	003f3306 	br	80200700 <__reset+0xfa1e0700>
80200a34:	94802014 	ori	r18,r18,128
80200a38:	ac400007 	ldb	r17,0(r21)
80200a3c:	003f2f06 	br	802006fc <__reset+0xfa1e06fc>
80200a40:	a809883a 	mov	r4,r21
80200a44:	d8003115 	stw	zero,196(sp)
80200a48:	88bff404 	addi	r2,r17,-48
80200a4c:	0017883a 	mov	r11,zero
80200a50:	24400007 	ldb	r17,0(r4)
80200a54:	5ac002a4 	muli	r11,r11,10
80200a58:	ad400044 	addi	r21,r21,1
80200a5c:	a809883a 	mov	r4,r21
80200a60:	12d7883a 	add	r11,r2,r11
80200a64:	88bff404 	addi	r2,r17,-48
80200a68:	30bff92e 	bgeu	r6,r2,80200a50 <__reset+0xfa1e0a50>
80200a6c:	dac03115 	stw	r11,196(sp)
80200a70:	003f2306 	br	80200700 <__reset+0xfa1e0700>
80200a74:	18c03fcc 	andi	r3,r3,255
80200a78:	18072b1e 	bne	r3,zero,80202728 <___vfprintf_internal_r+0x21b0>
80200a7c:	94800414 	ori	r18,r18,16
80200a80:	9080080c 	andi	r2,r18,32
80200a84:	10037b26 	beq	r2,zero,80201874 <___vfprintf_internal_r+0x12fc>
80200a88:	d9402d17 	ldw	r5,180(sp)
80200a8c:	28800117 	ldw	r2,4(r5)
80200a90:	2cc00017 	ldw	r19,0(r5)
80200a94:	29400204 	addi	r5,r5,8
80200a98:	d9402d15 	stw	r5,180(sp)
80200a9c:	102d883a 	mov	r22,r2
80200aa0:	10044b16 	blt	r2,zero,80201bd0 <___vfprintf_internal_r+0x1658>
80200aa4:	d9402917 	ldw	r5,164(sp)
80200aa8:	df002783 	ldbu	fp,158(sp)
80200aac:	2803bc16 	blt	r5,zero,802019a0 <___vfprintf_internal_r+0x1428>
80200ab0:	00ffdfc4 	movi	r3,-129
80200ab4:	9d84b03a 	or	r2,r19,r22
80200ab8:	90e4703a 	and	r18,r18,r3
80200abc:	10017726 	beq	r2,zero,8020109c <___vfprintf_internal_r+0xb24>
80200ac0:	b0038326 	beq	r22,zero,802018d0 <___vfprintf_internal_r+0x1358>
80200ac4:	dc402a15 	stw	r17,168(sp)
80200ac8:	dc001e04 	addi	r16,sp,120
80200acc:	b023883a 	mov	r17,r22
80200ad0:	402d883a 	mov	r22,r8
80200ad4:	9809883a 	mov	r4,r19
80200ad8:	880b883a 	mov	r5,r17
80200adc:	01800284 	movi	r6,10
80200ae0:	000f883a 	mov	r7,zero
80200ae4:	0209f6c0 	call	80209f6c <__umoddi3>
80200ae8:	10800c04 	addi	r2,r2,48
80200aec:	843fffc4 	addi	r16,r16,-1
80200af0:	9809883a 	mov	r4,r19
80200af4:	880b883a 	mov	r5,r17
80200af8:	80800005 	stb	r2,0(r16)
80200afc:	01800284 	movi	r6,10
80200b00:	000f883a 	mov	r7,zero
80200b04:	02099f40 	call	802099f4 <__udivdi3>
80200b08:	1027883a 	mov	r19,r2
80200b0c:	10c4b03a 	or	r2,r2,r3
80200b10:	1823883a 	mov	r17,r3
80200b14:	103fef1e 	bne	r2,zero,80200ad4 <__reset+0xfa1e0ad4>
80200b18:	d8c02817 	ldw	r3,160(sp)
80200b1c:	dc402a17 	ldw	r17,168(sp)
80200b20:	b011883a 	mov	r8,r22
80200b24:	1c07c83a 	sub	r3,r3,r16
80200b28:	d8c02e15 	stw	r3,184(sp)
80200b2c:	00005906 	br	80200c94 <___vfprintf_internal_r+0x71c>
80200b30:	18c03fcc 	andi	r3,r3,255
80200b34:	1806fa1e 	bne	r3,zero,80202720 <___vfprintf_internal_r+0x21a8>
80200b38:	9080020c 	andi	r2,r18,8
80200b3c:	10048a26 	beq	r2,zero,80201d68 <___vfprintf_internal_r+0x17f0>
80200b40:	d8c02d17 	ldw	r3,180(sp)
80200b44:	d9002d17 	ldw	r4,180(sp)
80200b48:	d9402d17 	ldw	r5,180(sp)
80200b4c:	18c00017 	ldw	r3,0(r3)
80200b50:	21000117 	ldw	r4,4(r4)
80200b54:	29400204 	addi	r5,r5,8
80200b58:	d8c03615 	stw	r3,216(sp)
80200b5c:	d9003815 	stw	r4,224(sp)
80200b60:	d9402d15 	stw	r5,180(sp)
80200b64:	d9003617 	ldw	r4,216(sp)
80200b68:	d9403817 	ldw	r5,224(sp)
80200b6c:	da003d15 	stw	r8,244(sp)
80200b70:	04000044 	movi	r16,1
80200b74:	02077980 	call	80207798 <__fpclassifyd>
80200b78:	da003d17 	ldw	r8,244(sp)
80200b7c:	14041f1e 	bne	r2,r16,80201bfc <___vfprintf_internal_r+0x1684>
80200b80:	d9003617 	ldw	r4,216(sp)
80200b84:	d9403817 	ldw	r5,224(sp)
80200b88:	000d883a 	mov	r6,zero
80200b8c:	000f883a 	mov	r7,zero
80200b90:	020b9500 	call	8020b950 <__ledf2>
80200b94:	da003d17 	ldw	r8,244(sp)
80200b98:	1005be16 	blt	r2,zero,80202294 <___vfprintf_internal_r+0x1d1c>
80200b9c:	df002783 	ldbu	fp,158(sp)
80200ba0:	008011c4 	movi	r2,71
80200ba4:	1445330e 	bge	r2,r17,80202074 <___vfprintf_internal_r+0x1afc>
80200ba8:	04200874 	movhi	r16,32801
80200bac:	84083d04 	addi	r16,r16,8436
80200bb0:	00c000c4 	movi	r3,3
80200bb4:	00bfdfc4 	movi	r2,-129
80200bb8:	d8c02a15 	stw	r3,168(sp)
80200bbc:	90a4703a 	and	r18,r18,r2
80200bc0:	d8c02e15 	stw	r3,184(sp)
80200bc4:	d8002915 	stw	zero,164(sp)
80200bc8:	d8003215 	stw	zero,200(sp)
80200bcc:	00003706 	br	80200cac <___vfprintf_internal_r+0x734>
80200bd0:	94800214 	ori	r18,r18,8
80200bd4:	ac400007 	ldb	r17,0(r21)
80200bd8:	003ec806 	br	802006fc <__reset+0xfa1e06fc>
80200bdc:	18c03fcc 	andi	r3,r3,255
80200be0:	1806db1e 	bne	r3,zero,80202750 <___vfprintf_internal_r+0x21d8>
80200be4:	94800414 	ori	r18,r18,16
80200be8:	9080080c 	andi	r2,r18,32
80200bec:	1002d826 	beq	r2,zero,80201750 <___vfprintf_internal_r+0x11d8>
80200bf0:	d9402d17 	ldw	r5,180(sp)
80200bf4:	d8c02917 	ldw	r3,164(sp)
80200bf8:	d8002785 	stb	zero,158(sp)
80200bfc:	28800204 	addi	r2,r5,8
80200c00:	2cc00017 	ldw	r19,0(r5)
80200c04:	2d800117 	ldw	r22,4(r5)
80200c08:	18048f16 	blt	r3,zero,80201e48 <___vfprintf_internal_r+0x18d0>
80200c0c:	013fdfc4 	movi	r4,-129
80200c10:	9d86b03a 	or	r3,r19,r22
80200c14:	d8802d15 	stw	r2,180(sp)
80200c18:	9124703a 	and	r18,r18,r4
80200c1c:	1802d91e 	bne	r3,zero,80201784 <___vfprintf_internal_r+0x120c>
80200c20:	d8c02917 	ldw	r3,164(sp)
80200c24:	0039883a 	mov	fp,zero
80200c28:	1805c326 	beq	r3,zero,80202338 <___vfprintf_internal_r+0x1dc0>
80200c2c:	0027883a 	mov	r19,zero
80200c30:	002d883a 	mov	r22,zero
80200c34:	dc001e04 	addi	r16,sp,120
80200c38:	9806d0fa 	srli	r3,r19,3
80200c3c:	b008977a 	slli	r4,r22,29
80200c40:	b02cd0fa 	srli	r22,r22,3
80200c44:	9cc001cc 	andi	r19,r19,7
80200c48:	98800c04 	addi	r2,r19,48
80200c4c:	843fffc4 	addi	r16,r16,-1
80200c50:	20e6b03a 	or	r19,r4,r3
80200c54:	80800005 	stb	r2,0(r16)
80200c58:	9d86b03a 	or	r3,r19,r22
80200c5c:	183ff61e 	bne	r3,zero,80200c38 <__reset+0xfa1e0c38>
80200c60:	90c0004c 	andi	r3,r18,1
80200c64:	18013b26 	beq	r3,zero,80201154 <___vfprintf_internal_r+0xbdc>
80200c68:	10803fcc 	andi	r2,r2,255
80200c6c:	1080201c 	xori	r2,r2,128
80200c70:	10bfe004 	addi	r2,r2,-128
80200c74:	00c00c04 	movi	r3,48
80200c78:	10c13626 	beq	r2,r3,80201154 <___vfprintf_internal_r+0xbdc>
80200c7c:	80ffffc5 	stb	r3,-1(r16)
80200c80:	d8c02817 	ldw	r3,160(sp)
80200c84:	80bfffc4 	addi	r2,r16,-1
80200c88:	1021883a 	mov	r16,r2
80200c8c:	1887c83a 	sub	r3,r3,r2
80200c90:	d8c02e15 	stw	r3,184(sp)
80200c94:	d8802e17 	ldw	r2,184(sp)
80200c98:	d9002917 	ldw	r4,164(sp)
80200c9c:	1100010e 	bge	r2,r4,80200ca4 <___vfprintf_internal_r+0x72c>
80200ca0:	2005883a 	mov	r2,r4
80200ca4:	d8802a15 	stw	r2,168(sp)
80200ca8:	d8003215 	stw	zero,200(sp)
80200cac:	e7003fcc 	andi	fp,fp,255
80200cb0:	e700201c 	xori	fp,fp,128
80200cb4:	e73fe004 	addi	fp,fp,-128
80200cb8:	e0000326 	beq	fp,zero,80200cc8 <___vfprintf_internal_r+0x750>
80200cbc:	d8c02a17 	ldw	r3,168(sp)
80200cc0:	18c00044 	addi	r3,r3,1
80200cc4:	d8c02a15 	stw	r3,168(sp)
80200cc8:	90c0008c 	andi	r3,r18,2
80200ccc:	d8c02b15 	stw	r3,172(sp)
80200cd0:	18000326 	beq	r3,zero,80200ce0 <___vfprintf_internal_r+0x768>
80200cd4:	d8c02a17 	ldw	r3,168(sp)
80200cd8:	18c00084 	addi	r3,r3,2
80200cdc:	d8c02a15 	stw	r3,168(sp)
80200ce0:	90c0210c 	andi	r3,r18,132
80200ce4:	d8c03015 	stw	r3,192(sp)
80200ce8:	1801a31e 	bne	r3,zero,80201378 <___vfprintf_internal_r+0xe00>
80200cec:	d9003117 	ldw	r4,196(sp)
80200cf0:	d8c02a17 	ldw	r3,168(sp)
80200cf4:	20e7c83a 	sub	r19,r4,r3
80200cf8:	04c19f0e 	bge	zero,r19,80201378 <___vfprintf_internal_r+0xe00>
80200cfc:	02400404 	movi	r9,16
80200d00:	d8c02017 	ldw	r3,128(sp)
80200d04:	d8801f17 	ldw	r2,124(sp)
80200d08:	4cc50d0e 	bge	r9,r19,80202140 <___vfprintf_internal_r+0x1bc8>
80200d0c:	01600874 	movhi	r5,32801
80200d10:	29485084 	addi	r5,r5,8514
80200d14:	dc403b15 	stw	r17,236(sp)
80200d18:	d9403515 	stw	r5,212(sp)
80200d1c:	9823883a 	mov	r17,r19
80200d20:	482d883a 	mov	r22,r9
80200d24:	9027883a 	mov	r19,r18
80200d28:	070001c4 	movi	fp,7
80200d2c:	8025883a 	mov	r18,r16
80200d30:	dc002c17 	ldw	r16,176(sp)
80200d34:	00000306 	br	80200d44 <___vfprintf_internal_r+0x7cc>
80200d38:	8c7ffc04 	addi	r17,r17,-16
80200d3c:	42000204 	addi	r8,r8,8
80200d40:	b440130e 	bge	r22,r17,80200d90 <___vfprintf_internal_r+0x818>
80200d44:	01200874 	movhi	r4,32801
80200d48:	18c00404 	addi	r3,r3,16
80200d4c:	10800044 	addi	r2,r2,1
80200d50:	21085084 	addi	r4,r4,8514
80200d54:	41000015 	stw	r4,0(r8)
80200d58:	45800115 	stw	r22,4(r8)
80200d5c:	d8c02015 	stw	r3,128(sp)
80200d60:	d8801f15 	stw	r2,124(sp)
80200d64:	e0bff40e 	bge	fp,r2,80200d38 <__reset+0xfa1e0d38>
80200d68:	d9801e04 	addi	r6,sp,120
80200d6c:	b80b883a 	mov	r5,r23
80200d70:	8009883a 	mov	r4,r16
80200d74:	0207b740 	call	80207b74 <__sprint_r>
80200d78:	103f011e 	bne	r2,zero,80200980 <__reset+0xfa1e0980>
80200d7c:	8c7ffc04 	addi	r17,r17,-16
80200d80:	d8c02017 	ldw	r3,128(sp)
80200d84:	d8801f17 	ldw	r2,124(sp)
80200d88:	da000404 	addi	r8,sp,16
80200d8c:	b47fed16 	blt	r22,r17,80200d44 <__reset+0xfa1e0d44>
80200d90:	9021883a 	mov	r16,r18
80200d94:	9825883a 	mov	r18,r19
80200d98:	8827883a 	mov	r19,r17
80200d9c:	dc403b17 	ldw	r17,236(sp)
80200da0:	d9403517 	ldw	r5,212(sp)
80200da4:	98c7883a 	add	r3,r19,r3
80200da8:	10800044 	addi	r2,r2,1
80200dac:	41400015 	stw	r5,0(r8)
80200db0:	44c00115 	stw	r19,4(r8)
80200db4:	d8c02015 	stw	r3,128(sp)
80200db8:	d8801f15 	stw	r2,124(sp)
80200dbc:	010001c4 	movi	r4,7
80200dc0:	2082a316 	blt	r4,r2,80201850 <___vfprintf_internal_r+0x12d8>
80200dc4:	df002787 	ldb	fp,158(sp)
80200dc8:	42000204 	addi	r8,r8,8
80200dcc:	e0000c26 	beq	fp,zero,80200e00 <___vfprintf_internal_r+0x888>
80200dd0:	d8801f17 	ldw	r2,124(sp)
80200dd4:	d9002784 	addi	r4,sp,158
80200dd8:	18c00044 	addi	r3,r3,1
80200ddc:	10800044 	addi	r2,r2,1
80200de0:	41000015 	stw	r4,0(r8)
80200de4:	01000044 	movi	r4,1
80200de8:	41000115 	stw	r4,4(r8)
80200dec:	d8c02015 	stw	r3,128(sp)
80200df0:	d8801f15 	stw	r2,124(sp)
80200df4:	010001c4 	movi	r4,7
80200df8:	20823c16 	blt	r4,r2,802016ec <___vfprintf_internal_r+0x1174>
80200dfc:	42000204 	addi	r8,r8,8
80200e00:	d8802b17 	ldw	r2,172(sp)
80200e04:	10000c26 	beq	r2,zero,80200e38 <___vfprintf_internal_r+0x8c0>
80200e08:	d8801f17 	ldw	r2,124(sp)
80200e0c:	d9002704 	addi	r4,sp,156
80200e10:	18c00084 	addi	r3,r3,2
80200e14:	10800044 	addi	r2,r2,1
80200e18:	41000015 	stw	r4,0(r8)
80200e1c:	01000084 	movi	r4,2
80200e20:	41000115 	stw	r4,4(r8)
80200e24:	d8c02015 	stw	r3,128(sp)
80200e28:	d8801f15 	stw	r2,124(sp)
80200e2c:	010001c4 	movi	r4,7
80200e30:	20823616 	blt	r4,r2,8020170c <___vfprintf_internal_r+0x1194>
80200e34:	42000204 	addi	r8,r8,8
80200e38:	d9003017 	ldw	r4,192(sp)
80200e3c:	00802004 	movi	r2,128
80200e40:	20819926 	beq	r4,r2,802014a8 <___vfprintf_internal_r+0xf30>
80200e44:	d9402917 	ldw	r5,164(sp)
80200e48:	d8802e17 	ldw	r2,184(sp)
80200e4c:	28adc83a 	sub	r22,r5,r2
80200e50:	0580310e 	bge	zero,r22,80200f18 <___vfprintf_internal_r+0x9a0>
80200e54:	07000404 	movi	fp,16
80200e58:	d8801f17 	ldw	r2,124(sp)
80200e5c:	e584140e 	bge	fp,r22,80201eb0 <___vfprintf_internal_r+0x1938>
80200e60:	01600874 	movhi	r5,32801
80200e64:	29484c84 	addi	r5,r5,8498
80200e68:	dc402915 	stw	r17,164(sp)
80200e6c:	d9402b15 	stw	r5,172(sp)
80200e70:	b023883a 	mov	r17,r22
80200e74:	04c001c4 	movi	r19,7
80200e78:	a82d883a 	mov	r22,r21
80200e7c:	902b883a 	mov	r21,r18
80200e80:	8025883a 	mov	r18,r16
80200e84:	dc002c17 	ldw	r16,176(sp)
80200e88:	00000306 	br	80200e98 <___vfprintf_internal_r+0x920>
80200e8c:	8c7ffc04 	addi	r17,r17,-16
80200e90:	42000204 	addi	r8,r8,8
80200e94:	e440110e 	bge	fp,r17,80200edc <___vfprintf_internal_r+0x964>
80200e98:	18c00404 	addi	r3,r3,16
80200e9c:	10800044 	addi	r2,r2,1
80200ea0:	45000015 	stw	r20,0(r8)
80200ea4:	47000115 	stw	fp,4(r8)
80200ea8:	d8c02015 	stw	r3,128(sp)
80200eac:	d8801f15 	stw	r2,124(sp)
80200eb0:	98bff60e 	bge	r19,r2,80200e8c <__reset+0xfa1e0e8c>
80200eb4:	d9801e04 	addi	r6,sp,120
80200eb8:	b80b883a 	mov	r5,r23
80200ebc:	8009883a 	mov	r4,r16
80200ec0:	0207b740 	call	80207b74 <__sprint_r>
80200ec4:	103eae1e 	bne	r2,zero,80200980 <__reset+0xfa1e0980>
80200ec8:	8c7ffc04 	addi	r17,r17,-16
80200ecc:	d8c02017 	ldw	r3,128(sp)
80200ed0:	d8801f17 	ldw	r2,124(sp)
80200ed4:	da000404 	addi	r8,sp,16
80200ed8:	e47fef16 	blt	fp,r17,80200e98 <__reset+0xfa1e0e98>
80200edc:	9021883a 	mov	r16,r18
80200ee0:	a825883a 	mov	r18,r21
80200ee4:	b02b883a 	mov	r21,r22
80200ee8:	882d883a 	mov	r22,r17
80200eec:	dc402917 	ldw	r17,164(sp)
80200ef0:	d9002b17 	ldw	r4,172(sp)
80200ef4:	1d87883a 	add	r3,r3,r22
80200ef8:	10800044 	addi	r2,r2,1
80200efc:	41000015 	stw	r4,0(r8)
80200f00:	45800115 	stw	r22,4(r8)
80200f04:	d8c02015 	stw	r3,128(sp)
80200f08:	d8801f15 	stw	r2,124(sp)
80200f0c:	010001c4 	movi	r4,7
80200f10:	2081ee16 	blt	r4,r2,802016cc <___vfprintf_internal_r+0x1154>
80200f14:	42000204 	addi	r8,r8,8
80200f18:	9080400c 	andi	r2,r18,256
80200f1c:	1001181e 	bne	r2,zero,80201380 <___vfprintf_internal_r+0xe08>
80200f20:	d9402e17 	ldw	r5,184(sp)
80200f24:	d8801f17 	ldw	r2,124(sp)
80200f28:	44000015 	stw	r16,0(r8)
80200f2c:	1947883a 	add	r3,r3,r5
80200f30:	10800044 	addi	r2,r2,1
80200f34:	41400115 	stw	r5,4(r8)
80200f38:	d8c02015 	stw	r3,128(sp)
80200f3c:	d8801f15 	stw	r2,124(sp)
80200f40:	010001c4 	movi	r4,7
80200f44:	2081d316 	blt	r4,r2,80201694 <___vfprintf_internal_r+0x111c>
80200f48:	42000204 	addi	r8,r8,8
80200f4c:	9480010c 	andi	r18,r18,4
80200f50:	90003226 	beq	r18,zero,8020101c <___vfprintf_internal_r+0xaa4>
80200f54:	d9403117 	ldw	r5,196(sp)
80200f58:	d8802a17 	ldw	r2,168(sp)
80200f5c:	28a1c83a 	sub	r16,r5,r2
80200f60:	04002e0e 	bge	zero,r16,8020101c <___vfprintf_internal_r+0xaa4>
80200f64:	04400404 	movi	r17,16
80200f68:	d8801f17 	ldw	r2,124(sp)
80200f6c:	8c04a20e 	bge	r17,r16,802021f8 <___vfprintf_internal_r+0x1c80>
80200f70:	01600874 	movhi	r5,32801
80200f74:	29485084 	addi	r5,r5,8514
80200f78:	d9403515 	stw	r5,212(sp)
80200f7c:	048001c4 	movi	r18,7
80200f80:	dcc02c17 	ldw	r19,176(sp)
80200f84:	00000306 	br	80200f94 <___vfprintf_internal_r+0xa1c>
80200f88:	843ffc04 	addi	r16,r16,-16
80200f8c:	42000204 	addi	r8,r8,8
80200f90:	8c00130e 	bge	r17,r16,80200fe0 <___vfprintf_internal_r+0xa68>
80200f94:	01200874 	movhi	r4,32801
80200f98:	18c00404 	addi	r3,r3,16
80200f9c:	10800044 	addi	r2,r2,1
80200fa0:	21085084 	addi	r4,r4,8514
80200fa4:	41000015 	stw	r4,0(r8)
80200fa8:	44400115 	stw	r17,4(r8)
80200fac:	d8c02015 	stw	r3,128(sp)
80200fb0:	d8801f15 	stw	r2,124(sp)
80200fb4:	90bff40e 	bge	r18,r2,80200f88 <__reset+0xfa1e0f88>
80200fb8:	d9801e04 	addi	r6,sp,120
80200fbc:	b80b883a 	mov	r5,r23
80200fc0:	9809883a 	mov	r4,r19
80200fc4:	0207b740 	call	80207b74 <__sprint_r>
80200fc8:	103e6d1e 	bne	r2,zero,80200980 <__reset+0xfa1e0980>
80200fcc:	843ffc04 	addi	r16,r16,-16
80200fd0:	d8c02017 	ldw	r3,128(sp)
80200fd4:	d8801f17 	ldw	r2,124(sp)
80200fd8:	da000404 	addi	r8,sp,16
80200fdc:	8c3fed16 	blt	r17,r16,80200f94 <__reset+0xfa1e0f94>
80200fe0:	d9403517 	ldw	r5,212(sp)
80200fe4:	1c07883a 	add	r3,r3,r16
80200fe8:	10800044 	addi	r2,r2,1
80200fec:	41400015 	stw	r5,0(r8)
80200ff0:	44000115 	stw	r16,4(r8)
80200ff4:	d8c02015 	stw	r3,128(sp)
80200ff8:	d8801f15 	stw	r2,124(sp)
80200ffc:	010001c4 	movi	r4,7
80201000:	2080060e 	bge	r4,r2,8020101c <___vfprintf_internal_r+0xaa4>
80201004:	d9002c17 	ldw	r4,176(sp)
80201008:	d9801e04 	addi	r6,sp,120
8020100c:	b80b883a 	mov	r5,r23
80201010:	0207b740 	call	80207b74 <__sprint_r>
80201014:	103e5a1e 	bne	r2,zero,80200980 <__reset+0xfa1e0980>
80201018:	d8c02017 	ldw	r3,128(sp)
8020101c:	d8803117 	ldw	r2,196(sp)
80201020:	d9002a17 	ldw	r4,168(sp)
80201024:	1100010e 	bge	r2,r4,8020102c <___vfprintf_internal_r+0xab4>
80201028:	2005883a 	mov	r2,r4
8020102c:	d9402f17 	ldw	r5,188(sp)
80201030:	288b883a 	add	r5,r5,r2
80201034:	d9402f15 	stw	r5,188(sp)
80201038:	18019e1e 	bne	r3,zero,802016b4 <___vfprintf_internal_r+0x113c>
8020103c:	a8800007 	ldb	r2,0(r21)
80201040:	d8001f15 	stw	zero,124(sp)
80201044:	da000404 	addi	r8,sp,16
80201048:	103d851e 	bne	r2,zero,80200660 <__reset+0xfa1e0660>
8020104c:	a821883a 	mov	r16,r21
80201050:	003d9b06 	br	802006c0 <__reset+0xfa1e06c0>
80201054:	18c03fcc 	andi	r3,r3,255
80201058:	1805c11e 	bne	r3,zero,80202760 <___vfprintf_internal_r+0x21e8>
8020105c:	94800414 	ori	r18,r18,16
80201060:	9080080c 	andi	r2,r18,32
80201064:	10020c26 	beq	r2,zero,80201898 <___vfprintf_internal_r+0x1320>
80201068:	d8802d17 	ldw	r2,180(sp)
8020106c:	d9002917 	ldw	r4,164(sp)
80201070:	d8002785 	stb	zero,158(sp)
80201074:	10c00204 	addi	r3,r2,8
80201078:	14c00017 	ldw	r19,0(r2)
8020107c:	15800117 	ldw	r22,4(r2)
80201080:	20040f16 	blt	r4,zero,802020c0 <___vfprintf_internal_r+0x1b48>
80201084:	013fdfc4 	movi	r4,-129
80201088:	9d84b03a 	or	r2,r19,r22
8020108c:	d8c02d15 	stw	r3,180(sp)
80201090:	9124703a 	and	r18,r18,r4
80201094:	0039883a 	mov	fp,zero
80201098:	103e891e 	bne	r2,zero,80200ac0 <__reset+0xfa1e0ac0>
8020109c:	d9002917 	ldw	r4,164(sp)
802010a0:	2002c11e 	bne	r4,zero,80201ba8 <___vfprintf_internal_r+0x1630>
802010a4:	d8002915 	stw	zero,164(sp)
802010a8:	d8002e15 	stw	zero,184(sp)
802010ac:	dc001e04 	addi	r16,sp,120
802010b0:	003ef806 	br	80200c94 <__reset+0xfa1e0c94>
802010b4:	18c03fcc 	andi	r3,r3,255
802010b8:	18059d1e 	bne	r3,zero,80202730 <___vfprintf_internal_r+0x21b8>
802010bc:	01600874 	movhi	r5,32801
802010c0:	29484004 	addi	r5,r5,8448
802010c4:	d9403915 	stw	r5,228(sp)
802010c8:	9080080c 	andi	r2,r18,32
802010cc:	10005226 	beq	r2,zero,80201218 <___vfprintf_internal_r+0xca0>
802010d0:	d8802d17 	ldw	r2,180(sp)
802010d4:	14c00017 	ldw	r19,0(r2)
802010d8:	15800117 	ldw	r22,4(r2)
802010dc:	10800204 	addi	r2,r2,8
802010e0:	d8802d15 	stw	r2,180(sp)
802010e4:	9080004c 	andi	r2,r18,1
802010e8:	10019026 	beq	r2,zero,8020172c <___vfprintf_internal_r+0x11b4>
802010ec:	9d84b03a 	or	r2,r19,r22
802010f0:	10036926 	beq	r2,zero,80201e98 <___vfprintf_internal_r+0x1920>
802010f4:	d8c02917 	ldw	r3,164(sp)
802010f8:	00800c04 	movi	r2,48
802010fc:	d8802705 	stb	r2,156(sp)
80201100:	dc402745 	stb	r17,157(sp)
80201104:	d8002785 	stb	zero,158(sp)
80201108:	90800094 	ori	r2,r18,2
8020110c:	18045d16 	blt	r3,zero,80202284 <___vfprintf_internal_r+0x1d0c>
80201110:	00bfdfc4 	movi	r2,-129
80201114:	90a4703a 	and	r18,r18,r2
80201118:	94800094 	ori	r18,r18,2
8020111c:	0039883a 	mov	fp,zero
80201120:	d9003917 	ldw	r4,228(sp)
80201124:	dc001e04 	addi	r16,sp,120
80201128:	988003cc 	andi	r2,r19,15
8020112c:	b006973a 	slli	r3,r22,28
80201130:	2085883a 	add	r2,r4,r2
80201134:	9826d13a 	srli	r19,r19,4
80201138:	10800003 	ldbu	r2,0(r2)
8020113c:	b02cd13a 	srli	r22,r22,4
80201140:	843fffc4 	addi	r16,r16,-1
80201144:	1ce6b03a 	or	r19,r3,r19
80201148:	80800005 	stb	r2,0(r16)
8020114c:	9d84b03a 	or	r2,r19,r22
80201150:	103ff51e 	bne	r2,zero,80201128 <__reset+0xfa1e1128>
80201154:	d8c02817 	ldw	r3,160(sp)
80201158:	1c07c83a 	sub	r3,r3,r16
8020115c:	d8c02e15 	stw	r3,184(sp)
80201160:	003ecc06 	br	80200c94 <__reset+0xfa1e0c94>
80201164:	18c03fcc 	andi	r3,r3,255
80201168:	183e9f26 	beq	r3,zero,80200be8 <__reset+0xfa1e0be8>
8020116c:	d9c02785 	stb	r7,158(sp)
80201170:	003e9d06 	br	80200be8 <__reset+0xfa1e0be8>
80201174:	00c00044 	movi	r3,1
80201178:	01c00ac4 	movi	r7,43
8020117c:	ac400007 	ldb	r17,0(r21)
80201180:	003d5e06 	br	802006fc <__reset+0xfa1e06fc>
80201184:	94800814 	ori	r18,r18,32
80201188:	ac400007 	ldb	r17,0(r21)
8020118c:	003d5b06 	br	802006fc <__reset+0xfa1e06fc>
80201190:	d8c02d17 	ldw	r3,180(sp)
80201194:	d8002785 	stb	zero,158(sp)
80201198:	1c000017 	ldw	r16,0(r3)
8020119c:	1cc00104 	addi	r19,r3,4
802011a0:	80041926 	beq	r16,zero,80202208 <___vfprintf_internal_r+0x1c90>
802011a4:	d9002917 	ldw	r4,164(sp)
802011a8:	2003d016 	blt	r4,zero,802020ec <___vfprintf_internal_r+0x1b74>
802011ac:	200d883a 	mov	r6,r4
802011b0:	000b883a 	mov	r5,zero
802011b4:	8009883a 	mov	r4,r16
802011b8:	da003d15 	stw	r8,244(sp)
802011bc:	0205d880 	call	80205d88 <memchr>
802011c0:	da003d17 	ldw	r8,244(sp)
802011c4:	10045426 	beq	r2,zero,80202318 <___vfprintf_internal_r+0x1da0>
802011c8:	1405c83a 	sub	r2,r2,r16
802011cc:	d8802e15 	stw	r2,184(sp)
802011d0:	1003cc16 	blt	r2,zero,80202104 <___vfprintf_internal_r+0x1b8c>
802011d4:	df002783 	ldbu	fp,158(sp)
802011d8:	d8802a15 	stw	r2,168(sp)
802011dc:	dcc02d15 	stw	r19,180(sp)
802011e0:	d8002915 	stw	zero,164(sp)
802011e4:	d8003215 	stw	zero,200(sp)
802011e8:	003eb006 	br	80200cac <__reset+0xfa1e0cac>
802011ec:	18c03fcc 	andi	r3,r3,255
802011f0:	183f9b26 	beq	r3,zero,80201060 <__reset+0xfa1e1060>
802011f4:	d9c02785 	stb	r7,158(sp)
802011f8:	003f9906 	br	80201060 <__reset+0xfa1e1060>
802011fc:	18c03fcc 	andi	r3,r3,255
80201200:	1805551e 	bne	r3,zero,80202758 <___vfprintf_internal_r+0x21e0>
80201204:	01600874 	movhi	r5,32801
80201208:	29484504 	addi	r5,r5,8468
8020120c:	d9403915 	stw	r5,228(sp)
80201210:	9080080c 	andi	r2,r18,32
80201214:	103fae1e 	bne	r2,zero,802010d0 <__reset+0xfa1e10d0>
80201218:	9080040c 	andi	r2,r18,16
8020121c:	1002de26 	beq	r2,zero,80201d98 <___vfprintf_internal_r+0x1820>
80201220:	d8c02d17 	ldw	r3,180(sp)
80201224:	002d883a 	mov	r22,zero
80201228:	1cc00017 	ldw	r19,0(r3)
8020122c:	18c00104 	addi	r3,r3,4
80201230:	d8c02d15 	stw	r3,180(sp)
80201234:	003fab06 	br	802010e4 <__reset+0xfa1e10e4>
80201238:	38803fcc 	andi	r2,r7,255
8020123c:	1080201c 	xori	r2,r2,128
80201240:	10bfe004 	addi	r2,r2,-128
80201244:	1002d21e 	bne	r2,zero,80201d90 <___vfprintf_internal_r+0x1818>
80201248:	00c00044 	movi	r3,1
8020124c:	01c00804 	movi	r7,32
80201250:	ac400007 	ldb	r17,0(r21)
80201254:	003d2906 	br	802006fc <__reset+0xfa1e06fc>
80201258:	94800054 	ori	r18,r18,1
8020125c:	ac400007 	ldb	r17,0(r21)
80201260:	003d2606 	br	802006fc <__reset+0xfa1e06fc>
80201264:	18c03fcc 	andi	r3,r3,255
80201268:	183e0526 	beq	r3,zero,80200a80 <__reset+0xfa1e0a80>
8020126c:	d9c02785 	stb	r7,158(sp)
80201270:	003e0306 	br	80200a80 <__reset+0xfa1e0a80>
80201274:	94801014 	ori	r18,r18,64
80201278:	ac400007 	ldb	r17,0(r21)
8020127c:	003d1f06 	br	802006fc <__reset+0xfa1e06fc>
80201280:	ac400007 	ldb	r17,0(r21)
80201284:	8a438726 	beq	r17,r9,802020a4 <___vfprintf_internal_r+0x1b2c>
80201288:	94800414 	ori	r18,r18,16
8020128c:	003d1b06 	br	802006fc <__reset+0xfa1e06fc>
80201290:	18c03fcc 	andi	r3,r3,255
80201294:	1805341e 	bne	r3,zero,80202768 <___vfprintf_internal_r+0x21f0>
80201298:	9080080c 	andi	r2,r18,32
8020129c:	1002cd26 	beq	r2,zero,80201dd4 <___vfprintf_internal_r+0x185c>
802012a0:	d9402d17 	ldw	r5,180(sp)
802012a4:	d9002f17 	ldw	r4,188(sp)
802012a8:	28800017 	ldw	r2,0(r5)
802012ac:	2007d7fa 	srai	r3,r4,31
802012b0:	29400104 	addi	r5,r5,4
802012b4:	d9402d15 	stw	r5,180(sp)
802012b8:	11000015 	stw	r4,0(r2)
802012bc:	10c00115 	stw	r3,4(r2)
802012c0:	003ce506 	br	80200658 <__reset+0xfa1e0658>
802012c4:	d8c02d17 	ldw	r3,180(sp)
802012c8:	d9002d17 	ldw	r4,180(sp)
802012cc:	d8002785 	stb	zero,158(sp)
802012d0:	18800017 	ldw	r2,0(r3)
802012d4:	21000104 	addi	r4,r4,4
802012d8:	00c00044 	movi	r3,1
802012dc:	d8c02a15 	stw	r3,168(sp)
802012e0:	d8801405 	stb	r2,80(sp)
802012e4:	d9002d15 	stw	r4,180(sp)
802012e8:	d8c02e15 	stw	r3,184(sp)
802012ec:	d8002915 	stw	zero,164(sp)
802012f0:	d8003215 	stw	zero,200(sp)
802012f4:	dc001404 	addi	r16,sp,80
802012f8:	0039883a 	mov	fp,zero
802012fc:	003e7206 	br	80200cc8 <__reset+0xfa1e0cc8>
80201300:	01200874 	movhi	r4,32801
80201304:	21084504 	addi	r4,r4,8468
80201308:	0039883a 	mov	fp,zero
8020130c:	d9003915 	stw	r4,228(sp)
80201310:	04401e04 	movi	r17,120
80201314:	003f8206 	br	80201120 <__reset+0xfa1e1120>
80201318:	18c03fcc 	andi	r3,r3,255
8020131c:	1805061e 	bne	r3,zero,80202738 <___vfprintf_internal_r+0x21c0>
80201320:	883d9126 	beq	r17,zero,80200968 <__reset+0xfa1e0968>
80201324:	00c00044 	movi	r3,1
80201328:	d8c02a15 	stw	r3,168(sp)
8020132c:	dc401405 	stb	r17,80(sp)
80201330:	d8002785 	stb	zero,158(sp)
80201334:	003fec06 	br	802012e8 <__reset+0xfa1e12e8>
80201338:	01600874 	movhi	r5,32801
8020133c:	29484504 	addi	r5,r5,8468
80201340:	d9403915 	stw	r5,228(sp)
80201344:	d8c02d15 	stw	r3,180(sp)
80201348:	1025883a 	mov	r18,r2
8020134c:	04401e04 	movi	r17,120
80201350:	9d84b03a 	or	r2,r19,r22
80201354:	1000fc1e 	bne	r2,zero,80201748 <___vfprintf_internal_r+0x11d0>
80201358:	0039883a 	mov	fp,zero
8020135c:	00800084 	movi	r2,2
80201360:	10803fcc 	andi	r2,r2,255
80201364:	00c00044 	movi	r3,1
80201368:	10c20f26 	beq	r2,r3,80201ba8 <___vfprintf_internal_r+0x1630>
8020136c:	00c00084 	movi	r3,2
80201370:	10fd6326 	beq	r2,r3,80200900 <__reset+0xfa1e0900>
80201374:	003e2d06 	br	80200c2c <__reset+0xfa1e0c2c>
80201378:	d8c02017 	ldw	r3,128(sp)
8020137c:	003e9306 	br	80200dcc <__reset+0xfa1e0dcc>
80201380:	00801944 	movi	r2,101
80201384:	14407e0e 	bge	r2,r17,80201580 <___vfprintf_internal_r+0x1008>
80201388:	d9003617 	ldw	r4,216(sp)
8020138c:	d9403817 	ldw	r5,224(sp)
80201390:	000d883a 	mov	r6,zero
80201394:	000f883a 	mov	r7,zero
80201398:	d8c03c15 	stw	r3,240(sp)
8020139c:	da003d15 	stw	r8,244(sp)
802013a0:	020b7ec0 	call	8020b7ec <__eqdf2>
802013a4:	d8c03c17 	ldw	r3,240(sp)
802013a8:	da003d17 	ldw	r8,244(sp)
802013ac:	1000f71e 	bne	r2,zero,8020178c <___vfprintf_internal_r+0x1214>
802013b0:	d8801f17 	ldw	r2,124(sp)
802013b4:	01200874 	movhi	r4,32801
802013b8:	21084c04 	addi	r4,r4,8496
802013bc:	18c00044 	addi	r3,r3,1
802013c0:	10800044 	addi	r2,r2,1
802013c4:	41000015 	stw	r4,0(r8)
802013c8:	01000044 	movi	r4,1
802013cc:	41000115 	stw	r4,4(r8)
802013d0:	d8c02015 	stw	r3,128(sp)
802013d4:	d8801f15 	stw	r2,124(sp)
802013d8:	010001c4 	movi	r4,7
802013dc:	2082b816 	blt	r4,r2,80201ec0 <___vfprintf_internal_r+0x1948>
802013e0:	42000204 	addi	r8,r8,8
802013e4:	d8802617 	ldw	r2,152(sp)
802013e8:	d9403317 	ldw	r5,204(sp)
802013ec:	11400216 	blt	r2,r5,802013f8 <___vfprintf_internal_r+0xe80>
802013f0:	9080004c 	andi	r2,r18,1
802013f4:	103ed526 	beq	r2,zero,80200f4c <__reset+0xfa1e0f4c>
802013f8:	d8803717 	ldw	r2,220(sp)
802013fc:	d9003417 	ldw	r4,208(sp)
80201400:	d9403717 	ldw	r5,220(sp)
80201404:	1887883a 	add	r3,r3,r2
80201408:	d8801f17 	ldw	r2,124(sp)
8020140c:	41000015 	stw	r4,0(r8)
80201410:	41400115 	stw	r5,4(r8)
80201414:	10800044 	addi	r2,r2,1
80201418:	d8c02015 	stw	r3,128(sp)
8020141c:	d8801f15 	stw	r2,124(sp)
80201420:	010001c4 	movi	r4,7
80201424:	20832916 	blt	r4,r2,802020cc <___vfprintf_internal_r+0x1b54>
80201428:	42000204 	addi	r8,r8,8
8020142c:	d8803317 	ldw	r2,204(sp)
80201430:	143fffc4 	addi	r16,r2,-1
80201434:	043ec50e 	bge	zero,r16,80200f4c <__reset+0xfa1e0f4c>
80201438:	04400404 	movi	r17,16
8020143c:	d8801f17 	ldw	r2,124(sp)
80201440:	8c00880e 	bge	r17,r16,80201664 <___vfprintf_internal_r+0x10ec>
80201444:	01600874 	movhi	r5,32801
80201448:	29484c84 	addi	r5,r5,8498
8020144c:	d9402b15 	stw	r5,172(sp)
80201450:	058001c4 	movi	r22,7
80201454:	dcc02c17 	ldw	r19,176(sp)
80201458:	00000306 	br	80201468 <___vfprintf_internal_r+0xef0>
8020145c:	42000204 	addi	r8,r8,8
80201460:	843ffc04 	addi	r16,r16,-16
80201464:	8c00820e 	bge	r17,r16,80201670 <___vfprintf_internal_r+0x10f8>
80201468:	18c00404 	addi	r3,r3,16
8020146c:	10800044 	addi	r2,r2,1
80201470:	45000015 	stw	r20,0(r8)
80201474:	44400115 	stw	r17,4(r8)
80201478:	d8c02015 	stw	r3,128(sp)
8020147c:	d8801f15 	stw	r2,124(sp)
80201480:	b0bff60e 	bge	r22,r2,8020145c <__reset+0xfa1e145c>
80201484:	d9801e04 	addi	r6,sp,120
80201488:	b80b883a 	mov	r5,r23
8020148c:	9809883a 	mov	r4,r19
80201490:	0207b740 	call	80207b74 <__sprint_r>
80201494:	103d3a1e 	bne	r2,zero,80200980 <__reset+0xfa1e0980>
80201498:	d8c02017 	ldw	r3,128(sp)
8020149c:	d8801f17 	ldw	r2,124(sp)
802014a0:	da000404 	addi	r8,sp,16
802014a4:	003fee06 	br	80201460 <__reset+0xfa1e1460>
802014a8:	d9403117 	ldw	r5,196(sp)
802014ac:	d8802a17 	ldw	r2,168(sp)
802014b0:	28adc83a 	sub	r22,r5,r2
802014b4:	05be630e 	bge	zero,r22,80200e44 <__reset+0xfa1e0e44>
802014b8:	07000404 	movi	fp,16
802014bc:	d8801f17 	ldw	r2,124(sp)
802014c0:	e5838f0e 	bge	fp,r22,80202300 <___vfprintf_internal_r+0x1d88>
802014c4:	01600874 	movhi	r5,32801
802014c8:	29484c84 	addi	r5,r5,8498
802014cc:	dc403015 	stw	r17,192(sp)
802014d0:	d9402b15 	stw	r5,172(sp)
802014d4:	b023883a 	mov	r17,r22
802014d8:	04c001c4 	movi	r19,7
802014dc:	a82d883a 	mov	r22,r21
802014e0:	902b883a 	mov	r21,r18
802014e4:	8025883a 	mov	r18,r16
802014e8:	dc002c17 	ldw	r16,176(sp)
802014ec:	00000306 	br	802014fc <___vfprintf_internal_r+0xf84>
802014f0:	8c7ffc04 	addi	r17,r17,-16
802014f4:	42000204 	addi	r8,r8,8
802014f8:	e440110e 	bge	fp,r17,80201540 <___vfprintf_internal_r+0xfc8>
802014fc:	18c00404 	addi	r3,r3,16
80201500:	10800044 	addi	r2,r2,1
80201504:	45000015 	stw	r20,0(r8)
80201508:	47000115 	stw	fp,4(r8)
8020150c:	d8c02015 	stw	r3,128(sp)
80201510:	d8801f15 	stw	r2,124(sp)
80201514:	98bff60e 	bge	r19,r2,802014f0 <__reset+0xfa1e14f0>
80201518:	d9801e04 	addi	r6,sp,120
8020151c:	b80b883a 	mov	r5,r23
80201520:	8009883a 	mov	r4,r16
80201524:	0207b740 	call	80207b74 <__sprint_r>
80201528:	103d151e 	bne	r2,zero,80200980 <__reset+0xfa1e0980>
8020152c:	8c7ffc04 	addi	r17,r17,-16
80201530:	d8c02017 	ldw	r3,128(sp)
80201534:	d8801f17 	ldw	r2,124(sp)
80201538:	da000404 	addi	r8,sp,16
8020153c:	e47fef16 	blt	fp,r17,802014fc <__reset+0xfa1e14fc>
80201540:	9021883a 	mov	r16,r18
80201544:	a825883a 	mov	r18,r21
80201548:	b02b883a 	mov	r21,r22
8020154c:	882d883a 	mov	r22,r17
80201550:	dc403017 	ldw	r17,192(sp)
80201554:	d9002b17 	ldw	r4,172(sp)
80201558:	1d87883a 	add	r3,r3,r22
8020155c:	10800044 	addi	r2,r2,1
80201560:	41000015 	stw	r4,0(r8)
80201564:	45800115 	stw	r22,4(r8)
80201568:	d8c02015 	stw	r3,128(sp)
8020156c:	d8801f15 	stw	r2,124(sp)
80201570:	010001c4 	movi	r4,7
80201574:	20818e16 	blt	r4,r2,80201bb0 <___vfprintf_internal_r+0x1638>
80201578:	42000204 	addi	r8,r8,8
8020157c:	003e3106 	br	80200e44 <__reset+0xfa1e0e44>
80201580:	d9403317 	ldw	r5,204(sp)
80201584:	00800044 	movi	r2,1
80201588:	18c00044 	addi	r3,r3,1
8020158c:	1141530e 	bge	r2,r5,80201adc <___vfprintf_internal_r+0x1564>
80201590:	dc401f17 	ldw	r17,124(sp)
80201594:	00800044 	movi	r2,1
80201598:	40800115 	stw	r2,4(r8)
8020159c:	8c400044 	addi	r17,r17,1
802015a0:	44000015 	stw	r16,0(r8)
802015a4:	d8c02015 	stw	r3,128(sp)
802015a8:	dc401f15 	stw	r17,124(sp)
802015ac:	008001c4 	movi	r2,7
802015b0:	14416b16 	blt	r2,r17,80201b60 <___vfprintf_internal_r+0x15e8>
802015b4:	42000204 	addi	r8,r8,8
802015b8:	d8803717 	ldw	r2,220(sp)
802015bc:	d9003417 	ldw	r4,208(sp)
802015c0:	8c400044 	addi	r17,r17,1
802015c4:	10c7883a 	add	r3,r2,r3
802015c8:	40800115 	stw	r2,4(r8)
802015cc:	41000015 	stw	r4,0(r8)
802015d0:	d8c02015 	stw	r3,128(sp)
802015d4:	dc401f15 	stw	r17,124(sp)
802015d8:	008001c4 	movi	r2,7
802015dc:	14416916 	blt	r2,r17,80201b84 <___vfprintf_internal_r+0x160c>
802015e0:	45800204 	addi	r22,r8,8
802015e4:	d9003617 	ldw	r4,216(sp)
802015e8:	d9403817 	ldw	r5,224(sp)
802015ec:	000d883a 	mov	r6,zero
802015f0:	000f883a 	mov	r7,zero
802015f4:	d8c03c15 	stw	r3,240(sp)
802015f8:	020b7ec0 	call	8020b7ec <__eqdf2>
802015fc:	d8c03c17 	ldw	r3,240(sp)
80201600:	1000bc26 	beq	r2,zero,802018f4 <___vfprintf_internal_r+0x137c>
80201604:	d9403317 	ldw	r5,204(sp)
80201608:	84000044 	addi	r16,r16,1
8020160c:	8c400044 	addi	r17,r17,1
80201610:	28bfffc4 	addi	r2,r5,-1
80201614:	1887883a 	add	r3,r3,r2
80201618:	b0800115 	stw	r2,4(r22)
8020161c:	b4000015 	stw	r16,0(r22)
80201620:	d8c02015 	stw	r3,128(sp)
80201624:	dc401f15 	stw	r17,124(sp)
80201628:	008001c4 	movi	r2,7
8020162c:	14414316 	blt	r2,r17,80201b3c <___vfprintf_internal_r+0x15c4>
80201630:	b5800204 	addi	r22,r22,8
80201634:	d9003a17 	ldw	r4,232(sp)
80201638:	df0022c4 	addi	fp,sp,139
8020163c:	8c400044 	addi	r17,r17,1
80201640:	20c7883a 	add	r3,r4,r3
80201644:	b7000015 	stw	fp,0(r22)
80201648:	b1000115 	stw	r4,4(r22)
8020164c:	d8c02015 	stw	r3,128(sp)
80201650:	dc401f15 	stw	r17,124(sp)
80201654:	008001c4 	movi	r2,7
80201658:	14400e16 	blt	r2,r17,80201694 <___vfprintf_internal_r+0x111c>
8020165c:	b2000204 	addi	r8,r22,8
80201660:	003e3a06 	br	80200f4c <__reset+0xfa1e0f4c>
80201664:	01200874 	movhi	r4,32801
80201668:	21084c84 	addi	r4,r4,8498
8020166c:	d9002b15 	stw	r4,172(sp)
80201670:	d9002b17 	ldw	r4,172(sp)
80201674:	1c07883a 	add	r3,r3,r16
80201678:	44000115 	stw	r16,4(r8)
8020167c:	41000015 	stw	r4,0(r8)
80201680:	10800044 	addi	r2,r2,1
80201684:	d8c02015 	stw	r3,128(sp)
80201688:	d8801f15 	stw	r2,124(sp)
8020168c:	010001c4 	movi	r4,7
80201690:	20be2d0e 	bge	r4,r2,80200f48 <__reset+0xfa1e0f48>
80201694:	d9002c17 	ldw	r4,176(sp)
80201698:	d9801e04 	addi	r6,sp,120
8020169c:	b80b883a 	mov	r5,r23
802016a0:	0207b740 	call	80207b74 <__sprint_r>
802016a4:	103cb61e 	bne	r2,zero,80200980 <__reset+0xfa1e0980>
802016a8:	d8c02017 	ldw	r3,128(sp)
802016ac:	da000404 	addi	r8,sp,16
802016b0:	003e2606 	br	80200f4c <__reset+0xfa1e0f4c>
802016b4:	d9002c17 	ldw	r4,176(sp)
802016b8:	d9801e04 	addi	r6,sp,120
802016bc:	b80b883a 	mov	r5,r23
802016c0:	0207b740 	call	80207b74 <__sprint_r>
802016c4:	103e5d26 	beq	r2,zero,8020103c <__reset+0xfa1e103c>
802016c8:	003cad06 	br	80200980 <__reset+0xfa1e0980>
802016cc:	d9002c17 	ldw	r4,176(sp)
802016d0:	d9801e04 	addi	r6,sp,120
802016d4:	b80b883a 	mov	r5,r23
802016d8:	0207b740 	call	80207b74 <__sprint_r>
802016dc:	103ca81e 	bne	r2,zero,80200980 <__reset+0xfa1e0980>
802016e0:	d8c02017 	ldw	r3,128(sp)
802016e4:	da000404 	addi	r8,sp,16
802016e8:	003e0b06 	br	80200f18 <__reset+0xfa1e0f18>
802016ec:	d9002c17 	ldw	r4,176(sp)
802016f0:	d9801e04 	addi	r6,sp,120
802016f4:	b80b883a 	mov	r5,r23
802016f8:	0207b740 	call	80207b74 <__sprint_r>
802016fc:	103ca01e 	bne	r2,zero,80200980 <__reset+0xfa1e0980>
80201700:	d8c02017 	ldw	r3,128(sp)
80201704:	da000404 	addi	r8,sp,16
80201708:	003dbd06 	br	80200e00 <__reset+0xfa1e0e00>
8020170c:	d9002c17 	ldw	r4,176(sp)
80201710:	d9801e04 	addi	r6,sp,120
80201714:	b80b883a 	mov	r5,r23
80201718:	0207b740 	call	80207b74 <__sprint_r>
8020171c:	103c981e 	bne	r2,zero,80200980 <__reset+0xfa1e0980>
80201720:	d8c02017 	ldw	r3,128(sp)
80201724:	da000404 	addi	r8,sp,16
80201728:	003dc306 	br	80200e38 <__reset+0xfa1e0e38>
8020172c:	d8802917 	ldw	r2,164(sp)
80201730:	d8002785 	stb	zero,158(sp)
80201734:	103f0616 	blt	r2,zero,80201350 <__reset+0xfa1e1350>
80201738:	00ffdfc4 	movi	r3,-129
8020173c:	9d84b03a 	or	r2,r19,r22
80201740:	90e4703a 	and	r18,r18,r3
80201744:	103c6b26 	beq	r2,zero,802008f4 <__reset+0xfa1e08f4>
80201748:	0039883a 	mov	fp,zero
8020174c:	003e7406 	br	80201120 <__reset+0xfa1e1120>
80201750:	9080040c 	andi	r2,r18,16
80201754:	1001b326 	beq	r2,zero,80201e24 <___vfprintf_internal_r+0x18ac>
80201758:	d9002d17 	ldw	r4,180(sp)
8020175c:	d9402917 	ldw	r5,164(sp)
80201760:	d8002785 	stb	zero,158(sp)
80201764:	20800104 	addi	r2,r4,4
80201768:	24c00017 	ldw	r19,0(r4)
8020176c:	002d883a 	mov	r22,zero
80201770:	2801b516 	blt	r5,zero,80201e48 <___vfprintf_internal_r+0x18d0>
80201774:	00ffdfc4 	movi	r3,-129
80201778:	d8802d15 	stw	r2,180(sp)
8020177c:	90e4703a 	and	r18,r18,r3
80201780:	983d2726 	beq	r19,zero,80200c20 <__reset+0xfa1e0c20>
80201784:	0039883a 	mov	fp,zero
80201788:	003d2a06 	br	80200c34 <__reset+0xfa1e0c34>
8020178c:	dc402617 	ldw	r17,152(sp)
80201790:	0441d30e 	bge	zero,r17,80201ee0 <___vfprintf_internal_r+0x1968>
80201794:	dc403217 	ldw	r17,200(sp)
80201798:	d8803317 	ldw	r2,204(sp)
8020179c:	1440010e 	bge	r2,r17,802017a4 <___vfprintf_internal_r+0x122c>
802017a0:	1023883a 	mov	r17,r2
802017a4:	04400a0e 	bge	zero,r17,802017d0 <___vfprintf_internal_r+0x1258>
802017a8:	d8801f17 	ldw	r2,124(sp)
802017ac:	1c47883a 	add	r3,r3,r17
802017b0:	44000015 	stw	r16,0(r8)
802017b4:	10800044 	addi	r2,r2,1
802017b8:	44400115 	stw	r17,4(r8)
802017bc:	d8c02015 	stw	r3,128(sp)
802017c0:	d8801f15 	stw	r2,124(sp)
802017c4:	010001c4 	movi	r4,7
802017c8:	20826516 	blt	r4,r2,80202160 <___vfprintf_internal_r+0x1be8>
802017cc:	42000204 	addi	r8,r8,8
802017d0:	88026116 	blt	r17,zero,80202158 <___vfprintf_internal_r+0x1be0>
802017d4:	d9003217 	ldw	r4,200(sp)
802017d8:	2463c83a 	sub	r17,r4,r17
802017dc:	04407b0e 	bge	zero,r17,802019cc <___vfprintf_internal_r+0x1454>
802017e0:	05800404 	movi	r22,16
802017e4:	d8801f17 	ldw	r2,124(sp)
802017e8:	b4419d0e 	bge	r22,r17,80201e60 <___vfprintf_internal_r+0x18e8>
802017ec:	01200874 	movhi	r4,32801
802017f0:	21084c84 	addi	r4,r4,8498
802017f4:	d9002b15 	stw	r4,172(sp)
802017f8:	070001c4 	movi	fp,7
802017fc:	dcc02c17 	ldw	r19,176(sp)
80201800:	00000306 	br	80201810 <___vfprintf_internal_r+0x1298>
80201804:	42000204 	addi	r8,r8,8
80201808:	8c7ffc04 	addi	r17,r17,-16
8020180c:	b441970e 	bge	r22,r17,80201e6c <___vfprintf_internal_r+0x18f4>
80201810:	18c00404 	addi	r3,r3,16
80201814:	10800044 	addi	r2,r2,1
80201818:	45000015 	stw	r20,0(r8)
8020181c:	45800115 	stw	r22,4(r8)
80201820:	d8c02015 	stw	r3,128(sp)
80201824:	d8801f15 	stw	r2,124(sp)
80201828:	e0bff60e 	bge	fp,r2,80201804 <__reset+0xfa1e1804>
8020182c:	d9801e04 	addi	r6,sp,120
80201830:	b80b883a 	mov	r5,r23
80201834:	9809883a 	mov	r4,r19
80201838:	0207b740 	call	80207b74 <__sprint_r>
8020183c:	103c501e 	bne	r2,zero,80200980 <__reset+0xfa1e0980>
80201840:	d8c02017 	ldw	r3,128(sp)
80201844:	d8801f17 	ldw	r2,124(sp)
80201848:	da000404 	addi	r8,sp,16
8020184c:	003fee06 	br	80201808 <__reset+0xfa1e1808>
80201850:	d9002c17 	ldw	r4,176(sp)
80201854:	d9801e04 	addi	r6,sp,120
80201858:	b80b883a 	mov	r5,r23
8020185c:	0207b740 	call	80207b74 <__sprint_r>
80201860:	103c471e 	bne	r2,zero,80200980 <__reset+0xfa1e0980>
80201864:	d8c02017 	ldw	r3,128(sp)
80201868:	df002787 	ldb	fp,158(sp)
8020186c:	da000404 	addi	r8,sp,16
80201870:	003d5606 	br	80200dcc <__reset+0xfa1e0dcc>
80201874:	9080040c 	andi	r2,r18,16
80201878:	10016126 	beq	r2,zero,80201e00 <___vfprintf_internal_r+0x1888>
8020187c:	d8802d17 	ldw	r2,180(sp)
80201880:	14c00017 	ldw	r19,0(r2)
80201884:	10800104 	addi	r2,r2,4
80201888:	d8802d15 	stw	r2,180(sp)
8020188c:	982dd7fa 	srai	r22,r19,31
80201890:	b005883a 	mov	r2,r22
80201894:	003c8206 	br	80200aa0 <__reset+0xfa1e0aa0>
80201898:	9080040c 	andi	r2,r18,16
8020189c:	10003526 	beq	r2,zero,80201974 <___vfprintf_internal_r+0x13fc>
802018a0:	d9402d17 	ldw	r5,180(sp)
802018a4:	d8c02917 	ldw	r3,164(sp)
802018a8:	d8002785 	stb	zero,158(sp)
802018ac:	28800104 	addi	r2,r5,4
802018b0:	2cc00017 	ldw	r19,0(r5)
802018b4:	002d883a 	mov	r22,zero
802018b8:	18003716 	blt	r3,zero,80201998 <___vfprintf_internal_r+0x1420>
802018bc:	00ffdfc4 	movi	r3,-129
802018c0:	d8802d15 	stw	r2,180(sp)
802018c4:	90e4703a 	and	r18,r18,r3
802018c8:	0039883a 	mov	fp,zero
802018cc:	983df326 	beq	r19,zero,8020109c <__reset+0xfa1e109c>
802018d0:	00800244 	movi	r2,9
802018d4:	14fc7b36 	bltu	r2,r19,80200ac4 <__reset+0xfa1e0ac4>
802018d8:	d8c02817 	ldw	r3,160(sp)
802018dc:	dc001dc4 	addi	r16,sp,119
802018e0:	9cc00c04 	addi	r19,r19,48
802018e4:	1c07c83a 	sub	r3,r3,r16
802018e8:	dcc01dc5 	stb	r19,119(sp)
802018ec:	d8c02e15 	stw	r3,184(sp)
802018f0:	003ce806 	br	80200c94 <__reset+0xfa1e0c94>
802018f4:	d8803317 	ldw	r2,204(sp)
802018f8:	143fffc4 	addi	r16,r2,-1
802018fc:	043f4d0e 	bge	zero,r16,80201634 <__reset+0xfa1e1634>
80201900:	07000404 	movi	fp,16
80201904:	e400810e 	bge	fp,r16,80201b0c <___vfprintf_internal_r+0x1594>
80201908:	01600874 	movhi	r5,32801
8020190c:	29484c84 	addi	r5,r5,8498
80201910:	d9402b15 	stw	r5,172(sp)
80201914:	01c001c4 	movi	r7,7
80201918:	dcc02c17 	ldw	r19,176(sp)
8020191c:	00000306 	br	8020192c <___vfprintf_internal_r+0x13b4>
80201920:	b5800204 	addi	r22,r22,8
80201924:	843ffc04 	addi	r16,r16,-16
80201928:	e4007b0e 	bge	fp,r16,80201b18 <___vfprintf_internal_r+0x15a0>
8020192c:	18c00404 	addi	r3,r3,16
80201930:	8c400044 	addi	r17,r17,1
80201934:	b5000015 	stw	r20,0(r22)
80201938:	b7000115 	stw	fp,4(r22)
8020193c:	d8c02015 	stw	r3,128(sp)
80201940:	dc401f15 	stw	r17,124(sp)
80201944:	3c7ff60e 	bge	r7,r17,80201920 <__reset+0xfa1e1920>
80201948:	d9801e04 	addi	r6,sp,120
8020194c:	b80b883a 	mov	r5,r23
80201950:	9809883a 	mov	r4,r19
80201954:	d9c03c15 	stw	r7,240(sp)
80201958:	0207b740 	call	80207b74 <__sprint_r>
8020195c:	d9c03c17 	ldw	r7,240(sp)
80201960:	103c071e 	bne	r2,zero,80200980 <__reset+0xfa1e0980>
80201964:	d8c02017 	ldw	r3,128(sp)
80201968:	dc401f17 	ldw	r17,124(sp)
8020196c:	dd800404 	addi	r22,sp,16
80201970:	003fec06 	br	80201924 <__reset+0xfa1e1924>
80201974:	9080100c 	andi	r2,r18,64
80201978:	d8002785 	stb	zero,158(sp)
8020197c:	10010e26 	beq	r2,zero,80201db8 <___vfprintf_internal_r+0x1840>
80201980:	d9002d17 	ldw	r4,180(sp)
80201984:	d9402917 	ldw	r5,164(sp)
80201988:	002d883a 	mov	r22,zero
8020198c:	20800104 	addi	r2,r4,4
80201990:	24c0000b 	ldhu	r19,0(r4)
80201994:	283fc90e 	bge	r5,zero,802018bc <__reset+0xfa1e18bc>
80201998:	d8802d15 	stw	r2,180(sp)
8020199c:	0039883a 	mov	fp,zero
802019a0:	9d84b03a 	or	r2,r19,r22
802019a4:	103c461e 	bne	r2,zero,80200ac0 <__reset+0xfa1e0ac0>
802019a8:	00800044 	movi	r2,1
802019ac:	003e6c06 	br	80201360 <__reset+0xfa1e1360>
802019b0:	d9002c17 	ldw	r4,176(sp)
802019b4:	d9801e04 	addi	r6,sp,120
802019b8:	b80b883a 	mov	r5,r23
802019bc:	0207b740 	call	80207b74 <__sprint_r>
802019c0:	103bef1e 	bne	r2,zero,80200980 <__reset+0xfa1e0980>
802019c4:	d8c02017 	ldw	r3,128(sp)
802019c8:	da000404 	addi	r8,sp,16
802019cc:	d9003217 	ldw	r4,200(sp)
802019d0:	d8802617 	ldw	r2,152(sp)
802019d4:	d9403317 	ldw	r5,204(sp)
802019d8:	8123883a 	add	r17,r16,r4
802019dc:	11400216 	blt	r2,r5,802019e8 <___vfprintf_internal_r+0x1470>
802019e0:	9100004c 	andi	r4,r18,1
802019e4:	20000d26 	beq	r4,zero,80201a1c <___vfprintf_internal_r+0x14a4>
802019e8:	d9003717 	ldw	r4,220(sp)
802019ec:	d9403417 	ldw	r5,208(sp)
802019f0:	1907883a 	add	r3,r3,r4
802019f4:	d9001f17 	ldw	r4,124(sp)
802019f8:	41400015 	stw	r5,0(r8)
802019fc:	d9403717 	ldw	r5,220(sp)
80201a00:	21000044 	addi	r4,r4,1
80201a04:	d8c02015 	stw	r3,128(sp)
80201a08:	41400115 	stw	r5,4(r8)
80201a0c:	d9001f15 	stw	r4,124(sp)
80201a10:	014001c4 	movi	r5,7
80201a14:	2901e816 	blt	r5,r4,802021b8 <___vfprintf_internal_r+0x1c40>
80201a18:	42000204 	addi	r8,r8,8
80201a1c:	d9003317 	ldw	r4,204(sp)
80201a20:	8121883a 	add	r16,r16,r4
80201a24:	2085c83a 	sub	r2,r4,r2
80201a28:	8461c83a 	sub	r16,r16,r17
80201a2c:	1400010e 	bge	r2,r16,80201a34 <___vfprintf_internal_r+0x14bc>
80201a30:	1021883a 	mov	r16,r2
80201a34:	04000a0e 	bge	zero,r16,80201a60 <___vfprintf_internal_r+0x14e8>
80201a38:	d9001f17 	ldw	r4,124(sp)
80201a3c:	1c07883a 	add	r3,r3,r16
80201a40:	44400015 	stw	r17,0(r8)
80201a44:	21000044 	addi	r4,r4,1
80201a48:	44000115 	stw	r16,4(r8)
80201a4c:	d8c02015 	stw	r3,128(sp)
80201a50:	d9001f15 	stw	r4,124(sp)
80201a54:	014001c4 	movi	r5,7
80201a58:	2901fb16 	blt	r5,r4,80202248 <___vfprintf_internal_r+0x1cd0>
80201a5c:	42000204 	addi	r8,r8,8
80201a60:	8001f716 	blt	r16,zero,80202240 <___vfprintf_internal_r+0x1cc8>
80201a64:	1421c83a 	sub	r16,r2,r16
80201a68:	043d380e 	bge	zero,r16,80200f4c <__reset+0xfa1e0f4c>
80201a6c:	04400404 	movi	r17,16
80201a70:	d8801f17 	ldw	r2,124(sp)
80201a74:	8c3efb0e 	bge	r17,r16,80201664 <__reset+0xfa1e1664>
80201a78:	01600874 	movhi	r5,32801
80201a7c:	29484c84 	addi	r5,r5,8498
80201a80:	d9402b15 	stw	r5,172(sp)
80201a84:	058001c4 	movi	r22,7
80201a88:	dcc02c17 	ldw	r19,176(sp)
80201a8c:	00000306 	br	80201a9c <___vfprintf_internal_r+0x1524>
80201a90:	42000204 	addi	r8,r8,8
80201a94:	843ffc04 	addi	r16,r16,-16
80201a98:	8c3ef50e 	bge	r17,r16,80201670 <__reset+0xfa1e1670>
80201a9c:	18c00404 	addi	r3,r3,16
80201aa0:	10800044 	addi	r2,r2,1
80201aa4:	45000015 	stw	r20,0(r8)
80201aa8:	44400115 	stw	r17,4(r8)
80201aac:	d8c02015 	stw	r3,128(sp)
80201ab0:	d8801f15 	stw	r2,124(sp)
80201ab4:	b0bff60e 	bge	r22,r2,80201a90 <__reset+0xfa1e1a90>
80201ab8:	d9801e04 	addi	r6,sp,120
80201abc:	b80b883a 	mov	r5,r23
80201ac0:	9809883a 	mov	r4,r19
80201ac4:	0207b740 	call	80207b74 <__sprint_r>
80201ac8:	103bad1e 	bne	r2,zero,80200980 <__reset+0xfa1e0980>
80201acc:	d8c02017 	ldw	r3,128(sp)
80201ad0:	d8801f17 	ldw	r2,124(sp)
80201ad4:	da000404 	addi	r8,sp,16
80201ad8:	003fee06 	br	80201a94 <__reset+0xfa1e1a94>
80201adc:	9088703a 	and	r4,r18,r2
80201ae0:	203eab1e 	bne	r4,zero,80201590 <__reset+0xfa1e1590>
80201ae4:	dc401f17 	ldw	r17,124(sp)
80201ae8:	40800115 	stw	r2,4(r8)
80201aec:	44000015 	stw	r16,0(r8)
80201af0:	8c400044 	addi	r17,r17,1
80201af4:	d8c02015 	stw	r3,128(sp)
80201af8:	dc401f15 	stw	r17,124(sp)
80201afc:	008001c4 	movi	r2,7
80201b00:	14400e16 	blt	r2,r17,80201b3c <___vfprintf_internal_r+0x15c4>
80201b04:	45800204 	addi	r22,r8,8
80201b08:	003eca06 	br	80201634 <__reset+0xfa1e1634>
80201b0c:	01200874 	movhi	r4,32801
80201b10:	21084c84 	addi	r4,r4,8498
80201b14:	d9002b15 	stw	r4,172(sp)
80201b18:	d8802b17 	ldw	r2,172(sp)
80201b1c:	1c07883a 	add	r3,r3,r16
80201b20:	8c400044 	addi	r17,r17,1
80201b24:	b0800015 	stw	r2,0(r22)
80201b28:	b4000115 	stw	r16,4(r22)
80201b2c:	d8c02015 	stw	r3,128(sp)
80201b30:	dc401f15 	stw	r17,124(sp)
80201b34:	008001c4 	movi	r2,7
80201b38:	147ebd0e 	bge	r2,r17,80201630 <__reset+0xfa1e1630>
80201b3c:	d9002c17 	ldw	r4,176(sp)
80201b40:	d9801e04 	addi	r6,sp,120
80201b44:	b80b883a 	mov	r5,r23
80201b48:	0207b740 	call	80207b74 <__sprint_r>
80201b4c:	103b8c1e 	bne	r2,zero,80200980 <__reset+0xfa1e0980>
80201b50:	d8c02017 	ldw	r3,128(sp)
80201b54:	dc401f17 	ldw	r17,124(sp)
80201b58:	dd800404 	addi	r22,sp,16
80201b5c:	003eb506 	br	80201634 <__reset+0xfa1e1634>
80201b60:	d9002c17 	ldw	r4,176(sp)
80201b64:	d9801e04 	addi	r6,sp,120
80201b68:	b80b883a 	mov	r5,r23
80201b6c:	0207b740 	call	80207b74 <__sprint_r>
80201b70:	103b831e 	bne	r2,zero,80200980 <__reset+0xfa1e0980>
80201b74:	d8c02017 	ldw	r3,128(sp)
80201b78:	dc401f17 	ldw	r17,124(sp)
80201b7c:	da000404 	addi	r8,sp,16
80201b80:	003e8d06 	br	802015b8 <__reset+0xfa1e15b8>
80201b84:	d9002c17 	ldw	r4,176(sp)
80201b88:	d9801e04 	addi	r6,sp,120
80201b8c:	b80b883a 	mov	r5,r23
80201b90:	0207b740 	call	80207b74 <__sprint_r>
80201b94:	103b7a1e 	bne	r2,zero,80200980 <__reset+0xfa1e0980>
80201b98:	d8c02017 	ldw	r3,128(sp)
80201b9c:	dc401f17 	ldw	r17,124(sp)
80201ba0:	dd800404 	addi	r22,sp,16
80201ba4:	003e8f06 	br	802015e4 <__reset+0xfa1e15e4>
80201ba8:	0027883a 	mov	r19,zero
80201bac:	003f4a06 	br	802018d8 <__reset+0xfa1e18d8>
80201bb0:	d9002c17 	ldw	r4,176(sp)
80201bb4:	d9801e04 	addi	r6,sp,120
80201bb8:	b80b883a 	mov	r5,r23
80201bbc:	0207b740 	call	80207b74 <__sprint_r>
80201bc0:	103b6f1e 	bne	r2,zero,80200980 <__reset+0xfa1e0980>
80201bc4:	d8c02017 	ldw	r3,128(sp)
80201bc8:	da000404 	addi	r8,sp,16
80201bcc:	003c9d06 	br	80200e44 <__reset+0xfa1e0e44>
80201bd0:	04e7c83a 	sub	r19,zero,r19
80201bd4:	9804c03a 	cmpne	r2,r19,zero
80201bd8:	05adc83a 	sub	r22,zero,r22
80201bdc:	b0adc83a 	sub	r22,r22,r2
80201be0:	d8802917 	ldw	r2,164(sp)
80201be4:	07000b44 	movi	fp,45
80201be8:	df002785 	stb	fp,158(sp)
80201bec:	10017b16 	blt	r2,zero,802021dc <___vfprintf_internal_r+0x1c64>
80201bf0:	00bfdfc4 	movi	r2,-129
80201bf4:	90a4703a 	and	r18,r18,r2
80201bf8:	003bb106 	br	80200ac0 <__reset+0xfa1e0ac0>
80201bfc:	d9003617 	ldw	r4,216(sp)
80201c00:	d9403817 	ldw	r5,224(sp)
80201c04:	da003d15 	stw	r8,244(sp)
80201c08:	02077980 	call	80207798 <__fpclassifyd>
80201c0c:	da003d17 	ldw	r8,244(sp)
80201c10:	1000f026 	beq	r2,zero,80201fd4 <___vfprintf_internal_r+0x1a5c>
80201c14:	d9002917 	ldw	r4,164(sp)
80201c18:	05bff7c4 	movi	r22,-33
80201c1c:	00bfffc4 	movi	r2,-1
80201c20:	8dac703a 	and	r22,r17,r22
80201c24:	20820026 	beq	r4,r2,80202428 <___vfprintf_internal_r+0x1eb0>
80201c28:	008011c4 	movi	r2,71
80201c2c:	b081f726 	beq	r22,r2,8020240c <___vfprintf_internal_r+0x1e94>
80201c30:	d9003817 	ldw	r4,224(sp)
80201c34:	90c04014 	ori	r3,r18,256
80201c38:	d8c02b15 	stw	r3,172(sp)
80201c3c:	20021516 	blt	r4,zero,80202494 <___vfprintf_internal_r+0x1f1c>
80201c40:	dcc03817 	ldw	r19,224(sp)
80201c44:	d8002a05 	stb	zero,168(sp)
80201c48:	00801984 	movi	r2,102
80201c4c:	8881f926 	beq	r17,r2,80202434 <___vfprintf_internal_r+0x1ebc>
80201c50:	00801184 	movi	r2,70
80201c54:	88821c26 	beq	r17,r2,802024c8 <___vfprintf_internal_r+0x1f50>
80201c58:	00801144 	movi	r2,69
80201c5c:	b081ef26 	beq	r22,r2,8020241c <___vfprintf_internal_r+0x1ea4>
80201c60:	d8c02917 	ldw	r3,164(sp)
80201c64:	d8802104 	addi	r2,sp,132
80201c68:	d8800315 	stw	r2,12(sp)
80201c6c:	d9403617 	ldw	r5,216(sp)
80201c70:	d8802504 	addi	r2,sp,148
80201c74:	d9002c17 	ldw	r4,176(sp)
80201c78:	d8800215 	stw	r2,8(sp)
80201c7c:	d8802604 	addi	r2,sp,152
80201c80:	d8c00015 	stw	r3,0(sp)
80201c84:	d8800115 	stw	r2,4(sp)
80201c88:	01c00084 	movi	r7,2
80201c8c:	980d883a 	mov	r6,r19
80201c90:	d8c03c15 	stw	r3,240(sp)
80201c94:	da003d15 	stw	r8,244(sp)
80201c98:	0202b9c0 	call	80202b9c <_dtoa_r>
80201c9c:	1021883a 	mov	r16,r2
80201ca0:	008019c4 	movi	r2,103
80201ca4:	d8c03c17 	ldw	r3,240(sp)
80201ca8:	da003d17 	ldw	r8,244(sp)
80201cac:	88817126 	beq	r17,r2,80202274 <___vfprintf_internal_r+0x1cfc>
80201cb0:	008011c4 	movi	r2,71
80201cb4:	88829226 	beq	r17,r2,80202700 <___vfprintf_internal_r+0x2188>
80201cb8:	80f9883a 	add	fp,r16,r3
80201cbc:	d9003617 	ldw	r4,216(sp)
80201cc0:	000d883a 	mov	r6,zero
80201cc4:	000f883a 	mov	r7,zero
80201cc8:	980b883a 	mov	r5,r19
80201ccc:	da003d15 	stw	r8,244(sp)
80201cd0:	020b7ec0 	call	8020b7ec <__eqdf2>
80201cd4:	da003d17 	ldw	r8,244(sp)
80201cd8:	10018d26 	beq	r2,zero,80202310 <___vfprintf_internal_r+0x1d98>
80201cdc:	d8802117 	ldw	r2,132(sp)
80201ce0:	1700062e 	bgeu	r2,fp,80201cfc <___vfprintf_internal_r+0x1784>
80201ce4:	01000c04 	movi	r4,48
80201ce8:	10c00044 	addi	r3,r2,1
80201cec:	d8c02115 	stw	r3,132(sp)
80201cf0:	11000005 	stb	r4,0(r2)
80201cf4:	d8802117 	ldw	r2,132(sp)
80201cf8:	173ffb36 	bltu	r2,fp,80201ce8 <__reset+0xfa1e1ce8>
80201cfc:	1405c83a 	sub	r2,r2,r16
80201d00:	d8803315 	stw	r2,204(sp)
80201d04:	008011c4 	movi	r2,71
80201d08:	b0817626 	beq	r22,r2,802022e4 <___vfprintf_internal_r+0x1d6c>
80201d0c:	00801944 	movi	r2,101
80201d10:	1442810e 	bge	r2,r17,80202718 <___vfprintf_internal_r+0x21a0>
80201d14:	d8c02617 	ldw	r3,152(sp)
80201d18:	00801984 	movi	r2,102
80201d1c:	d8c03215 	stw	r3,200(sp)
80201d20:	8881fe26 	beq	r17,r2,8020251c <___vfprintf_internal_r+0x1fa4>
80201d24:	d8c03217 	ldw	r3,200(sp)
80201d28:	d9003317 	ldw	r4,204(sp)
80201d2c:	1901dd16 	blt	r3,r4,802024a4 <___vfprintf_internal_r+0x1f2c>
80201d30:	9480004c 	andi	r18,r18,1
80201d34:	90022b1e 	bne	r18,zero,802025e4 <___vfprintf_internal_r+0x206c>
80201d38:	1805883a 	mov	r2,r3
80201d3c:	18028016 	blt	r3,zero,80202740 <___vfprintf_internal_r+0x21c8>
80201d40:	d8c03217 	ldw	r3,200(sp)
80201d44:	044019c4 	movi	r17,103
80201d48:	d8c02e15 	stw	r3,184(sp)
80201d4c:	df002a07 	ldb	fp,168(sp)
80201d50:	e001531e 	bne	fp,zero,802022a0 <___vfprintf_internal_r+0x1d28>
80201d54:	df002783 	ldbu	fp,158(sp)
80201d58:	d8802a15 	stw	r2,168(sp)
80201d5c:	dc802b17 	ldw	r18,172(sp)
80201d60:	d8002915 	stw	zero,164(sp)
80201d64:	003bd106 	br	80200cac <__reset+0xfa1e0cac>
80201d68:	d8802d17 	ldw	r2,180(sp)
80201d6c:	d8c02d17 	ldw	r3,180(sp)
80201d70:	d9002d17 	ldw	r4,180(sp)
80201d74:	10800017 	ldw	r2,0(r2)
80201d78:	18c00117 	ldw	r3,4(r3)
80201d7c:	21000204 	addi	r4,r4,8
80201d80:	d8803615 	stw	r2,216(sp)
80201d84:	d8c03815 	stw	r3,224(sp)
80201d88:	d9002d15 	stw	r4,180(sp)
80201d8c:	003b7506 	br	80200b64 <__reset+0xfa1e0b64>
80201d90:	ac400007 	ldb	r17,0(r21)
80201d94:	003a5906 	br	802006fc <__reset+0xfa1e06fc>
80201d98:	9080100c 	andi	r2,r18,64
80201d9c:	1000a826 	beq	r2,zero,80202040 <___vfprintf_internal_r+0x1ac8>
80201da0:	d9002d17 	ldw	r4,180(sp)
80201da4:	002d883a 	mov	r22,zero
80201da8:	24c0000b 	ldhu	r19,0(r4)
80201dac:	21000104 	addi	r4,r4,4
80201db0:	d9002d15 	stw	r4,180(sp)
80201db4:	003ccb06 	br	802010e4 <__reset+0xfa1e10e4>
80201db8:	d8c02d17 	ldw	r3,180(sp)
80201dbc:	d9002917 	ldw	r4,164(sp)
80201dc0:	002d883a 	mov	r22,zero
80201dc4:	18800104 	addi	r2,r3,4
80201dc8:	1cc00017 	ldw	r19,0(r3)
80201dcc:	203ebb0e 	bge	r4,zero,802018bc <__reset+0xfa1e18bc>
80201dd0:	003ef106 	br	80201998 <__reset+0xfa1e1998>
80201dd4:	9080040c 	andi	r2,r18,16
80201dd8:	1000921e 	bne	r2,zero,80202024 <___vfprintf_internal_r+0x1aac>
80201ddc:	9480100c 	andi	r18,r18,64
80201de0:	90013926 	beq	r18,zero,802022c8 <___vfprintf_internal_r+0x1d50>
80201de4:	d9002d17 	ldw	r4,180(sp)
80201de8:	d9402f17 	ldw	r5,188(sp)
80201dec:	20800017 	ldw	r2,0(r4)
80201df0:	21000104 	addi	r4,r4,4
80201df4:	d9002d15 	stw	r4,180(sp)
80201df8:	1140000d 	sth	r5,0(r2)
80201dfc:	003a1606 	br	80200658 <__reset+0xfa1e0658>
80201e00:	9080100c 	andi	r2,r18,64
80201e04:	10008026 	beq	r2,zero,80202008 <___vfprintf_internal_r+0x1a90>
80201e08:	d8c02d17 	ldw	r3,180(sp)
80201e0c:	1cc0000f 	ldh	r19,0(r3)
80201e10:	18c00104 	addi	r3,r3,4
80201e14:	d8c02d15 	stw	r3,180(sp)
80201e18:	982dd7fa 	srai	r22,r19,31
80201e1c:	b005883a 	mov	r2,r22
80201e20:	003b1f06 	br	80200aa0 <__reset+0xfa1e0aa0>
80201e24:	9080100c 	andi	r2,r18,64
80201e28:	d8002785 	stb	zero,158(sp)
80201e2c:	10008a1e 	bne	r2,zero,80202058 <___vfprintf_internal_r+0x1ae0>
80201e30:	d9402d17 	ldw	r5,180(sp)
80201e34:	d8c02917 	ldw	r3,164(sp)
80201e38:	002d883a 	mov	r22,zero
80201e3c:	28800104 	addi	r2,r5,4
80201e40:	2cc00017 	ldw	r19,0(r5)
80201e44:	183e4b0e 	bge	r3,zero,80201774 <__reset+0xfa1e1774>
80201e48:	9d86b03a 	or	r3,r19,r22
80201e4c:	d8802d15 	stw	r2,180(sp)
80201e50:	183e4c1e 	bne	r3,zero,80201784 <__reset+0xfa1e1784>
80201e54:	0039883a 	mov	fp,zero
80201e58:	0005883a 	mov	r2,zero
80201e5c:	003d4006 	br	80201360 <__reset+0xfa1e1360>
80201e60:	01600874 	movhi	r5,32801
80201e64:	29484c84 	addi	r5,r5,8498
80201e68:	d9402b15 	stw	r5,172(sp)
80201e6c:	d9402b17 	ldw	r5,172(sp)
80201e70:	1c47883a 	add	r3,r3,r17
80201e74:	10800044 	addi	r2,r2,1
80201e78:	41400015 	stw	r5,0(r8)
80201e7c:	44400115 	stw	r17,4(r8)
80201e80:	d8c02015 	stw	r3,128(sp)
80201e84:	d8801f15 	stw	r2,124(sp)
80201e88:	010001c4 	movi	r4,7
80201e8c:	20bec816 	blt	r4,r2,802019b0 <__reset+0xfa1e19b0>
80201e90:	42000204 	addi	r8,r8,8
80201e94:	003ecd06 	br	802019cc <__reset+0xfa1e19cc>
80201e98:	d9002917 	ldw	r4,164(sp)
80201e9c:	d8002785 	stb	zero,158(sp)
80201ea0:	203d2d16 	blt	r4,zero,80201358 <__reset+0xfa1e1358>
80201ea4:	00bfdfc4 	movi	r2,-129
80201ea8:	90a4703a 	and	r18,r18,r2
80201eac:	003a9106 	br	802008f4 <__reset+0xfa1e08f4>
80201eb0:	01200874 	movhi	r4,32801
80201eb4:	21084c84 	addi	r4,r4,8498
80201eb8:	d9002b15 	stw	r4,172(sp)
80201ebc:	003c0c06 	br	80200ef0 <__reset+0xfa1e0ef0>
80201ec0:	d9002c17 	ldw	r4,176(sp)
80201ec4:	d9801e04 	addi	r6,sp,120
80201ec8:	b80b883a 	mov	r5,r23
80201ecc:	0207b740 	call	80207b74 <__sprint_r>
80201ed0:	103aab1e 	bne	r2,zero,80200980 <__reset+0xfa1e0980>
80201ed4:	d8c02017 	ldw	r3,128(sp)
80201ed8:	da000404 	addi	r8,sp,16
80201edc:	003d4106 	br	802013e4 <__reset+0xfa1e13e4>
80201ee0:	d8801f17 	ldw	r2,124(sp)
80201ee4:	01600874 	movhi	r5,32801
80201ee8:	01000044 	movi	r4,1
80201eec:	18c00044 	addi	r3,r3,1
80201ef0:	10800044 	addi	r2,r2,1
80201ef4:	29484c04 	addi	r5,r5,8496
80201ef8:	41000115 	stw	r4,4(r8)
80201efc:	41400015 	stw	r5,0(r8)
80201f00:	d8c02015 	stw	r3,128(sp)
80201f04:	d8801f15 	stw	r2,124(sp)
80201f08:	010001c4 	movi	r4,7
80201f0c:	20805c16 	blt	r4,r2,80202080 <___vfprintf_internal_r+0x1b08>
80201f10:	42000204 	addi	r8,r8,8
80201f14:	8800041e 	bne	r17,zero,80201f28 <___vfprintf_internal_r+0x19b0>
80201f18:	d8803317 	ldw	r2,204(sp)
80201f1c:	1000021e 	bne	r2,zero,80201f28 <___vfprintf_internal_r+0x19b0>
80201f20:	9080004c 	andi	r2,r18,1
80201f24:	103c0926 	beq	r2,zero,80200f4c <__reset+0xfa1e0f4c>
80201f28:	d9003717 	ldw	r4,220(sp)
80201f2c:	d8801f17 	ldw	r2,124(sp)
80201f30:	d9403417 	ldw	r5,208(sp)
80201f34:	20c7883a 	add	r3,r4,r3
80201f38:	10800044 	addi	r2,r2,1
80201f3c:	41000115 	stw	r4,4(r8)
80201f40:	41400015 	stw	r5,0(r8)
80201f44:	d8c02015 	stw	r3,128(sp)
80201f48:	d8801f15 	stw	r2,124(sp)
80201f4c:	010001c4 	movi	r4,7
80201f50:	20812116 	blt	r4,r2,802023d8 <___vfprintf_internal_r+0x1e60>
80201f54:	42000204 	addi	r8,r8,8
80201f58:	0463c83a 	sub	r17,zero,r17
80201f5c:	0440730e 	bge	zero,r17,8020212c <___vfprintf_internal_r+0x1bb4>
80201f60:	05800404 	movi	r22,16
80201f64:	b440860e 	bge	r22,r17,80202180 <___vfprintf_internal_r+0x1c08>
80201f68:	01600874 	movhi	r5,32801
80201f6c:	29484c84 	addi	r5,r5,8498
80201f70:	d9402b15 	stw	r5,172(sp)
80201f74:	070001c4 	movi	fp,7
80201f78:	dcc02c17 	ldw	r19,176(sp)
80201f7c:	00000306 	br	80201f8c <___vfprintf_internal_r+0x1a14>
80201f80:	42000204 	addi	r8,r8,8
80201f84:	8c7ffc04 	addi	r17,r17,-16
80201f88:	b440800e 	bge	r22,r17,8020218c <___vfprintf_internal_r+0x1c14>
80201f8c:	18c00404 	addi	r3,r3,16
80201f90:	10800044 	addi	r2,r2,1
80201f94:	45000015 	stw	r20,0(r8)
80201f98:	45800115 	stw	r22,4(r8)
80201f9c:	d8c02015 	stw	r3,128(sp)
80201fa0:	d8801f15 	stw	r2,124(sp)
80201fa4:	e0bff60e 	bge	fp,r2,80201f80 <__reset+0xfa1e1f80>
80201fa8:	d9801e04 	addi	r6,sp,120
80201fac:	b80b883a 	mov	r5,r23
80201fb0:	9809883a 	mov	r4,r19
80201fb4:	0207b740 	call	80207b74 <__sprint_r>
80201fb8:	103a711e 	bne	r2,zero,80200980 <__reset+0xfa1e0980>
80201fbc:	d8c02017 	ldw	r3,128(sp)
80201fc0:	d8801f17 	ldw	r2,124(sp)
80201fc4:	da000404 	addi	r8,sp,16
80201fc8:	003fee06 	br	80201f84 <__reset+0xfa1e1f84>
80201fcc:	00bfffc4 	movi	r2,-1
80201fd0:	003a6f06 	br	80200990 <__reset+0xfa1e0990>
80201fd4:	008011c4 	movi	r2,71
80201fd8:	1440b816 	blt	r2,r17,802022bc <___vfprintf_internal_r+0x1d44>
80201fdc:	04200874 	movhi	r16,32801
80201fe0:	84083e04 	addi	r16,r16,8440
80201fe4:	00c000c4 	movi	r3,3
80201fe8:	00bfdfc4 	movi	r2,-129
80201fec:	d8c02a15 	stw	r3,168(sp)
80201ff0:	90a4703a 	and	r18,r18,r2
80201ff4:	df002783 	ldbu	fp,158(sp)
80201ff8:	d8c02e15 	stw	r3,184(sp)
80201ffc:	d8002915 	stw	zero,164(sp)
80202000:	d8003215 	stw	zero,200(sp)
80202004:	003b2906 	br	80200cac <__reset+0xfa1e0cac>
80202008:	d9002d17 	ldw	r4,180(sp)
8020200c:	24c00017 	ldw	r19,0(r4)
80202010:	21000104 	addi	r4,r4,4
80202014:	d9002d15 	stw	r4,180(sp)
80202018:	982dd7fa 	srai	r22,r19,31
8020201c:	b005883a 	mov	r2,r22
80202020:	003a9f06 	br	80200aa0 <__reset+0xfa1e0aa0>
80202024:	d9402d17 	ldw	r5,180(sp)
80202028:	d8c02f17 	ldw	r3,188(sp)
8020202c:	28800017 	ldw	r2,0(r5)
80202030:	29400104 	addi	r5,r5,4
80202034:	d9402d15 	stw	r5,180(sp)
80202038:	10c00015 	stw	r3,0(r2)
8020203c:	00398606 	br	80200658 <__reset+0xfa1e0658>
80202040:	d9402d17 	ldw	r5,180(sp)
80202044:	002d883a 	mov	r22,zero
80202048:	2cc00017 	ldw	r19,0(r5)
8020204c:	29400104 	addi	r5,r5,4
80202050:	d9402d15 	stw	r5,180(sp)
80202054:	003c2306 	br	802010e4 <__reset+0xfa1e10e4>
80202058:	d8c02d17 	ldw	r3,180(sp)
8020205c:	d9002917 	ldw	r4,164(sp)
80202060:	002d883a 	mov	r22,zero
80202064:	18800104 	addi	r2,r3,4
80202068:	1cc0000b 	ldhu	r19,0(r3)
8020206c:	203dc10e 	bge	r4,zero,80201774 <__reset+0xfa1e1774>
80202070:	003f7506 	br	80201e48 <__reset+0xfa1e1e48>
80202074:	04200874 	movhi	r16,32801
80202078:	84083c04 	addi	r16,r16,8432
8020207c:	003acc06 	br	80200bb0 <__reset+0xfa1e0bb0>
80202080:	d9002c17 	ldw	r4,176(sp)
80202084:	d9801e04 	addi	r6,sp,120
80202088:	b80b883a 	mov	r5,r23
8020208c:	0207b740 	call	80207b74 <__sprint_r>
80202090:	103a3b1e 	bne	r2,zero,80200980 <__reset+0xfa1e0980>
80202094:	dc402617 	ldw	r17,152(sp)
80202098:	d8c02017 	ldw	r3,128(sp)
8020209c:	da000404 	addi	r8,sp,16
802020a0:	003f9c06 	br	80201f14 <__reset+0xfa1e1f14>
802020a4:	ac400043 	ldbu	r17,1(r21)
802020a8:	94800814 	ori	r18,r18,32
802020ac:	ad400044 	addi	r21,r21,1
802020b0:	8c403fcc 	andi	r17,r17,255
802020b4:	8c40201c 	xori	r17,r17,128
802020b8:	8c7fe004 	addi	r17,r17,-128
802020bc:	00398f06 	br	802006fc <__reset+0xfa1e06fc>
802020c0:	d8c02d15 	stw	r3,180(sp)
802020c4:	0039883a 	mov	fp,zero
802020c8:	003e3506 	br	802019a0 <__reset+0xfa1e19a0>
802020cc:	d9002c17 	ldw	r4,176(sp)
802020d0:	d9801e04 	addi	r6,sp,120
802020d4:	b80b883a 	mov	r5,r23
802020d8:	0207b740 	call	80207b74 <__sprint_r>
802020dc:	103a281e 	bne	r2,zero,80200980 <__reset+0xfa1e0980>
802020e0:	d8c02017 	ldw	r3,128(sp)
802020e4:	da000404 	addi	r8,sp,16
802020e8:	003cd006 	br	8020142c <__reset+0xfa1e142c>
802020ec:	8009883a 	mov	r4,r16
802020f0:	da003d15 	stw	r8,244(sp)
802020f4:	02004e00 	call	802004e0 <strlen>
802020f8:	d8802e15 	stw	r2,184(sp)
802020fc:	da003d17 	ldw	r8,244(sp)
80202100:	103c340e 	bge	r2,zero,802011d4 <__reset+0xfa1e11d4>
80202104:	0005883a 	mov	r2,zero
80202108:	003c3206 	br	802011d4 <__reset+0xfa1e11d4>
8020210c:	d9002c17 	ldw	r4,176(sp)
80202110:	d9801e04 	addi	r6,sp,120
80202114:	b80b883a 	mov	r5,r23
80202118:	0207b740 	call	80207b74 <__sprint_r>
8020211c:	103a181e 	bne	r2,zero,80200980 <__reset+0xfa1e0980>
80202120:	d8c02017 	ldw	r3,128(sp)
80202124:	d8801f17 	ldw	r2,124(sp)
80202128:	da000404 	addi	r8,sp,16
8020212c:	d9403317 	ldw	r5,204(sp)
80202130:	10800044 	addi	r2,r2,1
80202134:	44000015 	stw	r16,0(r8)
80202138:	28c7883a 	add	r3,r5,r3
8020213c:	003b7d06 	br	80200f34 <__reset+0xfa1e0f34>
80202140:	01200874 	movhi	r4,32801
80202144:	21085084 	addi	r4,r4,8514
80202148:	d9003515 	stw	r4,212(sp)
8020214c:	003b1406 	br	80200da0 <__reset+0xfa1e0da0>
80202150:	013fffc4 	movi	r4,-1
80202154:	003a3506 	br	80200a2c <__reset+0xfa1e0a2c>
80202158:	0023883a 	mov	r17,zero
8020215c:	003d9d06 	br	802017d4 <__reset+0xfa1e17d4>
80202160:	d9002c17 	ldw	r4,176(sp)
80202164:	d9801e04 	addi	r6,sp,120
80202168:	b80b883a 	mov	r5,r23
8020216c:	0207b740 	call	80207b74 <__sprint_r>
80202170:	103a031e 	bne	r2,zero,80200980 <__reset+0xfa1e0980>
80202174:	d8c02017 	ldw	r3,128(sp)
80202178:	da000404 	addi	r8,sp,16
8020217c:	003d9406 	br	802017d0 <__reset+0xfa1e17d0>
80202180:	01200874 	movhi	r4,32801
80202184:	21084c84 	addi	r4,r4,8498
80202188:	d9002b15 	stw	r4,172(sp)
8020218c:	d9002b17 	ldw	r4,172(sp)
80202190:	1c47883a 	add	r3,r3,r17
80202194:	10800044 	addi	r2,r2,1
80202198:	41000015 	stw	r4,0(r8)
8020219c:	44400115 	stw	r17,4(r8)
802021a0:	d8c02015 	stw	r3,128(sp)
802021a4:	d8801f15 	stw	r2,124(sp)
802021a8:	010001c4 	movi	r4,7
802021ac:	20bfd716 	blt	r4,r2,8020210c <__reset+0xfa1e210c>
802021b0:	42000204 	addi	r8,r8,8
802021b4:	003fdd06 	br	8020212c <__reset+0xfa1e212c>
802021b8:	d9002c17 	ldw	r4,176(sp)
802021bc:	d9801e04 	addi	r6,sp,120
802021c0:	b80b883a 	mov	r5,r23
802021c4:	0207b740 	call	80207b74 <__sprint_r>
802021c8:	1039ed1e 	bne	r2,zero,80200980 <__reset+0xfa1e0980>
802021cc:	d8802617 	ldw	r2,152(sp)
802021d0:	d8c02017 	ldw	r3,128(sp)
802021d4:	da000404 	addi	r8,sp,16
802021d8:	003e1006 	br	80201a1c <__reset+0xfa1e1a1c>
802021dc:	00800044 	movi	r2,1
802021e0:	10803fcc 	andi	r2,r2,255
802021e4:	00c00044 	movi	r3,1
802021e8:	10fa3526 	beq	r2,r3,80200ac0 <__reset+0xfa1e0ac0>
802021ec:	00c00084 	movi	r3,2
802021f0:	10fbcb26 	beq	r2,r3,80201120 <__reset+0xfa1e1120>
802021f4:	003a8f06 	br	80200c34 <__reset+0xfa1e0c34>
802021f8:	01200874 	movhi	r4,32801
802021fc:	21085084 	addi	r4,r4,8514
80202200:	d9003515 	stw	r4,212(sp)
80202204:	003b7606 	br	80200fe0 <__reset+0xfa1e0fe0>
80202208:	d8802917 	ldw	r2,164(sp)
8020220c:	00c00184 	movi	r3,6
80202210:	1880012e 	bgeu	r3,r2,80202218 <___vfprintf_internal_r+0x1ca0>
80202214:	1805883a 	mov	r2,r3
80202218:	d8802e15 	stw	r2,184(sp)
8020221c:	1000ef16 	blt	r2,zero,802025dc <___vfprintf_internal_r+0x2064>
80202220:	04200874 	movhi	r16,32801
80202224:	d8802a15 	stw	r2,168(sp)
80202228:	dcc02d15 	stw	r19,180(sp)
8020222c:	d8002915 	stw	zero,164(sp)
80202230:	d8003215 	stw	zero,200(sp)
80202234:	84084a04 	addi	r16,r16,8488
80202238:	0039883a 	mov	fp,zero
8020223c:	003aa206 	br	80200cc8 <__reset+0xfa1e0cc8>
80202240:	0021883a 	mov	r16,zero
80202244:	003e0706 	br	80201a64 <__reset+0xfa1e1a64>
80202248:	d9002c17 	ldw	r4,176(sp)
8020224c:	d9801e04 	addi	r6,sp,120
80202250:	b80b883a 	mov	r5,r23
80202254:	0207b740 	call	80207b74 <__sprint_r>
80202258:	1039c91e 	bne	r2,zero,80200980 <__reset+0xfa1e0980>
8020225c:	d8802617 	ldw	r2,152(sp)
80202260:	d9403317 	ldw	r5,204(sp)
80202264:	d8c02017 	ldw	r3,128(sp)
80202268:	da000404 	addi	r8,sp,16
8020226c:	2885c83a 	sub	r2,r5,r2
80202270:	003dfb06 	br	80201a60 <__reset+0xfa1e1a60>
80202274:	9080004c 	andi	r2,r18,1
80202278:	103e8f1e 	bne	r2,zero,80201cb8 <__reset+0xfa1e1cb8>
8020227c:	d8802117 	ldw	r2,132(sp)
80202280:	003e9e06 	br	80201cfc <__reset+0xfa1e1cfc>
80202284:	1025883a 	mov	r18,r2
80202288:	0039883a 	mov	fp,zero
8020228c:	00800084 	movi	r2,2
80202290:	003fd306 	br	802021e0 <__reset+0xfa1e21e0>
80202294:	07000b44 	movi	fp,45
80202298:	df002785 	stb	fp,158(sp)
8020229c:	003a4006 	br	80200ba0 <__reset+0xfa1e0ba0>
802022a0:	00c00b44 	movi	r3,45
802022a4:	d8c02785 	stb	r3,158(sp)
802022a8:	d8802a15 	stw	r2,168(sp)
802022ac:	dc802b17 	ldw	r18,172(sp)
802022b0:	d8002915 	stw	zero,164(sp)
802022b4:	07000b44 	movi	fp,45
802022b8:	003a8006 	br	80200cbc <__reset+0xfa1e0cbc>
802022bc:	04200874 	movhi	r16,32801
802022c0:	84083f04 	addi	r16,r16,8444
802022c4:	003f4706 	br	80201fe4 <__reset+0xfa1e1fe4>
802022c8:	d8c02d17 	ldw	r3,180(sp)
802022cc:	d9002f17 	ldw	r4,188(sp)
802022d0:	18800017 	ldw	r2,0(r3)
802022d4:	18c00104 	addi	r3,r3,4
802022d8:	d8c02d15 	stw	r3,180(sp)
802022dc:	11000015 	stw	r4,0(r2)
802022e0:	0038dd06 	br	80200658 <__reset+0xfa1e0658>
802022e4:	dd802617 	ldw	r22,152(sp)
802022e8:	00bfff44 	movi	r2,-3
802022ec:	b0801c16 	blt	r22,r2,80202360 <___vfprintf_internal_r+0x1de8>
802022f0:	d9402917 	ldw	r5,164(sp)
802022f4:	2d801a16 	blt	r5,r22,80202360 <___vfprintf_internal_r+0x1de8>
802022f8:	dd803215 	stw	r22,200(sp)
802022fc:	003e8906 	br	80201d24 <__reset+0xfa1e1d24>
80202300:	01200874 	movhi	r4,32801
80202304:	21084c84 	addi	r4,r4,8498
80202308:	d9002b15 	stw	r4,172(sp)
8020230c:	003c9106 	br	80201554 <__reset+0xfa1e1554>
80202310:	e005883a 	mov	r2,fp
80202314:	003e7906 	br	80201cfc <__reset+0xfa1e1cfc>
80202318:	d9402917 	ldw	r5,164(sp)
8020231c:	df002783 	ldbu	fp,158(sp)
80202320:	dcc02d15 	stw	r19,180(sp)
80202324:	d9402a15 	stw	r5,168(sp)
80202328:	d9402e15 	stw	r5,184(sp)
8020232c:	d8002915 	stw	zero,164(sp)
80202330:	d8003215 	stw	zero,200(sp)
80202334:	003a5d06 	br	80200cac <__reset+0xfa1e0cac>
80202338:	9080004c 	andi	r2,r18,1
8020233c:	0039883a 	mov	fp,zero
80202340:	10000426 	beq	r2,zero,80202354 <___vfprintf_internal_r+0x1ddc>
80202344:	00800c04 	movi	r2,48
80202348:	dc001dc4 	addi	r16,sp,119
8020234c:	d8801dc5 	stb	r2,119(sp)
80202350:	003b8006 	br	80201154 <__reset+0xfa1e1154>
80202354:	d8002e15 	stw	zero,184(sp)
80202358:	dc001e04 	addi	r16,sp,120
8020235c:	003a4d06 	br	80200c94 <__reset+0xfa1e0c94>
80202360:	8c7fff84 	addi	r17,r17,-2
80202364:	b5bfffc4 	addi	r22,r22,-1
80202368:	dd802615 	stw	r22,152(sp)
8020236c:	dc4022c5 	stb	r17,139(sp)
80202370:	b000bf16 	blt	r22,zero,80202670 <___vfprintf_internal_r+0x20f8>
80202374:	00800ac4 	movi	r2,43
80202378:	d8802305 	stb	r2,140(sp)
8020237c:	00800244 	movi	r2,9
80202380:	15807016 	blt	r2,r22,80202544 <___vfprintf_internal_r+0x1fcc>
80202384:	00800c04 	movi	r2,48
80202388:	b5800c04 	addi	r22,r22,48
8020238c:	d8802345 	stb	r2,141(sp)
80202390:	dd802385 	stb	r22,142(sp)
80202394:	d88023c4 	addi	r2,sp,143
80202398:	df0022c4 	addi	fp,sp,139
8020239c:	d8c03317 	ldw	r3,204(sp)
802023a0:	1739c83a 	sub	fp,r2,fp
802023a4:	d9003317 	ldw	r4,204(sp)
802023a8:	e0c7883a 	add	r3,fp,r3
802023ac:	df003a15 	stw	fp,232(sp)
802023b0:	d8c02e15 	stw	r3,184(sp)
802023b4:	00800044 	movi	r2,1
802023b8:	1100b30e 	bge	r2,r4,80202688 <___vfprintf_internal_r+0x2110>
802023bc:	d8c02e17 	ldw	r3,184(sp)
802023c0:	18c00044 	addi	r3,r3,1
802023c4:	d8c02e15 	stw	r3,184(sp)
802023c8:	1805883a 	mov	r2,r3
802023cc:	1800ac16 	blt	r3,zero,80202680 <___vfprintf_internal_r+0x2108>
802023d0:	d8003215 	stw	zero,200(sp)
802023d4:	003e5d06 	br	80201d4c <__reset+0xfa1e1d4c>
802023d8:	d9002c17 	ldw	r4,176(sp)
802023dc:	d9801e04 	addi	r6,sp,120
802023e0:	b80b883a 	mov	r5,r23
802023e4:	0207b740 	call	80207b74 <__sprint_r>
802023e8:	1039651e 	bne	r2,zero,80200980 <__reset+0xfa1e0980>
802023ec:	dc402617 	ldw	r17,152(sp)
802023f0:	d8c02017 	ldw	r3,128(sp)
802023f4:	d8801f17 	ldw	r2,124(sp)
802023f8:	da000404 	addi	r8,sp,16
802023fc:	003ed606 	br	80201f58 <__reset+0xfa1e1f58>
80202400:	582b883a 	mov	r21,r11
80202404:	d8002915 	stw	zero,164(sp)
80202408:	0038bd06 	br	80200700 <__reset+0xfa1e0700>
8020240c:	d8802917 	ldw	r2,164(sp)
80202410:	103e071e 	bne	r2,zero,80201c30 <__reset+0xfa1e1c30>
80202414:	dc002915 	stw	r16,164(sp)
80202418:	003e0506 	br	80201c30 <__reset+0xfa1e1c30>
8020241c:	d9002917 	ldw	r4,164(sp)
80202420:	20c00044 	addi	r3,r4,1
80202424:	003e0f06 	br	80201c64 <__reset+0xfa1e1c64>
80202428:	01400184 	movi	r5,6
8020242c:	d9402915 	stw	r5,164(sp)
80202430:	003dff06 	br	80201c30 <__reset+0xfa1e1c30>
80202434:	d8802104 	addi	r2,sp,132
80202438:	d8800315 	stw	r2,12(sp)
8020243c:	d8802504 	addi	r2,sp,148
80202440:	d8800215 	stw	r2,8(sp)
80202444:	d8802604 	addi	r2,sp,152
80202448:	d8800115 	stw	r2,4(sp)
8020244c:	d8802917 	ldw	r2,164(sp)
80202450:	d9403617 	ldw	r5,216(sp)
80202454:	d9002c17 	ldw	r4,176(sp)
80202458:	d8800015 	stw	r2,0(sp)
8020245c:	01c000c4 	movi	r7,3
80202460:	980d883a 	mov	r6,r19
80202464:	da003d15 	stw	r8,244(sp)
80202468:	0202b9c0 	call	80202b9c <_dtoa_r>
8020246c:	d8c02917 	ldw	r3,164(sp)
80202470:	da003d17 	ldw	r8,244(sp)
80202474:	1021883a 	mov	r16,r2
80202478:	10f9883a 	add	fp,r2,r3
8020247c:	81000007 	ldb	r4,0(r16)
80202480:	00800c04 	movi	r2,48
80202484:	20805e26 	beq	r4,r2,80202600 <___vfprintf_internal_r+0x2088>
80202488:	d8c02617 	ldw	r3,152(sp)
8020248c:	e0f9883a 	add	fp,fp,r3
80202490:	003e0a06 	br	80201cbc <__reset+0xfa1e1cbc>
80202494:	00c00b44 	movi	r3,45
80202498:	24e0003c 	xorhi	r19,r4,32768
8020249c:	d8c02a05 	stb	r3,168(sp)
802024a0:	003de906 	br	80201c48 <__reset+0xfa1e1c48>
802024a4:	d8c03217 	ldw	r3,200(sp)
802024a8:	00c07a0e 	bge	zero,r3,80202694 <___vfprintf_internal_r+0x211c>
802024ac:	00800044 	movi	r2,1
802024b0:	d9003317 	ldw	r4,204(sp)
802024b4:	1105883a 	add	r2,r2,r4
802024b8:	d8802e15 	stw	r2,184(sp)
802024bc:	10004e16 	blt	r2,zero,802025f8 <___vfprintf_internal_r+0x2080>
802024c0:	044019c4 	movi	r17,103
802024c4:	003e2106 	br	80201d4c <__reset+0xfa1e1d4c>
802024c8:	d9002917 	ldw	r4,164(sp)
802024cc:	d8802104 	addi	r2,sp,132
802024d0:	d8800315 	stw	r2,12(sp)
802024d4:	d9000015 	stw	r4,0(sp)
802024d8:	d8802504 	addi	r2,sp,148
802024dc:	d9403617 	ldw	r5,216(sp)
802024e0:	d9002c17 	ldw	r4,176(sp)
802024e4:	d8800215 	stw	r2,8(sp)
802024e8:	d8802604 	addi	r2,sp,152
802024ec:	d8800115 	stw	r2,4(sp)
802024f0:	01c000c4 	movi	r7,3
802024f4:	980d883a 	mov	r6,r19
802024f8:	da003d15 	stw	r8,244(sp)
802024fc:	0202b9c0 	call	80202b9c <_dtoa_r>
80202500:	d8c02917 	ldw	r3,164(sp)
80202504:	da003d17 	ldw	r8,244(sp)
80202508:	1021883a 	mov	r16,r2
8020250c:	00801184 	movi	r2,70
80202510:	80f9883a 	add	fp,r16,r3
80202514:	88bfd926 	beq	r17,r2,8020247c <__reset+0xfa1e247c>
80202518:	003de806 	br	80201cbc <__reset+0xfa1e1cbc>
8020251c:	d9002917 	ldw	r4,164(sp)
80202520:	00c04d0e 	bge	zero,r3,80202658 <___vfprintf_internal_r+0x20e0>
80202524:	2000441e 	bne	r4,zero,80202638 <___vfprintf_internal_r+0x20c0>
80202528:	9480004c 	andi	r18,r18,1
8020252c:	9000421e 	bne	r18,zero,80202638 <___vfprintf_internal_r+0x20c0>
80202530:	1805883a 	mov	r2,r3
80202534:	18007016 	blt	r3,zero,802026f8 <___vfprintf_internal_r+0x2180>
80202538:	d8c03217 	ldw	r3,200(sp)
8020253c:	d8c02e15 	stw	r3,184(sp)
80202540:	003e0206 	br	80201d4c <__reset+0xfa1e1d4c>
80202544:	df0022c4 	addi	fp,sp,139
80202548:	dc002915 	stw	r16,164(sp)
8020254c:	4027883a 	mov	r19,r8
80202550:	e021883a 	mov	r16,fp
80202554:	b009883a 	mov	r4,r22
80202558:	01400284 	movi	r5,10
8020255c:	020a5280 	call	8020a528 <__modsi3>
80202560:	10800c04 	addi	r2,r2,48
80202564:	843fffc4 	addi	r16,r16,-1
80202568:	b009883a 	mov	r4,r22
8020256c:	01400284 	movi	r5,10
80202570:	80800005 	stb	r2,0(r16)
80202574:	020a4a40 	call	8020a4a4 <__divsi3>
80202578:	102d883a 	mov	r22,r2
8020257c:	00800244 	movi	r2,9
80202580:	15bff416 	blt	r2,r22,80202554 <__reset+0xfa1e2554>
80202584:	9811883a 	mov	r8,r19
80202588:	b0800c04 	addi	r2,r22,48
8020258c:	8027883a 	mov	r19,r16
80202590:	997fffc4 	addi	r5,r19,-1
80202594:	98bfffc5 	stb	r2,-1(r19)
80202598:	dc002917 	ldw	r16,164(sp)
8020259c:	2f006a2e 	bgeu	r5,fp,80202748 <___vfprintf_internal_r+0x21d0>
802025a0:	d9c02384 	addi	r7,sp,142
802025a4:	3ccfc83a 	sub	r7,r7,r19
802025a8:	d9002344 	addi	r4,sp,141
802025ac:	e1cf883a 	add	r7,fp,r7
802025b0:	00000106 	br	802025b8 <___vfprintf_internal_r+0x2040>
802025b4:	28800003 	ldbu	r2,0(r5)
802025b8:	20800005 	stb	r2,0(r4)
802025bc:	21000044 	addi	r4,r4,1
802025c0:	29400044 	addi	r5,r5,1
802025c4:	393ffb1e 	bne	r7,r4,802025b4 <__reset+0xfa1e25b4>
802025c8:	d8802304 	addi	r2,sp,140
802025cc:	14c5c83a 	sub	r2,r2,r19
802025d0:	d8c02344 	addi	r3,sp,141
802025d4:	1885883a 	add	r2,r3,r2
802025d8:	003f7006 	br	8020239c <__reset+0xfa1e239c>
802025dc:	0005883a 	mov	r2,zero
802025e0:	003f0f06 	br	80202220 <__reset+0xfa1e2220>
802025e4:	d8c03217 	ldw	r3,200(sp)
802025e8:	18c00044 	addi	r3,r3,1
802025ec:	d8c02e15 	stw	r3,184(sp)
802025f0:	1805883a 	mov	r2,r3
802025f4:	183fb20e 	bge	r3,zero,802024c0 <__reset+0xfa1e24c0>
802025f8:	0005883a 	mov	r2,zero
802025fc:	003fb006 	br	802024c0 <__reset+0xfa1e24c0>
80202600:	d9003617 	ldw	r4,216(sp)
80202604:	000d883a 	mov	r6,zero
80202608:	000f883a 	mov	r7,zero
8020260c:	980b883a 	mov	r5,r19
80202610:	d8c03c15 	stw	r3,240(sp)
80202614:	da003d15 	stw	r8,244(sp)
80202618:	020b7ec0 	call	8020b7ec <__eqdf2>
8020261c:	d8c03c17 	ldw	r3,240(sp)
80202620:	da003d17 	ldw	r8,244(sp)
80202624:	103f9826 	beq	r2,zero,80202488 <__reset+0xfa1e2488>
80202628:	00800044 	movi	r2,1
8020262c:	10c7c83a 	sub	r3,r2,r3
80202630:	d8c02615 	stw	r3,152(sp)
80202634:	003f9506 	br	8020248c <__reset+0xfa1e248c>
80202638:	d9002917 	ldw	r4,164(sp)
8020263c:	d8c03217 	ldw	r3,200(sp)
80202640:	20800044 	addi	r2,r4,1
80202644:	1885883a 	add	r2,r3,r2
80202648:	d8802e15 	stw	r2,184(sp)
8020264c:	103dbf0e 	bge	r2,zero,80201d4c <__reset+0xfa1e1d4c>
80202650:	0005883a 	mov	r2,zero
80202654:	003dbd06 	br	80201d4c <__reset+0xfa1e1d4c>
80202658:	2000211e 	bne	r4,zero,802026e0 <___vfprintf_internal_r+0x2168>
8020265c:	9480004c 	andi	r18,r18,1
80202660:	90001f1e 	bne	r18,zero,802026e0 <___vfprintf_internal_r+0x2168>
80202664:	00800044 	movi	r2,1
80202668:	d8802e15 	stw	r2,184(sp)
8020266c:	003db706 	br	80201d4c <__reset+0xfa1e1d4c>
80202670:	00800b44 	movi	r2,45
80202674:	05adc83a 	sub	r22,zero,r22
80202678:	d8802305 	stb	r2,140(sp)
8020267c:	003f3f06 	br	8020237c <__reset+0xfa1e237c>
80202680:	0005883a 	mov	r2,zero
80202684:	003f5206 	br	802023d0 <__reset+0xfa1e23d0>
80202688:	90a4703a 	and	r18,r18,r2
8020268c:	903f4e26 	beq	r18,zero,802023c8 <__reset+0xfa1e23c8>
80202690:	003f4a06 	br	802023bc <__reset+0xfa1e23bc>
80202694:	00800084 	movi	r2,2
80202698:	10c5c83a 	sub	r2,r2,r3
8020269c:	003f8406 	br	802024b0 <__reset+0xfa1e24b0>
802026a0:	d8802d17 	ldw	r2,180(sp)
802026a4:	d9002d17 	ldw	r4,180(sp)
802026a8:	ac400043 	ldbu	r17,1(r21)
802026ac:	10800017 	ldw	r2,0(r2)
802026b0:	582b883a 	mov	r21,r11
802026b4:	d8802915 	stw	r2,164(sp)
802026b8:	20800104 	addi	r2,r4,4
802026bc:	d9002917 	ldw	r4,164(sp)
802026c0:	d8802d15 	stw	r2,180(sp)
802026c4:	203e7a0e 	bge	r4,zero,802020b0 <__reset+0xfa1e20b0>
802026c8:	8c403fcc 	andi	r17,r17,255
802026cc:	00bfffc4 	movi	r2,-1
802026d0:	8c40201c 	xori	r17,r17,128
802026d4:	d8802915 	stw	r2,164(sp)
802026d8:	8c7fe004 	addi	r17,r17,-128
802026dc:	00380706 	br	802006fc <__reset+0xfa1e06fc>
802026e0:	d8c02917 	ldw	r3,164(sp)
802026e4:	18c00084 	addi	r3,r3,2
802026e8:	d8c02e15 	stw	r3,184(sp)
802026ec:	1805883a 	mov	r2,r3
802026f0:	183d960e 	bge	r3,zero,80201d4c <__reset+0xfa1e1d4c>
802026f4:	003fd606 	br	80202650 <__reset+0xfa1e2650>
802026f8:	0005883a 	mov	r2,zero
802026fc:	003f8e06 	br	80202538 <__reset+0xfa1e2538>
80202700:	9080004c 	andi	r2,r18,1
80202704:	103f811e 	bne	r2,zero,8020250c <__reset+0xfa1e250c>
80202708:	d8802117 	ldw	r2,132(sp)
8020270c:	1405c83a 	sub	r2,r2,r16
80202710:	d8803315 	stw	r2,204(sp)
80202714:	b47ef326 	beq	r22,r17,802022e4 <__reset+0xfa1e22e4>
80202718:	dd802617 	ldw	r22,152(sp)
8020271c:	003f1106 	br	80202364 <__reset+0xfa1e2364>
80202720:	d9c02785 	stb	r7,158(sp)
80202724:	00390406 	br	80200b38 <__reset+0xfa1e0b38>
80202728:	d9c02785 	stb	r7,158(sp)
8020272c:	0038d306 	br	80200a7c <__reset+0xfa1e0a7c>
80202730:	d9c02785 	stb	r7,158(sp)
80202734:	003a6106 	br	802010bc <__reset+0xfa1e10bc>
80202738:	d9c02785 	stb	r7,158(sp)
8020273c:	003af806 	br	80201320 <__reset+0xfa1e1320>
80202740:	0005883a 	mov	r2,zero
80202744:	003d7e06 	br	80201d40 <__reset+0xfa1e1d40>
80202748:	d8802344 	addi	r2,sp,141
8020274c:	003f1306 	br	8020239c <__reset+0xfa1e239c>
80202750:	d9c02785 	stb	r7,158(sp)
80202754:	00392306 	br	80200be4 <__reset+0xfa1e0be4>
80202758:	d9c02785 	stb	r7,158(sp)
8020275c:	003aa906 	br	80201204 <__reset+0xfa1e1204>
80202760:	d9c02785 	stb	r7,158(sp)
80202764:	003a3d06 	br	8020105c <__reset+0xfa1e105c>
80202768:	d9c02785 	stb	r7,158(sp)
8020276c:	003aca06 	br	80201298 <__reset+0xfa1e1298>

80202770 <__vfprintf_internal>:
80202770:	00a00874 	movhi	r2,32801
80202774:	1090b404 	addi	r2,r2,17104
80202778:	300f883a 	mov	r7,r6
8020277c:	280d883a 	mov	r6,r5
80202780:	200b883a 	mov	r5,r4
80202784:	11000017 	ldw	r4,0(r2)
80202788:	02005781 	jmpi	80200578 <___vfprintf_internal_r>

8020278c <__sbprintf>:
8020278c:	2880030b 	ldhu	r2,12(r5)
80202790:	2ac01917 	ldw	r11,100(r5)
80202794:	2a80038b 	ldhu	r10,14(r5)
80202798:	2a400717 	ldw	r9,28(r5)
8020279c:	2a000917 	ldw	r8,36(r5)
802027a0:	defee204 	addi	sp,sp,-1144
802027a4:	00c10004 	movi	r3,1024
802027a8:	dc011a15 	stw	r16,1128(sp)
802027ac:	10bfff4c 	andi	r2,r2,65533
802027b0:	2821883a 	mov	r16,r5
802027b4:	d8cb883a 	add	r5,sp,r3
802027b8:	dc811c15 	stw	r18,1136(sp)
802027bc:	dc411b15 	stw	r17,1132(sp)
802027c0:	dfc11d15 	stw	ra,1140(sp)
802027c4:	2025883a 	mov	r18,r4
802027c8:	d881030d 	sth	r2,1036(sp)
802027cc:	dac11915 	stw	r11,1124(sp)
802027d0:	da81038d 	sth	r10,1038(sp)
802027d4:	da410715 	stw	r9,1052(sp)
802027d8:	da010915 	stw	r8,1060(sp)
802027dc:	dec10015 	stw	sp,1024(sp)
802027e0:	dec10415 	stw	sp,1040(sp)
802027e4:	d8c10215 	stw	r3,1032(sp)
802027e8:	d8c10515 	stw	r3,1044(sp)
802027ec:	d8010615 	stw	zero,1048(sp)
802027f0:	02005780 	call	80200578 <___vfprintf_internal_r>
802027f4:	1023883a 	mov	r17,r2
802027f8:	10000416 	blt	r2,zero,8020280c <__sbprintf+0x80>
802027fc:	d9410004 	addi	r5,sp,1024
80202800:	9009883a 	mov	r4,r18
80202804:	02044400 	call	80204440 <_fflush_r>
80202808:	10000d1e 	bne	r2,zero,80202840 <__sbprintf+0xb4>
8020280c:	d881030b 	ldhu	r2,1036(sp)
80202810:	1080100c 	andi	r2,r2,64
80202814:	10000326 	beq	r2,zero,80202824 <__sbprintf+0x98>
80202818:	8080030b 	ldhu	r2,12(r16)
8020281c:	10801014 	ori	r2,r2,64
80202820:	8080030d 	sth	r2,12(r16)
80202824:	8805883a 	mov	r2,r17
80202828:	dfc11d17 	ldw	ra,1140(sp)
8020282c:	dc811c17 	ldw	r18,1136(sp)
80202830:	dc411b17 	ldw	r17,1132(sp)
80202834:	dc011a17 	ldw	r16,1128(sp)
80202838:	dec11e04 	addi	sp,sp,1144
8020283c:	f800283a 	ret
80202840:	047fffc4 	movi	r17,-1
80202844:	003ff106 	br	8020280c <__reset+0xfa1e280c>

80202848 <__swsetup_r>:
80202848:	00a00874 	movhi	r2,32801
8020284c:	defffd04 	addi	sp,sp,-12
80202850:	1090b404 	addi	r2,r2,17104
80202854:	dc400115 	stw	r17,4(sp)
80202858:	2023883a 	mov	r17,r4
8020285c:	11000017 	ldw	r4,0(r2)
80202860:	dc000015 	stw	r16,0(sp)
80202864:	dfc00215 	stw	ra,8(sp)
80202868:	2821883a 	mov	r16,r5
8020286c:	20000226 	beq	r4,zero,80202878 <__swsetup_r+0x30>
80202870:	20800e17 	ldw	r2,56(r4)
80202874:	10003126 	beq	r2,zero,8020293c <__swsetup_r+0xf4>
80202878:	8080030b 	ldhu	r2,12(r16)
8020287c:	10c0020c 	andi	r3,r2,8
80202880:	1009883a 	mov	r4,r2
80202884:	18000f26 	beq	r3,zero,802028c4 <__swsetup_r+0x7c>
80202888:	80c00417 	ldw	r3,16(r16)
8020288c:	18001526 	beq	r3,zero,802028e4 <__swsetup_r+0x9c>
80202890:	1100004c 	andi	r4,r2,1
80202894:	20001c1e 	bne	r4,zero,80202908 <__swsetup_r+0xc0>
80202898:	1080008c 	andi	r2,r2,2
8020289c:	1000291e 	bne	r2,zero,80202944 <__swsetup_r+0xfc>
802028a0:	80800517 	ldw	r2,20(r16)
802028a4:	80800215 	stw	r2,8(r16)
802028a8:	18001c26 	beq	r3,zero,8020291c <__swsetup_r+0xd4>
802028ac:	0005883a 	mov	r2,zero
802028b0:	dfc00217 	ldw	ra,8(sp)
802028b4:	dc400117 	ldw	r17,4(sp)
802028b8:	dc000017 	ldw	r16,0(sp)
802028bc:	dec00304 	addi	sp,sp,12
802028c0:	f800283a 	ret
802028c4:	2080040c 	andi	r2,r4,16
802028c8:	10002e26 	beq	r2,zero,80202984 <__swsetup_r+0x13c>
802028cc:	2080010c 	andi	r2,r4,4
802028d0:	10001e1e 	bne	r2,zero,8020294c <__swsetup_r+0x104>
802028d4:	80c00417 	ldw	r3,16(r16)
802028d8:	20800214 	ori	r2,r4,8
802028dc:	8080030d 	sth	r2,12(r16)
802028e0:	183feb1e 	bne	r3,zero,80202890 <__reset+0xfa1e2890>
802028e4:	1100a00c 	andi	r4,r2,640
802028e8:	01408004 	movi	r5,512
802028ec:	217fe826 	beq	r4,r5,80202890 <__reset+0xfa1e2890>
802028f0:	800b883a 	mov	r5,r16
802028f4:	8809883a 	mov	r4,r17
802028f8:	02053c00 	call	802053c0 <__smakebuf_r>
802028fc:	8080030b 	ldhu	r2,12(r16)
80202900:	80c00417 	ldw	r3,16(r16)
80202904:	003fe206 	br	80202890 <__reset+0xfa1e2890>
80202908:	80800517 	ldw	r2,20(r16)
8020290c:	80000215 	stw	zero,8(r16)
80202910:	0085c83a 	sub	r2,zero,r2
80202914:	80800615 	stw	r2,24(r16)
80202918:	183fe41e 	bne	r3,zero,802028ac <__reset+0xfa1e28ac>
8020291c:	80c0030b 	ldhu	r3,12(r16)
80202920:	0005883a 	mov	r2,zero
80202924:	1900200c 	andi	r4,r3,128
80202928:	203fe126 	beq	r4,zero,802028b0 <__reset+0xfa1e28b0>
8020292c:	18c01014 	ori	r3,r3,64
80202930:	80c0030d 	sth	r3,12(r16)
80202934:	00bfffc4 	movi	r2,-1
80202938:	003fdd06 	br	802028b0 <__reset+0xfa1e28b0>
8020293c:	020481c0 	call	8020481c <__sinit>
80202940:	003fcd06 	br	80202878 <__reset+0xfa1e2878>
80202944:	0005883a 	mov	r2,zero
80202948:	003fd606 	br	802028a4 <__reset+0xfa1e28a4>
8020294c:	81400c17 	ldw	r5,48(r16)
80202950:	28000626 	beq	r5,zero,8020296c <__swsetup_r+0x124>
80202954:	80801004 	addi	r2,r16,64
80202958:	28800326 	beq	r5,r2,80202968 <__swsetup_r+0x120>
8020295c:	8809883a 	mov	r4,r17
80202960:	02049900 	call	80204990 <_free_r>
80202964:	8100030b 	ldhu	r4,12(r16)
80202968:	80000c15 	stw	zero,48(r16)
8020296c:	80c00417 	ldw	r3,16(r16)
80202970:	00bff6c4 	movi	r2,-37
80202974:	1108703a 	and	r4,r2,r4
80202978:	80000115 	stw	zero,4(r16)
8020297c:	80c00015 	stw	r3,0(r16)
80202980:	003fd506 	br	802028d8 <__reset+0xfa1e28d8>
80202984:	00800244 	movi	r2,9
80202988:	88800015 	stw	r2,0(r17)
8020298c:	20801014 	ori	r2,r4,64
80202990:	8080030d 	sth	r2,12(r16)
80202994:	00bfffc4 	movi	r2,-1
80202998:	003fc506 	br	802028b0 <__reset+0xfa1e28b0>

8020299c <quorem>:
8020299c:	defff704 	addi	sp,sp,-36
802029a0:	dc800215 	stw	r18,8(sp)
802029a4:	20800417 	ldw	r2,16(r4)
802029a8:	2c800417 	ldw	r18,16(r5)
802029ac:	dfc00815 	stw	ra,32(sp)
802029b0:	ddc00715 	stw	r23,28(sp)
802029b4:	dd800615 	stw	r22,24(sp)
802029b8:	dd400515 	stw	r21,20(sp)
802029bc:	dd000415 	stw	r20,16(sp)
802029c0:	dcc00315 	stw	r19,12(sp)
802029c4:	dc400115 	stw	r17,4(sp)
802029c8:	dc000015 	stw	r16,0(sp)
802029cc:	14807116 	blt	r2,r18,80202b94 <quorem+0x1f8>
802029d0:	94bfffc4 	addi	r18,r18,-1
802029d4:	94ad883a 	add	r22,r18,r18
802029d8:	b5ad883a 	add	r22,r22,r22
802029dc:	2c400504 	addi	r17,r5,20
802029e0:	8da9883a 	add	r20,r17,r22
802029e4:	25400504 	addi	r21,r4,20
802029e8:	282f883a 	mov	r23,r5
802029ec:	adad883a 	add	r22,r21,r22
802029f0:	a1400017 	ldw	r5,0(r20)
802029f4:	2021883a 	mov	r16,r4
802029f8:	b1000017 	ldw	r4,0(r22)
802029fc:	29400044 	addi	r5,r5,1
80202a00:	020a59c0 	call	8020a59c <__udivsi3>
80202a04:	1027883a 	mov	r19,r2
80202a08:	10002c26 	beq	r2,zero,80202abc <quorem+0x120>
80202a0c:	a813883a 	mov	r9,r21
80202a10:	880b883a 	mov	r5,r17
80202a14:	0009883a 	mov	r4,zero
80202a18:	000d883a 	mov	r6,zero
80202a1c:	2a000017 	ldw	r8,0(r5)
80202a20:	49c00017 	ldw	r7,0(r9)
80202a24:	29400104 	addi	r5,r5,4
80202a28:	40bfffcc 	andi	r2,r8,65535
80202a2c:	14c5383a 	mul	r2,r2,r19
80202a30:	4010d43a 	srli	r8,r8,16
80202a34:	38ffffcc 	andi	r3,r7,65535
80202a38:	1105883a 	add	r2,r2,r4
80202a3c:	1008d43a 	srli	r4,r2,16
80202a40:	44d1383a 	mul	r8,r8,r19
80202a44:	198d883a 	add	r6,r3,r6
80202a48:	10ffffcc 	andi	r3,r2,65535
80202a4c:	30c7c83a 	sub	r3,r6,r3
80202a50:	380ed43a 	srli	r7,r7,16
80202a54:	4105883a 	add	r2,r8,r4
80202a58:	180dd43a 	srai	r6,r3,16
80202a5c:	113fffcc 	andi	r4,r2,65535
80202a60:	390fc83a 	sub	r7,r7,r4
80202a64:	398d883a 	add	r6,r7,r6
80202a68:	300e943a 	slli	r7,r6,16
80202a6c:	18ffffcc 	andi	r3,r3,65535
80202a70:	1008d43a 	srli	r4,r2,16
80202a74:	38ceb03a 	or	r7,r7,r3
80202a78:	49c00015 	stw	r7,0(r9)
80202a7c:	300dd43a 	srai	r6,r6,16
80202a80:	4a400104 	addi	r9,r9,4
80202a84:	a17fe52e 	bgeu	r20,r5,80202a1c <__reset+0xfa1e2a1c>
80202a88:	b0800017 	ldw	r2,0(r22)
80202a8c:	10000b1e 	bne	r2,zero,80202abc <quorem+0x120>
80202a90:	b0bfff04 	addi	r2,r22,-4
80202a94:	a880082e 	bgeu	r21,r2,80202ab8 <quorem+0x11c>
80202a98:	b0ffff17 	ldw	r3,-4(r22)
80202a9c:	18000326 	beq	r3,zero,80202aac <quorem+0x110>
80202aa0:	00000506 	br	80202ab8 <quorem+0x11c>
80202aa4:	10c00017 	ldw	r3,0(r2)
80202aa8:	1800031e 	bne	r3,zero,80202ab8 <quorem+0x11c>
80202aac:	10bfff04 	addi	r2,r2,-4
80202ab0:	94bfffc4 	addi	r18,r18,-1
80202ab4:	a8bffb36 	bltu	r21,r2,80202aa4 <__reset+0xfa1e2aa4>
80202ab8:	84800415 	stw	r18,16(r16)
80202abc:	b80b883a 	mov	r5,r23
80202ac0:	8009883a 	mov	r4,r16
80202ac4:	0206b000 	call	80206b00 <__mcmp>
80202ac8:	10002616 	blt	r2,zero,80202b64 <quorem+0x1c8>
80202acc:	9cc00044 	addi	r19,r19,1
80202ad0:	a805883a 	mov	r2,r21
80202ad4:	000b883a 	mov	r5,zero
80202ad8:	11000017 	ldw	r4,0(r2)
80202adc:	89800017 	ldw	r6,0(r17)
80202ae0:	10800104 	addi	r2,r2,4
80202ae4:	20ffffcc 	andi	r3,r4,65535
80202ae8:	194b883a 	add	r5,r3,r5
80202aec:	30ffffcc 	andi	r3,r6,65535
80202af0:	28c7c83a 	sub	r3,r5,r3
80202af4:	300cd43a 	srli	r6,r6,16
80202af8:	2008d43a 	srli	r4,r4,16
80202afc:	180bd43a 	srai	r5,r3,16
80202b00:	18ffffcc 	andi	r3,r3,65535
80202b04:	2189c83a 	sub	r4,r4,r6
80202b08:	2149883a 	add	r4,r4,r5
80202b0c:	200c943a 	slli	r6,r4,16
80202b10:	8c400104 	addi	r17,r17,4
80202b14:	200bd43a 	srai	r5,r4,16
80202b18:	30c6b03a 	or	r3,r6,r3
80202b1c:	10ffff15 	stw	r3,-4(r2)
80202b20:	a47fed2e 	bgeu	r20,r17,80202ad8 <__reset+0xfa1e2ad8>
80202b24:	9485883a 	add	r2,r18,r18
80202b28:	1085883a 	add	r2,r2,r2
80202b2c:	a887883a 	add	r3,r21,r2
80202b30:	18800017 	ldw	r2,0(r3)
80202b34:	10000b1e 	bne	r2,zero,80202b64 <quorem+0x1c8>
80202b38:	18bfff04 	addi	r2,r3,-4
80202b3c:	a880082e 	bgeu	r21,r2,80202b60 <quorem+0x1c4>
80202b40:	18ffff17 	ldw	r3,-4(r3)
80202b44:	18000326 	beq	r3,zero,80202b54 <quorem+0x1b8>
80202b48:	00000506 	br	80202b60 <quorem+0x1c4>
80202b4c:	10c00017 	ldw	r3,0(r2)
80202b50:	1800031e 	bne	r3,zero,80202b60 <quorem+0x1c4>
80202b54:	10bfff04 	addi	r2,r2,-4
80202b58:	94bfffc4 	addi	r18,r18,-1
80202b5c:	a8bffb36 	bltu	r21,r2,80202b4c <__reset+0xfa1e2b4c>
80202b60:	84800415 	stw	r18,16(r16)
80202b64:	9805883a 	mov	r2,r19
80202b68:	dfc00817 	ldw	ra,32(sp)
80202b6c:	ddc00717 	ldw	r23,28(sp)
80202b70:	dd800617 	ldw	r22,24(sp)
80202b74:	dd400517 	ldw	r21,20(sp)
80202b78:	dd000417 	ldw	r20,16(sp)
80202b7c:	dcc00317 	ldw	r19,12(sp)
80202b80:	dc800217 	ldw	r18,8(sp)
80202b84:	dc400117 	ldw	r17,4(sp)
80202b88:	dc000017 	ldw	r16,0(sp)
80202b8c:	dec00904 	addi	sp,sp,36
80202b90:	f800283a 	ret
80202b94:	0005883a 	mov	r2,zero
80202b98:	003ff306 	br	80202b68 <__reset+0xfa1e2b68>

80202b9c <_dtoa_r>:
80202b9c:	20801017 	ldw	r2,64(r4)
80202ba0:	deffde04 	addi	sp,sp,-136
80202ba4:	df002015 	stw	fp,128(sp)
80202ba8:	dcc01b15 	stw	r19,108(sp)
80202bac:	dc801a15 	stw	r18,104(sp)
80202bb0:	dc401915 	stw	r17,100(sp)
80202bb4:	dc001815 	stw	r16,96(sp)
80202bb8:	dfc02115 	stw	ra,132(sp)
80202bbc:	ddc01f15 	stw	r23,124(sp)
80202bc0:	dd801e15 	stw	r22,120(sp)
80202bc4:	dd401d15 	stw	r21,116(sp)
80202bc8:	dd001c15 	stw	r20,112(sp)
80202bcc:	d9c00315 	stw	r7,12(sp)
80202bd0:	2039883a 	mov	fp,r4
80202bd4:	3023883a 	mov	r17,r6
80202bd8:	2825883a 	mov	r18,r5
80202bdc:	dc002417 	ldw	r16,144(sp)
80202be0:	3027883a 	mov	r19,r6
80202be4:	10000826 	beq	r2,zero,80202c08 <_dtoa_r+0x6c>
80202be8:	21801117 	ldw	r6,68(r4)
80202bec:	00c00044 	movi	r3,1
80202bf0:	100b883a 	mov	r5,r2
80202bf4:	1986983a 	sll	r3,r3,r6
80202bf8:	11800115 	stw	r6,4(r2)
80202bfc:	10c00215 	stw	r3,8(r2)
80202c00:	02062e00 	call	802062e0 <_Bfree>
80202c04:	e0001015 	stw	zero,64(fp)
80202c08:	88002e16 	blt	r17,zero,80202cc4 <_dtoa_r+0x128>
80202c0c:	80000015 	stw	zero,0(r16)
80202c10:	889ffc2c 	andhi	r2,r17,32752
80202c14:	00dffc34 	movhi	r3,32752
80202c18:	10c01c26 	beq	r2,r3,80202c8c <_dtoa_r+0xf0>
80202c1c:	000d883a 	mov	r6,zero
80202c20:	000f883a 	mov	r7,zero
80202c24:	9009883a 	mov	r4,r18
80202c28:	980b883a 	mov	r5,r19
80202c2c:	020b7ec0 	call	8020b7ec <__eqdf2>
80202c30:	10002b1e 	bne	r2,zero,80202ce0 <_dtoa_r+0x144>
80202c34:	d9c02317 	ldw	r7,140(sp)
80202c38:	00800044 	movi	r2,1
80202c3c:	38800015 	stw	r2,0(r7)
80202c40:	d8802517 	ldw	r2,148(sp)
80202c44:	10019e26 	beq	r2,zero,802032c0 <_dtoa_r+0x724>
80202c48:	d8c02517 	ldw	r3,148(sp)
80202c4c:	00a00874 	movhi	r2,32801
80202c50:	10884c44 	addi	r2,r2,8497
80202c54:	18800015 	stw	r2,0(r3)
80202c58:	10bfffc4 	addi	r2,r2,-1
80202c5c:	dfc02117 	ldw	ra,132(sp)
80202c60:	df002017 	ldw	fp,128(sp)
80202c64:	ddc01f17 	ldw	r23,124(sp)
80202c68:	dd801e17 	ldw	r22,120(sp)
80202c6c:	dd401d17 	ldw	r21,116(sp)
80202c70:	dd001c17 	ldw	r20,112(sp)
80202c74:	dcc01b17 	ldw	r19,108(sp)
80202c78:	dc801a17 	ldw	r18,104(sp)
80202c7c:	dc401917 	ldw	r17,100(sp)
80202c80:	dc001817 	ldw	r16,96(sp)
80202c84:	dec02204 	addi	sp,sp,136
80202c88:	f800283a 	ret
80202c8c:	d8c02317 	ldw	r3,140(sp)
80202c90:	0089c3c4 	movi	r2,9999
80202c94:	18800015 	stw	r2,0(r3)
80202c98:	90017726 	beq	r18,zero,80203278 <_dtoa_r+0x6dc>
80202c9c:	00a00874 	movhi	r2,32801
80202ca0:	10885804 	addi	r2,r2,8544
80202ca4:	d9002517 	ldw	r4,148(sp)
80202ca8:	203fec26 	beq	r4,zero,80202c5c <__reset+0xfa1e2c5c>
80202cac:	10c000c7 	ldb	r3,3(r2)
80202cb0:	1801781e 	bne	r3,zero,80203294 <_dtoa_r+0x6f8>
80202cb4:	10c000c4 	addi	r3,r2,3
80202cb8:	d9802517 	ldw	r6,148(sp)
80202cbc:	30c00015 	stw	r3,0(r6)
80202cc0:	003fe606 	br	80202c5c <__reset+0xfa1e2c5c>
80202cc4:	04e00034 	movhi	r19,32768
80202cc8:	9cffffc4 	addi	r19,r19,-1
80202ccc:	00800044 	movi	r2,1
80202cd0:	8ce6703a 	and	r19,r17,r19
80202cd4:	80800015 	stw	r2,0(r16)
80202cd8:	9823883a 	mov	r17,r19
80202cdc:	003fcc06 	br	80202c10 <__reset+0xfa1e2c10>
80202ce0:	d8800204 	addi	r2,sp,8
80202ce4:	d8800015 	stw	r2,0(sp)
80202ce8:	d9c00104 	addi	r7,sp,4
80202cec:	900b883a 	mov	r5,r18
80202cf0:	980d883a 	mov	r6,r19
80202cf4:	e009883a 	mov	r4,fp
80202cf8:	8820d53a 	srli	r16,r17,20
80202cfc:	0206ecc0 	call	80206ecc <__d2b>
80202d00:	d8800915 	stw	r2,36(sp)
80202d04:	8001651e 	bne	r16,zero,8020329c <_dtoa_r+0x700>
80202d08:	dd800217 	ldw	r22,8(sp)
80202d0c:	dc000117 	ldw	r16,4(sp)
80202d10:	00800804 	movi	r2,32
80202d14:	b421883a 	add	r16,r22,r16
80202d18:	80c10c84 	addi	r3,r16,1074
80202d1c:	10c2d10e 	bge	r2,r3,80203864 <_dtoa_r+0xcc8>
80202d20:	00801004 	movi	r2,64
80202d24:	81010484 	addi	r4,r16,1042
80202d28:	10c7c83a 	sub	r3,r2,r3
80202d2c:	9108d83a 	srl	r4,r18,r4
80202d30:	88e2983a 	sll	r17,r17,r3
80202d34:	2448b03a 	or	r4,r4,r17
80202d38:	020cbb40 	call	8020cbb4 <__floatunsidf>
80202d3c:	017f8434 	movhi	r5,65040
80202d40:	01800044 	movi	r6,1
80202d44:	1009883a 	mov	r4,r2
80202d48:	194b883a 	add	r5,r3,r5
80202d4c:	843fffc4 	addi	r16,r16,-1
80202d50:	d9801115 	stw	r6,68(sp)
80202d54:	000d883a 	mov	r6,zero
80202d58:	01cffe34 	movhi	r7,16376
80202d5c:	020c15c0 	call	8020c15c <__subdf3>
80202d60:	0198dbf4 	movhi	r6,25455
80202d64:	01cff4f4 	movhi	r7,16339
80202d68:	3190d844 	addi	r6,r6,17249
80202d6c:	39e1e9c4 	addi	r7,r7,-30809
80202d70:	1009883a 	mov	r4,r2
80202d74:	180b883a 	mov	r5,r3
80202d78:	020ba440 	call	8020ba44 <__muldf3>
80202d7c:	01a2d874 	movhi	r6,35681
80202d80:	01cff1f4 	movhi	r7,16327
80202d84:	31b22cc4 	addi	r6,r6,-14157
80202d88:	39e28a04 	addi	r7,r7,-30168
80202d8c:	180b883a 	mov	r5,r3
80202d90:	1009883a 	mov	r4,r2
80202d94:	020a6580 	call	8020a658 <__adddf3>
80202d98:	8009883a 	mov	r4,r16
80202d9c:	1029883a 	mov	r20,r2
80202da0:	1823883a 	mov	r17,r3
80202da4:	020cad80 	call	8020cad8 <__floatsidf>
80202da8:	019427f4 	movhi	r6,20639
80202dac:	01cff4f4 	movhi	r7,16339
80202db0:	319e7ec4 	addi	r6,r6,31227
80202db4:	39d104c4 	addi	r7,r7,17427
80202db8:	1009883a 	mov	r4,r2
80202dbc:	180b883a 	mov	r5,r3
80202dc0:	020ba440 	call	8020ba44 <__muldf3>
80202dc4:	100d883a 	mov	r6,r2
80202dc8:	180f883a 	mov	r7,r3
80202dcc:	a009883a 	mov	r4,r20
80202dd0:	880b883a 	mov	r5,r17
80202dd4:	020a6580 	call	8020a658 <__adddf3>
80202dd8:	1009883a 	mov	r4,r2
80202ddc:	180b883a 	mov	r5,r3
80202de0:	1029883a 	mov	r20,r2
80202de4:	1823883a 	mov	r17,r3
80202de8:	020ca580 	call	8020ca58 <__fixdfsi>
80202dec:	000d883a 	mov	r6,zero
80202df0:	000f883a 	mov	r7,zero
80202df4:	a009883a 	mov	r4,r20
80202df8:	880b883a 	mov	r5,r17
80202dfc:	d8800515 	stw	r2,20(sp)
80202e00:	020b9500 	call	8020b950 <__ledf2>
80202e04:	10028716 	blt	r2,zero,80203824 <_dtoa_r+0xc88>
80202e08:	d8c00517 	ldw	r3,20(sp)
80202e0c:	00800584 	movi	r2,22
80202e10:	10c27536 	bltu	r2,r3,802037e8 <_dtoa_r+0xc4c>
80202e14:	180490fa 	slli	r2,r3,3
80202e18:	00e00874 	movhi	r3,32801
80202e1c:	18c87404 	addi	r3,r3,8656
80202e20:	1885883a 	add	r2,r3,r2
80202e24:	11000017 	ldw	r4,0(r2)
80202e28:	11400117 	ldw	r5,4(r2)
80202e2c:	900d883a 	mov	r6,r18
80202e30:	980f883a 	mov	r7,r19
80202e34:	020b8740 	call	8020b874 <__gedf2>
80202e38:	00828d0e 	bge	zero,r2,80203870 <_dtoa_r+0xcd4>
80202e3c:	d9000517 	ldw	r4,20(sp)
80202e40:	d8000e15 	stw	zero,56(sp)
80202e44:	213fffc4 	addi	r4,r4,-1
80202e48:	d9000515 	stw	r4,20(sp)
80202e4c:	b42dc83a 	sub	r22,r22,r16
80202e50:	b5bfffc4 	addi	r22,r22,-1
80202e54:	b0026f16 	blt	r22,zero,80203814 <_dtoa_r+0xc78>
80202e58:	d8000815 	stw	zero,32(sp)
80202e5c:	d9c00517 	ldw	r7,20(sp)
80202e60:	38026416 	blt	r7,zero,802037f4 <_dtoa_r+0xc58>
80202e64:	b1ed883a 	add	r22,r22,r7
80202e68:	d9c00d15 	stw	r7,52(sp)
80202e6c:	d8000a15 	stw	zero,40(sp)
80202e70:	d9800317 	ldw	r6,12(sp)
80202e74:	00800244 	movi	r2,9
80202e78:	11811436 	bltu	r2,r6,802032cc <_dtoa_r+0x730>
80202e7c:	00800144 	movi	r2,5
80202e80:	1184e10e 	bge	r2,r6,80204208 <_dtoa_r+0x166c>
80202e84:	31bfff04 	addi	r6,r6,-4
80202e88:	d9800315 	stw	r6,12(sp)
80202e8c:	0023883a 	mov	r17,zero
80202e90:	d9800317 	ldw	r6,12(sp)
80202e94:	008000c4 	movi	r2,3
80202e98:	30836726 	beq	r6,r2,80203c38 <_dtoa_r+0x109c>
80202e9c:	1183410e 	bge	r2,r6,80203ba4 <_dtoa_r+0x1008>
80202ea0:	d9c00317 	ldw	r7,12(sp)
80202ea4:	00800104 	movi	r2,4
80202ea8:	38827c26 	beq	r7,r2,8020389c <_dtoa_r+0xd00>
80202eac:	00800144 	movi	r2,5
80202eb0:	3884c41e 	bne	r7,r2,802041c4 <_dtoa_r+0x1628>
80202eb4:	00800044 	movi	r2,1
80202eb8:	d8800b15 	stw	r2,44(sp)
80202ebc:	d8c00517 	ldw	r3,20(sp)
80202ec0:	d9002217 	ldw	r4,136(sp)
80202ec4:	1907883a 	add	r3,r3,r4
80202ec8:	19800044 	addi	r6,r3,1
80202ecc:	d8c00c15 	stw	r3,48(sp)
80202ed0:	d9800615 	stw	r6,24(sp)
80202ed4:	0183a40e 	bge	zero,r6,80203d68 <_dtoa_r+0x11cc>
80202ed8:	d9800617 	ldw	r6,24(sp)
80202edc:	3021883a 	mov	r16,r6
80202ee0:	e0001115 	stw	zero,68(fp)
80202ee4:	008005c4 	movi	r2,23
80202ee8:	1184c92e 	bgeu	r2,r6,80204210 <_dtoa_r+0x1674>
80202eec:	00c00044 	movi	r3,1
80202ef0:	00800104 	movi	r2,4
80202ef4:	1085883a 	add	r2,r2,r2
80202ef8:	11000504 	addi	r4,r2,20
80202efc:	180b883a 	mov	r5,r3
80202f00:	18c00044 	addi	r3,r3,1
80202f04:	313ffb2e 	bgeu	r6,r4,80202ef4 <__reset+0xfa1e2ef4>
80202f08:	e1401115 	stw	r5,68(fp)
80202f0c:	e009883a 	mov	r4,fp
80202f10:	02062380 	call	80206238 <_Balloc>
80202f14:	d8800715 	stw	r2,28(sp)
80202f18:	e0801015 	stw	r2,64(fp)
80202f1c:	00800384 	movi	r2,14
80202f20:	1400f736 	bltu	r2,r16,80203300 <_dtoa_r+0x764>
80202f24:	8800f626 	beq	r17,zero,80203300 <_dtoa_r+0x764>
80202f28:	d9c00517 	ldw	r7,20(sp)
80202f2c:	01c39a0e 	bge	zero,r7,80203d98 <_dtoa_r+0x11fc>
80202f30:	388003cc 	andi	r2,r7,15
80202f34:	100490fa 	slli	r2,r2,3
80202f38:	382bd13a 	srai	r21,r7,4
80202f3c:	00e00874 	movhi	r3,32801
80202f40:	18c87404 	addi	r3,r3,8656
80202f44:	1885883a 	add	r2,r3,r2
80202f48:	a8c0040c 	andi	r3,r21,16
80202f4c:	12400017 	ldw	r9,0(r2)
80202f50:	12000117 	ldw	r8,4(r2)
80202f54:	18037926 	beq	r3,zero,80203d3c <_dtoa_r+0x11a0>
80202f58:	00a00874 	movhi	r2,32801
80202f5c:	10886a04 	addi	r2,r2,8616
80202f60:	11800817 	ldw	r6,32(r2)
80202f64:	11c00917 	ldw	r7,36(r2)
80202f68:	9009883a 	mov	r4,r18
80202f6c:	980b883a 	mov	r5,r19
80202f70:	da001715 	stw	r8,92(sp)
80202f74:	da401615 	stw	r9,88(sp)
80202f78:	020af040 	call	8020af04 <__divdf3>
80202f7c:	da001717 	ldw	r8,92(sp)
80202f80:	da401617 	ldw	r9,88(sp)
80202f84:	ad4003cc 	andi	r21,r21,15
80202f88:	040000c4 	movi	r16,3
80202f8c:	1023883a 	mov	r17,r2
80202f90:	1829883a 	mov	r20,r3
80202f94:	a8001126 	beq	r21,zero,80202fdc <_dtoa_r+0x440>
80202f98:	05e00874 	movhi	r23,32801
80202f9c:	bdc86a04 	addi	r23,r23,8616
80202fa0:	4805883a 	mov	r2,r9
80202fa4:	4007883a 	mov	r3,r8
80202fa8:	a980004c 	andi	r6,r21,1
80202fac:	1009883a 	mov	r4,r2
80202fb0:	a82bd07a 	srai	r21,r21,1
80202fb4:	180b883a 	mov	r5,r3
80202fb8:	30000426 	beq	r6,zero,80202fcc <_dtoa_r+0x430>
80202fbc:	b9800017 	ldw	r6,0(r23)
80202fc0:	b9c00117 	ldw	r7,4(r23)
80202fc4:	84000044 	addi	r16,r16,1
80202fc8:	020ba440 	call	8020ba44 <__muldf3>
80202fcc:	bdc00204 	addi	r23,r23,8
80202fd0:	a83ff51e 	bne	r21,zero,80202fa8 <__reset+0xfa1e2fa8>
80202fd4:	1013883a 	mov	r9,r2
80202fd8:	1811883a 	mov	r8,r3
80202fdc:	480d883a 	mov	r6,r9
80202fe0:	400f883a 	mov	r7,r8
80202fe4:	8809883a 	mov	r4,r17
80202fe8:	a00b883a 	mov	r5,r20
80202fec:	020af040 	call	8020af04 <__divdf3>
80202ff0:	d8800f15 	stw	r2,60(sp)
80202ff4:	d8c01015 	stw	r3,64(sp)
80202ff8:	d8c00e17 	ldw	r3,56(sp)
80202ffc:	18000626 	beq	r3,zero,80203018 <_dtoa_r+0x47c>
80203000:	d9000f17 	ldw	r4,60(sp)
80203004:	d9401017 	ldw	r5,64(sp)
80203008:	000d883a 	mov	r6,zero
8020300c:	01cffc34 	movhi	r7,16368
80203010:	020b9500 	call	8020b950 <__ledf2>
80203014:	10040b16 	blt	r2,zero,80204044 <_dtoa_r+0x14a8>
80203018:	8009883a 	mov	r4,r16
8020301c:	020cad80 	call	8020cad8 <__floatsidf>
80203020:	d9800f17 	ldw	r6,60(sp)
80203024:	d9c01017 	ldw	r7,64(sp)
80203028:	1009883a 	mov	r4,r2
8020302c:	180b883a 	mov	r5,r3
80203030:	020ba440 	call	8020ba44 <__muldf3>
80203034:	000d883a 	mov	r6,zero
80203038:	01d00734 	movhi	r7,16412
8020303c:	1009883a 	mov	r4,r2
80203040:	180b883a 	mov	r5,r3
80203044:	020a6580 	call	8020a658 <__adddf3>
80203048:	1021883a 	mov	r16,r2
8020304c:	d8800617 	ldw	r2,24(sp)
80203050:	047f3034 	movhi	r17,64704
80203054:	1c63883a 	add	r17,r3,r17
80203058:	10031826 	beq	r2,zero,80203cbc <_dtoa_r+0x1120>
8020305c:	d8c00517 	ldw	r3,20(sp)
80203060:	db000617 	ldw	r12,24(sp)
80203064:	d8c01315 	stw	r3,76(sp)
80203068:	d9000b17 	ldw	r4,44(sp)
8020306c:	20038f26 	beq	r4,zero,80203eac <_dtoa_r+0x1310>
80203070:	60bfffc4 	addi	r2,r12,-1
80203074:	100490fa 	slli	r2,r2,3
80203078:	00e00874 	movhi	r3,32801
8020307c:	18c87404 	addi	r3,r3,8656
80203080:	1885883a 	add	r2,r3,r2
80203084:	11800017 	ldw	r6,0(r2)
80203088:	11c00117 	ldw	r7,4(r2)
8020308c:	d8800717 	ldw	r2,28(sp)
80203090:	0009883a 	mov	r4,zero
80203094:	014ff834 	movhi	r5,16352
80203098:	db001615 	stw	r12,88(sp)
8020309c:	15c00044 	addi	r23,r2,1
802030a0:	020af040 	call	8020af04 <__divdf3>
802030a4:	800d883a 	mov	r6,r16
802030a8:	880f883a 	mov	r7,r17
802030ac:	1009883a 	mov	r4,r2
802030b0:	180b883a 	mov	r5,r3
802030b4:	020c15c0 	call	8020c15c <__subdf3>
802030b8:	d9401017 	ldw	r5,64(sp)
802030bc:	d9000f17 	ldw	r4,60(sp)
802030c0:	102b883a 	mov	r21,r2
802030c4:	d8c01215 	stw	r3,72(sp)
802030c8:	020ca580 	call	8020ca58 <__fixdfsi>
802030cc:	1009883a 	mov	r4,r2
802030d0:	1029883a 	mov	r20,r2
802030d4:	020cad80 	call	8020cad8 <__floatsidf>
802030d8:	d9000f17 	ldw	r4,60(sp)
802030dc:	d9401017 	ldw	r5,64(sp)
802030e0:	100d883a 	mov	r6,r2
802030e4:	180f883a 	mov	r7,r3
802030e8:	020c15c0 	call	8020c15c <__subdf3>
802030ec:	1823883a 	mov	r17,r3
802030f0:	d8c00717 	ldw	r3,28(sp)
802030f4:	d9401217 	ldw	r5,72(sp)
802030f8:	a2000c04 	addi	r8,r20,48
802030fc:	1021883a 	mov	r16,r2
80203100:	1a000005 	stb	r8,0(r3)
80203104:	800d883a 	mov	r6,r16
80203108:	880f883a 	mov	r7,r17
8020310c:	a809883a 	mov	r4,r21
80203110:	4029883a 	mov	r20,r8
80203114:	020b8740 	call	8020b874 <__gedf2>
80203118:	00841d16 	blt	zero,r2,80204190 <_dtoa_r+0x15f4>
8020311c:	800d883a 	mov	r6,r16
80203120:	880f883a 	mov	r7,r17
80203124:	0009883a 	mov	r4,zero
80203128:	014ffc34 	movhi	r5,16368
8020312c:	020c15c0 	call	8020c15c <__subdf3>
80203130:	d9401217 	ldw	r5,72(sp)
80203134:	100d883a 	mov	r6,r2
80203138:	180f883a 	mov	r7,r3
8020313c:	a809883a 	mov	r4,r21
80203140:	020b8740 	call	8020b874 <__gedf2>
80203144:	db001617 	ldw	r12,88(sp)
80203148:	00840e16 	blt	zero,r2,80204184 <_dtoa_r+0x15e8>
8020314c:	00800044 	movi	r2,1
80203150:	13006b0e 	bge	r2,r12,80203300 <_dtoa_r+0x764>
80203154:	d9000717 	ldw	r4,28(sp)
80203158:	dd800f15 	stw	r22,60(sp)
8020315c:	dcc01015 	stw	r19,64(sp)
80203160:	2319883a 	add	r12,r4,r12
80203164:	dcc01217 	ldw	r19,72(sp)
80203168:	602d883a 	mov	r22,r12
8020316c:	dc801215 	stw	r18,72(sp)
80203170:	b825883a 	mov	r18,r23
80203174:	00000906 	br	8020319c <_dtoa_r+0x600>
80203178:	020c15c0 	call	8020c15c <__subdf3>
8020317c:	a80d883a 	mov	r6,r21
80203180:	980f883a 	mov	r7,r19
80203184:	1009883a 	mov	r4,r2
80203188:	180b883a 	mov	r5,r3
8020318c:	020b9500 	call	8020b950 <__ledf2>
80203190:	1003e816 	blt	r2,zero,80204134 <_dtoa_r+0x1598>
80203194:	b825883a 	mov	r18,r23
80203198:	bd83e926 	beq	r23,r22,80204140 <_dtoa_r+0x15a4>
8020319c:	a809883a 	mov	r4,r21
802031a0:	980b883a 	mov	r5,r19
802031a4:	000d883a 	mov	r6,zero
802031a8:	01d00934 	movhi	r7,16420
802031ac:	020ba440 	call	8020ba44 <__muldf3>
802031b0:	000d883a 	mov	r6,zero
802031b4:	01d00934 	movhi	r7,16420
802031b8:	8009883a 	mov	r4,r16
802031bc:	880b883a 	mov	r5,r17
802031c0:	102b883a 	mov	r21,r2
802031c4:	1827883a 	mov	r19,r3
802031c8:	020ba440 	call	8020ba44 <__muldf3>
802031cc:	180b883a 	mov	r5,r3
802031d0:	1009883a 	mov	r4,r2
802031d4:	1821883a 	mov	r16,r3
802031d8:	1023883a 	mov	r17,r2
802031dc:	020ca580 	call	8020ca58 <__fixdfsi>
802031e0:	1009883a 	mov	r4,r2
802031e4:	1029883a 	mov	r20,r2
802031e8:	020cad80 	call	8020cad8 <__floatsidf>
802031ec:	8809883a 	mov	r4,r17
802031f0:	800b883a 	mov	r5,r16
802031f4:	100d883a 	mov	r6,r2
802031f8:	180f883a 	mov	r7,r3
802031fc:	020c15c0 	call	8020c15c <__subdf3>
80203200:	a5000c04 	addi	r20,r20,48
80203204:	a80d883a 	mov	r6,r21
80203208:	980f883a 	mov	r7,r19
8020320c:	1009883a 	mov	r4,r2
80203210:	180b883a 	mov	r5,r3
80203214:	95000005 	stb	r20,0(r18)
80203218:	1021883a 	mov	r16,r2
8020321c:	1823883a 	mov	r17,r3
80203220:	020b9500 	call	8020b950 <__ledf2>
80203224:	bdc00044 	addi	r23,r23,1
80203228:	800d883a 	mov	r6,r16
8020322c:	880f883a 	mov	r7,r17
80203230:	0009883a 	mov	r4,zero
80203234:	014ffc34 	movhi	r5,16368
80203238:	103fcf0e 	bge	r2,zero,80203178 <__reset+0xfa1e3178>
8020323c:	d8c01317 	ldw	r3,76(sp)
80203240:	d8c00515 	stw	r3,20(sp)
80203244:	d9400917 	ldw	r5,36(sp)
80203248:	e009883a 	mov	r4,fp
8020324c:	02062e00 	call	802062e0 <_Bfree>
80203250:	d9000517 	ldw	r4,20(sp)
80203254:	d9802317 	ldw	r6,140(sp)
80203258:	d9c02517 	ldw	r7,148(sp)
8020325c:	b8000005 	stb	zero,0(r23)
80203260:	20800044 	addi	r2,r4,1
80203264:	30800015 	stw	r2,0(r6)
80203268:	3802aa26 	beq	r7,zero,80203d14 <_dtoa_r+0x1178>
8020326c:	3dc00015 	stw	r23,0(r7)
80203270:	d8800717 	ldw	r2,28(sp)
80203274:	003e7906 	br	80202c5c <__reset+0xfa1e2c5c>
80203278:	00800434 	movhi	r2,16
8020327c:	10bfffc4 	addi	r2,r2,-1
80203280:	88a2703a 	and	r17,r17,r2
80203284:	883e851e 	bne	r17,zero,80202c9c <__reset+0xfa1e2c9c>
80203288:	00a00874 	movhi	r2,32801
8020328c:	10885504 	addi	r2,r2,8532
80203290:	003e8406 	br	80202ca4 <__reset+0xfa1e2ca4>
80203294:	10c00204 	addi	r3,r2,8
80203298:	003e8706 	br	80202cb8 <__reset+0xfa1e2cb8>
8020329c:	01400434 	movhi	r5,16
802032a0:	297fffc4 	addi	r5,r5,-1
802032a4:	994a703a 	and	r5,r19,r5
802032a8:	9009883a 	mov	r4,r18
802032ac:	843f0044 	addi	r16,r16,-1023
802032b0:	294ffc34 	orhi	r5,r5,16368
802032b4:	dd800217 	ldw	r22,8(sp)
802032b8:	d8001115 	stw	zero,68(sp)
802032bc:	003ea506 	br	80202d54 <__reset+0xfa1e2d54>
802032c0:	00a00874 	movhi	r2,32801
802032c4:	10884c04 	addi	r2,r2,8496
802032c8:	003e6406 	br	80202c5c <__reset+0xfa1e2c5c>
802032cc:	e0001115 	stw	zero,68(fp)
802032d0:	000b883a 	mov	r5,zero
802032d4:	e009883a 	mov	r4,fp
802032d8:	02062380 	call	80206238 <_Balloc>
802032dc:	01bfffc4 	movi	r6,-1
802032e0:	01c00044 	movi	r7,1
802032e4:	d8800715 	stw	r2,28(sp)
802032e8:	d9800c15 	stw	r6,48(sp)
802032ec:	e0801015 	stw	r2,64(fp)
802032f0:	d8000315 	stw	zero,12(sp)
802032f4:	d9c00b15 	stw	r7,44(sp)
802032f8:	d9800615 	stw	r6,24(sp)
802032fc:	d8002215 	stw	zero,136(sp)
80203300:	d8800117 	ldw	r2,4(sp)
80203304:	10008916 	blt	r2,zero,8020352c <_dtoa_r+0x990>
80203308:	d9000517 	ldw	r4,20(sp)
8020330c:	00c00384 	movi	r3,14
80203310:	19008616 	blt	r3,r4,8020352c <_dtoa_r+0x990>
80203314:	200490fa 	slli	r2,r4,3
80203318:	00e00874 	movhi	r3,32801
8020331c:	d9802217 	ldw	r6,136(sp)
80203320:	18c87404 	addi	r3,r3,8656
80203324:	1885883a 	add	r2,r3,r2
80203328:	14000017 	ldw	r16,0(r2)
8020332c:	14400117 	ldw	r17,4(r2)
80203330:	30016316 	blt	r6,zero,802038c0 <_dtoa_r+0xd24>
80203334:	800d883a 	mov	r6,r16
80203338:	880f883a 	mov	r7,r17
8020333c:	9009883a 	mov	r4,r18
80203340:	980b883a 	mov	r5,r19
80203344:	020af040 	call	8020af04 <__divdf3>
80203348:	180b883a 	mov	r5,r3
8020334c:	1009883a 	mov	r4,r2
80203350:	020ca580 	call	8020ca58 <__fixdfsi>
80203354:	1009883a 	mov	r4,r2
80203358:	102b883a 	mov	r21,r2
8020335c:	020cad80 	call	8020cad8 <__floatsidf>
80203360:	800d883a 	mov	r6,r16
80203364:	880f883a 	mov	r7,r17
80203368:	1009883a 	mov	r4,r2
8020336c:	180b883a 	mov	r5,r3
80203370:	020ba440 	call	8020ba44 <__muldf3>
80203374:	100d883a 	mov	r6,r2
80203378:	180f883a 	mov	r7,r3
8020337c:	9009883a 	mov	r4,r18
80203380:	980b883a 	mov	r5,r19
80203384:	020c15c0 	call	8020c15c <__subdf3>
80203388:	d9c00717 	ldw	r7,28(sp)
8020338c:	1009883a 	mov	r4,r2
80203390:	a8800c04 	addi	r2,r21,48
80203394:	38800005 	stb	r2,0(r7)
80203398:	3dc00044 	addi	r23,r7,1
8020339c:	d9c00617 	ldw	r7,24(sp)
802033a0:	01800044 	movi	r6,1
802033a4:	180b883a 	mov	r5,r3
802033a8:	2005883a 	mov	r2,r4
802033ac:	39803826 	beq	r7,r6,80203490 <_dtoa_r+0x8f4>
802033b0:	000d883a 	mov	r6,zero
802033b4:	01d00934 	movhi	r7,16420
802033b8:	020ba440 	call	8020ba44 <__muldf3>
802033bc:	000d883a 	mov	r6,zero
802033c0:	000f883a 	mov	r7,zero
802033c4:	1009883a 	mov	r4,r2
802033c8:	180b883a 	mov	r5,r3
802033cc:	1025883a 	mov	r18,r2
802033d0:	1827883a 	mov	r19,r3
802033d4:	020b7ec0 	call	8020b7ec <__eqdf2>
802033d8:	103f9a26 	beq	r2,zero,80203244 <__reset+0xfa1e3244>
802033dc:	d9c00617 	ldw	r7,24(sp)
802033e0:	d8c00717 	ldw	r3,28(sp)
802033e4:	b829883a 	mov	r20,r23
802033e8:	38bfffc4 	addi	r2,r7,-1
802033ec:	18ad883a 	add	r22,r3,r2
802033f0:	00000a06 	br	8020341c <_dtoa_r+0x880>
802033f4:	020ba440 	call	8020ba44 <__muldf3>
802033f8:	000d883a 	mov	r6,zero
802033fc:	000f883a 	mov	r7,zero
80203400:	1009883a 	mov	r4,r2
80203404:	180b883a 	mov	r5,r3
80203408:	1025883a 	mov	r18,r2
8020340c:	1827883a 	mov	r19,r3
80203410:	b829883a 	mov	r20,r23
80203414:	020b7ec0 	call	8020b7ec <__eqdf2>
80203418:	103f8a26 	beq	r2,zero,80203244 <__reset+0xfa1e3244>
8020341c:	800d883a 	mov	r6,r16
80203420:	880f883a 	mov	r7,r17
80203424:	9009883a 	mov	r4,r18
80203428:	980b883a 	mov	r5,r19
8020342c:	020af040 	call	8020af04 <__divdf3>
80203430:	180b883a 	mov	r5,r3
80203434:	1009883a 	mov	r4,r2
80203438:	020ca580 	call	8020ca58 <__fixdfsi>
8020343c:	1009883a 	mov	r4,r2
80203440:	102b883a 	mov	r21,r2
80203444:	020cad80 	call	8020cad8 <__floatsidf>
80203448:	800d883a 	mov	r6,r16
8020344c:	880f883a 	mov	r7,r17
80203450:	1009883a 	mov	r4,r2
80203454:	180b883a 	mov	r5,r3
80203458:	020ba440 	call	8020ba44 <__muldf3>
8020345c:	100d883a 	mov	r6,r2
80203460:	180f883a 	mov	r7,r3
80203464:	9009883a 	mov	r4,r18
80203468:	980b883a 	mov	r5,r19
8020346c:	020c15c0 	call	8020c15c <__subdf3>
80203470:	aa000c04 	addi	r8,r21,48
80203474:	a2000005 	stb	r8,0(r20)
80203478:	000d883a 	mov	r6,zero
8020347c:	01d00934 	movhi	r7,16420
80203480:	1009883a 	mov	r4,r2
80203484:	180b883a 	mov	r5,r3
80203488:	a5c00044 	addi	r23,r20,1
8020348c:	b53fd91e 	bne	r22,r20,802033f4 <__reset+0xfa1e33f4>
80203490:	100d883a 	mov	r6,r2
80203494:	180f883a 	mov	r7,r3
80203498:	1009883a 	mov	r4,r2
8020349c:	180b883a 	mov	r5,r3
802034a0:	020a6580 	call	8020a658 <__adddf3>
802034a4:	100d883a 	mov	r6,r2
802034a8:	180f883a 	mov	r7,r3
802034ac:	8009883a 	mov	r4,r16
802034b0:	880b883a 	mov	r5,r17
802034b4:	1027883a 	mov	r19,r2
802034b8:	1825883a 	mov	r18,r3
802034bc:	020b9500 	call	8020b950 <__ledf2>
802034c0:	10000816 	blt	r2,zero,802034e4 <_dtoa_r+0x948>
802034c4:	980d883a 	mov	r6,r19
802034c8:	900f883a 	mov	r7,r18
802034cc:	8009883a 	mov	r4,r16
802034d0:	880b883a 	mov	r5,r17
802034d4:	020b7ec0 	call	8020b7ec <__eqdf2>
802034d8:	103f5a1e 	bne	r2,zero,80203244 <__reset+0xfa1e3244>
802034dc:	ad40004c 	andi	r21,r21,1
802034e0:	a83f5826 	beq	r21,zero,80203244 <__reset+0xfa1e3244>
802034e4:	bd3fffc3 	ldbu	r20,-1(r23)
802034e8:	b8bfffc4 	addi	r2,r23,-1
802034ec:	1007883a 	mov	r3,r2
802034f0:	01400e44 	movi	r5,57
802034f4:	d9800717 	ldw	r6,28(sp)
802034f8:	00000506 	br	80203510 <_dtoa_r+0x974>
802034fc:	18ffffc4 	addi	r3,r3,-1
80203500:	11824726 	beq	r2,r6,80203e20 <_dtoa_r+0x1284>
80203504:	1d000003 	ldbu	r20,0(r3)
80203508:	102f883a 	mov	r23,r2
8020350c:	10bfffc4 	addi	r2,r2,-1
80203510:	a1003fcc 	andi	r4,r20,255
80203514:	2100201c 	xori	r4,r4,128
80203518:	213fe004 	addi	r4,r4,-128
8020351c:	217ff726 	beq	r4,r5,802034fc <__reset+0xfa1e34fc>
80203520:	a2000044 	addi	r8,r20,1
80203524:	12000005 	stb	r8,0(r2)
80203528:	003f4606 	br	80203244 <__reset+0xfa1e3244>
8020352c:	d9000b17 	ldw	r4,44(sp)
80203530:	2000c826 	beq	r4,zero,80203854 <_dtoa_r+0xcb8>
80203534:	d9800317 	ldw	r6,12(sp)
80203538:	00c00044 	movi	r3,1
8020353c:	1980f90e 	bge	r3,r6,80203924 <_dtoa_r+0xd88>
80203540:	d8800617 	ldw	r2,24(sp)
80203544:	d8c00a17 	ldw	r3,40(sp)
80203548:	157fffc4 	addi	r21,r2,-1
8020354c:	1d41f316 	blt	r3,r21,80203d1c <_dtoa_r+0x1180>
80203550:	1d6bc83a 	sub	r21,r3,r21
80203554:	d9c00617 	ldw	r7,24(sp)
80203558:	3802aa16 	blt	r7,zero,80204004 <_dtoa_r+0x1468>
8020355c:	dd000817 	ldw	r20,32(sp)
80203560:	d8800617 	ldw	r2,24(sp)
80203564:	d8c00817 	ldw	r3,32(sp)
80203568:	01400044 	movi	r5,1
8020356c:	e009883a 	mov	r4,fp
80203570:	1887883a 	add	r3,r3,r2
80203574:	d8c00815 	stw	r3,32(sp)
80203578:	b0ad883a 	add	r22,r22,r2
8020357c:	02066440 	call	80206644 <__i2b>
80203580:	1023883a 	mov	r17,r2
80203584:	a0000826 	beq	r20,zero,802035a8 <_dtoa_r+0xa0c>
80203588:	0580070e 	bge	zero,r22,802035a8 <_dtoa_r+0xa0c>
8020358c:	a005883a 	mov	r2,r20
80203590:	b500b916 	blt	r22,r20,80203878 <_dtoa_r+0xcdc>
80203594:	d9000817 	ldw	r4,32(sp)
80203598:	a0a9c83a 	sub	r20,r20,r2
8020359c:	b0adc83a 	sub	r22,r22,r2
802035a0:	2089c83a 	sub	r4,r4,r2
802035a4:	d9000815 	stw	r4,32(sp)
802035a8:	d9800a17 	ldw	r6,40(sp)
802035ac:	0181810e 	bge	zero,r6,80203bb4 <_dtoa_r+0x1018>
802035b0:	d9c00b17 	ldw	r7,44(sp)
802035b4:	3800b326 	beq	r7,zero,80203884 <_dtoa_r+0xce8>
802035b8:	a800b226 	beq	r21,zero,80203884 <_dtoa_r+0xce8>
802035bc:	880b883a 	mov	r5,r17
802035c0:	a80d883a 	mov	r6,r21
802035c4:	e009883a 	mov	r4,fp
802035c8:	02068780 	call	80206878 <__pow5mult>
802035cc:	d9800917 	ldw	r6,36(sp)
802035d0:	100b883a 	mov	r5,r2
802035d4:	e009883a 	mov	r4,fp
802035d8:	1023883a 	mov	r17,r2
802035dc:	02066800 	call	80206680 <__multiply>
802035e0:	1021883a 	mov	r16,r2
802035e4:	d8800a17 	ldw	r2,40(sp)
802035e8:	d9400917 	ldw	r5,36(sp)
802035ec:	e009883a 	mov	r4,fp
802035f0:	1545c83a 	sub	r2,r2,r21
802035f4:	d8800a15 	stw	r2,40(sp)
802035f8:	02062e00 	call	802062e0 <_Bfree>
802035fc:	d8c00a17 	ldw	r3,40(sp)
80203600:	18009f1e 	bne	r3,zero,80203880 <_dtoa_r+0xce4>
80203604:	05c00044 	movi	r23,1
80203608:	e009883a 	mov	r4,fp
8020360c:	b80b883a 	mov	r5,r23
80203610:	02066440 	call	80206644 <__i2b>
80203614:	d9000d17 	ldw	r4,52(sp)
80203618:	102b883a 	mov	r21,r2
8020361c:	2000ce26 	beq	r4,zero,80203958 <_dtoa_r+0xdbc>
80203620:	200d883a 	mov	r6,r4
80203624:	100b883a 	mov	r5,r2
80203628:	e009883a 	mov	r4,fp
8020362c:	02068780 	call	80206878 <__pow5mult>
80203630:	d9800317 	ldw	r6,12(sp)
80203634:	102b883a 	mov	r21,r2
80203638:	b981810e 	bge	r23,r6,80203c40 <_dtoa_r+0x10a4>
8020363c:	0027883a 	mov	r19,zero
80203640:	a8800417 	ldw	r2,16(r21)
80203644:	05c00804 	movi	r23,32
80203648:	10800104 	addi	r2,r2,4
8020364c:	1085883a 	add	r2,r2,r2
80203650:	1085883a 	add	r2,r2,r2
80203654:	a885883a 	add	r2,r21,r2
80203658:	11000017 	ldw	r4,0(r2)
8020365c:	020652c0 	call	8020652c <__hi0bits>
80203660:	b885c83a 	sub	r2,r23,r2
80203664:	1585883a 	add	r2,r2,r22
80203668:	108007cc 	andi	r2,r2,31
8020366c:	1000b326 	beq	r2,zero,8020393c <_dtoa_r+0xda0>
80203670:	00c00804 	movi	r3,32
80203674:	1887c83a 	sub	r3,r3,r2
80203678:	01000104 	movi	r4,4
8020367c:	20c2cd0e 	bge	r4,r3,802041b4 <_dtoa_r+0x1618>
80203680:	00c00704 	movi	r3,28
80203684:	1885c83a 	sub	r2,r3,r2
80203688:	d8c00817 	ldw	r3,32(sp)
8020368c:	a0a9883a 	add	r20,r20,r2
80203690:	b0ad883a 	add	r22,r22,r2
80203694:	1887883a 	add	r3,r3,r2
80203698:	d8c00815 	stw	r3,32(sp)
8020369c:	d9800817 	ldw	r6,32(sp)
802036a0:	0180040e 	bge	zero,r6,802036b4 <_dtoa_r+0xb18>
802036a4:	800b883a 	mov	r5,r16
802036a8:	e009883a 	mov	r4,fp
802036ac:	02069b80 	call	802069b8 <__lshift>
802036b0:	1021883a 	mov	r16,r2
802036b4:	0580050e 	bge	zero,r22,802036cc <_dtoa_r+0xb30>
802036b8:	a80b883a 	mov	r5,r21
802036bc:	b00d883a 	mov	r6,r22
802036c0:	e009883a 	mov	r4,fp
802036c4:	02069b80 	call	802069b8 <__lshift>
802036c8:	102b883a 	mov	r21,r2
802036cc:	d9c00e17 	ldw	r7,56(sp)
802036d0:	3801211e 	bne	r7,zero,80203b58 <_dtoa_r+0xfbc>
802036d4:	d9800617 	ldw	r6,24(sp)
802036d8:	0181380e 	bge	zero,r6,80203bbc <_dtoa_r+0x1020>
802036dc:	d8c00b17 	ldw	r3,44(sp)
802036e0:	1800ab1e 	bne	r3,zero,80203990 <_dtoa_r+0xdf4>
802036e4:	dc800717 	ldw	r18,28(sp)
802036e8:	dcc00617 	ldw	r19,24(sp)
802036ec:	9029883a 	mov	r20,r18
802036f0:	00000206 	br	802036fc <_dtoa_r+0xb60>
802036f4:	02063080 	call	80206308 <__multadd>
802036f8:	1021883a 	mov	r16,r2
802036fc:	a80b883a 	mov	r5,r21
80203700:	8009883a 	mov	r4,r16
80203704:	020299c0 	call	8020299c <quorem>
80203708:	10800c04 	addi	r2,r2,48
8020370c:	90800005 	stb	r2,0(r18)
80203710:	94800044 	addi	r18,r18,1
80203714:	9507c83a 	sub	r3,r18,r20
80203718:	000f883a 	mov	r7,zero
8020371c:	01800284 	movi	r6,10
80203720:	800b883a 	mov	r5,r16
80203724:	e009883a 	mov	r4,fp
80203728:	1cfff216 	blt	r3,r19,802036f4 <__reset+0xfa1e36f4>
8020372c:	1011883a 	mov	r8,r2
80203730:	d8800617 	ldw	r2,24(sp)
80203734:	0082370e 	bge	zero,r2,80204014 <_dtoa_r+0x1478>
80203738:	d9000717 	ldw	r4,28(sp)
8020373c:	0025883a 	mov	r18,zero
80203740:	20af883a 	add	r23,r4,r2
80203744:	01800044 	movi	r6,1
80203748:	800b883a 	mov	r5,r16
8020374c:	e009883a 	mov	r4,fp
80203750:	da001715 	stw	r8,92(sp)
80203754:	02069b80 	call	802069b8 <__lshift>
80203758:	a80b883a 	mov	r5,r21
8020375c:	1009883a 	mov	r4,r2
80203760:	d8800915 	stw	r2,36(sp)
80203764:	0206b000 	call	80206b00 <__mcmp>
80203768:	da001717 	ldw	r8,92(sp)
8020376c:	0081800e 	bge	zero,r2,80203d70 <_dtoa_r+0x11d4>
80203770:	b93fffc3 	ldbu	r4,-1(r23)
80203774:	b8bfffc4 	addi	r2,r23,-1
80203778:	1007883a 	mov	r3,r2
8020377c:	01800e44 	movi	r6,57
80203780:	d9c00717 	ldw	r7,28(sp)
80203784:	00000506 	br	8020379c <_dtoa_r+0xc00>
80203788:	18ffffc4 	addi	r3,r3,-1
8020378c:	11c12326 	beq	r2,r7,80203c1c <_dtoa_r+0x1080>
80203790:	19000003 	ldbu	r4,0(r3)
80203794:	102f883a 	mov	r23,r2
80203798:	10bfffc4 	addi	r2,r2,-1
8020379c:	21403fcc 	andi	r5,r4,255
802037a0:	2940201c 	xori	r5,r5,128
802037a4:	297fe004 	addi	r5,r5,-128
802037a8:	29bff726 	beq	r5,r6,80203788 <__reset+0xfa1e3788>
802037ac:	21000044 	addi	r4,r4,1
802037b0:	11000005 	stb	r4,0(r2)
802037b4:	a80b883a 	mov	r5,r21
802037b8:	e009883a 	mov	r4,fp
802037bc:	02062e00 	call	802062e0 <_Bfree>
802037c0:	883ea026 	beq	r17,zero,80203244 <__reset+0xfa1e3244>
802037c4:	90000426 	beq	r18,zero,802037d8 <_dtoa_r+0xc3c>
802037c8:	94400326 	beq	r18,r17,802037d8 <_dtoa_r+0xc3c>
802037cc:	900b883a 	mov	r5,r18
802037d0:	e009883a 	mov	r4,fp
802037d4:	02062e00 	call	802062e0 <_Bfree>
802037d8:	880b883a 	mov	r5,r17
802037dc:	e009883a 	mov	r4,fp
802037e0:	02062e00 	call	802062e0 <_Bfree>
802037e4:	003e9706 	br	80203244 <__reset+0xfa1e3244>
802037e8:	01800044 	movi	r6,1
802037ec:	d9800e15 	stw	r6,56(sp)
802037f0:	003d9606 	br	80202e4c <__reset+0xfa1e2e4c>
802037f4:	d8800817 	ldw	r2,32(sp)
802037f8:	d8c00517 	ldw	r3,20(sp)
802037fc:	d8000d15 	stw	zero,52(sp)
80203800:	10c5c83a 	sub	r2,r2,r3
80203804:	00c9c83a 	sub	r4,zero,r3
80203808:	d8800815 	stw	r2,32(sp)
8020380c:	d9000a15 	stw	r4,40(sp)
80203810:	003d9706 	br	80202e70 <__reset+0xfa1e2e70>
80203814:	05adc83a 	sub	r22,zero,r22
80203818:	dd800815 	stw	r22,32(sp)
8020381c:	002d883a 	mov	r22,zero
80203820:	003d8e06 	br	80202e5c <__reset+0xfa1e2e5c>
80203824:	d9000517 	ldw	r4,20(sp)
80203828:	020cad80 	call	8020cad8 <__floatsidf>
8020382c:	100d883a 	mov	r6,r2
80203830:	180f883a 	mov	r7,r3
80203834:	a009883a 	mov	r4,r20
80203838:	880b883a 	mov	r5,r17
8020383c:	020b7ec0 	call	8020b7ec <__eqdf2>
80203840:	103d7126 	beq	r2,zero,80202e08 <__reset+0xfa1e2e08>
80203844:	d9c00517 	ldw	r7,20(sp)
80203848:	39ffffc4 	addi	r7,r7,-1
8020384c:	d9c00515 	stw	r7,20(sp)
80203850:	003d6d06 	br	80202e08 <__reset+0xfa1e2e08>
80203854:	dd400a17 	ldw	r21,40(sp)
80203858:	dd000817 	ldw	r20,32(sp)
8020385c:	0023883a 	mov	r17,zero
80203860:	003f4806 	br	80203584 <__reset+0xfa1e3584>
80203864:	10e3c83a 	sub	r17,r2,r3
80203868:	9448983a 	sll	r4,r18,r17
8020386c:	003d3206 	br	80202d38 <__reset+0xfa1e2d38>
80203870:	d8000e15 	stw	zero,56(sp)
80203874:	003d7506 	br	80202e4c <__reset+0xfa1e2e4c>
80203878:	b005883a 	mov	r2,r22
8020387c:	003f4506 	br	80203594 <__reset+0xfa1e3594>
80203880:	dc000915 	stw	r16,36(sp)
80203884:	d9800a17 	ldw	r6,40(sp)
80203888:	d9400917 	ldw	r5,36(sp)
8020388c:	e009883a 	mov	r4,fp
80203890:	02068780 	call	80206878 <__pow5mult>
80203894:	1021883a 	mov	r16,r2
80203898:	003f5a06 	br	80203604 <__reset+0xfa1e3604>
8020389c:	01c00044 	movi	r7,1
802038a0:	d9c00b15 	stw	r7,44(sp)
802038a4:	d8802217 	ldw	r2,136(sp)
802038a8:	0081280e 	bge	zero,r2,80203d4c <_dtoa_r+0x11b0>
802038ac:	100d883a 	mov	r6,r2
802038b0:	1021883a 	mov	r16,r2
802038b4:	d8800c15 	stw	r2,48(sp)
802038b8:	d8800615 	stw	r2,24(sp)
802038bc:	003d8806 	br	80202ee0 <__reset+0xfa1e2ee0>
802038c0:	d8800617 	ldw	r2,24(sp)
802038c4:	00be9b16 	blt	zero,r2,80203334 <__reset+0xfa1e3334>
802038c8:	10010f1e 	bne	r2,zero,80203d08 <_dtoa_r+0x116c>
802038cc:	880b883a 	mov	r5,r17
802038d0:	000d883a 	mov	r6,zero
802038d4:	01d00534 	movhi	r7,16404
802038d8:	8009883a 	mov	r4,r16
802038dc:	020ba440 	call	8020ba44 <__muldf3>
802038e0:	900d883a 	mov	r6,r18
802038e4:	980f883a 	mov	r7,r19
802038e8:	1009883a 	mov	r4,r2
802038ec:	180b883a 	mov	r5,r3
802038f0:	020b8740 	call	8020b874 <__gedf2>
802038f4:	002b883a 	mov	r21,zero
802038f8:	0023883a 	mov	r17,zero
802038fc:	1000bf16 	blt	r2,zero,80203bfc <_dtoa_r+0x1060>
80203900:	d9802217 	ldw	r6,136(sp)
80203904:	ddc00717 	ldw	r23,28(sp)
80203908:	018c303a 	nor	r6,zero,r6
8020390c:	d9800515 	stw	r6,20(sp)
80203910:	a80b883a 	mov	r5,r21
80203914:	e009883a 	mov	r4,fp
80203918:	02062e00 	call	802062e0 <_Bfree>
8020391c:	883e4926 	beq	r17,zero,80203244 <__reset+0xfa1e3244>
80203920:	003fad06 	br	802037d8 <__reset+0xfa1e37d8>
80203924:	d9c01117 	ldw	r7,68(sp)
80203928:	3801bc26 	beq	r7,zero,8020401c <_dtoa_r+0x1480>
8020392c:	10810cc4 	addi	r2,r2,1075
80203930:	dd400a17 	ldw	r21,40(sp)
80203934:	dd000817 	ldw	r20,32(sp)
80203938:	003f0a06 	br	80203564 <__reset+0xfa1e3564>
8020393c:	00800704 	movi	r2,28
80203940:	d9000817 	ldw	r4,32(sp)
80203944:	a0a9883a 	add	r20,r20,r2
80203948:	b0ad883a 	add	r22,r22,r2
8020394c:	2089883a 	add	r4,r4,r2
80203950:	d9000815 	stw	r4,32(sp)
80203954:	003f5106 	br	8020369c <__reset+0xfa1e369c>
80203958:	d8c00317 	ldw	r3,12(sp)
8020395c:	b8c1fc0e 	bge	r23,r3,80204150 <_dtoa_r+0x15b4>
80203960:	0027883a 	mov	r19,zero
80203964:	b805883a 	mov	r2,r23
80203968:	003f3e06 	br	80203664 <__reset+0xfa1e3664>
8020396c:	880b883a 	mov	r5,r17
80203970:	e009883a 	mov	r4,fp
80203974:	000f883a 	mov	r7,zero
80203978:	01800284 	movi	r6,10
8020397c:	02063080 	call	80206308 <__multadd>
80203980:	d9000c17 	ldw	r4,48(sp)
80203984:	1023883a 	mov	r17,r2
80203988:	0102040e 	bge	zero,r4,8020419c <_dtoa_r+0x1600>
8020398c:	d9000615 	stw	r4,24(sp)
80203990:	0500050e 	bge	zero,r20,802039a8 <_dtoa_r+0xe0c>
80203994:	880b883a 	mov	r5,r17
80203998:	a00d883a 	mov	r6,r20
8020399c:	e009883a 	mov	r4,fp
802039a0:	02069b80 	call	802069b8 <__lshift>
802039a4:	1023883a 	mov	r17,r2
802039a8:	9801241e 	bne	r19,zero,80203e3c <_dtoa_r+0x12a0>
802039ac:	8829883a 	mov	r20,r17
802039b0:	d9000617 	ldw	r4,24(sp)
802039b4:	dcc00717 	ldw	r19,28(sp)
802039b8:	9480004c 	andi	r18,r18,1
802039bc:	20bfffc4 	addi	r2,r4,-1
802039c0:	9885883a 	add	r2,r19,r2
802039c4:	d8800415 	stw	r2,16(sp)
802039c8:	dc800615 	stw	r18,24(sp)
802039cc:	a80b883a 	mov	r5,r21
802039d0:	8009883a 	mov	r4,r16
802039d4:	020299c0 	call	8020299c <quorem>
802039d8:	880b883a 	mov	r5,r17
802039dc:	8009883a 	mov	r4,r16
802039e0:	102f883a 	mov	r23,r2
802039e4:	0206b000 	call	80206b00 <__mcmp>
802039e8:	a80b883a 	mov	r5,r21
802039ec:	a00d883a 	mov	r6,r20
802039f0:	e009883a 	mov	r4,fp
802039f4:	102d883a 	mov	r22,r2
802039f8:	0206b600 	call	80206b60 <__mdiff>
802039fc:	1007883a 	mov	r3,r2
80203a00:	10800317 	ldw	r2,12(r2)
80203a04:	bc800c04 	addi	r18,r23,48
80203a08:	180b883a 	mov	r5,r3
80203a0c:	10004e1e 	bne	r2,zero,80203b48 <_dtoa_r+0xfac>
80203a10:	8009883a 	mov	r4,r16
80203a14:	d8c01615 	stw	r3,88(sp)
80203a18:	0206b000 	call	80206b00 <__mcmp>
80203a1c:	d8c01617 	ldw	r3,88(sp)
80203a20:	e009883a 	mov	r4,fp
80203a24:	d8801615 	stw	r2,88(sp)
80203a28:	180b883a 	mov	r5,r3
80203a2c:	02062e00 	call	802062e0 <_Bfree>
80203a30:	d8801617 	ldw	r2,88(sp)
80203a34:	1000041e 	bne	r2,zero,80203a48 <_dtoa_r+0xeac>
80203a38:	d9800317 	ldw	r6,12(sp)
80203a3c:	3000021e 	bne	r6,zero,80203a48 <_dtoa_r+0xeac>
80203a40:	d8c00617 	ldw	r3,24(sp)
80203a44:	18003726 	beq	r3,zero,80203b24 <_dtoa_r+0xf88>
80203a48:	b0002016 	blt	r22,zero,80203acc <_dtoa_r+0xf30>
80203a4c:	b000041e 	bne	r22,zero,80203a60 <_dtoa_r+0xec4>
80203a50:	d9000317 	ldw	r4,12(sp)
80203a54:	2000021e 	bne	r4,zero,80203a60 <_dtoa_r+0xec4>
80203a58:	d8c00617 	ldw	r3,24(sp)
80203a5c:	18001b26 	beq	r3,zero,80203acc <_dtoa_r+0xf30>
80203a60:	00810716 	blt	zero,r2,80203e80 <_dtoa_r+0x12e4>
80203a64:	d8c00417 	ldw	r3,16(sp)
80203a68:	9d800044 	addi	r22,r19,1
80203a6c:	9c800005 	stb	r18,0(r19)
80203a70:	b02f883a 	mov	r23,r22
80203a74:	98c10626 	beq	r19,r3,80203e90 <_dtoa_r+0x12f4>
80203a78:	800b883a 	mov	r5,r16
80203a7c:	000f883a 	mov	r7,zero
80203a80:	01800284 	movi	r6,10
80203a84:	e009883a 	mov	r4,fp
80203a88:	02063080 	call	80206308 <__multadd>
80203a8c:	1021883a 	mov	r16,r2
80203a90:	000f883a 	mov	r7,zero
80203a94:	01800284 	movi	r6,10
80203a98:	880b883a 	mov	r5,r17
80203a9c:	e009883a 	mov	r4,fp
80203aa0:	8d002526 	beq	r17,r20,80203b38 <_dtoa_r+0xf9c>
80203aa4:	02063080 	call	80206308 <__multadd>
80203aa8:	a00b883a 	mov	r5,r20
80203aac:	000f883a 	mov	r7,zero
80203ab0:	01800284 	movi	r6,10
80203ab4:	e009883a 	mov	r4,fp
80203ab8:	1023883a 	mov	r17,r2
80203abc:	02063080 	call	80206308 <__multadd>
80203ac0:	1029883a 	mov	r20,r2
80203ac4:	b027883a 	mov	r19,r22
80203ac8:	003fc006 	br	802039cc <__reset+0xfa1e39cc>
80203acc:	9011883a 	mov	r8,r18
80203ad0:	00800e0e 	bge	zero,r2,80203b0c <_dtoa_r+0xf70>
80203ad4:	800b883a 	mov	r5,r16
80203ad8:	01800044 	movi	r6,1
80203adc:	e009883a 	mov	r4,fp
80203ae0:	da001715 	stw	r8,92(sp)
80203ae4:	02069b80 	call	802069b8 <__lshift>
80203ae8:	a80b883a 	mov	r5,r21
80203aec:	1009883a 	mov	r4,r2
80203af0:	1021883a 	mov	r16,r2
80203af4:	0206b000 	call	80206b00 <__mcmp>
80203af8:	da001717 	ldw	r8,92(sp)
80203afc:	0081960e 	bge	zero,r2,80204158 <_dtoa_r+0x15bc>
80203b00:	00800e44 	movi	r2,57
80203b04:	40817026 	beq	r8,r2,802040c8 <_dtoa_r+0x152c>
80203b08:	ba000c44 	addi	r8,r23,49
80203b0c:	8825883a 	mov	r18,r17
80203b10:	9dc00044 	addi	r23,r19,1
80203b14:	9a000005 	stb	r8,0(r19)
80203b18:	a023883a 	mov	r17,r20
80203b1c:	dc000915 	stw	r16,36(sp)
80203b20:	003f2406 	br	802037b4 <__reset+0xfa1e37b4>
80203b24:	00800e44 	movi	r2,57
80203b28:	9011883a 	mov	r8,r18
80203b2c:	90816626 	beq	r18,r2,802040c8 <_dtoa_r+0x152c>
80203b30:	05bff516 	blt	zero,r22,80203b08 <__reset+0xfa1e3b08>
80203b34:	003ff506 	br	80203b0c <__reset+0xfa1e3b0c>
80203b38:	02063080 	call	80206308 <__multadd>
80203b3c:	1023883a 	mov	r17,r2
80203b40:	1029883a 	mov	r20,r2
80203b44:	003fdf06 	br	80203ac4 <__reset+0xfa1e3ac4>
80203b48:	e009883a 	mov	r4,fp
80203b4c:	02062e00 	call	802062e0 <_Bfree>
80203b50:	00800044 	movi	r2,1
80203b54:	003fbc06 	br	80203a48 <__reset+0xfa1e3a48>
80203b58:	a80b883a 	mov	r5,r21
80203b5c:	8009883a 	mov	r4,r16
80203b60:	0206b000 	call	80206b00 <__mcmp>
80203b64:	103edb0e 	bge	r2,zero,802036d4 <__reset+0xfa1e36d4>
80203b68:	800b883a 	mov	r5,r16
80203b6c:	000f883a 	mov	r7,zero
80203b70:	01800284 	movi	r6,10
80203b74:	e009883a 	mov	r4,fp
80203b78:	02063080 	call	80206308 <__multadd>
80203b7c:	1021883a 	mov	r16,r2
80203b80:	d8800517 	ldw	r2,20(sp)
80203b84:	d8c00b17 	ldw	r3,44(sp)
80203b88:	10bfffc4 	addi	r2,r2,-1
80203b8c:	d8800515 	stw	r2,20(sp)
80203b90:	183f761e 	bne	r3,zero,8020396c <__reset+0xfa1e396c>
80203b94:	d9000c17 	ldw	r4,48(sp)
80203b98:	0101730e 	bge	zero,r4,80204168 <_dtoa_r+0x15cc>
80203b9c:	d9000615 	stw	r4,24(sp)
80203ba0:	003ed006 	br	802036e4 <__reset+0xfa1e36e4>
80203ba4:	00800084 	movi	r2,2
80203ba8:	3081861e 	bne	r6,r2,802041c4 <_dtoa_r+0x1628>
80203bac:	d8000b15 	stw	zero,44(sp)
80203bb0:	003f3c06 	br	802038a4 <__reset+0xfa1e38a4>
80203bb4:	dc000917 	ldw	r16,36(sp)
80203bb8:	003e9206 	br	80203604 <__reset+0xfa1e3604>
80203bbc:	d9c00317 	ldw	r7,12(sp)
80203bc0:	00800084 	movi	r2,2
80203bc4:	11fec50e 	bge	r2,r7,802036dc <__reset+0xfa1e36dc>
80203bc8:	d9000617 	ldw	r4,24(sp)
80203bcc:	20013c1e 	bne	r4,zero,802040c0 <_dtoa_r+0x1524>
80203bd0:	a80b883a 	mov	r5,r21
80203bd4:	000f883a 	mov	r7,zero
80203bd8:	01800144 	movi	r6,5
80203bdc:	e009883a 	mov	r4,fp
80203be0:	02063080 	call	80206308 <__multadd>
80203be4:	100b883a 	mov	r5,r2
80203be8:	8009883a 	mov	r4,r16
80203bec:	102b883a 	mov	r21,r2
80203bf0:	0206b000 	call	80206b00 <__mcmp>
80203bf4:	dc000915 	stw	r16,36(sp)
80203bf8:	00bf410e 	bge	zero,r2,80203900 <__reset+0xfa1e3900>
80203bfc:	d9c00717 	ldw	r7,28(sp)
80203c00:	00800c44 	movi	r2,49
80203c04:	38800005 	stb	r2,0(r7)
80203c08:	d8800517 	ldw	r2,20(sp)
80203c0c:	3dc00044 	addi	r23,r7,1
80203c10:	10800044 	addi	r2,r2,1
80203c14:	d8800515 	stw	r2,20(sp)
80203c18:	003f3d06 	br	80203910 <__reset+0xfa1e3910>
80203c1c:	d9800517 	ldw	r6,20(sp)
80203c20:	d9c00717 	ldw	r7,28(sp)
80203c24:	00800c44 	movi	r2,49
80203c28:	31800044 	addi	r6,r6,1
80203c2c:	d9800515 	stw	r6,20(sp)
80203c30:	38800005 	stb	r2,0(r7)
80203c34:	003edf06 	br	802037b4 <__reset+0xfa1e37b4>
80203c38:	d8000b15 	stw	zero,44(sp)
80203c3c:	003c9f06 	br	80202ebc <__reset+0xfa1e2ebc>
80203c40:	903e7e1e 	bne	r18,zero,8020363c <__reset+0xfa1e363c>
80203c44:	00800434 	movhi	r2,16
80203c48:	10bfffc4 	addi	r2,r2,-1
80203c4c:	9884703a 	and	r2,r19,r2
80203c50:	1000ea1e 	bne	r2,zero,80203ffc <_dtoa_r+0x1460>
80203c54:	9cdffc2c 	andhi	r19,r19,32752
80203c58:	9800e826 	beq	r19,zero,80203ffc <_dtoa_r+0x1460>
80203c5c:	d9c00817 	ldw	r7,32(sp)
80203c60:	b5800044 	addi	r22,r22,1
80203c64:	04c00044 	movi	r19,1
80203c68:	39c00044 	addi	r7,r7,1
80203c6c:	d9c00815 	stw	r7,32(sp)
80203c70:	d8800d17 	ldw	r2,52(sp)
80203c74:	103e721e 	bne	r2,zero,80203640 <__reset+0xfa1e3640>
80203c78:	00800044 	movi	r2,1
80203c7c:	003e7906 	br	80203664 <__reset+0xfa1e3664>
80203c80:	8009883a 	mov	r4,r16
80203c84:	020cad80 	call	8020cad8 <__floatsidf>
80203c88:	d9800f17 	ldw	r6,60(sp)
80203c8c:	d9c01017 	ldw	r7,64(sp)
80203c90:	1009883a 	mov	r4,r2
80203c94:	180b883a 	mov	r5,r3
80203c98:	020ba440 	call	8020ba44 <__muldf3>
80203c9c:	000d883a 	mov	r6,zero
80203ca0:	01d00734 	movhi	r7,16412
80203ca4:	1009883a 	mov	r4,r2
80203ca8:	180b883a 	mov	r5,r3
80203cac:	020a6580 	call	8020a658 <__adddf3>
80203cb0:	047f3034 	movhi	r17,64704
80203cb4:	1021883a 	mov	r16,r2
80203cb8:	1c63883a 	add	r17,r3,r17
80203cbc:	d9000f17 	ldw	r4,60(sp)
80203cc0:	d9401017 	ldw	r5,64(sp)
80203cc4:	000d883a 	mov	r6,zero
80203cc8:	01d00534 	movhi	r7,16404
80203ccc:	020c15c0 	call	8020c15c <__subdf3>
80203cd0:	800d883a 	mov	r6,r16
80203cd4:	880f883a 	mov	r7,r17
80203cd8:	1009883a 	mov	r4,r2
80203cdc:	180b883a 	mov	r5,r3
80203ce0:	102b883a 	mov	r21,r2
80203ce4:	1829883a 	mov	r20,r3
80203ce8:	020b8740 	call	8020b874 <__gedf2>
80203cec:	00806c16 	blt	zero,r2,80203ea0 <_dtoa_r+0x1304>
80203cf0:	89e0003c 	xorhi	r7,r17,32768
80203cf4:	800d883a 	mov	r6,r16
80203cf8:	a809883a 	mov	r4,r21
80203cfc:	a00b883a 	mov	r5,r20
80203d00:	020b9500 	call	8020b950 <__ledf2>
80203d04:	103d7e0e 	bge	r2,zero,80203300 <__reset+0xfa1e3300>
80203d08:	002b883a 	mov	r21,zero
80203d0c:	0023883a 	mov	r17,zero
80203d10:	003efb06 	br	80203900 <__reset+0xfa1e3900>
80203d14:	d8800717 	ldw	r2,28(sp)
80203d18:	003bd006 	br	80202c5c <__reset+0xfa1e2c5c>
80203d1c:	d9000a17 	ldw	r4,40(sp)
80203d20:	d9800d17 	ldw	r6,52(sp)
80203d24:	dd400a15 	stw	r21,40(sp)
80203d28:	a905c83a 	sub	r2,r21,r4
80203d2c:	308d883a 	add	r6,r6,r2
80203d30:	d9800d15 	stw	r6,52(sp)
80203d34:	002b883a 	mov	r21,zero
80203d38:	003e0606 	br	80203554 <__reset+0xfa1e3554>
80203d3c:	9023883a 	mov	r17,r18
80203d40:	9829883a 	mov	r20,r19
80203d44:	04000084 	movi	r16,2
80203d48:	003c9206 	br	80202f94 <__reset+0xfa1e2f94>
80203d4c:	04000044 	movi	r16,1
80203d50:	dc000c15 	stw	r16,48(sp)
80203d54:	dc000615 	stw	r16,24(sp)
80203d58:	dc002215 	stw	r16,136(sp)
80203d5c:	e0001115 	stw	zero,68(fp)
80203d60:	000b883a 	mov	r5,zero
80203d64:	003c6906 	br	80202f0c <__reset+0xfa1e2f0c>
80203d68:	3021883a 	mov	r16,r6
80203d6c:	003ffb06 	br	80203d5c <__reset+0xfa1e3d5c>
80203d70:	1000021e 	bne	r2,zero,80203d7c <_dtoa_r+0x11e0>
80203d74:	4200004c 	andi	r8,r8,1
80203d78:	403e7d1e 	bne	r8,zero,80203770 <__reset+0xfa1e3770>
80203d7c:	01000c04 	movi	r4,48
80203d80:	00000106 	br	80203d88 <_dtoa_r+0x11ec>
80203d84:	102f883a 	mov	r23,r2
80203d88:	b8bfffc4 	addi	r2,r23,-1
80203d8c:	10c00007 	ldb	r3,0(r2)
80203d90:	193ffc26 	beq	r3,r4,80203d84 <__reset+0xfa1e3d84>
80203d94:	003e8706 	br	802037b4 <__reset+0xfa1e37b4>
80203d98:	d8800517 	ldw	r2,20(sp)
80203d9c:	00a3c83a 	sub	r17,zero,r2
80203da0:	8800a426 	beq	r17,zero,80204034 <_dtoa_r+0x1498>
80203da4:	888003cc 	andi	r2,r17,15
80203da8:	100490fa 	slli	r2,r2,3
80203dac:	00e00874 	movhi	r3,32801
80203db0:	18c87404 	addi	r3,r3,8656
80203db4:	1885883a 	add	r2,r3,r2
80203db8:	11800017 	ldw	r6,0(r2)
80203dbc:	11c00117 	ldw	r7,4(r2)
80203dc0:	9009883a 	mov	r4,r18
80203dc4:	980b883a 	mov	r5,r19
80203dc8:	8823d13a 	srai	r17,r17,4
80203dcc:	020ba440 	call	8020ba44 <__muldf3>
80203dd0:	d8800f15 	stw	r2,60(sp)
80203dd4:	d8c01015 	stw	r3,64(sp)
80203dd8:	8800e826 	beq	r17,zero,8020417c <_dtoa_r+0x15e0>
80203ddc:	05200874 	movhi	r20,32801
80203de0:	a5086a04 	addi	r20,r20,8616
80203de4:	04000084 	movi	r16,2
80203de8:	8980004c 	andi	r6,r17,1
80203dec:	1009883a 	mov	r4,r2
80203df0:	8823d07a 	srai	r17,r17,1
80203df4:	180b883a 	mov	r5,r3
80203df8:	30000426 	beq	r6,zero,80203e0c <_dtoa_r+0x1270>
80203dfc:	a1800017 	ldw	r6,0(r20)
80203e00:	a1c00117 	ldw	r7,4(r20)
80203e04:	84000044 	addi	r16,r16,1
80203e08:	020ba440 	call	8020ba44 <__muldf3>
80203e0c:	a5000204 	addi	r20,r20,8
80203e10:	883ff51e 	bne	r17,zero,80203de8 <__reset+0xfa1e3de8>
80203e14:	d8800f15 	stw	r2,60(sp)
80203e18:	d8c01015 	stw	r3,64(sp)
80203e1c:	003c7606 	br	80202ff8 <__reset+0xfa1e2ff8>
80203e20:	00c00c04 	movi	r3,48
80203e24:	10c00005 	stb	r3,0(r2)
80203e28:	d8c00517 	ldw	r3,20(sp)
80203e2c:	bd3fffc3 	ldbu	r20,-1(r23)
80203e30:	18c00044 	addi	r3,r3,1
80203e34:	d8c00515 	stw	r3,20(sp)
80203e38:	003db906 	br	80203520 <__reset+0xfa1e3520>
80203e3c:	89400117 	ldw	r5,4(r17)
80203e40:	e009883a 	mov	r4,fp
80203e44:	02062380 	call	80206238 <_Balloc>
80203e48:	89800417 	ldw	r6,16(r17)
80203e4c:	89400304 	addi	r5,r17,12
80203e50:	11000304 	addi	r4,r2,12
80203e54:	31800084 	addi	r6,r6,2
80203e58:	318d883a 	add	r6,r6,r6
80203e5c:	318d883a 	add	r6,r6,r6
80203e60:	1027883a 	mov	r19,r2
80203e64:	0205e6c0 	call	80205e6c <memcpy>
80203e68:	01800044 	movi	r6,1
80203e6c:	980b883a 	mov	r5,r19
80203e70:	e009883a 	mov	r4,fp
80203e74:	02069b80 	call	802069b8 <__lshift>
80203e78:	1029883a 	mov	r20,r2
80203e7c:	003ecc06 	br	802039b0 <__reset+0xfa1e39b0>
80203e80:	00800e44 	movi	r2,57
80203e84:	90809026 	beq	r18,r2,802040c8 <_dtoa_r+0x152c>
80203e88:	92000044 	addi	r8,r18,1
80203e8c:	003f1f06 	br	80203b0c <__reset+0xfa1e3b0c>
80203e90:	9011883a 	mov	r8,r18
80203e94:	8825883a 	mov	r18,r17
80203e98:	a023883a 	mov	r17,r20
80203e9c:	003e2906 	br	80203744 <__reset+0xfa1e3744>
80203ea0:	002b883a 	mov	r21,zero
80203ea4:	0023883a 	mov	r17,zero
80203ea8:	003f5406 	br	80203bfc <__reset+0xfa1e3bfc>
80203eac:	61bfffc4 	addi	r6,r12,-1
80203eb0:	300490fa 	slli	r2,r6,3
80203eb4:	00e00874 	movhi	r3,32801
80203eb8:	18c87404 	addi	r3,r3,8656
80203ebc:	1885883a 	add	r2,r3,r2
80203ec0:	11000017 	ldw	r4,0(r2)
80203ec4:	11400117 	ldw	r5,4(r2)
80203ec8:	d8800717 	ldw	r2,28(sp)
80203ecc:	880f883a 	mov	r7,r17
80203ed0:	d9801215 	stw	r6,72(sp)
80203ed4:	800d883a 	mov	r6,r16
80203ed8:	db001615 	stw	r12,88(sp)
80203edc:	15c00044 	addi	r23,r2,1
80203ee0:	020ba440 	call	8020ba44 <__muldf3>
80203ee4:	d9401017 	ldw	r5,64(sp)
80203ee8:	d9000f17 	ldw	r4,60(sp)
80203eec:	d8c01515 	stw	r3,84(sp)
80203ef0:	d8801415 	stw	r2,80(sp)
80203ef4:	020ca580 	call	8020ca58 <__fixdfsi>
80203ef8:	1009883a 	mov	r4,r2
80203efc:	1021883a 	mov	r16,r2
80203f00:	020cad80 	call	8020cad8 <__floatsidf>
80203f04:	d9000f17 	ldw	r4,60(sp)
80203f08:	d9401017 	ldw	r5,64(sp)
80203f0c:	100d883a 	mov	r6,r2
80203f10:	180f883a 	mov	r7,r3
80203f14:	020c15c0 	call	8020c15c <__subdf3>
80203f18:	1829883a 	mov	r20,r3
80203f1c:	d8c00717 	ldw	r3,28(sp)
80203f20:	84000c04 	addi	r16,r16,48
80203f24:	1023883a 	mov	r17,r2
80203f28:	1c000005 	stb	r16,0(r3)
80203f2c:	db001617 	ldw	r12,88(sp)
80203f30:	00800044 	movi	r2,1
80203f34:	60802226 	beq	r12,r2,80203fc0 <_dtoa_r+0x1424>
80203f38:	d9c00717 	ldw	r7,28(sp)
80203f3c:	8805883a 	mov	r2,r17
80203f40:	b82b883a 	mov	r21,r23
80203f44:	3b19883a 	add	r12,r7,r12
80203f48:	6023883a 	mov	r17,r12
80203f4c:	a007883a 	mov	r3,r20
80203f50:	dc800f15 	stw	r18,60(sp)
80203f54:	000d883a 	mov	r6,zero
80203f58:	01d00934 	movhi	r7,16420
80203f5c:	1009883a 	mov	r4,r2
80203f60:	180b883a 	mov	r5,r3
80203f64:	020ba440 	call	8020ba44 <__muldf3>
80203f68:	180b883a 	mov	r5,r3
80203f6c:	1009883a 	mov	r4,r2
80203f70:	1829883a 	mov	r20,r3
80203f74:	1025883a 	mov	r18,r2
80203f78:	020ca580 	call	8020ca58 <__fixdfsi>
80203f7c:	1009883a 	mov	r4,r2
80203f80:	1021883a 	mov	r16,r2
80203f84:	020cad80 	call	8020cad8 <__floatsidf>
80203f88:	100d883a 	mov	r6,r2
80203f8c:	180f883a 	mov	r7,r3
80203f90:	9009883a 	mov	r4,r18
80203f94:	a00b883a 	mov	r5,r20
80203f98:	84000c04 	addi	r16,r16,48
80203f9c:	020c15c0 	call	8020c15c <__subdf3>
80203fa0:	ad400044 	addi	r21,r21,1
80203fa4:	ac3fffc5 	stb	r16,-1(r21)
80203fa8:	ac7fea1e 	bne	r21,r17,80203f54 <__reset+0xfa1e3f54>
80203fac:	1023883a 	mov	r17,r2
80203fb0:	d8801217 	ldw	r2,72(sp)
80203fb4:	dc800f17 	ldw	r18,60(sp)
80203fb8:	1829883a 	mov	r20,r3
80203fbc:	b8af883a 	add	r23,r23,r2
80203fc0:	d9001417 	ldw	r4,80(sp)
80203fc4:	d9401517 	ldw	r5,84(sp)
80203fc8:	000d883a 	mov	r6,zero
80203fcc:	01cff834 	movhi	r7,16352
80203fd0:	020a6580 	call	8020a658 <__adddf3>
80203fd4:	880d883a 	mov	r6,r17
80203fd8:	a00f883a 	mov	r7,r20
80203fdc:	1009883a 	mov	r4,r2
80203fe0:	180b883a 	mov	r5,r3
80203fe4:	020b9500 	call	8020b950 <__ledf2>
80203fe8:	10003e0e 	bge	r2,zero,802040e4 <_dtoa_r+0x1548>
80203fec:	d9001317 	ldw	r4,76(sp)
80203ff0:	bd3fffc3 	ldbu	r20,-1(r23)
80203ff4:	d9000515 	stw	r4,20(sp)
80203ff8:	003d3b06 	br	802034e8 <__reset+0xfa1e34e8>
80203ffc:	0027883a 	mov	r19,zero
80204000:	003f1b06 	br	80203c70 <__reset+0xfa1e3c70>
80204004:	d8800817 	ldw	r2,32(sp)
80204008:	11e9c83a 	sub	r20,r2,r7
8020400c:	0005883a 	mov	r2,zero
80204010:	003d5406 	br	80203564 <__reset+0xfa1e3564>
80204014:	00800044 	movi	r2,1
80204018:	003dc706 	br	80203738 <__reset+0xfa1e3738>
8020401c:	d8c00217 	ldw	r3,8(sp)
80204020:	00800d84 	movi	r2,54
80204024:	dd400a17 	ldw	r21,40(sp)
80204028:	10c5c83a 	sub	r2,r2,r3
8020402c:	dd000817 	ldw	r20,32(sp)
80204030:	003d4c06 	br	80203564 <__reset+0xfa1e3564>
80204034:	dc800f15 	stw	r18,60(sp)
80204038:	dcc01015 	stw	r19,64(sp)
8020403c:	04000084 	movi	r16,2
80204040:	003bed06 	br	80202ff8 <__reset+0xfa1e2ff8>
80204044:	d9000617 	ldw	r4,24(sp)
80204048:	203f0d26 	beq	r4,zero,80203c80 <__reset+0xfa1e3c80>
8020404c:	d9800c17 	ldw	r6,48(sp)
80204050:	01bcab0e 	bge	zero,r6,80203300 <__reset+0xfa1e3300>
80204054:	d9401017 	ldw	r5,64(sp)
80204058:	d9000f17 	ldw	r4,60(sp)
8020405c:	000d883a 	mov	r6,zero
80204060:	01d00934 	movhi	r7,16420
80204064:	020ba440 	call	8020ba44 <__muldf3>
80204068:	81000044 	addi	r4,r16,1
8020406c:	d8800f15 	stw	r2,60(sp)
80204070:	d8c01015 	stw	r3,64(sp)
80204074:	020cad80 	call	8020cad8 <__floatsidf>
80204078:	d9800f17 	ldw	r6,60(sp)
8020407c:	d9c01017 	ldw	r7,64(sp)
80204080:	1009883a 	mov	r4,r2
80204084:	180b883a 	mov	r5,r3
80204088:	020ba440 	call	8020ba44 <__muldf3>
8020408c:	01d00734 	movhi	r7,16412
80204090:	000d883a 	mov	r6,zero
80204094:	1009883a 	mov	r4,r2
80204098:	180b883a 	mov	r5,r3
8020409c:	020a6580 	call	8020a658 <__adddf3>
802040a0:	d9c00517 	ldw	r7,20(sp)
802040a4:	047f3034 	movhi	r17,64704
802040a8:	1021883a 	mov	r16,r2
802040ac:	39ffffc4 	addi	r7,r7,-1
802040b0:	d9c01315 	stw	r7,76(sp)
802040b4:	1c63883a 	add	r17,r3,r17
802040b8:	db000c17 	ldw	r12,48(sp)
802040bc:	003bea06 	br	80203068 <__reset+0xfa1e3068>
802040c0:	dc000915 	stw	r16,36(sp)
802040c4:	003e0e06 	br	80203900 <__reset+0xfa1e3900>
802040c8:	01000e44 	movi	r4,57
802040cc:	8825883a 	mov	r18,r17
802040d0:	9dc00044 	addi	r23,r19,1
802040d4:	99000005 	stb	r4,0(r19)
802040d8:	a023883a 	mov	r17,r20
802040dc:	dc000915 	stw	r16,36(sp)
802040e0:	003da406 	br	80203774 <__reset+0xfa1e3774>
802040e4:	d9801417 	ldw	r6,80(sp)
802040e8:	d9c01517 	ldw	r7,84(sp)
802040ec:	0009883a 	mov	r4,zero
802040f0:	014ff834 	movhi	r5,16352
802040f4:	020c15c0 	call	8020c15c <__subdf3>
802040f8:	880d883a 	mov	r6,r17
802040fc:	a00f883a 	mov	r7,r20
80204100:	1009883a 	mov	r4,r2
80204104:	180b883a 	mov	r5,r3
80204108:	020b8740 	call	8020b874 <__gedf2>
8020410c:	00bc7c0e 	bge	zero,r2,80203300 <__reset+0xfa1e3300>
80204110:	01000c04 	movi	r4,48
80204114:	00000106 	br	8020411c <_dtoa_r+0x1580>
80204118:	102f883a 	mov	r23,r2
8020411c:	b8bfffc4 	addi	r2,r23,-1
80204120:	10c00007 	ldb	r3,0(r2)
80204124:	193ffc26 	beq	r3,r4,80204118 <__reset+0xfa1e4118>
80204128:	d9801317 	ldw	r6,76(sp)
8020412c:	d9800515 	stw	r6,20(sp)
80204130:	003c4406 	br	80203244 <__reset+0xfa1e3244>
80204134:	d9801317 	ldw	r6,76(sp)
80204138:	d9800515 	stw	r6,20(sp)
8020413c:	003cea06 	br	802034e8 <__reset+0xfa1e34e8>
80204140:	dd800f17 	ldw	r22,60(sp)
80204144:	dcc01017 	ldw	r19,64(sp)
80204148:	dc801217 	ldw	r18,72(sp)
8020414c:	003c6c06 	br	80203300 <__reset+0xfa1e3300>
80204150:	903e031e 	bne	r18,zero,80203960 <__reset+0xfa1e3960>
80204154:	003ebb06 	br	80203c44 <__reset+0xfa1e3c44>
80204158:	103e6c1e 	bne	r2,zero,80203b0c <__reset+0xfa1e3b0c>
8020415c:	4080004c 	andi	r2,r8,1
80204160:	103e6a26 	beq	r2,zero,80203b0c <__reset+0xfa1e3b0c>
80204164:	003e6606 	br	80203b00 <__reset+0xfa1e3b00>
80204168:	d8c00317 	ldw	r3,12(sp)
8020416c:	00800084 	movi	r2,2
80204170:	10c02916 	blt	r2,r3,80204218 <_dtoa_r+0x167c>
80204174:	d9000c17 	ldw	r4,48(sp)
80204178:	003e8806 	br	80203b9c <__reset+0xfa1e3b9c>
8020417c:	04000084 	movi	r16,2
80204180:	003b9d06 	br	80202ff8 <__reset+0xfa1e2ff8>
80204184:	d9001317 	ldw	r4,76(sp)
80204188:	d9000515 	stw	r4,20(sp)
8020418c:	003cd606 	br	802034e8 <__reset+0xfa1e34e8>
80204190:	d8801317 	ldw	r2,76(sp)
80204194:	d8800515 	stw	r2,20(sp)
80204198:	003c2a06 	br	80203244 <__reset+0xfa1e3244>
8020419c:	d9800317 	ldw	r6,12(sp)
802041a0:	00800084 	movi	r2,2
802041a4:	11801516 	blt	r2,r6,802041fc <_dtoa_r+0x1660>
802041a8:	d9c00c17 	ldw	r7,48(sp)
802041ac:	d9c00615 	stw	r7,24(sp)
802041b0:	003df706 	br	80203990 <__reset+0xfa1e3990>
802041b4:	193d3926 	beq	r3,r4,8020369c <__reset+0xfa1e369c>
802041b8:	00c00f04 	movi	r3,60
802041bc:	1885c83a 	sub	r2,r3,r2
802041c0:	003ddf06 	br	80203940 <__reset+0xfa1e3940>
802041c4:	e009883a 	mov	r4,fp
802041c8:	e0001115 	stw	zero,68(fp)
802041cc:	000b883a 	mov	r5,zero
802041d0:	02062380 	call	80206238 <_Balloc>
802041d4:	d8800715 	stw	r2,28(sp)
802041d8:	d8c00717 	ldw	r3,28(sp)
802041dc:	00bfffc4 	movi	r2,-1
802041e0:	01000044 	movi	r4,1
802041e4:	d8800c15 	stw	r2,48(sp)
802041e8:	e0c01015 	stw	r3,64(fp)
802041ec:	d9000b15 	stw	r4,44(sp)
802041f0:	d8800615 	stw	r2,24(sp)
802041f4:	d8002215 	stw	zero,136(sp)
802041f8:	003c4106 	br	80203300 <__reset+0xfa1e3300>
802041fc:	d8c00c17 	ldw	r3,48(sp)
80204200:	d8c00615 	stw	r3,24(sp)
80204204:	003e7006 	br	80203bc8 <__reset+0xfa1e3bc8>
80204208:	04400044 	movi	r17,1
8020420c:	003b2006 	br	80202e90 <__reset+0xfa1e2e90>
80204210:	000b883a 	mov	r5,zero
80204214:	003b3d06 	br	80202f0c <__reset+0xfa1e2f0c>
80204218:	d8800c17 	ldw	r2,48(sp)
8020421c:	d8800615 	stw	r2,24(sp)
80204220:	003e6906 	br	80203bc8 <__reset+0xfa1e3bc8>

80204224 <__sflush_r>:
80204224:	2880030b 	ldhu	r2,12(r5)
80204228:	defffb04 	addi	sp,sp,-20
8020422c:	dcc00315 	stw	r19,12(sp)
80204230:	dc400115 	stw	r17,4(sp)
80204234:	dfc00415 	stw	ra,16(sp)
80204238:	dc800215 	stw	r18,8(sp)
8020423c:	dc000015 	stw	r16,0(sp)
80204240:	10c0020c 	andi	r3,r2,8
80204244:	2823883a 	mov	r17,r5
80204248:	2027883a 	mov	r19,r4
8020424c:	1800311e 	bne	r3,zero,80204314 <__sflush_r+0xf0>
80204250:	28c00117 	ldw	r3,4(r5)
80204254:	10820014 	ori	r2,r2,2048
80204258:	2880030d 	sth	r2,12(r5)
8020425c:	00c04b0e 	bge	zero,r3,8020438c <__sflush_r+0x168>
80204260:	8a000a17 	ldw	r8,40(r17)
80204264:	40002326 	beq	r8,zero,802042f4 <__sflush_r+0xd0>
80204268:	9c000017 	ldw	r16,0(r19)
8020426c:	10c4000c 	andi	r3,r2,4096
80204270:	98000015 	stw	zero,0(r19)
80204274:	18004826 	beq	r3,zero,80204398 <__sflush_r+0x174>
80204278:	89801417 	ldw	r6,80(r17)
8020427c:	10c0010c 	andi	r3,r2,4
80204280:	18000626 	beq	r3,zero,8020429c <__sflush_r+0x78>
80204284:	88c00117 	ldw	r3,4(r17)
80204288:	88800c17 	ldw	r2,48(r17)
8020428c:	30cdc83a 	sub	r6,r6,r3
80204290:	10000226 	beq	r2,zero,8020429c <__sflush_r+0x78>
80204294:	88800f17 	ldw	r2,60(r17)
80204298:	308dc83a 	sub	r6,r6,r2
8020429c:	89400717 	ldw	r5,28(r17)
802042a0:	000f883a 	mov	r7,zero
802042a4:	9809883a 	mov	r4,r19
802042a8:	403ee83a 	callr	r8
802042ac:	00ffffc4 	movi	r3,-1
802042b0:	10c04426 	beq	r2,r3,802043c4 <__sflush_r+0x1a0>
802042b4:	88c0030b 	ldhu	r3,12(r17)
802042b8:	89000417 	ldw	r4,16(r17)
802042bc:	88000115 	stw	zero,4(r17)
802042c0:	197dffcc 	andi	r5,r3,63487
802042c4:	8940030d 	sth	r5,12(r17)
802042c8:	89000015 	stw	r4,0(r17)
802042cc:	18c4000c 	andi	r3,r3,4096
802042d0:	18002c1e 	bne	r3,zero,80204384 <__sflush_r+0x160>
802042d4:	89400c17 	ldw	r5,48(r17)
802042d8:	9c000015 	stw	r16,0(r19)
802042dc:	28000526 	beq	r5,zero,802042f4 <__sflush_r+0xd0>
802042e0:	88801004 	addi	r2,r17,64
802042e4:	28800226 	beq	r5,r2,802042f0 <__sflush_r+0xcc>
802042e8:	9809883a 	mov	r4,r19
802042ec:	02049900 	call	80204990 <_free_r>
802042f0:	88000c15 	stw	zero,48(r17)
802042f4:	0005883a 	mov	r2,zero
802042f8:	dfc00417 	ldw	ra,16(sp)
802042fc:	dcc00317 	ldw	r19,12(sp)
80204300:	dc800217 	ldw	r18,8(sp)
80204304:	dc400117 	ldw	r17,4(sp)
80204308:	dc000017 	ldw	r16,0(sp)
8020430c:	dec00504 	addi	sp,sp,20
80204310:	f800283a 	ret
80204314:	2c800417 	ldw	r18,16(r5)
80204318:	903ff626 	beq	r18,zero,802042f4 <__reset+0xfa1e42f4>
8020431c:	2c000017 	ldw	r16,0(r5)
80204320:	108000cc 	andi	r2,r2,3
80204324:	2c800015 	stw	r18,0(r5)
80204328:	84a1c83a 	sub	r16,r16,r18
8020432c:	1000131e 	bne	r2,zero,8020437c <__sflush_r+0x158>
80204330:	28800517 	ldw	r2,20(r5)
80204334:	88800215 	stw	r2,8(r17)
80204338:	04000316 	blt	zero,r16,80204348 <__sflush_r+0x124>
8020433c:	003fed06 	br	802042f4 <__reset+0xfa1e42f4>
80204340:	90a5883a 	add	r18,r18,r2
80204344:	043feb0e 	bge	zero,r16,802042f4 <__reset+0xfa1e42f4>
80204348:	88800917 	ldw	r2,36(r17)
8020434c:	89400717 	ldw	r5,28(r17)
80204350:	800f883a 	mov	r7,r16
80204354:	900d883a 	mov	r6,r18
80204358:	9809883a 	mov	r4,r19
8020435c:	103ee83a 	callr	r2
80204360:	80a1c83a 	sub	r16,r16,r2
80204364:	00bff616 	blt	zero,r2,80204340 <__reset+0xfa1e4340>
80204368:	88c0030b 	ldhu	r3,12(r17)
8020436c:	00bfffc4 	movi	r2,-1
80204370:	18c01014 	ori	r3,r3,64
80204374:	88c0030d 	sth	r3,12(r17)
80204378:	003fdf06 	br	802042f8 <__reset+0xfa1e42f8>
8020437c:	0005883a 	mov	r2,zero
80204380:	003fec06 	br	80204334 <__reset+0xfa1e4334>
80204384:	88801415 	stw	r2,80(r17)
80204388:	003fd206 	br	802042d4 <__reset+0xfa1e42d4>
8020438c:	28c00f17 	ldw	r3,60(r5)
80204390:	00ffb316 	blt	zero,r3,80204260 <__reset+0xfa1e4260>
80204394:	003fd706 	br	802042f4 <__reset+0xfa1e42f4>
80204398:	89400717 	ldw	r5,28(r17)
8020439c:	000d883a 	mov	r6,zero
802043a0:	01c00044 	movi	r7,1
802043a4:	9809883a 	mov	r4,r19
802043a8:	403ee83a 	callr	r8
802043ac:	100d883a 	mov	r6,r2
802043b0:	00bfffc4 	movi	r2,-1
802043b4:	30801426 	beq	r6,r2,80204408 <__sflush_r+0x1e4>
802043b8:	8880030b 	ldhu	r2,12(r17)
802043bc:	8a000a17 	ldw	r8,40(r17)
802043c0:	003fae06 	br	8020427c <__reset+0xfa1e427c>
802043c4:	98c00017 	ldw	r3,0(r19)
802043c8:	183fba26 	beq	r3,zero,802042b4 <__reset+0xfa1e42b4>
802043cc:	01000744 	movi	r4,29
802043d0:	19000626 	beq	r3,r4,802043ec <__sflush_r+0x1c8>
802043d4:	01000584 	movi	r4,22
802043d8:	19000426 	beq	r3,r4,802043ec <__sflush_r+0x1c8>
802043dc:	88c0030b 	ldhu	r3,12(r17)
802043e0:	18c01014 	ori	r3,r3,64
802043e4:	88c0030d 	sth	r3,12(r17)
802043e8:	003fc306 	br	802042f8 <__reset+0xfa1e42f8>
802043ec:	8880030b 	ldhu	r2,12(r17)
802043f0:	88c00417 	ldw	r3,16(r17)
802043f4:	88000115 	stw	zero,4(r17)
802043f8:	10bdffcc 	andi	r2,r2,63487
802043fc:	8880030d 	sth	r2,12(r17)
80204400:	88c00015 	stw	r3,0(r17)
80204404:	003fb306 	br	802042d4 <__reset+0xfa1e42d4>
80204408:	98800017 	ldw	r2,0(r19)
8020440c:	103fea26 	beq	r2,zero,802043b8 <__reset+0xfa1e43b8>
80204410:	00c00744 	movi	r3,29
80204414:	10c00226 	beq	r2,r3,80204420 <__sflush_r+0x1fc>
80204418:	00c00584 	movi	r3,22
8020441c:	10c0031e 	bne	r2,r3,8020442c <__sflush_r+0x208>
80204420:	9c000015 	stw	r16,0(r19)
80204424:	0005883a 	mov	r2,zero
80204428:	003fb306 	br	802042f8 <__reset+0xfa1e42f8>
8020442c:	88c0030b 	ldhu	r3,12(r17)
80204430:	3005883a 	mov	r2,r6
80204434:	18c01014 	ori	r3,r3,64
80204438:	88c0030d 	sth	r3,12(r17)
8020443c:	003fae06 	br	802042f8 <__reset+0xfa1e42f8>

80204440 <_fflush_r>:
80204440:	defffd04 	addi	sp,sp,-12
80204444:	dc000115 	stw	r16,4(sp)
80204448:	dfc00215 	stw	ra,8(sp)
8020444c:	2021883a 	mov	r16,r4
80204450:	20000226 	beq	r4,zero,8020445c <_fflush_r+0x1c>
80204454:	20800e17 	ldw	r2,56(r4)
80204458:	10000c26 	beq	r2,zero,8020448c <_fflush_r+0x4c>
8020445c:	2880030f 	ldh	r2,12(r5)
80204460:	1000051e 	bne	r2,zero,80204478 <_fflush_r+0x38>
80204464:	0005883a 	mov	r2,zero
80204468:	dfc00217 	ldw	ra,8(sp)
8020446c:	dc000117 	ldw	r16,4(sp)
80204470:	dec00304 	addi	sp,sp,12
80204474:	f800283a 	ret
80204478:	8009883a 	mov	r4,r16
8020447c:	dfc00217 	ldw	ra,8(sp)
80204480:	dc000117 	ldw	r16,4(sp)
80204484:	dec00304 	addi	sp,sp,12
80204488:	02042241 	jmpi	80204224 <__sflush_r>
8020448c:	d9400015 	stw	r5,0(sp)
80204490:	020481c0 	call	8020481c <__sinit>
80204494:	d9400017 	ldw	r5,0(sp)
80204498:	003ff006 	br	8020445c <__reset+0xfa1e445c>

8020449c <fflush>:
8020449c:	20000526 	beq	r4,zero,802044b4 <fflush+0x18>
802044a0:	00a00874 	movhi	r2,32801
802044a4:	1090b404 	addi	r2,r2,17104
802044a8:	200b883a 	mov	r5,r4
802044ac:	11000017 	ldw	r4,0(r2)
802044b0:	02044401 	jmpi	80204440 <_fflush_r>
802044b4:	00a00874 	movhi	r2,32801
802044b8:	1090b304 	addi	r2,r2,17100
802044bc:	11000017 	ldw	r4,0(r2)
802044c0:	01600834 	movhi	r5,32800
802044c4:	29511004 	addi	r5,r5,17472
802044c8:	02052201 	jmpi	80205220 <_fwalk_reent>

802044cc <__fp_unlock>:
802044cc:	0005883a 	mov	r2,zero
802044d0:	f800283a 	ret

802044d4 <_cleanup_r>:
802044d4:	01600874 	movhi	r5,32801
802044d8:	29648e04 	addi	r5,r5,-28104
802044dc:	02052201 	jmpi	80205220 <_fwalk_reent>

802044e0 <__sinit.part.1>:
802044e0:	defff704 	addi	sp,sp,-36
802044e4:	00e00834 	movhi	r3,32800
802044e8:	dfc00815 	stw	ra,32(sp)
802044ec:	ddc00715 	stw	r23,28(sp)
802044f0:	dd800615 	stw	r22,24(sp)
802044f4:	dd400515 	stw	r21,20(sp)
802044f8:	dd000415 	stw	r20,16(sp)
802044fc:	dcc00315 	stw	r19,12(sp)
80204500:	dc800215 	stw	r18,8(sp)
80204504:	dc400115 	stw	r17,4(sp)
80204508:	dc000015 	stw	r16,0(sp)
8020450c:	18d13504 	addi	r3,r3,17620
80204510:	24000117 	ldw	r16,4(r4)
80204514:	20c00f15 	stw	r3,60(r4)
80204518:	2080bb04 	addi	r2,r4,748
8020451c:	00c000c4 	movi	r3,3
80204520:	20c0b915 	stw	r3,740(r4)
80204524:	2080ba15 	stw	r2,744(r4)
80204528:	2000b815 	stw	zero,736(r4)
8020452c:	05c00204 	movi	r23,8
80204530:	00800104 	movi	r2,4
80204534:	2025883a 	mov	r18,r4
80204538:	b80d883a 	mov	r6,r23
8020453c:	81001704 	addi	r4,r16,92
80204540:	000b883a 	mov	r5,zero
80204544:	80000015 	stw	zero,0(r16)
80204548:	80000115 	stw	zero,4(r16)
8020454c:	80000215 	stw	zero,8(r16)
80204550:	8080030d 	sth	r2,12(r16)
80204554:	80001915 	stw	zero,100(r16)
80204558:	8000038d 	sth	zero,14(r16)
8020455c:	80000415 	stw	zero,16(r16)
80204560:	80000515 	stw	zero,20(r16)
80204564:	80000615 	stw	zero,24(r16)
80204568:	02061100 	call	80206110 <memset>
8020456c:	05a00834 	movhi	r22,32800
80204570:	94400217 	ldw	r17,8(r18)
80204574:	05600834 	movhi	r21,32800
80204578:	05200834 	movhi	r20,32800
8020457c:	04e00834 	movhi	r19,32800
80204580:	b59e1804 	addi	r22,r22,30816
80204584:	ad5e2f04 	addi	r21,r21,30908
80204588:	a51e4e04 	addi	r20,r20,31032
8020458c:	9cde6504 	addi	r19,r19,31124
80204590:	85800815 	stw	r22,32(r16)
80204594:	85400915 	stw	r21,36(r16)
80204598:	85000a15 	stw	r20,40(r16)
8020459c:	84c00b15 	stw	r19,44(r16)
802045a0:	84000715 	stw	r16,28(r16)
802045a4:	00800284 	movi	r2,10
802045a8:	8880030d 	sth	r2,12(r17)
802045ac:	00800044 	movi	r2,1
802045b0:	b80d883a 	mov	r6,r23
802045b4:	89001704 	addi	r4,r17,92
802045b8:	000b883a 	mov	r5,zero
802045bc:	88000015 	stw	zero,0(r17)
802045c0:	88000115 	stw	zero,4(r17)
802045c4:	88000215 	stw	zero,8(r17)
802045c8:	88001915 	stw	zero,100(r17)
802045cc:	8880038d 	sth	r2,14(r17)
802045d0:	88000415 	stw	zero,16(r17)
802045d4:	88000515 	stw	zero,20(r17)
802045d8:	88000615 	stw	zero,24(r17)
802045dc:	02061100 	call	80206110 <memset>
802045e0:	94000317 	ldw	r16,12(r18)
802045e4:	00800484 	movi	r2,18
802045e8:	8c400715 	stw	r17,28(r17)
802045ec:	8d800815 	stw	r22,32(r17)
802045f0:	8d400915 	stw	r21,36(r17)
802045f4:	8d000a15 	stw	r20,40(r17)
802045f8:	8cc00b15 	stw	r19,44(r17)
802045fc:	8080030d 	sth	r2,12(r16)
80204600:	00800084 	movi	r2,2
80204604:	80000015 	stw	zero,0(r16)
80204608:	80000115 	stw	zero,4(r16)
8020460c:	80000215 	stw	zero,8(r16)
80204610:	80001915 	stw	zero,100(r16)
80204614:	8080038d 	sth	r2,14(r16)
80204618:	80000415 	stw	zero,16(r16)
8020461c:	80000515 	stw	zero,20(r16)
80204620:	80000615 	stw	zero,24(r16)
80204624:	b80d883a 	mov	r6,r23
80204628:	000b883a 	mov	r5,zero
8020462c:	81001704 	addi	r4,r16,92
80204630:	02061100 	call	80206110 <memset>
80204634:	00800044 	movi	r2,1
80204638:	84000715 	stw	r16,28(r16)
8020463c:	85800815 	stw	r22,32(r16)
80204640:	85400915 	stw	r21,36(r16)
80204644:	85000a15 	stw	r20,40(r16)
80204648:	84c00b15 	stw	r19,44(r16)
8020464c:	90800e15 	stw	r2,56(r18)
80204650:	dfc00817 	ldw	ra,32(sp)
80204654:	ddc00717 	ldw	r23,28(sp)
80204658:	dd800617 	ldw	r22,24(sp)
8020465c:	dd400517 	ldw	r21,20(sp)
80204660:	dd000417 	ldw	r20,16(sp)
80204664:	dcc00317 	ldw	r19,12(sp)
80204668:	dc800217 	ldw	r18,8(sp)
8020466c:	dc400117 	ldw	r17,4(sp)
80204670:	dc000017 	ldw	r16,0(sp)
80204674:	dec00904 	addi	sp,sp,36
80204678:	f800283a 	ret

8020467c <__fp_lock>:
8020467c:	0005883a 	mov	r2,zero
80204680:	f800283a 	ret

80204684 <__sfmoreglue>:
80204684:	defffc04 	addi	sp,sp,-16
80204688:	dc400115 	stw	r17,4(sp)
8020468c:	2c7fffc4 	addi	r17,r5,-1
80204690:	8c401a24 	muli	r17,r17,104
80204694:	dc800215 	stw	r18,8(sp)
80204698:	2825883a 	mov	r18,r5
8020469c:	89401d04 	addi	r5,r17,116
802046a0:	dc000015 	stw	r16,0(sp)
802046a4:	dfc00315 	stw	ra,12(sp)
802046a8:	020557c0 	call	8020557c <_malloc_r>
802046ac:	1021883a 	mov	r16,r2
802046b0:	10000726 	beq	r2,zero,802046d0 <__sfmoreglue+0x4c>
802046b4:	11000304 	addi	r4,r2,12
802046b8:	10000015 	stw	zero,0(r2)
802046bc:	14800115 	stw	r18,4(r2)
802046c0:	11000215 	stw	r4,8(r2)
802046c4:	89801a04 	addi	r6,r17,104
802046c8:	000b883a 	mov	r5,zero
802046cc:	02061100 	call	80206110 <memset>
802046d0:	8005883a 	mov	r2,r16
802046d4:	dfc00317 	ldw	ra,12(sp)
802046d8:	dc800217 	ldw	r18,8(sp)
802046dc:	dc400117 	ldw	r17,4(sp)
802046e0:	dc000017 	ldw	r16,0(sp)
802046e4:	dec00404 	addi	sp,sp,16
802046e8:	f800283a 	ret

802046ec <__sfp>:
802046ec:	defffb04 	addi	sp,sp,-20
802046f0:	dc000015 	stw	r16,0(sp)
802046f4:	04200874 	movhi	r16,32801
802046f8:	8410b304 	addi	r16,r16,17100
802046fc:	dcc00315 	stw	r19,12(sp)
80204700:	2027883a 	mov	r19,r4
80204704:	81000017 	ldw	r4,0(r16)
80204708:	dfc00415 	stw	ra,16(sp)
8020470c:	dc800215 	stw	r18,8(sp)
80204710:	20800e17 	ldw	r2,56(r4)
80204714:	dc400115 	stw	r17,4(sp)
80204718:	1000021e 	bne	r2,zero,80204724 <__sfp+0x38>
8020471c:	02044e00 	call	802044e0 <__sinit.part.1>
80204720:	81000017 	ldw	r4,0(r16)
80204724:	2480b804 	addi	r18,r4,736
80204728:	047fffc4 	movi	r17,-1
8020472c:	91000117 	ldw	r4,4(r18)
80204730:	94000217 	ldw	r16,8(r18)
80204734:	213fffc4 	addi	r4,r4,-1
80204738:	20000a16 	blt	r4,zero,80204764 <__sfp+0x78>
8020473c:	8080030f 	ldh	r2,12(r16)
80204740:	10000c26 	beq	r2,zero,80204774 <__sfp+0x88>
80204744:	80c01d04 	addi	r3,r16,116
80204748:	00000206 	br	80204754 <__sfp+0x68>
8020474c:	18bfe60f 	ldh	r2,-104(r3)
80204750:	10000826 	beq	r2,zero,80204774 <__sfp+0x88>
80204754:	213fffc4 	addi	r4,r4,-1
80204758:	1c3ffd04 	addi	r16,r3,-12
8020475c:	18c01a04 	addi	r3,r3,104
80204760:	247ffa1e 	bne	r4,r17,8020474c <__reset+0xfa1e474c>
80204764:	90800017 	ldw	r2,0(r18)
80204768:	10001d26 	beq	r2,zero,802047e0 <__sfp+0xf4>
8020476c:	1025883a 	mov	r18,r2
80204770:	003fee06 	br	8020472c <__reset+0xfa1e472c>
80204774:	00bfffc4 	movi	r2,-1
80204778:	8080038d 	sth	r2,14(r16)
8020477c:	00800044 	movi	r2,1
80204780:	8080030d 	sth	r2,12(r16)
80204784:	80001915 	stw	zero,100(r16)
80204788:	80000015 	stw	zero,0(r16)
8020478c:	80000215 	stw	zero,8(r16)
80204790:	80000115 	stw	zero,4(r16)
80204794:	80000415 	stw	zero,16(r16)
80204798:	80000515 	stw	zero,20(r16)
8020479c:	80000615 	stw	zero,24(r16)
802047a0:	01800204 	movi	r6,8
802047a4:	000b883a 	mov	r5,zero
802047a8:	81001704 	addi	r4,r16,92
802047ac:	02061100 	call	80206110 <memset>
802047b0:	8005883a 	mov	r2,r16
802047b4:	80000c15 	stw	zero,48(r16)
802047b8:	80000d15 	stw	zero,52(r16)
802047bc:	80001115 	stw	zero,68(r16)
802047c0:	80001215 	stw	zero,72(r16)
802047c4:	dfc00417 	ldw	ra,16(sp)
802047c8:	dcc00317 	ldw	r19,12(sp)
802047cc:	dc800217 	ldw	r18,8(sp)
802047d0:	dc400117 	ldw	r17,4(sp)
802047d4:	dc000017 	ldw	r16,0(sp)
802047d8:	dec00504 	addi	sp,sp,20
802047dc:	f800283a 	ret
802047e0:	01400104 	movi	r5,4
802047e4:	9809883a 	mov	r4,r19
802047e8:	02046840 	call	80204684 <__sfmoreglue>
802047ec:	90800015 	stw	r2,0(r18)
802047f0:	103fde1e 	bne	r2,zero,8020476c <__reset+0xfa1e476c>
802047f4:	00800304 	movi	r2,12
802047f8:	98800015 	stw	r2,0(r19)
802047fc:	0005883a 	mov	r2,zero
80204800:	003ff006 	br	802047c4 <__reset+0xfa1e47c4>

80204804 <_cleanup>:
80204804:	00a00874 	movhi	r2,32801
80204808:	1090b304 	addi	r2,r2,17100
8020480c:	11000017 	ldw	r4,0(r2)
80204810:	01600874 	movhi	r5,32801
80204814:	29648e04 	addi	r5,r5,-28104
80204818:	02052201 	jmpi	80205220 <_fwalk_reent>

8020481c <__sinit>:
8020481c:	20800e17 	ldw	r2,56(r4)
80204820:	10000126 	beq	r2,zero,80204828 <__sinit+0xc>
80204824:	f800283a 	ret
80204828:	02044e01 	jmpi	802044e0 <__sinit.part.1>

8020482c <__sfp_lock_acquire>:
8020482c:	f800283a 	ret

80204830 <__sfp_lock_release>:
80204830:	f800283a 	ret

80204834 <__sinit_lock_acquire>:
80204834:	f800283a 	ret

80204838 <__sinit_lock_release>:
80204838:	f800283a 	ret

8020483c <__fp_lock_all>:
8020483c:	00a00874 	movhi	r2,32801
80204840:	1090b404 	addi	r2,r2,17104
80204844:	11000017 	ldw	r4,0(r2)
80204848:	01600834 	movhi	r5,32800
8020484c:	29519f04 	addi	r5,r5,18044
80204850:	020515c1 	jmpi	8020515c <_fwalk>

80204854 <__fp_unlock_all>:
80204854:	00a00874 	movhi	r2,32801
80204858:	1090b404 	addi	r2,r2,17104
8020485c:	11000017 	ldw	r4,0(r2)
80204860:	01600834 	movhi	r5,32800
80204864:	29513304 	addi	r5,r5,17612
80204868:	020515c1 	jmpi	8020515c <_fwalk>

8020486c <_malloc_trim_r>:
8020486c:	defffb04 	addi	sp,sp,-20
80204870:	dcc00315 	stw	r19,12(sp)
80204874:	04e00874 	movhi	r19,32801
80204878:	dc800215 	stw	r18,8(sp)
8020487c:	dc400115 	stw	r17,4(sp)
80204880:	dc000015 	stw	r16,0(sp)
80204884:	dfc00415 	stw	ra,16(sp)
80204888:	2821883a 	mov	r16,r5
8020488c:	9ccabf04 	addi	r19,r19,11004
80204890:	2025883a 	mov	r18,r4
80204894:	020d1500 	call	8020d150 <__malloc_lock>
80204898:	98800217 	ldw	r2,8(r19)
8020489c:	14400117 	ldw	r17,4(r2)
802048a0:	00bfff04 	movi	r2,-4
802048a4:	88a2703a 	and	r17,r17,r2
802048a8:	8c21c83a 	sub	r16,r17,r16
802048ac:	8403fbc4 	addi	r16,r16,4079
802048b0:	8020d33a 	srli	r16,r16,12
802048b4:	0083ffc4 	movi	r2,4095
802048b8:	843fffc4 	addi	r16,r16,-1
802048bc:	8020933a 	slli	r16,r16,12
802048c0:	1400060e 	bge	r2,r16,802048dc <_malloc_trim_r+0x70>
802048c4:	000b883a 	mov	r5,zero
802048c8:	9009883a 	mov	r4,r18
802048cc:	020780c0 	call	8020780c <_sbrk_r>
802048d0:	98c00217 	ldw	r3,8(r19)
802048d4:	1c47883a 	add	r3,r3,r17
802048d8:	10c00a26 	beq	r2,r3,80204904 <_malloc_trim_r+0x98>
802048dc:	9009883a 	mov	r4,r18
802048e0:	020d1740 	call	8020d174 <__malloc_unlock>
802048e4:	0005883a 	mov	r2,zero
802048e8:	dfc00417 	ldw	ra,16(sp)
802048ec:	dcc00317 	ldw	r19,12(sp)
802048f0:	dc800217 	ldw	r18,8(sp)
802048f4:	dc400117 	ldw	r17,4(sp)
802048f8:	dc000017 	ldw	r16,0(sp)
802048fc:	dec00504 	addi	sp,sp,20
80204900:	f800283a 	ret
80204904:	040bc83a 	sub	r5,zero,r16
80204908:	9009883a 	mov	r4,r18
8020490c:	020780c0 	call	8020780c <_sbrk_r>
80204910:	00ffffc4 	movi	r3,-1
80204914:	10c00d26 	beq	r2,r3,8020494c <_malloc_trim_r+0xe0>
80204918:	00e00874 	movhi	r3,32801
8020491c:	18d0d304 	addi	r3,r3,17228
80204920:	18800017 	ldw	r2,0(r3)
80204924:	99000217 	ldw	r4,8(r19)
80204928:	8c23c83a 	sub	r17,r17,r16
8020492c:	8c400054 	ori	r17,r17,1
80204930:	1421c83a 	sub	r16,r2,r16
80204934:	24400115 	stw	r17,4(r4)
80204938:	9009883a 	mov	r4,r18
8020493c:	1c000015 	stw	r16,0(r3)
80204940:	020d1740 	call	8020d174 <__malloc_unlock>
80204944:	00800044 	movi	r2,1
80204948:	003fe706 	br	802048e8 <__reset+0xfa1e48e8>
8020494c:	000b883a 	mov	r5,zero
80204950:	9009883a 	mov	r4,r18
80204954:	020780c0 	call	8020780c <_sbrk_r>
80204958:	99000217 	ldw	r4,8(r19)
8020495c:	014003c4 	movi	r5,15
80204960:	1107c83a 	sub	r3,r2,r4
80204964:	28ffdd0e 	bge	r5,r3,802048dc <__reset+0xfa1e48dc>
80204968:	01600874 	movhi	r5,32801
8020496c:	2950b604 	addi	r5,r5,17112
80204970:	29400017 	ldw	r5,0(r5)
80204974:	18c00054 	ori	r3,r3,1
80204978:	20c00115 	stw	r3,4(r4)
8020497c:	00e00874 	movhi	r3,32801
80204980:	1145c83a 	sub	r2,r2,r5
80204984:	18d0d304 	addi	r3,r3,17228
80204988:	18800015 	stw	r2,0(r3)
8020498c:	003fd306 	br	802048dc <__reset+0xfa1e48dc>

80204990 <_free_r>:
80204990:	28004126 	beq	r5,zero,80204a98 <_free_r+0x108>
80204994:	defffd04 	addi	sp,sp,-12
80204998:	dc400115 	stw	r17,4(sp)
8020499c:	dc000015 	stw	r16,0(sp)
802049a0:	2023883a 	mov	r17,r4
802049a4:	2821883a 	mov	r16,r5
802049a8:	dfc00215 	stw	ra,8(sp)
802049ac:	020d1500 	call	8020d150 <__malloc_lock>
802049b0:	81ffff17 	ldw	r7,-4(r16)
802049b4:	00bfff84 	movi	r2,-2
802049b8:	01200874 	movhi	r4,32801
802049bc:	81bffe04 	addi	r6,r16,-8
802049c0:	3884703a 	and	r2,r7,r2
802049c4:	210abf04 	addi	r4,r4,11004
802049c8:	308b883a 	add	r5,r6,r2
802049cc:	2a400117 	ldw	r9,4(r5)
802049d0:	22000217 	ldw	r8,8(r4)
802049d4:	00ffff04 	movi	r3,-4
802049d8:	48c6703a 	and	r3,r9,r3
802049dc:	2a005726 	beq	r5,r8,80204b3c <_free_r+0x1ac>
802049e0:	28c00115 	stw	r3,4(r5)
802049e4:	39c0004c 	andi	r7,r7,1
802049e8:	3800091e 	bne	r7,zero,80204a10 <_free_r+0x80>
802049ec:	823ffe17 	ldw	r8,-8(r16)
802049f0:	22400204 	addi	r9,r4,8
802049f4:	320dc83a 	sub	r6,r6,r8
802049f8:	31c00217 	ldw	r7,8(r6)
802049fc:	1205883a 	add	r2,r2,r8
80204a00:	3a406526 	beq	r7,r9,80204b98 <_free_r+0x208>
80204a04:	32000317 	ldw	r8,12(r6)
80204a08:	3a000315 	stw	r8,12(r7)
80204a0c:	41c00215 	stw	r7,8(r8)
80204a10:	28cf883a 	add	r7,r5,r3
80204a14:	39c00117 	ldw	r7,4(r7)
80204a18:	39c0004c 	andi	r7,r7,1
80204a1c:	38003a26 	beq	r7,zero,80204b08 <_free_r+0x178>
80204a20:	10c00054 	ori	r3,r2,1
80204a24:	30c00115 	stw	r3,4(r6)
80204a28:	3087883a 	add	r3,r6,r2
80204a2c:	18800015 	stw	r2,0(r3)
80204a30:	00c07fc4 	movi	r3,511
80204a34:	18801936 	bltu	r3,r2,80204a9c <_free_r+0x10c>
80204a38:	1004d0fa 	srli	r2,r2,3
80204a3c:	01c00044 	movi	r7,1
80204a40:	21400117 	ldw	r5,4(r4)
80204a44:	10c00044 	addi	r3,r2,1
80204a48:	18c7883a 	add	r3,r3,r3
80204a4c:	1005d0ba 	srai	r2,r2,2
80204a50:	18c7883a 	add	r3,r3,r3
80204a54:	18c7883a 	add	r3,r3,r3
80204a58:	1907883a 	add	r3,r3,r4
80204a5c:	3884983a 	sll	r2,r7,r2
80204a60:	19c00017 	ldw	r7,0(r3)
80204a64:	1a3ffe04 	addi	r8,r3,-8
80204a68:	1144b03a 	or	r2,r2,r5
80204a6c:	32000315 	stw	r8,12(r6)
80204a70:	31c00215 	stw	r7,8(r6)
80204a74:	20800115 	stw	r2,4(r4)
80204a78:	19800015 	stw	r6,0(r3)
80204a7c:	39800315 	stw	r6,12(r7)
80204a80:	8809883a 	mov	r4,r17
80204a84:	dfc00217 	ldw	ra,8(sp)
80204a88:	dc400117 	ldw	r17,4(sp)
80204a8c:	dc000017 	ldw	r16,0(sp)
80204a90:	dec00304 	addi	sp,sp,12
80204a94:	020d1741 	jmpi	8020d174 <__malloc_unlock>
80204a98:	f800283a 	ret
80204a9c:	100ad27a 	srli	r5,r2,9
80204aa0:	00c00104 	movi	r3,4
80204aa4:	19404a36 	bltu	r3,r5,80204bd0 <_free_r+0x240>
80204aa8:	100ad1ba 	srli	r5,r2,6
80204aac:	28c00e44 	addi	r3,r5,57
80204ab0:	18c7883a 	add	r3,r3,r3
80204ab4:	29400e04 	addi	r5,r5,56
80204ab8:	18c7883a 	add	r3,r3,r3
80204abc:	18c7883a 	add	r3,r3,r3
80204ac0:	1909883a 	add	r4,r3,r4
80204ac4:	20c00017 	ldw	r3,0(r4)
80204ac8:	01e00874 	movhi	r7,32801
80204acc:	213ffe04 	addi	r4,r4,-8
80204ad0:	39cabf04 	addi	r7,r7,11004
80204ad4:	20c04426 	beq	r4,r3,80204be8 <_free_r+0x258>
80204ad8:	01ffff04 	movi	r7,-4
80204adc:	19400117 	ldw	r5,4(r3)
80204ae0:	29ca703a 	and	r5,r5,r7
80204ae4:	1140022e 	bgeu	r2,r5,80204af0 <_free_r+0x160>
80204ae8:	18c00217 	ldw	r3,8(r3)
80204aec:	20fffb1e 	bne	r4,r3,80204adc <__reset+0xfa1e4adc>
80204af0:	19000317 	ldw	r4,12(r3)
80204af4:	31000315 	stw	r4,12(r6)
80204af8:	30c00215 	stw	r3,8(r6)
80204afc:	21800215 	stw	r6,8(r4)
80204b00:	19800315 	stw	r6,12(r3)
80204b04:	003fde06 	br	80204a80 <__reset+0xfa1e4a80>
80204b08:	29c00217 	ldw	r7,8(r5)
80204b0c:	10c5883a 	add	r2,r2,r3
80204b10:	00e00874 	movhi	r3,32801
80204b14:	18cac104 	addi	r3,r3,11012
80204b18:	38c03b26 	beq	r7,r3,80204c08 <_free_r+0x278>
80204b1c:	2a000317 	ldw	r8,12(r5)
80204b20:	11400054 	ori	r5,r2,1
80204b24:	3087883a 	add	r3,r6,r2
80204b28:	3a000315 	stw	r8,12(r7)
80204b2c:	41c00215 	stw	r7,8(r8)
80204b30:	31400115 	stw	r5,4(r6)
80204b34:	18800015 	stw	r2,0(r3)
80204b38:	003fbd06 	br	80204a30 <__reset+0xfa1e4a30>
80204b3c:	39c0004c 	andi	r7,r7,1
80204b40:	10c5883a 	add	r2,r2,r3
80204b44:	3800071e 	bne	r7,zero,80204b64 <_free_r+0x1d4>
80204b48:	81fffe17 	ldw	r7,-8(r16)
80204b4c:	31cdc83a 	sub	r6,r6,r7
80204b50:	30c00317 	ldw	r3,12(r6)
80204b54:	31400217 	ldw	r5,8(r6)
80204b58:	11c5883a 	add	r2,r2,r7
80204b5c:	28c00315 	stw	r3,12(r5)
80204b60:	19400215 	stw	r5,8(r3)
80204b64:	10c00054 	ori	r3,r2,1
80204b68:	30c00115 	stw	r3,4(r6)
80204b6c:	00e00874 	movhi	r3,32801
80204b70:	18d0b704 	addi	r3,r3,17116
80204b74:	18c00017 	ldw	r3,0(r3)
80204b78:	21800215 	stw	r6,8(r4)
80204b7c:	10ffc036 	bltu	r2,r3,80204a80 <__reset+0xfa1e4a80>
80204b80:	00a00874 	movhi	r2,32801
80204b84:	1090ca04 	addi	r2,r2,17192
80204b88:	11400017 	ldw	r5,0(r2)
80204b8c:	8809883a 	mov	r4,r17
80204b90:	020486c0 	call	8020486c <_malloc_trim_r>
80204b94:	003fba06 	br	80204a80 <__reset+0xfa1e4a80>
80204b98:	28c9883a 	add	r4,r5,r3
80204b9c:	21000117 	ldw	r4,4(r4)
80204ba0:	2100004c 	andi	r4,r4,1
80204ba4:	2000391e 	bne	r4,zero,80204c8c <_free_r+0x2fc>
80204ba8:	29c00217 	ldw	r7,8(r5)
80204bac:	29000317 	ldw	r4,12(r5)
80204bb0:	1885883a 	add	r2,r3,r2
80204bb4:	10c00054 	ori	r3,r2,1
80204bb8:	39000315 	stw	r4,12(r7)
80204bbc:	21c00215 	stw	r7,8(r4)
80204bc0:	30c00115 	stw	r3,4(r6)
80204bc4:	308d883a 	add	r6,r6,r2
80204bc8:	30800015 	stw	r2,0(r6)
80204bcc:	003fac06 	br	80204a80 <__reset+0xfa1e4a80>
80204bd0:	00c00504 	movi	r3,20
80204bd4:	19401536 	bltu	r3,r5,80204c2c <_free_r+0x29c>
80204bd8:	28c01704 	addi	r3,r5,92
80204bdc:	18c7883a 	add	r3,r3,r3
80204be0:	294016c4 	addi	r5,r5,91
80204be4:	003fb406 	br	80204ab8 <__reset+0xfa1e4ab8>
80204be8:	280bd0ba 	srai	r5,r5,2
80204bec:	00c00044 	movi	r3,1
80204bf0:	38800117 	ldw	r2,4(r7)
80204bf4:	194a983a 	sll	r5,r3,r5
80204bf8:	2007883a 	mov	r3,r4
80204bfc:	2884b03a 	or	r2,r5,r2
80204c00:	38800115 	stw	r2,4(r7)
80204c04:	003fbb06 	br	80204af4 <__reset+0xfa1e4af4>
80204c08:	21800515 	stw	r6,20(r4)
80204c0c:	21800415 	stw	r6,16(r4)
80204c10:	10c00054 	ori	r3,r2,1
80204c14:	31c00315 	stw	r7,12(r6)
80204c18:	31c00215 	stw	r7,8(r6)
80204c1c:	30c00115 	stw	r3,4(r6)
80204c20:	308d883a 	add	r6,r6,r2
80204c24:	30800015 	stw	r2,0(r6)
80204c28:	003f9506 	br	80204a80 <__reset+0xfa1e4a80>
80204c2c:	00c01504 	movi	r3,84
80204c30:	19400536 	bltu	r3,r5,80204c48 <_free_r+0x2b8>
80204c34:	100ad33a 	srli	r5,r2,12
80204c38:	28c01bc4 	addi	r3,r5,111
80204c3c:	18c7883a 	add	r3,r3,r3
80204c40:	29401b84 	addi	r5,r5,110
80204c44:	003f9c06 	br	80204ab8 <__reset+0xfa1e4ab8>
80204c48:	00c05504 	movi	r3,340
80204c4c:	19400536 	bltu	r3,r5,80204c64 <_free_r+0x2d4>
80204c50:	100ad3fa 	srli	r5,r2,15
80204c54:	28c01e04 	addi	r3,r5,120
80204c58:	18c7883a 	add	r3,r3,r3
80204c5c:	29401dc4 	addi	r5,r5,119
80204c60:	003f9506 	br	80204ab8 <__reset+0xfa1e4ab8>
80204c64:	00c15504 	movi	r3,1364
80204c68:	19400536 	bltu	r3,r5,80204c80 <_free_r+0x2f0>
80204c6c:	100ad4ba 	srli	r5,r2,18
80204c70:	28c01f44 	addi	r3,r5,125
80204c74:	18c7883a 	add	r3,r3,r3
80204c78:	29401f04 	addi	r5,r5,124
80204c7c:	003f8e06 	br	80204ab8 <__reset+0xfa1e4ab8>
80204c80:	00c03f84 	movi	r3,254
80204c84:	01401f84 	movi	r5,126
80204c88:	003f8b06 	br	80204ab8 <__reset+0xfa1e4ab8>
80204c8c:	10c00054 	ori	r3,r2,1
80204c90:	30c00115 	stw	r3,4(r6)
80204c94:	308d883a 	add	r6,r6,r2
80204c98:	30800015 	stw	r2,0(r6)
80204c9c:	003f7806 	br	80204a80 <__reset+0xfa1e4a80>

80204ca0 <__sfvwrite_r>:
80204ca0:	30800217 	ldw	r2,8(r6)
80204ca4:	10006726 	beq	r2,zero,80204e44 <__sfvwrite_r+0x1a4>
80204ca8:	28c0030b 	ldhu	r3,12(r5)
80204cac:	defff404 	addi	sp,sp,-48
80204cb0:	dd400715 	stw	r21,28(sp)
80204cb4:	dd000615 	stw	r20,24(sp)
80204cb8:	dc000215 	stw	r16,8(sp)
80204cbc:	dfc00b15 	stw	ra,44(sp)
80204cc0:	df000a15 	stw	fp,40(sp)
80204cc4:	ddc00915 	stw	r23,36(sp)
80204cc8:	dd800815 	stw	r22,32(sp)
80204ccc:	dcc00515 	stw	r19,20(sp)
80204cd0:	dc800415 	stw	r18,16(sp)
80204cd4:	dc400315 	stw	r17,12(sp)
80204cd8:	1880020c 	andi	r2,r3,8
80204cdc:	2821883a 	mov	r16,r5
80204ce0:	202b883a 	mov	r21,r4
80204ce4:	3029883a 	mov	r20,r6
80204ce8:	10002726 	beq	r2,zero,80204d88 <__sfvwrite_r+0xe8>
80204cec:	28800417 	ldw	r2,16(r5)
80204cf0:	10002526 	beq	r2,zero,80204d88 <__sfvwrite_r+0xe8>
80204cf4:	1880008c 	andi	r2,r3,2
80204cf8:	a4400017 	ldw	r17,0(r20)
80204cfc:	10002a26 	beq	r2,zero,80204da8 <__sfvwrite_r+0x108>
80204d00:	05a00034 	movhi	r22,32768
80204d04:	0027883a 	mov	r19,zero
80204d08:	0025883a 	mov	r18,zero
80204d0c:	b5bf0004 	addi	r22,r22,-1024
80204d10:	980d883a 	mov	r6,r19
80204d14:	a809883a 	mov	r4,r21
80204d18:	90004626 	beq	r18,zero,80204e34 <__sfvwrite_r+0x194>
80204d1c:	900f883a 	mov	r7,r18
80204d20:	b480022e 	bgeu	r22,r18,80204d2c <__sfvwrite_r+0x8c>
80204d24:	01e00034 	movhi	r7,32768
80204d28:	39ff0004 	addi	r7,r7,-1024
80204d2c:	80800917 	ldw	r2,36(r16)
80204d30:	81400717 	ldw	r5,28(r16)
80204d34:	103ee83a 	callr	r2
80204d38:	0080570e 	bge	zero,r2,80204e98 <__sfvwrite_r+0x1f8>
80204d3c:	a0c00217 	ldw	r3,8(r20)
80204d40:	98a7883a 	add	r19,r19,r2
80204d44:	90a5c83a 	sub	r18,r18,r2
80204d48:	1885c83a 	sub	r2,r3,r2
80204d4c:	a0800215 	stw	r2,8(r20)
80204d50:	103fef1e 	bne	r2,zero,80204d10 <__reset+0xfa1e4d10>
80204d54:	0005883a 	mov	r2,zero
80204d58:	dfc00b17 	ldw	ra,44(sp)
80204d5c:	df000a17 	ldw	fp,40(sp)
80204d60:	ddc00917 	ldw	r23,36(sp)
80204d64:	dd800817 	ldw	r22,32(sp)
80204d68:	dd400717 	ldw	r21,28(sp)
80204d6c:	dd000617 	ldw	r20,24(sp)
80204d70:	dcc00517 	ldw	r19,20(sp)
80204d74:	dc800417 	ldw	r18,16(sp)
80204d78:	dc400317 	ldw	r17,12(sp)
80204d7c:	dc000217 	ldw	r16,8(sp)
80204d80:	dec00c04 	addi	sp,sp,48
80204d84:	f800283a 	ret
80204d88:	800b883a 	mov	r5,r16
80204d8c:	a809883a 	mov	r4,r21
80204d90:	02028480 	call	80202848 <__swsetup_r>
80204d94:	1000eb1e 	bne	r2,zero,80205144 <__sfvwrite_r+0x4a4>
80204d98:	80c0030b 	ldhu	r3,12(r16)
80204d9c:	a4400017 	ldw	r17,0(r20)
80204da0:	1880008c 	andi	r2,r3,2
80204da4:	103fd61e 	bne	r2,zero,80204d00 <__reset+0xfa1e4d00>
80204da8:	1880004c 	andi	r2,r3,1
80204dac:	10003f1e 	bne	r2,zero,80204eac <__sfvwrite_r+0x20c>
80204db0:	0039883a 	mov	fp,zero
80204db4:	0025883a 	mov	r18,zero
80204db8:	90001a26 	beq	r18,zero,80204e24 <__sfvwrite_r+0x184>
80204dbc:	1880800c 	andi	r2,r3,512
80204dc0:	84c00217 	ldw	r19,8(r16)
80204dc4:	10002126 	beq	r2,zero,80204e4c <__sfvwrite_r+0x1ac>
80204dc8:	982f883a 	mov	r23,r19
80204dcc:	94c09336 	bltu	r18,r19,8020501c <__sfvwrite_r+0x37c>
80204dd0:	1881200c 	andi	r2,r3,1152
80204dd4:	10009e1e 	bne	r2,zero,80205050 <__sfvwrite_r+0x3b0>
80204dd8:	81000017 	ldw	r4,0(r16)
80204ddc:	b80d883a 	mov	r6,r23
80204de0:	e00b883a 	mov	r5,fp
80204de4:	0205fb40 	call	80205fb4 <memmove>
80204de8:	80c00217 	ldw	r3,8(r16)
80204dec:	81000017 	ldw	r4,0(r16)
80204df0:	9005883a 	mov	r2,r18
80204df4:	1ce7c83a 	sub	r19,r3,r19
80204df8:	25cf883a 	add	r7,r4,r23
80204dfc:	84c00215 	stw	r19,8(r16)
80204e00:	81c00015 	stw	r7,0(r16)
80204e04:	a0c00217 	ldw	r3,8(r20)
80204e08:	e0b9883a 	add	fp,fp,r2
80204e0c:	90a5c83a 	sub	r18,r18,r2
80204e10:	18a7c83a 	sub	r19,r3,r2
80204e14:	a4c00215 	stw	r19,8(r20)
80204e18:	983fce26 	beq	r19,zero,80204d54 <__reset+0xfa1e4d54>
80204e1c:	80c0030b 	ldhu	r3,12(r16)
80204e20:	903fe61e 	bne	r18,zero,80204dbc <__reset+0xfa1e4dbc>
80204e24:	8f000017 	ldw	fp,0(r17)
80204e28:	8c800117 	ldw	r18,4(r17)
80204e2c:	8c400204 	addi	r17,r17,8
80204e30:	003fe106 	br	80204db8 <__reset+0xfa1e4db8>
80204e34:	8cc00017 	ldw	r19,0(r17)
80204e38:	8c800117 	ldw	r18,4(r17)
80204e3c:	8c400204 	addi	r17,r17,8
80204e40:	003fb306 	br	80204d10 <__reset+0xfa1e4d10>
80204e44:	0005883a 	mov	r2,zero
80204e48:	f800283a 	ret
80204e4c:	81000017 	ldw	r4,0(r16)
80204e50:	80800417 	ldw	r2,16(r16)
80204e54:	11005736 	bltu	r2,r4,80204fb4 <__sfvwrite_r+0x314>
80204e58:	85c00517 	ldw	r23,20(r16)
80204e5c:	95c05536 	bltu	r18,r23,80204fb4 <__sfvwrite_r+0x314>
80204e60:	00a00034 	movhi	r2,32768
80204e64:	10bfffc4 	addi	r2,r2,-1
80204e68:	9009883a 	mov	r4,r18
80204e6c:	1480012e 	bgeu	r2,r18,80204e74 <__sfvwrite_r+0x1d4>
80204e70:	1009883a 	mov	r4,r2
80204e74:	b80b883a 	mov	r5,r23
80204e78:	020a4a40 	call	8020a4a4 <__divsi3>
80204e7c:	15cf383a 	mul	r7,r2,r23
80204e80:	81400717 	ldw	r5,28(r16)
80204e84:	80800917 	ldw	r2,36(r16)
80204e88:	e00d883a 	mov	r6,fp
80204e8c:	a809883a 	mov	r4,r21
80204e90:	103ee83a 	callr	r2
80204e94:	00bfdb16 	blt	zero,r2,80204e04 <__reset+0xfa1e4e04>
80204e98:	8080030b 	ldhu	r2,12(r16)
80204e9c:	10801014 	ori	r2,r2,64
80204ea0:	8080030d 	sth	r2,12(r16)
80204ea4:	00bfffc4 	movi	r2,-1
80204ea8:	003fab06 	br	80204d58 <__reset+0xfa1e4d58>
80204eac:	0027883a 	mov	r19,zero
80204eb0:	0011883a 	mov	r8,zero
80204eb4:	0039883a 	mov	fp,zero
80204eb8:	0025883a 	mov	r18,zero
80204ebc:	90001f26 	beq	r18,zero,80204f3c <__sfvwrite_r+0x29c>
80204ec0:	40005a26 	beq	r8,zero,8020502c <__sfvwrite_r+0x38c>
80204ec4:	982d883a 	mov	r22,r19
80204ec8:	94c0012e 	bgeu	r18,r19,80204ed0 <__sfvwrite_r+0x230>
80204ecc:	902d883a 	mov	r22,r18
80204ed0:	81000017 	ldw	r4,0(r16)
80204ed4:	80800417 	ldw	r2,16(r16)
80204ed8:	b02f883a 	mov	r23,r22
80204edc:	81c00517 	ldw	r7,20(r16)
80204ee0:	1100032e 	bgeu	r2,r4,80204ef0 <__sfvwrite_r+0x250>
80204ee4:	80c00217 	ldw	r3,8(r16)
80204ee8:	38c7883a 	add	r3,r7,r3
80204eec:	1d801816 	blt	r3,r22,80204f50 <__sfvwrite_r+0x2b0>
80204ef0:	b1c03e16 	blt	r22,r7,80204fec <__sfvwrite_r+0x34c>
80204ef4:	80800917 	ldw	r2,36(r16)
80204ef8:	81400717 	ldw	r5,28(r16)
80204efc:	e00d883a 	mov	r6,fp
80204f00:	da000115 	stw	r8,4(sp)
80204f04:	a809883a 	mov	r4,r21
80204f08:	103ee83a 	callr	r2
80204f0c:	102f883a 	mov	r23,r2
80204f10:	da000117 	ldw	r8,4(sp)
80204f14:	00bfe00e 	bge	zero,r2,80204e98 <__reset+0xfa1e4e98>
80204f18:	9de7c83a 	sub	r19,r19,r23
80204f1c:	98001f26 	beq	r19,zero,80204f9c <__sfvwrite_r+0x2fc>
80204f20:	a0800217 	ldw	r2,8(r20)
80204f24:	e5f9883a 	add	fp,fp,r23
80204f28:	95e5c83a 	sub	r18,r18,r23
80204f2c:	15efc83a 	sub	r23,r2,r23
80204f30:	a5c00215 	stw	r23,8(r20)
80204f34:	b83f8726 	beq	r23,zero,80204d54 <__reset+0xfa1e4d54>
80204f38:	903fe11e 	bne	r18,zero,80204ec0 <__reset+0xfa1e4ec0>
80204f3c:	8f000017 	ldw	fp,0(r17)
80204f40:	8c800117 	ldw	r18,4(r17)
80204f44:	0011883a 	mov	r8,zero
80204f48:	8c400204 	addi	r17,r17,8
80204f4c:	003fdb06 	br	80204ebc <__reset+0xfa1e4ebc>
80204f50:	180d883a 	mov	r6,r3
80204f54:	e00b883a 	mov	r5,fp
80204f58:	da000115 	stw	r8,4(sp)
80204f5c:	d8c00015 	stw	r3,0(sp)
80204f60:	0205fb40 	call	80205fb4 <memmove>
80204f64:	d8c00017 	ldw	r3,0(sp)
80204f68:	80800017 	ldw	r2,0(r16)
80204f6c:	800b883a 	mov	r5,r16
80204f70:	a809883a 	mov	r4,r21
80204f74:	10c5883a 	add	r2,r2,r3
80204f78:	80800015 	stw	r2,0(r16)
80204f7c:	d8c00015 	stw	r3,0(sp)
80204f80:	02044400 	call	80204440 <_fflush_r>
80204f84:	d8c00017 	ldw	r3,0(sp)
80204f88:	da000117 	ldw	r8,4(sp)
80204f8c:	103fc21e 	bne	r2,zero,80204e98 <__reset+0xfa1e4e98>
80204f90:	182f883a 	mov	r23,r3
80204f94:	9de7c83a 	sub	r19,r19,r23
80204f98:	983fe11e 	bne	r19,zero,80204f20 <__reset+0xfa1e4f20>
80204f9c:	800b883a 	mov	r5,r16
80204fa0:	a809883a 	mov	r4,r21
80204fa4:	02044400 	call	80204440 <_fflush_r>
80204fa8:	103fbb1e 	bne	r2,zero,80204e98 <__reset+0xfa1e4e98>
80204fac:	0011883a 	mov	r8,zero
80204fb0:	003fdb06 	br	80204f20 <__reset+0xfa1e4f20>
80204fb4:	94c0012e 	bgeu	r18,r19,80204fbc <__sfvwrite_r+0x31c>
80204fb8:	9027883a 	mov	r19,r18
80204fbc:	980d883a 	mov	r6,r19
80204fc0:	e00b883a 	mov	r5,fp
80204fc4:	0205fb40 	call	80205fb4 <memmove>
80204fc8:	80800217 	ldw	r2,8(r16)
80204fcc:	80c00017 	ldw	r3,0(r16)
80204fd0:	14c5c83a 	sub	r2,r2,r19
80204fd4:	1cc7883a 	add	r3,r3,r19
80204fd8:	80800215 	stw	r2,8(r16)
80204fdc:	80c00015 	stw	r3,0(r16)
80204fe0:	10004326 	beq	r2,zero,802050f0 <__sfvwrite_r+0x450>
80204fe4:	9805883a 	mov	r2,r19
80204fe8:	003f8606 	br	80204e04 <__reset+0xfa1e4e04>
80204fec:	b00d883a 	mov	r6,r22
80204ff0:	e00b883a 	mov	r5,fp
80204ff4:	da000115 	stw	r8,4(sp)
80204ff8:	0205fb40 	call	80205fb4 <memmove>
80204ffc:	80800217 	ldw	r2,8(r16)
80205000:	80c00017 	ldw	r3,0(r16)
80205004:	da000117 	ldw	r8,4(sp)
80205008:	1585c83a 	sub	r2,r2,r22
8020500c:	1dad883a 	add	r22,r3,r22
80205010:	80800215 	stw	r2,8(r16)
80205014:	85800015 	stw	r22,0(r16)
80205018:	003fbf06 	br	80204f18 <__reset+0xfa1e4f18>
8020501c:	81000017 	ldw	r4,0(r16)
80205020:	9027883a 	mov	r19,r18
80205024:	902f883a 	mov	r23,r18
80205028:	003f6c06 	br	80204ddc <__reset+0xfa1e4ddc>
8020502c:	900d883a 	mov	r6,r18
80205030:	01400284 	movi	r5,10
80205034:	e009883a 	mov	r4,fp
80205038:	0205d880 	call	80205d88 <memchr>
8020503c:	10003e26 	beq	r2,zero,80205138 <__sfvwrite_r+0x498>
80205040:	10800044 	addi	r2,r2,1
80205044:	1727c83a 	sub	r19,r2,fp
80205048:	02000044 	movi	r8,1
8020504c:	003f9d06 	br	80204ec4 <__reset+0xfa1e4ec4>
80205050:	80800517 	ldw	r2,20(r16)
80205054:	81400417 	ldw	r5,16(r16)
80205058:	81c00017 	ldw	r7,0(r16)
8020505c:	10a7883a 	add	r19,r2,r2
80205060:	9885883a 	add	r2,r19,r2
80205064:	1026d7fa 	srli	r19,r2,31
80205068:	396dc83a 	sub	r22,r7,r5
8020506c:	b1000044 	addi	r4,r22,1
80205070:	9885883a 	add	r2,r19,r2
80205074:	1027d07a 	srai	r19,r2,1
80205078:	2485883a 	add	r2,r4,r18
8020507c:	980d883a 	mov	r6,r19
80205080:	9880022e 	bgeu	r19,r2,8020508c <__sfvwrite_r+0x3ec>
80205084:	1027883a 	mov	r19,r2
80205088:	100d883a 	mov	r6,r2
8020508c:	18c1000c 	andi	r3,r3,1024
80205090:	18001c26 	beq	r3,zero,80205104 <__sfvwrite_r+0x464>
80205094:	300b883a 	mov	r5,r6
80205098:	a809883a 	mov	r4,r21
8020509c:	020557c0 	call	8020557c <_malloc_r>
802050a0:	102f883a 	mov	r23,r2
802050a4:	10002926 	beq	r2,zero,8020514c <__sfvwrite_r+0x4ac>
802050a8:	81400417 	ldw	r5,16(r16)
802050ac:	b00d883a 	mov	r6,r22
802050b0:	1009883a 	mov	r4,r2
802050b4:	0205e6c0 	call	80205e6c <memcpy>
802050b8:	8080030b 	ldhu	r2,12(r16)
802050bc:	00fedfc4 	movi	r3,-1153
802050c0:	10c4703a 	and	r2,r2,r3
802050c4:	10802014 	ori	r2,r2,128
802050c8:	8080030d 	sth	r2,12(r16)
802050cc:	bd89883a 	add	r4,r23,r22
802050d0:	9d8fc83a 	sub	r7,r19,r22
802050d4:	85c00415 	stw	r23,16(r16)
802050d8:	84c00515 	stw	r19,20(r16)
802050dc:	81000015 	stw	r4,0(r16)
802050e0:	9027883a 	mov	r19,r18
802050e4:	81c00215 	stw	r7,8(r16)
802050e8:	902f883a 	mov	r23,r18
802050ec:	003f3b06 	br	80204ddc <__reset+0xfa1e4ddc>
802050f0:	800b883a 	mov	r5,r16
802050f4:	a809883a 	mov	r4,r21
802050f8:	02044400 	call	80204440 <_fflush_r>
802050fc:	103fb926 	beq	r2,zero,80204fe4 <__reset+0xfa1e4fe4>
80205100:	003f6506 	br	80204e98 <__reset+0xfa1e4e98>
80205104:	a809883a 	mov	r4,r21
80205108:	02072340 	call	80207234 <_realloc_r>
8020510c:	102f883a 	mov	r23,r2
80205110:	103fee1e 	bne	r2,zero,802050cc <__reset+0xfa1e50cc>
80205114:	81400417 	ldw	r5,16(r16)
80205118:	a809883a 	mov	r4,r21
8020511c:	02049900 	call	80204990 <_free_r>
80205120:	8080030b 	ldhu	r2,12(r16)
80205124:	00ffdfc4 	movi	r3,-129
80205128:	1884703a 	and	r2,r3,r2
8020512c:	00c00304 	movi	r3,12
80205130:	a8c00015 	stw	r3,0(r21)
80205134:	003f5906 	br	80204e9c <__reset+0xfa1e4e9c>
80205138:	94c00044 	addi	r19,r18,1
8020513c:	02000044 	movi	r8,1
80205140:	003f6006 	br	80204ec4 <__reset+0xfa1e4ec4>
80205144:	00bfffc4 	movi	r2,-1
80205148:	003f0306 	br	80204d58 <__reset+0xfa1e4d58>
8020514c:	00800304 	movi	r2,12
80205150:	a8800015 	stw	r2,0(r21)
80205154:	8080030b 	ldhu	r2,12(r16)
80205158:	003f5006 	br	80204e9c <__reset+0xfa1e4e9c>

8020515c <_fwalk>:
8020515c:	defff704 	addi	sp,sp,-36
80205160:	dd000415 	stw	r20,16(sp)
80205164:	dfc00815 	stw	ra,32(sp)
80205168:	ddc00715 	stw	r23,28(sp)
8020516c:	dd800615 	stw	r22,24(sp)
80205170:	dd400515 	stw	r21,20(sp)
80205174:	dcc00315 	stw	r19,12(sp)
80205178:	dc800215 	stw	r18,8(sp)
8020517c:	dc400115 	stw	r17,4(sp)
80205180:	dc000015 	stw	r16,0(sp)
80205184:	2500b804 	addi	r20,r4,736
80205188:	a0002326 	beq	r20,zero,80205218 <_fwalk+0xbc>
8020518c:	282b883a 	mov	r21,r5
80205190:	002f883a 	mov	r23,zero
80205194:	05800044 	movi	r22,1
80205198:	04ffffc4 	movi	r19,-1
8020519c:	a4400117 	ldw	r17,4(r20)
802051a0:	a4800217 	ldw	r18,8(r20)
802051a4:	8c7fffc4 	addi	r17,r17,-1
802051a8:	88000d16 	blt	r17,zero,802051e0 <_fwalk+0x84>
802051ac:	94000304 	addi	r16,r18,12
802051b0:	94800384 	addi	r18,r18,14
802051b4:	8080000b 	ldhu	r2,0(r16)
802051b8:	8c7fffc4 	addi	r17,r17,-1
802051bc:	813ffd04 	addi	r4,r16,-12
802051c0:	b080042e 	bgeu	r22,r2,802051d4 <_fwalk+0x78>
802051c4:	9080000f 	ldh	r2,0(r18)
802051c8:	14c00226 	beq	r2,r19,802051d4 <_fwalk+0x78>
802051cc:	a83ee83a 	callr	r21
802051d0:	b8aeb03a 	or	r23,r23,r2
802051d4:	84001a04 	addi	r16,r16,104
802051d8:	94801a04 	addi	r18,r18,104
802051dc:	8cfff51e 	bne	r17,r19,802051b4 <__reset+0xfa1e51b4>
802051e0:	a5000017 	ldw	r20,0(r20)
802051e4:	a03fed1e 	bne	r20,zero,8020519c <__reset+0xfa1e519c>
802051e8:	b805883a 	mov	r2,r23
802051ec:	dfc00817 	ldw	ra,32(sp)
802051f0:	ddc00717 	ldw	r23,28(sp)
802051f4:	dd800617 	ldw	r22,24(sp)
802051f8:	dd400517 	ldw	r21,20(sp)
802051fc:	dd000417 	ldw	r20,16(sp)
80205200:	dcc00317 	ldw	r19,12(sp)
80205204:	dc800217 	ldw	r18,8(sp)
80205208:	dc400117 	ldw	r17,4(sp)
8020520c:	dc000017 	ldw	r16,0(sp)
80205210:	dec00904 	addi	sp,sp,36
80205214:	f800283a 	ret
80205218:	002f883a 	mov	r23,zero
8020521c:	003ff206 	br	802051e8 <__reset+0xfa1e51e8>

80205220 <_fwalk_reent>:
80205220:	defff704 	addi	sp,sp,-36
80205224:	dd000415 	stw	r20,16(sp)
80205228:	dfc00815 	stw	ra,32(sp)
8020522c:	ddc00715 	stw	r23,28(sp)
80205230:	dd800615 	stw	r22,24(sp)
80205234:	dd400515 	stw	r21,20(sp)
80205238:	dcc00315 	stw	r19,12(sp)
8020523c:	dc800215 	stw	r18,8(sp)
80205240:	dc400115 	stw	r17,4(sp)
80205244:	dc000015 	stw	r16,0(sp)
80205248:	2500b804 	addi	r20,r4,736
8020524c:	a0002326 	beq	r20,zero,802052dc <_fwalk_reent+0xbc>
80205250:	282b883a 	mov	r21,r5
80205254:	2027883a 	mov	r19,r4
80205258:	002f883a 	mov	r23,zero
8020525c:	05800044 	movi	r22,1
80205260:	04bfffc4 	movi	r18,-1
80205264:	a4400117 	ldw	r17,4(r20)
80205268:	a4000217 	ldw	r16,8(r20)
8020526c:	8c7fffc4 	addi	r17,r17,-1
80205270:	88000c16 	blt	r17,zero,802052a4 <_fwalk_reent+0x84>
80205274:	84000304 	addi	r16,r16,12
80205278:	8080000b 	ldhu	r2,0(r16)
8020527c:	8c7fffc4 	addi	r17,r17,-1
80205280:	817ffd04 	addi	r5,r16,-12
80205284:	b080052e 	bgeu	r22,r2,8020529c <_fwalk_reent+0x7c>
80205288:	8080008f 	ldh	r2,2(r16)
8020528c:	9809883a 	mov	r4,r19
80205290:	14800226 	beq	r2,r18,8020529c <_fwalk_reent+0x7c>
80205294:	a83ee83a 	callr	r21
80205298:	b8aeb03a 	or	r23,r23,r2
8020529c:	84001a04 	addi	r16,r16,104
802052a0:	8cbff51e 	bne	r17,r18,80205278 <__reset+0xfa1e5278>
802052a4:	a5000017 	ldw	r20,0(r20)
802052a8:	a03fee1e 	bne	r20,zero,80205264 <__reset+0xfa1e5264>
802052ac:	b805883a 	mov	r2,r23
802052b0:	dfc00817 	ldw	ra,32(sp)
802052b4:	ddc00717 	ldw	r23,28(sp)
802052b8:	dd800617 	ldw	r22,24(sp)
802052bc:	dd400517 	ldw	r21,20(sp)
802052c0:	dd000417 	ldw	r20,16(sp)
802052c4:	dcc00317 	ldw	r19,12(sp)
802052c8:	dc800217 	ldw	r18,8(sp)
802052cc:	dc400117 	ldw	r17,4(sp)
802052d0:	dc000017 	ldw	r16,0(sp)
802052d4:	dec00904 	addi	sp,sp,36
802052d8:	f800283a 	ret
802052dc:	002f883a 	mov	r23,zero
802052e0:	003ff206 	br	802052ac <__reset+0xfa1e52ac>

802052e4 <_setlocale_r>:
802052e4:	30001b26 	beq	r6,zero,80205354 <_setlocale_r+0x70>
802052e8:	01600874 	movhi	r5,32801
802052ec:	defffe04 	addi	sp,sp,-8
802052f0:	29485a04 	addi	r5,r5,8552
802052f4:	3009883a 	mov	r4,r6
802052f8:	dc000015 	stw	r16,0(sp)
802052fc:	dfc00115 	stw	ra,4(sp)
80205300:	3021883a 	mov	r16,r6
80205304:	020799c0 	call	8020799c <strcmp>
80205308:	1000061e 	bne	r2,zero,80205324 <_setlocale_r+0x40>
8020530c:	00a00874 	movhi	r2,32801
80205310:	10885904 	addi	r2,r2,8548
80205314:	dfc00117 	ldw	ra,4(sp)
80205318:	dc000017 	ldw	r16,0(sp)
8020531c:	dec00204 	addi	sp,sp,8
80205320:	f800283a 	ret
80205324:	01600874 	movhi	r5,32801
80205328:	29485904 	addi	r5,r5,8548
8020532c:	8009883a 	mov	r4,r16
80205330:	020799c0 	call	8020799c <strcmp>
80205334:	103ff526 	beq	r2,zero,8020530c <__reset+0xfa1e530c>
80205338:	01600874 	movhi	r5,32801
8020533c:	29484404 	addi	r5,r5,8464
80205340:	8009883a 	mov	r4,r16
80205344:	020799c0 	call	8020799c <strcmp>
80205348:	103ff026 	beq	r2,zero,8020530c <__reset+0xfa1e530c>
8020534c:	0005883a 	mov	r2,zero
80205350:	003ff006 	br	80205314 <__reset+0xfa1e5314>
80205354:	00a00874 	movhi	r2,32801
80205358:	10885904 	addi	r2,r2,8548
8020535c:	f800283a 	ret

80205360 <__locale_charset>:
80205360:	00a00874 	movhi	r2,32801
80205364:	108aa904 	addi	r2,r2,10916
80205368:	f800283a 	ret

8020536c <__locale_mb_cur_max>:
8020536c:	00a00874 	movhi	r2,32801
80205370:	1090b504 	addi	r2,r2,17108
80205374:	10800017 	ldw	r2,0(r2)
80205378:	f800283a 	ret

8020537c <__locale_msgcharset>:
8020537c:	00a00874 	movhi	r2,32801
80205380:	108aa104 	addi	r2,r2,10884
80205384:	f800283a 	ret

80205388 <__locale_cjk_lang>:
80205388:	0005883a 	mov	r2,zero
8020538c:	f800283a 	ret

80205390 <_localeconv_r>:
80205390:	00a00874 	movhi	r2,32801
80205394:	108ab104 	addi	r2,r2,10948
80205398:	f800283a 	ret

8020539c <setlocale>:
8020539c:	00a00874 	movhi	r2,32801
802053a0:	1090b404 	addi	r2,r2,17104
802053a4:	280d883a 	mov	r6,r5
802053a8:	200b883a 	mov	r5,r4
802053ac:	11000017 	ldw	r4,0(r2)
802053b0:	02052e41 	jmpi	802052e4 <_setlocale_r>

802053b4 <localeconv>:
802053b4:	00a00874 	movhi	r2,32801
802053b8:	108ab104 	addi	r2,r2,10948
802053bc:	f800283a 	ret

802053c0 <__smakebuf_r>:
802053c0:	2880030b 	ldhu	r2,12(r5)
802053c4:	10c0008c 	andi	r3,r2,2
802053c8:	1800411e 	bne	r3,zero,802054d0 <__smakebuf_r+0x110>
802053cc:	deffec04 	addi	sp,sp,-80
802053d0:	dc000f15 	stw	r16,60(sp)
802053d4:	2821883a 	mov	r16,r5
802053d8:	2940038f 	ldh	r5,14(r5)
802053dc:	dc401015 	stw	r17,64(sp)
802053e0:	dfc01315 	stw	ra,76(sp)
802053e4:	dcc01215 	stw	r19,72(sp)
802053e8:	dc801115 	stw	r18,68(sp)
802053ec:	2023883a 	mov	r17,r4
802053f0:	28001c16 	blt	r5,zero,80205464 <__smakebuf_r+0xa4>
802053f4:	d80d883a 	mov	r6,sp
802053f8:	02095440 	call	80209544 <_fstat_r>
802053fc:	10001816 	blt	r2,zero,80205460 <__smakebuf_r+0xa0>
80205400:	d8800117 	ldw	r2,4(sp)
80205404:	00e00014 	movui	r3,32768
80205408:	10bc000c 	andi	r2,r2,61440
8020540c:	14c80020 	cmpeqi	r19,r2,8192
80205410:	10c03726 	beq	r2,r3,802054f0 <__smakebuf_r+0x130>
80205414:	80c0030b 	ldhu	r3,12(r16)
80205418:	18c20014 	ori	r3,r3,2048
8020541c:	80c0030d 	sth	r3,12(r16)
80205420:	00c80004 	movi	r3,8192
80205424:	10c0521e 	bne	r2,r3,80205570 <__smakebuf_r+0x1b0>
80205428:	8140038f 	ldh	r5,14(r16)
8020542c:	8809883a 	mov	r4,r17
80205430:	02095a00 	call	802095a0 <_isatty_r>
80205434:	10004c26 	beq	r2,zero,80205568 <__smakebuf_r+0x1a8>
80205438:	8080030b 	ldhu	r2,12(r16)
8020543c:	80c010c4 	addi	r3,r16,67
80205440:	80c00015 	stw	r3,0(r16)
80205444:	10800054 	ori	r2,r2,1
80205448:	8080030d 	sth	r2,12(r16)
8020544c:	00800044 	movi	r2,1
80205450:	80c00415 	stw	r3,16(r16)
80205454:	80800515 	stw	r2,20(r16)
80205458:	04810004 	movi	r18,1024
8020545c:	00000706 	br	8020547c <__smakebuf_r+0xbc>
80205460:	8080030b 	ldhu	r2,12(r16)
80205464:	10c0200c 	andi	r3,r2,128
80205468:	18001f1e 	bne	r3,zero,802054e8 <__smakebuf_r+0x128>
8020546c:	04810004 	movi	r18,1024
80205470:	10820014 	ori	r2,r2,2048
80205474:	8080030d 	sth	r2,12(r16)
80205478:	0027883a 	mov	r19,zero
8020547c:	900b883a 	mov	r5,r18
80205480:	8809883a 	mov	r4,r17
80205484:	020557c0 	call	8020557c <_malloc_r>
80205488:	10002c26 	beq	r2,zero,8020553c <__smakebuf_r+0x17c>
8020548c:	80c0030b 	ldhu	r3,12(r16)
80205490:	01200834 	movhi	r4,32800
80205494:	21113504 	addi	r4,r4,17620
80205498:	89000f15 	stw	r4,60(r17)
8020549c:	18c02014 	ori	r3,r3,128
802054a0:	80c0030d 	sth	r3,12(r16)
802054a4:	80800015 	stw	r2,0(r16)
802054a8:	80800415 	stw	r2,16(r16)
802054ac:	84800515 	stw	r18,20(r16)
802054b0:	98001a1e 	bne	r19,zero,8020551c <__smakebuf_r+0x15c>
802054b4:	dfc01317 	ldw	ra,76(sp)
802054b8:	dcc01217 	ldw	r19,72(sp)
802054bc:	dc801117 	ldw	r18,68(sp)
802054c0:	dc401017 	ldw	r17,64(sp)
802054c4:	dc000f17 	ldw	r16,60(sp)
802054c8:	dec01404 	addi	sp,sp,80
802054cc:	f800283a 	ret
802054d0:	288010c4 	addi	r2,r5,67
802054d4:	28800015 	stw	r2,0(r5)
802054d8:	28800415 	stw	r2,16(r5)
802054dc:	00800044 	movi	r2,1
802054e0:	28800515 	stw	r2,20(r5)
802054e4:	f800283a 	ret
802054e8:	04801004 	movi	r18,64
802054ec:	003fe006 	br	80205470 <__reset+0xfa1e5470>
802054f0:	81000a17 	ldw	r4,40(r16)
802054f4:	00e00834 	movhi	r3,32800
802054f8:	18de4e04 	addi	r3,r3,31032
802054fc:	20ffc51e 	bne	r4,r3,80205414 <__reset+0xfa1e5414>
80205500:	8080030b 	ldhu	r2,12(r16)
80205504:	04810004 	movi	r18,1024
80205508:	84801315 	stw	r18,76(r16)
8020550c:	1484b03a 	or	r2,r2,r18
80205510:	8080030d 	sth	r2,12(r16)
80205514:	0027883a 	mov	r19,zero
80205518:	003fd806 	br	8020547c <__reset+0xfa1e547c>
8020551c:	8140038f 	ldh	r5,14(r16)
80205520:	8809883a 	mov	r4,r17
80205524:	02095a00 	call	802095a0 <_isatty_r>
80205528:	103fe226 	beq	r2,zero,802054b4 <__reset+0xfa1e54b4>
8020552c:	8080030b 	ldhu	r2,12(r16)
80205530:	10800054 	ori	r2,r2,1
80205534:	8080030d 	sth	r2,12(r16)
80205538:	003fde06 	br	802054b4 <__reset+0xfa1e54b4>
8020553c:	8080030b 	ldhu	r2,12(r16)
80205540:	10c0800c 	andi	r3,r2,512
80205544:	183fdb1e 	bne	r3,zero,802054b4 <__reset+0xfa1e54b4>
80205548:	10800094 	ori	r2,r2,2
8020554c:	80c010c4 	addi	r3,r16,67
80205550:	8080030d 	sth	r2,12(r16)
80205554:	00800044 	movi	r2,1
80205558:	80c00015 	stw	r3,0(r16)
8020555c:	80c00415 	stw	r3,16(r16)
80205560:	80800515 	stw	r2,20(r16)
80205564:	003fd306 	br	802054b4 <__reset+0xfa1e54b4>
80205568:	04810004 	movi	r18,1024
8020556c:	003fc306 	br	8020547c <__reset+0xfa1e547c>
80205570:	0027883a 	mov	r19,zero
80205574:	04810004 	movi	r18,1024
80205578:	003fc006 	br	8020547c <__reset+0xfa1e547c>

8020557c <_malloc_r>:
8020557c:	defff504 	addi	sp,sp,-44
80205580:	dc800315 	stw	r18,12(sp)
80205584:	dfc00a15 	stw	ra,40(sp)
80205588:	df000915 	stw	fp,36(sp)
8020558c:	ddc00815 	stw	r23,32(sp)
80205590:	dd800715 	stw	r22,28(sp)
80205594:	dd400615 	stw	r21,24(sp)
80205598:	dd000515 	stw	r20,20(sp)
8020559c:	dcc00415 	stw	r19,16(sp)
802055a0:	dc400215 	stw	r17,8(sp)
802055a4:	dc000115 	stw	r16,4(sp)
802055a8:	288002c4 	addi	r2,r5,11
802055ac:	00c00584 	movi	r3,22
802055b0:	2025883a 	mov	r18,r4
802055b4:	18807f2e 	bgeu	r3,r2,802057b4 <_malloc_r+0x238>
802055b8:	047ffe04 	movi	r17,-8
802055bc:	1462703a 	and	r17,r2,r17
802055c0:	8800a316 	blt	r17,zero,80205850 <_malloc_r+0x2d4>
802055c4:	8940a236 	bltu	r17,r5,80205850 <_malloc_r+0x2d4>
802055c8:	020d1500 	call	8020d150 <__malloc_lock>
802055cc:	00807dc4 	movi	r2,503
802055d0:	1441e92e 	bgeu	r2,r17,80205d78 <_malloc_r+0x7fc>
802055d4:	8804d27a 	srli	r2,r17,9
802055d8:	1000a126 	beq	r2,zero,80205860 <_malloc_r+0x2e4>
802055dc:	00c00104 	movi	r3,4
802055e0:	18811e36 	bltu	r3,r2,80205a5c <_malloc_r+0x4e0>
802055e4:	8804d1ba 	srli	r2,r17,6
802055e8:	12000e44 	addi	r8,r2,57
802055ec:	11c00e04 	addi	r7,r2,56
802055f0:	4209883a 	add	r4,r8,r8
802055f4:	04e00874 	movhi	r19,32801
802055f8:	2109883a 	add	r4,r4,r4
802055fc:	9ccabf04 	addi	r19,r19,11004
80205600:	2109883a 	add	r4,r4,r4
80205604:	9909883a 	add	r4,r19,r4
80205608:	24000117 	ldw	r16,4(r4)
8020560c:	213ffe04 	addi	r4,r4,-8
80205610:	24009726 	beq	r4,r16,80205870 <_malloc_r+0x2f4>
80205614:	80800117 	ldw	r2,4(r16)
80205618:	01bfff04 	movi	r6,-4
8020561c:	014003c4 	movi	r5,15
80205620:	1184703a 	and	r2,r2,r6
80205624:	1447c83a 	sub	r3,r2,r17
80205628:	28c00716 	blt	r5,r3,80205648 <_malloc_r+0xcc>
8020562c:	1800920e 	bge	r3,zero,80205878 <_malloc_r+0x2fc>
80205630:	84000317 	ldw	r16,12(r16)
80205634:	24008e26 	beq	r4,r16,80205870 <_malloc_r+0x2f4>
80205638:	80800117 	ldw	r2,4(r16)
8020563c:	1184703a 	and	r2,r2,r6
80205640:	1447c83a 	sub	r3,r2,r17
80205644:	28fff90e 	bge	r5,r3,8020562c <__reset+0xfa1e562c>
80205648:	3809883a 	mov	r4,r7
8020564c:	01a00874 	movhi	r6,32801
80205650:	9c000417 	ldw	r16,16(r19)
80205654:	318abf04 	addi	r6,r6,11004
80205658:	32000204 	addi	r8,r6,8
8020565c:	82013426 	beq	r16,r8,80205b30 <_malloc_r+0x5b4>
80205660:	80c00117 	ldw	r3,4(r16)
80205664:	00bfff04 	movi	r2,-4
80205668:	188e703a 	and	r7,r3,r2
8020566c:	3c45c83a 	sub	r2,r7,r17
80205670:	00c003c4 	movi	r3,15
80205674:	18811f16 	blt	r3,r2,80205af4 <_malloc_r+0x578>
80205678:	32000515 	stw	r8,20(r6)
8020567c:	32000415 	stw	r8,16(r6)
80205680:	10007f0e 	bge	r2,zero,80205880 <_malloc_r+0x304>
80205684:	00807fc4 	movi	r2,511
80205688:	11c0fd36 	bltu	r2,r7,80205a80 <_malloc_r+0x504>
8020568c:	3806d0fa 	srli	r3,r7,3
80205690:	01c00044 	movi	r7,1
80205694:	30800117 	ldw	r2,4(r6)
80205698:	19400044 	addi	r5,r3,1
8020569c:	294b883a 	add	r5,r5,r5
802056a0:	1807d0ba 	srai	r3,r3,2
802056a4:	294b883a 	add	r5,r5,r5
802056a8:	294b883a 	add	r5,r5,r5
802056ac:	298b883a 	add	r5,r5,r6
802056b0:	38c6983a 	sll	r3,r7,r3
802056b4:	29c00017 	ldw	r7,0(r5)
802056b8:	2a7ffe04 	addi	r9,r5,-8
802056bc:	1886b03a 	or	r3,r3,r2
802056c0:	82400315 	stw	r9,12(r16)
802056c4:	81c00215 	stw	r7,8(r16)
802056c8:	30c00115 	stw	r3,4(r6)
802056cc:	2c000015 	stw	r16,0(r5)
802056d0:	3c000315 	stw	r16,12(r7)
802056d4:	2005d0ba 	srai	r2,r4,2
802056d8:	01400044 	movi	r5,1
802056dc:	288a983a 	sll	r5,r5,r2
802056e0:	19406f36 	bltu	r3,r5,802058a0 <_malloc_r+0x324>
802056e4:	28c4703a 	and	r2,r5,r3
802056e8:	10000a1e 	bne	r2,zero,80205714 <_malloc_r+0x198>
802056ec:	00bfff04 	movi	r2,-4
802056f0:	294b883a 	add	r5,r5,r5
802056f4:	2088703a 	and	r4,r4,r2
802056f8:	28c4703a 	and	r2,r5,r3
802056fc:	21000104 	addi	r4,r4,4
80205700:	1000041e 	bne	r2,zero,80205714 <_malloc_r+0x198>
80205704:	294b883a 	add	r5,r5,r5
80205708:	28c4703a 	and	r2,r5,r3
8020570c:	21000104 	addi	r4,r4,4
80205710:	103ffc26 	beq	r2,zero,80205704 <__reset+0xfa1e5704>
80205714:	02bfff04 	movi	r10,-4
80205718:	024003c4 	movi	r9,15
8020571c:	21800044 	addi	r6,r4,1
80205720:	318d883a 	add	r6,r6,r6
80205724:	318d883a 	add	r6,r6,r6
80205728:	318d883a 	add	r6,r6,r6
8020572c:	998d883a 	add	r6,r19,r6
80205730:	333ffe04 	addi	r12,r6,-8
80205734:	2017883a 	mov	r11,r4
80205738:	31800104 	addi	r6,r6,4
8020573c:	34000017 	ldw	r16,0(r6)
80205740:	31fffd04 	addi	r7,r6,-12
80205744:	81c0041e 	bne	r16,r7,80205758 <_malloc_r+0x1dc>
80205748:	0000fb06 	br	80205b38 <_malloc_r+0x5bc>
8020574c:	1801030e 	bge	r3,zero,80205b5c <_malloc_r+0x5e0>
80205750:	84000317 	ldw	r16,12(r16)
80205754:	81c0f826 	beq	r16,r7,80205b38 <_malloc_r+0x5bc>
80205758:	80800117 	ldw	r2,4(r16)
8020575c:	1284703a 	and	r2,r2,r10
80205760:	1447c83a 	sub	r3,r2,r17
80205764:	48fff90e 	bge	r9,r3,8020574c <__reset+0xfa1e574c>
80205768:	80800317 	ldw	r2,12(r16)
8020576c:	81000217 	ldw	r4,8(r16)
80205770:	89400054 	ori	r5,r17,1
80205774:	81400115 	stw	r5,4(r16)
80205778:	20800315 	stw	r2,12(r4)
8020577c:	11000215 	stw	r4,8(r2)
80205780:	8463883a 	add	r17,r16,r17
80205784:	9c400515 	stw	r17,20(r19)
80205788:	9c400415 	stw	r17,16(r19)
8020578c:	18800054 	ori	r2,r3,1
80205790:	88800115 	stw	r2,4(r17)
80205794:	8a000315 	stw	r8,12(r17)
80205798:	8a000215 	stw	r8,8(r17)
8020579c:	88e3883a 	add	r17,r17,r3
802057a0:	88c00015 	stw	r3,0(r17)
802057a4:	9009883a 	mov	r4,r18
802057a8:	020d1740 	call	8020d174 <__malloc_unlock>
802057ac:	80800204 	addi	r2,r16,8
802057b0:	00001b06 	br	80205820 <_malloc_r+0x2a4>
802057b4:	04400404 	movi	r17,16
802057b8:	89402536 	bltu	r17,r5,80205850 <_malloc_r+0x2d4>
802057bc:	020d1500 	call	8020d150 <__malloc_lock>
802057c0:	00800184 	movi	r2,6
802057c4:	01000084 	movi	r4,2
802057c8:	04e00874 	movhi	r19,32801
802057cc:	1085883a 	add	r2,r2,r2
802057d0:	9ccabf04 	addi	r19,r19,11004
802057d4:	1085883a 	add	r2,r2,r2
802057d8:	9885883a 	add	r2,r19,r2
802057dc:	14000117 	ldw	r16,4(r2)
802057e0:	10fffe04 	addi	r3,r2,-8
802057e4:	80c0d926 	beq	r16,r3,80205b4c <_malloc_r+0x5d0>
802057e8:	80c00117 	ldw	r3,4(r16)
802057ec:	81000317 	ldw	r4,12(r16)
802057f0:	00bfff04 	movi	r2,-4
802057f4:	1884703a 	and	r2,r3,r2
802057f8:	81400217 	ldw	r5,8(r16)
802057fc:	8085883a 	add	r2,r16,r2
80205800:	10c00117 	ldw	r3,4(r2)
80205804:	29000315 	stw	r4,12(r5)
80205808:	21400215 	stw	r5,8(r4)
8020580c:	18c00054 	ori	r3,r3,1
80205810:	10c00115 	stw	r3,4(r2)
80205814:	9009883a 	mov	r4,r18
80205818:	020d1740 	call	8020d174 <__malloc_unlock>
8020581c:	80800204 	addi	r2,r16,8
80205820:	dfc00a17 	ldw	ra,40(sp)
80205824:	df000917 	ldw	fp,36(sp)
80205828:	ddc00817 	ldw	r23,32(sp)
8020582c:	dd800717 	ldw	r22,28(sp)
80205830:	dd400617 	ldw	r21,24(sp)
80205834:	dd000517 	ldw	r20,20(sp)
80205838:	dcc00417 	ldw	r19,16(sp)
8020583c:	dc800317 	ldw	r18,12(sp)
80205840:	dc400217 	ldw	r17,8(sp)
80205844:	dc000117 	ldw	r16,4(sp)
80205848:	dec00b04 	addi	sp,sp,44
8020584c:	f800283a 	ret
80205850:	00800304 	movi	r2,12
80205854:	90800015 	stw	r2,0(r18)
80205858:	0005883a 	mov	r2,zero
8020585c:	003ff006 	br	80205820 <__reset+0xfa1e5820>
80205860:	01002004 	movi	r4,128
80205864:	02001004 	movi	r8,64
80205868:	01c00fc4 	movi	r7,63
8020586c:	003f6106 	br	802055f4 <__reset+0xfa1e55f4>
80205870:	4009883a 	mov	r4,r8
80205874:	003f7506 	br	8020564c <__reset+0xfa1e564c>
80205878:	81000317 	ldw	r4,12(r16)
8020587c:	003fde06 	br	802057f8 <__reset+0xfa1e57f8>
80205880:	81c5883a 	add	r2,r16,r7
80205884:	11400117 	ldw	r5,4(r2)
80205888:	9009883a 	mov	r4,r18
8020588c:	29400054 	ori	r5,r5,1
80205890:	11400115 	stw	r5,4(r2)
80205894:	020d1740 	call	8020d174 <__malloc_unlock>
80205898:	80800204 	addi	r2,r16,8
8020589c:	003fe006 	br	80205820 <__reset+0xfa1e5820>
802058a0:	9c000217 	ldw	r16,8(r19)
802058a4:	00bfff04 	movi	r2,-4
802058a8:	85800117 	ldw	r22,4(r16)
802058ac:	b0ac703a 	and	r22,r22,r2
802058b0:	b4400336 	bltu	r22,r17,802058c0 <_malloc_r+0x344>
802058b4:	b445c83a 	sub	r2,r22,r17
802058b8:	00c003c4 	movi	r3,15
802058bc:	18805d16 	blt	r3,r2,80205a34 <_malloc_r+0x4b8>
802058c0:	05e00874 	movhi	r23,32801
802058c4:	00a00874 	movhi	r2,32801
802058c8:	1090ca04 	addi	r2,r2,17192
802058cc:	bdd0b604 	addi	r23,r23,17112
802058d0:	15400017 	ldw	r21,0(r2)
802058d4:	b8c00017 	ldw	r3,0(r23)
802058d8:	00bfffc4 	movi	r2,-1
802058dc:	858d883a 	add	r6,r16,r22
802058e0:	8d6b883a 	add	r21,r17,r21
802058e4:	1880ea26 	beq	r3,r2,80205c90 <_malloc_r+0x714>
802058e8:	ad4403c4 	addi	r21,r21,4111
802058ec:	00bc0004 	movi	r2,-4096
802058f0:	a8aa703a 	and	r21,r21,r2
802058f4:	a80b883a 	mov	r5,r21
802058f8:	9009883a 	mov	r4,r18
802058fc:	d9800015 	stw	r6,0(sp)
80205900:	020780c0 	call	8020780c <_sbrk_r>
80205904:	1029883a 	mov	r20,r2
80205908:	00bfffc4 	movi	r2,-1
8020590c:	d9800017 	ldw	r6,0(sp)
80205910:	a080e826 	beq	r20,r2,80205cb4 <_malloc_r+0x738>
80205914:	a180a636 	bltu	r20,r6,80205bb0 <_malloc_r+0x634>
80205918:	07200874 	movhi	fp,32801
8020591c:	e710d304 	addi	fp,fp,17228
80205920:	e0800017 	ldw	r2,0(fp)
80205924:	a887883a 	add	r3,r21,r2
80205928:	e0c00015 	stw	r3,0(fp)
8020592c:	3500e626 	beq	r6,r20,80205cc8 <_malloc_r+0x74c>
80205930:	b9000017 	ldw	r4,0(r23)
80205934:	00bfffc4 	movi	r2,-1
80205938:	2080ee26 	beq	r4,r2,80205cf4 <_malloc_r+0x778>
8020593c:	a185c83a 	sub	r2,r20,r6
80205940:	10c5883a 	add	r2,r2,r3
80205944:	e0800015 	stw	r2,0(fp)
80205948:	a0c001cc 	andi	r3,r20,7
8020594c:	1800bc26 	beq	r3,zero,80205c40 <_malloc_r+0x6c4>
80205950:	a0e9c83a 	sub	r20,r20,r3
80205954:	00840204 	movi	r2,4104
80205958:	a5000204 	addi	r20,r20,8
8020595c:	10c7c83a 	sub	r3,r2,r3
80205960:	a545883a 	add	r2,r20,r21
80205964:	1083ffcc 	andi	r2,r2,4095
80205968:	18abc83a 	sub	r21,r3,r2
8020596c:	a80b883a 	mov	r5,r21
80205970:	9009883a 	mov	r4,r18
80205974:	020780c0 	call	8020780c <_sbrk_r>
80205978:	00ffffc4 	movi	r3,-1
8020597c:	10c0e126 	beq	r2,r3,80205d04 <_malloc_r+0x788>
80205980:	1505c83a 	sub	r2,r2,r20
80205984:	1545883a 	add	r2,r2,r21
80205988:	10800054 	ori	r2,r2,1
8020598c:	e0c00017 	ldw	r3,0(fp)
80205990:	9d000215 	stw	r20,8(r19)
80205994:	a0800115 	stw	r2,4(r20)
80205998:	a8c7883a 	add	r3,r21,r3
8020599c:	e0c00015 	stw	r3,0(fp)
802059a0:	84c00e26 	beq	r16,r19,802059dc <_malloc_r+0x460>
802059a4:	018003c4 	movi	r6,15
802059a8:	3580a72e 	bgeu	r6,r22,80205c48 <_malloc_r+0x6cc>
802059ac:	81400117 	ldw	r5,4(r16)
802059b0:	013ffe04 	movi	r4,-8
802059b4:	b0bffd04 	addi	r2,r22,-12
802059b8:	1104703a 	and	r2,r2,r4
802059bc:	2900004c 	andi	r4,r5,1
802059c0:	2088b03a 	or	r4,r4,r2
802059c4:	81000115 	stw	r4,4(r16)
802059c8:	01400144 	movi	r5,5
802059cc:	8089883a 	add	r4,r16,r2
802059d0:	21400115 	stw	r5,4(r4)
802059d4:	21400215 	stw	r5,8(r4)
802059d8:	3080cd36 	bltu	r6,r2,80205d10 <_malloc_r+0x794>
802059dc:	00a00874 	movhi	r2,32801
802059e0:	1090c904 	addi	r2,r2,17188
802059e4:	11000017 	ldw	r4,0(r2)
802059e8:	20c0012e 	bgeu	r4,r3,802059f0 <_malloc_r+0x474>
802059ec:	10c00015 	stw	r3,0(r2)
802059f0:	00a00874 	movhi	r2,32801
802059f4:	1090c804 	addi	r2,r2,17184
802059f8:	11000017 	ldw	r4,0(r2)
802059fc:	9c000217 	ldw	r16,8(r19)
80205a00:	20c0012e 	bgeu	r4,r3,80205a08 <_malloc_r+0x48c>
80205a04:	10c00015 	stw	r3,0(r2)
80205a08:	80c00117 	ldw	r3,4(r16)
80205a0c:	00bfff04 	movi	r2,-4
80205a10:	1886703a 	and	r3,r3,r2
80205a14:	1c45c83a 	sub	r2,r3,r17
80205a18:	1c400236 	bltu	r3,r17,80205a24 <_malloc_r+0x4a8>
80205a1c:	00c003c4 	movi	r3,15
80205a20:	18800416 	blt	r3,r2,80205a34 <_malloc_r+0x4b8>
80205a24:	9009883a 	mov	r4,r18
80205a28:	020d1740 	call	8020d174 <__malloc_unlock>
80205a2c:	0005883a 	mov	r2,zero
80205a30:	003f7b06 	br	80205820 <__reset+0xfa1e5820>
80205a34:	88c00054 	ori	r3,r17,1
80205a38:	80c00115 	stw	r3,4(r16)
80205a3c:	8463883a 	add	r17,r16,r17
80205a40:	10800054 	ori	r2,r2,1
80205a44:	9c400215 	stw	r17,8(r19)
80205a48:	88800115 	stw	r2,4(r17)
80205a4c:	9009883a 	mov	r4,r18
80205a50:	020d1740 	call	8020d174 <__malloc_unlock>
80205a54:	80800204 	addi	r2,r16,8
80205a58:	003f7106 	br	80205820 <__reset+0xfa1e5820>
80205a5c:	00c00504 	movi	r3,20
80205a60:	18804a2e 	bgeu	r3,r2,80205b8c <_malloc_r+0x610>
80205a64:	00c01504 	movi	r3,84
80205a68:	18806e36 	bltu	r3,r2,80205c24 <_malloc_r+0x6a8>
80205a6c:	8804d33a 	srli	r2,r17,12
80205a70:	12001bc4 	addi	r8,r2,111
80205a74:	11c01b84 	addi	r7,r2,110
80205a78:	4209883a 	add	r4,r8,r8
80205a7c:	003edd06 	br	802055f4 <__reset+0xfa1e55f4>
80205a80:	3804d27a 	srli	r2,r7,9
80205a84:	00c00104 	movi	r3,4
80205a88:	1880442e 	bgeu	r3,r2,80205b9c <_malloc_r+0x620>
80205a8c:	00c00504 	movi	r3,20
80205a90:	18808136 	bltu	r3,r2,80205c98 <_malloc_r+0x71c>
80205a94:	11401704 	addi	r5,r2,92
80205a98:	10c016c4 	addi	r3,r2,91
80205a9c:	294b883a 	add	r5,r5,r5
80205aa0:	294b883a 	add	r5,r5,r5
80205aa4:	294b883a 	add	r5,r5,r5
80205aa8:	994b883a 	add	r5,r19,r5
80205aac:	28800017 	ldw	r2,0(r5)
80205ab0:	01a00874 	movhi	r6,32801
80205ab4:	297ffe04 	addi	r5,r5,-8
80205ab8:	318abf04 	addi	r6,r6,11004
80205abc:	28806526 	beq	r5,r2,80205c54 <_malloc_r+0x6d8>
80205ac0:	01bfff04 	movi	r6,-4
80205ac4:	10c00117 	ldw	r3,4(r2)
80205ac8:	1986703a 	and	r3,r3,r6
80205acc:	38c0022e 	bgeu	r7,r3,80205ad8 <_malloc_r+0x55c>
80205ad0:	10800217 	ldw	r2,8(r2)
80205ad4:	28bffb1e 	bne	r5,r2,80205ac4 <__reset+0xfa1e5ac4>
80205ad8:	11400317 	ldw	r5,12(r2)
80205adc:	98c00117 	ldw	r3,4(r19)
80205ae0:	81400315 	stw	r5,12(r16)
80205ae4:	80800215 	stw	r2,8(r16)
80205ae8:	2c000215 	stw	r16,8(r5)
80205aec:	14000315 	stw	r16,12(r2)
80205af0:	003ef806 	br	802056d4 <__reset+0xfa1e56d4>
80205af4:	88c00054 	ori	r3,r17,1
80205af8:	80c00115 	stw	r3,4(r16)
80205afc:	8463883a 	add	r17,r16,r17
80205b00:	34400515 	stw	r17,20(r6)
80205b04:	34400415 	stw	r17,16(r6)
80205b08:	10c00054 	ori	r3,r2,1
80205b0c:	8a000315 	stw	r8,12(r17)
80205b10:	8a000215 	stw	r8,8(r17)
80205b14:	88c00115 	stw	r3,4(r17)
80205b18:	88a3883a 	add	r17,r17,r2
80205b1c:	88800015 	stw	r2,0(r17)
80205b20:	9009883a 	mov	r4,r18
80205b24:	020d1740 	call	8020d174 <__malloc_unlock>
80205b28:	80800204 	addi	r2,r16,8
80205b2c:	003f3c06 	br	80205820 <__reset+0xfa1e5820>
80205b30:	30c00117 	ldw	r3,4(r6)
80205b34:	003ee706 	br	802056d4 <__reset+0xfa1e56d4>
80205b38:	5ac00044 	addi	r11,r11,1
80205b3c:	588000cc 	andi	r2,r11,3
80205b40:	31800204 	addi	r6,r6,8
80205b44:	103efd1e 	bne	r2,zero,8020573c <__reset+0xfa1e573c>
80205b48:	00002406 	br	80205bdc <_malloc_r+0x660>
80205b4c:	14000317 	ldw	r16,12(r2)
80205b50:	143f251e 	bne	r2,r16,802057e8 <__reset+0xfa1e57e8>
80205b54:	21000084 	addi	r4,r4,2
80205b58:	003ebc06 	br	8020564c <__reset+0xfa1e564c>
80205b5c:	8085883a 	add	r2,r16,r2
80205b60:	10c00117 	ldw	r3,4(r2)
80205b64:	81000317 	ldw	r4,12(r16)
80205b68:	81400217 	ldw	r5,8(r16)
80205b6c:	18c00054 	ori	r3,r3,1
80205b70:	10c00115 	stw	r3,4(r2)
80205b74:	29000315 	stw	r4,12(r5)
80205b78:	21400215 	stw	r5,8(r4)
80205b7c:	9009883a 	mov	r4,r18
80205b80:	020d1740 	call	8020d174 <__malloc_unlock>
80205b84:	80800204 	addi	r2,r16,8
80205b88:	003f2506 	br	80205820 <__reset+0xfa1e5820>
80205b8c:	12001704 	addi	r8,r2,92
80205b90:	11c016c4 	addi	r7,r2,91
80205b94:	4209883a 	add	r4,r8,r8
80205b98:	003e9606 	br	802055f4 <__reset+0xfa1e55f4>
80205b9c:	3804d1ba 	srli	r2,r7,6
80205ba0:	11400e44 	addi	r5,r2,57
80205ba4:	10c00e04 	addi	r3,r2,56
80205ba8:	294b883a 	add	r5,r5,r5
80205bac:	003fbc06 	br	80205aa0 <__reset+0xfa1e5aa0>
80205bb0:	84ff5926 	beq	r16,r19,80205918 <__reset+0xfa1e5918>
80205bb4:	00a00874 	movhi	r2,32801
80205bb8:	108abf04 	addi	r2,r2,11004
80205bbc:	14000217 	ldw	r16,8(r2)
80205bc0:	00bfff04 	movi	r2,-4
80205bc4:	80c00117 	ldw	r3,4(r16)
80205bc8:	1886703a 	and	r3,r3,r2
80205bcc:	003f9106 	br	80205a14 <__reset+0xfa1e5a14>
80205bd0:	60800217 	ldw	r2,8(r12)
80205bd4:	213fffc4 	addi	r4,r4,-1
80205bd8:	1300651e 	bne	r2,r12,80205d70 <_malloc_r+0x7f4>
80205bdc:	208000cc 	andi	r2,r4,3
80205be0:	633ffe04 	addi	r12,r12,-8
80205be4:	103ffa1e 	bne	r2,zero,80205bd0 <__reset+0xfa1e5bd0>
80205be8:	98800117 	ldw	r2,4(r19)
80205bec:	0146303a 	nor	r3,zero,r5
80205bf0:	1884703a 	and	r2,r3,r2
80205bf4:	98800115 	stw	r2,4(r19)
80205bf8:	294b883a 	add	r5,r5,r5
80205bfc:	117f2836 	bltu	r2,r5,802058a0 <__reset+0xfa1e58a0>
80205c00:	283f2726 	beq	r5,zero,802058a0 <__reset+0xfa1e58a0>
80205c04:	2886703a 	and	r3,r5,r2
80205c08:	5809883a 	mov	r4,r11
80205c0c:	183ec31e 	bne	r3,zero,8020571c <__reset+0xfa1e571c>
80205c10:	294b883a 	add	r5,r5,r5
80205c14:	2886703a 	and	r3,r5,r2
80205c18:	21000104 	addi	r4,r4,4
80205c1c:	183ffc26 	beq	r3,zero,80205c10 <__reset+0xfa1e5c10>
80205c20:	003ebe06 	br	8020571c <__reset+0xfa1e571c>
80205c24:	00c05504 	movi	r3,340
80205c28:	18801236 	bltu	r3,r2,80205c74 <_malloc_r+0x6f8>
80205c2c:	8804d3fa 	srli	r2,r17,15
80205c30:	12001e04 	addi	r8,r2,120
80205c34:	11c01dc4 	addi	r7,r2,119
80205c38:	4209883a 	add	r4,r8,r8
80205c3c:	003e6d06 	br	802055f4 <__reset+0xfa1e55f4>
80205c40:	00c40004 	movi	r3,4096
80205c44:	003f4606 	br	80205960 <__reset+0xfa1e5960>
80205c48:	00800044 	movi	r2,1
80205c4c:	a0800115 	stw	r2,4(r20)
80205c50:	003f7406 	br	80205a24 <__reset+0xfa1e5a24>
80205c54:	1805d0ba 	srai	r2,r3,2
80205c58:	01c00044 	movi	r7,1
80205c5c:	30c00117 	ldw	r3,4(r6)
80205c60:	388e983a 	sll	r7,r7,r2
80205c64:	2805883a 	mov	r2,r5
80205c68:	38c6b03a 	or	r3,r7,r3
80205c6c:	30c00115 	stw	r3,4(r6)
80205c70:	003f9b06 	br	80205ae0 <__reset+0xfa1e5ae0>
80205c74:	00c15504 	movi	r3,1364
80205c78:	18801a36 	bltu	r3,r2,80205ce4 <_malloc_r+0x768>
80205c7c:	8804d4ba 	srli	r2,r17,18
80205c80:	12001f44 	addi	r8,r2,125
80205c84:	11c01f04 	addi	r7,r2,124
80205c88:	4209883a 	add	r4,r8,r8
80205c8c:	003e5906 	br	802055f4 <__reset+0xfa1e55f4>
80205c90:	ad400404 	addi	r21,r21,16
80205c94:	003f1706 	br	802058f4 <__reset+0xfa1e58f4>
80205c98:	00c01504 	movi	r3,84
80205c9c:	18802336 	bltu	r3,r2,80205d2c <_malloc_r+0x7b0>
80205ca0:	3804d33a 	srli	r2,r7,12
80205ca4:	11401bc4 	addi	r5,r2,111
80205ca8:	10c01b84 	addi	r3,r2,110
80205cac:	294b883a 	add	r5,r5,r5
80205cb0:	003f7b06 	br	80205aa0 <__reset+0xfa1e5aa0>
80205cb4:	9c000217 	ldw	r16,8(r19)
80205cb8:	00bfff04 	movi	r2,-4
80205cbc:	80c00117 	ldw	r3,4(r16)
80205cc0:	1886703a 	and	r3,r3,r2
80205cc4:	003f5306 	br	80205a14 <__reset+0xfa1e5a14>
80205cc8:	3083ffcc 	andi	r2,r6,4095
80205ccc:	103f181e 	bne	r2,zero,80205930 <__reset+0xfa1e5930>
80205cd0:	99000217 	ldw	r4,8(r19)
80205cd4:	b545883a 	add	r2,r22,r21
80205cd8:	10800054 	ori	r2,r2,1
80205cdc:	20800115 	stw	r2,4(r4)
80205ce0:	003f3e06 	br	802059dc <__reset+0xfa1e59dc>
80205ce4:	01003f84 	movi	r4,254
80205ce8:	02001fc4 	movi	r8,127
80205cec:	01c01f84 	movi	r7,126
80205cf0:	003e4006 	br	802055f4 <__reset+0xfa1e55f4>
80205cf4:	00a00874 	movhi	r2,32801
80205cf8:	1090b604 	addi	r2,r2,17112
80205cfc:	15000015 	stw	r20,0(r2)
80205d00:	003f1106 	br	80205948 <__reset+0xfa1e5948>
80205d04:	00800044 	movi	r2,1
80205d08:	002b883a 	mov	r21,zero
80205d0c:	003f1f06 	br	8020598c <__reset+0xfa1e598c>
80205d10:	81400204 	addi	r5,r16,8
80205d14:	9009883a 	mov	r4,r18
80205d18:	02049900 	call	80204990 <_free_r>
80205d1c:	00a00874 	movhi	r2,32801
80205d20:	1090d304 	addi	r2,r2,17228
80205d24:	10c00017 	ldw	r3,0(r2)
80205d28:	003f2c06 	br	802059dc <__reset+0xfa1e59dc>
80205d2c:	00c05504 	movi	r3,340
80205d30:	18800536 	bltu	r3,r2,80205d48 <_malloc_r+0x7cc>
80205d34:	3804d3fa 	srli	r2,r7,15
80205d38:	11401e04 	addi	r5,r2,120
80205d3c:	10c01dc4 	addi	r3,r2,119
80205d40:	294b883a 	add	r5,r5,r5
80205d44:	003f5606 	br	80205aa0 <__reset+0xfa1e5aa0>
80205d48:	00c15504 	movi	r3,1364
80205d4c:	18800536 	bltu	r3,r2,80205d64 <_malloc_r+0x7e8>
80205d50:	3804d4ba 	srli	r2,r7,18
80205d54:	11401f44 	addi	r5,r2,125
80205d58:	10c01f04 	addi	r3,r2,124
80205d5c:	294b883a 	add	r5,r5,r5
80205d60:	003f4f06 	br	80205aa0 <__reset+0xfa1e5aa0>
80205d64:	01403f84 	movi	r5,254
80205d68:	00c01f84 	movi	r3,126
80205d6c:	003f4c06 	br	80205aa0 <__reset+0xfa1e5aa0>
80205d70:	98800117 	ldw	r2,4(r19)
80205d74:	003fa006 	br	80205bf8 <__reset+0xfa1e5bf8>
80205d78:	8808d0fa 	srli	r4,r17,3
80205d7c:	20800044 	addi	r2,r4,1
80205d80:	1085883a 	add	r2,r2,r2
80205d84:	003e9006 	br	802057c8 <__reset+0xfa1e57c8>

80205d88 <memchr>:
80205d88:	208000cc 	andi	r2,r4,3
80205d8c:	280f883a 	mov	r7,r5
80205d90:	10003426 	beq	r2,zero,80205e64 <memchr+0xdc>
80205d94:	30bfffc4 	addi	r2,r6,-1
80205d98:	30001a26 	beq	r6,zero,80205e04 <memchr+0x7c>
80205d9c:	20c00003 	ldbu	r3,0(r4)
80205da0:	29803fcc 	andi	r6,r5,255
80205da4:	30c0051e 	bne	r6,r3,80205dbc <memchr+0x34>
80205da8:	00001806 	br	80205e0c <memchr+0x84>
80205dac:	10001526 	beq	r2,zero,80205e04 <memchr+0x7c>
80205db0:	20c00003 	ldbu	r3,0(r4)
80205db4:	10bfffc4 	addi	r2,r2,-1
80205db8:	30c01426 	beq	r6,r3,80205e0c <memchr+0x84>
80205dbc:	21000044 	addi	r4,r4,1
80205dc0:	20c000cc 	andi	r3,r4,3
80205dc4:	183ff91e 	bne	r3,zero,80205dac <__reset+0xfa1e5dac>
80205dc8:	020000c4 	movi	r8,3
80205dcc:	40801136 	bltu	r8,r2,80205e14 <memchr+0x8c>
80205dd0:	10000c26 	beq	r2,zero,80205e04 <memchr+0x7c>
80205dd4:	20c00003 	ldbu	r3,0(r4)
80205dd8:	29403fcc 	andi	r5,r5,255
80205ddc:	28c00b26 	beq	r5,r3,80205e0c <memchr+0x84>
80205de0:	20c00044 	addi	r3,r4,1
80205de4:	39803fcc 	andi	r6,r7,255
80205de8:	2089883a 	add	r4,r4,r2
80205dec:	00000306 	br	80205dfc <memchr+0x74>
80205df0:	18c00044 	addi	r3,r3,1
80205df4:	197fffc3 	ldbu	r5,-1(r3)
80205df8:	31400526 	beq	r6,r5,80205e10 <memchr+0x88>
80205dfc:	1805883a 	mov	r2,r3
80205e00:	20fffb1e 	bne	r4,r3,80205df0 <__reset+0xfa1e5df0>
80205e04:	0005883a 	mov	r2,zero
80205e08:	f800283a 	ret
80205e0c:	2005883a 	mov	r2,r4
80205e10:	f800283a 	ret
80205e14:	28c03fcc 	andi	r3,r5,255
80205e18:	1812923a 	slli	r9,r3,8
80205e1c:	02ffbff4 	movhi	r11,65279
80205e20:	02a02074 	movhi	r10,32897
80205e24:	48d2b03a 	or	r9,r9,r3
80205e28:	4806943a 	slli	r3,r9,16
80205e2c:	5affbfc4 	addi	r11,r11,-257
80205e30:	52a02004 	addi	r10,r10,-32640
80205e34:	48d2b03a 	or	r9,r9,r3
80205e38:	20c00017 	ldw	r3,0(r4)
80205e3c:	48c6f03a 	xor	r3,r9,r3
80205e40:	1acd883a 	add	r6,r3,r11
80205e44:	00c6303a 	nor	r3,zero,r3
80205e48:	30c6703a 	and	r3,r6,r3
80205e4c:	1a86703a 	and	r3,r3,r10
80205e50:	183fe01e 	bne	r3,zero,80205dd4 <__reset+0xfa1e5dd4>
80205e54:	10bfff04 	addi	r2,r2,-4
80205e58:	21000104 	addi	r4,r4,4
80205e5c:	40bff636 	bltu	r8,r2,80205e38 <__reset+0xfa1e5e38>
80205e60:	003fdb06 	br	80205dd0 <__reset+0xfa1e5dd0>
80205e64:	3005883a 	mov	r2,r6
80205e68:	003fd706 	br	80205dc8 <__reset+0xfa1e5dc8>

80205e6c <memcpy>:
80205e6c:	defffd04 	addi	sp,sp,-12
80205e70:	dfc00215 	stw	ra,8(sp)
80205e74:	dc400115 	stw	r17,4(sp)
80205e78:	dc000015 	stw	r16,0(sp)
80205e7c:	00c003c4 	movi	r3,15
80205e80:	2005883a 	mov	r2,r4
80205e84:	1980452e 	bgeu	r3,r6,80205f9c <memcpy+0x130>
80205e88:	2906b03a 	or	r3,r5,r4
80205e8c:	18c000cc 	andi	r3,r3,3
80205e90:	1800441e 	bne	r3,zero,80205fa4 <memcpy+0x138>
80205e94:	347ffc04 	addi	r17,r6,-16
80205e98:	8822d13a 	srli	r17,r17,4
80205e9c:	28c00104 	addi	r3,r5,4
80205ea0:	23400104 	addi	r13,r4,4
80205ea4:	8820913a 	slli	r16,r17,4
80205ea8:	2b000204 	addi	r12,r5,8
80205eac:	22c00204 	addi	r11,r4,8
80205eb0:	84000504 	addi	r16,r16,20
80205eb4:	2a800304 	addi	r10,r5,12
80205eb8:	22400304 	addi	r9,r4,12
80205ebc:	2c21883a 	add	r16,r5,r16
80205ec0:	2811883a 	mov	r8,r5
80205ec4:	200f883a 	mov	r7,r4
80205ec8:	41000017 	ldw	r4,0(r8)
80205ecc:	1fc00017 	ldw	ra,0(r3)
80205ed0:	63c00017 	ldw	r15,0(r12)
80205ed4:	39000015 	stw	r4,0(r7)
80205ed8:	53800017 	ldw	r14,0(r10)
80205edc:	6fc00015 	stw	ra,0(r13)
80205ee0:	5bc00015 	stw	r15,0(r11)
80205ee4:	4b800015 	stw	r14,0(r9)
80205ee8:	18c00404 	addi	r3,r3,16
80205eec:	39c00404 	addi	r7,r7,16
80205ef0:	42000404 	addi	r8,r8,16
80205ef4:	6b400404 	addi	r13,r13,16
80205ef8:	63000404 	addi	r12,r12,16
80205efc:	5ac00404 	addi	r11,r11,16
80205f00:	52800404 	addi	r10,r10,16
80205f04:	4a400404 	addi	r9,r9,16
80205f08:	1c3fef1e 	bne	r3,r16,80205ec8 <__reset+0xfa1e5ec8>
80205f0c:	89c00044 	addi	r7,r17,1
80205f10:	380e913a 	slli	r7,r7,4
80205f14:	310003cc 	andi	r4,r6,15
80205f18:	02c000c4 	movi	r11,3
80205f1c:	11c7883a 	add	r3,r2,r7
80205f20:	29cb883a 	add	r5,r5,r7
80205f24:	5900212e 	bgeu	r11,r4,80205fac <memcpy+0x140>
80205f28:	1813883a 	mov	r9,r3
80205f2c:	2811883a 	mov	r8,r5
80205f30:	200f883a 	mov	r7,r4
80205f34:	42800017 	ldw	r10,0(r8)
80205f38:	4a400104 	addi	r9,r9,4
80205f3c:	39ffff04 	addi	r7,r7,-4
80205f40:	4abfff15 	stw	r10,-4(r9)
80205f44:	42000104 	addi	r8,r8,4
80205f48:	59fffa36 	bltu	r11,r7,80205f34 <__reset+0xfa1e5f34>
80205f4c:	213fff04 	addi	r4,r4,-4
80205f50:	2008d0ba 	srli	r4,r4,2
80205f54:	318000cc 	andi	r6,r6,3
80205f58:	21000044 	addi	r4,r4,1
80205f5c:	2109883a 	add	r4,r4,r4
80205f60:	2109883a 	add	r4,r4,r4
80205f64:	1907883a 	add	r3,r3,r4
80205f68:	290b883a 	add	r5,r5,r4
80205f6c:	30000626 	beq	r6,zero,80205f88 <memcpy+0x11c>
80205f70:	198d883a 	add	r6,r3,r6
80205f74:	29c00003 	ldbu	r7,0(r5)
80205f78:	18c00044 	addi	r3,r3,1
80205f7c:	29400044 	addi	r5,r5,1
80205f80:	19ffffc5 	stb	r7,-1(r3)
80205f84:	19bffb1e 	bne	r3,r6,80205f74 <__reset+0xfa1e5f74>
80205f88:	dfc00217 	ldw	ra,8(sp)
80205f8c:	dc400117 	ldw	r17,4(sp)
80205f90:	dc000017 	ldw	r16,0(sp)
80205f94:	dec00304 	addi	sp,sp,12
80205f98:	f800283a 	ret
80205f9c:	2007883a 	mov	r3,r4
80205fa0:	003ff206 	br	80205f6c <__reset+0xfa1e5f6c>
80205fa4:	2007883a 	mov	r3,r4
80205fa8:	003ff106 	br	80205f70 <__reset+0xfa1e5f70>
80205fac:	200d883a 	mov	r6,r4
80205fb0:	003fee06 	br	80205f6c <__reset+0xfa1e5f6c>

80205fb4 <memmove>:
80205fb4:	2005883a 	mov	r2,r4
80205fb8:	29000b2e 	bgeu	r5,r4,80205fe8 <memmove+0x34>
80205fbc:	298f883a 	add	r7,r5,r6
80205fc0:	21c0092e 	bgeu	r4,r7,80205fe8 <memmove+0x34>
80205fc4:	2187883a 	add	r3,r4,r6
80205fc8:	198bc83a 	sub	r5,r3,r6
80205fcc:	30004826 	beq	r6,zero,802060f0 <memmove+0x13c>
80205fd0:	39ffffc4 	addi	r7,r7,-1
80205fd4:	39000003 	ldbu	r4,0(r7)
80205fd8:	18ffffc4 	addi	r3,r3,-1
80205fdc:	19000005 	stb	r4,0(r3)
80205fe0:	28fffb1e 	bne	r5,r3,80205fd0 <__reset+0xfa1e5fd0>
80205fe4:	f800283a 	ret
80205fe8:	00c003c4 	movi	r3,15
80205fec:	1980412e 	bgeu	r3,r6,802060f4 <memmove+0x140>
80205ff0:	2886b03a 	or	r3,r5,r2
80205ff4:	18c000cc 	andi	r3,r3,3
80205ff8:	1800401e 	bne	r3,zero,802060fc <memmove+0x148>
80205ffc:	33fffc04 	addi	r15,r6,-16
80206000:	781ed13a 	srli	r15,r15,4
80206004:	28c00104 	addi	r3,r5,4
80206008:	13400104 	addi	r13,r2,4
8020600c:	781c913a 	slli	r14,r15,4
80206010:	2b000204 	addi	r12,r5,8
80206014:	12c00204 	addi	r11,r2,8
80206018:	73800504 	addi	r14,r14,20
8020601c:	2a800304 	addi	r10,r5,12
80206020:	12400304 	addi	r9,r2,12
80206024:	2b9d883a 	add	r14,r5,r14
80206028:	2811883a 	mov	r8,r5
8020602c:	100f883a 	mov	r7,r2
80206030:	41000017 	ldw	r4,0(r8)
80206034:	39c00404 	addi	r7,r7,16
80206038:	18c00404 	addi	r3,r3,16
8020603c:	393ffc15 	stw	r4,-16(r7)
80206040:	193ffc17 	ldw	r4,-16(r3)
80206044:	6b400404 	addi	r13,r13,16
80206048:	5ac00404 	addi	r11,r11,16
8020604c:	693ffc15 	stw	r4,-16(r13)
80206050:	61000017 	ldw	r4,0(r12)
80206054:	4a400404 	addi	r9,r9,16
80206058:	42000404 	addi	r8,r8,16
8020605c:	593ffc15 	stw	r4,-16(r11)
80206060:	51000017 	ldw	r4,0(r10)
80206064:	63000404 	addi	r12,r12,16
80206068:	52800404 	addi	r10,r10,16
8020606c:	493ffc15 	stw	r4,-16(r9)
80206070:	1bbfef1e 	bne	r3,r14,80206030 <__reset+0xfa1e6030>
80206074:	79000044 	addi	r4,r15,1
80206078:	2008913a 	slli	r4,r4,4
8020607c:	328003cc 	andi	r10,r6,15
80206080:	02c000c4 	movi	r11,3
80206084:	1107883a 	add	r3,r2,r4
80206088:	290b883a 	add	r5,r5,r4
8020608c:	5a801e2e 	bgeu	r11,r10,80206108 <memmove+0x154>
80206090:	1813883a 	mov	r9,r3
80206094:	2811883a 	mov	r8,r5
80206098:	500f883a 	mov	r7,r10
8020609c:	41000017 	ldw	r4,0(r8)
802060a0:	4a400104 	addi	r9,r9,4
802060a4:	39ffff04 	addi	r7,r7,-4
802060a8:	493fff15 	stw	r4,-4(r9)
802060ac:	42000104 	addi	r8,r8,4
802060b0:	59fffa36 	bltu	r11,r7,8020609c <__reset+0xfa1e609c>
802060b4:	513fff04 	addi	r4,r10,-4
802060b8:	2008d0ba 	srli	r4,r4,2
802060bc:	318000cc 	andi	r6,r6,3
802060c0:	21000044 	addi	r4,r4,1
802060c4:	2109883a 	add	r4,r4,r4
802060c8:	2109883a 	add	r4,r4,r4
802060cc:	1907883a 	add	r3,r3,r4
802060d0:	290b883a 	add	r5,r5,r4
802060d4:	30000b26 	beq	r6,zero,80206104 <memmove+0x150>
802060d8:	198d883a 	add	r6,r3,r6
802060dc:	29c00003 	ldbu	r7,0(r5)
802060e0:	18c00044 	addi	r3,r3,1
802060e4:	29400044 	addi	r5,r5,1
802060e8:	19ffffc5 	stb	r7,-1(r3)
802060ec:	19bffb1e 	bne	r3,r6,802060dc <__reset+0xfa1e60dc>
802060f0:	f800283a 	ret
802060f4:	1007883a 	mov	r3,r2
802060f8:	003ff606 	br	802060d4 <__reset+0xfa1e60d4>
802060fc:	1007883a 	mov	r3,r2
80206100:	003ff506 	br	802060d8 <__reset+0xfa1e60d8>
80206104:	f800283a 	ret
80206108:	500d883a 	mov	r6,r10
8020610c:	003ff106 	br	802060d4 <__reset+0xfa1e60d4>

80206110 <memset>:
80206110:	20c000cc 	andi	r3,r4,3
80206114:	2005883a 	mov	r2,r4
80206118:	18004426 	beq	r3,zero,8020622c <memset+0x11c>
8020611c:	31ffffc4 	addi	r7,r6,-1
80206120:	30004026 	beq	r6,zero,80206224 <memset+0x114>
80206124:	2813883a 	mov	r9,r5
80206128:	200d883a 	mov	r6,r4
8020612c:	2007883a 	mov	r3,r4
80206130:	00000406 	br	80206144 <memset+0x34>
80206134:	3a3fffc4 	addi	r8,r7,-1
80206138:	31800044 	addi	r6,r6,1
8020613c:	38003926 	beq	r7,zero,80206224 <memset+0x114>
80206140:	400f883a 	mov	r7,r8
80206144:	18c00044 	addi	r3,r3,1
80206148:	32400005 	stb	r9,0(r6)
8020614c:	1a0000cc 	andi	r8,r3,3
80206150:	403ff81e 	bne	r8,zero,80206134 <__reset+0xfa1e6134>
80206154:	010000c4 	movi	r4,3
80206158:	21c02d2e 	bgeu	r4,r7,80206210 <memset+0x100>
8020615c:	29003fcc 	andi	r4,r5,255
80206160:	200c923a 	slli	r6,r4,8
80206164:	3108b03a 	or	r4,r6,r4
80206168:	200c943a 	slli	r6,r4,16
8020616c:	218cb03a 	or	r6,r4,r6
80206170:	010003c4 	movi	r4,15
80206174:	21c0182e 	bgeu	r4,r7,802061d8 <memset+0xc8>
80206178:	3b3ffc04 	addi	r12,r7,-16
8020617c:	6018d13a 	srli	r12,r12,4
80206180:	1a000104 	addi	r8,r3,4
80206184:	1ac00204 	addi	r11,r3,8
80206188:	6008913a 	slli	r4,r12,4
8020618c:	1a800304 	addi	r10,r3,12
80206190:	1813883a 	mov	r9,r3
80206194:	21000504 	addi	r4,r4,20
80206198:	1909883a 	add	r4,r3,r4
8020619c:	49800015 	stw	r6,0(r9)
802061a0:	41800015 	stw	r6,0(r8)
802061a4:	59800015 	stw	r6,0(r11)
802061a8:	51800015 	stw	r6,0(r10)
802061ac:	42000404 	addi	r8,r8,16
802061b0:	4a400404 	addi	r9,r9,16
802061b4:	5ac00404 	addi	r11,r11,16
802061b8:	52800404 	addi	r10,r10,16
802061bc:	413ff71e 	bne	r8,r4,8020619c <__reset+0xfa1e619c>
802061c0:	63000044 	addi	r12,r12,1
802061c4:	6018913a 	slli	r12,r12,4
802061c8:	39c003cc 	andi	r7,r7,15
802061cc:	010000c4 	movi	r4,3
802061d0:	1b07883a 	add	r3,r3,r12
802061d4:	21c00e2e 	bgeu	r4,r7,80206210 <memset+0x100>
802061d8:	1813883a 	mov	r9,r3
802061dc:	3811883a 	mov	r8,r7
802061e0:	010000c4 	movi	r4,3
802061e4:	49800015 	stw	r6,0(r9)
802061e8:	423fff04 	addi	r8,r8,-4
802061ec:	4a400104 	addi	r9,r9,4
802061f0:	223ffc36 	bltu	r4,r8,802061e4 <__reset+0xfa1e61e4>
802061f4:	393fff04 	addi	r4,r7,-4
802061f8:	2008d0ba 	srli	r4,r4,2
802061fc:	39c000cc 	andi	r7,r7,3
80206200:	21000044 	addi	r4,r4,1
80206204:	2109883a 	add	r4,r4,r4
80206208:	2109883a 	add	r4,r4,r4
8020620c:	1907883a 	add	r3,r3,r4
80206210:	38000526 	beq	r7,zero,80206228 <memset+0x118>
80206214:	19cf883a 	add	r7,r3,r7
80206218:	19400005 	stb	r5,0(r3)
8020621c:	18c00044 	addi	r3,r3,1
80206220:	38fffd1e 	bne	r7,r3,80206218 <__reset+0xfa1e6218>
80206224:	f800283a 	ret
80206228:	f800283a 	ret
8020622c:	2007883a 	mov	r3,r4
80206230:	300f883a 	mov	r7,r6
80206234:	003fc706 	br	80206154 <__reset+0xfa1e6154>

80206238 <_Balloc>:
80206238:	20801317 	ldw	r2,76(r4)
8020623c:	defffc04 	addi	sp,sp,-16
80206240:	dc400115 	stw	r17,4(sp)
80206244:	dc000015 	stw	r16,0(sp)
80206248:	dfc00315 	stw	ra,12(sp)
8020624c:	dc800215 	stw	r18,8(sp)
80206250:	2023883a 	mov	r17,r4
80206254:	2821883a 	mov	r16,r5
80206258:	10000f26 	beq	r2,zero,80206298 <_Balloc+0x60>
8020625c:	8407883a 	add	r3,r16,r16
80206260:	18c7883a 	add	r3,r3,r3
80206264:	10c7883a 	add	r3,r2,r3
80206268:	18800017 	ldw	r2,0(r3)
8020626c:	10001126 	beq	r2,zero,802062b4 <_Balloc+0x7c>
80206270:	11000017 	ldw	r4,0(r2)
80206274:	19000015 	stw	r4,0(r3)
80206278:	10000415 	stw	zero,16(r2)
8020627c:	10000315 	stw	zero,12(r2)
80206280:	dfc00317 	ldw	ra,12(sp)
80206284:	dc800217 	ldw	r18,8(sp)
80206288:	dc400117 	ldw	r17,4(sp)
8020628c:	dc000017 	ldw	r16,0(sp)
80206290:	dec00404 	addi	sp,sp,16
80206294:	f800283a 	ret
80206298:	01800844 	movi	r6,33
8020629c:	01400104 	movi	r5,4
802062a0:	02091740 	call	80209174 <_calloc_r>
802062a4:	88801315 	stw	r2,76(r17)
802062a8:	103fec1e 	bne	r2,zero,8020625c <__reset+0xfa1e625c>
802062ac:	0005883a 	mov	r2,zero
802062b0:	003ff306 	br	80206280 <__reset+0xfa1e6280>
802062b4:	01400044 	movi	r5,1
802062b8:	2c24983a 	sll	r18,r5,r16
802062bc:	8809883a 	mov	r4,r17
802062c0:	91800144 	addi	r6,r18,5
802062c4:	318d883a 	add	r6,r6,r6
802062c8:	318d883a 	add	r6,r6,r6
802062cc:	02091740 	call	80209174 <_calloc_r>
802062d0:	103ff626 	beq	r2,zero,802062ac <__reset+0xfa1e62ac>
802062d4:	14000115 	stw	r16,4(r2)
802062d8:	14800215 	stw	r18,8(r2)
802062dc:	003fe606 	br	80206278 <__reset+0xfa1e6278>

802062e0 <_Bfree>:
802062e0:	28000826 	beq	r5,zero,80206304 <_Bfree+0x24>
802062e4:	28c00117 	ldw	r3,4(r5)
802062e8:	20801317 	ldw	r2,76(r4)
802062ec:	18c7883a 	add	r3,r3,r3
802062f0:	18c7883a 	add	r3,r3,r3
802062f4:	10c5883a 	add	r2,r2,r3
802062f8:	10c00017 	ldw	r3,0(r2)
802062fc:	28c00015 	stw	r3,0(r5)
80206300:	11400015 	stw	r5,0(r2)
80206304:	f800283a 	ret

80206308 <__multadd>:
80206308:	defffa04 	addi	sp,sp,-24
8020630c:	dc800315 	stw	r18,12(sp)
80206310:	dc400215 	stw	r17,8(sp)
80206314:	dc000115 	stw	r16,4(sp)
80206318:	2823883a 	mov	r17,r5
8020631c:	2c000417 	ldw	r16,16(r5)
80206320:	dfc00515 	stw	ra,20(sp)
80206324:	dcc00415 	stw	r19,16(sp)
80206328:	2025883a 	mov	r18,r4
8020632c:	29400504 	addi	r5,r5,20
80206330:	0011883a 	mov	r8,zero
80206334:	28c00017 	ldw	r3,0(r5)
80206338:	29400104 	addi	r5,r5,4
8020633c:	42000044 	addi	r8,r8,1
80206340:	18bfffcc 	andi	r2,r3,65535
80206344:	1185383a 	mul	r2,r2,r6
80206348:	1806d43a 	srli	r3,r3,16
8020634c:	11cf883a 	add	r7,r2,r7
80206350:	3808d43a 	srli	r4,r7,16
80206354:	1987383a 	mul	r3,r3,r6
80206358:	38bfffcc 	andi	r2,r7,65535
8020635c:	1907883a 	add	r3,r3,r4
80206360:	1808943a 	slli	r4,r3,16
80206364:	180ed43a 	srli	r7,r3,16
80206368:	2085883a 	add	r2,r4,r2
8020636c:	28bfff15 	stw	r2,-4(r5)
80206370:	443ff016 	blt	r8,r16,80206334 <__reset+0xfa1e6334>
80206374:	38000926 	beq	r7,zero,8020639c <__multadd+0x94>
80206378:	88800217 	ldw	r2,8(r17)
8020637c:	80800f0e 	bge	r16,r2,802063bc <__multadd+0xb4>
80206380:	80800144 	addi	r2,r16,5
80206384:	1085883a 	add	r2,r2,r2
80206388:	1085883a 	add	r2,r2,r2
8020638c:	8885883a 	add	r2,r17,r2
80206390:	11c00015 	stw	r7,0(r2)
80206394:	84000044 	addi	r16,r16,1
80206398:	8c000415 	stw	r16,16(r17)
8020639c:	8805883a 	mov	r2,r17
802063a0:	dfc00517 	ldw	ra,20(sp)
802063a4:	dcc00417 	ldw	r19,16(sp)
802063a8:	dc800317 	ldw	r18,12(sp)
802063ac:	dc400217 	ldw	r17,8(sp)
802063b0:	dc000117 	ldw	r16,4(sp)
802063b4:	dec00604 	addi	sp,sp,24
802063b8:	f800283a 	ret
802063bc:	89400117 	ldw	r5,4(r17)
802063c0:	9009883a 	mov	r4,r18
802063c4:	d9c00015 	stw	r7,0(sp)
802063c8:	29400044 	addi	r5,r5,1
802063cc:	02062380 	call	80206238 <_Balloc>
802063d0:	89800417 	ldw	r6,16(r17)
802063d4:	89400304 	addi	r5,r17,12
802063d8:	11000304 	addi	r4,r2,12
802063dc:	31800084 	addi	r6,r6,2
802063e0:	318d883a 	add	r6,r6,r6
802063e4:	318d883a 	add	r6,r6,r6
802063e8:	1027883a 	mov	r19,r2
802063ec:	0205e6c0 	call	80205e6c <memcpy>
802063f0:	d9c00017 	ldw	r7,0(sp)
802063f4:	88000a26 	beq	r17,zero,80206420 <__multadd+0x118>
802063f8:	88c00117 	ldw	r3,4(r17)
802063fc:	90801317 	ldw	r2,76(r18)
80206400:	18c7883a 	add	r3,r3,r3
80206404:	18c7883a 	add	r3,r3,r3
80206408:	10c5883a 	add	r2,r2,r3
8020640c:	10c00017 	ldw	r3,0(r2)
80206410:	88c00015 	stw	r3,0(r17)
80206414:	14400015 	stw	r17,0(r2)
80206418:	9823883a 	mov	r17,r19
8020641c:	003fd806 	br	80206380 <__reset+0xfa1e6380>
80206420:	9823883a 	mov	r17,r19
80206424:	003fd606 	br	80206380 <__reset+0xfa1e6380>

80206428 <__s2b>:
80206428:	defff904 	addi	sp,sp,-28
8020642c:	dc400115 	stw	r17,4(sp)
80206430:	dc000015 	stw	r16,0(sp)
80206434:	2023883a 	mov	r17,r4
80206438:	2821883a 	mov	r16,r5
8020643c:	39000204 	addi	r4,r7,8
80206440:	01400244 	movi	r5,9
80206444:	dcc00315 	stw	r19,12(sp)
80206448:	dc800215 	stw	r18,8(sp)
8020644c:	dfc00615 	stw	ra,24(sp)
80206450:	dd400515 	stw	r21,20(sp)
80206454:	dd000415 	stw	r20,16(sp)
80206458:	3825883a 	mov	r18,r7
8020645c:	3027883a 	mov	r19,r6
80206460:	020a4a40 	call	8020a4a4 <__divsi3>
80206464:	00c00044 	movi	r3,1
80206468:	000b883a 	mov	r5,zero
8020646c:	1880030e 	bge	r3,r2,8020647c <__s2b+0x54>
80206470:	18c7883a 	add	r3,r3,r3
80206474:	29400044 	addi	r5,r5,1
80206478:	18bffd16 	blt	r3,r2,80206470 <__reset+0xfa1e6470>
8020647c:	8809883a 	mov	r4,r17
80206480:	02062380 	call	80206238 <_Balloc>
80206484:	d8c00717 	ldw	r3,28(sp)
80206488:	10c00515 	stw	r3,20(r2)
8020648c:	00c00044 	movi	r3,1
80206490:	10c00415 	stw	r3,16(r2)
80206494:	00c00244 	movi	r3,9
80206498:	1cc0210e 	bge	r3,r19,80206520 <__s2b+0xf8>
8020649c:	80eb883a 	add	r21,r16,r3
802064a0:	a829883a 	mov	r20,r21
802064a4:	84e1883a 	add	r16,r16,r19
802064a8:	a1c00007 	ldb	r7,0(r20)
802064ac:	01800284 	movi	r6,10
802064b0:	a5000044 	addi	r20,r20,1
802064b4:	100b883a 	mov	r5,r2
802064b8:	39fff404 	addi	r7,r7,-48
802064bc:	8809883a 	mov	r4,r17
802064c0:	02063080 	call	80206308 <__multadd>
802064c4:	a43ff81e 	bne	r20,r16,802064a8 <__reset+0xfa1e64a8>
802064c8:	ace1883a 	add	r16,r21,r19
802064cc:	843ffe04 	addi	r16,r16,-8
802064d0:	9c800a0e 	bge	r19,r18,802064fc <__s2b+0xd4>
802064d4:	94e5c83a 	sub	r18,r18,r19
802064d8:	84a5883a 	add	r18,r16,r18
802064dc:	81c00007 	ldb	r7,0(r16)
802064e0:	01800284 	movi	r6,10
802064e4:	84000044 	addi	r16,r16,1
802064e8:	100b883a 	mov	r5,r2
802064ec:	39fff404 	addi	r7,r7,-48
802064f0:	8809883a 	mov	r4,r17
802064f4:	02063080 	call	80206308 <__multadd>
802064f8:	84bff81e 	bne	r16,r18,802064dc <__reset+0xfa1e64dc>
802064fc:	dfc00617 	ldw	ra,24(sp)
80206500:	dd400517 	ldw	r21,20(sp)
80206504:	dd000417 	ldw	r20,16(sp)
80206508:	dcc00317 	ldw	r19,12(sp)
8020650c:	dc800217 	ldw	r18,8(sp)
80206510:	dc400117 	ldw	r17,4(sp)
80206514:	dc000017 	ldw	r16,0(sp)
80206518:	dec00704 	addi	sp,sp,28
8020651c:	f800283a 	ret
80206520:	84000284 	addi	r16,r16,10
80206524:	1827883a 	mov	r19,r3
80206528:	003fe906 	br	802064d0 <__reset+0xfa1e64d0>

8020652c <__hi0bits>:
8020652c:	20bfffec 	andhi	r2,r4,65535
80206530:	1000141e 	bne	r2,zero,80206584 <__hi0bits+0x58>
80206534:	2008943a 	slli	r4,r4,16
80206538:	00800404 	movi	r2,16
8020653c:	20ffc02c 	andhi	r3,r4,65280
80206540:	1800021e 	bne	r3,zero,8020654c <__hi0bits+0x20>
80206544:	2008923a 	slli	r4,r4,8
80206548:	10800204 	addi	r2,r2,8
8020654c:	20fc002c 	andhi	r3,r4,61440
80206550:	1800021e 	bne	r3,zero,8020655c <__hi0bits+0x30>
80206554:	2008913a 	slli	r4,r4,4
80206558:	10800104 	addi	r2,r2,4
8020655c:	20f0002c 	andhi	r3,r4,49152
80206560:	1800031e 	bne	r3,zero,80206570 <__hi0bits+0x44>
80206564:	2109883a 	add	r4,r4,r4
80206568:	10800084 	addi	r2,r2,2
8020656c:	2109883a 	add	r4,r4,r4
80206570:	20000316 	blt	r4,zero,80206580 <__hi0bits+0x54>
80206574:	2110002c 	andhi	r4,r4,16384
80206578:	2000041e 	bne	r4,zero,8020658c <__hi0bits+0x60>
8020657c:	00800804 	movi	r2,32
80206580:	f800283a 	ret
80206584:	0005883a 	mov	r2,zero
80206588:	003fec06 	br	8020653c <__reset+0xfa1e653c>
8020658c:	10800044 	addi	r2,r2,1
80206590:	f800283a 	ret

80206594 <__lo0bits>:
80206594:	20c00017 	ldw	r3,0(r4)
80206598:	188001cc 	andi	r2,r3,7
8020659c:	10000826 	beq	r2,zero,802065c0 <__lo0bits+0x2c>
802065a0:	1880004c 	andi	r2,r3,1
802065a4:	1000211e 	bne	r2,zero,8020662c <__lo0bits+0x98>
802065a8:	1880008c 	andi	r2,r3,2
802065ac:	1000211e 	bne	r2,zero,80206634 <__lo0bits+0xa0>
802065b0:	1806d0ba 	srli	r3,r3,2
802065b4:	00800084 	movi	r2,2
802065b8:	20c00015 	stw	r3,0(r4)
802065bc:	f800283a 	ret
802065c0:	18bfffcc 	andi	r2,r3,65535
802065c4:	10001326 	beq	r2,zero,80206614 <__lo0bits+0x80>
802065c8:	0005883a 	mov	r2,zero
802065cc:	19403fcc 	andi	r5,r3,255
802065d0:	2800021e 	bne	r5,zero,802065dc <__lo0bits+0x48>
802065d4:	1806d23a 	srli	r3,r3,8
802065d8:	10800204 	addi	r2,r2,8
802065dc:	194003cc 	andi	r5,r3,15
802065e0:	2800021e 	bne	r5,zero,802065ec <__lo0bits+0x58>
802065e4:	1806d13a 	srli	r3,r3,4
802065e8:	10800104 	addi	r2,r2,4
802065ec:	194000cc 	andi	r5,r3,3
802065f0:	2800021e 	bne	r5,zero,802065fc <__lo0bits+0x68>
802065f4:	1806d0ba 	srli	r3,r3,2
802065f8:	10800084 	addi	r2,r2,2
802065fc:	1940004c 	andi	r5,r3,1
80206600:	2800081e 	bne	r5,zero,80206624 <__lo0bits+0x90>
80206604:	1806d07a 	srli	r3,r3,1
80206608:	1800051e 	bne	r3,zero,80206620 <__lo0bits+0x8c>
8020660c:	00800804 	movi	r2,32
80206610:	f800283a 	ret
80206614:	1806d43a 	srli	r3,r3,16
80206618:	00800404 	movi	r2,16
8020661c:	003feb06 	br	802065cc <__reset+0xfa1e65cc>
80206620:	10800044 	addi	r2,r2,1
80206624:	20c00015 	stw	r3,0(r4)
80206628:	f800283a 	ret
8020662c:	0005883a 	mov	r2,zero
80206630:	f800283a 	ret
80206634:	1806d07a 	srli	r3,r3,1
80206638:	00800044 	movi	r2,1
8020663c:	20c00015 	stw	r3,0(r4)
80206640:	f800283a 	ret

80206644 <__i2b>:
80206644:	defffd04 	addi	sp,sp,-12
80206648:	dc000015 	stw	r16,0(sp)
8020664c:	04000044 	movi	r16,1
80206650:	dc400115 	stw	r17,4(sp)
80206654:	2823883a 	mov	r17,r5
80206658:	800b883a 	mov	r5,r16
8020665c:	dfc00215 	stw	ra,8(sp)
80206660:	02062380 	call	80206238 <_Balloc>
80206664:	14400515 	stw	r17,20(r2)
80206668:	14000415 	stw	r16,16(r2)
8020666c:	dfc00217 	ldw	ra,8(sp)
80206670:	dc400117 	ldw	r17,4(sp)
80206674:	dc000017 	ldw	r16,0(sp)
80206678:	dec00304 	addi	sp,sp,12
8020667c:	f800283a 	ret

80206680 <__multiply>:
80206680:	defffa04 	addi	sp,sp,-24
80206684:	dcc00315 	stw	r19,12(sp)
80206688:	dc800215 	stw	r18,8(sp)
8020668c:	34c00417 	ldw	r19,16(r6)
80206690:	2c800417 	ldw	r18,16(r5)
80206694:	dd000415 	stw	r20,16(sp)
80206698:	dc400115 	stw	r17,4(sp)
8020669c:	dfc00515 	stw	ra,20(sp)
802066a0:	dc000015 	stw	r16,0(sp)
802066a4:	2829883a 	mov	r20,r5
802066a8:	3023883a 	mov	r17,r6
802066ac:	94c0050e 	bge	r18,r19,802066c4 <__multiply+0x44>
802066b0:	9007883a 	mov	r3,r18
802066b4:	3029883a 	mov	r20,r6
802066b8:	9825883a 	mov	r18,r19
802066bc:	2823883a 	mov	r17,r5
802066c0:	1827883a 	mov	r19,r3
802066c4:	a0800217 	ldw	r2,8(r20)
802066c8:	94e1883a 	add	r16,r18,r19
802066cc:	a1400117 	ldw	r5,4(r20)
802066d0:	1400010e 	bge	r2,r16,802066d8 <__multiply+0x58>
802066d4:	29400044 	addi	r5,r5,1
802066d8:	02062380 	call	80206238 <_Balloc>
802066dc:	8415883a 	add	r10,r16,r16
802066e0:	12c00504 	addi	r11,r2,20
802066e4:	5295883a 	add	r10,r10,r10
802066e8:	5a95883a 	add	r10,r11,r10
802066ec:	5807883a 	mov	r3,r11
802066f0:	5a80032e 	bgeu	r11,r10,80206700 <__multiply+0x80>
802066f4:	18000015 	stw	zero,0(r3)
802066f8:	18c00104 	addi	r3,r3,4
802066fc:	1abffd36 	bltu	r3,r10,802066f4 <__reset+0xfa1e66f4>
80206700:	9ce7883a 	add	r19,r19,r19
80206704:	94a5883a 	add	r18,r18,r18
80206708:	89800504 	addi	r6,r17,20
8020670c:	9ce7883a 	add	r19,r19,r19
80206710:	a3400504 	addi	r13,r20,20
80206714:	94a5883a 	add	r18,r18,r18
80206718:	34d9883a 	add	r12,r6,r19
8020671c:	6c93883a 	add	r9,r13,r18
80206720:	3300422e 	bgeu	r6,r12,8020682c <__multiply+0x1ac>
80206724:	37c00017 	ldw	ra,0(r6)
80206728:	fbffffcc 	andi	r15,ra,65535
8020672c:	78001b26 	beq	r15,zero,8020679c <__multiply+0x11c>
80206730:	5811883a 	mov	r8,r11
80206734:	681d883a 	mov	r14,r13
80206738:	000f883a 	mov	r7,zero
8020673c:	71000017 	ldw	r4,0(r14)
80206740:	40c00017 	ldw	r3,0(r8)
80206744:	73800104 	addi	r14,r14,4
80206748:	217fffcc 	andi	r5,r4,65535
8020674c:	2bcb383a 	mul	r5,r5,r15
80206750:	2008d43a 	srli	r4,r4,16
80206754:	1c7fffcc 	andi	r17,r3,65535
80206758:	2c4b883a 	add	r5,r5,r17
8020675c:	29cb883a 	add	r5,r5,r7
80206760:	23c9383a 	mul	r4,r4,r15
80206764:	1806d43a 	srli	r3,r3,16
80206768:	280ed43a 	srli	r7,r5,16
8020676c:	297fffcc 	andi	r5,r5,65535
80206770:	20c7883a 	add	r3,r4,r3
80206774:	19c7883a 	add	r3,r3,r7
80206778:	1808943a 	slli	r4,r3,16
8020677c:	4023883a 	mov	r17,r8
80206780:	180ed43a 	srli	r7,r3,16
80206784:	214ab03a 	or	r5,r4,r5
80206788:	41400015 	stw	r5,0(r8)
8020678c:	42000104 	addi	r8,r8,4
80206790:	727fea36 	bltu	r14,r9,8020673c <__reset+0xfa1e673c>
80206794:	89c00115 	stw	r7,4(r17)
80206798:	37c00017 	ldw	ra,0(r6)
8020679c:	f83ed43a 	srli	ra,ra,16
802067a0:	f8001f26 	beq	ra,zero,80206820 <__multiply+0x1a0>
802067a4:	58c00017 	ldw	r3,0(r11)
802067a8:	681d883a 	mov	r14,r13
802067ac:	581f883a 	mov	r15,r11
802067b0:	1811883a 	mov	r8,r3
802067b4:	5825883a 	mov	r18,r11
802067b8:	000f883a 	mov	r7,zero
802067bc:	00000106 	br	802067c4 <__multiply+0x144>
802067c0:	8825883a 	mov	r18,r17
802067c4:	7140000b 	ldhu	r5,0(r14)
802067c8:	4010d43a 	srli	r8,r8,16
802067cc:	193fffcc 	andi	r4,r3,65535
802067d0:	2fcb383a 	mul	r5,r5,ra
802067d4:	7bc00104 	addi	r15,r15,4
802067d8:	73800104 	addi	r14,r14,4
802067dc:	2a0b883a 	add	r5,r5,r8
802067e0:	29cb883a 	add	r5,r5,r7
802067e4:	2806943a 	slli	r3,r5,16
802067e8:	94400104 	addi	r17,r18,4
802067ec:	280ad43a 	srli	r5,r5,16
802067f0:	1908b03a 	or	r4,r3,r4
802067f4:	793fff15 	stw	r4,-4(r15)
802067f8:	70ffff17 	ldw	r3,-4(r14)
802067fc:	8a000017 	ldw	r8,0(r17)
80206800:	1806d43a 	srli	r3,r3,16
80206804:	413fffcc 	andi	r4,r8,65535
80206808:	1fc7383a 	mul	r3,r3,ra
8020680c:	1907883a 	add	r3,r3,r4
80206810:	1947883a 	add	r3,r3,r5
80206814:	180ed43a 	srli	r7,r3,16
80206818:	727fe936 	bltu	r14,r9,802067c0 <__reset+0xfa1e67c0>
8020681c:	90c00115 	stw	r3,4(r18)
80206820:	31800104 	addi	r6,r6,4
80206824:	5ac00104 	addi	r11,r11,4
80206828:	333fbe36 	bltu	r6,r12,80206724 <__reset+0xfa1e6724>
8020682c:	0400090e 	bge	zero,r16,80206854 <__multiply+0x1d4>
80206830:	50ffff17 	ldw	r3,-4(r10)
80206834:	52bfff04 	addi	r10,r10,-4
80206838:	18000326 	beq	r3,zero,80206848 <__multiply+0x1c8>
8020683c:	00000506 	br	80206854 <__multiply+0x1d4>
80206840:	50c00017 	ldw	r3,0(r10)
80206844:	1800031e 	bne	r3,zero,80206854 <__multiply+0x1d4>
80206848:	843fffc4 	addi	r16,r16,-1
8020684c:	52bfff04 	addi	r10,r10,-4
80206850:	803ffb1e 	bne	r16,zero,80206840 <__reset+0xfa1e6840>
80206854:	14000415 	stw	r16,16(r2)
80206858:	dfc00517 	ldw	ra,20(sp)
8020685c:	dd000417 	ldw	r20,16(sp)
80206860:	dcc00317 	ldw	r19,12(sp)
80206864:	dc800217 	ldw	r18,8(sp)
80206868:	dc400117 	ldw	r17,4(sp)
8020686c:	dc000017 	ldw	r16,0(sp)
80206870:	dec00604 	addi	sp,sp,24
80206874:	f800283a 	ret

80206878 <__pow5mult>:
80206878:	defffa04 	addi	sp,sp,-24
8020687c:	dcc00315 	stw	r19,12(sp)
80206880:	dc000015 	stw	r16,0(sp)
80206884:	dfc00515 	stw	ra,20(sp)
80206888:	dd000415 	stw	r20,16(sp)
8020688c:	dc800215 	stw	r18,8(sp)
80206890:	dc400115 	stw	r17,4(sp)
80206894:	308000cc 	andi	r2,r6,3
80206898:	3021883a 	mov	r16,r6
8020689c:	2027883a 	mov	r19,r4
802068a0:	10002f1e 	bne	r2,zero,80206960 <__pow5mult+0xe8>
802068a4:	2825883a 	mov	r18,r5
802068a8:	8021d0ba 	srai	r16,r16,2
802068ac:	80001a26 	beq	r16,zero,80206918 <__pow5mult+0xa0>
802068b0:	9c401217 	ldw	r17,72(r19)
802068b4:	8800061e 	bne	r17,zero,802068d0 <__pow5mult+0x58>
802068b8:	00003406 	br	8020698c <__pow5mult+0x114>
802068bc:	8021d07a 	srai	r16,r16,1
802068c0:	80001526 	beq	r16,zero,80206918 <__pow5mult+0xa0>
802068c4:	88800017 	ldw	r2,0(r17)
802068c8:	10001c26 	beq	r2,zero,8020693c <__pow5mult+0xc4>
802068cc:	1023883a 	mov	r17,r2
802068d0:	8080004c 	andi	r2,r16,1
802068d4:	103ff926 	beq	r2,zero,802068bc <__reset+0xfa1e68bc>
802068d8:	880d883a 	mov	r6,r17
802068dc:	900b883a 	mov	r5,r18
802068e0:	9809883a 	mov	r4,r19
802068e4:	02066800 	call	80206680 <__multiply>
802068e8:	90001b26 	beq	r18,zero,80206958 <__pow5mult+0xe0>
802068ec:	91000117 	ldw	r4,4(r18)
802068f0:	98c01317 	ldw	r3,76(r19)
802068f4:	8021d07a 	srai	r16,r16,1
802068f8:	2109883a 	add	r4,r4,r4
802068fc:	2109883a 	add	r4,r4,r4
80206900:	1907883a 	add	r3,r3,r4
80206904:	19000017 	ldw	r4,0(r3)
80206908:	91000015 	stw	r4,0(r18)
8020690c:	1c800015 	stw	r18,0(r3)
80206910:	1025883a 	mov	r18,r2
80206914:	803feb1e 	bne	r16,zero,802068c4 <__reset+0xfa1e68c4>
80206918:	9005883a 	mov	r2,r18
8020691c:	dfc00517 	ldw	ra,20(sp)
80206920:	dd000417 	ldw	r20,16(sp)
80206924:	dcc00317 	ldw	r19,12(sp)
80206928:	dc800217 	ldw	r18,8(sp)
8020692c:	dc400117 	ldw	r17,4(sp)
80206930:	dc000017 	ldw	r16,0(sp)
80206934:	dec00604 	addi	sp,sp,24
80206938:	f800283a 	ret
8020693c:	880d883a 	mov	r6,r17
80206940:	880b883a 	mov	r5,r17
80206944:	9809883a 	mov	r4,r19
80206948:	02066800 	call	80206680 <__multiply>
8020694c:	88800015 	stw	r2,0(r17)
80206950:	10000015 	stw	zero,0(r2)
80206954:	003fdd06 	br	802068cc <__reset+0xfa1e68cc>
80206958:	1025883a 	mov	r18,r2
8020695c:	003fd706 	br	802068bc <__reset+0xfa1e68bc>
80206960:	10bfffc4 	addi	r2,r2,-1
80206964:	1085883a 	add	r2,r2,r2
80206968:	00e00874 	movhi	r3,32801
8020696c:	18c85d04 	addi	r3,r3,8564
80206970:	1085883a 	add	r2,r2,r2
80206974:	1885883a 	add	r2,r3,r2
80206978:	11800017 	ldw	r6,0(r2)
8020697c:	000f883a 	mov	r7,zero
80206980:	02063080 	call	80206308 <__multadd>
80206984:	1025883a 	mov	r18,r2
80206988:	003fc706 	br	802068a8 <__reset+0xfa1e68a8>
8020698c:	05000044 	movi	r20,1
80206990:	a00b883a 	mov	r5,r20
80206994:	9809883a 	mov	r4,r19
80206998:	02062380 	call	80206238 <_Balloc>
8020699c:	1023883a 	mov	r17,r2
802069a0:	00809c44 	movi	r2,625
802069a4:	88800515 	stw	r2,20(r17)
802069a8:	8d000415 	stw	r20,16(r17)
802069ac:	9c401215 	stw	r17,72(r19)
802069b0:	88000015 	stw	zero,0(r17)
802069b4:	003fc606 	br	802068d0 <__reset+0xfa1e68d0>

802069b8 <__lshift>:
802069b8:	defff904 	addi	sp,sp,-28
802069bc:	dd400515 	stw	r21,20(sp)
802069c0:	dcc00315 	stw	r19,12(sp)
802069c4:	302bd17a 	srai	r21,r6,5
802069c8:	2cc00417 	ldw	r19,16(r5)
802069cc:	28800217 	ldw	r2,8(r5)
802069d0:	dd000415 	stw	r20,16(sp)
802069d4:	ace7883a 	add	r19,r21,r19
802069d8:	dc800215 	stw	r18,8(sp)
802069dc:	dc400115 	stw	r17,4(sp)
802069e0:	dc000015 	stw	r16,0(sp)
802069e4:	dfc00615 	stw	ra,24(sp)
802069e8:	9c000044 	addi	r16,r19,1
802069ec:	2823883a 	mov	r17,r5
802069f0:	3029883a 	mov	r20,r6
802069f4:	2025883a 	mov	r18,r4
802069f8:	29400117 	ldw	r5,4(r5)
802069fc:	1400030e 	bge	r2,r16,80206a0c <__lshift+0x54>
80206a00:	1085883a 	add	r2,r2,r2
80206a04:	29400044 	addi	r5,r5,1
80206a08:	143ffd16 	blt	r2,r16,80206a00 <__reset+0xfa1e6a00>
80206a0c:	9009883a 	mov	r4,r18
80206a10:	02062380 	call	80206238 <_Balloc>
80206a14:	10c00504 	addi	r3,r2,20
80206a18:	0540070e 	bge	zero,r21,80206a38 <__lshift+0x80>
80206a1c:	ad6b883a 	add	r21,r21,r21
80206a20:	ad6b883a 	add	r21,r21,r21
80206a24:	1809883a 	mov	r4,r3
80206a28:	1d47883a 	add	r3,r3,r21
80206a2c:	20000015 	stw	zero,0(r4)
80206a30:	21000104 	addi	r4,r4,4
80206a34:	193ffd1e 	bne	r3,r4,80206a2c <__reset+0xfa1e6a2c>
80206a38:	8a000417 	ldw	r8,16(r17)
80206a3c:	89000504 	addi	r4,r17,20
80206a40:	a18007cc 	andi	r6,r20,31
80206a44:	4211883a 	add	r8,r8,r8
80206a48:	4211883a 	add	r8,r8,r8
80206a4c:	2211883a 	add	r8,r4,r8
80206a50:	30002326 	beq	r6,zero,80206ae0 <__lshift+0x128>
80206a54:	02400804 	movi	r9,32
80206a58:	4993c83a 	sub	r9,r9,r6
80206a5c:	000b883a 	mov	r5,zero
80206a60:	21c00017 	ldw	r7,0(r4)
80206a64:	1815883a 	mov	r10,r3
80206a68:	18c00104 	addi	r3,r3,4
80206a6c:	398e983a 	sll	r7,r7,r6
80206a70:	21000104 	addi	r4,r4,4
80206a74:	394ab03a 	or	r5,r7,r5
80206a78:	197fff15 	stw	r5,-4(r3)
80206a7c:	217fff17 	ldw	r5,-4(r4)
80206a80:	2a4ad83a 	srl	r5,r5,r9
80206a84:	223ff636 	bltu	r4,r8,80206a60 <__reset+0xfa1e6a60>
80206a88:	51400115 	stw	r5,4(r10)
80206a8c:	28001a1e 	bne	r5,zero,80206af8 <__lshift+0x140>
80206a90:	843fffc4 	addi	r16,r16,-1
80206a94:	14000415 	stw	r16,16(r2)
80206a98:	88000826 	beq	r17,zero,80206abc <__lshift+0x104>
80206a9c:	89000117 	ldw	r4,4(r17)
80206aa0:	90c01317 	ldw	r3,76(r18)
80206aa4:	2109883a 	add	r4,r4,r4
80206aa8:	2109883a 	add	r4,r4,r4
80206aac:	1907883a 	add	r3,r3,r4
80206ab0:	19000017 	ldw	r4,0(r3)
80206ab4:	89000015 	stw	r4,0(r17)
80206ab8:	1c400015 	stw	r17,0(r3)
80206abc:	dfc00617 	ldw	ra,24(sp)
80206ac0:	dd400517 	ldw	r21,20(sp)
80206ac4:	dd000417 	ldw	r20,16(sp)
80206ac8:	dcc00317 	ldw	r19,12(sp)
80206acc:	dc800217 	ldw	r18,8(sp)
80206ad0:	dc400117 	ldw	r17,4(sp)
80206ad4:	dc000017 	ldw	r16,0(sp)
80206ad8:	dec00704 	addi	sp,sp,28
80206adc:	f800283a 	ret
80206ae0:	21400017 	ldw	r5,0(r4)
80206ae4:	18c00104 	addi	r3,r3,4
80206ae8:	21000104 	addi	r4,r4,4
80206aec:	197fff15 	stw	r5,-4(r3)
80206af0:	223ffb36 	bltu	r4,r8,80206ae0 <__reset+0xfa1e6ae0>
80206af4:	003fe606 	br	80206a90 <__reset+0xfa1e6a90>
80206af8:	9c000084 	addi	r16,r19,2
80206afc:	003fe406 	br	80206a90 <__reset+0xfa1e6a90>

80206b00 <__mcmp>:
80206b00:	20800417 	ldw	r2,16(r4)
80206b04:	28c00417 	ldw	r3,16(r5)
80206b08:	10c5c83a 	sub	r2,r2,r3
80206b0c:	1000111e 	bne	r2,zero,80206b54 <__mcmp+0x54>
80206b10:	18c7883a 	add	r3,r3,r3
80206b14:	18c7883a 	add	r3,r3,r3
80206b18:	21000504 	addi	r4,r4,20
80206b1c:	29400504 	addi	r5,r5,20
80206b20:	20c5883a 	add	r2,r4,r3
80206b24:	28cb883a 	add	r5,r5,r3
80206b28:	00000106 	br	80206b30 <__mcmp+0x30>
80206b2c:	20800a2e 	bgeu	r4,r2,80206b58 <__mcmp+0x58>
80206b30:	10bfff04 	addi	r2,r2,-4
80206b34:	297fff04 	addi	r5,r5,-4
80206b38:	11800017 	ldw	r6,0(r2)
80206b3c:	28c00017 	ldw	r3,0(r5)
80206b40:	30fffa26 	beq	r6,r3,80206b2c <__reset+0xfa1e6b2c>
80206b44:	30c00236 	bltu	r6,r3,80206b50 <__mcmp+0x50>
80206b48:	00800044 	movi	r2,1
80206b4c:	f800283a 	ret
80206b50:	00bfffc4 	movi	r2,-1
80206b54:	f800283a 	ret
80206b58:	0005883a 	mov	r2,zero
80206b5c:	f800283a 	ret

80206b60 <__mdiff>:
80206b60:	28c00417 	ldw	r3,16(r5)
80206b64:	30800417 	ldw	r2,16(r6)
80206b68:	defffa04 	addi	sp,sp,-24
80206b6c:	dcc00315 	stw	r19,12(sp)
80206b70:	dc800215 	stw	r18,8(sp)
80206b74:	dfc00515 	stw	ra,20(sp)
80206b78:	dd000415 	stw	r20,16(sp)
80206b7c:	dc400115 	stw	r17,4(sp)
80206b80:	dc000015 	stw	r16,0(sp)
80206b84:	1887c83a 	sub	r3,r3,r2
80206b88:	2825883a 	mov	r18,r5
80206b8c:	3027883a 	mov	r19,r6
80206b90:	1800141e 	bne	r3,zero,80206be4 <__mdiff+0x84>
80206b94:	1085883a 	add	r2,r2,r2
80206b98:	1085883a 	add	r2,r2,r2
80206b9c:	2a000504 	addi	r8,r5,20
80206ba0:	34000504 	addi	r16,r6,20
80206ba4:	4087883a 	add	r3,r8,r2
80206ba8:	8085883a 	add	r2,r16,r2
80206bac:	00000106 	br	80206bb4 <__mdiff+0x54>
80206bb0:	40c0592e 	bgeu	r8,r3,80206d18 <__mdiff+0x1b8>
80206bb4:	18ffff04 	addi	r3,r3,-4
80206bb8:	10bfff04 	addi	r2,r2,-4
80206bbc:	19c00017 	ldw	r7,0(r3)
80206bc0:	11400017 	ldw	r5,0(r2)
80206bc4:	397ffa26 	beq	r7,r5,80206bb0 <__reset+0xfa1e6bb0>
80206bc8:	3940592e 	bgeu	r7,r5,80206d30 <__mdiff+0x1d0>
80206bcc:	9005883a 	mov	r2,r18
80206bd0:	4023883a 	mov	r17,r8
80206bd4:	9825883a 	mov	r18,r19
80206bd8:	05000044 	movi	r20,1
80206bdc:	1027883a 	mov	r19,r2
80206be0:	00000406 	br	80206bf4 <__mdiff+0x94>
80206be4:	18005616 	blt	r3,zero,80206d40 <__mdiff+0x1e0>
80206be8:	34400504 	addi	r17,r6,20
80206bec:	2c000504 	addi	r16,r5,20
80206bf0:	0029883a 	mov	r20,zero
80206bf4:	91400117 	ldw	r5,4(r18)
80206bf8:	02062380 	call	80206238 <_Balloc>
80206bfc:	92400417 	ldw	r9,16(r18)
80206c00:	9b000417 	ldw	r12,16(r19)
80206c04:	12c00504 	addi	r11,r2,20
80206c08:	4a51883a 	add	r8,r9,r9
80206c0c:	6319883a 	add	r12,r12,r12
80206c10:	4211883a 	add	r8,r8,r8
80206c14:	6319883a 	add	r12,r12,r12
80206c18:	15000315 	stw	r20,12(r2)
80206c1c:	8211883a 	add	r8,r16,r8
80206c20:	8b19883a 	add	r12,r17,r12
80206c24:	0007883a 	mov	r3,zero
80206c28:	81400017 	ldw	r5,0(r16)
80206c2c:	89c00017 	ldw	r7,0(r17)
80206c30:	59800104 	addi	r6,r11,4
80206c34:	293fffcc 	andi	r4,r5,65535
80206c38:	20c7883a 	add	r3,r4,r3
80206c3c:	393fffcc 	andi	r4,r7,65535
80206c40:	1909c83a 	sub	r4,r3,r4
80206c44:	280ad43a 	srli	r5,r5,16
80206c48:	380ed43a 	srli	r7,r7,16
80206c4c:	2007d43a 	srai	r3,r4,16
80206c50:	213fffcc 	andi	r4,r4,65535
80206c54:	29cbc83a 	sub	r5,r5,r7
80206c58:	28c7883a 	add	r3,r5,r3
80206c5c:	180a943a 	slli	r5,r3,16
80206c60:	8c400104 	addi	r17,r17,4
80206c64:	84000104 	addi	r16,r16,4
80206c68:	2908b03a 	or	r4,r5,r4
80206c6c:	59000015 	stw	r4,0(r11)
80206c70:	1807d43a 	srai	r3,r3,16
80206c74:	3015883a 	mov	r10,r6
80206c78:	3017883a 	mov	r11,r6
80206c7c:	8b3fea36 	bltu	r17,r12,80206c28 <__reset+0xfa1e6c28>
80206c80:	8200162e 	bgeu	r16,r8,80206cdc <__mdiff+0x17c>
80206c84:	8017883a 	mov	r11,r16
80206c88:	59400017 	ldw	r5,0(r11)
80206c8c:	31800104 	addi	r6,r6,4
80206c90:	5ac00104 	addi	r11,r11,4
80206c94:	293fffcc 	andi	r4,r5,65535
80206c98:	20c7883a 	add	r3,r4,r3
80206c9c:	280ed43a 	srli	r7,r5,16
80206ca0:	180bd43a 	srai	r5,r3,16
80206ca4:	193fffcc 	andi	r4,r3,65535
80206ca8:	3947883a 	add	r3,r7,r5
80206cac:	180a943a 	slli	r5,r3,16
80206cb0:	1807d43a 	srai	r3,r3,16
80206cb4:	2908b03a 	or	r4,r5,r4
80206cb8:	313fff15 	stw	r4,-4(r6)
80206cbc:	5a3ff236 	bltu	r11,r8,80206c88 <__reset+0xfa1e6c88>
80206cc0:	0406303a 	nor	r3,zero,r16
80206cc4:	1a07883a 	add	r3,r3,r8
80206cc8:	1806d0ba 	srli	r3,r3,2
80206ccc:	18c00044 	addi	r3,r3,1
80206cd0:	18c7883a 	add	r3,r3,r3
80206cd4:	18c7883a 	add	r3,r3,r3
80206cd8:	50d5883a 	add	r10,r10,r3
80206cdc:	50ffff04 	addi	r3,r10,-4
80206ce0:	2000041e 	bne	r4,zero,80206cf4 <__mdiff+0x194>
80206ce4:	18ffff04 	addi	r3,r3,-4
80206ce8:	19000017 	ldw	r4,0(r3)
80206cec:	4a7fffc4 	addi	r9,r9,-1
80206cf0:	203ffc26 	beq	r4,zero,80206ce4 <__reset+0xfa1e6ce4>
80206cf4:	12400415 	stw	r9,16(r2)
80206cf8:	dfc00517 	ldw	ra,20(sp)
80206cfc:	dd000417 	ldw	r20,16(sp)
80206d00:	dcc00317 	ldw	r19,12(sp)
80206d04:	dc800217 	ldw	r18,8(sp)
80206d08:	dc400117 	ldw	r17,4(sp)
80206d0c:	dc000017 	ldw	r16,0(sp)
80206d10:	dec00604 	addi	sp,sp,24
80206d14:	f800283a 	ret
80206d18:	000b883a 	mov	r5,zero
80206d1c:	02062380 	call	80206238 <_Balloc>
80206d20:	00c00044 	movi	r3,1
80206d24:	10c00415 	stw	r3,16(r2)
80206d28:	10000515 	stw	zero,20(r2)
80206d2c:	003ff206 	br	80206cf8 <__reset+0xfa1e6cf8>
80206d30:	8023883a 	mov	r17,r16
80206d34:	0029883a 	mov	r20,zero
80206d38:	4021883a 	mov	r16,r8
80206d3c:	003fad06 	br	80206bf4 <__reset+0xfa1e6bf4>
80206d40:	9005883a 	mov	r2,r18
80206d44:	94400504 	addi	r17,r18,20
80206d48:	9c000504 	addi	r16,r19,20
80206d4c:	9825883a 	mov	r18,r19
80206d50:	05000044 	movi	r20,1
80206d54:	1027883a 	mov	r19,r2
80206d58:	003fa606 	br	80206bf4 <__reset+0xfa1e6bf4>

80206d5c <__ulp>:
80206d5c:	295ffc2c 	andhi	r5,r5,32752
80206d60:	00bf3034 	movhi	r2,64704
80206d64:	2887883a 	add	r3,r5,r2
80206d68:	00c0020e 	bge	zero,r3,80206d74 <__ulp+0x18>
80206d6c:	0005883a 	mov	r2,zero
80206d70:	f800283a 	ret
80206d74:	00c7c83a 	sub	r3,zero,r3
80206d78:	1807d53a 	srai	r3,r3,20
80206d7c:	008004c4 	movi	r2,19
80206d80:	10c00b0e 	bge	r2,r3,80206db0 <__ulp+0x54>
80206d84:	18bffb04 	addi	r2,r3,-20
80206d88:	01000784 	movi	r4,30
80206d8c:	0007883a 	mov	r3,zero
80206d90:	20800516 	blt	r4,r2,80206da8 <__ulp+0x4c>
80206d94:	010007c4 	movi	r4,31
80206d98:	2089c83a 	sub	r4,r4,r2
80206d9c:	00800044 	movi	r2,1
80206da0:	1104983a 	sll	r2,r2,r4
80206da4:	f800283a 	ret
80206da8:	00800044 	movi	r2,1
80206dac:	f800283a 	ret
80206db0:	01400234 	movhi	r5,8
80206db4:	28c7d83a 	sra	r3,r5,r3
80206db8:	0005883a 	mov	r2,zero
80206dbc:	f800283a 	ret

80206dc0 <__b2d>:
80206dc0:	defffa04 	addi	sp,sp,-24
80206dc4:	dc000015 	stw	r16,0(sp)
80206dc8:	24000417 	ldw	r16,16(r4)
80206dcc:	dc400115 	stw	r17,4(sp)
80206dd0:	24400504 	addi	r17,r4,20
80206dd4:	8421883a 	add	r16,r16,r16
80206dd8:	8421883a 	add	r16,r16,r16
80206ddc:	8c21883a 	add	r16,r17,r16
80206de0:	dc800215 	stw	r18,8(sp)
80206de4:	84bfff17 	ldw	r18,-4(r16)
80206de8:	dd000415 	stw	r20,16(sp)
80206dec:	dcc00315 	stw	r19,12(sp)
80206df0:	9009883a 	mov	r4,r18
80206df4:	2829883a 	mov	r20,r5
80206df8:	dfc00515 	stw	ra,20(sp)
80206dfc:	020652c0 	call	8020652c <__hi0bits>
80206e00:	00c00804 	movi	r3,32
80206e04:	1889c83a 	sub	r4,r3,r2
80206e08:	a1000015 	stw	r4,0(r20)
80206e0c:	01000284 	movi	r4,10
80206e10:	84ffff04 	addi	r19,r16,-4
80206e14:	20801216 	blt	r4,r2,80206e60 <__b2d+0xa0>
80206e18:	018002c4 	movi	r6,11
80206e1c:	308dc83a 	sub	r6,r6,r2
80206e20:	9186d83a 	srl	r3,r18,r6
80206e24:	18cffc34 	orhi	r3,r3,16368
80206e28:	8cc0212e 	bgeu	r17,r19,80206eb0 <__b2d+0xf0>
80206e2c:	813ffe17 	ldw	r4,-8(r16)
80206e30:	218cd83a 	srl	r6,r4,r6
80206e34:	10800544 	addi	r2,r2,21
80206e38:	9084983a 	sll	r2,r18,r2
80206e3c:	1184b03a 	or	r2,r2,r6
80206e40:	dfc00517 	ldw	ra,20(sp)
80206e44:	dd000417 	ldw	r20,16(sp)
80206e48:	dcc00317 	ldw	r19,12(sp)
80206e4c:	dc800217 	ldw	r18,8(sp)
80206e50:	dc400117 	ldw	r17,4(sp)
80206e54:	dc000017 	ldw	r16,0(sp)
80206e58:	dec00604 	addi	sp,sp,24
80206e5c:	f800283a 	ret
80206e60:	8cc00f2e 	bgeu	r17,r19,80206ea0 <__b2d+0xe0>
80206e64:	117ffd44 	addi	r5,r2,-11
80206e68:	80bffe17 	ldw	r2,-8(r16)
80206e6c:	28000e26 	beq	r5,zero,80206ea8 <__b2d+0xe8>
80206e70:	1949c83a 	sub	r4,r3,r5
80206e74:	9164983a 	sll	r18,r18,r5
80206e78:	1106d83a 	srl	r3,r2,r4
80206e7c:	81bffe04 	addi	r6,r16,-8
80206e80:	948ffc34 	orhi	r18,r18,16368
80206e84:	90c6b03a 	or	r3,r18,r3
80206e88:	89800e2e 	bgeu	r17,r6,80206ec4 <__b2d+0x104>
80206e8c:	81bffd17 	ldw	r6,-12(r16)
80206e90:	1144983a 	sll	r2,r2,r5
80206e94:	310ad83a 	srl	r5,r6,r4
80206e98:	2884b03a 	or	r2,r5,r2
80206e9c:	003fe806 	br	80206e40 <__reset+0xfa1e6e40>
80206ea0:	10bffd44 	addi	r2,r2,-11
80206ea4:	1000041e 	bne	r2,zero,80206eb8 <__b2d+0xf8>
80206ea8:	90cffc34 	orhi	r3,r18,16368
80206eac:	003fe406 	br	80206e40 <__reset+0xfa1e6e40>
80206eb0:	000d883a 	mov	r6,zero
80206eb4:	003fdf06 	br	80206e34 <__reset+0xfa1e6e34>
80206eb8:	90a4983a 	sll	r18,r18,r2
80206ebc:	0005883a 	mov	r2,zero
80206ec0:	003ff906 	br	80206ea8 <__reset+0xfa1e6ea8>
80206ec4:	1144983a 	sll	r2,r2,r5
80206ec8:	003fdd06 	br	80206e40 <__reset+0xfa1e6e40>

80206ecc <__d2b>:
80206ecc:	defff804 	addi	sp,sp,-32
80206ed0:	dc000215 	stw	r16,8(sp)
80206ed4:	3021883a 	mov	r16,r6
80206ed8:	dc400315 	stw	r17,12(sp)
80206edc:	8022907a 	slli	r17,r16,1
80206ee0:	dd000615 	stw	r20,24(sp)
80206ee4:	2829883a 	mov	r20,r5
80206ee8:	01400044 	movi	r5,1
80206eec:	dcc00515 	stw	r19,20(sp)
80206ef0:	dc800415 	stw	r18,16(sp)
80206ef4:	dfc00715 	stw	ra,28(sp)
80206ef8:	3825883a 	mov	r18,r7
80206efc:	8822d57a 	srli	r17,r17,21
80206f00:	02062380 	call	80206238 <_Balloc>
80206f04:	1027883a 	mov	r19,r2
80206f08:	00800434 	movhi	r2,16
80206f0c:	10bfffc4 	addi	r2,r2,-1
80206f10:	808c703a 	and	r6,r16,r2
80206f14:	88000126 	beq	r17,zero,80206f1c <__d2b+0x50>
80206f18:	31800434 	orhi	r6,r6,16
80206f1c:	d9800015 	stw	r6,0(sp)
80206f20:	a0002426 	beq	r20,zero,80206fb4 <__d2b+0xe8>
80206f24:	d9000104 	addi	r4,sp,4
80206f28:	dd000115 	stw	r20,4(sp)
80206f2c:	02065940 	call	80206594 <__lo0bits>
80206f30:	d8c00017 	ldw	r3,0(sp)
80206f34:	10002f1e 	bne	r2,zero,80206ff4 <__d2b+0x128>
80206f38:	d9000117 	ldw	r4,4(sp)
80206f3c:	99000515 	stw	r4,20(r19)
80206f40:	1821003a 	cmpeq	r16,r3,zero
80206f44:	01000084 	movi	r4,2
80206f48:	2421c83a 	sub	r16,r4,r16
80206f4c:	98c00615 	stw	r3,24(r19)
80206f50:	9c000415 	stw	r16,16(r19)
80206f54:	88001f1e 	bne	r17,zero,80206fd4 <__d2b+0x108>
80206f58:	10bef384 	addi	r2,r2,-1074
80206f5c:	90800015 	stw	r2,0(r18)
80206f60:	00900034 	movhi	r2,16384
80206f64:	10bfffc4 	addi	r2,r2,-1
80206f68:	8085883a 	add	r2,r16,r2
80206f6c:	1085883a 	add	r2,r2,r2
80206f70:	1085883a 	add	r2,r2,r2
80206f74:	9885883a 	add	r2,r19,r2
80206f78:	11000517 	ldw	r4,20(r2)
80206f7c:	8020917a 	slli	r16,r16,5
80206f80:	020652c0 	call	8020652c <__hi0bits>
80206f84:	d8c00817 	ldw	r3,32(sp)
80206f88:	8085c83a 	sub	r2,r16,r2
80206f8c:	18800015 	stw	r2,0(r3)
80206f90:	9805883a 	mov	r2,r19
80206f94:	dfc00717 	ldw	ra,28(sp)
80206f98:	dd000617 	ldw	r20,24(sp)
80206f9c:	dcc00517 	ldw	r19,20(sp)
80206fa0:	dc800417 	ldw	r18,16(sp)
80206fa4:	dc400317 	ldw	r17,12(sp)
80206fa8:	dc000217 	ldw	r16,8(sp)
80206fac:	dec00804 	addi	sp,sp,32
80206fb0:	f800283a 	ret
80206fb4:	d809883a 	mov	r4,sp
80206fb8:	02065940 	call	80206594 <__lo0bits>
80206fbc:	d8c00017 	ldw	r3,0(sp)
80206fc0:	04000044 	movi	r16,1
80206fc4:	9c000415 	stw	r16,16(r19)
80206fc8:	98c00515 	stw	r3,20(r19)
80206fcc:	10800804 	addi	r2,r2,32
80206fd0:	883fe126 	beq	r17,zero,80206f58 <__reset+0xfa1e6f58>
80206fd4:	00c00d44 	movi	r3,53
80206fd8:	8c7ef344 	addi	r17,r17,-1075
80206fdc:	88a3883a 	add	r17,r17,r2
80206fe0:	1885c83a 	sub	r2,r3,r2
80206fe4:	d8c00817 	ldw	r3,32(sp)
80206fe8:	94400015 	stw	r17,0(r18)
80206fec:	18800015 	stw	r2,0(r3)
80206ff0:	003fe706 	br	80206f90 <__reset+0xfa1e6f90>
80206ff4:	01000804 	movi	r4,32
80206ff8:	2089c83a 	sub	r4,r4,r2
80206ffc:	1908983a 	sll	r4,r3,r4
80207000:	d9400117 	ldw	r5,4(sp)
80207004:	1886d83a 	srl	r3,r3,r2
80207008:	2148b03a 	or	r4,r4,r5
8020700c:	99000515 	stw	r4,20(r19)
80207010:	d8c00015 	stw	r3,0(sp)
80207014:	003fca06 	br	80206f40 <__reset+0xfa1e6f40>

80207018 <__ratio>:
80207018:	defff904 	addi	sp,sp,-28
8020701c:	dc400315 	stw	r17,12(sp)
80207020:	2823883a 	mov	r17,r5
80207024:	d9400104 	addi	r5,sp,4
80207028:	dfc00615 	stw	ra,24(sp)
8020702c:	dcc00515 	stw	r19,20(sp)
80207030:	dc800415 	stw	r18,16(sp)
80207034:	2027883a 	mov	r19,r4
80207038:	dc000215 	stw	r16,8(sp)
8020703c:	0206dc00 	call	80206dc0 <__b2d>
80207040:	d80b883a 	mov	r5,sp
80207044:	8809883a 	mov	r4,r17
80207048:	1025883a 	mov	r18,r2
8020704c:	1821883a 	mov	r16,r3
80207050:	0206dc00 	call	80206dc0 <__b2d>
80207054:	8a000417 	ldw	r8,16(r17)
80207058:	99000417 	ldw	r4,16(r19)
8020705c:	d9400117 	ldw	r5,4(sp)
80207060:	2209c83a 	sub	r4,r4,r8
80207064:	2010917a 	slli	r8,r4,5
80207068:	d9000017 	ldw	r4,0(sp)
8020706c:	2909c83a 	sub	r4,r5,r4
80207070:	4109883a 	add	r4,r8,r4
80207074:	01000e0e 	bge	zero,r4,802070b0 <__ratio+0x98>
80207078:	2008953a 	slli	r4,r4,20
8020707c:	2421883a 	add	r16,r4,r16
80207080:	100d883a 	mov	r6,r2
80207084:	180f883a 	mov	r7,r3
80207088:	9009883a 	mov	r4,r18
8020708c:	800b883a 	mov	r5,r16
80207090:	020af040 	call	8020af04 <__divdf3>
80207094:	dfc00617 	ldw	ra,24(sp)
80207098:	dcc00517 	ldw	r19,20(sp)
8020709c:	dc800417 	ldw	r18,16(sp)
802070a0:	dc400317 	ldw	r17,12(sp)
802070a4:	dc000217 	ldw	r16,8(sp)
802070a8:	dec00704 	addi	sp,sp,28
802070ac:	f800283a 	ret
802070b0:	2008953a 	slli	r4,r4,20
802070b4:	1907c83a 	sub	r3,r3,r4
802070b8:	003ff106 	br	80207080 <__reset+0xfa1e7080>

802070bc <_mprec_log10>:
802070bc:	defffe04 	addi	sp,sp,-8
802070c0:	dc000015 	stw	r16,0(sp)
802070c4:	dfc00115 	stw	ra,4(sp)
802070c8:	008005c4 	movi	r2,23
802070cc:	2021883a 	mov	r16,r4
802070d0:	11000d0e 	bge	r2,r4,80207108 <_mprec_log10+0x4c>
802070d4:	0005883a 	mov	r2,zero
802070d8:	00cffc34 	movhi	r3,16368
802070dc:	843fffc4 	addi	r16,r16,-1
802070e0:	000d883a 	mov	r6,zero
802070e4:	01d00934 	movhi	r7,16420
802070e8:	1009883a 	mov	r4,r2
802070ec:	180b883a 	mov	r5,r3
802070f0:	020ba440 	call	8020ba44 <__muldf3>
802070f4:	803ff91e 	bne	r16,zero,802070dc <__reset+0xfa1e70dc>
802070f8:	dfc00117 	ldw	ra,4(sp)
802070fc:	dc000017 	ldw	r16,0(sp)
80207100:	dec00204 	addi	sp,sp,8
80207104:	f800283a 	ret
80207108:	202090fa 	slli	r16,r4,3
8020710c:	00a00874 	movhi	r2,32801
80207110:	10887404 	addi	r2,r2,8656
80207114:	1421883a 	add	r16,r2,r16
80207118:	80800017 	ldw	r2,0(r16)
8020711c:	80c00117 	ldw	r3,4(r16)
80207120:	dfc00117 	ldw	ra,4(sp)
80207124:	dc000017 	ldw	r16,0(sp)
80207128:	dec00204 	addi	sp,sp,8
8020712c:	f800283a 	ret

80207130 <__copybits>:
80207130:	297fffc4 	addi	r5,r5,-1
80207134:	280fd17a 	srai	r7,r5,5
80207138:	30c00417 	ldw	r3,16(r6)
8020713c:	30800504 	addi	r2,r6,20
80207140:	39c00044 	addi	r7,r7,1
80207144:	18c7883a 	add	r3,r3,r3
80207148:	39cf883a 	add	r7,r7,r7
8020714c:	18c7883a 	add	r3,r3,r3
80207150:	39cf883a 	add	r7,r7,r7
80207154:	10c7883a 	add	r3,r2,r3
80207158:	21cf883a 	add	r7,r4,r7
8020715c:	10c00d2e 	bgeu	r2,r3,80207194 <__copybits+0x64>
80207160:	200b883a 	mov	r5,r4
80207164:	12000017 	ldw	r8,0(r2)
80207168:	29400104 	addi	r5,r5,4
8020716c:	10800104 	addi	r2,r2,4
80207170:	2a3fff15 	stw	r8,-4(r5)
80207174:	10fffb36 	bltu	r2,r3,80207164 <__reset+0xfa1e7164>
80207178:	1985c83a 	sub	r2,r3,r6
8020717c:	10bffac4 	addi	r2,r2,-21
80207180:	1004d0ba 	srli	r2,r2,2
80207184:	10800044 	addi	r2,r2,1
80207188:	1085883a 	add	r2,r2,r2
8020718c:	1085883a 	add	r2,r2,r2
80207190:	2089883a 	add	r4,r4,r2
80207194:	21c0032e 	bgeu	r4,r7,802071a4 <__copybits+0x74>
80207198:	20000015 	stw	zero,0(r4)
8020719c:	21000104 	addi	r4,r4,4
802071a0:	21fffd36 	bltu	r4,r7,80207198 <__reset+0xfa1e7198>
802071a4:	f800283a 	ret

802071a8 <__any_on>:
802071a8:	20c00417 	ldw	r3,16(r4)
802071ac:	2805d17a 	srai	r2,r5,5
802071b0:	21000504 	addi	r4,r4,20
802071b4:	18800d0e 	bge	r3,r2,802071ec <__any_on+0x44>
802071b8:	18c7883a 	add	r3,r3,r3
802071bc:	18c7883a 	add	r3,r3,r3
802071c0:	20c7883a 	add	r3,r4,r3
802071c4:	20c0192e 	bgeu	r4,r3,8020722c <__any_on+0x84>
802071c8:	18bfff17 	ldw	r2,-4(r3)
802071cc:	18ffff04 	addi	r3,r3,-4
802071d0:	1000041e 	bne	r2,zero,802071e4 <__any_on+0x3c>
802071d4:	20c0142e 	bgeu	r4,r3,80207228 <__any_on+0x80>
802071d8:	18ffff04 	addi	r3,r3,-4
802071dc:	19400017 	ldw	r5,0(r3)
802071e0:	283ffc26 	beq	r5,zero,802071d4 <__reset+0xfa1e71d4>
802071e4:	00800044 	movi	r2,1
802071e8:	f800283a 	ret
802071ec:	10c00a0e 	bge	r2,r3,80207218 <__any_on+0x70>
802071f0:	1085883a 	add	r2,r2,r2
802071f4:	1085883a 	add	r2,r2,r2
802071f8:	294007cc 	andi	r5,r5,31
802071fc:	2087883a 	add	r3,r4,r2
80207200:	283ff026 	beq	r5,zero,802071c4 <__reset+0xfa1e71c4>
80207204:	19800017 	ldw	r6,0(r3)
80207208:	3144d83a 	srl	r2,r6,r5
8020720c:	114a983a 	sll	r5,r2,r5
80207210:	317ff41e 	bne	r6,r5,802071e4 <__reset+0xfa1e71e4>
80207214:	003feb06 	br	802071c4 <__reset+0xfa1e71c4>
80207218:	1085883a 	add	r2,r2,r2
8020721c:	1085883a 	add	r2,r2,r2
80207220:	2087883a 	add	r3,r4,r2
80207224:	003fe706 	br	802071c4 <__reset+0xfa1e71c4>
80207228:	f800283a 	ret
8020722c:	0005883a 	mov	r2,zero
80207230:	f800283a 	ret

80207234 <_realloc_r>:
80207234:	defff604 	addi	sp,sp,-40
80207238:	dc800215 	stw	r18,8(sp)
8020723c:	dfc00915 	stw	ra,36(sp)
80207240:	df000815 	stw	fp,32(sp)
80207244:	ddc00715 	stw	r23,28(sp)
80207248:	dd800615 	stw	r22,24(sp)
8020724c:	dd400515 	stw	r21,20(sp)
80207250:	dd000415 	stw	r20,16(sp)
80207254:	dcc00315 	stw	r19,12(sp)
80207258:	dc400115 	stw	r17,4(sp)
8020725c:	dc000015 	stw	r16,0(sp)
80207260:	3025883a 	mov	r18,r6
80207264:	2800b726 	beq	r5,zero,80207544 <_realloc_r+0x310>
80207268:	282b883a 	mov	r21,r5
8020726c:	2029883a 	mov	r20,r4
80207270:	020d1500 	call	8020d150 <__malloc_lock>
80207274:	a8bfff17 	ldw	r2,-4(r21)
80207278:	043fff04 	movi	r16,-4
8020727c:	90c002c4 	addi	r3,r18,11
80207280:	01000584 	movi	r4,22
80207284:	acfffe04 	addi	r19,r21,-8
80207288:	1420703a 	and	r16,r2,r16
8020728c:	20c0332e 	bgeu	r4,r3,8020735c <_realloc_r+0x128>
80207290:	047ffe04 	movi	r17,-8
80207294:	1c62703a 	and	r17,r3,r17
80207298:	8807883a 	mov	r3,r17
8020729c:	88005816 	blt	r17,zero,80207400 <_realloc_r+0x1cc>
802072a0:	8c805736 	bltu	r17,r18,80207400 <_realloc_r+0x1cc>
802072a4:	80c0300e 	bge	r16,r3,80207368 <_realloc_r+0x134>
802072a8:	07200874 	movhi	fp,32801
802072ac:	e70abf04 	addi	fp,fp,11004
802072b0:	e1c00217 	ldw	r7,8(fp)
802072b4:	9c09883a 	add	r4,r19,r16
802072b8:	22000117 	ldw	r8,4(r4)
802072bc:	21c06326 	beq	r4,r7,8020744c <_realloc_r+0x218>
802072c0:	017fff84 	movi	r5,-2
802072c4:	414a703a 	and	r5,r8,r5
802072c8:	214b883a 	add	r5,r4,r5
802072cc:	29800117 	ldw	r6,4(r5)
802072d0:	3180004c 	andi	r6,r6,1
802072d4:	30003f26 	beq	r6,zero,802073d4 <_realloc_r+0x1a0>
802072d8:	1080004c 	andi	r2,r2,1
802072dc:	10008326 	beq	r2,zero,802074ec <_realloc_r+0x2b8>
802072e0:	900b883a 	mov	r5,r18
802072e4:	a009883a 	mov	r4,r20
802072e8:	020557c0 	call	8020557c <_malloc_r>
802072ec:	1025883a 	mov	r18,r2
802072f0:	10011e26 	beq	r2,zero,8020776c <_realloc_r+0x538>
802072f4:	a93fff17 	ldw	r4,-4(r21)
802072f8:	10fffe04 	addi	r3,r2,-8
802072fc:	00bfff84 	movi	r2,-2
80207300:	2084703a 	and	r2,r4,r2
80207304:	9885883a 	add	r2,r19,r2
80207308:	1880ee26 	beq	r3,r2,802076c4 <_realloc_r+0x490>
8020730c:	81bfff04 	addi	r6,r16,-4
80207310:	00800904 	movi	r2,36
80207314:	1180b836 	bltu	r2,r6,802075f8 <_realloc_r+0x3c4>
80207318:	00c004c4 	movi	r3,19
8020731c:	19809636 	bltu	r3,r6,80207578 <_realloc_r+0x344>
80207320:	9005883a 	mov	r2,r18
80207324:	a807883a 	mov	r3,r21
80207328:	19000017 	ldw	r4,0(r3)
8020732c:	11000015 	stw	r4,0(r2)
80207330:	19000117 	ldw	r4,4(r3)
80207334:	11000115 	stw	r4,4(r2)
80207338:	18c00217 	ldw	r3,8(r3)
8020733c:	10c00215 	stw	r3,8(r2)
80207340:	a80b883a 	mov	r5,r21
80207344:	a009883a 	mov	r4,r20
80207348:	02049900 	call	80204990 <_free_r>
8020734c:	a009883a 	mov	r4,r20
80207350:	020d1740 	call	8020d174 <__malloc_unlock>
80207354:	9005883a 	mov	r2,r18
80207358:	00001206 	br	802073a4 <_realloc_r+0x170>
8020735c:	00c00404 	movi	r3,16
80207360:	1823883a 	mov	r17,r3
80207364:	003fce06 	br	802072a0 <__reset+0xfa1e72a0>
80207368:	a825883a 	mov	r18,r21
8020736c:	8445c83a 	sub	r2,r16,r17
80207370:	00c003c4 	movi	r3,15
80207374:	18802636 	bltu	r3,r2,80207410 <_realloc_r+0x1dc>
80207378:	99800117 	ldw	r6,4(r19)
8020737c:	9c07883a 	add	r3,r19,r16
80207380:	3180004c 	andi	r6,r6,1
80207384:	3420b03a 	or	r16,r6,r16
80207388:	9c000115 	stw	r16,4(r19)
8020738c:	18800117 	ldw	r2,4(r3)
80207390:	10800054 	ori	r2,r2,1
80207394:	18800115 	stw	r2,4(r3)
80207398:	a009883a 	mov	r4,r20
8020739c:	020d1740 	call	8020d174 <__malloc_unlock>
802073a0:	9005883a 	mov	r2,r18
802073a4:	dfc00917 	ldw	ra,36(sp)
802073a8:	df000817 	ldw	fp,32(sp)
802073ac:	ddc00717 	ldw	r23,28(sp)
802073b0:	dd800617 	ldw	r22,24(sp)
802073b4:	dd400517 	ldw	r21,20(sp)
802073b8:	dd000417 	ldw	r20,16(sp)
802073bc:	dcc00317 	ldw	r19,12(sp)
802073c0:	dc800217 	ldw	r18,8(sp)
802073c4:	dc400117 	ldw	r17,4(sp)
802073c8:	dc000017 	ldw	r16,0(sp)
802073cc:	dec00a04 	addi	sp,sp,40
802073d0:	f800283a 	ret
802073d4:	017fff04 	movi	r5,-4
802073d8:	414a703a 	and	r5,r8,r5
802073dc:	814d883a 	add	r6,r16,r5
802073e0:	30c01f16 	blt	r6,r3,80207460 <_realloc_r+0x22c>
802073e4:	20800317 	ldw	r2,12(r4)
802073e8:	20c00217 	ldw	r3,8(r4)
802073ec:	a825883a 	mov	r18,r21
802073f0:	3021883a 	mov	r16,r6
802073f4:	18800315 	stw	r2,12(r3)
802073f8:	10c00215 	stw	r3,8(r2)
802073fc:	003fdb06 	br	8020736c <__reset+0xfa1e736c>
80207400:	00800304 	movi	r2,12
80207404:	a0800015 	stw	r2,0(r20)
80207408:	0005883a 	mov	r2,zero
8020740c:	003fe506 	br	802073a4 <__reset+0xfa1e73a4>
80207410:	98c00117 	ldw	r3,4(r19)
80207414:	9c4b883a 	add	r5,r19,r17
80207418:	11000054 	ori	r4,r2,1
8020741c:	18c0004c 	andi	r3,r3,1
80207420:	1c62b03a 	or	r17,r3,r17
80207424:	9c400115 	stw	r17,4(r19)
80207428:	29000115 	stw	r4,4(r5)
8020742c:	2885883a 	add	r2,r5,r2
80207430:	10c00117 	ldw	r3,4(r2)
80207434:	29400204 	addi	r5,r5,8
80207438:	a009883a 	mov	r4,r20
8020743c:	18c00054 	ori	r3,r3,1
80207440:	10c00115 	stw	r3,4(r2)
80207444:	02049900 	call	80204990 <_free_r>
80207448:	003fd306 	br	80207398 <__reset+0xfa1e7398>
8020744c:	017fff04 	movi	r5,-4
80207450:	414a703a 	and	r5,r8,r5
80207454:	89800404 	addi	r6,r17,16
80207458:	8151883a 	add	r8,r16,r5
8020745c:	4180590e 	bge	r8,r6,802075c4 <_realloc_r+0x390>
80207460:	1080004c 	andi	r2,r2,1
80207464:	103f9e1e 	bne	r2,zero,802072e0 <__reset+0xfa1e72e0>
80207468:	adbffe17 	ldw	r22,-8(r21)
8020746c:	00bfff04 	movi	r2,-4
80207470:	9dadc83a 	sub	r22,r19,r22
80207474:	b1800117 	ldw	r6,4(r22)
80207478:	3084703a 	and	r2,r6,r2
8020747c:	20002026 	beq	r4,zero,80207500 <_realloc_r+0x2cc>
80207480:	80af883a 	add	r23,r16,r2
80207484:	b96f883a 	add	r23,r23,r5
80207488:	21c05f26 	beq	r4,r7,80207608 <_realloc_r+0x3d4>
8020748c:	b8c01c16 	blt	r23,r3,80207500 <_realloc_r+0x2cc>
80207490:	20800317 	ldw	r2,12(r4)
80207494:	20c00217 	ldw	r3,8(r4)
80207498:	81bfff04 	addi	r6,r16,-4
8020749c:	01000904 	movi	r4,36
802074a0:	18800315 	stw	r2,12(r3)
802074a4:	10c00215 	stw	r3,8(r2)
802074a8:	b0c00217 	ldw	r3,8(r22)
802074ac:	b0800317 	ldw	r2,12(r22)
802074b0:	b4800204 	addi	r18,r22,8
802074b4:	18800315 	stw	r2,12(r3)
802074b8:	10c00215 	stw	r3,8(r2)
802074bc:	21801b36 	bltu	r4,r6,8020752c <_realloc_r+0x2f8>
802074c0:	008004c4 	movi	r2,19
802074c4:	1180352e 	bgeu	r2,r6,8020759c <_realloc_r+0x368>
802074c8:	a8800017 	ldw	r2,0(r21)
802074cc:	b0800215 	stw	r2,8(r22)
802074d0:	a8800117 	ldw	r2,4(r21)
802074d4:	b0800315 	stw	r2,12(r22)
802074d8:	008006c4 	movi	r2,27
802074dc:	11807f36 	bltu	r2,r6,802076dc <_realloc_r+0x4a8>
802074e0:	b0800404 	addi	r2,r22,16
802074e4:	ad400204 	addi	r21,r21,8
802074e8:	00002d06 	br	802075a0 <_realloc_r+0x36c>
802074ec:	adbffe17 	ldw	r22,-8(r21)
802074f0:	00bfff04 	movi	r2,-4
802074f4:	9dadc83a 	sub	r22,r19,r22
802074f8:	b1000117 	ldw	r4,4(r22)
802074fc:	2084703a 	and	r2,r4,r2
80207500:	b03f7726 	beq	r22,zero,802072e0 <__reset+0xfa1e72e0>
80207504:	80af883a 	add	r23,r16,r2
80207508:	b8ff7516 	blt	r23,r3,802072e0 <__reset+0xfa1e72e0>
8020750c:	b0800317 	ldw	r2,12(r22)
80207510:	b0c00217 	ldw	r3,8(r22)
80207514:	81bfff04 	addi	r6,r16,-4
80207518:	01000904 	movi	r4,36
8020751c:	18800315 	stw	r2,12(r3)
80207520:	10c00215 	stw	r3,8(r2)
80207524:	b4800204 	addi	r18,r22,8
80207528:	21bfe52e 	bgeu	r4,r6,802074c0 <__reset+0xfa1e74c0>
8020752c:	a80b883a 	mov	r5,r21
80207530:	9009883a 	mov	r4,r18
80207534:	0205fb40 	call	80205fb4 <memmove>
80207538:	b821883a 	mov	r16,r23
8020753c:	b027883a 	mov	r19,r22
80207540:	003f8a06 	br	8020736c <__reset+0xfa1e736c>
80207544:	300b883a 	mov	r5,r6
80207548:	dfc00917 	ldw	ra,36(sp)
8020754c:	df000817 	ldw	fp,32(sp)
80207550:	ddc00717 	ldw	r23,28(sp)
80207554:	dd800617 	ldw	r22,24(sp)
80207558:	dd400517 	ldw	r21,20(sp)
8020755c:	dd000417 	ldw	r20,16(sp)
80207560:	dcc00317 	ldw	r19,12(sp)
80207564:	dc800217 	ldw	r18,8(sp)
80207568:	dc400117 	ldw	r17,4(sp)
8020756c:	dc000017 	ldw	r16,0(sp)
80207570:	dec00a04 	addi	sp,sp,40
80207574:	020557c1 	jmpi	8020557c <_malloc_r>
80207578:	a8c00017 	ldw	r3,0(r21)
8020757c:	90c00015 	stw	r3,0(r18)
80207580:	a8c00117 	ldw	r3,4(r21)
80207584:	90c00115 	stw	r3,4(r18)
80207588:	00c006c4 	movi	r3,27
8020758c:	19804536 	bltu	r3,r6,802076a4 <_realloc_r+0x470>
80207590:	90800204 	addi	r2,r18,8
80207594:	a8c00204 	addi	r3,r21,8
80207598:	003f6306 	br	80207328 <__reset+0xfa1e7328>
8020759c:	9005883a 	mov	r2,r18
802075a0:	a8c00017 	ldw	r3,0(r21)
802075a4:	b821883a 	mov	r16,r23
802075a8:	b027883a 	mov	r19,r22
802075ac:	10c00015 	stw	r3,0(r2)
802075b0:	a8c00117 	ldw	r3,4(r21)
802075b4:	10c00115 	stw	r3,4(r2)
802075b8:	a8c00217 	ldw	r3,8(r21)
802075bc:	10c00215 	stw	r3,8(r2)
802075c0:	003f6a06 	br	8020736c <__reset+0xfa1e736c>
802075c4:	9c67883a 	add	r19,r19,r17
802075c8:	4445c83a 	sub	r2,r8,r17
802075cc:	e4c00215 	stw	r19,8(fp)
802075d0:	10800054 	ori	r2,r2,1
802075d4:	98800115 	stw	r2,4(r19)
802075d8:	a8bfff17 	ldw	r2,-4(r21)
802075dc:	a009883a 	mov	r4,r20
802075e0:	1080004c 	andi	r2,r2,1
802075e4:	1462b03a 	or	r17,r2,r17
802075e8:	ac7fff15 	stw	r17,-4(r21)
802075ec:	020d1740 	call	8020d174 <__malloc_unlock>
802075f0:	a805883a 	mov	r2,r21
802075f4:	003f6b06 	br	802073a4 <__reset+0xfa1e73a4>
802075f8:	a80b883a 	mov	r5,r21
802075fc:	9009883a 	mov	r4,r18
80207600:	0205fb40 	call	80205fb4 <memmove>
80207604:	003f4e06 	br	80207340 <__reset+0xfa1e7340>
80207608:	89000404 	addi	r4,r17,16
8020760c:	b93fbc16 	blt	r23,r4,80207500 <__reset+0xfa1e7500>
80207610:	b0800317 	ldw	r2,12(r22)
80207614:	b0c00217 	ldw	r3,8(r22)
80207618:	81bfff04 	addi	r6,r16,-4
8020761c:	01000904 	movi	r4,36
80207620:	18800315 	stw	r2,12(r3)
80207624:	10c00215 	stw	r3,8(r2)
80207628:	b4800204 	addi	r18,r22,8
8020762c:	21804336 	bltu	r4,r6,8020773c <_realloc_r+0x508>
80207630:	008004c4 	movi	r2,19
80207634:	11803f2e 	bgeu	r2,r6,80207734 <_realloc_r+0x500>
80207638:	a8800017 	ldw	r2,0(r21)
8020763c:	b0800215 	stw	r2,8(r22)
80207640:	a8800117 	ldw	r2,4(r21)
80207644:	b0800315 	stw	r2,12(r22)
80207648:	008006c4 	movi	r2,27
8020764c:	11803f36 	bltu	r2,r6,8020774c <_realloc_r+0x518>
80207650:	b0800404 	addi	r2,r22,16
80207654:	ad400204 	addi	r21,r21,8
80207658:	a8c00017 	ldw	r3,0(r21)
8020765c:	10c00015 	stw	r3,0(r2)
80207660:	a8c00117 	ldw	r3,4(r21)
80207664:	10c00115 	stw	r3,4(r2)
80207668:	a8c00217 	ldw	r3,8(r21)
8020766c:	10c00215 	stw	r3,8(r2)
80207670:	b447883a 	add	r3,r22,r17
80207674:	bc45c83a 	sub	r2,r23,r17
80207678:	e0c00215 	stw	r3,8(fp)
8020767c:	10800054 	ori	r2,r2,1
80207680:	18800115 	stw	r2,4(r3)
80207684:	b0800117 	ldw	r2,4(r22)
80207688:	a009883a 	mov	r4,r20
8020768c:	1080004c 	andi	r2,r2,1
80207690:	1462b03a 	or	r17,r2,r17
80207694:	b4400115 	stw	r17,4(r22)
80207698:	020d1740 	call	8020d174 <__malloc_unlock>
8020769c:	9005883a 	mov	r2,r18
802076a0:	003f4006 	br	802073a4 <__reset+0xfa1e73a4>
802076a4:	a8c00217 	ldw	r3,8(r21)
802076a8:	90c00215 	stw	r3,8(r18)
802076ac:	a8c00317 	ldw	r3,12(r21)
802076b0:	90c00315 	stw	r3,12(r18)
802076b4:	30801126 	beq	r6,r2,802076fc <_realloc_r+0x4c8>
802076b8:	90800404 	addi	r2,r18,16
802076bc:	a8c00404 	addi	r3,r21,16
802076c0:	003f1906 	br	80207328 <__reset+0xfa1e7328>
802076c4:	90ffff17 	ldw	r3,-4(r18)
802076c8:	00bfff04 	movi	r2,-4
802076cc:	a825883a 	mov	r18,r21
802076d0:	1884703a 	and	r2,r3,r2
802076d4:	80a1883a 	add	r16,r16,r2
802076d8:	003f2406 	br	8020736c <__reset+0xfa1e736c>
802076dc:	a8800217 	ldw	r2,8(r21)
802076e0:	b0800415 	stw	r2,16(r22)
802076e4:	a8800317 	ldw	r2,12(r21)
802076e8:	b0800515 	stw	r2,20(r22)
802076ec:	31000a26 	beq	r6,r4,80207718 <_realloc_r+0x4e4>
802076f0:	b0800604 	addi	r2,r22,24
802076f4:	ad400404 	addi	r21,r21,16
802076f8:	003fa906 	br	802075a0 <__reset+0xfa1e75a0>
802076fc:	a9000417 	ldw	r4,16(r21)
80207700:	90800604 	addi	r2,r18,24
80207704:	a8c00604 	addi	r3,r21,24
80207708:	91000415 	stw	r4,16(r18)
8020770c:	a9000517 	ldw	r4,20(r21)
80207710:	91000515 	stw	r4,20(r18)
80207714:	003f0406 	br	80207328 <__reset+0xfa1e7328>
80207718:	a8c00417 	ldw	r3,16(r21)
8020771c:	ad400604 	addi	r21,r21,24
80207720:	b0800804 	addi	r2,r22,32
80207724:	b0c00615 	stw	r3,24(r22)
80207728:	a8ffff17 	ldw	r3,-4(r21)
8020772c:	b0c00715 	stw	r3,28(r22)
80207730:	003f9b06 	br	802075a0 <__reset+0xfa1e75a0>
80207734:	9005883a 	mov	r2,r18
80207738:	003fc706 	br	80207658 <__reset+0xfa1e7658>
8020773c:	a80b883a 	mov	r5,r21
80207740:	9009883a 	mov	r4,r18
80207744:	0205fb40 	call	80205fb4 <memmove>
80207748:	003fc906 	br	80207670 <__reset+0xfa1e7670>
8020774c:	a8800217 	ldw	r2,8(r21)
80207750:	b0800415 	stw	r2,16(r22)
80207754:	a8800317 	ldw	r2,12(r21)
80207758:	b0800515 	stw	r2,20(r22)
8020775c:	31000726 	beq	r6,r4,8020777c <_realloc_r+0x548>
80207760:	b0800604 	addi	r2,r22,24
80207764:	ad400404 	addi	r21,r21,16
80207768:	003fbb06 	br	80207658 <__reset+0xfa1e7658>
8020776c:	a009883a 	mov	r4,r20
80207770:	020d1740 	call	8020d174 <__malloc_unlock>
80207774:	0005883a 	mov	r2,zero
80207778:	003f0a06 	br	802073a4 <__reset+0xfa1e73a4>
8020777c:	a8c00417 	ldw	r3,16(r21)
80207780:	ad400604 	addi	r21,r21,24
80207784:	b0800804 	addi	r2,r22,32
80207788:	b0c00615 	stw	r3,24(r22)
8020778c:	a8ffff17 	ldw	r3,-4(r21)
80207790:	b0c00715 	stw	r3,28(r22)
80207794:	003fb006 	br	80207658 <__reset+0xfa1e7658>

80207798 <__fpclassifyd>:
80207798:	00a00034 	movhi	r2,32768
8020779c:	10bfffc4 	addi	r2,r2,-1
802077a0:	2884703a 	and	r2,r5,r2
802077a4:	10000726 	beq	r2,zero,802077c4 <__fpclassifyd+0x2c>
802077a8:	00fffc34 	movhi	r3,65520
802077ac:	019ff834 	movhi	r6,32736
802077b0:	28c7883a 	add	r3,r5,r3
802077b4:	31bfffc4 	addi	r6,r6,-1
802077b8:	30c00536 	bltu	r6,r3,802077d0 <__fpclassifyd+0x38>
802077bc:	00800104 	movi	r2,4
802077c0:	f800283a 	ret
802077c4:	2000021e 	bne	r4,zero,802077d0 <__fpclassifyd+0x38>
802077c8:	00800084 	movi	r2,2
802077cc:	f800283a 	ret
802077d0:	00dffc34 	movhi	r3,32752
802077d4:	019ff834 	movhi	r6,32736
802077d8:	28cb883a 	add	r5,r5,r3
802077dc:	31bfffc4 	addi	r6,r6,-1
802077e0:	317ff62e 	bgeu	r6,r5,802077bc <__reset+0xfa1e77bc>
802077e4:	01400434 	movhi	r5,16
802077e8:	297fffc4 	addi	r5,r5,-1
802077ec:	28800236 	bltu	r5,r2,802077f8 <__fpclassifyd+0x60>
802077f0:	008000c4 	movi	r2,3
802077f4:	f800283a 	ret
802077f8:	10c00226 	beq	r2,r3,80207804 <__fpclassifyd+0x6c>
802077fc:	0005883a 	mov	r2,zero
80207800:	f800283a 	ret
80207804:	2005003a 	cmpeq	r2,r4,zero
80207808:	f800283a 	ret

8020780c <_sbrk_r>:
8020780c:	defffd04 	addi	sp,sp,-12
80207810:	dc000015 	stw	r16,0(sp)
80207814:	04200874 	movhi	r16,32801
80207818:	dc400115 	stw	r17,4(sp)
8020781c:	8410cb04 	addi	r16,r16,17196
80207820:	2023883a 	mov	r17,r4
80207824:	2809883a 	mov	r4,r5
80207828:	dfc00215 	stw	ra,8(sp)
8020782c:	80000015 	stw	zero,0(r16)
80207830:	020d3340 	call	8020d334 <sbrk>
80207834:	00ffffc4 	movi	r3,-1
80207838:	10c00526 	beq	r2,r3,80207850 <_sbrk_r+0x44>
8020783c:	dfc00217 	ldw	ra,8(sp)
80207840:	dc400117 	ldw	r17,4(sp)
80207844:	dc000017 	ldw	r16,0(sp)
80207848:	dec00304 	addi	sp,sp,12
8020784c:	f800283a 	ret
80207850:	80c00017 	ldw	r3,0(r16)
80207854:	183ff926 	beq	r3,zero,8020783c <__reset+0xfa1e783c>
80207858:	88c00015 	stw	r3,0(r17)
8020785c:	003ff706 	br	8020783c <__reset+0xfa1e783c>

80207860 <__sread>:
80207860:	defffe04 	addi	sp,sp,-8
80207864:	dc000015 	stw	r16,0(sp)
80207868:	2821883a 	mov	r16,r5
8020786c:	2940038f 	ldh	r5,14(r5)
80207870:	dfc00115 	stw	ra,4(sp)
80207874:	02096540 	call	80209654 <_read_r>
80207878:	10000716 	blt	r2,zero,80207898 <__sread+0x38>
8020787c:	80c01417 	ldw	r3,80(r16)
80207880:	1887883a 	add	r3,r3,r2
80207884:	80c01415 	stw	r3,80(r16)
80207888:	dfc00117 	ldw	ra,4(sp)
8020788c:	dc000017 	ldw	r16,0(sp)
80207890:	dec00204 	addi	sp,sp,8
80207894:	f800283a 	ret
80207898:	80c0030b 	ldhu	r3,12(r16)
8020789c:	18fbffcc 	andi	r3,r3,61439
802078a0:	80c0030d 	sth	r3,12(r16)
802078a4:	dfc00117 	ldw	ra,4(sp)
802078a8:	dc000017 	ldw	r16,0(sp)
802078ac:	dec00204 	addi	sp,sp,8
802078b0:	f800283a 	ret

802078b4 <__seofread>:
802078b4:	0005883a 	mov	r2,zero
802078b8:	f800283a 	ret

802078bc <__swrite>:
802078bc:	2880030b 	ldhu	r2,12(r5)
802078c0:	defffb04 	addi	sp,sp,-20
802078c4:	dcc00315 	stw	r19,12(sp)
802078c8:	dc800215 	stw	r18,8(sp)
802078cc:	dc400115 	stw	r17,4(sp)
802078d0:	dc000015 	stw	r16,0(sp)
802078d4:	dfc00415 	stw	ra,16(sp)
802078d8:	10c0400c 	andi	r3,r2,256
802078dc:	2821883a 	mov	r16,r5
802078e0:	2023883a 	mov	r17,r4
802078e4:	3025883a 	mov	r18,r6
802078e8:	3827883a 	mov	r19,r7
802078ec:	18000526 	beq	r3,zero,80207904 <__swrite+0x48>
802078f0:	2940038f 	ldh	r5,14(r5)
802078f4:	01c00084 	movi	r7,2
802078f8:	000d883a 	mov	r6,zero
802078fc:	02095f40 	call	802095f4 <_lseek_r>
80207900:	8080030b 	ldhu	r2,12(r16)
80207904:	8140038f 	ldh	r5,14(r16)
80207908:	10bbffcc 	andi	r2,r2,61439
8020790c:	980f883a 	mov	r7,r19
80207910:	900d883a 	mov	r6,r18
80207914:	8809883a 	mov	r4,r17
80207918:	8080030d 	sth	r2,12(r16)
8020791c:	dfc00417 	ldw	ra,16(sp)
80207920:	dcc00317 	ldw	r19,12(sp)
80207924:	dc800217 	ldw	r18,8(sp)
80207928:	dc400117 	ldw	r17,4(sp)
8020792c:	dc000017 	ldw	r16,0(sp)
80207930:	dec00504 	addi	sp,sp,20
80207934:	02090c01 	jmpi	802090c0 <_write_r>

80207938 <__sseek>:
80207938:	defffe04 	addi	sp,sp,-8
8020793c:	dc000015 	stw	r16,0(sp)
80207940:	2821883a 	mov	r16,r5
80207944:	2940038f 	ldh	r5,14(r5)
80207948:	dfc00115 	stw	ra,4(sp)
8020794c:	02095f40 	call	802095f4 <_lseek_r>
80207950:	00ffffc4 	movi	r3,-1
80207954:	10c00826 	beq	r2,r3,80207978 <__sseek+0x40>
80207958:	80c0030b 	ldhu	r3,12(r16)
8020795c:	80801415 	stw	r2,80(r16)
80207960:	18c40014 	ori	r3,r3,4096
80207964:	80c0030d 	sth	r3,12(r16)
80207968:	dfc00117 	ldw	ra,4(sp)
8020796c:	dc000017 	ldw	r16,0(sp)
80207970:	dec00204 	addi	sp,sp,8
80207974:	f800283a 	ret
80207978:	80c0030b 	ldhu	r3,12(r16)
8020797c:	18fbffcc 	andi	r3,r3,61439
80207980:	80c0030d 	sth	r3,12(r16)
80207984:	dfc00117 	ldw	ra,4(sp)
80207988:	dc000017 	ldw	r16,0(sp)
8020798c:	dec00204 	addi	sp,sp,8
80207990:	f800283a 	ret

80207994 <__sclose>:
80207994:	2940038f 	ldh	r5,14(r5)
80207998:	02091201 	jmpi	80209120 <_close_r>

8020799c <strcmp>:
8020799c:	2144b03a 	or	r2,r4,r5
802079a0:	108000cc 	andi	r2,r2,3
802079a4:	1000171e 	bne	r2,zero,80207a04 <strcmp+0x68>
802079a8:	20800017 	ldw	r2,0(r4)
802079ac:	28c00017 	ldw	r3,0(r5)
802079b0:	10c0141e 	bne	r2,r3,80207a04 <strcmp+0x68>
802079b4:	027fbff4 	movhi	r9,65279
802079b8:	4a7fbfc4 	addi	r9,r9,-257
802079bc:	0086303a 	nor	r3,zero,r2
802079c0:	02202074 	movhi	r8,32897
802079c4:	1245883a 	add	r2,r2,r9
802079c8:	42202004 	addi	r8,r8,-32640
802079cc:	10c4703a 	and	r2,r2,r3
802079d0:	1204703a 	and	r2,r2,r8
802079d4:	10000226 	beq	r2,zero,802079e0 <strcmp+0x44>
802079d8:	00002306 	br	80207a68 <strcmp+0xcc>
802079dc:	1000221e 	bne	r2,zero,80207a68 <strcmp+0xcc>
802079e0:	21000104 	addi	r4,r4,4
802079e4:	20c00017 	ldw	r3,0(r4)
802079e8:	29400104 	addi	r5,r5,4
802079ec:	29800017 	ldw	r6,0(r5)
802079f0:	1a4f883a 	add	r7,r3,r9
802079f4:	00c4303a 	nor	r2,zero,r3
802079f8:	3884703a 	and	r2,r7,r2
802079fc:	1204703a 	and	r2,r2,r8
80207a00:	19bff626 	beq	r3,r6,802079dc <__reset+0xfa1e79dc>
80207a04:	20800003 	ldbu	r2,0(r4)
80207a08:	10c03fcc 	andi	r3,r2,255
80207a0c:	18c0201c 	xori	r3,r3,128
80207a10:	18ffe004 	addi	r3,r3,-128
80207a14:	18000c26 	beq	r3,zero,80207a48 <strcmp+0xac>
80207a18:	29800007 	ldb	r6,0(r5)
80207a1c:	19800326 	beq	r3,r6,80207a2c <strcmp+0x90>
80207a20:	00001306 	br	80207a70 <strcmp+0xd4>
80207a24:	29800007 	ldb	r6,0(r5)
80207a28:	11800b1e 	bne	r2,r6,80207a58 <strcmp+0xbc>
80207a2c:	21000044 	addi	r4,r4,1
80207a30:	20c00003 	ldbu	r3,0(r4)
80207a34:	29400044 	addi	r5,r5,1
80207a38:	18803fcc 	andi	r2,r3,255
80207a3c:	1080201c 	xori	r2,r2,128
80207a40:	10bfe004 	addi	r2,r2,-128
80207a44:	103ff71e 	bne	r2,zero,80207a24 <__reset+0xfa1e7a24>
80207a48:	0007883a 	mov	r3,zero
80207a4c:	28800003 	ldbu	r2,0(r5)
80207a50:	1885c83a 	sub	r2,r3,r2
80207a54:	f800283a 	ret
80207a58:	28800003 	ldbu	r2,0(r5)
80207a5c:	18c03fcc 	andi	r3,r3,255
80207a60:	1885c83a 	sub	r2,r3,r2
80207a64:	f800283a 	ret
80207a68:	0005883a 	mov	r2,zero
80207a6c:	f800283a 	ret
80207a70:	10c03fcc 	andi	r3,r2,255
80207a74:	003ff506 	br	80207a4c <__reset+0xfa1e7a4c>

80207a78 <__sprint_r.part.0>:
80207a78:	28801917 	ldw	r2,100(r5)
80207a7c:	defff604 	addi	sp,sp,-40
80207a80:	dd400515 	stw	r21,20(sp)
80207a84:	dfc00915 	stw	ra,36(sp)
80207a88:	df000815 	stw	fp,32(sp)
80207a8c:	ddc00715 	stw	r23,28(sp)
80207a90:	dd800615 	stw	r22,24(sp)
80207a94:	dd000415 	stw	r20,16(sp)
80207a98:	dcc00315 	stw	r19,12(sp)
80207a9c:	dc800215 	stw	r18,8(sp)
80207aa0:	dc400115 	stw	r17,4(sp)
80207aa4:	dc000015 	stw	r16,0(sp)
80207aa8:	1088000c 	andi	r2,r2,8192
80207aac:	302b883a 	mov	r21,r6
80207ab0:	10002e26 	beq	r2,zero,80207b6c <__sprint_r.part.0+0xf4>
80207ab4:	30800217 	ldw	r2,8(r6)
80207ab8:	35800017 	ldw	r22,0(r6)
80207abc:	10002926 	beq	r2,zero,80207b64 <__sprint_r.part.0+0xec>
80207ac0:	2827883a 	mov	r19,r5
80207ac4:	2029883a 	mov	r20,r4
80207ac8:	b5c00104 	addi	r23,r22,4
80207acc:	04bfffc4 	movi	r18,-1
80207ad0:	bc400017 	ldw	r17,0(r23)
80207ad4:	b4000017 	ldw	r16,0(r22)
80207ad8:	0039883a 	mov	fp,zero
80207adc:	8822d0ba 	srli	r17,r17,2
80207ae0:	8800031e 	bne	r17,zero,80207af0 <__sprint_r.part.0+0x78>
80207ae4:	00001806 	br	80207b48 <__sprint_r.part.0+0xd0>
80207ae8:	84000104 	addi	r16,r16,4
80207aec:	8f001526 	beq	r17,fp,80207b44 <__sprint_r.part.0+0xcc>
80207af0:	81400017 	ldw	r5,0(r16)
80207af4:	980d883a 	mov	r6,r19
80207af8:	a009883a 	mov	r4,r20
80207afc:	02094a00 	call	802094a0 <_fputwc_r>
80207b00:	e7000044 	addi	fp,fp,1
80207b04:	14bff81e 	bne	r2,r18,80207ae8 <__reset+0xfa1e7ae8>
80207b08:	9005883a 	mov	r2,r18
80207b0c:	a8000215 	stw	zero,8(r21)
80207b10:	a8000115 	stw	zero,4(r21)
80207b14:	dfc00917 	ldw	ra,36(sp)
80207b18:	df000817 	ldw	fp,32(sp)
80207b1c:	ddc00717 	ldw	r23,28(sp)
80207b20:	dd800617 	ldw	r22,24(sp)
80207b24:	dd400517 	ldw	r21,20(sp)
80207b28:	dd000417 	ldw	r20,16(sp)
80207b2c:	dcc00317 	ldw	r19,12(sp)
80207b30:	dc800217 	ldw	r18,8(sp)
80207b34:	dc400117 	ldw	r17,4(sp)
80207b38:	dc000017 	ldw	r16,0(sp)
80207b3c:	dec00a04 	addi	sp,sp,40
80207b40:	f800283a 	ret
80207b44:	a8800217 	ldw	r2,8(r21)
80207b48:	8c63883a 	add	r17,r17,r17
80207b4c:	8c63883a 	add	r17,r17,r17
80207b50:	1445c83a 	sub	r2,r2,r17
80207b54:	a8800215 	stw	r2,8(r21)
80207b58:	b5800204 	addi	r22,r22,8
80207b5c:	bdc00204 	addi	r23,r23,8
80207b60:	103fdb1e 	bne	r2,zero,80207ad0 <__reset+0xfa1e7ad0>
80207b64:	0005883a 	mov	r2,zero
80207b68:	003fe806 	br	80207b0c <__reset+0xfa1e7b0c>
80207b6c:	0204ca00 	call	80204ca0 <__sfvwrite_r>
80207b70:	003fe606 	br	80207b0c <__reset+0xfa1e7b0c>

80207b74 <__sprint_r>:
80207b74:	30c00217 	ldw	r3,8(r6)
80207b78:	18000126 	beq	r3,zero,80207b80 <__sprint_r+0xc>
80207b7c:	0207a781 	jmpi	80207a78 <__sprint_r.part.0>
80207b80:	30000115 	stw	zero,4(r6)
80207b84:	0005883a 	mov	r2,zero
80207b88:	f800283a 	ret

80207b8c <___vfiprintf_internal_r>:
80207b8c:	deffc904 	addi	sp,sp,-220
80207b90:	df003515 	stw	fp,212(sp)
80207b94:	dd003115 	stw	r20,196(sp)
80207b98:	dfc03615 	stw	ra,216(sp)
80207b9c:	ddc03415 	stw	r23,208(sp)
80207ba0:	dd803315 	stw	r22,204(sp)
80207ba4:	dd403215 	stw	r21,200(sp)
80207ba8:	dcc03015 	stw	r19,192(sp)
80207bac:	dc802f15 	stw	r18,188(sp)
80207bb0:	dc402e15 	stw	r17,184(sp)
80207bb4:	dc002d15 	stw	r16,180(sp)
80207bb8:	d9002015 	stw	r4,128(sp)
80207bbc:	d9c02215 	stw	r7,136(sp)
80207bc0:	2829883a 	mov	r20,r5
80207bc4:	3039883a 	mov	fp,r6
80207bc8:	20000226 	beq	r4,zero,80207bd4 <___vfiprintf_internal_r+0x48>
80207bcc:	20800e17 	ldw	r2,56(r4)
80207bd0:	1000cf26 	beq	r2,zero,80207f10 <___vfiprintf_internal_r+0x384>
80207bd4:	a080030b 	ldhu	r2,12(r20)
80207bd8:	10c8000c 	andi	r3,r2,8192
80207bdc:	1800061e 	bne	r3,zero,80207bf8 <___vfiprintf_internal_r+0x6c>
80207be0:	a1001917 	ldw	r4,100(r20)
80207be4:	00f7ffc4 	movi	r3,-8193
80207be8:	10880014 	ori	r2,r2,8192
80207bec:	20c6703a 	and	r3,r4,r3
80207bf0:	a080030d 	sth	r2,12(r20)
80207bf4:	a0c01915 	stw	r3,100(r20)
80207bf8:	10c0020c 	andi	r3,r2,8
80207bfc:	1800a926 	beq	r3,zero,80207ea4 <___vfiprintf_internal_r+0x318>
80207c00:	a0c00417 	ldw	r3,16(r20)
80207c04:	1800a726 	beq	r3,zero,80207ea4 <___vfiprintf_internal_r+0x318>
80207c08:	1080068c 	andi	r2,r2,26
80207c0c:	00c00284 	movi	r3,10
80207c10:	10c0ac26 	beq	r2,r3,80207ec4 <___vfiprintf_internal_r+0x338>
80207c14:	da801a04 	addi	r10,sp,104
80207c18:	da801e15 	stw	r10,120(sp)
80207c1c:	d8801e17 	ldw	r2,120(sp)
80207c20:	da8019c4 	addi	r10,sp,103
80207c24:	05a00874 	movhi	r22,32801
80207c28:	05e00874 	movhi	r23,32801
80207c2c:	da801f15 	stw	r10,124(sp)
80207c30:	1295c83a 	sub	r10,r2,r10
80207c34:	b588aa04 	addi	r22,r22,8872
80207c38:	bdc8a604 	addi	r23,r23,8856
80207c3c:	dec01a15 	stw	sp,104(sp)
80207c40:	d8001c15 	stw	zero,112(sp)
80207c44:	d8001b15 	stw	zero,108(sp)
80207c48:	d8002615 	stw	zero,152(sp)
80207c4c:	d8002315 	stw	zero,140(sp)
80207c50:	da802715 	stw	r10,156(sp)
80207c54:	d811883a 	mov	r8,sp
80207c58:	dd002115 	stw	r20,132(sp)
80207c5c:	e021883a 	mov	r16,fp
80207c60:	80800007 	ldb	r2,0(r16)
80207c64:	1003ea26 	beq	r2,zero,80208c10 <___vfiprintf_internal_r+0x1084>
80207c68:	00c00944 	movi	r3,37
80207c6c:	8025883a 	mov	r18,r16
80207c70:	10c0021e 	bne	r2,r3,80207c7c <___vfiprintf_internal_r+0xf0>
80207c74:	00001606 	br	80207cd0 <___vfiprintf_internal_r+0x144>
80207c78:	10c00326 	beq	r2,r3,80207c88 <___vfiprintf_internal_r+0xfc>
80207c7c:	94800044 	addi	r18,r18,1
80207c80:	90800007 	ldb	r2,0(r18)
80207c84:	103ffc1e 	bne	r2,zero,80207c78 <__reset+0xfa1e7c78>
80207c88:	9423c83a 	sub	r17,r18,r16
80207c8c:	88001026 	beq	r17,zero,80207cd0 <___vfiprintf_internal_r+0x144>
80207c90:	d8c01c17 	ldw	r3,112(sp)
80207c94:	d8801b17 	ldw	r2,108(sp)
80207c98:	44000015 	stw	r16,0(r8)
80207c9c:	88c7883a 	add	r3,r17,r3
80207ca0:	10800044 	addi	r2,r2,1
80207ca4:	44400115 	stw	r17,4(r8)
80207ca8:	d8c01c15 	stw	r3,112(sp)
80207cac:	d8801b15 	stw	r2,108(sp)
80207cb0:	010001c4 	movi	r4,7
80207cb4:	2080760e 	bge	r4,r2,80207e90 <___vfiprintf_internal_r+0x304>
80207cb8:	1803821e 	bne	r3,zero,80208ac4 <___vfiprintf_internal_r+0xf38>
80207cbc:	da802317 	ldw	r10,140(sp)
80207cc0:	d8001b15 	stw	zero,108(sp)
80207cc4:	d811883a 	mov	r8,sp
80207cc8:	5455883a 	add	r10,r10,r17
80207ccc:	da802315 	stw	r10,140(sp)
80207cd0:	90800007 	ldb	r2,0(r18)
80207cd4:	10044626 	beq	r2,zero,80208df0 <___vfiprintf_internal_r+0x1264>
80207cd8:	90c00047 	ldb	r3,1(r18)
80207cdc:	94000044 	addi	r16,r18,1
80207ce0:	d8001d85 	stb	zero,118(sp)
80207ce4:	0009883a 	mov	r4,zero
80207ce8:	000f883a 	mov	r7,zero
80207cec:	027fffc4 	movi	r9,-1
80207cf0:	0023883a 	mov	r17,zero
80207cf4:	0029883a 	mov	r20,zero
80207cf8:	01401604 	movi	r5,88
80207cfc:	01800244 	movi	r6,9
80207d00:	03400a84 	movi	r13,42
80207d04:	03001b04 	movi	r12,108
80207d08:	84000044 	addi	r16,r16,1
80207d0c:	18bff804 	addi	r2,r3,-32
80207d10:	28827336 	bltu	r5,r2,802086e0 <___vfiprintf_internal_r+0xb54>
80207d14:	100490ba 	slli	r2,r2,2
80207d18:	02a00834 	movhi	r10,32800
80207d1c:	529f4b04 	addi	r10,r10,32044
80207d20:	1285883a 	add	r2,r2,r10
80207d24:	10800017 	ldw	r2,0(r2)
80207d28:	1000683a 	jmp	r2
80207d2c:	80208414 	ori	zero,r16,33296
80207d30:	802086e0 	cmpeqi	zero,r16,-32229
80207d34:	802086e0 	cmpeqi	zero,r16,-32229
80207d38:	80208434 	orhi	zero,r16,33296
80207d3c:	802086e0 	cmpeqi	zero,r16,-32229
80207d40:	802086e0 	cmpeqi	zero,r16,-32229
80207d44:	802086e0 	cmpeqi	zero,r16,-32229
80207d48:	802086e0 	cmpeqi	zero,r16,-32229
80207d4c:	802086e0 	cmpeqi	zero,r16,-32229
80207d50:	802086e0 	cmpeqi	zero,r16,-32229
80207d54:	8020861c 	xori	zero,r16,33304
80207d58:	80208638 	rdprs	zero,r16,-32232
80207d5c:	802086e0 	cmpeqi	zero,r16,-32229
80207d60:	80207f20 	cmpeqi	zero,r16,-32260
80207d64:	80208648 	cmpgei	zero,r16,-32231
80207d68:	802086e0 	cmpeqi	zero,r16,-32229
80207d6c:	80208440 	call	88020844 <__reset+0x2000844>
80207d70:	8020844c 	andi	zero,r16,33297
80207d74:	8020844c 	andi	zero,r16,33297
80207d78:	8020844c 	andi	zero,r16,33297
80207d7c:	8020844c 	andi	zero,r16,33297
80207d80:	8020844c 	andi	zero,r16,33297
80207d84:	8020844c 	andi	zero,r16,33297
80207d88:	8020844c 	andi	zero,r16,33297
80207d8c:	8020844c 	andi	zero,r16,33297
80207d90:	8020844c 	andi	zero,r16,33297
80207d94:	802086e0 	cmpeqi	zero,r16,-32229
80207d98:	802086e0 	cmpeqi	zero,r16,-32229
80207d9c:	802086e0 	cmpeqi	zero,r16,-32229
80207da0:	802086e0 	cmpeqi	zero,r16,-32229
80207da4:	802086e0 	cmpeqi	zero,r16,-32229
80207da8:	802086e0 	cmpeqi	zero,r16,-32229
80207dac:	802086e0 	cmpeqi	zero,r16,-32229
80207db0:	802086e0 	cmpeqi	zero,r16,-32229
80207db4:	802086e0 	cmpeqi	zero,r16,-32229
80207db8:	802086e0 	cmpeqi	zero,r16,-32229
80207dbc:	80208478 	rdprs	zero,r16,-32239
80207dc0:	802086e0 	cmpeqi	zero,r16,-32229
80207dc4:	802086e0 	cmpeqi	zero,r16,-32229
80207dc8:	802086e0 	cmpeqi	zero,r16,-32229
80207dcc:	802086e0 	cmpeqi	zero,r16,-32229
80207dd0:	802086e0 	cmpeqi	zero,r16,-32229
80207dd4:	802086e0 	cmpeqi	zero,r16,-32229
80207dd8:	802086e0 	cmpeqi	zero,r16,-32229
80207ddc:	802086e0 	cmpeqi	zero,r16,-32229
80207de0:	802086e0 	cmpeqi	zero,r16,-32229
80207de4:	802086e0 	cmpeqi	zero,r16,-32229
80207de8:	802084b0 	cmpltui	zero,r16,33298
80207dec:	802086e0 	cmpeqi	zero,r16,-32229
80207df0:	802086e0 	cmpeqi	zero,r16,-32229
80207df4:	802086e0 	cmpeqi	zero,r16,-32229
80207df8:	802086e0 	cmpeqi	zero,r16,-32229
80207dfc:	802086e0 	cmpeqi	zero,r16,-32229
80207e00:	80208508 	cmpgei	zero,r16,-32236
80207e04:	802086e0 	cmpeqi	zero,r16,-32229
80207e08:	802086e0 	cmpeqi	zero,r16,-32229
80207e0c:	80208578 	rdprs	zero,r16,-32235
80207e10:	802086e0 	cmpeqi	zero,r16,-32229
80207e14:	802086e0 	cmpeqi	zero,r16,-32229
80207e18:	802086e0 	cmpeqi	zero,r16,-32229
80207e1c:	802086e0 	cmpeqi	zero,r16,-32229
80207e20:	802086e0 	cmpeqi	zero,r16,-32229
80207e24:	802086e0 	cmpeqi	zero,r16,-32229
80207e28:	802086e0 	cmpeqi	zero,r16,-32229
80207e2c:	802086e0 	cmpeqi	zero,r16,-32229
80207e30:	802086e0 	cmpeqi	zero,r16,-32229
80207e34:	802086e0 	cmpeqi	zero,r16,-32229
80207e38:	80208324 	muli	zero,r16,-32244
80207e3c:	80208350 	cmplti	zero,r16,-32243
80207e40:	802086e0 	cmpeqi	zero,r16,-32229
80207e44:	802086e0 	cmpeqi	zero,r16,-32229
80207e48:	802086e0 	cmpeqi	zero,r16,-32229
80207e4c:	80208688 	cmpgei	zero,r16,-32230
80207e50:	80208350 	cmplti	zero,r16,-32243
80207e54:	802086e0 	cmpeqi	zero,r16,-32229
80207e58:	802086e0 	cmpeqi	zero,r16,-32229
80207e5c:	802081e4 	muli	zero,r16,-32249
80207e60:	802086e0 	cmpeqi	zero,r16,-32229
80207e64:	802081f4 	orhi	zero,r16,33287
80207e68:	80208230 	cmpltui	zero,r16,33288
80207e6c:	80207f2c 	andhi	zero,r16,33276
80207e70:	802081d8 	cmpnei	zero,r16,-32249
80207e74:	802086e0 	cmpeqi	zero,r16,-32229
80207e78:	802085b4 	orhi	zero,r16,33302
80207e7c:	802086e0 	cmpeqi	zero,r16,-32229
80207e80:	8020860c 	andi	zero,r16,33304
80207e84:	802086e0 	cmpeqi	zero,r16,-32229
80207e88:	802086e0 	cmpeqi	zero,r16,-32229
80207e8c:	802082d0 	cmplti	zero,r16,-32245
80207e90:	42000204 	addi	r8,r8,8
80207e94:	da802317 	ldw	r10,140(sp)
80207e98:	5455883a 	add	r10,r10,r17
80207e9c:	da802315 	stw	r10,140(sp)
80207ea0:	003f8b06 	br	80207cd0 <__reset+0xfa1e7cd0>
80207ea4:	d9002017 	ldw	r4,128(sp)
80207ea8:	a00b883a 	mov	r5,r20
80207eac:	02028480 	call	80202848 <__swsetup_r>
80207eb0:	1003b11e 	bne	r2,zero,80208d78 <___vfiprintf_internal_r+0x11ec>
80207eb4:	a080030b 	ldhu	r2,12(r20)
80207eb8:	00c00284 	movi	r3,10
80207ebc:	1080068c 	andi	r2,r2,26
80207ec0:	10ff541e 	bne	r2,r3,80207c14 <__reset+0xfa1e7c14>
80207ec4:	a080038f 	ldh	r2,14(r20)
80207ec8:	103f5216 	blt	r2,zero,80207c14 <__reset+0xfa1e7c14>
80207ecc:	d9c02217 	ldw	r7,136(sp)
80207ed0:	d9002017 	ldw	r4,128(sp)
80207ed4:	e00d883a 	mov	r6,fp
80207ed8:	a00b883a 	mov	r5,r20
80207edc:	02090040 	call	80209004 <__sbprintf>
80207ee0:	dfc03617 	ldw	ra,216(sp)
80207ee4:	df003517 	ldw	fp,212(sp)
80207ee8:	ddc03417 	ldw	r23,208(sp)
80207eec:	dd803317 	ldw	r22,204(sp)
80207ef0:	dd403217 	ldw	r21,200(sp)
80207ef4:	dd003117 	ldw	r20,196(sp)
80207ef8:	dcc03017 	ldw	r19,192(sp)
80207efc:	dc802f17 	ldw	r18,188(sp)
80207f00:	dc402e17 	ldw	r17,184(sp)
80207f04:	dc002d17 	ldw	r16,180(sp)
80207f08:	dec03704 	addi	sp,sp,220
80207f0c:	f800283a 	ret
80207f10:	020481c0 	call	8020481c <__sinit>
80207f14:	003f2f06 	br	80207bd4 <__reset+0xfa1e7bd4>
80207f18:	0463c83a 	sub	r17,zero,r17
80207f1c:	d8802215 	stw	r2,136(sp)
80207f20:	a5000114 	ori	r20,r20,4
80207f24:	80c00007 	ldb	r3,0(r16)
80207f28:	003f7706 	br	80207d08 <__reset+0xfa1e7d08>
80207f2c:	00800c04 	movi	r2,48
80207f30:	da802217 	ldw	r10,136(sp)
80207f34:	d8801d05 	stb	r2,116(sp)
80207f38:	00801e04 	movi	r2,120
80207f3c:	d8801d45 	stb	r2,117(sp)
80207f40:	d8001d85 	stb	zero,118(sp)
80207f44:	50c00104 	addi	r3,r10,4
80207f48:	54800017 	ldw	r18,0(r10)
80207f4c:	0027883a 	mov	r19,zero
80207f50:	a0800094 	ori	r2,r20,2
80207f54:	48030b16 	blt	r9,zero,80208b84 <___vfiprintf_internal_r+0xff8>
80207f58:	00bfdfc4 	movi	r2,-129
80207f5c:	a096703a 	and	r11,r20,r2
80207f60:	d8c02215 	stw	r3,136(sp)
80207f64:	5d000094 	ori	r20,r11,2
80207f68:	90032b1e 	bne	r18,zero,80208c18 <___vfiprintf_internal_r+0x108c>
80207f6c:	00a00874 	movhi	r2,32801
80207f70:	10884504 	addi	r2,r2,8468
80207f74:	d8802615 	stw	r2,152(sp)
80207f78:	0039883a 	mov	fp,zero
80207f7c:	48017b1e 	bne	r9,zero,8020856c <___vfiprintf_internal_r+0x9e0>
80207f80:	0013883a 	mov	r9,zero
80207f84:	0027883a 	mov	r19,zero
80207f88:	dd401a04 	addi	r21,sp,104
80207f8c:	4825883a 	mov	r18,r9
80207f90:	4cc0010e 	bge	r9,r19,80207f98 <___vfiprintf_internal_r+0x40c>
80207f94:	9825883a 	mov	r18,r19
80207f98:	e7003fcc 	andi	fp,fp,255
80207f9c:	e700201c 	xori	fp,fp,128
80207fa0:	e73fe004 	addi	fp,fp,-128
80207fa4:	e0000126 	beq	fp,zero,80207fac <___vfiprintf_internal_r+0x420>
80207fa8:	94800044 	addi	r18,r18,1
80207fac:	a380008c 	andi	r14,r20,2
80207fb0:	70000126 	beq	r14,zero,80207fb8 <___vfiprintf_internal_r+0x42c>
80207fb4:	94800084 	addi	r18,r18,2
80207fb8:	a700210c 	andi	fp,r20,132
80207fbc:	e001df1e 	bne	fp,zero,8020873c <___vfiprintf_internal_r+0xbb0>
80207fc0:	8c87c83a 	sub	r3,r17,r18
80207fc4:	00c1dd0e 	bge	zero,r3,8020873c <___vfiprintf_internal_r+0xbb0>
80207fc8:	01c00404 	movi	r7,16
80207fcc:	d8801c17 	ldw	r2,112(sp)
80207fd0:	38c3ad0e 	bge	r7,r3,80208e88 <___vfiprintf_internal_r+0x12fc>
80207fd4:	02a00874 	movhi	r10,32801
80207fd8:	5288aa04 	addi	r10,r10,8872
80207fdc:	dc002915 	stw	r16,164(sp)
80207fe0:	d9801b17 	ldw	r6,108(sp)
80207fe4:	da802415 	stw	r10,144(sp)
80207fe8:	03c001c4 	movi	r15,7
80207fec:	da402515 	stw	r9,148(sp)
80207ff0:	db802815 	stw	r14,160(sp)
80207ff4:	1821883a 	mov	r16,r3
80207ff8:	00000506 	br	80208010 <___vfiprintf_internal_r+0x484>
80207ffc:	31400084 	addi	r5,r6,2
80208000:	42000204 	addi	r8,r8,8
80208004:	200d883a 	mov	r6,r4
80208008:	843ffc04 	addi	r16,r16,-16
8020800c:	3c000d0e 	bge	r7,r16,80208044 <___vfiprintf_internal_r+0x4b8>
80208010:	10800404 	addi	r2,r2,16
80208014:	31000044 	addi	r4,r6,1
80208018:	45800015 	stw	r22,0(r8)
8020801c:	41c00115 	stw	r7,4(r8)
80208020:	d8801c15 	stw	r2,112(sp)
80208024:	d9001b15 	stw	r4,108(sp)
80208028:	793ff40e 	bge	r15,r4,80207ffc <__reset+0xfa1e7ffc>
8020802c:	1001b51e 	bne	r2,zero,80208704 <___vfiprintf_internal_r+0xb78>
80208030:	843ffc04 	addi	r16,r16,-16
80208034:	000d883a 	mov	r6,zero
80208038:	01400044 	movi	r5,1
8020803c:	d811883a 	mov	r8,sp
80208040:	3c3ff316 	blt	r7,r16,80208010 <__reset+0xfa1e8010>
80208044:	8007883a 	mov	r3,r16
80208048:	da402517 	ldw	r9,148(sp)
8020804c:	db802817 	ldw	r14,160(sp)
80208050:	dc002917 	ldw	r16,164(sp)
80208054:	da802417 	ldw	r10,144(sp)
80208058:	1885883a 	add	r2,r3,r2
8020805c:	40c00115 	stw	r3,4(r8)
80208060:	42800015 	stw	r10,0(r8)
80208064:	d8801c15 	stw	r2,112(sp)
80208068:	d9401b15 	stw	r5,108(sp)
8020806c:	00c001c4 	movi	r3,7
80208070:	19426016 	blt	r3,r5,802089f4 <___vfiprintf_internal_r+0xe68>
80208074:	d8c01d87 	ldb	r3,118(sp)
80208078:	42000204 	addi	r8,r8,8
8020807c:	29000044 	addi	r4,r5,1
80208080:	1801b31e 	bne	r3,zero,80208750 <___vfiprintf_internal_r+0xbc4>
80208084:	7001c026 	beq	r14,zero,80208788 <___vfiprintf_internal_r+0xbfc>
80208088:	d8c01d04 	addi	r3,sp,116
8020808c:	10800084 	addi	r2,r2,2
80208090:	40c00015 	stw	r3,0(r8)
80208094:	00c00084 	movi	r3,2
80208098:	40c00115 	stw	r3,4(r8)
8020809c:	d8801c15 	stw	r2,112(sp)
802080a0:	d9001b15 	stw	r4,108(sp)
802080a4:	00c001c4 	movi	r3,7
802080a8:	1902650e 	bge	r3,r4,80208a40 <___vfiprintf_internal_r+0xeb4>
802080ac:	10029a1e 	bne	r2,zero,80208b18 <___vfiprintf_internal_r+0xf8c>
802080b0:	00c02004 	movi	r3,128
802080b4:	01000044 	movi	r4,1
802080b8:	000b883a 	mov	r5,zero
802080bc:	d811883a 	mov	r8,sp
802080c0:	e0c1b31e 	bne	fp,r3,80208790 <___vfiprintf_internal_r+0xc04>
802080c4:	8cb9c83a 	sub	fp,r17,r18
802080c8:	0701b10e 	bge	zero,fp,80208790 <___vfiprintf_internal_r+0xc04>
802080cc:	01c00404 	movi	r7,16
802080d0:	3f03890e 	bge	r7,fp,80208ef8 <___vfiprintf_internal_r+0x136c>
802080d4:	00e00874 	movhi	r3,32801
802080d8:	18c8a604 	addi	r3,r3,8856
802080dc:	d8c02415 	stw	r3,144(sp)
802080e0:	8007883a 	mov	r3,r16
802080e4:	034001c4 	movi	r13,7
802080e8:	e021883a 	mov	r16,fp
802080ec:	da402515 	stw	r9,148(sp)
802080f0:	1839883a 	mov	fp,r3
802080f4:	00000506 	br	8020810c <___vfiprintf_internal_r+0x580>
802080f8:	29800084 	addi	r6,r5,2
802080fc:	42000204 	addi	r8,r8,8
80208100:	180b883a 	mov	r5,r3
80208104:	843ffc04 	addi	r16,r16,-16
80208108:	3c000d0e 	bge	r7,r16,80208140 <___vfiprintf_internal_r+0x5b4>
8020810c:	10800404 	addi	r2,r2,16
80208110:	28c00044 	addi	r3,r5,1
80208114:	45c00015 	stw	r23,0(r8)
80208118:	41c00115 	stw	r7,4(r8)
8020811c:	d8801c15 	stw	r2,112(sp)
80208120:	d8c01b15 	stw	r3,108(sp)
80208124:	68fff40e 	bge	r13,r3,802080f8 <__reset+0xfa1e80f8>
80208128:	1002241e 	bne	r2,zero,802089bc <___vfiprintf_internal_r+0xe30>
8020812c:	843ffc04 	addi	r16,r16,-16
80208130:	01800044 	movi	r6,1
80208134:	000b883a 	mov	r5,zero
80208138:	d811883a 	mov	r8,sp
8020813c:	3c3ff316 	blt	r7,r16,8020810c <__reset+0xfa1e810c>
80208140:	da402517 	ldw	r9,148(sp)
80208144:	e007883a 	mov	r3,fp
80208148:	8039883a 	mov	fp,r16
8020814c:	1821883a 	mov	r16,r3
80208150:	d8c02417 	ldw	r3,144(sp)
80208154:	1705883a 	add	r2,r2,fp
80208158:	47000115 	stw	fp,4(r8)
8020815c:	40c00015 	stw	r3,0(r8)
80208160:	d8801c15 	stw	r2,112(sp)
80208164:	d9801b15 	stw	r6,108(sp)
80208168:	00c001c4 	movi	r3,7
8020816c:	19827616 	blt	r3,r6,80208b48 <___vfiprintf_internal_r+0xfbc>
80208170:	4cf9c83a 	sub	fp,r9,r19
80208174:	42000204 	addi	r8,r8,8
80208178:	31000044 	addi	r4,r6,1
8020817c:	300b883a 	mov	r5,r6
80208180:	07018516 	blt	zero,fp,80208798 <___vfiprintf_internal_r+0xc0c>
80208184:	9885883a 	add	r2,r19,r2
80208188:	45400015 	stw	r21,0(r8)
8020818c:	44c00115 	stw	r19,4(r8)
80208190:	d8801c15 	stw	r2,112(sp)
80208194:	d9001b15 	stw	r4,108(sp)
80208198:	00c001c4 	movi	r3,7
8020819c:	1901dd0e 	bge	r3,r4,80208914 <___vfiprintf_internal_r+0xd88>
802081a0:	1002401e 	bne	r2,zero,80208aa4 <___vfiprintf_internal_r+0xf18>
802081a4:	d8001b15 	stw	zero,108(sp)
802081a8:	a2c0010c 	andi	r11,r20,4
802081ac:	58000226 	beq	r11,zero,802081b8 <___vfiprintf_internal_r+0x62c>
802081b0:	8ca7c83a 	sub	r19,r17,r18
802081b4:	04c2f216 	blt	zero,r19,80208d80 <___vfiprintf_internal_r+0x11f4>
802081b8:	8c80010e 	bge	r17,r18,802081c0 <___vfiprintf_internal_r+0x634>
802081bc:	9023883a 	mov	r17,r18
802081c0:	da802317 	ldw	r10,140(sp)
802081c4:	5455883a 	add	r10,r10,r17
802081c8:	da802315 	stw	r10,140(sp)
802081cc:	d8001b15 	stw	zero,108(sp)
802081d0:	d811883a 	mov	r8,sp
802081d4:	003ea206 	br	80207c60 <__reset+0xfa1e7c60>
802081d8:	a5000814 	ori	r20,r20,32
802081dc:	80c00007 	ldb	r3,0(r16)
802081e0:	003ec906 	br	80207d08 <__reset+0xfa1e7d08>
802081e4:	80c00007 	ldb	r3,0(r16)
802081e8:	1b030926 	beq	r3,r12,80208e10 <___vfiprintf_internal_r+0x1284>
802081ec:	a5000414 	ori	r20,r20,16
802081f0:	003ec506 	br	80207d08 <__reset+0xfa1e7d08>
802081f4:	21003fcc 	andi	r4,r4,255
802081f8:	20035e1e 	bne	r4,zero,80208f74 <___vfiprintf_internal_r+0x13e8>
802081fc:	a080080c 	andi	r2,r20,32
80208200:	1002a526 	beq	r2,zero,80208c98 <___vfiprintf_internal_r+0x110c>
80208204:	da802217 	ldw	r10,136(sp)
80208208:	50800017 	ldw	r2,0(r10)
8020820c:	da802317 	ldw	r10,140(sp)
80208210:	5007d7fa 	srai	r3,r10,31
80208214:	da802217 	ldw	r10,136(sp)
80208218:	10c00115 	stw	r3,4(r2)
8020821c:	52800104 	addi	r10,r10,4
80208220:	da802215 	stw	r10,136(sp)
80208224:	da802317 	ldw	r10,140(sp)
80208228:	12800015 	stw	r10,0(r2)
8020822c:	003e8c06 	br	80207c60 <__reset+0xfa1e7c60>
80208230:	21003fcc 	andi	r4,r4,255
80208234:	2003511e 	bne	r4,zero,80208f7c <___vfiprintf_internal_r+0x13f0>
80208238:	a080080c 	andi	r2,r20,32
8020823c:	1000a126 	beq	r2,zero,802084c4 <___vfiprintf_internal_r+0x938>
80208240:	da802217 	ldw	r10,136(sp)
80208244:	d8001d85 	stb	zero,118(sp)
80208248:	50800204 	addi	r2,r10,8
8020824c:	54800017 	ldw	r18,0(r10)
80208250:	54c00117 	ldw	r19,4(r10)
80208254:	4802b416 	blt	r9,zero,80208d28 <___vfiprintf_internal_r+0x119c>
80208258:	013fdfc4 	movi	r4,-129
8020825c:	94c6b03a 	or	r3,r18,r19
80208260:	d8802215 	stw	r2,136(sp)
80208264:	a128703a 	and	r20,r20,r4
80208268:	1800a226 	beq	r3,zero,802084f4 <___vfiprintf_internal_r+0x968>
8020826c:	0039883a 	mov	fp,zero
80208270:	dd401a04 	addi	r21,sp,104
80208274:	9006d0fa 	srli	r3,r18,3
80208278:	9808977a 	slli	r4,r19,29
8020827c:	9826d0fa 	srli	r19,r19,3
80208280:	948001cc 	andi	r18,r18,7
80208284:	90800c04 	addi	r2,r18,48
80208288:	ad7fffc4 	addi	r21,r21,-1
8020828c:	20e4b03a 	or	r18,r4,r3
80208290:	a8800005 	stb	r2,0(r21)
80208294:	94c6b03a 	or	r3,r18,r19
80208298:	183ff61e 	bne	r3,zero,80208274 <__reset+0xfa1e8274>
8020829c:	a0c0004c 	andi	r3,r20,1
802082a0:	18005926 	beq	r3,zero,80208408 <___vfiprintf_internal_r+0x87c>
802082a4:	10803fcc 	andi	r2,r2,255
802082a8:	1080201c 	xori	r2,r2,128
802082ac:	10bfe004 	addi	r2,r2,-128
802082b0:	00c00c04 	movi	r3,48
802082b4:	10c05426 	beq	r2,r3,80208408 <___vfiprintf_internal_r+0x87c>
802082b8:	da801e17 	ldw	r10,120(sp)
802082bc:	a8bfffc4 	addi	r2,r21,-1
802082c0:	a8ffffc5 	stb	r3,-1(r21)
802082c4:	50a7c83a 	sub	r19,r10,r2
802082c8:	102b883a 	mov	r21,r2
802082cc:	003f2f06 	br	80207f8c <__reset+0xfa1e7f8c>
802082d0:	21003fcc 	andi	r4,r4,255
802082d4:	2003421e 	bne	r4,zero,80208fe0 <___vfiprintf_internal_r+0x1454>
802082d8:	00a00874 	movhi	r2,32801
802082dc:	10884504 	addi	r2,r2,8468
802082e0:	d8802615 	stw	r2,152(sp)
802082e4:	a080080c 	andi	r2,r20,32
802082e8:	1000aa26 	beq	r2,zero,80208594 <___vfiprintf_internal_r+0xa08>
802082ec:	da802217 	ldw	r10,136(sp)
802082f0:	54800017 	ldw	r18,0(r10)
802082f4:	54c00117 	ldw	r19,4(r10)
802082f8:	52800204 	addi	r10,r10,8
802082fc:	da802215 	stw	r10,136(sp)
80208300:	a080004c 	andi	r2,r20,1
80208304:	1001d226 	beq	r2,zero,80208a50 <___vfiprintf_internal_r+0xec4>
80208308:	94c4b03a 	or	r2,r18,r19
8020830c:	1002351e 	bne	r2,zero,80208be4 <___vfiprintf_internal_r+0x1058>
80208310:	d8001d85 	stb	zero,118(sp)
80208314:	48022216 	blt	r9,zero,80208ba0 <___vfiprintf_internal_r+0x1014>
80208318:	00bfdfc4 	movi	r2,-129
8020831c:	a0a8703a 	and	r20,r20,r2
80208320:	003f1506 	br	80207f78 <__reset+0xfa1e7f78>
80208324:	da802217 	ldw	r10,136(sp)
80208328:	04800044 	movi	r18,1
8020832c:	d8001d85 	stb	zero,118(sp)
80208330:	50800017 	ldw	r2,0(r10)
80208334:	52800104 	addi	r10,r10,4
80208338:	da802215 	stw	r10,136(sp)
8020833c:	d8801005 	stb	r2,64(sp)
80208340:	9027883a 	mov	r19,r18
80208344:	dd401004 	addi	r21,sp,64
80208348:	0013883a 	mov	r9,zero
8020834c:	003f1706 	br	80207fac <__reset+0xfa1e7fac>
80208350:	21003fcc 	andi	r4,r4,255
80208354:	2003201e 	bne	r4,zero,80208fd8 <___vfiprintf_internal_r+0x144c>
80208358:	a080080c 	andi	r2,r20,32
8020835c:	10004b26 	beq	r2,zero,8020848c <___vfiprintf_internal_r+0x900>
80208360:	da802217 	ldw	r10,136(sp)
80208364:	50800117 	ldw	r2,4(r10)
80208368:	54800017 	ldw	r18,0(r10)
8020836c:	52800204 	addi	r10,r10,8
80208370:	da802215 	stw	r10,136(sp)
80208374:	1027883a 	mov	r19,r2
80208378:	10022c16 	blt	r2,zero,80208c2c <___vfiprintf_internal_r+0x10a0>
8020837c:	df001d83 	ldbu	fp,118(sp)
80208380:	48007216 	blt	r9,zero,8020854c <___vfiprintf_internal_r+0x9c0>
80208384:	00ffdfc4 	movi	r3,-129
80208388:	94c4b03a 	or	r2,r18,r19
8020838c:	a0e8703a 	and	r20,r20,r3
80208390:	1000cc26 	beq	r2,zero,802086c4 <___vfiprintf_internal_r+0xb38>
80208394:	98021026 	beq	r19,zero,80208bd8 <___vfiprintf_internal_r+0x104c>
80208398:	dc402415 	stw	r17,144(sp)
8020839c:	dc002515 	stw	r16,148(sp)
802083a0:	9823883a 	mov	r17,r19
802083a4:	9021883a 	mov	r16,r18
802083a8:	dd401a04 	addi	r21,sp,104
802083ac:	4825883a 	mov	r18,r9
802083b0:	4027883a 	mov	r19,r8
802083b4:	8009883a 	mov	r4,r16
802083b8:	880b883a 	mov	r5,r17
802083bc:	01800284 	movi	r6,10
802083c0:	000f883a 	mov	r7,zero
802083c4:	0209f6c0 	call	80209f6c <__umoddi3>
802083c8:	10800c04 	addi	r2,r2,48
802083cc:	ad7fffc4 	addi	r21,r21,-1
802083d0:	8009883a 	mov	r4,r16
802083d4:	880b883a 	mov	r5,r17
802083d8:	a8800005 	stb	r2,0(r21)
802083dc:	01800284 	movi	r6,10
802083e0:	000f883a 	mov	r7,zero
802083e4:	02099f40 	call	802099f4 <__udivdi3>
802083e8:	1021883a 	mov	r16,r2
802083ec:	10c4b03a 	or	r2,r2,r3
802083f0:	1823883a 	mov	r17,r3
802083f4:	103fef1e 	bne	r2,zero,802083b4 <__reset+0xfa1e83b4>
802083f8:	dc402417 	ldw	r17,144(sp)
802083fc:	dc002517 	ldw	r16,148(sp)
80208400:	9013883a 	mov	r9,r18
80208404:	9811883a 	mov	r8,r19
80208408:	da801e17 	ldw	r10,120(sp)
8020840c:	5567c83a 	sub	r19,r10,r21
80208410:	003ede06 	br	80207f8c <__reset+0xfa1e7f8c>
80208414:	38803fcc 	andi	r2,r7,255
80208418:	1080201c 	xori	r2,r2,128
8020841c:	10bfe004 	addi	r2,r2,-128
80208420:	1002371e 	bne	r2,zero,80208d00 <___vfiprintf_internal_r+0x1174>
80208424:	01000044 	movi	r4,1
80208428:	01c00804 	movi	r7,32
8020842c:	80c00007 	ldb	r3,0(r16)
80208430:	003e3506 	br	80207d08 <__reset+0xfa1e7d08>
80208434:	a5000054 	ori	r20,r20,1
80208438:	80c00007 	ldb	r3,0(r16)
8020843c:	003e3206 	br	80207d08 <__reset+0xfa1e7d08>
80208440:	a5002014 	ori	r20,r20,128
80208444:	80c00007 	ldb	r3,0(r16)
80208448:	003e2f06 	br	80207d08 <__reset+0xfa1e7d08>
8020844c:	8015883a 	mov	r10,r16
80208450:	0023883a 	mov	r17,zero
80208454:	18bff404 	addi	r2,r3,-48
80208458:	50c00007 	ldb	r3,0(r10)
8020845c:	8c4002a4 	muli	r17,r17,10
80208460:	84000044 	addi	r16,r16,1
80208464:	8015883a 	mov	r10,r16
80208468:	1463883a 	add	r17,r2,r17
8020846c:	18bff404 	addi	r2,r3,-48
80208470:	30bff92e 	bgeu	r6,r2,80208458 <__reset+0xfa1e8458>
80208474:	003e2506 	br	80207d0c <__reset+0xfa1e7d0c>
80208478:	21003fcc 	andi	r4,r4,255
8020847c:	2002d41e 	bne	r4,zero,80208fd0 <___vfiprintf_internal_r+0x1444>
80208480:	a5000414 	ori	r20,r20,16
80208484:	a080080c 	andi	r2,r20,32
80208488:	103fb51e 	bne	r2,zero,80208360 <__reset+0xfa1e8360>
8020848c:	a080040c 	andi	r2,r20,16
80208490:	1001f826 	beq	r2,zero,80208c74 <___vfiprintf_internal_r+0x10e8>
80208494:	da802217 	ldw	r10,136(sp)
80208498:	54800017 	ldw	r18,0(r10)
8020849c:	52800104 	addi	r10,r10,4
802084a0:	da802215 	stw	r10,136(sp)
802084a4:	9027d7fa 	srai	r19,r18,31
802084a8:	9805883a 	mov	r2,r19
802084ac:	003fb206 	br	80208378 <__reset+0xfa1e8378>
802084b0:	21003fcc 	andi	r4,r4,255
802084b4:	2002c41e 	bne	r4,zero,80208fc8 <___vfiprintf_internal_r+0x143c>
802084b8:	a5000414 	ori	r20,r20,16
802084bc:	a080080c 	andi	r2,r20,32
802084c0:	103f5f1e 	bne	r2,zero,80208240 <__reset+0xfa1e8240>
802084c4:	a080040c 	andi	r2,r20,16
802084c8:	10020f26 	beq	r2,zero,80208d08 <___vfiprintf_internal_r+0x117c>
802084cc:	da802217 	ldw	r10,136(sp)
802084d0:	d8001d85 	stb	zero,118(sp)
802084d4:	0027883a 	mov	r19,zero
802084d8:	50800104 	addi	r2,r10,4
802084dc:	54800017 	ldw	r18,0(r10)
802084e0:	48021116 	blt	r9,zero,80208d28 <___vfiprintf_internal_r+0x119c>
802084e4:	00ffdfc4 	movi	r3,-129
802084e8:	d8802215 	stw	r2,136(sp)
802084ec:	a0e8703a 	and	r20,r20,r3
802084f0:	903f5e1e 	bne	r18,zero,8020826c <__reset+0xfa1e826c>
802084f4:	0039883a 	mov	fp,zero
802084f8:	4802a626 	beq	r9,zero,80208f94 <___vfiprintf_internal_r+0x1408>
802084fc:	0025883a 	mov	r18,zero
80208500:	0027883a 	mov	r19,zero
80208504:	003f5a06 	br	80208270 <__reset+0xfa1e8270>
80208508:	21003fcc 	andi	r4,r4,255
8020850c:	20029f1e 	bne	r4,zero,80208f8c <___vfiprintf_internal_r+0x1400>
80208510:	a5000414 	ori	r20,r20,16
80208514:	a080080c 	andi	r2,r20,32
80208518:	10005e1e 	bne	r2,zero,80208694 <___vfiprintf_internal_r+0xb08>
8020851c:	a080040c 	andi	r2,r20,16
80208520:	1001a21e 	bne	r2,zero,80208bac <___vfiprintf_internal_r+0x1020>
80208524:	a080100c 	andi	r2,r20,64
80208528:	d8001d85 	stb	zero,118(sp)
8020852c:	da802217 	ldw	r10,136(sp)
80208530:	1002231e 	bne	r2,zero,80208dc0 <___vfiprintf_internal_r+0x1234>
80208534:	50800104 	addi	r2,r10,4
80208538:	54800017 	ldw	r18,0(r10)
8020853c:	0027883a 	mov	r19,zero
80208540:	4801a00e 	bge	r9,zero,80208bc4 <___vfiprintf_internal_r+0x1038>
80208544:	d8802215 	stw	r2,136(sp)
80208548:	0039883a 	mov	fp,zero
8020854c:	94c4b03a 	or	r2,r18,r19
80208550:	103f901e 	bne	r2,zero,80208394 <__reset+0xfa1e8394>
80208554:	00800044 	movi	r2,1
80208558:	10803fcc 	andi	r2,r2,255
8020855c:	00c00044 	movi	r3,1
80208560:	10c05926 	beq	r2,r3,802086c8 <___vfiprintf_internal_r+0xb3c>
80208564:	00c00084 	movi	r3,2
80208568:	10ffe41e 	bne	r2,r3,802084fc <__reset+0xfa1e84fc>
8020856c:	0025883a 	mov	r18,zero
80208570:	0027883a 	mov	r19,zero
80208574:	00013d06 	br	80208a6c <___vfiprintf_internal_r+0xee0>
80208578:	21003fcc 	andi	r4,r4,255
8020857c:	2002811e 	bne	r4,zero,80208f84 <___vfiprintf_internal_r+0x13f8>
80208580:	00a00874 	movhi	r2,32801
80208584:	10884004 	addi	r2,r2,8448
80208588:	d8802615 	stw	r2,152(sp)
8020858c:	a080080c 	andi	r2,r20,32
80208590:	103f561e 	bne	r2,zero,802082ec <__reset+0xfa1e82ec>
80208594:	a080040c 	andi	r2,r20,16
80208598:	1001d126 	beq	r2,zero,80208ce0 <___vfiprintf_internal_r+0x1154>
8020859c:	da802217 	ldw	r10,136(sp)
802085a0:	0027883a 	mov	r19,zero
802085a4:	54800017 	ldw	r18,0(r10)
802085a8:	52800104 	addi	r10,r10,4
802085ac:	da802215 	stw	r10,136(sp)
802085b0:	003f5306 	br	80208300 <__reset+0xfa1e8300>
802085b4:	da802217 	ldw	r10,136(sp)
802085b8:	d8001d85 	stb	zero,118(sp)
802085bc:	55400017 	ldw	r21,0(r10)
802085c0:	50c00104 	addi	r3,r10,4
802085c4:	a8024226 	beq	r21,zero,80208ed0 <___vfiprintf_internal_r+0x1344>
802085c8:	48021816 	blt	r9,zero,80208e2c <___vfiprintf_internal_r+0x12a0>
802085cc:	480d883a 	mov	r6,r9
802085d0:	000b883a 	mov	r5,zero
802085d4:	a809883a 	mov	r4,r21
802085d8:	d8c02a15 	stw	r3,168(sp)
802085dc:	da002b15 	stw	r8,172(sp)
802085e0:	da402c15 	stw	r9,176(sp)
802085e4:	0205d880 	call	80205d88 <memchr>
802085e8:	d8c02a17 	ldw	r3,168(sp)
802085ec:	da002b17 	ldw	r8,172(sp)
802085f0:	da402c17 	ldw	r9,176(sp)
802085f4:	10024826 	beq	r2,zero,80208f18 <___vfiprintf_internal_r+0x138c>
802085f8:	1567c83a 	sub	r19,r2,r21
802085fc:	df001d83 	ldbu	fp,118(sp)
80208600:	d8c02215 	stw	r3,136(sp)
80208604:	0013883a 	mov	r9,zero
80208608:	003e6006 	br	80207f8c <__reset+0xfa1e7f8c>
8020860c:	21003fcc 	andi	r4,r4,255
80208610:	203fc026 	beq	r4,zero,80208514 <__reset+0xfa1e8514>
80208614:	d9c01d85 	stb	r7,118(sp)
80208618:	003fbe06 	br	80208514 <__reset+0xfa1e8514>
8020861c:	da802217 	ldw	r10,136(sp)
80208620:	54400017 	ldw	r17,0(r10)
80208624:	50800104 	addi	r2,r10,4
80208628:	883e3b16 	blt	r17,zero,80207f18 <__reset+0xfa1e7f18>
8020862c:	d8802215 	stw	r2,136(sp)
80208630:	80c00007 	ldb	r3,0(r16)
80208634:	003db406 	br	80207d08 <__reset+0xfa1e7d08>
80208638:	01000044 	movi	r4,1
8020863c:	01c00ac4 	movi	r7,43
80208640:	80c00007 	ldb	r3,0(r16)
80208644:	003db006 	br	80207d08 <__reset+0xfa1e7d08>
80208648:	80c00007 	ldb	r3,0(r16)
8020864c:	82800044 	addi	r10,r16,1
80208650:	1b423c26 	beq	r3,r13,80208f44 <___vfiprintf_internal_r+0x13b8>
80208654:	18bff404 	addi	r2,r3,-48
80208658:	0013883a 	mov	r9,zero
8020865c:	30822b36 	bltu	r6,r2,80208f0c <___vfiprintf_internal_r+0x1380>
80208660:	50c00007 	ldb	r3,0(r10)
80208664:	4a4002a4 	muli	r9,r9,10
80208668:	54000044 	addi	r16,r10,1
8020866c:	8015883a 	mov	r10,r16
80208670:	4893883a 	add	r9,r9,r2
80208674:	18bff404 	addi	r2,r3,-48
80208678:	30bff92e 	bgeu	r6,r2,80208660 <__reset+0xfa1e8660>
8020867c:	483da30e 	bge	r9,zero,80207d0c <__reset+0xfa1e7d0c>
80208680:	027fffc4 	movi	r9,-1
80208684:	003da106 	br	80207d0c <__reset+0xfa1e7d0c>
80208688:	a5001014 	ori	r20,r20,64
8020868c:	80c00007 	ldb	r3,0(r16)
80208690:	003d9d06 	br	80207d08 <__reset+0xfa1e7d08>
80208694:	da802217 	ldw	r10,136(sp)
80208698:	d8001d85 	stb	zero,118(sp)
8020869c:	50c00204 	addi	r3,r10,8
802086a0:	54800017 	ldw	r18,0(r10)
802086a4:	54c00117 	ldw	r19,4(r10)
802086a8:	4801ca16 	blt	r9,zero,80208dd4 <___vfiprintf_internal_r+0x1248>
802086ac:	013fdfc4 	movi	r4,-129
802086b0:	94c4b03a 	or	r2,r18,r19
802086b4:	d8c02215 	stw	r3,136(sp)
802086b8:	a128703a 	and	r20,r20,r4
802086bc:	0039883a 	mov	fp,zero
802086c0:	103f341e 	bne	r2,zero,80208394 <__reset+0xfa1e8394>
802086c4:	483e2e26 	beq	r9,zero,80207f80 <__reset+0xfa1e7f80>
802086c8:	0025883a 	mov	r18,zero
802086cc:	94800c04 	addi	r18,r18,48
802086d0:	dc8019c5 	stb	r18,103(sp)
802086d4:	dcc02717 	ldw	r19,156(sp)
802086d8:	dd4019c4 	addi	r21,sp,103
802086dc:	003e2b06 	br	80207f8c <__reset+0xfa1e7f8c>
802086e0:	21003fcc 	andi	r4,r4,255
802086e4:	2002361e 	bne	r4,zero,80208fc0 <___vfiprintf_internal_r+0x1434>
802086e8:	1801c126 	beq	r3,zero,80208df0 <___vfiprintf_internal_r+0x1264>
802086ec:	04800044 	movi	r18,1
802086f0:	d8c01005 	stb	r3,64(sp)
802086f4:	d8001d85 	stb	zero,118(sp)
802086f8:	9027883a 	mov	r19,r18
802086fc:	dd401004 	addi	r21,sp,64
80208700:	003f1106 	br	80208348 <__reset+0xfa1e8348>
80208704:	d9402117 	ldw	r5,132(sp)
80208708:	d9002017 	ldw	r4,128(sp)
8020870c:	d9801a04 	addi	r6,sp,104
80208710:	d9c02b15 	stw	r7,172(sp)
80208714:	dbc02a15 	stw	r15,168(sp)
80208718:	0207a780 	call	80207a78 <__sprint_r.part.0>
8020871c:	d9c02b17 	ldw	r7,172(sp)
80208720:	dbc02a17 	ldw	r15,168(sp)
80208724:	10006d1e 	bne	r2,zero,802088dc <___vfiprintf_internal_r+0xd50>
80208728:	d9801b17 	ldw	r6,108(sp)
8020872c:	d8801c17 	ldw	r2,112(sp)
80208730:	d811883a 	mov	r8,sp
80208734:	31400044 	addi	r5,r6,1
80208738:	003e3306 	br	80208008 <__reset+0xfa1e8008>
8020873c:	d9401b17 	ldw	r5,108(sp)
80208740:	d8801c17 	ldw	r2,112(sp)
80208744:	29000044 	addi	r4,r5,1
80208748:	d8c01d87 	ldb	r3,118(sp)
8020874c:	183e4d26 	beq	r3,zero,80208084 <__reset+0xfa1e8084>
80208750:	00c00044 	movi	r3,1
80208754:	d9401d84 	addi	r5,sp,118
80208758:	10c5883a 	add	r2,r2,r3
8020875c:	41400015 	stw	r5,0(r8)
80208760:	40c00115 	stw	r3,4(r8)
80208764:	d8801c15 	stw	r2,112(sp)
80208768:	d9001b15 	stw	r4,108(sp)
8020876c:	014001c4 	movi	r5,7
80208770:	2900a90e 	bge	r5,r4,80208a18 <___vfiprintf_internal_r+0xe8c>
80208774:	1000da1e 	bne	r2,zero,80208ae0 <___vfiprintf_internal_r+0xf54>
80208778:	7000ab1e 	bne	r14,zero,80208a28 <___vfiprintf_internal_r+0xe9c>
8020877c:	000b883a 	mov	r5,zero
80208780:	1809883a 	mov	r4,r3
80208784:	d811883a 	mov	r8,sp
80208788:	00c02004 	movi	r3,128
8020878c:	e0fe4d26 	beq	fp,r3,802080c4 <__reset+0xfa1e80c4>
80208790:	4cf9c83a 	sub	fp,r9,r19
80208794:	073e7b0e 	bge	zero,fp,80208184 <__reset+0xfa1e8184>
80208798:	01c00404 	movi	r7,16
8020879c:	3f01900e 	bge	r7,fp,80208de0 <___vfiprintf_internal_r+0x1254>
802087a0:	00e00874 	movhi	r3,32801
802087a4:	18c8a604 	addi	r3,r3,8856
802087a8:	d8c02415 	stw	r3,144(sp)
802087ac:	034001c4 	movi	r13,7
802087b0:	00000506 	br	802087c8 <___vfiprintf_internal_r+0xc3c>
802087b4:	29000084 	addi	r4,r5,2
802087b8:	42000204 	addi	r8,r8,8
802087bc:	180b883a 	mov	r5,r3
802087c0:	e73ffc04 	addi	fp,fp,-16
802087c4:	3f000d0e 	bge	r7,fp,802087fc <___vfiprintf_internal_r+0xc70>
802087c8:	10800404 	addi	r2,r2,16
802087cc:	28c00044 	addi	r3,r5,1
802087d0:	45c00015 	stw	r23,0(r8)
802087d4:	41c00115 	stw	r7,4(r8)
802087d8:	d8801c15 	stw	r2,112(sp)
802087dc:	d8c01b15 	stw	r3,108(sp)
802087e0:	68fff40e 	bge	r13,r3,802087b4 <__reset+0xfa1e87b4>
802087e4:	1000101e 	bne	r2,zero,80208828 <___vfiprintf_internal_r+0xc9c>
802087e8:	e73ffc04 	addi	fp,fp,-16
802087ec:	01000044 	movi	r4,1
802087f0:	000b883a 	mov	r5,zero
802087f4:	d811883a 	mov	r8,sp
802087f8:	3f3ff316 	blt	r7,fp,802087c8 <__reset+0xfa1e87c8>
802087fc:	da802417 	ldw	r10,144(sp)
80208800:	1705883a 	add	r2,r2,fp
80208804:	47000115 	stw	fp,4(r8)
80208808:	42800015 	stw	r10,0(r8)
8020880c:	d8801c15 	stw	r2,112(sp)
80208810:	d9001b15 	stw	r4,108(sp)
80208814:	00c001c4 	movi	r3,7
80208818:	19003616 	blt	r3,r4,802088f4 <___vfiprintf_internal_r+0xd68>
8020881c:	42000204 	addi	r8,r8,8
80208820:	21000044 	addi	r4,r4,1
80208824:	003e5706 	br	80208184 <__reset+0xfa1e8184>
80208828:	d9402117 	ldw	r5,132(sp)
8020882c:	d9002017 	ldw	r4,128(sp)
80208830:	d9801a04 	addi	r6,sp,104
80208834:	d9c02b15 	stw	r7,172(sp)
80208838:	db402a15 	stw	r13,168(sp)
8020883c:	0207a780 	call	80207a78 <__sprint_r.part.0>
80208840:	d9c02b17 	ldw	r7,172(sp)
80208844:	db402a17 	ldw	r13,168(sp)
80208848:	1000241e 	bne	r2,zero,802088dc <___vfiprintf_internal_r+0xd50>
8020884c:	d9401b17 	ldw	r5,108(sp)
80208850:	d8801c17 	ldw	r2,112(sp)
80208854:	d811883a 	mov	r8,sp
80208858:	29000044 	addi	r4,r5,1
8020885c:	003fd806 	br	802087c0 <__reset+0xfa1e87c0>
80208860:	d9401b17 	ldw	r5,108(sp)
80208864:	00e00874 	movhi	r3,32801
80208868:	18c8aa04 	addi	r3,r3,8872
8020886c:	d8c02415 	stw	r3,144(sp)
80208870:	29400044 	addi	r5,r5,1
80208874:	d8c02417 	ldw	r3,144(sp)
80208878:	14c5883a 	add	r2,r2,r19
8020887c:	44c00115 	stw	r19,4(r8)
80208880:	40c00015 	stw	r3,0(r8)
80208884:	d8801c15 	stw	r2,112(sp)
80208888:	d9401b15 	stw	r5,108(sp)
8020888c:	00c001c4 	movi	r3,7
80208890:	1940070e 	bge	r3,r5,802088b0 <___vfiprintf_internal_r+0xd24>
80208894:	103e4826 	beq	r2,zero,802081b8 <__reset+0xfa1e81b8>
80208898:	d9402117 	ldw	r5,132(sp)
8020889c:	d9002017 	ldw	r4,128(sp)
802088a0:	d9801a04 	addi	r6,sp,104
802088a4:	0207a780 	call	80207a78 <__sprint_r.part.0>
802088a8:	10000c1e 	bne	r2,zero,802088dc <___vfiprintf_internal_r+0xd50>
802088ac:	d8801c17 	ldw	r2,112(sp)
802088b0:	8c80010e 	bge	r17,r18,802088b8 <___vfiprintf_internal_r+0xd2c>
802088b4:	9023883a 	mov	r17,r18
802088b8:	da802317 	ldw	r10,140(sp)
802088bc:	5455883a 	add	r10,r10,r17
802088c0:	da802315 	stw	r10,140(sp)
802088c4:	103e4126 	beq	r2,zero,802081cc <__reset+0xfa1e81cc>
802088c8:	d9402117 	ldw	r5,132(sp)
802088cc:	d9002017 	ldw	r4,128(sp)
802088d0:	d9801a04 	addi	r6,sp,104
802088d4:	0207a780 	call	80207a78 <__sprint_r.part.0>
802088d8:	103e3c26 	beq	r2,zero,802081cc <__reset+0xfa1e81cc>
802088dc:	dd002117 	ldw	r20,132(sp)
802088e0:	a080030b 	ldhu	r2,12(r20)
802088e4:	1080100c 	andi	r2,r2,64
802088e8:	1001231e 	bne	r2,zero,80208d78 <___vfiprintf_internal_r+0x11ec>
802088ec:	d8802317 	ldw	r2,140(sp)
802088f0:	003d7b06 	br	80207ee0 <__reset+0xfa1e7ee0>
802088f4:	1000991e 	bne	r2,zero,80208b5c <___vfiprintf_internal_r+0xfd0>
802088f8:	00c00044 	movi	r3,1
802088fc:	9805883a 	mov	r2,r19
80208900:	dd400015 	stw	r21,0(sp)
80208904:	dcc00115 	stw	r19,4(sp)
80208908:	dcc01c15 	stw	r19,112(sp)
8020890c:	d8c01b15 	stw	r3,108(sp)
80208910:	d811883a 	mov	r8,sp
80208914:	42000204 	addi	r8,r8,8
80208918:	a2c0010c 	andi	r11,r20,4
8020891c:	583fe426 	beq	r11,zero,802088b0 <__reset+0xfa1e88b0>
80208920:	8ca7c83a 	sub	r19,r17,r18
80208924:	04ffe20e 	bge	zero,r19,802088b0 <__reset+0xfa1e88b0>
80208928:	01c00404 	movi	r7,16
8020892c:	3cffcc0e 	bge	r7,r19,80208860 <__reset+0xfa1e8860>
80208930:	02a00874 	movhi	r10,32801
80208934:	5288aa04 	addi	r10,r10,8872
80208938:	d9001b17 	ldw	r4,108(sp)
8020893c:	da802415 	stw	r10,144(sp)
80208940:	382b883a 	mov	r21,r7
80208944:	050001c4 	movi	r20,7
80208948:	df002017 	ldw	fp,128(sp)
8020894c:	00000506 	br	80208964 <___vfiprintf_internal_r+0xdd8>
80208950:	21400084 	addi	r5,r4,2
80208954:	42000204 	addi	r8,r8,8
80208958:	1809883a 	mov	r4,r3
8020895c:	9cfffc04 	addi	r19,r19,-16
80208960:	acffc40e 	bge	r21,r19,80208874 <__reset+0xfa1e8874>
80208964:	10800404 	addi	r2,r2,16
80208968:	20c00044 	addi	r3,r4,1
8020896c:	45800015 	stw	r22,0(r8)
80208970:	45400115 	stw	r21,4(r8)
80208974:	d8801c15 	stw	r2,112(sp)
80208978:	d8c01b15 	stw	r3,108(sp)
8020897c:	a0fff40e 	bge	r20,r3,80208950 <__reset+0xfa1e8950>
80208980:	1000041e 	bne	r2,zero,80208994 <___vfiprintf_internal_r+0xe08>
80208984:	01400044 	movi	r5,1
80208988:	0009883a 	mov	r4,zero
8020898c:	d811883a 	mov	r8,sp
80208990:	003ff206 	br	8020895c <__reset+0xfa1e895c>
80208994:	d9402117 	ldw	r5,132(sp)
80208998:	d9801a04 	addi	r6,sp,104
8020899c:	e009883a 	mov	r4,fp
802089a0:	0207a780 	call	80207a78 <__sprint_r.part.0>
802089a4:	103fcd1e 	bne	r2,zero,802088dc <__reset+0xfa1e88dc>
802089a8:	d9001b17 	ldw	r4,108(sp)
802089ac:	d8801c17 	ldw	r2,112(sp)
802089b0:	d811883a 	mov	r8,sp
802089b4:	21400044 	addi	r5,r4,1
802089b8:	003fe806 	br	8020895c <__reset+0xfa1e895c>
802089bc:	d9402117 	ldw	r5,132(sp)
802089c0:	d9002017 	ldw	r4,128(sp)
802089c4:	d9801a04 	addi	r6,sp,104
802089c8:	d9c02b15 	stw	r7,172(sp)
802089cc:	db402a15 	stw	r13,168(sp)
802089d0:	0207a780 	call	80207a78 <__sprint_r.part.0>
802089d4:	d9c02b17 	ldw	r7,172(sp)
802089d8:	db402a17 	ldw	r13,168(sp)
802089dc:	103fbf1e 	bne	r2,zero,802088dc <__reset+0xfa1e88dc>
802089e0:	d9401b17 	ldw	r5,108(sp)
802089e4:	d8801c17 	ldw	r2,112(sp)
802089e8:	d811883a 	mov	r8,sp
802089ec:	29800044 	addi	r6,r5,1
802089f0:	003dc406 	br	80208104 <__reset+0xfa1e8104>
802089f4:	1000d21e 	bne	r2,zero,80208d40 <___vfiprintf_internal_r+0x11b4>
802089f8:	d8c01d87 	ldb	r3,118(sp)
802089fc:	18009526 	beq	r3,zero,80208c54 <___vfiprintf_internal_r+0x10c8>
80208a00:	00800044 	movi	r2,1
80208a04:	d8c01d84 	addi	r3,sp,118
80208a08:	1009883a 	mov	r4,r2
80208a0c:	d8c00015 	stw	r3,0(sp)
80208a10:	d8800115 	stw	r2,4(sp)
80208a14:	d811883a 	mov	r8,sp
80208a18:	200b883a 	mov	r5,r4
80208a1c:	42000204 	addi	r8,r8,8
80208a20:	21000044 	addi	r4,r4,1
80208a24:	003d9706 	br	80208084 <__reset+0xfa1e8084>
80208a28:	d9001d04 	addi	r4,sp,116
80208a2c:	00800084 	movi	r2,2
80208a30:	d9000015 	stw	r4,0(sp)
80208a34:	d8800115 	stw	r2,4(sp)
80208a38:	1809883a 	mov	r4,r3
80208a3c:	d811883a 	mov	r8,sp
80208a40:	200b883a 	mov	r5,r4
80208a44:	42000204 	addi	r8,r8,8
80208a48:	21000044 	addi	r4,r4,1
80208a4c:	003f4e06 	br	80208788 <__reset+0xfa1e8788>
80208a50:	d8001d85 	stb	zero,118(sp)
80208a54:	48005016 	blt	r9,zero,80208b98 <___vfiprintf_internal_r+0x100c>
80208a58:	00ffdfc4 	movi	r3,-129
80208a5c:	94c4b03a 	or	r2,r18,r19
80208a60:	a0e8703a 	and	r20,r20,r3
80208a64:	103d4426 	beq	r2,zero,80207f78 <__reset+0xfa1e7f78>
80208a68:	0039883a 	mov	fp,zero
80208a6c:	d9002617 	ldw	r4,152(sp)
80208a70:	dd401a04 	addi	r21,sp,104
80208a74:	908003cc 	andi	r2,r18,15
80208a78:	9806973a 	slli	r3,r19,28
80208a7c:	2085883a 	add	r2,r4,r2
80208a80:	9024d13a 	srli	r18,r18,4
80208a84:	10800003 	ldbu	r2,0(r2)
80208a88:	9826d13a 	srli	r19,r19,4
80208a8c:	ad7fffc4 	addi	r21,r21,-1
80208a90:	1ca4b03a 	or	r18,r3,r18
80208a94:	a8800005 	stb	r2,0(r21)
80208a98:	94c4b03a 	or	r2,r18,r19
80208a9c:	103ff51e 	bne	r2,zero,80208a74 <__reset+0xfa1e8a74>
80208aa0:	003e5906 	br	80208408 <__reset+0xfa1e8408>
80208aa4:	d9402117 	ldw	r5,132(sp)
80208aa8:	d9002017 	ldw	r4,128(sp)
80208aac:	d9801a04 	addi	r6,sp,104
80208ab0:	0207a780 	call	80207a78 <__sprint_r.part.0>
80208ab4:	103f891e 	bne	r2,zero,802088dc <__reset+0xfa1e88dc>
80208ab8:	d8801c17 	ldw	r2,112(sp)
80208abc:	d811883a 	mov	r8,sp
80208ac0:	003f9506 	br	80208918 <__reset+0xfa1e8918>
80208ac4:	d9402117 	ldw	r5,132(sp)
80208ac8:	d9002017 	ldw	r4,128(sp)
80208acc:	d9801a04 	addi	r6,sp,104
80208ad0:	0207a780 	call	80207a78 <__sprint_r.part.0>
80208ad4:	103f811e 	bne	r2,zero,802088dc <__reset+0xfa1e88dc>
80208ad8:	d811883a 	mov	r8,sp
80208adc:	003ced06 	br	80207e94 <__reset+0xfa1e7e94>
80208ae0:	d9402117 	ldw	r5,132(sp)
80208ae4:	d9002017 	ldw	r4,128(sp)
80208ae8:	d9801a04 	addi	r6,sp,104
80208aec:	da402c15 	stw	r9,176(sp)
80208af0:	db802a15 	stw	r14,168(sp)
80208af4:	0207a780 	call	80207a78 <__sprint_r.part.0>
80208af8:	da402c17 	ldw	r9,176(sp)
80208afc:	db802a17 	ldw	r14,168(sp)
80208b00:	103f761e 	bne	r2,zero,802088dc <__reset+0xfa1e88dc>
80208b04:	d9401b17 	ldw	r5,108(sp)
80208b08:	d8801c17 	ldw	r2,112(sp)
80208b0c:	d811883a 	mov	r8,sp
80208b10:	29000044 	addi	r4,r5,1
80208b14:	003d5b06 	br	80208084 <__reset+0xfa1e8084>
80208b18:	d9402117 	ldw	r5,132(sp)
80208b1c:	d9002017 	ldw	r4,128(sp)
80208b20:	d9801a04 	addi	r6,sp,104
80208b24:	da402c15 	stw	r9,176(sp)
80208b28:	0207a780 	call	80207a78 <__sprint_r.part.0>
80208b2c:	da402c17 	ldw	r9,176(sp)
80208b30:	103f6a1e 	bne	r2,zero,802088dc <__reset+0xfa1e88dc>
80208b34:	d9401b17 	ldw	r5,108(sp)
80208b38:	d8801c17 	ldw	r2,112(sp)
80208b3c:	d811883a 	mov	r8,sp
80208b40:	29000044 	addi	r4,r5,1
80208b44:	003f1006 	br	80208788 <__reset+0xfa1e8788>
80208b48:	1000c31e 	bne	r2,zero,80208e58 <___vfiprintf_internal_r+0x12cc>
80208b4c:	01000044 	movi	r4,1
80208b50:	000b883a 	mov	r5,zero
80208b54:	d811883a 	mov	r8,sp
80208b58:	003f0d06 	br	80208790 <__reset+0xfa1e8790>
80208b5c:	d9402117 	ldw	r5,132(sp)
80208b60:	d9002017 	ldw	r4,128(sp)
80208b64:	d9801a04 	addi	r6,sp,104
80208b68:	0207a780 	call	80207a78 <__sprint_r.part.0>
80208b6c:	103f5b1e 	bne	r2,zero,802088dc <__reset+0xfa1e88dc>
80208b70:	d9001b17 	ldw	r4,108(sp)
80208b74:	d8801c17 	ldw	r2,112(sp)
80208b78:	d811883a 	mov	r8,sp
80208b7c:	21000044 	addi	r4,r4,1
80208b80:	003d8006 	br	80208184 <__reset+0xfa1e8184>
80208b84:	01200874 	movhi	r4,32801
80208b88:	21084504 	addi	r4,r4,8468
80208b8c:	d9002615 	stw	r4,152(sp)
80208b90:	d8c02215 	stw	r3,136(sp)
80208b94:	1029883a 	mov	r20,r2
80208b98:	94c4b03a 	or	r2,r18,r19
80208b9c:	103fb21e 	bne	r2,zero,80208a68 <__reset+0xfa1e8a68>
80208ba0:	0039883a 	mov	fp,zero
80208ba4:	00800084 	movi	r2,2
80208ba8:	003e6b06 	br	80208558 <__reset+0xfa1e8558>
80208bac:	da802217 	ldw	r10,136(sp)
80208bb0:	d8001d85 	stb	zero,118(sp)
80208bb4:	0027883a 	mov	r19,zero
80208bb8:	50800104 	addi	r2,r10,4
80208bbc:	54800017 	ldw	r18,0(r10)
80208bc0:	483e6016 	blt	r9,zero,80208544 <__reset+0xfa1e8544>
80208bc4:	00ffdfc4 	movi	r3,-129
80208bc8:	d8802215 	stw	r2,136(sp)
80208bcc:	a0e8703a 	and	r20,r20,r3
80208bd0:	0039883a 	mov	fp,zero
80208bd4:	903ebb26 	beq	r18,zero,802086c4 <__reset+0xfa1e86c4>
80208bd8:	00800244 	movi	r2,9
80208bdc:	14bdee36 	bltu	r2,r18,80208398 <__reset+0xfa1e8398>
80208be0:	003eba06 	br	802086cc <__reset+0xfa1e86cc>
80208be4:	00800c04 	movi	r2,48
80208be8:	d8c01d45 	stb	r3,117(sp)
80208bec:	d8801d05 	stb	r2,116(sp)
80208bf0:	d8001d85 	stb	zero,118(sp)
80208bf4:	a0c00094 	ori	r3,r20,2
80208bf8:	4800a916 	blt	r9,zero,80208ea0 <___vfiprintf_internal_r+0x1314>
80208bfc:	00bfdfc4 	movi	r2,-129
80208c00:	a096703a 	and	r11,r20,r2
80208c04:	5d000094 	ori	r20,r11,2
80208c08:	0039883a 	mov	fp,zero
80208c0c:	003f9706 	br	80208a6c <__reset+0xfa1e8a6c>
80208c10:	8025883a 	mov	r18,r16
80208c14:	003c2e06 	br	80207cd0 <__reset+0xfa1e7cd0>
80208c18:	00a00874 	movhi	r2,32801
80208c1c:	10884504 	addi	r2,r2,8468
80208c20:	0039883a 	mov	fp,zero
80208c24:	d8802615 	stw	r2,152(sp)
80208c28:	003f9006 	br	80208a6c <__reset+0xfa1e8a6c>
80208c2c:	04a5c83a 	sub	r18,zero,r18
80208c30:	07000b44 	movi	fp,45
80208c34:	9004c03a 	cmpne	r2,r18,zero
80208c38:	04e7c83a 	sub	r19,zero,r19
80208c3c:	df001d85 	stb	fp,118(sp)
80208c40:	98a7c83a 	sub	r19,r19,r2
80208c44:	48009f16 	blt	r9,zero,80208ec4 <___vfiprintf_internal_r+0x1338>
80208c48:	00bfdfc4 	movi	r2,-129
80208c4c:	a0a8703a 	and	r20,r20,r2
80208c50:	003dd006 	br	80208394 <__reset+0xfa1e8394>
80208c54:	70004c26 	beq	r14,zero,80208d88 <___vfiprintf_internal_r+0x11fc>
80208c58:	00800084 	movi	r2,2
80208c5c:	d8c01d04 	addi	r3,sp,116
80208c60:	d8c00015 	stw	r3,0(sp)
80208c64:	d8800115 	stw	r2,4(sp)
80208c68:	01000044 	movi	r4,1
80208c6c:	d811883a 	mov	r8,sp
80208c70:	003f7306 	br	80208a40 <__reset+0xfa1e8a40>
80208c74:	a080100c 	andi	r2,r20,64
80208c78:	da802217 	ldw	r10,136(sp)
80208c7c:	103e0626 	beq	r2,zero,80208498 <__reset+0xfa1e8498>
80208c80:	5480000f 	ldh	r18,0(r10)
80208c84:	52800104 	addi	r10,r10,4
80208c88:	da802215 	stw	r10,136(sp)
80208c8c:	9027d7fa 	srai	r19,r18,31
80208c90:	9805883a 	mov	r2,r19
80208c94:	003db806 	br	80208378 <__reset+0xfa1e8378>
80208c98:	a080040c 	andi	r2,r20,16
80208c9c:	1000091e 	bne	r2,zero,80208cc4 <___vfiprintf_internal_r+0x1138>
80208ca0:	a2c0100c 	andi	r11,r20,64
80208ca4:	58000726 	beq	r11,zero,80208cc4 <___vfiprintf_internal_r+0x1138>
80208ca8:	da802217 	ldw	r10,136(sp)
80208cac:	50800017 	ldw	r2,0(r10)
80208cb0:	52800104 	addi	r10,r10,4
80208cb4:	da802215 	stw	r10,136(sp)
80208cb8:	da802317 	ldw	r10,140(sp)
80208cbc:	1280000d 	sth	r10,0(r2)
80208cc0:	003be706 	br	80207c60 <__reset+0xfa1e7c60>
80208cc4:	da802217 	ldw	r10,136(sp)
80208cc8:	50800017 	ldw	r2,0(r10)
80208ccc:	52800104 	addi	r10,r10,4
80208cd0:	da802215 	stw	r10,136(sp)
80208cd4:	da802317 	ldw	r10,140(sp)
80208cd8:	12800015 	stw	r10,0(r2)
80208cdc:	003be006 	br	80207c60 <__reset+0xfa1e7c60>
80208ce0:	a080100c 	andi	r2,r20,64
80208ce4:	da802217 	ldw	r10,136(sp)
80208ce8:	10003026 	beq	r2,zero,80208dac <___vfiprintf_internal_r+0x1220>
80208cec:	5480000b 	ldhu	r18,0(r10)
80208cf0:	52800104 	addi	r10,r10,4
80208cf4:	0027883a 	mov	r19,zero
80208cf8:	da802215 	stw	r10,136(sp)
80208cfc:	003d8006 	br	80208300 <__reset+0xfa1e8300>
80208d00:	80c00007 	ldb	r3,0(r16)
80208d04:	003c0006 	br	80207d08 <__reset+0xfa1e7d08>
80208d08:	a080100c 	andi	r2,r20,64
80208d0c:	d8001d85 	stb	zero,118(sp)
80208d10:	da802217 	ldw	r10,136(sp)
80208d14:	1000201e 	bne	r2,zero,80208d98 <___vfiprintf_internal_r+0x120c>
80208d18:	50800104 	addi	r2,r10,4
80208d1c:	54800017 	ldw	r18,0(r10)
80208d20:	0027883a 	mov	r19,zero
80208d24:	483def0e 	bge	r9,zero,802084e4 <__reset+0xfa1e84e4>
80208d28:	94c6b03a 	or	r3,r18,r19
80208d2c:	d8802215 	stw	r2,136(sp)
80208d30:	183d4e1e 	bne	r3,zero,8020826c <__reset+0xfa1e826c>
80208d34:	0039883a 	mov	fp,zero
80208d38:	0005883a 	mov	r2,zero
80208d3c:	003e0606 	br	80208558 <__reset+0xfa1e8558>
80208d40:	d9402117 	ldw	r5,132(sp)
80208d44:	d9002017 	ldw	r4,128(sp)
80208d48:	d9801a04 	addi	r6,sp,104
80208d4c:	da402c15 	stw	r9,176(sp)
80208d50:	db802a15 	stw	r14,168(sp)
80208d54:	0207a780 	call	80207a78 <__sprint_r.part.0>
80208d58:	da402c17 	ldw	r9,176(sp)
80208d5c:	db802a17 	ldw	r14,168(sp)
80208d60:	103ede1e 	bne	r2,zero,802088dc <__reset+0xfa1e88dc>
80208d64:	d9401b17 	ldw	r5,108(sp)
80208d68:	d8801c17 	ldw	r2,112(sp)
80208d6c:	d811883a 	mov	r8,sp
80208d70:	29000044 	addi	r4,r5,1
80208d74:	003e7406 	br	80208748 <__reset+0xfa1e8748>
80208d78:	00bfffc4 	movi	r2,-1
80208d7c:	003c5806 	br	80207ee0 <__reset+0xfa1e7ee0>
80208d80:	d811883a 	mov	r8,sp
80208d84:	003ee806 	br	80208928 <__reset+0xfa1e8928>
80208d88:	000b883a 	mov	r5,zero
80208d8c:	01000044 	movi	r4,1
80208d90:	d811883a 	mov	r8,sp
80208d94:	003e7c06 	br	80208788 <__reset+0xfa1e8788>
80208d98:	50800104 	addi	r2,r10,4
80208d9c:	5480000b 	ldhu	r18,0(r10)
80208da0:	0027883a 	mov	r19,zero
80208da4:	483dcf0e 	bge	r9,zero,802084e4 <__reset+0xfa1e84e4>
80208da8:	003fdf06 	br	80208d28 <__reset+0xfa1e8d28>
80208dac:	54800017 	ldw	r18,0(r10)
80208db0:	52800104 	addi	r10,r10,4
80208db4:	0027883a 	mov	r19,zero
80208db8:	da802215 	stw	r10,136(sp)
80208dbc:	003d5006 	br	80208300 <__reset+0xfa1e8300>
80208dc0:	50800104 	addi	r2,r10,4
80208dc4:	5480000b 	ldhu	r18,0(r10)
80208dc8:	0027883a 	mov	r19,zero
80208dcc:	483f7d0e 	bge	r9,zero,80208bc4 <__reset+0xfa1e8bc4>
80208dd0:	003ddc06 	br	80208544 <__reset+0xfa1e8544>
80208dd4:	d8c02215 	stw	r3,136(sp)
80208dd8:	0039883a 	mov	fp,zero
80208ddc:	003ddb06 	br	8020854c <__reset+0xfa1e854c>
80208de0:	02a00874 	movhi	r10,32801
80208de4:	5288a604 	addi	r10,r10,8856
80208de8:	da802415 	stw	r10,144(sp)
80208dec:	003e8306 	br	802087fc <__reset+0xfa1e87fc>
80208df0:	d8801c17 	ldw	r2,112(sp)
80208df4:	dd002117 	ldw	r20,132(sp)
80208df8:	103eb926 	beq	r2,zero,802088e0 <__reset+0xfa1e88e0>
80208dfc:	d9002017 	ldw	r4,128(sp)
80208e00:	d9801a04 	addi	r6,sp,104
80208e04:	a00b883a 	mov	r5,r20
80208e08:	0207a780 	call	80207a78 <__sprint_r.part.0>
80208e0c:	003eb406 	br	802088e0 <__reset+0xfa1e88e0>
80208e10:	80c00043 	ldbu	r3,1(r16)
80208e14:	a5000814 	ori	r20,r20,32
80208e18:	84000044 	addi	r16,r16,1
80208e1c:	18c03fcc 	andi	r3,r3,255
80208e20:	18c0201c 	xori	r3,r3,128
80208e24:	18ffe004 	addi	r3,r3,-128
80208e28:	003bb706 	br	80207d08 <__reset+0xfa1e7d08>
80208e2c:	a809883a 	mov	r4,r21
80208e30:	d8c02a15 	stw	r3,168(sp)
80208e34:	da002b15 	stw	r8,172(sp)
80208e38:	02004e00 	call	802004e0 <strlen>
80208e3c:	d8c02a17 	ldw	r3,168(sp)
80208e40:	1027883a 	mov	r19,r2
80208e44:	df001d83 	ldbu	fp,118(sp)
80208e48:	d8c02215 	stw	r3,136(sp)
80208e4c:	0013883a 	mov	r9,zero
80208e50:	da002b17 	ldw	r8,172(sp)
80208e54:	003c4d06 	br	80207f8c <__reset+0xfa1e7f8c>
80208e58:	d9402117 	ldw	r5,132(sp)
80208e5c:	d9002017 	ldw	r4,128(sp)
80208e60:	d9801a04 	addi	r6,sp,104
80208e64:	da402c15 	stw	r9,176(sp)
80208e68:	0207a780 	call	80207a78 <__sprint_r.part.0>
80208e6c:	da402c17 	ldw	r9,176(sp)
80208e70:	103e9a1e 	bne	r2,zero,802088dc <__reset+0xfa1e88dc>
80208e74:	d9401b17 	ldw	r5,108(sp)
80208e78:	d8801c17 	ldw	r2,112(sp)
80208e7c:	d811883a 	mov	r8,sp
80208e80:	29000044 	addi	r4,r5,1
80208e84:	003e4206 	br	80208790 <__reset+0xfa1e8790>
80208e88:	d9401b17 	ldw	r5,108(sp)
80208e8c:	01200874 	movhi	r4,32801
80208e90:	2108aa04 	addi	r4,r4,8872
80208e94:	d9002415 	stw	r4,144(sp)
80208e98:	29400044 	addi	r5,r5,1
80208e9c:	003c6d06 	br	80208054 <__reset+0xfa1e8054>
80208ea0:	0039883a 	mov	fp,zero
80208ea4:	00800084 	movi	r2,2
80208ea8:	10803fcc 	andi	r2,r2,255
80208eac:	01000044 	movi	r4,1
80208eb0:	11001e26 	beq	r2,r4,80208f2c <___vfiprintf_internal_r+0x13a0>
80208eb4:	01000084 	movi	r4,2
80208eb8:	11001e1e 	bne	r2,r4,80208f34 <___vfiprintf_internal_r+0x13a8>
80208ebc:	1829883a 	mov	r20,r3
80208ec0:	003eea06 	br	80208a6c <__reset+0xfa1e8a6c>
80208ec4:	a007883a 	mov	r3,r20
80208ec8:	00800044 	movi	r2,1
80208ecc:	003ff606 	br	80208ea8 <__reset+0xfa1e8ea8>
80208ed0:	00800184 	movi	r2,6
80208ed4:	1240012e 	bgeu	r2,r9,80208edc <___vfiprintf_internal_r+0x1350>
80208ed8:	1013883a 	mov	r9,r2
80208edc:	4827883a 	mov	r19,r9
80208ee0:	4825883a 	mov	r18,r9
80208ee4:	48001516 	blt	r9,zero,80208f3c <___vfiprintf_internal_r+0x13b0>
80208ee8:	05600874 	movhi	r21,32801
80208eec:	d8c02215 	stw	r3,136(sp)
80208ef0:	ad484a04 	addi	r21,r21,8488
80208ef4:	003d1406 	br	80208348 <__reset+0xfa1e8348>
80208ef8:	02a00874 	movhi	r10,32801
80208efc:	5288a604 	addi	r10,r10,8856
80208f00:	da802415 	stw	r10,144(sp)
80208f04:	200d883a 	mov	r6,r4
80208f08:	003c9106 	br	80208150 <__reset+0xfa1e8150>
80208f0c:	5021883a 	mov	r16,r10
80208f10:	0013883a 	mov	r9,zero
80208f14:	003b7d06 	br	80207d0c <__reset+0xfa1e7d0c>
80208f18:	4827883a 	mov	r19,r9
80208f1c:	df001d83 	ldbu	fp,118(sp)
80208f20:	d8c02215 	stw	r3,136(sp)
80208f24:	0013883a 	mov	r9,zero
80208f28:	003c1806 	br	80207f8c <__reset+0xfa1e7f8c>
80208f2c:	1829883a 	mov	r20,r3
80208f30:	003d1806 	br	80208394 <__reset+0xfa1e8394>
80208f34:	1829883a 	mov	r20,r3
80208f38:	003ccd06 	br	80208270 <__reset+0xfa1e8270>
80208f3c:	0025883a 	mov	r18,zero
80208f40:	003fe906 	br	80208ee8 <__reset+0xfa1e8ee8>
80208f44:	d8802217 	ldw	r2,136(sp)
80208f48:	80c00043 	ldbu	r3,1(r16)
80208f4c:	5021883a 	mov	r16,r10
80208f50:	12400017 	ldw	r9,0(r2)
80208f54:	10800104 	addi	r2,r2,4
80208f58:	d8802215 	stw	r2,136(sp)
80208f5c:	483faf0e 	bge	r9,zero,80208e1c <__reset+0xfa1e8e1c>
80208f60:	18c03fcc 	andi	r3,r3,255
80208f64:	18c0201c 	xori	r3,r3,128
80208f68:	027fffc4 	movi	r9,-1
80208f6c:	18ffe004 	addi	r3,r3,-128
80208f70:	003b6506 	br	80207d08 <__reset+0xfa1e7d08>
80208f74:	d9c01d85 	stb	r7,118(sp)
80208f78:	003ca006 	br	802081fc <__reset+0xfa1e81fc>
80208f7c:	d9c01d85 	stb	r7,118(sp)
80208f80:	003cad06 	br	80208238 <__reset+0xfa1e8238>
80208f84:	d9c01d85 	stb	r7,118(sp)
80208f88:	003d7d06 	br	80208580 <__reset+0xfa1e8580>
80208f8c:	d9c01d85 	stb	r7,118(sp)
80208f90:	003d5f06 	br	80208510 <__reset+0xfa1e8510>
80208f94:	a080004c 	andi	r2,r20,1
80208f98:	0039883a 	mov	fp,zero
80208f9c:	10000526 	beq	r2,zero,80208fb4 <___vfiprintf_internal_r+0x1428>
80208fa0:	00800c04 	movi	r2,48
80208fa4:	d88019c5 	stb	r2,103(sp)
80208fa8:	dcc02717 	ldw	r19,156(sp)
80208fac:	dd4019c4 	addi	r21,sp,103
80208fb0:	003bf606 	br	80207f8c <__reset+0xfa1e7f8c>
80208fb4:	0027883a 	mov	r19,zero
80208fb8:	dd401a04 	addi	r21,sp,104
80208fbc:	003bf306 	br	80207f8c <__reset+0xfa1e7f8c>
80208fc0:	d9c01d85 	stb	r7,118(sp)
80208fc4:	003dc806 	br	802086e8 <__reset+0xfa1e86e8>
80208fc8:	d9c01d85 	stb	r7,118(sp)
80208fcc:	003d3a06 	br	802084b8 <__reset+0xfa1e84b8>
80208fd0:	d9c01d85 	stb	r7,118(sp)
80208fd4:	003d2a06 	br	80208480 <__reset+0xfa1e8480>
80208fd8:	d9c01d85 	stb	r7,118(sp)
80208fdc:	003cde06 	br	80208358 <__reset+0xfa1e8358>
80208fe0:	d9c01d85 	stb	r7,118(sp)
80208fe4:	003cbc06 	br	802082d8 <__reset+0xfa1e82d8>

80208fe8 <__vfiprintf_internal>:
80208fe8:	00a00874 	movhi	r2,32801
80208fec:	1090b404 	addi	r2,r2,17104
80208ff0:	300f883a 	mov	r7,r6
80208ff4:	280d883a 	mov	r6,r5
80208ff8:	200b883a 	mov	r5,r4
80208ffc:	11000017 	ldw	r4,0(r2)
80209000:	0207b8c1 	jmpi	80207b8c <___vfiprintf_internal_r>

80209004 <__sbprintf>:
80209004:	2880030b 	ldhu	r2,12(r5)
80209008:	2ac01917 	ldw	r11,100(r5)
8020900c:	2a80038b 	ldhu	r10,14(r5)
80209010:	2a400717 	ldw	r9,28(r5)
80209014:	2a000917 	ldw	r8,36(r5)
80209018:	defee204 	addi	sp,sp,-1144
8020901c:	00c10004 	movi	r3,1024
80209020:	dc011a15 	stw	r16,1128(sp)
80209024:	10bfff4c 	andi	r2,r2,65533
80209028:	2821883a 	mov	r16,r5
8020902c:	d8cb883a 	add	r5,sp,r3
80209030:	dc811c15 	stw	r18,1136(sp)
80209034:	dc411b15 	stw	r17,1132(sp)
80209038:	dfc11d15 	stw	ra,1140(sp)
8020903c:	2025883a 	mov	r18,r4
80209040:	d881030d 	sth	r2,1036(sp)
80209044:	dac11915 	stw	r11,1124(sp)
80209048:	da81038d 	sth	r10,1038(sp)
8020904c:	da410715 	stw	r9,1052(sp)
80209050:	da010915 	stw	r8,1060(sp)
80209054:	dec10015 	stw	sp,1024(sp)
80209058:	dec10415 	stw	sp,1040(sp)
8020905c:	d8c10215 	stw	r3,1032(sp)
80209060:	d8c10515 	stw	r3,1044(sp)
80209064:	d8010615 	stw	zero,1048(sp)
80209068:	0207b8c0 	call	80207b8c <___vfiprintf_internal_r>
8020906c:	1023883a 	mov	r17,r2
80209070:	10000416 	blt	r2,zero,80209084 <__sbprintf+0x80>
80209074:	d9410004 	addi	r5,sp,1024
80209078:	9009883a 	mov	r4,r18
8020907c:	02044400 	call	80204440 <_fflush_r>
80209080:	10000d1e 	bne	r2,zero,802090b8 <__sbprintf+0xb4>
80209084:	d881030b 	ldhu	r2,1036(sp)
80209088:	1080100c 	andi	r2,r2,64
8020908c:	10000326 	beq	r2,zero,8020909c <__sbprintf+0x98>
80209090:	8080030b 	ldhu	r2,12(r16)
80209094:	10801014 	ori	r2,r2,64
80209098:	8080030d 	sth	r2,12(r16)
8020909c:	8805883a 	mov	r2,r17
802090a0:	dfc11d17 	ldw	ra,1140(sp)
802090a4:	dc811c17 	ldw	r18,1136(sp)
802090a8:	dc411b17 	ldw	r17,1132(sp)
802090ac:	dc011a17 	ldw	r16,1128(sp)
802090b0:	dec11e04 	addi	sp,sp,1144
802090b4:	f800283a 	ret
802090b8:	047fffc4 	movi	r17,-1
802090bc:	003ff106 	br	80209084 <__reset+0xfa1e9084>

802090c0 <_write_r>:
802090c0:	defffd04 	addi	sp,sp,-12
802090c4:	2805883a 	mov	r2,r5
802090c8:	dc000015 	stw	r16,0(sp)
802090cc:	04200874 	movhi	r16,32801
802090d0:	dc400115 	stw	r17,4(sp)
802090d4:	300b883a 	mov	r5,r6
802090d8:	8410cb04 	addi	r16,r16,17196
802090dc:	2023883a 	mov	r17,r4
802090e0:	380d883a 	mov	r6,r7
802090e4:	1009883a 	mov	r4,r2
802090e8:	dfc00215 	stw	ra,8(sp)
802090ec:	80000015 	stw	zero,0(r16)
802090f0:	020d4500 	call	8020d450 <write>
802090f4:	00ffffc4 	movi	r3,-1
802090f8:	10c00526 	beq	r2,r3,80209110 <_write_r+0x50>
802090fc:	dfc00217 	ldw	ra,8(sp)
80209100:	dc400117 	ldw	r17,4(sp)
80209104:	dc000017 	ldw	r16,0(sp)
80209108:	dec00304 	addi	sp,sp,12
8020910c:	f800283a 	ret
80209110:	80c00017 	ldw	r3,0(r16)
80209114:	183ff926 	beq	r3,zero,802090fc <__reset+0xfa1e90fc>
80209118:	88c00015 	stw	r3,0(r17)
8020911c:	003ff706 	br	802090fc <__reset+0xfa1e90fc>

80209120 <_close_r>:
80209120:	defffd04 	addi	sp,sp,-12
80209124:	dc000015 	stw	r16,0(sp)
80209128:	04200874 	movhi	r16,32801
8020912c:	dc400115 	stw	r17,4(sp)
80209130:	8410cb04 	addi	r16,r16,17196
80209134:	2023883a 	mov	r17,r4
80209138:	2809883a 	mov	r4,r5
8020913c:	dfc00215 	stw	ra,8(sp)
80209140:	80000015 	stw	zero,0(r16)
80209144:	020ccfc0 	call	8020ccfc <close>
80209148:	00ffffc4 	movi	r3,-1
8020914c:	10c00526 	beq	r2,r3,80209164 <_close_r+0x44>
80209150:	dfc00217 	ldw	ra,8(sp)
80209154:	dc400117 	ldw	r17,4(sp)
80209158:	dc000017 	ldw	r16,0(sp)
8020915c:	dec00304 	addi	sp,sp,12
80209160:	f800283a 	ret
80209164:	80c00017 	ldw	r3,0(r16)
80209168:	183ff926 	beq	r3,zero,80209150 <__reset+0xfa1e9150>
8020916c:	88c00015 	stw	r3,0(r17)
80209170:	003ff706 	br	80209150 <__reset+0xfa1e9150>

80209174 <_calloc_r>:
80209174:	298b383a 	mul	r5,r5,r6
80209178:	defffe04 	addi	sp,sp,-8
8020917c:	dfc00115 	stw	ra,4(sp)
80209180:	dc000015 	stw	r16,0(sp)
80209184:	020557c0 	call	8020557c <_malloc_r>
80209188:	10002926 	beq	r2,zero,80209230 <_calloc_r+0xbc>
8020918c:	11bfff17 	ldw	r6,-4(r2)
80209190:	1021883a 	mov	r16,r2
80209194:	00bfff04 	movi	r2,-4
80209198:	308c703a 	and	r6,r6,r2
8020919c:	00c00904 	movi	r3,36
802091a0:	308d883a 	add	r6,r6,r2
802091a4:	19801636 	bltu	r3,r6,80209200 <_calloc_r+0x8c>
802091a8:	008004c4 	movi	r2,19
802091ac:	11800b2e 	bgeu	r2,r6,802091dc <_calloc_r+0x68>
802091b0:	80000015 	stw	zero,0(r16)
802091b4:	80000115 	stw	zero,4(r16)
802091b8:	008006c4 	movi	r2,27
802091bc:	11801a2e 	bgeu	r2,r6,80209228 <_calloc_r+0xb4>
802091c0:	80000215 	stw	zero,8(r16)
802091c4:	80000315 	stw	zero,12(r16)
802091c8:	30c0151e 	bne	r6,r3,80209220 <_calloc_r+0xac>
802091cc:	80000415 	stw	zero,16(r16)
802091d0:	80800604 	addi	r2,r16,24
802091d4:	80000515 	stw	zero,20(r16)
802091d8:	00000106 	br	802091e0 <_calloc_r+0x6c>
802091dc:	8005883a 	mov	r2,r16
802091e0:	10000015 	stw	zero,0(r2)
802091e4:	10000115 	stw	zero,4(r2)
802091e8:	10000215 	stw	zero,8(r2)
802091ec:	8005883a 	mov	r2,r16
802091f0:	dfc00117 	ldw	ra,4(sp)
802091f4:	dc000017 	ldw	r16,0(sp)
802091f8:	dec00204 	addi	sp,sp,8
802091fc:	f800283a 	ret
80209200:	000b883a 	mov	r5,zero
80209204:	8009883a 	mov	r4,r16
80209208:	02061100 	call	80206110 <memset>
8020920c:	8005883a 	mov	r2,r16
80209210:	dfc00117 	ldw	ra,4(sp)
80209214:	dc000017 	ldw	r16,0(sp)
80209218:	dec00204 	addi	sp,sp,8
8020921c:	f800283a 	ret
80209220:	80800404 	addi	r2,r16,16
80209224:	003fee06 	br	802091e0 <__reset+0xfa1e91e0>
80209228:	80800204 	addi	r2,r16,8
8020922c:	003fec06 	br	802091e0 <__reset+0xfa1e91e0>
80209230:	0005883a 	mov	r2,zero
80209234:	003fee06 	br	802091f0 <__reset+0xfa1e91f0>

80209238 <_fclose_r>:
80209238:	28003926 	beq	r5,zero,80209320 <_fclose_r+0xe8>
8020923c:	defffc04 	addi	sp,sp,-16
80209240:	dc400115 	stw	r17,4(sp)
80209244:	dc000015 	stw	r16,0(sp)
80209248:	dfc00315 	stw	ra,12(sp)
8020924c:	dc800215 	stw	r18,8(sp)
80209250:	2023883a 	mov	r17,r4
80209254:	2821883a 	mov	r16,r5
80209258:	20000226 	beq	r4,zero,80209264 <_fclose_r+0x2c>
8020925c:	20800e17 	ldw	r2,56(r4)
80209260:	10002726 	beq	r2,zero,80209300 <_fclose_r+0xc8>
80209264:	8080030f 	ldh	r2,12(r16)
80209268:	1000071e 	bne	r2,zero,80209288 <_fclose_r+0x50>
8020926c:	0005883a 	mov	r2,zero
80209270:	dfc00317 	ldw	ra,12(sp)
80209274:	dc800217 	ldw	r18,8(sp)
80209278:	dc400117 	ldw	r17,4(sp)
8020927c:	dc000017 	ldw	r16,0(sp)
80209280:	dec00404 	addi	sp,sp,16
80209284:	f800283a 	ret
80209288:	800b883a 	mov	r5,r16
8020928c:	8809883a 	mov	r4,r17
80209290:	02042240 	call	80204224 <__sflush_r>
80209294:	1025883a 	mov	r18,r2
80209298:	80800b17 	ldw	r2,44(r16)
8020929c:	10000426 	beq	r2,zero,802092b0 <_fclose_r+0x78>
802092a0:	81400717 	ldw	r5,28(r16)
802092a4:	8809883a 	mov	r4,r17
802092a8:	103ee83a 	callr	r2
802092ac:	10001616 	blt	r2,zero,80209308 <_fclose_r+0xd0>
802092b0:	8080030b 	ldhu	r2,12(r16)
802092b4:	1080200c 	andi	r2,r2,128
802092b8:	1000151e 	bne	r2,zero,80209310 <_fclose_r+0xd8>
802092bc:	81400c17 	ldw	r5,48(r16)
802092c0:	28000526 	beq	r5,zero,802092d8 <_fclose_r+0xa0>
802092c4:	80801004 	addi	r2,r16,64
802092c8:	28800226 	beq	r5,r2,802092d4 <_fclose_r+0x9c>
802092cc:	8809883a 	mov	r4,r17
802092d0:	02049900 	call	80204990 <_free_r>
802092d4:	80000c15 	stw	zero,48(r16)
802092d8:	81401117 	ldw	r5,68(r16)
802092dc:	28000326 	beq	r5,zero,802092ec <_fclose_r+0xb4>
802092e0:	8809883a 	mov	r4,r17
802092e4:	02049900 	call	80204990 <_free_r>
802092e8:	80001115 	stw	zero,68(r16)
802092ec:	020482c0 	call	8020482c <__sfp_lock_acquire>
802092f0:	8000030d 	sth	zero,12(r16)
802092f4:	02048300 	call	80204830 <__sfp_lock_release>
802092f8:	9005883a 	mov	r2,r18
802092fc:	003fdc06 	br	80209270 <__reset+0xfa1e9270>
80209300:	020481c0 	call	8020481c <__sinit>
80209304:	003fd706 	br	80209264 <__reset+0xfa1e9264>
80209308:	04bfffc4 	movi	r18,-1
8020930c:	003fe806 	br	802092b0 <__reset+0xfa1e92b0>
80209310:	81400417 	ldw	r5,16(r16)
80209314:	8809883a 	mov	r4,r17
80209318:	02049900 	call	80204990 <_free_r>
8020931c:	003fe706 	br	802092bc <__reset+0xfa1e92bc>
80209320:	0005883a 	mov	r2,zero
80209324:	f800283a 	ret

80209328 <fclose>:
80209328:	00a00874 	movhi	r2,32801
8020932c:	1090b404 	addi	r2,r2,17104
80209330:	200b883a 	mov	r5,r4
80209334:	11000017 	ldw	r4,0(r2)
80209338:	02092381 	jmpi	80209238 <_fclose_r>

8020933c <__fputwc>:
8020933c:	defff804 	addi	sp,sp,-32
80209340:	dcc00415 	stw	r19,16(sp)
80209344:	dc800315 	stw	r18,12(sp)
80209348:	dc000115 	stw	r16,4(sp)
8020934c:	dfc00715 	stw	ra,28(sp)
80209350:	dd400615 	stw	r21,24(sp)
80209354:	dd000515 	stw	r20,20(sp)
80209358:	dc400215 	stw	r17,8(sp)
8020935c:	2027883a 	mov	r19,r4
80209360:	2825883a 	mov	r18,r5
80209364:	3021883a 	mov	r16,r6
80209368:	020536c0 	call	8020536c <__locale_mb_cur_max>
8020936c:	00c00044 	movi	r3,1
80209370:	10c03e26 	beq	r2,r3,8020946c <__fputwc+0x130>
80209374:	81c01704 	addi	r7,r16,92
80209378:	900d883a 	mov	r6,r18
8020937c:	d80b883a 	mov	r5,sp
80209380:	9809883a 	mov	r4,r19
80209384:	020980c0 	call	8020980c <_wcrtomb_r>
80209388:	1029883a 	mov	r20,r2
8020938c:	00bfffc4 	movi	r2,-1
80209390:	a0802026 	beq	r20,r2,80209414 <__fputwc+0xd8>
80209394:	d9400003 	ldbu	r5,0(sp)
80209398:	a0001c26 	beq	r20,zero,8020940c <__fputwc+0xd0>
8020939c:	0023883a 	mov	r17,zero
802093a0:	05400284 	movi	r21,10
802093a4:	00000906 	br	802093cc <__fputwc+0x90>
802093a8:	80800017 	ldw	r2,0(r16)
802093ac:	11400005 	stb	r5,0(r2)
802093b0:	80c00017 	ldw	r3,0(r16)
802093b4:	18c00044 	addi	r3,r3,1
802093b8:	80c00015 	stw	r3,0(r16)
802093bc:	8c400044 	addi	r17,r17,1
802093c0:	dc45883a 	add	r2,sp,r17
802093c4:	8d00112e 	bgeu	r17,r20,8020940c <__fputwc+0xd0>
802093c8:	11400003 	ldbu	r5,0(r2)
802093cc:	80c00217 	ldw	r3,8(r16)
802093d0:	18ffffc4 	addi	r3,r3,-1
802093d4:	80c00215 	stw	r3,8(r16)
802093d8:	183ff30e 	bge	r3,zero,802093a8 <__reset+0xfa1e93a8>
802093dc:	80800617 	ldw	r2,24(r16)
802093e0:	18801916 	blt	r3,r2,80209448 <__fputwc+0x10c>
802093e4:	80800017 	ldw	r2,0(r16)
802093e8:	11400005 	stb	r5,0(r2)
802093ec:	80800017 	ldw	r2,0(r16)
802093f0:	10c00003 	ldbu	r3,0(r2)
802093f4:	10800044 	addi	r2,r2,1
802093f8:	1d402326 	beq	r3,r21,80209488 <__fputwc+0x14c>
802093fc:	80800015 	stw	r2,0(r16)
80209400:	8c400044 	addi	r17,r17,1
80209404:	dc45883a 	add	r2,sp,r17
80209408:	8d3fef36 	bltu	r17,r20,802093c8 <__reset+0xfa1e93c8>
8020940c:	9005883a 	mov	r2,r18
80209410:	00000406 	br	80209424 <__fputwc+0xe8>
80209414:	80c0030b 	ldhu	r3,12(r16)
80209418:	a005883a 	mov	r2,r20
8020941c:	18c01014 	ori	r3,r3,64
80209420:	80c0030d 	sth	r3,12(r16)
80209424:	dfc00717 	ldw	ra,28(sp)
80209428:	dd400617 	ldw	r21,24(sp)
8020942c:	dd000517 	ldw	r20,20(sp)
80209430:	dcc00417 	ldw	r19,16(sp)
80209434:	dc800317 	ldw	r18,12(sp)
80209438:	dc400217 	ldw	r17,8(sp)
8020943c:	dc000117 	ldw	r16,4(sp)
80209440:	dec00804 	addi	sp,sp,32
80209444:	f800283a 	ret
80209448:	800d883a 	mov	r6,r16
8020944c:	29403fcc 	andi	r5,r5,255
80209450:	9809883a 	mov	r4,r19
80209454:	02096b40 	call	802096b4 <__swbuf_r>
80209458:	10bfffe0 	cmpeqi	r2,r2,-1
8020945c:	10803fcc 	andi	r2,r2,255
80209460:	103fd626 	beq	r2,zero,802093bc <__reset+0xfa1e93bc>
80209464:	00bfffc4 	movi	r2,-1
80209468:	003fee06 	br	80209424 <__reset+0xfa1e9424>
8020946c:	90ffffc4 	addi	r3,r18,-1
80209470:	01003f84 	movi	r4,254
80209474:	20ffbf36 	bltu	r4,r3,80209374 <__reset+0xfa1e9374>
80209478:	900b883a 	mov	r5,r18
8020947c:	dc800005 	stb	r18,0(sp)
80209480:	1029883a 	mov	r20,r2
80209484:	003fc506 	br	8020939c <__reset+0xfa1e939c>
80209488:	800d883a 	mov	r6,r16
8020948c:	a80b883a 	mov	r5,r21
80209490:	9809883a 	mov	r4,r19
80209494:	02096b40 	call	802096b4 <__swbuf_r>
80209498:	10bfffe0 	cmpeqi	r2,r2,-1
8020949c:	003fef06 	br	8020945c <__reset+0xfa1e945c>

802094a0 <_fputwc_r>:
802094a0:	3080030b 	ldhu	r2,12(r6)
802094a4:	10c8000c 	andi	r3,r2,8192
802094a8:	1800051e 	bne	r3,zero,802094c0 <_fputwc_r+0x20>
802094ac:	30c01917 	ldw	r3,100(r6)
802094b0:	10880014 	ori	r2,r2,8192
802094b4:	3080030d 	sth	r2,12(r6)
802094b8:	18880014 	ori	r2,r3,8192
802094bc:	30801915 	stw	r2,100(r6)
802094c0:	020933c1 	jmpi	8020933c <__fputwc>

802094c4 <fputwc>:
802094c4:	00a00874 	movhi	r2,32801
802094c8:	defffc04 	addi	sp,sp,-16
802094cc:	1090b404 	addi	r2,r2,17104
802094d0:	dc000115 	stw	r16,4(sp)
802094d4:	14000017 	ldw	r16,0(r2)
802094d8:	dc400215 	stw	r17,8(sp)
802094dc:	dfc00315 	stw	ra,12(sp)
802094e0:	2023883a 	mov	r17,r4
802094e4:	80000226 	beq	r16,zero,802094f0 <fputwc+0x2c>
802094e8:	80800e17 	ldw	r2,56(r16)
802094ec:	10001026 	beq	r2,zero,80209530 <fputwc+0x6c>
802094f0:	2880030b 	ldhu	r2,12(r5)
802094f4:	10c8000c 	andi	r3,r2,8192
802094f8:	1800051e 	bne	r3,zero,80209510 <fputwc+0x4c>
802094fc:	28c01917 	ldw	r3,100(r5)
80209500:	10880014 	ori	r2,r2,8192
80209504:	2880030d 	sth	r2,12(r5)
80209508:	18880014 	ori	r2,r3,8192
8020950c:	28801915 	stw	r2,100(r5)
80209510:	280d883a 	mov	r6,r5
80209514:	8009883a 	mov	r4,r16
80209518:	880b883a 	mov	r5,r17
8020951c:	dfc00317 	ldw	ra,12(sp)
80209520:	dc400217 	ldw	r17,8(sp)
80209524:	dc000117 	ldw	r16,4(sp)
80209528:	dec00404 	addi	sp,sp,16
8020952c:	020933c1 	jmpi	8020933c <__fputwc>
80209530:	8009883a 	mov	r4,r16
80209534:	d9400015 	stw	r5,0(sp)
80209538:	020481c0 	call	8020481c <__sinit>
8020953c:	d9400017 	ldw	r5,0(sp)
80209540:	003feb06 	br	802094f0 <__reset+0xfa1e94f0>

80209544 <_fstat_r>:
80209544:	defffd04 	addi	sp,sp,-12
80209548:	2805883a 	mov	r2,r5
8020954c:	dc000015 	stw	r16,0(sp)
80209550:	04200874 	movhi	r16,32801
80209554:	dc400115 	stw	r17,4(sp)
80209558:	8410cb04 	addi	r16,r16,17196
8020955c:	2023883a 	mov	r17,r4
80209560:	300b883a 	mov	r5,r6
80209564:	1009883a 	mov	r4,r2
80209568:	dfc00215 	stw	ra,8(sp)
8020956c:	80000015 	stw	zero,0(r16)
80209570:	020ce340 	call	8020ce34 <fstat>
80209574:	00ffffc4 	movi	r3,-1
80209578:	10c00526 	beq	r2,r3,80209590 <_fstat_r+0x4c>
8020957c:	dfc00217 	ldw	ra,8(sp)
80209580:	dc400117 	ldw	r17,4(sp)
80209584:	dc000017 	ldw	r16,0(sp)
80209588:	dec00304 	addi	sp,sp,12
8020958c:	f800283a 	ret
80209590:	80c00017 	ldw	r3,0(r16)
80209594:	183ff926 	beq	r3,zero,8020957c <__reset+0xfa1e957c>
80209598:	88c00015 	stw	r3,0(r17)
8020959c:	003ff706 	br	8020957c <__reset+0xfa1e957c>

802095a0 <_isatty_r>:
802095a0:	defffd04 	addi	sp,sp,-12
802095a4:	dc000015 	stw	r16,0(sp)
802095a8:	04200874 	movhi	r16,32801
802095ac:	dc400115 	stw	r17,4(sp)
802095b0:	8410cb04 	addi	r16,r16,17196
802095b4:	2023883a 	mov	r17,r4
802095b8:	2809883a 	mov	r4,r5
802095bc:	dfc00215 	stw	ra,8(sp)
802095c0:	80000015 	stw	zero,0(r16)
802095c4:	020cf200 	call	8020cf20 <isatty>
802095c8:	00ffffc4 	movi	r3,-1
802095cc:	10c00526 	beq	r2,r3,802095e4 <_isatty_r+0x44>
802095d0:	dfc00217 	ldw	ra,8(sp)
802095d4:	dc400117 	ldw	r17,4(sp)
802095d8:	dc000017 	ldw	r16,0(sp)
802095dc:	dec00304 	addi	sp,sp,12
802095e0:	f800283a 	ret
802095e4:	80c00017 	ldw	r3,0(r16)
802095e8:	183ff926 	beq	r3,zero,802095d0 <__reset+0xfa1e95d0>
802095ec:	88c00015 	stw	r3,0(r17)
802095f0:	003ff706 	br	802095d0 <__reset+0xfa1e95d0>

802095f4 <_lseek_r>:
802095f4:	defffd04 	addi	sp,sp,-12
802095f8:	2805883a 	mov	r2,r5
802095fc:	dc000015 	stw	r16,0(sp)
80209600:	04200874 	movhi	r16,32801
80209604:	dc400115 	stw	r17,4(sp)
80209608:	300b883a 	mov	r5,r6
8020960c:	8410cb04 	addi	r16,r16,17196
80209610:	2023883a 	mov	r17,r4
80209614:	380d883a 	mov	r6,r7
80209618:	1009883a 	mov	r4,r2
8020961c:	dfc00215 	stw	ra,8(sp)
80209620:	80000015 	stw	zero,0(r16)
80209624:	020d0000 	call	8020d000 <lseek>
80209628:	00ffffc4 	movi	r3,-1
8020962c:	10c00526 	beq	r2,r3,80209644 <_lseek_r+0x50>
80209630:	dfc00217 	ldw	ra,8(sp)
80209634:	dc400117 	ldw	r17,4(sp)
80209638:	dc000017 	ldw	r16,0(sp)
8020963c:	dec00304 	addi	sp,sp,12
80209640:	f800283a 	ret
80209644:	80c00017 	ldw	r3,0(r16)
80209648:	183ff926 	beq	r3,zero,80209630 <__reset+0xfa1e9630>
8020964c:	88c00015 	stw	r3,0(r17)
80209650:	003ff706 	br	80209630 <__reset+0xfa1e9630>

80209654 <_read_r>:
80209654:	defffd04 	addi	sp,sp,-12
80209658:	2805883a 	mov	r2,r5
8020965c:	dc000015 	stw	r16,0(sp)
80209660:	04200874 	movhi	r16,32801
80209664:	dc400115 	stw	r17,4(sp)
80209668:	300b883a 	mov	r5,r6
8020966c:	8410cb04 	addi	r16,r16,17196
80209670:	2023883a 	mov	r17,r4
80209674:	380d883a 	mov	r6,r7
80209678:	1009883a 	mov	r4,r2
8020967c:	dfc00215 	stw	ra,8(sp)
80209680:	80000015 	stw	zero,0(r16)
80209684:	020d1d40 	call	8020d1d4 <read>
80209688:	00ffffc4 	movi	r3,-1
8020968c:	10c00526 	beq	r2,r3,802096a4 <_read_r+0x50>
80209690:	dfc00217 	ldw	ra,8(sp)
80209694:	dc400117 	ldw	r17,4(sp)
80209698:	dc000017 	ldw	r16,0(sp)
8020969c:	dec00304 	addi	sp,sp,12
802096a0:	f800283a 	ret
802096a4:	80c00017 	ldw	r3,0(r16)
802096a8:	183ff926 	beq	r3,zero,80209690 <__reset+0xfa1e9690>
802096ac:	88c00015 	stw	r3,0(r17)
802096b0:	003ff706 	br	80209690 <__reset+0xfa1e9690>

802096b4 <__swbuf_r>:
802096b4:	defffb04 	addi	sp,sp,-20
802096b8:	dcc00315 	stw	r19,12(sp)
802096bc:	dc800215 	stw	r18,8(sp)
802096c0:	dc000015 	stw	r16,0(sp)
802096c4:	dfc00415 	stw	ra,16(sp)
802096c8:	dc400115 	stw	r17,4(sp)
802096cc:	2025883a 	mov	r18,r4
802096d0:	2827883a 	mov	r19,r5
802096d4:	3021883a 	mov	r16,r6
802096d8:	20000226 	beq	r4,zero,802096e4 <__swbuf_r+0x30>
802096dc:	20800e17 	ldw	r2,56(r4)
802096e0:	10004226 	beq	r2,zero,802097ec <__swbuf_r+0x138>
802096e4:	80800617 	ldw	r2,24(r16)
802096e8:	8100030b 	ldhu	r4,12(r16)
802096ec:	80800215 	stw	r2,8(r16)
802096f0:	2080020c 	andi	r2,r4,8
802096f4:	10003626 	beq	r2,zero,802097d0 <__swbuf_r+0x11c>
802096f8:	80c00417 	ldw	r3,16(r16)
802096fc:	18003426 	beq	r3,zero,802097d0 <__swbuf_r+0x11c>
80209700:	2088000c 	andi	r2,r4,8192
80209704:	9c403fcc 	andi	r17,r19,255
80209708:	10001a26 	beq	r2,zero,80209774 <__swbuf_r+0xc0>
8020970c:	80800017 	ldw	r2,0(r16)
80209710:	81000517 	ldw	r4,20(r16)
80209714:	10c7c83a 	sub	r3,r2,r3
80209718:	1900200e 	bge	r3,r4,8020979c <__swbuf_r+0xe8>
8020971c:	18c00044 	addi	r3,r3,1
80209720:	81000217 	ldw	r4,8(r16)
80209724:	11400044 	addi	r5,r2,1
80209728:	81400015 	stw	r5,0(r16)
8020972c:	213fffc4 	addi	r4,r4,-1
80209730:	81000215 	stw	r4,8(r16)
80209734:	14c00005 	stb	r19,0(r2)
80209738:	80800517 	ldw	r2,20(r16)
8020973c:	10c01e26 	beq	r2,r3,802097b8 <__swbuf_r+0x104>
80209740:	8080030b 	ldhu	r2,12(r16)
80209744:	1080004c 	andi	r2,r2,1
80209748:	10000226 	beq	r2,zero,80209754 <__swbuf_r+0xa0>
8020974c:	00800284 	movi	r2,10
80209750:	88801926 	beq	r17,r2,802097b8 <__swbuf_r+0x104>
80209754:	8805883a 	mov	r2,r17
80209758:	dfc00417 	ldw	ra,16(sp)
8020975c:	dcc00317 	ldw	r19,12(sp)
80209760:	dc800217 	ldw	r18,8(sp)
80209764:	dc400117 	ldw	r17,4(sp)
80209768:	dc000017 	ldw	r16,0(sp)
8020976c:	dec00504 	addi	sp,sp,20
80209770:	f800283a 	ret
80209774:	81401917 	ldw	r5,100(r16)
80209778:	00b7ffc4 	movi	r2,-8193
8020977c:	21080014 	ori	r4,r4,8192
80209780:	2884703a 	and	r2,r5,r2
80209784:	80801915 	stw	r2,100(r16)
80209788:	80800017 	ldw	r2,0(r16)
8020978c:	8100030d 	sth	r4,12(r16)
80209790:	81000517 	ldw	r4,20(r16)
80209794:	10c7c83a 	sub	r3,r2,r3
80209798:	193fe016 	blt	r3,r4,8020971c <__reset+0xfa1e971c>
8020979c:	800b883a 	mov	r5,r16
802097a0:	9009883a 	mov	r4,r18
802097a4:	02044400 	call	80204440 <_fflush_r>
802097a8:	1000071e 	bne	r2,zero,802097c8 <__swbuf_r+0x114>
802097ac:	80800017 	ldw	r2,0(r16)
802097b0:	00c00044 	movi	r3,1
802097b4:	003fda06 	br	80209720 <__reset+0xfa1e9720>
802097b8:	800b883a 	mov	r5,r16
802097bc:	9009883a 	mov	r4,r18
802097c0:	02044400 	call	80204440 <_fflush_r>
802097c4:	103fe326 	beq	r2,zero,80209754 <__reset+0xfa1e9754>
802097c8:	00bfffc4 	movi	r2,-1
802097cc:	003fe206 	br	80209758 <__reset+0xfa1e9758>
802097d0:	800b883a 	mov	r5,r16
802097d4:	9009883a 	mov	r4,r18
802097d8:	02028480 	call	80202848 <__swsetup_r>
802097dc:	103ffa1e 	bne	r2,zero,802097c8 <__reset+0xfa1e97c8>
802097e0:	8100030b 	ldhu	r4,12(r16)
802097e4:	80c00417 	ldw	r3,16(r16)
802097e8:	003fc506 	br	80209700 <__reset+0xfa1e9700>
802097ec:	020481c0 	call	8020481c <__sinit>
802097f0:	003fbc06 	br	802096e4 <__reset+0xfa1e96e4>

802097f4 <__swbuf>:
802097f4:	00a00874 	movhi	r2,32801
802097f8:	1090b404 	addi	r2,r2,17104
802097fc:	280d883a 	mov	r6,r5
80209800:	200b883a 	mov	r5,r4
80209804:	11000017 	ldw	r4,0(r2)
80209808:	02096b41 	jmpi	802096b4 <__swbuf_r>

8020980c <_wcrtomb_r>:
8020980c:	defff604 	addi	sp,sp,-40
80209810:	00a00874 	movhi	r2,32801
80209814:	dc800815 	stw	r18,32(sp)
80209818:	dc400715 	stw	r17,28(sp)
8020981c:	dc000615 	stw	r16,24(sp)
80209820:	1090b804 	addi	r2,r2,17120
80209824:	dfc00915 	stw	ra,36(sp)
80209828:	2021883a 	mov	r16,r4
8020982c:	3823883a 	mov	r17,r7
80209830:	14800017 	ldw	r18,0(r2)
80209834:	28001426 	beq	r5,zero,80209888 <_wcrtomb_r+0x7c>
80209838:	d9400415 	stw	r5,16(sp)
8020983c:	d9800515 	stw	r6,20(sp)
80209840:	02053600 	call	80205360 <__locale_charset>
80209844:	d9800517 	ldw	r6,20(sp)
80209848:	d9400417 	ldw	r5,16(sp)
8020984c:	100f883a 	mov	r7,r2
80209850:	dc400015 	stw	r17,0(sp)
80209854:	8009883a 	mov	r4,r16
80209858:	903ee83a 	callr	r18
8020985c:	00ffffc4 	movi	r3,-1
80209860:	10c0031e 	bne	r2,r3,80209870 <_wcrtomb_r+0x64>
80209864:	88000015 	stw	zero,0(r17)
80209868:	00c02284 	movi	r3,138
8020986c:	80c00015 	stw	r3,0(r16)
80209870:	dfc00917 	ldw	ra,36(sp)
80209874:	dc800817 	ldw	r18,32(sp)
80209878:	dc400717 	ldw	r17,28(sp)
8020987c:	dc000617 	ldw	r16,24(sp)
80209880:	dec00a04 	addi	sp,sp,40
80209884:	f800283a 	ret
80209888:	02053600 	call	80205360 <__locale_charset>
8020988c:	100f883a 	mov	r7,r2
80209890:	dc400015 	stw	r17,0(sp)
80209894:	000d883a 	mov	r6,zero
80209898:	d9400104 	addi	r5,sp,4
8020989c:	8009883a 	mov	r4,r16
802098a0:	903ee83a 	callr	r18
802098a4:	003fed06 	br	8020985c <__reset+0xfa1e985c>

802098a8 <wcrtomb>:
802098a8:	defff604 	addi	sp,sp,-40
802098ac:	00a00874 	movhi	r2,32801
802098b0:	dc800615 	stw	r18,24(sp)
802098b4:	dc400515 	stw	r17,20(sp)
802098b8:	1090b404 	addi	r2,r2,17104
802098bc:	dfc00915 	stw	ra,36(sp)
802098c0:	dd000815 	stw	r20,32(sp)
802098c4:	dcc00715 	stw	r19,28(sp)
802098c8:	dc000415 	stw	r16,16(sp)
802098cc:	3025883a 	mov	r18,r6
802098d0:	14400017 	ldw	r17,0(r2)
802098d4:	20001926 	beq	r4,zero,8020993c <wcrtomb+0x94>
802098d8:	00a00874 	movhi	r2,32801
802098dc:	1090b804 	addi	r2,r2,17120
802098e0:	15000017 	ldw	r20,0(r2)
802098e4:	2021883a 	mov	r16,r4
802098e8:	2827883a 	mov	r19,r5
802098ec:	02053600 	call	80205360 <__locale_charset>
802098f0:	100f883a 	mov	r7,r2
802098f4:	dc800015 	stw	r18,0(sp)
802098f8:	980d883a 	mov	r6,r19
802098fc:	800b883a 	mov	r5,r16
80209900:	8809883a 	mov	r4,r17
80209904:	a03ee83a 	callr	r20
80209908:	00ffffc4 	movi	r3,-1
8020990c:	10c0031e 	bne	r2,r3,8020991c <wcrtomb+0x74>
80209910:	90000015 	stw	zero,0(r18)
80209914:	00c02284 	movi	r3,138
80209918:	88c00015 	stw	r3,0(r17)
8020991c:	dfc00917 	ldw	ra,36(sp)
80209920:	dd000817 	ldw	r20,32(sp)
80209924:	dcc00717 	ldw	r19,28(sp)
80209928:	dc800617 	ldw	r18,24(sp)
8020992c:	dc400517 	ldw	r17,20(sp)
80209930:	dc000417 	ldw	r16,16(sp)
80209934:	dec00a04 	addi	sp,sp,40
80209938:	f800283a 	ret
8020993c:	00a00874 	movhi	r2,32801
80209940:	1090b804 	addi	r2,r2,17120
80209944:	14000017 	ldw	r16,0(r2)
80209948:	02053600 	call	80205360 <__locale_charset>
8020994c:	100f883a 	mov	r7,r2
80209950:	dc800015 	stw	r18,0(sp)
80209954:	000d883a 	mov	r6,zero
80209958:	d9400104 	addi	r5,sp,4
8020995c:	8809883a 	mov	r4,r17
80209960:	803ee83a 	callr	r16
80209964:	003fe806 	br	80209908 <__reset+0xfa1e9908>

80209968 <__ascii_wctomb>:
80209968:	28000526 	beq	r5,zero,80209980 <__ascii_wctomb+0x18>
8020996c:	00803fc4 	movi	r2,255
80209970:	11800536 	bltu	r2,r6,80209988 <__ascii_wctomb+0x20>
80209974:	29800005 	stb	r6,0(r5)
80209978:	00800044 	movi	r2,1
8020997c:	f800283a 	ret
80209980:	0005883a 	mov	r2,zero
80209984:	f800283a 	ret
80209988:	00802284 	movi	r2,138
8020998c:	20800015 	stw	r2,0(r4)
80209990:	00bfffc4 	movi	r2,-1
80209994:	f800283a 	ret

80209998 <_wctomb_r>:
80209998:	00a00874 	movhi	r2,32801
8020999c:	defff904 	addi	sp,sp,-28
802099a0:	1090b804 	addi	r2,r2,17120
802099a4:	dfc00615 	stw	ra,24(sp)
802099a8:	dc400515 	stw	r17,20(sp)
802099ac:	dc000415 	stw	r16,16(sp)
802099b0:	3823883a 	mov	r17,r7
802099b4:	14000017 	ldw	r16,0(r2)
802099b8:	d9000115 	stw	r4,4(sp)
802099bc:	d9400215 	stw	r5,8(sp)
802099c0:	d9800315 	stw	r6,12(sp)
802099c4:	02053600 	call	80205360 <__locale_charset>
802099c8:	d9800317 	ldw	r6,12(sp)
802099cc:	d9400217 	ldw	r5,8(sp)
802099d0:	d9000117 	ldw	r4,4(sp)
802099d4:	100f883a 	mov	r7,r2
802099d8:	dc400015 	stw	r17,0(sp)
802099dc:	803ee83a 	callr	r16
802099e0:	dfc00617 	ldw	ra,24(sp)
802099e4:	dc400517 	ldw	r17,20(sp)
802099e8:	dc000417 	ldw	r16,16(sp)
802099ec:	dec00704 	addi	sp,sp,28
802099f0:	f800283a 	ret

802099f4 <__udivdi3>:
802099f4:	defff504 	addi	sp,sp,-44
802099f8:	dcc00415 	stw	r19,16(sp)
802099fc:	dc000115 	stw	r16,4(sp)
80209a00:	dfc00a15 	stw	ra,40(sp)
80209a04:	df000915 	stw	fp,36(sp)
80209a08:	ddc00815 	stw	r23,32(sp)
80209a0c:	dd800715 	stw	r22,28(sp)
80209a10:	dd400615 	stw	r21,24(sp)
80209a14:	dd000515 	stw	r20,20(sp)
80209a18:	dc800315 	stw	r18,12(sp)
80209a1c:	dc400215 	stw	r17,8(sp)
80209a20:	2027883a 	mov	r19,r4
80209a24:	2821883a 	mov	r16,r5
80209a28:	3800411e 	bne	r7,zero,80209b30 <__udivdi3+0x13c>
80209a2c:	3023883a 	mov	r17,r6
80209a30:	2025883a 	mov	r18,r4
80209a34:	2980522e 	bgeu	r5,r6,80209b80 <__udivdi3+0x18c>
80209a38:	00bfffd4 	movui	r2,65535
80209a3c:	282d883a 	mov	r22,r5
80209a40:	1180a836 	bltu	r2,r6,80209ce4 <__udivdi3+0x2f0>
80209a44:	00803fc4 	movi	r2,255
80209a48:	1185803a 	cmpltu	r2,r2,r6
80209a4c:	100490fa 	slli	r2,r2,3
80209a50:	3086d83a 	srl	r3,r6,r2
80209a54:	01200874 	movhi	r4,32801
80209a58:	2108ae04 	addi	r4,r4,8888
80209a5c:	20c7883a 	add	r3,r4,r3
80209a60:	18c00003 	ldbu	r3,0(r3)
80209a64:	1885883a 	add	r2,r3,r2
80209a68:	00c00804 	movi	r3,32
80209a6c:	1887c83a 	sub	r3,r3,r2
80209a70:	18000526 	beq	r3,zero,80209a88 <__udivdi3+0x94>
80209a74:	80e0983a 	sll	r16,r16,r3
80209a78:	9884d83a 	srl	r2,r19,r2
80209a7c:	30e2983a 	sll	r17,r6,r3
80209a80:	98e4983a 	sll	r18,r19,r3
80209a84:	142cb03a 	or	r22,r2,r16
80209a88:	882ad43a 	srli	r21,r17,16
80209a8c:	b009883a 	mov	r4,r22
80209a90:	8d3fffcc 	andi	r20,r17,65535
80209a94:	a80b883a 	mov	r5,r21
80209a98:	020a6000 	call	8020a600 <__umodsi3>
80209a9c:	b009883a 	mov	r4,r22
80209aa0:	a80b883a 	mov	r5,r21
80209aa4:	1027883a 	mov	r19,r2
80209aa8:	020a59c0 	call	8020a59c <__udivsi3>
80209aac:	102d883a 	mov	r22,r2
80209ab0:	9826943a 	slli	r19,r19,16
80209ab4:	9004d43a 	srli	r2,r18,16
80209ab8:	a5a1383a 	mul	r16,r20,r22
80209abc:	14c4b03a 	or	r2,r2,r19
80209ac0:	1400052e 	bgeu	r2,r16,80209ad8 <__udivdi3+0xe4>
80209ac4:	1445883a 	add	r2,r2,r17
80209ac8:	b0ffffc4 	addi	r3,r22,-1
80209acc:	14400136 	bltu	r2,r17,80209ad4 <__udivdi3+0xe0>
80209ad0:	14012336 	bltu	r2,r16,80209f60 <__udivdi3+0x56c>
80209ad4:	182d883a 	mov	r22,r3
80209ad8:	1421c83a 	sub	r16,r2,r16
80209adc:	a80b883a 	mov	r5,r21
80209ae0:	8009883a 	mov	r4,r16
80209ae4:	020a6000 	call	8020a600 <__umodsi3>
80209ae8:	1027883a 	mov	r19,r2
80209aec:	a80b883a 	mov	r5,r21
80209af0:	8009883a 	mov	r4,r16
80209af4:	020a59c0 	call	8020a59c <__udivsi3>
80209af8:	9826943a 	slli	r19,r19,16
80209afc:	a0a9383a 	mul	r20,r20,r2
80209b00:	94bfffcc 	andi	r18,r18,65535
80209b04:	94e4b03a 	or	r18,r18,r19
80209b08:	9500052e 	bgeu	r18,r20,80209b20 <__udivdi3+0x12c>
80209b0c:	8ca5883a 	add	r18,r17,r18
80209b10:	10ffffc4 	addi	r3,r2,-1
80209b14:	9440f136 	bltu	r18,r17,80209edc <__udivdi3+0x4e8>
80209b18:	9500f02e 	bgeu	r18,r20,80209edc <__udivdi3+0x4e8>
80209b1c:	10bfff84 	addi	r2,r2,-2
80209b20:	b00c943a 	slli	r6,r22,16
80209b24:	0007883a 	mov	r3,zero
80209b28:	3084b03a 	or	r2,r6,r2
80209b2c:	00005906 	br	80209c94 <__udivdi3+0x2a0>
80209b30:	29c05636 	bltu	r5,r7,80209c8c <__udivdi3+0x298>
80209b34:	00bfffd4 	movui	r2,65535
80209b38:	11c0622e 	bgeu	r2,r7,80209cc4 <__udivdi3+0x2d0>
80209b3c:	00804034 	movhi	r2,256
80209b40:	10bfffc4 	addi	r2,r2,-1
80209b44:	11c0ee36 	bltu	r2,r7,80209f00 <__udivdi3+0x50c>
80209b48:	00800404 	movi	r2,16
80209b4c:	3886d83a 	srl	r3,r7,r2
80209b50:	01200874 	movhi	r4,32801
80209b54:	2108ae04 	addi	r4,r4,8888
80209b58:	20c7883a 	add	r3,r4,r3
80209b5c:	18c00003 	ldbu	r3,0(r3)
80209b60:	05400804 	movi	r21,32
80209b64:	1885883a 	add	r2,r3,r2
80209b68:	a8abc83a 	sub	r21,r21,r2
80209b6c:	a800621e 	bne	r21,zero,80209cf8 <__udivdi3+0x304>
80209b70:	3c00e936 	bltu	r7,r16,80209f18 <__udivdi3+0x524>
80209b74:	9985403a 	cmpgeu	r2,r19,r6
80209b78:	0007883a 	mov	r3,zero
80209b7c:	00004506 	br	80209c94 <__udivdi3+0x2a0>
80209b80:	3000041e 	bne	r6,zero,80209b94 <__udivdi3+0x1a0>
80209b84:	000b883a 	mov	r5,zero
80209b88:	01000044 	movi	r4,1
80209b8c:	020a59c0 	call	8020a59c <__udivsi3>
80209b90:	1023883a 	mov	r17,r2
80209b94:	00bfffd4 	movui	r2,65535
80209b98:	14404e2e 	bgeu	r2,r17,80209cd4 <__udivdi3+0x2e0>
80209b9c:	00804034 	movhi	r2,256
80209ba0:	10bfffc4 	addi	r2,r2,-1
80209ba4:	1440d836 	bltu	r2,r17,80209f08 <__udivdi3+0x514>
80209ba8:	00800404 	movi	r2,16
80209bac:	8886d83a 	srl	r3,r17,r2
80209bb0:	01200874 	movhi	r4,32801
80209bb4:	2108ae04 	addi	r4,r4,8888
80209bb8:	20c7883a 	add	r3,r4,r3
80209bbc:	18c00003 	ldbu	r3,0(r3)
80209bc0:	1885883a 	add	r2,r3,r2
80209bc4:	00c00804 	movi	r3,32
80209bc8:	1887c83a 	sub	r3,r3,r2
80209bcc:	18008f1e 	bne	r3,zero,80209e0c <__udivdi3+0x418>
80209bd0:	882ad43a 	srli	r21,r17,16
80209bd4:	8461c83a 	sub	r16,r16,r17
80209bd8:	8d3fffcc 	andi	r20,r17,65535
80209bdc:	00c00044 	movi	r3,1
80209be0:	8009883a 	mov	r4,r16
80209be4:	a80b883a 	mov	r5,r21
80209be8:	d8c00015 	stw	r3,0(sp)
80209bec:	020a6000 	call	8020a600 <__umodsi3>
80209bf0:	8009883a 	mov	r4,r16
80209bf4:	a80b883a 	mov	r5,r21
80209bf8:	1027883a 	mov	r19,r2
80209bfc:	020a59c0 	call	8020a59c <__udivsi3>
80209c00:	9826943a 	slli	r19,r19,16
80209c04:	9008d43a 	srli	r4,r18,16
80209c08:	1521383a 	mul	r16,r2,r20
80209c0c:	102d883a 	mov	r22,r2
80209c10:	24c8b03a 	or	r4,r4,r19
80209c14:	d8c00017 	ldw	r3,0(sp)
80209c18:	2400052e 	bgeu	r4,r16,80209c30 <__udivdi3+0x23c>
80209c1c:	2449883a 	add	r4,r4,r17
80209c20:	b0bfffc4 	addi	r2,r22,-1
80209c24:	24400136 	bltu	r4,r17,80209c2c <__udivdi3+0x238>
80209c28:	2400ca36 	bltu	r4,r16,80209f54 <__udivdi3+0x560>
80209c2c:	102d883a 	mov	r22,r2
80209c30:	2421c83a 	sub	r16,r4,r16
80209c34:	a80b883a 	mov	r5,r21
80209c38:	8009883a 	mov	r4,r16
80209c3c:	d8c00015 	stw	r3,0(sp)
80209c40:	020a6000 	call	8020a600 <__umodsi3>
80209c44:	1027883a 	mov	r19,r2
80209c48:	a80b883a 	mov	r5,r21
80209c4c:	8009883a 	mov	r4,r16
80209c50:	020a59c0 	call	8020a59c <__udivsi3>
80209c54:	9826943a 	slli	r19,r19,16
80209c58:	1529383a 	mul	r20,r2,r20
80209c5c:	94bfffcc 	andi	r18,r18,65535
80209c60:	94e4b03a 	or	r18,r18,r19
80209c64:	d8c00017 	ldw	r3,0(sp)
80209c68:	9500052e 	bgeu	r18,r20,80209c80 <__udivdi3+0x28c>
80209c6c:	8ca5883a 	add	r18,r17,r18
80209c70:	113fffc4 	addi	r4,r2,-1
80209c74:	94409736 	bltu	r18,r17,80209ed4 <__udivdi3+0x4e0>
80209c78:	9500962e 	bgeu	r18,r20,80209ed4 <__udivdi3+0x4e0>
80209c7c:	10bfff84 	addi	r2,r2,-2
80209c80:	b00c943a 	slli	r6,r22,16
80209c84:	3084b03a 	or	r2,r6,r2
80209c88:	00000206 	br	80209c94 <__udivdi3+0x2a0>
80209c8c:	0007883a 	mov	r3,zero
80209c90:	0005883a 	mov	r2,zero
80209c94:	dfc00a17 	ldw	ra,40(sp)
80209c98:	df000917 	ldw	fp,36(sp)
80209c9c:	ddc00817 	ldw	r23,32(sp)
80209ca0:	dd800717 	ldw	r22,28(sp)
80209ca4:	dd400617 	ldw	r21,24(sp)
80209ca8:	dd000517 	ldw	r20,20(sp)
80209cac:	dcc00417 	ldw	r19,16(sp)
80209cb0:	dc800317 	ldw	r18,12(sp)
80209cb4:	dc400217 	ldw	r17,8(sp)
80209cb8:	dc000117 	ldw	r16,4(sp)
80209cbc:	dec00b04 	addi	sp,sp,44
80209cc0:	f800283a 	ret
80209cc4:	00803fc4 	movi	r2,255
80209cc8:	11c5803a 	cmpltu	r2,r2,r7
80209ccc:	100490fa 	slli	r2,r2,3
80209cd0:	003f9e06 	br	80209b4c <__reset+0xfa1e9b4c>
80209cd4:	00803fc4 	movi	r2,255
80209cd8:	1445803a 	cmpltu	r2,r2,r17
80209cdc:	100490fa 	slli	r2,r2,3
80209ce0:	003fb206 	br	80209bac <__reset+0xfa1e9bac>
80209ce4:	00804034 	movhi	r2,256
80209ce8:	10bfffc4 	addi	r2,r2,-1
80209cec:	11808836 	bltu	r2,r6,80209f10 <__udivdi3+0x51c>
80209cf0:	00800404 	movi	r2,16
80209cf4:	003f5606 	br	80209a50 <__reset+0xfa1e9a50>
80209cf8:	30aed83a 	srl	r23,r6,r2
80209cfc:	3d4e983a 	sll	r7,r7,r21
80209d00:	80acd83a 	srl	r22,r16,r2
80209d04:	9884d83a 	srl	r2,r19,r2
80209d08:	3deeb03a 	or	r23,r7,r23
80209d0c:	b824d43a 	srli	r18,r23,16
80209d10:	8560983a 	sll	r16,r16,r21
80209d14:	b009883a 	mov	r4,r22
80209d18:	900b883a 	mov	r5,r18
80209d1c:	3568983a 	sll	r20,r6,r21
80209d20:	1420b03a 	or	r16,r2,r16
80209d24:	020a6000 	call	8020a600 <__umodsi3>
80209d28:	b009883a 	mov	r4,r22
80209d2c:	900b883a 	mov	r5,r18
80209d30:	1023883a 	mov	r17,r2
80209d34:	020a59c0 	call	8020a59c <__udivsi3>
80209d38:	8808943a 	slli	r4,r17,16
80209d3c:	bf3fffcc 	andi	fp,r23,65535
80209d40:	8006d43a 	srli	r3,r16,16
80209d44:	e0a3383a 	mul	r17,fp,r2
80209d48:	100d883a 	mov	r6,r2
80209d4c:	1906b03a 	or	r3,r3,r4
80209d50:	1c40042e 	bgeu	r3,r17,80209d64 <__udivdi3+0x370>
80209d54:	1dc7883a 	add	r3,r3,r23
80209d58:	10bfffc4 	addi	r2,r2,-1
80209d5c:	1dc0752e 	bgeu	r3,r23,80209f34 <__udivdi3+0x540>
80209d60:	100d883a 	mov	r6,r2
80209d64:	1c63c83a 	sub	r17,r3,r17
80209d68:	900b883a 	mov	r5,r18
80209d6c:	8809883a 	mov	r4,r17
80209d70:	d9800015 	stw	r6,0(sp)
80209d74:	020a6000 	call	8020a600 <__umodsi3>
80209d78:	102d883a 	mov	r22,r2
80209d7c:	8809883a 	mov	r4,r17
80209d80:	900b883a 	mov	r5,r18
80209d84:	020a59c0 	call	8020a59c <__udivsi3>
80209d88:	b02c943a 	slli	r22,r22,16
80209d8c:	e089383a 	mul	r4,fp,r2
80209d90:	843fffcc 	andi	r16,r16,65535
80209d94:	85a0b03a 	or	r16,r16,r22
80209d98:	d9800017 	ldw	r6,0(sp)
80209d9c:	8100042e 	bgeu	r16,r4,80209db0 <__udivdi3+0x3bc>
80209da0:	85e1883a 	add	r16,r16,r23
80209da4:	10ffffc4 	addi	r3,r2,-1
80209da8:	85c05e2e 	bgeu	r16,r23,80209f24 <__udivdi3+0x530>
80209dac:	1805883a 	mov	r2,r3
80209db0:	300c943a 	slli	r6,r6,16
80209db4:	a17fffcc 	andi	r5,r20,65535
80209db8:	a028d43a 	srli	r20,r20,16
80209dbc:	3084b03a 	or	r2,r6,r2
80209dc0:	10ffffcc 	andi	r3,r2,65535
80209dc4:	100cd43a 	srli	r6,r2,16
80209dc8:	194f383a 	mul	r7,r3,r5
80209dcc:	1d07383a 	mul	r3,r3,r20
80209dd0:	314b383a 	mul	r5,r6,r5
80209dd4:	3810d43a 	srli	r8,r7,16
80209dd8:	8121c83a 	sub	r16,r16,r4
80209ddc:	1947883a 	add	r3,r3,r5
80209de0:	40c7883a 	add	r3,r8,r3
80209de4:	350d383a 	mul	r6,r6,r20
80209de8:	1940022e 	bgeu	r3,r5,80209df4 <__udivdi3+0x400>
80209dec:	01000074 	movhi	r4,1
80209df0:	310d883a 	add	r6,r6,r4
80209df4:	1828d43a 	srli	r20,r3,16
80209df8:	a18d883a 	add	r6,r20,r6
80209dfc:	81803e36 	bltu	r16,r6,80209ef8 <__udivdi3+0x504>
80209e00:	81803826 	beq	r16,r6,80209ee4 <__udivdi3+0x4f0>
80209e04:	0007883a 	mov	r3,zero
80209e08:	003fa206 	br	80209c94 <__reset+0xfa1e9c94>
80209e0c:	88e2983a 	sll	r17,r17,r3
80209e10:	80a8d83a 	srl	r20,r16,r2
80209e14:	80e0983a 	sll	r16,r16,r3
80209e18:	882ad43a 	srli	r21,r17,16
80209e1c:	9884d83a 	srl	r2,r19,r2
80209e20:	a009883a 	mov	r4,r20
80209e24:	a80b883a 	mov	r5,r21
80209e28:	142eb03a 	or	r23,r2,r16
80209e2c:	98e4983a 	sll	r18,r19,r3
80209e30:	020a6000 	call	8020a600 <__umodsi3>
80209e34:	a009883a 	mov	r4,r20
80209e38:	a80b883a 	mov	r5,r21
80209e3c:	1021883a 	mov	r16,r2
80209e40:	020a59c0 	call	8020a59c <__udivsi3>
80209e44:	1039883a 	mov	fp,r2
80209e48:	8d3fffcc 	andi	r20,r17,65535
80209e4c:	8020943a 	slli	r16,r16,16
80209e50:	b804d43a 	srli	r2,r23,16
80209e54:	a72d383a 	mul	r22,r20,fp
80209e58:	1404b03a 	or	r2,r2,r16
80209e5c:	1580062e 	bgeu	r2,r22,80209e78 <__udivdi3+0x484>
80209e60:	1445883a 	add	r2,r2,r17
80209e64:	e0ffffc4 	addi	r3,fp,-1
80209e68:	14403836 	bltu	r2,r17,80209f4c <__udivdi3+0x558>
80209e6c:	1580372e 	bgeu	r2,r22,80209f4c <__udivdi3+0x558>
80209e70:	e73fff84 	addi	fp,fp,-2
80209e74:	1445883a 	add	r2,r2,r17
80209e78:	15adc83a 	sub	r22,r2,r22
80209e7c:	a80b883a 	mov	r5,r21
80209e80:	b009883a 	mov	r4,r22
80209e84:	020a6000 	call	8020a600 <__umodsi3>
80209e88:	1027883a 	mov	r19,r2
80209e8c:	b009883a 	mov	r4,r22
80209e90:	a80b883a 	mov	r5,r21
80209e94:	020a59c0 	call	8020a59c <__udivsi3>
80209e98:	9826943a 	slli	r19,r19,16
80209e9c:	a0a1383a 	mul	r16,r20,r2
80209ea0:	b93fffcc 	andi	r4,r23,65535
80209ea4:	24c8b03a 	or	r4,r4,r19
80209ea8:	2400062e 	bgeu	r4,r16,80209ec4 <__udivdi3+0x4d0>
80209eac:	2449883a 	add	r4,r4,r17
80209eb0:	10ffffc4 	addi	r3,r2,-1
80209eb4:	24402336 	bltu	r4,r17,80209f44 <__udivdi3+0x550>
80209eb8:	2400222e 	bgeu	r4,r16,80209f44 <__udivdi3+0x550>
80209ebc:	10bfff84 	addi	r2,r2,-2
80209ec0:	2449883a 	add	r4,r4,r17
80209ec4:	e038943a 	slli	fp,fp,16
80209ec8:	2421c83a 	sub	r16,r4,r16
80209ecc:	e086b03a 	or	r3,fp,r2
80209ed0:	003f4306 	br	80209be0 <__reset+0xfa1e9be0>
80209ed4:	2005883a 	mov	r2,r4
80209ed8:	003f6906 	br	80209c80 <__reset+0xfa1e9c80>
80209edc:	1805883a 	mov	r2,r3
80209ee0:	003f0f06 	br	80209b20 <__reset+0xfa1e9b20>
80209ee4:	1806943a 	slli	r3,r3,16
80209ee8:	9d66983a 	sll	r19,r19,r21
80209eec:	39ffffcc 	andi	r7,r7,65535
80209ef0:	19c7883a 	add	r3,r3,r7
80209ef4:	98ffc32e 	bgeu	r19,r3,80209e04 <__reset+0xfa1e9e04>
80209ef8:	10bfffc4 	addi	r2,r2,-1
80209efc:	003fc106 	br	80209e04 <__reset+0xfa1e9e04>
80209f00:	00800604 	movi	r2,24
80209f04:	003f1106 	br	80209b4c <__reset+0xfa1e9b4c>
80209f08:	00800604 	movi	r2,24
80209f0c:	003f2706 	br	80209bac <__reset+0xfa1e9bac>
80209f10:	00800604 	movi	r2,24
80209f14:	003ece06 	br	80209a50 <__reset+0xfa1e9a50>
80209f18:	0007883a 	mov	r3,zero
80209f1c:	00800044 	movi	r2,1
80209f20:	003f5c06 	br	80209c94 <__reset+0xfa1e9c94>
80209f24:	813fa12e 	bgeu	r16,r4,80209dac <__reset+0xfa1e9dac>
80209f28:	10bfff84 	addi	r2,r2,-2
80209f2c:	85e1883a 	add	r16,r16,r23
80209f30:	003f9f06 	br	80209db0 <__reset+0xfa1e9db0>
80209f34:	1c7f8a2e 	bgeu	r3,r17,80209d60 <__reset+0xfa1e9d60>
80209f38:	31bfff84 	addi	r6,r6,-2
80209f3c:	1dc7883a 	add	r3,r3,r23
80209f40:	003f8806 	br	80209d64 <__reset+0xfa1e9d64>
80209f44:	1805883a 	mov	r2,r3
80209f48:	003fde06 	br	80209ec4 <__reset+0xfa1e9ec4>
80209f4c:	1839883a 	mov	fp,r3
80209f50:	003fc906 	br	80209e78 <__reset+0xfa1e9e78>
80209f54:	b5bfff84 	addi	r22,r22,-2
80209f58:	2449883a 	add	r4,r4,r17
80209f5c:	003f3406 	br	80209c30 <__reset+0xfa1e9c30>
80209f60:	b5bfff84 	addi	r22,r22,-2
80209f64:	1445883a 	add	r2,r2,r17
80209f68:	003edb06 	br	80209ad8 <__reset+0xfa1e9ad8>

80209f6c <__umoddi3>:
80209f6c:	defff404 	addi	sp,sp,-48
80209f70:	df000a15 	stw	fp,40(sp)
80209f74:	dc400315 	stw	r17,12(sp)
80209f78:	dc000215 	stw	r16,8(sp)
80209f7c:	dfc00b15 	stw	ra,44(sp)
80209f80:	ddc00915 	stw	r23,36(sp)
80209f84:	dd800815 	stw	r22,32(sp)
80209f88:	dd400715 	stw	r21,28(sp)
80209f8c:	dd000615 	stw	r20,24(sp)
80209f90:	dcc00515 	stw	r19,20(sp)
80209f94:	dc800415 	stw	r18,16(sp)
80209f98:	2021883a 	mov	r16,r4
80209f9c:	2823883a 	mov	r17,r5
80209fa0:	2839883a 	mov	fp,r5
80209fa4:	38003c1e 	bne	r7,zero,8020a098 <__umoddi3+0x12c>
80209fa8:	3027883a 	mov	r19,r6
80209fac:	2029883a 	mov	r20,r4
80209fb0:	2980512e 	bgeu	r5,r6,8020a0f8 <__umoddi3+0x18c>
80209fb4:	00bfffd4 	movui	r2,65535
80209fb8:	11809a36 	bltu	r2,r6,8020a224 <__umoddi3+0x2b8>
80209fbc:	01003fc4 	movi	r4,255
80209fc0:	2189803a 	cmpltu	r4,r4,r6
80209fc4:	200890fa 	slli	r4,r4,3
80209fc8:	3104d83a 	srl	r2,r6,r4
80209fcc:	00e00874 	movhi	r3,32801
80209fd0:	18c8ae04 	addi	r3,r3,8888
80209fd4:	1885883a 	add	r2,r3,r2
80209fd8:	10c00003 	ldbu	r3,0(r2)
80209fdc:	00800804 	movi	r2,32
80209fe0:	1909883a 	add	r4,r3,r4
80209fe4:	1125c83a 	sub	r18,r2,r4
80209fe8:	90000526 	beq	r18,zero,8020a000 <__umoddi3+0x94>
80209fec:	8ca2983a 	sll	r17,r17,r18
80209ff0:	8108d83a 	srl	r4,r16,r4
80209ff4:	34a6983a 	sll	r19,r6,r18
80209ff8:	84a8983a 	sll	r20,r16,r18
80209ffc:	2478b03a 	or	fp,r4,r17
8020a000:	982ed43a 	srli	r23,r19,16
8020a004:	e009883a 	mov	r4,fp
8020a008:	9dbfffcc 	andi	r22,r19,65535
8020a00c:	b80b883a 	mov	r5,r23
8020a010:	020a6000 	call	8020a600 <__umodsi3>
8020a014:	e009883a 	mov	r4,fp
8020a018:	b80b883a 	mov	r5,r23
8020a01c:	102b883a 	mov	r21,r2
8020a020:	020a59c0 	call	8020a59c <__udivsi3>
8020a024:	a806943a 	slli	r3,r21,16
8020a028:	a008d43a 	srli	r4,r20,16
8020a02c:	b085383a 	mul	r2,r22,r2
8020a030:	20c8b03a 	or	r4,r4,r3
8020a034:	2080032e 	bgeu	r4,r2,8020a044 <__umoddi3+0xd8>
8020a038:	24c9883a 	add	r4,r4,r19
8020a03c:	24c00136 	bltu	r4,r19,8020a044 <__umoddi3+0xd8>
8020a040:	20811036 	bltu	r4,r2,8020a484 <__umoddi3+0x518>
8020a044:	20abc83a 	sub	r21,r4,r2
8020a048:	b80b883a 	mov	r5,r23
8020a04c:	a809883a 	mov	r4,r21
8020a050:	020a6000 	call	8020a600 <__umodsi3>
8020a054:	1023883a 	mov	r17,r2
8020a058:	b80b883a 	mov	r5,r23
8020a05c:	a809883a 	mov	r4,r21
8020a060:	020a59c0 	call	8020a59c <__udivsi3>
8020a064:	8822943a 	slli	r17,r17,16
8020a068:	b085383a 	mul	r2,r22,r2
8020a06c:	a0ffffcc 	andi	r3,r20,65535
8020a070:	1c46b03a 	or	r3,r3,r17
8020a074:	1880042e 	bgeu	r3,r2,8020a088 <__umoddi3+0x11c>
8020a078:	1cc7883a 	add	r3,r3,r19
8020a07c:	1cc00236 	bltu	r3,r19,8020a088 <__umoddi3+0x11c>
8020a080:	1880012e 	bgeu	r3,r2,8020a088 <__umoddi3+0x11c>
8020a084:	1cc7883a 	add	r3,r3,r19
8020a088:	1885c83a 	sub	r2,r3,r2
8020a08c:	1484d83a 	srl	r2,r2,r18
8020a090:	0007883a 	mov	r3,zero
8020a094:	00004f06 	br	8020a1d4 <__umoddi3+0x268>
8020a098:	29c04c36 	bltu	r5,r7,8020a1cc <__umoddi3+0x260>
8020a09c:	00bfffd4 	movui	r2,65535
8020a0a0:	11c0582e 	bgeu	r2,r7,8020a204 <__umoddi3+0x298>
8020a0a4:	00804034 	movhi	r2,256
8020a0a8:	10bfffc4 	addi	r2,r2,-1
8020a0ac:	11c0e736 	bltu	r2,r7,8020a44c <__umoddi3+0x4e0>
8020a0b0:	01000404 	movi	r4,16
8020a0b4:	3904d83a 	srl	r2,r7,r4
8020a0b8:	00e00874 	movhi	r3,32801
8020a0bc:	18c8ae04 	addi	r3,r3,8888
8020a0c0:	1885883a 	add	r2,r3,r2
8020a0c4:	14c00003 	ldbu	r19,0(r2)
8020a0c8:	00c00804 	movi	r3,32
8020a0cc:	9927883a 	add	r19,r19,r4
8020a0d0:	1ce9c83a 	sub	r20,r3,r19
8020a0d4:	a000581e 	bne	r20,zero,8020a238 <__umoddi3+0x2cc>
8020a0d8:	3c400136 	bltu	r7,r17,8020a0e0 <__umoddi3+0x174>
8020a0dc:	8180eb36 	bltu	r16,r6,8020a48c <__umoddi3+0x520>
8020a0e0:	8185c83a 	sub	r2,r16,r6
8020a0e4:	89e3c83a 	sub	r17,r17,r7
8020a0e8:	8089803a 	cmpltu	r4,r16,r2
8020a0ec:	8939c83a 	sub	fp,r17,r4
8020a0f0:	e007883a 	mov	r3,fp
8020a0f4:	00003706 	br	8020a1d4 <__umoddi3+0x268>
8020a0f8:	3000041e 	bne	r6,zero,8020a10c <__umoddi3+0x1a0>
8020a0fc:	000b883a 	mov	r5,zero
8020a100:	01000044 	movi	r4,1
8020a104:	020a59c0 	call	8020a59c <__udivsi3>
8020a108:	1027883a 	mov	r19,r2
8020a10c:	00bfffd4 	movui	r2,65535
8020a110:	14c0402e 	bgeu	r2,r19,8020a214 <__umoddi3+0x2a8>
8020a114:	00804034 	movhi	r2,256
8020a118:	10bfffc4 	addi	r2,r2,-1
8020a11c:	14c0cd36 	bltu	r2,r19,8020a454 <__umoddi3+0x4e8>
8020a120:	00800404 	movi	r2,16
8020a124:	9886d83a 	srl	r3,r19,r2
8020a128:	01200874 	movhi	r4,32801
8020a12c:	2108ae04 	addi	r4,r4,8888
8020a130:	20c7883a 	add	r3,r4,r3
8020a134:	18c00003 	ldbu	r3,0(r3)
8020a138:	1887883a 	add	r3,r3,r2
8020a13c:	00800804 	movi	r2,32
8020a140:	10e5c83a 	sub	r18,r2,r3
8020a144:	9000901e 	bne	r18,zero,8020a388 <__umoddi3+0x41c>
8020a148:	982cd43a 	srli	r22,r19,16
8020a14c:	8ce3c83a 	sub	r17,r17,r19
8020a150:	9d7fffcc 	andi	r21,r19,65535
8020a154:	b00b883a 	mov	r5,r22
8020a158:	8809883a 	mov	r4,r17
8020a15c:	020a6000 	call	8020a600 <__umodsi3>
8020a160:	8809883a 	mov	r4,r17
8020a164:	b00b883a 	mov	r5,r22
8020a168:	1021883a 	mov	r16,r2
8020a16c:	020a59c0 	call	8020a59c <__udivsi3>
8020a170:	8006943a 	slli	r3,r16,16
8020a174:	a008d43a 	srli	r4,r20,16
8020a178:	1545383a 	mul	r2,r2,r21
8020a17c:	20c8b03a 	or	r4,r4,r3
8020a180:	2080042e 	bgeu	r4,r2,8020a194 <__umoddi3+0x228>
8020a184:	24c9883a 	add	r4,r4,r19
8020a188:	24c00236 	bltu	r4,r19,8020a194 <__umoddi3+0x228>
8020a18c:	2080012e 	bgeu	r4,r2,8020a194 <__umoddi3+0x228>
8020a190:	24c9883a 	add	r4,r4,r19
8020a194:	20a1c83a 	sub	r16,r4,r2
8020a198:	b00b883a 	mov	r5,r22
8020a19c:	8009883a 	mov	r4,r16
8020a1a0:	020a6000 	call	8020a600 <__umodsi3>
8020a1a4:	1023883a 	mov	r17,r2
8020a1a8:	b00b883a 	mov	r5,r22
8020a1ac:	8009883a 	mov	r4,r16
8020a1b0:	020a59c0 	call	8020a59c <__udivsi3>
8020a1b4:	8822943a 	slli	r17,r17,16
8020a1b8:	1545383a 	mul	r2,r2,r21
8020a1bc:	a53fffcc 	andi	r20,r20,65535
8020a1c0:	a446b03a 	or	r3,r20,r17
8020a1c4:	18bfb02e 	bgeu	r3,r2,8020a088 <__reset+0xfa1ea088>
8020a1c8:	003fab06 	br	8020a078 <__reset+0xfa1ea078>
8020a1cc:	2005883a 	mov	r2,r4
8020a1d0:	2807883a 	mov	r3,r5
8020a1d4:	dfc00b17 	ldw	ra,44(sp)
8020a1d8:	df000a17 	ldw	fp,40(sp)
8020a1dc:	ddc00917 	ldw	r23,36(sp)
8020a1e0:	dd800817 	ldw	r22,32(sp)
8020a1e4:	dd400717 	ldw	r21,28(sp)
8020a1e8:	dd000617 	ldw	r20,24(sp)
8020a1ec:	dcc00517 	ldw	r19,20(sp)
8020a1f0:	dc800417 	ldw	r18,16(sp)
8020a1f4:	dc400317 	ldw	r17,12(sp)
8020a1f8:	dc000217 	ldw	r16,8(sp)
8020a1fc:	dec00c04 	addi	sp,sp,48
8020a200:	f800283a 	ret
8020a204:	04c03fc4 	movi	r19,255
8020a208:	99c9803a 	cmpltu	r4,r19,r7
8020a20c:	200890fa 	slli	r4,r4,3
8020a210:	003fa806 	br	8020a0b4 <__reset+0xfa1ea0b4>
8020a214:	00803fc4 	movi	r2,255
8020a218:	14c5803a 	cmpltu	r2,r2,r19
8020a21c:	100490fa 	slli	r2,r2,3
8020a220:	003fc006 	br	8020a124 <__reset+0xfa1ea124>
8020a224:	00804034 	movhi	r2,256
8020a228:	10bfffc4 	addi	r2,r2,-1
8020a22c:	11808b36 	bltu	r2,r6,8020a45c <__umoddi3+0x4f0>
8020a230:	01000404 	movi	r4,16
8020a234:	003f6406 	br	80209fc8 <__reset+0xfa1e9fc8>
8020a238:	34c4d83a 	srl	r2,r6,r19
8020a23c:	3d0e983a 	sll	r7,r7,r20
8020a240:	8cf8d83a 	srl	fp,r17,r19
8020a244:	8d10983a 	sll	r8,r17,r20
8020a248:	38aab03a 	or	r21,r7,r2
8020a24c:	a82cd43a 	srli	r22,r21,16
8020a250:	84e2d83a 	srl	r17,r16,r19
8020a254:	e009883a 	mov	r4,fp
8020a258:	b00b883a 	mov	r5,r22
8020a25c:	8a22b03a 	or	r17,r17,r8
8020a260:	3524983a 	sll	r18,r6,r20
8020a264:	020a6000 	call	8020a600 <__umodsi3>
8020a268:	e009883a 	mov	r4,fp
8020a26c:	b00b883a 	mov	r5,r22
8020a270:	102f883a 	mov	r23,r2
8020a274:	020a59c0 	call	8020a59c <__udivsi3>
8020a278:	100d883a 	mov	r6,r2
8020a27c:	b808943a 	slli	r4,r23,16
8020a280:	aa3fffcc 	andi	r8,r21,65535
8020a284:	8804d43a 	srli	r2,r17,16
8020a288:	41af383a 	mul	r23,r8,r6
8020a28c:	8520983a 	sll	r16,r16,r20
8020a290:	1104b03a 	or	r2,r2,r4
8020a294:	15c0042e 	bgeu	r2,r23,8020a2a8 <__umoddi3+0x33c>
8020a298:	1545883a 	add	r2,r2,r21
8020a29c:	30ffffc4 	addi	r3,r6,-1
8020a2a0:	1540742e 	bgeu	r2,r21,8020a474 <__umoddi3+0x508>
8020a2a4:	180d883a 	mov	r6,r3
8020a2a8:	15efc83a 	sub	r23,r2,r23
8020a2ac:	b00b883a 	mov	r5,r22
8020a2b0:	b809883a 	mov	r4,r23
8020a2b4:	d9800115 	stw	r6,4(sp)
8020a2b8:	da000015 	stw	r8,0(sp)
8020a2bc:	020a6000 	call	8020a600 <__umodsi3>
8020a2c0:	b00b883a 	mov	r5,r22
8020a2c4:	b809883a 	mov	r4,r23
8020a2c8:	1039883a 	mov	fp,r2
8020a2cc:	020a59c0 	call	8020a59c <__udivsi3>
8020a2d0:	da000017 	ldw	r8,0(sp)
8020a2d4:	e038943a 	slli	fp,fp,16
8020a2d8:	100b883a 	mov	r5,r2
8020a2dc:	4089383a 	mul	r4,r8,r2
8020a2e0:	8a3fffcc 	andi	r8,r17,65535
8020a2e4:	4710b03a 	or	r8,r8,fp
8020a2e8:	d9800117 	ldw	r6,4(sp)
8020a2ec:	4100042e 	bgeu	r8,r4,8020a300 <__umoddi3+0x394>
8020a2f0:	4551883a 	add	r8,r8,r21
8020a2f4:	10bfffc4 	addi	r2,r2,-1
8020a2f8:	45405a2e 	bgeu	r8,r21,8020a464 <__umoddi3+0x4f8>
8020a2fc:	100b883a 	mov	r5,r2
8020a300:	300c943a 	slli	r6,r6,16
8020a304:	91ffffcc 	andi	r7,r18,65535
8020a308:	9004d43a 	srli	r2,r18,16
8020a30c:	314cb03a 	or	r6,r6,r5
8020a310:	317fffcc 	andi	r5,r6,65535
8020a314:	300cd43a 	srli	r6,r6,16
8020a318:	29d3383a 	mul	r9,r5,r7
8020a31c:	288b383a 	mul	r5,r5,r2
8020a320:	31cf383a 	mul	r7,r6,r7
8020a324:	4806d43a 	srli	r3,r9,16
8020a328:	4111c83a 	sub	r8,r8,r4
8020a32c:	29cb883a 	add	r5,r5,r7
8020a330:	194b883a 	add	r5,r3,r5
8020a334:	3085383a 	mul	r2,r6,r2
8020a338:	29c0022e 	bgeu	r5,r7,8020a344 <__umoddi3+0x3d8>
8020a33c:	00c00074 	movhi	r3,1
8020a340:	10c5883a 	add	r2,r2,r3
8020a344:	2808d43a 	srli	r4,r5,16
8020a348:	280a943a 	slli	r5,r5,16
8020a34c:	4a7fffcc 	andi	r9,r9,65535
8020a350:	2085883a 	add	r2,r4,r2
8020a354:	2a4b883a 	add	r5,r5,r9
8020a358:	40803636 	bltu	r8,r2,8020a434 <__umoddi3+0x4c8>
8020a35c:	40804d26 	beq	r8,r2,8020a494 <__umoddi3+0x528>
8020a360:	4089c83a 	sub	r4,r8,r2
8020a364:	280f883a 	mov	r7,r5
8020a368:	81cfc83a 	sub	r7,r16,r7
8020a36c:	81c7803a 	cmpltu	r3,r16,r7
8020a370:	20c7c83a 	sub	r3,r4,r3
8020a374:	1cc4983a 	sll	r2,r3,r19
8020a378:	3d0ed83a 	srl	r7,r7,r20
8020a37c:	1d06d83a 	srl	r3,r3,r20
8020a380:	11c4b03a 	or	r2,r2,r7
8020a384:	003f9306 	br	8020a1d4 <__reset+0xfa1ea1d4>
8020a388:	9ca6983a 	sll	r19,r19,r18
8020a38c:	88e8d83a 	srl	r20,r17,r3
8020a390:	80c4d83a 	srl	r2,r16,r3
8020a394:	982cd43a 	srli	r22,r19,16
8020a398:	8ca2983a 	sll	r17,r17,r18
8020a39c:	a009883a 	mov	r4,r20
8020a3a0:	b00b883a 	mov	r5,r22
8020a3a4:	1478b03a 	or	fp,r2,r17
8020a3a8:	020a6000 	call	8020a600 <__umodsi3>
8020a3ac:	a009883a 	mov	r4,r20
8020a3b0:	b00b883a 	mov	r5,r22
8020a3b4:	1023883a 	mov	r17,r2
8020a3b8:	020a59c0 	call	8020a59c <__udivsi3>
8020a3bc:	9d7fffcc 	andi	r21,r19,65535
8020a3c0:	880a943a 	slli	r5,r17,16
8020a3c4:	e008d43a 	srli	r4,fp,16
8020a3c8:	a885383a 	mul	r2,r21,r2
8020a3cc:	84a8983a 	sll	r20,r16,r18
8020a3d0:	2148b03a 	or	r4,r4,r5
8020a3d4:	2080042e 	bgeu	r4,r2,8020a3e8 <__umoddi3+0x47c>
8020a3d8:	24c9883a 	add	r4,r4,r19
8020a3dc:	24c00236 	bltu	r4,r19,8020a3e8 <__umoddi3+0x47c>
8020a3e0:	2080012e 	bgeu	r4,r2,8020a3e8 <__umoddi3+0x47c>
8020a3e4:	24c9883a 	add	r4,r4,r19
8020a3e8:	20a3c83a 	sub	r17,r4,r2
8020a3ec:	b00b883a 	mov	r5,r22
8020a3f0:	8809883a 	mov	r4,r17
8020a3f4:	020a6000 	call	8020a600 <__umodsi3>
8020a3f8:	102f883a 	mov	r23,r2
8020a3fc:	8809883a 	mov	r4,r17
8020a400:	b00b883a 	mov	r5,r22
8020a404:	020a59c0 	call	8020a59c <__udivsi3>
8020a408:	b82e943a 	slli	r23,r23,16
8020a40c:	a885383a 	mul	r2,r21,r2
8020a410:	e13fffcc 	andi	r4,fp,65535
8020a414:	25c8b03a 	or	r4,r4,r23
8020a418:	2080042e 	bgeu	r4,r2,8020a42c <__umoddi3+0x4c0>
8020a41c:	24c9883a 	add	r4,r4,r19
8020a420:	24c00236 	bltu	r4,r19,8020a42c <__umoddi3+0x4c0>
8020a424:	2080012e 	bgeu	r4,r2,8020a42c <__umoddi3+0x4c0>
8020a428:	24c9883a 	add	r4,r4,r19
8020a42c:	20a3c83a 	sub	r17,r4,r2
8020a430:	003f4806 	br	8020a154 <__reset+0xfa1ea154>
8020a434:	2c8fc83a 	sub	r7,r5,r18
8020a438:	1545c83a 	sub	r2,r2,r21
8020a43c:	29cb803a 	cmpltu	r5,r5,r7
8020a440:	1145c83a 	sub	r2,r2,r5
8020a444:	4089c83a 	sub	r4,r8,r2
8020a448:	003fc706 	br	8020a368 <__reset+0xfa1ea368>
8020a44c:	01000604 	movi	r4,24
8020a450:	003f1806 	br	8020a0b4 <__reset+0xfa1ea0b4>
8020a454:	00800604 	movi	r2,24
8020a458:	003f3206 	br	8020a124 <__reset+0xfa1ea124>
8020a45c:	01000604 	movi	r4,24
8020a460:	003ed906 	br	80209fc8 <__reset+0xfa1e9fc8>
8020a464:	413fa52e 	bgeu	r8,r4,8020a2fc <__reset+0xfa1ea2fc>
8020a468:	297fff84 	addi	r5,r5,-2
8020a46c:	4551883a 	add	r8,r8,r21
8020a470:	003fa306 	br	8020a300 <__reset+0xfa1ea300>
8020a474:	15ff8b2e 	bgeu	r2,r23,8020a2a4 <__reset+0xfa1ea2a4>
8020a478:	31bfff84 	addi	r6,r6,-2
8020a47c:	1545883a 	add	r2,r2,r21
8020a480:	003f8906 	br	8020a2a8 <__reset+0xfa1ea2a8>
8020a484:	24c9883a 	add	r4,r4,r19
8020a488:	003eee06 	br	8020a044 <__reset+0xfa1ea044>
8020a48c:	8005883a 	mov	r2,r16
8020a490:	003f1706 	br	8020a0f0 <__reset+0xfa1ea0f0>
8020a494:	817fe736 	bltu	r16,r5,8020a434 <__reset+0xfa1ea434>
8020a498:	280f883a 	mov	r7,r5
8020a49c:	0009883a 	mov	r4,zero
8020a4a0:	003fb106 	br	8020a368 <__reset+0xfa1ea368>

8020a4a4 <__divsi3>:
8020a4a4:	20001b16 	blt	r4,zero,8020a514 <__divsi3+0x70>
8020a4a8:	000f883a 	mov	r7,zero
8020a4ac:	28001616 	blt	r5,zero,8020a508 <__divsi3+0x64>
8020a4b0:	200d883a 	mov	r6,r4
8020a4b4:	29001a2e 	bgeu	r5,r4,8020a520 <__divsi3+0x7c>
8020a4b8:	00800804 	movi	r2,32
8020a4bc:	00c00044 	movi	r3,1
8020a4c0:	00000106 	br	8020a4c8 <__divsi3+0x24>
8020a4c4:	10000d26 	beq	r2,zero,8020a4fc <__divsi3+0x58>
8020a4c8:	294b883a 	add	r5,r5,r5
8020a4cc:	10bfffc4 	addi	r2,r2,-1
8020a4d0:	18c7883a 	add	r3,r3,r3
8020a4d4:	293ffb36 	bltu	r5,r4,8020a4c4 <__reset+0xfa1ea4c4>
8020a4d8:	0005883a 	mov	r2,zero
8020a4dc:	18000726 	beq	r3,zero,8020a4fc <__divsi3+0x58>
8020a4e0:	0005883a 	mov	r2,zero
8020a4e4:	31400236 	bltu	r6,r5,8020a4f0 <__divsi3+0x4c>
8020a4e8:	314dc83a 	sub	r6,r6,r5
8020a4ec:	10c4b03a 	or	r2,r2,r3
8020a4f0:	1806d07a 	srli	r3,r3,1
8020a4f4:	280ad07a 	srli	r5,r5,1
8020a4f8:	183ffa1e 	bne	r3,zero,8020a4e4 <__reset+0xfa1ea4e4>
8020a4fc:	38000126 	beq	r7,zero,8020a504 <__divsi3+0x60>
8020a500:	0085c83a 	sub	r2,zero,r2
8020a504:	f800283a 	ret
8020a508:	014bc83a 	sub	r5,zero,r5
8020a50c:	39c0005c 	xori	r7,r7,1
8020a510:	003fe706 	br	8020a4b0 <__reset+0xfa1ea4b0>
8020a514:	0109c83a 	sub	r4,zero,r4
8020a518:	01c00044 	movi	r7,1
8020a51c:	003fe306 	br	8020a4ac <__reset+0xfa1ea4ac>
8020a520:	00c00044 	movi	r3,1
8020a524:	003fee06 	br	8020a4e0 <__reset+0xfa1ea4e0>

8020a528 <__modsi3>:
8020a528:	20001716 	blt	r4,zero,8020a588 <__modsi3+0x60>
8020a52c:	000f883a 	mov	r7,zero
8020a530:	2005883a 	mov	r2,r4
8020a534:	28001216 	blt	r5,zero,8020a580 <__modsi3+0x58>
8020a538:	2900162e 	bgeu	r5,r4,8020a594 <__modsi3+0x6c>
8020a53c:	01800804 	movi	r6,32
8020a540:	00c00044 	movi	r3,1
8020a544:	00000106 	br	8020a54c <__modsi3+0x24>
8020a548:	30000a26 	beq	r6,zero,8020a574 <__modsi3+0x4c>
8020a54c:	294b883a 	add	r5,r5,r5
8020a550:	31bfffc4 	addi	r6,r6,-1
8020a554:	18c7883a 	add	r3,r3,r3
8020a558:	293ffb36 	bltu	r5,r4,8020a548 <__reset+0xfa1ea548>
8020a55c:	18000526 	beq	r3,zero,8020a574 <__modsi3+0x4c>
8020a560:	1806d07a 	srli	r3,r3,1
8020a564:	11400136 	bltu	r2,r5,8020a56c <__modsi3+0x44>
8020a568:	1145c83a 	sub	r2,r2,r5
8020a56c:	280ad07a 	srli	r5,r5,1
8020a570:	183ffb1e 	bne	r3,zero,8020a560 <__reset+0xfa1ea560>
8020a574:	38000126 	beq	r7,zero,8020a57c <__modsi3+0x54>
8020a578:	0085c83a 	sub	r2,zero,r2
8020a57c:	f800283a 	ret
8020a580:	014bc83a 	sub	r5,zero,r5
8020a584:	003fec06 	br	8020a538 <__reset+0xfa1ea538>
8020a588:	0109c83a 	sub	r4,zero,r4
8020a58c:	01c00044 	movi	r7,1
8020a590:	003fe706 	br	8020a530 <__reset+0xfa1ea530>
8020a594:	00c00044 	movi	r3,1
8020a598:	003ff106 	br	8020a560 <__reset+0xfa1ea560>

8020a59c <__udivsi3>:
8020a59c:	200d883a 	mov	r6,r4
8020a5a0:	2900152e 	bgeu	r5,r4,8020a5f8 <__udivsi3+0x5c>
8020a5a4:	28001416 	blt	r5,zero,8020a5f8 <__udivsi3+0x5c>
8020a5a8:	00800804 	movi	r2,32
8020a5ac:	00c00044 	movi	r3,1
8020a5b0:	00000206 	br	8020a5bc <__udivsi3+0x20>
8020a5b4:	10000e26 	beq	r2,zero,8020a5f0 <__udivsi3+0x54>
8020a5b8:	28000516 	blt	r5,zero,8020a5d0 <__udivsi3+0x34>
8020a5bc:	294b883a 	add	r5,r5,r5
8020a5c0:	10bfffc4 	addi	r2,r2,-1
8020a5c4:	18c7883a 	add	r3,r3,r3
8020a5c8:	293ffa36 	bltu	r5,r4,8020a5b4 <__reset+0xfa1ea5b4>
8020a5cc:	18000826 	beq	r3,zero,8020a5f0 <__udivsi3+0x54>
8020a5d0:	0005883a 	mov	r2,zero
8020a5d4:	31400236 	bltu	r6,r5,8020a5e0 <__udivsi3+0x44>
8020a5d8:	314dc83a 	sub	r6,r6,r5
8020a5dc:	10c4b03a 	or	r2,r2,r3
8020a5e0:	1806d07a 	srli	r3,r3,1
8020a5e4:	280ad07a 	srli	r5,r5,1
8020a5e8:	183ffa1e 	bne	r3,zero,8020a5d4 <__reset+0xfa1ea5d4>
8020a5ec:	f800283a 	ret
8020a5f0:	0005883a 	mov	r2,zero
8020a5f4:	f800283a 	ret
8020a5f8:	00c00044 	movi	r3,1
8020a5fc:	003ff406 	br	8020a5d0 <__reset+0xfa1ea5d0>

8020a600 <__umodsi3>:
8020a600:	2005883a 	mov	r2,r4
8020a604:	2900122e 	bgeu	r5,r4,8020a650 <__umodsi3+0x50>
8020a608:	28001116 	blt	r5,zero,8020a650 <__umodsi3+0x50>
8020a60c:	01800804 	movi	r6,32
8020a610:	00c00044 	movi	r3,1
8020a614:	00000206 	br	8020a620 <__umodsi3+0x20>
8020a618:	30000c26 	beq	r6,zero,8020a64c <__umodsi3+0x4c>
8020a61c:	28000516 	blt	r5,zero,8020a634 <__umodsi3+0x34>
8020a620:	294b883a 	add	r5,r5,r5
8020a624:	31bfffc4 	addi	r6,r6,-1
8020a628:	18c7883a 	add	r3,r3,r3
8020a62c:	293ffa36 	bltu	r5,r4,8020a618 <__reset+0xfa1ea618>
8020a630:	18000626 	beq	r3,zero,8020a64c <__umodsi3+0x4c>
8020a634:	1806d07a 	srli	r3,r3,1
8020a638:	11400136 	bltu	r2,r5,8020a640 <__umodsi3+0x40>
8020a63c:	1145c83a 	sub	r2,r2,r5
8020a640:	280ad07a 	srli	r5,r5,1
8020a644:	183ffb1e 	bne	r3,zero,8020a634 <__reset+0xfa1ea634>
8020a648:	f800283a 	ret
8020a64c:	f800283a 	ret
8020a650:	00c00044 	movi	r3,1
8020a654:	003ff706 	br	8020a634 <__reset+0xfa1ea634>

8020a658 <__adddf3>:
8020a658:	02c00434 	movhi	r11,16
8020a65c:	5affffc4 	addi	r11,r11,-1
8020a660:	2806d7fa 	srli	r3,r5,31
8020a664:	2ad4703a 	and	r10,r5,r11
8020a668:	3ad2703a 	and	r9,r7,r11
8020a66c:	3804d53a 	srli	r2,r7,20
8020a670:	3018d77a 	srli	r12,r6,29
8020a674:	280ad53a 	srli	r5,r5,20
8020a678:	501490fa 	slli	r10,r10,3
8020a67c:	2010d77a 	srli	r8,r4,29
8020a680:	481290fa 	slli	r9,r9,3
8020a684:	380ed7fa 	srli	r7,r7,31
8020a688:	defffb04 	addi	sp,sp,-20
8020a68c:	dc800215 	stw	r18,8(sp)
8020a690:	dc400115 	stw	r17,4(sp)
8020a694:	dc000015 	stw	r16,0(sp)
8020a698:	dfc00415 	stw	ra,16(sp)
8020a69c:	dcc00315 	stw	r19,12(sp)
8020a6a0:	1c803fcc 	andi	r18,r3,255
8020a6a4:	2c01ffcc 	andi	r16,r5,2047
8020a6a8:	5210b03a 	or	r8,r10,r8
8020a6ac:	202290fa 	slli	r17,r4,3
8020a6b0:	1081ffcc 	andi	r2,r2,2047
8020a6b4:	4b12b03a 	or	r9,r9,r12
8020a6b8:	300c90fa 	slli	r6,r6,3
8020a6bc:	91c07526 	beq	r18,r7,8020a894 <__adddf3+0x23c>
8020a6c0:	8087c83a 	sub	r3,r16,r2
8020a6c4:	00c0ab0e 	bge	zero,r3,8020a974 <__adddf3+0x31c>
8020a6c8:	10002a1e 	bne	r2,zero,8020a774 <__adddf3+0x11c>
8020a6cc:	4984b03a 	or	r2,r9,r6
8020a6d0:	1000961e 	bne	r2,zero,8020a92c <__adddf3+0x2d4>
8020a6d4:	888001cc 	andi	r2,r17,7
8020a6d8:	10000726 	beq	r2,zero,8020a6f8 <__adddf3+0xa0>
8020a6dc:	888003cc 	andi	r2,r17,15
8020a6e0:	00c00104 	movi	r3,4
8020a6e4:	10c00426 	beq	r2,r3,8020a6f8 <__adddf3+0xa0>
8020a6e8:	88c7883a 	add	r3,r17,r3
8020a6ec:	1c63803a 	cmpltu	r17,r3,r17
8020a6f0:	4451883a 	add	r8,r8,r17
8020a6f4:	1823883a 	mov	r17,r3
8020a6f8:	4080202c 	andhi	r2,r8,128
8020a6fc:	10005926 	beq	r2,zero,8020a864 <__adddf3+0x20c>
8020a700:	84000044 	addi	r16,r16,1
8020a704:	0081ffc4 	movi	r2,2047
8020a708:	8080ba26 	beq	r16,r2,8020a9f4 <__adddf3+0x39c>
8020a70c:	00bfe034 	movhi	r2,65408
8020a710:	10bfffc4 	addi	r2,r2,-1
8020a714:	4090703a 	and	r8,r8,r2
8020a718:	4004977a 	slli	r2,r8,29
8020a71c:	4010927a 	slli	r8,r8,9
8020a720:	8822d0fa 	srli	r17,r17,3
8020a724:	8401ffcc 	andi	r16,r16,2047
8020a728:	4010d33a 	srli	r8,r8,12
8020a72c:	9007883a 	mov	r3,r18
8020a730:	1444b03a 	or	r2,r2,r17
8020a734:	8401ffcc 	andi	r16,r16,2047
8020a738:	8020953a 	slli	r16,r16,20
8020a73c:	18c03fcc 	andi	r3,r3,255
8020a740:	01000434 	movhi	r4,16
8020a744:	213fffc4 	addi	r4,r4,-1
8020a748:	180697fa 	slli	r3,r3,31
8020a74c:	4110703a 	and	r8,r8,r4
8020a750:	4410b03a 	or	r8,r8,r16
8020a754:	40c6b03a 	or	r3,r8,r3
8020a758:	dfc00417 	ldw	ra,16(sp)
8020a75c:	dcc00317 	ldw	r19,12(sp)
8020a760:	dc800217 	ldw	r18,8(sp)
8020a764:	dc400117 	ldw	r17,4(sp)
8020a768:	dc000017 	ldw	r16,0(sp)
8020a76c:	dec00504 	addi	sp,sp,20
8020a770:	f800283a 	ret
8020a774:	0081ffc4 	movi	r2,2047
8020a778:	80bfd626 	beq	r16,r2,8020a6d4 <__reset+0xfa1ea6d4>
8020a77c:	4a402034 	orhi	r9,r9,128
8020a780:	00800e04 	movi	r2,56
8020a784:	10c09f16 	blt	r2,r3,8020aa04 <__adddf3+0x3ac>
8020a788:	008007c4 	movi	r2,31
8020a78c:	10c0c216 	blt	r2,r3,8020aa98 <__adddf3+0x440>
8020a790:	00800804 	movi	r2,32
8020a794:	10c5c83a 	sub	r2,r2,r3
8020a798:	488a983a 	sll	r5,r9,r2
8020a79c:	30c8d83a 	srl	r4,r6,r3
8020a7a0:	3084983a 	sll	r2,r6,r2
8020a7a4:	48c6d83a 	srl	r3,r9,r3
8020a7a8:	290cb03a 	or	r6,r5,r4
8020a7ac:	1004c03a 	cmpne	r2,r2,zero
8020a7b0:	308cb03a 	or	r6,r6,r2
8020a7b4:	898dc83a 	sub	r6,r17,r6
8020a7b8:	89a3803a 	cmpltu	r17,r17,r6
8020a7bc:	40d1c83a 	sub	r8,r8,r3
8020a7c0:	4451c83a 	sub	r8,r8,r17
8020a7c4:	3023883a 	mov	r17,r6
8020a7c8:	4080202c 	andhi	r2,r8,128
8020a7cc:	10002326 	beq	r2,zero,8020a85c <__adddf3+0x204>
8020a7d0:	04c02034 	movhi	r19,128
8020a7d4:	9cffffc4 	addi	r19,r19,-1
8020a7d8:	44e6703a 	and	r19,r8,r19
8020a7dc:	98007626 	beq	r19,zero,8020a9b8 <__adddf3+0x360>
8020a7e0:	9809883a 	mov	r4,r19
8020a7e4:	020cc5c0 	call	8020cc5c <__clzsi2>
8020a7e8:	10fffe04 	addi	r3,r2,-8
8020a7ec:	010007c4 	movi	r4,31
8020a7f0:	20c07716 	blt	r4,r3,8020a9d0 <__adddf3+0x378>
8020a7f4:	00800804 	movi	r2,32
8020a7f8:	10c5c83a 	sub	r2,r2,r3
8020a7fc:	8884d83a 	srl	r2,r17,r2
8020a800:	98d0983a 	sll	r8,r19,r3
8020a804:	88e2983a 	sll	r17,r17,r3
8020a808:	1204b03a 	or	r2,r2,r8
8020a80c:	1c007416 	blt	r3,r16,8020a9e0 <__adddf3+0x388>
8020a810:	1c21c83a 	sub	r16,r3,r16
8020a814:	82000044 	addi	r8,r16,1
8020a818:	00c007c4 	movi	r3,31
8020a81c:	1a009116 	blt	r3,r8,8020aa64 <__adddf3+0x40c>
8020a820:	00c00804 	movi	r3,32
8020a824:	1a07c83a 	sub	r3,r3,r8
8020a828:	8a08d83a 	srl	r4,r17,r8
8020a82c:	88e2983a 	sll	r17,r17,r3
8020a830:	10c6983a 	sll	r3,r2,r3
8020a834:	1210d83a 	srl	r8,r2,r8
8020a838:	8804c03a 	cmpne	r2,r17,zero
8020a83c:	1906b03a 	or	r3,r3,r4
8020a840:	18a2b03a 	or	r17,r3,r2
8020a844:	0021883a 	mov	r16,zero
8020a848:	003fa206 	br	8020a6d4 <__reset+0xfa1ea6d4>
8020a84c:	1890b03a 	or	r8,r3,r2
8020a850:	40017d26 	beq	r8,zero,8020ae48 <__adddf3+0x7f0>
8020a854:	1011883a 	mov	r8,r2
8020a858:	1823883a 	mov	r17,r3
8020a85c:	888001cc 	andi	r2,r17,7
8020a860:	103f9e1e 	bne	r2,zero,8020a6dc <__reset+0xfa1ea6dc>
8020a864:	4004977a 	slli	r2,r8,29
8020a868:	8822d0fa 	srli	r17,r17,3
8020a86c:	4010d0fa 	srli	r8,r8,3
8020a870:	9007883a 	mov	r3,r18
8020a874:	1444b03a 	or	r2,r2,r17
8020a878:	0101ffc4 	movi	r4,2047
8020a87c:	81002426 	beq	r16,r4,8020a910 <__adddf3+0x2b8>
8020a880:	8120703a 	and	r16,r16,r4
8020a884:	01000434 	movhi	r4,16
8020a888:	213fffc4 	addi	r4,r4,-1
8020a88c:	4110703a 	and	r8,r8,r4
8020a890:	003fa806 	br	8020a734 <__reset+0xfa1ea734>
8020a894:	8089c83a 	sub	r4,r16,r2
8020a898:	01005e0e 	bge	zero,r4,8020aa14 <__adddf3+0x3bc>
8020a89c:	10002b26 	beq	r2,zero,8020a94c <__adddf3+0x2f4>
8020a8a0:	0081ffc4 	movi	r2,2047
8020a8a4:	80bf8b26 	beq	r16,r2,8020a6d4 <__reset+0xfa1ea6d4>
8020a8a8:	4a402034 	orhi	r9,r9,128
8020a8ac:	00800e04 	movi	r2,56
8020a8b0:	1100a40e 	bge	r2,r4,8020ab44 <__adddf3+0x4ec>
8020a8b4:	498cb03a 	or	r6,r9,r6
8020a8b8:	300ac03a 	cmpne	r5,r6,zero
8020a8bc:	0013883a 	mov	r9,zero
8020a8c0:	2c4b883a 	add	r5,r5,r17
8020a8c4:	2c63803a 	cmpltu	r17,r5,r17
8020a8c8:	4a11883a 	add	r8,r9,r8
8020a8cc:	8a11883a 	add	r8,r17,r8
8020a8d0:	2823883a 	mov	r17,r5
8020a8d4:	4080202c 	andhi	r2,r8,128
8020a8d8:	103fe026 	beq	r2,zero,8020a85c <__reset+0xfa1ea85c>
8020a8dc:	84000044 	addi	r16,r16,1
8020a8e0:	0081ffc4 	movi	r2,2047
8020a8e4:	8080d226 	beq	r16,r2,8020ac30 <__adddf3+0x5d8>
8020a8e8:	00bfe034 	movhi	r2,65408
8020a8ec:	10bfffc4 	addi	r2,r2,-1
8020a8f0:	4090703a 	and	r8,r8,r2
8020a8f4:	880ad07a 	srli	r5,r17,1
8020a8f8:	400897fa 	slli	r4,r8,31
8020a8fc:	88c0004c 	andi	r3,r17,1
8020a900:	28e2b03a 	or	r17,r5,r3
8020a904:	4010d07a 	srli	r8,r8,1
8020a908:	2462b03a 	or	r17,r4,r17
8020a90c:	003f7106 	br	8020a6d4 <__reset+0xfa1ea6d4>
8020a910:	4088b03a 	or	r4,r8,r2
8020a914:	20014526 	beq	r4,zero,8020ae2c <__adddf3+0x7d4>
8020a918:	01000434 	movhi	r4,16
8020a91c:	42000234 	orhi	r8,r8,8
8020a920:	213fffc4 	addi	r4,r4,-1
8020a924:	4110703a 	and	r8,r8,r4
8020a928:	003f8206 	br	8020a734 <__reset+0xfa1ea734>
8020a92c:	18ffffc4 	addi	r3,r3,-1
8020a930:	1800491e 	bne	r3,zero,8020aa58 <__adddf3+0x400>
8020a934:	898bc83a 	sub	r5,r17,r6
8020a938:	8963803a 	cmpltu	r17,r17,r5
8020a93c:	4251c83a 	sub	r8,r8,r9
8020a940:	4451c83a 	sub	r8,r8,r17
8020a944:	2823883a 	mov	r17,r5
8020a948:	003f9f06 	br	8020a7c8 <__reset+0xfa1ea7c8>
8020a94c:	4984b03a 	or	r2,r9,r6
8020a950:	103f6026 	beq	r2,zero,8020a6d4 <__reset+0xfa1ea6d4>
8020a954:	213fffc4 	addi	r4,r4,-1
8020a958:	2000931e 	bne	r4,zero,8020aba8 <__adddf3+0x550>
8020a95c:	898d883a 	add	r6,r17,r6
8020a960:	3463803a 	cmpltu	r17,r6,r17
8020a964:	4251883a 	add	r8,r8,r9
8020a968:	8a11883a 	add	r8,r17,r8
8020a96c:	3023883a 	mov	r17,r6
8020a970:	003fd806 	br	8020a8d4 <__reset+0xfa1ea8d4>
8020a974:	1800541e 	bne	r3,zero,8020aac8 <__adddf3+0x470>
8020a978:	80800044 	addi	r2,r16,1
8020a97c:	1081ffcc 	andi	r2,r2,2047
8020a980:	00c00044 	movi	r3,1
8020a984:	1880a00e 	bge	r3,r2,8020ac08 <__adddf3+0x5b0>
8020a988:	8989c83a 	sub	r4,r17,r6
8020a98c:	8905803a 	cmpltu	r2,r17,r4
8020a990:	4267c83a 	sub	r19,r8,r9
8020a994:	98a7c83a 	sub	r19,r19,r2
8020a998:	9880202c 	andhi	r2,r19,128
8020a99c:	10006326 	beq	r2,zero,8020ab2c <__adddf3+0x4d4>
8020a9a0:	3463c83a 	sub	r17,r6,r17
8020a9a4:	4a07c83a 	sub	r3,r9,r8
8020a9a8:	344d803a 	cmpltu	r6,r6,r17
8020a9ac:	19a7c83a 	sub	r19,r3,r6
8020a9b0:	3825883a 	mov	r18,r7
8020a9b4:	983f8a1e 	bne	r19,zero,8020a7e0 <__reset+0xfa1ea7e0>
8020a9b8:	8809883a 	mov	r4,r17
8020a9bc:	020cc5c0 	call	8020cc5c <__clzsi2>
8020a9c0:	10800804 	addi	r2,r2,32
8020a9c4:	10fffe04 	addi	r3,r2,-8
8020a9c8:	010007c4 	movi	r4,31
8020a9cc:	20ff890e 	bge	r4,r3,8020a7f4 <__reset+0xfa1ea7f4>
8020a9d0:	10bff604 	addi	r2,r2,-40
8020a9d4:	8884983a 	sll	r2,r17,r2
8020a9d8:	0023883a 	mov	r17,zero
8020a9dc:	1c3f8c0e 	bge	r3,r16,8020a810 <__reset+0xfa1ea810>
8020a9e0:	023fe034 	movhi	r8,65408
8020a9e4:	423fffc4 	addi	r8,r8,-1
8020a9e8:	80e1c83a 	sub	r16,r16,r3
8020a9ec:	1210703a 	and	r8,r2,r8
8020a9f0:	003f3806 	br	8020a6d4 <__reset+0xfa1ea6d4>
8020a9f4:	9007883a 	mov	r3,r18
8020a9f8:	0011883a 	mov	r8,zero
8020a9fc:	0005883a 	mov	r2,zero
8020aa00:	003f4c06 	br	8020a734 <__reset+0xfa1ea734>
8020aa04:	498cb03a 	or	r6,r9,r6
8020aa08:	300cc03a 	cmpne	r6,r6,zero
8020aa0c:	0007883a 	mov	r3,zero
8020aa10:	003f6806 	br	8020a7b4 <__reset+0xfa1ea7b4>
8020aa14:	20009c1e 	bne	r4,zero,8020ac88 <__adddf3+0x630>
8020aa18:	80800044 	addi	r2,r16,1
8020aa1c:	1141ffcc 	andi	r5,r2,2047
8020aa20:	01000044 	movi	r4,1
8020aa24:	2140670e 	bge	r4,r5,8020abc4 <__adddf3+0x56c>
8020aa28:	0101ffc4 	movi	r4,2047
8020aa2c:	11007f26 	beq	r2,r4,8020ac2c <__adddf3+0x5d4>
8020aa30:	898d883a 	add	r6,r17,r6
8020aa34:	4247883a 	add	r3,r8,r9
8020aa38:	3451803a 	cmpltu	r8,r6,r17
8020aa3c:	40d1883a 	add	r8,r8,r3
8020aa40:	402297fa 	slli	r17,r8,31
8020aa44:	300cd07a 	srli	r6,r6,1
8020aa48:	4010d07a 	srli	r8,r8,1
8020aa4c:	1021883a 	mov	r16,r2
8020aa50:	89a2b03a 	or	r17,r17,r6
8020aa54:	003f1f06 	br	8020a6d4 <__reset+0xfa1ea6d4>
8020aa58:	0081ffc4 	movi	r2,2047
8020aa5c:	80bf481e 	bne	r16,r2,8020a780 <__reset+0xfa1ea780>
8020aa60:	003f1c06 	br	8020a6d4 <__reset+0xfa1ea6d4>
8020aa64:	843ff844 	addi	r16,r16,-31
8020aa68:	01000804 	movi	r4,32
8020aa6c:	1406d83a 	srl	r3,r2,r16
8020aa70:	41005026 	beq	r8,r4,8020abb4 <__adddf3+0x55c>
8020aa74:	01001004 	movi	r4,64
8020aa78:	2211c83a 	sub	r8,r4,r8
8020aa7c:	1204983a 	sll	r2,r2,r8
8020aa80:	88a2b03a 	or	r17,r17,r2
8020aa84:	8822c03a 	cmpne	r17,r17,zero
8020aa88:	1c62b03a 	or	r17,r3,r17
8020aa8c:	0011883a 	mov	r8,zero
8020aa90:	0021883a 	mov	r16,zero
8020aa94:	003f7106 	br	8020a85c <__reset+0xfa1ea85c>
8020aa98:	193ff804 	addi	r4,r3,-32
8020aa9c:	00800804 	movi	r2,32
8020aaa0:	4908d83a 	srl	r4,r9,r4
8020aaa4:	18804526 	beq	r3,r2,8020abbc <__adddf3+0x564>
8020aaa8:	00801004 	movi	r2,64
8020aaac:	10c5c83a 	sub	r2,r2,r3
8020aab0:	4886983a 	sll	r3,r9,r2
8020aab4:	198cb03a 	or	r6,r3,r6
8020aab8:	300cc03a 	cmpne	r6,r6,zero
8020aabc:	218cb03a 	or	r6,r4,r6
8020aac0:	0007883a 	mov	r3,zero
8020aac4:	003f3b06 	br	8020a7b4 <__reset+0xfa1ea7b4>
8020aac8:	80002a26 	beq	r16,zero,8020ab74 <__adddf3+0x51c>
8020aacc:	0101ffc4 	movi	r4,2047
8020aad0:	11006826 	beq	r2,r4,8020ac74 <__adddf3+0x61c>
8020aad4:	00c7c83a 	sub	r3,zero,r3
8020aad8:	42002034 	orhi	r8,r8,128
8020aadc:	01000e04 	movi	r4,56
8020aae0:	20c07c16 	blt	r4,r3,8020acd4 <__adddf3+0x67c>
8020aae4:	010007c4 	movi	r4,31
8020aae8:	20c0da16 	blt	r4,r3,8020ae54 <__adddf3+0x7fc>
8020aaec:	01000804 	movi	r4,32
8020aaf0:	20c9c83a 	sub	r4,r4,r3
8020aaf4:	4114983a 	sll	r10,r8,r4
8020aaf8:	88cad83a 	srl	r5,r17,r3
8020aafc:	8908983a 	sll	r4,r17,r4
8020ab00:	40c6d83a 	srl	r3,r8,r3
8020ab04:	5162b03a 	or	r17,r10,r5
8020ab08:	2008c03a 	cmpne	r4,r4,zero
8020ab0c:	8922b03a 	or	r17,r17,r4
8020ab10:	3463c83a 	sub	r17,r6,r17
8020ab14:	48c7c83a 	sub	r3,r9,r3
8020ab18:	344d803a 	cmpltu	r6,r6,r17
8020ab1c:	1991c83a 	sub	r8,r3,r6
8020ab20:	1021883a 	mov	r16,r2
8020ab24:	3825883a 	mov	r18,r7
8020ab28:	003f2706 	br	8020a7c8 <__reset+0xfa1ea7c8>
8020ab2c:	24d0b03a 	or	r8,r4,r19
8020ab30:	40001b1e 	bne	r8,zero,8020aba0 <__adddf3+0x548>
8020ab34:	0005883a 	mov	r2,zero
8020ab38:	0007883a 	mov	r3,zero
8020ab3c:	0021883a 	mov	r16,zero
8020ab40:	003f4d06 	br	8020a878 <__reset+0xfa1ea878>
8020ab44:	008007c4 	movi	r2,31
8020ab48:	11003c16 	blt	r2,r4,8020ac3c <__adddf3+0x5e4>
8020ab4c:	00800804 	movi	r2,32
8020ab50:	1105c83a 	sub	r2,r2,r4
8020ab54:	488e983a 	sll	r7,r9,r2
8020ab58:	310ad83a 	srl	r5,r6,r4
8020ab5c:	3084983a 	sll	r2,r6,r2
8020ab60:	4912d83a 	srl	r9,r9,r4
8020ab64:	394ab03a 	or	r5,r7,r5
8020ab68:	1004c03a 	cmpne	r2,r2,zero
8020ab6c:	288ab03a 	or	r5,r5,r2
8020ab70:	003f5306 	br	8020a8c0 <__reset+0xfa1ea8c0>
8020ab74:	4448b03a 	or	r4,r8,r17
8020ab78:	20003e26 	beq	r4,zero,8020ac74 <__adddf3+0x61c>
8020ab7c:	00c6303a 	nor	r3,zero,r3
8020ab80:	18003a1e 	bne	r3,zero,8020ac6c <__adddf3+0x614>
8020ab84:	3463c83a 	sub	r17,r6,r17
8020ab88:	4a07c83a 	sub	r3,r9,r8
8020ab8c:	344d803a 	cmpltu	r6,r6,r17
8020ab90:	1991c83a 	sub	r8,r3,r6
8020ab94:	1021883a 	mov	r16,r2
8020ab98:	3825883a 	mov	r18,r7
8020ab9c:	003f0a06 	br	8020a7c8 <__reset+0xfa1ea7c8>
8020aba0:	2023883a 	mov	r17,r4
8020aba4:	003f0d06 	br	8020a7dc <__reset+0xfa1ea7dc>
8020aba8:	0081ffc4 	movi	r2,2047
8020abac:	80bf3f1e 	bne	r16,r2,8020a8ac <__reset+0xfa1ea8ac>
8020abb0:	003ec806 	br	8020a6d4 <__reset+0xfa1ea6d4>
8020abb4:	0005883a 	mov	r2,zero
8020abb8:	003fb106 	br	8020aa80 <__reset+0xfa1eaa80>
8020abbc:	0007883a 	mov	r3,zero
8020abc0:	003fbc06 	br	8020aab4 <__reset+0xfa1eaab4>
8020abc4:	4444b03a 	or	r2,r8,r17
8020abc8:	8000871e 	bne	r16,zero,8020ade8 <__adddf3+0x790>
8020abcc:	1000ba26 	beq	r2,zero,8020aeb8 <__adddf3+0x860>
8020abd0:	4984b03a 	or	r2,r9,r6
8020abd4:	103ebf26 	beq	r2,zero,8020a6d4 <__reset+0xfa1ea6d4>
8020abd8:	8985883a 	add	r2,r17,r6
8020abdc:	4247883a 	add	r3,r8,r9
8020abe0:	1451803a 	cmpltu	r8,r2,r17
8020abe4:	40d1883a 	add	r8,r8,r3
8020abe8:	40c0202c 	andhi	r3,r8,128
8020abec:	1023883a 	mov	r17,r2
8020abf0:	183f1a26 	beq	r3,zero,8020a85c <__reset+0xfa1ea85c>
8020abf4:	00bfe034 	movhi	r2,65408
8020abf8:	10bfffc4 	addi	r2,r2,-1
8020abfc:	2021883a 	mov	r16,r4
8020ac00:	4090703a 	and	r8,r8,r2
8020ac04:	003eb306 	br	8020a6d4 <__reset+0xfa1ea6d4>
8020ac08:	4444b03a 	or	r2,r8,r17
8020ac0c:	8000291e 	bne	r16,zero,8020acb4 <__adddf3+0x65c>
8020ac10:	10004b1e 	bne	r2,zero,8020ad40 <__adddf3+0x6e8>
8020ac14:	4990b03a 	or	r8,r9,r6
8020ac18:	40008b26 	beq	r8,zero,8020ae48 <__adddf3+0x7f0>
8020ac1c:	4811883a 	mov	r8,r9
8020ac20:	3023883a 	mov	r17,r6
8020ac24:	3825883a 	mov	r18,r7
8020ac28:	003eaa06 	br	8020a6d4 <__reset+0xfa1ea6d4>
8020ac2c:	1021883a 	mov	r16,r2
8020ac30:	0011883a 	mov	r8,zero
8020ac34:	0005883a 	mov	r2,zero
8020ac38:	003f0f06 	br	8020a878 <__reset+0xfa1ea878>
8020ac3c:	217ff804 	addi	r5,r4,-32
8020ac40:	00800804 	movi	r2,32
8020ac44:	494ad83a 	srl	r5,r9,r5
8020ac48:	20807d26 	beq	r4,r2,8020ae40 <__adddf3+0x7e8>
8020ac4c:	00801004 	movi	r2,64
8020ac50:	1109c83a 	sub	r4,r2,r4
8020ac54:	4912983a 	sll	r9,r9,r4
8020ac58:	498cb03a 	or	r6,r9,r6
8020ac5c:	300cc03a 	cmpne	r6,r6,zero
8020ac60:	298ab03a 	or	r5,r5,r6
8020ac64:	0013883a 	mov	r9,zero
8020ac68:	003f1506 	br	8020a8c0 <__reset+0xfa1ea8c0>
8020ac6c:	0101ffc4 	movi	r4,2047
8020ac70:	113f9a1e 	bne	r2,r4,8020aadc <__reset+0xfa1eaadc>
8020ac74:	4811883a 	mov	r8,r9
8020ac78:	3023883a 	mov	r17,r6
8020ac7c:	1021883a 	mov	r16,r2
8020ac80:	3825883a 	mov	r18,r7
8020ac84:	003e9306 	br	8020a6d4 <__reset+0xfa1ea6d4>
8020ac88:	8000161e 	bne	r16,zero,8020ace4 <__adddf3+0x68c>
8020ac8c:	444ab03a 	or	r5,r8,r17
8020ac90:	28005126 	beq	r5,zero,8020add8 <__adddf3+0x780>
8020ac94:	0108303a 	nor	r4,zero,r4
8020ac98:	20004d1e 	bne	r4,zero,8020add0 <__adddf3+0x778>
8020ac9c:	89a3883a 	add	r17,r17,r6
8020aca0:	4253883a 	add	r9,r8,r9
8020aca4:	898d803a 	cmpltu	r6,r17,r6
8020aca8:	3251883a 	add	r8,r6,r9
8020acac:	1021883a 	mov	r16,r2
8020acb0:	003f0806 	br	8020a8d4 <__reset+0xfa1ea8d4>
8020acb4:	1000301e 	bne	r2,zero,8020ad78 <__adddf3+0x720>
8020acb8:	4984b03a 	or	r2,r9,r6
8020acbc:	10007126 	beq	r2,zero,8020ae84 <__adddf3+0x82c>
8020acc0:	4811883a 	mov	r8,r9
8020acc4:	3023883a 	mov	r17,r6
8020acc8:	3825883a 	mov	r18,r7
8020accc:	0401ffc4 	movi	r16,2047
8020acd0:	003e8006 	br	8020a6d4 <__reset+0xfa1ea6d4>
8020acd4:	4462b03a 	or	r17,r8,r17
8020acd8:	8822c03a 	cmpne	r17,r17,zero
8020acdc:	0007883a 	mov	r3,zero
8020ace0:	003f8b06 	br	8020ab10 <__reset+0xfa1eab10>
8020ace4:	0141ffc4 	movi	r5,2047
8020ace8:	11403b26 	beq	r2,r5,8020add8 <__adddf3+0x780>
8020acec:	0109c83a 	sub	r4,zero,r4
8020acf0:	42002034 	orhi	r8,r8,128
8020acf4:	01400e04 	movi	r5,56
8020acf8:	29006716 	blt	r5,r4,8020ae98 <__adddf3+0x840>
8020acfc:	014007c4 	movi	r5,31
8020ad00:	29007016 	blt	r5,r4,8020aec4 <__adddf3+0x86c>
8020ad04:	01400804 	movi	r5,32
8020ad08:	290bc83a 	sub	r5,r5,r4
8020ad0c:	4154983a 	sll	r10,r8,r5
8020ad10:	890ed83a 	srl	r7,r17,r4
8020ad14:	894a983a 	sll	r5,r17,r5
8020ad18:	4108d83a 	srl	r4,r8,r4
8020ad1c:	51e2b03a 	or	r17,r10,r7
8020ad20:	280ac03a 	cmpne	r5,r5,zero
8020ad24:	8962b03a 	or	r17,r17,r5
8020ad28:	89a3883a 	add	r17,r17,r6
8020ad2c:	2253883a 	add	r9,r4,r9
8020ad30:	898d803a 	cmpltu	r6,r17,r6
8020ad34:	3251883a 	add	r8,r6,r9
8020ad38:	1021883a 	mov	r16,r2
8020ad3c:	003ee506 	br	8020a8d4 <__reset+0xfa1ea8d4>
8020ad40:	4984b03a 	or	r2,r9,r6
8020ad44:	103e6326 	beq	r2,zero,8020a6d4 <__reset+0xfa1ea6d4>
8020ad48:	8987c83a 	sub	r3,r17,r6
8020ad4c:	88c9803a 	cmpltu	r4,r17,r3
8020ad50:	4245c83a 	sub	r2,r8,r9
8020ad54:	1105c83a 	sub	r2,r2,r4
8020ad58:	1100202c 	andhi	r4,r2,128
8020ad5c:	203ebb26 	beq	r4,zero,8020a84c <__reset+0xfa1ea84c>
8020ad60:	3463c83a 	sub	r17,r6,r17
8020ad64:	4a07c83a 	sub	r3,r9,r8
8020ad68:	344d803a 	cmpltu	r6,r6,r17
8020ad6c:	1991c83a 	sub	r8,r3,r6
8020ad70:	3825883a 	mov	r18,r7
8020ad74:	003e5706 	br	8020a6d4 <__reset+0xfa1ea6d4>
8020ad78:	4984b03a 	or	r2,r9,r6
8020ad7c:	10002e26 	beq	r2,zero,8020ae38 <__adddf3+0x7e0>
8020ad80:	4004d0fa 	srli	r2,r8,3
8020ad84:	8822d0fa 	srli	r17,r17,3
8020ad88:	4010977a 	slli	r8,r8,29
8020ad8c:	10c0022c 	andhi	r3,r2,8
8020ad90:	4462b03a 	or	r17,r8,r17
8020ad94:	18000826 	beq	r3,zero,8020adb8 <__adddf3+0x760>
8020ad98:	4808d0fa 	srli	r4,r9,3
8020ad9c:	20c0022c 	andhi	r3,r4,8
8020ada0:	1800051e 	bne	r3,zero,8020adb8 <__adddf3+0x760>
8020ada4:	300cd0fa 	srli	r6,r6,3
8020ada8:	4806977a 	slli	r3,r9,29
8020adac:	2005883a 	mov	r2,r4
8020adb0:	3825883a 	mov	r18,r7
8020adb4:	19a2b03a 	or	r17,r3,r6
8020adb8:	8810d77a 	srli	r8,r17,29
8020adbc:	100490fa 	slli	r2,r2,3
8020adc0:	882290fa 	slli	r17,r17,3
8020adc4:	0401ffc4 	movi	r16,2047
8020adc8:	4090b03a 	or	r8,r8,r2
8020adcc:	003e4106 	br	8020a6d4 <__reset+0xfa1ea6d4>
8020add0:	0141ffc4 	movi	r5,2047
8020add4:	117fc71e 	bne	r2,r5,8020acf4 <__reset+0xfa1eacf4>
8020add8:	4811883a 	mov	r8,r9
8020addc:	3023883a 	mov	r17,r6
8020ade0:	1021883a 	mov	r16,r2
8020ade4:	003e3b06 	br	8020a6d4 <__reset+0xfa1ea6d4>
8020ade8:	10002f26 	beq	r2,zero,8020aea8 <__adddf3+0x850>
8020adec:	4984b03a 	or	r2,r9,r6
8020adf0:	10001126 	beq	r2,zero,8020ae38 <__adddf3+0x7e0>
8020adf4:	4004d0fa 	srli	r2,r8,3
8020adf8:	8822d0fa 	srli	r17,r17,3
8020adfc:	4010977a 	slli	r8,r8,29
8020ae00:	10c0022c 	andhi	r3,r2,8
8020ae04:	4462b03a 	or	r17,r8,r17
8020ae08:	183feb26 	beq	r3,zero,8020adb8 <__reset+0xfa1eadb8>
8020ae0c:	4808d0fa 	srli	r4,r9,3
8020ae10:	20c0022c 	andhi	r3,r4,8
8020ae14:	183fe81e 	bne	r3,zero,8020adb8 <__reset+0xfa1eadb8>
8020ae18:	300cd0fa 	srli	r6,r6,3
8020ae1c:	4806977a 	slli	r3,r9,29
8020ae20:	2005883a 	mov	r2,r4
8020ae24:	19a2b03a 	or	r17,r3,r6
8020ae28:	003fe306 	br	8020adb8 <__reset+0xfa1eadb8>
8020ae2c:	0011883a 	mov	r8,zero
8020ae30:	0005883a 	mov	r2,zero
8020ae34:	003e3f06 	br	8020a734 <__reset+0xfa1ea734>
8020ae38:	0401ffc4 	movi	r16,2047
8020ae3c:	003e2506 	br	8020a6d4 <__reset+0xfa1ea6d4>
8020ae40:	0013883a 	mov	r9,zero
8020ae44:	003f8406 	br	8020ac58 <__reset+0xfa1eac58>
8020ae48:	0005883a 	mov	r2,zero
8020ae4c:	0007883a 	mov	r3,zero
8020ae50:	003e8906 	br	8020a878 <__reset+0xfa1ea878>
8020ae54:	197ff804 	addi	r5,r3,-32
8020ae58:	01000804 	movi	r4,32
8020ae5c:	414ad83a 	srl	r5,r8,r5
8020ae60:	19002426 	beq	r3,r4,8020aef4 <__adddf3+0x89c>
8020ae64:	01001004 	movi	r4,64
8020ae68:	20c7c83a 	sub	r3,r4,r3
8020ae6c:	40c6983a 	sll	r3,r8,r3
8020ae70:	1c46b03a 	or	r3,r3,r17
8020ae74:	1806c03a 	cmpne	r3,r3,zero
8020ae78:	28e2b03a 	or	r17,r5,r3
8020ae7c:	0007883a 	mov	r3,zero
8020ae80:	003f2306 	br	8020ab10 <__reset+0xfa1eab10>
8020ae84:	0007883a 	mov	r3,zero
8020ae88:	5811883a 	mov	r8,r11
8020ae8c:	00bfffc4 	movi	r2,-1
8020ae90:	0401ffc4 	movi	r16,2047
8020ae94:	003e7806 	br	8020a878 <__reset+0xfa1ea878>
8020ae98:	4462b03a 	or	r17,r8,r17
8020ae9c:	8822c03a 	cmpne	r17,r17,zero
8020aea0:	0009883a 	mov	r4,zero
8020aea4:	003fa006 	br	8020ad28 <__reset+0xfa1ead28>
8020aea8:	4811883a 	mov	r8,r9
8020aeac:	3023883a 	mov	r17,r6
8020aeb0:	0401ffc4 	movi	r16,2047
8020aeb4:	003e0706 	br	8020a6d4 <__reset+0xfa1ea6d4>
8020aeb8:	4811883a 	mov	r8,r9
8020aebc:	3023883a 	mov	r17,r6
8020aec0:	003e0406 	br	8020a6d4 <__reset+0xfa1ea6d4>
8020aec4:	21fff804 	addi	r7,r4,-32
8020aec8:	01400804 	movi	r5,32
8020aecc:	41ced83a 	srl	r7,r8,r7
8020aed0:	21400a26 	beq	r4,r5,8020aefc <__adddf3+0x8a4>
8020aed4:	01401004 	movi	r5,64
8020aed8:	2909c83a 	sub	r4,r5,r4
8020aedc:	4108983a 	sll	r4,r8,r4
8020aee0:	2448b03a 	or	r4,r4,r17
8020aee4:	2008c03a 	cmpne	r4,r4,zero
8020aee8:	3922b03a 	or	r17,r7,r4
8020aeec:	0009883a 	mov	r4,zero
8020aef0:	003f8d06 	br	8020ad28 <__reset+0xfa1ead28>
8020aef4:	0007883a 	mov	r3,zero
8020aef8:	003fdd06 	br	8020ae70 <__reset+0xfa1eae70>
8020aefc:	0009883a 	mov	r4,zero
8020af00:	003ff706 	br	8020aee0 <__reset+0xfa1eaee0>

8020af04 <__divdf3>:
8020af04:	defff204 	addi	sp,sp,-56
8020af08:	dd400915 	stw	r21,36(sp)
8020af0c:	282ad53a 	srli	r21,r5,20
8020af10:	dd000815 	stw	r20,32(sp)
8020af14:	2828d7fa 	srli	r20,r5,31
8020af18:	dc000415 	stw	r16,16(sp)
8020af1c:	04000434 	movhi	r16,16
8020af20:	df000c15 	stw	fp,48(sp)
8020af24:	843fffc4 	addi	r16,r16,-1
8020af28:	dfc00d15 	stw	ra,52(sp)
8020af2c:	ddc00b15 	stw	r23,44(sp)
8020af30:	dd800a15 	stw	r22,40(sp)
8020af34:	dcc00715 	stw	r19,28(sp)
8020af38:	dc800615 	stw	r18,24(sp)
8020af3c:	dc400515 	stw	r17,20(sp)
8020af40:	ad41ffcc 	andi	r21,r21,2047
8020af44:	2c20703a 	and	r16,r5,r16
8020af48:	a7003fcc 	andi	fp,r20,255
8020af4c:	a8006126 	beq	r21,zero,8020b0d4 <__divdf3+0x1d0>
8020af50:	0081ffc4 	movi	r2,2047
8020af54:	2025883a 	mov	r18,r4
8020af58:	a8803726 	beq	r21,r2,8020b038 <__divdf3+0x134>
8020af5c:	80800434 	orhi	r2,r16,16
8020af60:	100490fa 	slli	r2,r2,3
8020af64:	2020d77a 	srli	r16,r4,29
8020af68:	202490fa 	slli	r18,r4,3
8020af6c:	ad7f0044 	addi	r21,r21,-1023
8020af70:	80a0b03a 	or	r16,r16,r2
8020af74:	0027883a 	mov	r19,zero
8020af78:	0013883a 	mov	r9,zero
8020af7c:	3804d53a 	srli	r2,r7,20
8020af80:	382cd7fa 	srli	r22,r7,31
8020af84:	04400434 	movhi	r17,16
8020af88:	8c7fffc4 	addi	r17,r17,-1
8020af8c:	1081ffcc 	andi	r2,r2,2047
8020af90:	3011883a 	mov	r8,r6
8020af94:	3c62703a 	and	r17,r7,r17
8020af98:	b5c03fcc 	andi	r23,r22,255
8020af9c:	10006c26 	beq	r2,zero,8020b150 <__divdf3+0x24c>
8020afa0:	00c1ffc4 	movi	r3,2047
8020afa4:	10c06426 	beq	r2,r3,8020b138 <__divdf3+0x234>
8020afa8:	88c00434 	orhi	r3,r17,16
8020afac:	180690fa 	slli	r3,r3,3
8020afb0:	3022d77a 	srli	r17,r6,29
8020afb4:	301090fa 	slli	r8,r6,3
8020afb8:	10bf0044 	addi	r2,r2,-1023
8020afbc:	88e2b03a 	or	r17,r17,r3
8020afc0:	000f883a 	mov	r7,zero
8020afc4:	a58cf03a 	xor	r6,r20,r22
8020afc8:	3cc8b03a 	or	r4,r7,r19
8020afcc:	a8abc83a 	sub	r21,r21,r2
8020afd0:	008003c4 	movi	r2,15
8020afd4:	3007883a 	mov	r3,r6
8020afd8:	34c03fcc 	andi	r19,r6,255
8020afdc:	11009036 	bltu	r2,r4,8020b220 <__divdf3+0x31c>
8020afe0:	200890ba 	slli	r4,r4,2
8020afe4:	00a00874 	movhi	r2,32801
8020afe8:	10abfe04 	addi	r2,r2,-20488
8020afec:	2089883a 	add	r4,r4,r2
8020aff0:	20800017 	ldw	r2,0(r4)
8020aff4:	1000683a 	jmp	r2
8020aff8:	8020b220 	cmpeqi	zero,r16,-32056
8020affc:	8020b070 	cmpltui	zero,r16,33473
8020b000:	8020b210 	cmplti	zero,r16,-32056
8020b004:	8020b064 	muli	zero,r16,-32063
8020b008:	8020b210 	cmplti	zero,r16,-32056
8020b00c:	8020b1e4 	muli	zero,r16,-32057
8020b010:	8020b210 	cmplti	zero,r16,-32056
8020b014:	8020b064 	muli	zero,r16,-32063
8020b018:	8020b070 	cmpltui	zero,r16,33473
8020b01c:	8020b070 	cmpltui	zero,r16,33473
8020b020:	8020b1e4 	muli	zero,r16,-32057
8020b024:	8020b064 	muli	zero,r16,-32063
8020b028:	8020b054 	ori	zero,r16,33473
8020b02c:	8020b054 	ori	zero,r16,33473
8020b030:	8020b054 	ori	zero,r16,33473
8020b034:	8020b504 	addi	zero,r16,-32044
8020b038:	2404b03a 	or	r2,r4,r16
8020b03c:	1000661e 	bne	r2,zero,8020b1d8 <__divdf3+0x2d4>
8020b040:	04c00204 	movi	r19,8
8020b044:	0021883a 	mov	r16,zero
8020b048:	0025883a 	mov	r18,zero
8020b04c:	02400084 	movi	r9,2
8020b050:	003fca06 	br	8020af7c <__reset+0xfa1eaf7c>
8020b054:	8023883a 	mov	r17,r16
8020b058:	9011883a 	mov	r8,r18
8020b05c:	e02f883a 	mov	r23,fp
8020b060:	480f883a 	mov	r7,r9
8020b064:	00800084 	movi	r2,2
8020b068:	3881311e 	bne	r7,r2,8020b530 <__divdf3+0x62c>
8020b06c:	b827883a 	mov	r19,r23
8020b070:	98c0004c 	andi	r3,r19,1
8020b074:	0081ffc4 	movi	r2,2047
8020b078:	000b883a 	mov	r5,zero
8020b07c:	0025883a 	mov	r18,zero
8020b080:	1004953a 	slli	r2,r2,20
8020b084:	18c03fcc 	andi	r3,r3,255
8020b088:	04400434 	movhi	r17,16
8020b08c:	8c7fffc4 	addi	r17,r17,-1
8020b090:	180697fa 	slli	r3,r3,31
8020b094:	2c4a703a 	and	r5,r5,r17
8020b098:	288ab03a 	or	r5,r5,r2
8020b09c:	28c6b03a 	or	r3,r5,r3
8020b0a0:	9005883a 	mov	r2,r18
8020b0a4:	dfc00d17 	ldw	ra,52(sp)
8020b0a8:	df000c17 	ldw	fp,48(sp)
8020b0ac:	ddc00b17 	ldw	r23,44(sp)
8020b0b0:	dd800a17 	ldw	r22,40(sp)
8020b0b4:	dd400917 	ldw	r21,36(sp)
8020b0b8:	dd000817 	ldw	r20,32(sp)
8020b0bc:	dcc00717 	ldw	r19,28(sp)
8020b0c0:	dc800617 	ldw	r18,24(sp)
8020b0c4:	dc400517 	ldw	r17,20(sp)
8020b0c8:	dc000417 	ldw	r16,16(sp)
8020b0cc:	dec00e04 	addi	sp,sp,56
8020b0d0:	f800283a 	ret
8020b0d4:	2404b03a 	or	r2,r4,r16
8020b0d8:	2027883a 	mov	r19,r4
8020b0dc:	10003926 	beq	r2,zero,8020b1c4 <__divdf3+0x2c0>
8020b0e0:	80012e26 	beq	r16,zero,8020b59c <__divdf3+0x698>
8020b0e4:	8009883a 	mov	r4,r16
8020b0e8:	d9800315 	stw	r6,12(sp)
8020b0ec:	d9c00215 	stw	r7,8(sp)
8020b0f0:	020cc5c0 	call	8020cc5c <__clzsi2>
8020b0f4:	d9800317 	ldw	r6,12(sp)
8020b0f8:	d9c00217 	ldw	r7,8(sp)
8020b0fc:	113ffd44 	addi	r4,r2,-11
8020b100:	00c00704 	movi	r3,28
8020b104:	19012116 	blt	r3,r4,8020b58c <__divdf3+0x688>
8020b108:	00c00744 	movi	r3,29
8020b10c:	147ffe04 	addi	r17,r2,-8
8020b110:	1907c83a 	sub	r3,r3,r4
8020b114:	8460983a 	sll	r16,r16,r17
8020b118:	98c6d83a 	srl	r3,r19,r3
8020b11c:	9c64983a 	sll	r18,r19,r17
8020b120:	1c20b03a 	or	r16,r3,r16
8020b124:	1080fcc4 	addi	r2,r2,1011
8020b128:	00abc83a 	sub	r21,zero,r2
8020b12c:	0027883a 	mov	r19,zero
8020b130:	0013883a 	mov	r9,zero
8020b134:	003f9106 	br	8020af7c <__reset+0xfa1eaf7c>
8020b138:	3446b03a 	or	r3,r6,r17
8020b13c:	18001f1e 	bne	r3,zero,8020b1bc <__divdf3+0x2b8>
8020b140:	0023883a 	mov	r17,zero
8020b144:	0011883a 	mov	r8,zero
8020b148:	01c00084 	movi	r7,2
8020b14c:	003f9d06 	br	8020afc4 <__reset+0xfa1eafc4>
8020b150:	3446b03a 	or	r3,r6,r17
8020b154:	18001526 	beq	r3,zero,8020b1ac <__divdf3+0x2a8>
8020b158:	88011b26 	beq	r17,zero,8020b5c8 <__divdf3+0x6c4>
8020b15c:	8809883a 	mov	r4,r17
8020b160:	d9800315 	stw	r6,12(sp)
8020b164:	da400115 	stw	r9,4(sp)
8020b168:	020cc5c0 	call	8020cc5c <__clzsi2>
8020b16c:	d9800317 	ldw	r6,12(sp)
8020b170:	da400117 	ldw	r9,4(sp)
8020b174:	113ffd44 	addi	r4,r2,-11
8020b178:	00c00704 	movi	r3,28
8020b17c:	19010e16 	blt	r3,r4,8020b5b8 <__divdf3+0x6b4>
8020b180:	00c00744 	movi	r3,29
8020b184:	123ffe04 	addi	r8,r2,-8
8020b188:	1907c83a 	sub	r3,r3,r4
8020b18c:	8a22983a 	sll	r17,r17,r8
8020b190:	30c6d83a 	srl	r3,r6,r3
8020b194:	3210983a 	sll	r8,r6,r8
8020b198:	1c62b03a 	or	r17,r3,r17
8020b19c:	1080fcc4 	addi	r2,r2,1011
8020b1a0:	0085c83a 	sub	r2,zero,r2
8020b1a4:	000f883a 	mov	r7,zero
8020b1a8:	003f8606 	br	8020afc4 <__reset+0xfa1eafc4>
8020b1ac:	0023883a 	mov	r17,zero
8020b1b0:	0011883a 	mov	r8,zero
8020b1b4:	01c00044 	movi	r7,1
8020b1b8:	003f8206 	br	8020afc4 <__reset+0xfa1eafc4>
8020b1bc:	01c000c4 	movi	r7,3
8020b1c0:	003f8006 	br	8020afc4 <__reset+0xfa1eafc4>
8020b1c4:	04c00104 	movi	r19,4
8020b1c8:	0021883a 	mov	r16,zero
8020b1cc:	0025883a 	mov	r18,zero
8020b1d0:	02400044 	movi	r9,1
8020b1d4:	003f6906 	br	8020af7c <__reset+0xfa1eaf7c>
8020b1d8:	04c00304 	movi	r19,12
8020b1dc:	024000c4 	movi	r9,3
8020b1e0:	003f6606 	br	8020af7c <__reset+0xfa1eaf7c>
8020b1e4:	01400434 	movhi	r5,16
8020b1e8:	0007883a 	mov	r3,zero
8020b1ec:	297fffc4 	addi	r5,r5,-1
8020b1f0:	04bfffc4 	movi	r18,-1
8020b1f4:	0081ffc4 	movi	r2,2047
8020b1f8:	003fa106 	br	8020b080 <__reset+0xfa1eb080>
8020b1fc:	00c00044 	movi	r3,1
8020b200:	1887c83a 	sub	r3,r3,r2
8020b204:	01000e04 	movi	r4,56
8020b208:	20c1210e 	bge	r4,r3,8020b690 <__divdf3+0x78c>
8020b20c:	98c0004c 	andi	r3,r19,1
8020b210:	0005883a 	mov	r2,zero
8020b214:	000b883a 	mov	r5,zero
8020b218:	0025883a 	mov	r18,zero
8020b21c:	003f9806 	br	8020b080 <__reset+0xfa1eb080>
8020b220:	8c00fd36 	bltu	r17,r16,8020b618 <__divdf3+0x714>
8020b224:	8440fb26 	beq	r16,r17,8020b614 <__divdf3+0x710>
8020b228:	8007883a 	mov	r3,r16
8020b22c:	ad7fffc4 	addi	r21,r21,-1
8020b230:	0021883a 	mov	r16,zero
8020b234:	4004d63a 	srli	r2,r8,24
8020b238:	8822923a 	slli	r17,r17,8
8020b23c:	1809883a 	mov	r4,r3
8020b240:	402c923a 	slli	r22,r8,8
8020b244:	88b8b03a 	or	fp,r17,r2
8020b248:	e028d43a 	srli	r20,fp,16
8020b24c:	d8c00015 	stw	r3,0(sp)
8020b250:	e5ffffcc 	andi	r23,fp,65535
8020b254:	a00b883a 	mov	r5,r20
8020b258:	020a59c0 	call	8020a59c <__udivsi3>
8020b25c:	d8c00017 	ldw	r3,0(sp)
8020b260:	a00b883a 	mov	r5,r20
8020b264:	d8800315 	stw	r2,12(sp)
8020b268:	1809883a 	mov	r4,r3
8020b26c:	020a6000 	call	8020a600 <__umodsi3>
8020b270:	d9800317 	ldw	r6,12(sp)
8020b274:	1006943a 	slli	r3,r2,16
8020b278:	9004d43a 	srli	r2,r18,16
8020b27c:	b9a3383a 	mul	r17,r23,r6
8020b280:	10c4b03a 	or	r2,r2,r3
8020b284:	1440062e 	bgeu	r2,r17,8020b2a0 <__divdf3+0x39c>
8020b288:	1705883a 	add	r2,r2,fp
8020b28c:	30ffffc4 	addi	r3,r6,-1
8020b290:	1700ee36 	bltu	r2,fp,8020b64c <__divdf3+0x748>
8020b294:	1440ed2e 	bgeu	r2,r17,8020b64c <__divdf3+0x748>
8020b298:	31bfff84 	addi	r6,r6,-2
8020b29c:	1705883a 	add	r2,r2,fp
8020b2a0:	1463c83a 	sub	r17,r2,r17
8020b2a4:	a00b883a 	mov	r5,r20
8020b2a8:	8809883a 	mov	r4,r17
8020b2ac:	d9800315 	stw	r6,12(sp)
8020b2b0:	020a59c0 	call	8020a59c <__udivsi3>
8020b2b4:	a00b883a 	mov	r5,r20
8020b2b8:	8809883a 	mov	r4,r17
8020b2bc:	d8800215 	stw	r2,8(sp)
8020b2c0:	020a6000 	call	8020a600 <__umodsi3>
8020b2c4:	d9c00217 	ldw	r7,8(sp)
8020b2c8:	1004943a 	slli	r2,r2,16
8020b2cc:	94bfffcc 	andi	r18,r18,65535
8020b2d0:	b9d1383a 	mul	r8,r23,r7
8020b2d4:	90a4b03a 	or	r18,r18,r2
8020b2d8:	d9800317 	ldw	r6,12(sp)
8020b2dc:	9200062e 	bgeu	r18,r8,8020b2f8 <__divdf3+0x3f4>
8020b2e0:	9725883a 	add	r18,r18,fp
8020b2e4:	38bfffc4 	addi	r2,r7,-1
8020b2e8:	9700d636 	bltu	r18,fp,8020b644 <__divdf3+0x740>
8020b2ec:	9200d52e 	bgeu	r18,r8,8020b644 <__divdf3+0x740>
8020b2f0:	39ffff84 	addi	r7,r7,-2
8020b2f4:	9725883a 	add	r18,r18,fp
8020b2f8:	3004943a 	slli	r2,r6,16
8020b2fc:	b012d43a 	srli	r9,r22,16
8020b300:	b1bfffcc 	andi	r6,r22,65535
8020b304:	11e2b03a 	or	r17,r2,r7
8020b308:	8806d43a 	srli	r3,r17,16
8020b30c:	893fffcc 	andi	r4,r17,65535
8020b310:	218b383a 	mul	r5,r4,r6
8020b314:	30c5383a 	mul	r2,r6,r3
8020b318:	2249383a 	mul	r4,r4,r9
8020b31c:	280ed43a 	srli	r7,r5,16
8020b320:	9225c83a 	sub	r18,r18,r8
8020b324:	2089883a 	add	r4,r4,r2
8020b328:	3909883a 	add	r4,r7,r4
8020b32c:	1a47383a 	mul	r3,r3,r9
8020b330:	2080022e 	bgeu	r4,r2,8020b33c <__divdf3+0x438>
8020b334:	00800074 	movhi	r2,1
8020b338:	1887883a 	add	r3,r3,r2
8020b33c:	2004d43a 	srli	r2,r4,16
8020b340:	2008943a 	slli	r4,r4,16
8020b344:	297fffcc 	andi	r5,r5,65535
8020b348:	10c7883a 	add	r3,r2,r3
8020b34c:	2149883a 	add	r4,r4,r5
8020b350:	90c0a536 	bltu	r18,r3,8020b5e8 <__divdf3+0x6e4>
8020b354:	90c0bf26 	beq	r18,r3,8020b654 <__divdf3+0x750>
8020b358:	90c7c83a 	sub	r3,r18,r3
8020b35c:	810fc83a 	sub	r7,r16,r4
8020b360:	81e5803a 	cmpltu	r18,r16,r7
8020b364:	1ca5c83a 	sub	r18,r3,r18
8020b368:	e480c126 	beq	fp,r18,8020b670 <__divdf3+0x76c>
8020b36c:	a00b883a 	mov	r5,r20
8020b370:	9009883a 	mov	r4,r18
8020b374:	d9800315 	stw	r6,12(sp)
8020b378:	d9c00215 	stw	r7,8(sp)
8020b37c:	da400115 	stw	r9,4(sp)
8020b380:	020a59c0 	call	8020a59c <__udivsi3>
8020b384:	a00b883a 	mov	r5,r20
8020b388:	9009883a 	mov	r4,r18
8020b38c:	d8800015 	stw	r2,0(sp)
8020b390:	020a6000 	call	8020a600 <__umodsi3>
8020b394:	d9c00217 	ldw	r7,8(sp)
8020b398:	da000017 	ldw	r8,0(sp)
8020b39c:	1006943a 	slli	r3,r2,16
8020b3a0:	3804d43a 	srli	r2,r7,16
8020b3a4:	ba21383a 	mul	r16,r23,r8
8020b3a8:	d9800317 	ldw	r6,12(sp)
8020b3ac:	10c4b03a 	or	r2,r2,r3
8020b3b0:	da400117 	ldw	r9,4(sp)
8020b3b4:	1400062e 	bgeu	r2,r16,8020b3d0 <__divdf3+0x4cc>
8020b3b8:	1705883a 	add	r2,r2,fp
8020b3bc:	40ffffc4 	addi	r3,r8,-1
8020b3c0:	1700ad36 	bltu	r2,fp,8020b678 <__divdf3+0x774>
8020b3c4:	1400ac2e 	bgeu	r2,r16,8020b678 <__divdf3+0x774>
8020b3c8:	423fff84 	addi	r8,r8,-2
8020b3cc:	1705883a 	add	r2,r2,fp
8020b3d0:	1421c83a 	sub	r16,r2,r16
8020b3d4:	a00b883a 	mov	r5,r20
8020b3d8:	8009883a 	mov	r4,r16
8020b3dc:	d9800315 	stw	r6,12(sp)
8020b3e0:	d9c00215 	stw	r7,8(sp)
8020b3e4:	da000015 	stw	r8,0(sp)
8020b3e8:	da400115 	stw	r9,4(sp)
8020b3ec:	020a59c0 	call	8020a59c <__udivsi3>
8020b3f0:	8009883a 	mov	r4,r16
8020b3f4:	a00b883a 	mov	r5,r20
8020b3f8:	1025883a 	mov	r18,r2
8020b3fc:	020a6000 	call	8020a600 <__umodsi3>
8020b400:	d9c00217 	ldw	r7,8(sp)
8020b404:	1004943a 	slli	r2,r2,16
8020b408:	bcaf383a 	mul	r23,r23,r18
8020b40c:	393fffcc 	andi	r4,r7,65535
8020b410:	2088b03a 	or	r4,r4,r2
8020b414:	d9800317 	ldw	r6,12(sp)
8020b418:	da000017 	ldw	r8,0(sp)
8020b41c:	da400117 	ldw	r9,4(sp)
8020b420:	25c0062e 	bgeu	r4,r23,8020b43c <__divdf3+0x538>
8020b424:	2709883a 	add	r4,r4,fp
8020b428:	90bfffc4 	addi	r2,r18,-1
8020b42c:	27009436 	bltu	r4,fp,8020b680 <__divdf3+0x77c>
8020b430:	25c0932e 	bgeu	r4,r23,8020b680 <__divdf3+0x77c>
8020b434:	94bfff84 	addi	r18,r18,-2
8020b438:	2709883a 	add	r4,r4,fp
8020b43c:	4004943a 	slli	r2,r8,16
8020b440:	25efc83a 	sub	r23,r4,r23
8020b444:	1490b03a 	or	r8,r2,r18
8020b448:	4008d43a 	srli	r4,r8,16
8020b44c:	40ffffcc 	andi	r3,r8,65535
8020b450:	30c5383a 	mul	r2,r6,r3
8020b454:	1a47383a 	mul	r3,r3,r9
8020b458:	310d383a 	mul	r6,r6,r4
8020b45c:	100ad43a 	srli	r5,r2,16
8020b460:	4913383a 	mul	r9,r9,r4
8020b464:	1987883a 	add	r3,r3,r6
8020b468:	28c7883a 	add	r3,r5,r3
8020b46c:	1980022e 	bgeu	r3,r6,8020b478 <__divdf3+0x574>
8020b470:	01000074 	movhi	r4,1
8020b474:	4913883a 	add	r9,r9,r4
8020b478:	1808d43a 	srli	r4,r3,16
8020b47c:	1806943a 	slli	r3,r3,16
8020b480:	10bfffcc 	andi	r2,r2,65535
8020b484:	2253883a 	add	r9,r4,r9
8020b488:	1887883a 	add	r3,r3,r2
8020b48c:	ba403836 	bltu	r23,r9,8020b570 <__divdf3+0x66c>
8020b490:	ba403626 	beq	r23,r9,8020b56c <__divdf3+0x668>
8020b494:	42000054 	ori	r8,r8,1
8020b498:	a880ffc4 	addi	r2,r21,1023
8020b49c:	00bf570e 	bge	zero,r2,8020b1fc <__reset+0xfa1eb1fc>
8020b4a0:	40c001cc 	andi	r3,r8,7
8020b4a4:	18000726 	beq	r3,zero,8020b4c4 <__divdf3+0x5c0>
8020b4a8:	40c003cc 	andi	r3,r8,15
8020b4ac:	01000104 	movi	r4,4
8020b4b0:	19000426 	beq	r3,r4,8020b4c4 <__divdf3+0x5c0>
8020b4b4:	4107883a 	add	r3,r8,r4
8020b4b8:	1a11803a 	cmpltu	r8,r3,r8
8020b4bc:	8a23883a 	add	r17,r17,r8
8020b4c0:	1811883a 	mov	r8,r3
8020b4c4:	88c0402c 	andhi	r3,r17,256
8020b4c8:	18000426 	beq	r3,zero,8020b4dc <__divdf3+0x5d8>
8020b4cc:	00ffc034 	movhi	r3,65280
8020b4d0:	18ffffc4 	addi	r3,r3,-1
8020b4d4:	a8810004 	addi	r2,r21,1024
8020b4d8:	88e2703a 	and	r17,r17,r3
8020b4dc:	00c1ff84 	movi	r3,2046
8020b4e0:	18bee316 	blt	r3,r2,8020b070 <__reset+0xfa1eb070>
8020b4e4:	8824977a 	slli	r18,r17,29
8020b4e8:	4010d0fa 	srli	r8,r8,3
8020b4ec:	8822927a 	slli	r17,r17,9
8020b4f0:	1081ffcc 	andi	r2,r2,2047
8020b4f4:	9224b03a 	or	r18,r18,r8
8020b4f8:	880ad33a 	srli	r5,r17,12
8020b4fc:	98c0004c 	andi	r3,r19,1
8020b500:	003edf06 	br	8020b080 <__reset+0xfa1eb080>
8020b504:	8080022c 	andhi	r2,r16,8
8020b508:	10001226 	beq	r2,zero,8020b554 <__divdf3+0x650>
8020b50c:	8880022c 	andhi	r2,r17,8
8020b510:	1000101e 	bne	r2,zero,8020b554 <__divdf3+0x650>
8020b514:	00800434 	movhi	r2,16
8020b518:	89400234 	orhi	r5,r17,8
8020b51c:	10bfffc4 	addi	r2,r2,-1
8020b520:	b007883a 	mov	r3,r22
8020b524:	288a703a 	and	r5,r5,r2
8020b528:	4025883a 	mov	r18,r8
8020b52c:	003f3106 	br	8020b1f4 <__reset+0xfa1eb1f4>
8020b530:	008000c4 	movi	r2,3
8020b534:	3880a626 	beq	r7,r2,8020b7d0 <__divdf3+0x8cc>
8020b538:	00800044 	movi	r2,1
8020b53c:	3880521e 	bne	r7,r2,8020b688 <__divdf3+0x784>
8020b540:	b807883a 	mov	r3,r23
8020b544:	0005883a 	mov	r2,zero
8020b548:	000b883a 	mov	r5,zero
8020b54c:	0025883a 	mov	r18,zero
8020b550:	003ecb06 	br	8020b080 <__reset+0xfa1eb080>
8020b554:	00800434 	movhi	r2,16
8020b558:	81400234 	orhi	r5,r16,8
8020b55c:	10bfffc4 	addi	r2,r2,-1
8020b560:	a007883a 	mov	r3,r20
8020b564:	288a703a 	and	r5,r5,r2
8020b568:	003f2206 	br	8020b1f4 <__reset+0xfa1eb1f4>
8020b56c:	183fca26 	beq	r3,zero,8020b498 <__reset+0xfa1eb498>
8020b570:	e5ef883a 	add	r23,fp,r23
8020b574:	40bfffc4 	addi	r2,r8,-1
8020b578:	bf00392e 	bgeu	r23,fp,8020b660 <__divdf3+0x75c>
8020b57c:	1011883a 	mov	r8,r2
8020b580:	ba7fc41e 	bne	r23,r9,8020b494 <__reset+0xfa1eb494>
8020b584:	b0ffc31e 	bne	r22,r3,8020b494 <__reset+0xfa1eb494>
8020b588:	003fc306 	br	8020b498 <__reset+0xfa1eb498>
8020b58c:	143ff604 	addi	r16,r2,-40
8020b590:	9c20983a 	sll	r16,r19,r16
8020b594:	0025883a 	mov	r18,zero
8020b598:	003ee206 	br	8020b124 <__reset+0xfa1eb124>
8020b59c:	d9800315 	stw	r6,12(sp)
8020b5a0:	d9c00215 	stw	r7,8(sp)
8020b5a4:	020cc5c0 	call	8020cc5c <__clzsi2>
8020b5a8:	10800804 	addi	r2,r2,32
8020b5ac:	d9c00217 	ldw	r7,8(sp)
8020b5b0:	d9800317 	ldw	r6,12(sp)
8020b5b4:	003ed106 	br	8020b0fc <__reset+0xfa1eb0fc>
8020b5b8:	147ff604 	addi	r17,r2,-40
8020b5bc:	3462983a 	sll	r17,r6,r17
8020b5c0:	0011883a 	mov	r8,zero
8020b5c4:	003ef506 	br	8020b19c <__reset+0xfa1eb19c>
8020b5c8:	3009883a 	mov	r4,r6
8020b5cc:	d9800315 	stw	r6,12(sp)
8020b5d0:	da400115 	stw	r9,4(sp)
8020b5d4:	020cc5c0 	call	8020cc5c <__clzsi2>
8020b5d8:	10800804 	addi	r2,r2,32
8020b5dc:	da400117 	ldw	r9,4(sp)
8020b5e0:	d9800317 	ldw	r6,12(sp)
8020b5e4:	003ee306 	br	8020b174 <__reset+0xfa1eb174>
8020b5e8:	85a1883a 	add	r16,r16,r22
8020b5ec:	8585803a 	cmpltu	r2,r16,r22
8020b5f0:	1705883a 	add	r2,r2,fp
8020b5f4:	14a5883a 	add	r18,r2,r18
8020b5f8:	88bfffc4 	addi	r2,r17,-1
8020b5fc:	e4800c2e 	bgeu	fp,r18,8020b630 <__divdf3+0x72c>
8020b600:	90c03e36 	bltu	r18,r3,8020b6fc <__divdf3+0x7f8>
8020b604:	1c806926 	beq	r3,r18,8020b7ac <__divdf3+0x8a8>
8020b608:	90c7c83a 	sub	r3,r18,r3
8020b60c:	1023883a 	mov	r17,r2
8020b610:	003f5206 	br	8020b35c <__reset+0xfa1eb35c>
8020b614:	923f0436 	bltu	r18,r8,8020b228 <__reset+0xfa1eb228>
8020b618:	800897fa 	slli	r4,r16,31
8020b61c:	9004d07a 	srli	r2,r18,1
8020b620:	8006d07a 	srli	r3,r16,1
8020b624:	902097fa 	slli	r16,r18,31
8020b628:	20a4b03a 	or	r18,r4,r2
8020b62c:	003f0106 	br	8020b234 <__reset+0xfa1eb234>
8020b630:	e4bff51e 	bne	fp,r18,8020b608 <__reset+0xfa1eb608>
8020b634:	85bff22e 	bgeu	r16,r22,8020b600 <__reset+0xfa1eb600>
8020b638:	e0c7c83a 	sub	r3,fp,r3
8020b63c:	1023883a 	mov	r17,r2
8020b640:	003f4606 	br	8020b35c <__reset+0xfa1eb35c>
8020b644:	100f883a 	mov	r7,r2
8020b648:	003f2b06 	br	8020b2f8 <__reset+0xfa1eb2f8>
8020b64c:	180d883a 	mov	r6,r3
8020b650:	003f1306 	br	8020b2a0 <__reset+0xfa1eb2a0>
8020b654:	813fe436 	bltu	r16,r4,8020b5e8 <__reset+0xfa1eb5e8>
8020b658:	0007883a 	mov	r3,zero
8020b65c:	003f3f06 	br	8020b35c <__reset+0xfa1eb35c>
8020b660:	ba402c36 	bltu	r23,r9,8020b714 <__divdf3+0x810>
8020b664:	4dc05426 	beq	r9,r23,8020b7b8 <__divdf3+0x8b4>
8020b668:	1011883a 	mov	r8,r2
8020b66c:	003f8906 	br	8020b494 <__reset+0xfa1eb494>
8020b670:	023fffc4 	movi	r8,-1
8020b674:	003f8806 	br	8020b498 <__reset+0xfa1eb498>
8020b678:	1811883a 	mov	r8,r3
8020b67c:	003f5406 	br	8020b3d0 <__reset+0xfa1eb3d0>
8020b680:	1025883a 	mov	r18,r2
8020b684:	003f6d06 	br	8020b43c <__reset+0xfa1eb43c>
8020b688:	b827883a 	mov	r19,r23
8020b68c:	003f8206 	br	8020b498 <__reset+0xfa1eb498>
8020b690:	010007c4 	movi	r4,31
8020b694:	20c02616 	blt	r4,r3,8020b730 <__divdf3+0x82c>
8020b698:	00800804 	movi	r2,32
8020b69c:	10c5c83a 	sub	r2,r2,r3
8020b6a0:	888a983a 	sll	r5,r17,r2
8020b6a4:	40c8d83a 	srl	r4,r8,r3
8020b6a8:	4084983a 	sll	r2,r8,r2
8020b6ac:	88e2d83a 	srl	r17,r17,r3
8020b6b0:	2906b03a 	or	r3,r5,r4
8020b6b4:	1004c03a 	cmpne	r2,r2,zero
8020b6b8:	1886b03a 	or	r3,r3,r2
8020b6bc:	188001cc 	andi	r2,r3,7
8020b6c0:	10000726 	beq	r2,zero,8020b6e0 <__divdf3+0x7dc>
8020b6c4:	188003cc 	andi	r2,r3,15
8020b6c8:	01000104 	movi	r4,4
8020b6cc:	11000426 	beq	r2,r4,8020b6e0 <__divdf3+0x7dc>
8020b6d0:	1805883a 	mov	r2,r3
8020b6d4:	10c00104 	addi	r3,r2,4
8020b6d8:	1885803a 	cmpltu	r2,r3,r2
8020b6dc:	88a3883a 	add	r17,r17,r2
8020b6e0:	8880202c 	andhi	r2,r17,128
8020b6e4:	10002726 	beq	r2,zero,8020b784 <__divdf3+0x880>
8020b6e8:	98c0004c 	andi	r3,r19,1
8020b6ec:	00800044 	movi	r2,1
8020b6f0:	000b883a 	mov	r5,zero
8020b6f4:	0025883a 	mov	r18,zero
8020b6f8:	003e6106 	br	8020b080 <__reset+0xfa1eb080>
8020b6fc:	85a1883a 	add	r16,r16,r22
8020b700:	8585803a 	cmpltu	r2,r16,r22
8020b704:	1705883a 	add	r2,r2,fp
8020b708:	14a5883a 	add	r18,r2,r18
8020b70c:	8c7fff84 	addi	r17,r17,-2
8020b710:	003f1106 	br	8020b358 <__reset+0xfa1eb358>
8020b714:	b589883a 	add	r4,r22,r22
8020b718:	25ad803a 	cmpltu	r22,r4,r22
8020b71c:	b739883a 	add	fp,r22,fp
8020b720:	40bfff84 	addi	r2,r8,-2
8020b724:	bf2f883a 	add	r23,r23,fp
8020b728:	202d883a 	mov	r22,r4
8020b72c:	003f9306 	br	8020b57c <__reset+0xfa1eb57c>
8020b730:	013ff844 	movi	r4,-31
8020b734:	2085c83a 	sub	r2,r4,r2
8020b738:	8888d83a 	srl	r4,r17,r2
8020b73c:	00800804 	movi	r2,32
8020b740:	18802126 	beq	r3,r2,8020b7c8 <__divdf3+0x8c4>
8020b744:	00801004 	movi	r2,64
8020b748:	10c5c83a 	sub	r2,r2,r3
8020b74c:	8884983a 	sll	r2,r17,r2
8020b750:	1204b03a 	or	r2,r2,r8
8020b754:	1004c03a 	cmpne	r2,r2,zero
8020b758:	2084b03a 	or	r2,r4,r2
8020b75c:	144001cc 	andi	r17,r2,7
8020b760:	88000d1e 	bne	r17,zero,8020b798 <__divdf3+0x894>
8020b764:	000b883a 	mov	r5,zero
8020b768:	1024d0fa 	srli	r18,r2,3
8020b76c:	98c0004c 	andi	r3,r19,1
8020b770:	0005883a 	mov	r2,zero
8020b774:	9464b03a 	or	r18,r18,r17
8020b778:	003e4106 	br	8020b080 <__reset+0xfa1eb080>
8020b77c:	1007883a 	mov	r3,r2
8020b780:	0023883a 	mov	r17,zero
8020b784:	880a927a 	slli	r5,r17,9
8020b788:	1805883a 	mov	r2,r3
8020b78c:	8822977a 	slli	r17,r17,29
8020b790:	280ad33a 	srli	r5,r5,12
8020b794:	003ff406 	br	8020b768 <__reset+0xfa1eb768>
8020b798:	10c003cc 	andi	r3,r2,15
8020b79c:	01000104 	movi	r4,4
8020b7a0:	193ff626 	beq	r3,r4,8020b77c <__reset+0xfa1eb77c>
8020b7a4:	0023883a 	mov	r17,zero
8020b7a8:	003fca06 	br	8020b6d4 <__reset+0xfa1eb6d4>
8020b7ac:	813fd336 	bltu	r16,r4,8020b6fc <__reset+0xfa1eb6fc>
8020b7b0:	1023883a 	mov	r17,r2
8020b7b4:	003fa806 	br	8020b658 <__reset+0xfa1eb658>
8020b7b8:	b0ffd636 	bltu	r22,r3,8020b714 <__reset+0xfa1eb714>
8020b7bc:	1011883a 	mov	r8,r2
8020b7c0:	b0ff341e 	bne	r22,r3,8020b494 <__reset+0xfa1eb494>
8020b7c4:	003f3406 	br	8020b498 <__reset+0xfa1eb498>
8020b7c8:	0005883a 	mov	r2,zero
8020b7cc:	003fe006 	br	8020b750 <__reset+0xfa1eb750>
8020b7d0:	00800434 	movhi	r2,16
8020b7d4:	89400234 	orhi	r5,r17,8
8020b7d8:	10bfffc4 	addi	r2,r2,-1
8020b7dc:	b807883a 	mov	r3,r23
8020b7e0:	288a703a 	and	r5,r5,r2
8020b7e4:	4025883a 	mov	r18,r8
8020b7e8:	003e8206 	br	8020b1f4 <__reset+0xfa1eb1f4>

8020b7ec <__eqdf2>:
8020b7ec:	2804d53a 	srli	r2,r5,20
8020b7f0:	3806d53a 	srli	r3,r7,20
8020b7f4:	02000434 	movhi	r8,16
8020b7f8:	423fffc4 	addi	r8,r8,-1
8020b7fc:	1081ffcc 	andi	r2,r2,2047
8020b800:	0281ffc4 	movi	r10,2047
8020b804:	2a12703a 	and	r9,r5,r8
8020b808:	18c1ffcc 	andi	r3,r3,2047
8020b80c:	3a10703a 	and	r8,r7,r8
8020b810:	280ad7fa 	srli	r5,r5,31
8020b814:	380ed7fa 	srli	r7,r7,31
8020b818:	12801026 	beq	r2,r10,8020b85c <__eqdf2+0x70>
8020b81c:	0281ffc4 	movi	r10,2047
8020b820:	1a800a26 	beq	r3,r10,8020b84c <__eqdf2+0x60>
8020b824:	10c00226 	beq	r2,r3,8020b830 <__eqdf2+0x44>
8020b828:	00800044 	movi	r2,1
8020b82c:	f800283a 	ret
8020b830:	4a3ffd1e 	bne	r9,r8,8020b828 <__reset+0xfa1eb828>
8020b834:	21bffc1e 	bne	r4,r6,8020b828 <__reset+0xfa1eb828>
8020b838:	29c00c26 	beq	r5,r7,8020b86c <__eqdf2+0x80>
8020b83c:	103ffa1e 	bne	r2,zero,8020b828 <__reset+0xfa1eb828>
8020b840:	2244b03a 	or	r2,r4,r9
8020b844:	1004c03a 	cmpne	r2,r2,zero
8020b848:	f800283a 	ret
8020b84c:	3214b03a 	or	r10,r6,r8
8020b850:	503ff426 	beq	r10,zero,8020b824 <__reset+0xfa1eb824>
8020b854:	00800044 	movi	r2,1
8020b858:	f800283a 	ret
8020b85c:	2254b03a 	or	r10,r4,r9
8020b860:	503fee26 	beq	r10,zero,8020b81c <__reset+0xfa1eb81c>
8020b864:	00800044 	movi	r2,1
8020b868:	f800283a 	ret
8020b86c:	0005883a 	mov	r2,zero
8020b870:	f800283a 	ret

8020b874 <__gedf2>:
8020b874:	2804d53a 	srli	r2,r5,20
8020b878:	3806d53a 	srli	r3,r7,20
8020b87c:	02000434 	movhi	r8,16
8020b880:	423fffc4 	addi	r8,r8,-1
8020b884:	1081ffcc 	andi	r2,r2,2047
8020b888:	0241ffc4 	movi	r9,2047
8020b88c:	2a14703a 	and	r10,r5,r8
8020b890:	18c1ffcc 	andi	r3,r3,2047
8020b894:	3a10703a 	and	r8,r7,r8
8020b898:	280ad7fa 	srli	r5,r5,31
8020b89c:	380ed7fa 	srli	r7,r7,31
8020b8a0:	12401d26 	beq	r2,r9,8020b918 <__gedf2+0xa4>
8020b8a4:	0241ffc4 	movi	r9,2047
8020b8a8:	1a401226 	beq	r3,r9,8020b8f4 <__gedf2+0x80>
8020b8ac:	1000081e 	bne	r2,zero,8020b8d0 <__gedf2+0x5c>
8020b8b0:	2296b03a 	or	r11,r4,r10
8020b8b4:	5813003a 	cmpeq	r9,r11,zero
8020b8b8:	1800091e 	bne	r3,zero,8020b8e0 <__gedf2+0x6c>
8020b8bc:	3218b03a 	or	r12,r6,r8
8020b8c0:	6000071e 	bne	r12,zero,8020b8e0 <__gedf2+0x6c>
8020b8c4:	0005883a 	mov	r2,zero
8020b8c8:	5800101e 	bne	r11,zero,8020b90c <__gedf2+0x98>
8020b8cc:	f800283a 	ret
8020b8d0:	18000c1e 	bne	r3,zero,8020b904 <__gedf2+0x90>
8020b8d4:	3212b03a 	or	r9,r6,r8
8020b8d8:	48000c26 	beq	r9,zero,8020b90c <__gedf2+0x98>
8020b8dc:	0013883a 	mov	r9,zero
8020b8e0:	39c03fcc 	andi	r7,r7,255
8020b8e4:	48000826 	beq	r9,zero,8020b908 <__gedf2+0x94>
8020b8e8:	38000926 	beq	r7,zero,8020b910 <__gedf2+0x9c>
8020b8ec:	00800044 	movi	r2,1
8020b8f0:	f800283a 	ret
8020b8f4:	3212b03a 	or	r9,r6,r8
8020b8f8:	483fec26 	beq	r9,zero,8020b8ac <__reset+0xfa1eb8ac>
8020b8fc:	00bfff84 	movi	r2,-2
8020b900:	f800283a 	ret
8020b904:	39c03fcc 	andi	r7,r7,255
8020b908:	29c00626 	beq	r5,r7,8020b924 <__gedf2+0xb0>
8020b90c:	283ff726 	beq	r5,zero,8020b8ec <__reset+0xfa1eb8ec>
8020b910:	00bfffc4 	movi	r2,-1
8020b914:	f800283a 	ret
8020b918:	2292b03a 	or	r9,r4,r10
8020b91c:	483fe126 	beq	r9,zero,8020b8a4 <__reset+0xfa1eb8a4>
8020b920:	003ff606 	br	8020b8fc <__reset+0xfa1eb8fc>
8020b924:	18bff916 	blt	r3,r2,8020b90c <__reset+0xfa1eb90c>
8020b928:	10c00316 	blt	r2,r3,8020b938 <__gedf2+0xc4>
8020b92c:	42bff736 	bltu	r8,r10,8020b90c <__reset+0xfa1eb90c>
8020b930:	52000326 	beq	r10,r8,8020b940 <__gedf2+0xcc>
8020b934:	5200042e 	bgeu	r10,r8,8020b948 <__gedf2+0xd4>
8020b938:	283fec1e 	bne	r5,zero,8020b8ec <__reset+0xfa1eb8ec>
8020b93c:	003ff406 	br	8020b910 <__reset+0xfa1eb910>
8020b940:	313ff236 	bltu	r6,r4,8020b90c <__reset+0xfa1eb90c>
8020b944:	21bffc36 	bltu	r4,r6,8020b938 <__reset+0xfa1eb938>
8020b948:	0005883a 	mov	r2,zero
8020b94c:	f800283a 	ret

8020b950 <__ledf2>:
8020b950:	2804d53a 	srli	r2,r5,20
8020b954:	3810d53a 	srli	r8,r7,20
8020b958:	00c00434 	movhi	r3,16
8020b95c:	18ffffc4 	addi	r3,r3,-1
8020b960:	1081ffcc 	andi	r2,r2,2047
8020b964:	0241ffc4 	movi	r9,2047
8020b968:	28d4703a 	and	r10,r5,r3
8020b96c:	4201ffcc 	andi	r8,r8,2047
8020b970:	38c6703a 	and	r3,r7,r3
8020b974:	280ad7fa 	srli	r5,r5,31
8020b978:	380ed7fa 	srli	r7,r7,31
8020b97c:	12401f26 	beq	r2,r9,8020b9fc <__ledf2+0xac>
8020b980:	0241ffc4 	movi	r9,2047
8020b984:	42401426 	beq	r8,r9,8020b9d8 <__ledf2+0x88>
8020b988:	1000091e 	bne	r2,zero,8020b9b0 <__ledf2+0x60>
8020b98c:	2296b03a 	or	r11,r4,r10
8020b990:	5813003a 	cmpeq	r9,r11,zero
8020b994:	29403fcc 	andi	r5,r5,255
8020b998:	40000a1e 	bne	r8,zero,8020b9c4 <__ledf2+0x74>
8020b99c:	30d8b03a 	or	r12,r6,r3
8020b9a0:	6000081e 	bne	r12,zero,8020b9c4 <__ledf2+0x74>
8020b9a4:	0005883a 	mov	r2,zero
8020b9a8:	5800111e 	bne	r11,zero,8020b9f0 <__ledf2+0xa0>
8020b9ac:	f800283a 	ret
8020b9b0:	29403fcc 	andi	r5,r5,255
8020b9b4:	40000c1e 	bne	r8,zero,8020b9e8 <__ledf2+0x98>
8020b9b8:	30d2b03a 	or	r9,r6,r3
8020b9bc:	48000c26 	beq	r9,zero,8020b9f0 <__ledf2+0xa0>
8020b9c0:	0013883a 	mov	r9,zero
8020b9c4:	39c03fcc 	andi	r7,r7,255
8020b9c8:	48000826 	beq	r9,zero,8020b9ec <__ledf2+0x9c>
8020b9cc:	38001126 	beq	r7,zero,8020ba14 <__ledf2+0xc4>
8020b9d0:	00800044 	movi	r2,1
8020b9d4:	f800283a 	ret
8020b9d8:	30d2b03a 	or	r9,r6,r3
8020b9dc:	483fea26 	beq	r9,zero,8020b988 <__reset+0xfa1eb988>
8020b9e0:	00800084 	movi	r2,2
8020b9e4:	f800283a 	ret
8020b9e8:	39c03fcc 	andi	r7,r7,255
8020b9ec:	39400726 	beq	r7,r5,8020ba0c <__ledf2+0xbc>
8020b9f0:	2800081e 	bne	r5,zero,8020ba14 <__ledf2+0xc4>
8020b9f4:	00800044 	movi	r2,1
8020b9f8:	f800283a 	ret
8020b9fc:	2292b03a 	or	r9,r4,r10
8020ba00:	483fdf26 	beq	r9,zero,8020b980 <__reset+0xfa1eb980>
8020ba04:	00800084 	movi	r2,2
8020ba08:	f800283a 	ret
8020ba0c:	4080030e 	bge	r8,r2,8020ba1c <__ledf2+0xcc>
8020ba10:	383fef26 	beq	r7,zero,8020b9d0 <__reset+0xfa1eb9d0>
8020ba14:	00bfffc4 	movi	r2,-1
8020ba18:	f800283a 	ret
8020ba1c:	123feb16 	blt	r2,r8,8020b9cc <__reset+0xfa1eb9cc>
8020ba20:	1abff336 	bltu	r3,r10,8020b9f0 <__reset+0xfa1eb9f0>
8020ba24:	50c00326 	beq	r10,r3,8020ba34 <__ledf2+0xe4>
8020ba28:	50c0042e 	bgeu	r10,r3,8020ba3c <__ledf2+0xec>
8020ba2c:	283fe81e 	bne	r5,zero,8020b9d0 <__reset+0xfa1eb9d0>
8020ba30:	003ff806 	br	8020ba14 <__reset+0xfa1eba14>
8020ba34:	313fee36 	bltu	r6,r4,8020b9f0 <__reset+0xfa1eb9f0>
8020ba38:	21bffc36 	bltu	r4,r6,8020ba2c <__reset+0xfa1eba2c>
8020ba3c:	0005883a 	mov	r2,zero
8020ba40:	f800283a 	ret

8020ba44 <__muldf3>:
8020ba44:	defff304 	addi	sp,sp,-52
8020ba48:	2804d53a 	srli	r2,r5,20
8020ba4c:	dd800915 	stw	r22,36(sp)
8020ba50:	282cd7fa 	srli	r22,r5,31
8020ba54:	dc000315 	stw	r16,12(sp)
8020ba58:	04000434 	movhi	r16,16
8020ba5c:	dd400815 	stw	r21,32(sp)
8020ba60:	dc800515 	stw	r18,20(sp)
8020ba64:	843fffc4 	addi	r16,r16,-1
8020ba68:	dfc00c15 	stw	ra,48(sp)
8020ba6c:	df000b15 	stw	fp,44(sp)
8020ba70:	ddc00a15 	stw	r23,40(sp)
8020ba74:	dd000715 	stw	r20,28(sp)
8020ba78:	dcc00615 	stw	r19,24(sp)
8020ba7c:	dc400415 	stw	r17,16(sp)
8020ba80:	1481ffcc 	andi	r18,r2,2047
8020ba84:	2c20703a 	and	r16,r5,r16
8020ba88:	b02b883a 	mov	r21,r22
8020ba8c:	b2403fcc 	andi	r9,r22,255
8020ba90:	90006026 	beq	r18,zero,8020bc14 <__muldf3+0x1d0>
8020ba94:	0081ffc4 	movi	r2,2047
8020ba98:	2029883a 	mov	r20,r4
8020ba9c:	90803626 	beq	r18,r2,8020bb78 <__muldf3+0x134>
8020baa0:	80800434 	orhi	r2,r16,16
8020baa4:	100490fa 	slli	r2,r2,3
8020baa8:	2020d77a 	srli	r16,r4,29
8020baac:	202890fa 	slli	r20,r4,3
8020bab0:	94bf0044 	addi	r18,r18,-1023
8020bab4:	80a0b03a 	or	r16,r16,r2
8020bab8:	0027883a 	mov	r19,zero
8020babc:	0039883a 	mov	fp,zero
8020bac0:	3804d53a 	srli	r2,r7,20
8020bac4:	382ed7fa 	srli	r23,r7,31
8020bac8:	04400434 	movhi	r17,16
8020bacc:	8c7fffc4 	addi	r17,r17,-1
8020bad0:	1081ffcc 	andi	r2,r2,2047
8020bad4:	3011883a 	mov	r8,r6
8020bad8:	3c62703a 	and	r17,r7,r17
8020badc:	ba803fcc 	andi	r10,r23,255
8020bae0:	10006d26 	beq	r2,zero,8020bc98 <__muldf3+0x254>
8020bae4:	00c1ffc4 	movi	r3,2047
8020bae8:	10c06526 	beq	r2,r3,8020bc80 <__muldf3+0x23c>
8020baec:	88c00434 	orhi	r3,r17,16
8020baf0:	180690fa 	slli	r3,r3,3
8020baf4:	3022d77a 	srli	r17,r6,29
8020baf8:	301090fa 	slli	r8,r6,3
8020bafc:	10bf0044 	addi	r2,r2,-1023
8020bb00:	88e2b03a 	or	r17,r17,r3
8020bb04:	000b883a 	mov	r5,zero
8020bb08:	9085883a 	add	r2,r18,r2
8020bb0c:	2cc8b03a 	or	r4,r5,r19
8020bb10:	00c003c4 	movi	r3,15
8020bb14:	bdacf03a 	xor	r22,r23,r22
8020bb18:	12c00044 	addi	r11,r2,1
8020bb1c:	19009936 	bltu	r3,r4,8020bd84 <__muldf3+0x340>
8020bb20:	200890ba 	slli	r4,r4,2
8020bb24:	00e00874 	movhi	r3,32801
8020bb28:	18eece04 	addi	r3,r3,-17608
8020bb2c:	20c9883a 	add	r4,r4,r3
8020bb30:	20c00017 	ldw	r3,0(r4)
8020bb34:	1800683a 	jmp	r3
8020bb38:	8020bd84 	addi	zero,r16,-32010
8020bb3c:	8020bb98 	cmpnei	zero,r16,-32018
8020bb40:	8020bb98 	cmpnei	zero,r16,-32018
8020bb44:	8020bb94 	ori	zero,r16,33518
8020bb48:	8020bd60 	cmpeqi	zero,r16,-32011
8020bb4c:	8020bd60 	cmpeqi	zero,r16,-32011
8020bb50:	8020bd48 	cmpgei	zero,r16,-32011
8020bb54:	8020bb94 	ori	zero,r16,33518
8020bb58:	8020bd60 	cmpeqi	zero,r16,-32011
8020bb5c:	8020bd48 	cmpgei	zero,r16,-32011
8020bb60:	8020bd60 	cmpeqi	zero,r16,-32011
8020bb64:	8020bb94 	ori	zero,r16,33518
8020bb68:	8020bd70 	cmpltui	zero,r16,33525
8020bb6c:	8020bd70 	cmpltui	zero,r16,33525
8020bb70:	8020bd70 	cmpltui	zero,r16,33525
8020bb74:	8020bf8c 	andi	zero,r16,33534
8020bb78:	2404b03a 	or	r2,r4,r16
8020bb7c:	10006f1e 	bne	r2,zero,8020bd3c <__muldf3+0x2f8>
8020bb80:	04c00204 	movi	r19,8
8020bb84:	0021883a 	mov	r16,zero
8020bb88:	0029883a 	mov	r20,zero
8020bb8c:	07000084 	movi	fp,2
8020bb90:	003fcb06 	br	8020bac0 <__reset+0xfa1ebac0>
8020bb94:	502d883a 	mov	r22,r10
8020bb98:	00800084 	movi	r2,2
8020bb9c:	28805726 	beq	r5,r2,8020bcfc <__muldf3+0x2b8>
8020bba0:	008000c4 	movi	r2,3
8020bba4:	28816626 	beq	r5,r2,8020c140 <__muldf3+0x6fc>
8020bba8:	00800044 	movi	r2,1
8020bbac:	2881411e 	bne	r5,r2,8020c0b4 <__muldf3+0x670>
8020bbb0:	b02b883a 	mov	r21,r22
8020bbb4:	0005883a 	mov	r2,zero
8020bbb8:	000b883a 	mov	r5,zero
8020bbbc:	0029883a 	mov	r20,zero
8020bbc0:	1004953a 	slli	r2,r2,20
8020bbc4:	a8c03fcc 	andi	r3,r21,255
8020bbc8:	04400434 	movhi	r17,16
8020bbcc:	8c7fffc4 	addi	r17,r17,-1
8020bbd0:	180697fa 	slli	r3,r3,31
8020bbd4:	2c4a703a 	and	r5,r5,r17
8020bbd8:	288ab03a 	or	r5,r5,r2
8020bbdc:	28c6b03a 	or	r3,r5,r3
8020bbe0:	a005883a 	mov	r2,r20
8020bbe4:	dfc00c17 	ldw	ra,48(sp)
8020bbe8:	df000b17 	ldw	fp,44(sp)
8020bbec:	ddc00a17 	ldw	r23,40(sp)
8020bbf0:	dd800917 	ldw	r22,36(sp)
8020bbf4:	dd400817 	ldw	r21,32(sp)
8020bbf8:	dd000717 	ldw	r20,28(sp)
8020bbfc:	dcc00617 	ldw	r19,24(sp)
8020bc00:	dc800517 	ldw	r18,20(sp)
8020bc04:	dc400417 	ldw	r17,16(sp)
8020bc08:	dc000317 	ldw	r16,12(sp)
8020bc0c:	dec00d04 	addi	sp,sp,52
8020bc10:	f800283a 	ret
8020bc14:	2404b03a 	or	r2,r4,r16
8020bc18:	2027883a 	mov	r19,r4
8020bc1c:	10004226 	beq	r2,zero,8020bd28 <__muldf3+0x2e4>
8020bc20:	8000fc26 	beq	r16,zero,8020c014 <__muldf3+0x5d0>
8020bc24:	8009883a 	mov	r4,r16
8020bc28:	d9800215 	stw	r6,8(sp)
8020bc2c:	d9c00015 	stw	r7,0(sp)
8020bc30:	da400115 	stw	r9,4(sp)
8020bc34:	020cc5c0 	call	8020cc5c <__clzsi2>
8020bc38:	d9800217 	ldw	r6,8(sp)
8020bc3c:	d9c00017 	ldw	r7,0(sp)
8020bc40:	da400117 	ldw	r9,4(sp)
8020bc44:	113ffd44 	addi	r4,r2,-11
8020bc48:	00c00704 	movi	r3,28
8020bc4c:	1900ed16 	blt	r3,r4,8020c004 <__muldf3+0x5c0>
8020bc50:	00c00744 	movi	r3,29
8020bc54:	147ffe04 	addi	r17,r2,-8
8020bc58:	1907c83a 	sub	r3,r3,r4
8020bc5c:	8460983a 	sll	r16,r16,r17
8020bc60:	98c6d83a 	srl	r3,r19,r3
8020bc64:	9c68983a 	sll	r20,r19,r17
8020bc68:	1c20b03a 	or	r16,r3,r16
8020bc6c:	1080fcc4 	addi	r2,r2,1011
8020bc70:	00a5c83a 	sub	r18,zero,r2
8020bc74:	0027883a 	mov	r19,zero
8020bc78:	0039883a 	mov	fp,zero
8020bc7c:	003f9006 	br	8020bac0 <__reset+0xfa1ebac0>
8020bc80:	3446b03a 	or	r3,r6,r17
8020bc84:	1800261e 	bne	r3,zero,8020bd20 <__muldf3+0x2dc>
8020bc88:	0023883a 	mov	r17,zero
8020bc8c:	0011883a 	mov	r8,zero
8020bc90:	01400084 	movi	r5,2
8020bc94:	003f9c06 	br	8020bb08 <__reset+0xfa1ebb08>
8020bc98:	3446b03a 	or	r3,r6,r17
8020bc9c:	18001c26 	beq	r3,zero,8020bd10 <__muldf3+0x2cc>
8020bca0:	8800ce26 	beq	r17,zero,8020bfdc <__muldf3+0x598>
8020bca4:	8809883a 	mov	r4,r17
8020bca8:	d9800215 	stw	r6,8(sp)
8020bcac:	da400115 	stw	r9,4(sp)
8020bcb0:	da800015 	stw	r10,0(sp)
8020bcb4:	020cc5c0 	call	8020cc5c <__clzsi2>
8020bcb8:	d9800217 	ldw	r6,8(sp)
8020bcbc:	da400117 	ldw	r9,4(sp)
8020bcc0:	da800017 	ldw	r10,0(sp)
8020bcc4:	113ffd44 	addi	r4,r2,-11
8020bcc8:	00c00704 	movi	r3,28
8020bccc:	1900bf16 	blt	r3,r4,8020bfcc <__muldf3+0x588>
8020bcd0:	00c00744 	movi	r3,29
8020bcd4:	123ffe04 	addi	r8,r2,-8
8020bcd8:	1907c83a 	sub	r3,r3,r4
8020bcdc:	8a22983a 	sll	r17,r17,r8
8020bce0:	30c6d83a 	srl	r3,r6,r3
8020bce4:	3210983a 	sll	r8,r6,r8
8020bce8:	1c62b03a 	or	r17,r3,r17
8020bcec:	1080fcc4 	addi	r2,r2,1011
8020bcf0:	0085c83a 	sub	r2,zero,r2
8020bcf4:	000b883a 	mov	r5,zero
8020bcf8:	003f8306 	br	8020bb08 <__reset+0xfa1ebb08>
8020bcfc:	b02b883a 	mov	r21,r22
8020bd00:	0081ffc4 	movi	r2,2047
8020bd04:	000b883a 	mov	r5,zero
8020bd08:	0029883a 	mov	r20,zero
8020bd0c:	003fac06 	br	8020bbc0 <__reset+0xfa1ebbc0>
8020bd10:	0023883a 	mov	r17,zero
8020bd14:	0011883a 	mov	r8,zero
8020bd18:	01400044 	movi	r5,1
8020bd1c:	003f7a06 	br	8020bb08 <__reset+0xfa1ebb08>
8020bd20:	014000c4 	movi	r5,3
8020bd24:	003f7806 	br	8020bb08 <__reset+0xfa1ebb08>
8020bd28:	04c00104 	movi	r19,4
8020bd2c:	0021883a 	mov	r16,zero
8020bd30:	0029883a 	mov	r20,zero
8020bd34:	07000044 	movi	fp,1
8020bd38:	003f6106 	br	8020bac0 <__reset+0xfa1ebac0>
8020bd3c:	04c00304 	movi	r19,12
8020bd40:	070000c4 	movi	fp,3
8020bd44:	003f5e06 	br	8020bac0 <__reset+0xfa1ebac0>
8020bd48:	01400434 	movhi	r5,16
8020bd4c:	002b883a 	mov	r21,zero
8020bd50:	297fffc4 	addi	r5,r5,-1
8020bd54:	053fffc4 	movi	r20,-1
8020bd58:	0081ffc4 	movi	r2,2047
8020bd5c:	003f9806 	br	8020bbc0 <__reset+0xfa1ebbc0>
8020bd60:	8023883a 	mov	r17,r16
8020bd64:	a011883a 	mov	r8,r20
8020bd68:	e00b883a 	mov	r5,fp
8020bd6c:	003f8a06 	br	8020bb98 <__reset+0xfa1ebb98>
8020bd70:	8023883a 	mov	r17,r16
8020bd74:	a011883a 	mov	r8,r20
8020bd78:	482d883a 	mov	r22,r9
8020bd7c:	e00b883a 	mov	r5,fp
8020bd80:	003f8506 	br	8020bb98 <__reset+0xfa1ebb98>
8020bd84:	a00ad43a 	srli	r5,r20,16
8020bd88:	401ad43a 	srli	r13,r8,16
8020bd8c:	a53fffcc 	andi	r20,r20,65535
8020bd90:	423fffcc 	andi	r8,r8,65535
8020bd94:	4519383a 	mul	r12,r8,r20
8020bd98:	4147383a 	mul	r3,r8,r5
8020bd9c:	6d09383a 	mul	r4,r13,r20
8020bda0:	600cd43a 	srli	r6,r12,16
8020bda4:	2b5d383a 	mul	r14,r5,r13
8020bda8:	20c9883a 	add	r4,r4,r3
8020bdac:	310d883a 	add	r6,r6,r4
8020bdb0:	30c0022e 	bgeu	r6,r3,8020bdbc <__muldf3+0x378>
8020bdb4:	00c00074 	movhi	r3,1
8020bdb8:	70dd883a 	add	r14,r14,r3
8020bdbc:	8826d43a 	srli	r19,r17,16
8020bdc0:	8bffffcc 	andi	r15,r17,65535
8020bdc4:	7d23383a 	mul	r17,r15,r20
8020bdc8:	7949383a 	mul	r4,r15,r5
8020bdcc:	9d29383a 	mul	r20,r19,r20
8020bdd0:	8814d43a 	srli	r10,r17,16
8020bdd4:	3012943a 	slli	r9,r6,16
8020bdd8:	a129883a 	add	r20,r20,r4
8020bddc:	633fffcc 	andi	r12,r12,65535
8020bde0:	5515883a 	add	r10,r10,r20
8020bde4:	3006d43a 	srli	r3,r6,16
8020bde8:	4b13883a 	add	r9,r9,r12
8020bdec:	2ccb383a 	mul	r5,r5,r19
8020bdf0:	5100022e 	bgeu	r10,r4,8020bdfc <__muldf3+0x3b8>
8020bdf4:	01000074 	movhi	r4,1
8020bdf8:	290b883a 	add	r5,r5,r4
8020bdfc:	802ad43a 	srli	r21,r16,16
8020be00:	843fffcc 	andi	r16,r16,65535
8020be04:	440d383a 	mul	r6,r8,r16
8020be08:	4565383a 	mul	r18,r8,r21
8020be0c:	8349383a 	mul	r4,r16,r13
8020be10:	500e943a 	slli	r7,r10,16
8020be14:	3010d43a 	srli	r8,r6,16
8020be18:	5028d43a 	srli	r20,r10,16
8020be1c:	2489883a 	add	r4,r4,r18
8020be20:	8abfffcc 	andi	r10,r17,65535
8020be24:	3a95883a 	add	r10,r7,r10
8020be28:	4119883a 	add	r12,r8,r4
8020be2c:	a169883a 	add	r20,r20,r5
8020be30:	1a87883a 	add	r3,r3,r10
8020be34:	6d5b383a 	mul	r13,r13,r21
8020be38:	6480022e 	bgeu	r12,r18,8020be44 <__muldf3+0x400>
8020be3c:	01000074 	movhi	r4,1
8020be40:	691b883a 	add	r13,r13,r4
8020be44:	7c25383a 	mul	r18,r15,r16
8020be48:	7d4b383a 	mul	r5,r15,r21
8020be4c:	84cf383a 	mul	r7,r16,r19
8020be50:	901ed43a 	srli	r15,r18,16
8020be54:	6008d43a 	srli	r4,r12,16
8020be58:	6010943a 	slli	r8,r12,16
8020be5c:	394f883a 	add	r7,r7,r5
8020be60:	333fffcc 	andi	r12,r6,65535
8020be64:	79df883a 	add	r15,r15,r7
8020be68:	235b883a 	add	r13,r4,r13
8020be6c:	9d63383a 	mul	r17,r19,r21
8020be70:	4309883a 	add	r4,r8,r12
8020be74:	7940022e 	bgeu	r15,r5,8020be80 <__muldf3+0x43c>
8020be78:	01400074 	movhi	r5,1
8020be7c:	8963883a 	add	r17,r17,r5
8020be80:	780a943a 	slli	r5,r15,16
8020be84:	91bfffcc 	andi	r6,r18,65535
8020be88:	70c7883a 	add	r3,r14,r3
8020be8c:	298d883a 	add	r6,r5,r6
8020be90:	1a8f803a 	cmpltu	r7,r3,r10
8020be94:	350b883a 	add	r5,r6,r20
8020be98:	20c7883a 	add	r3,r4,r3
8020be9c:	3955883a 	add	r10,r7,r5
8020bea0:	1909803a 	cmpltu	r4,r3,r4
8020bea4:	6a91883a 	add	r8,r13,r10
8020bea8:	780cd43a 	srli	r6,r15,16
8020beac:	2219883a 	add	r12,r4,r8
8020beb0:	2d0b803a 	cmpltu	r5,r5,r20
8020beb4:	51cf803a 	cmpltu	r7,r10,r7
8020beb8:	29ceb03a 	or	r7,r5,r7
8020bebc:	4351803a 	cmpltu	r8,r8,r13
8020bec0:	610b803a 	cmpltu	r5,r12,r4
8020bec4:	4148b03a 	or	r4,r8,r5
8020bec8:	398f883a 	add	r7,r7,r6
8020becc:	3909883a 	add	r4,r7,r4
8020bed0:	1810927a 	slli	r8,r3,9
8020bed4:	2449883a 	add	r4,r4,r17
8020bed8:	2008927a 	slli	r4,r4,9
8020bedc:	6022d5fa 	srli	r17,r12,23
8020bee0:	1806d5fa 	srli	r3,r3,23
8020bee4:	4252b03a 	or	r9,r8,r9
8020bee8:	600a927a 	slli	r5,r12,9
8020beec:	4810c03a 	cmpne	r8,r9,zero
8020bef0:	2462b03a 	or	r17,r4,r17
8020bef4:	40c6b03a 	or	r3,r8,r3
8020bef8:	8900402c 	andhi	r4,r17,256
8020befc:	1950b03a 	or	r8,r3,r5
8020bf00:	20000726 	beq	r4,zero,8020bf20 <__muldf3+0x4dc>
8020bf04:	4006d07a 	srli	r3,r8,1
8020bf08:	880497fa 	slli	r2,r17,31
8020bf0c:	4200004c 	andi	r8,r8,1
8020bf10:	8822d07a 	srli	r17,r17,1
8020bf14:	1a10b03a 	or	r8,r3,r8
8020bf18:	1210b03a 	or	r8,r2,r8
8020bf1c:	5805883a 	mov	r2,r11
8020bf20:	1140ffc4 	addi	r5,r2,1023
8020bf24:	0140440e 	bge	zero,r5,8020c038 <__muldf3+0x5f4>
8020bf28:	40c001cc 	andi	r3,r8,7
8020bf2c:	18000726 	beq	r3,zero,8020bf4c <__muldf3+0x508>
8020bf30:	40c003cc 	andi	r3,r8,15
8020bf34:	01000104 	movi	r4,4
8020bf38:	19000426 	beq	r3,r4,8020bf4c <__muldf3+0x508>
8020bf3c:	4107883a 	add	r3,r8,r4
8020bf40:	1a11803a 	cmpltu	r8,r3,r8
8020bf44:	8a23883a 	add	r17,r17,r8
8020bf48:	1811883a 	mov	r8,r3
8020bf4c:	88c0402c 	andhi	r3,r17,256
8020bf50:	18000426 	beq	r3,zero,8020bf64 <__muldf3+0x520>
8020bf54:	11410004 	addi	r5,r2,1024
8020bf58:	00bfc034 	movhi	r2,65280
8020bf5c:	10bfffc4 	addi	r2,r2,-1
8020bf60:	88a2703a 	and	r17,r17,r2
8020bf64:	0081ff84 	movi	r2,2046
8020bf68:	117f6416 	blt	r2,r5,8020bcfc <__reset+0xfa1ebcfc>
8020bf6c:	8828977a 	slli	r20,r17,29
8020bf70:	4010d0fa 	srli	r8,r8,3
8020bf74:	8822927a 	slli	r17,r17,9
8020bf78:	2881ffcc 	andi	r2,r5,2047
8020bf7c:	a228b03a 	or	r20,r20,r8
8020bf80:	880ad33a 	srli	r5,r17,12
8020bf84:	b02b883a 	mov	r21,r22
8020bf88:	003f0d06 	br	8020bbc0 <__reset+0xfa1ebbc0>
8020bf8c:	8080022c 	andhi	r2,r16,8
8020bf90:	10000926 	beq	r2,zero,8020bfb8 <__muldf3+0x574>
8020bf94:	8880022c 	andhi	r2,r17,8
8020bf98:	1000071e 	bne	r2,zero,8020bfb8 <__muldf3+0x574>
8020bf9c:	00800434 	movhi	r2,16
8020bfa0:	89400234 	orhi	r5,r17,8
8020bfa4:	10bfffc4 	addi	r2,r2,-1
8020bfa8:	b82b883a 	mov	r21,r23
8020bfac:	288a703a 	and	r5,r5,r2
8020bfb0:	4029883a 	mov	r20,r8
8020bfb4:	003f6806 	br	8020bd58 <__reset+0xfa1ebd58>
8020bfb8:	00800434 	movhi	r2,16
8020bfbc:	81400234 	orhi	r5,r16,8
8020bfc0:	10bfffc4 	addi	r2,r2,-1
8020bfc4:	288a703a 	and	r5,r5,r2
8020bfc8:	003f6306 	br	8020bd58 <__reset+0xfa1ebd58>
8020bfcc:	147ff604 	addi	r17,r2,-40
8020bfd0:	3462983a 	sll	r17,r6,r17
8020bfd4:	0011883a 	mov	r8,zero
8020bfd8:	003f4406 	br	8020bcec <__reset+0xfa1ebcec>
8020bfdc:	3009883a 	mov	r4,r6
8020bfe0:	d9800215 	stw	r6,8(sp)
8020bfe4:	da400115 	stw	r9,4(sp)
8020bfe8:	da800015 	stw	r10,0(sp)
8020bfec:	020cc5c0 	call	8020cc5c <__clzsi2>
8020bff0:	10800804 	addi	r2,r2,32
8020bff4:	da800017 	ldw	r10,0(sp)
8020bff8:	da400117 	ldw	r9,4(sp)
8020bffc:	d9800217 	ldw	r6,8(sp)
8020c000:	003f3006 	br	8020bcc4 <__reset+0xfa1ebcc4>
8020c004:	143ff604 	addi	r16,r2,-40
8020c008:	9c20983a 	sll	r16,r19,r16
8020c00c:	0029883a 	mov	r20,zero
8020c010:	003f1606 	br	8020bc6c <__reset+0xfa1ebc6c>
8020c014:	d9800215 	stw	r6,8(sp)
8020c018:	d9c00015 	stw	r7,0(sp)
8020c01c:	da400115 	stw	r9,4(sp)
8020c020:	020cc5c0 	call	8020cc5c <__clzsi2>
8020c024:	10800804 	addi	r2,r2,32
8020c028:	da400117 	ldw	r9,4(sp)
8020c02c:	d9c00017 	ldw	r7,0(sp)
8020c030:	d9800217 	ldw	r6,8(sp)
8020c034:	003f0306 	br	8020bc44 <__reset+0xfa1ebc44>
8020c038:	00c00044 	movi	r3,1
8020c03c:	1947c83a 	sub	r3,r3,r5
8020c040:	00800e04 	movi	r2,56
8020c044:	10feda16 	blt	r2,r3,8020bbb0 <__reset+0xfa1ebbb0>
8020c048:	008007c4 	movi	r2,31
8020c04c:	10c01b16 	blt	r2,r3,8020c0bc <__muldf3+0x678>
8020c050:	00800804 	movi	r2,32
8020c054:	10c5c83a 	sub	r2,r2,r3
8020c058:	888a983a 	sll	r5,r17,r2
8020c05c:	40c8d83a 	srl	r4,r8,r3
8020c060:	4084983a 	sll	r2,r8,r2
8020c064:	88e2d83a 	srl	r17,r17,r3
8020c068:	2906b03a 	or	r3,r5,r4
8020c06c:	1004c03a 	cmpne	r2,r2,zero
8020c070:	1886b03a 	or	r3,r3,r2
8020c074:	188001cc 	andi	r2,r3,7
8020c078:	10000726 	beq	r2,zero,8020c098 <__muldf3+0x654>
8020c07c:	188003cc 	andi	r2,r3,15
8020c080:	01000104 	movi	r4,4
8020c084:	11000426 	beq	r2,r4,8020c098 <__muldf3+0x654>
8020c088:	1805883a 	mov	r2,r3
8020c08c:	10c00104 	addi	r3,r2,4
8020c090:	1885803a 	cmpltu	r2,r3,r2
8020c094:	88a3883a 	add	r17,r17,r2
8020c098:	8880202c 	andhi	r2,r17,128
8020c09c:	10001c26 	beq	r2,zero,8020c110 <__muldf3+0x6cc>
8020c0a0:	b02b883a 	mov	r21,r22
8020c0a4:	00800044 	movi	r2,1
8020c0a8:	000b883a 	mov	r5,zero
8020c0ac:	0029883a 	mov	r20,zero
8020c0b0:	003ec306 	br	8020bbc0 <__reset+0xfa1ebbc0>
8020c0b4:	5805883a 	mov	r2,r11
8020c0b8:	003f9906 	br	8020bf20 <__reset+0xfa1ebf20>
8020c0bc:	00bff844 	movi	r2,-31
8020c0c0:	1145c83a 	sub	r2,r2,r5
8020c0c4:	8888d83a 	srl	r4,r17,r2
8020c0c8:	00800804 	movi	r2,32
8020c0cc:	18801a26 	beq	r3,r2,8020c138 <__muldf3+0x6f4>
8020c0d0:	00801004 	movi	r2,64
8020c0d4:	10c5c83a 	sub	r2,r2,r3
8020c0d8:	8884983a 	sll	r2,r17,r2
8020c0dc:	1204b03a 	or	r2,r2,r8
8020c0e0:	1004c03a 	cmpne	r2,r2,zero
8020c0e4:	2084b03a 	or	r2,r4,r2
8020c0e8:	144001cc 	andi	r17,r2,7
8020c0ec:	88000d1e 	bne	r17,zero,8020c124 <__muldf3+0x6e0>
8020c0f0:	000b883a 	mov	r5,zero
8020c0f4:	1028d0fa 	srli	r20,r2,3
8020c0f8:	b02b883a 	mov	r21,r22
8020c0fc:	0005883a 	mov	r2,zero
8020c100:	a468b03a 	or	r20,r20,r17
8020c104:	003eae06 	br	8020bbc0 <__reset+0xfa1ebbc0>
8020c108:	1007883a 	mov	r3,r2
8020c10c:	0023883a 	mov	r17,zero
8020c110:	880a927a 	slli	r5,r17,9
8020c114:	1805883a 	mov	r2,r3
8020c118:	8822977a 	slli	r17,r17,29
8020c11c:	280ad33a 	srli	r5,r5,12
8020c120:	003ff406 	br	8020c0f4 <__reset+0xfa1ec0f4>
8020c124:	10c003cc 	andi	r3,r2,15
8020c128:	01000104 	movi	r4,4
8020c12c:	193ff626 	beq	r3,r4,8020c108 <__reset+0xfa1ec108>
8020c130:	0023883a 	mov	r17,zero
8020c134:	003fd506 	br	8020c08c <__reset+0xfa1ec08c>
8020c138:	0005883a 	mov	r2,zero
8020c13c:	003fe706 	br	8020c0dc <__reset+0xfa1ec0dc>
8020c140:	00800434 	movhi	r2,16
8020c144:	89400234 	orhi	r5,r17,8
8020c148:	10bfffc4 	addi	r2,r2,-1
8020c14c:	b02b883a 	mov	r21,r22
8020c150:	288a703a 	and	r5,r5,r2
8020c154:	4029883a 	mov	r20,r8
8020c158:	003eff06 	br	8020bd58 <__reset+0xfa1ebd58>

8020c15c <__subdf3>:
8020c15c:	02000434 	movhi	r8,16
8020c160:	423fffc4 	addi	r8,r8,-1
8020c164:	defffb04 	addi	sp,sp,-20
8020c168:	2a14703a 	and	r10,r5,r8
8020c16c:	3812d53a 	srli	r9,r7,20
8020c170:	3a10703a 	and	r8,r7,r8
8020c174:	2006d77a 	srli	r3,r4,29
8020c178:	3004d77a 	srli	r2,r6,29
8020c17c:	dc000015 	stw	r16,0(sp)
8020c180:	501490fa 	slli	r10,r10,3
8020c184:	2820d53a 	srli	r16,r5,20
8020c188:	401090fa 	slli	r8,r8,3
8020c18c:	dc800215 	stw	r18,8(sp)
8020c190:	dc400115 	stw	r17,4(sp)
8020c194:	dfc00415 	stw	ra,16(sp)
8020c198:	202290fa 	slli	r17,r4,3
8020c19c:	dcc00315 	stw	r19,12(sp)
8020c1a0:	4a41ffcc 	andi	r9,r9,2047
8020c1a4:	0101ffc4 	movi	r4,2047
8020c1a8:	2824d7fa 	srli	r18,r5,31
8020c1ac:	8401ffcc 	andi	r16,r16,2047
8020c1b0:	50c6b03a 	or	r3,r10,r3
8020c1b4:	380ed7fa 	srli	r7,r7,31
8020c1b8:	408ab03a 	or	r5,r8,r2
8020c1bc:	300c90fa 	slli	r6,r6,3
8020c1c0:	49009626 	beq	r9,r4,8020c41c <__subdf3+0x2c0>
8020c1c4:	39c0005c 	xori	r7,r7,1
8020c1c8:	8245c83a 	sub	r2,r16,r9
8020c1cc:	3c807426 	beq	r7,r18,8020c3a0 <__subdf3+0x244>
8020c1d0:	0080af0e 	bge	zero,r2,8020c490 <__subdf3+0x334>
8020c1d4:	48002a1e 	bne	r9,zero,8020c280 <__subdf3+0x124>
8020c1d8:	2988b03a 	or	r4,r5,r6
8020c1dc:	20009a1e 	bne	r4,zero,8020c448 <__subdf3+0x2ec>
8020c1e0:	888001cc 	andi	r2,r17,7
8020c1e4:	10000726 	beq	r2,zero,8020c204 <__subdf3+0xa8>
8020c1e8:	888003cc 	andi	r2,r17,15
8020c1ec:	01000104 	movi	r4,4
8020c1f0:	11000426 	beq	r2,r4,8020c204 <__subdf3+0xa8>
8020c1f4:	890b883a 	add	r5,r17,r4
8020c1f8:	2c63803a 	cmpltu	r17,r5,r17
8020c1fc:	1c47883a 	add	r3,r3,r17
8020c200:	2823883a 	mov	r17,r5
8020c204:	1880202c 	andhi	r2,r3,128
8020c208:	10005926 	beq	r2,zero,8020c370 <__subdf3+0x214>
8020c20c:	84000044 	addi	r16,r16,1
8020c210:	0081ffc4 	movi	r2,2047
8020c214:	8080be26 	beq	r16,r2,8020c510 <__subdf3+0x3b4>
8020c218:	017fe034 	movhi	r5,65408
8020c21c:	297fffc4 	addi	r5,r5,-1
8020c220:	1946703a 	and	r3,r3,r5
8020c224:	1804977a 	slli	r2,r3,29
8020c228:	1806927a 	slli	r3,r3,9
8020c22c:	8822d0fa 	srli	r17,r17,3
8020c230:	8401ffcc 	andi	r16,r16,2047
8020c234:	180ad33a 	srli	r5,r3,12
8020c238:	9100004c 	andi	r4,r18,1
8020c23c:	1444b03a 	or	r2,r2,r17
8020c240:	80c1ffcc 	andi	r3,r16,2047
8020c244:	1820953a 	slli	r16,r3,20
8020c248:	20c03fcc 	andi	r3,r4,255
8020c24c:	180897fa 	slli	r4,r3,31
8020c250:	00c00434 	movhi	r3,16
8020c254:	18ffffc4 	addi	r3,r3,-1
8020c258:	28c6703a 	and	r3,r5,r3
8020c25c:	1c06b03a 	or	r3,r3,r16
8020c260:	1906b03a 	or	r3,r3,r4
8020c264:	dfc00417 	ldw	ra,16(sp)
8020c268:	dcc00317 	ldw	r19,12(sp)
8020c26c:	dc800217 	ldw	r18,8(sp)
8020c270:	dc400117 	ldw	r17,4(sp)
8020c274:	dc000017 	ldw	r16,0(sp)
8020c278:	dec00504 	addi	sp,sp,20
8020c27c:	f800283a 	ret
8020c280:	0101ffc4 	movi	r4,2047
8020c284:	813fd626 	beq	r16,r4,8020c1e0 <__reset+0xfa1ec1e0>
8020c288:	29402034 	orhi	r5,r5,128
8020c28c:	01000e04 	movi	r4,56
8020c290:	2080a316 	blt	r4,r2,8020c520 <__subdf3+0x3c4>
8020c294:	010007c4 	movi	r4,31
8020c298:	2080c616 	blt	r4,r2,8020c5b4 <__subdf3+0x458>
8020c29c:	01000804 	movi	r4,32
8020c2a0:	2089c83a 	sub	r4,r4,r2
8020c2a4:	2910983a 	sll	r8,r5,r4
8020c2a8:	308ed83a 	srl	r7,r6,r2
8020c2ac:	3108983a 	sll	r4,r6,r4
8020c2b0:	2884d83a 	srl	r2,r5,r2
8020c2b4:	41ccb03a 	or	r6,r8,r7
8020c2b8:	2008c03a 	cmpne	r4,r4,zero
8020c2bc:	310cb03a 	or	r6,r6,r4
8020c2c0:	898dc83a 	sub	r6,r17,r6
8020c2c4:	89a3803a 	cmpltu	r17,r17,r6
8020c2c8:	1887c83a 	sub	r3,r3,r2
8020c2cc:	1c47c83a 	sub	r3,r3,r17
8020c2d0:	3023883a 	mov	r17,r6
8020c2d4:	1880202c 	andhi	r2,r3,128
8020c2d8:	10002326 	beq	r2,zero,8020c368 <__subdf3+0x20c>
8020c2dc:	04c02034 	movhi	r19,128
8020c2e0:	9cffffc4 	addi	r19,r19,-1
8020c2e4:	1ce6703a 	and	r19,r3,r19
8020c2e8:	98007a26 	beq	r19,zero,8020c4d4 <__subdf3+0x378>
8020c2ec:	9809883a 	mov	r4,r19
8020c2f0:	020cc5c0 	call	8020cc5c <__clzsi2>
8020c2f4:	113ffe04 	addi	r4,r2,-8
8020c2f8:	00c007c4 	movi	r3,31
8020c2fc:	19007b16 	blt	r3,r4,8020c4ec <__subdf3+0x390>
8020c300:	00800804 	movi	r2,32
8020c304:	1105c83a 	sub	r2,r2,r4
8020c308:	8884d83a 	srl	r2,r17,r2
8020c30c:	9906983a 	sll	r3,r19,r4
8020c310:	8922983a 	sll	r17,r17,r4
8020c314:	10c4b03a 	or	r2,r2,r3
8020c318:	24007816 	blt	r4,r16,8020c4fc <__subdf3+0x3a0>
8020c31c:	2421c83a 	sub	r16,r4,r16
8020c320:	80c00044 	addi	r3,r16,1
8020c324:	010007c4 	movi	r4,31
8020c328:	20c09516 	blt	r4,r3,8020c580 <__subdf3+0x424>
8020c32c:	01400804 	movi	r5,32
8020c330:	28cbc83a 	sub	r5,r5,r3
8020c334:	88c8d83a 	srl	r4,r17,r3
8020c338:	8962983a 	sll	r17,r17,r5
8020c33c:	114a983a 	sll	r5,r2,r5
8020c340:	10c6d83a 	srl	r3,r2,r3
8020c344:	8804c03a 	cmpne	r2,r17,zero
8020c348:	290ab03a 	or	r5,r5,r4
8020c34c:	28a2b03a 	or	r17,r5,r2
8020c350:	0021883a 	mov	r16,zero
8020c354:	003fa206 	br	8020c1e0 <__reset+0xfa1ec1e0>
8020c358:	2090b03a 	or	r8,r4,r2
8020c35c:	40018e26 	beq	r8,zero,8020c998 <__subdf3+0x83c>
8020c360:	1007883a 	mov	r3,r2
8020c364:	2023883a 	mov	r17,r4
8020c368:	888001cc 	andi	r2,r17,7
8020c36c:	103f9e1e 	bne	r2,zero,8020c1e8 <__reset+0xfa1ec1e8>
8020c370:	1804977a 	slli	r2,r3,29
8020c374:	8822d0fa 	srli	r17,r17,3
8020c378:	1810d0fa 	srli	r8,r3,3
8020c37c:	9100004c 	andi	r4,r18,1
8020c380:	1444b03a 	or	r2,r2,r17
8020c384:	00c1ffc4 	movi	r3,2047
8020c388:	80c02826 	beq	r16,r3,8020c42c <__subdf3+0x2d0>
8020c38c:	01400434 	movhi	r5,16
8020c390:	297fffc4 	addi	r5,r5,-1
8020c394:	80e0703a 	and	r16,r16,r3
8020c398:	414a703a 	and	r5,r8,r5
8020c39c:	003fa806 	br	8020c240 <__reset+0xfa1ec240>
8020c3a0:	0080630e 	bge	zero,r2,8020c530 <__subdf3+0x3d4>
8020c3a4:	48003026 	beq	r9,zero,8020c468 <__subdf3+0x30c>
8020c3a8:	0101ffc4 	movi	r4,2047
8020c3ac:	813f8c26 	beq	r16,r4,8020c1e0 <__reset+0xfa1ec1e0>
8020c3b0:	29402034 	orhi	r5,r5,128
8020c3b4:	01000e04 	movi	r4,56
8020c3b8:	2080a90e 	bge	r4,r2,8020c660 <__subdf3+0x504>
8020c3bc:	298cb03a 	or	r6,r5,r6
8020c3c0:	3012c03a 	cmpne	r9,r6,zero
8020c3c4:	0005883a 	mov	r2,zero
8020c3c8:	4c53883a 	add	r9,r9,r17
8020c3cc:	4c63803a 	cmpltu	r17,r9,r17
8020c3d0:	10c7883a 	add	r3,r2,r3
8020c3d4:	88c7883a 	add	r3,r17,r3
8020c3d8:	4823883a 	mov	r17,r9
8020c3dc:	1880202c 	andhi	r2,r3,128
8020c3e0:	1000d026 	beq	r2,zero,8020c724 <__subdf3+0x5c8>
8020c3e4:	84000044 	addi	r16,r16,1
8020c3e8:	0081ffc4 	movi	r2,2047
8020c3ec:	8080fe26 	beq	r16,r2,8020c7e8 <__subdf3+0x68c>
8020c3f0:	00bfe034 	movhi	r2,65408
8020c3f4:	10bfffc4 	addi	r2,r2,-1
8020c3f8:	1886703a 	and	r3,r3,r2
8020c3fc:	880ad07a 	srli	r5,r17,1
8020c400:	180497fa 	slli	r2,r3,31
8020c404:	8900004c 	andi	r4,r17,1
8020c408:	2922b03a 	or	r17,r5,r4
8020c40c:	1806d07a 	srli	r3,r3,1
8020c410:	1462b03a 	or	r17,r2,r17
8020c414:	3825883a 	mov	r18,r7
8020c418:	003f7106 	br	8020c1e0 <__reset+0xfa1ec1e0>
8020c41c:	2984b03a 	or	r2,r5,r6
8020c420:	103f6826 	beq	r2,zero,8020c1c4 <__reset+0xfa1ec1c4>
8020c424:	39c03fcc 	andi	r7,r7,255
8020c428:	003f6706 	br	8020c1c8 <__reset+0xfa1ec1c8>
8020c42c:	4086b03a 	or	r3,r8,r2
8020c430:	18015226 	beq	r3,zero,8020c97c <__subdf3+0x820>
8020c434:	00c00434 	movhi	r3,16
8020c438:	41400234 	orhi	r5,r8,8
8020c43c:	18ffffc4 	addi	r3,r3,-1
8020c440:	28ca703a 	and	r5,r5,r3
8020c444:	003f7e06 	br	8020c240 <__reset+0xfa1ec240>
8020c448:	10bfffc4 	addi	r2,r2,-1
8020c44c:	1000491e 	bne	r2,zero,8020c574 <__subdf3+0x418>
8020c450:	898fc83a 	sub	r7,r17,r6
8020c454:	89e3803a 	cmpltu	r17,r17,r7
8020c458:	1947c83a 	sub	r3,r3,r5
8020c45c:	1c47c83a 	sub	r3,r3,r17
8020c460:	3823883a 	mov	r17,r7
8020c464:	003f9b06 	br	8020c2d4 <__reset+0xfa1ec2d4>
8020c468:	2988b03a 	or	r4,r5,r6
8020c46c:	203f5c26 	beq	r4,zero,8020c1e0 <__reset+0xfa1ec1e0>
8020c470:	10bfffc4 	addi	r2,r2,-1
8020c474:	1000931e 	bne	r2,zero,8020c6c4 <__subdf3+0x568>
8020c478:	898d883a 	add	r6,r17,r6
8020c47c:	3463803a 	cmpltu	r17,r6,r17
8020c480:	1947883a 	add	r3,r3,r5
8020c484:	88c7883a 	add	r3,r17,r3
8020c488:	3023883a 	mov	r17,r6
8020c48c:	003fd306 	br	8020c3dc <__reset+0xfa1ec3dc>
8020c490:	1000541e 	bne	r2,zero,8020c5e4 <__subdf3+0x488>
8020c494:	80800044 	addi	r2,r16,1
8020c498:	1081ffcc 	andi	r2,r2,2047
8020c49c:	01000044 	movi	r4,1
8020c4a0:	2080a20e 	bge	r4,r2,8020c72c <__subdf3+0x5d0>
8020c4a4:	8989c83a 	sub	r4,r17,r6
8020c4a8:	8905803a 	cmpltu	r2,r17,r4
8020c4ac:	1967c83a 	sub	r19,r3,r5
8020c4b0:	98a7c83a 	sub	r19,r19,r2
8020c4b4:	9880202c 	andhi	r2,r19,128
8020c4b8:	10006326 	beq	r2,zero,8020c648 <__subdf3+0x4ec>
8020c4bc:	3463c83a 	sub	r17,r6,r17
8020c4c0:	28c7c83a 	sub	r3,r5,r3
8020c4c4:	344d803a 	cmpltu	r6,r6,r17
8020c4c8:	19a7c83a 	sub	r19,r3,r6
8020c4cc:	3825883a 	mov	r18,r7
8020c4d0:	983f861e 	bne	r19,zero,8020c2ec <__reset+0xfa1ec2ec>
8020c4d4:	8809883a 	mov	r4,r17
8020c4d8:	020cc5c0 	call	8020cc5c <__clzsi2>
8020c4dc:	10800804 	addi	r2,r2,32
8020c4e0:	113ffe04 	addi	r4,r2,-8
8020c4e4:	00c007c4 	movi	r3,31
8020c4e8:	193f850e 	bge	r3,r4,8020c300 <__reset+0xfa1ec300>
8020c4ec:	10bff604 	addi	r2,r2,-40
8020c4f0:	8884983a 	sll	r2,r17,r2
8020c4f4:	0023883a 	mov	r17,zero
8020c4f8:	243f880e 	bge	r4,r16,8020c31c <__reset+0xfa1ec31c>
8020c4fc:	00ffe034 	movhi	r3,65408
8020c500:	18ffffc4 	addi	r3,r3,-1
8020c504:	8121c83a 	sub	r16,r16,r4
8020c508:	10c6703a 	and	r3,r2,r3
8020c50c:	003f3406 	br	8020c1e0 <__reset+0xfa1ec1e0>
8020c510:	9100004c 	andi	r4,r18,1
8020c514:	000b883a 	mov	r5,zero
8020c518:	0005883a 	mov	r2,zero
8020c51c:	003f4806 	br	8020c240 <__reset+0xfa1ec240>
8020c520:	298cb03a 	or	r6,r5,r6
8020c524:	300cc03a 	cmpne	r6,r6,zero
8020c528:	0005883a 	mov	r2,zero
8020c52c:	003f6406 	br	8020c2c0 <__reset+0xfa1ec2c0>
8020c530:	10009a1e 	bne	r2,zero,8020c79c <__subdf3+0x640>
8020c534:	82400044 	addi	r9,r16,1
8020c538:	4881ffcc 	andi	r2,r9,2047
8020c53c:	02800044 	movi	r10,1
8020c540:	5080670e 	bge	r10,r2,8020c6e0 <__subdf3+0x584>
8020c544:	0081ffc4 	movi	r2,2047
8020c548:	4880af26 	beq	r9,r2,8020c808 <__subdf3+0x6ac>
8020c54c:	898d883a 	add	r6,r17,r6
8020c550:	1945883a 	add	r2,r3,r5
8020c554:	3447803a 	cmpltu	r3,r6,r17
8020c558:	1887883a 	add	r3,r3,r2
8020c55c:	182297fa 	slli	r17,r3,31
8020c560:	300cd07a 	srli	r6,r6,1
8020c564:	1806d07a 	srli	r3,r3,1
8020c568:	4821883a 	mov	r16,r9
8020c56c:	89a2b03a 	or	r17,r17,r6
8020c570:	003f1b06 	br	8020c1e0 <__reset+0xfa1ec1e0>
8020c574:	0101ffc4 	movi	r4,2047
8020c578:	813f441e 	bne	r16,r4,8020c28c <__reset+0xfa1ec28c>
8020c57c:	003f1806 	br	8020c1e0 <__reset+0xfa1ec1e0>
8020c580:	843ff844 	addi	r16,r16,-31
8020c584:	01400804 	movi	r5,32
8020c588:	1408d83a 	srl	r4,r2,r16
8020c58c:	19405026 	beq	r3,r5,8020c6d0 <__subdf3+0x574>
8020c590:	01401004 	movi	r5,64
8020c594:	28c7c83a 	sub	r3,r5,r3
8020c598:	10c4983a 	sll	r2,r2,r3
8020c59c:	88a2b03a 	or	r17,r17,r2
8020c5a0:	8822c03a 	cmpne	r17,r17,zero
8020c5a4:	2462b03a 	or	r17,r4,r17
8020c5a8:	0007883a 	mov	r3,zero
8020c5ac:	0021883a 	mov	r16,zero
8020c5b0:	003f6d06 	br	8020c368 <__reset+0xfa1ec368>
8020c5b4:	11fff804 	addi	r7,r2,-32
8020c5b8:	01000804 	movi	r4,32
8020c5bc:	29ced83a 	srl	r7,r5,r7
8020c5c0:	11004526 	beq	r2,r4,8020c6d8 <__subdf3+0x57c>
8020c5c4:	01001004 	movi	r4,64
8020c5c8:	2089c83a 	sub	r4,r4,r2
8020c5cc:	2904983a 	sll	r2,r5,r4
8020c5d0:	118cb03a 	or	r6,r2,r6
8020c5d4:	300cc03a 	cmpne	r6,r6,zero
8020c5d8:	398cb03a 	or	r6,r7,r6
8020c5dc:	0005883a 	mov	r2,zero
8020c5e0:	003f3706 	br	8020c2c0 <__reset+0xfa1ec2c0>
8020c5e4:	80002a26 	beq	r16,zero,8020c690 <__subdf3+0x534>
8020c5e8:	0101ffc4 	movi	r4,2047
8020c5ec:	49006626 	beq	r9,r4,8020c788 <__subdf3+0x62c>
8020c5f0:	0085c83a 	sub	r2,zero,r2
8020c5f4:	18c02034 	orhi	r3,r3,128
8020c5f8:	01000e04 	movi	r4,56
8020c5fc:	20807e16 	blt	r4,r2,8020c7f8 <__subdf3+0x69c>
8020c600:	010007c4 	movi	r4,31
8020c604:	2080e716 	blt	r4,r2,8020c9a4 <__subdf3+0x848>
8020c608:	01000804 	movi	r4,32
8020c60c:	2089c83a 	sub	r4,r4,r2
8020c610:	1914983a 	sll	r10,r3,r4
8020c614:	8890d83a 	srl	r8,r17,r2
8020c618:	8908983a 	sll	r4,r17,r4
8020c61c:	1884d83a 	srl	r2,r3,r2
8020c620:	5222b03a 	or	r17,r10,r8
8020c624:	2006c03a 	cmpne	r3,r4,zero
8020c628:	88e2b03a 	or	r17,r17,r3
8020c62c:	3463c83a 	sub	r17,r6,r17
8020c630:	2885c83a 	sub	r2,r5,r2
8020c634:	344d803a 	cmpltu	r6,r6,r17
8020c638:	1187c83a 	sub	r3,r2,r6
8020c63c:	4821883a 	mov	r16,r9
8020c640:	3825883a 	mov	r18,r7
8020c644:	003f2306 	br	8020c2d4 <__reset+0xfa1ec2d4>
8020c648:	24d0b03a 	or	r8,r4,r19
8020c64c:	40001b1e 	bne	r8,zero,8020c6bc <__subdf3+0x560>
8020c650:	0005883a 	mov	r2,zero
8020c654:	0009883a 	mov	r4,zero
8020c658:	0021883a 	mov	r16,zero
8020c65c:	003f4906 	br	8020c384 <__reset+0xfa1ec384>
8020c660:	010007c4 	movi	r4,31
8020c664:	20803a16 	blt	r4,r2,8020c750 <__subdf3+0x5f4>
8020c668:	01000804 	movi	r4,32
8020c66c:	2089c83a 	sub	r4,r4,r2
8020c670:	2912983a 	sll	r9,r5,r4
8020c674:	3090d83a 	srl	r8,r6,r2
8020c678:	3108983a 	sll	r4,r6,r4
8020c67c:	2884d83a 	srl	r2,r5,r2
8020c680:	4a12b03a 	or	r9,r9,r8
8020c684:	2008c03a 	cmpne	r4,r4,zero
8020c688:	4912b03a 	or	r9,r9,r4
8020c68c:	003f4e06 	br	8020c3c8 <__reset+0xfa1ec3c8>
8020c690:	1c48b03a 	or	r4,r3,r17
8020c694:	20003c26 	beq	r4,zero,8020c788 <__subdf3+0x62c>
8020c698:	0084303a 	nor	r2,zero,r2
8020c69c:	1000381e 	bne	r2,zero,8020c780 <__subdf3+0x624>
8020c6a0:	3463c83a 	sub	r17,r6,r17
8020c6a4:	28c5c83a 	sub	r2,r5,r3
8020c6a8:	344d803a 	cmpltu	r6,r6,r17
8020c6ac:	1187c83a 	sub	r3,r2,r6
8020c6b0:	4821883a 	mov	r16,r9
8020c6b4:	3825883a 	mov	r18,r7
8020c6b8:	003f0606 	br	8020c2d4 <__reset+0xfa1ec2d4>
8020c6bc:	2023883a 	mov	r17,r4
8020c6c0:	003f0906 	br	8020c2e8 <__reset+0xfa1ec2e8>
8020c6c4:	0101ffc4 	movi	r4,2047
8020c6c8:	813f3a1e 	bne	r16,r4,8020c3b4 <__reset+0xfa1ec3b4>
8020c6cc:	003ec406 	br	8020c1e0 <__reset+0xfa1ec1e0>
8020c6d0:	0005883a 	mov	r2,zero
8020c6d4:	003fb106 	br	8020c59c <__reset+0xfa1ec59c>
8020c6d8:	0005883a 	mov	r2,zero
8020c6dc:	003fbc06 	br	8020c5d0 <__reset+0xfa1ec5d0>
8020c6e0:	1c44b03a 	or	r2,r3,r17
8020c6e4:	80008e1e 	bne	r16,zero,8020c920 <__subdf3+0x7c4>
8020c6e8:	1000c826 	beq	r2,zero,8020ca0c <__subdf3+0x8b0>
8020c6ec:	2984b03a 	or	r2,r5,r6
8020c6f0:	103ebb26 	beq	r2,zero,8020c1e0 <__reset+0xfa1ec1e0>
8020c6f4:	8989883a 	add	r4,r17,r6
8020c6f8:	1945883a 	add	r2,r3,r5
8020c6fc:	2447803a 	cmpltu	r3,r4,r17
8020c700:	1887883a 	add	r3,r3,r2
8020c704:	1880202c 	andhi	r2,r3,128
8020c708:	2023883a 	mov	r17,r4
8020c70c:	103f1626 	beq	r2,zero,8020c368 <__reset+0xfa1ec368>
8020c710:	00bfe034 	movhi	r2,65408
8020c714:	10bfffc4 	addi	r2,r2,-1
8020c718:	5021883a 	mov	r16,r10
8020c71c:	1886703a 	and	r3,r3,r2
8020c720:	003eaf06 	br	8020c1e0 <__reset+0xfa1ec1e0>
8020c724:	3825883a 	mov	r18,r7
8020c728:	003f0f06 	br	8020c368 <__reset+0xfa1ec368>
8020c72c:	1c44b03a 	or	r2,r3,r17
8020c730:	8000251e 	bne	r16,zero,8020c7c8 <__subdf3+0x66c>
8020c734:	1000661e 	bne	r2,zero,8020c8d0 <__subdf3+0x774>
8020c738:	2990b03a 	or	r8,r5,r6
8020c73c:	40009626 	beq	r8,zero,8020c998 <__subdf3+0x83c>
8020c740:	2807883a 	mov	r3,r5
8020c744:	3023883a 	mov	r17,r6
8020c748:	3825883a 	mov	r18,r7
8020c74c:	003ea406 	br	8020c1e0 <__reset+0xfa1ec1e0>
8020c750:	127ff804 	addi	r9,r2,-32
8020c754:	01000804 	movi	r4,32
8020c758:	2a52d83a 	srl	r9,r5,r9
8020c75c:	11008c26 	beq	r2,r4,8020c990 <__subdf3+0x834>
8020c760:	01001004 	movi	r4,64
8020c764:	2085c83a 	sub	r2,r4,r2
8020c768:	2884983a 	sll	r2,r5,r2
8020c76c:	118cb03a 	or	r6,r2,r6
8020c770:	300cc03a 	cmpne	r6,r6,zero
8020c774:	4992b03a 	or	r9,r9,r6
8020c778:	0005883a 	mov	r2,zero
8020c77c:	003f1206 	br	8020c3c8 <__reset+0xfa1ec3c8>
8020c780:	0101ffc4 	movi	r4,2047
8020c784:	493f9c1e 	bne	r9,r4,8020c5f8 <__reset+0xfa1ec5f8>
8020c788:	2807883a 	mov	r3,r5
8020c78c:	3023883a 	mov	r17,r6
8020c790:	4821883a 	mov	r16,r9
8020c794:	3825883a 	mov	r18,r7
8020c798:	003e9106 	br	8020c1e0 <__reset+0xfa1ec1e0>
8020c79c:	80001f1e 	bne	r16,zero,8020c81c <__subdf3+0x6c0>
8020c7a0:	1c48b03a 	or	r4,r3,r17
8020c7a4:	20005a26 	beq	r4,zero,8020c910 <__subdf3+0x7b4>
8020c7a8:	0084303a 	nor	r2,zero,r2
8020c7ac:	1000561e 	bne	r2,zero,8020c908 <__subdf3+0x7ac>
8020c7b0:	89a3883a 	add	r17,r17,r6
8020c7b4:	1945883a 	add	r2,r3,r5
8020c7b8:	898d803a 	cmpltu	r6,r17,r6
8020c7bc:	3087883a 	add	r3,r6,r2
8020c7c0:	4821883a 	mov	r16,r9
8020c7c4:	003f0506 	br	8020c3dc <__reset+0xfa1ec3dc>
8020c7c8:	10002b1e 	bne	r2,zero,8020c878 <__subdf3+0x71c>
8020c7cc:	2984b03a 	or	r2,r5,r6
8020c7d0:	10008026 	beq	r2,zero,8020c9d4 <__subdf3+0x878>
8020c7d4:	2807883a 	mov	r3,r5
8020c7d8:	3023883a 	mov	r17,r6
8020c7dc:	3825883a 	mov	r18,r7
8020c7e0:	0401ffc4 	movi	r16,2047
8020c7e4:	003e7e06 	br	8020c1e0 <__reset+0xfa1ec1e0>
8020c7e8:	3809883a 	mov	r4,r7
8020c7ec:	0011883a 	mov	r8,zero
8020c7f0:	0005883a 	mov	r2,zero
8020c7f4:	003ee306 	br	8020c384 <__reset+0xfa1ec384>
8020c7f8:	1c62b03a 	or	r17,r3,r17
8020c7fc:	8822c03a 	cmpne	r17,r17,zero
8020c800:	0005883a 	mov	r2,zero
8020c804:	003f8906 	br	8020c62c <__reset+0xfa1ec62c>
8020c808:	3809883a 	mov	r4,r7
8020c80c:	4821883a 	mov	r16,r9
8020c810:	0011883a 	mov	r8,zero
8020c814:	0005883a 	mov	r2,zero
8020c818:	003eda06 	br	8020c384 <__reset+0xfa1ec384>
8020c81c:	0101ffc4 	movi	r4,2047
8020c820:	49003b26 	beq	r9,r4,8020c910 <__subdf3+0x7b4>
8020c824:	0085c83a 	sub	r2,zero,r2
8020c828:	18c02034 	orhi	r3,r3,128
8020c82c:	01000e04 	movi	r4,56
8020c830:	20806e16 	blt	r4,r2,8020c9ec <__subdf3+0x890>
8020c834:	010007c4 	movi	r4,31
8020c838:	20807716 	blt	r4,r2,8020ca18 <__subdf3+0x8bc>
8020c83c:	01000804 	movi	r4,32
8020c840:	2089c83a 	sub	r4,r4,r2
8020c844:	1914983a 	sll	r10,r3,r4
8020c848:	8890d83a 	srl	r8,r17,r2
8020c84c:	8908983a 	sll	r4,r17,r4
8020c850:	1884d83a 	srl	r2,r3,r2
8020c854:	5222b03a 	or	r17,r10,r8
8020c858:	2006c03a 	cmpne	r3,r4,zero
8020c85c:	88e2b03a 	or	r17,r17,r3
8020c860:	89a3883a 	add	r17,r17,r6
8020c864:	1145883a 	add	r2,r2,r5
8020c868:	898d803a 	cmpltu	r6,r17,r6
8020c86c:	3087883a 	add	r3,r6,r2
8020c870:	4821883a 	mov	r16,r9
8020c874:	003ed906 	br	8020c3dc <__reset+0xfa1ec3dc>
8020c878:	2984b03a 	or	r2,r5,r6
8020c87c:	10004226 	beq	r2,zero,8020c988 <__subdf3+0x82c>
8020c880:	1808d0fa 	srli	r4,r3,3
8020c884:	8822d0fa 	srli	r17,r17,3
8020c888:	1806977a 	slli	r3,r3,29
8020c88c:	2080022c 	andhi	r2,r4,8
8020c890:	1c62b03a 	or	r17,r3,r17
8020c894:	10000826 	beq	r2,zero,8020c8b8 <__subdf3+0x75c>
8020c898:	2812d0fa 	srli	r9,r5,3
8020c89c:	4880022c 	andhi	r2,r9,8
8020c8a0:	1000051e 	bne	r2,zero,8020c8b8 <__subdf3+0x75c>
8020c8a4:	300cd0fa 	srli	r6,r6,3
8020c8a8:	2804977a 	slli	r2,r5,29
8020c8ac:	4809883a 	mov	r4,r9
8020c8b0:	3825883a 	mov	r18,r7
8020c8b4:	11a2b03a 	or	r17,r2,r6
8020c8b8:	8806d77a 	srli	r3,r17,29
8020c8bc:	200890fa 	slli	r4,r4,3
8020c8c0:	882290fa 	slli	r17,r17,3
8020c8c4:	0401ffc4 	movi	r16,2047
8020c8c8:	1906b03a 	or	r3,r3,r4
8020c8cc:	003e4406 	br	8020c1e0 <__reset+0xfa1ec1e0>
8020c8d0:	2984b03a 	or	r2,r5,r6
8020c8d4:	103e4226 	beq	r2,zero,8020c1e0 <__reset+0xfa1ec1e0>
8020c8d8:	8989c83a 	sub	r4,r17,r6
8020c8dc:	8911803a 	cmpltu	r8,r17,r4
8020c8e0:	1945c83a 	sub	r2,r3,r5
8020c8e4:	1205c83a 	sub	r2,r2,r8
8020c8e8:	1200202c 	andhi	r8,r2,128
8020c8ec:	403e9a26 	beq	r8,zero,8020c358 <__reset+0xfa1ec358>
8020c8f0:	3463c83a 	sub	r17,r6,r17
8020c8f4:	28c5c83a 	sub	r2,r5,r3
8020c8f8:	344d803a 	cmpltu	r6,r6,r17
8020c8fc:	1187c83a 	sub	r3,r2,r6
8020c900:	3825883a 	mov	r18,r7
8020c904:	003e3606 	br	8020c1e0 <__reset+0xfa1ec1e0>
8020c908:	0101ffc4 	movi	r4,2047
8020c90c:	493fc71e 	bne	r9,r4,8020c82c <__reset+0xfa1ec82c>
8020c910:	2807883a 	mov	r3,r5
8020c914:	3023883a 	mov	r17,r6
8020c918:	4821883a 	mov	r16,r9
8020c91c:	003e3006 	br	8020c1e0 <__reset+0xfa1ec1e0>
8020c920:	10003626 	beq	r2,zero,8020c9fc <__subdf3+0x8a0>
8020c924:	2984b03a 	or	r2,r5,r6
8020c928:	10001726 	beq	r2,zero,8020c988 <__subdf3+0x82c>
8020c92c:	1808d0fa 	srli	r4,r3,3
8020c930:	8822d0fa 	srli	r17,r17,3
8020c934:	1806977a 	slli	r3,r3,29
8020c938:	2080022c 	andhi	r2,r4,8
8020c93c:	1c62b03a 	or	r17,r3,r17
8020c940:	10000726 	beq	r2,zero,8020c960 <__subdf3+0x804>
8020c944:	2812d0fa 	srli	r9,r5,3
8020c948:	4880022c 	andhi	r2,r9,8
8020c94c:	1000041e 	bne	r2,zero,8020c960 <__subdf3+0x804>
8020c950:	300cd0fa 	srli	r6,r6,3
8020c954:	2804977a 	slli	r2,r5,29
8020c958:	4809883a 	mov	r4,r9
8020c95c:	11a2b03a 	or	r17,r2,r6
8020c960:	8806d77a 	srli	r3,r17,29
8020c964:	200890fa 	slli	r4,r4,3
8020c968:	882290fa 	slli	r17,r17,3
8020c96c:	3825883a 	mov	r18,r7
8020c970:	1906b03a 	or	r3,r3,r4
8020c974:	0401ffc4 	movi	r16,2047
8020c978:	003e1906 	br	8020c1e0 <__reset+0xfa1ec1e0>
8020c97c:	000b883a 	mov	r5,zero
8020c980:	0005883a 	mov	r2,zero
8020c984:	003e2e06 	br	8020c240 <__reset+0xfa1ec240>
8020c988:	0401ffc4 	movi	r16,2047
8020c98c:	003e1406 	br	8020c1e0 <__reset+0xfa1ec1e0>
8020c990:	0005883a 	mov	r2,zero
8020c994:	003f7506 	br	8020c76c <__reset+0xfa1ec76c>
8020c998:	0005883a 	mov	r2,zero
8020c99c:	0009883a 	mov	r4,zero
8020c9a0:	003e7806 	br	8020c384 <__reset+0xfa1ec384>
8020c9a4:	123ff804 	addi	r8,r2,-32
8020c9a8:	01000804 	movi	r4,32
8020c9ac:	1a10d83a 	srl	r8,r3,r8
8020c9b0:	11002526 	beq	r2,r4,8020ca48 <__subdf3+0x8ec>
8020c9b4:	01001004 	movi	r4,64
8020c9b8:	2085c83a 	sub	r2,r4,r2
8020c9bc:	1884983a 	sll	r2,r3,r2
8020c9c0:	1444b03a 	or	r2,r2,r17
8020c9c4:	1004c03a 	cmpne	r2,r2,zero
8020c9c8:	40a2b03a 	or	r17,r8,r2
8020c9cc:	0005883a 	mov	r2,zero
8020c9d0:	003f1606 	br	8020c62c <__reset+0xfa1ec62c>
8020c9d4:	02000434 	movhi	r8,16
8020c9d8:	0009883a 	mov	r4,zero
8020c9dc:	423fffc4 	addi	r8,r8,-1
8020c9e0:	00bfffc4 	movi	r2,-1
8020c9e4:	0401ffc4 	movi	r16,2047
8020c9e8:	003e6606 	br	8020c384 <__reset+0xfa1ec384>
8020c9ec:	1c62b03a 	or	r17,r3,r17
8020c9f0:	8822c03a 	cmpne	r17,r17,zero
8020c9f4:	0005883a 	mov	r2,zero
8020c9f8:	003f9906 	br	8020c860 <__reset+0xfa1ec860>
8020c9fc:	2807883a 	mov	r3,r5
8020ca00:	3023883a 	mov	r17,r6
8020ca04:	0401ffc4 	movi	r16,2047
8020ca08:	003df506 	br	8020c1e0 <__reset+0xfa1ec1e0>
8020ca0c:	2807883a 	mov	r3,r5
8020ca10:	3023883a 	mov	r17,r6
8020ca14:	003df206 	br	8020c1e0 <__reset+0xfa1ec1e0>
8020ca18:	123ff804 	addi	r8,r2,-32
8020ca1c:	01000804 	movi	r4,32
8020ca20:	1a10d83a 	srl	r8,r3,r8
8020ca24:	11000a26 	beq	r2,r4,8020ca50 <__subdf3+0x8f4>
8020ca28:	01001004 	movi	r4,64
8020ca2c:	2085c83a 	sub	r2,r4,r2
8020ca30:	1884983a 	sll	r2,r3,r2
8020ca34:	1444b03a 	or	r2,r2,r17
8020ca38:	1004c03a 	cmpne	r2,r2,zero
8020ca3c:	40a2b03a 	or	r17,r8,r2
8020ca40:	0005883a 	mov	r2,zero
8020ca44:	003f8606 	br	8020c860 <__reset+0xfa1ec860>
8020ca48:	0005883a 	mov	r2,zero
8020ca4c:	003fdc06 	br	8020c9c0 <__reset+0xfa1ec9c0>
8020ca50:	0005883a 	mov	r2,zero
8020ca54:	003ff706 	br	8020ca34 <__reset+0xfa1eca34>

8020ca58 <__fixdfsi>:
8020ca58:	280cd53a 	srli	r6,r5,20
8020ca5c:	00c00434 	movhi	r3,16
8020ca60:	18ffffc4 	addi	r3,r3,-1
8020ca64:	3181ffcc 	andi	r6,r6,2047
8020ca68:	01c0ff84 	movi	r7,1022
8020ca6c:	28c6703a 	and	r3,r5,r3
8020ca70:	280ad7fa 	srli	r5,r5,31
8020ca74:	3980120e 	bge	r7,r6,8020cac0 <__fixdfsi+0x68>
8020ca78:	00810744 	movi	r2,1053
8020ca7c:	11800c16 	blt	r2,r6,8020cab0 <__fixdfsi+0x58>
8020ca80:	00810cc4 	movi	r2,1075
8020ca84:	1185c83a 	sub	r2,r2,r6
8020ca88:	01c007c4 	movi	r7,31
8020ca8c:	18c00434 	orhi	r3,r3,16
8020ca90:	38800d16 	blt	r7,r2,8020cac8 <__fixdfsi+0x70>
8020ca94:	31befb44 	addi	r6,r6,-1043
8020ca98:	2084d83a 	srl	r2,r4,r2
8020ca9c:	1986983a 	sll	r3,r3,r6
8020caa0:	1884b03a 	or	r2,r3,r2
8020caa4:	28000726 	beq	r5,zero,8020cac4 <__fixdfsi+0x6c>
8020caa8:	0085c83a 	sub	r2,zero,r2
8020caac:	f800283a 	ret
8020cab0:	00a00034 	movhi	r2,32768
8020cab4:	10bfffc4 	addi	r2,r2,-1
8020cab8:	2885883a 	add	r2,r5,r2
8020cabc:	f800283a 	ret
8020cac0:	0005883a 	mov	r2,zero
8020cac4:	f800283a 	ret
8020cac8:	008104c4 	movi	r2,1043
8020cacc:	1185c83a 	sub	r2,r2,r6
8020cad0:	1884d83a 	srl	r2,r3,r2
8020cad4:	003ff306 	br	8020caa4 <__reset+0xfa1ecaa4>

8020cad8 <__floatsidf>:
8020cad8:	defffd04 	addi	sp,sp,-12
8020cadc:	dfc00215 	stw	ra,8(sp)
8020cae0:	dc400115 	stw	r17,4(sp)
8020cae4:	dc000015 	stw	r16,0(sp)
8020cae8:	20002b26 	beq	r4,zero,8020cb98 <__floatsidf+0xc0>
8020caec:	2023883a 	mov	r17,r4
8020caf0:	2020d7fa 	srli	r16,r4,31
8020caf4:	20002d16 	blt	r4,zero,8020cbac <__floatsidf+0xd4>
8020caf8:	8809883a 	mov	r4,r17
8020cafc:	020cc5c0 	call	8020cc5c <__clzsi2>
8020cb00:	01410784 	movi	r5,1054
8020cb04:	288bc83a 	sub	r5,r5,r2
8020cb08:	01010cc4 	movi	r4,1075
8020cb0c:	2149c83a 	sub	r4,r4,r5
8020cb10:	00c007c4 	movi	r3,31
8020cb14:	1900160e 	bge	r3,r4,8020cb70 <__floatsidf+0x98>
8020cb18:	00c104c4 	movi	r3,1043
8020cb1c:	1947c83a 	sub	r3,r3,r5
8020cb20:	88c6983a 	sll	r3,r17,r3
8020cb24:	00800434 	movhi	r2,16
8020cb28:	10bfffc4 	addi	r2,r2,-1
8020cb2c:	1886703a 	and	r3,r3,r2
8020cb30:	2941ffcc 	andi	r5,r5,2047
8020cb34:	800d883a 	mov	r6,r16
8020cb38:	0005883a 	mov	r2,zero
8020cb3c:	280a953a 	slli	r5,r5,20
8020cb40:	31803fcc 	andi	r6,r6,255
8020cb44:	01000434 	movhi	r4,16
8020cb48:	300c97fa 	slli	r6,r6,31
8020cb4c:	213fffc4 	addi	r4,r4,-1
8020cb50:	1906703a 	and	r3,r3,r4
8020cb54:	1946b03a 	or	r3,r3,r5
8020cb58:	1986b03a 	or	r3,r3,r6
8020cb5c:	dfc00217 	ldw	ra,8(sp)
8020cb60:	dc400117 	ldw	r17,4(sp)
8020cb64:	dc000017 	ldw	r16,0(sp)
8020cb68:	dec00304 	addi	sp,sp,12
8020cb6c:	f800283a 	ret
8020cb70:	00c002c4 	movi	r3,11
8020cb74:	1887c83a 	sub	r3,r3,r2
8020cb78:	88c6d83a 	srl	r3,r17,r3
8020cb7c:	8904983a 	sll	r2,r17,r4
8020cb80:	01000434 	movhi	r4,16
8020cb84:	213fffc4 	addi	r4,r4,-1
8020cb88:	2941ffcc 	andi	r5,r5,2047
8020cb8c:	1906703a 	and	r3,r3,r4
8020cb90:	800d883a 	mov	r6,r16
8020cb94:	003fe906 	br	8020cb3c <__reset+0xfa1ecb3c>
8020cb98:	000d883a 	mov	r6,zero
8020cb9c:	000b883a 	mov	r5,zero
8020cba0:	0007883a 	mov	r3,zero
8020cba4:	0005883a 	mov	r2,zero
8020cba8:	003fe406 	br	8020cb3c <__reset+0xfa1ecb3c>
8020cbac:	0123c83a 	sub	r17,zero,r4
8020cbb0:	003fd106 	br	8020caf8 <__reset+0xfa1ecaf8>

8020cbb4 <__floatunsidf>:
8020cbb4:	defffe04 	addi	sp,sp,-8
8020cbb8:	dc000015 	stw	r16,0(sp)
8020cbbc:	dfc00115 	stw	ra,4(sp)
8020cbc0:	2021883a 	mov	r16,r4
8020cbc4:	20002226 	beq	r4,zero,8020cc50 <__floatunsidf+0x9c>
8020cbc8:	020cc5c0 	call	8020cc5c <__clzsi2>
8020cbcc:	01010784 	movi	r4,1054
8020cbd0:	2089c83a 	sub	r4,r4,r2
8020cbd4:	01810cc4 	movi	r6,1075
8020cbd8:	310dc83a 	sub	r6,r6,r4
8020cbdc:	00c007c4 	movi	r3,31
8020cbe0:	1980120e 	bge	r3,r6,8020cc2c <__floatunsidf+0x78>
8020cbe4:	00c104c4 	movi	r3,1043
8020cbe8:	1907c83a 	sub	r3,r3,r4
8020cbec:	80ca983a 	sll	r5,r16,r3
8020cbf0:	00800434 	movhi	r2,16
8020cbf4:	10bfffc4 	addi	r2,r2,-1
8020cbf8:	2101ffcc 	andi	r4,r4,2047
8020cbfc:	0021883a 	mov	r16,zero
8020cc00:	288a703a 	and	r5,r5,r2
8020cc04:	2008953a 	slli	r4,r4,20
8020cc08:	00c00434 	movhi	r3,16
8020cc0c:	18ffffc4 	addi	r3,r3,-1
8020cc10:	28c6703a 	and	r3,r5,r3
8020cc14:	8005883a 	mov	r2,r16
8020cc18:	1906b03a 	or	r3,r3,r4
8020cc1c:	dfc00117 	ldw	ra,4(sp)
8020cc20:	dc000017 	ldw	r16,0(sp)
8020cc24:	dec00204 	addi	sp,sp,8
8020cc28:	f800283a 	ret
8020cc2c:	00c002c4 	movi	r3,11
8020cc30:	188bc83a 	sub	r5,r3,r2
8020cc34:	814ad83a 	srl	r5,r16,r5
8020cc38:	00c00434 	movhi	r3,16
8020cc3c:	18ffffc4 	addi	r3,r3,-1
8020cc40:	81a0983a 	sll	r16,r16,r6
8020cc44:	2101ffcc 	andi	r4,r4,2047
8020cc48:	28ca703a 	and	r5,r5,r3
8020cc4c:	003fed06 	br	8020cc04 <__reset+0xfa1ecc04>
8020cc50:	0009883a 	mov	r4,zero
8020cc54:	000b883a 	mov	r5,zero
8020cc58:	003fea06 	br	8020cc04 <__reset+0xfa1ecc04>

8020cc5c <__clzsi2>:
8020cc5c:	00bfffd4 	movui	r2,65535
8020cc60:	11000536 	bltu	r2,r4,8020cc78 <__clzsi2+0x1c>
8020cc64:	00803fc4 	movi	r2,255
8020cc68:	11000f36 	bltu	r2,r4,8020cca8 <__clzsi2+0x4c>
8020cc6c:	00800804 	movi	r2,32
8020cc70:	0007883a 	mov	r3,zero
8020cc74:	00000506 	br	8020cc8c <__clzsi2+0x30>
8020cc78:	00804034 	movhi	r2,256
8020cc7c:	10bfffc4 	addi	r2,r2,-1
8020cc80:	11000c2e 	bgeu	r2,r4,8020ccb4 <__clzsi2+0x58>
8020cc84:	00800204 	movi	r2,8
8020cc88:	00c00604 	movi	r3,24
8020cc8c:	20c8d83a 	srl	r4,r4,r3
8020cc90:	00e00874 	movhi	r3,32801
8020cc94:	18c8ae04 	addi	r3,r3,8888
8020cc98:	1909883a 	add	r4,r3,r4
8020cc9c:	20c00003 	ldbu	r3,0(r4)
8020cca0:	10c5c83a 	sub	r2,r2,r3
8020cca4:	f800283a 	ret
8020cca8:	00800604 	movi	r2,24
8020ccac:	00c00204 	movi	r3,8
8020ccb0:	003ff606 	br	8020cc8c <__reset+0xfa1ecc8c>
8020ccb4:	00800404 	movi	r2,16
8020ccb8:	1007883a 	mov	r3,r2
8020ccbc:	003ff306 	br	8020cc8c <__reset+0xfa1ecc8c>

8020ccc0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
8020ccc0:	defffe04 	addi	sp,sp,-8
8020ccc4:	dfc00115 	stw	ra,4(sp)
8020ccc8:	df000015 	stw	fp,0(sp)
8020cccc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
8020ccd0:	d0a00b17 	ldw	r2,-32724(gp)
8020ccd4:	10000326 	beq	r2,zero,8020cce4 <alt_get_errno+0x24>
8020ccd8:	d0a00b17 	ldw	r2,-32724(gp)
8020ccdc:	103ee83a 	callr	r2
8020cce0:	00000106 	br	8020cce8 <alt_get_errno+0x28>
8020cce4:	d0a01804 	addi	r2,gp,-32672
}
8020cce8:	e037883a 	mov	sp,fp
8020ccec:	dfc00117 	ldw	ra,4(sp)
8020ccf0:	df000017 	ldw	fp,0(sp)
8020ccf4:	dec00204 	addi	sp,sp,8
8020ccf8:	f800283a 	ret

8020ccfc <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
8020ccfc:	defffb04 	addi	sp,sp,-20
8020cd00:	dfc00415 	stw	ra,16(sp)
8020cd04:	df000315 	stw	fp,12(sp)
8020cd08:	df000304 	addi	fp,sp,12
8020cd0c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
8020cd10:	e0bfff17 	ldw	r2,-4(fp)
8020cd14:	10000616 	blt	r2,zero,8020cd30 <close+0x34>
8020cd18:	e0bfff17 	ldw	r2,-4(fp)
8020cd1c:	10c00324 	muli	r3,r2,12
8020cd20:	00a00874 	movhi	r2,32801
8020cd24:	108bcb04 	addi	r2,r2,12076
8020cd28:	1885883a 	add	r2,r3,r2
8020cd2c:	00000106 	br	8020cd34 <close+0x38>
8020cd30:	0005883a 	mov	r2,zero
8020cd34:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
8020cd38:	e0bffd17 	ldw	r2,-12(fp)
8020cd3c:	10001926 	beq	r2,zero,8020cda4 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
8020cd40:	e0bffd17 	ldw	r2,-12(fp)
8020cd44:	10800017 	ldw	r2,0(r2)
8020cd48:	10800417 	ldw	r2,16(r2)
8020cd4c:	10000626 	beq	r2,zero,8020cd68 <close+0x6c>
8020cd50:	e0bffd17 	ldw	r2,-12(fp)
8020cd54:	10800017 	ldw	r2,0(r2)
8020cd58:	10800417 	ldw	r2,16(r2)
8020cd5c:	e13ffd17 	ldw	r4,-12(fp)
8020cd60:	103ee83a 	callr	r2
8020cd64:	00000106 	br	8020cd6c <close+0x70>
8020cd68:	0005883a 	mov	r2,zero
8020cd6c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
8020cd70:	e13fff17 	ldw	r4,-4(fp)
8020cd74:	020d2d00 	call	8020d2d0 <alt_release_fd>
    if (rval < 0)
8020cd78:	e0bffe17 	ldw	r2,-8(fp)
8020cd7c:	1000070e 	bge	r2,zero,8020cd9c <close+0xa0>
    {
      ALT_ERRNO = -rval;
8020cd80:	020ccc00 	call	8020ccc0 <alt_get_errno>
8020cd84:	1007883a 	mov	r3,r2
8020cd88:	e0bffe17 	ldw	r2,-8(fp)
8020cd8c:	0085c83a 	sub	r2,zero,r2
8020cd90:	18800015 	stw	r2,0(r3)
      return -1;
8020cd94:	00bfffc4 	movi	r2,-1
8020cd98:	00000706 	br	8020cdb8 <close+0xbc>
    }
    return 0;
8020cd9c:	0005883a 	mov	r2,zero
8020cda0:	00000506 	br	8020cdb8 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
8020cda4:	020ccc00 	call	8020ccc0 <alt_get_errno>
8020cda8:	1007883a 	mov	r3,r2
8020cdac:	00801444 	movi	r2,81
8020cdb0:	18800015 	stw	r2,0(r3)
    return -1;
8020cdb4:	00bfffc4 	movi	r2,-1
  }
}
8020cdb8:	e037883a 	mov	sp,fp
8020cdbc:	dfc00117 	ldw	ra,4(sp)
8020cdc0:	df000017 	ldw	fp,0(sp)
8020cdc4:	dec00204 	addi	sp,sp,8
8020cdc8:	f800283a 	ret

8020cdcc <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
8020cdcc:	defffc04 	addi	sp,sp,-16
8020cdd0:	df000315 	stw	fp,12(sp)
8020cdd4:	df000304 	addi	fp,sp,12
8020cdd8:	e13ffd15 	stw	r4,-12(fp)
8020cddc:	e17ffe15 	stw	r5,-8(fp)
8020cde0:	e1bfff15 	stw	r6,-4(fp)
  return len;
8020cde4:	e0bfff17 	ldw	r2,-4(fp)
}
8020cde8:	e037883a 	mov	sp,fp
8020cdec:	df000017 	ldw	fp,0(sp)
8020cdf0:	dec00104 	addi	sp,sp,4
8020cdf4:	f800283a 	ret

8020cdf8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
8020cdf8:	defffe04 	addi	sp,sp,-8
8020cdfc:	dfc00115 	stw	ra,4(sp)
8020ce00:	df000015 	stw	fp,0(sp)
8020ce04:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
8020ce08:	d0a00b17 	ldw	r2,-32724(gp)
8020ce0c:	10000326 	beq	r2,zero,8020ce1c <alt_get_errno+0x24>
8020ce10:	d0a00b17 	ldw	r2,-32724(gp)
8020ce14:	103ee83a 	callr	r2
8020ce18:	00000106 	br	8020ce20 <alt_get_errno+0x28>
8020ce1c:	d0a01804 	addi	r2,gp,-32672
}
8020ce20:	e037883a 	mov	sp,fp
8020ce24:	dfc00117 	ldw	ra,4(sp)
8020ce28:	df000017 	ldw	fp,0(sp)
8020ce2c:	dec00204 	addi	sp,sp,8
8020ce30:	f800283a 	ret

8020ce34 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
8020ce34:	defffb04 	addi	sp,sp,-20
8020ce38:	dfc00415 	stw	ra,16(sp)
8020ce3c:	df000315 	stw	fp,12(sp)
8020ce40:	df000304 	addi	fp,sp,12
8020ce44:	e13ffe15 	stw	r4,-8(fp)
8020ce48:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
8020ce4c:	e0bffe17 	ldw	r2,-8(fp)
8020ce50:	10000616 	blt	r2,zero,8020ce6c <fstat+0x38>
8020ce54:	e0bffe17 	ldw	r2,-8(fp)
8020ce58:	10c00324 	muli	r3,r2,12
8020ce5c:	00a00874 	movhi	r2,32801
8020ce60:	108bcb04 	addi	r2,r2,12076
8020ce64:	1885883a 	add	r2,r3,r2
8020ce68:	00000106 	br	8020ce70 <fstat+0x3c>
8020ce6c:	0005883a 	mov	r2,zero
8020ce70:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
8020ce74:	e0bffd17 	ldw	r2,-12(fp)
8020ce78:	10001026 	beq	r2,zero,8020cebc <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
8020ce7c:	e0bffd17 	ldw	r2,-12(fp)
8020ce80:	10800017 	ldw	r2,0(r2)
8020ce84:	10800817 	ldw	r2,32(r2)
8020ce88:	10000726 	beq	r2,zero,8020cea8 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
8020ce8c:	e0bffd17 	ldw	r2,-12(fp)
8020ce90:	10800017 	ldw	r2,0(r2)
8020ce94:	10800817 	ldw	r2,32(r2)
8020ce98:	e17fff17 	ldw	r5,-4(fp)
8020ce9c:	e13ffd17 	ldw	r4,-12(fp)
8020cea0:	103ee83a 	callr	r2
8020cea4:	00000a06 	br	8020ced0 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
8020cea8:	e0bfff17 	ldw	r2,-4(fp)
8020ceac:	00c80004 	movi	r3,8192
8020ceb0:	10c00115 	stw	r3,4(r2)
      return 0;
8020ceb4:	0005883a 	mov	r2,zero
8020ceb8:	00000506 	br	8020ced0 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
8020cebc:	020cdf80 	call	8020cdf8 <alt_get_errno>
8020cec0:	1007883a 	mov	r3,r2
8020cec4:	00801444 	movi	r2,81
8020cec8:	18800015 	stw	r2,0(r3)
    return -1;
8020cecc:	00bfffc4 	movi	r2,-1
  }
}
8020ced0:	e037883a 	mov	sp,fp
8020ced4:	dfc00117 	ldw	ra,4(sp)
8020ced8:	df000017 	ldw	fp,0(sp)
8020cedc:	dec00204 	addi	sp,sp,8
8020cee0:	f800283a 	ret

8020cee4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
8020cee4:	defffe04 	addi	sp,sp,-8
8020cee8:	dfc00115 	stw	ra,4(sp)
8020ceec:	df000015 	stw	fp,0(sp)
8020cef0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
8020cef4:	d0a00b17 	ldw	r2,-32724(gp)
8020cef8:	10000326 	beq	r2,zero,8020cf08 <alt_get_errno+0x24>
8020cefc:	d0a00b17 	ldw	r2,-32724(gp)
8020cf00:	103ee83a 	callr	r2
8020cf04:	00000106 	br	8020cf0c <alt_get_errno+0x28>
8020cf08:	d0a01804 	addi	r2,gp,-32672
}
8020cf0c:	e037883a 	mov	sp,fp
8020cf10:	dfc00117 	ldw	ra,4(sp)
8020cf14:	df000017 	ldw	fp,0(sp)
8020cf18:	dec00204 	addi	sp,sp,8
8020cf1c:	f800283a 	ret

8020cf20 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
8020cf20:	deffed04 	addi	sp,sp,-76
8020cf24:	dfc01215 	stw	ra,72(sp)
8020cf28:	df001115 	stw	fp,68(sp)
8020cf2c:	df001104 	addi	fp,sp,68
8020cf30:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
8020cf34:	e0bfff17 	ldw	r2,-4(fp)
8020cf38:	10000616 	blt	r2,zero,8020cf54 <isatty+0x34>
8020cf3c:	e0bfff17 	ldw	r2,-4(fp)
8020cf40:	10c00324 	muli	r3,r2,12
8020cf44:	00a00874 	movhi	r2,32801
8020cf48:	108bcb04 	addi	r2,r2,12076
8020cf4c:	1885883a 	add	r2,r3,r2
8020cf50:	00000106 	br	8020cf58 <isatty+0x38>
8020cf54:	0005883a 	mov	r2,zero
8020cf58:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
8020cf5c:	e0bfef17 	ldw	r2,-68(fp)
8020cf60:	10000e26 	beq	r2,zero,8020cf9c <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
8020cf64:	e0bfef17 	ldw	r2,-68(fp)
8020cf68:	10800017 	ldw	r2,0(r2)
8020cf6c:	10800817 	ldw	r2,32(r2)
8020cf70:	1000021e 	bne	r2,zero,8020cf7c <isatty+0x5c>
    {
      return 1;
8020cf74:	00800044 	movi	r2,1
8020cf78:	00000d06 	br	8020cfb0 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
8020cf7c:	e0bff004 	addi	r2,fp,-64
8020cf80:	100b883a 	mov	r5,r2
8020cf84:	e13fff17 	ldw	r4,-4(fp)
8020cf88:	020ce340 	call	8020ce34 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
8020cf8c:	e0bff117 	ldw	r2,-60(fp)
8020cf90:	10880020 	cmpeqi	r2,r2,8192
8020cf94:	10803fcc 	andi	r2,r2,255
8020cf98:	00000506 	br	8020cfb0 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
8020cf9c:	020cee40 	call	8020cee4 <alt_get_errno>
8020cfa0:	1007883a 	mov	r3,r2
8020cfa4:	00801444 	movi	r2,81
8020cfa8:	18800015 	stw	r2,0(r3)
    return 0;
8020cfac:	0005883a 	mov	r2,zero
  }
}
8020cfb0:	e037883a 	mov	sp,fp
8020cfb4:	dfc00117 	ldw	ra,4(sp)
8020cfb8:	df000017 	ldw	fp,0(sp)
8020cfbc:	dec00204 	addi	sp,sp,8
8020cfc0:	f800283a 	ret

8020cfc4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
8020cfc4:	defffe04 	addi	sp,sp,-8
8020cfc8:	dfc00115 	stw	ra,4(sp)
8020cfcc:	df000015 	stw	fp,0(sp)
8020cfd0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
8020cfd4:	d0a00b17 	ldw	r2,-32724(gp)
8020cfd8:	10000326 	beq	r2,zero,8020cfe8 <alt_get_errno+0x24>
8020cfdc:	d0a00b17 	ldw	r2,-32724(gp)
8020cfe0:	103ee83a 	callr	r2
8020cfe4:	00000106 	br	8020cfec <alt_get_errno+0x28>
8020cfe8:	d0a01804 	addi	r2,gp,-32672
}
8020cfec:	e037883a 	mov	sp,fp
8020cff0:	dfc00117 	ldw	ra,4(sp)
8020cff4:	df000017 	ldw	fp,0(sp)
8020cff8:	dec00204 	addi	sp,sp,8
8020cffc:	f800283a 	ret

8020d000 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
8020d000:	defff904 	addi	sp,sp,-28
8020d004:	dfc00615 	stw	ra,24(sp)
8020d008:	df000515 	stw	fp,20(sp)
8020d00c:	df000504 	addi	fp,sp,20
8020d010:	e13ffd15 	stw	r4,-12(fp)
8020d014:	e17ffe15 	stw	r5,-8(fp)
8020d018:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
8020d01c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
8020d020:	e0bffd17 	ldw	r2,-12(fp)
8020d024:	10000616 	blt	r2,zero,8020d040 <lseek+0x40>
8020d028:	e0bffd17 	ldw	r2,-12(fp)
8020d02c:	10c00324 	muli	r3,r2,12
8020d030:	00a00874 	movhi	r2,32801
8020d034:	108bcb04 	addi	r2,r2,12076
8020d038:	1885883a 	add	r2,r3,r2
8020d03c:	00000106 	br	8020d044 <lseek+0x44>
8020d040:	0005883a 	mov	r2,zero
8020d044:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
8020d048:	e0bffc17 	ldw	r2,-16(fp)
8020d04c:	10001026 	beq	r2,zero,8020d090 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
8020d050:	e0bffc17 	ldw	r2,-16(fp)
8020d054:	10800017 	ldw	r2,0(r2)
8020d058:	10800717 	ldw	r2,28(r2)
8020d05c:	10000926 	beq	r2,zero,8020d084 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
8020d060:	e0bffc17 	ldw	r2,-16(fp)
8020d064:	10800017 	ldw	r2,0(r2)
8020d068:	10800717 	ldw	r2,28(r2)
8020d06c:	e1bfff17 	ldw	r6,-4(fp)
8020d070:	e17ffe17 	ldw	r5,-8(fp)
8020d074:	e13ffc17 	ldw	r4,-16(fp)
8020d078:	103ee83a 	callr	r2
8020d07c:	e0bffb15 	stw	r2,-20(fp)
8020d080:	00000506 	br	8020d098 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
8020d084:	00bfde84 	movi	r2,-134
8020d088:	e0bffb15 	stw	r2,-20(fp)
8020d08c:	00000206 	br	8020d098 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
8020d090:	00bfebc4 	movi	r2,-81
8020d094:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
8020d098:	e0bffb17 	ldw	r2,-20(fp)
8020d09c:	1000070e 	bge	r2,zero,8020d0bc <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
8020d0a0:	020cfc40 	call	8020cfc4 <alt_get_errno>
8020d0a4:	1007883a 	mov	r3,r2
8020d0a8:	e0bffb17 	ldw	r2,-20(fp)
8020d0ac:	0085c83a 	sub	r2,zero,r2
8020d0b0:	18800015 	stw	r2,0(r3)
    rc = -1;
8020d0b4:	00bfffc4 	movi	r2,-1
8020d0b8:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
8020d0bc:	e0bffb17 	ldw	r2,-20(fp)
}
8020d0c0:	e037883a 	mov	sp,fp
8020d0c4:	dfc00117 	ldw	ra,4(sp)
8020d0c8:	df000017 	ldw	fp,0(sp)
8020d0cc:	dec00204 	addi	sp,sp,8
8020d0d0:	f800283a 	ret

8020d0d4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
8020d0d4:	defffd04 	addi	sp,sp,-12
8020d0d8:	dfc00215 	stw	ra,8(sp)
8020d0dc:	df000115 	stw	fp,4(sp)
8020d0e0:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
8020d0e4:	0009883a 	mov	r4,zero
8020d0e8:	020d57c0 	call	8020d57c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
8020d0ec:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
8020d0f0:	020d5b40 	call	8020d5b4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
8020d0f4:	01a00874 	movhi	r6,32801
8020d0f8:	3188f104 	addi	r6,r6,9156
8020d0fc:	01600874 	movhi	r5,32801
8020d100:	2948f104 	addi	r5,r5,9156
8020d104:	01200874 	movhi	r4,32801
8020d108:	2108f104 	addi	r4,r4,9156
8020d10c:	02112800 	call	80211280 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
8020d110:	0210dcc0 	call	80210dcc <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
8020d114:	01200874 	movhi	r4,32801
8020d118:	21038b04 	addi	r4,r4,3628
8020d11c:	0211bc80 	call	80211bc8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
8020d120:	d0a01917 	ldw	r2,-32668(gp)
8020d124:	d0e01a17 	ldw	r3,-32664(gp)
8020d128:	d1201b17 	ldw	r4,-32660(gp)
8020d12c:	200d883a 	mov	r6,r4
8020d130:	180b883a 	mov	r5,r3
8020d134:	1009883a 	mov	r4,r2
8020d138:	020027c0 	call	8020027c <main>
8020d13c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
8020d140:	01000044 	movi	r4,1
8020d144:	020ccfc0 	call	8020ccfc <close>
  exit (result);
8020d148:	e13fff17 	ldw	r4,-4(fp)
8020d14c:	0211bdc0 	call	80211bdc <exit>

8020d150 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
8020d150:	defffe04 	addi	sp,sp,-8
8020d154:	df000115 	stw	fp,4(sp)
8020d158:	df000104 	addi	fp,sp,4
8020d15c:	e13fff15 	stw	r4,-4(fp)
}
8020d160:	0001883a 	nop
8020d164:	e037883a 	mov	sp,fp
8020d168:	df000017 	ldw	fp,0(sp)
8020d16c:	dec00104 	addi	sp,sp,4
8020d170:	f800283a 	ret

8020d174 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
8020d174:	defffe04 	addi	sp,sp,-8
8020d178:	df000115 	stw	fp,4(sp)
8020d17c:	df000104 	addi	fp,sp,4
8020d180:	e13fff15 	stw	r4,-4(fp)
}
8020d184:	0001883a 	nop
8020d188:	e037883a 	mov	sp,fp
8020d18c:	df000017 	ldw	fp,0(sp)
8020d190:	dec00104 	addi	sp,sp,4
8020d194:	f800283a 	ret

8020d198 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
8020d198:	defffe04 	addi	sp,sp,-8
8020d19c:	dfc00115 	stw	ra,4(sp)
8020d1a0:	df000015 	stw	fp,0(sp)
8020d1a4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
8020d1a8:	d0a00b17 	ldw	r2,-32724(gp)
8020d1ac:	10000326 	beq	r2,zero,8020d1bc <alt_get_errno+0x24>
8020d1b0:	d0a00b17 	ldw	r2,-32724(gp)
8020d1b4:	103ee83a 	callr	r2
8020d1b8:	00000106 	br	8020d1c0 <alt_get_errno+0x28>
8020d1bc:	d0a01804 	addi	r2,gp,-32672
}
8020d1c0:	e037883a 	mov	sp,fp
8020d1c4:	dfc00117 	ldw	ra,4(sp)
8020d1c8:	df000017 	ldw	fp,0(sp)
8020d1cc:	dec00204 	addi	sp,sp,8
8020d1d0:	f800283a 	ret

8020d1d4 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
8020d1d4:	defff904 	addi	sp,sp,-28
8020d1d8:	dfc00615 	stw	ra,24(sp)
8020d1dc:	df000515 	stw	fp,20(sp)
8020d1e0:	df000504 	addi	fp,sp,20
8020d1e4:	e13ffd15 	stw	r4,-12(fp)
8020d1e8:	e17ffe15 	stw	r5,-8(fp)
8020d1ec:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
8020d1f0:	e0bffd17 	ldw	r2,-12(fp)
8020d1f4:	10000616 	blt	r2,zero,8020d210 <read+0x3c>
8020d1f8:	e0bffd17 	ldw	r2,-12(fp)
8020d1fc:	10c00324 	muli	r3,r2,12
8020d200:	00a00874 	movhi	r2,32801
8020d204:	108bcb04 	addi	r2,r2,12076
8020d208:	1885883a 	add	r2,r3,r2
8020d20c:	00000106 	br	8020d214 <read+0x40>
8020d210:	0005883a 	mov	r2,zero
8020d214:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
8020d218:	e0bffb17 	ldw	r2,-20(fp)
8020d21c:	10002226 	beq	r2,zero,8020d2a8 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
8020d220:	e0bffb17 	ldw	r2,-20(fp)
8020d224:	10800217 	ldw	r2,8(r2)
8020d228:	108000cc 	andi	r2,r2,3
8020d22c:	10800060 	cmpeqi	r2,r2,1
8020d230:	1000181e 	bne	r2,zero,8020d294 <read+0xc0>
        (fd->dev->read))
8020d234:	e0bffb17 	ldw	r2,-20(fp)
8020d238:	10800017 	ldw	r2,0(r2)
8020d23c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
8020d240:	10001426 	beq	r2,zero,8020d294 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
8020d244:	e0bffb17 	ldw	r2,-20(fp)
8020d248:	10800017 	ldw	r2,0(r2)
8020d24c:	10800517 	ldw	r2,20(r2)
8020d250:	e0ffff17 	ldw	r3,-4(fp)
8020d254:	180d883a 	mov	r6,r3
8020d258:	e17ffe17 	ldw	r5,-8(fp)
8020d25c:	e13ffb17 	ldw	r4,-20(fp)
8020d260:	103ee83a 	callr	r2
8020d264:	e0bffc15 	stw	r2,-16(fp)
8020d268:	e0bffc17 	ldw	r2,-16(fp)
8020d26c:	1000070e 	bge	r2,zero,8020d28c <read+0xb8>
        {
          ALT_ERRNO = -rval;
8020d270:	020d1980 	call	8020d198 <alt_get_errno>
8020d274:	1007883a 	mov	r3,r2
8020d278:	e0bffc17 	ldw	r2,-16(fp)
8020d27c:	0085c83a 	sub	r2,zero,r2
8020d280:	18800015 	stw	r2,0(r3)
          return -1;
8020d284:	00bfffc4 	movi	r2,-1
8020d288:	00000c06 	br	8020d2bc <read+0xe8>
        }
        return rval;
8020d28c:	e0bffc17 	ldw	r2,-16(fp)
8020d290:	00000a06 	br	8020d2bc <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
8020d294:	020d1980 	call	8020d198 <alt_get_errno>
8020d298:	1007883a 	mov	r3,r2
8020d29c:	00800344 	movi	r2,13
8020d2a0:	18800015 	stw	r2,0(r3)
8020d2a4:	00000406 	br	8020d2b8 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
8020d2a8:	020d1980 	call	8020d198 <alt_get_errno>
8020d2ac:	1007883a 	mov	r3,r2
8020d2b0:	00801444 	movi	r2,81
8020d2b4:	18800015 	stw	r2,0(r3)
  }
  return -1;
8020d2b8:	00bfffc4 	movi	r2,-1
}
8020d2bc:	e037883a 	mov	sp,fp
8020d2c0:	dfc00117 	ldw	ra,4(sp)
8020d2c4:	df000017 	ldw	fp,0(sp)
8020d2c8:	dec00204 	addi	sp,sp,8
8020d2cc:	f800283a 	ret

8020d2d0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
8020d2d0:	defffe04 	addi	sp,sp,-8
8020d2d4:	df000115 	stw	fp,4(sp)
8020d2d8:	df000104 	addi	fp,sp,4
8020d2dc:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
8020d2e0:	e0bfff17 	ldw	r2,-4(fp)
8020d2e4:	108000d0 	cmplti	r2,r2,3
8020d2e8:	10000d1e 	bne	r2,zero,8020d320 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
8020d2ec:	00a00874 	movhi	r2,32801
8020d2f0:	108bcb04 	addi	r2,r2,12076
8020d2f4:	e0ffff17 	ldw	r3,-4(fp)
8020d2f8:	18c00324 	muli	r3,r3,12
8020d2fc:	10c5883a 	add	r2,r2,r3
8020d300:	10800204 	addi	r2,r2,8
8020d304:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
8020d308:	00a00874 	movhi	r2,32801
8020d30c:	108bcb04 	addi	r2,r2,12076
8020d310:	e0ffff17 	ldw	r3,-4(fp)
8020d314:	18c00324 	muli	r3,r3,12
8020d318:	10c5883a 	add	r2,r2,r3
8020d31c:	10000015 	stw	zero,0(r2)
  }
}
8020d320:	0001883a 	nop
8020d324:	e037883a 	mov	sp,fp
8020d328:	df000017 	ldw	fp,0(sp)
8020d32c:	dec00104 	addi	sp,sp,4
8020d330:	f800283a 	ret

8020d334 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
8020d334:	defff904 	addi	sp,sp,-28
8020d338:	df000615 	stw	fp,24(sp)
8020d33c:	df000604 	addi	fp,sp,24
8020d340:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8020d344:	0005303a 	rdctl	r2,status
8020d348:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8020d34c:	e0fffe17 	ldw	r3,-8(fp)
8020d350:	00bfff84 	movi	r2,-2
8020d354:	1884703a 	and	r2,r3,r2
8020d358:	1001703a 	wrctl	status,r2
  
  return context;
8020d35c:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
8020d360:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
8020d364:	d0a00c17 	ldw	r2,-32720(gp)
8020d368:	10c000c4 	addi	r3,r2,3
8020d36c:	00bfff04 	movi	r2,-4
8020d370:	1884703a 	and	r2,r3,r2
8020d374:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
8020d378:	d0e00c17 	ldw	r3,-32720(gp)
8020d37c:	e0bfff17 	ldw	r2,-4(fp)
8020d380:	1887883a 	add	r3,r3,r2
8020d384:	00a00bb4 	movhi	r2,32814
8020d388:	10800004 	addi	r2,r2,0
8020d38c:	10c0062e 	bgeu	r2,r3,8020d3a8 <sbrk+0x74>
8020d390:	e0bffb17 	ldw	r2,-20(fp)
8020d394:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8020d398:	e0bffa17 	ldw	r2,-24(fp)
8020d39c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
8020d3a0:	00bfffc4 	movi	r2,-1
8020d3a4:	00000b06 	br	8020d3d4 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
8020d3a8:	d0a00c17 	ldw	r2,-32720(gp)
8020d3ac:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
8020d3b0:	d0e00c17 	ldw	r3,-32720(gp)
8020d3b4:	e0bfff17 	ldw	r2,-4(fp)
8020d3b8:	1885883a 	add	r2,r3,r2
8020d3bc:	d0a00c15 	stw	r2,-32720(gp)
8020d3c0:	e0bffb17 	ldw	r2,-20(fp)
8020d3c4:	e0bffc15 	stw	r2,-16(fp)
8020d3c8:	e0bffc17 	ldw	r2,-16(fp)
8020d3cc:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
8020d3d0:	e0bffd17 	ldw	r2,-12(fp)
} 
8020d3d4:	e037883a 	mov	sp,fp
8020d3d8:	df000017 	ldw	fp,0(sp)
8020d3dc:	dec00104 	addi	sp,sp,4
8020d3e0:	f800283a 	ret

8020d3e4 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
8020d3e4:	defffd04 	addi	sp,sp,-12
8020d3e8:	dfc00215 	stw	ra,8(sp)
8020d3ec:	df000115 	stw	fp,4(sp)
8020d3f0:	df000104 	addi	fp,sp,4
8020d3f4:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
8020d3f8:	e13fff17 	ldw	r4,-4(fp)
8020d3fc:	0210b9c0 	call	80210b9c <alt_busy_sleep>
}
8020d400:	e037883a 	mov	sp,fp
8020d404:	dfc00117 	ldw	ra,4(sp)
8020d408:	df000017 	ldw	fp,0(sp)
8020d40c:	dec00204 	addi	sp,sp,8
8020d410:	f800283a 	ret

8020d414 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
8020d414:	defffe04 	addi	sp,sp,-8
8020d418:	dfc00115 	stw	ra,4(sp)
8020d41c:	df000015 	stw	fp,0(sp)
8020d420:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
8020d424:	d0a00b17 	ldw	r2,-32724(gp)
8020d428:	10000326 	beq	r2,zero,8020d438 <alt_get_errno+0x24>
8020d42c:	d0a00b17 	ldw	r2,-32724(gp)
8020d430:	103ee83a 	callr	r2
8020d434:	00000106 	br	8020d43c <alt_get_errno+0x28>
8020d438:	d0a01804 	addi	r2,gp,-32672
}
8020d43c:	e037883a 	mov	sp,fp
8020d440:	dfc00117 	ldw	ra,4(sp)
8020d444:	df000017 	ldw	fp,0(sp)
8020d448:	dec00204 	addi	sp,sp,8
8020d44c:	f800283a 	ret

8020d450 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
8020d450:	defff904 	addi	sp,sp,-28
8020d454:	dfc00615 	stw	ra,24(sp)
8020d458:	df000515 	stw	fp,20(sp)
8020d45c:	df000504 	addi	fp,sp,20
8020d460:	e13ffd15 	stw	r4,-12(fp)
8020d464:	e17ffe15 	stw	r5,-8(fp)
8020d468:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
8020d46c:	e0bffd17 	ldw	r2,-12(fp)
8020d470:	10000616 	blt	r2,zero,8020d48c <write+0x3c>
8020d474:	e0bffd17 	ldw	r2,-12(fp)
8020d478:	10c00324 	muli	r3,r2,12
8020d47c:	00a00874 	movhi	r2,32801
8020d480:	108bcb04 	addi	r2,r2,12076
8020d484:	1885883a 	add	r2,r3,r2
8020d488:	00000106 	br	8020d490 <write+0x40>
8020d48c:	0005883a 	mov	r2,zero
8020d490:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
8020d494:	e0bffb17 	ldw	r2,-20(fp)
8020d498:	10002126 	beq	r2,zero,8020d520 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
8020d49c:	e0bffb17 	ldw	r2,-20(fp)
8020d4a0:	10800217 	ldw	r2,8(r2)
8020d4a4:	108000cc 	andi	r2,r2,3
8020d4a8:	10001826 	beq	r2,zero,8020d50c <write+0xbc>
8020d4ac:	e0bffb17 	ldw	r2,-20(fp)
8020d4b0:	10800017 	ldw	r2,0(r2)
8020d4b4:	10800617 	ldw	r2,24(r2)
8020d4b8:	10001426 	beq	r2,zero,8020d50c <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
8020d4bc:	e0bffb17 	ldw	r2,-20(fp)
8020d4c0:	10800017 	ldw	r2,0(r2)
8020d4c4:	10800617 	ldw	r2,24(r2)
8020d4c8:	e0ffff17 	ldw	r3,-4(fp)
8020d4cc:	180d883a 	mov	r6,r3
8020d4d0:	e17ffe17 	ldw	r5,-8(fp)
8020d4d4:	e13ffb17 	ldw	r4,-20(fp)
8020d4d8:	103ee83a 	callr	r2
8020d4dc:	e0bffc15 	stw	r2,-16(fp)
8020d4e0:	e0bffc17 	ldw	r2,-16(fp)
8020d4e4:	1000070e 	bge	r2,zero,8020d504 <write+0xb4>
      {
        ALT_ERRNO = -rval;
8020d4e8:	020d4140 	call	8020d414 <alt_get_errno>
8020d4ec:	1007883a 	mov	r3,r2
8020d4f0:	e0bffc17 	ldw	r2,-16(fp)
8020d4f4:	0085c83a 	sub	r2,zero,r2
8020d4f8:	18800015 	stw	r2,0(r3)
        return -1;
8020d4fc:	00bfffc4 	movi	r2,-1
8020d500:	00000c06 	br	8020d534 <write+0xe4>
      }
      return rval;
8020d504:	e0bffc17 	ldw	r2,-16(fp)
8020d508:	00000a06 	br	8020d534 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
8020d50c:	020d4140 	call	8020d414 <alt_get_errno>
8020d510:	1007883a 	mov	r3,r2
8020d514:	00800344 	movi	r2,13
8020d518:	18800015 	stw	r2,0(r3)
8020d51c:	00000406 	br	8020d530 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
8020d520:	020d4140 	call	8020d414 <alt_get_errno>
8020d524:	1007883a 	mov	r3,r2
8020d528:	00801444 	movi	r2,81
8020d52c:	18800015 	stw	r2,0(r3)
  }
  return -1;
8020d530:	00bfffc4 	movi	r2,-1
}
8020d534:	e037883a 	mov	sp,fp
8020d538:	dfc00117 	ldw	ra,4(sp)
8020d53c:	df000017 	ldw	fp,0(sp)
8020d540:	dec00204 	addi	sp,sp,8
8020d544:	f800283a 	ret

8020d548 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
8020d548:	defffd04 	addi	sp,sp,-12
8020d54c:	dfc00215 	stw	ra,8(sp)
8020d550:	df000115 	stw	fp,4(sp)
8020d554:	df000104 	addi	fp,sp,4
8020d558:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
8020d55c:	d1600804 	addi	r5,gp,-32736
8020d560:	e13fff17 	ldw	r4,-4(fp)
8020d564:	0210d280 	call	80210d28 <alt_dev_llist_insert>
}
8020d568:	e037883a 	mov	sp,fp
8020d56c:	dfc00117 	ldw	ra,4(sp)
8020d570:	df000017 	ldw	fp,0(sp)
8020d574:	dec00204 	addi	sp,sp,8
8020d578:	f800283a 	ret

8020d57c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
8020d57c:	defffd04 	addi	sp,sp,-12
8020d580:	dfc00215 	stw	ra,8(sp)
8020d584:	df000115 	stw	fp,4(sp)
8020d588:	df000104 	addi	fp,sp,4
8020d58c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
8020d590:	021195c0 	call	8021195c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
8020d594:	00800044 	movi	r2,1
8020d598:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
8020d59c:	0001883a 	nop
8020d5a0:	e037883a 	mov	sp,fp
8020d5a4:	dfc00117 	ldw	ra,4(sp)
8020d5a8:	df000017 	ldw	fp,0(sp)
8020d5ac:	dec00204 	addi	sp,sp,8
8020d5b0:	f800283a 	ret

8020d5b4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
8020d5b4:	defffe04 	addi	sp,sp,-8
8020d5b8:	dfc00115 	stw	ra,4(sp)
8020d5bc:	df000015 	stw	fp,0(sp)
8020d5c0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_1MS, timer_1ms);
8020d5c4:	01c0fa04 	movi	r7,1000
8020d5c8:	01800104 	movi	r6,4
8020d5cc:	000b883a 	mov	r5,zero
8020d5d0:	01208034 	movhi	r4,33280
8020d5d4:	21022004 	addi	r4,r4,2176
8020d5d8:	020e17c0 	call	8020e17c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1US, timer_1us);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
8020d5dc:	018000c4 	movi	r6,3
8020d5e0:	000b883a 	mov	r5,zero
8020d5e4:	01200874 	movhi	r4,32801
8020d5e8:	210c3604 	addi	r4,r4,12504
8020d5ec:	020d8000 	call	8020d800 <altera_avalon_jtag_uart_init>
8020d5f0:	01200874 	movhi	r4,32801
8020d5f4:	210c2c04 	addi	r4,r4,12464
8020d5f8:	020d5480 	call	8020d548 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS, sysid_qsys);
8020d5fc:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( RS232_UART, rs232_uart);
8020d600:	018001c4 	movi	r6,7
8020d604:	000b883a 	mov	r5,zero
8020d608:	01200874 	movhi	r4,32801
8020d60c:	21104e04 	addi	r4,r4,16696
8020d610:	020e3080 	call	8020e308 <altera_avalon_uart_init>
8020d614:	01200874 	movhi	r4,32801
8020d618:	21104404 	addi	r4,r4,16656
8020d61c:	020d5480 	call	8020d548 <alt_dev_reg>
    ALTERA_MSGDMA_INIT ( DMA_DDR_M1, dma_DDR_M1);
8020d620:	00a00874 	movhi	r2,32801
8020d624:	10907804 	addi	r2,r2,16864
8020d628:	10c00717 	ldw	r3,28(r2)
8020d62c:	00a00874 	movhi	r2,32801
8020d630:	10907804 	addi	r2,r2,16864
8020d634:	10800817 	ldw	r2,32(r2)
8020d638:	100d883a 	mov	r6,r2
8020d63c:	180b883a 	mov	r5,r3
8020d640:	01200874 	movhi	r4,32801
8020d644:	21107804 	addi	r4,r4,16864
8020d648:	02107c00 	call	802107c0 <alt_msgdma_init>
    ALTERA_MSGDMA_INIT ( DMA_DDR_M2, dma_DDR_M2);
8020d64c:	00a00874 	movhi	r2,32801
8020d650:	10909004 	addi	r2,r2,16960
8020d654:	10c00717 	ldw	r3,28(r2)
8020d658:	00a00874 	movhi	r2,32801
8020d65c:	10909004 	addi	r2,r2,16960
8020d660:	10800817 	ldw	r2,32(r2)
8020d664:	100d883a 	mov	r6,r2
8020d668:	180b883a 	mov	r5,r3
8020d66c:	01200874 	movhi	r4,32801
8020d670:	21109004 	addi	r4,r4,16960
8020d674:	02107c00 	call	802107c0 <alt_msgdma_init>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( ALTERA_UP_SD_CARD_AVALON_INTERFACE_0, Altera_UP_SD_Card_Avalon_Interface_0);
8020d678:	01200874 	movhi	r4,32801
8020d67c:	2110a804 	addi	r4,r4,17056
8020d680:	020d5480 	call	8020d548 <alt_dev_reg>
}
8020d684:	0001883a 	nop
8020d688:	e037883a 	mov	sp,fp
8020d68c:	dfc00117 	ldw	ra,4(sp)
8020d690:	df000017 	ldw	fp,0(sp)
8020d694:	dec00204 	addi	sp,sp,8
8020d698:	f800283a 	ret

8020d69c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
8020d69c:	defffa04 	addi	sp,sp,-24
8020d6a0:	dfc00515 	stw	ra,20(sp)
8020d6a4:	df000415 	stw	fp,16(sp)
8020d6a8:	df000404 	addi	fp,sp,16
8020d6ac:	e13ffd15 	stw	r4,-12(fp)
8020d6b0:	e17ffe15 	stw	r5,-8(fp)
8020d6b4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
8020d6b8:	e0bffd17 	ldw	r2,-12(fp)
8020d6bc:	10800017 	ldw	r2,0(r2)
8020d6c0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
8020d6c4:	e0bffc17 	ldw	r2,-16(fp)
8020d6c8:	10c00a04 	addi	r3,r2,40
8020d6cc:	e0bffd17 	ldw	r2,-12(fp)
8020d6d0:	10800217 	ldw	r2,8(r2)
8020d6d4:	100f883a 	mov	r7,r2
8020d6d8:	e1bfff17 	ldw	r6,-4(fp)
8020d6dc:	e17ffe17 	ldw	r5,-8(fp)
8020d6e0:	1809883a 	mov	r4,r3
8020d6e4:	020dcc40 	call	8020dcc4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
8020d6e8:	e037883a 	mov	sp,fp
8020d6ec:	dfc00117 	ldw	ra,4(sp)
8020d6f0:	df000017 	ldw	fp,0(sp)
8020d6f4:	dec00204 	addi	sp,sp,8
8020d6f8:	f800283a 	ret

8020d6fc <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
8020d6fc:	defffa04 	addi	sp,sp,-24
8020d700:	dfc00515 	stw	ra,20(sp)
8020d704:	df000415 	stw	fp,16(sp)
8020d708:	df000404 	addi	fp,sp,16
8020d70c:	e13ffd15 	stw	r4,-12(fp)
8020d710:	e17ffe15 	stw	r5,-8(fp)
8020d714:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
8020d718:	e0bffd17 	ldw	r2,-12(fp)
8020d71c:	10800017 	ldw	r2,0(r2)
8020d720:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
8020d724:	e0bffc17 	ldw	r2,-16(fp)
8020d728:	10c00a04 	addi	r3,r2,40
8020d72c:	e0bffd17 	ldw	r2,-12(fp)
8020d730:	10800217 	ldw	r2,8(r2)
8020d734:	100f883a 	mov	r7,r2
8020d738:	e1bfff17 	ldw	r6,-4(fp)
8020d73c:	e17ffe17 	ldw	r5,-8(fp)
8020d740:	1809883a 	mov	r4,r3
8020d744:	020dee00 	call	8020dee0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
8020d748:	e037883a 	mov	sp,fp
8020d74c:	dfc00117 	ldw	ra,4(sp)
8020d750:	df000017 	ldw	fp,0(sp)
8020d754:	dec00204 	addi	sp,sp,8
8020d758:	f800283a 	ret

8020d75c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
8020d75c:	defffc04 	addi	sp,sp,-16
8020d760:	dfc00315 	stw	ra,12(sp)
8020d764:	df000215 	stw	fp,8(sp)
8020d768:	df000204 	addi	fp,sp,8
8020d76c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
8020d770:	e0bfff17 	ldw	r2,-4(fp)
8020d774:	10800017 	ldw	r2,0(r2)
8020d778:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
8020d77c:	e0bffe17 	ldw	r2,-8(fp)
8020d780:	10c00a04 	addi	r3,r2,40
8020d784:	e0bfff17 	ldw	r2,-4(fp)
8020d788:	10800217 	ldw	r2,8(r2)
8020d78c:	100b883a 	mov	r5,r2
8020d790:	1809883a 	mov	r4,r3
8020d794:	020db6c0 	call	8020db6c <altera_avalon_jtag_uart_close>
}
8020d798:	e037883a 	mov	sp,fp
8020d79c:	dfc00117 	ldw	ra,4(sp)
8020d7a0:	df000017 	ldw	fp,0(sp)
8020d7a4:	dec00204 	addi	sp,sp,8
8020d7a8:	f800283a 	ret

8020d7ac <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
8020d7ac:	defffa04 	addi	sp,sp,-24
8020d7b0:	dfc00515 	stw	ra,20(sp)
8020d7b4:	df000415 	stw	fp,16(sp)
8020d7b8:	df000404 	addi	fp,sp,16
8020d7bc:	e13ffd15 	stw	r4,-12(fp)
8020d7c0:	e17ffe15 	stw	r5,-8(fp)
8020d7c4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
8020d7c8:	e0bffd17 	ldw	r2,-12(fp)
8020d7cc:	10800017 	ldw	r2,0(r2)
8020d7d0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
8020d7d4:	e0bffc17 	ldw	r2,-16(fp)
8020d7d8:	10800a04 	addi	r2,r2,40
8020d7dc:	e1bfff17 	ldw	r6,-4(fp)
8020d7e0:	e17ffe17 	ldw	r5,-8(fp)
8020d7e4:	1009883a 	mov	r4,r2
8020d7e8:	020dbd40 	call	8020dbd4 <altera_avalon_jtag_uart_ioctl>
}
8020d7ec:	e037883a 	mov	sp,fp
8020d7f0:	dfc00117 	ldw	ra,4(sp)
8020d7f4:	df000017 	ldw	fp,0(sp)
8020d7f8:	dec00204 	addi	sp,sp,8
8020d7fc:	f800283a 	ret

8020d800 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
8020d800:	defffa04 	addi	sp,sp,-24
8020d804:	dfc00515 	stw	ra,20(sp)
8020d808:	df000415 	stw	fp,16(sp)
8020d80c:	df000404 	addi	fp,sp,16
8020d810:	e13ffd15 	stw	r4,-12(fp)
8020d814:	e17ffe15 	stw	r5,-8(fp)
8020d818:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
8020d81c:	e0bffd17 	ldw	r2,-12(fp)
8020d820:	00c00044 	movi	r3,1
8020d824:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
8020d828:	e0bffd17 	ldw	r2,-12(fp)
8020d82c:	10800017 	ldw	r2,0(r2)
8020d830:	10800104 	addi	r2,r2,4
8020d834:	1007883a 	mov	r3,r2
8020d838:	e0bffd17 	ldw	r2,-12(fp)
8020d83c:	10800817 	ldw	r2,32(r2)
8020d840:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
8020d844:	e0bffe17 	ldw	r2,-8(fp)
8020d848:	e0ffff17 	ldw	r3,-4(fp)
8020d84c:	d8000015 	stw	zero,0(sp)
8020d850:	e1fffd17 	ldw	r7,-12(fp)
8020d854:	01a00874 	movhi	r6,32801
8020d858:	31b63004 	addi	r6,r6,-10048
8020d85c:	180b883a 	mov	r5,r3
8020d860:	1009883a 	mov	r4,r2
8020d864:	0210f1c0 	call	80210f1c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
8020d868:	e0bffd17 	ldw	r2,-12(fp)
8020d86c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
8020d870:	e0bffd17 	ldw	r2,-12(fp)
8020d874:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
8020d878:	d0e01d17 	ldw	r3,-32652(gp)
8020d87c:	e1fffd17 	ldw	r7,-12(fp)
8020d880:	01a00874 	movhi	r6,32801
8020d884:	31b6b304 	addi	r6,r6,-9524
8020d888:	180b883a 	mov	r5,r3
8020d88c:	1009883a 	mov	r4,r2
8020d890:	0210a700 	call	80210a70 <alt_alarm_start>
8020d894:	1000040e 	bge	r2,zero,8020d8a8 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
8020d898:	e0fffd17 	ldw	r3,-12(fp)
8020d89c:	00a00034 	movhi	r2,32768
8020d8a0:	10bfffc4 	addi	r2,r2,-1
8020d8a4:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
8020d8a8:	0001883a 	nop
8020d8ac:	e037883a 	mov	sp,fp
8020d8b0:	dfc00117 	ldw	ra,4(sp)
8020d8b4:	df000017 	ldw	fp,0(sp)
8020d8b8:	dec00204 	addi	sp,sp,8
8020d8bc:	f800283a 	ret

8020d8c0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
8020d8c0:	defff804 	addi	sp,sp,-32
8020d8c4:	df000715 	stw	fp,28(sp)
8020d8c8:	df000704 	addi	fp,sp,28
8020d8cc:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
8020d8d0:	e0bfff17 	ldw	r2,-4(fp)
8020d8d4:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
8020d8d8:	e0bffb17 	ldw	r2,-20(fp)
8020d8dc:	10800017 	ldw	r2,0(r2)
8020d8e0:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
8020d8e4:	e0bffc17 	ldw	r2,-16(fp)
8020d8e8:	10800104 	addi	r2,r2,4
8020d8ec:	10800037 	ldwio	r2,0(r2)
8020d8f0:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
8020d8f4:	e0bffd17 	ldw	r2,-12(fp)
8020d8f8:	1080c00c 	andi	r2,r2,768
8020d8fc:	10006d26 	beq	r2,zero,8020dab4 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
8020d900:	e0bffd17 	ldw	r2,-12(fp)
8020d904:	1080400c 	andi	r2,r2,256
8020d908:	10003526 	beq	r2,zero,8020d9e0 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
8020d90c:	00800074 	movhi	r2,1
8020d910:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
8020d914:	e0bffb17 	ldw	r2,-20(fp)
8020d918:	10800a17 	ldw	r2,40(r2)
8020d91c:	10800044 	addi	r2,r2,1
8020d920:	1081ffcc 	andi	r2,r2,2047
8020d924:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
8020d928:	e0bffb17 	ldw	r2,-20(fp)
8020d92c:	10c00b17 	ldw	r3,44(r2)
8020d930:	e0bffe17 	ldw	r2,-8(fp)
8020d934:	18801526 	beq	r3,r2,8020d98c <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
8020d938:	e0bffc17 	ldw	r2,-16(fp)
8020d93c:	10800037 	ldwio	r2,0(r2)
8020d940:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
8020d944:	e0bff917 	ldw	r2,-28(fp)
8020d948:	10a0000c 	andi	r2,r2,32768
8020d94c:	10001126 	beq	r2,zero,8020d994 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
8020d950:	e0bffb17 	ldw	r2,-20(fp)
8020d954:	10800a17 	ldw	r2,40(r2)
8020d958:	e0fff917 	ldw	r3,-28(fp)
8020d95c:	1809883a 	mov	r4,r3
8020d960:	e0fffb17 	ldw	r3,-20(fp)
8020d964:	1885883a 	add	r2,r3,r2
8020d968:	10800e04 	addi	r2,r2,56
8020d96c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
8020d970:	e0bffb17 	ldw	r2,-20(fp)
8020d974:	10800a17 	ldw	r2,40(r2)
8020d978:	10800044 	addi	r2,r2,1
8020d97c:	10c1ffcc 	andi	r3,r2,2047
8020d980:	e0bffb17 	ldw	r2,-20(fp)
8020d984:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
8020d988:	003fe206 	br	8020d914 <__reset+0xfa1ed914>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
8020d98c:	0001883a 	nop
8020d990:	00000106 	br	8020d998 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
8020d994:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
8020d998:	e0bff917 	ldw	r2,-28(fp)
8020d99c:	10bfffec 	andhi	r2,r2,65535
8020d9a0:	10000f26 	beq	r2,zero,8020d9e0 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
8020d9a4:	e0bffb17 	ldw	r2,-20(fp)
8020d9a8:	10c00817 	ldw	r3,32(r2)
8020d9ac:	00bfff84 	movi	r2,-2
8020d9b0:	1886703a 	and	r3,r3,r2
8020d9b4:	e0bffb17 	ldw	r2,-20(fp)
8020d9b8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
8020d9bc:	e0bffc17 	ldw	r2,-16(fp)
8020d9c0:	10800104 	addi	r2,r2,4
8020d9c4:	1007883a 	mov	r3,r2
8020d9c8:	e0bffb17 	ldw	r2,-20(fp)
8020d9cc:	10800817 	ldw	r2,32(r2)
8020d9d0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
8020d9d4:	e0bffc17 	ldw	r2,-16(fp)
8020d9d8:	10800104 	addi	r2,r2,4
8020d9dc:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
8020d9e0:	e0bffd17 	ldw	r2,-12(fp)
8020d9e4:	1080800c 	andi	r2,r2,512
8020d9e8:	103fbe26 	beq	r2,zero,8020d8e4 <__reset+0xfa1ed8e4>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
8020d9ec:	e0bffd17 	ldw	r2,-12(fp)
8020d9f0:	1004d43a 	srli	r2,r2,16
8020d9f4:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
8020d9f8:	00001406 	br	8020da4c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
8020d9fc:	e0bffc17 	ldw	r2,-16(fp)
8020da00:	e0fffb17 	ldw	r3,-20(fp)
8020da04:	18c00d17 	ldw	r3,52(r3)
8020da08:	e13ffb17 	ldw	r4,-20(fp)
8020da0c:	20c7883a 	add	r3,r4,r3
8020da10:	18c20e04 	addi	r3,r3,2104
8020da14:	18c00003 	ldbu	r3,0(r3)
8020da18:	18c03fcc 	andi	r3,r3,255
8020da1c:	18c0201c 	xori	r3,r3,128
8020da20:	18ffe004 	addi	r3,r3,-128
8020da24:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
8020da28:	e0bffb17 	ldw	r2,-20(fp)
8020da2c:	10800d17 	ldw	r2,52(r2)
8020da30:	10800044 	addi	r2,r2,1
8020da34:	10c1ffcc 	andi	r3,r2,2047
8020da38:	e0bffb17 	ldw	r2,-20(fp)
8020da3c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
8020da40:	e0bffa17 	ldw	r2,-24(fp)
8020da44:	10bfffc4 	addi	r2,r2,-1
8020da48:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
8020da4c:	e0bffa17 	ldw	r2,-24(fp)
8020da50:	10000526 	beq	r2,zero,8020da68 <altera_avalon_jtag_uart_irq+0x1a8>
8020da54:	e0bffb17 	ldw	r2,-20(fp)
8020da58:	10c00d17 	ldw	r3,52(r2)
8020da5c:	e0bffb17 	ldw	r2,-20(fp)
8020da60:	10800c17 	ldw	r2,48(r2)
8020da64:	18bfe51e 	bne	r3,r2,8020d9fc <__reset+0xfa1ed9fc>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
8020da68:	e0bffa17 	ldw	r2,-24(fp)
8020da6c:	103f9d26 	beq	r2,zero,8020d8e4 <__reset+0xfa1ed8e4>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
8020da70:	e0bffb17 	ldw	r2,-20(fp)
8020da74:	10c00817 	ldw	r3,32(r2)
8020da78:	00bfff44 	movi	r2,-3
8020da7c:	1886703a 	and	r3,r3,r2
8020da80:	e0bffb17 	ldw	r2,-20(fp)
8020da84:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
8020da88:	e0bffb17 	ldw	r2,-20(fp)
8020da8c:	10800017 	ldw	r2,0(r2)
8020da90:	10800104 	addi	r2,r2,4
8020da94:	1007883a 	mov	r3,r2
8020da98:	e0bffb17 	ldw	r2,-20(fp)
8020da9c:	10800817 	ldw	r2,32(r2)
8020daa0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
8020daa4:	e0bffc17 	ldw	r2,-16(fp)
8020daa8:	10800104 	addi	r2,r2,4
8020daac:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
8020dab0:	003f8c06 	br	8020d8e4 <__reset+0xfa1ed8e4>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
8020dab4:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
8020dab8:	0001883a 	nop
8020dabc:	e037883a 	mov	sp,fp
8020dac0:	df000017 	ldw	fp,0(sp)
8020dac4:	dec00104 	addi	sp,sp,4
8020dac8:	f800283a 	ret

8020dacc <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
8020dacc:	defff804 	addi	sp,sp,-32
8020dad0:	df000715 	stw	fp,28(sp)
8020dad4:	df000704 	addi	fp,sp,28
8020dad8:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
8020dadc:	e0bffb17 	ldw	r2,-20(fp)
8020dae0:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
8020dae4:	e0bff917 	ldw	r2,-28(fp)
8020dae8:	10800017 	ldw	r2,0(r2)
8020daec:	10800104 	addi	r2,r2,4
8020daf0:	10800037 	ldwio	r2,0(r2)
8020daf4:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
8020daf8:	e0bffa17 	ldw	r2,-24(fp)
8020dafc:	1081000c 	andi	r2,r2,1024
8020db00:	10000b26 	beq	r2,zero,8020db30 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
8020db04:	e0bff917 	ldw	r2,-28(fp)
8020db08:	10800017 	ldw	r2,0(r2)
8020db0c:	10800104 	addi	r2,r2,4
8020db10:	1007883a 	mov	r3,r2
8020db14:	e0bff917 	ldw	r2,-28(fp)
8020db18:	10800817 	ldw	r2,32(r2)
8020db1c:	10810014 	ori	r2,r2,1024
8020db20:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
8020db24:	e0bff917 	ldw	r2,-28(fp)
8020db28:	10000915 	stw	zero,36(r2)
8020db2c:	00000a06 	br	8020db58 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
8020db30:	e0bff917 	ldw	r2,-28(fp)
8020db34:	10c00917 	ldw	r3,36(r2)
8020db38:	00a00034 	movhi	r2,32768
8020db3c:	10bfff04 	addi	r2,r2,-4
8020db40:	10c00536 	bltu	r2,r3,8020db58 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
8020db44:	e0bff917 	ldw	r2,-28(fp)
8020db48:	10800917 	ldw	r2,36(r2)
8020db4c:	10c00044 	addi	r3,r2,1
8020db50:	e0bff917 	ldw	r2,-28(fp)
8020db54:	10c00915 	stw	r3,36(r2)
8020db58:	d0a01d17 	ldw	r2,-32652(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
8020db5c:	e037883a 	mov	sp,fp
8020db60:	df000017 	ldw	fp,0(sp)
8020db64:	dec00104 	addi	sp,sp,4
8020db68:	f800283a 	ret

8020db6c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
8020db6c:	defffd04 	addi	sp,sp,-12
8020db70:	df000215 	stw	fp,8(sp)
8020db74:	df000204 	addi	fp,sp,8
8020db78:	e13ffe15 	stw	r4,-8(fp)
8020db7c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
8020db80:	00000506 	br	8020db98 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
8020db84:	e0bfff17 	ldw	r2,-4(fp)
8020db88:	1090000c 	andi	r2,r2,16384
8020db8c:	10000226 	beq	r2,zero,8020db98 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
8020db90:	00bffd44 	movi	r2,-11
8020db94:	00000b06 	br	8020dbc4 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
8020db98:	e0bffe17 	ldw	r2,-8(fp)
8020db9c:	10c00d17 	ldw	r3,52(r2)
8020dba0:	e0bffe17 	ldw	r2,-8(fp)
8020dba4:	10800c17 	ldw	r2,48(r2)
8020dba8:	18800526 	beq	r3,r2,8020dbc0 <altera_avalon_jtag_uart_close+0x54>
8020dbac:	e0bffe17 	ldw	r2,-8(fp)
8020dbb0:	10c00917 	ldw	r3,36(r2)
8020dbb4:	e0bffe17 	ldw	r2,-8(fp)
8020dbb8:	10800117 	ldw	r2,4(r2)
8020dbbc:	18bff136 	bltu	r3,r2,8020db84 <__reset+0xfa1edb84>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
8020dbc0:	0005883a 	mov	r2,zero
}
8020dbc4:	e037883a 	mov	sp,fp
8020dbc8:	df000017 	ldw	fp,0(sp)
8020dbcc:	dec00104 	addi	sp,sp,4
8020dbd0:	f800283a 	ret

8020dbd4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
8020dbd4:	defffa04 	addi	sp,sp,-24
8020dbd8:	df000515 	stw	fp,20(sp)
8020dbdc:	df000504 	addi	fp,sp,20
8020dbe0:	e13ffd15 	stw	r4,-12(fp)
8020dbe4:	e17ffe15 	stw	r5,-8(fp)
8020dbe8:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
8020dbec:	00bff9c4 	movi	r2,-25
8020dbf0:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
8020dbf4:	e0bffe17 	ldw	r2,-8(fp)
8020dbf8:	10da8060 	cmpeqi	r3,r2,27137
8020dbfc:	1800031e 	bne	r3,zero,8020dc0c <altera_avalon_jtag_uart_ioctl+0x38>
8020dc00:	109a80a0 	cmpeqi	r2,r2,27138
8020dc04:	1000181e 	bne	r2,zero,8020dc68 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
8020dc08:	00002906 	br	8020dcb0 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
8020dc0c:	e0bffd17 	ldw	r2,-12(fp)
8020dc10:	10c00117 	ldw	r3,4(r2)
8020dc14:	00a00034 	movhi	r2,32768
8020dc18:	10bfffc4 	addi	r2,r2,-1
8020dc1c:	18802126 	beq	r3,r2,8020dca4 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
8020dc20:	e0bfff17 	ldw	r2,-4(fp)
8020dc24:	10800017 	ldw	r2,0(r2)
8020dc28:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
8020dc2c:	e0bffc17 	ldw	r2,-16(fp)
8020dc30:	10800090 	cmplti	r2,r2,2
8020dc34:	1000061e 	bne	r2,zero,8020dc50 <altera_avalon_jtag_uart_ioctl+0x7c>
8020dc38:	e0fffc17 	ldw	r3,-16(fp)
8020dc3c:	00a00034 	movhi	r2,32768
8020dc40:	10bfffc4 	addi	r2,r2,-1
8020dc44:	18800226 	beq	r3,r2,8020dc50 <altera_avalon_jtag_uart_ioctl+0x7c>
8020dc48:	e0bffc17 	ldw	r2,-16(fp)
8020dc4c:	00000206 	br	8020dc58 <altera_avalon_jtag_uart_ioctl+0x84>
8020dc50:	00a00034 	movhi	r2,32768
8020dc54:	10bfff84 	addi	r2,r2,-2
8020dc58:	e0fffd17 	ldw	r3,-12(fp)
8020dc5c:	18800115 	stw	r2,4(r3)
      rc = 0;
8020dc60:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
8020dc64:	00000f06 	br	8020dca4 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
8020dc68:	e0bffd17 	ldw	r2,-12(fp)
8020dc6c:	10c00117 	ldw	r3,4(r2)
8020dc70:	00a00034 	movhi	r2,32768
8020dc74:	10bfffc4 	addi	r2,r2,-1
8020dc78:	18800c26 	beq	r3,r2,8020dcac <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
8020dc7c:	e0bffd17 	ldw	r2,-12(fp)
8020dc80:	10c00917 	ldw	r3,36(r2)
8020dc84:	e0bffd17 	ldw	r2,-12(fp)
8020dc88:	10800117 	ldw	r2,4(r2)
8020dc8c:	1885803a 	cmpltu	r2,r3,r2
8020dc90:	10c03fcc 	andi	r3,r2,255
8020dc94:	e0bfff17 	ldw	r2,-4(fp)
8020dc98:	10c00015 	stw	r3,0(r2)
      rc = 0;
8020dc9c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
8020dca0:	00000206 	br	8020dcac <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
8020dca4:	0001883a 	nop
8020dca8:	00000106 	br	8020dcb0 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
8020dcac:	0001883a 	nop

  default:
    break;
  }

  return rc;
8020dcb0:	e0bffb17 	ldw	r2,-20(fp)
}
8020dcb4:	e037883a 	mov	sp,fp
8020dcb8:	df000017 	ldw	fp,0(sp)
8020dcbc:	dec00104 	addi	sp,sp,4
8020dcc0:	f800283a 	ret

8020dcc4 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
8020dcc4:	defff304 	addi	sp,sp,-52
8020dcc8:	dfc00c15 	stw	ra,48(sp)
8020dccc:	df000b15 	stw	fp,44(sp)
8020dcd0:	df000b04 	addi	fp,sp,44
8020dcd4:	e13ffc15 	stw	r4,-16(fp)
8020dcd8:	e17ffd15 	stw	r5,-12(fp)
8020dcdc:	e1bffe15 	stw	r6,-8(fp)
8020dce0:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
8020dce4:	e0bffd17 	ldw	r2,-12(fp)
8020dce8:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
8020dcec:	00004706 	br	8020de0c <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
8020dcf0:	e0bffc17 	ldw	r2,-16(fp)
8020dcf4:	10800a17 	ldw	r2,40(r2)
8020dcf8:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
8020dcfc:	e0bffc17 	ldw	r2,-16(fp)
8020dd00:	10800b17 	ldw	r2,44(r2)
8020dd04:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
8020dd08:	e0fff717 	ldw	r3,-36(fp)
8020dd0c:	e0bff817 	ldw	r2,-32(fp)
8020dd10:	18800536 	bltu	r3,r2,8020dd28 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
8020dd14:	e0fff717 	ldw	r3,-36(fp)
8020dd18:	e0bff817 	ldw	r2,-32(fp)
8020dd1c:	1885c83a 	sub	r2,r3,r2
8020dd20:	e0bff615 	stw	r2,-40(fp)
8020dd24:	00000406 	br	8020dd38 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
8020dd28:	00c20004 	movi	r3,2048
8020dd2c:	e0bff817 	ldw	r2,-32(fp)
8020dd30:	1885c83a 	sub	r2,r3,r2
8020dd34:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
8020dd38:	e0bff617 	ldw	r2,-40(fp)
8020dd3c:	10001e26 	beq	r2,zero,8020ddb8 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
8020dd40:	e0fffe17 	ldw	r3,-8(fp)
8020dd44:	e0bff617 	ldw	r2,-40(fp)
8020dd48:	1880022e 	bgeu	r3,r2,8020dd54 <altera_avalon_jtag_uart_read+0x90>
        n = space;
8020dd4c:	e0bffe17 	ldw	r2,-8(fp)
8020dd50:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
8020dd54:	e0bffc17 	ldw	r2,-16(fp)
8020dd58:	10c00e04 	addi	r3,r2,56
8020dd5c:	e0bff817 	ldw	r2,-32(fp)
8020dd60:	1885883a 	add	r2,r3,r2
8020dd64:	e1bff617 	ldw	r6,-40(fp)
8020dd68:	100b883a 	mov	r5,r2
8020dd6c:	e13ff517 	ldw	r4,-44(fp)
8020dd70:	0205e6c0 	call	80205e6c <memcpy>
      ptr   += n;
8020dd74:	e0fff517 	ldw	r3,-44(fp)
8020dd78:	e0bff617 	ldw	r2,-40(fp)
8020dd7c:	1885883a 	add	r2,r3,r2
8020dd80:	e0bff515 	stw	r2,-44(fp)
      space -= n;
8020dd84:	e0fffe17 	ldw	r3,-8(fp)
8020dd88:	e0bff617 	ldw	r2,-40(fp)
8020dd8c:	1885c83a 	sub	r2,r3,r2
8020dd90:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
8020dd94:	e0fff817 	ldw	r3,-32(fp)
8020dd98:	e0bff617 	ldw	r2,-40(fp)
8020dd9c:	1885883a 	add	r2,r3,r2
8020dda0:	10c1ffcc 	andi	r3,r2,2047
8020dda4:	e0bffc17 	ldw	r2,-16(fp)
8020dda8:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
8020ddac:	e0bffe17 	ldw	r2,-8(fp)
8020ddb0:	00bfcf16 	blt	zero,r2,8020dcf0 <__reset+0xfa1edcf0>
8020ddb4:	00000106 	br	8020ddbc <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
8020ddb8:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
8020ddbc:	e0fff517 	ldw	r3,-44(fp)
8020ddc0:	e0bffd17 	ldw	r2,-12(fp)
8020ddc4:	1880141e 	bne	r3,r2,8020de18 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
8020ddc8:	e0bfff17 	ldw	r2,-4(fp)
8020ddcc:	1090000c 	andi	r2,r2,16384
8020ddd0:	1000131e 	bne	r2,zero,8020de20 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
8020ddd4:	0001883a 	nop
8020ddd8:	e0bffc17 	ldw	r2,-16(fp)
8020dddc:	10c00a17 	ldw	r3,40(r2)
8020dde0:	e0bff717 	ldw	r2,-36(fp)
8020dde4:	1880051e 	bne	r3,r2,8020ddfc <altera_avalon_jtag_uart_read+0x138>
8020dde8:	e0bffc17 	ldw	r2,-16(fp)
8020ddec:	10c00917 	ldw	r3,36(r2)
8020ddf0:	e0bffc17 	ldw	r2,-16(fp)
8020ddf4:	10800117 	ldw	r2,4(r2)
8020ddf8:	18bff736 	bltu	r3,r2,8020ddd8 <__reset+0xfa1eddd8>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
8020ddfc:	e0bffc17 	ldw	r2,-16(fp)
8020de00:	10c00a17 	ldw	r3,40(r2)
8020de04:	e0bff717 	ldw	r2,-36(fp)
8020de08:	18800726 	beq	r3,r2,8020de28 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
8020de0c:	e0bffe17 	ldw	r2,-8(fp)
8020de10:	00bfb716 	blt	zero,r2,8020dcf0 <__reset+0xfa1edcf0>
8020de14:	00000506 	br	8020de2c <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
8020de18:	0001883a 	nop
8020de1c:	00000306 	br	8020de2c <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
8020de20:	0001883a 	nop
8020de24:	00000106 	br	8020de2c <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
8020de28:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
8020de2c:	e0fff517 	ldw	r3,-44(fp)
8020de30:	e0bffd17 	ldw	r2,-12(fp)
8020de34:	18801826 	beq	r3,r2,8020de98 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8020de38:	0005303a 	rdctl	r2,status
8020de3c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8020de40:	e0fffb17 	ldw	r3,-20(fp)
8020de44:	00bfff84 	movi	r2,-2
8020de48:	1884703a 	and	r2,r3,r2
8020de4c:	1001703a 	wrctl	status,r2
  
  return context;
8020de50:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
8020de54:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
8020de58:	e0bffc17 	ldw	r2,-16(fp)
8020de5c:	10800817 	ldw	r2,32(r2)
8020de60:	10c00054 	ori	r3,r2,1
8020de64:	e0bffc17 	ldw	r2,-16(fp)
8020de68:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
8020de6c:	e0bffc17 	ldw	r2,-16(fp)
8020de70:	10800017 	ldw	r2,0(r2)
8020de74:	10800104 	addi	r2,r2,4
8020de78:	1007883a 	mov	r3,r2
8020de7c:	e0bffc17 	ldw	r2,-16(fp)
8020de80:	10800817 	ldw	r2,32(r2)
8020de84:	18800035 	stwio	r2,0(r3)
8020de88:	e0bffa17 	ldw	r2,-24(fp)
8020de8c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8020de90:	e0bff917 	ldw	r2,-28(fp)
8020de94:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
8020de98:	e0fff517 	ldw	r3,-44(fp)
8020de9c:	e0bffd17 	ldw	r2,-12(fp)
8020dea0:	18800426 	beq	r3,r2,8020deb4 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
8020dea4:	e0fff517 	ldw	r3,-44(fp)
8020dea8:	e0bffd17 	ldw	r2,-12(fp)
8020deac:	1885c83a 	sub	r2,r3,r2
8020deb0:	00000606 	br	8020decc <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
8020deb4:	e0bfff17 	ldw	r2,-4(fp)
8020deb8:	1090000c 	andi	r2,r2,16384
8020debc:	10000226 	beq	r2,zero,8020dec8 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
8020dec0:	00bffd44 	movi	r2,-11
8020dec4:	00000106 	br	8020decc <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
8020dec8:	00bffec4 	movi	r2,-5
}
8020decc:	e037883a 	mov	sp,fp
8020ded0:	dfc00117 	ldw	ra,4(sp)
8020ded4:	df000017 	ldw	fp,0(sp)
8020ded8:	dec00204 	addi	sp,sp,8
8020dedc:	f800283a 	ret

8020dee0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
8020dee0:	defff304 	addi	sp,sp,-52
8020dee4:	dfc00c15 	stw	ra,48(sp)
8020dee8:	df000b15 	stw	fp,44(sp)
8020deec:	df000b04 	addi	fp,sp,44
8020def0:	e13ffc15 	stw	r4,-16(fp)
8020def4:	e17ffd15 	stw	r5,-12(fp)
8020def8:	e1bffe15 	stw	r6,-8(fp)
8020defc:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
8020df00:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
8020df04:	e0bffd17 	ldw	r2,-12(fp)
8020df08:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
8020df0c:	00003706 	br	8020dfec <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
8020df10:	e0bffc17 	ldw	r2,-16(fp)
8020df14:	10800c17 	ldw	r2,48(r2)
8020df18:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
8020df1c:	e0bffc17 	ldw	r2,-16(fp)
8020df20:	10800d17 	ldw	r2,52(r2)
8020df24:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
8020df28:	e0fff917 	ldw	r3,-28(fp)
8020df2c:	e0bff517 	ldw	r2,-44(fp)
8020df30:	1880062e 	bgeu	r3,r2,8020df4c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
8020df34:	e0fff517 	ldw	r3,-44(fp)
8020df38:	e0bff917 	ldw	r2,-28(fp)
8020df3c:	1885c83a 	sub	r2,r3,r2
8020df40:	10bfffc4 	addi	r2,r2,-1
8020df44:	e0bff615 	stw	r2,-40(fp)
8020df48:	00000b06 	br	8020df78 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
8020df4c:	e0bff517 	ldw	r2,-44(fp)
8020df50:	10000526 	beq	r2,zero,8020df68 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
8020df54:	00c20004 	movi	r3,2048
8020df58:	e0bff917 	ldw	r2,-28(fp)
8020df5c:	1885c83a 	sub	r2,r3,r2
8020df60:	e0bff615 	stw	r2,-40(fp)
8020df64:	00000406 	br	8020df78 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
8020df68:	00c1ffc4 	movi	r3,2047
8020df6c:	e0bff917 	ldw	r2,-28(fp)
8020df70:	1885c83a 	sub	r2,r3,r2
8020df74:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
8020df78:	e0bff617 	ldw	r2,-40(fp)
8020df7c:	10001e26 	beq	r2,zero,8020dff8 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
8020df80:	e0fffe17 	ldw	r3,-8(fp)
8020df84:	e0bff617 	ldw	r2,-40(fp)
8020df88:	1880022e 	bgeu	r3,r2,8020df94 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
8020df8c:	e0bffe17 	ldw	r2,-8(fp)
8020df90:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
8020df94:	e0bffc17 	ldw	r2,-16(fp)
8020df98:	10c20e04 	addi	r3,r2,2104
8020df9c:	e0bff917 	ldw	r2,-28(fp)
8020dfa0:	1885883a 	add	r2,r3,r2
8020dfa4:	e1bff617 	ldw	r6,-40(fp)
8020dfa8:	e17ffd17 	ldw	r5,-12(fp)
8020dfac:	1009883a 	mov	r4,r2
8020dfb0:	0205e6c0 	call	80205e6c <memcpy>
      ptr   += n;
8020dfb4:	e0fffd17 	ldw	r3,-12(fp)
8020dfb8:	e0bff617 	ldw	r2,-40(fp)
8020dfbc:	1885883a 	add	r2,r3,r2
8020dfc0:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
8020dfc4:	e0fffe17 	ldw	r3,-8(fp)
8020dfc8:	e0bff617 	ldw	r2,-40(fp)
8020dfcc:	1885c83a 	sub	r2,r3,r2
8020dfd0:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
8020dfd4:	e0fff917 	ldw	r3,-28(fp)
8020dfd8:	e0bff617 	ldw	r2,-40(fp)
8020dfdc:	1885883a 	add	r2,r3,r2
8020dfe0:	10c1ffcc 	andi	r3,r2,2047
8020dfe4:	e0bffc17 	ldw	r2,-16(fp)
8020dfe8:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
8020dfec:	e0bffe17 	ldw	r2,-8(fp)
8020dff0:	00bfc716 	blt	zero,r2,8020df10 <__reset+0xfa1edf10>
8020dff4:	00000106 	br	8020dffc <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
8020dff8:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8020dffc:	0005303a 	rdctl	r2,status
8020e000:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8020e004:	e0fffb17 	ldw	r3,-20(fp)
8020e008:	00bfff84 	movi	r2,-2
8020e00c:	1884703a 	and	r2,r3,r2
8020e010:	1001703a 	wrctl	status,r2
  
  return context;
8020e014:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
8020e018:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
8020e01c:	e0bffc17 	ldw	r2,-16(fp)
8020e020:	10800817 	ldw	r2,32(r2)
8020e024:	10c00094 	ori	r3,r2,2
8020e028:	e0bffc17 	ldw	r2,-16(fp)
8020e02c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
8020e030:	e0bffc17 	ldw	r2,-16(fp)
8020e034:	10800017 	ldw	r2,0(r2)
8020e038:	10800104 	addi	r2,r2,4
8020e03c:	1007883a 	mov	r3,r2
8020e040:	e0bffc17 	ldw	r2,-16(fp)
8020e044:	10800817 	ldw	r2,32(r2)
8020e048:	18800035 	stwio	r2,0(r3)
8020e04c:	e0bffa17 	ldw	r2,-24(fp)
8020e050:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8020e054:	e0bff817 	ldw	r2,-32(fp)
8020e058:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
8020e05c:	e0bffe17 	ldw	r2,-8(fp)
8020e060:	0080100e 	bge	zero,r2,8020e0a4 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
8020e064:	e0bfff17 	ldw	r2,-4(fp)
8020e068:	1090000c 	andi	r2,r2,16384
8020e06c:	1000101e 	bne	r2,zero,8020e0b0 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
8020e070:	0001883a 	nop
8020e074:	e0bffc17 	ldw	r2,-16(fp)
8020e078:	10c00d17 	ldw	r3,52(r2)
8020e07c:	e0bff517 	ldw	r2,-44(fp)
8020e080:	1880051e 	bne	r3,r2,8020e098 <altera_avalon_jtag_uart_write+0x1b8>
8020e084:	e0bffc17 	ldw	r2,-16(fp)
8020e088:	10c00917 	ldw	r3,36(r2)
8020e08c:	e0bffc17 	ldw	r2,-16(fp)
8020e090:	10800117 	ldw	r2,4(r2)
8020e094:	18bff736 	bltu	r3,r2,8020e074 <__reset+0xfa1ee074>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
8020e098:	e0bffc17 	ldw	r2,-16(fp)
8020e09c:	10800917 	ldw	r2,36(r2)
8020e0a0:	1000051e 	bne	r2,zero,8020e0b8 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
8020e0a4:	e0bffe17 	ldw	r2,-8(fp)
8020e0a8:	00bfd016 	blt	zero,r2,8020dfec <__reset+0xfa1edfec>
8020e0ac:	00000306 	br	8020e0bc <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
8020e0b0:	0001883a 	nop
8020e0b4:	00000106 	br	8020e0bc <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
8020e0b8:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
8020e0bc:	e0fffd17 	ldw	r3,-12(fp)
8020e0c0:	e0bff717 	ldw	r2,-36(fp)
8020e0c4:	18800426 	beq	r3,r2,8020e0d8 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
8020e0c8:	e0fffd17 	ldw	r3,-12(fp)
8020e0cc:	e0bff717 	ldw	r2,-36(fp)
8020e0d0:	1885c83a 	sub	r2,r3,r2
8020e0d4:	00000606 	br	8020e0f0 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
8020e0d8:	e0bfff17 	ldw	r2,-4(fp)
8020e0dc:	1090000c 	andi	r2,r2,16384
8020e0e0:	10000226 	beq	r2,zero,8020e0ec <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
8020e0e4:	00bffd44 	movi	r2,-11
8020e0e8:	00000106 	br	8020e0f0 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
8020e0ec:	00bffec4 	movi	r2,-5
}
8020e0f0:	e037883a 	mov	sp,fp
8020e0f4:	dfc00117 	ldw	ra,4(sp)
8020e0f8:	df000017 	ldw	fp,0(sp)
8020e0fc:	dec00204 	addi	sp,sp,8
8020e100:	f800283a 	ret

8020e104 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
8020e104:	defffa04 	addi	sp,sp,-24
8020e108:	dfc00515 	stw	ra,20(sp)
8020e10c:	df000415 	stw	fp,16(sp)
8020e110:	df000404 	addi	fp,sp,16
8020e114:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
8020e118:	0007883a 	mov	r3,zero
8020e11c:	e0bfff17 	ldw	r2,-4(fp)
8020e120:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
8020e124:	e0bfff17 	ldw	r2,-4(fp)
8020e128:	10800104 	addi	r2,r2,4
8020e12c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8020e130:	0005303a 	rdctl	r2,status
8020e134:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8020e138:	e0fffd17 	ldw	r3,-12(fp)
8020e13c:	00bfff84 	movi	r2,-2
8020e140:	1884703a 	and	r2,r3,r2
8020e144:	1001703a 	wrctl	status,r2
  
  return context;
8020e148:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
8020e14c:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
8020e150:	02118540 	call	80211854 <alt_tick>
8020e154:	e0bffc17 	ldw	r2,-16(fp)
8020e158:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8020e15c:	e0bffe17 	ldw	r2,-8(fp)
8020e160:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
8020e164:	0001883a 	nop
8020e168:	e037883a 	mov	sp,fp
8020e16c:	dfc00117 	ldw	ra,4(sp)
8020e170:	df000017 	ldw	fp,0(sp)
8020e174:	dec00204 	addi	sp,sp,8
8020e178:	f800283a 	ret

8020e17c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
8020e17c:	defff804 	addi	sp,sp,-32
8020e180:	dfc00715 	stw	ra,28(sp)
8020e184:	df000615 	stw	fp,24(sp)
8020e188:	df000604 	addi	fp,sp,24
8020e18c:	e13ffc15 	stw	r4,-16(fp)
8020e190:	e17ffd15 	stw	r5,-12(fp)
8020e194:	e1bffe15 	stw	r6,-8(fp)
8020e198:	e1ffff15 	stw	r7,-4(fp)
8020e19c:	e0bfff17 	ldw	r2,-4(fp)
8020e1a0:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
8020e1a4:	d0a01d17 	ldw	r2,-32652(gp)
8020e1a8:	1000021e 	bne	r2,zero,8020e1b4 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
8020e1ac:	e0bffb17 	ldw	r2,-20(fp)
8020e1b0:	d0a01d15 	stw	r2,-32652(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
8020e1b4:	e0bffc17 	ldw	r2,-16(fp)
8020e1b8:	10800104 	addi	r2,r2,4
8020e1bc:	00c001c4 	movi	r3,7
8020e1c0:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
8020e1c4:	d8000015 	stw	zero,0(sp)
8020e1c8:	e1fffc17 	ldw	r7,-16(fp)
8020e1cc:	01a00874 	movhi	r6,32801
8020e1d0:	31b84104 	addi	r6,r6,-7932
8020e1d4:	e17ffe17 	ldw	r5,-8(fp)
8020e1d8:	e13ffd17 	ldw	r4,-12(fp)
8020e1dc:	0210f1c0 	call	80210f1c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
8020e1e0:	0001883a 	nop
8020e1e4:	e037883a 	mov	sp,fp
8020e1e8:	dfc00117 	ldw	ra,4(sp)
8020e1ec:	df000017 	ldw	fp,0(sp)
8020e1f0:	dec00204 	addi	sp,sp,8
8020e1f4:	f800283a 	ret

8020e1f8 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
8020e1f8:	defffa04 	addi	sp,sp,-24
8020e1fc:	dfc00515 	stw	ra,20(sp)
8020e200:	df000415 	stw	fp,16(sp)
8020e204:	df000404 	addi	fp,sp,16
8020e208:	e13ffd15 	stw	r4,-12(fp)
8020e20c:	e17ffe15 	stw	r5,-8(fp)
8020e210:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
8020e214:	e0bffd17 	ldw	r2,-12(fp)
8020e218:	10800017 	ldw	r2,0(r2)
8020e21c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
8020e220:	e0bffc17 	ldw	r2,-16(fp)
8020e224:	10c00a04 	addi	r3,r2,40
8020e228:	e0bffd17 	ldw	r2,-12(fp)
8020e22c:	10800217 	ldw	r2,8(r2)
8020e230:	100f883a 	mov	r7,r2
8020e234:	e1bfff17 	ldw	r6,-4(fp)
8020e238:	e17ffe17 	ldw	r5,-8(fp)
8020e23c:	1809883a 	mov	r4,r3
8020e240:	020e70c0 	call	8020e70c <altera_avalon_uart_read>
      fd->fd_flags);
}
8020e244:	e037883a 	mov	sp,fp
8020e248:	dfc00117 	ldw	ra,4(sp)
8020e24c:	df000017 	ldw	fp,0(sp)
8020e250:	dec00204 	addi	sp,sp,8
8020e254:	f800283a 	ret

8020e258 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
8020e258:	defffa04 	addi	sp,sp,-24
8020e25c:	dfc00515 	stw	ra,20(sp)
8020e260:	df000415 	stw	fp,16(sp)
8020e264:	df000404 	addi	fp,sp,16
8020e268:	e13ffd15 	stw	r4,-12(fp)
8020e26c:	e17ffe15 	stw	r5,-8(fp)
8020e270:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
8020e274:	e0bffd17 	ldw	r2,-12(fp)
8020e278:	10800017 	ldw	r2,0(r2)
8020e27c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
8020e280:	e0bffc17 	ldw	r2,-16(fp)
8020e284:	10c00a04 	addi	r3,r2,40
8020e288:	e0bffd17 	ldw	r2,-12(fp)
8020e28c:	10800217 	ldw	r2,8(r2)
8020e290:	100f883a 	mov	r7,r2
8020e294:	e1bfff17 	ldw	r6,-4(fp)
8020e298:	e17ffe17 	ldw	r5,-8(fp)
8020e29c:	1809883a 	mov	r4,r3
8020e2a0:	020e9240 	call	8020e924 <altera_avalon_uart_write>
      fd->fd_flags);
}
8020e2a4:	e037883a 	mov	sp,fp
8020e2a8:	dfc00117 	ldw	ra,4(sp)
8020e2ac:	df000017 	ldw	fp,0(sp)
8020e2b0:	dec00204 	addi	sp,sp,8
8020e2b4:	f800283a 	ret

8020e2b8 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
8020e2b8:	defffc04 	addi	sp,sp,-16
8020e2bc:	dfc00315 	stw	ra,12(sp)
8020e2c0:	df000215 	stw	fp,8(sp)
8020e2c4:	df000204 	addi	fp,sp,8
8020e2c8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
8020e2cc:	e0bfff17 	ldw	r2,-4(fp)
8020e2d0:	10800017 	ldw	r2,0(r2)
8020e2d4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
8020e2d8:	e0bffe17 	ldw	r2,-8(fp)
8020e2dc:	10c00a04 	addi	r3,r2,40
8020e2e0:	e0bfff17 	ldw	r2,-4(fp)
8020e2e4:	10800217 	ldw	r2,8(r2)
8020e2e8:	100b883a 	mov	r5,r2
8020e2ec:	1809883a 	mov	r4,r3
8020e2f0:	020e67c0 	call	8020e67c <altera_avalon_uart_close>
}
8020e2f4:	e037883a 	mov	sp,fp
8020e2f8:	dfc00117 	ldw	ra,4(sp)
8020e2fc:	df000017 	ldw	fp,0(sp)
8020e300:	dec00204 	addi	sp,sp,8
8020e304:	f800283a 	ret

8020e308 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
8020e308:	defff804 	addi	sp,sp,-32
8020e30c:	dfc00715 	stw	ra,28(sp)
8020e310:	df000615 	stw	fp,24(sp)
8020e314:	df000604 	addi	fp,sp,24
8020e318:	e13ffd15 	stw	r4,-12(fp)
8020e31c:	e17ffe15 	stw	r5,-8(fp)
8020e320:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
8020e324:	e0bffd17 	ldw	r2,-12(fp)
8020e328:	10800017 	ldw	r2,0(r2)
8020e32c:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
8020e330:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
8020e334:	1000041e 	bne	r2,zero,8020e348 <altera_avalon_uart_init+0x40>
8020e338:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
8020e33c:	1000021e 	bne	r2,zero,8020e348 <altera_avalon_uart_init+0x40>
8020e340:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
8020e344:	10000226 	beq	r2,zero,8020e350 <altera_avalon_uart_init+0x48>
8020e348:	00800044 	movi	r2,1
8020e34c:	00000106 	br	8020e354 <altera_avalon_uart_init+0x4c>
8020e350:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
8020e354:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
8020e358:	e0bffc17 	ldw	r2,-16(fp)
8020e35c:	10000f1e 	bne	r2,zero,8020e39c <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
8020e360:	e0bffd17 	ldw	r2,-12(fp)
8020e364:	00c32004 	movi	r3,3200
8020e368:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
8020e36c:	e0bffb17 	ldw	r2,-20(fp)
8020e370:	10800304 	addi	r2,r2,12
8020e374:	e0fffd17 	ldw	r3,-12(fp)
8020e378:	18c00117 	ldw	r3,4(r3)
8020e37c:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
8020e380:	d8000015 	stw	zero,0(sp)
8020e384:	e1fffd17 	ldw	r7,-12(fp)
8020e388:	01a00874 	movhi	r6,32801
8020e38c:	31b8ed04 	addi	r6,r6,-7244
8020e390:	e17fff17 	ldw	r5,-4(fp)
8020e394:	e13ffe17 	ldw	r4,-8(fp)
8020e398:	0210f1c0 	call	80210f1c <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
8020e39c:	0001883a 	nop
8020e3a0:	e037883a 	mov	sp,fp
8020e3a4:	dfc00117 	ldw	ra,4(sp)
8020e3a8:	df000017 	ldw	fp,0(sp)
8020e3ac:	dec00204 	addi	sp,sp,8
8020e3b0:	f800283a 	ret

8020e3b4 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
8020e3b4:	defffa04 	addi	sp,sp,-24
8020e3b8:	dfc00515 	stw	ra,20(sp)
8020e3bc:	df000415 	stw	fp,16(sp)
8020e3c0:	df000404 	addi	fp,sp,16
8020e3c4:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
8020e3c8:	e0bfff17 	ldw	r2,-4(fp)
8020e3cc:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
8020e3d0:	e0bffc17 	ldw	r2,-16(fp)
8020e3d4:	10800017 	ldw	r2,0(r2)
8020e3d8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
8020e3dc:	e0bffd17 	ldw	r2,-12(fp)
8020e3e0:	10800204 	addi	r2,r2,8
8020e3e4:	10800037 	ldwio	r2,0(r2)
8020e3e8:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
8020e3ec:	e0bffd17 	ldw	r2,-12(fp)
8020e3f0:	10800204 	addi	r2,r2,8
8020e3f4:	0007883a 	mov	r3,zero
8020e3f8:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
8020e3fc:	e0bffd17 	ldw	r2,-12(fp)
8020e400:	10800204 	addi	r2,r2,8
8020e404:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
8020e408:	e0bffe17 	ldw	r2,-8(fp)
8020e40c:	1080200c 	andi	r2,r2,128
8020e410:	10000326 	beq	r2,zero,8020e420 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
8020e414:	e17ffe17 	ldw	r5,-8(fp)
8020e418:	e13ffc17 	ldw	r4,-16(fp)
8020e41c:	020e4500 	call	8020e450 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
8020e420:	e0bffe17 	ldw	r2,-8(fp)
8020e424:	1081100c 	andi	r2,r2,1088
8020e428:	10000326 	beq	r2,zero,8020e438 <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
8020e42c:	e17ffe17 	ldw	r5,-8(fp)
8020e430:	e13ffc17 	ldw	r4,-16(fp)
8020e434:	020e5340 	call	8020e534 <altera_avalon_uart_txirq>
  }
  

}
8020e438:	0001883a 	nop
8020e43c:	e037883a 	mov	sp,fp
8020e440:	dfc00117 	ldw	ra,4(sp)
8020e444:	df000017 	ldw	fp,0(sp)
8020e448:	dec00204 	addi	sp,sp,8
8020e44c:	f800283a 	ret

8020e450 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
8020e450:	defffc04 	addi	sp,sp,-16
8020e454:	df000315 	stw	fp,12(sp)
8020e458:	df000304 	addi	fp,sp,12
8020e45c:	e13ffe15 	stw	r4,-8(fp)
8020e460:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
8020e464:	e0bfff17 	ldw	r2,-4(fp)
8020e468:	108000cc 	andi	r2,r2,3
8020e46c:	10002c1e 	bne	r2,zero,8020e520 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
8020e470:	e0bffe17 	ldw	r2,-8(fp)
8020e474:	10800317 	ldw	r2,12(r2)
8020e478:	e0bffe17 	ldw	r2,-8(fp)
8020e47c:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
8020e480:	e0bffe17 	ldw	r2,-8(fp)
8020e484:	10800317 	ldw	r2,12(r2)
8020e488:	10800044 	addi	r2,r2,1
8020e48c:	10800fcc 	andi	r2,r2,63
8020e490:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
8020e494:	e0bffe17 	ldw	r2,-8(fp)
8020e498:	10800317 	ldw	r2,12(r2)
8020e49c:	e0fffe17 	ldw	r3,-8(fp)
8020e4a0:	18c00017 	ldw	r3,0(r3)
8020e4a4:	18c00037 	ldwio	r3,0(r3)
8020e4a8:	1809883a 	mov	r4,r3
8020e4ac:	e0fffe17 	ldw	r3,-8(fp)
8020e4b0:	1885883a 	add	r2,r3,r2
8020e4b4:	10800704 	addi	r2,r2,28
8020e4b8:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
8020e4bc:	e0bffe17 	ldw	r2,-8(fp)
8020e4c0:	e0fffd17 	ldw	r3,-12(fp)
8020e4c4:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
8020e4c8:	e0bffe17 	ldw	r2,-8(fp)
8020e4cc:	10800317 	ldw	r2,12(r2)
8020e4d0:	10800044 	addi	r2,r2,1
8020e4d4:	10800fcc 	andi	r2,r2,63
8020e4d8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
8020e4dc:	e0bffe17 	ldw	r2,-8(fp)
8020e4e0:	10c00217 	ldw	r3,8(r2)
8020e4e4:	e0bffd17 	ldw	r2,-12(fp)
8020e4e8:	18800e1e 	bne	r3,r2,8020e524 <altera_avalon_uart_rxirq+0xd4>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
8020e4ec:	e0bffe17 	ldw	r2,-8(fp)
8020e4f0:	10c00117 	ldw	r3,4(r2)
8020e4f4:	00bfdfc4 	movi	r2,-129
8020e4f8:	1886703a 	and	r3,r3,r2
8020e4fc:	e0bffe17 	ldw	r2,-8(fp)
8020e500:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
8020e504:	e0bffe17 	ldw	r2,-8(fp)
8020e508:	10800017 	ldw	r2,0(r2)
8020e50c:	10800304 	addi	r2,r2,12
8020e510:	e0fffe17 	ldw	r3,-8(fp)
8020e514:	18c00117 	ldw	r3,4(r3)
8020e518:	10c00035 	stwio	r3,0(r2)
8020e51c:	00000106 	br	8020e524 <altera_avalon_uart_rxirq+0xd4>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
8020e520:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
8020e524:	e037883a 	mov	sp,fp
8020e528:	df000017 	ldw	fp,0(sp)
8020e52c:	dec00104 	addi	sp,sp,4
8020e530:	f800283a 	ret

8020e534 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
8020e534:	defffb04 	addi	sp,sp,-20
8020e538:	df000415 	stw	fp,16(sp)
8020e53c:	df000404 	addi	fp,sp,16
8020e540:	e13ffc15 	stw	r4,-16(fp)
8020e544:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
8020e548:	e0bffc17 	ldw	r2,-16(fp)
8020e54c:	10c00417 	ldw	r3,16(r2)
8020e550:	e0bffc17 	ldw	r2,-16(fp)
8020e554:	10800517 	ldw	r2,20(r2)
8020e558:	18803226 	beq	r3,r2,8020e624 <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
8020e55c:	e0bffc17 	ldw	r2,-16(fp)
8020e560:	10800617 	ldw	r2,24(r2)
8020e564:	1080008c 	andi	r2,r2,2
8020e568:	10000326 	beq	r2,zero,8020e578 <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
8020e56c:	e0bffd17 	ldw	r2,-12(fp)
8020e570:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
8020e574:	10001d26 	beq	r2,zero,8020e5ec <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
8020e578:	e0bffc17 	ldw	r2,-16(fp)
8020e57c:	10800417 	ldw	r2,16(r2)
8020e580:	e0bffc17 	ldw	r2,-16(fp)
8020e584:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
8020e588:	e0bffc17 	ldw	r2,-16(fp)
8020e58c:	10800017 	ldw	r2,0(r2)
8020e590:	10800104 	addi	r2,r2,4
8020e594:	e0fffc17 	ldw	r3,-16(fp)
8020e598:	18c00417 	ldw	r3,16(r3)
8020e59c:	e13ffc17 	ldw	r4,-16(fp)
8020e5a0:	20c7883a 	add	r3,r4,r3
8020e5a4:	18c01704 	addi	r3,r3,92
8020e5a8:	18c00003 	ldbu	r3,0(r3)
8020e5ac:	18c03fcc 	andi	r3,r3,255
8020e5b0:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
8020e5b4:	e0bffc17 	ldw	r2,-16(fp)
8020e5b8:	10800417 	ldw	r2,16(r2)
8020e5bc:	10800044 	addi	r2,r2,1
8020e5c0:	e0fffc17 	ldw	r3,-16(fp)
8020e5c4:	18800415 	stw	r2,16(r3)
8020e5c8:	10c00fcc 	andi	r3,r2,63
8020e5cc:	e0bffc17 	ldw	r2,-16(fp)
8020e5d0:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
8020e5d4:	e0bffc17 	ldw	r2,-16(fp)
8020e5d8:	10800117 	ldw	r2,4(r2)
8020e5dc:	10c01014 	ori	r3,r2,64
8020e5e0:	e0bffc17 	ldw	r2,-16(fp)
8020e5e4:	10c00115 	stw	r3,4(r2)
8020e5e8:	00000e06 	br	8020e624 <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
8020e5ec:	e0bffc17 	ldw	r2,-16(fp)
8020e5f0:	10800017 	ldw	r2,0(r2)
8020e5f4:	10800204 	addi	r2,r2,8
8020e5f8:	10800037 	ldwio	r2,0(r2)
8020e5fc:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
8020e600:	e0bffd17 	ldw	r2,-12(fp)
8020e604:	1082000c 	andi	r2,r2,2048
8020e608:	1000061e 	bne	r2,zero,8020e624 <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
8020e60c:	e0bffc17 	ldw	r2,-16(fp)
8020e610:	10c00117 	ldw	r3,4(r2)
8020e614:	00bfefc4 	movi	r2,-65
8020e618:	1886703a 	and	r3,r3,r2
8020e61c:	e0bffc17 	ldw	r2,-16(fp)
8020e620:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
8020e624:	e0bffc17 	ldw	r2,-16(fp)
8020e628:	10c00417 	ldw	r3,16(r2)
8020e62c:	e0bffc17 	ldw	r2,-16(fp)
8020e630:	10800517 	ldw	r2,20(r2)
8020e634:	1880061e 	bne	r3,r2,8020e650 <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
8020e638:	e0bffc17 	ldw	r2,-16(fp)
8020e63c:	10c00117 	ldw	r3,4(r2)
8020e640:	00beefc4 	movi	r2,-1089
8020e644:	1886703a 	and	r3,r3,r2
8020e648:	e0bffc17 	ldw	r2,-16(fp)
8020e64c:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
8020e650:	e0bffc17 	ldw	r2,-16(fp)
8020e654:	10800017 	ldw	r2,0(r2)
8020e658:	10800304 	addi	r2,r2,12
8020e65c:	e0fffc17 	ldw	r3,-16(fp)
8020e660:	18c00117 	ldw	r3,4(r3)
8020e664:	10c00035 	stwio	r3,0(r2)
}
8020e668:	0001883a 	nop
8020e66c:	e037883a 	mov	sp,fp
8020e670:	df000017 	ldw	fp,0(sp)
8020e674:	dec00104 	addi	sp,sp,4
8020e678:	f800283a 	ret

8020e67c <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
8020e67c:	defffd04 	addi	sp,sp,-12
8020e680:	df000215 	stw	fp,8(sp)
8020e684:	df000204 	addi	fp,sp,8
8020e688:	e13ffe15 	stw	r4,-8(fp)
8020e68c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
8020e690:	00000506 	br	8020e6a8 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
8020e694:	e0bfff17 	ldw	r2,-4(fp)
8020e698:	1090000c 	andi	r2,r2,16384
8020e69c:	10000226 	beq	r2,zero,8020e6a8 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
8020e6a0:	00bffd44 	movi	r2,-11
8020e6a4:	00000606 	br	8020e6c0 <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
8020e6a8:	e0bffe17 	ldw	r2,-8(fp)
8020e6ac:	10c00417 	ldw	r3,16(r2)
8020e6b0:	e0bffe17 	ldw	r2,-8(fp)
8020e6b4:	10800517 	ldw	r2,20(r2)
8020e6b8:	18bff61e 	bne	r3,r2,8020e694 <__reset+0xfa1ee694>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
8020e6bc:	0005883a 	mov	r2,zero
}
8020e6c0:	e037883a 	mov	sp,fp
8020e6c4:	df000017 	ldw	fp,0(sp)
8020e6c8:	dec00104 	addi	sp,sp,4
8020e6cc:	f800283a 	ret

8020e6d0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
8020e6d0:	defffe04 	addi	sp,sp,-8
8020e6d4:	dfc00115 	stw	ra,4(sp)
8020e6d8:	df000015 	stw	fp,0(sp)
8020e6dc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
8020e6e0:	d0a00b17 	ldw	r2,-32724(gp)
8020e6e4:	10000326 	beq	r2,zero,8020e6f4 <alt_get_errno+0x24>
8020e6e8:	d0a00b17 	ldw	r2,-32724(gp)
8020e6ec:	103ee83a 	callr	r2
8020e6f0:	00000106 	br	8020e6f8 <alt_get_errno+0x28>
8020e6f4:	d0a01804 	addi	r2,gp,-32672
}
8020e6f8:	e037883a 	mov	sp,fp
8020e6fc:	dfc00117 	ldw	ra,4(sp)
8020e700:	df000017 	ldw	fp,0(sp)
8020e704:	dec00204 	addi	sp,sp,8
8020e708:	f800283a 	ret

8020e70c <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
8020e70c:	defff204 	addi	sp,sp,-56
8020e710:	dfc00d15 	stw	ra,52(sp)
8020e714:	df000c15 	stw	fp,48(sp)
8020e718:	df000c04 	addi	fp,sp,48
8020e71c:	e13ffc15 	stw	r4,-16(fp)
8020e720:	e17ffd15 	stw	r5,-12(fp)
8020e724:	e1bffe15 	stw	r6,-8(fp)
8020e728:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
8020e72c:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
8020e730:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
8020e734:	e0bfff17 	ldw	r2,-4(fp)
8020e738:	1090000c 	andi	r2,r2,16384
8020e73c:	1005003a 	cmpeq	r2,r2,zero
8020e740:	10803fcc 	andi	r2,r2,255
8020e744:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
8020e748:	00001306 	br	8020e798 <altera_avalon_uart_read+0x8c>
    {
      count++;
8020e74c:	e0bff517 	ldw	r2,-44(fp)
8020e750:	10800044 	addi	r2,r2,1
8020e754:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
8020e758:	e0bffd17 	ldw	r2,-12(fp)
8020e75c:	10c00044 	addi	r3,r2,1
8020e760:	e0fffd15 	stw	r3,-12(fp)
8020e764:	e0fffc17 	ldw	r3,-16(fp)
8020e768:	18c00217 	ldw	r3,8(r3)
8020e76c:	e13ffc17 	ldw	r4,-16(fp)
8020e770:	20c7883a 	add	r3,r4,r3
8020e774:	18c00704 	addi	r3,r3,28
8020e778:	18c00003 	ldbu	r3,0(r3)
8020e77c:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
8020e780:	e0bffc17 	ldw	r2,-16(fp)
8020e784:	10800217 	ldw	r2,8(r2)
8020e788:	10800044 	addi	r2,r2,1
8020e78c:	10c00fcc 	andi	r3,r2,63
8020e790:	e0bffc17 	ldw	r2,-16(fp)
8020e794:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
8020e798:	e0fff517 	ldw	r3,-44(fp)
8020e79c:	e0bffe17 	ldw	r2,-8(fp)
8020e7a0:	1880050e 	bge	r3,r2,8020e7b8 <altera_avalon_uart_read+0xac>
8020e7a4:	e0bffc17 	ldw	r2,-16(fp)
8020e7a8:	10c00217 	ldw	r3,8(r2)
8020e7ac:	e0bffc17 	ldw	r2,-16(fp)
8020e7b0:	10800317 	ldw	r2,12(r2)
8020e7b4:	18bfe51e 	bne	r3,r2,8020e74c <__reset+0xfa1ee74c>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
8020e7b8:	e0bff517 	ldw	r2,-44(fp)
8020e7bc:	1000251e 	bne	r2,zero,8020e854 <altera_avalon_uart_read+0x148>
8020e7c0:	e0bffc17 	ldw	r2,-16(fp)
8020e7c4:	10c00217 	ldw	r3,8(r2)
8020e7c8:	e0bffc17 	ldw	r2,-16(fp)
8020e7cc:	10800317 	ldw	r2,12(r2)
8020e7d0:	1880201e 	bne	r3,r2,8020e854 <altera_avalon_uart_read+0x148>
    {
      if (!block)
8020e7d4:	e0bff617 	ldw	r2,-40(fp)
8020e7d8:	1000071e 	bne	r2,zero,8020e7f8 <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
8020e7dc:	020e6d00 	call	8020e6d0 <alt_get_errno>
8020e7e0:	1007883a 	mov	r3,r2
8020e7e4:	008002c4 	movi	r2,11
8020e7e8:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
8020e7ec:	00800044 	movi	r2,1
8020e7f0:	e0bff405 	stb	r2,-48(fp)
        break;
8020e7f4:	00001b06 	br	8020e864 <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8020e7f8:	0005303a 	rdctl	r2,status
8020e7fc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8020e800:	e0fff917 	ldw	r3,-28(fp)
8020e804:	00bfff84 	movi	r2,-2
8020e808:	1884703a 	and	r2,r3,r2
8020e80c:	1001703a 	wrctl	status,r2
  
  return context;
8020e810:	e0bff917 	ldw	r2,-28(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
8020e814:	e0bff815 	stw	r2,-32(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
8020e818:	e0bffc17 	ldw	r2,-16(fp)
8020e81c:	10800117 	ldw	r2,4(r2)
8020e820:	10c02014 	ori	r3,r2,128
8020e824:	e0bffc17 	ldw	r2,-16(fp)
8020e828:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
8020e82c:	e0bffc17 	ldw	r2,-16(fp)
8020e830:	10800017 	ldw	r2,0(r2)
8020e834:	10800304 	addi	r2,r2,12
8020e838:	e0fffc17 	ldw	r3,-16(fp)
8020e83c:	18c00117 	ldw	r3,4(r3)
8020e840:	10c00035 	stwio	r3,0(r2)
8020e844:	e0bff817 	ldw	r2,-32(fp)
8020e848:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8020e84c:	e0bffa17 	ldw	r2,-24(fp)
8020e850:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
8020e854:	e0bff517 	ldw	r2,-44(fp)
8020e858:	1000021e 	bne	r2,zero,8020e864 <altera_avalon_uart_read+0x158>
8020e85c:	e0bffe17 	ldw	r2,-8(fp)
8020e860:	103fcd1e 	bne	r2,zero,8020e798 <__reset+0xfa1ee798>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8020e864:	0005303a 	rdctl	r2,status
8020e868:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8020e86c:	e0fffb17 	ldw	r3,-20(fp)
8020e870:	00bfff84 	movi	r2,-2
8020e874:	1884703a 	and	r2,r3,r2
8020e878:	1001703a 	wrctl	status,r2
  
  return context;
8020e87c:	e0bffb17 	ldw	r2,-20(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
8020e880:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
8020e884:	e0bffc17 	ldw	r2,-16(fp)
8020e888:	10800117 	ldw	r2,4(r2)
8020e88c:	10c02014 	ori	r3,r2,128
8020e890:	e0bffc17 	ldw	r2,-16(fp)
8020e894:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
8020e898:	e0bffc17 	ldw	r2,-16(fp)
8020e89c:	10800017 	ldw	r2,0(r2)
8020e8a0:	10800304 	addi	r2,r2,12
8020e8a4:	e0fffc17 	ldw	r3,-16(fp)
8020e8a8:	18c00117 	ldw	r3,4(r3)
8020e8ac:	10c00035 	stwio	r3,0(r2)
8020e8b0:	e0bff817 	ldw	r2,-32(fp)
8020e8b4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8020e8b8:	e0bff717 	ldw	r2,-36(fp)
8020e8bc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
8020e8c0:	e0bff403 	ldbu	r2,-48(fp)
8020e8c4:	10000226 	beq	r2,zero,8020e8d0 <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
8020e8c8:	00bffd44 	movi	r2,-11
8020e8cc:	00000106 	br	8020e8d4 <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
8020e8d0:	e0bff517 	ldw	r2,-44(fp)
  }
}
8020e8d4:	e037883a 	mov	sp,fp
8020e8d8:	dfc00117 	ldw	ra,4(sp)
8020e8dc:	df000017 	ldw	fp,0(sp)
8020e8e0:	dec00204 	addi	sp,sp,8
8020e8e4:	f800283a 	ret

8020e8e8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
8020e8e8:	defffe04 	addi	sp,sp,-8
8020e8ec:	dfc00115 	stw	ra,4(sp)
8020e8f0:	df000015 	stw	fp,0(sp)
8020e8f4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
8020e8f8:	d0a00b17 	ldw	r2,-32724(gp)
8020e8fc:	10000326 	beq	r2,zero,8020e90c <alt_get_errno+0x24>
8020e900:	d0a00b17 	ldw	r2,-32724(gp)
8020e904:	103ee83a 	callr	r2
8020e908:	00000106 	br	8020e910 <alt_get_errno+0x28>
8020e90c:	d0a01804 	addi	r2,gp,-32672
}
8020e910:	e037883a 	mov	sp,fp
8020e914:	dfc00117 	ldw	ra,4(sp)
8020e918:	df000017 	ldw	fp,0(sp)
8020e91c:	dec00204 	addi	sp,sp,8
8020e920:	f800283a 	ret

8020e924 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
8020e924:	defff204 	addi	sp,sp,-56
8020e928:	dfc00d15 	stw	ra,52(sp)
8020e92c:	df000c15 	stw	fp,48(sp)
8020e930:	df000c04 	addi	fp,sp,48
8020e934:	e13ffc15 	stw	r4,-16(fp)
8020e938:	e17ffd15 	stw	r5,-12(fp)
8020e93c:	e1bffe15 	stw	r6,-8(fp)
8020e940:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
8020e944:	e0bffe17 	ldw	r2,-8(fp)
8020e948:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
8020e94c:	e0bfff17 	ldw	r2,-4(fp)
8020e950:	1090000c 	andi	r2,r2,16384
8020e954:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
8020e958:	00003c06 	br	8020ea4c <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
8020e95c:	e0bffc17 	ldw	r2,-16(fp)
8020e960:	10800517 	ldw	r2,20(r2)
8020e964:	10800044 	addi	r2,r2,1
8020e968:	10800fcc 	andi	r2,r2,63
8020e96c:	e0bff715 	stw	r2,-36(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
8020e970:	e0bffc17 	ldw	r2,-16(fp)
8020e974:	10c00417 	ldw	r3,16(r2)
8020e978:	e0bff717 	ldw	r2,-36(fp)
8020e97c:	1880221e 	bne	r3,r2,8020ea08 <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
8020e980:	e0bff517 	ldw	r2,-44(fp)
8020e984:	10000526 	beq	r2,zero,8020e99c <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
8020e988:	020e8e80 	call	8020e8e8 <alt_get_errno>
8020e98c:	1007883a 	mov	r3,r2
8020e990:	008002c4 	movi	r2,11
8020e994:	18800015 	stw	r2,0(r3)
        break;
8020e998:	00002e06 	br	8020ea54 <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8020e99c:	0005303a 	rdctl	r2,status
8020e9a0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8020e9a4:	e0fff917 	ldw	r3,-28(fp)
8020e9a8:	00bfff84 	movi	r2,-2
8020e9ac:	1884703a 	and	r2,r3,r2
8020e9b0:	1001703a 	wrctl	status,r2
  
  return context;
8020e9b4:	e0bff917 	ldw	r2,-28(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
8020e9b8:	e0bff815 	stw	r2,-32(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
8020e9bc:	e0bffc17 	ldw	r2,-16(fp)
8020e9c0:	10800117 	ldw	r2,4(r2)
8020e9c4:	10c11014 	ori	r3,r2,1088
8020e9c8:	e0bffc17 	ldw	r2,-16(fp)
8020e9cc:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
8020e9d0:	e0bffc17 	ldw	r2,-16(fp)
8020e9d4:	10800017 	ldw	r2,0(r2)
8020e9d8:	10800304 	addi	r2,r2,12
8020e9dc:	e0fffc17 	ldw	r3,-16(fp)
8020e9e0:	18c00117 	ldw	r3,4(r3)
8020e9e4:	10c00035 	stwio	r3,0(r2)
8020e9e8:	e0bff817 	ldw	r2,-32(fp)
8020e9ec:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8020e9f0:	e0bff617 	ldw	r2,-40(fp)
8020e9f4:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
8020e9f8:	e0bffc17 	ldw	r2,-16(fp)
8020e9fc:	10c00417 	ldw	r3,16(r2)
8020ea00:	e0bff717 	ldw	r2,-36(fp)
8020ea04:	18bffc26 	beq	r3,r2,8020e9f8 <__reset+0xfa1ee9f8>
      }
    }

    count--;
8020ea08:	e0bff417 	ldw	r2,-48(fp)
8020ea0c:	10bfffc4 	addi	r2,r2,-1
8020ea10:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
8020ea14:	e0bffc17 	ldw	r2,-16(fp)
8020ea18:	10c00517 	ldw	r3,20(r2)
8020ea1c:	e0bffd17 	ldw	r2,-12(fp)
8020ea20:	11000044 	addi	r4,r2,1
8020ea24:	e13ffd15 	stw	r4,-12(fp)
8020ea28:	10800003 	ldbu	r2,0(r2)
8020ea2c:	1009883a 	mov	r4,r2
8020ea30:	e0bffc17 	ldw	r2,-16(fp)
8020ea34:	10c5883a 	add	r2,r2,r3
8020ea38:	10801704 	addi	r2,r2,92
8020ea3c:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
8020ea40:	e0bffc17 	ldw	r2,-16(fp)
8020ea44:	e0fff717 	ldw	r3,-36(fp)
8020ea48:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
8020ea4c:	e0bff417 	ldw	r2,-48(fp)
8020ea50:	103fc21e 	bne	r2,zero,8020e95c <__reset+0xfa1ee95c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8020ea54:	0005303a 	rdctl	r2,status
8020ea58:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8020ea5c:	e0fffb17 	ldw	r3,-20(fp)
8020ea60:	00bfff84 	movi	r2,-2
8020ea64:	1884703a 	and	r2,r3,r2
8020ea68:	1001703a 	wrctl	status,r2
  
  return context;
8020ea6c:	e0bffb17 	ldw	r2,-20(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
8020ea70:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
8020ea74:	e0bffc17 	ldw	r2,-16(fp)
8020ea78:	10800117 	ldw	r2,4(r2)
8020ea7c:	10c11014 	ori	r3,r2,1088
8020ea80:	e0bffc17 	ldw	r2,-16(fp)
8020ea84:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
8020ea88:	e0bffc17 	ldw	r2,-16(fp)
8020ea8c:	10800017 	ldw	r2,0(r2)
8020ea90:	10800304 	addi	r2,r2,12
8020ea94:	e0fffc17 	ldw	r3,-16(fp)
8020ea98:	18c00117 	ldw	r3,4(r3)
8020ea9c:	10c00035 	stwio	r3,0(r2)
8020eaa0:	e0bff817 	ldw	r2,-32(fp)
8020eaa4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8020eaa8:	e0bffa17 	ldw	r2,-24(fp)
8020eaac:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
8020eab0:	e0fffe17 	ldw	r3,-8(fp)
8020eab4:	e0bff417 	ldw	r2,-48(fp)
8020eab8:	1885c83a 	sub	r2,r3,r2
}
8020eabc:	e037883a 	mov	sp,fp
8020eac0:	dfc00117 	ldw	ra,4(sp)
8020eac4:	df000017 	ldw	fp,0(sp)
8020eac8:	dec00204 	addi	sp,sp,8
8020eacc:	f800283a 	ret

8020ead0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
8020ead0:	defffe04 	addi	sp,sp,-8
8020ead4:	dfc00115 	stw	ra,4(sp)
8020ead8:	df000015 	stw	fp,0(sp)
8020eadc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
8020eae0:	d0a00b17 	ldw	r2,-32724(gp)
8020eae4:	10000326 	beq	r2,zero,8020eaf4 <alt_get_errno+0x24>
8020eae8:	d0a00b17 	ldw	r2,-32724(gp)
8020eaec:	103ee83a 	callr	r2
8020eaf0:	00000106 	br	8020eaf8 <alt_get_errno+0x28>
8020eaf4:	d0a01804 	addi	r2,gp,-32672
}
8020eaf8:	e037883a 	mov	sp,fp
8020eafc:	dfc00117 	ldw	ra,4(sp)
8020eb00:	df000017 	ldw	fp,0(sp)
8020eb04:	dec00204 	addi	sp,sp,8
8020eb08:	f800283a 	ret

8020eb0c <alt_msgdma_write_standard_descriptor>:
 */
static int alt_msgdma_write_standard_descriptor (
    alt_u32 *csr_base, 
    alt_u32 *descriptor_base,
    alt_msgdma_standard_descriptor *descriptor)
{
8020eb0c:	defffc04 	addi	sp,sp,-16
8020eb10:	df000315 	stw	fp,12(sp)
8020eb14:	df000304 	addi	fp,sp,12
8020eb18:	e13ffd15 	stw	r4,-12(fp)
8020eb1c:	e17ffe15 	stw	r5,-8(fp)
8020eb20:	e1bfff15 	stw	r6,-4(fp)
    if (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(csr_base) & 
8020eb24:	e0bffd17 	ldw	r2,-12(fp)
8020eb28:	10800037 	ldwio	r2,0(r2)
8020eb2c:	1080010c 	andi	r2,r2,4
8020eb30:	10000226 	beq	r2,zero,8020eb3c <alt_msgdma_write_standard_descriptor+0x30>
        ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK))
    {
      /*at least one descriptor buffer is full, returning so that this function 
        is non-blocking*/
        return -ENOSPC;
8020eb34:	00bff904 	movi	r2,-28
8020eb38:	00001506 	br	8020eb90 <alt_msgdma_write_standard_descriptor+0x84>
    }

    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS(descriptor_base, 
8020eb3c:	e0bfff17 	ldw	r2,-4(fp)
8020eb40:	10800017 	ldw	r2,0(r2)
8020eb44:	1007883a 	mov	r3,r2
8020eb48:	e0bffe17 	ldw	r2,-8(fp)
8020eb4c:	10c00035 	stwio	r3,0(r2)
        (alt_u32)descriptor->read_address);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS(descriptor_base, 
8020eb50:	e0bffe17 	ldw	r2,-8(fp)
8020eb54:	10800104 	addi	r2,r2,4
8020eb58:	e0ffff17 	ldw	r3,-4(fp)
8020eb5c:	18c00117 	ldw	r3,4(r3)
8020eb60:	10c00035 	stwio	r3,0(r2)
    (    alt_u32)descriptor->write_address);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_LENGTH(descriptor_base, 
8020eb64:	e0bffe17 	ldw	r2,-8(fp)
8020eb68:	10800204 	addi	r2,r2,8
8020eb6c:	e0ffff17 	ldw	r3,-4(fp)
8020eb70:	18c00217 	ldw	r3,8(r3)
8020eb74:	10c00035 	stwio	r3,0(r2)
        descriptor->transfer_length);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_CONTROL_STANDARD(descriptor_base, 
8020eb78:	e0bffe17 	ldw	r2,-8(fp)
8020eb7c:	10800304 	addi	r2,r2,12
8020eb80:	e0ffff17 	ldw	r3,-4(fp)
8020eb84:	18c00317 	ldw	r3,12(r3)
8020eb88:	10c00035 	stwio	r3,0(r2)
        descriptor->control);
        return 0;
8020eb8c:	0005883a 	mov	r2,zero
}
8020eb90:	e037883a 	mov	sp,fp
8020eb94:	df000017 	ldw	fp,0(sp)
8020eb98:	dec00104 	addi	sp,sp,4
8020eb9c:	f800283a 	ret

8020eba0 <alt_msgdma_write_extended_descriptor>:
 */
static int alt_msgdma_write_extended_descriptor (
    alt_u32 *csr_base, 
    alt_u32 *descriptor_base,
    alt_msgdma_extended_descriptor *descriptor)
{
8020eba0:	defffc04 	addi	sp,sp,-16
8020eba4:	df000315 	stw	fp,12(sp)
8020eba8:	df000304 	addi	fp,sp,12
8020ebac:	e13ffd15 	stw	r4,-12(fp)
8020ebb0:	e17ffe15 	stw	r5,-8(fp)
8020ebb4:	e1bfff15 	stw	r6,-4(fp)
    if (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(csr_base) & 
8020ebb8:	e0bffd17 	ldw	r2,-12(fp)
8020ebbc:	10800037 	ldwio	r2,0(r2)
8020ebc0:	1080010c 	andi	r2,r2,4
8020ebc4:	10000226 	beq	r2,zero,8020ebd0 <alt_msgdma_write_extended_descriptor+0x30>
        ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK))
    {
      /*at least one descriptor buffer is full, returning so that this function 
    is non-blocking*/
        return -ENOSPC;
8020ebc8:	00bff904 	movi	r2,-28
8020ebcc:	00003b06 	br	8020ecbc <alt_msgdma_write_extended_descriptor+0x11c>
    }

    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS(
8020ebd0:	e0bfff17 	ldw	r2,-4(fp)
8020ebd4:	10800017 	ldw	r2,0(r2)
8020ebd8:	1007883a 	mov	r3,r2
8020ebdc:	e0bffe17 	ldw	r2,-8(fp)
8020ebe0:	10c00035 	stwio	r3,0(r2)
        descriptor_base, 
        (alt_u32)descriptor->read_address_low);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS(
8020ebe4:	e0bffe17 	ldw	r2,-8(fp)
8020ebe8:	10800104 	addi	r2,r2,4
8020ebec:	e0ffff17 	ldw	r3,-4(fp)
8020ebf0:	18c00117 	ldw	r3,4(r3)
8020ebf4:	10c00035 	stwio	r3,0(r2)
        descriptor_base, 
        (alt_u32)descriptor->write_address_low);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_LENGTH(
8020ebf8:	e0bffe17 	ldw	r2,-8(fp)
8020ebfc:	10800204 	addi	r2,r2,8
8020ec00:	e0ffff17 	ldw	r3,-4(fp)
8020ec04:	18c00217 	ldw	r3,8(r3)
8020ec08:	10c00035 	stwio	r3,0(r2)
        descriptor_base, 
        descriptor->transfer_length);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_SEQUENCE_NUMBER(
8020ec0c:	e0bffe17 	ldw	r2,-8(fp)
8020ec10:	10800304 	addi	r2,r2,12
8020ec14:	e0ffff17 	ldw	r3,-4(fp)
8020ec18:	18c0030b 	ldhu	r3,12(r3)
8020ec1c:	18ffffcc 	andi	r3,r3,65535
8020ec20:	10c0002d 	sthio	r3,0(r2)
        descriptor_base, 
        descriptor->sequence_number);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_BURST(
8020ec24:	e0bffe17 	ldw	r2,-8(fp)
8020ec28:	10800384 	addi	r2,r2,14
8020ec2c:	e0ffff17 	ldw	r3,-4(fp)
8020ec30:	18c00383 	ldbu	r3,14(r3)
8020ec34:	18c03fcc 	andi	r3,r3,255
8020ec38:	10c00025 	stbio	r3,0(r2)
        descriptor_base, 
        descriptor->read_burst_count);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_BURST(
8020ec3c:	e0bffe17 	ldw	r2,-8(fp)
8020ec40:	108003c4 	addi	r2,r2,15
8020ec44:	e0ffff17 	ldw	r3,-4(fp)
8020ec48:	18c003c3 	ldbu	r3,15(r3)
8020ec4c:	18c03fcc 	andi	r3,r3,255
8020ec50:	10c00025 	stbio	r3,0(r2)
        descriptor_base, 
        descriptor->write_burst_count);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_STRIDE(
8020ec54:	e0bffe17 	ldw	r2,-8(fp)
8020ec58:	10800404 	addi	r2,r2,16
8020ec5c:	e0ffff17 	ldw	r3,-4(fp)
8020ec60:	18c0040b 	ldhu	r3,16(r3)
8020ec64:	18ffffcc 	andi	r3,r3,65535
8020ec68:	10c0002d 	sthio	r3,0(r2)
        descriptor_base, 
        descriptor->read_stride);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_STRIDE(
8020ec6c:	e0bffe17 	ldw	r2,-8(fp)
8020ec70:	10800484 	addi	r2,r2,18
8020ec74:	e0ffff17 	ldw	r3,-4(fp)
8020ec78:	18c0048b 	ldhu	r3,18(r3)
8020ec7c:	18ffffcc 	andi	r3,r3,65535
8020ec80:	10c0002d 	sthio	r3,0(r2)
        descriptor_base, 
        descriptor->write_stride);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS_HIGH(descriptor_base, 0);
8020ec84:	e0bffe17 	ldw	r2,-8(fp)
8020ec88:	10800504 	addi	r2,r2,20
8020ec8c:	0007883a 	mov	r3,zero
8020ec90:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS_HIGH(descriptor_base, 0);
8020ec94:	e0bffe17 	ldw	r2,-8(fp)
8020ec98:	10800604 	addi	r2,r2,24
8020ec9c:	0007883a 	mov	r3,zero
8020eca0:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_CONTROL_ENHANCED(
8020eca4:	e0bffe17 	ldw	r2,-8(fp)
8020eca8:	10800704 	addi	r2,r2,28
8020ecac:	e0ffff17 	ldw	r3,-4(fp)
8020ecb0:	18c00717 	ldw	r3,28(r3)
8020ecb4:	10c00035 	stwio	r3,0(r2)
        descriptor_base, 
        descriptor->control);
    return 0;
8020ecb8:	0005883a 	mov	r2,zero
}
8020ecbc:	e037883a 	mov	sp,fp
8020ecc0:	df000017 	ldw	fp,0(sp)
8020ecc4:	dec00104 	addi	sp,sp,4
8020ecc8:	f800283a 	ret

8020eccc <alt_msgdma_irq>:
 * alt_msgdma_irq()
 *
 * Interrupt handler for the Modular Scatter-Gather DMA controller.
 */
static void alt_msgdma_irq(void *context)
{
8020eccc:	defff804 	addi	sp,sp,-32
8020ecd0:	dfc00715 	stw	ra,28(sp)
8020ecd4:	df000615 	stw	fp,24(sp)
8020ecd8:	df000604 	addi	fp,sp,24
8020ecdc:	e13fff15 	stw	r4,-4(fp)
    alt_msgdma_dev *dev = (alt_msgdma_dev *) context;
8020ece0:	e0bfff17 	ldw	r2,-4(fp)
8020ece4:	e0bffa15 	stw	r2,-24(fp)
    alt_irq_context cpu_sr;
    alt_u32 temporary_control;

    
    /* disable global interrupt*/
    if (dev->prefetcher_enable)
8020ece8:	e0bffa17 	ldw	r2,-24(fp)
8020ecec:	10801783 	ldbu	r2,94(r2)
8020ecf0:	10803fcc 	andi	r2,r2,255
8020ecf4:	10001126 	beq	r2,zero,8020ed3c <alt_msgdma_irq+0x70>
    {
        temporary_control = 
                IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
8020ecf8:	e0bffa17 	ldw	r2,-24(fp)
8020ecfc:	10800617 	ldw	r2,24(r2)
8020ed00:	10800037 	ldwio	r2,0(r2)

    
    /* disable global interrupt*/
    if (dev->prefetcher_enable)
    {
        temporary_control = 
8020ed04:	1007883a 	mov	r3,r2
8020ed08:	00bffdc4 	movi	r2,-9
8020ed0c:	1884703a 	and	r2,r3,r2
8020ed10:	e0bffb15 	stw	r2,-20(fp)
                IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
                & ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_CLR_MASK;
        
        IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
8020ed14:	e0bffa17 	ldw	r2,-24(fp)
8020ed18:	10800617 	ldw	r2,24(r2)
8020ed1c:	e0fffb17 	ldw	r3,-20(fp)
8020ed20:	10c00035 	stwio	r3,0(r2)
                temporary_control);
        
        /* clear the IRQ status- W1C */
        IOWR_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base,
8020ed24:	e0bffa17 	ldw	r2,-24(fp)
8020ed28:	10800617 	ldw	r2,24(r2)
8020ed2c:	10800404 	addi	r2,r2,16
8020ed30:	00c00044 	movi	r3,1
8020ed34:	10c00035 	stwio	r3,0(r2)
8020ed38:	00001106 	br	8020ed80 <alt_msgdma_irq+0xb4>
                ALT_MSGDMA_PREFETCHER_STATUS_IRQ_SET_MASK);
    }
    else
    {
        temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base)
8020ed3c:	e0bffa17 	ldw	r2,-24(fp)
8020ed40:	10800317 	ldw	r2,12(r2)
8020ed44:	10800104 	addi	r2,r2,4
8020ed48:	10800037 	ldwio	r2,0(r2)
8020ed4c:	1007883a 	mov	r3,r2
8020ed50:	00bffbc4 	movi	r2,-17
8020ed54:	1884703a 	and	r2,r3,r2
8020ed58:	e0bffb15 	stw	r2,-20(fp)
                & (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
        
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
8020ed5c:	e0bffa17 	ldw	r2,-24(fp)
8020ed60:	10800317 	ldw	r2,12(r2)
8020ed64:	10800104 	addi	r2,r2,4
8020ed68:	e0fffb17 	ldw	r3,-20(fp)
8020ed6c:	10c00035 	stwio	r3,0(r2)
        /* clear the IRQ status */
        IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base,
8020ed70:	e0bffa17 	ldw	r2,-24(fp)
8020ed74:	10800317 	ldw	r2,12(r2)
8020ed78:	00c08004 	movi	r3,512
8020ed7c:	10c00035 	stwio	r3,0(r2)
    * Other interrupts are explicitly disabled if callbacks
    * are registered because there is no guarantee that they are 
    * pre-emption-safe. This allows the driver to support 
    * interrupt pre-emption.
    */
    if(dev->callback) 
8020ed80:	e0bffa17 	ldw	r2,-24(fp)
8020ed84:	10800b17 	ldw	r2,44(r2)
8020ed88:	10001226 	beq	r2,zero,8020edd4 <alt_msgdma_irq+0x108>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8020ed8c:	0005303a 	rdctl	r2,status
8020ed90:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8020ed94:	e0fffd17 	ldw	r3,-12(fp)
8020ed98:	00bfff84 	movi	r2,-2
8020ed9c:	1884703a 	and	r2,r3,r2
8020eda0:	1001703a 	wrctl	status,r2
  
  return context;
8020eda4:	e0bffd17 	ldw	r2,-12(fp)
    {
        cpu_sr = alt_irq_disable_all();
8020eda8:	e0bffc15 	stw	r2,-16(fp)
        dev->callback (dev->callback_context);
8020edac:	e0bffa17 	ldw	r2,-24(fp)
8020edb0:	10800b17 	ldw	r2,44(r2)
8020edb4:	e0fffa17 	ldw	r3,-24(fp)
8020edb8:	18c00c17 	ldw	r3,48(r3)
8020edbc:	1809883a 	mov	r4,r3
8020edc0:	103ee83a 	callr	r2
8020edc4:	e0bffc17 	ldw	r2,-16(fp)
8020edc8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8020edcc:	e0bffe17 	ldw	r2,-8(fp)
8020edd0:	1001703a 	wrctl	status,r2
        alt_irq_enable_all(cpu_sr);
    }

    /* enable global interrupt */
    if (dev->prefetcher_enable)
8020edd4:	e0bffa17 	ldw	r2,-24(fp)
8020edd8:	10801783 	ldbu	r2,94(r2)
8020eddc:	10803fcc 	andi	r2,r2,255
8020ede0:	10000a26 	beq	r2,zero,8020ee0c <alt_msgdma_irq+0x140>
    {
        temporary_control = 
                IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
8020ede4:	e0bffa17 	ldw	r2,-24(fp)
8020ede8:	10800617 	ldw	r2,24(r2)
8020edec:	10800037 	ldwio	r2,0(r2)
                | ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
8020edf0:	10800214 	ori	r2,r2,8
    }

    /* enable global interrupt */
    if (dev->prefetcher_enable)
    {
        temporary_control = 
8020edf4:	e0bffb15 	stw	r2,-20(fp)
                IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
                | ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
        
        IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
8020edf8:	e0bffa17 	ldw	r2,-24(fp)
8020edfc:	10800617 	ldw	r2,24(r2)
8020ee00:	e0fffb17 	ldw	r3,-20(fp)
8020ee04:	10c00035 	stwio	r3,0(r2)
                | (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
        
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
    }

    return;
8020ee08:	00000c06 	br	8020ee3c <alt_msgdma_irq+0x170>
        IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
                temporary_control);
    }
    else
    {
        temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) 
8020ee0c:	e0bffa17 	ldw	r2,-24(fp)
8020ee10:	10800317 	ldw	r2,12(r2)
8020ee14:	10800104 	addi	r2,r2,4
8020ee18:	10800037 	ldwio	r2,0(r2)
                | (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
8020ee1c:	10800414 	ori	r2,r2,16
        IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
                temporary_control);
    }
    else
    {
        temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) 
8020ee20:	e0bffb15 	stw	r2,-20(fp)
                | (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
        
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
8020ee24:	e0bffa17 	ldw	r2,-24(fp)
8020ee28:	10800317 	ldw	r2,12(r2)
8020ee2c:	10800104 	addi	r2,r2,4
8020ee30:	e0fffb17 	ldw	r3,-20(fp)
8020ee34:	10c00035 	stwio	r3,0(r2)
    }

    return;
8020ee38:	0001883a 	nop
}
8020ee3c:	e037883a 	mov	sp,fp
8020ee40:	dfc00117 	ldw	ra,4(sp)
8020ee44:	df000017 	ldw	fp,0(sp)
8020ee48:	dec00204 	addi	sp,sp,8
8020ee4c:	f800283a 	ret

8020ee50 <alt_msgdma_construct_standard_descriptor>:
    alt_msgdma_standard_descriptor *descriptor,
    alt_u32 *read_address, 
    alt_u32 *write_address, 
    alt_u32 length, 
    alt_u32 control)
{
8020ee50:	defffb04 	addi	sp,sp,-20
8020ee54:	df000415 	stw	fp,16(sp)
8020ee58:	df000404 	addi	fp,sp,16
8020ee5c:	e13ffc15 	stw	r4,-16(fp)
8020ee60:	e17ffd15 	stw	r5,-12(fp)
8020ee64:	e1bffe15 	stw	r6,-8(fp)
8020ee68:	e1ffff15 	stw	r7,-4(fp)
    if(dev->max_byte < length ||
8020ee6c:	e0bffc17 	ldw	r2,-16(fp)
8020ee70:	10c01217 	ldw	r3,72(r2)
8020ee74:	e0800117 	ldw	r2,4(fp)
8020ee78:	18800436 	bltu	r3,r2,8020ee8c <alt_msgdma_construct_standard_descriptor+0x3c>
       dev->enhanced_features != 0
8020ee7c:	e0bffc17 	ldw	r2,-16(fp)
8020ee80:	10801703 	ldbu	r2,92(r2)
    alt_u32 *read_address, 
    alt_u32 *write_address, 
    alt_u32 length, 
    alt_u32 control)
{
    if(dev->max_byte < length ||
8020ee84:	10803fcc 	andi	r2,r2,255
8020ee88:	10000226 	beq	r2,zero,8020ee94 <alt_msgdma_construct_standard_descriptor+0x44>
       dev->enhanced_features != 0
      )
    {
        return -EINVAL;
8020ee8c:	00bffa84 	movi	r2,-22
8020ee90:	00000e06 	br	8020eecc <alt_msgdma_construct_standard_descriptor+0x7c>
    }
    descriptor->read_address = read_address;
8020ee94:	e0bffd17 	ldw	r2,-12(fp)
8020ee98:	e0fffe17 	ldw	r3,-8(fp)
8020ee9c:	10c00015 	stw	r3,0(r2)
    descriptor->write_address = write_address;
8020eea0:	e0bffd17 	ldw	r2,-12(fp)
8020eea4:	e0ffff17 	ldw	r3,-4(fp)
8020eea8:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
8020eeac:	e0bffd17 	ldw	r2,-12(fp)
8020eeb0:	e0c00117 	ldw	r3,4(fp)
8020eeb4:	10c00215 	stw	r3,8(r2)
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
8020eeb8:	e0800217 	ldw	r2,8(fp)
8020eebc:	10e00034 	orhi	r3,r2,32768
8020eec0:	e0bffd17 	ldw	r2,-12(fp)
8020eec4:	10c00315 	stw	r3,12(r2)
    
    return 0;
8020eec8:	0005883a 	mov	r2,zero
}
8020eecc:	e037883a 	mov	sp,fp
8020eed0:	df000017 	ldw	fp,0(sp)
8020eed4:	dec00104 	addi	sp,sp,4
8020eed8:	f800283a 	ret

8020eedc <alt_msgdma_construct_extended_descriptor>:
    alt_u16 sequence_number, 
    alt_u8 read_burst_count, 
    alt_u8 write_burst_count,
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
8020eedc:	defff604 	addi	sp,sp,-40
8020eee0:	df000915 	stw	fp,36(sp)
8020eee4:	df000904 	addi	fp,sp,36
8020eee8:	e13ff715 	stw	r4,-36(fp)
8020eeec:	e17ff815 	stw	r5,-32(fp)
8020eef0:	e1bff915 	stw	r6,-28(fp)
8020eef4:	e1fffa15 	stw	r7,-24(fp)
8020eef8:	e1800317 	ldw	r6,12(fp)
8020eefc:	e1400417 	ldw	r5,16(fp)
8020ef00:	e1000517 	ldw	r4,20(fp)
8020ef04:	e0c00617 	ldw	r3,24(fp)
8020ef08:	e0800717 	ldw	r2,28(fp)
8020ef0c:	e1bffb0d 	sth	r6,-20(fp)
8020ef10:	e17ffc05 	stb	r5,-16(fp)
8020ef14:	e13ffd05 	stb	r4,-12(fp)
8020ef18:	e0fffe0d 	sth	r3,-8(fp)
8020ef1c:	e0bfff0d 	sth	r2,-4(fp)
    if(dev->max_byte < length ||
8020ef20:	e0bff717 	ldw	r2,-36(fp)
8020ef24:	10c01217 	ldw	r3,72(r2)
8020ef28:	e0800117 	ldw	r2,4(fp)
8020ef2c:	18801936 	bltu	r3,r2,8020ef94 <alt_msgdma_construct_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
8020ef30:	e13ff717 	ldw	r4,-36(fp)
8020ef34:	20801317 	ldw	r2,76(r4)
8020ef38:	20c01417 	ldw	r3,80(r4)
8020ef3c:	e13ffe0b 	ldhu	r4,-8(fp)
8020ef40:	213fffcc 	andi	r4,r4,65535
8020ef44:	2015883a 	mov	r10,r4
8020ef48:	0017883a 	mov	r11,zero
    alt_u8 read_burst_count, 
    alt_u8 write_burst_count,
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
    if(dev->max_byte < length ||
8020ef4c:	1ac01136 	bltu	r3,r11,8020ef94 <alt_msgdma_construct_extended_descriptor+0xb8>
8020ef50:	58c0011e 	bne	r11,r3,8020ef58 <alt_msgdma_construct_extended_descriptor+0x7c>
8020ef54:	12800f36 	bltu	r2,r10,8020ef94 <alt_msgdma_construct_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
8020ef58:	e13ff717 	ldw	r4,-36(fp)
8020ef5c:	20801317 	ldw	r2,76(r4)
8020ef60:	20c01417 	ldw	r3,80(r4)
8020ef64:	e13fff0b 	ldhu	r4,-4(fp)
8020ef68:	213fffcc 	andi	r4,r4,65535
8020ef6c:	2011883a 	mov	r8,r4
8020ef70:	0013883a 	mov	r9,zero
    alt_u8 write_burst_count,
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
    if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
8020ef74:	1a400736 	bltu	r3,r9,8020ef94 <alt_msgdma_construct_extended_descriptor+0xb8>
8020ef78:	48c0011e 	bne	r9,r3,8020ef80 <alt_msgdma_construct_extended_descriptor+0xa4>
8020ef7c:	12000536 	bltu	r2,r8,8020ef94 <alt_msgdma_construct_extended_descriptor+0xb8>
       dev->max_stride < write_stride ||
       dev->enhanced_features != 1 
8020ef80:	e0bff717 	ldw	r2,-36(fp)
8020ef84:	10801703 	ldbu	r2,92(r2)
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
    if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
8020ef88:	10803fcc 	andi	r2,r2,255
8020ef8c:	10800060 	cmpeqi	r2,r2,1
8020ef90:	1000021e 	bne	r2,zero,8020ef9c <alt_msgdma_construct_extended_descriptor+0xc0>
       dev->enhanced_features != 1 
      )
    {
        return -EINVAL;
8020ef94:	00bffa84 	movi	r2,-22
8020ef98:	00002106 	br	8020f020 <alt_msgdma_construct_extended_descriptor+0x144>
    }
    
    descriptor->read_address_low = read_address;
8020ef9c:	e0bff817 	ldw	r2,-32(fp)
8020efa0:	e0fff917 	ldw	r3,-28(fp)
8020efa4:	10c00015 	stw	r3,0(r2)
    descriptor->write_address_low = write_address;
8020efa8:	e0bff817 	ldw	r2,-32(fp)
8020efac:	e0fffa17 	ldw	r3,-24(fp)
8020efb0:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
8020efb4:	e0bff817 	ldw	r2,-32(fp)
8020efb8:	e0c00117 	ldw	r3,4(fp)
8020efbc:	10c00215 	stw	r3,8(r2)
    descriptor->sequence_number = sequence_number;
8020efc0:	e0bff817 	ldw	r2,-32(fp)
8020efc4:	e0fffb0b 	ldhu	r3,-20(fp)
8020efc8:	10c0030d 	sth	r3,12(r2)
    descriptor->read_burst_count = read_burst_count;
8020efcc:	e0bff817 	ldw	r2,-32(fp)
8020efd0:	e0fffc03 	ldbu	r3,-16(fp)
8020efd4:	10c00385 	stb	r3,14(r2)
    descriptor->write_burst_count = write_burst_count;
8020efd8:	e0bff817 	ldw	r2,-32(fp)
8020efdc:	e0fffd03 	ldbu	r3,-12(fp)
8020efe0:	10c003c5 	stb	r3,15(r2)
    descriptor->read_stride = read_stride;
8020efe4:	e0bff817 	ldw	r2,-32(fp)
8020efe8:	e0fffe0b 	ldhu	r3,-8(fp)
8020efec:	10c0040d 	sth	r3,16(r2)
    descriptor->write_stride = write_stride;
8020eff0:	e0bff817 	ldw	r2,-32(fp)
8020eff4:	e0ffff0b 	ldhu	r3,-4(fp)
8020eff8:	10c0048d 	sth	r3,18(r2)
    descriptor->read_address_high = NULL;
8020effc:	e0bff817 	ldw	r2,-32(fp)
8020f000:	10000515 	stw	zero,20(r2)
    descriptor->write_address_high = NULL;
8020f004:	e0bff817 	ldw	r2,-32(fp)
8020f008:	10000615 	stw	zero,24(r2)
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
8020f00c:	e0800217 	ldw	r2,8(fp)
8020f010:	10e00034 	orhi	r3,r2,32768
8020f014:	e0bff817 	ldw	r2,-32(fp)
8020f018:	10c00715 	stw	r3,28(r2)

  return 0 ;
8020f01c:	0005883a 	mov	r2,zero

}
8020f020:	e037883a 	mov	sp,fp
8020f024:	df000017 	ldw	fp,0(sp)
8020f028:	dec00104 	addi	sp,sp,4
8020f02c:	f800283a 	ret

8020f030 <alt_msgdma_descriptor_async_transfer>:
 */
static int alt_msgdma_descriptor_async_transfer (
    alt_msgdma_dev *dev, 
    alt_msgdma_standard_descriptor *standard_desc, 
    alt_msgdma_extended_descriptor *extended_desc)
{
8020f030:	defff004 	addi	sp,sp,-64
8020f034:	dfc00f15 	stw	ra,60(sp)
8020f038:	df000e15 	stw	fp,56(sp)
8020f03c:	df000e04 	addi	fp,sp,56
8020f040:	e13ffd15 	stw	r4,-12(fp)
8020f044:	e17ffe15 	stw	r5,-8(fp)
8020f048:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 control = 0;
8020f04c:	e03ff315 	stw	zero,-52(fp)
    alt_irq_context context = 0;
8020f050:	e03ff415 	stw	zero,-48(fp)
    alt_u16 counter = 0;
8020f054:	e03ff20d 	sth	zero,-56(fp)
    alt_u32 fifo_read_fill_level = (
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
8020f058:	e0bffd17 	ldw	r2,-12(fp)
8020f05c:	10800317 	ldw	r2,12(r2)
8020f060:	10800204 	addi	r2,r2,8
8020f064:	10800037 	ldwio	r2,0(r2)
    alt_msgdma_extended_descriptor *extended_desc)
{
    alt_u32 control = 0;
    alt_irq_context context = 0;
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
8020f068:	10bfffcc 	andi	r2,r2,65535
8020f06c:	e0bff515 	stw	r2,-44(fp)
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
        ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
        ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
8020f070:	e0bffd17 	ldw	r2,-12(fp)
8020f074:	10800317 	ldw	r2,12(r2)
8020f078:	10800204 	addi	r2,r2,8
8020f07c:	10800037 	ldwio	r2,0(r2)
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
        ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
        ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
8020f080:	1004d43a 	srli	r2,r2,16
8020f084:	e0bff615 	stw	r2,-40(fp)
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
        ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
        ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;

    /* Return with error immediately if one of read/write buffer is full */
    if((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
8020f088:	e0bffd17 	ldw	r2,-12(fp)
8020f08c:	10800917 	ldw	r2,36(r2)
8020f090:	e0fff617 	ldw	r3,-40(fp)
8020f094:	1880042e 	bgeu	r3,r2,8020f0a8 <alt_msgdma_descriptor_async_transfer+0x78>
        (dev->descriptor_fifo_depth <= fifo_read_fill_level))
8020f098:	e0bffd17 	ldw	r2,-12(fp)
8020f09c:	10800917 	ldw	r2,36(r2)
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
        ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
        ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;

    /* Return with error immediately if one of read/write buffer is full */
    if((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
8020f0a0:	e0fff517 	ldw	r3,-44(fp)
8020f0a4:	18800236 	bltu	r3,r2,8020f0b0 <alt_msgdma_descriptor_async_transfer+0x80>
        (dev->descriptor_fifo_depth <= fifo_read_fill_level))
    {
        /*at least one write or read FIFO descriptor buffer is full,
        returning so that this function is non-blocking*/
        return -ENOSPC;
8020f0a8:	00bff904 	movi	r2,-28
8020f0ac:	00008f06 	br	8020f2ec <alt_msgdma_descriptor_async_transfer+0x2bc>
    ALT_SEM_PEND (dev->regs_lock, 0);
    
    /* Stop the msgdma dispatcher from issuing more descriptors to the
    read or write masters  */
    /* stop issuing more descriptors */
    control = ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
8020f0b0:	00800804 	movi	r2,32
8020f0b4:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8020f0b8:	0005303a 	rdctl	r2,status
8020f0bc:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8020f0c0:	e0fff717 	ldw	r3,-36(fp)
8020f0c4:	00bfff84 	movi	r2,-2
8020f0c8:	1884703a 	and	r2,r3,r2
8020f0cc:	1001703a 	wrctl	status,r2
  
  return context;
8020f0d0:	e0bff717 	ldw	r2,-36(fp)
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();
8020f0d4:	e0bff415 	stw	r2,-48(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
8020f0d8:	e0bffd17 	ldw	r2,-12(fp)
8020f0dc:	10800317 	ldw	r2,12(r2)
8020f0e0:	10800104 	addi	r2,r2,4
8020f0e4:	e0fff317 	ldw	r3,-52(fp)
8020f0e8:	10c00035 	stwio	r3,0(r2)
    /*
    * Clear any (previous) status register information
    * that might occlude our error checking later.
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
8020f0ec:	e0bffd17 	ldw	r2,-12(fp)
8020f0f0:	10800317 	ldw	r2,12(r2)
8020f0f4:	e0fffd17 	ldw	r3,-12(fp)
8020f0f8:	18c00317 	ldw	r3,12(r3)
8020f0fc:	18c00037 	ldwio	r3,0(r3)
8020f100:	10c00035 	stwio	r3,0(r2)
8020f104:	e0bff417 	ldw	r2,-48(fp)
8020f108:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8020f10c:	e0bffc17 	ldw	r2,-16(fp)
8020f110:	1001703a 	wrctl	status,r2
        dev->csr_base, 
        IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
    alt_irq_enable_all(context);

    if (NULL != standard_desc && NULL == extended_desc)
8020f114:	e0bffe17 	ldw	r2,-8(fp)
8020f118:	10001a26 	beq	r2,zero,8020f184 <alt_msgdma_descriptor_async_transfer+0x154>
8020f11c:	e0bfff17 	ldw	r2,-4(fp)
8020f120:	1000181e 	bne	r2,zero,8020f184 <alt_msgdma_descriptor_async_transfer+0x154>
    {
        /*writing descriptor structure to the dispatcher, wait until descriptor 
      write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
8020f124:	00000d06 	br	8020f15c <alt_msgdma_descriptor_async_transfer+0x12c>
        dev->csr_base, dev->descriptor_base, standard_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
8020f128:	01000044 	movi	r4,1
8020f12c:	0210b9c0 	call	80210b9c <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
8020f130:	e0bff20b 	ldhu	r2,-56(fp)
8020f134:	1084e230 	cmpltui	r2,r2,5000
8020f138:	1000051e 	bne	r2,zero,8020f150 <alt_msgdma_descriptor_async_transfer+0x120>
            {
                alt_printf("time out after 5 msec while waiting" 
8020f13c:	01200874 	movhi	r4,32801
8020f140:	21091a04 	addi	r4,r4,9320
8020f144:	02115500 	call	80211550 <alt_printf>
                * registers semaphore so that other threads can access the 
                * registers.
                */
                ALT_SEM_POST (dev->regs_lock);
                
                return -ETIME;
8020f148:	00bff084 	movi	r2,-62
8020f14c:	00006706 	br	8020f2ec <alt_msgdma_descriptor_async_transfer+0x2bc>
            }
            counter++; 
8020f150:	e0bff20b 	ldhu	r2,-56(fp)
8020f154:	10800044 	addi	r2,r2,1
8020f158:	e0bff20d 	sth	r2,-56(fp)

    if (NULL != standard_desc && NULL == extended_desc)
    {
        /*writing descriptor structure to the dispatcher, wait until descriptor 
      write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
8020f15c:	e0bffd17 	ldw	r2,-12(fp)
8020f160:	10c00317 	ldw	r3,12(r2)
8020f164:	e0bffd17 	ldw	r2,-12(fp)
8020f168:	10800417 	ldw	r2,16(r2)
8020f16c:	e1bffe17 	ldw	r6,-8(fp)
8020f170:	100b883a 	mov	r5,r2
8020f174:	1809883a 	mov	r4,r3
8020f178:	020eb0c0 	call	8020eb0c <alt_msgdma_write_standard_descriptor>
8020f17c:	103fea1e 	bne	r2,zero,8020f128 <__reset+0xfa1ef128>
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
        dev->csr_base, 
        IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
    alt_irq_enable_all(context);

    if (NULL != standard_desc && NULL == extended_desc)
8020f180:	00001f06 	br	8020f200 <alt_msgdma_descriptor_async_transfer+0x1d0>
                return -ETIME;
            }
            counter++; 
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
8020f184:	e0bffe17 	ldw	r2,-8(fp)
8020f188:	10001b1e 	bne	r2,zero,8020f1f8 <alt_msgdma_descriptor_async_transfer+0x1c8>
8020f18c:	e0bfff17 	ldw	r2,-4(fp)
8020f190:	10001926 	beq	r2,zero,8020f1f8 <alt_msgdma_descriptor_async_transfer+0x1c8>
    {
        counter = 0; /* reset counter */
8020f194:	e03ff20d 	sth	zero,-56(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
      write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
8020f198:	00000d06 	br	8020f1d0 <alt_msgdma_descriptor_async_transfer+0x1a0>
        dev->csr_base, 
        dev->descriptor_base, 
        extended_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
8020f19c:	01000044 	movi	r4,1
8020f1a0:	0210b9c0 	call	80210b9c <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
8020f1a4:	e0bff20b 	ldhu	r2,-56(fp)
8020f1a8:	1084e230 	cmpltui	r2,r2,5000
8020f1ac:	1000051e 	bne	r2,zero,8020f1c4 <alt_msgdma_descriptor_async_transfer+0x194>
            {
                alt_printf("time out after 5 msec while waiting free FIFO buffer" 
8020f1b0:	01200874 	movhi	r4,32801
8020f1b4:	21093004 	addi	r4,r4,9408
8020f1b8:	02115500 	call	80211550 <alt_printf>
                * registers semaphore so that other threads can access the 
                * registers.
                */
                ALT_SEM_POST (dev->regs_lock);
                
                return -ETIME;
8020f1bc:	00bff084 	movi	r2,-62
8020f1c0:	00004a06 	br	8020f2ec <alt_msgdma_descriptor_async_transfer+0x2bc>
            }
            counter++; 
8020f1c4:	e0bff20b 	ldhu	r2,-56(fp)
8020f1c8:	10800044 	addi	r2,r2,1
8020f1cc:	e0bff20d 	sth	r2,-56(fp)
    else if (NULL == standard_desc && NULL != extended_desc)
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
      write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
8020f1d0:	e0bffd17 	ldw	r2,-12(fp)
8020f1d4:	10c00317 	ldw	r3,12(r2)
8020f1d8:	e0bffd17 	ldw	r2,-12(fp)
8020f1dc:	10800417 	ldw	r2,16(r2)
8020f1e0:	e1bfff17 	ldw	r6,-4(fp)
8020f1e4:	100b883a 	mov	r5,r2
8020f1e8:	1809883a 	mov	r4,r3
8020f1ec:	020eba00 	call	8020eba0 <alt_msgdma_write_extended_descriptor>
8020f1f0:	103fea1e 	bne	r2,zero,8020f19c <__reset+0xfa1ef19c>
                return -ETIME;
            }
            counter++; 
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
8020f1f4:	00000206 	br	8020f200 <alt_msgdma_descriptor_async_transfer+0x1d0>
        * semaphore so that other threads can access the registers.
        */
        ALT_SEM_POST (dev->regs_lock);
        
        /* operation not permitted due to descriptor type conflict */
        return -EPERM; 
8020f1f8:	00bfffc4 	movi	r2,-1
8020f1fc:	00003b06 	br	8020f2ec <alt_msgdma_descriptor_async_transfer+0x2bc>
    * If a callback routine has been previously registered which will be
    * called from the msgdma ISR. Set up controller to:
    *  - Run
    *  - Stop on an error with any particular descriptor
    */
    if(dev->callback)
8020f200:	e0bffd17 	ldw	r2,-12(fp)
8020f204:	10800b17 	ldw	r2,44(r2)
8020f208:	10001c26 	beq	r2,zero,8020f27c <alt_msgdma_descriptor_async_transfer+0x24c>
    {

        control |= (dev->control |
8020f20c:	e0bffd17 	ldw	r2,-12(fp)
8020f210:	10c00d17 	ldw	r3,52(r2)
8020f214:	e0bff317 	ldw	r2,-52(fp)
8020f218:	1884b03a 	or	r2,r3,r2
8020f21c:	10800514 	ori	r2,r2,20
8020f220:	e0bff315 	stw	r2,-52(fp)
                    ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK |
                    ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK );
        control &=  (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
8020f224:	e0fff317 	ldw	r3,-52(fp)
8020f228:	00bff7c4 	movi	r2,-33
8020f22c:	1884703a 	and	r2,r3,r2
8020f230:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8020f234:	0005303a 	rdctl	r2,status
8020f238:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8020f23c:	e0fffa17 	ldw	r3,-24(fp)
8020f240:	00bfff84 	movi	r2,-2
8020f244:	1884703a 	and	r2,r3,r2
8020f248:	1001703a 	wrctl	status,r2
  
  return context;
8020f24c:	e0bffa17 	ldw	r2,-24(fp)
    /* making sure the read-modify-write below can't be pre-empted */
        context = alt_irq_disable_all(); 
8020f250:	e0bff415 	stw	r2,-48(fp)
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
8020f254:	e0bffd17 	ldw	r2,-12(fp)
8020f258:	10800317 	ldw	r2,12(r2)
8020f25c:	10800104 	addi	r2,r2,4
8020f260:	e0fff317 	ldw	r3,-52(fp)
8020f264:	10c00035 	stwio	r3,0(r2)
8020f268:	e0bff417 	ldw	r2,-48(fp)
8020f26c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8020f270:	e0bff817 	ldw	r2,-32(fp)
8020f274:	1001703a 	wrctl	status,r2
8020f278:	00001b06 	br	8020f2e8 <alt_msgdma_descriptor_async_transfer+0x2b8>
    *   - Stop on an error with any particular descriptor
    *   - Disable interrupt generation
    */
    else
    {
        control |= (dev->control |
8020f27c:	e0bffd17 	ldw	r2,-12(fp)
8020f280:	10c00d17 	ldw	r3,52(r2)
8020f284:	e0bff317 	ldw	r2,-52(fp)
8020f288:	1884b03a 	or	r2,r3,r2
8020f28c:	10800114 	ori	r2,r2,4
8020f290:	e0bff315 	stw	r2,-52(fp)
                    ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK );
        control &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) &
8020f294:	e0fff317 	ldw	r3,-52(fp)
8020f298:	00bff3c4 	movi	r2,-49
8020f29c:	1884703a 	and	r2,r3,r2
8020f2a0:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8020f2a4:	0005303a 	rdctl	r2,status
8020f2a8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8020f2ac:	e0fffb17 	ldw	r3,-20(fp)
8020f2b0:	00bfff84 	movi	r2,-2
8020f2b4:	1884703a 	and	r2,r3,r2
8020f2b8:	1001703a 	wrctl	status,r2
  
  return context;
8020f2bc:	e0bffb17 	ldw	r2,-20(fp)
                   (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
        /* making sure the read-modify-write below can't be pre-empted */
        context = alt_irq_disable_all();
8020f2c0:	e0bff415 	stw	r2,-48(fp)
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
8020f2c4:	e0bffd17 	ldw	r2,-12(fp)
8020f2c8:	10800317 	ldw	r2,12(r2)
8020f2cc:	10800104 	addi	r2,r2,4
8020f2d0:	e0fff317 	ldw	r3,-52(fp)
8020f2d4:	10c00035 	stwio	r3,0(r2)
8020f2d8:	e0bff417 	ldw	r2,-48(fp)
8020f2dc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8020f2e0:	e0bff917 	ldw	r2,-28(fp)
8020f2e4:	1001703a 	wrctl	status,r2
     * Now that access to the registers is complete, release the registers
     * semaphore so that other threads can access the registers.
     */
    ALT_SEM_POST (dev->regs_lock);
    
    return 0;
8020f2e8:	0005883a 	mov	r2,zero
}
8020f2ec:	e037883a 	mov	sp,fp
8020f2f0:	dfc00117 	ldw	ra,4(sp)
8020f2f4:	df000017 	ldw	fp,0(sp)
8020f2f8:	dec00204 	addi	sp,sp,8
8020f2fc:	f800283a 	ret

8020f300 <alt_msgdma_descriptor_sync_transfer>:
 */
static int alt_msgdma_descriptor_sync_transfer (
    alt_msgdma_dev *dev, 
    alt_msgdma_standard_descriptor *standard_desc, 
    alt_msgdma_extended_descriptor *extended_desc)
{
8020f300:	defff004 	addi	sp,sp,-64
8020f304:	dfc00f15 	stw	ra,60(sp)
8020f308:	df000e15 	stw	fp,56(sp)
8020f30c:	df000e04 	addi	fp,sp,56
8020f310:	e13ffd15 	stw	r4,-12(fp)
8020f314:	e17ffe15 	stw	r5,-8(fp)
8020f318:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 control=0;
8020f31c:	e03ff615 	stw	zero,-40(fp)
    alt_irq_context context=0;
8020f320:	e03ff715 	stw	zero,-36(fp)
    alt_u32 csr_status = 0;
8020f324:	e03ff215 	stw	zero,-56(fp)
    alt_u16 counter = 0;
8020f328:	e03ff30d 	sth	zero,-52(fp)
    alt_u32 fifo_read_fill_level = (
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
8020f32c:	e0bffd17 	ldw	r2,-12(fp)
8020f330:	10800317 	ldw	r2,12(r2)
8020f334:	10800204 	addi	r2,r2,8
8020f338:	10800037 	ldwio	r2,0(r2)
{
    alt_u32 control=0;
    alt_irq_context context=0;
    alt_u32 csr_status = 0;
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
8020f33c:	10bfffcc 	andi	r2,r2,65535
8020f340:	e0bff415 	stw	r2,-48(fp)
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
        ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
        ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
8020f344:	e0bffd17 	ldw	r2,-12(fp)
8020f348:	10800317 	ldw	r2,12(r2)
8020f34c:	10800204 	addi	r2,r2,8
8020f350:	10800037 	ldwio	r2,0(r2)
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
        ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
        ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
8020f354:	1004d43a 	srli	r2,r2,16
8020f358:	e0bff515 	stw	r2,-44(fp)
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
        ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
        ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;
    alt_u32 error = ALTERA_MSGDMA_CSR_STOPPED_ON_ERROR_MASK | 
8020f35c:	00807804 	movi	r2,480
8020f360:	e0bff815 	stw	r2,-32(fp)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
8020f364:	00001906 	br	8020f3cc <alt_msgdma_descriptor_sync_transfer+0xcc>
        (dev->descriptor_fifo_depth <= fifo_read_fill_level))
    { 
        alt_busy_sleep(1); /* delay 1us */
8020f368:	01000044 	movi	r4,1
8020f36c:	0210b9c0 	call	80210b9c <alt_busy_sleep>
        if(5000 <= counter) /* time_out if waiting longer than 5 msec */
8020f370:	e0bff30b 	ldhu	r2,-52(fp)
8020f374:	1084e230 	cmpltui	r2,r2,5000
8020f378:	1000051e 	bne	r2,zero,8020f390 <alt_msgdma_descriptor_sync_transfer+0x90>
        {
            alt_printf("time out after 5 msec while waiting free FIFO buffer"
8020f37c:	01200874 	movhi	r4,32801
8020f380:	21094604 	addi	r4,r4,9496
8020f384:	02115500 	call	80211550 <alt_printf>
                " for storing descriptor\n");
            return -ETIME;
8020f388:	00bff084 	movi	r2,-62
8020f38c:	0000b506 	br	8020f664 <alt_msgdma_descriptor_sync_transfer+0x364>
        }
        counter++;  
8020f390:	e0bff30b 	ldhu	r2,-52(fp)
8020f394:	10800044 	addi	r2,r2,1
8020f398:	e0bff30d 	sth	r2,-52(fp)
        fifo_read_fill_level = (
            IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
8020f39c:	e0bffd17 	ldw	r2,-12(fp)
8020f3a0:	10800317 	ldw	r2,12(r2)
8020f3a4:	10800204 	addi	r2,r2,8
8020f3a8:	10800037 	ldwio	r2,0(r2)
            alt_printf("time out after 5 msec while waiting free FIFO buffer"
                " for storing descriptor\n");
            return -ETIME;
        }
        counter++;  
        fifo_read_fill_level = (
8020f3ac:	10bfffcc 	andi	r2,r2,65535
8020f3b0:	e0bff415 	stw	r2,-48(fp)
            IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
            ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
            ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
        fifo_write_fill_level = (
            IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
8020f3b4:	e0bffd17 	ldw	r2,-12(fp)
8020f3b8:	10800317 	ldw	r2,12(r2)
8020f3bc:	10800204 	addi	r2,r2,8
8020f3c0:	10800037 	ldwio	r2,0(r2)
        counter++;  
        fifo_read_fill_level = (
            IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
            ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
            ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
        fifo_write_fill_level = (
8020f3c4:	1004d43a 	srli	r2,r2,16
8020f3c8:	e0bff515 	stw	r2,-44(fp)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
8020f3cc:	e0bffd17 	ldw	r2,-12(fp)
8020f3d0:	10800917 	ldw	r2,36(r2)
8020f3d4:	e0fff517 	ldw	r3,-44(fp)
8020f3d8:	18bfe32e 	bgeu	r3,r2,8020f368 <__reset+0xfa1ef368>
        (dev->descriptor_fifo_depth <= fifo_read_fill_level))
8020f3dc:	e0bffd17 	ldw	r2,-12(fp)
8020f3e0:	10800917 	ldw	r2,36(r2)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
8020f3e4:	e0fff417 	ldw	r3,-48(fp)
8020f3e8:	18bfdf2e 	bgeu	r3,r2,8020f368 <__reset+0xfa1ef368>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8020f3ec:	0005303a 	rdctl	r2,status
8020f3f0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8020f3f4:	e0fffc17 	ldw	r3,-16(fp)
8020f3f8:	00bfff84 	movi	r2,-2
8020f3fc:	1884703a 	and	r2,r3,r2
8020f400:	1001703a 	wrctl	status,r2
  
  return context;
8020f404:	e0bffc17 	ldw	r2,-16(fp)
    ALT_SEM_PEND (dev->regs_lock, 0);
    
    /* Stop the msgdma dispatcher from issuing more descriptors to the
    read or write masters  */
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();
8020f408:	e0bff715 	stw	r2,-36(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
8020f40c:	e0bffd17 	ldw	r2,-12(fp)
8020f410:	10800317 	ldw	r2,12(r2)
8020f414:	10800104 	addi	r2,r2,4
8020f418:	00c00804 	movi	r3,32
8020f41c:	10c00035 	stwio	r3,0(r2)
        ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
    /*
    * Clear any (previous) status register information
    * that might occlude our error checking later.
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
8020f420:	e0bffd17 	ldw	r2,-12(fp)
8020f424:	10800317 	ldw	r2,12(r2)
8020f428:	e0fffd17 	ldw	r3,-12(fp)
8020f42c:	18c00317 	ldw	r3,12(r3)
8020f430:	18c00037 	ldwio	r3,0(r3)
8020f434:	10c00035 	stwio	r3,0(r2)
        dev->csr_base, 
        IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));

    if (NULL != standard_desc && NULL == extended_desc)
8020f438:	e0bffe17 	ldw	r2,-8(fp)
8020f43c:	10001b26 	beq	r2,zero,8020f4ac <alt_msgdma_descriptor_sync_transfer+0x1ac>
8020f440:	e0bfff17 	ldw	r2,-4(fp)
8020f444:	1000191e 	bne	r2,zero,8020f4ac <alt_msgdma_descriptor_sync_transfer+0x1ac>
    {
        counter = 0; /* reset counter */
8020f448:	e03ff30d 	sth	zero,-52(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
          write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
8020f44c:	00000d06 	br	8020f484 <alt_msgdma_descriptor_sync_transfer+0x184>
            dev->csr_base, dev->descriptor_base, standard_desc))
        {     
            alt_busy_sleep(1); /* delay 1us */
8020f450:	01000044 	movi	r4,1
8020f454:	0210b9c0 	call	80210b9c <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
8020f458:	e0bff30b 	ldhu	r2,-52(fp)
8020f45c:	1084e230 	cmpltui	r2,r2,5000
8020f460:	1000051e 	bne	r2,zero,8020f478 <alt_msgdma_descriptor_sync_transfer+0x178>
            {
                alt_printf("time out after 5 msec while writing standard" 
8020f464:	01200874 	movhi	r4,32801
8020f468:	21095a04 	addi	r4,r4,9576
8020f46c:	02115500 	call	80211550 <alt_printf>
                * registers semaphore so that other threads can access the 
                * registers.
                */
                ALT_SEM_POST (dev->regs_lock);
                
                return -ETIME;
8020f470:	00bff084 	movi	r2,-62
8020f474:	00007b06 	br	8020f664 <alt_msgdma_descriptor_sync_transfer+0x364>
            }
            counter++;    
8020f478:	e0bff30b 	ldhu	r2,-52(fp)
8020f47c:	10800044 	addi	r2,r2,1
8020f480:	e0bff30d 	sth	r2,-52(fp)
    if (NULL != standard_desc && NULL == extended_desc)
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
          write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
8020f484:	e0bffd17 	ldw	r2,-12(fp)
8020f488:	10c00317 	ldw	r3,12(r2)
8020f48c:	e0bffd17 	ldw	r2,-12(fp)
8020f490:	10800417 	ldw	r2,16(r2)
8020f494:	e1bffe17 	ldw	r6,-8(fp)
8020f498:	100b883a 	mov	r5,r2
8020f49c:	1809883a 	mov	r4,r3
8020f4a0:	020eb0c0 	call	8020eb0c <alt_msgdma_write_standard_descriptor>
8020f4a4:	103fea1e 	bne	r2,zero,8020f450 <__reset+0xfa1ef450>
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
        dev->csr_base, 
        IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));

    if (NULL != standard_desc && NULL == extended_desc)
8020f4a8:	00001f06 	br	8020f528 <alt_msgdma_descriptor_sync_transfer+0x228>
                return -ETIME;
            }
            counter++;    
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
8020f4ac:	e0bffe17 	ldw	r2,-8(fp)
8020f4b0:	10001b1e 	bne	r2,zero,8020f520 <alt_msgdma_descriptor_sync_transfer+0x220>
8020f4b4:	e0bfff17 	ldw	r2,-4(fp)
8020f4b8:	10001926 	beq	r2,zero,8020f520 <alt_msgdma_descriptor_sync_transfer+0x220>
    {
        counter = 0; /* reset counter */
8020f4bc:	e03ff30d 	sth	zero,-52(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
          write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
8020f4c0:	00000d06 	br	8020f4f8 <alt_msgdma_descriptor_sync_transfer+0x1f8>
            dev->csr_base, dev->descriptor_base, extended_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
8020f4c4:	01000044 	movi	r4,1
8020f4c8:	0210b9c0 	call	80210b9c <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
8020f4cc:	e0bff30b 	ldhu	r2,-52(fp)
8020f4d0:	1084e230 	cmpltui	r2,r2,5000
8020f4d4:	1000051e 	bne	r2,zero,8020f4ec <alt_msgdma_descriptor_sync_transfer+0x1ec>
            {
                alt_printf("time out after 5 msec while writing extended" 
8020f4d8:	01200874 	movhi	r4,32801
8020f4dc:	21096b04 	addi	r4,r4,9644
8020f4e0:	02115500 	call	80211550 <alt_printf>
                * registers semaphore so that other threads can access the 
                * registers.
                */
                ALT_SEM_POST (dev->regs_lock);
                
                return -ETIME;
8020f4e4:	00bff084 	movi	r2,-62
8020f4e8:	00005e06 	br	8020f664 <alt_msgdma_descriptor_sync_transfer+0x364>
            }
            counter++;
8020f4ec:	e0bff30b 	ldhu	r2,-52(fp)
8020f4f0:	10800044 	addi	r2,r2,1
8020f4f4:	e0bff30d 	sth	r2,-52(fp)
    else if (NULL == standard_desc && NULL != extended_desc)
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
          write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
8020f4f8:	e0bffd17 	ldw	r2,-12(fp)
8020f4fc:	10c00317 	ldw	r3,12(r2)
8020f500:	e0bffd17 	ldw	r2,-12(fp)
8020f504:	10800417 	ldw	r2,16(r2)
8020f508:	e1bfff17 	ldw	r6,-4(fp)
8020f50c:	100b883a 	mov	r5,r2
8020f510:	1809883a 	mov	r4,r3
8020f514:	020eba00 	call	8020eba0 <alt_msgdma_write_extended_descriptor>
8020f518:	103fea1e 	bne	r2,zero,8020f4c4 <__reset+0xfa1ef4c4>
                return -ETIME;
            }
            counter++;    
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
8020f51c:	00000206 	br	8020f528 <alt_msgdma_descriptor_sync_transfer+0x228>
        * semaphore so that other threads can access the registers.
        */
        ALT_SEM_POST (dev->regs_lock);
        
        /* operation not permitted due to descriptor type conflict */
        return -EPERM; 
8020f520:	00bfffc4 	movi	r2,-1
8020f524:	00004f06 	br	8020f664 <alt_msgdma_descriptor_sync_transfer+0x364>
    * Set up msgdma controller to:
    * - Disable interrupt generation
    * - Run once a valid descriptor is written to controller
    * - Stop on an error with any particular descriptor
    */
     IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
8020f528:	e0bffd17 	ldw	r2,-12(fp)
8020f52c:	10800317 	ldw	r2,12(r2)
8020f530:	10800104 	addi	r2,r2,4
8020f534:	e0fffd17 	ldw	r3,-12(fp)
8020f538:	19000d17 	ldw	r4,52(r3)
8020f53c:	00fff2c4 	movi	r3,-53
8020f540:	20c6703a 	and	r3,r4,r3
8020f544:	18c00114 	ori	r3,r3,4
8020f548:	10c00035 	stwio	r3,0(r2)
8020f54c:	e0bff717 	ldw	r2,-36(fp)
8020f550:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8020f554:	e0bff917 	ldw	r2,-28(fp)
8020f558:	1001703a 	wrctl	status,r2
        (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) &
        (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK)) ;
     
    alt_irq_enable_all(context);
     
    counter = 0; /* reset counter */ 
8020f55c:	e03ff30d 	sth	zero,-52(fp)
    
    csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
8020f560:	e0bffd17 	ldw	r2,-12(fp)
8020f564:	10800317 	ldw	r2,12(r2)
8020f568:	10800037 	ldwio	r2,0(r2)
8020f56c:	e0bff215 	stw	r2,-56(fp)
    
    /* Wait for any pending transfers to complete or checking any errors or 
    conditions causing descriptor to stop dispatching */
    while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK))
8020f570:	00001106 	br	8020f5b8 <alt_msgdma_descriptor_sync_transfer+0x2b8>
    {
        alt_busy_sleep(1); /* delay 1us */
8020f574:	01000044 	movi	r4,1
8020f578:	0210b9c0 	call	80210b9c <alt_busy_sleep>
        if(5000 <= counter) /* time_out if waiting longer than 5 msec */
8020f57c:	e0bff30b 	ldhu	r2,-52(fp)
8020f580:	1084e230 	cmpltui	r2,r2,5000
8020f584:	1000051e 	bne	r2,zero,8020f59c <alt_msgdma_descriptor_sync_transfer+0x29c>
        {
            alt_printf("time out after 5 msec while waiting for any pending" 
8020f588:	01200874 	movhi	r4,32801
8020f58c:	21097c04 	addi	r4,r4,9712
8020f590:	02115500 	call	80211550 <alt_printf>
            * Now that access to the registers is complete, release the registers
            * semaphore so that other threads can access the registers.
            */
            ALT_SEM_POST (dev->regs_lock);
            
            return -ETIME;
8020f594:	00bff084 	movi	r2,-62
8020f598:	00003206 	br	8020f664 <alt_msgdma_descriptor_sync_transfer+0x364>
        }
        counter++;
8020f59c:	e0bff30b 	ldhu	r2,-52(fp)
8020f5a0:	10800044 	addi	r2,r2,1
8020f5a4:	e0bff30d 	sth	r2,-52(fp)
        csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
8020f5a8:	e0bffd17 	ldw	r2,-12(fp)
8020f5ac:	10800317 	ldw	r2,12(r2)
8020f5b0:	10800037 	ldwio	r2,0(r2)
8020f5b4:	e0bff215 	stw	r2,-56(fp)
    
    csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
    
    /* Wait for any pending transfers to complete or checking any errors or 
    conditions causing descriptor to stop dispatching */
    while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK))
8020f5b8:	e0fff217 	ldw	r3,-56(fp)
8020f5bc:	e0bff817 	ldw	r2,-32(fp)
8020f5c0:	1884703a 	and	r2,r3,r2
8020f5c4:	1000031e 	bne	r2,zero,8020f5d4 <alt_msgdma_descriptor_sync_transfer+0x2d4>
8020f5c8:	e0bff217 	ldw	r2,-56(fp)
8020f5cc:	1080004c 	andi	r2,r2,1
8020f5d0:	103fe81e 	bne	r2,zero,8020f574 <__reset+0xfa1ef574>
    }
    

    /*Errors or conditions causing the dispatcher stopping issuing read/write 
      commands to masters*/
    if(0 != (csr_status & error))
8020f5d4:	e0fff217 	ldw	r3,-56(fp)
8020f5d8:	e0bff817 	ldw	r2,-32(fp)
8020f5dc:	1884703a 	and	r2,r3,r2
8020f5e0:	10000226 	beq	r2,zero,8020f5ec <alt_msgdma_descriptor_sync_transfer+0x2ec>
        * Now that access to the registers is complete, release the registers
        * semaphore so that other threads can access the registers.
        */
        ALT_SEM_POST (dev->regs_lock);
        
        return error;
8020f5e4:	e0bff817 	ldw	r2,-32(fp)
8020f5e8:	00001e06 	br	8020f664 <alt_msgdma_descriptor_sync_transfer+0x364>
    }

    /* Stop the msgdma dispatcher from issuing more descriptors to the
    read or write masters  */
    /* stop issuing more descriptors */
    control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) | 
8020f5ec:	e0bffd17 	ldw	r2,-12(fp)
8020f5f0:	10800317 	ldw	r2,12(r2)
8020f5f4:	10800104 	addi	r2,r2,4
8020f5f8:	10800037 	ldwio	r2,0(r2)
8020f5fc:	10800814 	ori	r2,r2,32
8020f600:	e0bff615 	stw	r2,-40(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8020f604:	0005303a 	rdctl	r2,status
8020f608:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8020f60c:	e0fffa17 	ldw	r3,-24(fp)
8020f610:	00bfff84 	movi	r2,-2
8020f614:	1884703a 	and	r2,r3,r2
8020f618:	1001703a 	wrctl	status,r2
  
  return context;
8020f61c:	e0bffa17 	ldw	r2,-24(fp)
    ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();  
8020f620:	e0bff715 	stw	r2,-36(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
8020f624:	e0bffd17 	ldw	r2,-12(fp)
8020f628:	10800317 	ldw	r2,12(r2)
8020f62c:	10800104 	addi	r2,r2,4
8020f630:	e0fff617 	ldw	r3,-40(fp)
8020f634:	10c00035 	stwio	r3,0(r2)
    /*
    * Clear any (previous) status register information
    * that might occlude our error checking later.
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
8020f638:	e0bffd17 	ldw	r2,-12(fp)
8020f63c:	10800317 	ldw	r2,12(r2)
8020f640:	e0fffd17 	ldw	r3,-12(fp)
8020f644:	18c00317 	ldw	r3,12(r3)
8020f648:	18c00037 	ldwio	r3,0(r3)
8020f64c:	10c00035 	stwio	r3,0(r2)
8020f650:	e0bff717 	ldw	r2,-36(fp)
8020f654:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8020f658:	e0bffb17 	ldw	r2,-20(fp)
8020f65c:	1001703a 	wrctl	status,r2
    * Now that access to the registers is complete, release the registers
    * semaphore so that other threads can access the registers.
    */
    ALT_SEM_POST (dev->regs_lock);
    
    return 0;
8020f660:	0005883a 	mov	r2,zero

}
8020f664:	e037883a 	mov	sp,fp
8020f668:	dfc00117 	ldw	ra,4(sp)
8020f66c:	df000017 	ldw	fp,0(sp)
8020f670:	dec00204 	addi	sp,sp,8
8020f674:	f800283a 	ret

8020f678 <alt_msgdma_construct_standard_st_to_mm_descriptor>:
 */
int alt_msgdma_construct_standard_st_to_mm_descriptor (
    alt_msgdma_dev *dev,
    alt_msgdma_standard_descriptor *descriptor,
    alt_u32 *write_address, alt_u32 length, alt_u32 control)
{
8020f678:	defff804 	addi	sp,sp,-32
8020f67c:	dfc00715 	stw	ra,28(sp)
8020f680:	df000615 	stw	fp,24(sp)
8020f684:	df000604 	addi	fp,sp,24
8020f688:	e13ffc15 	stw	r4,-16(fp)
8020f68c:	e17ffd15 	stw	r5,-12(fp)
8020f690:	e1bffe15 	stw	r6,-8(fp)
8020f694:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, NULL, 
8020f698:	e0800217 	ldw	r2,8(fp)
8020f69c:	d8800115 	stw	r2,4(sp)
8020f6a0:	e0bfff17 	ldw	r2,-4(fp)
8020f6a4:	d8800015 	stw	r2,0(sp)
8020f6a8:	e1fffe17 	ldw	r7,-8(fp)
8020f6ac:	000d883a 	mov	r6,zero
8020f6b0:	e17ffd17 	ldw	r5,-12(fp)
8020f6b4:	e13ffc17 	ldw	r4,-16(fp)
8020f6b8:	020ee500 	call	8020ee50 <alt_msgdma_construct_standard_descriptor>
            write_address, length, control);
}
8020f6bc:	e037883a 	mov	sp,fp
8020f6c0:	dfc00117 	ldw	ra,4(sp)
8020f6c4:	df000017 	ldw	fp,0(sp)
8020f6c8:	dec00204 	addi	sp,sp,8
8020f6cc:	f800283a 	ret

8020f6d0 <alt_msgdma_construct_standard_mm_to_st_descriptor>:
    alt_msgdma_dev *dev,
    alt_msgdma_standard_descriptor *descriptor,
    alt_u32 *read_address,
    alt_u32 length,
    alt_u32 control)
{
8020f6d0:	defff804 	addi	sp,sp,-32
8020f6d4:	dfc00715 	stw	ra,28(sp)
8020f6d8:	df000615 	stw	fp,24(sp)
8020f6dc:	df000604 	addi	fp,sp,24
8020f6e0:	e13ffc15 	stw	r4,-16(fp)
8020f6e4:	e17ffd15 	stw	r5,-12(fp)
8020f6e8:	e1bffe15 	stw	r6,-8(fp)
8020f6ec:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, read_address, 
8020f6f0:	e0800217 	ldw	r2,8(fp)
8020f6f4:	d8800115 	stw	r2,4(sp)
8020f6f8:	e0bfff17 	ldw	r2,-4(fp)
8020f6fc:	d8800015 	stw	r2,0(sp)
8020f700:	000f883a 	mov	r7,zero
8020f704:	e1bffe17 	ldw	r6,-8(fp)
8020f708:	e17ffd17 	ldw	r5,-12(fp)
8020f70c:	e13ffc17 	ldw	r4,-16(fp)
8020f710:	020ee500 	call	8020ee50 <alt_msgdma_construct_standard_descriptor>
            NULL, length, control);

}
8020f714:	e037883a 	mov	sp,fp
8020f718:	dfc00117 	ldw	ra,4(sp)
8020f71c:	df000017 	ldw	fp,0(sp)
8020f720:	dec00204 	addi	sp,sp,8
8020f724:	f800283a 	ret

8020f728 <alt_msgdma_construct_standard_mm_to_mm_descriptor>:
    alt_msgdma_standard_descriptor *descriptor,
    alt_u32 *read_address, 
    alt_u32 *write_address, 
    alt_u32 length, 
    alt_u32 control)
{
8020f728:	defff804 	addi	sp,sp,-32
8020f72c:	dfc00715 	stw	ra,28(sp)
8020f730:	df000615 	stw	fp,24(sp)
8020f734:	df000604 	addi	fp,sp,24
8020f738:	e13ffc15 	stw	r4,-16(fp)
8020f73c:	e17ffd15 	stw	r5,-12(fp)
8020f740:	e1bffe15 	stw	r6,-8(fp)
8020f744:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, read_address, 
8020f748:	e0800317 	ldw	r2,12(fp)
8020f74c:	d8800115 	stw	r2,4(sp)
8020f750:	e0800217 	ldw	r2,8(fp)
8020f754:	d8800015 	stw	r2,0(sp)
8020f758:	e1ffff17 	ldw	r7,-4(fp)
8020f75c:	e1bffe17 	ldw	r6,-8(fp)
8020f760:	e17ffd17 	ldw	r5,-12(fp)
8020f764:	e13ffc17 	ldw	r4,-16(fp)
8020f768:	020ee500 	call	8020ee50 <alt_msgdma_construct_standard_descriptor>
            write_address, length, control);
}
8020f76c:	e037883a 	mov	sp,fp
8020f770:	dfc00117 	ldw	ra,4(sp)
8020f774:	df000017 	ldw	fp,0(sp)
8020f778:	dec00204 	addi	sp,sp,8
8020f77c:	f800283a 	ret

8020f780 <alt_msgdma_construct_extended_st_to_mm_descriptor>:
    alt_u32 length, 
    alt_u32 control, 
    alt_u16 sequence_number, 
    alt_u8 write_burst_count, 
    alt_u16 write_stride)
{
8020f780:	defff004 	addi	sp,sp,-64
8020f784:	dfc00f15 	stw	ra,60(sp)
8020f788:	df000e15 	stw	fp,56(sp)
8020f78c:	df000e04 	addi	fp,sp,56
8020f790:	e13ff915 	stw	r4,-28(fp)
8020f794:	e17ffa15 	stw	r5,-24(fp)
8020f798:	e1bffb15 	stw	r6,-20(fp)
8020f79c:	e1fffc15 	stw	r7,-16(fp)
8020f7a0:	e1000317 	ldw	r4,12(fp)
8020f7a4:	e0c00417 	ldw	r3,16(fp)
8020f7a8:	e0800517 	ldw	r2,20(fp)
8020f7ac:	e13ffd0d 	sth	r4,-12(fp)
8020f7b0:	e0fffe05 	stb	r3,-8(fp)
8020f7b4:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, 
8020f7b8:	e0bffd0b 	ldhu	r2,-12(fp)
8020f7bc:	e0fffe03 	ldbu	r3,-8(fp)
8020f7c0:	e13fff0b 	ldhu	r4,-4(fp)
8020f7c4:	d9000615 	stw	r4,24(sp)
8020f7c8:	d8000515 	stw	zero,20(sp)
8020f7cc:	d8c00415 	stw	r3,16(sp)
8020f7d0:	d8000315 	stw	zero,12(sp)
8020f7d4:	d8800215 	stw	r2,8(sp)
8020f7d8:	e0800217 	ldw	r2,8(fp)
8020f7dc:	d8800115 	stw	r2,4(sp)
8020f7e0:	e0bffc17 	ldw	r2,-16(fp)
8020f7e4:	d8800015 	stw	r2,0(sp)
8020f7e8:	e1fffb17 	ldw	r7,-20(fp)
8020f7ec:	000d883a 	mov	r6,zero
8020f7f0:	e17ffa17 	ldw	r5,-24(fp)
8020f7f4:	e13ff917 	ldw	r4,-28(fp)
8020f7f8:	020eedc0 	call	8020eedc <alt_msgdma_construct_extended_descriptor>
            NULL, write_address, length, control, sequence_number, 0, 
            write_burst_count, 0, write_stride);
}
8020f7fc:	e037883a 	mov	sp,fp
8020f800:	dfc00117 	ldw	ra,4(sp)
8020f804:	df000017 	ldw	fp,0(sp)
8020f808:	dec00204 	addi	sp,sp,8
8020f80c:	f800283a 	ret

8020f810 <alt_msgdma_construct_extended_mm_to_st_descriptor>:
    alt_u32 length,
    alt_u32 control,
    alt_u16 sequence_number,
    alt_u8 read_burst_count, 
    alt_u16 read_stride)
{
8020f810:	defff004 	addi	sp,sp,-64
8020f814:	dfc00f15 	stw	ra,60(sp)
8020f818:	df000e15 	stw	fp,56(sp)
8020f81c:	df000e04 	addi	fp,sp,56
8020f820:	e13ff915 	stw	r4,-28(fp)
8020f824:	e17ffa15 	stw	r5,-24(fp)
8020f828:	e1bffb15 	stw	r6,-20(fp)
8020f82c:	e1fffc15 	stw	r7,-16(fp)
8020f830:	e1000317 	ldw	r4,12(fp)
8020f834:	e0c00417 	ldw	r3,16(fp)
8020f838:	e0800517 	ldw	r2,20(fp)
8020f83c:	e13ffd0d 	sth	r4,-12(fp)
8020f840:	e0fffe05 	stb	r3,-8(fp)
8020f844:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, read_address, 
8020f848:	e0bffd0b 	ldhu	r2,-12(fp)
8020f84c:	e0fffe03 	ldbu	r3,-8(fp)
8020f850:	e13fff0b 	ldhu	r4,-4(fp)
8020f854:	d8000615 	stw	zero,24(sp)
8020f858:	d9000515 	stw	r4,20(sp)
8020f85c:	d8000415 	stw	zero,16(sp)
8020f860:	d8c00315 	stw	r3,12(sp)
8020f864:	d8800215 	stw	r2,8(sp)
8020f868:	e0800217 	ldw	r2,8(fp)
8020f86c:	d8800115 	stw	r2,4(sp)
8020f870:	e0bffc17 	ldw	r2,-16(fp)
8020f874:	d8800015 	stw	r2,0(sp)
8020f878:	000f883a 	mov	r7,zero
8020f87c:	e1bffb17 	ldw	r6,-20(fp)
8020f880:	e17ffa17 	ldw	r5,-24(fp)
8020f884:	e13ff917 	ldw	r4,-28(fp)
8020f888:	020eedc0 	call	8020eedc <alt_msgdma_construct_extended_descriptor>
            NULL, length, control, sequence_number, read_burst_count, 0, 
            read_stride, 0);

}
8020f88c:	e037883a 	mov	sp,fp
8020f890:	dfc00117 	ldw	ra,4(sp)
8020f894:	df000017 	ldw	fp,0(sp)
8020f898:	dec00204 	addi	sp,sp,8
8020f89c:	f800283a 	ret

8020f8a0 <alt_msgdma_construct_extended_mm_to_mm_descriptor>:
    alt_u16 sequence_number, 
    alt_u8 read_burst_count, 
    alt_u8 write_burst_count,
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
8020f8a0:	deffee04 	addi	sp,sp,-72
8020f8a4:	dfc01115 	stw	ra,68(sp)
8020f8a8:	df001015 	stw	fp,64(sp)
8020f8ac:	df001004 	addi	fp,sp,64
8020f8b0:	e13ff715 	stw	r4,-36(fp)
8020f8b4:	e17ff815 	stw	r5,-32(fp)
8020f8b8:	e1bff915 	stw	r6,-28(fp)
8020f8bc:	e1fffa15 	stw	r7,-24(fp)
8020f8c0:	e1800417 	ldw	r6,16(fp)
8020f8c4:	e1400517 	ldw	r5,20(fp)
8020f8c8:	e1000617 	ldw	r4,24(fp)
8020f8cc:	e0c00717 	ldw	r3,28(fp)
8020f8d0:	e0800817 	ldw	r2,32(fp)
8020f8d4:	e1bffb0d 	sth	r6,-20(fp)
8020f8d8:	e17ffc05 	stb	r5,-16(fp)
8020f8dc:	e13ffd05 	stb	r4,-12(fp)
8020f8e0:	e0fffe0d 	sth	r3,-8(fp)
8020f8e4:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, 
8020f8e8:	e0bffb0b 	ldhu	r2,-20(fp)
8020f8ec:	e0fffc03 	ldbu	r3,-16(fp)
8020f8f0:	e13ffd03 	ldbu	r4,-12(fp)
8020f8f4:	e17ffe0b 	ldhu	r5,-8(fp)
8020f8f8:	e1bfff0b 	ldhu	r6,-4(fp)
8020f8fc:	d9800615 	stw	r6,24(sp)
8020f900:	d9400515 	stw	r5,20(sp)
8020f904:	d9000415 	stw	r4,16(sp)
8020f908:	d8c00315 	stw	r3,12(sp)
8020f90c:	d8800215 	stw	r2,8(sp)
8020f910:	e0800317 	ldw	r2,12(fp)
8020f914:	d8800115 	stw	r2,4(sp)
8020f918:	e0800217 	ldw	r2,8(fp)
8020f91c:	d8800015 	stw	r2,0(sp)
8020f920:	e1fffa17 	ldw	r7,-24(fp)
8020f924:	e1bff917 	ldw	r6,-28(fp)
8020f928:	e17ff817 	ldw	r5,-32(fp)
8020f92c:	e13ff717 	ldw	r4,-36(fp)
8020f930:	020eedc0 	call	8020eedc <alt_msgdma_construct_extended_descriptor>
            read_address, write_address, length, control, sequence_number, 
            read_burst_count, write_burst_count, read_stride, write_stride);

}
8020f934:	e037883a 	mov	sp,fp
8020f938:	dfc00117 	ldw	ra,4(sp)
8020f93c:	df000017 	ldw	fp,0(sp)
8020f940:	dec00204 	addi	sp,sp,8
8020f944:	f800283a 	ret

8020f948 <alt_msgdma_construct_prefetcher_standard_descriptor>:
    alt_msgdma_prefetcher_standard_descriptor *descriptor,
    alt_u32 read_address, 
    alt_u32 write_address, 
    alt_u32 length, 
    alt_u32 control)
{
8020f948:	defffb04 	addi	sp,sp,-20
8020f94c:	df000415 	stw	fp,16(sp)
8020f950:	df000404 	addi	fp,sp,16
8020f954:	e13ffc15 	stw	r4,-16(fp)
8020f958:	e17ffd15 	stw	r5,-12(fp)
8020f95c:	e1bffe15 	stw	r6,-8(fp)
8020f960:	e1ffff15 	stw	r7,-4(fp)
    if(dev->max_byte < length ||
8020f964:	e0bffc17 	ldw	r2,-16(fp)
8020f968:	10c01217 	ldw	r3,72(r2)
8020f96c:	e0800117 	ldw	r2,4(fp)
8020f970:	18800436 	bltu	r3,r2,8020f984 <alt_msgdma_construct_prefetcher_standard_descriptor+0x3c>
       dev->enhanced_features != 0
8020f974:	e0bffc17 	ldw	r2,-16(fp)
8020f978:	10801703 	ldbu	r2,92(r2)
    alt_u32 read_address, 
    alt_u32 write_address, 
    alt_u32 length, 
    alt_u32 control)
{
    if(dev->max_byte < length ||
8020f97c:	10803fcc 	andi	r2,r2,255
8020f980:	10000226 	beq	r2,zero,8020f98c <alt_msgdma_construct_prefetcher_standard_descriptor+0x44>
       dev->enhanced_features != 0
      )
    {
        return -EINVAL;
8020f984:	00bffa84 	movi	r2,-22
8020f988:	00001406 	br	8020f9dc <alt_msgdma_construct_prefetcher_standard_descriptor+0x94>
    }
    descriptor->read_address = read_address;
8020f98c:	e0bffd17 	ldw	r2,-12(fp)
8020f990:	e0fffe17 	ldw	r3,-8(fp)
8020f994:	10c00015 	stw	r3,0(r2)
    descriptor->write_address = write_address;
8020f998:	e0bffd17 	ldw	r2,-12(fp)
8020f99c:	e0ffff17 	ldw	r3,-4(fp)
8020f9a0:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
8020f9a4:	e0bffd17 	ldw	r2,-12(fp)
8020f9a8:	e0c00117 	ldw	r3,4(fp)
8020f9ac:	10c00215 	stw	r3,8(r2)
    /* have descriptor point to itself for park_mode */
    descriptor->next_desc_ptr = (alt_u32)descriptor;  
8020f9b0:	e0fffd17 	ldw	r3,-12(fp)
8020f9b4:	e0bffd17 	ldw	r2,-12(fp)
8020f9b8:	10c00315 	stw	r3,12(r2)
    
    /* clear control own_by_hw bit field (SW owns this descriptor)*/
    descriptor->control = (control 
            & ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
            | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
8020f9bc:	e0c00217 	ldw	r3,8(fp)
8020f9c0:	00900034 	movhi	r2,16384
8020f9c4:	10bfffc4 	addi	r2,r2,-1
8020f9c8:	1884703a 	and	r2,r3,r2
8020f9cc:	10e00034 	orhi	r3,r2,32768
    descriptor->transfer_length = length;
    /* have descriptor point to itself for park_mode */
    descriptor->next_desc_ptr = (alt_u32)descriptor;  
    
    /* clear control own_by_hw bit field (SW owns this descriptor)*/
    descriptor->control = (control 
8020f9d0:	e0bffd17 	ldw	r2,-12(fp)
8020f9d4:	10c00715 	stw	r3,28(r2)
            & ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
            | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
    
    return 0;
8020f9d8:	0005883a 	mov	r2,zero
}
8020f9dc:	e037883a 	mov	sp,fp
8020f9e0:	df000017 	ldw	fp,0(sp)
8020f9e4:	dec00104 	addi	sp,sp,4
8020f9e8:	f800283a 	ret

8020f9ec <alt_msgdma_construct_prefetcher_extended_descriptor>:
    alt_u16 sequence_number, 
    alt_u8 read_burst_count, 
    alt_u8 write_burst_count,
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
8020f9ec:	defff404 	addi	sp,sp,-48
8020f9f0:	df000b15 	stw	fp,44(sp)
8020f9f4:	df000b04 	addi	fp,sp,44
8020f9f8:	e13ff715 	stw	r4,-36(fp)
8020f9fc:	e17ff815 	stw	r5,-32(fp)
8020fa00:	e1bff915 	stw	r6,-28(fp)
8020fa04:	e1fffa15 	stw	r7,-24(fp)
8020fa08:	e1800517 	ldw	r6,20(fp)
8020fa0c:	e1400617 	ldw	r5,24(fp)
8020fa10:	e1000717 	ldw	r4,28(fp)
8020fa14:	e0c00817 	ldw	r3,32(fp)
8020fa18:	e0800917 	ldw	r2,36(fp)
8020fa1c:	e1bffb0d 	sth	r6,-20(fp)
8020fa20:	e17ffc05 	stb	r5,-16(fp)
8020fa24:	e13ffd05 	stb	r4,-12(fp)
8020fa28:	e0fffe0d 	sth	r3,-8(fp)
8020fa2c:	e0bfff0d 	sth	r2,-4(fp)
    msgdma_addr64 node_addr;
    
    if(dev->max_byte < length ||
8020fa30:	e0bff717 	ldw	r2,-36(fp)
8020fa34:	10c01217 	ldw	r3,72(r2)
8020fa38:	e0800317 	ldw	r2,12(fp)
8020fa3c:	18801936 	bltu	r3,r2,8020faa4 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
8020fa40:	e13ff717 	ldw	r4,-36(fp)
8020fa44:	20801317 	ldw	r2,76(r4)
8020fa48:	20c01417 	ldw	r3,80(r4)
8020fa4c:	e13ffe0b 	ldhu	r4,-8(fp)
8020fa50:	213fffcc 	andi	r4,r4,65535
8020fa54:	2015883a 	mov	r10,r4
8020fa58:	0017883a 	mov	r11,zero
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
    msgdma_addr64 node_addr;
    
    if(dev->max_byte < length ||
8020fa5c:	1ac01136 	bltu	r3,r11,8020faa4 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
8020fa60:	58c0011e 	bne	r11,r3,8020fa68 <alt_msgdma_construct_prefetcher_extended_descriptor+0x7c>
8020fa64:	12800f36 	bltu	r2,r10,8020faa4 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
8020fa68:	e13ff717 	ldw	r4,-36(fp)
8020fa6c:	20801317 	ldw	r2,76(r4)
8020fa70:	20c01417 	ldw	r3,80(r4)
8020fa74:	e13fff0b 	ldhu	r4,-4(fp)
8020fa78:	213fffcc 	andi	r4,r4,65535
8020fa7c:	2011883a 	mov	r8,r4
8020fa80:	0013883a 	mov	r9,zero
    alt_u16 write_stride)
{
    msgdma_addr64 node_addr;
    
    if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
8020fa84:	1a400736 	bltu	r3,r9,8020faa4 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
8020fa88:	48c0011e 	bne	r9,r3,8020fa90 <alt_msgdma_construct_prefetcher_extended_descriptor+0xa4>
8020fa8c:	12000536 	bltu	r2,r8,8020faa4 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
       dev->max_stride < write_stride ||
       dev->enhanced_features != 1 
8020fa90:	e0bff717 	ldw	r2,-36(fp)
8020fa94:	10801703 	ldbu	r2,92(r2)
{
    msgdma_addr64 node_addr;
    
    if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
8020fa98:	10803fcc 	andi	r2,r2,255
8020fa9c:	10800060 	cmpeqi	r2,r2,1
8020faa0:	1000021e 	bne	r2,zero,8020faac <alt_msgdma_construct_prefetcher_extended_descriptor+0xc0>
       dev->enhanced_features != 1 
      )
    {
        return -EINVAL;
8020faa4:	00bffa84 	movi	r2,-22
8020faa8:	00003106 	br	8020fb70 <alt_msgdma_construct_prefetcher_extended_descriptor+0x184>
    }
    
    descriptor->read_address_high = read_address_high;
8020faac:	e0bff817 	ldw	r2,-32(fp)
8020fab0:	e0fff917 	ldw	r3,-28(fp)
8020fab4:	10c00915 	stw	r3,36(r2)
    descriptor->read_address_low = read_address_low;
8020fab8:	e0bff817 	ldw	r2,-32(fp)
8020fabc:	e0fffa17 	ldw	r3,-24(fp)
8020fac0:	10c00015 	stw	r3,0(r2)
    descriptor->write_address_high = write_address_high;
8020fac4:	e0bff817 	ldw	r2,-32(fp)
8020fac8:	e0c00117 	ldw	r3,4(fp)
8020facc:	10c00a15 	stw	r3,40(r2)
    descriptor->write_address_low = write_address_low;
8020fad0:	e0bff817 	ldw	r2,-32(fp)
8020fad4:	e0c00217 	ldw	r3,8(fp)
8020fad8:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
8020fadc:	e0bff817 	ldw	r2,-32(fp)
8020fae0:	e0c00317 	ldw	r3,12(fp)
8020fae4:	10c00215 	stw	r3,8(r2)
    descriptor->sequence_number = sequence_number;
8020fae8:	e0bff817 	ldw	r2,-32(fp)
8020faec:	e0fffb0b 	ldhu	r3,-20(fp)
8020faf0:	10c0070d 	sth	r3,28(r2)
    descriptor->read_burst_count = read_burst_count;
8020faf4:	e0bff817 	ldw	r2,-32(fp)
8020faf8:	e0fffc03 	ldbu	r3,-16(fp)
8020fafc:	10c00785 	stb	r3,30(r2)
    descriptor->write_burst_count = write_burst_count;
8020fb00:	e0bff817 	ldw	r2,-32(fp)
8020fb04:	e0fffd03 	ldbu	r3,-12(fp)
8020fb08:	10c007c5 	stb	r3,31(r2)
    descriptor->read_stride = read_stride;
8020fb0c:	e0bff817 	ldw	r2,-32(fp)
8020fb10:	e0fffe0b 	ldhu	r3,-8(fp)
8020fb14:	10c0080d 	sth	r3,32(r2)
    descriptor->write_stride = write_stride;
8020fb18:	e0bff817 	ldw	r2,-32(fp)
8020fb1c:	e0ffff0b 	ldhu	r3,-4(fp)
8020fb20:	10c0088d 	sth	r3,34(r2)
    /* have descriptor point to itself */
    node_addr.u64 = (uintptr_t)descriptor;
8020fb24:	e0bff817 	ldw	r2,-32(fp)
8020fb28:	1019883a 	mov	r12,r2
8020fb2c:	001b883a 	mov	r13,zero
8020fb30:	e33ff515 	stw	r12,-44(fp)
8020fb34:	e37ff615 	stw	r13,-40(fp)
    descriptor->next_desc_ptr_low = node_addr.u32[0];  
8020fb38:	e0fff517 	ldw	r3,-44(fp)
8020fb3c:	e0bff817 	ldw	r2,-32(fp)
8020fb40:	10c00315 	stw	r3,12(r2)
    descriptor->next_desc_ptr_high = node_addr.u32[1];
8020fb44:	e0fff617 	ldw	r3,-40(fp)
8020fb48:	e0bff817 	ldw	r2,-32(fp)
8020fb4c:	10c00b15 	stw	r3,44(r2)
    
    /* clear control own_by_hw bit field (SW still owns this descriptor). */
    descriptor->control = (control 
            & ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
            | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
8020fb50:	e0c00417 	ldw	r3,16(fp)
8020fb54:	00900034 	movhi	r2,16384
8020fb58:	10bfffc4 	addi	r2,r2,-1
8020fb5c:	1884703a 	and	r2,r3,r2
8020fb60:	10e00034 	orhi	r3,r2,32768
    node_addr.u64 = (uintptr_t)descriptor;
    descriptor->next_desc_ptr_low = node_addr.u32[0];  
    descriptor->next_desc_ptr_high = node_addr.u32[1];
    
    /* clear control own_by_hw bit field (SW still owns this descriptor). */
    descriptor->control = (control 
8020fb64:	e0bff817 	ldw	r2,-32(fp)
8020fb68:	10c00f15 	stw	r3,60(r2)
            & ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
            | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;

  return 0 ;
8020fb6c:	0005883a 	mov	r2,zero
}
8020fb70:	e037883a 	mov	sp,fp
8020fb74:	df000017 	ldw	fp,0(sp)
8020fb78:	dec00104 	addi	sp,sp,4
8020fb7c:	f800283a 	ret

8020fb80 <alt_msgdma_construct_prefetcher_standard_mm_to_mm_descriptor>:
    alt_msgdma_prefetcher_standard_descriptor *descriptor,
    alt_u32 read_address,
    alt_u32 write_address,
    alt_u32 length,
    alt_u32 control)
{
8020fb80:	defff804 	addi	sp,sp,-32
8020fb84:	dfc00715 	stw	ra,28(sp)
8020fb88:	df000615 	stw	fp,24(sp)
8020fb8c:	df000604 	addi	fp,sp,24
8020fb90:	e13ffc15 	stw	r4,-16(fp)
8020fb94:	e17ffd15 	stw	r5,-12(fp)
8020fb98:	e1bffe15 	stw	r6,-8(fp)
8020fb9c:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
8020fba0:	e0800317 	ldw	r2,12(fp)
8020fba4:	d8800115 	stw	r2,4(sp)
8020fba8:	e0800217 	ldw	r2,8(fp)
8020fbac:	d8800015 	stw	r2,0(sp)
8020fbb0:	e1ffff17 	ldw	r7,-4(fp)
8020fbb4:	e1bffe17 	ldw	r6,-8(fp)
8020fbb8:	e17ffd17 	ldw	r5,-12(fp)
8020fbbc:	e13ffc17 	ldw	r4,-16(fp)
8020fbc0:	020f9480 	call	8020f948 <alt_msgdma_construct_prefetcher_standard_descriptor>
            read_address, write_address, length, control);
}
8020fbc4:	e037883a 	mov	sp,fp
8020fbc8:	dfc00117 	ldw	ra,4(sp)
8020fbcc:	df000017 	ldw	fp,0(sp)
8020fbd0:	dec00204 	addi	sp,sp,8
8020fbd4:	f800283a 	ret

8020fbd8 <alt_msgdma_construct_prefetcher_standard_st_to_mm_descriptor>:
    alt_msgdma_dev *dev,
    alt_msgdma_prefetcher_standard_descriptor *descriptor, 
    alt_u32 write_address, 
    alt_u32 length, 
    alt_u32 control)
{
8020fbd8:	defff804 	addi	sp,sp,-32
8020fbdc:	dfc00715 	stw	ra,28(sp)
8020fbe0:	df000615 	stw	fp,24(sp)
8020fbe4:	df000604 	addi	fp,sp,24
8020fbe8:	e13ffc15 	stw	r4,-16(fp)
8020fbec:	e17ffd15 	stw	r5,-12(fp)
8020fbf0:	e1bffe15 	stw	r6,-8(fp)
8020fbf4:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
8020fbf8:	e0800217 	ldw	r2,8(fp)
8020fbfc:	d8800115 	stw	r2,4(sp)
8020fc00:	e0bfff17 	ldw	r2,-4(fp)
8020fc04:	d8800015 	stw	r2,0(sp)
8020fc08:	e1fffe17 	ldw	r7,-8(fp)
8020fc0c:	000d883a 	mov	r6,zero
8020fc10:	e17ffd17 	ldw	r5,-12(fp)
8020fc14:	e13ffc17 	ldw	r4,-16(fp)
8020fc18:	020f9480 	call	8020f948 <alt_msgdma_construct_prefetcher_standard_descriptor>
            0, write_address, length, control);
}
8020fc1c:	e037883a 	mov	sp,fp
8020fc20:	dfc00117 	ldw	ra,4(sp)
8020fc24:	df000017 	ldw	fp,0(sp)
8020fc28:	dec00204 	addi	sp,sp,8
8020fc2c:	f800283a 	ret

8020fc30 <alt_msgdma_construct_prefetcher_standard_mm_to_st_descriptor>:
    alt_msgdma_dev *dev,
    alt_msgdma_prefetcher_standard_descriptor *descriptor, 
    alt_u32 read_address, 
    alt_u32 length, 
    alt_u32 control)
{
8020fc30:	defff804 	addi	sp,sp,-32
8020fc34:	dfc00715 	stw	ra,28(sp)
8020fc38:	df000615 	stw	fp,24(sp)
8020fc3c:	df000604 	addi	fp,sp,24
8020fc40:	e13ffc15 	stw	r4,-16(fp)
8020fc44:	e17ffd15 	stw	r5,-12(fp)
8020fc48:	e1bffe15 	stw	r6,-8(fp)
8020fc4c:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
8020fc50:	e0800217 	ldw	r2,8(fp)
8020fc54:	d8800115 	stw	r2,4(sp)
8020fc58:	e0bfff17 	ldw	r2,-4(fp)
8020fc5c:	d8800015 	stw	r2,0(sp)
8020fc60:	000f883a 	mov	r7,zero
8020fc64:	e1bffe17 	ldw	r6,-8(fp)
8020fc68:	e17ffd17 	ldw	r5,-12(fp)
8020fc6c:	e13ffc17 	ldw	r4,-16(fp)
8020fc70:	020f9480 	call	8020f948 <alt_msgdma_construct_prefetcher_standard_descriptor>
            read_address, 0, length, control);
}
8020fc74:	e037883a 	mov	sp,fp
8020fc78:	dfc00117 	ldw	ra,4(sp)
8020fc7c:	df000017 	ldw	fp,0(sp)
8020fc80:	dec00204 	addi	sp,sp,8
8020fc84:	f800283a 	ret

8020fc88 <alt_msgdma_construct_prefetcher_extended_st_to_mm_descriptor>:
    alt_u32 length, 
    alt_u32 control, 
    alt_u16 sequence_number,
    alt_u8 write_burst_count,
    alt_u16 write_stride)
{
8020fc88:	deffee04 	addi	sp,sp,-72
8020fc8c:	dfc01115 	stw	ra,68(sp)
8020fc90:	df001015 	stw	fp,64(sp)
8020fc94:	df001004 	addi	fp,sp,64
8020fc98:	e13ff915 	stw	r4,-28(fp)
8020fc9c:	e17ffa15 	stw	r5,-24(fp)
8020fca0:	e1bffb15 	stw	r6,-20(fp)
8020fca4:	e1fffc15 	stw	r7,-16(fp)
8020fca8:	e1000417 	ldw	r4,16(fp)
8020fcac:	e0c00517 	ldw	r3,20(fp)
8020fcb0:	e0800617 	ldw	r2,24(fp)
8020fcb4:	e13ffd0d 	sth	r4,-12(fp)
8020fcb8:	e0fffe05 	stb	r3,-8(fp)
8020fcbc:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor, 
8020fcc0:	e0bffd0b 	ldhu	r2,-12(fp)
8020fcc4:	e0fffe03 	ldbu	r3,-8(fp)
8020fcc8:	e13fff0b 	ldhu	r4,-4(fp)
8020fccc:	d9000815 	stw	r4,32(sp)
8020fcd0:	d8000715 	stw	zero,28(sp)
8020fcd4:	d8c00615 	stw	r3,24(sp)
8020fcd8:	d8000515 	stw	zero,20(sp)
8020fcdc:	d8800415 	stw	r2,16(sp)
8020fce0:	e0800317 	ldw	r2,12(fp)
8020fce4:	d8800315 	stw	r2,12(sp)
8020fce8:	e0800217 	ldw	r2,8(fp)
8020fcec:	d8800215 	stw	r2,8(sp)
8020fcf0:	e0bffc17 	ldw	r2,-16(fp)
8020fcf4:	d8800115 	stw	r2,4(sp)
8020fcf8:	e0bffb17 	ldw	r2,-20(fp)
8020fcfc:	d8800015 	stw	r2,0(sp)
8020fd00:	000f883a 	mov	r7,zero
8020fd04:	000d883a 	mov	r6,zero
8020fd08:	e17ffa17 	ldw	r5,-24(fp)
8020fd0c:	e13ff917 	ldw	r4,-28(fp)
8020fd10:	020f9ec0 	call	8020f9ec <alt_msgdma_construct_prefetcher_extended_descriptor>
            0, 0, write_address_high, write_address_low, length, control, 
            sequence_number, 0, write_burst_count, 0, write_stride);
}
8020fd14:	e037883a 	mov	sp,fp
8020fd18:	dfc00117 	ldw	ra,4(sp)
8020fd1c:	df000017 	ldw	fp,0(sp)
8020fd20:	dec00204 	addi	sp,sp,8
8020fd24:	f800283a 	ret

8020fd28 <alt_msgdma_construct_prefetcher_extended_mm_to_st_descriptor>:
    alt_u32 length, 
    alt_u32 control, 
    alt_u16 sequence_number, 
    alt_u8 read_burst_count, 
    alt_u16 read_stride)
{
8020fd28:	deffee04 	addi	sp,sp,-72
8020fd2c:	dfc01115 	stw	ra,68(sp)
8020fd30:	df001015 	stw	fp,64(sp)
8020fd34:	df001004 	addi	fp,sp,64
8020fd38:	e13ff915 	stw	r4,-28(fp)
8020fd3c:	e17ffa15 	stw	r5,-24(fp)
8020fd40:	e1bffb15 	stw	r6,-20(fp)
8020fd44:	e1fffc15 	stw	r7,-16(fp)
8020fd48:	e1000417 	ldw	r4,16(fp)
8020fd4c:	e0c00517 	ldw	r3,20(fp)
8020fd50:	e0800617 	ldw	r2,24(fp)
8020fd54:	e13ffd0d 	sth	r4,-12(fp)
8020fd58:	e0fffe05 	stb	r3,-8(fp)
8020fd5c:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor,
8020fd60:	e0bffd0b 	ldhu	r2,-12(fp)
8020fd64:	e0fffe03 	ldbu	r3,-8(fp)
8020fd68:	e13fff0b 	ldhu	r4,-4(fp)
8020fd6c:	d8000815 	stw	zero,32(sp)
8020fd70:	d9000715 	stw	r4,28(sp)
8020fd74:	d8000615 	stw	zero,24(sp)
8020fd78:	d8c00515 	stw	r3,20(sp)
8020fd7c:	d8800415 	stw	r2,16(sp)
8020fd80:	e0800317 	ldw	r2,12(fp)
8020fd84:	d8800315 	stw	r2,12(sp)
8020fd88:	e0800217 	ldw	r2,8(fp)
8020fd8c:	d8800215 	stw	r2,8(sp)
8020fd90:	d8000115 	stw	zero,4(sp)
8020fd94:	d8000015 	stw	zero,0(sp)
8020fd98:	e1fffc17 	ldw	r7,-16(fp)
8020fd9c:	e1bffb17 	ldw	r6,-20(fp)
8020fda0:	e17ffa17 	ldw	r5,-24(fp)
8020fda4:	e13ff917 	ldw	r4,-28(fp)
8020fda8:	020f9ec0 	call	8020f9ec <alt_msgdma_construct_prefetcher_extended_descriptor>
            read_address_high, read_address_low, 0, 0, length, control, 
            sequence_number, read_burst_count, 0, read_stride, 0);
}
8020fdac:	e037883a 	mov	sp,fp
8020fdb0:	dfc00117 	ldw	ra,4(sp)
8020fdb4:	df000017 	ldw	fp,0(sp)
8020fdb8:	dec00204 	addi	sp,sp,8
8020fdbc:	f800283a 	ret

8020fdc0 <alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor>:
    alt_u16 sequence_number,
    alt_u8 read_burst_count,
    alt_u8 write_burst_count, 
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
8020fdc0:	deffec04 	addi	sp,sp,-80
8020fdc4:	dfc01315 	stw	ra,76(sp)
8020fdc8:	df001215 	stw	fp,72(sp)
8020fdcc:	df001204 	addi	fp,sp,72
8020fdd0:	e13ff715 	stw	r4,-36(fp)
8020fdd4:	e17ff815 	stw	r5,-32(fp)
8020fdd8:	e1bff915 	stw	r6,-28(fp)
8020fddc:	e1fffa15 	stw	r7,-24(fp)
8020fde0:	e1800617 	ldw	r6,24(fp)
8020fde4:	e1400717 	ldw	r5,28(fp)
8020fde8:	e1000817 	ldw	r4,32(fp)
8020fdec:	e0c00917 	ldw	r3,36(fp)
8020fdf0:	e0800a17 	ldw	r2,40(fp)
8020fdf4:	e1bffb0d 	sth	r6,-20(fp)
8020fdf8:	e17ffc05 	stb	r5,-16(fp)
8020fdfc:	e13ffd05 	stb	r4,-12(fp)
8020fe00:	e0fffe0d 	sth	r3,-8(fp)
8020fe04:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor,
8020fe08:	e0bffb0b 	ldhu	r2,-20(fp)
8020fe0c:	e0fffc03 	ldbu	r3,-16(fp)
8020fe10:	e13ffd03 	ldbu	r4,-12(fp)
8020fe14:	e17ffe0b 	ldhu	r5,-8(fp)
8020fe18:	e1bfff0b 	ldhu	r6,-4(fp)
8020fe1c:	d9800815 	stw	r6,32(sp)
8020fe20:	d9400715 	stw	r5,28(sp)
8020fe24:	d9000615 	stw	r4,24(sp)
8020fe28:	d8c00515 	stw	r3,20(sp)
8020fe2c:	d8800415 	stw	r2,16(sp)
8020fe30:	e0800517 	ldw	r2,20(fp)
8020fe34:	d8800315 	stw	r2,12(sp)
8020fe38:	e0800417 	ldw	r2,16(fp)
8020fe3c:	d8800215 	stw	r2,8(sp)
8020fe40:	e0800317 	ldw	r2,12(fp)
8020fe44:	d8800115 	stw	r2,4(sp)
8020fe48:	e0800217 	ldw	r2,8(fp)
8020fe4c:	d8800015 	stw	r2,0(sp)
8020fe50:	e1fffa17 	ldw	r7,-24(fp)
8020fe54:	e1bff917 	ldw	r6,-28(fp)
8020fe58:	e17ff817 	ldw	r5,-32(fp)
8020fe5c:	e13ff717 	ldw	r4,-36(fp)
8020fe60:	020f9ec0 	call	8020f9ec <alt_msgdma_construct_prefetcher_extended_descriptor>
            read_address_high, read_address_low, write_address_high, 
            write_address_low, length, control, sequence_number, 
            read_burst_count, write_burst_count, read_stride, write_stride);

}
8020fe64:	e037883a 	mov	sp,fp
8020fe68:	dfc00117 	ldw	ra,4(sp)
8020fe6c:	df000017 	ldw	fp,0(sp)
8020fe70:	dec00204 	addi	sp,sp,8
8020fe74:	f800283a 	ret

8020fe78 <alt_msgdma_prefetcher_add_standard_desc_to_list>:
 *           descriptor.next_ptr not pointing back to itslef)
 */
int alt_msgdma_prefetcher_add_standard_desc_to_list (
    alt_msgdma_prefetcher_standard_descriptor** list,
    alt_msgdma_prefetcher_standard_descriptor* descriptor)
{
8020fe78:	defffc04 	addi	sp,sp,-16
8020fe7c:	df000315 	stw	fp,12(sp)
8020fe80:	df000304 	addi	fp,sp,12
8020fe84:	e13ffe15 	stw	r4,-8(fp)
8020fe88:	e17fff15 	stw	r5,-4(fp)
    alt_msgdma_prefetcher_standard_descriptor *last_descr_ptr;
    
    if (descriptor == NULL)
8020fe8c:	e0bfff17 	ldw	r2,-4(fp)
8020fe90:	1000021e 	bne	r2,zero,8020fe9c <alt_msgdma_prefetcher_add_standard_desc_to_list+0x24>
    {
        return -EINVAL;  /* this descriptor cannot be NULL */
8020fe94:	00bffa84 	movi	r2,-22
8020fe98:	00002f06 	br	8020ff58 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
    }
    if (descriptor->next_desc_ptr != (alt_u32)descriptor)
8020fe9c:	e0bfff17 	ldw	r2,-4(fp)
8020fea0:	10c00317 	ldw	r3,12(r2)
8020fea4:	e0bfff17 	ldw	r2,-4(fp)
8020fea8:	18800226 	beq	r3,r2,8020feb4 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x3c>
    {
        return -EINVAL;  /* descriptor.next_ptr must point to itself */
8020feac:	00bffa84 	movi	r2,-22
8020feb0:	00002906 	br	8020ff58 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
    }
    if (*list == NULL)
8020feb4:	e0bffe17 	ldw	r2,-8(fp)
8020feb8:	10800017 	ldw	r2,0(r2)
8020febc:	1000051e 	bne	r2,zero,8020fed4 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x5c>
    {
        *list = descriptor;  /* make this root-node if list is empty */
8020fec0:	e0bffe17 	ldw	r2,-8(fp)
8020fec4:	e0ffff17 	ldw	r3,-4(fp)
8020fec8:	10c00015 	stw	r3,0(r2)
        return 0;  /* successfully added */
8020fecc:	0005883a 	mov	r2,zero
8020fed0:	00002106 	br	8020ff58 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
    }
    if (*list == descriptor)
8020fed4:	e0bffe17 	ldw	r2,-8(fp)
8020fed8:	10c00017 	ldw	r3,0(r2)
8020fedc:	e0bfff17 	ldw	r2,-4(fp)
8020fee0:	1880021e 	bne	r3,r2,8020feec <alt_msgdma_prefetcher_add_standard_desc_to_list+0x74>
    {
        return -EINVAL;  /* this descriptor cannot already be root-node */
8020fee4:	00bffa84 	movi	r2,-22
8020fee8:	00001b06 	br	8020ff58 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
    }
    
    /* get to last node in the list */
    last_descr_ptr = *list; /* start at list root-node */
8020feec:	e0bffe17 	ldw	r2,-8(fp)
8020fef0:	10800017 	ldw	r2,0(r2)
8020fef4:	e0bffd15 	stw	r2,-12(fp)
    /* traverse list until you get the last node */
    while (last_descr_ptr->next_desc_ptr != (alt_u32)*list)  
8020fef8:	00000906 	br	8020ff20 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xa8>
    {
        if (last_descr_ptr->next_desc_ptr == (alt_u32)descriptor)
8020fefc:	e0bffd17 	ldw	r2,-12(fp)
8020ff00:	10c00317 	ldw	r3,12(r2)
8020ff04:	e0bfff17 	ldw	r2,-4(fp)
8020ff08:	1880021e 	bne	r3,r2,8020ff14 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x9c>
        {
            return -EINVAL;  /* descriptor cannot already be in the list */
8020ff0c:	00bffa84 	movi	r2,-22
8020ff10:	00001106 	br	8020ff58 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
        }
        last_descr_ptr = 
            (alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
8020ff14:	e0bffd17 	ldw	r2,-12(fp)
8020ff18:	10800317 	ldw	r2,12(r2)
    {
        if (last_descr_ptr->next_desc_ptr == (alt_u32)descriptor)
        {
            return -EINVAL;  /* descriptor cannot already be in the list */
        }
        last_descr_ptr = 
8020ff1c:	e0bffd15 	stw	r2,-12(fp)
    }
    
    /* get to last node in the list */
    last_descr_ptr = *list; /* start at list root-node */
    /* traverse list until you get the last node */
    while (last_descr_ptr->next_desc_ptr != (alt_u32)*list)  
8020ff20:	e0bffd17 	ldw	r2,-12(fp)
8020ff24:	10800317 	ldw	r2,12(r2)
8020ff28:	e0fffe17 	ldw	r3,-8(fp)
8020ff2c:	18c00017 	ldw	r3,0(r3)
8020ff30:	10fff21e 	bne	r2,r3,8020fefc <__reset+0xfa1efefc>
        }
        last_descr_ptr = 
            (alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
    }
    /* add this descriptor to end of list */
    last_descr_ptr->next_desc_ptr = (alt_u32)((uintptr_t)descriptor);
8020ff34:	e0ffff17 	ldw	r3,-4(fp)
8020ff38:	e0bffd17 	ldw	r2,-12(fp)
8020ff3c:	10c00315 	stw	r3,12(r2)
    /* ensure new last pointer points the start of the list */
    descriptor->next_desc_ptr = (alt_u32)((uintptr_t)*list);  
8020ff40:	e0bffe17 	ldw	r2,-8(fp)
8020ff44:	10800017 	ldw	r2,0(r2)
8020ff48:	1007883a 	mov	r3,r2
8020ff4c:	e0bfff17 	ldw	r2,-4(fp)
8020ff50:	10c00315 	stw	r3,12(r2)
    return 0; /* successfully added */
8020ff54:	0005883a 	mov	r2,zero
}
8020ff58:	e037883a 	mov	sp,fp
8020ff5c:	df000017 	ldw	fp,0(sp)
8020ff60:	dec00104 	addi	sp,sp,4
8020ff64:	f800283a 	ret

8020ff68 <alt_msgdma_prefetcher_add_extended_desc_to_list>:

int alt_msgdma_prefetcher_add_extended_desc_to_list (
    alt_msgdma_prefetcher_extended_descriptor** list,
    alt_msgdma_prefetcher_extended_descriptor* descriptor)
{
8020ff68:	defff804 	addi	sp,sp,-32
8020ff6c:	df000715 	stw	fp,28(sp)
8020ff70:	df000704 	addi	fp,sp,28
8020ff74:	e13ffe15 	stw	r4,-8(fp)
8020ff78:	e17fff15 	stw	r5,-4(fp)
    alt_msgdma_prefetcher_extended_descriptor *last_descr_ptr;
    msgdma_addr64 root_node_addr, next_node_addr;
    
    if (descriptor == NULL)
8020ff7c:	e13fff17 	ldw	r4,-4(fp)
8020ff80:	2000021e 	bne	r4,zero,8020ff8c <alt_msgdma_prefetcher_add_extended_desc_to_list+0x24>
    {
        return -EINVAL;  /* this descriptor cannot be NULL */
8020ff84:	00bffa84 	movi	r2,-22
8020ff88:	00005906 	br	802100f0 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
    }
    
    next_node_addr.u64 = (uintptr_t)descriptor;
8020ff8c:	e13fff17 	ldw	r4,-4(fp)
8020ff90:	2015883a 	mov	r10,r4
8020ff94:	0017883a 	mov	r11,zero
8020ff98:	e2bffc15 	stw	r10,-16(fp)
8020ff9c:	e2fffd15 	stw	r11,-12(fp)
    if( (descriptor->next_desc_ptr_low != next_node_addr.u32[0]) ||
8020ffa0:	e13fff17 	ldw	r4,-4(fp)
8020ffa4:	21400317 	ldw	r5,12(r4)
8020ffa8:	e13ffc17 	ldw	r4,-16(fp)
8020ffac:	2900041e 	bne	r5,r4,8020ffc0 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x58>
        (descriptor->next_desc_ptr_high != next_node_addr.u32[1]))
8020ffb0:	e13fff17 	ldw	r4,-4(fp)
8020ffb4:	21400b17 	ldw	r5,44(r4)
8020ffb8:	e13ffd17 	ldw	r4,-12(fp)
    {
        return -EINVAL;  /* this descriptor cannot be NULL */
    }
    
    next_node_addr.u64 = (uintptr_t)descriptor;
    if( (descriptor->next_desc_ptr_low != next_node_addr.u32[0]) ||
8020ffbc:	29000226 	beq	r5,r4,8020ffc8 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x60>
        (descriptor->next_desc_ptr_high != next_node_addr.u32[1]))
    {
        return -EINVAL;  /* descriptor.next_ptr must point to itself */
8020ffc0:	00bffa84 	movi	r2,-22
8020ffc4:	00004a06 	br	802100f0 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
    }
    
    if (*list == NULL)
8020ffc8:	e13ffe17 	ldw	r4,-8(fp)
8020ffcc:	21000017 	ldw	r4,0(r4)
8020ffd0:	2000051e 	bne	r4,zero,8020ffe8 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x80>
    {
        *list = descriptor;  /* make this the root-node if list is empty */
8020ffd4:	e0bffe17 	ldw	r2,-8(fp)
8020ffd8:	e0ffff17 	ldw	r3,-4(fp)
8020ffdc:	10c00015 	stw	r3,0(r2)
        return 0;
8020ffe0:	0005883a 	mov	r2,zero
8020ffe4:	00004206 	br	802100f0 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
    }
    if (*list == descriptor)
8020ffe8:	e13ffe17 	ldw	r4,-8(fp)
8020ffec:	21400017 	ldw	r5,0(r4)
8020fff0:	e13fff17 	ldw	r4,-4(fp)
8020fff4:	2900021e 	bne	r5,r4,80210000 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x98>
    {
        return -EINVAL;  /* this descriptor cannot already be root-node */
8020fff8:	00bffa84 	movi	r2,-22
8020fffc:	00003c06 	br	802100f0 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
    }
    
    /* get to last node in the list */
    last_descr_ptr = *list; /* start at list root-node */
80210000:	e13ffe17 	ldw	r4,-8(fp)
80210004:	21000017 	ldw	r4,0(r4)
80210008:	e13ff915 	stw	r4,-28(fp)
    /* the last nodes next ptr should point to the root node*/
    root_node_addr.u64 = (uintptr_t)*list;
8021000c:	e13ffe17 	ldw	r4,-8(fp)
80210010:	21000017 	ldw	r4,0(r4)
80210014:	2011883a 	mov	r8,r4
80210018:	0013883a 	mov	r9,zero
8021001c:	e23ffa15 	stw	r8,-24(fp)
80210020:	e27ffb15 	stw	r9,-20(fp)
    
    /* traverse list until you get the last node */
    while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
80210024:	00001806 	br	80210088 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x120>
        || (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
    {
        /* first check if descriptor already in the list */
        next_node_addr.u64 = (uintptr_t)descriptor;
80210028:	e13fff17 	ldw	r4,-4(fp)
8021002c:	200d883a 	mov	r6,r4
80210030:	000f883a 	mov	r7,zero
80210034:	e1bffc15 	stw	r6,-16(fp)
80210038:	e1fffd15 	stw	r7,-12(fp)
        if ((last_descr_ptr->next_desc_ptr_low == next_node_addr.u32[0])
8021003c:	e13ff917 	ldw	r4,-28(fp)
80210040:	21400317 	ldw	r5,12(r4)
80210044:	e13ffc17 	ldw	r4,-16(fp)
80210048:	2900061e 	bne	r5,r4,80210064 <alt_msgdma_prefetcher_add_extended_desc_to_list+0xfc>
            && (last_descr_ptr->next_desc_ptr_high == next_node_addr.u32[1]))
8021004c:	e13ff917 	ldw	r4,-28(fp)
80210050:	21400b17 	ldw	r5,44(r4)
80210054:	e13ffd17 	ldw	r4,-12(fp)
80210058:	2900021e 	bne	r5,r4,80210064 <alt_msgdma_prefetcher_add_extended_desc_to_list+0xfc>
        {
            return -EINVAL;  /* descriptor cannot already be in the list */
8021005c:	00bffa84 	movi	r2,-22
80210060:	00002306 	br	802100f0 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
        }
        /* go to next node in list, using 64 bit address */
        next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
80210064:	e13ff917 	ldw	r4,-28(fp)
80210068:	21000317 	ldw	r4,12(r4)
8021006c:	e13ffc15 	stw	r4,-16(fp)
        next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
80210070:	e13ff917 	ldw	r4,-28(fp)
80210074:	21000b17 	ldw	r4,44(r4)
80210078:	e13ffd15 	stw	r4,-12(fp)
        last_descr_ptr = 
            (alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
8021007c:	e13ffc17 	ldw	r4,-16(fp)
80210080:	e17ffd17 	ldw	r5,-12(fp)
            return -EINVAL;  /* descriptor cannot already be in the list */
        }
        /* go to next node in list, using 64 bit address */
        next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
        next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
        last_descr_ptr = 
80210084:	e13ff915 	stw	r4,-28(fp)
    last_descr_ptr = *list; /* start at list root-node */
    /* the last nodes next ptr should point to the root node*/
    root_node_addr.u64 = (uintptr_t)*list;
    
    /* traverse list until you get the last node */
    while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
80210088:	e13ff917 	ldw	r4,-28(fp)
8021008c:	21400317 	ldw	r5,12(r4)
80210090:	e13ffa17 	ldw	r4,-24(fp)
80210094:	293fe41e 	bne	r5,r4,80210028 <__reset+0xfa1f0028>
        || (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
80210098:	e13ff917 	ldw	r4,-28(fp)
8021009c:	21400b17 	ldw	r5,44(r4)
802100a0:	e13ffb17 	ldw	r4,-20(fp)
802100a4:	293fe01e 	bne	r5,r4,80210028 <__reset+0xfa1f0028>
        next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
        last_descr_ptr = 
            (alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
    }
    /* add this descriptor to end of list */
    next_node_addr.u64 = (uintptr_t)descriptor;
802100a8:	e13fff17 	ldw	r4,-4(fp)
802100ac:	2005883a 	mov	r2,r4
802100b0:	0007883a 	mov	r3,zero
802100b4:	e0bffc15 	stw	r2,-16(fp)
802100b8:	e0fffd15 	stw	r3,-12(fp)
    last_descr_ptr->next_desc_ptr_low = next_node_addr.u32[0];
802100bc:	e0fffc17 	ldw	r3,-16(fp)
802100c0:	e0bff917 	ldw	r2,-28(fp)
802100c4:	10c00315 	stw	r3,12(r2)
    last_descr_ptr->next_desc_ptr_high = next_node_addr.u32[1];
802100c8:	e0fffd17 	ldw	r3,-12(fp)
802100cc:	e0bff917 	ldw	r2,-28(fp)
802100d0:	10c00b15 	stw	r3,44(r2)
    /* ensure new last pointer points the beginning of the list */
    descriptor->next_desc_ptr_low = root_node_addr.u32[0];
802100d4:	e0fffa17 	ldw	r3,-24(fp)
802100d8:	e0bfff17 	ldw	r2,-4(fp)
802100dc:	10c00315 	stw	r3,12(r2)
    descriptor->next_desc_ptr_high = root_node_addr.u32[1];
802100e0:	e0fffb17 	ldw	r3,-20(fp)
802100e4:	e0bfff17 	ldw	r2,-4(fp)
802100e8:	10c00b15 	stw	r3,44(r2)
    return 0;
802100ec:	0005883a 	mov	r2,zero
}
802100f0:	e037883a 	mov	sp,fp
802100f4:	df000017 	ldw	fp,0(sp)
802100f8:	dec00104 	addi	sp,sp,4
802100fc:	f800283a 	ret

80210100 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits>:
 */ 
int alt_msgdma_prefetcher_set_std_list_own_by_hw_bits (
    alt_msgdma_prefetcher_standard_descriptor *list,
    alt_u8 last_desc_owned_by_sw,
    alt_u8 dcache_flush_desc_list)    
{
80210100:	defff804 	addi	sp,sp,-32
80210104:	dfc00715 	stw	ra,28(sp)
80210108:	df000615 	stw	fp,24(sp)
8021010c:	df000604 	addi	fp,sp,24
80210110:	e13ffd15 	stw	r4,-12(fp)
80210114:	2807883a 	mov	r3,r5
80210118:	3005883a 	mov	r2,r6
8021011c:	e0fffe05 	stb	r3,-8(fp)
80210120:	e0bfff05 	stb	r2,-4(fp)
    alt_u32 descriptor_control_field = 0;
80210124:	e03ffc15 	stw	zero,-16(fp)
    alt_msgdma_prefetcher_standard_descriptor *last_descr_ptr;
    alt_u32 descriptor_count = 0;
80210128:	e03ffb15 	stw	zero,-20(fp)
    
    if (list == NULL)
8021012c:	e0bffd17 	ldw	r2,-12(fp)
80210130:	1000021e 	bne	r2,zero,8021013c <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x3c>
    {
        return -EINVAL;  /* this list cannot be empty */
80210134:	00bffa84 	movi	r2,-22
80210138:	00002f06 	br	802101f8 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0xf8>
    }

    /* update all nodes in the list */
    last_descr_ptr = list; /* start at list root-node */
8021013c:	e0bffd17 	ldw	r2,-12(fp)
80210140:	e0bffa15 	stw	r2,-24(fp)
    /* traverse list to update all of the nodes */
    while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
80210144:	00000d06 	br	8021017c <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x7c>
    {
        /* get current value */
        descriptor_control_field = last_descr_ptr->control;
80210148:	e0bffa17 	ldw	r2,-24(fp)
8021014c:	10800717 	ldw	r2,28(r2)
80210150:	e0bffc15 	stw	r2,-16(fp)
        /* update own_by_hw bit only */
        last_descr_ptr->control = descriptor_control_field 
                | ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
80210154:	e0bffc17 	ldw	r2,-16(fp)
80210158:	10d00034 	orhi	r3,r2,16384
    while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
    {
        /* get current value */
        descriptor_control_field = last_descr_ptr->control;
        /* update own_by_hw bit only */
        last_descr_ptr->control = descriptor_control_field 
8021015c:	e0bffa17 	ldw	r2,-24(fp)
80210160:	10c00715 	stw	r3,28(r2)
                | ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
        /* go to next node in list */
        last_descr_ptr = 
            (alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
80210164:	e0bffa17 	ldw	r2,-24(fp)
80210168:	10800317 	ldw	r2,12(r2)
        descriptor_control_field = last_descr_ptr->control;
        /* update own_by_hw bit only */
        last_descr_ptr->control = descriptor_control_field 
                | ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
        /* go to next node in list */
        last_descr_ptr = 
8021016c:	e0bffa15 	stw	r2,-24(fp)
            (alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
            
        descriptor_count++;
80210170:	e0bffb17 	ldw	r2,-20(fp)
80210174:	10800044 	addi	r2,r2,1
80210178:	e0bffb15 	stw	r2,-20(fp)
    }

    /* update all nodes in the list */
    last_descr_ptr = list; /* start at list root-node */
    /* traverse list to update all of the nodes */
    while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
8021017c:	e0bffa17 	ldw	r2,-24(fp)
80210180:	10c00317 	ldw	r3,12(r2)
80210184:	e0bffd17 	ldw	r2,-12(fp)
80210188:	18bfef1e 	bne	r3,r2,80210148 <__reset+0xfa1f0148>
            (alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
            
        descriptor_count++;
    }
    /* update the last node in the list, currently last_descr_ptr after while loop */
    descriptor_control_field = last_descr_ptr->control;    /* get current value */
8021018c:	e0bffa17 	ldw	r2,-24(fp)
80210190:	10800717 	ldw	r2,28(r2)
80210194:	e0bffc15 	stw	r2,-16(fp)
    /* update own_by_hw bit only */
    if (last_desc_owned_by_sw)
80210198:	e0bffe03 	ldbu	r2,-8(fp)
8021019c:	10000726 	beq	r2,zero,802101bc <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0xbc>
    {
        last_descr_ptr->control = descriptor_control_field 
            & ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK;
802101a0:	e0fffc17 	ldw	r3,-16(fp)
802101a4:	00b00034 	movhi	r2,49152
802101a8:	10bfffc4 	addi	r2,r2,-1
802101ac:	1886703a 	and	r3,r3,r2
    /* update the last node in the list, currently last_descr_ptr after while loop */
    descriptor_control_field = last_descr_ptr->control;    /* get current value */
    /* update own_by_hw bit only */
    if (last_desc_owned_by_sw)
    {
        last_descr_ptr->control = descriptor_control_field 
802101b0:	e0bffa17 	ldw	r2,-24(fp)
802101b4:	10c00715 	stw	r3,28(r2)
802101b8:	00000406 	br	802101cc <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0xcc>
            & ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK;
    }
    else {
        last_descr_ptr->control = descriptor_control_field 
            | ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;        
802101bc:	e0bffc17 	ldw	r2,-16(fp)
802101c0:	10d00034 	orhi	r3,r2,16384
    {
        last_descr_ptr->control = descriptor_control_field 
            & ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK;
    }
    else {
        last_descr_ptr->control = descriptor_control_field 
802101c4:	e0bffa17 	ldw	r2,-24(fp)
802101c8:	10c00715 	stw	r3,28(r2)
            | ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;        
    }
    
    descriptor_count++;
802101cc:	e0bffb17 	ldw	r2,-20(fp)
802101d0:	10800044 	addi	r2,r2,1
802101d4:	e0bffb15 	stw	r2,-20(fp)
    
    if (dcache_flush_desc_list)
802101d8:	e0bfff03 	ldbu	r2,-4(fp)
802101dc:	10000526 	beq	r2,zero,802101f4 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0xf4>
    {        
        alt_dcache_flush(list,sizeof(alt_msgdma_prefetcher_standard_descriptor) * descriptor_count);
802101e0:	e0bffb17 	ldw	r2,-20(fp)
802101e4:	1004917a 	slli	r2,r2,5
802101e8:	100b883a 	mov	r5,r2
802101ec:	e13ffd17 	ldw	r4,-12(fp)
802101f0:	0210cc40 	call	80210cc4 <alt_dcache_flush>
    }
    
    return 0;
802101f4:	0005883a 	mov	r2,zero
}
802101f8:	e037883a 	mov	sp,fp
802101fc:	dfc00117 	ldw	ra,4(sp)
80210200:	df000017 	ldw	fp,0(sp)
80210204:	dec00204 	addi	sp,sp,8
80210208:	f800283a 	ret

8021020c <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits>:
 */    
int alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits (
    alt_msgdma_prefetcher_extended_descriptor *list,
    alt_u8 last_desc_owned_by_sw,
    alt_u8 dcache_flush_desc_list) 
{    
8021020c:	defff404 	addi	sp,sp,-48
80210210:	dfc00b15 	stw	ra,44(sp)
80210214:	df000a15 	stw	fp,40(sp)
80210218:	df000a04 	addi	fp,sp,40
8021021c:	e13ffd15 	stw	r4,-12(fp)
80210220:	3009883a 	mov	r4,r6
80210224:	e17ffe05 	stb	r5,-8(fp)
80210228:	e13fff05 	stb	r4,-4(fp)
    alt_u32 descriptor_control_field = 0;
8021022c:	e03ff815 	stw	zero,-32(fp)
    msgdma_addr64 root_node_addr, next_node_addr;
    alt_msgdma_prefetcher_extended_descriptor *last_descr_ptr;
    alt_u32 descriptor_count = 0;
80210230:	e03ff715 	stw	zero,-36(fp)
    
    if (list == NULL)
80210234:	e13ffd17 	ldw	r4,-12(fp)
80210238:	2000021e 	bne	r4,zero,80210244 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x38>
    {
        return -EINVAL;  /* this list cannot be empty */
8021023c:	00bffa84 	movi	r2,-22
80210240:	00003e06 	br	8021033c <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x130>
    }
    
    /* update all nodes in the list */
    last_descr_ptr = list; /* start at list root-node */
80210244:	e13ffd17 	ldw	r4,-12(fp)
80210248:	e13ff615 	stw	r4,-40(fp)
    /* the last nodes next ptr should point to the root node*/
    root_node_addr.u64 = (uintptr_t)list;
8021024c:	e13ffd17 	ldw	r4,-12(fp)
80210250:	2005883a 	mov	r2,r4
80210254:	0007883a 	mov	r3,zero
80210258:	e0bff915 	stw	r2,-28(fp)
8021025c:	e0fffa15 	stw	r3,-24(fp)

    /* traverse list until you get the last node */
    while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
80210260:	00001306 	br	802102b0 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0xa4>
        || (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
    {
        /* start with current value */
        descriptor_control_field = last_descr_ptr->control;
80210264:	e0bff617 	ldw	r2,-40(fp)
80210268:	10800f17 	ldw	r2,60(r2)
8021026c:	e0bff815 	stw	r2,-32(fp)
        /* update own_by_hw bit only */
        last_descr_ptr->control = descriptor_control_field 
                | ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
80210270:	e0bff817 	ldw	r2,-32(fp)
80210274:	10d00034 	orhi	r3,r2,16384
        || (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
    {
        /* start with current value */
        descriptor_control_field = last_descr_ptr->control;
        /* update own_by_hw bit only */
        last_descr_ptr->control = descriptor_control_field 
80210278:	e0bff617 	ldw	r2,-40(fp)
8021027c:	10c00f15 	stw	r3,60(r2)
                | ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
        /* go to next node in list, using 64 bit address */
        next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
80210280:	e0bff617 	ldw	r2,-40(fp)
80210284:	10800317 	ldw	r2,12(r2)
80210288:	e0bffb15 	stw	r2,-20(fp)
        next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
8021028c:	e0bff617 	ldw	r2,-40(fp)
80210290:	10800b17 	ldw	r2,44(r2)
80210294:	e0bffc15 	stw	r2,-16(fp)
        last_descr_ptr = 
            (alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
80210298:	e0bffb17 	ldw	r2,-20(fp)
8021029c:	e0fffc17 	ldw	r3,-16(fp)
        last_descr_ptr->control = descriptor_control_field 
                | ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
        /* go to next node in list, using 64 bit address */
        next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
        next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
        last_descr_ptr = 
802102a0:	e0bff615 	stw	r2,-40(fp)
            (alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
        descriptor_count++;            
802102a4:	e0bff717 	ldw	r2,-36(fp)
802102a8:	10800044 	addi	r2,r2,1
802102ac:	e0bff715 	stw	r2,-36(fp)
    last_descr_ptr = list; /* start at list root-node */
    /* the last nodes next ptr should point to the root node*/
    root_node_addr.u64 = (uintptr_t)list;

    /* traverse list until you get the last node */
    while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
802102b0:	e0bff617 	ldw	r2,-40(fp)
802102b4:	10c00317 	ldw	r3,12(r2)
802102b8:	e0bff917 	ldw	r2,-28(fp)
802102bc:	18bfe91e 	bne	r3,r2,80210264 <__reset+0xfa1f0264>
        || (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
802102c0:	e0bff617 	ldw	r2,-40(fp)
802102c4:	10c00b17 	ldw	r3,44(r2)
802102c8:	e0bffa17 	ldw	r2,-24(fp)
802102cc:	18bfe51e 	bne	r3,r2,80210264 <__reset+0xfa1f0264>
        last_descr_ptr = 
            (alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
        descriptor_count++;            
    }
    /* update the last node in the list, currently last_descr_ptr after while loop */
    descriptor_control_field = last_descr_ptr->control;    /* start with current value */
802102d0:	e0bff617 	ldw	r2,-40(fp)
802102d4:	10800f17 	ldw	r2,60(r2)
802102d8:	e0bff815 	stw	r2,-32(fp)
    /* update own_by_hw bit only */
    if (last_desc_owned_by_sw)
802102dc:	e0bffe03 	ldbu	r2,-8(fp)
802102e0:	10000726 	beq	r2,zero,80210300 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0xf4>
    {
        last_descr_ptr->control = descriptor_control_field 
            & ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK;
802102e4:	e0fff817 	ldw	r3,-32(fp)
802102e8:	00b00034 	movhi	r2,49152
802102ec:	10bfffc4 	addi	r2,r2,-1
802102f0:	1886703a 	and	r3,r3,r2
    /* update the last node in the list, currently last_descr_ptr after while loop */
    descriptor_control_field = last_descr_ptr->control;    /* start with current value */
    /* update own_by_hw bit only */
    if (last_desc_owned_by_sw)
    {
        last_descr_ptr->control = descriptor_control_field 
802102f4:	e0bff617 	ldw	r2,-40(fp)
802102f8:	10c00f15 	stw	r3,60(r2)
802102fc:	00000406 	br	80210310 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x104>
            & ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK;
    }
    else {
        last_descr_ptr->control = descriptor_control_field 
            | ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;        
80210300:	e0bff817 	ldw	r2,-32(fp)
80210304:	10d00034 	orhi	r3,r2,16384
    {
        last_descr_ptr->control = descriptor_control_field 
            & ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK;
    }
    else {
        last_descr_ptr->control = descriptor_control_field 
80210308:	e0bff617 	ldw	r2,-40(fp)
8021030c:	10c00f15 	stw	r3,60(r2)
            | ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;        
    }
    
    descriptor_count++;
80210310:	e0bff717 	ldw	r2,-36(fp)
80210314:	10800044 	addi	r2,r2,1
80210318:	e0bff715 	stw	r2,-36(fp)
    
    if (dcache_flush_desc_list)
8021031c:	e0bfff03 	ldbu	r2,-4(fp)
80210320:	10000526 	beq	r2,zero,80210338 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x12c>
    {        
        alt_dcache_flush(list,sizeof(alt_msgdma_prefetcher_extended_descriptor) * descriptor_count);        
80210324:	e0bff717 	ldw	r2,-36(fp)
80210328:	100491ba 	slli	r2,r2,6
8021032c:	100b883a 	mov	r5,r2
80210330:	e13ffd17 	ldw	r4,-12(fp)
80210334:	0210cc40 	call	80210cc4 <alt_dcache_flush>
    }
    
    return 0;
80210338:	0005883a 	mov	r2,zero
}
8021033c:	e037883a 	mov	sp,fp
80210340:	dfc00117 	ldw	ra,4(sp)
80210344:	df000017 	ldw	fp,0(sp)
80210348:	dec00204 	addi	sp,sp,8
8021034c:	f800283a 	ret

80210350 <alt_msgdma_start_prefetcher_with_list_addr>:
int alt_msgdma_start_prefetcher_with_list_addr (
    alt_msgdma_dev *dev,
    alt_u64  list_addr,
    alt_u8 park_mode_en,
    alt_u8 poll_en)
{
80210350:	deffef04 	addi	sp,sp,-68
80210354:	df001015 	stw	fp,64(sp)
80210358:	df001004 	addi	fp,sp,64
8021035c:	e13ffb15 	stw	r4,-20(fp)
80210360:	e17ffc15 	stw	r5,-16(fp)
80210364:	e1bffd15 	stw	r6,-12(fp)
80210368:	3807883a 	mov	r3,r7
8021036c:	e0800117 	ldw	r2,4(fp)
80210370:	e0fffe05 	stb	r3,-8(fp)
80210374:	e0bfff05 	stb	r2,-4(fp)
    alt_u32 prefetcher_ctl = 0;
80210378:	e03ff015 	stw	zero,-64(fp)
    alt_u32 dispatcher_ctl = 0;
8021037c:	e03ff115 	stw	zero,-60(fp)
    alt_irq_context context = 0;
80210380:	e03ff215 	stw	zero,-56(fp)
    
    /* use helper struct to get easy access to hi/low address */
    msgdma_addr64 root_node_addr;
    root_node_addr.u64 = list_addr;  
80210384:	e0bffc17 	ldw	r2,-16(fp)
80210388:	e0bff915 	stw	r2,-28(fp)
8021038c:	e0bffd17 	ldw	r2,-12(fp)
80210390:	e0bffa15 	stw	r2,-24(fp)
     * semaphore. This ensures that accessing registers is thread-safe.
     */
    ALT_SEM_PEND (dev->regs_lock, 0);
    
    /* case where prefetcher already started, return busy error */ 
    prefetcher_ctl = IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base);
80210394:	e0bffb17 	ldw	r2,-20(fp)
80210398:	10800617 	ldw	r2,24(r2)
8021039c:	10800037 	ldwio	r2,0(r2)
802103a0:	e0bff015 	stw	r2,-64(fp)
    if(ALT_MSGDMA_PREFETCHER_CTRL_RUN_GET(prefetcher_ctl)){
802103a4:	e0bff017 	ldw	r2,-64(fp)
802103a8:	1080004c 	andi	r2,r2,1
802103ac:	10000226 	beq	r2,zero,802103b8 <alt_msgdma_start_prefetcher_with_list_addr+0x68>
        /* release the registers semaphore */
        ALT_SEM_POST (dev->regs_lock);
        return -EBUSY;
802103b0:	00bffc04 	movi	r2,-16
802103b4:	00009206 	br	80210600 <alt_msgdma_start_prefetcher_with_list_addr+0x2b0>
    }
        
    /* Stop the msgdma dispatcher from issuing more descriptors to the
       read or write masters  */
    /* stop issuing more descriptors */
    dispatcher_ctl = ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
802103b8:	00800804 	movi	r2,32
802103bc:	e0bff115 	stw	r2,-60(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
802103c0:	0005303a 	rdctl	r2,status
802103c4:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
802103c8:	e0fff517 	ldw	r3,-44(fp)
802103cc:	00bfff84 	movi	r2,-2
802103d0:	1884703a 	and	r2,r3,r2
802103d4:	1001703a 	wrctl	status,r2
  
  return context;
802103d8:	e0bff517 	ldw	r2,-44(fp)
    
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();
802103dc:	e0bff215 	stw	r2,-56(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
802103e0:	e0bffb17 	ldw	r2,-20(fp)
802103e4:	10800317 	ldw	r2,12(r2)
802103e8:	10800104 	addi	r2,r2,4
802103ec:	e0fff117 	ldw	r3,-60(fp)
802103f0:	10c00035 	stwio	r3,0(r2)
    /*
     * Clear any (previous) status register information
     * that might occlude our error checking later.
     */
    IOWR_ALTERA_MSGDMA_CSR_STATUS( dev->csr_base, 
802103f4:	e0bffb17 	ldw	r2,-20(fp)
802103f8:	10800317 	ldw	r2,12(r2)
802103fc:	e0fffb17 	ldw	r3,-20(fp)
80210400:	18c00317 	ldw	r3,12(r3)
80210404:	18c00037 	ldwio	r3,0(r3)
80210408:	10c00035 	stwio	r3,0(r2)
8021040c:	e0bff217 	ldw	r2,-56(fp)
80210410:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80210414:	e0bff317 	ldw	r2,-52(fp)
80210418:	1001703a 	wrctl	status,r2
     * If a callback routine has been previously registered which will be
     * called from the msgdma ISR. Set up dispatcher to:
     *  - Run
     *  - Stop on an error with any particular descriptor
     */
    if(dev->callback)
8021041c:	e0bffb17 	ldw	r2,-20(fp)
80210420:	10800b17 	ldw	r2,44(r2)
80210424:	10002326 	beq	r2,zero,802104b4 <alt_msgdma_start_prefetcher_with_list_addr+0x164>
    {
        dispatcher_ctl |= (dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK 
80210428:	e0bffb17 	ldw	r2,-20(fp)
8021042c:	10c00d17 	ldw	r3,52(r2)
80210430:	e0bff117 	ldw	r2,-60(fp)
80210434:	1884b03a 	or	r2,r3,r2
80210438:	10800514 	ori	r2,r2,20
8021043c:	e0bff115 	stw	r2,-60(fp)
                | ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK );
        dispatcher_ctl &=  (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
80210440:	e0fff117 	ldw	r3,-60(fp)
80210444:	00bff7c4 	movi	r2,-33
80210448:	1884703a 	and	r2,r3,r2
8021044c:	e0bff115 	stw	r2,-60(fp)
        
        prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
80210450:	e0bff017 	ldw	r2,-64(fp)
80210454:	10800214 	ori	r2,r2,8
80210458:	e0bff015 	stw	r2,-64(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8021045c:	0005303a 	rdctl	r2,status
80210460:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80210464:	e0fff717 	ldw	r3,-36(fp)
80210468:	00bfff84 	movi	r2,-2
8021046c:	1884703a 	and	r2,r3,r2
80210470:	1001703a 	wrctl	status,r2
  
  return context;
80210474:	e0bff717 	ldw	r2,-36(fp)
        /* making sure the read-modify-write below can't be pre-empted */
        context = alt_irq_disable_all(); 
80210478:	e0bff215 	stw	r2,-56(fp)
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
8021047c:	e0bffb17 	ldw	r2,-20(fp)
80210480:	10800317 	ldw	r2,12(r2)
80210484:	10800104 	addi	r2,r2,4
80210488:	e0fff117 	ldw	r3,-60(fp)
8021048c:	10c00035 	stwio	r3,0(r2)
        IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
80210490:	e0bffb17 	ldw	r2,-20(fp)
80210494:	10800617 	ldw	r2,24(r2)
80210498:	e0fff017 	ldw	r3,-64(fp)
8021049c:	10c00035 	stwio	r3,0(r2)
802104a0:	e0bff217 	ldw	r2,-56(fp)
802104a4:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
802104a8:	e0bff417 	ldw	r2,-48(fp)
802104ac:	1001703a 	wrctl	status,r2
802104b0:	00002306 	br	80210540 <alt_msgdma_start_prefetcher_with_list_addr+0x1f0>
      *   - Stop on an error with any particular descriptor
      *   - Disable interrupt generation
      */
     else
     {
         dispatcher_ctl |= (dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK);
802104b4:	e0bffb17 	ldw	r2,-20(fp)
802104b8:	10c00d17 	ldw	r3,52(r2)
802104bc:	e0bff117 	ldw	r2,-60(fp)
802104c0:	1884b03a 	or	r2,r3,r2
802104c4:	10800114 	ori	r2,r2,4
802104c8:	e0bff115 	stw	r2,-60(fp)
         dispatcher_ctl &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) 
802104cc:	e0fff117 	ldw	r3,-60(fp)
802104d0:	00bff3c4 	movi	r2,-49
802104d4:	1884703a 	and	r2,r3,r2
802104d8:	e0bff115 	stw	r2,-60(fp)
                 & (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
         prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_CLR_MASK;
802104dc:	e0fff017 	ldw	r3,-64(fp)
802104e0:	00bffdc4 	movi	r2,-9
802104e4:	1884703a 	and	r2,r3,r2
802104e8:	e0bff015 	stw	r2,-64(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
802104ec:	0005303a 	rdctl	r2,status
802104f0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
802104f4:	e0fff817 	ldw	r3,-32(fp)
802104f8:	00bfff84 	movi	r2,-2
802104fc:	1884703a 	and	r2,r3,r2
80210500:	1001703a 	wrctl	status,r2
  
  return context;
80210504:	e0bff817 	ldw	r2,-32(fp)
         /* making sure the read-modify-write below can't be pre-empted */
         context = alt_irq_disable_all();
80210508:	e0bff215 	stw	r2,-56(fp)
         IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
8021050c:	e0bffb17 	ldw	r2,-20(fp)
80210510:	10800317 	ldw	r2,12(r2)
80210514:	10800104 	addi	r2,r2,4
80210518:	e0fff117 	ldw	r3,-60(fp)
8021051c:	10c00035 	stwio	r3,0(r2)
         IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
80210520:	e0bffb17 	ldw	r2,-20(fp)
80210524:	10800617 	ldw	r2,24(r2)
80210528:	e0fff017 	ldw	r3,-64(fp)
8021052c:	10c00035 	stwio	r3,0(r2)
80210530:	e0bff217 	ldw	r2,-56(fp)
80210534:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80210538:	e0bff617 	ldw	r2,-40(fp)
8021053c:	1001703a 	wrctl	status,r2
         alt_irq_enable_all(context);
     }   
    
     /* set next descriptor registers to point to the list root-node */
     IOWR_ALT_MSGDMA_PREFETCHER_NEXT_DESCRIPTOR_PTR_LOW(dev->prefetcher_base,
80210540:	e0bffb17 	ldw	r2,-20(fp)
80210544:	10800617 	ldw	r2,24(r2)
80210548:	10800104 	addi	r2,r2,4
8021054c:	e0fff917 	ldw	r3,-28(fp)
80210550:	10c00035 	stwio	r3,0(r2)
             root_node_addr.u32[0]);
     IOWR_ALT_MSGDMA_PREFETCHER_NEXT_DESCRIPTOR_PTR_HIGH(dev->prefetcher_base,
80210554:	e0bffb17 	ldw	r2,-20(fp)
80210558:	10800617 	ldw	r2,24(r2)
8021055c:	10800204 	addi	r2,r2,8
80210560:	e0fffa17 	ldw	r3,-24(fp)
80210564:	10c00035 	stwio	r3,0(r2)
             root_node_addr.u32[1]);
        
     /* set park-mode */
     if (park_mode_en){
80210568:	e0bffe03 	ldbu	r2,-8(fp)
8021056c:	10000426 	beq	r2,zero,80210580 <alt_msgdma_start_prefetcher_with_list_addr+0x230>
         prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_SET_MASK;
80210570:	e0bff017 	ldw	r2,-64(fp)
80210574:	10800414 	ori	r2,r2,16
80210578:	e0bff015 	stw	r2,-64(fp)
8021057c:	00000406 	br	80210590 <alt_msgdma_start_prefetcher_with_list_addr+0x240>
     }
     else {
         prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_CLR_MASK;
80210580:	e0fff017 	ldw	r3,-64(fp)
80210584:	00bffbc4 	movi	r2,-17
80210588:	1884703a 	and	r2,r3,r2
8021058c:	e0bff015 	stw	r2,-64(fp)
     }
     
     /* set poll-en */
     if (poll_en){
80210590:	e0bfff03 	ldbu	r2,-4(fp)
80210594:	10000e26 	beq	r2,zero,802105d0 <alt_msgdma_start_prefetcher_with_list_addr+0x280>
         prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_DESC_POLL_EN_MASK; 
80210598:	e0bff017 	ldw	r2,-64(fp)
8021059c:	10800094 	ori	r2,r2,2
802105a0:	e0bff015 	stw	r2,-64(fp)
         if(IORD_ALT_MSGDMA_PREFETCHER_DESCRIPTOR_POLLING_FREQ(
802105a4:	e0bffb17 	ldw	r2,-20(fp)
802105a8:	10800617 	ldw	r2,24(r2)
802105ac:	10800304 	addi	r2,r2,12
802105b0:	10800037 	ldwio	r2,0(r2)
802105b4:	10000a1e 	bne	r2,zero,802105e0 <alt_msgdma_start_prefetcher_with_list_addr+0x290>
                 dev->prefetcher_base) == 0){
             /* set poll frequency to some non-zero default value */
             IOWR_ALT_MSGDMA_PREFETCHER_DESCRIPTOR_POLLING_FREQ(
802105b8:	e0bffb17 	ldw	r2,-20(fp)
802105bc:	10800617 	ldw	r2,24(r2)
802105c0:	10800304 	addi	r2,r2,12
802105c4:	00c03fc4 	movi	r3,255
802105c8:	10c00035 	stwio	r3,0(r2)
802105cc:	00000406 	br	802105e0 <alt_msgdma_start_prefetcher_with_list_addr+0x290>
                     dev->prefetcher_base, 0xFF);
         }
     }
     else {
         prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_DESC_POLL_EN_CLR_MASK; 
802105d0:	e0fff017 	ldw	r3,-64(fp)
802105d4:	00bfff44 	movi	r2,-3
802105d8:	1884703a 	and	r2,r3,r2
802105dc:	e0bff015 	stw	r2,-64(fp)
     }
     
     /* set the prefetcher run bit */
     prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_RUN_SET_MASK;
802105e0:	e0bff017 	ldw	r2,-64(fp)
802105e4:	10800054 	ori	r2,r2,1
802105e8:	e0bff015 	stw	r2,-64(fp)
     /* start the dma since run bit is set */
     IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
802105ec:	e0bffb17 	ldw	r2,-20(fp)
802105f0:	10800617 	ldw	r2,24(r2)
802105f4:	e0fff017 	ldw	r3,-64(fp)
802105f8:	10c00035 	stwio	r3,0(r2)
      * Now that access to the registers is complete, release the registers
      * semaphore so that other threads can access the registers.
      */
     ALT_SEM_POST (dev->regs_lock);
     
     return 0;
802105fc:	0005883a 	mov	r2,zero
}
80210600:	e037883a 	mov	sp,fp
80210604:	df000017 	ldw	fp,0(sp)
80210608:	dec00104 	addi	sp,sp,4
8021060c:	f800283a 	ret

80210610 <alt_msgdma_start_prefetcher_with_std_desc_list>:
    alt_msgdma_prefetcher_standard_descriptor *list,
    alt_u8 park_mode_en,
    alt_u8 poll_en,
    alt_u8 last_desc_owned_by_sw,
    alt_u8 dcache_flush_desc_list)
{    
80210610:	defff504 	addi	sp,sp,-44
80210614:	dfc00a15 	stw	ra,40(sp)
80210618:	df000915 	stw	fp,36(sp)
8021061c:	dc400815 	stw	r17,32(sp)
80210620:	dc000715 	stw	r16,28(sp)
80210624:	df000904 	addi	fp,sp,36
80210628:	e13ff815 	stw	r4,-32(fp)
8021062c:	e17ff915 	stw	r5,-28(fp)
80210630:	300b883a 	mov	r5,r6
80210634:	3809883a 	mov	r4,r7
80210638:	e0c00217 	ldw	r3,8(fp)
8021063c:	e0800317 	ldw	r2,12(fp)
80210640:	e17ffa05 	stb	r5,-24(fp)
80210644:	e13ffb05 	stb	r4,-20(fp)
80210648:	e0fffc05 	stb	r3,-16(fp)
8021064c:	e0bffd05 	stb	r2,-12(fp)
    if (alt_msgdma_prefetcher_set_std_list_own_by_hw_bits(list,last_desc_owned_by_sw,dcache_flush_desc_list) != 0)
80210650:	e0bffc03 	ldbu	r2,-16(fp)
80210654:	e0fffd03 	ldbu	r3,-12(fp)
80210658:	180d883a 	mov	r6,r3
8021065c:	100b883a 	mov	r5,r2
80210660:	e13ff917 	ldw	r4,-28(fp)
80210664:	02101000 	call	80210100 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits>
80210668:	10000226 	beq	r2,zero,80210674 <alt_msgdma_start_prefetcher_with_std_desc_list+0x64>
    {
        return -EINVAL;
8021066c:	00bffa84 	movi	r2,-22
80210670:	00000b06 	br	802106a0 <alt_msgdma_start_prefetcher_with_std_desc_list+0x90>
    }

    return alt_msgdma_start_prefetcher_with_list_addr (dev, (uintptr_t)list,
80210674:	e0bff917 	ldw	r2,-28(fp)
80210678:	1021883a 	mov	r16,r2
8021067c:	0023883a 	mov	r17,zero
80210680:	e0fffa03 	ldbu	r3,-24(fp)
80210684:	e0bffb03 	ldbu	r2,-20(fp)
80210688:	d8800015 	stw	r2,0(sp)
8021068c:	180f883a 	mov	r7,r3
80210690:	800b883a 	mov	r5,r16
80210694:	880d883a 	mov	r6,r17
80210698:	e13ff817 	ldw	r4,-32(fp)
8021069c:	02103500 	call	80210350 <alt_msgdma_start_prefetcher_with_list_addr>
            park_mode_en, poll_en);
}
802106a0:	e6fffe04 	addi	sp,fp,-8
802106a4:	dfc00317 	ldw	ra,12(sp)
802106a8:	df000217 	ldw	fp,8(sp)
802106ac:	dc400117 	ldw	r17,4(sp)
802106b0:	dc000017 	ldw	r16,0(sp)
802106b4:	dec00404 	addi	sp,sp,16
802106b8:	f800283a 	ret

802106bc <alt_msgdma_start_prefetcher_with_extd_desc_list>:
    alt_msgdma_prefetcher_extended_descriptor *list,
    alt_u8 park_mode_en,
    alt_u8 poll_en,
    alt_u8 last_desc_owned_by_sw,
    alt_u8 dcache_flush_desc_list)
{
802106bc:	defff504 	addi	sp,sp,-44
802106c0:	dfc00a15 	stw	ra,40(sp)
802106c4:	df000915 	stw	fp,36(sp)
802106c8:	dc400815 	stw	r17,32(sp)
802106cc:	dc000715 	stw	r16,28(sp)
802106d0:	df000904 	addi	fp,sp,36
802106d4:	e13ff815 	stw	r4,-32(fp)
802106d8:	e17ff915 	stw	r5,-28(fp)
802106dc:	300b883a 	mov	r5,r6
802106e0:	3809883a 	mov	r4,r7
802106e4:	e0c00217 	ldw	r3,8(fp)
802106e8:	e0800317 	ldw	r2,12(fp)
802106ec:	e17ffa05 	stb	r5,-24(fp)
802106f0:	e13ffb05 	stb	r4,-20(fp)
802106f4:	e0fffc05 	stb	r3,-16(fp)
802106f8:	e0bffd05 	stb	r2,-12(fp)
    
     if (alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits(list,last_desc_owned_by_sw,dcache_flush_desc_list) != 0)
802106fc:	e0bffc03 	ldbu	r2,-16(fp)
80210700:	e0fffd03 	ldbu	r3,-12(fp)
80210704:	180d883a 	mov	r6,r3
80210708:	100b883a 	mov	r5,r2
8021070c:	e13ff917 	ldw	r4,-28(fp)
80210710:	021020c0 	call	8021020c <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits>
80210714:	10000226 	beq	r2,zero,80210720 <alt_msgdma_start_prefetcher_with_extd_desc_list+0x64>
    {
        return -EINVAL;
80210718:	00bffa84 	movi	r2,-22
8021071c:	00000b06 	br	8021074c <alt_msgdma_start_prefetcher_with_extd_desc_list+0x90>
    }
        
    return alt_msgdma_start_prefetcher_with_list_addr (dev, (uintptr_t)list, 
80210720:	e0bff917 	ldw	r2,-28(fp)
80210724:	1021883a 	mov	r16,r2
80210728:	0023883a 	mov	r17,zero
8021072c:	e0fffa03 	ldbu	r3,-24(fp)
80210730:	e0bffb03 	ldbu	r2,-20(fp)
80210734:	d8800015 	stw	r2,0(sp)
80210738:	180f883a 	mov	r7,r3
8021073c:	800b883a 	mov	r5,r16
80210740:	880d883a 	mov	r6,r17
80210744:	e13ff817 	ldw	r4,-32(fp)
80210748:	02103500 	call	80210350 <alt_msgdma_start_prefetcher_with_list_addr>
            park_mode_en, poll_en);
}
8021074c:	e6fffe04 	addi	sp,fp,-8
80210750:	dfc00317 	ldw	ra,12(sp)
80210754:	df000217 	ldw	fp,8(sp)
80210758:	dc400117 	ldw	r17,4(sp)
8021075c:	dc000017 	ldw	r16,0(sp)
80210760:	dec00404 	addi	sp,sp,16
80210764:	f800283a 	ret

80210768 <alt_msgdma_open>:
 * Returns:
 * - Pointer to msgdma device instance structure, or null if the device
 *   could not be opened.
 */
alt_msgdma_dev* alt_msgdma_open (const char* name)
{
80210768:	defffc04 	addi	sp,sp,-16
8021076c:	dfc00315 	stw	ra,12(sp)
80210770:	df000215 	stw	fp,8(sp)
80210774:	df000204 	addi	fp,sp,8
80210778:	e13fff15 	stw	r4,-4(fp)
    alt_msgdma_dev* dev = NULL;
8021077c:	e03ffe15 	stw	zero,-8(fp)

    dev = (alt_msgdma_dev*) alt_find_dev (name, &alt_msgdma_list);
80210780:	d1600d04 	addi	r5,gp,-32716
80210784:	e13fff17 	ldw	r4,-4(fp)
80210788:	0210e8c0 	call	80210e8c <alt_find_dev>
8021078c:	e0bffe15 	stw	r2,-8(fp)

    if (NULL == dev)
80210790:	e0bffe17 	ldw	r2,-8(fp)
80210794:	1000041e 	bne	r2,zero,802107a8 <alt_msgdma_open+0x40>
    {
        ALT_ERRNO = ENODEV;
80210798:	020ead00 	call	8020ead0 <alt_get_errno>
8021079c:	1007883a 	mov	r3,r2
802107a0:	008004c4 	movi	r2,19
802107a4:	18800015 	stw	r2,0(r3)
    }

    return dev;
802107a8:	e0bffe17 	ldw	r2,-8(fp)
}
802107ac:	e037883a 	mov	sp,fp
802107b0:	dfc00117 	ldw	ra,4(sp)
802107b4:	df000017 	ldw	fp,0(sp)
802107b8:	dec00204 	addi	sp,sp,8
802107bc:	f800283a 	ret

802107c0 <alt_msgdma_init>:
 * This routine disables interrupts, descriptor processing,
 * registers a specific instance of the device with the HAL,
 * and installs an interrupt handler for the device.
 */
void alt_msgdma_init (alt_msgdma_dev *dev, alt_u32 ic_id, alt_u32 irq)
{
802107c0:	defff804 	addi	sp,sp,-32
802107c4:	dfc00715 	stw	ra,28(sp)
802107c8:	df000615 	stw	fp,24(sp)
802107cc:	df000604 	addi	fp,sp,24
802107d0:	e13ffd15 	stw	r4,-12(fp)
802107d4:	e17ffe15 	stw	r5,-8(fp)
802107d8:	e1bfff15 	stw	r6,-4(fp)
    extern alt_llist alt_msgdma_list;
    alt_u32 temporary_control;
    int error;

    if (dev->prefetcher_enable)
802107dc:	e0bffd17 	ldw	r2,-12(fp)
802107e0:	10801783 	ldbu	r2,94(r2)
802107e4:	10803fcc 	andi	r2,r2,255
802107e8:	10000b26 	beq	r2,zero,80210818 <alt_msgdma_init+0x58>
    {
        /* start prefetcher reset sequence */
        IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, 
802107ec:	e0bffd17 	ldw	r2,-12(fp)
802107f0:	10800617 	ldw	r2,24(r2)
802107f4:	00c00104 	movi	r3,4
802107f8:	10c00035 	stwio	r3,0(r2)
                ALT_MSGDMA_PREFETCHER_CTRL_RESET_SET_MASK);
        /* wait until hw clears the bit */
        while(ALT_MSGDMA_PREFETCHER_CTRL_RESET_GET(
802107fc:	0001883a 	nop
80210800:	e0bffd17 	ldw	r2,-12(fp)
80210804:	10800617 	ldw	r2,24(r2)
80210808:	10800037 	ldwio	r2,0(r2)
8021080c:	1080010c 	andi	r2,r2,4
80210810:	1005d0ba 	srai	r2,r2,2
80210814:	103ffa1e 	bne	r2,zero,80210800 <__reset+0xfa1f0800>
    }    
    
    /* Reset the registers and FIFOs of the dispatcher and master modules */
    /* set the reset bit, no need to read the control register first since 
    this write is going to clear it out */
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
80210818:	e0bffd17 	ldw	r2,-12(fp)
8021081c:	10800317 	ldw	r2,12(r2)
80210820:	10800104 	addi	r2,r2,4
80210824:	00c00084 	movi	r3,2
80210828:	10c00035 	stwio	r3,0(r2)
    while(0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base)
8021082c:	0001883a 	nop
80210830:	e0bffd17 	ldw	r2,-12(fp)
80210834:	10800317 	ldw	r2,12(r2)
80210838:	10800037 	ldwio	r2,0(r2)
            & ALTERA_MSGDMA_CSR_RESET_STATE_MASK));
8021083c:	1080100c 	andi	r2,r2,64
    
    /* Reset the registers and FIFOs of the dispatcher and master modules */
    /* set the reset bit, no need to read the control register first since 
    this write is going to clear it out */
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
    while(0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base)
80210840:	103ffb1e 	bne	r2,zero,80210830 <__reset+0xfa1f0830>
    * Disable interrupts, halt descriptor processing,
    * and clear status register content
    */

    /* disable global interrupt */
    temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base)
80210844:	e0bffd17 	ldw	r2,-12(fp)
80210848:	10800317 	ldw	r2,12(r2)
8021084c:	10800104 	addi	r2,r2,4
80210850:	10800037 	ldwio	r2,0(r2)
80210854:	1007883a 	mov	r3,r2
80210858:	00bffbc4 	movi	r2,-17
8021085c:	1884703a 	and	r2,r3,r2
80210860:	e0bffb15 	stw	r2,-20(fp)
            & (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    /* stopping descriptor */
    temporary_control |= ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
80210864:	e0bffb17 	ldw	r2,-20(fp)
80210868:	10800814 	ori	r2,r2,32
8021086c:	e0bffb15 	stw	r2,-20(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
80210870:	e0bffd17 	ldw	r2,-12(fp)
80210874:	10800317 	ldw	r2,12(r2)
80210878:	10800104 	addi	r2,r2,4
8021087c:	e0fffb17 	ldw	r3,-20(fp)
80210880:	10c00035 	stwio	r3,0(r2)

    /* clear the CSR status register */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base, 
80210884:	e0bffd17 	ldw	r2,-12(fp)
80210888:	10800317 	ldw	r2,12(r2)
8021088c:	e0fffd17 	ldw	r3,-12(fp)
80210890:	18c00317 	ldw	r3,12(r3)
80210894:	18c00037 	ldwio	r3,0(r3)
80210898:	10c00035 	stwio	r3,0(r2)
            IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
    
    if (dev->prefetcher_enable)
8021089c:	e0bffd17 	ldw	r2,-12(fp)
802108a0:	10801783 	ldbu	r2,94(r2)
802108a4:	10803fcc 	andi	r2,r2,255
802108a8:	10000826 	beq	r2,zero,802108cc <alt_msgdma_init+0x10c>
    {
        /* clear all status bits that are set, since theyre W1C */
        IOWR_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base, 
802108ac:	e0bffd17 	ldw	r2,-12(fp)
802108b0:	10800617 	ldw	r2,24(r2)
802108b4:	10800404 	addi	r2,r2,16
802108b8:	e0fffd17 	ldw	r3,-12(fp)
802108bc:	18c00617 	ldw	r3,24(r3)
802108c0:	18c00404 	addi	r3,r3,16
802108c4:	18c00037 	ldwio	r3,0(r3)
802108c8:	10c00035 	stwio	r3,0(r2)
                IORD_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base));
    }

    /* Register this instance of the msgdma controller with HAL */
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_msgdma_list);
802108cc:	d1600d04 	addi	r5,gp,-32716
802108d0:	e13ffd17 	ldw	r4,-12(fp)
802108d4:	0210d280 	call	80210d28 <alt_dev_llist_insert>
802108d8:	0005883a 	mov	r2,zero

    /*
     * Creating semaphores used to protect access to the registers 
     * when running in a multi-threaded environment.
     */
    error = ALT_SEM_CREATE (&dev->regs_lock, 1);
802108dc:	e0bffc15 	stw	r2,-16(fp)
            
    if (!error)
802108e0:	e0bffc17 	ldw	r2,-16(fp)
802108e4:	1000081e 	bne	r2,zero,80210908 <alt_msgdma_init+0x148>
    {        
        /* Install IRQ handler */
        alt_ic_isr_register(ic_id, irq, alt_msgdma_irq, dev, 0x0);
802108e8:	d8000015 	stw	zero,0(sp)
802108ec:	e1fffd17 	ldw	r7,-12(fp)
802108f0:	01a00874 	movhi	r6,32801
802108f4:	31bb3304 	addi	r6,r6,-4916
802108f8:	e17fff17 	ldw	r5,-4(fp)
802108fc:	e13ffe17 	ldw	r4,-8(fp)
80210900:	0210f1c0 	call	80210f1c <alt_ic_isr_register>
    else
    {
        alt_printf("failed to create semaphores\n");
    }
    
    return;
80210904:	00000406 	br	80210918 <alt_msgdma_init+0x158>
        /* Install IRQ handler */
        alt_ic_isr_register(ic_id, irq, alt_msgdma_irq, dev, 0x0);
    }
    else
    {
        alt_printf("failed to create semaphores\n");
80210908:	01200874 	movhi	r4,32801
8021090c:	21098e04 	addi	r4,r4,9784
80210910:	02115500 	call	80211550 <alt_printf>
    }
    
    return;
80210914:	0001883a 	nop

}
80210918:	e037883a 	mov	sp,fp
8021091c:	dfc00117 	ldw	ra,4(sp)
80210920:	df000017 	ldw	fp,0(sp)
80210924:	dec00204 	addi	sp,sp,8
80210928:	f800283a 	ret

8021092c <alt_msgdma_register_callback>:
void alt_msgdma_register_callback(
    alt_msgdma_dev *dev,
    alt_msgdma_callback callback,
    alt_u32 control,
    void *context)
{
8021092c:	defffb04 	addi	sp,sp,-20
80210930:	df000415 	stw	fp,16(sp)
80210934:	df000404 	addi	fp,sp,16
80210938:	e13ffc15 	stw	r4,-16(fp)
8021093c:	e17ffd15 	stw	r5,-12(fp)
80210940:	e1bffe15 	stw	r6,-8(fp)
80210944:	e1ffff15 	stw	r7,-4(fp)
    dev->callback         = callback;
80210948:	e0bffc17 	ldw	r2,-16(fp)
8021094c:	e0fffd17 	ldw	r3,-12(fp)
80210950:	10c00b15 	stw	r3,44(r2)
    dev->callback_context = context;
80210954:	e0bffc17 	ldw	r2,-16(fp)
80210958:	e0ffff17 	ldw	r3,-4(fp)
8021095c:	10c00c15 	stw	r3,48(r2)
    dev->control          = control;
80210960:	e0bffc17 	ldw	r2,-16(fp)
80210964:	e0fffe17 	ldw	r3,-8(fp)
80210968:	10c00d15 	stw	r3,52(r2)

    return ;
8021096c:	0001883a 	nop
}
80210970:	e037883a 	mov	sp,fp
80210974:	df000017 	ldw	fp,0(sp)
80210978:	dec00104 	addi	sp,sp,4
8021097c:	f800283a 	ret

80210980 <alt_msgdma_standard_descriptor_async_transfer>:
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
int alt_msgdma_standard_descriptor_async_transfer(
    alt_msgdma_dev *dev,
    alt_msgdma_standard_descriptor *desc)
{
80210980:	defffc04 	addi	sp,sp,-16
80210984:	dfc00315 	stw	ra,12(sp)
80210988:	df000215 	stw	fp,8(sp)
8021098c:	df000204 	addi	fp,sp,8
80210990:	e13ffe15 	stw	r4,-8(fp)
80210994:	e17fff15 	stw	r5,-4(fp)
   /*
   * Error detection/handling should be performed at the application
   * or callback level as appropriate.
   */
    return alt_msgdma_descriptor_async_transfer(dev, desc, NULL);
80210998:	000d883a 	mov	r6,zero
8021099c:	e17fff17 	ldw	r5,-4(fp)
802109a0:	e13ffe17 	ldw	r4,-8(fp)
802109a4:	020f0300 	call	8020f030 <alt_msgdma_descriptor_async_transfer>

}
802109a8:	e037883a 	mov	sp,fp
802109ac:	dfc00117 	ldw	ra,4(sp)
802109b0:	df000017 	ldw	fp,0(sp)
802109b4:	dec00204 	addi	sp,sp,8
802109b8:	f800283a 	ret

802109bc <alt_msgdma_extended_descriptor_async_transfer>:
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
int alt_msgdma_extended_descriptor_async_transfer(
    alt_msgdma_dev *dev,
    alt_msgdma_extended_descriptor *desc)
{
802109bc:	defffc04 	addi	sp,sp,-16
802109c0:	dfc00315 	stw	ra,12(sp)
802109c4:	df000215 	stw	fp,8(sp)
802109c8:	df000204 	addi	fp,sp,8
802109cc:	e13ffe15 	stw	r4,-8(fp)
802109d0:	e17fff15 	stw	r5,-4(fp)
    /*
    * Error detection/handling should be performed at the application
    * or callback level as appropriate.
    */
    return alt_msgdma_descriptor_async_transfer(dev, NULL, desc);
802109d4:	e1bfff17 	ldw	r6,-4(fp)
802109d8:	000b883a 	mov	r5,zero
802109dc:	e13ffe17 	ldw	r4,-8(fp)
802109e0:	020f0300 	call	8020f030 <alt_msgdma_descriptor_async_transfer>
}
802109e4:	e037883a 	mov	sp,fp
802109e8:	dfc00117 	ldw	ra,4(sp)
802109ec:	df000017 	ldw	fp,0(sp)
802109f0:	dec00204 	addi	sp,sp,8
802109f4:	f800283a 	ret

802109f8 <alt_msgdma_standard_descriptor_sync_transfer>:
 *           return -ETIME (Time out and skipping the looping after 5 msec)
 */
int alt_msgdma_standard_descriptor_sync_transfer(
    alt_msgdma_dev *dev,
    alt_msgdma_standard_descriptor *desc)
{
802109f8:	defffc04 	addi	sp,sp,-16
802109fc:	dfc00315 	stw	ra,12(sp)
80210a00:	df000215 	stw	fp,8(sp)
80210a04:	df000204 	addi	fp,sp,8
80210a08:	e13ffe15 	stw	r4,-8(fp)
80210a0c:	e17fff15 	stw	r5,-4(fp)
    return alt_msgdma_descriptor_sync_transfer(dev, desc, NULL);
80210a10:	000d883a 	mov	r6,zero
80210a14:	e17fff17 	ldw	r5,-4(fp)
80210a18:	e13ffe17 	ldw	r4,-8(fp)
80210a1c:	020f3000 	call	8020f300 <alt_msgdma_descriptor_sync_transfer>
}
80210a20:	e037883a 	mov	sp,fp
80210a24:	dfc00117 	ldw	ra,4(sp)
80210a28:	df000017 	ldw	fp,0(sp)
80210a2c:	dec00204 	addi	sp,sp,8
80210a30:	f800283a 	ret

80210a34 <alt_msgdma_extended_descriptor_sync_transfer>:
 *           return -ETIME (Time out and skipping the looping after 5 msec)
 */
int alt_msgdma_extended_descriptor_sync_transfer(
    alt_msgdma_dev *dev,
    alt_msgdma_extended_descriptor *desc)
{
80210a34:	defffc04 	addi	sp,sp,-16
80210a38:	dfc00315 	stw	ra,12(sp)
80210a3c:	df000215 	stw	fp,8(sp)
80210a40:	df000204 	addi	fp,sp,8
80210a44:	e13ffe15 	stw	r4,-8(fp)
80210a48:	e17fff15 	stw	r5,-4(fp)
    return alt_msgdma_descriptor_sync_transfer(dev, NULL, desc);
80210a4c:	e1bfff17 	ldw	r6,-4(fp)
80210a50:	000b883a 	mov	r5,zero
80210a54:	e13ffe17 	ldw	r4,-8(fp)
80210a58:	020f3000 	call	8020f300 <alt_msgdma_descriptor_sync_transfer>
}
80210a5c:	e037883a 	mov	sp,fp
80210a60:	dfc00117 	ldw	ra,4(sp)
80210a64:	df000017 	ldw	fp,0(sp)
80210a68:	dec00204 	addi	sp,sp,8
80210a6c:	f800283a 	ret

80210a70 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
80210a70:	defff504 	addi	sp,sp,-44
80210a74:	df000a15 	stw	fp,40(sp)
80210a78:	df000a04 	addi	fp,sp,40
80210a7c:	e13ffc15 	stw	r4,-16(fp)
80210a80:	e17ffd15 	stw	r5,-12(fp)
80210a84:	e1bffe15 	stw	r6,-8(fp)
80210a88:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
80210a8c:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
80210a90:	d0a01d17 	ldw	r2,-32652(gp)
  
  if (alt_ticks_per_second ())
80210a94:	10003c26 	beq	r2,zero,80210b88 <alt_alarm_start+0x118>
  {
    if (alarm)
80210a98:	e0bffc17 	ldw	r2,-16(fp)
80210a9c:	10003826 	beq	r2,zero,80210b80 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
80210aa0:	e0bffc17 	ldw	r2,-16(fp)
80210aa4:	e0fffe17 	ldw	r3,-8(fp)
80210aa8:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
80210aac:	e0bffc17 	ldw	r2,-16(fp)
80210ab0:	e0ffff17 	ldw	r3,-4(fp)
80210ab4:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80210ab8:	0005303a 	rdctl	r2,status
80210abc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80210ac0:	e0fff917 	ldw	r3,-28(fp)
80210ac4:	00bfff84 	movi	r2,-2
80210ac8:	1884703a 	and	r2,r3,r2
80210acc:	1001703a 	wrctl	status,r2
  
  return context;
80210ad0:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
80210ad4:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
80210ad8:	d0a01e17 	ldw	r2,-32648(gp)
      
      current_nticks = alt_nticks();
80210adc:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
80210ae0:	e0fffd17 	ldw	r3,-12(fp)
80210ae4:	e0bff617 	ldw	r2,-40(fp)
80210ae8:	1885883a 	add	r2,r3,r2
80210aec:	10c00044 	addi	r3,r2,1
80210af0:	e0bffc17 	ldw	r2,-16(fp)
80210af4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
80210af8:	e0bffc17 	ldw	r2,-16(fp)
80210afc:	10c00217 	ldw	r3,8(r2)
80210b00:	e0bff617 	ldw	r2,-40(fp)
80210b04:	1880042e 	bgeu	r3,r2,80210b18 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
80210b08:	e0bffc17 	ldw	r2,-16(fp)
80210b0c:	00c00044 	movi	r3,1
80210b10:	10c00405 	stb	r3,16(r2)
80210b14:	00000206 	br	80210b20 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
80210b18:	e0bffc17 	ldw	r2,-16(fp)
80210b1c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
80210b20:	e0bffc17 	ldw	r2,-16(fp)
80210b24:	d0e01004 	addi	r3,gp,-32704
80210b28:	e0fffa15 	stw	r3,-24(fp)
80210b2c:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
80210b30:	e0bffb17 	ldw	r2,-20(fp)
80210b34:	e0fffa17 	ldw	r3,-24(fp)
80210b38:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
80210b3c:	e0bffa17 	ldw	r2,-24(fp)
80210b40:	10c00017 	ldw	r3,0(r2)
80210b44:	e0bffb17 	ldw	r2,-20(fp)
80210b48:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
80210b4c:	e0bffa17 	ldw	r2,-24(fp)
80210b50:	10800017 	ldw	r2,0(r2)
80210b54:	e0fffb17 	ldw	r3,-20(fp)
80210b58:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
80210b5c:	e0bffa17 	ldw	r2,-24(fp)
80210b60:	e0fffb17 	ldw	r3,-20(fp)
80210b64:	10c00015 	stw	r3,0(r2)
80210b68:	e0bff817 	ldw	r2,-32(fp)
80210b6c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80210b70:	e0bff717 	ldw	r2,-36(fp)
80210b74:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
80210b78:	0005883a 	mov	r2,zero
80210b7c:	00000306 	br	80210b8c <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
80210b80:	00bffa84 	movi	r2,-22
80210b84:	00000106 	br	80210b8c <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
80210b88:	00bfde84 	movi	r2,-134
  }
}
80210b8c:	e037883a 	mov	sp,fp
80210b90:	df000017 	ldw	fp,0(sp)
80210b94:	dec00104 	addi	sp,sp,4
80210b98:	f800283a 	ret

80210b9c <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
80210b9c:	defffb04 	addi	sp,sp,-20
80210ba0:	df000415 	stw	fp,16(sp)
80210ba4:	df000404 	addi	fp,sp,16
80210ba8:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
80210bac:	008000c4 	movi	r2,3
80210bb0:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
80210bb4:	e0fffd17 	ldw	r3,-12(fp)
80210bb8:	008003f4 	movhi	r2,15
80210bbc:	10909004 	addi	r2,r2,16960
80210bc0:	1887383a 	mul	r3,r3,r2
80210bc4:	00817db4 	movhi	r2,1526
80210bc8:	10b84004 	addi	r2,r2,-7936
80210bcc:	10c7203a 	divu	r3,r2,r3
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
80210bd0:	00a00034 	movhi	r2,32768
80210bd4:	10bfffc4 	addi	r2,r2,-1
80210bd8:	10c5203a 	divu	r2,r2,r3
80210bdc:	e0ffff17 	ldw	r3,-4(fp)
80210be0:	1885203a 	divu	r2,r3,r2
80210be4:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
80210be8:	e0bffe17 	ldw	r2,-8(fp)
80210bec:	10002526 	beq	r2,zero,80210c84 <alt_busy_sleep+0xe8>
  {
    for(i=0;i<big_loops;i++)
80210bf0:	e03ffc15 	stw	zero,-16(fp)
80210bf4:	00001406 	br	80210c48 <alt_busy_sleep+0xac>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
80210bf8:	00a00034 	movhi	r2,32768
80210bfc:	10bfffc4 	addi	r2,r2,-1
80210c00:	10bfffc4 	addi	r2,r2,-1
80210c04:	103ffe1e 	bne	r2,zero,80210c00 <__reset+0xfa1f0c00>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
80210c08:	e0fffd17 	ldw	r3,-12(fp)
80210c0c:	008003f4 	movhi	r2,15
80210c10:	10909004 	addi	r2,r2,16960
80210c14:	1887383a 	mul	r3,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
80210c18:	00817db4 	movhi	r2,1526
80210c1c:	10b84004 	addi	r2,r2,-7936
80210c20:	10c7203a 	divu	r3,r2,r3
80210c24:	00a00034 	movhi	r2,32768
80210c28:	10bfffc4 	addi	r2,r2,-1
80210c2c:	10c5203a 	divu	r2,r2,r3
80210c30:	e0ffff17 	ldw	r3,-4(fp)
80210c34:	1885c83a 	sub	r2,r3,r2
80210c38:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
80210c3c:	e0bffc17 	ldw	r2,-16(fp)
80210c40:	10800044 	addi	r2,r2,1
80210c44:	e0bffc15 	stw	r2,-16(fp)
80210c48:	e0fffc17 	ldw	r3,-16(fp)
80210c4c:	e0bffe17 	ldw	r2,-8(fp)
80210c50:	18bfe916 	blt	r3,r2,80210bf8 <__reset+0xfa1f0bf8>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
80210c54:	e0fffd17 	ldw	r3,-12(fp)
80210c58:	008003f4 	movhi	r2,15
80210c5c:	10909004 	addi	r2,r2,16960
80210c60:	1887383a 	mul	r3,r3,r2
80210c64:	00817db4 	movhi	r2,1526
80210c68:	10b84004 	addi	r2,r2,-7936
80210c6c:	10c7203a 	divu	r3,r2,r3
80210c70:	e0bfff17 	ldw	r2,-4(fp)
80210c74:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
80210c78:	10bfffc4 	addi	r2,r2,-1
80210c7c:	103ffe1e 	bne	r2,zero,80210c78 <__reset+0xfa1f0c78>
80210c80:	00000b06 	br	80210cb0 <alt_busy_sleep+0x114>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
80210c84:	e0fffd17 	ldw	r3,-12(fp)
80210c88:	008003f4 	movhi	r2,15
80210c8c:	10909004 	addi	r2,r2,16960
80210c90:	1887383a 	mul	r3,r3,r2
80210c94:	00817db4 	movhi	r2,1526
80210c98:	10b84004 	addi	r2,r2,-7936
80210c9c:	10c7203a 	divu	r3,r2,r3
80210ca0:	e0bfff17 	ldw	r2,-4(fp)
80210ca4:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
80210ca8:	10bfffc4 	addi	r2,r2,-1
80210cac:	00bffe16 	blt	zero,r2,80210ca8 <__reset+0xfa1f0ca8>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
80210cb0:	0005883a 	mov	r2,zero
}
80210cb4:	e037883a 	mov	sp,fp
80210cb8:	df000017 	ldw	fp,0(sp)
80210cbc:	dec00104 	addi	sp,sp,4
80210cc0:	f800283a 	ret

80210cc4 <alt_dcache_flush>:
 *
 * Any dirty lines in the data cache are written back to memory.
 */

void alt_dcache_flush (void* start, alt_u32 len)
{
80210cc4:	defffd04 	addi	sp,sp,-12
80210cc8:	df000215 	stw	fp,8(sp)
80210ccc:	df000204 	addi	fp,sp,8
80210cd0:	e13ffe15 	stw	r4,-8(fp)
80210cd4:	e17fff15 	stw	r5,-4(fp)
  {
    ALT_FLUSH_DATA(i);
  }

#endif /* NIOS2_DCACHE_SIZE > 0 */
}
80210cd8:	0001883a 	nop
80210cdc:	e037883a 	mov	sp,fp
80210ce0:	df000017 	ldw	fp,0(sp)
80210ce4:	dec00104 	addi	sp,sp,4
80210ce8:	f800283a 	ret

80210cec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
80210cec:	defffe04 	addi	sp,sp,-8
80210cf0:	dfc00115 	stw	ra,4(sp)
80210cf4:	df000015 	stw	fp,0(sp)
80210cf8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
80210cfc:	d0a00b17 	ldw	r2,-32724(gp)
80210d00:	10000326 	beq	r2,zero,80210d10 <alt_get_errno+0x24>
80210d04:	d0a00b17 	ldw	r2,-32724(gp)
80210d08:	103ee83a 	callr	r2
80210d0c:	00000106 	br	80210d14 <alt_get_errno+0x28>
80210d10:	d0a01804 	addi	r2,gp,-32672
}
80210d14:	e037883a 	mov	sp,fp
80210d18:	dfc00117 	ldw	ra,4(sp)
80210d1c:	df000017 	ldw	fp,0(sp)
80210d20:	dec00204 	addi	sp,sp,8
80210d24:	f800283a 	ret

80210d28 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
80210d28:	defffa04 	addi	sp,sp,-24
80210d2c:	dfc00515 	stw	ra,20(sp)
80210d30:	df000415 	stw	fp,16(sp)
80210d34:	df000404 	addi	fp,sp,16
80210d38:	e13ffe15 	stw	r4,-8(fp)
80210d3c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
80210d40:	e0bffe17 	ldw	r2,-8(fp)
80210d44:	10000326 	beq	r2,zero,80210d54 <alt_dev_llist_insert+0x2c>
80210d48:	e0bffe17 	ldw	r2,-8(fp)
80210d4c:	10800217 	ldw	r2,8(r2)
80210d50:	1000061e 	bne	r2,zero,80210d6c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
80210d54:	0210cec0 	call	80210cec <alt_get_errno>
80210d58:	1007883a 	mov	r3,r2
80210d5c:	00800584 	movi	r2,22
80210d60:	18800015 	stw	r2,0(r3)
    return -EINVAL;
80210d64:	00bffa84 	movi	r2,-22
80210d68:	00001306 	br	80210db8 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
80210d6c:	e0bffe17 	ldw	r2,-8(fp)
80210d70:	e0ffff17 	ldw	r3,-4(fp)
80210d74:	e0fffc15 	stw	r3,-16(fp)
80210d78:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
80210d7c:	e0bffd17 	ldw	r2,-12(fp)
80210d80:	e0fffc17 	ldw	r3,-16(fp)
80210d84:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
80210d88:	e0bffc17 	ldw	r2,-16(fp)
80210d8c:	10c00017 	ldw	r3,0(r2)
80210d90:	e0bffd17 	ldw	r2,-12(fp)
80210d94:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
80210d98:	e0bffc17 	ldw	r2,-16(fp)
80210d9c:	10800017 	ldw	r2,0(r2)
80210da0:	e0fffd17 	ldw	r3,-12(fp)
80210da4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
80210da8:	e0bffc17 	ldw	r2,-16(fp)
80210dac:	e0fffd17 	ldw	r3,-12(fp)
80210db0:	10c00015 	stw	r3,0(r2)

  return 0;  
80210db4:	0005883a 	mov	r2,zero
}
80210db8:	e037883a 	mov	sp,fp
80210dbc:	dfc00117 	ldw	ra,4(sp)
80210dc0:	df000017 	ldw	fp,0(sp)
80210dc4:	dec00204 	addi	sp,sp,8
80210dc8:	f800283a 	ret

80210dcc <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
80210dcc:	defffd04 	addi	sp,sp,-12
80210dd0:	dfc00215 	stw	ra,8(sp)
80210dd4:	df000115 	stw	fp,4(sp)
80210dd8:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
80210ddc:	00a00874 	movhi	r2,32801
80210de0:	10883004 	addi	r2,r2,8384
80210de4:	e0bfff15 	stw	r2,-4(fp)
80210de8:	00000606 	br	80210e04 <_do_ctors+0x38>
        (*ctor) (); 
80210dec:	e0bfff17 	ldw	r2,-4(fp)
80210df0:	10800017 	ldw	r2,0(r2)
80210df4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
80210df8:	e0bfff17 	ldw	r2,-4(fp)
80210dfc:	10bfff04 	addi	r2,r2,-4
80210e00:	e0bfff15 	stw	r2,-4(fp)
80210e04:	e0ffff17 	ldw	r3,-4(fp)
80210e08:	00a00874 	movhi	r2,32801
80210e0c:	10883104 	addi	r2,r2,8388
80210e10:	18bff62e 	bgeu	r3,r2,80210dec <__reset+0xfa1f0dec>
        (*ctor) (); 
}
80210e14:	0001883a 	nop
80210e18:	e037883a 	mov	sp,fp
80210e1c:	dfc00117 	ldw	ra,4(sp)
80210e20:	df000017 	ldw	fp,0(sp)
80210e24:	dec00204 	addi	sp,sp,8
80210e28:	f800283a 	ret

80210e2c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
80210e2c:	defffd04 	addi	sp,sp,-12
80210e30:	dfc00215 	stw	ra,8(sp)
80210e34:	df000115 	stw	fp,4(sp)
80210e38:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
80210e3c:	00a00874 	movhi	r2,32801
80210e40:	10883004 	addi	r2,r2,8384
80210e44:	e0bfff15 	stw	r2,-4(fp)
80210e48:	00000606 	br	80210e64 <_do_dtors+0x38>
        (*dtor) (); 
80210e4c:	e0bfff17 	ldw	r2,-4(fp)
80210e50:	10800017 	ldw	r2,0(r2)
80210e54:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
80210e58:	e0bfff17 	ldw	r2,-4(fp)
80210e5c:	10bfff04 	addi	r2,r2,-4
80210e60:	e0bfff15 	stw	r2,-4(fp)
80210e64:	e0ffff17 	ldw	r3,-4(fp)
80210e68:	00a00874 	movhi	r2,32801
80210e6c:	10883104 	addi	r2,r2,8388
80210e70:	18bff62e 	bgeu	r3,r2,80210e4c <__reset+0xfa1f0e4c>
        (*dtor) (); 
}
80210e74:	0001883a 	nop
80210e78:	e037883a 	mov	sp,fp
80210e7c:	dfc00117 	ldw	ra,4(sp)
80210e80:	df000017 	ldw	fp,0(sp)
80210e84:	dec00204 	addi	sp,sp,8
80210e88:	f800283a 	ret

80210e8c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
80210e8c:	defffa04 	addi	sp,sp,-24
80210e90:	dfc00515 	stw	ra,20(sp)
80210e94:	df000415 	stw	fp,16(sp)
80210e98:	df000404 	addi	fp,sp,16
80210e9c:	e13ffe15 	stw	r4,-8(fp)
80210ea0:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
80210ea4:	e0bfff17 	ldw	r2,-4(fp)
80210ea8:	10800017 	ldw	r2,0(r2)
80210eac:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
80210eb0:	e13ffe17 	ldw	r4,-8(fp)
80210eb4:	02004e00 	call	802004e0 <strlen>
80210eb8:	10800044 	addi	r2,r2,1
80210ebc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
80210ec0:	00000d06 	br	80210ef8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
80210ec4:	e0bffc17 	ldw	r2,-16(fp)
80210ec8:	10800217 	ldw	r2,8(r2)
80210ecc:	e0fffd17 	ldw	r3,-12(fp)
80210ed0:	180d883a 	mov	r6,r3
80210ed4:	e17ffe17 	ldw	r5,-8(fp)
80210ed8:	1009883a 	mov	r4,r2
80210edc:	0211c140 	call	80211c14 <memcmp>
80210ee0:	1000021e 	bne	r2,zero,80210eec <alt_find_dev+0x60>
    {
      /* match found */

      return next;
80210ee4:	e0bffc17 	ldw	r2,-16(fp)
80210ee8:	00000706 	br	80210f08 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
80210eec:	e0bffc17 	ldw	r2,-16(fp)
80210ef0:	10800017 	ldw	r2,0(r2)
80210ef4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
80210ef8:	e0fffc17 	ldw	r3,-16(fp)
80210efc:	e0bfff17 	ldw	r2,-4(fp)
80210f00:	18bff01e 	bne	r3,r2,80210ec4 <__reset+0xfa1f0ec4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
80210f04:	0005883a 	mov	r2,zero
}
80210f08:	e037883a 	mov	sp,fp
80210f0c:	dfc00117 	ldw	ra,4(sp)
80210f10:	df000017 	ldw	fp,0(sp)
80210f14:	dec00204 	addi	sp,sp,8
80210f18:	f800283a 	ret

80210f1c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
80210f1c:	defff904 	addi	sp,sp,-28
80210f20:	dfc00615 	stw	ra,24(sp)
80210f24:	df000515 	stw	fp,20(sp)
80210f28:	df000504 	addi	fp,sp,20
80210f2c:	e13ffc15 	stw	r4,-16(fp)
80210f30:	e17ffd15 	stw	r5,-12(fp)
80210f34:	e1bffe15 	stw	r6,-8(fp)
80210f38:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
80210f3c:	e0800217 	ldw	r2,8(fp)
80210f40:	d8800015 	stw	r2,0(sp)
80210f44:	e1ffff17 	ldw	r7,-4(fp)
80210f48:	e1bffe17 	ldw	r6,-8(fp)
80210f4c:	e17ffd17 	ldw	r5,-12(fp)
80210f50:	e13ffc17 	ldw	r4,-16(fp)
80210f54:	02110cc0 	call	802110cc <alt_iic_isr_register>
}  
80210f58:	e037883a 	mov	sp,fp
80210f5c:	dfc00117 	ldw	ra,4(sp)
80210f60:	df000017 	ldw	fp,0(sp)
80210f64:	dec00204 	addi	sp,sp,8
80210f68:	f800283a 	ret

80210f6c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
80210f6c:	defff904 	addi	sp,sp,-28
80210f70:	df000615 	stw	fp,24(sp)
80210f74:	df000604 	addi	fp,sp,24
80210f78:	e13ffe15 	stw	r4,-8(fp)
80210f7c:	e17fff15 	stw	r5,-4(fp)
80210f80:	e0bfff17 	ldw	r2,-4(fp)
80210f84:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80210f88:	0005303a 	rdctl	r2,status
80210f8c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80210f90:	e0fffb17 	ldw	r3,-20(fp)
80210f94:	00bfff84 	movi	r2,-2
80210f98:	1884703a 	and	r2,r3,r2
80210f9c:	1001703a 	wrctl	status,r2
  
  return context;
80210fa0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
80210fa4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
80210fa8:	00c00044 	movi	r3,1
80210fac:	e0bffa17 	ldw	r2,-24(fp)
80210fb0:	1884983a 	sll	r2,r3,r2
80210fb4:	1007883a 	mov	r3,r2
80210fb8:	d0a01c17 	ldw	r2,-32656(gp)
80210fbc:	1884b03a 	or	r2,r3,r2
80210fc0:	d0a01c15 	stw	r2,-32656(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
80210fc4:	d0a01c17 	ldw	r2,-32656(gp)
80210fc8:	100170fa 	wrctl	ienable,r2
80210fcc:	e0bffc17 	ldw	r2,-16(fp)
80210fd0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80210fd4:	e0bffd17 	ldw	r2,-12(fp)
80210fd8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
80210fdc:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
80210fe0:	0001883a 	nop
}
80210fe4:	e037883a 	mov	sp,fp
80210fe8:	df000017 	ldw	fp,0(sp)
80210fec:	dec00104 	addi	sp,sp,4
80210ff0:	f800283a 	ret

80210ff4 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
80210ff4:	defff904 	addi	sp,sp,-28
80210ff8:	df000615 	stw	fp,24(sp)
80210ffc:	df000604 	addi	fp,sp,24
80211000:	e13ffe15 	stw	r4,-8(fp)
80211004:	e17fff15 	stw	r5,-4(fp)
80211008:	e0bfff17 	ldw	r2,-4(fp)
8021100c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80211010:	0005303a 	rdctl	r2,status
80211014:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80211018:	e0fffb17 	ldw	r3,-20(fp)
8021101c:	00bfff84 	movi	r2,-2
80211020:	1884703a 	and	r2,r3,r2
80211024:	1001703a 	wrctl	status,r2
  
  return context;
80211028:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
8021102c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
80211030:	00c00044 	movi	r3,1
80211034:	e0bffa17 	ldw	r2,-24(fp)
80211038:	1884983a 	sll	r2,r3,r2
8021103c:	0084303a 	nor	r2,zero,r2
80211040:	1007883a 	mov	r3,r2
80211044:	d0a01c17 	ldw	r2,-32656(gp)
80211048:	1884703a 	and	r2,r3,r2
8021104c:	d0a01c15 	stw	r2,-32656(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
80211050:	d0a01c17 	ldw	r2,-32656(gp)
80211054:	100170fa 	wrctl	ienable,r2
80211058:	e0bffc17 	ldw	r2,-16(fp)
8021105c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80211060:	e0bffd17 	ldw	r2,-12(fp)
80211064:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
80211068:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
8021106c:	0001883a 	nop
}
80211070:	e037883a 	mov	sp,fp
80211074:	df000017 	ldw	fp,0(sp)
80211078:	dec00104 	addi	sp,sp,4
8021107c:	f800283a 	ret

80211080 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
80211080:	defffc04 	addi	sp,sp,-16
80211084:	df000315 	stw	fp,12(sp)
80211088:	df000304 	addi	fp,sp,12
8021108c:	e13ffe15 	stw	r4,-8(fp)
80211090:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
80211094:	000530fa 	rdctl	r2,ienable
80211098:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
8021109c:	00c00044 	movi	r3,1
802110a0:	e0bfff17 	ldw	r2,-4(fp)
802110a4:	1884983a 	sll	r2,r3,r2
802110a8:	1007883a 	mov	r3,r2
802110ac:	e0bffd17 	ldw	r2,-12(fp)
802110b0:	1884703a 	and	r2,r3,r2
802110b4:	1004c03a 	cmpne	r2,r2,zero
802110b8:	10803fcc 	andi	r2,r2,255
}
802110bc:	e037883a 	mov	sp,fp
802110c0:	df000017 	ldw	fp,0(sp)
802110c4:	dec00104 	addi	sp,sp,4
802110c8:	f800283a 	ret

802110cc <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
802110cc:	defff504 	addi	sp,sp,-44
802110d0:	dfc00a15 	stw	ra,40(sp)
802110d4:	df000915 	stw	fp,36(sp)
802110d8:	df000904 	addi	fp,sp,36
802110dc:	e13ffc15 	stw	r4,-16(fp)
802110e0:	e17ffd15 	stw	r5,-12(fp)
802110e4:	e1bffe15 	stw	r6,-8(fp)
802110e8:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
802110ec:	00bffa84 	movi	r2,-22
802110f0:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
802110f4:	e0bffd17 	ldw	r2,-12(fp)
802110f8:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
802110fc:	e0bff817 	ldw	r2,-32(fp)
80211100:	10800808 	cmpgei	r2,r2,32
80211104:	1000271e 	bne	r2,zero,802111a4 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80211108:	0005303a 	rdctl	r2,status
8021110c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80211110:	e0fffb17 	ldw	r3,-20(fp)
80211114:	00bfff84 	movi	r2,-2
80211118:	1884703a 	and	r2,r3,r2
8021111c:	1001703a 	wrctl	status,r2
  
  return context;
80211120:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
80211124:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
80211128:	00a00874 	movhi	r2,32801
8021112c:	1090dd04 	addi	r2,r2,17268
80211130:	e0fff817 	ldw	r3,-32(fp)
80211134:	180690fa 	slli	r3,r3,3
80211138:	10c5883a 	add	r2,r2,r3
8021113c:	e0fffe17 	ldw	r3,-8(fp)
80211140:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
80211144:	00a00874 	movhi	r2,32801
80211148:	1090dd04 	addi	r2,r2,17268
8021114c:	e0fff817 	ldw	r3,-32(fp)
80211150:	180690fa 	slli	r3,r3,3
80211154:	10c5883a 	add	r2,r2,r3
80211158:	10800104 	addi	r2,r2,4
8021115c:	e0ffff17 	ldw	r3,-4(fp)
80211160:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
80211164:	e0bffe17 	ldw	r2,-8(fp)
80211168:	10000526 	beq	r2,zero,80211180 <alt_iic_isr_register+0xb4>
8021116c:	e0bff817 	ldw	r2,-32(fp)
80211170:	100b883a 	mov	r5,r2
80211174:	e13ffc17 	ldw	r4,-16(fp)
80211178:	0210f6c0 	call	80210f6c <alt_ic_irq_enable>
8021117c:	00000406 	br	80211190 <alt_iic_isr_register+0xc4>
80211180:	e0bff817 	ldw	r2,-32(fp)
80211184:	100b883a 	mov	r5,r2
80211188:	e13ffc17 	ldw	r4,-16(fp)
8021118c:	0210ff40 	call	80210ff4 <alt_ic_irq_disable>
80211190:	e0bff715 	stw	r2,-36(fp)
80211194:	e0bffa17 	ldw	r2,-24(fp)
80211198:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8021119c:	e0bff917 	ldw	r2,-28(fp)
802111a0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
802111a4:	e0bff717 	ldw	r2,-36(fp)
}
802111a8:	e037883a 	mov	sp,fp
802111ac:	dfc00117 	ldw	ra,4(sp)
802111b0:	df000017 	ldw	fp,0(sp)
802111b4:	dec00204 	addi	sp,sp,8
802111b8:	f800283a 	ret

802111bc <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
802111bc:	defff904 	addi	sp,sp,-28
802111c0:	dfc00615 	stw	ra,24(sp)
802111c4:	df000515 	stw	fp,20(sp)
802111c8:	df000504 	addi	fp,sp,20
802111cc:	e13ffc15 	stw	r4,-16(fp)
802111d0:	e17ffd15 	stw	r5,-12(fp)
802111d4:	e1bffe15 	stw	r6,-8(fp)
802111d8:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
802111dc:	e1bfff17 	ldw	r6,-4(fp)
802111e0:	e17ffe17 	ldw	r5,-8(fp)
802111e4:	e13ffd17 	ldw	r4,-12(fp)
802111e8:	02113fc0 	call	802113fc <open>
802111ec:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
802111f0:	e0bffb17 	ldw	r2,-20(fp)
802111f4:	10001c16 	blt	r2,zero,80211268 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
802111f8:	00a00874 	movhi	r2,32801
802111fc:	108bcb04 	addi	r2,r2,12076
80211200:	e0fffb17 	ldw	r3,-20(fp)
80211204:	18c00324 	muli	r3,r3,12
80211208:	10c5883a 	add	r2,r2,r3
8021120c:	10c00017 	ldw	r3,0(r2)
80211210:	e0bffc17 	ldw	r2,-16(fp)
80211214:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
80211218:	00a00874 	movhi	r2,32801
8021121c:	108bcb04 	addi	r2,r2,12076
80211220:	e0fffb17 	ldw	r3,-20(fp)
80211224:	18c00324 	muli	r3,r3,12
80211228:	10c5883a 	add	r2,r2,r3
8021122c:	10800104 	addi	r2,r2,4
80211230:	10c00017 	ldw	r3,0(r2)
80211234:	e0bffc17 	ldw	r2,-16(fp)
80211238:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
8021123c:	00a00874 	movhi	r2,32801
80211240:	108bcb04 	addi	r2,r2,12076
80211244:	e0fffb17 	ldw	r3,-20(fp)
80211248:	18c00324 	muli	r3,r3,12
8021124c:	10c5883a 	add	r2,r2,r3
80211250:	10800204 	addi	r2,r2,8
80211254:	10c00017 	ldw	r3,0(r2)
80211258:	e0bffc17 	ldw	r2,-16(fp)
8021125c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
80211260:	e13ffb17 	ldw	r4,-20(fp)
80211264:	020d2d00 	call	8020d2d0 <alt_release_fd>
  }
} 
80211268:	0001883a 	nop
8021126c:	e037883a 	mov	sp,fp
80211270:	dfc00117 	ldw	ra,4(sp)
80211274:	df000017 	ldw	fp,0(sp)
80211278:	dec00204 	addi	sp,sp,8
8021127c:	f800283a 	ret

80211280 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
80211280:	defffb04 	addi	sp,sp,-20
80211284:	dfc00415 	stw	ra,16(sp)
80211288:	df000315 	stw	fp,12(sp)
8021128c:	df000304 	addi	fp,sp,12
80211290:	e13ffd15 	stw	r4,-12(fp)
80211294:	e17ffe15 	stw	r5,-8(fp)
80211298:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
8021129c:	01c07fc4 	movi	r7,511
802112a0:	01800044 	movi	r6,1
802112a4:	e17ffd17 	ldw	r5,-12(fp)
802112a8:	01200874 	movhi	r4,32801
802112ac:	210bce04 	addi	r4,r4,12088
802112b0:	02111bc0 	call	802111bc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
802112b4:	01c07fc4 	movi	r7,511
802112b8:	000d883a 	mov	r6,zero
802112bc:	e17ffe17 	ldw	r5,-8(fp)
802112c0:	01200874 	movhi	r4,32801
802112c4:	210bcb04 	addi	r4,r4,12076
802112c8:	02111bc0 	call	802111bc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
802112cc:	01c07fc4 	movi	r7,511
802112d0:	01800044 	movi	r6,1
802112d4:	e17fff17 	ldw	r5,-4(fp)
802112d8:	01200874 	movhi	r4,32801
802112dc:	210bd104 	addi	r4,r4,12100
802112e0:	02111bc0 	call	802111bc <alt_open_fd>
}  
802112e4:	0001883a 	nop
802112e8:	e037883a 	mov	sp,fp
802112ec:	dfc00117 	ldw	ra,4(sp)
802112f0:	df000017 	ldw	fp,0(sp)
802112f4:	dec00204 	addi	sp,sp,8
802112f8:	f800283a 	ret

802112fc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
802112fc:	defffe04 	addi	sp,sp,-8
80211300:	dfc00115 	stw	ra,4(sp)
80211304:	df000015 	stw	fp,0(sp)
80211308:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
8021130c:	d0a00b17 	ldw	r2,-32724(gp)
80211310:	10000326 	beq	r2,zero,80211320 <alt_get_errno+0x24>
80211314:	d0a00b17 	ldw	r2,-32724(gp)
80211318:	103ee83a 	callr	r2
8021131c:	00000106 	br	80211324 <alt_get_errno+0x28>
80211320:	d0a01804 	addi	r2,gp,-32672
}
80211324:	e037883a 	mov	sp,fp
80211328:	dfc00117 	ldw	ra,4(sp)
8021132c:	df000017 	ldw	fp,0(sp)
80211330:	dec00204 	addi	sp,sp,8
80211334:	f800283a 	ret

80211338 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
80211338:	defffd04 	addi	sp,sp,-12
8021133c:	df000215 	stw	fp,8(sp)
80211340:	df000204 	addi	fp,sp,8
80211344:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
80211348:	e0bfff17 	ldw	r2,-4(fp)
8021134c:	10800217 	ldw	r2,8(r2)
80211350:	10d00034 	orhi	r3,r2,16384
80211354:	e0bfff17 	ldw	r2,-4(fp)
80211358:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
8021135c:	e03ffe15 	stw	zero,-8(fp)
80211360:	00001d06 	br	802113d8 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
80211364:	00a00874 	movhi	r2,32801
80211368:	108bcb04 	addi	r2,r2,12076
8021136c:	e0fffe17 	ldw	r3,-8(fp)
80211370:	18c00324 	muli	r3,r3,12
80211374:	10c5883a 	add	r2,r2,r3
80211378:	10c00017 	ldw	r3,0(r2)
8021137c:	e0bfff17 	ldw	r2,-4(fp)
80211380:	10800017 	ldw	r2,0(r2)
80211384:	1880111e 	bne	r3,r2,802113cc <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
80211388:	00a00874 	movhi	r2,32801
8021138c:	108bcb04 	addi	r2,r2,12076
80211390:	e0fffe17 	ldw	r3,-8(fp)
80211394:	18c00324 	muli	r3,r3,12
80211398:	10c5883a 	add	r2,r2,r3
8021139c:	10800204 	addi	r2,r2,8
802113a0:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
802113a4:	1000090e 	bge	r2,zero,802113cc <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
802113a8:	e0bffe17 	ldw	r2,-8(fp)
802113ac:	10c00324 	muli	r3,r2,12
802113b0:	00a00874 	movhi	r2,32801
802113b4:	108bcb04 	addi	r2,r2,12076
802113b8:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
802113bc:	e0bfff17 	ldw	r2,-4(fp)
802113c0:	18800226 	beq	r3,r2,802113cc <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
802113c4:	00bffcc4 	movi	r2,-13
802113c8:	00000806 	br	802113ec <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
802113cc:	e0bffe17 	ldw	r2,-8(fp)
802113d0:	10800044 	addi	r2,r2,1
802113d4:	e0bffe15 	stw	r2,-8(fp)
802113d8:	d0a00a17 	ldw	r2,-32728(gp)
802113dc:	1007883a 	mov	r3,r2
802113e0:	e0bffe17 	ldw	r2,-8(fp)
802113e4:	18bfdf2e 	bgeu	r3,r2,80211364 <__reset+0xfa1f1364>
    }
  }
  
  /* The device is not locked */
 
  return 0;
802113e8:	0005883a 	mov	r2,zero
}
802113ec:	e037883a 	mov	sp,fp
802113f0:	df000017 	ldw	fp,0(sp)
802113f4:	dec00104 	addi	sp,sp,4
802113f8:	f800283a 	ret

802113fc <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
802113fc:	defff604 	addi	sp,sp,-40
80211400:	dfc00915 	stw	ra,36(sp)
80211404:	df000815 	stw	fp,32(sp)
80211408:	df000804 	addi	fp,sp,32
8021140c:	e13ffd15 	stw	r4,-12(fp)
80211410:	e17ffe15 	stw	r5,-8(fp)
80211414:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
80211418:	00bfffc4 	movi	r2,-1
8021141c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
80211420:	00bffb44 	movi	r2,-19
80211424:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
80211428:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
8021142c:	d1600804 	addi	r5,gp,-32736
80211430:	e13ffd17 	ldw	r4,-12(fp)
80211434:	0210e8c0 	call	80210e8c <alt_find_dev>
80211438:	e0bff815 	stw	r2,-32(fp)
8021143c:	e0bff817 	ldw	r2,-32(fp)
80211440:	1000051e 	bne	r2,zero,80211458 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
80211444:	e13ffd17 	ldw	r4,-12(fp)
80211448:	02119800 	call	80211980 <alt_find_file>
8021144c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
80211450:	00800044 	movi	r2,1
80211454:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
80211458:	e0bff817 	ldw	r2,-32(fp)
8021145c:	10002926 	beq	r2,zero,80211504 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
80211460:	e13ff817 	ldw	r4,-32(fp)
80211464:	0211a880 	call	80211a88 <alt_get_fd>
80211468:	e0bff915 	stw	r2,-28(fp)
8021146c:	e0bff917 	ldw	r2,-28(fp)
80211470:	1000030e 	bge	r2,zero,80211480 <open+0x84>
    {
      status = index;
80211474:	e0bff917 	ldw	r2,-28(fp)
80211478:	e0bffa15 	stw	r2,-24(fp)
8021147c:	00002306 	br	8021150c <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
80211480:	e0bff917 	ldw	r2,-28(fp)
80211484:	10c00324 	muli	r3,r2,12
80211488:	00a00874 	movhi	r2,32801
8021148c:	108bcb04 	addi	r2,r2,12076
80211490:	1885883a 	add	r2,r3,r2
80211494:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
80211498:	e0fffe17 	ldw	r3,-8(fp)
8021149c:	00900034 	movhi	r2,16384
802114a0:	10bfffc4 	addi	r2,r2,-1
802114a4:	1886703a 	and	r3,r3,r2
802114a8:	e0bffc17 	ldw	r2,-16(fp)
802114ac:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
802114b0:	e0bffb17 	ldw	r2,-20(fp)
802114b4:	1000051e 	bne	r2,zero,802114cc <open+0xd0>
802114b8:	e13ffc17 	ldw	r4,-16(fp)
802114bc:	02113380 	call	80211338 <alt_file_locked>
802114c0:	e0bffa15 	stw	r2,-24(fp)
802114c4:	e0bffa17 	ldw	r2,-24(fp)
802114c8:	10001016 	blt	r2,zero,8021150c <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
802114cc:	e0bff817 	ldw	r2,-32(fp)
802114d0:	10800317 	ldw	r2,12(r2)
802114d4:	10000826 	beq	r2,zero,802114f8 <open+0xfc>
802114d8:	e0bff817 	ldw	r2,-32(fp)
802114dc:	10800317 	ldw	r2,12(r2)
802114e0:	e1ffff17 	ldw	r7,-4(fp)
802114e4:	e1bffe17 	ldw	r6,-8(fp)
802114e8:	e17ffd17 	ldw	r5,-12(fp)
802114ec:	e13ffc17 	ldw	r4,-16(fp)
802114f0:	103ee83a 	callr	r2
802114f4:	00000106 	br	802114fc <open+0x100>
802114f8:	0005883a 	mov	r2,zero
802114fc:	e0bffa15 	stw	r2,-24(fp)
80211500:	00000206 	br	8021150c <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
80211504:	00bffb44 	movi	r2,-19
80211508:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
8021150c:	e0bffa17 	ldw	r2,-24(fp)
80211510:	1000090e 	bge	r2,zero,80211538 <open+0x13c>
  {
    alt_release_fd (index);  
80211514:	e13ff917 	ldw	r4,-28(fp)
80211518:	020d2d00 	call	8020d2d0 <alt_release_fd>
    ALT_ERRNO = -status;
8021151c:	02112fc0 	call	802112fc <alt_get_errno>
80211520:	1007883a 	mov	r3,r2
80211524:	e0bffa17 	ldw	r2,-24(fp)
80211528:	0085c83a 	sub	r2,zero,r2
8021152c:	18800015 	stw	r2,0(r3)
    return -1;
80211530:	00bfffc4 	movi	r2,-1
80211534:	00000106 	br	8021153c <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
80211538:	e0bff917 	ldw	r2,-28(fp)
}
8021153c:	e037883a 	mov	sp,fp
80211540:	dfc00117 	ldw	ra,4(sp)
80211544:	df000017 	ldw	fp,0(sp)
80211548:	dec00204 	addi	sp,sp,8
8021154c:	f800283a 	ret

80211550 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
80211550:	defff204 	addi	sp,sp,-56
80211554:	dfc00a15 	stw	ra,40(sp)
80211558:	df000915 	stw	fp,36(sp)
8021155c:	df000904 	addi	fp,sp,36
80211560:	e13fff15 	stw	r4,-4(fp)
80211564:	e1400215 	stw	r5,8(fp)
80211568:	e1800315 	stw	r6,12(fp)
8021156c:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
80211570:	e0800204 	addi	r2,fp,8
80211574:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
80211578:	e0bfff17 	ldw	r2,-4(fp)
8021157c:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
80211580:	00006f06 	br	80211740 <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
80211584:	e0bff807 	ldb	r2,-32(fp)
80211588:	10800960 	cmpeqi	r2,r2,37
8021158c:	1000041e 	bne	r2,zero,802115a0 <alt_printf+0x50>
        {
            alt_putchar(c);
80211590:	e0bff807 	ldb	r2,-32(fp)
80211594:	1009883a 	mov	r4,r2
80211598:	021177c0 	call	8021177c <alt_putchar>
8021159c:	00006806 	br	80211740 <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
802115a0:	e0bff717 	ldw	r2,-36(fp)
802115a4:	10c00044 	addi	r3,r2,1
802115a8:	e0fff715 	stw	r3,-36(fp)
802115ac:	10800003 	ldbu	r2,0(r2)
802115b0:	e0bff805 	stb	r2,-32(fp)
802115b4:	e0bff807 	ldb	r2,-32(fp)
802115b8:	10006926 	beq	r2,zero,80211760 <alt_printf+0x210>
            {
                if (c == '%')
802115bc:	e0bff807 	ldb	r2,-32(fp)
802115c0:	10800958 	cmpnei	r2,r2,37
802115c4:	1000041e 	bne	r2,zero,802115d8 <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
802115c8:	e0bff807 	ldb	r2,-32(fp)
802115cc:	1009883a 	mov	r4,r2
802115d0:	021177c0 	call	8021177c <alt_putchar>
802115d4:	00005a06 	br	80211740 <alt_printf+0x1f0>
                } 
                else if (c == 'c')
802115d8:	e0bff807 	ldb	r2,-32(fp)
802115dc:	108018d8 	cmpnei	r2,r2,99
802115e0:	1000081e 	bne	r2,zero,80211604 <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
802115e4:	e0bffe17 	ldw	r2,-8(fp)
802115e8:	10c00104 	addi	r3,r2,4
802115ec:	e0fffe15 	stw	r3,-8(fp)
802115f0:	10800017 	ldw	r2,0(r2)
802115f4:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
802115f8:	e13ffd17 	ldw	r4,-12(fp)
802115fc:	021177c0 	call	8021177c <alt_putchar>
80211600:	00004f06 	br	80211740 <alt_printf+0x1f0>
                }
                else if (c == 'x')
80211604:	e0bff807 	ldb	r2,-32(fp)
80211608:	10801e18 	cmpnei	r2,r2,120
8021160c:	1000341e 	bne	r2,zero,802116e0 <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
80211610:	e0bffe17 	ldw	r2,-8(fp)
80211614:	10c00104 	addi	r3,r2,4
80211618:	e0fffe15 	stw	r3,-8(fp)
8021161c:	10800017 	ldw	r2,0(r2)
80211620:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
80211624:	e0bffb17 	ldw	r2,-20(fp)
80211628:	1000031e 	bne	r2,zero,80211638 <alt_printf+0xe8>
                    {
                        alt_putchar('0');
8021162c:	01000c04 	movi	r4,48
80211630:	021177c0 	call	8021177c <alt_putchar>
                        continue;
80211634:	00004206 	br	80211740 <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
80211638:	00800704 	movi	r2,28
8021163c:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
80211640:	00000306 	br	80211650 <alt_printf+0x100>
                        digit_shift -= 4;
80211644:	e0bff917 	ldw	r2,-28(fp)
80211648:	10bfff04 	addi	r2,r2,-4
8021164c:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
80211650:	00c003c4 	movi	r3,15
80211654:	e0bff917 	ldw	r2,-28(fp)
80211658:	1884983a 	sll	r2,r3,r2
8021165c:	1007883a 	mov	r3,r2
80211660:	e0bffb17 	ldw	r2,-20(fp)
80211664:	1884703a 	and	r2,r3,r2
80211668:	103ff626 	beq	r2,zero,80211644 <__reset+0xfa1f1644>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
8021166c:	00001906 	br	802116d4 <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
80211670:	00c003c4 	movi	r3,15
80211674:	e0bff917 	ldw	r2,-28(fp)
80211678:	1884983a 	sll	r2,r3,r2
8021167c:	1007883a 	mov	r3,r2
80211680:	e0bffb17 	ldw	r2,-20(fp)
80211684:	1886703a 	and	r3,r3,r2
80211688:	e0bff917 	ldw	r2,-28(fp)
8021168c:	1884d83a 	srl	r2,r3,r2
80211690:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
80211694:	e0bffc17 	ldw	r2,-16(fp)
80211698:	108002a8 	cmpgeui	r2,r2,10
8021169c:	1000041e 	bne	r2,zero,802116b0 <alt_printf+0x160>
                            c = '0' + digit;
802116a0:	e0bffc17 	ldw	r2,-16(fp)
802116a4:	10800c04 	addi	r2,r2,48
802116a8:	e0bff805 	stb	r2,-32(fp)
802116ac:	00000306 	br	802116bc <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
802116b0:	e0bffc17 	ldw	r2,-16(fp)
802116b4:	108015c4 	addi	r2,r2,87
802116b8:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
802116bc:	e0bff807 	ldb	r2,-32(fp)
802116c0:	1009883a 	mov	r4,r2
802116c4:	021177c0 	call	8021177c <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
802116c8:	e0bff917 	ldw	r2,-28(fp)
802116cc:	10bfff04 	addi	r2,r2,-4
802116d0:	e0bff915 	stw	r2,-28(fp)
802116d4:	e0bff917 	ldw	r2,-28(fp)
802116d8:	103fe50e 	bge	r2,zero,80211670 <__reset+0xfa1f1670>
802116dc:	00001806 	br	80211740 <alt_printf+0x1f0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
802116e0:	e0bff807 	ldb	r2,-32(fp)
802116e4:	10801cd8 	cmpnei	r2,r2,115
802116e8:	1000151e 	bne	r2,zero,80211740 <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
802116ec:	e0bffe17 	ldw	r2,-8(fp)
802116f0:	10c00104 	addi	r3,r2,4
802116f4:	e0fffe15 	stw	r3,-8(fp)
802116f8:	10800017 	ldw	r2,0(r2)
802116fc:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
80211700:	00000906 	br	80211728 <alt_printf+0x1d8>
                      alt_putchar(*s++);
80211704:	e0bffa17 	ldw	r2,-24(fp)
80211708:	10c00044 	addi	r3,r2,1
8021170c:	e0fffa15 	stw	r3,-24(fp)
80211710:	10800003 	ldbu	r2,0(r2)
80211714:	10803fcc 	andi	r2,r2,255
80211718:	1080201c 	xori	r2,r2,128
8021171c:	10bfe004 	addi	r2,r2,-128
80211720:	1009883a 	mov	r4,r2
80211724:	021177c0 	call	8021177c <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
80211728:	e0bffa17 	ldw	r2,-24(fp)
8021172c:	10800003 	ldbu	r2,0(r2)
80211730:	10803fcc 	andi	r2,r2,255
80211734:	1080201c 	xori	r2,r2,128
80211738:	10bfe004 	addi	r2,r2,-128
8021173c:	103ff11e 	bne	r2,zero,80211704 <__reset+0xfa1f1704>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
80211740:	e0bff717 	ldw	r2,-36(fp)
80211744:	10c00044 	addi	r3,r2,1
80211748:	e0fff715 	stw	r3,-36(fp)
8021174c:	10800003 	ldbu	r2,0(r2)
80211750:	e0bff805 	stb	r2,-32(fp)
80211754:	e0bff807 	ldb	r2,-32(fp)
80211758:	103f8a1e 	bne	r2,zero,80211584 <__reset+0xfa1f1584>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
8021175c:	00000106 	br	80211764 <alt_printf+0x214>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
80211760:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
80211764:	0001883a 	nop
80211768:	e037883a 	mov	sp,fp
8021176c:	dfc00117 	ldw	ra,4(sp)
80211770:	df000017 	ldw	fp,0(sp)
80211774:	dec00504 	addi	sp,sp,20
80211778:	f800283a 	ret

8021177c <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
8021177c:	defffd04 	addi	sp,sp,-12
80211780:	dfc00215 	stw	ra,8(sp)
80211784:	df000115 	stw	fp,4(sp)
80211788:	df000104 	addi	fp,sp,4
8021178c:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
80211790:	d0a00117 	ldw	r2,-32764(gp)
80211794:	10800217 	ldw	r2,8(r2)
80211798:	100b883a 	mov	r5,r2
8021179c:	e13fff17 	ldw	r4,-4(fp)
802117a0:	0211d300 	call	80211d30 <putc>
#endif
#endif
}
802117a4:	e037883a 	mov	sp,fp
802117a8:	dfc00117 	ldw	ra,4(sp)
802117ac:	df000017 	ldw	fp,0(sp)
802117b0:	dec00204 	addi	sp,sp,8
802117b4:	f800283a 	ret

802117b8 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
802117b8:	defffa04 	addi	sp,sp,-24
802117bc:	df000515 	stw	fp,20(sp)
802117c0:	df000504 	addi	fp,sp,20
802117c4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
802117c8:	0005303a 	rdctl	r2,status
802117cc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
802117d0:	e0fffc17 	ldw	r3,-16(fp)
802117d4:	00bfff84 	movi	r2,-2
802117d8:	1884703a 	and	r2,r3,r2
802117dc:	1001703a 	wrctl	status,r2
  
  return context;
802117e0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
802117e4:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
802117e8:	e0bfff17 	ldw	r2,-4(fp)
802117ec:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
802117f0:	e0bffd17 	ldw	r2,-12(fp)
802117f4:	10800017 	ldw	r2,0(r2)
802117f8:	e0fffd17 	ldw	r3,-12(fp)
802117fc:	18c00117 	ldw	r3,4(r3)
80211800:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
80211804:	e0bffd17 	ldw	r2,-12(fp)
80211808:	10800117 	ldw	r2,4(r2)
8021180c:	e0fffd17 	ldw	r3,-12(fp)
80211810:	18c00017 	ldw	r3,0(r3)
80211814:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
80211818:	e0bffd17 	ldw	r2,-12(fp)
8021181c:	e0fffd17 	ldw	r3,-12(fp)
80211820:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
80211824:	e0bffd17 	ldw	r2,-12(fp)
80211828:	e0fffd17 	ldw	r3,-12(fp)
8021182c:	10c00015 	stw	r3,0(r2)
80211830:	e0bffb17 	ldw	r2,-20(fp)
80211834:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80211838:	e0bffe17 	ldw	r2,-8(fp)
8021183c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
80211840:	0001883a 	nop
80211844:	e037883a 	mov	sp,fp
80211848:	df000017 	ldw	fp,0(sp)
8021184c:	dec00104 	addi	sp,sp,4
80211850:	f800283a 	ret

80211854 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
80211854:	defffb04 	addi	sp,sp,-20
80211858:	dfc00415 	stw	ra,16(sp)
8021185c:	df000315 	stw	fp,12(sp)
80211860:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
80211864:	d0a01017 	ldw	r2,-32704(gp)
80211868:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
8021186c:	d0a01e17 	ldw	r2,-32648(gp)
80211870:	10800044 	addi	r2,r2,1
80211874:	d0a01e15 	stw	r2,-32648(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
80211878:	00002e06 	br	80211934 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
8021187c:	e0bffd17 	ldw	r2,-12(fp)
80211880:	10800017 	ldw	r2,0(r2)
80211884:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
80211888:	e0bffd17 	ldw	r2,-12(fp)
8021188c:	10800403 	ldbu	r2,16(r2)
80211890:	10803fcc 	andi	r2,r2,255
80211894:	10000426 	beq	r2,zero,802118a8 <alt_tick+0x54>
80211898:	d0a01e17 	ldw	r2,-32648(gp)
8021189c:	1000021e 	bne	r2,zero,802118a8 <alt_tick+0x54>
    {
      alarm->rollover = 0;
802118a0:	e0bffd17 	ldw	r2,-12(fp)
802118a4:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
802118a8:	e0bffd17 	ldw	r2,-12(fp)
802118ac:	10800217 	ldw	r2,8(r2)
802118b0:	d0e01e17 	ldw	r3,-32648(gp)
802118b4:	18801d36 	bltu	r3,r2,8021192c <alt_tick+0xd8>
802118b8:	e0bffd17 	ldw	r2,-12(fp)
802118bc:	10800403 	ldbu	r2,16(r2)
802118c0:	10803fcc 	andi	r2,r2,255
802118c4:	1000191e 	bne	r2,zero,8021192c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
802118c8:	e0bffd17 	ldw	r2,-12(fp)
802118cc:	10800317 	ldw	r2,12(r2)
802118d0:	e0fffd17 	ldw	r3,-12(fp)
802118d4:	18c00517 	ldw	r3,20(r3)
802118d8:	1809883a 	mov	r4,r3
802118dc:	103ee83a 	callr	r2
802118e0:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
802118e4:	e0bfff17 	ldw	r2,-4(fp)
802118e8:	1000031e 	bne	r2,zero,802118f8 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
802118ec:	e13ffd17 	ldw	r4,-12(fp)
802118f0:	02117b80 	call	802117b8 <alt_alarm_stop>
802118f4:	00000d06 	br	8021192c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
802118f8:	e0bffd17 	ldw	r2,-12(fp)
802118fc:	10c00217 	ldw	r3,8(r2)
80211900:	e0bfff17 	ldw	r2,-4(fp)
80211904:	1887883a 	add	r3,r3,r2
80211908:	e0bffd17 	ldw	r2,-12(fp)
8021190c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
80211910:	e0bffd17 	ldw	r2,-12(fp)
80211914:	10c00217 	ldw	r3,8(r2)
80211918:	d0a01e17 	ldw	r2,-32648(gp)
8021191c:	1880032e 	bgeu	r3,r2,8021192c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
80211920:	e0bffd17 	ldw	r2,-12(fp)
80211924:	00c00044 	movi	r3,1
80211928:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
8021192c:	e0bffe17 	ldw	r2,-8(fp)
80211930:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
80211934:	e0fffd17 	ldw	r3,-12(fp)
80211938:	d0a01004 	addi	r2,gp,-32704
8021193c:	18bfcf1e 	bne	r3,r2,8021187c <__reset+0xfa1f187c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
80211940:	0001883a 	nop
}
80211944:	0001883a 	nop
80211948:	e037883a 	mov	sp,fp
8021194c:	dfc00117 	ldw	ra,4(sp)
80211950:	df000017 	ldw	fp,0(sp)
80211954:	dec00204 	addi	sp,sp,8
80211958:	f800283a 	ret

8021195c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
8021195c:	deffff04 	addi	sp,sp,-4
80211960:	df000015 	stw	fp,0(sp)
80211964:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
80211968:	000170fa 	wrctl	ienable,zero
}
8021196c:	0001883a 	nop
80211970:	e037883a 	mov	sp,fp
80211974:	df000017 	ldw	fp,0(sp)
80211978:	dec00104 	addi	sp,sp,4
8021197c:	f800283a 	ret

80211980 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
80211980:	defffb04 	addi	sp,sp,-20
80211984:	dfc00415 	stw	ra,16(sp)
80211988:	df000315 	stw	fp,12(sp)
8021198c:	df000304 	addi	fp,sp,12
80211990:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
80211994:	d0a00617 	ldw	r2,-32744(gp)
80211998:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
8021199c:	00003106 	br	80211a64 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
802119a0:	e0bffd17 	ldw	r2,-12(fp)
802119a4:	10800217 	ldw	r2,8(r2)
802119a8:	1009883a 	mov	r4,r2
802119ac:	02004e00 	call	802004e0 <strlen>
802119b0:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
802119b4:	e0bffd17 	ldw	r2,-12(fp)
802119b8:	10c00217 	ldw	r3,8(r2)
802119bc:	e0bffe17 	ldw	r2,-8(fp)
802119c0:	10bfffc4 	addi	r2,r2,-1
802119c4:	1885883a 	add	r2,r3,r2
802119c8:	10800003 	ldbu	r2,0(r2)
802119cc:	10803fcc 	andi	r2,r2,255
802119d0:	1080201c 	xori	r2,r2,128
802119d4:	10bfe004 	addi	r2,r2,-128
802119d8:	10800bd8 	cmpnei	r2,r2,47
802119dc:	1000031e 	bne	r2,zero,802119ec <alt_find_file+0x6c>
    {
      len -= 1;
802119e0:	e0bffe17 	ldw	r2,-8(fp)
802119e4:	10bfffc4 	addi	r2,r2,-1
802119e8:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
802119ec:	e0bffe17 	ldw	r2,-8(fp)
802119f0:	e0ffff17 	ldw	r3,-4(fp)
802119f4:	1885883a 	add	r2,r3,r2
802119f8:	10800003 	ldbu	r2,0(r2)
802119fc:	10803fcc 	andi	r2,r2,255
80211a00:	1080201c 	xori	r2,r2,128
80211a04:	10bfe004 	addi	r2,r2,-128
80211a08:	10800be0 	cmpeqi	r2,r2,47
80211a0c:	1000081e 	bne	r2,zero,80211a30 <alt_find_file+0xb0>
80211a10:	e0bffe17 	ldw	r2,-8(fp)
80211a14:	e0ffff17 	ldw	r3,-4(fp)
80211a18:	1885883a 	add	r2,r3,r2
80211a1c:	10800003 	ldbu	r2,0(r2)
80211a20:	10803fcc 	andi	r2,r2,255
80211a24:	1080201c 	xori	r2,r2,128
80211a28:	10bfe004 	addi	r2,r2,-128
80211a2c:	10000a1e 	bne	r2,zero,80211a58 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
80211a30:	e0bffd17 	ldw	r2,-12(fp)
80211a34:	10800217 	ldw	r2,8(r2)
80211a38:	e0fffe17 	ldw	r3,-8(fp)
80211a3c:	180d883a 	mov	r6,r3
80211a40:	e17fff17 	ldw	r5,-4(fp)
80211a44:	1009883a 	mov	r4,r2
80211a48:	0211c140 	call	80211c14 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
80211a4c:	1000021e 	bne	r2,zero,80211a58 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
80211a50:	e0bffd17 	ldw	r2,-12(fp)
80211a54:	00000706 	br	80211a74 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
80211a58:	e0bffd17 	ldw	r2,-12(fp)
80211a5c:	10800017 	ldw	r2,0(r2)
80211a60:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
80211a64:	e0fffd17 	ldw	r3,-12(fp)
80211a68:	d0a00604 	addi	r2,gp,-32744
80211a6c:	18bfcc1e 	bne	r3,r2,802119a0 <__reset+0xfa1f19a0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
80211a70:	0005883a 	mov	r2,zero
}
80211a74:	e037883a 	mov	sp,fp
80211a78:	dfc00117 	ldw	ra,4(sp)
80211a7c:	df000017 	ldw	fp,0(sp)
80211a80:	dec00204 	addi	sp,sp,8
80211a84:	f800283a 	ret

80211a88 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
80211a88:	defffc04 	addi	sp,sp,-16
80211a8c:	df000315 	stw	fp,12(sp)
80211a90:	df000304 	addi	fp,sp,12
80211a94:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
80211a98:	00bffa04 	movi	r2,-24
80211a9c:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
80211aa0:	e03ffd15 	stw	zero,-12(fp)
80211aa4:	00001906 	br	80211b0c <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
80211aa8:	00a00874 	movhi	r2,32801
80211aac:	108bcb04 	addi	r2,r2,12076
80211ab0:	e0fffd17 	ldw	r3,-12(fp)
80211ab4:	18c00324 	muli	r3,r3,12
80211ab8:	10c5883a 	add	r2,r2,r3
80211abc:	10800017 	ldw	r2,0(r2)
80211ac0:	10000f1e 	bne	r2,zero,80211b00 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
80211ac4:	00a00874 	movhi	r2,32801
80211ac8:	108bcb04 	addi	r2,r2,12076
80211acc:	e0fffd17 	ldw	r3,-12(fp)
80211ad0:	18c00324 	muli	r3,r3,12
80211ad4:	10c5883a 	add	r2,r2,r3
80211ad8:	e0ffff17 	ldw	r3,-4(fp)
80211adc:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
80211ae0:	d0e00a17 	ldw	r3,-32728(gp)
80211ae4:	e0bffd17 	ldw	r2,-12(fp)
80211ae8:	1880020e 	bge	r3,r2,80211af4 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
80211aec:	e0bffd17 	ldw	r2,-12(fp)
80211af0:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
80211af4:	e0bffd17 	ldw	r2,-12(fp)
80211af8:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
80211afc:	00000606 	br	80211b18 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
80211b00:	e0bffd17 	ldw	r2,-12(fp)
80211b04:	10800044 	addi	r2,r2,1
80211b08:	e0bffd15 	stw	r2,-12(fp)
80211b0c:	e0bffd17 	ldw	r2,-12(fp)
80211b10:	10800810 	cmplti	r2,r2,32
80211b14:	103fe41e 	bne	r2,zero,80211aa8 <__reset+0xfa1f1aa8>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
80211b18:	e0bffe17 	ldw	r2,-8(fp)
}
80211b1c:	e037883a 	mov	sp,fp
80211b20:	df000017 	ldw	fp,0(sp)
80211b24:	dec00104 	addi	sp,sp,4
80211b28:	f800283a 	ret

80211b2c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
80211b2c:	defffe04 	addi	sp,sp,-8
80211b30:	df000115 	stw	fp,4(sp)
80211b34:	df000104 	addi	fp,sp,4
80211b38:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
80211b3c:	e0bfff17 	ldw	r2,-4(fp)
80211b40:	10bffe84 	addi	r2,r2,-6
80211b44:	10c00428 	cmpgeui	r3,r2,16
80211b48:	18001a1e 	bne	r3,zero,80211bb4 <alt_exception_cause_generated_bad_addr+0x88>
80211b4c:	100690ba 	slli	r3,r2,2
80211b50:	00a00874 	movhi	r2,32801
80211b54:	1086d904 	addi	r2,r2,7012
80211b58:	1885883a 	add	r2,r3,r2
80211b5c:	10800017 	ldw	r2,0(r2)
80211b60:	1000683a 	jmp	r2
80211b64:	80211ba4 	muli	zero,r16,-31634
80211b68:	80211ba4 	muli	zero,r16,-31634
80211b6c:	80211bb4 	orhi	zero,r16,33902
80211b70:	80211bb4 	orhi	zero,r16,33902
80211b74:	80211bb4 	orhi	zero,r16,33902
80211b78:	80211ba4 	muli	zero,r16,-31634
80211b7c:	80211bac 	andhi	zero,r16,33902
80211b80:	80211bb4 	orhi	zero,r16,33902
80211b84:	80211ba4 	muli	zero,r16,-31634
80211b88:	80211ba4 	muli	zero,r16,-31634
80211b8c:	80211bb4 	orhi	zero,r16,33902
80211b90:	80211ba4 	muli	zero,r16,-31634
80211b94:	80211bac 	andhi	zero,r16,33902
80211b98:	80211bb4 	orhi	zero,r16,33902
80211b9c:	80211bb4 	orhi	zero,r16,33902
80211ba0:	80211ba4 	muli	zero,r16,-31634
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
80211ba4:	00800044 	movi	r2,1
80211ba8:	00000306 	br	80211bb8 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
80211bac:	0005883a 	mov	r2,zero
80211bb0:	00000106 	br	80211bb8 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
80211bb4:	0005883a 	mov	r2,zero
  }
}
80211bb8:	e037883a 	mov	sp,fp
80211bbc:	df000017 	ldw	fp,0(sp)
80211bc0:	dec00104 	addi	sp,sp,4
80211bc4:	f800283a 	ret

80211bc8 <atexit>:
80211bc8:	200b883a 	mov	r5,r4
80211bcc:	000f883a 	mov	r7,zero
80211bd0:	000d883a 	mov	r6,zero
80211bd4:	0009883a 	mov	r4,zero
80211bd8:	0211df81 	jmpi	80211df8 <__register_exitproc>

80211bdc <exit>:
80211bdc:	defffe04 	addi	sp,sp,-8
80211be0:	000b883a 	mov	r5,zero
80211be4:	dc000015 	stw	r16,0(sp)
80211be8:	dfc00115 	stw	ra,4(sp)
80211bec:	2021883a 	mov	r16,r4
80211bf0:	0211f100 	call	80211f10 <__call_exitprocs>
80211bf4:	00a00874 	movhi	r2,32801
80211bf8:	1090b304 	addi	r2,r2,17100
80211bfc:	11000017 	ldw	r4,0(r2)
80211c00:	20800f17 	ldw	r2,60(r4)
80211c04:	10000126 	beq	r2,zero,80211c0c <exit+0x30>
80211c08:	103ee83a 	callr	r2
80211c0c:	8009883a 	mov	r4,r16
80211c10:	02120900 	call	80212090 <_exit>

80211c14 <memcmp>:
80211c14:	01c000c4 	movi	r7,3
80211c18:	3980192e 	bgeu	r7,r6,80211c80 <memcmp+0x6c>
80211c1c:	2144b03a 	or	r2,r4,r5
80211c20:	11c4703a 	and	r2,r2,r7
80211c24:	10000f26 	beq	r2,zero,80211c64 <memcmp+0x50>
80211c28:	20800003 	ldbu	r2,0(r4)
80211c2c:	28c00003 	ldbu	r3,0(r5)
80211c30:	10c0151e 	bne	r2,r3,80211c88 <memcmp+0x74>
80211c34:	31bfff84 	addi	r6,r6,-2
80211c38:	01ffffc4 	movi	r7,-1
80211c3c:	00000406 	br	80211c50 <memcmp+0x3c>
80211c40:	20800003 	ldbu	r2,0(r4)
80211c44:	28c00003 	ldbu	r3,0(r5)
80211c48:	31bfffc4 	addi	r6,r6,-1
80211c4c:	10c00e1e 	bne	r2,r3,80211c88 <memcmp+0x74>
80211c50:	21000044 	addi	r4,r4,1
80211c54:	29400044 	addi	r5,r5,1
80211c58:	31fff91e 	bne	r6,r7,80211c40 <__reset+0xfa1f1c40>
80211c5c:	0005883a 	mov	r2,zero
80211c60:	f800283a 	ret
80211c64:	20c00017 	ldw	r3,0(r4)
80211c68:	28800017 	ldw	r2,0(r5)
80211c6c:	18bfee1e 	bne	r3,r2,80211c28 <__reset+0xfa1f1c28>
80211c70:	31bfff04 	addi	r6,r6,-4
80211c74:	21000104 	addi	r4,r4,4
80211c78:	29400104 	addi	r5,r5,4
80211c7c:	39bff936 	bltu	r7,r6,80211c64 <__reset+0xfa1f1c64>
80211c80:	303fe91e 	bne	r6,zero,80211c28 <__reset+0xfa1f1c28>
80211c84:	003ff506 	br	80211c5c <__reset+0xfa1f1c5c>
80211c88:	10c5c83a 	sub	r2,r2,r3
80211c8c:	f800283a 	ret

80211c90 <_putc_r>:
80211c90:	defffc04 	addi	sp,sp,-16
80211c94:	dc000215 	stw	r16,8(sp)
80211c98:	dfc00315 	stw	ra,12(sp)
80211c9c:	2021883a 	mov	r16,r4
80211ca0:	20000226 	beq	r4,zero,80211cac <_putc_r+0x1c>
80211ca4:	20800e17 	ldw	r2,56(r4)
80211ca8:	10001b26 	beq	r2,zero,80211d18 <_putc_r+0x88>
80211cac:	30800217 	ldw	r2,8(r6)
80211cb0:	10bfffc4 	addi	r2,r2,-1
80211cb4:	30800215 	stw	r2,8(r6)
80211cb8:	10000a16 	blt	r2,zero,80211ce4 <_putc_r+0x54>
80211cbc:	30800017 	ldw	r2,0(r6)
80211cc0:	11400005 	stb	r5,0(r2)
80211cc4:	30800017 	ldw	r2,0(r6)
80211cc8:	10c00044 	addi	r3,r2,1
80211ccc:	30c00015 	stw	r3,0(r6)
80211cd0:	10800003 	ldbu	r2,0(r2)
80211cd4:	dfc00317 	ldw	ra,12(sp)
80211cd8:	dc000217 	ldw	r16,8(sp)
80211cdc:	dec00404 	addi	sp,sp,16
80211ce0:	f800283a 	ret
80211ce4:	30c00617 	ldw	r3,24(r6)
80211ce8:	10c00616 	blt	r2,r3,80211d04 <_putc_r+0x74>
80211cec:	30800017 	ldw	r2,0(r6)
80211cf0:	00c00284 	movi	r3,10
80211cf4:	11400005 	stb	r5,0(r2)
80211cf8:	30800017 	ldw	r2,0(r6)
80211cfc:	11400003 	ldbu	r5,0(r2)
80211d00:	28fff11e 	bne	r5,r3,80211cc8 <__reset+0xfa1f1cc8>
80211d04:	8009883a 	mov	r4,r16
80211d08:	dfc00317 	ldw	ra,12(sp)
80211d0c:	dc000217 	ldw	r16,8(sp)
80211d10:	dec00404 	addi	sp,sp,16
80211d14:	02096b41 	jmpi	802096b4 <__swbuf_r>
80211d18:	d9400015 	stw	r5,0(sp)
80211d1c:	d9800115 	stw	r6,4(sp)
80211d20:	020481c0 	call	8020481c <__sinit>
80211d24:	d9800117 	ldw	r6,4(sp)
80211d28:	d9400017 	ldw	r5,0(sp)
80211d2c:	003fdf06 	br	80211cac <__reset+0xfa1f1cac>

80211d30 <putc>:
80211d30:	00a00874 	movhi	r2,32801
80211d34:	defffc04 	addi	sp,sp,-16
80211d38:	1090b404 	addi	r2,r2,17104
80211d3c:	dc000115 	stw	r16,4(sp)
80211d40:	14000017 	ldw	r16,0(r2)
80211d44:	dc400215 	stw	r17,8(sp)
80211d48:	dfc00315 	stw	ra,12(sp)
80211d4c:	2023883a 	mov	r17,r4
80211d50:	80000226 	beq	r16,zero,80211d5c <putc+0x2c>
80211d54:	80800e17 	ldw	r2,56(r16)
80211d58:	10001a26 	beq	r2,zero,80211dc4 <putc+0x94>
80211d5c:	28800217 	ldw	r2,8(r5)
80211d60:	10bfffc4 	addi	r2,r2,-1
80211d64:	28800215 	stw	r2,8(r5)
80211d68:	10000b16 	blt	r2,zero,80211d98 <putc+0x68>
80211d6c:	28800017 	ldw	r2,0(r5)
80211d70:	14400005 	stb	r17,0(r2)
80211d74:	28800017 	ldw	r2,0(r5)
80211d78:	10c00044 	addi	r3,r2,1
80211d7c:	28c00015 	stw	r3,0(r5)
80211d80:	10800003 	ldbu	r2,0(r2)
80211d84:	dfc00317 	ldw	ra,12(sp)
80211d88:	dc400217 	ldw	r17,8(sp)
80211d8c:	dc000117 	ldw	r16,4(sp)
80211d90:	dec00404 	addi	sp,sp,16
80211d94:	f800283a 	ret
80211d98:	28c00617 	ldw	r3,24(r5)
80211d9c:	10c00e16 	blt	r2,r3,80211dd8 <putc+0xa8>
80211da0:	28800017 	ldw	r2,0(r5)
80211da4:	01000284 	movi	r4,10
80211da8:	14400005 	stb	r17,0(r2)
80211dac:	28800017 	ldw	r2,0(r5)
80211db0:	10c00003 	ldbu	r3,0(r2)
80211db4:	193ff01e 	bne	r3,r4,80211d78 <__reset+0xfa1f1d78>
80211db8:	280d883a 	mov	r6,r5
80211dbc:	180b883a 	mov	r5,r3
80211dc0:	00000706 	br	80211de0 <putc+0xb0>
80211dc4:	8009883a 	mov	r4,r16
80211dc8:	d9400015 	stw	r5,0(sp)
80211dcc:	020481c0 	call	8020481c <__sinit>
80211dd0:	d9400017 	ldw	r5,0(sp)
80211dd4:	003fe106 	br	80211d5c <__reset+0xfa1f1d5c>
80211dd8:	280d883a 	mov	r6,r5
80211ddc:	880b883a 	mov	r5,r17
80211de0:	8009883a 	mov	r4,r16
80211de4:	dfc00317 	ldw	ra,12(sp)
80211de8:	dc400217 	ldw	r17,8(sp)
80211dec:	dc000117 	ldw	r16,4(sp)
80211df0:	dec00404 	addi	sp,sp,16
80211df4:	02096b41 	jmpi	802096b4 <__swbuf_r>

80211df8 <__register_exitproc>:
80211df8:	defffa04 	addi	sp,sp,-24
80211dfc:	dc000315 	stw	r16,12(sp)
80211e00:	04200874 	movhi	r16,32801
80211e04:	8410b304 	addi	r16,r16,17100
80211e08:	80c00017 	ldw	r3,0(r16)
80211e0c:	dc400415 	stw	r17,16(sp)
80211e10:	dfc00515 	stw	ra,20(sp)
80211e14:	18805217 	ldw	r2,328(r3)
80211e18:	2023883a 	mov	r17,r4
80211e1c:	10003726 	beq	r2,zero,80211efc <__register_exitproc+0x104>
80211e20:	10c00117 	ldw	r3,4(r2)
80211e24:	010007c4 	movi	r4,31
80211e28:	20c00e16 	blt	r4,r3,80211e64 <__register_exitproc+0x6c>
80211e2c:	1a000044 	addi	r8,r3,1
80211e30:	8800221e 	bne	r17,zero,80211ebc <__register_exitproc+0xc4>
80211e34:	18c00084 	addi	r3,r3,2
80211e38:	18c7883a 	add	r3,r3,r3
80211e3c:	18c7883a 	add	r3,r3,r3
80211e40:	12000115 	stw	r8,4(r2)
80211e44:	10c7883a 	add	r3,r2,r3
80211e48:	19400015 	stw	r5,0(r3)
80211e4c:	0005883a 	mov	r2,zero
80211e50:	dfc00517 	ldw	ra,20(sp)
80211e54:	dc400417 	ldw	r17,16(sp)
80211e58:	dc000317 	ldw	r16,12(sp)
80211e5c:	dec00604 	addi	sp,sp,24
80211e60:	f800283a 	ret
80211e64:	00800034 	movhi	r2,0
80211e68:	10800004 	addi	r2,r2,0
80211e6c:	10002626 	beq	r2,zero,80211f08 <__register_exitproc+0x110>
80211e70:	01006404 	movi	r4,400
80211e74:	d9400015 	stw	r5,0(sp)
80211e78:	d9800115 	stw	r6,4(sp)
80211e7c:	d9c00215 	stw	r7,8(sp)
80211e80:	00000000 	call	80000000 <__alt_mem_onchip_memory-0x200000>
80211e84:	d9400017 	ldw	r5,0(sp)
80211e88:	d9800117 	ldw	r6,4(sp)
80211e8c:	d9c00217 	ldw	r7,8(sp)
80211e90:	10001d26 	beq	r2,zero,80211f08 <__register_exitproc+0x110>
80211e94:	81000017 	ldw	r4,0(r16)
80211e98:	10000115 	stw	zero,4(r2)
80211e9c:	02000044 	movi	r8,1
80211ea0:	22405217 	ldw	r9,328(r4)
80211ea4:	0007883a 	mov	r3,zero
80211ea8:	12400015 	stw	r9,0(r2)
80211eac:	20805215 	stw	r2,328(r4)
80211eb0:	10006215 	stw	zero,392(r2)
80211eb4:	10006315 	stw	zero,396(r2)
80211eb8:	883fde26 	beq	r17,zero,80211e34 <__reset+0xfa1f1e34>
80211ebc:	18c9883a 	add	r4,r3,r3
80211ec0:	2109883a 	add	r4,r4,r4
80211ec4:	1109883a 	add	r4,r2,r4
80211ec8:	21802215 	stw	r6,136(r4)
80211ecc:	01800044 	movi	r6,1
80211ed0:	12406217 	ldw	r9,392(r2)
80211ed4:	30cc983a 	sll	r6,r6,r3
80211ed8:	4992b03a 	or	r9,r9,r6
80211edc:	12406215 	stw	r9,392(r2)
80211ee0:	21c04215 	stw	r7,264(r4)
80211ee4:	01000084 	movi	r4,2
80211ee8:	893fd21e 	bne	r17,r4,80211e34 <__reset+0xfa1f1e34>
80211eec:	11006317 	ldw	r4,396(r2)
80211ef0:	218cb03a 	or	r6,r4,r6
80211ef4:	11806315 	stw	r6,396(r2)
80211ef8:	003fce06 	br	80211e34 <__reset+0xfa1f1e34>
80211efc:	18805304 	addi	r2,r3,332
80211f00:	18805215 	stw	r2,328(r3)
80211f04:	003fc606 	br	80211e20 <__reset+0xfa1f1e20>
80211f08:	00bfffc4 	movi	r2,-1
80211f0c:	003fd006 	br	80211e50 <__reset+0xfa1f1e50>

80211f10 <__call_exitprocs>:
80211f10:	defff504 	addi	sp,sp,-44
80211f14:	df000915 	stw	fp,36(sp)
80211f18:	dd400615 	stw	r21,24(sp)
80211f1c:	dc800315 	stw	r18,12(sp)
80211f20:	dfc00a15 	stw	ra,40(sp)
80211f24:	ddc00815 	stw	r23,32(sp)
80211f28:	dd800715 	stw	r22,28(sp)
80211f2c:	dd000515 	stw	r20,20(sp)
80211f30:	dcc00415 	stw	r19,16(sp)
80211f34:	dc400215 	stw	r17,8(sp)
80211f38:	dc000115 	stw	r16,4(sp)
80211f3c:	d9000015 	stw	r4,0(sp)
80211f40:	2839883a 	mov	fp,r5
80211f44:	04800044 	movi	r18,1
80211f48:	057fffc4 	movi	r21,-1
80211f4c:	00a00874 	movhi	r2,32801
80211f50:	1090b304 	addi	r2,r2,17100
80211f54:	12000017 	ldw	r8,0(r2)
80211f58:	45005217 	ldw	r20,328(r8)
80211f5c:	44c05204 	addi	r19,r8,328
80211f60:	a0001c26 	beq	r20,zero,80211fd4 <__call_exitprocs+0xc4>
80211f64:	a0800117 	ldw	r2,4(r20)
80211f68:	15ffffc4 	addi	r23,r2,-1
80211f6c:	b8000d16 	blt	r23,zero,80211fa4 <__call_exitprocs+0x94>
80211f70:	14000044 	addi	r16,r2,1
80211f74:	8421883a 	add	r16,r16,r16
80211f78:	8421883a 	add	r16,r16,r16
80211f7c:	84402004 	addi	r17,r16,128
80211f80:	a463883a 	add	r17,r20,r17
80211f84:	a421883a 	add	r16,r20,r16
80211f88:	e0001e26 	beq	fp,zero,80212004 <__call_exitprocs+0xf4>
80211f8c:	80804017 	ldw	r2,256(r16)
80211f90:	e0801c26 	beq	fp,r2,80212004 <__call_exitprocs+0xf4>
80211f94:	bdffffc4 	addi	r23,r23,-1
80211f98:	843fff04 	addi	r16,r16,-4
80211f9c:	8c7fff04 	addi	r17,r17,-4
80211fa0:	bd7ff91e 	bne	r23,r21,80211f88 <__reset+0xfa1f1f88>
80211fa4:	00800034 	movhi	r2,0
80211fa8:	10800004 	addi	r2,r2,0
80211fac:	10000926 	beq	r2,zero,80211fd4 <__call_exitprocs+0xc4>
80211fb0:	a0800117 	ldw	r2,4(r20)
80211fb4:	1000301e 	bne	r2,zero,80212078 <__call_exitprocs+0x168>
80211fb8:	a0800017 	ldw	r2,0(r20)
80211fbc:	10003226 	beq	r2,zero,80212088 <__call_exitprocs+0x178>
80211fc0:	a009883a 	mov	r4,r20
80211fc4:	98800015 	stw	r2,0(r19)
80211fc8:	00000000 	call	80000000 <__alt_mem_onchip_memory-0x200000>
80211fcc:	9d000017 	ldw	r20,0(r19)
80211fd0:	a03fe41e 	bne	r20,zero,80211f64 <__reset+0xfa1f1f64>
80211fd4:	dfc00a17 	ldw	ra,40(sp)
80211fd8:	df000917 	ldw	fp,36(sp)
80211fdc:	ddc00817 	ldw	r23,32(sp)
80211fe0:	dd800717 	ldw	r22,28(sp)
80211fe4:	dd400617 	ldw	r21,24(sp)
80211fe8:	dd000517 	ldw	r20,20(sp)
80211fec:	dcc00417 	ldw	r19,16(sp)
80211ff0:	dc800317 	ldw	r18,12(sp)
80211ff4:	dc400217 	ldw	r17,8(sp)
80211ff8:	dc000117 	ldw	r16,4(sp)
80211ffc:	dec00b04 	addi	sp,sp,44
80212000:	f800283a 	ret
80212004:	a0800117 	ldw	r2,4(r20)
80212008:	80c00017 	ldw	r3,0(r16)
8021200c:	10bfffc4 	addi	r2,r2,-1
80212010:	15c01426 	beq	r2,r23,80212064 <__call_exitprocs+0x154>
80212014:	80000015 	stw	zero,0(r16)
80212018:	183fde26 	beq	r3,zero,80211f94 <__reset+0xfa1f1f94>
8021201c:	95c8983a 	sll	r4,r18,r23
80212020:	a0806217 	ldw	r2,392(r20)
80212024:	a5800117 	ldw	r22,4(r20)
80212028:	2084703a 	and	r2,r4,r2
8021202c:	10000b26 	beq	r2,zero,8021205c <__call_exitprocs+0x14c>
80212030:	a0806317 	ldw	r2,396(r20)
80212034:	2088703a 	and	r4,r4,r2
80212038:	20000c1e 	bne	r4,zero,8021206c <__call_exitprocs+0x15c>
8021203c:	89400017 	ldw	r5,0(r17)
80212040:	d9000017 	ldw	r4,0(sp)
80212044:	183ee83a 	callr	r3
80212048:	a0800117 	ldw	r2,4(r20)
8021204c:	15bfbf1e 	bne	r2,r22,80211f4c <__reset+0xfa1f1f4c>
80212050:	98800017 	ldw	r2,0(r19)
80212054:	153fcf26 	beq	r2,r20,80211f94 <__reset+0xfa1f1f94>
80212058:	003fbc06 	br	80211f4c <__reset+0xfa1f1f4c>
8021205c:	183ee83a 	callr	r3
80212060:	003ff906 	br	80212048 <__reset+0xfa1f2048>
80212064:	a5c00115 	stw	r23,4(r20)
80212068:	003feb06 	br	80212018 <__reset+0xfa1f2018>
8021206c:	89000017 	ldw	r4,0(r17)
80212070:	183ee83a 	callr	r3
80212074:	003ff406 	br	80212048 <__reset+0xfa1f2048>
80212078:	a0800017 	ldw	r2,0(r20)
8021207c:	a027883a 	mov	r19,r20
80212080:	1029883a 	mov	r20,r2
80212084:	003fb606 	br	80211f60 <__reset+0xfa1f1f60>
80212088:	0005883a 	mov	r2,zero
8021208c:	003ffb06 	br	8021207c <__reset+0xfa1f207c>

80212090 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
80212090:	defffd04 	addi	sp,sp,-12
80212094:	df000215 	stw	fp,8(sp)
80212098:	df000204 	addi	fp,sp,8
8021209c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
802120a0:	0001883a 	nop
802120a4:	e0bfff17 	ldw	r2,-4(fp)
802120a8:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
802120ac:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
802120b0:	10000226 	beq	r2,zero,802120bc <_exit+0x2c>
    ALT_SIM_FAIL();
802120b4:	002af070 	cmpltui	zero,zero,43969
802120b8:	00000106 	br	802120c0 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
802120bc:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
802120c0:	003fff06 	br	802120c0 <__reset+0xfa1f20c0>
