
SerialTest.elf:     file format elf32-littlenios2
SerialTest.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x80200244

Program Header:
    LOAD off    0x00001020 vaddr 0x80200020 paddr 0x80200020 align 2**12
         filesz 0x00014494 memsz 0x00014678 flags rwx
    LOAD off    0x00016000 vaddr 0x86020000 paddr 0x86020000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000000  86020000  86020000  00016000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  80200020  80200020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00012004  80200244  80200244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000005ac  80212248  80212248  00013248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001cb4  80212800  80212800  00013800  2**4
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000001e4  802144b4  802144b4  000154b4  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  80214698  80214698  00016000  2**0
                  CONTENTS
  7 .ext_flash    00000000  86020020  86020020  00016000  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00016000  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000fc0  00000000  00000000  00016028  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00027ba8  00000000  00000000  00016fe8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00009f3d  00000000  00000000  0003eb90  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000c725  00000000  00000000  00048acd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002958  00000000  00000000  000551f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00004722  00000000  00000000  00057b4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00017b0d  00000000  00000000  0005c26e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  00073d7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001900  00000000  00000000  00073dc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00079379  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  0007937c  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00079388  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00079389  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0007938a  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0007938e  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00079392  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  00079396  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  000793a1  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  000793ac  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000011  00000000  00000000  000793b7  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000057  00000000  00000000  000793c8  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     002608b4  00000000  00000000  0007941f  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
86020000 l    d  .entry	00000000 .entry
80200020 l    d  .exceptions	00000000 .exceptions
80200244 l    d  .text	00000000 .text
80212248 l    d  .rodata	00000000 .rodata
80212800 l    d  .rwdata	00000000 .rwdata
802144b4 l    d  .bss	00000000 .bss
80214698 l    d  .onchip_memory	00000000 .onchip_memory
86020020 l    d  .ext_flash	00000000 .ext_flash
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../SerialTest_bsp//obj/HAL/src/crt0.o
80200278 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
802122ce l     O .rodata	00000010 zeroes.4404
80202a58 l     F .text	000000bc __sbprintf
802122de l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
80202c68 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
80204798 l     F .text	00000008 __fp_unlock
802047ac l     F .text	0000019c __sinit.part.1
80204948 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
80212800 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
80212c44 l     O .rwdata	00000020 lc_ctype_charset
80212c24 l     O .rwdata	00000020 lc_message_charset
80212c64 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
80212310 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
80207d64 l     F .text	000000fc __sprint_r.part.0
80212444 l     O .rodata	00000010 blanks.4348
80212434 l     O .rodata	00000010 zeroes.4349
802092f0 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
8020cfac l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
8020d0b8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
8020d0e4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
8020d1d0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
8020d2b0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
8020d484 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
8021449c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
8020d700 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
8020d834 l     F .text	00000034 alt_dev_reg
80213250 l     O .rwdata	00001060 jtag_uart_0
802142b0 l     O .rwdata	000000c4 rs232_uart
80214380 l     O .rwdata	00000060 dma_DDR_M1
802143e0 l     O .rwdata	00000060 dma_DDR_M2
80214440 l     O .rwdata	0000002c Altera_UP_SD_Card_Avalon_Interface_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
8020dbac l     F .text	0000020c altera_avalon_jtag_uart_irq
8020ddb8 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
8020e3f0 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
8020e6a0 l     F .text	0000009c altera_avalon_uart_irq
8020e73c l     F .text	000000e4 altera_avalon_uart_rxirq
8020e820 l     F .text	00000148 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
8020e9bc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
8020ebd4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_msgdma.c
8020edbc l     F .text	0000003c alt_get_errno
8020edf8 l     F .text	00000094 alt_msgdma_write_standard_descriptor
8020ee8c l     F .text	0000012c alt_msgdma_write_extended_descriptor
8020efb8 l     F .text	00000184 alt_msgdma_irq
8020f13c l     F .text	0000008c alt_msgdma_construct_standard_descriptor
8020f1c8 l     F .text	00000154 alt_msgdma_construct_extended_descriptor
8020f31c l     F .text	000002d0 alt_msgdma_descriptor_async_transfer
8020f5ec l     F .text	00000378 alt_msgdma_descriptor_sync_transfer
8020fc34 l     F .text	000000a4 alt_msgdma_construct_prefetcher_standard_descriptor
8020fcd8 l     F .text	00000194 alt_msgdma_construct_prefetcher_extended_descriptor
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
80210fd8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
802114a8 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
802115e8 l     F .text	0000003c alt_get_errno
80211624 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
802144ec g     O .bss	00000004 alt_instruction_exception_handler
80210c6c g     F .text	0000003c alt_msgdma_standard_descriptor_async_transfer
802006c0 g     F .text	00000018 putchar
80207240 g     F .text	00000074 _mprec_log10
8020732c g     F .text	0000008c __any_on
802099e4 g     F .text	00000054 _isatty_r
8021231c g     O .rodata	00000028 __mprec_tinytens
8020d3c0 g     F .text	0000007c alt_main
802006d8 g     F .text	000000c0 _puts_r
80214598 g     O .bss	00000100 alt_irq
80209a38 g     F .text	00000060 _lseek_r
8020bad8 g     F .text	00000088 .hidden __eqdf2
8020fa14 g     F .text	00000058 alt_msgdma_construct_standard_mm_to_mm_descriptor
80214698 g       *ABS*	00000000 __alt_heap_start
8020067c g     F .text	0000003c printf
80209af8 g     F .text	0000009c _wcrtomb_r
80207c24 g     F .text	0000005c __sseek
80204ae8 g     F .text	00000010 __sinit
802093ac g     F .text	00000140 __swbuf_r
802055b0 g     F .text	0000007c _setlocale_r
80204950 g     F .text	00000068 __sfmoreglue
8020d460 g     F .text	00000024 __malloc_unlock
80206138 g     F .text	0000015c memmove
80204ad0 g     F .text	00000018 _cleanup
802063bc g     F .text	000000a8 _Balloc
80214518 g     O .bss	00000040 cTxBuffer
8020f964 g     F .text	00000058 alt_msgdma_construct_standard_st_to_mm_descriptor
8020bb60 g     F .text	000000dc .hidden __gtdf2
80211c48 g     F .text	00000024 altera_nios2_gen2_irq_init
86020000 g     F .entry	00000000 __reset
80209988 g     F .text	0000005c _fstat_r
802144d0 g     O .bss	00000004 errno
80207ba0 g     F .text	00000008 __seofread
802144d8 g     O .bss	00000004 alt_argv
8021c46c g       *ABS*	00000000 _gp
8020d6d0 g     F .text	00000030 usleep
802104f8 g     F .text	00000144 alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits
802130cc g     O .rwdata	00000180 alt_fd_list
802006b8 g     F .text	00000008 _putchar_r
80211178 g     F .text	00000090 alt_find_dev
80200504 g     F .text	00000148 memcpy
802047a0 g     F .text	0000000c _cleanup_r
8020cdc4 g     F .text	000000dc .hidden __floatsidf
8021156c g     F .text	0000007c alt_io_redirect
8020bc3c g     F .text	000000f4 .hidden __ltdf2
80212248 g       *ABS*	00000000 __DTOR_END__
802109a8 g     F .text	000000ac alt_msgdma_start_prefetcher_with_extd_desc_list
80210ca8 g     F .text	0000003c alt_msgdma_extended_descriptor_async_transfer
80210c18 g     F .text	00000054 alt_msgdma_register_callback
80200798 g     F .text	00000014 puts
80211e18 g     F .text	0000009c alt_exception_cause_generated_bad_addr
80207a84 g     F .text	00000074 __fpclassifyd
8020719c g     F .text	000000a4 __ratio
802092d4 g     F .text	0000001c __vfiprintf_internal
8020dfb0 g     F .text	0000021c altera_avalon_jtag_uart_read
80210164 g     F .text	000000f0 alt_msgdma_prefetcher_add_standard_desc_to_list
8020064c g     F .text	00000030 _printf_r
8020a888 g     F .text	00000064 .hidden __udivsi3
8020d20c g     F .text	000000a4 isatty
8021236c g     O .rodata	000000c8 __mprec_tens
8020562c g     F .text	0000000c __locale_charset
802144cc g     O .bss	00000004 __malloc_top_pad
80214474 g     O .rwdata	00000004 __mb_cur_max
8020565c g     F .text	0000000c _localeconv_r
802067c8 g     F .text	0000003c __i2b
80204f6c g     F .text	000004bc __sfvwrite_r
80207af8 g     F .text	00000054 _sbrk_r
80209a98 g     F .text	00000060 _read_r
80210fb0 g     F .text	00000028 alt_dcache_flush
80214494 g     O .rwdata	00000004 alt_max_fd
8020967c g     F .text	000000f0 _fclose_r
80204768 g     F .text	00000030 fflush
802144c8 g     O .bss	00000004 __malloc_max_sbrked_mem
8020a944 g     F .text	000008ac .hidden __adddf3
80206f44 g     F .text	0000010c __b2d
8020fec4 g     F .text	00000058 alt_msgdma_construct_prefetcher_standard_st_to_mm_descriptor
8020a258 g     F .text	00000538 .hidden __umoddi3
8020d2ec g     F .text	000000d4 lseek
8021446c g     O .rwdata	00000004 _global_impure_ptr
80207520 g     F .text	00000564 _realloc_r
80214698 g       *ABS*	00000000 __bss_end
802113b8 g     F .text	000000f0 alt_iic_isr_register
80211b40 g     F .text	00000108 alt_tick
80210aac g     F .text	0000016c alt_msgdma_init
80209ce0 g     F .text	00000578 .hidden __udivdi3
802098e4 g     F .text	00000024 _fputwc_r
80212344 g     O .rodata	00000028 __mprec_bigtens
802065ac g     F .text	00000104 __s2b
8020cea0 g     F .text	000000a8 .hidden __floatunsidf
80206c84 g     F .text	00000060 __mcmp
8020e5f4 g     F .text	000000ac altera_avalon_uart_init
80210d20 g     F .text	0000003c alt_msgdma_extended_descriptor_sync_transfer
80204b08 g     F .text	00000018 __fp_lock_all
8021136c g     F .text	0000004c alt_ic_irq_enabled
80211aa4 g     F .text	0000009c alt_alarm_stop
802144e0 g     O .bss	00000004 alt_irq_active
802000fc g     F .exceptions	000000d4 alt_irq_handler
802130a4 g     O .rwdata	00000028 alt_dev_null
8020fafc g     F .text	00000090 alt_msgdma_construct_extended_mm_to_st_descriptor
802108fc g     F .text	000000ac alt_msgdma_start_prefetcher_with_std_desc_list
802066b0 g     F .text	00000068 __hi0bits
8020cd44 g     F .text	00000080 .hidden __fixdfsi
80200394 g     F .text	0000008c vUartWriteBuffer
80200000 g       *ABS*	00000000 __alt_mem_onchip_memory
8021448c g     O .rwdata	00000008 alt_dev_list
8020d73c g     F .text	000000f8 write
802073b8 g     F .text	000000a0 _putc_r
8020d120 g     F .text	000000b0 fstat
8020bc3c g     F .text	000000f4 .hidden __ledf2
802069fc g     F .text	00000140 __pow5mult
80207e78 g     F .text	0000145c ___vfiprintf_internal_r
802144c0 g     O .bss	00000004 __nlocale_changed
8020a8ec g     F .text	00000058 .hidden __umodsi3
8020ff1c g     F .text	00000058 alt_msgdma_construct_prefetcher_standard_mm_to_st_descriptor
80214698 g       *ABS*	00000000 end
8020ec10 g     F .text	000001ac altera_avalon_uart_write
8020daec g     F .text	000000c0 altera_avalon_jtag_uart_init
802001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
80212248 g       *ABS*	00000000 __CTOR_LIST__
802e0000 g       *ABS*	00000000 __alt_stack_pointer
8020e468 g     F .text	0000007c alt_avalon_timer_sc_init
8020e544 g     F .text	00000060 altera_avalon_uart_write_fd
8020cf48 g     F .text	00000064 .hidden __clzsi2
8020e5a4 g     F .text	00000050 altera_avalon_uart_close_fd
8020e1cc g     F .text	00000224 altera_avalon_jtag_uart_write
80204af8 g     F .text	00000004 __sfp_lock_acquire
80206054 g     F .text	000000e4 memchr
80200844 g     F .text	000021f8 ___vfprintf_internal_r
80204c5c g     F .text	00000310 _free_r
8021183c g     F .text	0000022c alt_printf
80205638 g     F .text	00000010 __locale_mb_cur_max
80212094 g     F .text	00000180 __call_exitprocs
802144bc g     O .bss	00000004 __mlocale_changed
80214478 g     O .rwdata	00000004 __malloc_sbrk_base
80200244 g     F .text	00000038 _start
802144e4 g     O .bss	00000004 _alt_tick_rate
80206b3c g     F .text	00000148 __lshift
802144e8 g     O .bss	00000004 _alt_nticks
8020f9bc g     F .text	00000058 alt_msgdma_construct_standard_mm_to_st_descriptor
8020d4c0 g     F .text	000000fc read
8020d8a0 g     F .text	000000e8 alt_sys_init
80211f7c g     F .text	00000118 __register_exitproc
80206804 g     F .text	000001f8 __multiply
8020de58 g     F .text	00000068 altera_avalon_jtag_uart_close
80214558 g     O .bss	00000040 cRxBuffer
802144f0 g     O .bss	00000028 __malloc_current_mallinfo
80207050 g     F .text	0000014c __d2b
80200420 g     F .text	00000054 cUartReadChar
8020d988 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
80211d74 g     F .text	000000a4 alt_get_fd
80210e88 g     F .text	00000128 alt_busy_sleep
80209564 g     F .text	00000054 _close_r
8020fe6c g     F .text	00000058 alt_msgdma_construct_prefetcher_standard_mm_to_mm_descriptor
80211f00 g     F .text	0000007c memcmp
8020da48 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
80214698 g       *ABS*	00000000 __alt_stack_base
8020da98 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
8020ff74 g     F .text	000000a0 alt_msgdma_construct_prefetcher_extended_st_to_mm_descriptor
80202b14 g     F .text	00000154 __swsetup_r
8020b1f0 g     F .text	000008e8 .hidden __divdf3
802049b8 g     F .text	00000118 __sfp
802072b4 g     F .text	00000078 __copybits
80212c9c g     O .rwdata	00000408 __malloc_av_
80204b04 g     F .text	00000004 __sinit_lock_release
8020bd30 g     F .text	00000718 .hidden __muldf3
80207b4c g     F .text	00000054 __sread
80211c6c g     F .text	00000108 alt_find_file
80211014 g     F .text	000000a4 alt_dev_llist_insert
8020d43c g     F .text	00000024 __malloc_lock
8020d620 g     F .text	000000b0 sbrk
8020470c g     F .text	0000005c _fflush_r
802095b8 g     F .text	000000c4 _calloc_r
802144b4 g     O .bss	00000002 usiStringLength
802144b4 g       *ABS*	00000000 __bss_start
80206294 g     F .text	00000128 memset
80210a54 g     F .text	00000058 alt_msgdma_open
8020027c g     F .text	000000cc main
802144dc g     O .bss	00000004 alt_envp
80200474 g     F .text	00000090 vUartReadBuffer
802144c4 g     O .bss	00000004 __malloc_max_total_mem
80210254 g     F .text	00000198 alt_msgdma_prefetcher_add_extended_desc_to_list
8020d9e8 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
802094ec g     F .text	00000018 __swbuf
80207c80 g     F .text	00000008 __sclose
802e0000 g       *ABS*	00000000 __alt_heap_limit
8020976c g     F .text	00000014 fclose
80202e68 g     F .text	00001688 _dtoa_r
8021063c g     F .text	000002c0 alt_msgdma_start_prefetcher_with_list_addr
80205848 g     F .text	0000080c _malloc_r
80209c54 g     F .text	00000030 __ascii_wctomb
80214498 g     O .rwdata	00000004 alt_errno
802100ac g     F .text	000000b8 alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor
80205428 g     F .text	000000c4 _fwalk
80207458 g     F .text	000000c8 putc
8020a790 g     F .text	00000084 .hidden __divsi3
80204b38 g     F .text	00000124 _malloc_trim_r
80212248 g       *ABS*	00000000 __CTOR_END__
80207c88 g     F .text	000000dc strcmp
80212248 g       *ABS*	00000000 __DTOR_LIST__
8020bad8 g     F .text	00000088 .hidden __nedf2
8020d868 g     F .text	00000038 alt_irq_init
8020d5bc g     F .text	00000064 alt_release_fd
80210ce4 g     F .text	0000003c alt_msgdma_standard_descriptor_sync_transfer
80212454 g     O .rodata	00000100 .hidden __clz_tab
802144b8 g     O .bss	00000004 _PathLocale
80211eb4 g     F .text	00000014 atexit
80209504 g     F .text	00000060 _write_r
80205668 g     F .text	00000018 setlocale
80210014 g     F .text	00000098 alt_msgdma_construct_prefetcher_extended_mm_to_st_descriptor
80214470 g     O .rwdata	00000004 _impure_ptr
802144d4 g     O .bss	00000004 alt_argc
802044f0 g     F .text	0000021c __sflush_r
80211118 g     F .text	00000060 _do_dtors
80205654 g     F .text	00000008 __locale_cjk_lang
80200020 g       .exceptions	00000000 alt_irq_entry
80206ee0 g     F .text	00000064 __ulp
80204b20 g     F .text	00000018 __fp_unlock_all
80214484 g     O .rwdata	00000008 alt_fs_list
80205680 g     F .text	0000000c localeconv
80211208 g     F .text	00000050 alt_ic_isr_register
802144b4 g       *ABS*	00000000 _edata
8020e4e4 g     F .text	00000060 altera_avalon_uart_read_fd
80214698 g       *ABS*	00000000 _end
80209780 g     F .text	00000164 __fputwc
8020dec0 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
802112e0 g     F .text	0000008c alt_ic_irq_disable
80207ba8 g     F .text	0000007c __swrite
8021447c g     O .rwdata	00000004 __malloc_trim_threshold
80205648 g     F .text	0000000c __locale_msgcharset
80211ec8 g     F .text	00000038 exit
802054ec g     F .text	000000c4 _fwalk_reent
802103ec g     F .text	0000010c alt_msgdma_prefetcher_set_std_list_own_by_hw_bits
80206ce4 g     F .text	000001fc __mdiff
8020a814 g     F .text	00000074 .hidden __modsi3
802e0000 g       *ABS*	00000000 __alt_data_end
80200020 g     F .exceptions	00000000 alt_exception
80204afc g     F .text	00000004 __sfp_lock_release
8020fb8c g     F .text	000000a8 alt_msgdma_construct_extended_mm_to_mm_descriptor
84000000 g       *ABS*	00000000 __alt_mem_ext_flash
8020fa6c g     F .text	00000090 alt_msgdma_construct_extended_st_to_mm_descriptor
8020e968 g     F .text	00000054 altera_avalon_uart_close
80212214 g     F .text	00000034 _exit
80210d5c g     F .text	0000012c alt_alarm_start
8020568c g     F .text	000001bc __smakebuf_r
802144a0 g     O .rwdata	00000008 alt_msgdma_list
802007ac g     F .text	00000098 strlen
802116e8 g     F .text	00000154 open
8020bb60 g     F .text	000000dc .hidden __gedf2
80211a68 g     F .text	0000003c alt_putchar
80214480 g     O .rwdata	00000004 __wctomb
80207e60 g     F .text	00000018 __sprint_r
802144a8 g     O .rwdata	00000004 alt_priority_mask
80211258 g     F .text	00000088 alt_ic_irq_enable
80202a3c g     F .text	0000001c __vfprintf_internal
8020e9f8 g     F .text	000001dc altera_avalon_uart_read
80209c84 g     F .text	0000005c _wctomb_r
8020c448 g     F .text	000008fc .hidden __subdf3
80206718 g     F .text	000000b0 __lo0bits
802144ac g     O .rwdata	00000008 alt_alarm_list
802110b8 g     F .text	00000060 _do_ctors
80209b94 g     F .text	000000c0 wcrtomb
8020cfe8 g     F .text	000000d0 close
80200348 g     F .text	0000004c vUartWriteChar
80209908 g     F .text	00000080 fputwc
80204b00 g     F .text	00000004 __sinit_lock_acquire
8020648c g     F .text	00000120 __multadd
80206464 g     F .text	00000028 _Bfree



Disassembly of section .exceptions:

80200020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
80200020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
80200024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
80200028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
8020002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
80200030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
80200034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
80200038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
8020003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
80200040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
80200044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
80200048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
8020004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
80200050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
80200054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
80200058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
8020005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
80200060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
80200064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
80200068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
8020006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
80200070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
80200074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
80200078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
8020007c:	10000326 	beq	r2,zero,8020008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
80200080:	20000226 	beq	r4,zero,8020008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
80200084:	02000fc0 	call	802000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
80200088:	00000706 	br	802000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
8020008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
80200090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
80200094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
80200098:	02001d00 	call	802001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
8020009c:	1000021e 	bne	r2,zero,802000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
802000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
802000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
802000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
802000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
802000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
802000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
802000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
802000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
802000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
802000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
802000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
802000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
802000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
802000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
802000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
802000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
802000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
802000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
802000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
802000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
802000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
802000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
802000f8:	ef80083a 	eret

802000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
802000fc:	defff904 	addi	sp,sp,-28
80200100:	dfc00615 	stw	ra,24(sp)
80200104:	df000515 	stw	fp,20(sp)
80200108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
8020010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
80200110:	0005313a 	rdctl	r2,ipending
80200114:	e0bffe15 	stw	r2,-8(fp)

  return active;
80200118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
8020011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
80200120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
80200124:	00800044 	movi	r2,1
80200128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
8020012c:	e0fffb17 	ldw	r3,-20(fp)
80200130:	e0bffc17 	ldw	r2,-16(fp)
80200134:	1884703a 	and	r2,r3,r2
80200138:	10001426 	beq	r2,zero,8020018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
8020013c:	00a00874 	movhi	r2,32801
80200140:	10916604 	addi	r2,r2,17816
80200144:	e0fffd17 	ldw	r3,-12(fp)
80200148:	180690fa 	slli	r3,r3,3
8020014c:	10c5883a 	add	r2,r2,r3
80200150:	10c00017 	ldw	r3,0(r2)
80200154:	00a00874 	movhi	r2,32801
80200158:	10916604 	addi	r2,r2,17816
8020015c:	e13ffd17 	ldw	r4,-12(fp)
80200160:	200890fa 	slli	r4,r4,3
80200164:	1105883a 	add	r2,r2,r4
80200168:	10800104 	addi	r2,r2,4
8020016c:	10800017 	ldw	r2,0(r2)
80200170:	1009883a 	mov	r4,r2
80200174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
80200178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
8020017c:	0005313a 	rdctl	r2,ipending
80200180:	e0bfff15 	stw	r2,-4(fp)

  return active;
80200184:	e0bfff17 	ldw	r2,-4(fp)
80200188:	00000706 	br	802001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
8020018c:	e0bffc17 	ldw	r2,-16(fp)
80200190:	1085883a 	add	r2,r2,r2
80200194:	e0bffc15 	stw	r2,-16(fp)
      i++;
80200198:	e0bffd17 	ldw	r2,-12(fp)
8020019c:	10800044 	addi	r2,r2,1
802001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
802001a4:	003fe106 	br	8020012c <__reset+0xfa1e012c>

    active = alt_irq_pending ();
802001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
802001ac:	e0bffb17 	ldw	r2,-20(fp)
802001b0:	103fdb1e 	bne	r2,zero,80200120 <__reset+0xfa1e0120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
802001b4:	0001883a 	nop
}
802001b8:	0001883a 	nop
802001bc:	e037883a 	mov	sp,fp
802001c0:	dfc00117 	ldw	ra,4(sp)
802001c4:	df000017 	ldw	fp,0(sp)
802001c8:	dec00204 	addi	sp,sp,8
802001cc:	f800283a 	ret

802001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
802001d0:	defffb04 	addi	sp,sp,-20
802001d4:	dfc00415 	stw	ra,16(sp)
802001d8:	df000315 	stw	fp,12(sp)
802001dc:	df000304 	addi	fp,sp,12
802001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
802001e4:	000531fa 	rdctl	r2,exception
802001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
802001ec:	e0bffd17 	ldw	r2,-12(fp)
802001f0:	10801f0c 	andi	r2,r2,124
802001f4:	1004d0ba 	srli	r2,r2,2
802001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
802001fc:	0005333a 	rdctl	r2,badaddr
80200200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
80200204:	d0a02017 	ldw	r2,-32640(gp)
80200208:	10000726 	beq	r2,zero,80200228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
8020020c:	d0a02017 	ldw	r2,-32640(gp)
80200210:	e0fffd17 	ldw	r3,-12(fp)
80200214:	e1bffe17 	ldw	r6,-8(fp)
80200218:	e17fff17 	ldw	r5,-4(fp)
8020021c:	1809883a 	mov	r4,r3
80200220:	103ee83a 	callr	r2
80200224:	00000206 	br	80200230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
80200228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
8020022c:	0005883a 	mov	r2,zero
}
80200230:	e037883a 	mov	sp,fp
80200234:	dfc00117 	ldw	ra,4(sp)
80200238:	df000017 	ldw	fp,0(sp)
8020023c:	dec00204 	addi	sp,sp,8
80200240:	f800283a 	ret

Disassembly of section .text:

80200244 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
80200244:	06e00bb4 	movhi	sp,32814
    ori sp, sp, %lo(__alt_stack_pointer)
80200248:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
8020024c:	06a00874 	movhi	gp,32801
    ori gp, gp, %lo(_gp)
80200250:	d6b11b14 	ori	gp,gp,50284
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
80200254:	00a00874 	movhi	r2,32801
    ori r2, r2, %lo(__bss_start)
80200258:	10912d14 	ori	r2,r2,17588

    movhi r3, %hi(__bss_end)
8020025c:	00e00874 	movhi	r3,32801
    ori r3, r3, %lo(__bss_end)
80200260:	18d1a614 	ori	r3,r3,18072

    beq r2, r3, 1f
80200264:	10c00326 	beq	r2,r3,80200274 <_start+0x30>

0:
    stw zero, (r2)
80200268:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
8020026c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
80200270:	10fffd36 	bltu	r2,r3,80200268 <__reset+0xfa1e0268>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
80200274:	020d3c00 	call	8020d3c0 <alt_main>

80200278 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
80200278:	003fff06 	br	80200278 <__reset+0xfa1e0278>

8020027c <main>:
void vUartWriteBuffer(char *pcTxBuffer, alt_u16 usiLength);
char cUartReadChar();
void vUartReadBuffer(char *pcRxBuffer, alt_u16 usiLength);

int main()
{
8020027c:	defffd04 	addi	sp,sp,-12
80200280:	dfc00215 	stw	ra,8(sp)
80200284:	df000115 	stw	fp,4(sp)
80200288:	df000104 	addi	fp,sp,4
  printf("Hello from Nios II!\n");
8020028c:	01200874 	movhi	r4,32801
80200290:	21089204 	addi	r4,r4,8776
80200294:	02007980 	call	80200798 <puts>

  volatile TUartModule *vpxUartModule = (TUartModule *)UART_MODULE_TOP_0_BASE;
80200298:	00a08034 	movhi	r2,33280
8020029c:	10830004 	addi	r2,r2,3072
802002a0:	e0bfff15 	stw	r2,-4(fp)
//  printf("0x%08lX \n", *((alt_u32*)(UART_MODULE_TOP_0_BASE + 28)));

  while (1) {


	  usiStringLength = sprintf(cTxBuffer, "Hello from Nios II!\n");
802002a4:	00e00874 	movhi	r3,32801
802002a8:	18d14604 	addi	r3,r3,17688
802002ac:	00a00874 	movhi	r2,32801
802002b0:	10889704 	addi	r2,r2,8796
802002b4:	1009883a 	mov	r4,r2
802002b8:	00800544 	movi	r2,21
802002bc:	100d883a 	mov	r6,r2
802002c0:	200b883a 	mov	r5,r4
802002c4:	1809883a 	mov	r4,r3
802002c8:	02005040 	call	80200504 <memcpy>
802002cc:	00800504 	movi	r2,20
802002d0:	d0a0120d 	sth	r2,-32696(gp)
	  vUartWriteBuffer(cTxBuffer, usiStringLength);
802002d4:	d0a0120b 	ldhu	r2,-32696(gp)
802002d8:	10bfffcc 	andi	r2,r2,65535
802002dc:	100b883a 	mov	r5,r2
802002e0:	01200874 	movhi	r4,32801
802002e4:	21114604 	addi	r4,r4,17688
802002e8:	02003940 	call	80200394 <vUartWriteBuffer>
//	  printf(" %c", cRxBuffer[13]);
//	  printf(" %c", cRxBuffer[14]);
//
//	  printf("\n");

	  printf("Incoming data: ");
802002ec:	01200874 	movhi	r4,32801
802002f0:	21089d04 	addi	r4,r4,8820
802002f4:	020067c0 	call	8020067c <printf>
	  while (vpxUartModule->uliUartRxUsedw > 0) {
802002f8:	00000a06 	br	80200324 <main+0xa8>
		  printf(" %c", cUartReadChar());
802002fc:	02004200 	call	80200420 <cUartReadChar>
80200300:	10803fcc 	andi	r2,r2,255
80200304:	1080201c 	xori	r2,r2,128
80200308:	10bfe004 	addi	r2,r2,-128
8020030c:	100b883a 	mov	r5,r2
80200310:	01200874 	movhi	r4,32801
80200314:	2108a104 	addi	r4,r4,8836
80200318:	020067c0 	call	8020067c <printf>
		  usleep(100);
8020031c:	01001904 	movi	r4,100
80200320:	020d6d00 	call	8020d6d0 <usleep>
//	  printf(" %c", cRxBuffer[14]);
//
//	  printf("\n");

	  printf("Incoming data: ");
	  while (vpxUartModule->uliUartRxUsedw > 0) {
80200324:	e0bfff17 	ldw	r2,-4(fp)
80200328:	10800717 	ldw	r2,28(r2)
8020032c:	103ff31e 	bne	r2,zero,802002fc <__reset+0xfa1e02fc>
		  printf(" %c", cUartReadChar());
		  usleep(100);
	  }
	  printf("\n");
80200330:	01000284 	movi	r4,10
80200334:	02006c00 	call	802006c0 <putchar>
//	  vpxUartModule->uliUartTxWrdata = (alt_u32)'o';
//	  vpxUartModule->bUartTxWrreq = true;
//	  vpxUartModule->uliUartTxWrdata = (alt_u32)'\n';
//	  vpxUartModule->bUartTxWrreq = true;

	  usleep(1000000);
80200338:	010003f4 	movhi	r4,15
8020033c:	21109004 	addi	r4,r4,16960
80200340:	020d6d00 	call	8020d6d0 <usleep>

  }
80200344:	003fd706 	br	802002a4 <__reset+0xfa1e02a4>

80200348 <vUartWriteChar>:

  return 0;
}

void vUartWriteChar(char cTxChar){
80200348:	defffd04 	addi	sp,sp,-12
8020034c:	df000215 	stw	fp,8(sp)
80200350:	df000204 	addi	fp,sp,8
80200354:	2005883a 	mov	r2,r4
80200358:	e0bfff05 	stb	r2,-4(fp)
	volatile TUartModule *vpxUartModule = (TUartModule *)UART_MODULE_TOP_0_BASE;
8020035c:	00a08034 	movhi	r2,33280
80200360:	10830004 	addi	r2,r2,3072
80200364:	e0bffe15 	stw	r2,-8(fp)
	vpxUartModule->uliUartTxWrdata = (alt_u32)cTxChar;
80200368:	e0ffff07 	ldb	r3,-4(fp)
8020036c:	e0bffe17 	ldw	r2,-8(fp)
80200370:	10c00115 	stw	r3,4(r2)
	vpxUartModule->bUartTxWrreq = true;
80200374:	e0bffe17 	ldw	r2,-8(fp)
80200378:	00c00044 	movi	r3,1
8020037c:	10c00015 	stw	r3,0(r2)
}
80200380:	0001883a 	nop
80200384:	e037883a 	mov	sp,fp
80200388:	df000017 	ldw	fp,0(sp)
8020038c:	dec00104 	addi	sp,sp,4
80200390:	f800283a 	ret

80200394 <vUartWriteBuffer>:

void vUartWriteBuffer(char *pcTxBuffer, alt_u16 usiLength){
80200394:	defffb04 	addi	sp,sp,-20
80200398:	df000415 	stw	fp,16(sp)
8020039c:	df000404 	addi	fp,sp,16
802003a0:	e13ffe15 	stw	r4,-8(fp)
802003a4:	2805883a 	mov	r2,r5
802003a8:	e0bfff0d 	sth	r2,-4(fp)
	volatile TUartModule *vpxUartModule = (TUartModule *)UART_MODULE_TOP_0_BASE;
802003ac:	00a08034 	movhi	r2,33280
802003b0:	10830004 	addi	r2,r2,3072
802003b4:	e0bffd15 	stw	r2,-12(fp)
	alt_u16 usiCnt = 0;
802003b8:	e03ffc0d 	sth	zero,-16(fp)
	for (usiCnt = 0; usiCnt < usiLength; usiCnt++) {
802003bc:	e03ffc0d 	sth	zero,-16(fp)
802003c0:	00000f06 	br	80200400 <vUartWriteBuffer+0x6c>
		vpxUartModule->uliUartTxWrdata = (alt_u32)(pcTxBuffer[usiCnt]);
802003c4:	e0bffc0b 	ldhu	r2,-16(fp)
802003c8:	e0fffe17 	ldw	r3,-8(fp)
802003cc:	1885883a 	add	r2,r3,r2
802003d0:	10800003 	ldbu	r2,0(r2)
802003d4:	10c03fcc 	andi	r3,r2,255
802003d8:	18c0201c 	xori	r3,r3,128
802003dc:	18ffe004 	addi	r3,r3,-128
802003e0:	e0bffd17 	ldw	r2,-12(fp)
802003e4:	10c00115 	stw	r3,4(r2)
		vpxUartModule->bUartTxWrreq = true;
802003e8:	e0bffd17 	ldw	r2,-12(fp)
802003ec:	00c00044 	movi	r3,1
802003f0:	10c00015 	stw	r3,0(r2)
}

void vUartWriteBuffer(char *pcTxBuffer, alt_u16 usiLength){
	volatile TUartModule *vpxUartModule = (TUartModule *)UART_MODULE_TOP_0_BASE;
	alt_u16 usiCnt = 0;
	for (usiCnt = 0; usiCnt < usiLength; usiCnt++) {
802003f4:	e0bffc0b 	ldhu	r2,-16(fp)
802003f8:	10800044 	addi	r2,r2,1
802003fc:	e0bffc0d 	sth	r2,-16(fp)
80200400:	e0fffc0b 	ldhu	r3,-16(fp)
80200404:	e0bfff0b 	ldhu	r2,-4(fp)
80200408:	18bfee36 	bltu	r3,r2,802003c4 <__reset+0xfa1e03c4>
		vpxUartModule->uliUartTxWrdata = (alt_u32)(pcTxBuffer[usiCnt]);
		vpxUartModule->bUartTxWrreq = true;
	}
}
8020040c:	0001883a 	nop
80200410:	e037883a 	mov	sp,fp
80200414:	df000017 	ldw	fp,0(sp)
80200418:	dec00104 	addi	sp,sp,4
8020041c:	f800283a 	ret

80200420 <cUartReadChar>:

char cUartReadChar(){
80200420:	defffd04 	addi	sp,sp,-12
80200424:	df000215 	stw	fp,8(sp)
80200428:	df000204 	addi	fp,sp,8
	volatile TUartModule *vpxUartModule = (TUartModule *)UART_MODULE_TOP_0_BASE;
8020042c:	00a08034 	movhi	r2,33280
80200430:	10830004 	addi	r2,r2,3072
80200434:	e0bffe15 	stw	r2,-8(fp)
	char cRxChar;
	while (vpxUartModule->bUartRxEmpty){}
80200438:	0001883a 	nop
8020043c:	e0bffe17 	ldw	r2,-8(fp)
80200440:	10800517 	ldw	r2,20(r2)
80200444:	103ffd1e 	bne	r2,zero,8020043c <__reset+0xfa1e043c>
	cRxChar = (char)((vpxUartModule->uliUartRxRddata) & 0xFF);
80200448:	e0bffe17 	ldw	r2,-8(fp)
8020044c:	10800617 	ldw	r2,24(r2)
80200450:	e0bfff05 	stb	r2,-4(fp)
	vpxUartModule->bUartRxRdreq = true;
80200454:	e0bffe17 	ldw	r2,-8(fp)
80200458:	00c00044 	movi	r3,1
8020045c:	10c00415 	stw	r3,16(r2)
	return cRxChar;
80200460:	e0bfff03 	ldbu	r2,-4(fp)
}
80200464:	e037883a 	mov	sp,fp
80200468:	df000017 	ldw	fp,0(sp)
8020046c:	dec00104 	addi	sp,sp,4
80200470:	f800283a 	ret

80200474 <vUartReadBuffer>:

void vUartReadBuffer(char *pcRxBuffer, alt_u16 usiLength){
80200474:	defffb04 	addi	sp,sp,-20
80200478:	df000415 	stw	fp,16(sp)
8020047c:	df000404 	addi	fp,sp,16
80200480:	e13ffe15 	stw	r4,-8(fp)
80200484:	2805883a 	mov	r2,r5
80200488:	e0bfff0d 	sth	r2,-4(fp)
	volatile TUartModule *vpxUartModule = (TUartModule *)UART_MODULE_TOP_0_BASE;
8020048c:	00a08034 	movhi	r2,33280
80200490:	10830004 	addi	r2,r2,3072
80200494:	e0bffd15 	stw	r2,-12(fp)
	alt_u16 usiCnt = 0;
80200498:	e03ffc0d 	sth	zero,-16(fp)
	for (usiCnt = 0; usiCnt < usiLength; usiCnt++) {
8020049c:	e03ffc0d 	sth	zero,-16(fp)
802004a0:	00001006 	br	802004e4 <vUartReadBuffer+0x70>
		while (vpxUartModule->bUartRxEmpty){}
802004a4:	0001883a 	nop
802004a8:	e0bffd17 	ldw	r2,-12(fp)
802004ac:	10800517 	ldw	r2,20(r2)
802004b0:	103ffd1e 	bne	r2,zero,802004a8 <__reset+0xfa1e04a8>
		pcRxBuffer[usiCnt] = (char)((vpxUartModule->uliUartRxRddata) & 0xFF);
802004b4:	e0bffc0b 	ldhu	r2,-16(fp)
802004b8:	e0fffe17 	ldw	r3,-8(fp)
802004bc:	1885883a 	add	r2,r3,r2
802004c0:	e0fffd17 	ldw	r3,-12(fp)
802004c4:	18c00617 	ldw	r3,24(r3)
802004c8:	10c00005 	stb	r3,0(r2)
		vpxUartModule->bUartRxRdreq = true;
802004cc:	e0bffd17 	ldw	r2,-12(fp)
802004d0:	00c00044 	movi	r3,1
802004d4:	10c00415 	stw	r3,16(r2)
}

void vUartReadBuffer(char *pcRxBuffer, alt_u16 usiLength){
	volatile TUartModule *vpxUartModule = (TUartModule *)UART_MODULE_TOP_0_BASE;
	alt_u16 usiCnt = 0;
	for (usiCnt = 0; usiCnt < usiLength; usiCnt++) {
802004d8:	e0bffc0b 	ldhu	r2,-16(fp)
802004dc:	10800044 	addi	r2,r2,1
802004e0:	e0bffc0d 	sth	r2,-16(fp)
802004e4:	e0fffc0b 	ldhu	r3,-16(fp)
802004e8:	e0bfff0b 	ldhu	r2,-4(fp)
802004ec:	18bfed36 	bltu	r3,r2,802004a4 <__reset+0xfa1e04a4>
		while (vpxUartModule->bUartRxEmpty){}
		pcRxBuffer[usiCnt] = (char)((vpxUartModule->uliUartRxRddata) & 0xFF);
		vpxUartModule->bUartRxRdreq = true;
	}
}
802004f0:	0001883a 	nop
802004f4:	e037883a 	mov	sp,fp
802004f8:	df000017 	ldw	fp,0(sp)
802004fc:	dec00104 	addi	sp,sp,4
80200500:	f800283a 	ret

80200504 <memcpy>:
80200504:	defffd04 	addi	sp,sp,-12
80200508:	dfc00215 	stw	ra,8(sp)
8020050c:	dc400115 	stw	r17,4(sp)
80200510:	dc000015 	stw	r16,0(sp)
80200514:	00c003c4 	movi	r3,15
80200518:	2005883a 	mov	r2,r4
8020051c:	1980452e 	bgeu	r3,r6,80200634 <memcpy+0x130>
80200520:	2906b03a 	or	r3,r5,r4
80200524:	18c000cc 	andi	r3,r3,3
80200528:	1800441e 	bne	r3,zero,8020063c <memcpy+0x138>
8020052c:	347ffc04 	addi	r17,r6,-16
80200530:	8822d13a 	srli	r17,r17,4
80200534:	28c00104 	addi	r3,r5,4
80200538:	23400104 	addi	r13,r4,4
8020053c:	8820913a 	slli	r16,r17,4
80200540:	2b000204 	addi	r12,r5,8
80200544:	22c00204 	addi	r11,r4,8
80200548:	84000504 	addi	r16,r16,20
8020054c:	2a800304 	addi	r10,r5,12
80200550:	22400304 	addi	r9,r4,12
80200554:	2c21883a 	add	r16,r5,r16
80200558:	2811883a 	mov	r8,r5
8020055c:	200f883a 	mov	r7,r4
80200560:	41000017 	ldw	r4,0(r8)
80200564:	1fc00017 	ldw	ra,0(r3)
80200568:	63c00017 	ldw	r15,0(r12)
8020056c:	39000015 	stw	r4,0(r7)
80200570:	53800017 	ldw	r14,0(r10)
80200574:	6fc00015 	stw	ra,0(r13)
80200578:	5bc00015 	stw	r15,0(r11)
8020057c:	4b800015 	stw	r14,0(r9)
80200580:	18c00404 	addi	r3,r3,16
80200584:	39c00404 	addi	r7,r7,16
80200588:	42000404 	addi	r8,r8,16
8020058c:	6b400404 	addi	r13,r13,16
80200590:	63000404 	addi	r12,r12,16
80200594:	5ac00404 	addi	r11,r11,16
80200598:	52800404 	addi	r10,r10,16
8020059c:	4a400404 	addi	r9,r9,16
802005a0:	1c3fef1e 	bne	r3,r16,80200560 <__reset+0xfa1e0560>
802005a4:	89c00044 	addi	r7,r17,1
802005a8:	380e913a 	slli	r7,r7,4
802005ac:	310003cc 	andi	r4,r6,15
802005b0:	02c000c4 	movi	r11,3
802005b4:	11c7883a 	add	r3,r2,r7
802005b8:	29cb883a 	add	r5,r5,r7
802005bc:	5900212e 	bgeu	r11,r4,80200644 <memcpy+0x140>
802005c0:	1813883a 	mov	r9,r3
802005c4:	2811883a 	mov	r8,r5
802005c8:	200f883a 	mov	r7,r4
802005cc:	42800017 	ldw	r10,0(r8)
802005d0:	4a400104 	addi	r9,r9,4
802005d4:	39ffff04 	addi	r7,r7,-4
802005d8:	4abfff15 	stw	r10,-4(r9)
802005dc:	42000104 	addi	r8,r8,4
802005e0:	59fffa36 	bltu	r11,r7,802005cc <__reset+0xfa1e05cc>
802005e4:	213fff04 	addi	r4,r4,-4
802005e8:	2008d0ba 	srli	r4,r4,2
802005ec:	318000cc 	andi	r6,r6,3
802005f0:	21000044 	addi	r4,r4,1
802005f4:	2109883a 	add	r4,r4,r4
802005f8:	2109883a 	add	r4,r4,r4
802005fc:	1907883a 	add	r3,r3,r4
80200600:	290b883a 	add	r5,r5,r4
80200604:	30000626 	beq	r6,zero,80200620 <memcpy+0x11c>
80200608:	198d883a 	add	r6,r3,r6
8020060c:	29c00003 	ldbu	r7,0(r5)
80200610:	18c00044 	addi	r3,r3,1
80200614:	29400044 	addi	r5,r5,1
80200618:	19ffffc5 	stb	r7,-1(r3)
8020061c:	19bffb1e 	bne	r3,r6,8020060c <__reset+0xfa1e060c>
80200620:	dfc00217 	ldw	ra,8(sp)
80200624:	dc400117 	ldw	r17,4(sp)
80200628:	dc000017 	ldw	r16,0(sp)
8020062c:	dec00304 	addi	sp,sp,12
80200630:	f800283a 	ret
80200634:	2007883a 	mov	r3,r4
80200638:	003ff206 	br	80200604 <__reset+0xfa1e0604>
8020063c:	2007883a 	mov	r3,r4
80200640:	003ff106 	br	80200608 <__reset+0xfa1e0608>
80200644:	200d883a 	mov	r6,r4
80200648:	003fee06 	br	80200604 <__reset+0xfa1e0604>

8020064c <_printf_r>:
8020064c:	defffd04 	addi	sp,sp,-12
80200650:	2805883a 	mov	r2,r5
80200654:	dfc00015 	stw	ra,0(sp)
80200658:	d9800115 	stw	r6,4(sp)
8020065c:	d9c00215 	stw	r7,8(sp)
80200660:	21400217 	ldw	r5,8(r4)
80200664:	d9c00104 	addi	r7,sp,4
80200668:	100d883a 	mov	r6,r2
8020066c:	02008440 	call	80200844 <___vfprintf_internal_r>
80200670:	dfc00017 	ldw	ra,0(sp)
80200674:	dec00304 	addi	sp,sp,12
80200678:	f800283a 	ret

8020067c <printf>:
8020067c:	defffc04 	addi	sp,sp,-16
80200680:	dfc00015 	stw	ra,0(sp)
80200684:	d9400115 	stw	r5,4(sp)
80200688:	d9800215 	stw	r6,8(sp)
8020068c:	d9c00315 	stw	r7,12(sp)
80200690:	00a00874 	movhi	r2,32801
80200694:	10911c04 	addi	r2,r2,17520
80200698:	10800017 	ldw	r2,0(r2)
8020069c:	200b883a 	mov	r5,r4
802006a0:	d9800104 	addi	r6,sp,4
802006a4:	11000217 	ldw	r4,8(r2)
802006a8:	0202a3c0 	call	80202a3c <__vfprintf_internal>
802006ac:	dfc00017 	ldw	ra,0(sp)
802006b0:	dec00404 	addi	sp,sp,16
802006b4:	f800283a 	ret

802006b8 <_putchar_r>:
802006b8:	21800217 	ldw	r6,8(r4)
802006bc:	02073b81 	jmpi	802073b8 <_putc_r>

802006c0 <putchar>:
802006c0:	00a00874 	movhi	r2,32801
802006c4:	10911c04 	addi	r2,r2,17520
802006c8:	200b883a 	mov	r5,r4
802006cc:	11000017 	ldw	r4,0(r2)
802006d0:	21800217 	ldw	r6,8(r4)
802006d4:	02073b81 	jmpi	802073b8 <_putc_r>

802006d8 <_puts_r>:
802006d8:	defff604 	addi	sp,sp,-40
802006dc:	dc000715 	stw	r16,28(sp)
802006e0:	2021883a 	mov	r16,r4
802006e4:	2809883a 	mov	r4,r5
802006e8:	dc400815 	stw	r17,32(sp)
802006ec:	dfc00915 	stw	ra,36(sp)
802006f0:	2823883a 	mov	r17,r5
802006f4:	02007ac0 	call	802007ac <strlen>
802006f8:	10c00044 	addi	r3,r2,1
802006fc:	d8800115 	stw	r2,4(sp)
80200700:	00a00874 	movhi	r2,32801
80200704:	1088a204 	addi	r2,r2,8840
80200708:	d8800215 	stw	r2,8(sp)
8020070c:	00800044 	movi	r2,1
80200710:	d8800315 	stw	r2,12(sp)
80200714:	00800084 	movi	r2,2
80200718:	dc400015 	stw	r17,0(sp)
8020071c:	d8c00615 	stw	r3,24(sp)
80200720:	dec00415 	stw	sp,16(sp)
80200724:	d8800515 	stw	r2,20(sp)
80200728:	80000226 	beq	r16,zero,80200734 <_puts_r+0x5c>
8020072c:	80800e17 	ldw	r2,56(r16)
80200730:	10001426 	beq	r2,zero,80200784 <_puts_r+0xac>
80200734:	81400217 	ldw	r5,8(r16)
80200738:	2880030b 	ldhu	r2,12(r5)
8020073c:	10c8000c 	andi	r3,r2,8192
80200740:	1800061e 	bne	r3,zero,8020075c <_puts_r+0x84>
80200744:	29001917 	ldw	r4,100(r5)
80200748:	00f7ffc4 	movi	r3,-8193
8020074c:	10880014 	ori	r2,r2,8192
80200750:	20c6703a 	and	r3,r4,r3
80200754:	2880030d 	sth	r2,12(r5)
80200758:	28c01915 	stw	r3,100(r5)
8020075c:	d9800404 	addi	r6,sp,16
80200760:	8009883a 	mov	r4,r16
80200764:	0204f6c0 	call	80204f6c <__sfvwrite_r>
80200768:	1000091e 	bne	r2,zero,80200790 <_puts_r+0xb8>
8020076c:	00800284 	movi	r2,10
80200770:	dfc00917 	ldw	ra,36(sp)
80200774:	dc400817 	ldw	r17,32(sp)
80200778:	dc000717 	ldw	r16,28(sp)
8020077c:	dec00a04 	addi	sp,sp,40
80200780:	f800283a 	ret
80200784:	8009883a 	mov	r4,r16
80200788:	0204ae80 	call	80204ae8 <__sinit>
8020078c:	003fe906 	br	80200734 <__reset+0xfa1e0734>
80200790:	00bfffc4 	movi	r2,-1
80200794:	003ff606 	br	80200770 <__reset+0xfa1e0770>

80200798 <puts>:
80200798:	00a00874 	movhi	r2,32801
8020079c:	10911c04 	addi	r2,r2,17520
802007a0:	200b883a 	mov	r5,r4
802007a4:	11000017 	ldw	r4,0(r2)
802007a8:	02006d81 	jmpi	802006d8 <_puts_r>

802007ac <strlen>:
802007ac:	208000cc 	andi	r2,r4,3
802007b0:	10002026 	beq	r2,zero,80200834 <strlen+0x88>
802007b4:	20800007 	ldb	r2,0(r4)
802007b8:	10002026 	beq	r2,zero,8020083c <strlen+0x90>
802007bc:	2005883a 	mov	r2,r4
802007c0:	00000206 	br	802007cc <strlen+0x20>
802007c4:	10c00007 	ldb	r3,0(r2)
802007c8:	18001826 	beq	r3,zero,8020082c <strlen+0x80>
802007cc:	10800044 	addi	r2,r2,1
802007d0:	10c000cc 	andi	r3,r2,3
802007d4:	183ffb1e 	bne	r3,zero,802007c4 <__reset+0xfa1e07c4>
802007d8:	10c00017 	ldw	r3,0(r2)
802007dc:	01ffbff4 	movhi	r7,65279
802007e0:	39ffbfc4 	addi	r7,r7,-257
802007e4:	00ca303a 	nor	r5,zero,r3
802007e8:	01a02074 	movhi	r6,32897
802007ec:	19c7883a 	add	r3,r3,r7
802007f0:	31a02004 	addi	r6,r6,-32640
802007f4:	1946703a 	and	r3,r3,r5
802007f8:	1986703a 	and	r3,r3,r6
802007fc:	1800091e 	bne	r3,zero,80200824 <strlen+0x78>
80200800:	10800104 	addi	r2,r2,4
80200804:	10c00017 	ldw	r3,0(r2)
80200808:	19cb883a 	add	r5,r3,r7
8020080c:	00c6303a 	nor	r3,zero,r3
80200810:	28c6703a 	and	r3,r5,r3
80200814:	1986703a 	and	r3,r3,r6
80200818:	183ff926 	beq	r3,zero,80200800 <__reset+0xfa1e0800>
8020081c:	00000106 	br	80200824 <strlen+0x78>
80200820:	10800044 	addi	r2,r2,1
80200824:	10c00007 	ldb	r3,0(r2)
80200828:	183ffd1e 	bne	r3,zero,80200820 <__reset+0xfa1e0820>
8020082c:	1105c83a 	sub	r2,r2,r4
80200830:	f800283a 	ret
80200834:	2005883a 	mov	r2,r4
80200838:	003fe706 	br	802007d8 <__reset+0xfa1e07d8>
8020083c:	0005883a 	mov	r2,zero
80200840:	f800283a 	ret

80200844 <___vfprintf_internal_r>:
80200844:	deffb804 	addi	sp,sp,-288
80200848:	dfc04715 	stw	ra,284(sp)
8020084c:	ddc04515 	stw	r23,276(sp)
80200850:	dd404315 	stw	r21,268(sp)
80200854:	d9002c15 	stw	r4,176(sp)
80200858:	282f883a 	mov	r23,r5
8020085c:	302b883a 	mov	r21,r6
80200860:	d9c02d15 	stw	r7,180(sp)
80200864:	df004615 	stw	fp,280(sp)
80200868:	dd804415 	stw	r22,272(sp)
8020086c:	dd004215 	stw	r20,264(sp)
80200870:	dcc04115 	stw	r19,260(sp)
80200874:	dc804015 	stw	r18,256(sp)
80200878:	dc403f15 	stw	r17,252(sp)
8020087c:	dc003e15 	stw	r16,248(sp)
80200880:	020565c0 	call	8020565c <_localeconv_r>
80200884:	10800017 	ldw	r2,0(r2)
80200888:	1009883a 	mov	r4,r2
8020088c:	d8803415 	stw	r2,208(sp)
80200890:	02007ac0 	call	802007ac <strlen>
80200894:	d8803715 	stw	r2,220(sp)
80200898:	d8802c17 	ldw	r2,176(sp)
8020089c:	10000226 	beq	r2,zero,802008a8 <___vfprintf_internal_r+0x64>
802008a0:	10800e17 	ldw	r2,56(r2)
802008a4:	1000f926 	beq	r2,zero,80200c8c <___vfprintf_internal_r+0x448>
802008a8:	b880030b 	ldhu	r2,12(r23)
802008ac:	10c8000c 	andi	r3,r2,8192
802008b0:	1800061e 	bne	r3,zero,802008cc <___vfprintf_internal_r+0x88>
802008b4:	b9001917 	ldw	r4,100(r23)
802008b8:	00f7ffc4 	movi	r3,-8193
802008bc:	10880014 	ori	r2,r2,8192
802008c0:	20c6703a 	and	r3,r4,r3
802008c4:	b880030d 	sth	r2,12(r23)
802008c8:	b8c01915 	stw	r3,100(r23)
802008cc:	10c0020c 	andi	r3,r2,8
802008d0:	1800c126 	beq	r3,zero,80200bd8 <___vfprintf_internal_r+0x394>
802008d4:	b8c00417 	ldw	r3,16(r23)
802008d8:	1800bf26 	beq	r3,zero,80200bd8 <___vfprintf_internal_r+0x394>
802008dc:	1080068c 	andi	r2,r2,26
802008e0:	00c00284 	movi	r3,10
802008e4:	10c0c426 	beq	r2,r3,80200bf8 <___vfprintf_internal_r+0x3b4>
802008e8:	d8c00404 	addi	r3,sp,16
802008ec:	05200874 	movhi	r20,32801
802008f0:	d9001e04 	addi	r4,sp,120
802008f4:	a508b384 	addi	r20,r20,8910
802008f8:	d8c01e15 	stw	r3,120(sp)
802008fc:	d8002015 	stw	zero,128(sp)
80200900:	d8001f15 	stw	zero,124(sp)
80200904:	d8003315 	stw	zero,204(sp)
80200908:	d8003615 	stw	zero,216(sp)
8020090c:	d8003815 	stw	zero,224(sp)
80200910:	1811883a 	mov	r8,r3
80200914:	d8003915 	stw	zero,228(sp)
80200918:	d8003a15 	stw	zero,232(sp)
8020091c:	d8002f15 	stw	zero,188(sp)
80200920:	d9002815 	stw	r4,160(sp)
80200924:	a8800007 	ldb	r2,0(r21)
80200928:	10027b26 	beq	r2,zero,80201318 <___vfprintf_internal_r+0xad4>
8020092c:	00c00944 	movi	r3,37
80200930:	a821883a 	mov	r16,r21
80200934:	10c0021e 	bne	r2,r3,80200940 <___vfprintf_internal_r+0xfc>
80200938:	00001406 	br	8020098c <___vfprintf_internal_r+0x148>
8020093c:	10c00326 	beq	r2,r3,8020094c <___vfprintf_internal_r+0x108>
80200940:	84000044 	addi	r16,r16,1
80200944:	80800007 	ldb	r2,0(r16)
80200948:	103ffc1e 	bne	r2,zero,8020093c <__reset+0xfa1e093c>
8020094c:	8563c83a 	sub	r17,r16,r21
80200950:	88000e26 	beq	r17,zero,8020098c <___vfprintf_internal_r+0x148>
80200954:	d8c02017 	ldw	r3,128(sp)
80200958:	d8801f17 	ldw	r2,124(sp)
8020095c:	45400015 	stw	r21,0(r8)
80200960:	1c47883a 	add	r3,r3,r17
80200964:	10800044 	addi	r2,r2,1
80200968:	d8c02015 	stw	r3,128(sp)
8020096c:	44400115 	stw	r17,4(r8)
80200970:	d8801f15 	stw	r2,124(sp)
80200974:	00c001c4 	movi	r3,7
80200978:	1880a716 	blt	r3,r2,80200c18 <___vfprintf_internal_r+0x3d4>
8020097c:	42000204 	addi	r8,r8,8
80200980:	d9402f17 	ldw	r5,188(sp)
80200984:	2c4b883a 	add	r5,r5,r17
80200988:	d9402f15 	stw	r5,188(sp)
8020098c:	80800007 	ldb	r2,0(r16)
80200990:	1000a826 	beq	r2,zero,80200c34 <___vfprintf_internal_r+0x3f0>
80200994:	84400047 	ldb	r17,1(r16)
80200998:	00bfffc4 	movi	r2,-1
8020099c:	85400044 	addi	r21,r16,1
802009a0:	d8002785 	stb	zero,158(sp)
802009a4:	0007883a 	mov	r3,zero
802009a8:	000f883a 	mov	r7,zero
802009ac:	d8802915 	stw	r2,164(sp)
802009b0:	d8003115 	stw	zero,196(sp)
802009b4:	0025883a 	mov	r18,zero
802009b8:	01401604 	movi	r5,88
802009bc:	01800244 	movi	r6,9
802009c0:	02800a84 	movi	r10,42
802009c4:	02401b04 	movi	r9,108
802009c8:	ad400044 	addi	r21,r21,1
802009cc:	88bff804 	addi	r2,r17,-32
802009d0:	28830436 	bltu	r5,r2,802015e4 <___vfprintf_internal_r+0xda0>
802009d4:	100490ba 	slli	r2,r2,2
802009d8:	01200834 	movhi	r4,32800
802009dc:	21027b04 	addi	r4,r4,2540
802009e0:	1105883a 	add	r2,r2,r4
802009e4:	10800017 	ldw	r2,0(r2)
802009e8:	1000683a 	jmp	r2
802009ec:	80201504 	addi	zero,r16,-32684
802009f0:	802015e4 	muli	zero,r16,-32681
802009f4:	802015e4 	muli	zero,r16,-32681
802009f8:	80201524 	muli	zero,r16,-32684
802009fc:	802015e4 	muli	zero,r16,-32681
80200a00:	802015e4 	muli	zero,r16,-32681
80200a04:	802015e4 	muli	zero,r16,-32681
80200a08:	802015e4 	muli	zero,r16,-32681
80200a0c:	802015e4 	muli	zero,r16,-32681
80200a10:	802015e4 	muli	zero,r16,-32681
80200a14:	80200c98 	cmpnei	zero,r16,-32718
80200a18:	80201440 	call	88020144 <__reset+0x2000144>
80200a1c:	802015e4 	muli	zero,r16,-32681
80200a20:	80200b60 	cmpeqi	zero,r16,-32723
80200a24:	80200cc0 	call	880200cc <__reset+0x20000cc>
80200a28:	802015e4 	muli	zero,r16,-32681
80200a2c:	80200d00 	call	880200d0 <__reset+0x20000d0>
80200a30:	80200d0c 	andi	zero,r16,32820
80200a34:	80200d0c 	andi	zero,r16,32820
80200a38:	80200d0c 	andi	zero,r16,32820
80200a3c:	80200d0c 	andi	zero,r16,32820
80200a40:	80200d0c 	andi	zero,r16,32820
80200a44:	80200d0c 	andi	zero,r16,32820
80200a48:	80200d0c 	andi	zero,r16,32820
80200a4c:	80200d0c 	andi	zero,r16,32820
80200a50:	80200d0c 	andi	zero,r16,32820
80200a54:	802015e4 	muli	zero,r16,-32681
80200a58:	802015e4 	muli	zero,r16,-32681
80200a5c:	802015e4 	muli	zero,r16,-32681
80200a60:	802015e4 	muli	zero,r16,-32681
80200a64:	802015e4 	muli	zero,r16,-32681
80200a68:	802015e4 	muli	zero,r16,-32681
80200a6c:	802015e4 	muli	zero,r16,-32681
80200a70:	802015e4 	muli	zero,r16,-32681
80200a74:	802015e4 	muli	zero,r16,-32681
80200a78:	802015e4 	muli	zero,r16,-32681
80200a7c:	80200d40 	call	880200d4 <__reset+0x20000d4>
80200a80:	80200dfc 	xorhi	zero,r16,32823
80200a84:	802015e4 	muli	zero,r16,-32681
80200a88:	80200dfc 	xorhi	zero,r16,32823
80200a8c:	802015e4 	muli	zero,r16,-32681
80200a90:	802015e4 	muli	zero,r16,-32681
80200a94:	802015e4 	muli	zero,r16,-32681
80200a98:	802015e4 	muli	zero,r16,-32681
80200a9c:	80200e9c 	xori	zero,r16,32826
80200aa0:	802015e4 	muli	zero,r16,-32681
80200aa4:	802015e4 	muli	zero,r16,-32681
80200aa8:	80200ea8 	cmpgeui	zero,r16,32826
80200aac:	802015e4 	muli	zero,r16,-32681
80200ab0:	802015e4 	muli	zero,r16,-32681
80200ab4:	802015e4 	muli	zero,r16,-32681
80200ab8:	802015e4 	muli	zero,r16,-32681
80200abc:	802015e4 	muli	zero,r16,-32681
80200ac0:	80201320 	cmpeqi	zero,r16,-32692
80200ac4:	802015e4 	muli	zero,r16,-32681
80200ac8:	802015e4 	muli	zero,r16,-32681
80200acc:	80201380 	call	88020138 <__reset+0x2000138>
80200ad0:	802015e4 	muli	zero,r16,-32681
80200ad4:	802015e4 	muli	zero,r16,-32681
80200ad8:	802015e4 	muli	zero,r16,-32681
80200adc:	802015e4 	muli	zero,r16,-32681
80200ae0:	802015e4 	muli	zero,r16,-32681
80200ae4:	802015e4 	muli	zero,r16,-32681
80200ae8:	802015e4 	muli	zero,r16,-32681
80200aec:	802015e4 	muli	zero,r16,-32681
80200af0:	802015e4 	muli	zero,r16,-32681
80200af4:	802015e4 	muli	zero,r16,-32681
80200af8:	80201590 	cmplti	zero,r16,-32682
80200afc:	80201530 	cmpltui	zero,r16,32852
80200b00:	80200dfc 	xorhi	zero,r16,32823
80200b04:	80200dfc 	xorhi	zero,r16,32823
80200b08:	80200dfc 	xorhi	zero,r16,32823
80200b0c:	80201540 	call	88020154 <__reset+0x2000154>
80200b10:	80201530 	cmpltui	zero,r16,32852
80200b14:	802015e4 	muli	zero,r16,-32681
80200b18:	802015e4 	muli	zero,r16,-32681
80200b1c:	8020154c 	andi	zero,r16,32853
80200b20:	802015e4 	muli	zero,r16,-32681
80200b24:	8020155c 	xori	zero,r16,32853
80200b28:	80201430 	cmpltui	zero,r16,32848
80200b2c:	80200b6c 	andhi	zero,r16,32813
80200b30:	80201450 	cmplti	zero,r16,-32687
80200b34:	802015e4 	muli	zero,r16,-32681
80200b38:	8020145c 	xori	zero,r16,32849
80200b3c:	802015e4 	muli	zero,r16,-32681
80200b40:	802014b8 	rdprs	zero,r16,-32686
80200b44:	802015e4 	muli	zero,r16,-32681
80200b48:	802015e4 	muli	zero,r16,-32681
80200b4c:	802014c8 	cmpgei	zero,r16,-32685
80200b50:	d9003117 	ldw	r4,196(sp)
80200b54:	d8802d15 	stw	r2,180(sp)
80200b58:	0109c83a 	sub	r4,zero,r4
80200b5c:	d9003115 	stw	r4,196(sp)
80200b60:	94800114 	ori	r18,r18,4
80200b64:	ac400007 	ldb	r17,0(r21)
80200b68:	003f9706 	br	802009c8 <__reset+0xfa1e09c8>
80200b6c:	00800c04 	movi	r2,48
80200b70:	d9002d17 	ldw	r4,180(sp)
80200b74:	d9402917 	ldw	r5,164(sp)
80200b78:	d8802705 	stb	r2,156(sp)
80200b7c:	00801e04 	movi	r2,120
80200b80:	d8802745 	stb	r2,157(sp)
80200b84:	d8002785 	stb	zero,158(sp)
80200b88:	20c00104 	addi	r3,r4,4
80200b8c:	24c00017 	ldw	r19,0(r4)
80200b90:	002d883a 	mov	r22,zero
80200b94:	90800094 	ori	r2,r18,2
80200b98:	28029a16 	blt	r5,zero,80201604 <___vfprintf_internal_r+0xdc0>
80200b9c:	00bfdfc4 	movi	r2,-129
80200ba0:	90a4703a 	and	r18,r18,r2
80200ba4:	d8c02d15 	stw	r3,180(sp)
80200ba8:	94800094 	ori	r18,r18,2
80200bac:	9802871e 	bne	r19,zero,802015cc <___vfprintf_internal_r+0xd88>
80200bb0:	00a00874 	movhi	r2,32801
80200bb4:	1088ac04 	addi	r2,r2,8880
80200bb8:	d8803915 	stw	r2,228(sp)
80200bbc:	04401e04 	movi	r17,120
80200bc0:	d8802917 	ldw	r2,164(sp)
80200bc4:	0039883a 	mov	fp,zero
80200bc8:	1001e926 	beq	r2,zero,80201370 <___vfprintf_internal_r+0xb2c>
80200bcc:	0027883a 	mov	r19,zero
80200bd0:	002d883a 	mov	r22,zero
80200bd4:	00020506 	br	802013ec <___vfprintf_internal_r+0xba8>
80200bd8:	d9002c17 	ldw	r4,176(sp)
80200bdc:	b80b883a 	mov	r5,r23
80200be0:	0202b140 	call	80202b14 <__swsetup_r>
80200be4:	1005ac1e 	bne	r2,zero,80202298 <___vfprintf_internal_r+0x1a54>
80200be8:	b880030b 	ldhu	r2,12(r23)
80200bec:	00c00284 	movi	r3,10
80200bf0:	1080068c 	andi	r2,r2,26
80200bf4:	10ff3c1e 	bne	r2,r3,802008e8 <__reset+0xfa1e08e8>
80200bf8:	b880038f 	ldh	r2,14(r23)
80200bfc:	103f3a16 	blt	r2,zero,802008e8 <__reset+0xfa1e08e8>
80200c00:	d9c02d17 	ldw	r7,180(sp)
80200c04:	d9002c17 	ldw	r4,176(sp)
80200c08:	a80d883a 	mov	r6,r21
80200c0c:	b80b883a 	mov	r5,r23
80200c10:	0202a580 	call	80202a58 <__sbprintf>
80200c14:	00001106 	br	80200c5c <___vfprintf_internal_r+0x418>
80200c18:	d9002c17 	ldw	r4,176(sp)
80200c1c:	d9801e04 	addi	r6,sp,120
80200c20:	b80b883a 	mov	r5,r23
80200c24:	0207e600 	call	80207e60 <__sprint_r>
80200c28:	1000081e 	bne	r2,zero,80200c4c <___vfprintf_internal_r+0x408>
80200c2c:	da000404 	addi	r8,sp,16
80200c30:	003f5306 	br	80200980 <__reset+0xfa1e0980>
80200c34:	d8802017 	ldw	r2,128(sp)
80200c38:	10000426 	beq	r2,zero,80200c4c <___vfprintf_internal_r+0x408>
80200c3c:	d9002c17 	ldw	r4,176(sp)
80200c40:	d9801e04 	addi	r6,sp,120
80200c44:	b80b883a 	mov	r5,r23
80200c48:	0207e600 	call	80207e60 <__sprint_r>
80200c4c:	b880030b 	ldhu	r2,12(r23)
80200c50:	1080100c 	andi	r2,r2,64
80200c54:	1005901e 	bne	r2,zero,80202298 <___vfprintf_internal_r+0x1a54>
80200c58:	d8802f17 	ldw	r2,188(sp)
80200c5c:	dfc04717 	ldw	ra,284(sp)
80200c60:	df004617 	ldw	fp,280(sp)
80200c64:	ddc04517 	ldw	r23,276(sp)
80200c68:	dd804417 	ldw	r22,272(sp)
80200c6c:	dd404317 	ldw	r21,268(sp)
80200c70:	dd004217 	ldw	r20,264(sp)
80200c74:	dcc04117 	ldw	r19,260(sp)
80200c78:	dc804017 	ldw	r18,256(sp)
80200c7c:	dc403f17 	ldw	r17,252(sp)
80200c80:	dc003e17 	ldw	r16,248(sp)
80200c84:	dec04804 	addi	sp,sp,288
80200c88:	f800283a 	ret
80200c8c:	d9002c17 	ldw	r4,176(sp)
80200c90:	0204ae80 	call	80204ae8 <__sinit>
80200c94:	003f0406 	br	802008a8 <__reset+0xfa1e08a8>
80200c98:	d8802d17 	ldw	r2,180(sp)
80200c9c:	d9002d17 	ldw	r4,180(sp)
80200ca0:	10800017 	ldw	r2,0(r2)
80200ca4:	d8803115 	stw	r2,196(sp)
80200ca8:	20800104 	addi	r2,r4,4
80200cac:	d9003117 	ldw	r4,196(sp)
80200cb0:	203fa716 	blt	r4,zero,80200b50 <__reset+0xfa1e0b50>
80200cb4:	d8802d15 	stw	r2,180(sp)
80200cb8:	ac400007 	ldb	r17,0(r21)
80200cbc:	003f4206 	br	802009c8 <__reset+0xfa1e09c8>
80200cc0:	ac400007 	ldb	r17,0(r21)
80200cc4:	aac00044 	addi	r11,r21,1
80200cc8:	8a872826 	beq	r17,r10,8020296c <___vfprintf_internal_r+0x2128>
80200ccc:	88bff404 	addi	r2,r17,-48
80200cd0:	0009883a 	mov	r4,zero
80200cd4:	30867d36 	bltu	r6,r2,802026cc <___vfprintf_internal_r+0x1e88>
80200cd8:	5c400007 	ldb	r17,0(r11)
80200cdc:	210002a4 	muli	r4,r4,10
80200ce0:	5d400044 	addi	r21,r11,1
80200ce4:	a817883a 	mov	r11,r21
80200ce8:	2089883a 	add	r4,r4,r2
80200cec:	88bff404 	addi	r2,r17,-48
80200cf0:	30bff92e 	bgeu	r6,r2,80200cd8 <__reset+0xfa1e0cd8>
80200cf4:	2005c916 	blt	r4,zero,8020241c <___vfprintf_internal_r+0x1bd8>
80200cf8:	d9002915 	stw	r4,164(sp)
80200cfc:	003f3306 	br	802009cc <__reset+0xfa1e09cc>
80200d00:	94802014 	ori	r18,r18,128
80200d04:	ac400007 	ldb	r17,0(r21)
80200d08:	003f2f06 	br	802009c8 <__reset+0xfa1e09c8>
80200d0c:	a809883a 	mov	r4,r21
80200d10:	d8003115 	stw	zero,196(sp)
80200d14:	88bff404 	addi	r2,r17,-48
80200d18:	0017883a 	mov	r11,zero
80200d1c:	24400007 	ldb	r17,0(r4)
80200d20:	5ac002a4 	muli	r11,r11,10
80200d24:	ad400044 	addi	r21,r21,1
80200d28:	a809883a 	mov	r4,r21
80200d2c:	12d7883a 	add	r11,r2,r11
80200d30:	88bff404 	addi	r2,r17,-48
80200d34:	30bff92e 	bgeu	r6,r2,80200d1c <__reset+0xfa1e0d1c>
80200d38:	dac03115 	stw	r11,196(sp)
80200d3c:	003f2306 	br	802009cc <__reset+0xfa1e09cc>
80200d40:	18c03fcc 	andi	r3,r3,255
80200d44:	18072b1e 	bne	r3,zero,802029f4 <___vfprintf_internal_r+0x21b0>
80200d48:	94800414 	ori	r18,r18,16
80200d4c:	9080080c 	andi	r2,r18,32
80200d50:	10037b26 	beq	r2,zero,80201b40 <___vfprintf_internal_r+0x12fc>
80200d54:	d9402d17 	ldw	r5,180(sp)
80200d58:	28800117 	ldw	r2,4(r5)
80200d5c:	2cc00017 	ldw	r19,0(r5)
80200d60:	29400204 	addi	r5,r5,8
80200d64:	d9402d15 	stw	r5,180(sp)
80200d68:	102d883a 	mov	r22,r2
80200d6c:	10044b16 	blt	r2,zero,80201e9c <___vfprintf_internal_r+0x1658>
80200d70:	d9402917 	ldw	r5,164(sp)
80200d74:	df002783 	ldbu	fp,158(sp)
80200d78:	2803bc16 	blt	r5,zero,80201c6c <___vfprintf_internal_r+0x1428>
80200d7c:	00ffdfc4 	movi	r3,-129
80200d80:	9d84b03a 	or	r2,r19,r22
80200d84:	90e4703a 	and	r18,r18,r3
80200d88:	10017726 	beq	r2,zero,80201368 <___vfprintf_internal_r+0xb24>
80200d8c:	b0038326 	beq	r22,zero,80201b9c <___vfprintf_internal_r+0x1358>
80200d90:	dc402a15 	stw	r17,168(sp)
80200d94:	dc001e04 	addi	r16,sp,120
80200d98:	b023883a 	mov	r17,r22
80200d9c:	402d883a 	mov	r22,r8
80200da0:	9809883a 	mov	r4,r19
80200da4:	880b883a 	mov	r5,r17
80200da8:	01800284 	movi	r6,10
80200dac:	000f883a 	mov	r7,zero
80200db0:	020a2580 	call	8020a258 <__umoddi3>
80200db4:	10800c04 	addi	r2,r2,48
80200db8:	843fffc4 	addi	r16,r16,-1
80200dbc:	9809883a 	mov	r4,r19
80200dc0:	880b883a 	mov	r5,r17
80200dc4:	80800005 	stb	r2,0(r16)
80200dc8:	01800284 	movi	r6,10
80200dcc:	000f883a 	mov	r7,zero
80200dd0:	0209ce00 	call	80209ce0 <__udivdi3>
80200dd4:	1027883a 	mov	r19,r2
80200dd8:	10c4b03a 	or	r2,r2,r3
80200ddc:	1823883a 	mov	r17,r3
80200de0:	103fef1e 	bne	r2,zero,80200da0 <__reset+0xfa1e0da0>
80200de4:	d8c02817 	ldw	r3,160(sp)
80200de8:	dc402a17 	ldw	r17,168(sp)
80200dec:	b011883a 	mov	r8,r22
80200df0:	1c07c83a 	sub	r3,r3,r16
80200df4:	d8c02e15 	stw	r3,184(sp)
80200df8:	00005906 	br	80200f60 <___vfprintf_internal_r+0x71c>
80200dfc:	18c03fcc 	andi	r3,r3,255
80200e00:	1806fa1e 	bne	r3,zero,802029ec <___vfprintf_internal_r+0x21a8>
80200e04:	9080020c 	andi	r2,r18,8
80200e08:	10048a26 	beq	r2,zero,80202034 <___vfprintf_internal_r+0x17f0>
80200e0c:	d8c02d17 	ldw	r3,180(sp)
80200e10:	d9002d17 	ldw	r4,180(sp)
80200e14:	d9402d17 	ldw	r5,180(sp)
80200e18:	18c00017 	ldw	r3,0(r3)
80200e1c:	21000117 	ldw	r4,4(r4)
80200e20:	29400204 	addi	r5,r5,8
80200e24:	d8c03615 	stw	r3,216(sp)
80200e28:	d9003815 	stw	r4,224(sp)
80200e2c:	d9402d15 	stw	r5,180(sp)
80200e30:	d9003617 	ldw	r4,216(sp)
80200e34:	d9403817 	ldw	r5,224(sp)
80200e38:	da003d15 	stw	r8,244(sp)
80200e3c:	04000044 	movi	r16,1
80200e40:	0207a840 	call	80207a84 <__fpclassifyd>
80200e44:	da003d17 	ldw	r8,244(sp)
80200e48:	14041f1e 	bne	r2,r16,80201ec8 <___vfprintf_internal_r+0x1684>
80200e4c:	d9003617 	ldw	r4,216(sp)
80200e50:	d9403817 	ldw	r5,224(sp)
80200e54:	000d883a 	mov	r6,zero
80200e58:	000f883a 	mov	r7,zero
80200e5c:	020bc3c0 	call	8020bc3c <__ledf2>
80200e60:	da003d17 	ldw	r8,244(sp)
80200e64:	1005be16 	blt	r2,zero,80202560 <___vfprintf_internal_r+0x1d1c>
80200e68:	df002783 	ldbu	fp,158(sp)
80200e6c:	008011c4 	movi	r2,71
80200e70:	1445330e 	bge	r2,r17,80202340 <___vfprintf_internal_r+0x1afc>
80200e74:	04200874 	movhi	r16,32801
80200e78:	8408a404 	addi	r16,r16,8848
80200e7c:	00c000c4 	movi	r3,3
80200e80:	00bfdfc4 	movi	r2,-129
80200e84:	d8c02a15 	stw	r3,168(sp)
80200e88:	90a4703a 	and	r18,r18,r2
80200e8c:	d8c02e15 	stw	r3,184(sp)
80200e90:	d8002915 	stw	zero,164(sp)
80200e94:	d8003215 	stw	zero,200(sp)
80200e98:	00003706 	br	80200f78 <___vfprintf_internal_r+0x734>
80200e9c:	94800214 	ori	r18,r18,8
80200ea0:	ac400007 	ldb	r17,0(r21)
80200ea4:	003ec806 	br	802009c8 <__reset+0xfa1e09c8>
80200ea8:	18c03fcc 	andi	r3,r3,255
80200eac:	1806db1e 	bne	r3,zero,80202a1c <___vfprintf_internal_r+0x21d8>
80200eb0:	94800414 	ori	r18,r18,16
80200eb4:	9080080c 	andi	r2,r18,32
80200eb8:	1002d826 	beq	r2,zero,80201a1c <___vfprintf_internal_r+0x11d8>
80200ebc:	d9402d17 	ldw	r5,180(sp)
80200ec0:	d8c02917 	ldw	r3,164(sp)
80200ec4:	d8002785 	stb	zero,158(sp)
80200ec8:	28800204 	addi	r2,r5,8
80200ecc:	2cc00017 	ldw	r19,0(r5)
80200ed0:	2d800117 	ldw	r22,4(r5)
80200ed4:	18048f16 	blt	r3,zero,80202114 <___vfprintf_internal_r+0x18d0>
80200ed8:	013fdfc4 	movi	r4,-129
80200edc:	9d86b03a 	or	r3,r19,r22
80200ee0:	d8802d15 	stw	r2,180(sp)
80200ee4:	9124703a 	and	r18,r18,r4
80200ee8:	1802d91e 	bne	r3,zero,80201a50 <___vfprintf_internal_r+0x120c>
80200eec:	d8c02917 	ldw	r3,164(sp)
80200ef0:	0039883a 	mov	fp,zero
80200ef4:	1805c326 	beq	r3,zero,80202604 <___vfprintf_internal_r+0x1dc0>
80200ef8:	0027883a 	mov	r19,zero
80200efc:	002d883a 	mov	r22,zero
80200f00:	dc001e04 	addi	r16,sp,120
80200f04:	9806d0fa 	srli	r3,r19,3
80200f08:	b008977a 	slli	r4,r22,29
80200f0c:	b02cd0fa 	srli	r22,r22,3
80200f10:	9cc001cc 	andi	r19,r19,7
80200f14:	98800c04 	addi	r2,r19,48
80200f18:	843fffc4 	addi	r16,r16,-1
80200f1c:	20e6b03a 	or	r19,r4,r3
80200f20:	80800005 	stb	r2,0(r16)
80200f24:	9d86b03a 	or	r3,r19,r22
80200f28:	183ff61e 	bne	r3,zero,80200f04 <__reset+0xfa1e0f04>
80200f2c:	90c0004c 	andi	r3,r18,1
80200f30:	18013b26 	beq	r3,zero,80201420 <___vfprintf_internal_r+0xbdc>
80200f34:	10803fcc 	andi	r2,r2,255
80200f38:	1080201c 	xori	r2,r2,128
80200f3c:	10bfe004 	addi	r2,r2,-128
80200f40:	00c00c04 	movi	r3,48
80200f44:	10c13626 	beq	r2,r3,80201420 <___vfprintf_internal_r+0xbdc>
80200f48:	80ffffc5 	stb	r3,-1(r16)
80200f4c:	d8c02817 	ldw	r3,160(sp)
80200f50:	80bfffc4 	addi	r2,r16,-1
80200f54:	1021883a 	mov	r16,r2
80200f58:	1887c83a 	sub	r3,r3,r2
80200f5c:	d8c02e15 	stw	r3,184(sp)
80200f60:	d8802e17 	ldw	r2,184(sp)
80200f64:	d9002917 	ldw	r4,164(sp)
80200f68:	1100010e 	bge	r2,r4,80200f70 <___vfprintf_internal_r+0x72c>
80200f6c:	2005883a 	mov	r2,r4
80200f70:	d8802a15 	stw	r2,168(sp)
80200f74:	d8003215 	stw	zero,200(sp)
80200f78:	e7003fcc 	andi	fp,fp,255
80200f7c:	e700201c 	xori	fp,fp,128
80200f80:	e73fe004 	addi	fp,fp,-128
80200f84:	e0000326 	beq	fp,zero,80200f94 <___vfprintf_internal_r+0x750>
80200f88:	d8c02a17 	ldw	r3,168(sp)
80200f8c:	18c00044 	addi	r3,r3,1
80200f90:	d8c02a15 	stw	r3,168(sp)
80200f94:	90c0008c 	andi	r3,r18,2
80200f98:	d8c02b15 	stw	r3,172(sp)
80200f9c:	18000326 	beq	r3,zero,80200fac <___vfprintf_internal_r+0x768>
80200fa0:	d8c02a17 	ldw	r3,168(sp)
80200fa4:	18c00084 	addi	r3,r3,2
80200fa8:	d8c02a15 	stw	r3,168(sp)
80200fac:	90c0210c 	andi	r3,r18,132
80200fb0:	d8c03015 	stw	r3,192(sp)
80200fb4:	1801a31e 	bne	r3,zero,80201644 <___vfprintf_internal_r+0xe00>
80200fb8:	d9003117 	ldw	r4,196(sp)
80200fbc:	d8c02a17 	ldw	r3,168(sp)
80200fc0:	20e7c83a 	sub	r19,r4,r3
80200fc4:	04c19f0e 	bge	zero,r19,80201644 <___vfprintf_internal_r+0xe00>
80200fc8:	02400404 	movi	r9,16
80200fcc:	d8c02017 	ldw	r3,128(sp)
80200fd0:	d8801f17 	ldw	r2,124(sp)
80200fd4:	4cc50d0e 	bge	r9,r19,8020240c <___vfprintf_internal_r+0x1bc8>
80200fd8:	01600874 	movhi	r5,32801
80200fdc:	2948b784 	addi	r5,r5,8926
80200fe0:	dc403b15 	stw	r17,236(sp)
80200fe4:	d9403515 	stw	r5,212(sp)
80200fe8:	9823883a 	mov	r17,r19
80200fec:	482d883a 	mov	r22,r9
80200ff0:	9027883a 	mov	r19,r18
80200ff4:	070001c4 	movi	fp,7
80200ff8:	8025883a 	mov	r18,r16
80200ffc:	dc002c17 	ldw	r16,176(sp)
80201000:	00000306 	br	80201010 <___vfprintf_internal_r+0x7cc>
80201004:	8c7ffc04 	addi	r17,r17,-16
80201008:	42000204 	addi	r8,r8,8
8020100c:	b440130e 	bge	r22,r17,8020105c <___vfprintf_internal_r+0x818>
80201010:	01200874 	movhi	r4,32801
80201014:	18c00404 	addi	r3,r3,16
80201018:	10800044 	addi	r2,r2,1
8020101c:	2108b784 	addi	r4,r4,8926
80201020:	41000015 	stw	r4,0(r8)
80201024:	45800115 	stw	r22,4(r8)
80201028:	d8c02015 	stw	r3,128(sp)
8020102c:	d8801f15 	stw	r2,124(sp)
80201030:	e0bff40e 	bge	fp,r2,80201004 <__reset+0xfa1e1004>
80201034:	d9801e04 	addi	r6,sp,120
80201038:	b80b883a 	mov	r5,r23
8020103c:	8009883a 	mov	r4,r16
80201040:	0207e600 	call	80207e60 <__sprint_r>
80201044:	103f011e 	bne	r2,zero,80200c4c <__reset+0xfa1e0c4c>
80201048:	8c7ffc04 	addi	r17,r17,-16
8020104c:	d8c02017 	ldw	r3,128(sp)
80201050:	d8801f17 	ldw	r2,124(sp)
80201054:	da000404 	addi	r8,sp,16
80201058:	b47fed16 	blt	r22,r17,80201010 <__reset+0xfa1e1010>
8020105c:	9021883a 	mov	r16,r18
80201060:	9825883a 	mov	r18,r19
80201064:	8827883a 	mov	r19,r17
80201068:	dc403b17 	ldw	r17,236(sp)
8020106c:	d9403517 	ldw	r5,212(sp)
80201070:	98c7883a 	add	r3,r19,r3
80201074:	10800044 	addi	r2,r2,1
80201078:	41400015 	stw	r5,0(r8)
8020107c:	44c00115 	stw	r19,4(r8)
80201080:	d8c02015 	stw	r3,128(sp)
80201084:	d8801f15 	stw	r2,124(sp)
80201088:	010001c4 	movi	r4,7
8020108c:	2082a316 	blt	r4,r2,80201b1c <___vfprintf_internal_r+0x12d8>
80201090:	df002787 	ldb	fp,158(sp)
80201094:	42000204 	addi	r8,r8,8
80201098:	e0000c26 	beq	fp,zero,802010cc <___vfprintf_internal_r+0x888>
8020109c:	d8801f17 	ldw	r2,124(sp)
802010a0:	d9002784 	addi	r4,sp,158
802010a4:	18c00044 	addi	r3,r3,1
802010a8:	10800044 	addi	r2,r2,1
802010ac:	41000015 	stw	r4,0(r8)
802010b0:	01000044 	movi	r4,1
802010b4:	41000115 	stw	r4,4(r8)
802010b8:	d8c02015 	stw	r3,128(sp)
802010bc:	d8801f15 	stw	r2,124(sp)
802010c0:	010001c4 	movi	r4,7
802010c4:	20823c16 	blt	r4,r2,802019b8 <___vfprintf_internal_r+0x1174>
802010c8:	42000204 	addi	r8,r8,8
802010cc:	d8802b17 	ldw	r2,172(sp)
802010d0:	10000c26 	beq	r2,zero,80201104 <___vfprintf_internal_r+0x8c0>
802010d4:	d8801f17 	ldw	r2,124(sp)
802010d8:	d9002704 	addi	r4,sp,156
802010dc:	18c00084 	addi	r3,r3,2
802010e0:	10800044 	addi	r2,r2,1
802010e4:	41000015 	stw	r4,0(r8)
802010e8:	01000084 	movi	r4,2
802010ec:	41000115 	stw	r4,4(r8)
802010f0:	d8c02015 	stw	r3,128(sp)
802010f4:	d8801f15 	stw	r2,124(sp)
802010f8:	010001c4 	movi	r4,7
802010fc:	20823616 	blt	r4,r2,802019d8 <___vfprintf_internal_r+0x1194>
80201100:	42000204 	addi	r8,r8,8
80201104:	d9003017 	ldw	r4,192(sp)
80201108:	00802004 	movi	r2,128
8020110c:	20819926 	beq	r4,r2,80201774 <___vfprintf_internal_r+0xf30>
80201110:	d9402917 	ldw	r5,164(sp)
80201114:	d8802e17 	ldw	r2,184(sp)
80201118:	28adc83a 	sub	r22,r5,r2
8020111c:	0580310e 	bge	zero,r22,802011e4 <___vfprintf_internal_r+0x9a0>
80201120:	07000404 	movi	fp,16
80201124:	d8801f17 	ldw	r2,124(sp)
80201128:	e584140e 	bge	fp,r22,8020217c <___vfprintf_internal_r+0x1938>
8020112c:	01600874 	movhi	r5,32801
80201130:	2948b384 	addi	r5,r5,8910
80201134:	dc402915 	stw	r17,164(sp)
80201138:	d9402b15 	stw	r5,172(sp)
8020113c:	b023883a 	mov	r17,r22
80201140:	04c001c4 	movi	r19,7
80201144:	a82d883a 	mov	r22,r21
80201148:	902b883a 	mov	r21,r18
8020114c:	8025883a 	mov	r18,r16
80201150:	dc002c17 	ldw	r16,176(sp)
80201154:	00000306 	br	80201164 <___vfprintf_internal_r+0x920>
80201158:	8c7ffc04 	addi	r17,r17,-16
8020115c:	42000204 	addi	r8,r8,8
80201160:	e440110e 	bge	fp,r17,802011a8 <___vfprintf_internal_r+0x964>
80201164:	18c00404 	addi	r3,r3,16
80201168:	10800044 	addi	r2,r2,1
8020116c:	45000015 	stw	r20,0(r8)
80201170:	47000115 	stw	fp,4(r8)
80201174:	d8c02015 	stw	r3,128(sp)
80201178:	d8801f15 	stw	r2,124(sp)
8020117c:	98bff60e 	bge	r19,r2,80201158 <__reset+0xfa1e1158>
80201180:	d9801e04 	addi	r6,sp,120
80201184:	b80b883a 	mov	r5,r23
80201188:	8009883a 	mov	r4,r16
8020118c:	0207e600 	call	80207e60 <__sprint_r>
80201190:	103eae1e 	bne	r2,zero,80200c4c <__reset+0xfa1e0c4c>
80201194:	8c7ffc04 	addi	r17,r17,-16
80201198:	d8c02017 	ldw	r3,128(sp)
8020119c:	d8801f17 	ldw	r2,124(sp)
802011a0:	da000404 	addi	r8,sp,16
802011a4:	e47fef16 	blt	fp,r17,80201164 <__reset+0xfa1e1164>
802011a8:	9021883a 	mov	r16,r18
802011ac:	a825883a 	mov	r18,r21
802011b0:	b02b883a 	mov	r21,r22
802011b4:	882d883a 	mov	r22,r17
802011b8:	dc402917 	ldw	r17,164(sp)
802011bc:	d9002b17 	ldw	r4,172(sp)
802011c0:	1d87883a 	add	r3,r3,r22
802011c4:	10800044 	addi	r2,r2,1
802011c8:	41000015 	stw	r4,0(r8)
802011cc:	45800115 	stw	r22,4(r8)
802011d0:	d8c02015 	stw	r3,128(sp)
802011d4:	d8801f15 	stw	r2,124(sp)
802011d8:	010001c4 	movi	r4,7
802011dc:	2081ee16 	blt	r4,r2,80201998 <___vfprintf_internal_r+0x1154>
802011e0:	42000204 	addi	r8,r8,8
802011e4:	9080400c 	andi	r2,r18,256
802011e8:	1001181e 	bne	r2,zero,8020164c <___vfprintf_internal_r+0xe08>
802011ec:	d9402e17 	ldw	r5,184(sp)
802011f0:	d8801f17 	ldw	r2,124(sp)
802011f4:	44000015 	stw	r16,0(r8)
802011f8:	1947883a 	add	r3,r3,r5
802011fc:	10800044 	addi	r2,r2,1
80201200:	41400115 	stw	r5,4(r8)
80201204:	d8c02015 	stw	r3,128(sp)
80201208:	d8801f15 	stw	r2,124(sp)
8020120c:	010001c4 	movi	r4,7
80201210:	2081d316 	blt	r4,r2,80201960 <___vfprintf_internal_r+0x111c>
80201214:	42000204 	addi	r8,r8,8
80201218:	9480010c 	andi	r18,r18,4
8020121c:	90003226 	beq	r18,zero,802012e8 <___vfprintf_internal_r+0xaa4>
80201220:	d9403117 	ldw	r5,196(sp)
80201224:	d8802a17 	ldw	r2,168(sp)
80201228:	28a1c83a 	sub	r16,r5,r2
8020122c:	04002e0e 	bge	zero,r16,802012e8 <___vfprintf_internal_r+0xaa4>
80201230:	04400404 	movi	r17,16
80201234:	d8801f17 	ldw	r2,124(sp)
80201238:	8c04a20e 	bge	r17,r16,802024c4 <___vfprintf_internal_r+0x1c80>
8020123c:	01600874 	movhi	r5,32801
80201240:	2948b784 	addi	r5,r5,8926
80201244:	d9403515 	stw	r5,212(sp)
80201248:	048001c4 	movi	r18,7
8020124c:	dcc02c17 	ldw	r19,176(sp)
80201250:	00000306 	br	80201260 <___vfprintf_internal_r+0xa1c>
80201254:	843ffc04 	addi	r16,r16,-16
80201258:	42000204 	addi	r8,r8,8
8020125c:	8c00130e 	bge	r17,r16,802012ac <___vfprintf_internal_r+0xa68>
80201260:	01200874 	movhi	r4,32801
80201264:	18c00404 	addi	r3,r3,16
80201268:	10800044 	addi	r2,r2,1
8020126c:	2108b784 	addi	r4,r4,8926
80201270:	41000015 	stw	r4,0(r8)
80201274:	44400115 	stw	r17,4(r8)
80201278:	d8c02015 	stw	r3,128(sp)
8020127c:	d8801f15 	stw	r2,124(sp)
80201280:	90bff40e 	bge	r18,r2,80201254 <__reset+0xfa1e1254>
80201284:	d9801e04 	addi	r6,sp,120
80201288:	b80b883a 	mov	r5,r23
8020128c:	9809883a 	mov	r4,r19
80201290:	0207e600 	call	80207e60 <__sprint_r>
80201294:	103e6d1e 	bne	r2,zero,80200c4c <__reset+0xfa1e0c4c>
80201298:	843ffc04 	addi	r16,r16,-16
8020129c:	d8c02017 	ldw	r3,128(sp)
802012a0:	d8801f17 	ldw	r2,124(sp)
802012a4:	da000404 	addi	r8,sp,16
802012a8:	8c3fed16 	blt	r17,r16,80201260 <__reset+0xfa1e1260>
802012ac:	d9403517 	ldw	r5,212(sp)
802012b0:	1c07883a 	add	r3,r3,r16
802012b4:	10800044 	addi	r2,r2,1
802012b8:	41400015 	stw	r5,0(r8)
802012bc:	44000115 	stw	r16,4(r8)
802012c0:	d8c02015 	stw	r3,128(sp)
802012c4:	d8801f15 	stw	r2,124(sp)
802012c8:	010001c4 	movi	r4,7
802012cc:	2080060e 	bge	r4,r2,802012e8 <___vfprintf_internal_r+0xaa4>
802012d0:	d9002c17 	ldw	r4,176(sp)
802012d4:	d9801e04 	addi	r6,sp,120
802012d8:	b80b883a 	mov	r5,r23
802012dc:	0207e600 	call	80207e60 <__sprint_r>
802012e0:	103e5a1e 	bne	r2,zero,80200c4c <__reset+0xfa1e0c4c>
802012e4:	d8c02017 	ldw	r3,128(sp)
802012e8:	d8803117 	ldw	r2,196(sp)
802012ec:	d9002a17 	ldw	r4,168(sp)
802012f0:	1100010e 	bge	r2,r4,802012f8 <___vfprintf_internal_r+0xab4>
802012f4:	2005883a 	mov	r2,r4
802012f8:	d9402f17 	ldw	r5,188(sp)
802012fc:	288b883a 	add	r5,r5,r2
80201300:	d9402f15 	stw	r5,188(sp)
80201304:	18019e1e 	bne	r3,zero,80201980 <___vfprintf_internal_r+0x113c>
80201308:	a8800007 	ldb	r2,0(r21)
8020130c:	d8001f15 	stw	zero,124(sp)
80201310:	da000404 	addi	r8,sp,16
80201314:	103d851e 	bne	r2,zero,8020092c <__reset+0xfa1e092c>
80201318:	a821883a 	mov	r16,r21
8020131c:	003d9b06 	br	8020098c <__reset+0xfa1e098c>
80201320:	18c03fcc 	andi	r3,r3,255
80201324:	1805c11e 	bne	r3,zero,80202a2c <___vfprintf_internal_r+0x21e8>
80201328:	94800414 	ori	r18,r18,16
8020132c:	9080080c 	andi	r2,r18,32
80201330:	10020c26 	beq	r2,zero,80201b64 <___vfprintf_internal_r+0x1320>
80201334:	d8802d17 	ldw	r2,180(sp)
80201338:	d9002917 	ldw	r4,164(sp)
8020133c:	d8002785 	stb	zero,158(sp)
80201340:	10c00204 	addi	r3,r2,8
80201344:	14c00017 	ldw	r19,0(r2)
80201348:	15800117 	ldw	r22,4(r2)
8020134c:	20040f16 	blt	r4,zero,8020238c <___vfprintf_internal_r+0x1b48>
80201350:	013fdfc4 	movi	r4,-129
80201354:	9d84b03a 	or	r2,r19,r22
80201358:	d8c02d15 	stw	r3,180(sp)
8020135c:	9124703a 	and	r18,r18,r4
80201360:	0039883a 	mov	fp,zero
80201364:	103e891e 	bne	r2,zero,80200d8c <__reset+0xfa1e0d8c>
80201368:	d9002917 	ldw	r4,164(sp)
8020136c:	2002c11e 	bne	r4,zero,80201e74 <___vfprintf_internal_r+0x1630>
80201370:	d8002915 	stw	zero,164(sp)
80201374:	d8002e15 	stw	zero,184(sp)
80201378:	dc001e04 	addi	r16,sp,120
8020137c:	003ef806 	br	80200f60 <__reset+0xfa1e0f60>
80201380:	18c03fcc 	andi	r3,r3,255
80201384:	18059d1e 	bne	r3,zero,802029fc <___vfprintf_internal_r+0x21b8>
80201388:	01600874 	movhi	r5,32801
8020138c:	2948a704 	addi	r5,r5,8860
80201390:	d9403915 	stw	r5,228(sp)
80201394:	9080080c 	andi	r2,r18,32
80201398:	10005226 	beq	r2,zero,802014e4 <___vfprintf_internal_r+0xca0>
8020139c:	d8802d17 	ldw	r2,180(sp)
802013a0:	14c00017 	ldw	r19,0(r2)
802013a4:	15800117 	ldw	r22,4(r2)
802013a8:	10800204 	addi	r2,r2,8
802013ac:	d8802d15 	stw	r2,180(sp)
802013b0:	9080004c 	andi	r2,r18,1
802013b4:	10019026 	beq	r2,zero,802019f8 <___vfprintf_internal_r+0x11b4>
802013b8:	9d84b03a 	or	r2,r19,r22
802013bc:	10036926 	beq	r2,zero,80202164 <___vfprintf_internal_r+0x1920>
802013c0:	d8c02917 	ldw	r3,164(sp)
802013c4:	00800c04 	movi	r2,48
802013c8:	d8802705 	stb	r2,156(sp)
802013cc:	dc402745 	stb	r17,157(sp)
802013d0:	d8002785 	stb	zero,158(sp)
802013d4:	90800094 	ori	r2,r18,2
802013d8:	18045d16 	blt	r3,zero,80202550 <___vfprintf_internal_r+0x1d0c>
802013dc:	00bfdfc4 	movi	r2,-129
802013e0:	90a4703a 	and	r18,r18,r2
802013e4:	94800094 	ori	r18,r18,2
802013e8:	0039883a 	mov	fp,zero
802013ec:	d9003917 	ldw	r4,228(sp)
802013f0:	dc001e04 	addi	r16,sp,120
802013f4:	988003cc 	andi	r2,r19,15
802013f8:	b006973a 	slli	r3,r22,28
802013fc:	2085883a 	add	r2,r4,r2
80201400:	9826d13a 	srli	r19,r19,4
80201404:	10800003 	ldbu	r2,0(r2)
80201408:	b02cd13a 	srli	r22,r22,4
8020140c:	843fffc4 	addi	r16,r16,-1
80201410:	1ce6b03a 	or	r19,r3,r19
80201414:	80800005 	stb	r2,0(r16)
80201418:	9d84b03a 	or	r2,r19,r22
8020141c:	103ff51e 	bne	r2,zero,802013f4 <__reset+0xfa1e13f4>
80201420:	d8c02817 	ldw	r3,160(sp)
80201424:	1c07c83a 	sub	r3,r3,r16
80201428:	d8c02e15 	stw	r3,184(sp)
8020142c:	003ecc06 	br	80200f60 <__reset+0xfa1e0f60>
80201430:	18c03fcc 	andi	r3,r3,255
80201434:	183e9f26 	beq	r3,zero,80200eb4 <__reset+0xfa1e0eb4>
80201438:	d9c02785 	stb	r7,158(sp)
8020143c:	003e9d06 	br	80200eb4 <__reset+0xfa1e0eb4>
80201440:	00c00044 	movi	r3,1
80201444:	01c00ac4 	movi	r7,43
80201448:	ac400007 	ldb	r17,0(r21)
8020144c:	003d5e06 	br	802009c8 <__reset+0xfa1e09c8>
80201450:	94800814 	ori	r18,r18,32
80201454:	ac400007 	ldb	r17,0(r21)
80201458:	003d5b06 	br	802009c8 <__reset+0xfa1e09c8>
8020145c:	d8c02d17 	ldw	r3,180(sp)
80201460:	d8002785 	stb	zero,158(sp)
80201464:	1c000017 	ldw	r16,0(r3)
80201468:	1cc00104 	addi	r19,r3,4
8020146c:	80041926 	beq	r16,zero,802024d4 <___vfprintf_internal_r+0x1c90>
80201470:	d9002917 	ldw	r4,164(sp)
80201474:	2003d016 	blt	r4,zero,802023b8 <___vfprintf_internal_r+0x1b74>
80201478:	200d883a 	mov	r6,r4
8020147c:	000b883a 	mov	r5,zero
80201480:	8009883a 	mov	r4,r16
80201484:	da003d15 	stw	r8,244(sp)
80201488:	02060540 	call	80206054 <memchr>
8020148c:	da003d17 	ldw	r8,244(sp)
80201490:	10045426 	beq	r2,zero,802025e4 <___vfprintf_internal_r+0x1da0>
80201494:	1405c83a 	sub	r2,r2,r16
80201498:	d8802e15 	stw	r2,184(sp)
8020149c:	1003cc16 	blt	r2,zero,802023d0 <___vfprintf_internal_r+0x1b8c>
802014a0:	df002783 	ldbu	fp,158(sp)
802014a4:	d8802a15 	stw	r2,168(sp)
802014a8:	dcc02d15 	stw	r19,180(sp)
802014ac:	d8002915 	stw	zero,164(sp)
802014b0:	d8003215 	stw	zero,200(sp)
802014b4:	003eb006 	br	80200f78 <__reset+0xfa1e0f78>
802014b8:	18c03fcc 	andi	r3,r3,255
802014bc:	183f9b26 	beq	r3,zero,8020132c <__reset+0xfa1e132c>
802014c0:	d9c02785 	stb	r7,158(sp)
802014c4:	003f9906 	br	8020132c <__reset+0xfa1e132c>
802014c8:	18c03fcc 	andi	r3,r3,255
802014cc:	1805551e 	bne	r3,zero,80202a24 <___vfprintf_internal_r+0x21e0>
802014d0:	01600874 	movhi	r5,32801
802014d4:	2948ac04 	addi	r5,r5,8880
802014d8:	d9403915 	stw	r5,228(sp)
802014dc:	9080080c 	andi	r2,r18,32
802014e0:	103fae1e 	bne	r2,zero,8020139c <__reset+0xfa1e139c>
802014e4:	9080040c 	andi	r2,r18,16
802014e8:	1002de26 	beq	r2,zero,80202064 <___vfprintf_internal_r+0x1820>
802014ec:	d8c02d17 	ldw	r3,180(sp)
802014f0:	002d883a 	mov	r22,zero
802014f4:	1cc00017 	ldw	r19,0(r3)
802014f8:	18c00104 	addi	r3,r3,4
802014fc:	d8c02d15 	stw	r3,180(sp)
80201500:	003fab06 	br	802013b0 <__reset+0xfa1e13b0>
80201504:	38803fcc 	andi	r2,r7,255
80201508:	1080201c 	xori	r2,r2,128
8020150c:	10bfe004 	addi	r2,r2,-128
80201510:	1002d21e 	bne	r2,zero,8020205c <___vfprintf_internal_r+0x1818>
80201514:	00c00044 	movi	r3,1
80201518:	01c00804 	movi	r7,32
8020151c:	ac400007 	ldb	r17,0(r21)
80201520:	003d2906 	br	802009c8 <__reset+0xfa1e09c8>
80201524:	94800054 	ori	r18,r18,1
80201528:	ac400007 	ldb	r17,0(r21)
8020152c:	003d2606 	br	802009c8 <__reset+0xfa1e09c8>
80201530:	18c03fcc 	andi	r3,r3,255
80201534:	183e0526 	beq	r3,zero,80200d4c <__reset+0xfa1e0d4c>
80201538:	d9c02785 	stb	r7,158(sp)
8020153c:	003e0306 	br	80200d4c <__reset+0xfa1e0d4c>
80201540:	94801014 	ori	r18,r18,64
80201544:	ac400007 	ldb	r17,0(r21)
80201548:	003d1f06 	br	802009c8 <__reset+0xfa1e09c8>
8020154c:	ac400007 	ldb	r17,0(r21)
80201550:	8a438726 	beq	r17,r9,80202370 <___vfprintf_internal_r+0x1b2c>
80201554:	94800414 	ori	r18,r18,16
80201558:	003d1b06 	br	802009c8 <__reset+0xfa1e09c8>
8020155c:	18c03fcc 	andi	r3,r3,255
80201560:	1805341e 	bne	r3,zero,80202a34 <___vfprintf_internal_r+0x21f0>
80201564:	9080080c 	andi	r2,r18,32
80201568:	1002cd26 	beq	r2,zero,802020a0 <___vfprintf_internal_r+0x185c>
8020156c:	d9402d17 	ldw	r5,180(sp)
80201570:	d9002f17 	ldw	r4,188(sp)
80201574:	28800017 	ldw	r2,0(r5)
80201578:	2007d7fa 	srai	r3,r4,31
8020157c:	29400104 	addi	r5,r5,4
80201580:	d9402d15 	stw	r5,180(sp)
80201584:	11000015 	stw	r4,0(r2)
80201588:	10c00115 	stw	r3,4(r2)
8020158c:	003ce506 	br	80200924 <__reset+0xfa1e0924>
80201590:	d8c02d17 	ldw	r3,180(sp)
80201594:	d9002d17 	ldw	r4,180(sp)
80201598:	d8002785 	stb	zero,158(sp)
8020159c:	18800017 	ldw	r2,0(r3)
802015a0:	21000104 	addi	r4,r4,4
802015a4:	00c00044 	movi	r3,1
802015a8:	d8c02a15 	stw	r3,168(sp)
802015ac:	d8801405 	stb	r2,80(sp)
802015b0:	d9002d15 	stw	r4,180(sp)
802015b4:	d8c02e15 	stw	r3,184(sp)
802015b8:	d8002915 	stw	zero,164(sp)
802015bc:	d8003215 	stw	zero,200(sp)
802015c0:	dc001404 	addi	r16,sp,80
802015c4:	0039883a 	mov	fp,zero
802015c8:	003e7206 	br	80200f94 <__reset+0xfa1e0f94>
802015cc:	01200874 	movhi	r4,32801
802015d0:	2108ac04 	addi	r4,r4,8880
802015d4:	0039883a 	mov	fp,zero
802015d8:	d9003915 	stw	r4,228(sp)
802015dc:	04401e04 	movi	r17,120
802015e0:	003f8206 	br	802013ec <__reset+0xfa1e13ec>
802015e4:	18c03fcc 	andi	r3,r3,255
802015e8:	1805061e 	bne	r3,zero,80202a04 <___vfprintf_internal_r+0x21c0>
802015ec:	883d9126 	beq	r17,zero,80200c34 <__reset+0xfa1e0c34>
802015f0:	00c00044 	movi	r3,1
802015f4:	d8c02a15 	stw	r3,168(sp)
802015f8:	dc401405 	stb	r17,80(sp)
802015fc:	d8002785 	stb	zero,158(sp)
80201600:	003fec06 	br	802015b4 <__reset+0xfa1e15b4>
80201604:	01600874 	movhi	r5,32801
80201608:	2948ac04 	addi	r5,r5,8880
8020160c:	d9403915 	stw	r5,228(sp)
80201610:	d8c02d15 	stw	r3,180(sp)
80201614:	1025883a 	mov	r18,r2
80201618:	04401e04 	movi	r17,120
8020161c:	9d84b03a 	or	r2,r19,r22
80201620:	1000fc1e 	bne	r2,zero,80201a14 <___vfprintf_internal_r+0x11d0>
80201624:	0039883a 	mov	fp,zero
80201628:	00800084 	movi	r2,2
8020162c:	10803fcc 	andi	r2,r2,255
80201630:	00c00044 	movi	r3,1
80201634:	10c20f26 	beq	r2,r3,80201e74 <___vfprintf_internal_r+0x1630>
80201638:	00c00084 	movi	r3,2
8020163c:	10fd6326 	beq	r2,r3,80200bcc <__reset+0xfa1e0bcc>
80201640:	003e2d06 	br	80200ef8 <__reset+0xfa1e0ef8>
80201644:	d8c02017 	ldw	r3,128(sp)
80201648:	003e9306 	br	80201098 <__reset+0xfa1e1098>
8020164c:	00801944 	movi	r2,101
80201650:	14407e0e 	bge	r2,r17,8020184c <___vfprintf_internal_r+0x1008>
80201654:	d9003617 	ldw	r4,216(sp)
80201658:	d9403817 	ldw	r5,224(sp)
8020165c:	000d883a 	mov	r6,zero
80201660:	000f883a 	mov	r7,zero
80201664:	d8c03c15 	stw	r3,240(sp)
80201668:	da003d15 	stw	r8,244(sp)
8020166c:	020bad80 	call	8020bad8 <__eqdf2>
80201670:	d8c03c17 	ldw	r3,240(sp)
80201674:	da003d17 	ldw	r8,244(sp)
80201678:	1000f71e 	bne	r2,zero,80201a58 <___vfprintf_internal_r+0x1214>
8020167c:	d8801f17 	ldw	r2,124(sp)
80201680:	01200874 	movhi	r4,32801
80201684:	2108b304 	addi	r4,r4,8908
80201688:	18c00044 	addi	r3,r3,1
8020168c:	10800044 	addi	r2,r2,1
80201690:	41000015 	stw	r4,0(r8)
80201694:	01000044 	movi	r4,1
80201698:	41000115 	stw	r4,4(r8)
8020169c:	d8c02015 	stw	r3,128(sp)
802016a0:	d8801f15 	stw	r2,124(sp)
802016a4:	010001c4 	movi	r4,7
802016a8:	2082b816 	blt	r4,r2,8020218c <___vfprintf_internal_r+0x1948>
802016ac:	42000204 	addi	r8,r8,8
802016b0:	d8802617 	ldw	r2,152(sp)
802016b4:	d9403317 	ldw	r5,204(sp)
802016b8:	11400216 	blt	r2,r5,802016c4 <___vfprintf_internal_r+0xe80>
802016bc:	9080004c 	andi	r2,r18,1
802016c0:	103ed526 	beq	r2,zero,80201218 <__reset+0xfa1e1218>
802016c4:	d8803717 	ldw	r2,220(sp)
802016c8:	d9003417 	ldw	r4,208(sp)
802016cc:	d9403717 	ldw	r5,220(sp)
802016d0:	1887883a 	add	r3,r3,r2
802016d4:	d8801f17 	ldw	r2,124(sp)
802016d8:	41000015 	stw	r4,0(r8)
802016dc:	41400115 	stw	r5,4(r8)
802016e0:	10800044 	addi	r2,r2,1
802016e4:	d8c02015 	stw	r3,128(sp)
802016e8:	d8801f15 	stw	r2,124(sp)
802016ec:	010001c4 	movi	r4,7
802016f0:	20832916 	blt	r4,r2,80202398 <___vfprintf_internal_r+0x1b54>
802016f4:	42000204 	addi	r8,r8,8
802016f8:	d8803317 	ldw	r2,204(sp)
802016fc:	143fffc4 	addi	r16,r2,-1
80201700:	043ec50e 	bge	zero,r16,80201218 <__reset+0xfa1e1218>
80201704:	04400404 	movi	r17,16
80201708:	d8801f17 	ldw	r2,124(sp)
8020170c:	8c00880e 	bge	r17,r16,80201930 <___vfprintf_internal_r+0x10ec>
80201710:	01600874 	movhi	r5,32801
80201714:	2948b384 	addi	r5,r5,8910
80201718:	d9402b15 	stw	r5,172(sp)
8020171c:	058001c4 	movi	r22,7
80201720:	dcc02c17 	ldw	r19,176(sp)
80201724:	00000306 	br	80201734 <___vfprintf_internal_r+0xef0>
80201728:	42000204 	addi	r8,r8,8
8020172c:	843ffc04 	addi	r16,r16,-16
80201730:	8c00820e 	bge	r17,r16,8020193c <___vfprintf_internal_r+0x10f8>
80201734:	18c00404 	addi	r3,r3,16
80201738:	10800044 	addi	r2,r2,1
8020173c:	45000015 	stw	r20,0(r8)
80201740:	44400115 	stw	r17,4(r8)
80201744:	d8c02015 	stw	r3,128(sp)
80201748:	d8801f15 	stw	r2,124(sp)
8020174c:	b0bff60e 	bge	r22,r2,80201728 <__reset+0xfa1e1728>
80201750:	d9801e04 	addi	r6,sp,120
80201754:	b80b883a 	mov	r5,r23
80201758:	9809883a 	mov	r4,r19
8020175c:	0207e600 	call	80207e60 <__sprint_r>
80201760:	103d3a1e 	bne	r2,zero,80200c4c <__reset+0xfa1e0c4c>
80201764:	d8c02017 	ldw	r3,128(sp)
80201768:	d8801f17 	ldw	r2,124(sp)
8020176c:	da000404 	addi	r8,sp,16
80201770:	003fee06 	br	8020172c <__reset+0xfa1e172c>
80201774:	d9403117 	ldw	r5,196(sp)
80201778:	d8802a17 	ldw	r2,168(sp)
8020177c:	28adc83a 	sub	r22,r5,r2
80201780:	05be630e 	bge	zero,r22,80201110 <__reset+0xfa1e1110>
80201784:	07000404 	movi	fp,16
80201788:	d8801f17 	ldw	r2,124(sp)
8020178c:	e5838f0e 	bge	fp,r22,802025cc <___vfprintf_internal_r+0x1d88>
80201790:	01600874 	movhi	r5,32801
80201794:	2948b384 	addi	r5,r5,8910
80201798:	dc403015 	stw	r17,192(sp)
8020179c:	d9402b15 	stw	r5,172(sp)
802017a0:	b023883a 	mov	r17,r22
802017a4:	04c001c4 	movi	r19,7
802017a8:	a82d883a 	mov	r22,r21
802017ac:	902b883a 	mov	r21,r18
802017b0:	8025883a 	mov	r18,r16
802017b4:	dc002c17 	ldw	r16,176(sp)
802017b8:	00000306 	br	802017c8 <___vfprintf_internal_r+0xf84>
802017bc:	8c7ffc04 	addi	r17,r17,-16
802017c0:	42000204 	addi	r8,r8,8
802017c4:	e440110e 	bge	fp,r17,8020180c <___vfprintf_internal_r+0xfc8>
802017c8:	18c00404 	addi	r3,r3,16
802017cc:	10800044 	addi	r2,r2,1
802017d0:	45000015 	stw	r20,0(r8)
802017d4:	47000115 	stw	fp,4(r8)
802017d8:	d8c02015 	stw	r3,128(sp)
802017dc:	d8801f15 	stw	r2,124(sp)
802017e0:	98bff60e 	bge	r19,r2,802017bc <__reset+0xfa1e17bc>
802017e4:	d9801e04 	addi	r6,sp,120
802017e8:	b80b883a 	mov	r5,r23
802017ec:	8009883a 	mov	r4,r16
802017f0:	0207e600 	call	80207e60 <__sprint_r>
802017f4:	103d151e 	bne	r2,zero,80200c4c <__reset+0xfa1e0c4c>
802017f8:	8c7ffc04 	addi	r17,r17,-16
802017fc:	d8c02017 	ldw	r3,128(sp)
80201800:	d8801f17 	ldw	r2,124(sp)
80201804:	da000404 	addi	r8,sp,16
80201808:	e47fef16 	blt	fp,r17,802017c8 <__reset+0xfa1e17c8>
8020180c:	9021883a 	mov	r16,r18
80201810:	a825883a 	mov	r18,r21
80201814:	b02b883a 	mov	r21,r22
80201818:	882d883a 	mov	r22,r17
8020181c:	dc403017 	ldw	r17,192(sp)
80201820:	d9002b17 	ldw	r4,172(sp)
80201824:	1d87883a 	add	r3,r3,r22
80201828:	10800044 	addi	r2,r2,1
8020182c:	41000015 	stw	r4,0(r8)
80201830:	45800115 	stw	r22,4(r8)
80201834:	d8c02015 	stw	r3,128(sp)
80201838:	d8801f15 	stw	r2,124(sp)
8020183c:	010001c4 	movi	r4,7
80201840:	20818e16 	blt	r4,r2,80201e7c <___vfprintf_internal_r+0x1638>
80201844:	42000204 	addi	r8,r8,8
80201848:	003e3106 	br	80201110 <__reset+0xfa1e1110>
8020184c:	d9403317 	ldw	r5,204(sp)
80201850:	00800044 	movi	r2,1
80201854:	18c00044 	addi	r3,r3,1
80201858:	1141530e 	bge	r2,r5,80201da8 <___vfprintf_internal_r+0x1564>
8020185c:	dc401f17 	ldw	r17,124(sp)
80201860:	00800044 	movi	r2,1
80201864:	40800115 	stw	r2,4(r8)
80201868:	8c400044 	addi	r17,r17,1
8020186c:	44000015 	stw	r16,0(r8)
80201870:	d8c02015 	stw	r3,128(sp)
80201874:	dc401f15 	stw	r17,124(sp)
80201878:	008001c4 	movi	r2,7
8020187c:	14416b16 	blt	r2,r17,80201e2c <___vfprintf_internal_r+0x15e8>
80201880:	42000204 	addi	r8,r8,8
80201884:	d8803717 	ldw	r2,220(sp)
80201888:	d9003417 	ldw	r4,208(sp)
8020188c:	8c400044 	addi	r17,r17,1
80201890:	10c7883a 	add	r3,r2,r3
80201894:	40800115 	stw	r2,4(r8)
80201898:	41000015 	stw	r4,0(r8)
8020189c:	d8c02015 	stw	r3,128(sp)
802018a0:	dc401f15 	stw	r17,124(sp)
802018a4:	008001c4 	movi	r2,7
802018a8:	14416916 	blt	r2,r17,80201e50 <___vfprintf_internal_r+0x160c>
802018ac:	45800204 	addi	r22,r8,8
802018b0:	d9003617 	ldw	r4,216(sp)
802018b4:	d9403817 	ldw	r5,224(sp)
802018b8:	000d883a 	mov	r6,zero
802018bc:	000f883a 	mov	r7,zero
802018c0:	d8c03c15 	stw	r3,240(sp)
802018c4:	020bad80 	call	8020bad8 <__eqdf2>
802018c8:	d8c03c17 	ldw	r3,240(sp)
802018cc:	1000bc26 	beq	r2,zero,80201bc0 <___vfprintf_internal_r+0x137c>
802018d0:	d9403317 	ldw	r5,204(sp)
802018d4:	84000044 	addi	r16,r16,1
802018d8:	8c400044 	addi	r17,r17,1
802018dc:	28bfffc4 	addi	r2,r5,-1
802018e0:	1887883a 	add	r3,r3,r2
802018e4:	b0800115 	stw	r2,4(r22)
802018e8:	b4000015 	stw	r16,0(r22)
802018ec:	d8c02015 	stw	r3,128(sp)
802018f0:	dc401f15 	stw	r17,124(sp)
802018f4:	008001c4 	movi	r2,7
802018f8:	14414316 	blt	r2,r17,80201e08 <___vfprintf_internal_r+0x15c4>
802018fc:	b5800204 	addi	r22,r22,8
80201900:	d9003a17 	ldw	r4,232(sp)
80201904:	df0022c4 	addi	fp,sp,139
80201908:	8c400044 	addi	r17,r17,1
8020190c:	20c7883a 	add	r3,r4,r3
80201910:	b7000015 	stw	fp,0(r22)
80201914:	b1000115 	stw	r4,4(r22)
80201918:	d8c02015 	stw	r3,128(sp)
8020191c:	dc401f15 	stw	r17,124(sp)
80201920:	008001c4 	movi	r2,7
80201924:	14400e16 	blt	r2,r17,80201960 <___vfprintf_internal_r+0x111c>
80201928:	b2000204 	addi	r8,r22,8
8020192c:	003e3a06 	br	80201218 <__reset+0xfa1e1218>
80201930:	01200874 	movhi	r4,32801
80201934:	2108b384 	addi	r4,r4,8910
80201938:	d9002b15 	stw	r4,172(sp)
8020193c:	d9002b17 	ldw	r4,172(sp)
80201940:	1c07883a 	add	r3,r3,r16
80201944:	44000115 	stw	r16,4(r8)
80201948:	41000015 	stw	r4,0(r8)
8020194c:	10800044 	addi	r2,r2,1
80201950:	d8c02015 	stw	r3,128(sp)
80201954:	d8801f15 	stw	r2,124(sp)
80201958:	010001c4 	movi	r4,7
8020195c:	20be2d0e 	bge	r4,r2,80201214 <__reset+0xfa1e1214>
80201960:	d9002c17 	ldw	r4,176(sp)
80201964:	d9801e04 	addi	r6,sp,120
80201968:	b80b883a 	mov	r5,r23
8020196c:	0207e600 	call	80207e60 <__sprint_r>
80201970:	103cb61e 	bne	r2,zero,80200c4c <__reset+0xfa1e0c4c>
80201974:	d8c02017 	ldw	r3,128(sp)
80201978:	da000404 	addi	r8,sp,16
8020197c:	003e2606 	br	80201218 <__reset+0xfa1e1218>
80201980:	d9002c17 	ldw	r4,176(sp)
80201984:	d9801e04 	addi	r6,sp,120
80201988:	b80b883a 	mov	r5,r23
8020198c:	0207e600 	call	80207e60 <__sprint_r>
80201990:	103e5d26 	beq	r2,zero,80201308 <__reset+0xfa1e1308>
80201994:	003cad06 	br	80200c4c <__reset+0xfa1e0c4c>
80201998:	d9002c17 	ldw	r4,176(sp)
8020199c:	d9801e04 	addi	r6,sp,120
802019a0:	b80b883a 	mov	r5,r23
802019a4:	0207e600 	call	80207e60 <__sprint_r>
802019a8:	103ca81e 	bne	r2,zero,80200c4c <__reset+0xfa1e0c4c>
802019ac:	d8c02017 	ldw	r3,128(sp)
802019b0:	da000404 	addi	r8,sp,16
802019b4:	003e0b06 	br	802011e4 <__reset+0xfa1e11e4>
802019b8:	d9002c17 	ldw	r4,176(sp)
802019bc:	d9801e04 	addi	r6,sp,120
802019c0:	b80b883a 	mov	r5,r23
802019c4:	0207e600 	call	80207e60 <__sprint_r>
802019c8:	103ca01e 	bne	r2,zero,80200c4c <__reset+0xfa1e0c4c>
802019cc:	d8c02017 	ldw	r3,128(sp)
802019d0:	da000404 	addi	r8,sp,16
802019d4:	003dbd06 	br	802010cc <__reset+0xfa1e10cc>
802019d8:	d9002c17 	ldw	r4,176(sp)
802019dc:	d9801e04 	addi	r6,sp,120
802019e0:	b80b883a 	mov	r5,r23
802019e4:	0207e600 	call	80207e60 <__sprint_r>
802019e8:	103c981e 	bne	r2,zero,80200c4c <__reset+0xfa1e0c4c>
802019ec:	d8c02017 	ldw	r3,128(sp)
802019f0:	da000404 	addi	r8,sp,16
802019f4:	003dc306 	br	80201104 <__reset+0xfa1e1104>
802019f8:	d8802917 	ldw	r2,164(sp)
802019fc:	d8002785 	stb	zero,158(sp)
80201a00:	103f0616 	blt	r2,zero,8020161c <__reset+0xfa1e161c>
80201a04:	00ffdfc4 	movi	r3,-129
80201a08:	9d84b03a 	or	r2,r19,r22
80201a0c:	90e4703a 	and	r18,r18,r3
80201a10:	103c6b26 	beq	r2,zero,80200bc0 <__reset+0xfa1e0bc0>
80201a14:	0039883a 	mov	fp,zero
80201a18:	003e7406 	br	802013ec <__reset+0xfa1e13ec>
80201a1c:	9080040c 	andi	r2,r18,16
80201a20:	1001b326 	beq	r2,zero,802020f0 <___vfprintf_internal_r+0x18ac>
80201a24:	d9002d17 	ldw	r4,180(sp)
80201a28:	d9402917 	ldw	r5,164(sp)
80201a2c:	d8002785 	stb	zero,158(sp)
80201a30:	20800104 	addi	r2,r4,4
80201a34:	24c00017 	ldw	r19,0(r4)
80201a38:	002d883a 	mov	r22,zero
80201a3c:	2801b516 	blt	r5,zero,80202114 <___vfprintf_internal_r+0x18d0>
80201a40:	00ffdfc4 	movi	r3,-129
80201a44:	d8802d15 	stw	r2,180(sp)
80201a48:	90e4703a 	and	r18,r18,r3
80201a4c:	983d2726 	beq	r19,zero,80200eec <__reset+0xfa1e0eec>
80201a50:	0039883a 	mov	fp,zero
80201a54:	003d2a06 	br	80200f00 <__reset+0xfa1e0f00>
80201a58:	dc402617 	ldw	r17,152(sp)
80201a5c:	0441d30e 	bge	zero,r17,802021ac <___vfprintf_internal_r+0x1968>
80201a60:	dc403217 	ldw	r17,200(sp)
80201a64:	d8803317 	ldw	r2,204(sp)
80201a68:	1440010e 	bge	r2,r17,80201a70 <___vfprintf_internal_r+0x122c>
80201a6c:	1023883a 	mov	r17,r2
80201a70:	04400a0e 	bge	zero,r17,80201a9c <___vfprintf_internal_r+0x1258>
80201a74:	d8801f17 	ldw	r2,124(sp)
80201a78:	1c47883a 	add	r3,r3,r17
80201a7c:	44000015 	stw	r16,0(r8)
80201a80:	10800044 	addi	r2,r2,1
80201a84:	44400115 	stw	r17,4(r8)
80201a88:	d8c02015 	stw	r3,128(sp)
80201a8c:	d8801f15 	stw	r2,124(sp)
80201a90:	010001c4 	movi	r4,7
80201a94:	20826516 	blt	r4,r2,8020242c <___vfprintf_internal_r+0x1be8>
80201a98:	42000204 	addi	r8,r8,8
80201a9c:	88026116 	blt	r17,zero,80202424 <___vfprintf_internal_r+0x1be0>
80201aa0:	d9003217 	ldw	r4,200(sp)
80201aa4:	2463c83a 	sub	r17,r4,r17
80201aa8:	04407b0e 	bge	zero,r17,80201c98 <___vfprintf_internal_r+0x1454>
80201aac:	05800404 	movi	r22,16
80201ab0:	d8801f17 	ldw	r2,124(sp)
80201ab4:	b4419d0e 	bge	r22,r17,8020212c <___vfprintf_internal_r+0x18e8>
80201ab8:	01200874 	movhi	r4,32801
80201abc:	2108b384 	addi	r4,r4,8910
80201ac0:	d9002b15 	stw	r4,172(sp)
80201ac4:	070001c4 	movi	fp,7
80201ac8:	dcc02c17 	ldw	r19,176(sp)
80201acc:	00000306 	br	80201adc <___vfprintf_internal_r+0x1298>
80201ad0:	42000204 	addi	r8,r8,8
80201ad4:	8c7ffc04 	addi	r17,r17,-16
80201ad8:	b441970e 	bge	r22,r17,80202138 <___vfprintf_internal_r+0x18f4>
80201adc:	18c00404 	addi	r3,r3,16
80201ae0:	10800044 	addi	r2,r2,1
80201ae4:	45000015 	stw	r20,0(r8)
80201ae8:	45800115 	stw	r22,4(r8)
80201aec:	d8c02015 	stw	r3,128(sp)
80201af0:	d8801f15 	stw	r2,124(sp)
80201af4:	e0bff60e 	bge	fp,r2,80201ad0 <__reset+0xfa1e1ad0>
80201af8:	d9801e04 	addi	r6,sp,120
80201afc:	b80b883a 	mov	r5,r23
80201b00:	9809883a 	mov	r4,r19
80201b04:	0207e600 	call	80207e60 <__sprint_r>
80201b08:	103c501e 	bne	r2,zero,80200c4c <__reset+0xfa1e0c4c>
80201b0c:	d8c02017 	ldw	r3,128(sp)
80201b10:	d8801f17 	ldw	r2,124(sp)
80201b14:	da000404 	addi	r8,sp,16
80201b18:	003fee06 	br	80201ad4 <__reset+0xfa1e1ad4>
80201b1c:	d9002c17 	ldw	r4,176(sp)
80201b20:	d9801e04 	addi	r6,sp,120
80201b24:	b80b883a 	mov	r5,r23
80201b28:	0207e600 	call	80207e60 <__sprint_r>
80201b2c:	103c471e 	bne	r2,zero,80200c4c <__reset+0xfa1e0c4c>
80201b30:	d8c02017 	ldw	r3,128(sp)
80201b34:	df002787 	ldb	fp,158(sp)
80201b38:	da000404 	addi	r8,sp,16
80201b3c:	003d5606 	br	80201098 <__reset+0xfa1e1098>
80201b40:	9080040c 	andi	r2,r18,16
80201b44:	10016126 	beq	r2,zero,802020cc <___vfprintf_internal_r+0x1888>
80201b48:	d8802d17 	ldw	r2,180(sp)
80201b4c:	14c00017 	ldw	r19,0(r2)
80201b50:	10800104 	addi	r2,r2,4
80201b54:	d8802d15 	stw	r2,180(sp)
80201b58:	982dd7fa 	srai	r22,r19,31
80201b5c:	b005883a 	mov	r2,r22
80201b60:	003c8206 	br	80200d6c <__reset+0xfa1e0d6c>
80201b64:	9080040c 	andi	r2,r18,16
80201b68:	10003526 	beq	r2,zero,80201c40 <___vfprintf_internal_r+0x13fc>
80201b6c:	d9402d17 	ldw	r5,180(sp)
80201b70:	d8c02917 	ldw	r3,164(sp)
80201b74:	d8002785 	stb	zero,158(sp)
80201b78:	28800104 	addi	r2,r5,4
80201b7c:	2cc00017 	ldw	r19,0(r5)
80201b80:	002d883a 	mov	r22,zero
80201b84:	18003716 	blt	r3,zero,80201c64 <___vfprintf_internal_r+0x1420>
80201b88:	00ffdfc4 	movi	r3,-129
80201b8c:	d8802d15 	stw	r2,180(sp)
80201b90:	90e4703a 	and	r18,r18,r3
80201b94:	0039883a 	mov	fp,zero
80201b98:	983df326 	beq	r19,zero,80201368 <__reset+0xfa1e1368>
80201b9c:	00800244 	movi	r2,9
80201ba0:	14fc7b36 	bltu	r2,r19,80200d90 <__reset+0xfa1e0d90>
80201ba4:	d8c02817 	ldw	r3,160(sp)
80201ba8:	dc001dc4 	addi	r16,sp,119
80201bac:	9cc00c04 	addi	r19,r19,48
80201bb0:	1c07c83a 	sub	r3,r3,r16
80201bb4:	dcc01dc5 	stb	r19,119(sp)
80201bb8:	d8c02e15 	stw	r3,184(sp)
80201bbc:	003ce806 	br	80200f60 <__reset+0xfa1e0f60>
80201bc0:	d8803317 	ldw	r2,204(sp)
80201bc4:	143fffc4 	addi	r16,r2,-1
80201bc8:	043f4d0e 	bge	zero,r16,80201900 <__reset+0xfa1e1900>
80201bcc:	07000404 	movi	fp,16
80201bd0:	e400810e 	bge	fp,r16,80201dd8 <___vfprintf_internal_r+0x1594>
80201bd4:	01600874 	movhi	r5,32801
80201bd8:	2948b384 	addi	r5,r5,8910
80201bdc:	d9402b15 	stw	r5,172(sp)
80201be0:	01c001c4 	movi	r7,7
80201be4:	dcc02c17 	ldw	r19,176(sp)
80201be8:	00000306 	br	80201bf8 <___vfprintf_internal_r+0x13b4>
80201bec:	b5800204 	addi	r22,r22,8
80201bf0:	843ffc04 	addi	r16,r16,-16
80201bf4:	e4007b0e 	bge	fp,r16,80201de4 <___vfprintf_internal_r+0x15a0>
80201bf8:	18c00404 	addi	r3,r3,16
80201bfc:	8c400044 	addi	r17,r17,1
80201c00:	b5000015 	stw	r20,0(r22)
80201c04:	b7000115 	stw	fp,4(r22)
80201c08:	d8c02015 	stw	r3,128(sp)
80201c0c:	dc401f15 	stw	r17,124(sp)
80201c10:	3c7ff60e 	bge	r7,r17,80201bec <__reset+0xfa1e1bec>
80201c14:	d9801e04 	addi	r6,sp,120
80201c18:	b80b883a 	mov	r5,r23
80201c1c:	9809883a 	mov	r4,r19
80201c20:	d9c03c15 	stw	r7,240(sp)
80201c24:	0207e600 	call	80207e60 <__sprint_r>
80201c28:	d9c03c17 	ldw	r7,240(sp)
80201c2c:	103c071e 	bne	r2,zero,80200c4c <__reset+0xfa1e0c4c>
80201c30:	d8c02017 	ldw	r3,128(sp)
80201c34:	dc401f17 	ldw	r17,124(sp)
80201c38:	dd800404 	addi	r22,sp,16
80201c3c:	003fec06 	br	80201bf0 <__reset+0xfa1e1bf0>
80201c40:	9080100c 	andi	r2,r18,64
80201c44:	d8002785 	stb	zero,158(sp)
80201c48:	10010e26 	beq	r2,zero,80202084 <___vfprintf_internal_r+0x1840>
80201c4c:	d9002d17 	ldw	r4,180(sp)
80201c50:	d9402917 	ldw	r5,164(sp)
80201c54:	002d883a 	mov	r22,zero
80201c58:	20800104 	addi	r2,r4,4
80201c5c:	24c0000b 	ldhu	r19,0(r4)
80201c60:	283fc90e 	bge	r5,zero,80201b88 <__reset+0xfa1e1b88>
80201c64:	d8802d15 	stw	r2,180(sp)
80201c68:	0039883a 	mov	fp,zero
80201c6c:	9d84b03a 	or	r2,r19,r22
80201c70:	103c461e 	bne	r2,zero,80200d8c <__reset+0xfa1e0d8c>
80201c74:	00800044 	movi	r2,1
80201c78:	003e6c06 	br	8020162c <__reset+0xfa1e162c>
80201c7c:	d9002c17 	ldw	r4,176(sp)
80201c80:	d9801e04 	addi	r6,sp,120
80201c84:	b80b883a 	mov	r5,r23
80201c88:	0207e600 	call	80207e60 <__sprint_r>
80201c8c:	103bef1e 	bne	r2,zero,80200c4c <__reset+0xfa1e0c4c>
80201c90:	d8c02017 	ldw	r3,128(sp)
80201c94:	da000404 	addi	r8,sp,16
80201c98:	d9003217 	ldw	r4,200(sp)
80201c9c:	d8802617 	ldw	r2,152(sp)
80201ca0:	d9403317 	ldw	r5,204(sp)
80201ca4:	8123883a 	add	r17,r16,r4
80201ca8:	11400216 	blt	r2,r5,80201cb4 <___vfprintf_internal_r+0x1470>
80201cac:	9100004c 	andi	r4,r18,1
80201cb0:	20000d26 	beq	r4,zero,80201ce8 <___vfprintf_internal_r+0x14a4>
80201cb4:	d9003717 	ldw	r4,220(sp)
80201cb8:	d9403417 	ldw	r5,208(sp)
80201cbc:	1907883a 	add	r3,r3,r4
80201cc0:	d9001f17 	ldw	r4,124(sp)
80201cc4:	41400015 	stw	r5,0(r8)
80201cc8:	d9403717 	ldw	r5,220(sp)
80201ccc:	21000044 	addi	r4,r4,1
80201cd0:	d8c02015 	stw	r3,128(sp)
80201cd4:	41400115 	stw	r5,4(r8)
80201cd8:	d9001f15 	stw	r4,124(sp)
80201cdc:	014001c4 	movi	r5,7
80201ce0:	2901e816 	blt	r5,r4,80202484 <___vfprintf_internal_r+0x1c40>
80201ce4:	42000204 	addi	r8,r8,8
80201ce8:	d9003317 	ldw	r4,204(sp)
80201cec:	8121883a 	add	r16,r16,r4
80201cf0:	2085c83a 	sub	r2,r4,r2
80201cf4:	8461c83a 	sub	r16,r16,r17
80201cf8:	1400010e 	bge	r2,r16,80201d00 <___vfprintf_internal_r+0x14bc>
80201cfc:	1021883a 	mov	r16,r2
80201d00:	04000a0e 	bge	zero,r16,80201d2c <___vfprintf_internal_r+0x14e8>
80201d04:	d9001f17 	ldw	r4,124(sp)
80201d08:	1c07883a 	add	r3,r3,r16
80201d0c:	44400015 	stw	r17,0(r8)
80201d10:	21000044 	addi	r4,r4,1
80201d14:	44000115 	stw	r16,4(r8)
80201d18:	d8c02015 	stw	r3,128(sp)
80201d1c:	d9001f15 	stw	r4,124(sp)
80201d20:	014001c4 	movi	r5,7
80201d24:	2901fb16 	blt	r5,r4,80202514 <___vfprintf_internal_r+0x1cd0>
80201d28:	42000204 	addi	r8,r8,8
80201d2c:	8001f716 	blt	r16,zero,8020250c <___vfprintf_internal_r+0x1cc8>
80201d30:	1421c83a 	sub	r16,r2,r16
80201d34:	043d380e 	bge	zero,r16,80201218 <__reset+0xfa1e1218>
80201d38:	04400404 	movi	r17,16
80201d3c:	d8801f17 	ldw	r2,124(sp)
80201d40:	8c3efb0e 	bge	r17,r16,80201930 <__reset+0xfa1e1930>
80201d44:	01600874 	movhi	r5,32801
80201d48:	2948b384 	addi	r5,r5,8910
80201d4c:	d9402b15 	stw	r5,172(sp)
80201d50:	058001c4 	movi	r22,7
80201d54:	dcc02c17 	ldw	r19,176(sp)
80201d58:	00000306 	br	80201d68 <___vfprintf_internal_r+0x1524>
80201d5c:	42000204 	addi	r8,r8,8
80201d60:	843ffc04 	addi	r16,r16,-16
80201d64:	8c3ef50e 	bge	r17,r16,8020193c <__reset+0xfa1e193c>
80201d68:	18c00404 	addi	r3,r3,16
80201d6c:	10800044 	addi	r2,r2,1
80201d70:	45000015 	stw	r20,0(r8)
80201d74:	44400115 	stw	r17,4(r8)
80201d78:	d8c02015 	stw	r3,128(sp)
80201d7c:	d8801f15 	stw	r2,124(sp)
80201d80:	b0bff60e 	bge	r22,r2,80201d5c <__reset+0xfa1e1d5c>
80201d84:	d9801e04 	addi	r6,sp,120
80201d88:	b80b883a 	mov	r5,r23
80201d8c:	9809883a 	mov	r4,r19
80201d90:	0207e600 	call	80207e60 <__sprint_r>
80201d94:	103bad1e 	bne	r2,zero,80200c4c <__reset+0xfa1e0c4c>
80201d98:	d8c02017 	ldw	r3,128(sp)
80201d9c:	d8801f17 	ldw	r2,124(sp)
80201da0:	da000404 	addi	r8,sp,16
80201da4:	003fee06 	br	80201d60 <__reset+0xfa1e1d60>
80201da8:	9088703a 	and	r4,r18,r2
80201dac:	203eab1e 	bne	r4,zero,8020185c <__reset+0xfa1e185c>
80201db0:	dc401f17 	ldw	r17,124(sp)
80201db4:	40800115 	stw	r2,4(r8)
80201db8:	44000015 	stw	r16,0(r8)
80201dbc:	8c400044 	addi	r17,r17,1
80201dc0:	d8c02015 	stw	r3,128(sp)
80201dc4:	dc401f15 	stw	r17,124(sp)
80201dc8:	008001c4 	movi	r2,7
80201dcc:	14400e16 	blt	r2,r17,80201e08 <___vfprintf_internal_r+0x15c4>
80201dd0:	45800204 	addi	r22,r8,8
80201dd4:	003eca06 	br	80201900 <__reset+0xfa1e1900>
80201dd8:	01200874 	movhi	r4,32801
80201ddc:	2108b384 	addi	r4,r4,8910
80201de0:	d9002b15 	stw	r4,172(sp)
80201de4:	d8802b17 	ldw	r2,172(sp)
80201de8:	1c07883a 	add	r3,r3,r16
80201dec:	8c400044 	addi	r17,r17,1
80201df0:	b0800015 	stw	r2,0(r22)
80201df4:	b4000115 	stw	r16,4(r22)
80201df8:	d8c02015 	stw	r3,128(sp)
80201dfc:	dc401f15 	stw	r17,124(sp)
80201e00:	008001c4 	movi	r2,7
80201e04:	147ebd0e 	bge	r2,r17,802018fc <__reset+0xfa1e18fc>
80201e08:	d9002c17 	ldw	r4,176(sp)
80201e0c:	d9801e04 	addi	r6,sp,120
80201e10:	b80b883a 	mov	r5,r23
80201e14:	0207e600 	call	80207e60 <__sprint_r>
80201e18:	103b8c1e 	bne	r2,zero,80200c4c <__reset+0xfa1e0c4c>
80201e1c:	d8c02017 	ldw	r3,128(sp)
80201e20:	dc401f17 	ldw	r17,124(sp)
80201e24:	dd800404 	addi	r22,sp,16
80201e28:	003eb506 	br	80201900 <__reset+0xfa1e1900>
80201e2c:	d9002c17 	ldw	r4,176(sp)
80201e30:	d9801e04 	addi	r6,sp,120
80201e34:	b80b883a 	mov	r5,r23
80201e38:	0207e600 	call	80207e60 <__sprint_r>
80201e3c:	103b831e 	bne	r2,zero,80200c4c <__reset+0xfa1e0c4c>
80201e40:	d8c02017 	ldw	r3,128(sp)
80201e44:	dc401f17 	ldw	r17,124(sp)
80201e48:	da000404 	addi	r8,sp,16
80201e4c:	003e8d06 	br	80201884 <__reset+0xfa1e1884>
80201e50:	d9002c17 	ldw	r4,176(sp)
80201e54:	d9801e04 	addi	r6,sp,120
80201e58:	b80b883a 	mov	r5,r23
80201e5c:	0207e600 	call	80207e60 <__sprint_r>
80201e60:	103b7a1e 	bne	r2,zero,80200c4c <__reset+0xfa1e0c4c>
80201e64:	d8c02017 	ldw	r3,128(sp)
80201e68:	dc401f17 	ldw	r17,124(sp)
80201e6c:	dd800404 	addi	r22,sp,16
80201e70:	003e8f06 	br	802018b0 <__reset+0xfa1e18b0>
80201e74:	0027883a 	mov	r19,zero
80201e78:	003f4a06 	br	80201ba4 <__reset+0xfa1e1ba4>
80201e7c:	d9002c17 	ldw	r4,176(sp)
80201e80:	d9801e04 	addi	r6,sp,120
80201e84:	b80b883a 	mov	r5,r23
80201e88:	0207e600 	call	80207e60 <__sprint_r>
80201e8c:	103b6f1e 	bne	r2,zero,80200c4c <__reset+0xfa1e0c4c>
80201e90:	d8c02017 	ldw	r3,128(sp)
80201e94:	da000404 	addi	r8,sp,16
80201e98:	003c9d06 	br	80201110 <__reset+0xfa1e1110>
80201e9c:	04e7c83a 	sub	r19,zero,r19
80201ea0:	9804c03a 	cmpne	r2,r19,zero
80201ea4:	05adc83a 	sub	r22,zero,r22
80201ea8:	b0adc83a 	sub	r22,r22,r2
80201eac:	d8802917 	ldw	r2,164(sp)
80201eb0:	07000b44 	movi	fp,45
80201eb4:	df002785 	stb	fp,158(sp)
80201eb8:	10017b16 	blt	r2,zero,802024a8 <___vfprintf_internal_r+0x1c64>
80201ebc:	00bfdfc4 	movi	r2,-129
80201ec0:	90a4703a 	and	r18,r18,r2
80201ec4:	003bb106 	br	80200d8c <__reset+0xfa1e0d8c>
80201ec8:	d9003617 	ldw	r4,216(sp)
80201ecc:	d9403817 	ldw	r5,224(sp)
80201ed0:	da003d15 	stw	r8,244(sp)
80201ed4:	0207a840 	call	80207a84 <__fpclassifyd>
80201ed8:	da003d17 	ldw	r8,244(sp)
80201edc:	1000f026 	beq	r2,zero,802022a0 <___vfprintf_internal_r+0x1a5c>
80201ee0:	d9002917 	ldw	r4,164(sp)
80201ee4:	05bff7c4 	movi	r22,-33
80201ee8:	00bfffc4 	movi	r2,-1
80201eec:	8dac703a 	and	r22,r17,r22
80201ef0:	20820026 	beq	r4,r2,802026f4 <___vfprintf_internal_r+0x1eb0>
80201ef4:	008011c4 	movi	r2,71
80201ef8:	b081f726 	beq	r22,r2,802026d8 <___vfprintf_internal_r+0x1e94>
80201efc:	d9003817 	ldw	r4,224(sp)
80201f00:	90c04014 	ori	r3,r18,256
80201f04:	d8c02b15 	stw	r3,172(sp)
80201f08:	20021516 	blt	r4,zero,80202760 <___vfprintf_internal_r+0x1f1c>
80201f0c:	dcc03817 	ldw	r19,224(sp)
80201f10:	d8002a05 	stb	zero,168(sp)
80201f14:	00801984 	movi	r2,102
80201f18:	8881f926 	beq	r17,r2,80202700 <___vfprintf_internal_r+0x1ebc>
80201f1c:	00801184 	movi	r2,70
80201f20:	88821c26 	beq	r17,r2,80202794 <___vfprintf_internal_r+0x1f50>
80201f24:	00801144 	movi	r2,69
80201f28:	b081ef26 	beq	r22,r2,802026e8 <___vfprintf_internal_r+0x1ea4>
80201f2c:	d8c02917 	ldw	r3,164(sp)
80201f30:	d8802104 	addi	r2,sp,132
80201f34:	d8800315 	stw	r2,12(sp)
80201f38:	d9403617 	ldw	r5,216(sp)
80201f3c:	d8802504 	addi	r2,sp,148
80201f40:	d9002c17 	ldw	r4,176(sp)
80201f44:	d8800215 	stw	r2,8(sp)
80201f48:	d8802604 	addi	r2,sp,152
80201f4c:	d8c00015 	stw	r3,0(sp)
80201f50:	d8800115 	stw	r2,4(sp)
80201f54:	01c00084 	movi	r7,2
80201f58:	980d883a 	mov	r6,r19
80201f5c:	d8c03c15 	stw	r3,240(sp)
80201f60:	da003d15 	stw	r8,244(sp)
80201f64:	0202e680 	call	80202e68 <_dtoa_r>
80201f68:	1021883a 	mov	r16,r2
80201f6c:	008019c4 	movi	r2,103
80201f70:	d8c03c17 	ldw	r3,240(sp)
80201f74:	da003d17 	ldw	r8,244(sp)
80201f78:	88817126 	beq	r17,r2,80202540 <___vfprintf_internal_r+0x1cfc>
80201f7c:	008011c4 	movi	r2,71
80201f80:	88829226 	beq	r17,r2,802029cc <___vfprintf_internal_r+0x2188>
80201f84:	80f9883a 	add	fp,r16,r3
80201f88:	d9003617 	ldw	r4,216(sp)
80201f8c:	000d883a 	mov	r6,zero
80201f90:	000f883a 	mov	r7,zero
80201f94:	980b883a 	mov	r5,r19
80201f98:	da003d15 	stw	r8,244(sp)
80201f9c:	020bad80 	call	8020bad8 <__eqdf2>
80201fa0:	da003d17 	ldw	r8,244(sp)
80201fa4:	10018d26 	beq	r2,zero,802025dc <___vfprintf_internal_r+0x1d98>
80201fa8:	d8802117 	ldw	r2,132(sp)
80201fac:	1700062e 	bgeu	r2,fp,80201fc8 <___vfprintf_internal_r+0x1784>
80201fb0:	01000c04 	movi	r4,48
80201fb4:	10c00044 	addi	r3,r2,1
80201fb8:	d8c02115 	stw	r3,132(sp)
80201fbc:	11000005 	stb	r4,0(r2)
80201fc0:	d8802117 	ldw	r2,132(sp)
80201fc4:	173ffb36 	bltu	r2,fp,80201fb4 <__reset+0xfa1e1fb4>
80201fc8:	1405c83a 	sub	r2,r2,r16
80201fcc:	d8803315 	stw	r2,204(sp)
80201fd0:	008011c4 	movi	r2,71
80201fd4:	b0817626 	beq	r22,r2,802025b0 <___vfprintf_internal_r+0x1d6c>
80201fd8:	00801944 	movi	r2,101
80201fdc:	1442810e 	bge	r2,r17,802029e4 <___vfprintf_internal_r+0x21a0>
80201fe0:	d8c02617 	ldw	r3,152(sp)
80201fe4:	00801984 	movi	r2,102
80201fe8:	d8c03215 	stw	r3,200(sp)
80201fec:	8881fe26 	beq	r17,r2,802027e8 <___vfprintf_internal_r+0x1fa4>
80201ff0:	d8c03217 	ldw	r3,200(sp)
80201ff4:	d9003317 	ldw	r4,204(sp)
80201ff8:	1901dd16 	blt	r3,r4,80202770 <___vfprintf_internal_r+0x1f2c>
80201ffc:	9480004c 	andi	r18,r18,1
80202000:	90022b1e 	bne	r18,zero,802028b0 <___vfprintf_internal_r+0x206c>
80202004:	1805883a 	mov	r2,r3
80202008:	18028016 	blt	r3,zero,80202a0c <___vfprintf_internal_r+0x21c8>
8020200c:	d8c03217 	ldw	r3,200(sp)
80202010:	044019c4 	movi	r17,103
80202014:	d8c02e15 	stw	r3,184(sp)
80202018:	df002a07 	ldb	fp,168(sp)
8020201c:	e001531e 	bne	fp,zero,8020256c <___vfprintf_internal_r+0x1d28>
80202020:	df002783 	ldbu	fp,158(sp)
80202024:	d8802a15 	stw	r2,168(sp)
80202028:	dc802b17 	ldw	r18,172(sp)
8020202c:	d8002915 	stw	zero,164(sp)
80202030:	003bd106 	br	80200f78 <__reset+0xfa1e0f78>
80202034:	d8802d17 	ldw	r2,180(sp)
80202038:	d8c02d17 	ldw	r3,180(sp)
8020203c:	d9002d17 	ldw	r4,180(sp)
80202040:	10800017 	ldw	r2,0(r2)
80202044:	18c00117 	ldw	r3,4(r3)
80202048:	21000204 	addi	r4,r4,8
8020204c:	d8803615 	stw	r2,216(sp)
80202050:	d8c03815 	stw	r3,224(sp)
80202054:	d9002d15 	stw	r4,180(sp)
80202058:	003b7506 	br	80200e30 <__reset+0xfa1e0e30>
8020205c:	ac400007 	ldb	r17,0(r21)
80202060:	003a5906 	br	802009c8 <__reset+0xfa1e09c8>
80202064:	9080100c 	andi	r2,r18,64
80202068:	1000a826 	beq	r2,zero,8020230c <___vfprintf_internal_r+0x1ac8>
8020206c:	d9002d17 	ldw	r4,180(sp)
80202070:	002d883a 	mov	r22,zero
80202074:	24c0000b 	ldhu	r19,0(r4)
80202078:	21000104 	addi	r4,r4,4
8020207c:	d9002d15 	stw	r4,180(sp)
80202080:	003ccb06 	br	802013b0 <__reset+0xfa1e13b0>
80202084:	d8c02d17 	ldw	r3,180(sp)
80202088:	d9002917 	ldw	r4,164(sp)
8020208c:	002d883a 	mov	r22,zero
80202090:	18800104 	addi	r2,r3,4
80202094:	1cc00017 	ldw	r19,0(r3)
80202098:	203ebb0e 	bge	r4,zero,80201b88 <__reset+0xfa1e1b88>
8020209c:	003ef106 	br	80201c64 <__reset+0xfa1e1c64>
802020a0:	9080040c 	andi	r2,r18,16
802020a4:	1000921e 	bne	r2,zero,802022f0 <___vfprintf_internal_r+0x1aac>
802020a8:	9480100c 	andi	r18,r18,64
802020ac:	90013926 	beq	r18,zero,80202594 <___vfprintf_internal_r+0x1d50>
802020b0:	d9002d17 	ldw	r4,180(sp)
802020b4:	d9402f17 	ldw	r5,188(sp)
802020b8:	20800017 	ldw	r2,0(r4)
802020bc:	21000104 	addi	r4,r4,4
802020c0:	d9002d15 	stw	r4,180(sp)
802020c4:	1140000d 	sth	r5,0(r2)
802020c8:	003a1606 	br	80200924 <__reset+0xfa1e0924>
802020cc:	9080100c 	andi	r2,r18,64
802020d0:	10008026 	beq	r2,zero,802022d4 <___vfprintf_internal_r+0x1a90>
802020d4:	d8c02d17 	ldw	r3,180(sp)
802020d8:	1cc0000f 	ldh	r19,0(r3)
802020dc:	18c00104 	addi	r3,r3,4
802020e0:	d8c02d15 	stw	r3,180(sp)
802020e4:	982dd7fa 	srai	r22,r19,31
802020e8:	b005883a 	mov	r2,r22
802020ec:	003b1f06 	br	80200d6c <__reset+0xfa1e0d6c>
802020f0:	9080100c 	andi	r2,r18,64
802020f4:	d8002785 	stb	zero,158(sp)
802020f8:	10008a1e 	bne	r2,zero,80202324 <___vfprintf_internal_r+0x1ae0>
802020fc:	d9402d17 	ldw	r5,180(sp)
80202100:	d8c02917 	ldw	r3,164(sp)
80202104:	002d883a 	mov	r22,zero
80202108:	28800104 	addi	r2,r5,4
8020210c:	2cc00017 	ldw	r19,0(r5)
80202110:	183e4b0e 	bge	r3,zero,80201a40 <__reset+0xfa1e1a40>
80202114:	9d86b03a 	or	r3,r19,r22
80202118:	d8802d15 	stw	r2,180(sp)
8020211c:	183e4c1e 	bne	r3,zero,80201a50 <__reset+0xfa1e1a50>
80202120:	0039883a 	mov	fp,zero
80202124:	0005883a 	mov	r2,zero
80202128:	003d4006 	br	8020162c <__reset+0xfa1e162c>
8020212c:	01600874 	movhi	r5,32801
80202130:	2948b384 	addi	r5,r5,8910
80202134:	d9402b15 	stw	r5,172(sp)
80202138:	d9402b17 	ldw	r5,172(sp)
8020213c:	1c47883a 	add	r3,r3,r17
80202140:	10800044 	addi	r2,r2,1
80202144:	41400015 	stw	r5,0(r8)
80202148:	44400115 	stw	r17,4(r8)
8020214c:	d8c02015 	stw	r3,128(sp)
80202150:	d8801f15 	stw	r2,124(sp)
80202154:	010001c4 	movi	r4,7
80202158:	20bec816 	blt	r4,r2,80201c7c <__reset+0xfa1e1c7c>
8020215c:	42000204 	addi	r8,r8,8
80202160:	003ecd06 	br	80201c98 <__reset+0xfa1e1c98>
80202164:	d9002917 	ldw	r4,164(sp)
80202168:	d8002785 	stb	zero,158(sp)
8020216c:	203d2d16 	blt	r4,zero,80201624 <__reset+0xfa1e1624>
80202170:	00bfdfc4 	movi	r2,-129
80202174:	90a4703a 	and	r18,r18,r2
80202178:	003a9106 	br	80200bc0 <__reset+0xfa1e0bc0>
8020217c:	01200874 	movhi	r4,32801
80202180:	2108b384 	addi	r4,r4,8910
80202184:	d9002b15 	stw	r4,172(sp)
80202188:	003c0c06 	br	802011bc <__reset+0xfa1e11bc>
8020218c:	d9002c17 	ldw	r4,176(sp)
80202190:	d9801e04 	addi	r6,sp,120
80202194:	b80b883a 	mov	r5,r23
80202198:	0207e600 	call	80207e60 <__sprint_r>
8020219c:	103aab1e 	bne	r2,zero,80200c4c <__reset+0xfa1e0c4c>
802021a0:	d8c02017 	ldw	r3,128(sp)
802021a4:	da000404 	addi	r8,sp,16
802021a8:	003d4106 	br	802016b0 <__reset+0xfa1e16b0>
802021ac:	d8801f17 	ldw	r2,124(sp)
802021b0:	01600874 	movhi	r5,32801
802021b4:	01000044 	movi	r4,1
802021b8:	18c00044 	addi	r3,r3,1
802021bc:	10800044 	addi	r2,r2,1
802021c0:	2948b304 	addi	r5,r5,8908
802021c4:	41000115 	stw	r4,4(r8)
802021c8:	41400015 	stw	r5,0(r8)
802021cc:	d8c02015 	stw	r3,128(sp)
802021d0:	d8801f15 	stw	r2,124(sp)
802021d4:	010001c4 	movi	r4,7
802021d8:	20805c16 	blt	r4,r2,8020234c <___vfprintf_internal_r+0x1b08>
802021dc:	42000204 	addi	r8,r8,8
802021e0:	8800041e 	bne	r17,zero,802021f4 <___vfprintf_internal_r+0x19b0>
802021e4:	d8803317 	ldw	r2,204(sp)
802021e8:	1000021e 	bne	r2,zero,802021f4 <___vfprintf_internal_r+0x19b0>
802021ec:	9080004c 	andi	r2,r18,1
802021f0:	103c0926 	beq	r2,zero,80201218 <__reset+0xfa1e1218>
802021f4:	d9003717 	ldw	r4,220(sp)
802021f8:	d8801f17 	ldw	r2,124(sp)
802021fc:	d9403417 	ldw	r5,208(sp)
80202200:	20c7883a 	add	r3,r4,r3
80202204:	10800044 	addi	r2,r2,1
80202208:	41000115 	stw	r4,4(r8)
8020220c:	41400015 	stw	r5,0(r8)
80202210:	d8c02015 	stw	r3,128(sp)
80202214:	d8801f15 	stw	r2,124(sp)
80202218:	010001c4 	movi	r4,7
8020221c:	20812116 	blt	r4,r2,802026a4 <___vfprintf_internal_r+0x1e60>
80202220:	42000204 	addi	r8,r8,8
80202224:	0463c83a 	sub	r17,zero,r17
80202228:	0440730e 	bge	zero,r17,802023f8 <___vfprintf_internal_r+0x1bb4>
8020222c:	05800404 	movi	r22,16
80202230:	b440860e 	bge	r22,r17,8020244c <___vfprintf_internal_r+0x1c08>
80202234:	01600874 	movhi	r5,32801
80202238:	2948b384 	addi	r5,r5,8910
8020223c:	d9402b15 	stw	r5,172(sp)
80202240:	070001c4 	movi	fp,7
80202244:	dcc02c17 	ldw	r19,176(sp)
80202248:	00000306 	br	80202258 <___vfprintf_internal_r+0x1a14>
8020224c:	42000204 	addi	r8,r8,8
80202250:	8c7ffc04 	addi	r17,r17,-16
80202254:	b440800e 	bge	r22,r17,80202458 <___vfprintf_internal_r+0x1c14>
80202258:	18c00404 	addi	r3,r3,16
8020225c:	10800044 	addi	r2,r2,1
80202260:	45000015 	stw	r20,0(r8)
80202264:	45800115 	stw	r22,4(r8)
80202268:	d8c02015 	stw	r3,128(sp)
8020226c:	d8801f15 	stw	r2,124(sp)
80202270:	e0bff60e 	bge	fp,r2,8020224c <__reset+0xfa1e224c>
80202274:	d9801e04 	addi	r6,sp,120
80202278:	b80b883a 	mov	r5,r23
8020227c:	9809883a 	mov	r4,r19
80202280:	0207e600 	call	80207e60 <__sprint_r>
80202284:	103a711e 	bne	r2,zero,80200c4c <__reset+0xfa1e0c4c>
80202288:	d8c02017 	ldw	r3,128(sp)
8020228c:	d8801f17 	ldw	r2,124(sp)
80202290:	da000404 	addi	r8,sp,16
80202294:	003fee06 	br	80202250 <__reset+0xfa1e2250>
80202298:	00bfffc4 	movi	r2,-1
8020229c:	003a6f06 	br	80200c5c <__reset+0xfa1e0c5c>
802022a0:	008011c4 	movi	r2,71
802022a4:	1440b816 	blt	r2,r17,80202588 <___vfprintf_internal_r+0x1d44>
802022a8:	04200874 	movhi	r16,32801
802022ac:	8408a504 	addi	r16,r16,8852
802022b0:	00c000c4 	movi	r3,3
802022b4:	00bfdfc4 	movi	r2,-129
802022b8:	d8c02a15 	stw	r3,168(sp)
802022bc:	90a4703a 	and	r18,r18,r2
802022c0:	df002783 	ldbu	fp,158(sp)
802022c4:	d8c02e15 	stw	r3,184(sp)
802022c8:	d8002915 	stw	zero,164(sp)
802022cc:	d8003215 	stw	zero,200(sp)
802022d0:	003b2906 	br	80200f78 <__reset+0xfa1e0f78>
802022d4:	d9002d17 	ldw	r4,180(sp)
802022d8:	24c00017 	ldw	r19,0(r4)
802022dc:	21000104 	addi	r4,r4,4
802022e0:	d9002d15 	stw	r4,180(sp)
802022e4:	982dd7fa 	srai	r22,r19,31
802022e8:	b005883a 	mov	r2,r22
802022ec:	003a9f06 	br	80200d6c <__reset+0xfa1e0d6c>
802022f0:	d9402d17 	ldw	r5,180(sp)
802022f4:	d8c02f17 	ldw	r3,188(sp)
802022f8:	28800017 	ldw	r2,0(r5)
802022fc:	29400104 	addi	r5,r5,4
80202300:	d9402d15 	stw	r5,180(sp)
80202304:	10c00015 	stw	r3,0(r2)
80202308:	00398606 	br	80200924 <__reset+0xfa1e0924>
8020230c:	d9402d17 	ldw	r5,180(sp)
80202310:	002d883a 	mov	r22,zero
80202314:	2cc00017 	ldw	r19,0(r5)
80202318:	29400104 	addi	r5,r5,4
8020231c:	d9402d15 	stw	r5,180(sp)
80202320:	003c2306 	br	802013b0 <__reset+0xfa1e13b0>
80202324:	d8c02d17 	ldw	r3,180(sp)
80202328:	d9002917 	ldw	r4,164(sp)
8020232c:	002d883a 	mov	r22,zero
80202330:	18800104 	addi	r2,r3,4
80202334:	1cc0000b 	ldhu	r19,0(r3)
80202338:	203dc10e 	bge	r4,zero,80201a40 <__reset+0xfa1e1a40>
8020233c:	003f7506 	br	80202114 <__reset+0xfa1e2114>
80202340:	04200874 	movhi	r16,32801
80202344:	8408a304 	addi	r16,r16,8844
80202348:	003acc06 	br	80200e7c <__reset+0xfa1e0e7c>
8020234c:	d9002c17 	ldw	r4,176(sp)
80202350:	d9801e04 	addi	r6,sp,120
80202354:	b80b883a 	mov	r5,r23
80202358:	0207e600 	call	80207e60 <__sprint_r>
8020235c:	103a3b1e 	bne	r2,zero,80200c4c <__reset+0xfa1e0c4c>
80202360:	dc402617 	ldw	r17,152(sp)
80202364:	d8c02017 	ldw	r3,128(sp)
80202368:	da000404 	addi	r8,sp,16
8020236c:	003f9c06 	br	802021e0 <__reset+0xfa1e21e0>
80202370:	ac400043 	ldbu	r17,1(r21)
80202374:	94800814 	ori	r18,r18,32
80202378:	ad400044 	addi	r21,r21,1
8020237c:	8c403fcc 	andi	r17,r17,255
80202380:	8c40201c 	xori	r17,r17,128
80202384:	8c7fe004 	addi	r17,r17,-128
80202388:	00398f06 	br	802009c8 <__reset+0xfa1e09c8>
8020238c:	d8c02d15 	stw	r3,180(sp)
80202390:	0039883a 	mov	fp,zero
80202394:	003e3506 	br	80201c6c <__reset+0xfa1e1c6c>
80202398:	d9002c17 	ldw	r4,176(sp)
8020239c:	d9801e04 	addi	r6,sp,120
802023a0:	b80b883a 	mov	r5,r23
802023a4:	0207e600 	call	80207e60 <__sprint_r>
802023a8:	103a281e 	bne	r2,zero,80200c4c <__reset+0xfa1e0c4c>
802023ac:	d8c02017 	ldw	r3,128(sp)
802023b0:	da000404 	addi	r8,sp,16
802023b4:	003cd006 	br	802016f8 <__reset+0xfa1e16f8>
802023b8:	8009883a 	mov	r4,r16
802023bc:	da003d15 	stw	r8,244(sp)
802023c0:	02007ac0 	call	802007ac <strlen>
802023c4:	d8802e15 	stw	r2,184(sp)
802023c8:	da003d17 	ldw	r8,244(sp)
802023cc:	103c340e 	bge	r2,zero,802014a0 <__reset+0xfa1e14a0>
802023d0:	0005883a 	mov	r2,zero
802023d4:	003c3206 	br	802014a0 <__reset+0xfa1e14a0>
802023d8:	d9002c17 	ldw	r4,176(sp)
802023dc:	d9801e04 	addi	r6,sp,120
802023e0:	b80b883a 	mov	r5,r23
802023e4:	0207e600 	call	80207e60 <__sprint_r>
802023e8:	103a181e 	bne	r2,zero,80200c4c <__reset+0xfa1e0c4c>
802023ec:	d8c02017 	ldw	r3,128(sp)
802023f0:	d8801f17 	ldw	r2,124(sp)
802023f4:	da000404 	addi	r8,sp,16
802023f8:	d9403317 	ldw	r5,204(sp)
802023fc:	10800044 	addi	r2,r2,1
80202400:	44000015 	stw	r16,0(r8)
80202404:	28c7883a 	add	r3,r5,r3
80202408:	003b7d06 	br	80201200 <__reset+0xfa1e1200>
8020240c:	01200874 	movhi	r4,32801
80202410:	2108b784 	addi	r4,r4,8926
80202414:	d9003515 	stw	r4,212(sp)
80202418:	003b1406 	br	8020106c <__reset+0xfa1e106c>
8020241c:	013fffc4 	movi	r4,-1
80202420:	003a3506 	br	80200cf8 <__reset+0xfa1e0cf8>
80202424:	0023883a 	mov	r17,zero
80202428:	003d9d06 	br	80201aa0 <__reset+0xfa1e1aa0>
8020242c:	d9002c17 	ldw	r4,176(sp)
80202430:	d9801e04 	addi	r6,sp,120
80202434:	b80b883a 	mov	r5,r23
80202438:	0207e600 	call	80207e60 <__sprint_r>
8020243c:	103a031e 	bne	r2,zero,80200c4c <__reset+0xfa1e0c4c>
80202440:	d8c02017 	ldw	r3,128(sp)
80202444:	da000404 	addi	r8,sp,16
80202448:	003d9406 	br	80201a9c <__reset+0xfa1e1a9c>
8020244c:	01200874 	movhi	r4,32801
80202450:	2108b384 	addi	r4,r4,8910
80202454:	d9002b15 	stw	r4,172(sp)
80202458:	d9002b17 	ldw	r4,172(sp)
8020245c:	1c47883a 	add	r3,r3,r17
80202460:	10800044 	addi	r2,r2,1
80202464:	41000015 	stw	r4,0(r8)
80202468:	44400115 	stw	r17,4(r8)
8020246c:	d8c02015 	stw	r3,128(sp)
80202470:	d8801f15 	stw	r2,124(sp)
80202474:	010001c4 	movi	r4,7
80202478:	20bfd716 	blt	r4,r2,802023d8 <__reset+0xfa1e23d8>
8020247c:	42000204 	addi	r8,r8,8
80202480:	003fdd06 	br	802023f8 <__reset+0xfa1e23f8>
80202484:	d9002c17 	ldw	r4,176(sp)
80202488:	d9801e04 	addi	r6,sp,120
8020248c:	b80b883a 	mov	r5,r23
80202490:	0207e600 	call	80207e60 <__sprint_r>
80202494:	1039ed1e 	bne	r2,zero,80200c4c <__reset+0xfa1e0c4c>
80202498:	d8802617 	ldw	r2,152(sp)
8020249c:	d8c02017 	ldw	r3,128(sp)
802024a0:	da000404 	addi	r8,sp,16
802024a4:	003e1006 	br	80201ce8 <__reset+0xfa1e1ce8>
802024a8:	00800044 	movi	r2,1
802024ac:	10803fcc 	andi	r2,r2,255
802024b0:	00c00044 	movi	r3,1
802024b4:	10fa3526 	beq	r2,r3,80200d8c <__reset+0xfa1e0d8c>
802024b8:	00c00084 	movi	r3,2
802024bc:	10fbcb26 	beq	r2,r3,802013ec <__reset+0xfa1e13ec>
802024c0:	003a8f06 	br	80200f00 <__reset+0xfa1e0f00>
802024c4:	01200874 	movhi	r4,32801
802024c8:	2108b784 	addi	r4,r4,8926
802024cc:	d9003515 	stw	r4,212(sp)
802024d0:	003b7606 	br	802012ac <__reset+0xfa1e12ac>
802024d4:	d8802917 	ldw	r2,164(sp)
802024d8:	00c00184 	movi	r3,6
802024dc:	1880012e 	bgeu	r3,r2,802024e4 <___vfprintf_internal_r+0x1ca0>
802024e0:	1805883a 	mov	r2,r3
802024e4:	d8802e15 	stw	r2,184(sp)
802024e8:	1000ef16 	blt	r2,zero,802028a8 <___vfprintf_internal_r+0x2064>
802024ec:	04200874 	movhi	r16,32801
802024f0:	d8802a15 	stw	r2,168(sp)
802024f4:	dcc02d15 	stw	r19,180(sp)
802024f8:	d8002915 	stw	zero,164(sp)
802024fc:	d8003215 	stw	zero,200(sp)
80202500:	8408b104 	addi	r16,r16,8900
80202504:	0039883a 	mov	fp,zero
80202508:	003aa206 	br	80200f94 <__reset+0xfa1e0f94>
8020250c:	0021883a 	mov	r16,zero
80202510:	003e0706 	br	80201d30 <__reset+0xfa1e1d30>
80202514:	d9002c17 	ldw	r4,176(sp)
80202518:	d9801e04 	addi	r6,sp,120
8020251c:	b80b883a 	mov	r5,r23
80202520:	0207e600 	call	80207e60 <__sprint_r>
80202524:	1039c91e 	bne	r2,zero,80200c4c <__reset+0xfa1e0c4c>
80202528:	d8802617 	ldw	r2,152(sp)
8020252c:	d9403317 	ldw	r5,204(sp)
80202530:	d8c02017 	ldw	r3,128(sp)
80202534:	da000404 	addi	r8,sp,16
80202538:	2885c83a 	sub	r2,r5,r2
8020253c:	003dfb06 	br	80201d2c <__reset+0xfa1e1d2c>
80202540:	9080004c 	andi	r2,r18,1
80202544:	103e8f1e 	bne	r2,zero,80201f84 <__reset+0xfa1e1f84>
80202548:	d8802117 	ldw	r2,132(sp)
8020254c:	003e9e06 	br	80201fc8 <__reset+0xfa1e1fc8>
80202550:	1025883a 	mov	r18,r2
80202554:	0039883a 	mov	fp,zero
80202558:	00800084 	movi	r2,2
8020255c:	003fd306 	br	802024ac <__reset+0xfa1e24ac>
80202560:	07000b44 	movi	fp,45
80202564:	df002785 	stb	fp,158(sp)
80202568:	003a4006 	br	80200e6c <__reset+0xfa1e0e6c>
8020256c:	00c00b44 	movi	r3,45
80202570:	d8c02785 	stb	r3,158(sp)
80202574:	d8802a15 	stw	r2,168(sp)
80202578:	dc802b17 	ldw	r18,172(sp)
8020257c:	d8002915 	stw	zero,164(sp)
80202580:	07000b44 	movi	fp,45
80202584:	003a8006 	br	80200f88 <__reset+0xfa1e0f88>
80202588:	04200874 	movhi	r16,32801
8020258c:	8408a604 	addi	r16,r16,8856
80202590:	003f4706 	br	802022b0 <__reset+0xfa1e22b0>
80202594:	d8c02d17 	ldw	r3,180(sp)
80202598:	d9002f17 	ldw	r4,188(sp)
8020259c:	18800017 	ldw	r2,0(r3)
802025a0:	18c00104 	addi	r3,r3,4
802025a4:	d8c02d15 	stw	r3,180(sp)
802025a8:	11000015 	stw	r4,0(r2)
802025ac:	0038dd06 	br	80200924 <__reset+0xfa1e0924>
802025b0:	dd802617 	ldw	r22,152(sp)
802025b4:	00bfff44 	movi	r2,-3
802025b8:	b0801c16 	blt	r22,r2,8020262c <___vfprintf_internal_r+0x1de8>
802025bc:	d9402917 	ldw	r5,164(sp)
802025c0:	2d801a16 	blt	r5,r22,8020262c <___vfprintf_internal_r+0x1de8>
802025c4:	dd803215 	stw	r22,200(sp)
802025c8:	003e8906 	br	80201ff0 <__reset+0xfa1e1ff0>
802025cc:	01200874 	movhi	r4,32801
802025d0:	2108b384 	addi	r4,r4,8910
802025d4:	d9002b15 	stw	r4,172(sp)
802025d8:	003c9106 	br	80201820 <__reset+0xfa1e1820>
802025dc:	e005883a 	mov	r2,fp
802025e0:	003e7906 	br	80201fc8 <__reset+0xfa1e1fc8>
802025e4:	d9402917 	ldw	r5,164(sp)
802025e8:	df002783 	ldbu	fp,158(sp)
802025ec:	dcc02d15 	stw	r19,180(sp)
802025f0:	d9402a15 	stw	r5,168(sp)
802025f4:	d9402e15 	stw	r5,184(sp)
802025f8:	d8002915 	stw	zero,164(sp)
802025fc:	d8003215 	stw	zero,200(sp)
80202600:	003a5d06 	br	80200f78 <__reset+0xfa1e0f78>
80202604:	9080004c 	andi	r2,r18,1
80202608:	0039883a 	mov	fp,zero
8020260c:	10000426 	beq	r2,zero,80202620 <___vfprintf_internal_r+0x1ddc>
80202610:	00800c04 	movi	r2,48
80202614:	dc001dc4 	addi	r16,sp,119
80202618:	d8801dc5 	stb	r2,119(sp)
8020261c:	003b8006 	br	80201420 <__reset+0xfa1e1420>
80202620:	d8002e15 	stw	zero,184(sp)
80202624:	dc001e04 	addi	r16,sp,120
80202628:	003a4d06 	br	80200f60 <__reset+0xfa1e0f60>
8020262c:	8c7fff84 	addi	r17,r17,-2
80202630:	b5bfffc4 	addi	r22,r22,-1
80202634:	dd802615 	stw	r22,152(sp)
80202638:	dc4022c5 	stb	r17,139(sp)
8020263c:	b000bf16 	blt	r22,zero,8020293c <___vfprintf_internal_r+0x20f8>
80202640:	00800ac4 	movi	r2,43
80202644:	d8802305 	stb	r2,140(sp)
80202648:	00800244 	movi	r2,9
8020264c:	15807016 	blt	r2,r22,80202810 <___vfprintf_internal_r+0x1fcc>
80202650:	00800c04 	movi	r2,48
80202654:	b5800c04 	addi	r22,r22,48
80202658:	d8802345 	stb	r2,141(sp)
8020265c:	dd802385 	stb	r22,142(sp)
80202660:	d88023c4 	addi	r2,sp,143
80202664:	df0022c4 	addi	fp,sp,139
80202668:	d8c03317 	ldw	r3,204(sp)
8020266c:	1739c83a 	sub	fp,r2,fp
80202670:	d9003317 	ldw	r4,204(sp)
80202674:	e0c7883a 	add	r3,fp,r3
80202678:	df003a15 	stw	fp,232(sp)
8020267c:	d8c02e15 	stw	r3,184(sp)
80202680:	00800044 	movi	r2,1
80202684:	1100b30e 	bge	r2,r4,80202954 <___vfprintf_internal_r+0x2110>
80202688:	d8c02e17 	ldw	r3,184(sp)
8020268c:	18c00044 	addi	r3,r3,1
80202690:	d8c02e15 	stw	r3,184(sp)
80202694:	1805883a 	mov	r2,r3
80202698:	1800ac16 	blt	r3,zero,8020294c <___vfprintf_internal_r+0x2108>
8020269c:	d8003215 	stw	zero,200(sp)
802026a0:	003e5d06 	br	80202018 <__reset+0xfa1e2018>
802026a4:	d9002c17 	ldw	r4,176(sp)
802026a8:	d9801e04 	addi	r6,sp,120
802026ac:	b80b883a 	mov	r5,r23
802026b0:	0207e600 	call	80207e60 <__sprint_r>
802026b4:	1039651e 	bne	r2,zero,80200c4c <__reset+0xfa1e0c4c>
802026b8:	dc402617 	ldw	r17,152(sp)
802026bc:	d8c02017 	ldw	r3,128(sp)
802026c0:	d8801f17 	ldw	r2,124(sp)
802026c4:	da000404 	addi	r8,sp,16
802026c8:	003ed606 	br	80202224 <__reset+0xfa1e2224>
802026cc:	582b883a 	mov	r21,r11
802026d0:	d8002915 	stw	zero,164(sp)
802026d4:	0038bd06 	br	802009cc <__reset+0xfa1e09cc>
802026d8:	d8802917 	ldw	r2,164(sp)
802026dc:	103e071e 	bne	r2,zero,80201efc <__reset+0xfa1e1efc>
802026e0:	dc002915 	stw	r16,164(sp)
802026e4:	003e0506 	br	80201efc <__reset+0xfa1e1efc>
802026e8:	d9002917 	ldw	r4,164(sp)
802026ec:	20c00044 	addi	r3,r4,1
802026f0:	003e0f06 	br	80201f30 <__reset+0xfa1e1f30>
802026f4:	01400184 	movi	r5,6
802026f8:	d9402915 	stw	r5,164(sp)
802026fc:	003dff06 	br	80201efc <__reset+0xfa1e1efc>
80202700:	d8802104 	addi	r2,sp,132
80202704:	d8800315 	stw	r2,12(sp)
80202708:	d8802504 	addi	r2,sp,148
8020270c:	d8800215 	stw	r2,8(sp)
80202710:	d8802604 	addi	r2,sp,152
80202714:	d8800115 	stw	r2,4(sp)
80202718:	d8802917 	ldw	r2,164(sp)
8020271c:	d9403617 	ldw	r5,216(sp)
80202720:	d9002c17 	ldw	r4,176(sp)
80202724:	d8800015 	stw	r2,0(sp)
80202728:	01c000c4 	movi	r7,3
8020272c:	980d883a 	mov	r6,r19
80202730:	da003d15 	stw	r8,244(sp)
80202734:	0202e680 	call	80202e68 <_dtoa_r>
80202738:	d8c02917 	ldw	r3,164(sp)
8020273c:	da003d17 	ldw	r8,244(sp)
80202740:	1021883a 	mov	r16,r2
80202744:	10f9883a 	add	fp,r2,r3
80202748:	81000007 	ldb	r4,0(r16)
8020274c:	00800c04 	movi	r2,48
80202750:	20805e26 	beq	r4,r2,802028cc <___vfprintf_internal_r+0x2088>
80202754:	d8c02617 	ldw	r3,152(sp)
80202758:	e0f9883a 	add	fp,fp,r3
8020275c:	003e0a06 	br	80201f88 <__reset+0xfa1e1f88>
80202760:	00c00b44 	movi	r3,45
80202764:	24e0003c 	xorhi	r19,r4,32768
80202768:	d8c02a05 	stb	r3,168(sp)
8020276c:	003de906 	br	80201f14 <__reset+0xfa1e1f14>
80202770:	d8c03217 	ldw	r3,200(sp)
80202774:	00c07a0e 	bge	zero,r3,80202960 <___vfprintf_internal_r+0x211c>
80202778:	00800044 	movi	r2,1
8020277c:	d9003317 	ldw	r4,204(sp)
80202780:	1105883a 	add	r2,r2,r4
80202784:	d8802e15 	stw	r2,184(sp)
80202788:	10004e16 	blt	r2,zero,802028c4 <___vfprintf_internal_r+0x2080>
8020278c:	044019c4 	movi	r17,103
80202790:	003e2106 	br	80202018 <__reset+0xfa1e2018>
80202794:	d9002917 	ldw	r4,164(sp)
80202798:	d8802104 	addi	r2,sp,132
8020279c:	d8800315 	stw	r2,12(sp)
802027a0:	d9000015 	stw	r4,0(sp)
802027a4:	d8802504 	addi	r2,sp,148
802027a8:	d9403617 	ldw	r5,216(sp)
802027ac:	d9002c17 	ldw	r4,176(sp)
802027b0:	d8800215 	stw	r2,8(sp)
802027b4:	d8802604 	addi	r2,sp,152
802027b8:	d8800115 	stw	r2,4(sp)
802027bc:	01c000c4 	movi	r7,3
802027c0:	980d883a 	mov	r6,r19
802027c4:	da003d15 	stw	r8,244(sp)
802027c8:	0202e680 	call	80202e68 <_dtoa_r>
802027cc:	d8c02917 	ldw	r3,164(sp)
802027d0:	da003d17 	ldw	r8,244(sp)
802027d4:	1021883a 	mov	r16,r2
802027d8:	00801184 	movi	r2,70
802027dc:	80f9883a 	add	fp,r16,r3
802027e0:	88bfd926 	beq	r17,r2,80202748 <__reset+0xfa1e2748>
802027e4:	003de806 	br	80201f88 <__reset+0xfa1e1f88>
802027e8:	d9002917 	ldw	r4,164(sp)
802027ec:	00c04d0e 	bge	zero,r3,80202924 <___vfprintf_internal_r+0x20e0>
802027f0:	2000441e 	bne	r4,zero,80202904 <___vfprintf_internal_r+0x20c0>
802027f4:	9480004c 	andi	r18,r18,1
802027f8:	9000421e 	bne	r18,zero,80202904 <___vfprintf_internal_r+0x20c0>
802027fc:	1805883a 	mov	r2,r3
80202800:	18007016 	blt	r3,zero,802029c4 <___vfprintf_internal_r+0x2180>
80202804:	d8c03217 	ldw	r3,200(sp)
80202808:	d8c02e15 	stw	r3,184(sp)
8020280c:	003e0206 	br	80202018 <__reset+0xfa1e2018>
80202810:	df0022c4 	addi	fp,sp,139
80202814:	dc002915 	stw	r16,164(sp)
80202818:	4027883a 	mov	r19,r8
8020281c:	e021883a 	mov	r16,fp
80202820:	b009883a 	mov	r4,r22
80202824:	01400284 	movi	r5,10
80202828:	020a8140 	call	8020a814 <__modsi3>
8020282c:	10800c04 	addi	r2,r2,48
80202830:	843fffc4 	addi	r16,r16,-1
80202834:	b009883a 	mov	r4,r22
80202838:	01400284 	movi	r5,10
8020283c:	80800005 	stb	r2,0(r16)
80202840:	020a7900 	call	8020a790 <__divsi3>
80202844:	102d883a 	mov	r22,r2
80202848:	00800244 	movi	r2,9
8020284c:	15bff416 	blt	r2,r22,80202820 <__reset+0xfa1e2820>
80202850:	9811883a 	mov	r8,r19
80202854:	b0800c04 	addi	r2,r22,48
80202858:	8027883a 	mov	r19,r16
8020285c:	997fffc4 	addi	r5,r19,-1
80202860:	98bfffc5 	stb	r2,-1(r19)
80202864:	dc002917 	ldw	r16,164(sp)
80202868:	2f006a2e 	bgeu	r5,fp,80202a14 <___vfprintf_internal_r+0x21d0>
8020286c:	d9c02384 	addi	r7,sp,142
80202870:	3ccfc83a 	sub	r7,r7,r19
80202874:	d9002344 	addi	r4,sp,141
80202878:	e1cf883a 	add	r7,fp,r7
8020287c:	00000106 	br	80202884 <___vfprintf_internal_r+0x2040>
80202880:	28800003 	ldbu	r2,0(r5)
80202884:	20800005 	stb	r2,0(r4)
80202888:	21000044 	addi	r4,r4,1
8020288c:	29400044 	addi	r5,r5,1
80202890:	393ffb1e 	bne	r7,r4,80202880 <__reset+0xfa1e2880>
80202894:	d8802304 	addi	r2,sp,140
80202898:	14c5c83a 	sub	r2,r2,r19
8020289c:	d8c02344 	addi	r3,sp,141
802028a0:	1885883a 	add	r2,r3,r2
802028a4:	003f7006 	br	80202668 <__reset+0xfa1e2668>
802028a8:	0005883a 	mov	r2,zero
802028ac:	003f0f06 	br	802024ec <__reset+0xfa1e24ec>
802028b0:	d8c03217 	ldw	r3,200(sp)
802028b4:	18c00044 	addi	r3,r3,1
802028b8:	d8c02e15 	stw	r3,184(sp)
802028bc:	1805883a 	mov	r2,r3
802028c0:	183fb20e 	bge	r3,zero,8020278c <__reset+0xfa1e278c>
802028c4:	0005883a 	mov	r2,zero
802028c8:	003fb006 	br	8020278c <__reset+0xfa1e278c>
802028cc:	d9003617 	ldw	r4,216(sp)
802028d0:	000d883a 	mov	r6,zero
802028d4:	000f883a 	mov	r7,zero
802028d8:	980b883a 	mov	r5,r19
802028dc:	d8c03c15 	stw	r3,240(sp)
802028e0:	da003d15 	stw	r8,244(sp)
802028e4:	020bad80 	call	8020bad8 <__eqdf2>
802028e8:	d8c03c17 	ldw	r3,240(sp)
802028ec:	da003d17 	ldw	r8,244(sp)
802028f0:	103f9826 	beq	r2,zero,80202754 <__reset+0xfa1e2754>
802028f4:	00800044 	movi	r2,1
802028f8:	10c7c83a 	sub	r3,r2,r3
802028fc:	d8c02615 	stw	r3,152(sp)
80202900:	003f9506 	br	80202758 <__reset+0xfa1e2758>
80202904:	d9002917 	ldw	r4,164(sp)
80202908:	d8c03217 	ldw	r3,200(sp)
8020290c:	20800044 	addi	r2,r4,1
80202910:	1885883a 	add	r2,r3,r2
80202914:	d8802e15 	stw	r2,184(sp)
80202918:	103dbf0e 	bge	r2,zero,80202018 <__reset+0xfa1e2018>
8020291c:	0005883a 	mov	r2,zero
80202920:	003dbd06 	br	80202018 <__reset+0xfa1e2018>
80202924:	2000211e 	bne	r4,zero,802029ac <___vfprintf_internal_r+0x2168>
80202928:	9480004c 	andi	r18,r18,1
8020292c:	90001f1e 	bne	r18,zero,802029ac <___vfprintf_internal_r+0x2168>
80202930:	00800044 	movi	r2,1
80202934:	d8802e15 	stw	r2,184(sp)
80202938:	003db706 	br	80202018 <__reset+0xfa1e2018>
8020293c:	00800b44 	movi	r2,45
80202940:	05adc83a 	sub	r22,zero,r22
80202944:	d8802305 	stb	r2,140(sp)
80202948:	003f3f06 	br	80202648 <__reset+0xfa1e2648>
8020294c:	0005883a 	mov	r2,zero
80202950:	003f5206 	br	8020269c <__reset+0xfa1e269c>
80202954:	90a4703a 	and	r18,r18,r2
80202958:	903f4e26 	beq	r18,zero,80202694 <__reset+0xfa1e2694>
8020295c:	003f4a06 	br	80202688 <__reset+0xfa1e2688>
80202960:	00800084 	movi	r2,2
80202964:	10c5c83a 	sub	r2,r2,r3
80202968:	003f8406 	br	8020277c <__reset+0xfa1e277c>
8020296c:	d8802d17 	ldw	r2,180(sp)
80202970:	d9002d17 	ldw	r4,180(sp)
80202974:	ac400043 	ldbu	r17,1(r21)
80202978:	10800017 	ldw	r2,0(r2)
8020297c:	582b883a 	mov	r21,r11
80202980:	d8802915 	stw	r2,164(sp)
80202984:	20800104 	addi	r2,r4,4
80202988:	d9002917 	ldw	r4,164(sp)
8020298c:	d8802d15 	stw	r2,180(sp)
80202990:	203e7a0e 	bge	r4,zero,8020237c <__reset+0xfa1e237c>
80202994:	8c403fcc 	andi	r17,r17,255
80202998:	00bfffc4 	movi	r2,-1
8020299c:	8c40201c 	xori	r17,r17,128
802029a0:	d8802915 	stw	r2,164(sp)
802029a4:	8c7fe004 	addi	r17,r17,-128
802029a8:	00380706 	br	802009c8 <__reset+0xfa1e09c8>
802029ac:	d8c02917 	ldw	r3,164(sp)
802029b0:	18c00084 	addi	r3,r3,2
802029b4:	d8c02e15 	stw	r3,184(sp)
802029b8:	1805883a 	mov	r2,r3
802029bc:	183d960e 	bge	r3,zero,80202018 <__reset+0xfa1e2018>
802029c0:	003fd606 	br	8020291c <__reset+0xfa1e291c>
802029c4:	0005883a 	mov	r2,zero
802029c8:	003f8e06 	br	80202804 <__reset+0xfa1e2804>
802029cc:	9080004c 	andi	r2,r18,1
802029d0:	103f811e 	bne	r2,zero,802027d8 <__reset+0xfa1e27d8>
802029d4:	d8802117 	ldw	r2,132(sp)
802029d8:	1405c83a 	sub	r2,r2,r16
802029dc:	d8803315 	stw	r2,204(sp)
802029e0:	b47ef326 	beq	r22,r17,802025b0 <__reset+0xfa1e25b0>
802029e4:	dd802617 	ldw	r22,152(sp)
802029e8:	003f1106 	br	80202630 <__reset+0xfa1e2630>
802029ec:	d9c02785 	stb	r7,158(sp)
802029f0:	00390406 	br	80200e04 <__reset+0xfa1e0e04>
802029f4:	d9c02785 	stb	r7,158(sp)
802029f8:	0038d306 	br	80200d48 <__reset+0xfa1e0d48>
802029fc:	d9c02785 	stb	r7,158(sp)
80202a00:	003a6106 	br	80201388 <__reset+0xfa1e1388>
80202a04:	d9c02785 	stb	r7,158(sp)
80202a08:	003af806 	br	802015ec <__reset+0xfa1e15ec>
80202a0c:	0005883a 	mov	r2,zero
80202a10:	003d7e06 	br	8020200c <__reset+0xfa1e200c>
80202a14:	d8802344 	addi	r2,sp,141
80202a18:	003f1306 	br	80202668 <__reset+0xfa1e2668>
80202a1c:	d9c02785 	stb	r7,158(sp)
80202a20:	00392306 	br	80200eb0 <__reset+0xfa1e0eb0>
80202a24:	d9c02785 	stb	r7,158(sp)
80202a28:	003aa906 	br	802014d0 <__reset+0xfa1e14d0>
80202a2c:	d9c02785 	stb	r7,158(sp)
80202a30:	003a3d06 	br	80201328 <__reset+0xfa1e1328>
80202a34:	d9c02785 	stb	r7,158(sp)
80202a38:	003aca06 	br	80201564 <__reset+0xfa1e1564>

80202a3c <__vfprintf_internal>:
80202a3c:	00a00874 	movhi	r2,32801
80202a40:	10911c04 	addi	r2,r2,17520
80202a44:	300f883a 	mov	r7,r6
80202a48:	280d883a 	mov	r6,r5
80202a4c:	200b883a 	mov	r5,r4
80202a50:	11000017 	ldw	r4,0(r2)
80202a54:	02008441 	jmpi	80200844 <___vfprintf_internal_r>

80202a58 <__sbprintf>:
80202a58:	2880030b 	ldhu	r2,12(r5)
80202a5c:	2ac01917 	ldw	r11,100(r5)
80202a60:	2a80038b 	ldhu	r10,14(r5)
80202a64:	2a400717 	ldw	r9,28(r5)
80202a68:	2a000917 	ldw	r8,36(r5)
80202a6c:	defee204 	addi	sp,sp,-1144
80202a70:	00c10004 	movi	r3,1024
80202a74:	dc011a15 	stw	r16,1128(sp)
80202a78:	10bfff4c 	andi	r2,r2,65533
80202a7c:	2821883a 	mov	r16,r5
80202a80:	d8cb883a 	add	r5,sp,r3
80202a84:	dc811c15 	stw	r18,1136(sp)
80202a88:	dc411b15 	stw	r17,1132(sp)
80202a8c:	dfc11d15 	stw	ra,1140(sp)
80202a90:	2025883a 	mov	r18,r4
80202a94:	d881030d 	sth	r2,1036(sp)
80202a98:	dac11915 	stw	r11,1124(sp)
80202a9c:	da81038d 	sth	r10,1038(sp)
80202aa0:	da410715 	stw	r9,1052(sp)
80202aa4:	da010915 	stw	r8,1060(sp)
80202aa8:	dec10015 	stw	sp,1024(sp)
80202aac:	dec10415 	stw	sp,1040(sp)
80202ab0:	d8c10215 	stw	r3,1032(sp)
80202ab4:	d8c10515 	stw	r3,1044(sp)
80202ab8:	d8010615 	stw	zero,1048(sp)
80202abc:	02008440 	call	80200844 <___vfprintf_internal_r>
80202ac0:	1023883a 	mov	r17,r2
80202ac4:	10000416 	blt	r2,zero,80202ad8 <__sbprintf+0x80>
80202ac8:	d9410004 	addi	r5,sp,1024
80202acc:	9009883a 	mov	r4,r18
80202ad0:	020470c0 	call	8020470c <_fflush_r>
80202ad4:	10000d1e 	bne	r2,zero,80202b0c <__sbprintf+0xb4>
80202ad8:	d881030b 	ldhu	r2,1036(sp)
80202adc:	1080100c 	andi	r2,r2,64
80202ae0:	10000326 	beq	r2,zero,80202af0 <__sbprintf+0x98>
80202ae4:	8080030b 	ldhu	r2,12(r16)
80202ae8:	10801014 	ori	r2,r2,64
80202aec:	8080030d 	sth	r2,12(r16)
80202af0:	8805883a 	mov	r2,r17
80202af4:	dfc11d17 	ldw	ra,1140(sp)
80202af8:	dc811c17 	ldw	r18,1136(sp)
80202afc:	dc411b17 	ldw	r17,1132(sp)
80202b00:	dc011a17 	ldw	r16,1128(sp)
80202b04:	dec11e04 	addi	sp,sp,1144
80202b08:	f800283a 	ret
80202b0c:	047fffc4 	movi	r17,-1
80202b10:	003ff106 	br	80202ad8 <__reset+0xfa1e2ad8>

80202b14 <__swsetup_r>:
80202b14:	00a00874 	movhi	r2,32801
80202b18:	defffd04 	addi	sp,sp,-12
80202b1c:	10911c04 	addi	r2,r2,17520
80202b20:	dc400115 	stw	r17,4(sp)
80202b24:	2023883a 	mov	r17,r4
80202b28:	11000017 	ldw	r4,0(r2)
80202b2c:	dc000015 	stw	r16,0(sp)
80202b30:	dfc00215 	stw	ra,8(sp)
80202b34:	2821883a 	mov	r16,r5
80202b38:	20000226 	beq	r4,zero,80202b44 <__swsetup_r+0x30>
80202b3c:	20800e17 	ldw	r2,56(r4)
80202b40:	10003126 	beq	r2,zero,80202c08 <__swsetup_r+0xf4>
80202b44:	8080030b 	ldhu	r2,12(r16)
80202b48:	10c0020c 	andi	r3,r2,8
80202b4c:	1009883a 	mov	r4,r2
80202b50:	18000f26 	beq	r3,zero,80202b90 <__swsetup_r+0x7c>
80202b54:	80c00417 	ldw	r3,16(r16)
80202b58:	18001526 	beq	r3,zero,80202bb0 <__swsetup_r+0x9c>
80202b5c:	1100004c 	andi	r4,r2,1
80202b60:	20001c1e 	bne	r4,zero,80202bd4 <__swsetup_r+0xc0>
80202b64:	1080008c 	andi	r2,r2,2
80202b68:	1000291e 	bne	r2,zero,80202c10 <__swsetup_r+0xfc>
80202b6c:	80800517 	ldw	r2,20(r16)
80202b70:	80800215 	stw	r2,8(r16)
80202b74:	18001c26 	beq	r3,zero,80202be8 <__swsetup_r+0xd4>
80202b78:	0005883a 	mov	r2,zero
80202b7c:	dfc00217 	ldw	ra,8(sp)
80202b80:	dc400117 	ldw	r17,4(sp)
80202b84:	dc000017 	ldw	r16,0(sp)
80202b88:	dec00304 	addi	sp,sp,12
80202b8c:	f800283a 	ret
80202b90:	2080040c 	andi	r2,r4,16
80202b94:	10002e26 	beq	r2,zero,80202c50 <__swsetup_r+0x13c>
80202b98:	2080010c 	andi	r2,r4,4
80202b9c:	10001e1e 	bne	r2,zero,80202c18 <__swsetup_r+0x104>
80202ba0:	80c00417 	ldw	r3,16(r16)
80202ba4:	20800214 	ori	r2,r4,8
80202ba8:	8080030d 	sth	r2,12(r16)
80202bac:	183feb1e 	bne	r3,zero,80202b5c <__reset+0xfa1e2b5c>
80202bb0:	1100a00c 	andi	r4,r2,640
80202bb4:	01408004 	movi	r5,512
80202bb8:	217fe826 	beq	r4,r5,80202b5c <__reset+0xfa1e2b5c>
80202bbc:	800b883a 	mov	r5,r16
80202bc0:	8809883a 	mov	r4,r17
80202bc4:	020568c0 	call	8020568c <__smakebuf_r>
80202bc8:	8080030b 	ldhu	r2,12(r16)
80202bcc:	80c00417 	ldw	r3,16(r16)
80202bd0:	003fe206 	br	80202b5c <__reset+0xfa1e2b5c>
80202bd4:	80800517 	ldw	r2,20(r16)
80202bd8:	80000215 	stw	zero,8(r16)
80202bdc:	0085c83a 	sub	r2,zero,r2
80202be0:	80800615 	stw	r2,24(r16)
80202be4:	183fe41e 	bne	r3,zero,80202b78 <__reset+0xfa1e2b78>
80202be8:	80c0030b 	ldhu	r3,12(r16)
80202bec:	0005883a 	mov	r2,zero
80202bf0:	1900200c 	andi	r4,r3,128
80202bf4:	203fe126 	beq	r4,zero,80202b7c <__reset+0xfa1e2b7c>
80202bf8:	18c01014 	ori	r3,r3,64
80202bfc:	80c0030d 	sth	r3,12(r16)
80202c00:	00bfffc4 	movi	r2,-1
80202c04:	003fdd06 	br	80202b7c <__reset+0xfa1e2b7c>
80202c08:	0204ae80 	call	80204ae8 <__sinit>
80202c0c:	003fcd06 	br	80202b44 <__reset+0xfa1e2b44>
80202c10:	0005883a 	mov	r2,zero
80202c14:	003fd606 	br	80202b70 <__reset+0xfa1e2b70>
80202c18:	81400c17 	ldw	r5,48(r16)
80202c1c:	28000626 	beq	r5,zero,80202c38 <__swsetup_r+0x124>
80202c20:	80801004 	addi	r2,r16,64
80202c24:	28800326 	beq	r5,r2,80202c34 <__swsetup_r+0x120>
80202c28:	8809883a 	mov	r4,r17
80202c2c:	0204c5c0 	call	80204c5c <_free_r>
80202c30:	8100030b 	ldhu	r4,12(r16)
80202c34:	80000c15 	stw	zero,48(r16)
80202c38:	80c00417 	ldw	r3,16(r16)
80202c3c:	00bff6c4 	movi	r2,-37
80202c40:	1108703a 	and	r4,r2,r4
80202c44:	80000115 	stw	zero,4(r16)
80202c48:	80c00015 	stw	r3,0(r16)
80202c4c:	003fd506 	br	80202ba4 <__reset+0xfa1e2ba4>
80202c50:	00800244 	movi	r2,9
80202c54:	88800015 	stw	r2,0(r17)
80202c58:	20801014 	ori	r2,r4,64
80202c5c:	8080030d 	sth	r2,12(r16)
80202c60:	00bfffc4 	movi	r2,-1
80202c64:	003fc506 	br	80202b7c <__reset+0xfa1e2b7c>

80202c68 <quorem>:
80202c68:	defff704 	addi	sp,sp,-36
80202c6c:	dc800215 	stw	r18,8(sp)
80202c70:	20800417 	ldw	r2,16(r4)
80202c74:	2c800417 	ldw	r18,16(r5)
80202c78:	dfc00815 	stw	ra,32(sp)
80202c7c:	ddc00715 	stw	r23,28(sp)
80202c80:	dd800615 	stw	r22,24(sp)
80202c84:	dd400515 	stw	r21,20(sp)
80202c88:	dd000415 	stw	r20,16(sp)
80202c8c:	dcc00315 	stw	r19,12(sp)
80202c90:	dc400115 	stw	r17,4(sp)
80202c94:	dc000015 	stw	r16,0(sp)
80202c98:	14807116 	blt	r2,r18,80202e60 <quorem+0x1f8>
80202c9c:	94bfffc4 	addi	r18,r18,-1
80202ca0:	94ad883a 	add	r22,r18,r18
80202ca4:	b5ad883a 	add	r22,r22,r22
80202ca8:	2c400504 	addi	r17,r5,20
80202cac:	8da9883a 	add	r20,r17,r22
80202cb0:	25400504 	addi	r21,r4,20
80202cb4:	282f883a 	mov	r23,r5
80202cb8:	adad883a 	add	r22,r21,r22
80202cbc:	a1400017 	ldw	r5,0(r20)
80202cc0:	2021883a 	mov	r16,r4
80202cc4:	b1000017 	ldw	r4,0(r22)
80202cc8:	29400044 	addi	r5,r5,1
80202ccc:	020a8880 	call	8020a888 <__udivsi3>
80202cd0:	1027883a 	mov	r19,r2
80202cd4:	10002c26 	beq	r2,zero,80202d88 <quorem+0x120>
80202cd8:	a813883a 	mov	r9,r21
80202cdc:	880b883a 	mov	r5,r17
80202ce0:	0009883a 	mov	r4,zero
80202ce4:	000d883a 	mov	r6,zero
80202ce8:	2a000017 	ldw	r8,0(r5)
80202cec:	49c00017 	ldw	r7,0(r9)
80202cf0:	29400104 	addi	r5,r5,4
80202cf4:	40bfffcc 	andi	r2,r8,65535
80202cf8:	14c5383a 	mul	r2,r2,r19
80202cfc:	4010d43a 	srli	r8,r8,16
80202d00:	38ffffcc 	andi	r3,r7,65535
80202d04:	1105883a 	add	r2,r2,r4
80202d08:	1008d43a 	srli	r4,r2,16
80202d0c:	44d1383a 	mul	r8,r8,r19
80202d10:	198d883a 	add	r6,r3,r6
80202d14:	10ffffcc 	andi	r3,r2,65535
80202d18:	30c7c83a 	sub	r3,r6,r3
80202d1c:	380ed43a 	srli	r7,r7,16
80202d20:	4105883a 	add	r2,r8,r4
80202d24:	180dd43a 	srai	r6,r3,16
80202d28:	113fffcc 	andi	r4,r2,65535
80202d2c:	390fc83a 	sub	r7,r7,r4
80202d30:	398d883a 	add	r6,r7,r6
80202d34:	300e943a 	slli	r7,r6,16
80202d38:	18ffffcc 	andi	r3,r3,65535
80202d3c:	1008d43a 	srli	r4,r2,16
80202d40:	38ceb03a 	or	r7,r7,r3
80202d44:	49c00015 	stw	r7,0(r9)
80202d48:	300dd43a 	srai	r6,r6,16
80202d4c:	4a400104 	addi	r9,r9,4
80202d50:	a17fe52e 	bgeu	r20,r5,80202ce8 <__reset+0xfa1e2ce8>
80202d54:	b0800017 	ldw	r2,0(r22)
80202d58:	10000b1e 	bne	r2,zero,80202d88 <quorem+0x120>
80202d5c:	b0bfff04 	addi	r2,r22,-4
80202d60:	a880082e 	bgeu	r21,r2,80202d84 <quorem+0x11c>
80202d64:	b0ffff17 	ldw	r3,-4(r22)
80202d68:	18000326 	beq	r3,zero,80202d78 <quorem+0x110>
80202d6c:	00000506 	br	80202d84 <quorem+0x11c>
80202d70:	10c00017 	ldw	r3,0(r2)
80202d74:	1800031e 	bne	r3,zero,80202d84 <quorem+0x11c>
80202d78:	10bfff04 	addi	r2,r2,-4
80202d7c:	94bfffc4 	addi	r18,r18,-1
80202d80:	a8bffb36 	bltu	r21,r2,80202d70 <__reset+0xfa1e2d70>
80202d84:	84800415 	stw	r18,16(r16)
80202d88:	b80b883a 	mov	r5,r23
80202d8c:	8009883a 	mov	r4,r16
80202d90:	0206c840 	call	80206c84 <__mcmp>
80202d94:	10002616 	blt	r2,zero,80202e30 <quorem+0x1c8>
80202d98:	9cc00044 	addi	r19,r19,1
80202d9c:	a805883a 	mov	r2,r21
80202da0:	000b883a 	mov	r5,zero
80202da4:	11000017 	ldw	r4,0(r2)
80202da8:	89800017 	ldw	r6,0(r17)
80202dac:	10800104 	addi	r2,r2,4
80202db0:	20ffffcc 	andi	r3,r4,65535
80202db4:	194b883a 	add	r5,r3,r5
80202db8:	30ffffcc 	andi	r3,r6,65535
80202dbc:	28c7c83a 	sub	r3,r5,r3
80202dc0:	300cd43a 	srli	r6,r6,16
80202dc4:	2008d43a 	srli	r4,r4,16
80202dc8:	180bd43a 	srai	r5,r3,16
80202dcc:	18ffffcc 	andi	r3,r3,65535
80202dd0:	2189c83a 	sub	r4,r4,r6
80202dd4:	2149883a 	add	r4,r4,r5
80202dd8:	200c943a 	slli	r6,r4,16
80202ddc:	8c400104 	addi	r17,r17,4
80202de0:	200bd43a 	srai	r5,r4,16
80202de4:	30c6b03a 	or	r3,r6,r3
80202de8:	10ffff15 	stw	r3,-4(r2)
80202dec:	a47fed2e 	bgeu	r20,r17,80202da4 <__reset+0xfa1e2da4>
80202df0:	9485883a 	add	r2,r18,r18
80202df4:	1085883a 	add	r2,r2,r2
80202df8:	a887883a 	add	r3,r21,r2
80202dfc:	18800017 	ldw	r2,0(r3)
80202e00:	10000b1e 	bne	r2,zero,80202e30 <quorem+0x1c8>
80202e04:	18bfff04 	addi	r2,r3,-4
80202e08:	a880082e 	bgeu	r21,r2,80202e2c <quorem+0x1c4>
80202e0c:	18ffff17 	ldw	r3,-4(r3)
80202e10:	18000326 	beq	r3,zero,80202e20 <quorem+0x1b8>
80202e14:	00000506 	br	80202e2c <quorem+0x1c4>
80202e18:	10c00017 	ldw	r3,0(r2)
80202e1c:	1800031e 	bne	r3,zero,80202e2c <quorem+0x1c4>
80202e20:	10bfff04 	addi	r2,r2,-4
80202e24:	94bfffc4 	addi	r18,r18,-1
80202e28:	a8bffb36 	bltu	r21,r2,80202e18 <__reset+0xfa1e2e18>
80202e2c:	84800415 	stw	r18,16(r16)
80202e30:	9805883a 	mov	r2,r19
80202e34:	dfc00817 	ldw	ra,32(sp)
80202e38:	ddc00717 	ldw	r23,28(sp)
80202e3c:	dd800617 	ldw	r22,24(sp)
80202e40:	dd400517 	ldw	r21,20(sp)
80202e44:	dd000417 	ldw	r20,16(sp)
80202e48:	dcc00317 	ldw	r19,12(sp)
80202e4c:	dc800217 	ldw	r18,8(sp)
80202e50:	dc400117 	ldw	r17,4(sp)
80202e54:	dc000017 	ldw	r16,0(sp)
80202e58:	dec00904 	addi	sp,sp,36
80202e5c:	f800283a 	ret
80202e60:	0005883a 	mov	r2,zero
80202e64:	003ff306 	br	80202e34 <__reset+0xfa1e2e34>

80202e68 <_dtoa_r>:
80202e68:	20801017 	ldw	r2,64(r4)
80202e6c:	deffde04 	addi	sp,sp,-136
80202e70:	df002015 	stw	fp,128(sp)
80202e74:	dcc01b15 	stw	r19,108(sp)
80202e78:	dc801a15 	stw	r18,104(sp)
80202e7c:	dc401915 	stw	r17,100(sp)
80202e80:	dc001815 	stw	r16,96(sp)
80202e84:	dfc02115 	stw	ra,132(sp)
80202e88:	ddc01f15 	stw	r23,124(sp)
80202e8c:	dd801e15 	stw	r22,120(sp)
80202e90:	dd401d15 	stw	r21,116(sp)
80202e94:	dd001c15 	stw	r20,112(sp)
80202e98:	d9c00315 	stw	r7,12(sp)
80202e9c:	2039883a 	mov	fp,r4
80202ea0:	3023883a 	mov	r17,r6
80202ea4:	2825883a 	mov	r18,r5
80202ea8:	dc002417 	ldw	r16,144(sp)
80202eac:	3027883a 	mov	r19,r6
80202eb0:	10000826 	beq	r2,zero,80202ed4 <_dtoa_r+0x6c>
80202eb4:	21801117 	ldw	r6,68(r4)
80202eb8:	00c00044 	movi	r3,1
80202ebc:	100b883a 	mov	r5,r2
80202ec0:	1986983a 	sll	r3,r3,r6
80202ec4:	11800115 	stw	r6,4(r2)
80202ec8:	10c00215 	stw	r3,8(r2)
80202ecc:	02064640 	call	80206464 <_Bfree>
80202ed0:	e0001015 	stw	zero,64(fp)
80202ed4:	88002e16 	blt	r17,zero,80202f90 <_dtoa_r+0x128>
80202ed8:	80000015 	stw	zero,0(r16)
80202edc:	889ffc2c 	andhi	r2,r17,32752
80202ee0:	00dffc34 	movhi	r3,32752
80202ee4:	10c01c26 	beq	r2,r3,80202f58 <_dtoa_r+0xf0>
80202ee8:	000d883a 	mov	r6,zero
80202eec:	000f883a 	mov	r7,zero
80202ef0:	9009883a 	mov	r4,r18
80202ef4:	980b883a 	mov	r5,r19
80202ef8:	020bad80 	call	8020bad8 <__eqdf2>
80202efc:	10002b1e 	bne	r2,zero,80202fac <_dtoa_r+0x144>
80202f00:	d9c02317 	ldw	r7,140(sp)
80202f04:	00800044 	movi	r2,1
80202f08:	38800015 	stw	r2,0(r7)
80202f0c:	d8802517 	ldw	r2,148(sp)
80202f10:	10019e26 	beq	r2,zero,8020358c <_dtoa_r+0x724>
80202f14:	d8c02517 	ldw	r3,148(sp)
80202f18:	00a00874 	movhi	r2,32801
80202f1c:	1088b344 	addi	r2,r2,8909
80202f20:	18800015 	stw	r2,0(r3)
80202f24:	10bfffc4 	addi	r2,r2,-1
80202f28:	dfc02117 	ldw	ra,132(sp)
80202f2c:	df002017 	ldw	fp,128(sp)
80202f30:	ddc01f17 	ldw	r23,124(sp)
80202f34:	dd801e17 	ldw	r22,120(sp)
80202f38:	dd401d17 	ldw	r21,116(sp)
80202f3c:	dd001c17 	ldw	r20,112(sp)
80202f40:	dcc01b17 	ldw	r19,108(sp)
80202f44:	dc801a17 	ldw	r18,104(sp)
80202f48:	dc401917 	ldw	r17,100(sp)
80202f4c:	dc001817 	ldw	r16,96(sp)
80202f50:	dec02204 	addi	sp,sp,136
80202f54:	f800283a 	ret
80202f58:	d8c02317 	ldw	r3,140(sp)
80202f5c:	0089c3c4 	movi	r2,9999
80202f60:	18800015 	stw	r2,0(r3)
80202f64:	90017726 	beq	r18,zero,80203544 <_dtoa_r+0x6dc>
80202f68:	00a00874 	movhi	r2,32801
80202f6c:	1088bf04 	addi	r2,r2,8956
80202f70:	d9002517 	ldw	r4,148(sp)
80202f74:	203fec26 	beq	r4,zero,80202f28 <__reset+0xfa1e2f28>
80202f78:	10c000c7 	ldb	r3,3(r2)
80202f7c:	1801781e 	bne	r3,zero,80203560 <_dtoa_r+0x6f8>
80202f80:	10c000c4 	addi	r3,r2,3
80202f84:	d9802517 	ldw	r6,148(sp)
80202f88:	30c00015 	stw	r3,0(r6)
80202f8c:	003fe606 	br	80202f28 <__reset+0xfa1e2f28>
80202f90:	04e00034 	movhi	r19,32768
80202f94:	9cffffc4 	addi	r19,r19,-1
80202f98:	00800044 	movi	r2,1
80202f9c:	8ce6703a 	and	r19,r17,r19
80202fa0:	80800015 	stw	r2,0(r16)
80202fa4:	9823883a 	mov	r17,r19
80202fa8:	003fcc06 	br	80202edc <__reset+0xfa1e2edc>
80202fac:	d8800204 	addi	r2,sp,8
80202fb0:	d8800015 	stw	r2,0(sp)
80202fb4:	d9c00104 	addi	r7,sp,4
80202fb8:	900b883a 	mov	r5,r18
80202fbc:	980d883a 	mov	r6,r19
80202fc0:	e009883a 	mov	r4,fp
80202fc4:	8820d53a 	srli	r16,r17,20
80202fc8:	02070500 	call	80207050 <__d2b>
80202fcc:	d8800915 	stw	r2,36(sp)
80202fd0:	8001651e 	bne	r16,zero,80203568 <_dtoa_r+0x700>
80202fd4:	dd800217 	ldw	r22,8(sp)
80202fd8:	dc000117 	ldw	r16,4(sp)
80202fdc:	00800804 	movi	r2,32
80202fe0:	b421883a 	add	r16,r22,r16
80202fe4:	80c10c84 	addi	r3,r16,1074
80202fe8:	10c2d10e 	bge	r2,r3,80203b30 <_dtoa_r+0xcc8>
80202fec:	00801004 	movi	r2,64
80202ff0:	81010484 	addi	r4,r16,1042
80202ff4:	10c7c83a 	sub	r3,r2,r3
80202ff8:	9108d83a 	srl	r4,r18,r4
80202ffc:	88e2983a 	sll	r17,r17,r3
80203000:	2448b03a 	or	r4,r4,r17
80203004:	020cea00 	call	8020cea0 <__floatunsidf>
80203008:	017f8434 	movhi	r5,65040
8020300c:	01800044 	movi	r6,1
80203010:	1009883a 	mov	r4,r2
80203014:	194b883a 	add	r5,r3,r5
80203018:	843fffc4 	addi	r16,r16,-1
8020301c:	d9801115 	stw	r6,68(sp)
80203020:	000d883a 	mov	r6,zero
80203024:	01cffe34 	movhi	r7,16376
80203028:	020c4480 	call	8020c448 <__subdf3>
8020302c:	0198dbf4 	movhi	r6,25455
80203030:	01cff4f4 	movhi	r7,16339
80203034:	3190d844 	addi	r6,r6,17249
80203038:	39e1e9c4 	addi	r7,r7,-30809
8020303c:	1009883a 	mov	r4,r2
80203040:	180b883a 	mov	r5,r3
80203044:	020bd300 	call	8020bd30 <__muldf3>
80203048:	01a2d874 	movhi	r6,35681
8020304c:	01cff1f4 	movhi	r7,16327
80203050:	31b22cc4 	addi	r6,r6,-14157
80203054:	39e28a04 	addi	r7,r7,-30168
80203058:	180b883a 	mov	r5,r3
8020305c:	1009883a 	mov	r4,r2
80203060:	020a9440 	call	8020a944 <__adddf3>
80203064:	8009883a 	mov	r4,r16
80203068:	1029883a 	mov	r20,r2
8020306c:	1823883a 	mov	r17,r3
80203070:	020cdc40 	call	8020cdc4 <__floatsidf>
80203074:	019427f4 	movhi	r6,20639
80203078:	01cff4f4 	movhi	r7,16339
8020307c:	319e7ec4 	addi	r6,r6,31227
80203080:	39d104c4 	addi	r7,r7,17427
80203084:	1009883a 	mov	r4,r2
80203088:	180b883a 	mov	r5,r3
8020308c:	020bd300 	call	8020bd30 <__muldf3>
80203090:	100d883a 	mov	r6,r2
80203094:	180f883a 	mov	r7,r3
80203098:	a009883a 	mov	r4,r20
8020309c:	880b883a 	mov	r5,r17
802030a0:	020a9440 	call	8020a944 <__adddf3>
802030a4:	1009883a 	mov	r4,r2
802030a8:	180b883a 	mov	r5,r3
802030ac:	1029883a 	mov	r20,r2
802030b0:	1823883a 	mov	r17,r3
802030b4:	020cd440 	call	8020cd44 <__fixdfsi>
802030b8:	000d883a 	mov	r6,zero
802030bc:	000f883a 	mov	r7,zero
802030c0:	a009883a 	mov	r4,r20
802030c4:	880b883a 	mov	r5,r17
802030c8:	d8800515 	stw	r2,20(sp)
802030cc:	020bc3c0 	call	8020bc3c <__ledf2>
802030d0:	10028716 	blt	r2,zero,80203af0 <_dtoa_r+0xc88>
802030d4:	d8c00517 	ldw	r3,20(sp)
802030d8:	00800584 	movi	r2,22
802030dc:	10c27536 	bltu	r2,r3,80203ab4 <_dtoa_r+0xc4c>
802030e0:	180490fa 	slli	r2,r3,3
802030e4:	00e00874 	movhi	r3,32801
802030e8:	18c8db04 	addi	r3,r3,9068
802030ec:	1885883a 	add	r2,r3,r2
802030f0:	11000017 	ldw	r4,0(r2)
802030f4:	11400117 	ldw	r5,4(r2)
802030f8:	900d883a 	mov	r6,r18
802030fc:	980f883a 	mov	r7,r19
80203100:	020bb600 	call	8020bb60 <__gedf2>
80203104:	00828d0e 	bge	zero,r2,80203b3c <_dtoa_r+0xcd4>
80203108:	d9000517 	ldw	r4,20(sp)
8020310c:	d8000e15 	stw	zero,56(sp)
80203110:	213fffc4 	addi	r4,r4,-1
80203114:	d9000515 	stw	r4,20(sp)
80203118:	b42dc83a 	sub	r22,r22,r16
8020311c:	b5bfffc4 	addi	r22,r22,-1
80203120:	b0026f16 	blt	r22,zero,80203ae0 <_dtoa_r+0xc78>
80203124:	d8000815 	stw	zero,32(sp)
80203128:	d9c00517 	ldw	r7,20(sp)
8020312c:	38026416 	blt	r7,zero,80203ac0 <_dtoa_r+0xc58>
80203130:	b1ed883a 	add	r22,r22,r7
80203134:	d9c00d15 	stw	r7,52(sp)
80203138:	d8000a15 	stw	zero,40(sp)
8020313c:	d9800317 	ldw	r6,12(sp)
80203140:	00800244 	movi	r2,9
80203144:	11811436 	bltu	r2,r6,80203598 <_dtoa_r+0x730>
80203148:	00800144 	movi	r2,5
8020314c:	1184e10e 	bge	r2,r6,802044d4 <_dtoa_r+0x166c>
80203150:	31bfff04 	addi	r6,r6,-4
80203154:	d9800315 	stw	r6,12(sp)
80203158:	0023883a 	mov	r17,zero
8020315c:	d9800317 	ldw	r6,12(sp)
80203160:	008000c4 	movi	r2,3
80203164:	30836726 	beq	r6,r2,80203f04 <_dtoa_r+0x109c>
80203168:	1183410e 	bge	r2,r6,80203e70 <_dtoa_r+0x1008>
8020316c:	d9c00317 	ldw	r7,12(sp)
80203170:	00800104 	movi	r2,4
80203174:	38827c26 	beq	r7,r2,80203b68 <_dtoa_r+0xd00>
80203178:	00800144 	movi	r2,5
8020317c:	3884c41e 	bne	r7,r2,80204490 <_dtoa_r+0x1628>
80203180:	00800044 	movi	r2,1
80203184:	d8800b15 	stw	r2,44(sp)
80203188:	d8c00517 	ldw	r3,20(sp)
8020318c:	d9002217 	ldw	r4,136(sp)
80203190:	1907883a 	add	r3,r3,r4
80203194:	19800044 	addi	r6,r3,1
80203198:	d8c00c15 	stw	r3,48(sp)
8020319c:	d9800615 	stw	r6,24(sp)
802031a0:	0183a40e 	bge	zero,r6,80204034 <_dtoa_r+0x11cc>
802031a4:	d9800617 	ldw	r6,24(sp)
802031a8:	3021883a 	mov	r16,r6
802031ac:	e0001115 	stw	zero,68(fp)
802031b0:	008005c4 	movi	r2,23
802031b4:	1184c92e 	bgeu	r2,r6,802044dc <_dtoa_r+0x1674>
802031b8:	00c00044 	movi	r3,1
802031bc:	00800104 	movi	r2,4
802031c0:	1085883a 	add	r2,r2,r2
802031c4:	11000504 	addi	r4,r2,20
802031c8:	180b883a 	mov	r5,r3
802031cc:	18c00044 	addi	r3,r3,1
802031d0:	313ffb2e 	bgeu	r6,r4,802031c0 <__reset+0xfa1e31c0>
802031d4:	e1401115 	stw	r5,68(fp)
802031d8:	e009883a 	mov	r4,fp
802031dc:	02063bc0 	call	802063bc <_Balloc>
802031e0:	d8800715 	stw	r2,28(sp)
802031e4:	e0801015 	stw	r2,64(fp)
802031e8:	00800384 	movi	r2,14
802031ec:	1400f736 	bltu	r2,r16,802035cc <_dtoa_r+0x764>
802031f0:	8800f626 	beq	r17,zero,802035cc <_dtoa_r+0x764>
802031f4:	d9c00517 	ldw	r7,20(sp)
802031f8:	01c39a0e 	bge	zero,r7,80204064 <_dtoa_r+0x11fc>
802031fc:	388003cc 	andi	r2,r7,15
80203200:	100490fa 	slli	r2,r2,3
80203204:	382bd13a 	srai	r21,r7,4
80203208:	00e00874 	movhi	r3,32801
8020320c:	18c8db04 	addi	r3,r3,9068
80203210:	1885883a 	add	r2,r3,r2
80203214:	a8c0040c 	andi	r3,r21,16
80203218:	12400017 	ldw	r9,0(r2)
8020321c:	12000117 	ldw	r8,4(r2)
80203220:	18037926 	beq	r3,zero,80204008 <_dtoa_r+0x11a0>
80203224:	00a00874 	movhi	r2,32801
80203228:	1088d104 	addi	r2,r2,9028
8020322c:	11800817 	ldw	r6,32(r2)
80203230:	11c00917 	ldw	r7,36(r2)
80203234:	9009883a 	mov	r4,r18
80203238:	980b883a 	mov	r5,r19
8020323c:	da001715 	stw	r8,92(sp)
80203240:	da401615 	stw	r9,88(sp)
80203244:	020b1f00 	call	8020b1f0 <__divdf3>
80203248:	da001717 	ldw	r8,92(sp)
8020324c:	da401617 	ldw	r9,88(sp)
80203250:	ad4003cc 	andi	r21,r21,15
80203254:	040000c4 	movi	r16,3
80203258:	1023883a 	mov	r17,r2
8020325c:	1829883a 	mov	r20,r3
80203260:	a8001126 	beq	r21,zero,802032a8 <_dtoa_r+0x440>
80203264:	05e00874 	movhi	r23,32801
80203268:	bdc8d104 	addi	r23,r23,9028
8020326c:	4805883a 	mov	r2,r9
80203270:	4007883a 	mov	r3,r8
80203274:	a980004c 	andi	r6,r21,1
80203278:	1009883a 	mov	r4,r2
8020327c:	a82bd07a 	srai	r21,r21,1
80203280:	180b883a 	mov	r5,r3
80203284:	30000426 	beq	r6,zero,80203298 <_dtoa_r+0x430>
80203288:	b9800017 	ldw	r6,0(r23)
8020328c:	b9c00117 	ldw	r7,4(r23)
80203290:	84000044 	addi	r16,r16,1
80203294:	020bd300 	call	8020bd30 <__muldf3>
80203298:	bdc00204 	addi	r23,r23,8
8020329c:	a83ff51e 	bne	r21,zero,80203274 <__reset+0xfa1e3274>
802032a0:	1013883a 	mov	r9,r2
802032a4:	1811883a 	mov	r8,r3
802032a8:	480d883a 	mov	r6,r9
802032ac:	400f883a 	mov	r7,r8
802032b0:	8809883a 	mov	r4,r17
802032b4:	a00b883a 	mov	r5,r20
802032b8:	020b1f00 	call	8020b1f0 <__divdf3>
802032bc:	d8800f15 	stw	r2,60(sp)
802032c0:	d8c01015 	stw	r3,64(sp)
802032c4:	d8c00e17 	ldw	r3,56(sp)
802032c8:	18000626 	beq	r3,zero,802032e4 <_dtoa_r+0x47c>
802032cc:	d9000f17 	ldw	r4,60(sp)
802032d0:	d9401017 	ldw	r5,64(sp)
802032d4:	000d883a 	mov	r6,zero
802032d8:	01cffc34 	movhi	r7,16368
802032dc:	020bc3c0 	call	8020bc3c <__ledf2>
802032e0:	10040b16 	blt	r2,zero,80204310 <_dtoa_r+0x14a8>
802032e4:	8009883a 	mov	r4,r16
802032e8:	020cdc40 	call	8020cdc4 <__floatsidf>
802032ec:	d9800f17 	ldw	r6,60(sp)
802032f0:	d9c01017 	ldw	r7,64(sp)
802032f4:	1009883a 	mov	r4,r2
802032f8:	180b883a 	mov	r5,r3
802032fc:	020bd300 	call	8020bd30 <__muldf3>
80203300:	000d883a 	mov	r6,zero
80203304:	01d00734 	movhi	r7,16412
80203308:	1009883a 	mov	r4,r2
8020330c:	180b883a 	mov	r5,r3
80203310:	020a9440 	call	8020a944 <__adddf3>
80203314:	1021883a 	mov	r16,r2
80203318:	d8800617 	ldw	r2,24(sp)
8020331c:	047f3034 	movhi	r17,64704
80203320:	1c63883a 	add	r17,r3,r17
80203324:	10031826 	beq	r2,zero,80203f88 <_dtoa_r+0x1120>
80203328:	d8c00517 	ldw	r3,20(sp)
8020332c:	db000617 	ldw	r12,24(sp)
80203330:	d8c01315 	stw	r3,76(sp)
80203334:	d9000b17 	ldw	r4,44(sp)
80203338:	20038f26 	beq	r4,zero,80204178 <_dtoa_r+0x1310>
8020333c:	60bfffc4 	addi	r2,r12,-1
80203340:	100490fa 	slli	r2,r2,3
80203344:	00e00874 	movhi	r3,32801
80203348:	18c8db04 	addi	r3,r3,9068
8020334c:	1885883a 	add	r2,r3,r2
80203350:	11800017 	ldw	r6,0(r2)
80203354:	11c00117 	ldw	r7,4(r2)
80203358:	d8800717 	ldw	r2,28(sp)
8020335c:	0009883a 	mov	r4,zero
80203360:	014ff834 	movhi	r5,16352
80203364:	db001615 	stw	r12,88(sp)
80203368:	15c00044 	addi	r23,r2,1
8020336c:	020b1f00 	call	8020b1f0 <__divdf3>
80203370:	800d883a 	mov	r6,r16
80203374:	880f883a 	mov	r7,r17
80203378:	1009883a 	mov	r4,r2
8020337c:	180b883a 	mov	r5,r3
80203380:	020c4480 	call	8020c448 <__subdf3>
80203384:	d9401017 	ldw	r5,64(sp)
80203388:	d9000f17 	ldw	r4,60(sp)
8020338c:	102b883a 	mov	r21,r2
80203390:	d8c01215 	stw	r3,72(sp)
80203394:	020cd440 	call	8020cd44 <__fixdfsi>
80203398:	1009883a 	mov	r4,r2
8020339c:	1029883a 	mov	r20,r2
802033a0:	020cdc40 	call	8020cdc4 <__floatsidf>
802033a4:	d9000f17 	ldw	r4,60(sp)
802033a8:	d9401017 	ldw	r5,64(sp)
802033ac:	100d883a 	mov	r6,r2
802033b0:	180f883a 	mov	r7,r3
802033b4:	020c4480 	call	8020c448 <__subdf3>
802033b8:	1823883a 	mov	r17,r3
802033bc:	d8c00717 	ldw	r3,28(sp)
802033c0:	d9401217 	ldw	r5,72(sp)
802033c4:	a2000c04 	addi	r8,r20,48
802033c8:	1021883a 	mov	r16,r2
802033cc:	1a000005 	stb	r8,0(r3)
802033d0:	800d883a 	mov	r6,r16
802033d4:	880f883a 	mov	r7,r17
802033d8:	a809883a 	mov	r4,r21
802033dc:	4029883a 	mov	r20,r8
802033e0:	020bb600 	call	8020bb60 <__gedf2>
802033e4:	00841d16 	blt	zero,r2,8020445c <_dtoa_r+0x15f4>
802033e8:	800d883a 	mov	r6,r16
802033ec:	880f883a 	mov	r7,r17
802033f0:	0009883a 	mov	r4,zero
802033f4:	014ffc34 	movhi	r5,16368
802033f8:	020c4480 	call	8020c448 <__subdf3>
802033fc:	d9401217 	ldw	r5,72(sp)
80203400:	100d883a 	mov	r6,r2
80203404:	180f883a 	mov	r7,r3
80203408:	a809883a 	mov	r4,r21
8020340c:	020bb600 	call	8020bb60 <__gedf2>
80203410:	db001617 	ldw	r12,88(sp)
80203414:	00840e16 	blt	zero,r2,80204450 <_dtoa_r+0x15e8>
80203418:	00800044 	movi	r2,1
8020341c:	13006b0e 	bge	r2,r12,802035cc <_dtoa_r+0x764>
80203420:	d9000717 	ldw	r4,28(sp)
80203424:	dd800f15 	stw	r22,60(sp)
80203428:	dcc01015 	stw	r19,64(sp)
8020342c:	2319883a 	add	r12,r4,r12
80203430:	dcc01217 	ldw	r19,72(sp)
80203434:	602d883a 	mov	r22,r12
80203438:	dc801215 	stw	r18,72(sp)
8020343c:	b825883a 	mov	r18,r23
80203440:	00000906 	br	80203468 <_dtoa_r+0x600>
80203444:	020c4480 	call	8020c448 <__subdf3>
80203448:	a80d883a 	mov	r6,r21
8020344c:	980f883a 	mov	r7,r19
80203450:	1009883a 	mov	r4,r2
80203454:	180b883a 	mov	r5,r3
80203458:	020bc3c0 	call	8020bc3c <__ledf2>
8020345c:	1003e816 	blt	r2,zero,80204400 <_dtoa_r+0x1598>
80203460:	b825883a 	mov	r18,r23
80203464:	bd83e926 	beq	r23,r22,8020440c <_dtoa_r+0x15a4>
80203468:	a809883a 	mov	r4,r21
8020346c:	980b883a 	mov	r5,r19
80203470:	000d883a 	mov	r6,zero
80203474:	01d00934 	movhi	r7,16420
80203478:	020bd300 	call	8020bd30 <__muldf3>
8020347c:	000d883a 	mov	r6,zero
80203480:	01d00934 	movhi	r7,16420
80203484:	8009883a 	mov	r4,r16
80203488:	880b883a 	mov	r5,r17
8020348c:	102b883a 	mov	r21,r2
80203490:	1827883a 	mov	r19,r3
80203494:	020bd300 	call	8020bd30 <__muldf3>
80203498:	180b883a 	mov	r5,r3
8020349c:	1009883a 	mov	r4,r2
802034a0:	1821883a 	mov	r16,r3
802034a4:	1023883a 	mov	r17,r2
802034a8:	020cd440 	call	8020cd44 <__fixdfsi>
802034ac:	1009883a 	mov	r4,r2
802034b0:	1029883a 	mov	r20,r2
802034b4:	020cdc40 	call	8020cdc4 <__floatsidf>
802034b8:	8809883a 	mov	r4,r17
802034bc:	800b883a 	mov	r5,r16
802034c0:	100d883a 	mov	r6,r2
802034c4:	180f883a 	mov	r7,r3
802034c8:	020c4480 	call	8020c448 <__subdf3>
802034cc:	a5000c04 	addi	r20,r20,48
802034d0:	a80d883a 	mov	r6,r21
802034d4:	980f883a 	mov	r7,r19
802034d8:	1009883a 	mov	r4,r2
802034dc:	180b883a 	mov	r5,r3
802034e0:	95000005 	stb	r20,0(r18)
802034e4:	1021883a 	mov	r16,r2
802034e8:	1823883a 	mov	r17,r3
802034ec:	020bc3c0 	call	8020bc3c <__ledf2>
802034f0:	bdc00044 	addi	r23,r23,1
802034f4:	800d883a 	mov	r6,r16
802034f8:	880f883a 	mov	r7,r17
802034fc:	0009883a 	mov	r4,zero
80203500:	014ffc34 	movhi	r5,16368
80203504:	103fcf0e 	bge	r2,zero,80203444 <__reset+0xfa1e3444>
80203508:	d8c01317 	ldw	r3,76(sp)
8020350c:	d8c00515 	stw	r3,20(sp)
80203510:	d9400917 	ldw	r5,36(sp)
80203514:	e009883a 	mov	r4,fp
80203518:	02064640 	call	80206464 <_Bfree>
8020351c:	d9000517 	ldw	r4,20(sp)
80203520:	d9802317 	ldw	r6,140(sp)
80203524:	d9c02517 	ldw	r7,148(sp)
80203528:	b8000005 	stb	zero,0(r23)
8020352c:	20800044 	addi	r2,r4,1
80203530:	30800015 	stw	r2,0(r6)
80203534:	3802aa26 	beq	r7,zero,80203fe0 <_dtoa_r+0x1178>
80203538:	3dc00015 	stw	r23,0(r7)
8020353c:	d8800717 	ldw	r2,28(sp)
80203540:	003e7906 	br	80202f28 <__reset+0xfa1e2f28>
80203544:	00800434 	movhi	r2,16
80203548:	10bfffc4 	addi	r2,r2,-1
8020354c:	88a2703a 	and	r17,r17,r2
80203550:	883e851e 	bne	r17,zero,80202f68 <__reset+0xfa1e2f68>
80203554:	00a00874 	movhi	r2,32801
80203558:	1088bc04 	addi	r2,r2,8944
8020355c:	003e8406 	br	80202f70 <__reset+0xfa1e2f70>
80203560:	10c00204 	addi	r3,r2,8
80203564:	003e8706 	br	80202f84 <__reset+0xfa1e2f84>
80203568:	01400434 	movhi	r5,16
8020356c:	297fffc4 	addi	r5,r5,-1
80203570:	994a703a 	and	r5,r19,r5
80203574:	9009883a 	mov	r4,r18
80203578:	843f0044 	addi	r16,r16,-1023
8020357c:	294ffc34 	orhi	r5,r5,16368
80203580:	dd800217 	ldw	r22,8(sp)
80203584:	d8001115 	stw	zero,68(sp)
80203588:	003ea506 	br	80203020 <__reset+0xfa1e3020>
8020358c:	00a00874 	movhi	r2,32801
80203590:	1088b304 	addi	r2,r2,8908
80203594:	003e6406 	br	80202f28 <__reset+0xfa1e2f28>
80203598:	e0001115 	stw	zero,68(fp)
8020359c:	000b883a 	mov	r5,zero
802035a0:	e009883a 	mov	r4,fp
802035a4:	02063bc0 	call	802063bc <_Balloc>
802035a8:	01bfffc4 	movi	r6,-1
802035ac:	01c00044 	movi	r7,1
802035b0:	d8800715 	stw	r2,28(sp)
802035b4:	d9800c15 	stw	r6,48(sp)
802035b8:	e0801015 	stw	r2,64(fp)
802035bc:	d8000315 	stw	zero,12(sp)
802035c0:	d9c00b15 	stw	r7,44(sp)
802035c4:	d9800615 	stw	r6,24(sp)
802035c8:	d8002215 	stw	zero,136(sp)
802035cc:	d8800117 	ldw	r2,4(sp)
802035d0:	10008916 	blt	r2,zero,802037f8 <_dtoa_r+0x990>
802035d4:	d9000517 	ldw	r4,20(sp)
802035d8:	00c00384 	movi	r3,14
802035dc:	19008616 	blt	r3,r4,802037f8 <_dtoa_r+0x990>
802035e0:	200490fa 	slli	r2,r4,3
802035e4:	00e00874 	movhi	r3,32801
802035e8:	d9802217 	ldw	r6,136(sp)
802035ec:	18c8db04 	addi	r3,r3,9068
802035f0:	1885883a 	add	r2,r3,r2
802035f4:	14000017 	ldw	r16,0(r2)
802035f8:	14400117 	ldw	r17,4(r2)
802035fc:	30016316 	blt	r6,zero,80203b8c <_dtoa_r+0xd24>
80203600:	800d883a 	mov	r6,r16
80203604:	880f883a 	mov	r7,r17
80203608:	9009883a 	mov	r4,r18
8020360c:	980b883a 	mov	r5,r19
80203610:	020b1f00 	call	8020b1f0 <__divdf3>
80203614:	180b883a 	mov	r5,r3
80203618:	1009883a 	mov	r4,r2
8020361c:	020cd440 	call	8020cd44 <__fixdfsi>
80203620:	1009883a 	mov	r4,r2
80203624:	102b883a 	mov	r21,r2
80203628:	020cdc40 	call	8020cdc4 <__floatsidf>
8020362c:	800d883a 	mov	r6,r16
80203630:	880f883a 	mov	r7,r17
80203634:	1009883a 	mov	r4,r2
80203638:	180b883a 	mov	r5,r3
8020363c:	020bd300 	call	8020bd30 <__muldf3>
80203640:	100d883a 	mov	r6,r2
80203644:	180f883a 	mov	r7,r3
80203648:	9009883a 	mov	r4,r18
8020364c:	980b883a 	mov	r5,r19
80203650:	020c4480 	call	8020c448 <__subdf3>
80203654:	d9c00717 	ldw	r7,28(sp)
80203658:	1009883a 	mov	r4,r2
8020365c:	a8800c04 	addi	r2,r21,48
80203660:	38800005 	stb	r2,0(r7)
80203664:	3dc00044 	addi	r23,r7,1
80203668:	d9c00617 	ldw	r7,24(sp)
8020366c:	01800044 	movi	r6,1
80203670:	180b883a 	mov	r5,r3
80203674:	2005883a 	mov	r2,r4
80203678:	39803826 	beq	r7,r6,8020375c <_dtoa_r+0x8f4>
8020367c:	000d883a 	mov	r6,zero
80203680:	01d00934 	movhi	r7,16420
80203684:	020bd300 	call	8020bd30 <__muldf3>
80203688:	000d883a 	mov	r6,zero
8020368c:	000f883a 	mov	r7,zero
80203690:	1009883a 	mov	r4,r2
80203694:	180b883a 	mov	r5,r3
80203698:	1025883a 	mov	r18,r2
8020369c:	1827883a 	mov	r19,r3
802036a0:	020bad80 	call	8020bad8 <__eqdf2>
802036a4:	103f9a26 	beq	r2,zero,80203510 <__reset+0xfa1e3510>
802036a8:	d9c00617 	ldw	r7,24(sp)
802036ac:	d8c00717 	ldw	r3,28(sp)
802036b0:	b829883a 	mov	r20,r23
802036b4:	38bfffc4 	addi	r2,r7,-1
802036b8:	18ad883a 	add	r22,r3,r2
802036bc:	00000a06 	br	802036e8 <_dtoa_r+0x880>
802036c0:	020bd300 	call	8020bd30 <__muldf3>
802036c4:	000d883a 	mov	r6,zero
802036c8:	000f883a 	mov	r7,zero
802036cc:	1009883a 	mov	r4,r2
802036d0:	180b883a 	mov	r5,r3
802036d4:	1025883a 	mov	r18,r2
802036d8:	1827883a 	mov	r19,r3
802036dc:	b829883a 	mov	r20,r23
802036e0:	020bad80 	call	8020bad8 <__eqdf2>
802036e4:	103f8a26 	beq	r2,zero,80203510 <__reset+0xfa1e3510>
802036e8:	800d883a 	mov	r6,r16
802036ec:	880f883a 	mov	r7,r17
802036f0:	9009883a 	mov	r4,r18
802036f4:	980b883a 	mov	r5,r19
802036f8:	020b1f00 	call	8020b1f0 <__divdf3>
802036fc:	180b883a 	mov	r5,r3
80203700:	1009883a 	mov	r4,r2
80203704:	020cd440 	call	8020cd44 <__fixdfsi>
80203708:	1009883a 	mov	r4,r2
8020370c:	102b883a 	mov	r21,r2
80203710:	020cdc40 	call	8020cdc4 <__floatsidf>
80203714:	800d883a 	mov	r6,r16
80203718:	880f883a 	mov	r7,r17
8020371c:	1009883a 	mov	r4,r2
80203720:	180b883a 	mov	r5,r3
80203724:	020bd300 	call	8020bd30 <__muldf3>
80203728:	100d883a 	mov	r6,r2
8020372c:	180f883a 	mov	r7,r3
80203730:	9009883a 	mov	r4,r18
80203734:	980b883a 	mov	r5,r19
80203738:	020c4480 	call	8020c448 <__subdf3>
8020373c:	aa000c04 	addi	r8,r21,48
80203740:	a2000005 	stb	r8,0(r20)
80203744:	000d883a 	mov	r6,zero
80203748:	01d00934 	movhi	r7,16420
8020374c:	1009883a 	mov	r4,r2
80203750:	180b883a 	mov	r5,r3
80203754:	a5c00044 	addi	r23,r20,1
80203758:	b53fd91e 	bne	r22,r20,802036c0 <__reset+0xfa1e36c0>
8020375c:	100d883a 	mov	r6,r2
80203760:	180f883a 	mov	r7,r3
80203764:	1009883a 	mov	r4,r2
80203768:	180b883a 	mov	r5,r3
8020376c:	020a9440 	call	8020a944 <__adddf3>
80203770:	100d883a 	mov	r6,r2
80203774:	180f883a 	mov	r7,r3
80203778:	8009883a 	mov	r4,r16
8020377c:	880b883a 	mov	r5,r17
80203780:	1027883a 	mov	r19,r2
80203784:	1825883a 	mov	r18,r3
80203788:	020bc3c0 	call	8020bc3c <__ledf2>
8020378c:	10000816 	blt	r2,zero,802037b0 <_dtoa_r+0x948>
80203790:	980d883a 	mov	r6,r19
80203794:	900f883a 	mov	r7,r18
80203798:	8009883a 	mov	r4,r16
8020379c:	880b883a 	mov	r5,r17
802037a0:	020bad80 	call	8020bad8 <__eqdf2>
802037a4:	103f5a1e 	bne	r2,zero,80203510 <__reset+0xfa1e3510>
802037a8:	ad40004c 	andi	r21,r21,1
802037ac:	a83f5826 	beq	r21,zero,80203510 <__reset+0xfa1e3510>
802037b0:	bd3fffc3 	ldbu	r20,-1(r23)
802037b4:	b8bfffc4 	addi	r2,r23,-1
802037b8:	1007883a 	mov	r3,r2
802037bc:	01400e44 	movi	r5,57
802037c0:	d9800717 	ldw	r6,28(sp)
802037c4:	00000506 	br	802037dc <_dtoa_r+0x974>
802037c8:	18ffffc4 	addi	r3,r3,-1
802037cc:	11824726 	beq	r2,r6,802040ec <_dtoa_r+0x1284>
802037d0:	1d000003 	ldbu	r20,0(r3)
802037d4:	102f883a 	mov	r23,r2
802037d8:	10bfffc4 	addi	r2,r2,-1
802037dc:	a1003fcc 	andi	r4,r20,255
802037e0:	2100201c 	xori	r4,r4,128
802037e4:	213fe004 	addi	r4,r4,-128
802037e8:	217ff726 	beq	r4,r5,802037c8 <__reset+0xfa1e37c8>
802037ec:	a2000044 	addi	r8,r20,1
802037f0:	12000005 	stb	r8,0(r2)
802037f4:	003f4606 	br	80203510 <__reset+0xfa1e3510>
802037f8:	d9000b17 	ldw	r4,44(sp)
802037fc:	2000c826 	beq	r4,zero,80203b20 <_dtoa_r+0xcb8>
80203800:	d9800317 	ldw	r6,12(sp)
80203804:	00c00044 	movi	r3,1
80203808:	1980f90e 	bge	r3,r6,80203bf0 <_dtoa_r+0xd88>
8020380c:	d8800617 	ldw	r2,24(sp)
80203810:	d8c00a17 	ldw	r3,40(sp)
80203814:	157fffc4 	addi	r21,r2,-1
80203818:	1d41f316 	blt	r3,r21,80203fe8 <_dtoa_r+0x1180>
8020381c:	1d6bc83a 	sub	r21,r3,r21
80203820:	d9c00617 	ldw	r7,24(sp)
80203824:	3802aa16 	blt	r7,zero,802042d0 <_dtoa_r+0x1468>
80203828:	dd000817 	ldw	r20,32(sp)
8020382c:	d8800617 	ldw	r2,24(sp)
80203830:	d8c00817 	ldw	r3,32(sp)
80203834:	01400044 	movi	r5,1
80203838:	e009883a 	mov	r4,fp
8020383c:	1887883a 	add	r3,r3,r2
80203840:	d8c00815 	stw	r3,32(sp)
80203844:	b0ad883a 	add	r22,r22,r2
80203848:	02067c80 	call	802067c8 <__i2b>
8020384c:	1023883a 	mov	r17,r2
80203850:	a0000826 	beq	r20,zero,80203874 <_dtoa_r+0xa0c>
80203854:	0580070e 	bge	zero,r22,80203874 <_dtoa_r+0xa0c>
80203858:	a005883a 	mov	r2,r20
8020385c:	b500b916 	blt	r22,r20,80203b44 <_dtoa_r+0xcdc>
80203860:	d9000817 	ldw	r4,32(sp)
80203864:	a0a9c83a 	sub	r20,r20,r2
80203868:	b0adc83a 	sub	r22,r22,r2
8020386c:	2089c83a 	sub	r4,r4,r2
80203870:	d9000815 	stw	r4,32(sp)
80203874:	d9800a17 	ldw	r6,40(sp)
80203878:	0181810e 	bge	zero,r6,80203e80 <_dtoa_r+0x1018>
8020387c:	d9c00b17 	ldw	r7,44(sp)
80203880:	3800b326 	beq	r7,zero,80203b50 <_dtoa_r+0xce8>
80203884:	a800b226 	beq	r21,zero,80203b50 <_dtoa_r+0xce8>
80203888:	880b883a 	mov	r5,r17
8020388c:	a80d883a 	mov	r6,r21
80203890:	e009883a 	mov	r4,fp
80203894:	02069fc0 	call	802069fc <__pow5mult>
80203898:	d9800917 	ldw	r6,36(sp)
8020389c:	100b883a 	mov	r5,r2
802038a0:	e009883a 	mov	r4,fp
802038a4:	1023883a 	mov	r17,r2
802038a8:	02068040 	call	80206804 <__multiply>
802038ac:	1021883a 	mov	r16,r2
802038b0:	d8800a17 	ldw	r2,40(sp)
802038b4:	d9400917 	ldw	r5,36(sp)
802038b8:	e009883a 	mov	r4,fp
802038bc:	1545c83a 	sub	r2,r2,r21
802038c0:	d8800a15 	stw	r2,40(sp)
802038c4:	02064640 	call	80206464 <_Bfree>
802038c8:	d8c00a17 	ldw	r3,40(sp)
802038cc:	18009f1e 	bne	r3,zero,80203b4c <_dtoa_r+0xce4>
802038d0:	05c00044 	movi	r23,1
802038d4:	e009883a 	mov	r4,fp
802038d8:	b80b883a 	mov	r5,r23
802038dc:	02067c80 	call	802067c8 <__i2b>
802038e0:	d9000d17 	ldw	r4,52(sp)
802038e4:	102b883a 	mov	r21,r2
802038e8:	2000ce26 	beq	r4,zero,80203c24 <_dtoa_r+0xdbc>
802038ec:	200d883a 	mov	r6,r4
802038f0:	100b883a 	mov	r5,r2
802038f4:	e009883a 	mov	r4,fp
802038f8:	02069fc0 	call	802069fc <__pow5mult>
802038fc:	d9800317 	ldw	r6,12(sp)
80203900:	102b883a 	mov	r21,r2
80203904:	b981810e 	bge	r23,r6,80203f0c <_dtoa_r+0x10a4>
80203908:	0027883a 	mov	r19,zero
8020390c:	a8800417 	ldw	r2,16(r21)
80203910:	05c00804 	movi	r23,32
80203914:	10800104 	addi	r2,r2,4
80203918:	1085883a 	add	r2,r2,r2
8020391c:	1085883a 	add	r2,r2,r2
80203920:	a885883a 	add	r2,r21,r2
80203924:	11000017 	ldw	r4,0(r2)
80203928:	02066b00 	call	802066b0 <__hi0bits>
8020392c:	b885c83a 	sub	r2,r23,r2
80203930:	1585883a 	add	r2,r2,r22
80203934:	108007cc 	andi	r2,r2,31
80203938:	1000b326 	beq	r2,zero,80203c08 <_dtoa_r+0xda0>
8020393c:	00c00804 	movi	r3,32
80203940:	1887c83a 	sub	r3,r3,r2
80203944:	01000104 	movi	r4,4
80203948:	20c2cd0e 	bge	r4,r3,80204480 <_dtoa_r+0x1618>
8020394c:	00c00704 	movi	r3,28
80203950:	1885c83a 	sub	r2,r3,r2
80203954:	d8c00817 	ldw	r3,32(sp)
80203958:	a0a9883a 	add	r20,r20,r2
8020395c:	b0ad883a 	add	r22,r22,r2
80203960:	1887883a 	add	r3,r3,r2
80203964:	d8c00815 	stw	r3,32(sp)
80203968:	d9800817 	ldw	r6,32(sp)
8020396c:	0180040e 	bge	zero,r6,80203980 <_dtoa_r+0xb18>
80203970:	800b883a 	mov	r5,r16
80203974:	e009883a 	mov	r4,fp
80203978:	0206b3c0 	call	80206b3c <__lshift>
8020397c:	1021883a 	mov	r16,r2
80203980:	0580050e 	bge	zero,r22,80203998 <_dtoa_r+0xb30>
80203984:	a80b883a 	mov	r5,r21
80203988:	b00d883a 	mov	r6,r22
8020398c:	e009883a 	mov	r4,fp
80203990:	0206b3c0 	call	80206b3c <__lshift>
80203994:	102b883a 	mov	r21,r2
80203998:	d9c00e17 	ldw	r7,56(sp)
8020399c:	3801211e 	bne	r7,zero,80203e24 <_dtoa_r+0xfbc>
802039a0:	d9800617 	ldw	r6,24(sp)
802039a4:	0181380e 	bge	zero,r6,80203e88 <_dtoa_r+0x1020>
802039a8:	d8c00b17 	ldw	r3,44(sp)
802039ac:	1800ab1e 	bne	r3,zero,80203c5c <_dtoa_r+0xdf4>
802039b0:	dc800717 	ldw	r18,28(sp)
802039b4:	dcc00617 	ldw	r19,24(sp)
802039b8:	9029883a 	mov	r20,r18
802039bc:	00000206 	br	802039c8 <_dtoa_r+0xb60>
802039c0:	020648c0 	call	8020648c <__multadd>
802039c4:	1021883a 	mov	r16,r2
802039c8:	a80b883a 	mov	r5,r21
802039cc:	8009883a 	mov	r4,r16
802039d0:	0202c680 	call	80202c68 <quorem>
802039d4:	10800c04 	addi	r2,r2,48
802039d8:	90800005 	stb	r2,0(r18)
802039dc:	94800044 	addi	r18,r18,1
802039e0:	9507c83a 	sub	r3,r18,r20
802039e4:	000f883a 	mov	r7,zero
802039e8:	01800284 	movi	r6,10
802039ec:	800b883a 	mov	r5,r16
802039f0:	e009883a 	mov	r4,fp
802039f4:	1cfff216 	blt	r3,r19,802039c0 <__reset+0xfa1e39c0>
802039f8:	1011883a 	mov	r8,r2
802039fc:	d8800617 	ldw	r2,24(sp)
80203a00:	0082370e 	bge	zero,r2,802042e0 <_dtoa_r+0x1478>
80203a04:	d9000717 	ldw	r4,28(sp)
80203a08:	0025883a 	mov	r18,zero
80203a0c:	20af883a 	add	r23,r4,r2
80203a10:	01800044 	movi	r6,1
80203a14:	800b883a 	mov	r5,r16
80203a18:	e009883a 	mov	r4,fp
80203a1c:	da001715 	stw	r8,92(sp)
80203a20:	0206b3c0 	call	80206b3c <__lshift>
80203a24:	a80b883a 	mov	r5,r21
80203a28:	1009883a 	mov	r4,r2
80203a2c:	d8800915 	stw	r2,36(sp)
80203a30:	0206c840 	call	80206c84 <__mcmp>
80203a34:	da001717 	ldw	r8,92(sp)
80203a38:	0081800e 	bge	zero,r2,8020403c <_dtoa_r+0x11d4>
80203a3c:	b93fffc3 	ldbu	r4,-1(r23)
80203a40:	b8bfffc4 	addi	r2,r23,-1
80203a44:	1007883a 	mov	r3,r2
80203a48:	01800e44 	movi	r6,57
80203a4c:	d9c00717 	ldw	r7,28(sp)
80203a50:	00000506 	br	80203a68 <_dtoa_r+0xc00>
80203a54:	18ffffc4 	addi	r3,r3,-1
80203a58:	11c12326 	beq	r2,r7,80203ee8 <_dtoa_r+0x1080>
80203a5c:	19000003 	ldbu	r4,0(r3)
80203a60:	102f883a 	mov	r23,r2
80203a64:	10bfffc4 	addi	r2,r2,-1
80203a68:	21403fcc 	andi	r5,r4,255
80203a6c:	2940201c 	xori	r5,r5,128
80203a70:	297fe004 	addi	r5,r5,-128
80203a74:	29bff726 	beq	r5,r6,80203a54 <__reset+0xfa1e3a54>
80203a78:	21000044 	addi	r4,r4,1
80203a7c:	11000005 	stb	r4,0(r2)
80203a80:	a80b883a 	mov	r5,r21
80203a84:	e009883a 	mov	r4,fp
80203a88:	02064640 	call	80206464 <_Bfree>
80203a8c:	883ea026 	beq	r17,zero,80203510 <__reset+0xfa1e3510>
80203a90:	90000426 	beq	r18,zero,80203aa4 <_dtoa_r+0xc3c>
80203a94:	94400326 	beq	r18,r17,80203aa4 <_dtoa_r+0xc3c>
80203a98:	900b883a 	mov	r5,r18
80203a9c:	e009883a 	mov	r4,fp
80203aa0:	02064640 	call	80206464 <_Bfree>
80203aa4:	880b883a 	mov	r5,r17
80203aa8:	e009883a 	mov	r4,fp
80203aac:	02064640 	call	80206464 <_Bfree>
80203ab0:	003e9706 	br	80203510 <__reset+0xfa1e3510>
80203ab4:	01800044 	movi	r6,1
80203ab8:	d9800e15 	stw	r6,56(sp)
80203abc:	003d9606 	br	80203118 <__reset+0xfa1e3118>
80203ac0:	d8800817 	ldw	r2,32(sp)
80203ac4:	d8c00517 	ldw	r3,20(sp)
80203ac8:	d8000d15 	stw	zero,52(sp)
80203acc:	10c5c83a 	sub	r2,r2,r3
80203ad0:	00c9c83a 	sub	r4,zero,r3
80203ad4:	d8800815 	stw	r2,32(sp)
80203ad8:	d9000a15 	stw	r4,40(sp)
80203adc:	003d9706 	br	8020313c <__reset+0xfa1e313c>
80203ae0:	05adc83a 	sub	r22,zero,r22
80203ae4:	dd800815 	stw	r22,32(sp)
80203ae8:	002d883a 	mov	r22,zero
80203aec:	003d8e06 	br	80203128 <__reset+0xfa1e3128>
80203af0:	d9000517 	ldw	r4,20(sp)
80203af4:	020cdc40 	call	8020cdc4 <__floatsidf>
80203af8:	100d883a 	mov	r6,r2
80203afc:	180f883a 	mov	r7,r3
80203b00:	a009883a 	mov	r4,r20
80203b04:	880b883a 	mov	r5,r17
80203b08:	020bad80 	call	8020bad8 <__eqdf2>
80203b0c:	103d7126 	beq	r2,zero,802030d4 <__reset+0xfa1e30d4>
80203b10:	d9c00517 	ldw	r7,20(sp)
80203b14:	39ffffc4 	addi	r7,r7,-1
80203b18:	d9c00515 	stw	r7,20(sp)
80203b1c:	003d6d06 	br	802030d4 <__reset+0xfa1e30d4>
80203b20:	dd400a17 	ldw	r21,40(sp)
80203b24:	dd000817 	ldw	r20,32(sp)
80203b28:	0023883a 	mov	r17,zero
80203b2c:	003f4806 	br	80203850 <__reset+0xfa1e3850>
80203b30:	10e3c83a 	sub	r17,r2,r3
80203b34:	9448983a 	sll	r4,r18,r17
80203b38:	003d3206 	br	80203004 <__reset+0xfa1e3004>
80203b3c:	d8000e15 	stw	zero,56(sp)
80203b40:	003d7506 	br	80203118 <__reset+0xfa1e3118>
80203b44:	b005883a 	mov	r2,r22
80203b48:	003f4506 	br	80203860 <__reset+0xfa1e3860>
80203b4c:	dc000915 	stw	r16,36(sp)
80203b50:	d9800a17 	ldw	r6,40(sp)
80203b54:	d9400917 	ldw	r5,36(sp)
80203b58:	e009883a 	mov	r4,fp
80203b5c:	02069fc0 	call	802069fc <__pow5mult>
80203b60:	1021883a 	mov	r16,r2
80203b64:	003f5a06 	br	802038d0 <__reset+0xfa1e38d0>
80203b68:	01c00044 	movi	r7,1
80203b6c:	d9c00b15 	stw	r7,44(sp)
80203b70:	d8802217 	ldw	r2,136(sp)
80203b74:	0081280e 	bge	zero,r2,80204018 <_dtoa_r+0x11b0>
80203b78:	100d883a 	mov	r6,r2
80203b7c:	1021883a 	mov	r16,r2
80203b80:	d8800c15 	stw	r2,48(sp)
80203b84:	d8800615 	stw	r2,24(sp)
80203b88:	003d8806 	br	802031ac <__reset+0xfa1e31ac>
80203b8c:	d8800617 	ldw	r2,24(sp)
80203b90:	00be9b16 	blt	zero,r2,80203600 <__reset+0xfa1e3600>
80203b94:	10010f1e 	bne	r2,zero,80203fd4 <_dtoa_r+0x116c>
80203b98:	880b883a 	mov	r5,r17
80203b9c:	000d883a 	mov	r6,zero
80203ba0:	01d00534 	movhi	r7,16404
80203ba4:	8009883a 	mov	r4,r16
80203ba8:	020bd300 	call	8020bd30 <__muldf3>
80203bac:	900d883a 	mov	r6,r18
80203bb0:	980f883a 	mov	r7,r19
80203bb4:	1009883a 	mov	r4,r2
80203bb8:	180b883a 	mov	r5,r3
80203bbc:	020bb600 	call	8020bb60 <__gedf2>
80203bc0:	002b883a 	mov	r21,zero
80203bc4:	0023883a 	mov	r17,zero
80203bc8:	1000bf16 	blt	r2,zero,80203ec8 <_dtoa_r+0x1060>
80203bcc:	d9802217 	ldw	r6,136(sp)
80203bd0:	ddc00717 	ldw	r23,28(sp)
80203bd4:	018c303a 	nor	r6,zero,r6
80203bd8:	d9800515 	stw	r6,20(sp)
80203bdc:	a80b883a 	mov	r5,r21
80203be0:	e009883a 	mov	r4,fp
80203be4:	02064640 	call	80206464 <_Bfree>
80203be8:	883e4926 	beq	r17,zero,80203510 <__reset+0xfa1e3510>
80203bec:	003fad06 	br	80203aa4 <__reset+0xfa1e3aa4>
80203bf0:	d9c01117 	ldw	r7,68(sp)
80203bf4:	3801bc26 	beq	r7,zero,802042e8 <_dtoa_r+0x1480>
80203bf8:	10810cc4 	addi	r2,r2,1075
80203bfc:	dd400a17 	ldw	r21,40(sp)
80203c00:	dd000817 	ldw	r20,32(sp)
80203c04:	003f0a06 	br	80203830 <__reset+0xfa1e3830>
80203c08:	00800704 	movi	r2,28
80203c0c:	d9000817 	ldw	r4,32(sp)
80203c10:	a0a9883a 	add	r20,r20,r2
80203c14:	b0ad883a 	add	r22,r22,r2
80203c18:	2089883a 	add	r4,r4,r2
80203c1c:	d9000815 	stw	r4,32(sp)
80203c20:	003f5106 	br	80203968 <__reset+0xfa1e3968>
80203c24:	d8c00317 	ldw	r3,12(sp)
80203c28:	b8c1fc0e 	bge	r23,r3,8020441c <_dtoa_r+0x15b4>
80203c2c:	0027883a 	mov	r19,zero
80203c30:	b805883a 	mov	r2,r23
80203c34:	003f3e06 	br	80203930 <__reset+0xfa1e3930>
80203c38:	880b883a 	mov	r5,r17
80203c3c:	e009883a 	mov	r4,fp
80203c40:	000f883a 	mov	r7,zero
80203c44:	01800284 	movi	r6,10
80203c48:	020648c0 	call	8020648c <__multadd>
80203c4c:	d9000c17 	ldw	r4,48(sp)
80203c50:	1023883a 	mov	r17,r2
80203c54:	0102040e 	bge	zero,r4,80204468 <_dtoa_r+0x1600>
80203c58:	d9000615 	stw	r4,24(sp)
80203c5c:	0500050e 	bge	zero,r20,80203c74 <_dtoa_r+0xe0c>
80203c60:	880b883a 	mov	r5,r17
80203c64:	a00d883a 	mov	r6,r20
80203c68:	e009883a 	mov	r4,fp
80203c6c:	0206b3c0 	call	80206b3c <__lshift>
80203c70:	1023883a 	mov	r17,r2
80203c74:	9801241e 	bne	r19,zero,80204108 <_dtoa_r+0x12a0>
80203c78:	8829883a 	mov	r20,r17
80203c7c:	d9000617 	ldw	r4,24(sp)
80203c80:	dcc00717 	ldw	r19,28(sp)
80203c84:	9480004c 	andi	r18,r18,1
80203c88:	20bfffc4 	addi	r2,r4,-1
80203c8c:	9885883a 	add	r2,r19,r2
80203c90:	d8800415 	stw	r2,16(sp)
80203c94:	dc800615 	stw	r18,24(sp)
80203c98:	a80b883a 	mov	r5,r21
80203c9c:	8009883a 	mov	r4,r16
80203ca0:	0202c680 	call	80202c68 <quorem>
80203ca4:	880b883a 	mov	r5,r17
80203ca8:	8009883a 	mov	r4,r16
80203cac:	102f883a 	mov	r23,r2
80203cb0:	0206c840 	call	80206c84 <__mcmp>
80203cb4:	a80b883a 	mov	r5,r21
80203cb8:	a00d883a 	mov	r6,r20
80203cbc:	e009883a 	mov	r4,fp
80203cc0:	102d883a 	mov	r22,r2
80203cc4:	0206ce40 	call	80206ce4 <__mdiff>
80203cc8:	1007883a 	mov	r3,r2
80203ccc:	10800317 	ldw	r2,12(r2)
80203cd0:	bc800c04 	addi	r18,r23,48
80203cd4:	180b883a 	mov	r5,r3
80203cd8:	10004e1e 	bne	r2,zero,80203e14 <_dtoa_r+0xfac>
80203cdc:	8009883a 	mov	r4,r16
80203ce0:	d8c01615 	stw	r3,88(sp)
80203ce4:	0206c840 	call	80206c84 <__mcmp>
80203ce8:	d8c01617 	ldw	r3,88(sp)
80203cec:	e009883a 	mov	r4,fp
80203cf0:	d8801615 	stw	r2,88(sp)
80203cf4:	180b883a 	mov	r5,r3
80203cf8:	02064640 	call	80206464 <_Bfree>
80203cfc:	d8801617 	ldw	r2,88(sp)
80203d00:	1000041e 	bne	r2,zero,80203d14 <_dtoa_r+0xeac>
80203d04:	d9800317 	ldw	r6,12(sp)
80203d08:	3000021e 	bne	r6,zero,80203d14 <_dtoa_r+0xeac>
80203d0c:	d8c00617 	ldw	r3,24(sp)
80203d10:	18003726 	beq	r3,zero,80203df0 <_dtoa_r+0xf88>
80203d14:	b0002016 	blt	r22,zero,80203d98 <_dtoa_r+0xf30>
80203d18:	b000041e 	bne	r22,zero,80203d2c <_dtoa_r+0xec4>
80203d1c:	d9000317 	ldw	r4,12(sp)
80203d20:	2000021e 	bne	r4,zero,80203d2c <_dtoa_r+0xec4>
80203d24:	d8c00617 	ldw	r3,24(sp)
80203d28:	18001b26 	beq	r3,zero,80203d98 <_dtoa_r+0xf30>
80203d2c:	00810716 	blt	zero,r2,8020414c <_dtoa_r+0x12e4>
80203d30:	d8c00417 	ldw	r3,16(sp)
80203d34:	9d800044 	addi	r22,r19,1
80203d38:	9c800005 	stb	r18,0(r19)
80203d3c:	b02f883a 	mov	r23,r22
80203d40:	98c10626 	beq	r19,r3,8020415c <_dtoa_r+0x12f4>
80203d44:	800b883a 	mov	r5,r16
80203d48:	000f883a 	mov	r7,zero
80203d4c:	01800284 	movi	r6,10
80203d50:	e009883a 	mov	r4,fp
80203d54:	020648c0 	call	8020648c <__multadd>
80203d58:	1021883a 	mov	r16,r2
80203d5c:	000f883a 	mov	r7,zero
80203d60:	01800284 	movi	r6,10
80203d64:	880b883a 	mov	r5,r17
80203d68:	e009883a 	mov	r4,fp
80203d6c:	8d002526 	beq	r17,r20,80203e04 <_dtoa_r+0xf9c>
80203d70:	020648c0 	call	8020648c <__multadd>
80203d74:	a00b883a 	mov	r5,r20
80203d78:	000f883a 	mov	r7,zero
80203d7c:	01800284 	movi	r6,10
80203d80:	e009883a 	mov	r4,fp
80203d84:	1023883a 	mov	r17,r2
80203d88:	020648c0 	call	8020648c <__multadd>
80203d8c:	1029883a 	mov	r20,r2
80203d90:	b027883a 	mov	r19,r22
80203d94:	003fc006 	br	80203c98 <__reset+0xfa1e3c98>
80203d98:	9011883a 	mov	r8,r18
80203d9c:	00800e0e 	bge	zero,r2,80203dd8 <_dtoa_r+0xf70>
80203da0:	800b883a 	mov	r5,r16
80203da4:	01800044 	movi	r6,1
80203da8:	e009883a 	mov	r4,fp
80203dac:	da001715 	stw	r8,92(sp)
80203db0:	0206b3c0 	call	80206b3c <__lshift>
80203db4:	a80b883a 	mov	r5,r21
80203db8:	1009883a 	mov	r4,r2
80203dbc:	1021883a 	mov	r16,r2
80203dc0:	0206c840 	call	80206c84 <__mcmp>
80203dc4:	da001717 	ldw	r8,92(sp)
80203dc8:	0081960e 	bge	zero,r2,80204424 <_dtoa_r+0x15bc>
80203dcc:	00800e44 	movi	r2,57
80203dd0:	40817026 	beq	r8,r2,80204394 <_dtoa_r+0x152c>
80203dd4:	ba000c44 	addi	r8,r23,49
80203dd8:	8825883a 	mov	r18,r17
80203ddc:	9dc00044 	addi	r23,r19,1
80203de0:	9a000005 	stb	r8,0(r19)
80203de4:	a023883a 	mov	r17,r20
80203de8:	dc000915 	stw	r16,36(sp)
80203dec:	003f2406 	br	80203a80 <__reset+0xfa1e3a80>
80203df0:	00800e44 	movi	r2,57
80203df4:	9011883a 	mov	r8,r18
80203df8:	90816626 	beq	r18,r2,80204394 <_dtoa_r+0x152c>
80203dfc:	05bff516 	blt	zero,r22,80203dd4 <__reset+0xfa1e3dd4>
80203e00:	003ff506 	br	80203dd8 <__reset+0xfa1e3dd8>
80203e04:	020648c0 	call	8020648c <__multadd>
80203e08:	1023883a 	mov	r17,r2
80203e0c:	1029883a 	mov	r20,r2
80203e10:	003fdf06 	br	80203d90 <__reset+0xfa1e3d90>
80203e14:	e009883a 	mov	r4,fp
80203e18:	02064640 	call	80206464 <_Bfree>
80203e1c:	00800044 	movi	r2,1
80203e20:	003fbc06 	br	80203d14 <__reset+0xfa1e3d14>
80203e24:	a80b883a 	mov	r5,r21
80203e28:	8009883a 	mov	r4,r16
80203e2c:	0206c840 	call	80206c84 <__mcmp>
80203e30:	103edb0e 	bge	r2,zero,802039a0 <__reset+0xfa1e39a0>
80203e34:	800b883a 	mov	r5,r16
80203e38:	000f883a 	mov	r7,zero
80203e3c:	01800284 	movi	r6,10
80203e40:	e009883a 	mov	r4,fp
80203e44:	020648c0 	call	8020648c <__multadd>
80203e48:	1021883a 	mov	r16,r2
80203e4c:	d8800517 	ldw	r2,20(sp)
80203e50:	d8c00b17 	ldw	r3,44(sp)
80203e54:	10bfffc4 	addi	r2,r2,-1
80203e58:	d8800515 	stw	r2,20(sp)
80203e5c:	183f761e 	bne	r3,zero,80203c38 <__reset+0xfa1e3c38>
80203e60:	d9000c17 	ldw	r4,48(sp)
80203e64:	0101730e 	bge	zero,r4,80204434 <_dtoa_r+0x15cc>
80203e68:	d9000615 	stw	r4,24(sp)
80203e6c:	003ed006 	br	802039b0 <__reset+0xfa1e39b0>
80203e70:	00800084 	movi	r2,2
80203e74:	3081861e 	bne	r6,r2,80204490 <_dtoa_r+0x1628>
80203e78:	d8000b15 	stw	zero,44(sp)
80203e7c:	003f3c06 	br	80203b70 <__reset+0xfa1e3b70>
80203e80:	dc000917 	ldw	r16,36(sp)
80203e84:	003e9206 	br	802038d0 <__reset+0xfa1e38d0>
80203e88:	d9c00317 	ldw	r7,12(sp)
80203e8c:	00800084 	movi	r2,2
80203e90:	11fec50e 	bge	r2,r7,802039a8 <__reset+0xfa1e39a8>
80203e94:	d9000617 	ldw	r4,24(sp)
80203e98:	20013c1e 	bne	r4,zero,8020438c <_dtoa_r+0x1524>
80203e9c:	a80b883a 	mov	r5,r21
80203ea0:	000f883a 	mov	r7,zero
80203ea4:	01800144 	movi	r6,5
80203ea8:	e009883a 	mov	r4,fp
80203eac:	020648c0 	call	8020648c <__multadd>
80203eb0:	100b883a 	mov	r5,r2
80203eb4:	8009883a 	mov	r4,r16
80203eb8:	102b883a 	mov	r21,r2
80203ebc:	0206c840 	call	80206c84 <__mcmp>
80203ec0:	dc000915 	stw	r16,36(sp)
80203ec4:	00bf410e 	bge	zero,r2,80203bcc <__reset+0xfa1e3bcc>
80203ec8:	d9c00717 	ldw	r7,28(sp)
80203ecc:	00800c44 	movi	r2,49
80203ed0:	38800005 	stb	r2,0(r7)
80203ed4:	d8800517 	ldw	r2,20(sp)
80203ed8:	3dc00044 	addi	r23,r7,1
80203edc:	10800044 	addi	r2,r2,1
80203ee0:	d8800515 	stw	r2,20(sp)
80203ee4:	003f3d06 	br	80203bdc <__reset+0xfa1e3bdc>
80203ee8:	d9800517 	ldw	r6,20(sp)
80203eec:	d9c00717 	ldw	r7,28(sp)
80203ef0:	00800c44 	movi	r2,49
80203ef4:	31800044 	addi	r6,r6,1
80203ef8:	d9800515 	stw	r6,20(sp)
80203efc:	38800005 	stb	r2,0(r7)
80203f00:	003edf06 	br	80203a80 <__reset+0xfa1e3a80>
80203f04:	d8000b15 	stw	zero,44(sp)
80203f08:	003c9f06 	br	80203188 <__reset+0xfa1e3188>
80203f0c:	903e7e1e 	bne	r18,zero,80203908 <__reset+0xfa1e3908>
80203f10:	00800434 	movhi	r2,16
80203f14:	10bfffc4 	addi	r2,r2,-1
80203f18:	9884703a 	and	r2,r19,r2
80203f1c:	1000ea1e 	bne	r2,zero,802042c8 <_dtoa_r+0x1460>
80203f20:	9cdffc2c 	andhi	r19,r19,32752
80203f24:	9800e826 	beq	r19,zero,802042c8 <_dtoa_r+0x1460>
80203f28:	d9c00817 	ldw	r7,32(sp)
80203f2c:	b5800044 	addi	r22,r22,1
80203f30:	04c00044 	movi	r19,1
80203f34:	39c00044 	addi	r7,r7,1
80203f38:	d9c00815 	stw	r7,32(sp)
80203f3c:	d8800d17 	ldw	r2,52(sp)
80203f40:	103e721e 	bne	r2,zero,8020390c <__reset+0xfa1e390c>
80203f44:	00800044 	movi	r2,1
80203f48:	003e7906 	br	80203930 <__reset+0xfa1e3930>
80203f4c:	8009883a 	mov	r4,r16
80203f50:	020cdc40 	call	8020cdc4 <__floatsidf>
80203f54:	d9800f17 	ldw	r6,60(sp)
80203f58:	d9c01017 	ldw	r7,64(sp)
80203f5c:	1009883a 	mov	r4,r2
80203f60:	180b883a 	mov	r5,r3
80203f64:	020bd300 	call	8020bd30 <__muldf3>
80203f68:	000d883a 	mov	r6,zero
80203f6c:	01d00734 	movhi	r7,16412
80203f70:	1009883a 	mov	r4,r2
80203f74:	180b883a 	mov	r5,r3
80203f78:	020a9440 	call	8020a944 <__adddf3>
80203f7c:	047f3034 	movhi	r17,64704
80203f80:	1021883a 	mov	r16,r2
80203f84:	1c63883a 	add	r17,r3,r17
80203f88:	d9000f17 	ldw	r4,60(sp)
80203f8c:	d9401017 	ldw	r5,64(sp)
80203f90:	000d883a 	mov	r6,zero
80203f94:	01d00534 	movhi	r7,16404
80203f98:	020c4480 	call	8020c448 <__subdf3>
80203f9c:	800d883a 	mov	r6,r16
80203fa0:	880f883a 	mov	r7,r17
80203fa4:	1009883a 	mov	r4,r2
80203fa8:	180b883a 	mov	r5,r3
80203fac:	102b883a 	mov	r21,r2
80203fb0:	1829883a 	mov	r20,r3
80203fb4:	020bb600 	call	8020bb60 <__gedf2>
80203fb8:	00806c16 	blt	zero,r2,8020416c <_dtoa_r+0x1304>
80203fbc:	89e0003c 	xorhi	r7,r17,32768
80203fc0:	800d883a 	mov	r6,r16
80203fc4:	a809883a 	mov	r4,r21
80203fc8:	a00b883a 	mov	r5,r20
80203fcc:	020bc3c0 	call	8020bc3c <__ledf2>
80203fd0:	103d7e0e 	bge	r2,zero,802035cc <__reset+0xfa1e35cc>
80203fd4:	002b883a 	mov	r21,zero
80203fd8:	0023883a 	mov	r17,zero
80203fdc:	003efb06 	br	80203bcc <__reset+0xfa1e3bcc>
80203fe0:	d8800717 	ldw	r2,28(sp)
80203fe4:	003bd006 	br	80202f28 <__reset+0xfa1e2f28>
80203fe8:	d9000a17 	ldw	r4,40(sp)
80203fec:	d9800d17 	ldw	r6,52(sp)
80203ff0:	dd400a15 	stw	r21,40(sp)
80203ff4:	a905c83a 	sub	r2,r21,r4
80203ff8:	308d883a 	add	r6,r6,r2
80203ffc:	d9800d15 	stw	r6,52(sp)
80204000:	002b883a 	mov	r21,zero
80204004:	003e0606 	br	80203820 <__reset+0xfa1e3820>
80204008:	9023883a 	mov	r17,r18
8020400c:	9829883a 	mov	r20,r19
80204010:	04000084 	movi	r16,2
80204014:	003c9206 	br	80203260 <__reset+0xfa1e3260>
80204018:	04000044 	movi	r16,1
8020401c:	dc000c15 	stw	r16,48(sp)
80204020:	dc000615 	stw	r16,24(sp)
80204024:	dc002215 	stw	r16,136(sp)
80204028:	e0001115 	stw	zero,68(fp)
8020402c:	000b883a 	mov	r5,zero
80204030:	003c6906 	br	802031d8 <__reset+0xfa1e31d8>
80204034:	3021883a 	mov	r16,r6
80204038:	003ffb06 	br	80204028 <__reset+0xfa1e4028>
8020403c:	1000021e 	bne	r2,zero,80204048 <_dtoa_r+0x11e0>
80204040:	4200004c 	andi	r8,r8,1
80204044:	403e7d1e 	bne	r8,zero,80203a3c <__reset+0xfa1e3a3c>
80204048:	01000c04 	movi	r4,48
8020404c:	00000106 	br	80204054 <_dtoa_r+0x11ec>
80204050:	102f883a 	mov	r23,r2
80204054:	b8bfffc4 	addi	r2,r23,-1
80204058:	10c00007 	ldb	r3,0(r2)
8020405c:	193ffc26 	beq	r3,r4,80204050 <__reset+0xfa1e4050>
80204060:	003e8706 	br	80203a80 <__reset+0xfa1e3a80>
80204064:	d8800517 	ldw	r2,20(sp)
80204068:	00a3c83a 	sub	r17,zero,r2
8020406c:	8800a426 	beq	r17,zero,80204300 <_dtoa_r+0x1498>
80204070:	888003cc 	andi	r2,r17,15
80204074:	100490fa 	slli	r2,r2,3
80204078:	00e00874 	movhi	r3,32801
8020407c:	18c8db04 	addi	r3,r3,9068
80204080:	1885883a 	add	r2,r3,r2
80204084:	11800017 	ldw	r6,0(r2)
80204088:	11c00117 	ldw	r7,4(r2)
8020408c:	9009883a 	mov	r4,r18
80204090:	980b883a 	mov	r5,r19
80204094:	8823d13a 	srai	r17,r17,4
80204098:	020bd300 	call	8020bd30 <__muldf3>
8020409c:	d8800f15 	stw	r2,60(sp)
802040a0:	d8c01015 	stw	r3,64(sp)
802040a4:	8800e826 	beq	r17,zero,80204448 <_dtoa_r+0x15e0>
802040a8:	05200874 	movhi	r20,32801
802040ac:	a508d104 	addi	r20,r20,9028
802040b0:	04000084 	movi	r16,2
802040b4:	8980004c 	andi	r6,r17,1
802040b8:	1009883a 	mov	r4,r2
802040bc:	8823d07a 	srai	r17,r17,1
802040c0:	180b883a 	mov	r5,r3
802040c4:	30000426 	beq	r6,zero,802040d8 <_dtoa_r+0x1270>
802040c8:	a1800017 	ldw	r6,0(r20)
802040cc:	a1c00117 	ldw	r7,4(r20)
802040d0:	84000044 	addi	r16,r16,1
802040d4:	020bd300 	call	8020bd30 <__muldf3>
802040d8:	a5000204 	addi	r20,r20,8
802040dc:	883ff51e 	bne	r17,zero,802040b4 <__reset+0xfa1e40b4>
802040e0:	d8800f15 	stw	r2,60(sp)
802040e4:	d8c01015 	stw	r3,64(sp)
802040e8:	003c7606 	br	802032c4 <__reset+0xfa1e32c4>
802040ec:	00c00c04 	movi	r3,48
802040f0:	10c00005 	stb	r3,0(r2)
802040f4:	d8c00517 	ldw	r3,20(sp)
802040f8:	bd3fffc3 	ldbu	r20,-1(r23)
802040fc:	18c00044 	addi	r3,r3,1
80204100:	d8c00515 	stw	r3,20(sp)
80204104:	003db906 	br	802037ec <__reset+0xfa1e37ec>
80204108:	89400117 	ldw	r5,4(r17)
8020410c:	e009883a 	mov	r4,fp
80204110:	02063bc0 	call	802063bc <_Balloc>
80204114:	89800417 	ldw	r6,16(r17)
80204118:	89400304 	addi	r5,r17,12
8020411c:	11000304 	addi	r4,r2,12
80204120:	31800084 	addi	r6,r6,2
80204124:	318d883a 	add	r6,r6,r6
80204128:	318d883a 	add	r6,r6,r6
8020412c:	1027883a 	mov	r19,r2
80204130:	02005040 	call	80200504 <memcpy>
80204134:	01800044 	movi	r6,1
80204138:	980b883a 	mov	r5,r19
8020413c:	e009883a 	mov	r4,fp
80204140:	0206b3c0 	call	80206b3c <__lshift>
80204144:	1029883a 	mov	r20,r2
80204148:	003ecc06 	br	80203c7c <__reset+0xfa1e3c7c>
8020414c:	00800e44 	movi	r2,57
80204150:	90809026 	beq	r18,r2,80204394 <_dtoa_r+0x152c>
80204154:	92000044 	addi	r8,r18,1
80204158:	003f1f06 	br	80203dd8 <__reset+0xfa1e3dd8>
8020415c:	9011883a 	mov	r8,r18
80204160:	8825883a 	mov	r18,r17
80204164:	a023883a 	mov	r17,r20
80204168:	003e2906 	br	80203a10 <__reset+0xfa1e3a10>
8020416c:	002b883a 	mov	r21,zero
80204170:	0023883a 	mov	r17,zero
80204174:	003f5406 	br	80203ec8 <__reset+0xfa1e3ec8>
80204178:	61bfffc4 	addi	r6,r12,-1
8020417c:	300490fa 	slli	r2,r6,3
80204180:	00e00874 	movhi	r3,32801
80204184:	18c8db04 	addi	r3,r3,9068
80204188:	1885883a 	add	r2,r3,r2
8020418c:	11000017 	ldw	r4,0(r2)
80204190:	11400117 	ldw	r5,4(r2)
80204194:	d8800717 	ldw	r2,28(sp)
80204198:	880f883a 	mov	r7,r17
8020419c:	d9801215 	stw	r6,72(sp)
802041a0:	800d883a 	mov	r6,r16
802041a4:	db001615 	stw	r12,88(sp)
802041a8:	15c00044 	addi	r23,r2,1
802041ac:	020bd300 	call	8020bd30 <__muldf3>
802041b0:	d9401017 	ldw	r5,64(sp)
802041b4:	d9000f17 	ldw	r4,60(sp)
802041b8:	d8c01515 	stw	r3,84(sp)
802041bc:	d8801415 	stw	r2,80(sp)
802041c0:	020cd440 	call	8020cd44 <__fixdfsi>
802041c4:	1009883a 	mov	r4,r2
802041c8:	1021883a 	mov	r16,r2
802041cc:	020cdc40 	call	8020cdc4 <__floatsidf>
802041d0:	d9000f17 	ldw	r4,60(sp)
802041d4:	d9401017 	ldw	r5,64(sp)
802041d8:	100d883a 	mov	r6,r2
802041dc:	180f883a 	mov	r7,r3
802041e0:	020c4480 	call	8020c448 <__subdf3>
802041e4:	1829883a 	mov	r20,r3
802041e8:	d8c00717 	ldw	r3,28(sp)
802041ec:	84000c04 	addi	r16,r16,48
802041f0:	1023883a 	mov	r17,r2
802041f4:	1c000005 	stb	r16,0(r3)
802041f8:	db001617 	ldw	r12,88(sp)
802041fc:	00800044 	movi	r2,1
80204200:	60802226 	beq	r12,r2,8020428c <_dtoa_r+0x1424>
80204204:	d9c00717 	ldw	r7,28(sp)
80204208:	8805883a 	mov	r2,r17
8020420c:	b82b883a 	mov	r21,r23
80204210:	3b19883a 	add	r12,r7,r12
80204214:	6023883a 	mov	r17,r12
80204218:	a007883a 	mov	r3,r20
8020421c:	dc800f15 	stw	r18,60(sp)
80204220:	000d883a 	mov	r6,zero
80204224:	01d00934 	movhi	r7,16420
80204228:	1009883a 	mov	r4,r2
8020422c:	180b883a 	mov	r5,r3
80204230:	020bd300 	call	8020bd30 <__muldf3>
80204234:	180b883a 	mov	r5,r3
80204238:	1009883a 	mov	r4,r2
8020423c:	1829883a 	mov	r20,r3
80204240:	1025883a 	mov	r18,r2
80204244:	020cd440 	call	8020cd44 <__fixdfsi>
80204248:	1009883a 	mov	r4,r2
8020424c:	1021883a 	mov	r16,r2
80204250:	020cdc40 	call	8020cdc4 <__floatsidf>
80204254:	100d883a 	mov	r6,r2
80204258:	180f883a 	mov	r7,r3
8020425c:	9009883a 	mov	r4,r18
80204260:	a00b883a 	mov	r5,r20
80204264:	84000c04 	addi	r16,r16,48
80204268:	020c4480 	call	8020c448 <__subdf3>
8020426c:	ad400044 	addi	r21,r21,1
80204270:	ac3fffc5 	stb	r16,-1(r21)
80204274:	ac7fea1e 	bne	r21,r17,80204220 <__reset+0xfa1e4220>
80204278:	1023883a 	mov	r17,r2
8020427c:	d8801217 	ldw	r2,72(sp)
80204280:	dc800f17 	ldw	r18,60(sp)
80204284:	1829883a 	mov	r20,r3
80204288:	b8af883a 	add	r23,r23,r2
8020428c:	d9001417 	ldw	r4,80(sp)
80204290:	d9401517 	ldw	r5,84(sp)
80204294:	000d883a 	mov	r6,zero
80204298:	01cff834 	movhi	r7,16352
8020429c:	020a9440 	call	8020a944 <__adddf3>
802042a0:	880d883a 	mov	r6,r17
802042a4:	a00f883a 	mov	r7,r20
802042a8:	1009883a 	mov	r4,r2
802042ac:	180b883a 	mov	r5,r3
802042b0:	020bc3c0 	call	8020bc3c <__ledf2>
802042b4:	10003e0e 	bge	r2,zero,802043b0 <_dtoa_r+0x1548>
802042b8:	d9001317 	ldw	r4,76(sp)
802042bc:	bd3fffc3 	ldbu	r20,-1(r23)
802042c0:	d9000515 	stw	r4,20(sp)
802042c4:	003d3b06 	br	802037b4 <__reset+0xfa1e37b4>
802042c8:	0027883a 	mov	r19,zero
802042cc:	003f1b06 	br	80203f3c <__reset+0xfa1e3f3c>
802042d0:	d8800817 	ldw	r2,32(sp)
802042d4:	11e9c83a 	sub	r20,r2,r7
802042d8:	0005883a 	mov	r2,zero
802042dc:	003d5406 	br	80203830 <__reset+0xfa1e3830>
802042e0:	00800044 	movi	r2,1
802042e4:	003dc706 	br	80203a04 <__reset+0xfa1e3a04>
802042e8:	d8c00217 	ldw	r3,8(sp)
802042ec:	00800d84 	movi	r2,54
802042f0:	dd400a17 	ldw	r21,40(sp)
802042f4:	10c5c83a 	sub	r2,r2,r3
802042f8:	dd000817 	ldw	r20,32(sp)
802042fc:	003d4c06 	br	80203830 <__reset+0xfa1e3830>
80204300:	dc800f15 	stw	r18,60(sp)
80204304:	dcc01015 	stw	r19,64(sp)
80204308:	04000084 	movi	r16,2
8020430c:	003bed06 	br	802032c4 <__reset+0xfa1e32c4>
80204310:	d9000617 	ldw	r4,24(sp)
80204314:	203f0d26 	beq	r4,zero,80203f4c <__reset+0xfa1e3f4c>
80204318:	d9800c17 	ldw	r6,48(sp)
8020431c:	01bcab0e 	bge	zero,r6,802035cc <__reset+0xfa1e35cc>
80204320:	d9401017 	ldw	r5,64(sp)
80204324:	d9000f17 	ldw	r4,60(sp)
80204328:	000d883a 	mov	r6,zero
8020432c:	01d00934 	movhi	r7,16420
80204330:	020bd300 	call	8020bd30 <__muldf3>
80204334:	81000044 	addi	r4,r16,1
80204338:	d8800f15 	stw	r2,60(sp)
8020433c:	d8c01015 	stw	r3,64(sp)
80204340:	020cdc40 	call	8020cdc4 <__floatsidf>
80204344:	d9800f17 	ldw	r6,60(sp)
80204348:	d9c01017 	ldw	r7,64(sp)
8020434c:	1009883a 	mov	r4,r2
80204350:	180b883a 	mov	r5,r3
80204354:	020bd300 	call	8020bd30 <__muldf3>
80204358:	01d00734 	movhi	r7,16412
8020435c:	000d883a 	mov	r6,zero
80204360:	1009883a 	mov	r4,r2
80204364:	180b883a 	mov	r5,r3
80204368:	020a9440 	call	8020a944 <__adddf3>
8020436c:	d9c00517 	ldw	r7,20(sp)
80204370:	047f3034 	movhi	r17,64704
80204374:	1021883a 	mov	r16,r2
80204378:	39ffffc4 	addi	r7,r7,-1
8020437c:	d9c01315 	stw	r7,76(sp)
80204380:	1c63883a 	add	r17,r3,r17
80204384:	db000c17 	ldw	r12,48(sp)
80204388:	003bea06 	br	80203334 <__reset+0xfa1e3334>
8020438c:	dc000915 	stw	r16,36(sp)
80204390:	003e0e06 	br	80203bcc <__reset+0xfa1e3bcc>
80204394:	01000e44 	movi	r4,57
80204398:	8825883a 	mov	r18,r17
8020439c:	9dc00044 	addi	r23,r19,1
802043a0:	99000005 	stb	r4,0(r19)
802043a4:	a023883a 	mov	r17,r20
802043a8:	dc000915 	stw	r16,36(sp)
802043ac:	003da406 	br	80203a40 <__reset+0xfa1e3a40>
802043b0:	d9801417 	ldw	r6,80(sp)
802043b4:	d9c01517 	ldw	r7,84(sp)
802043b8:	0009883a 	mov	r4,zero
802043bc:	014ff834 	movhi	r5,16352
802043c0:	020c4480 	call	8020c448 <__subdf3>
802043c4:	880d883a 	mov	r6,r17
802043c8:	a00f883a 	mov	r7,r20
802043cc:	1009883a 	mov	r4,r2
802043d0:	180b883a 	mov	r5,r3
802043d4:	020bb600 	call	8020bb60 <__gedf2>
802043d8:	00bc7c0e 	bge	zero,r2,802035cc <__reset+0xfa1e35cc>
802043dc:	01000c04 	movi	r4,48
802043e0:	00000106 	br	802043e8 <_dtoa_r+0x1580>
802043e4:	102f883a 	mov	r23,r2
802043e8:	b8bfffc4 	addi	r2,r23,-1
802043ec:	10c00007 	ldb	r3,0(r2)
802043f0:	193ffc26 	beq	r3,r4,802043e4 <__reset+0xfa1e43e4>
802043f4:	d9801317 	ldw	r6,76(sp)
802043f8:	d9800515 	stw	r6,20(sp)
802043fc:	003c4406 	br	80203510 <__reset+0xfa1e3510>
80204400:	d9801317 	ldw	r6,76(sp)
80204404:	d9800515 	stw	r6,20(sp)
80204408:	003cea06 	br	802037b4 <__reset+0xfa1e37b4>
8020440c:	dd800f17 	ldw	r22,60(sp)
80204410:	dcc01017 	ldw	r19,64(sp)
80204414:	dc801217 	ldw	r18,72(sp)
80204418:	003c6c06 	br	802035cc <__reset+0xfa1e35cc>
8020441c:	903e031e 	bne	r18,zero,80203c2c <__reset+0xfa1e3c2c>
80204420:	003ebb06 	br	80203f10 <__reset+0xfa1e3f10>
80204424:	103e6c1e 	bne	r2,zero,80203dd8 <__reset+0xfa1e3dd8>
80204428:	4080004c 	andi	r2,r8,1
8020442c:	103e6a26 	beq	r2,zero,80203dd8 <__reset+0xfa1e3dd8>
80204430:	003e6606 	br	80203dcc <__reset+0xfa1e3dcc>
80204434:	d8c00317 	ldw	r3,12(sp)
80204438:	00800084 	movi	r2,2
8020443c:	10c02916 	blt	r2,r3,802044e4 <_dtoa_r+0x167c>
80204440:	d9000c17 	ldw	r4,48(sp)
80204444:	003e8806 	br	80203e68 <__reset+0xfa1e3e68>
80204448:	04000084 	movi	r16,2
8020444c:	003b9d06 	br	802032c4 <__reset+0xfa1e32c4>
80204450:	d9001317 	ldw	r4,76(sp)
80204454:	d9000515 	stw	r4,20(sp)
80204458:	003cd606 	br	802037b4 <__reset+0xfa1e37b4>
8020445c:	d8801317 	ldw	r2,76(sp)
80204460:	d8800515 	stw	r2,20(sp)
80204464:	003c2a06 	br	80203510 <__reset+0xfa1e3510>
80204468:	d9800317 	ldw	r6,12(sp)
8020446c:	00800084 	movi	r2,2
80204470:	11801516 	blt	r2,r6,802044c8 <_dtoa_r+0x1660>
80204474:	d9c00c17 	ldw	r7,48(sp)
80204478:	d9c00615 	stw	r7,24(sp)
8020447c:	003df706 	br	80203c5c <__reset+0xfa1e3c5c>
80204480:	193d3926 	beq	r3,r4,80203968 <__reset+0xfa1e3968>
80204484:	00c00f04 	movi	r3,60
80204488:	1885c83a 	sub	r2,r3,r2
8020448c:	003ddf06 	br	80203c0c <__reset+0xfa1e3c0c>
80204490:	e009883a 	mov	r4,fp
80204494:	e0001115 	stw	zero,68(fp)
80204498:	000b883a 	mov	r5,zero
8020449c:	02063bc0 	call	802063bc <_Balloc>
802044a0:	d8800715 	stw	r2,28(sp)
802044a4:	d8c00717 	ldw	r3,28(sp)
802044a8:	00bfffc4 	movi	r2,-1
802044ac:	01000044 	movi	r4,1
802044b0:	d8800c15 	stw	r2,48(sp)
802044b4:	e0c01015 	stw	r3,64(fp)
802044b8:	d9000b15 	stw	r4,44(sp)
802044bc:	d8800615 	stw	r2,24(sp)
802044c0:	d8002215 	stw	zero,136(sp)
802044c4:	003c4106 	br	802035cc <__reset+0xfa1e35cc>
802044c8:	d8c00c17 	ldw	r3,48(sp)
802044cc:	d8c00615 	stw	r3,24(sp)
802044d0:	003e7006 	br	80203e94 <__reset+0xfa1e3e94>
802044d4:	04400044 	movi	r17,1
802044d8:	003b2006 	br	8020315c <__reset+0xfa1e315c>
802044dc:	000b883a 	mov	r5,zero
802044e0:	003b3d06 	br	802031d8 <__reset+0xfa1e31d8>
802044e4:	d8800c17 	ldw	r2,48(sp)
802044e8:	d8800615 	stw	r2,24(sp)
802044ec:	003e6906 	br	80203e94 <__reset+0xfa1e3e94>

802044f0 <__sflush_r>:
802044f0:	2880030b 	ldhu	r2,12(r5)
802044f4:	defffb04 	addi	sp,sp,-20
802044f8:	dcc00315 	stw	r19,12(sp)
802044fc:	dc400115 	stw	r17,4(sp)
80204500:	dfc00415 	stw	ra,16(sp)
80204504:	dc800215 	stw	r18,8(sp)
80204508:	dc000015 	stw	r16,0(sp)
8020450c:	10c0020c 	andi	r3,r2,8
80204510:	2823883a 	mov	r17,r5
80204514:	2027883a 	mov	r19,r4
80204518:	1800311e 	bne	r3,zero,802045e0 <__sflush_r+0xf0>
8020451c:	28c00117 	ldw	r3,4(r5)
80204520:	10820014 	ori	r2,r2,2048
80204524:	2880030d 	sth	r2,12(r5)
80204528:	00c04b0e 	bge	zero,r3,80204658 <__sflush_r+0x168>
8020452c:	8a000a17 	ldw	r8,40(r17)
80204530:	40002326 	beq	r8,zero,802045c0 <__sflush_r+0xd0>
80204534:	9c000017 	ldw	r16,0(r19)
80204538:	10c4000c 	andi	r3,r2,4096
8020453c:	98000015 	stw	zero,0(r19)
80204540:	18004826 	beq	r3,zero,80204664 <__sflush_r+0x174>
80204544:	89801417 	ldw	r6,80(r17)
80204548:	10c0010c 	andi	r3,r2,4
8020454c:	18000626 	beq	r3,zero,80204568 <__sflush_r+0x78>
80204550:	88c00117 	ldw	r3,4(r17)
80204554:	88800c17 	ldw	r2,48(r17)
80204558:	30cdc83a 	sub	r6,r6,r3
8020455c:	10000226 	beq	r2,zero,80204568 <__sflush_r+0x78>
80204560:	88800f17 	ldw	r2,60(r17)
80204564:	308dc83a 	sub	r6,r6,r2
80204568:	89400717 	ldw	r5,28(r17)
8020456c:	000f883a 	mov	r7,zero
80204570:	9809883a 	mov	r4,r19
80204574:	403ee83a 	callr	r8
80204578:	00ffffc4 	movi	r3,-1
8020457c:	10c04426 	beq	r2,r3,80204690 <__sflush_r+0x1a0>
80204580:	88c0030b 	ldhu	r3,12(r17)
80204584:	89000417 	ldw	r4,16(r17)
80204588:	88000115 	stw	zero,4(r17)
8020458c:	197dffcc 	andi	r5,r3,63487
80204590:	8940030d 	sth	r5,12(r17)
80204594:	89000015 	stw	r4,0(r17)
80204598:	18c4000c 	andi	r3,r3,4096
8020459c:	18002c1e 	bne	r3,zero,80204650 <__sflush_r+0x160>
802045a0:	89400c17 	ldw	r5,48(r17)
802045a4:	9c000015 	stw	r16,0(r19)
802045a8:	28000526 	beq	r5,zero,802045c0 <__sflush_r+0xd0>
802045ac:	88801004 	addi	r2,r17,64
802045b0:	28800226 	beq	r5,r2,802045bc <__sflush_r+0xcc>
802045b4:	9809883a 	mov	r4,r19
802045b8:	0204c5c0 	call	80204c5c <_free_r>
802045bc:	88000c15 	stw	zero,48(r17)
802045c0:	0005883a 	mov	r2,zero
802045c4:	dfc00417 	ldw	ra,16(sp)
802045c8:	dcc00317 	ldw	r19,12(sp)
802045cc:	dc800217 	ldw	r18,8(sp)
802045d0:	dc400117 	ldw	r17,4(sp)
802045d4:	dc000017 	ldw	r16,0(sp)
802045d8:	dec00504 	addi	sp,sp,20
802045dc:	f800283a 	ret
802045e0:	2c800417 	ldw	r18,16(r5)
802045e4:	903ff626 	beq	r18,zero,802045c0 <__reset+0xfa1e45c0>
802045e8:	2c000017 	ldw	r16,0(r5)
802045ec:	108000cc 	andi	r2,r2,3
802045f0:	2c800015 	stw	r18,0(r5)
802045f4:	84a1c83a 	sub	r16,r16,r18
802045f8:	1000131e 	bne	r2,zero,80204648 <__sflush_r+0x158>
802045fc:	28800517 	ldw	r2,20(r5)
80204600:	88800215 	stw	r2,8(r17)
80204604:	04000316 	blt	zero,r16,80204614 <__sflush_r+0x124>
80204608:	003fed06 	br	802045c0 <__reset+0xfa1e45c0>
8020460c:	90a5883a 	add	r18,r18,r2
80204610:	043feb0e 	bge	zero,r16,802045c0 <__reset+0xfa1e45c0>
80204614:	88800917 	ldw	r2,36(r17)
80204618:	89400717 	ldw	r5,28(r17)
8020461c:	800f883a 	mov	r7,r16
80204620:	900d883a 	mov	r6,r18
80204624:	9809883a 	mov	r4,r19
80204628:	103ee83a 	callr	r2
8020462c:	80a1c83a 	sub	r16,r16,r2
80204630:	00bff616 	blt	zero,r2,8020460c <__reset+0xfa1e460c>
80204634:	88c0030b 	ldhu	r3,12(r17)
80204638:	00bfffc4 	movi	r2,-1
8020463c:	18c01014 	ori	r3,r3,64
80204640:	88c0030d 	sth	r3,12(r17)
80204644:	003fdf06 	br	802045c4 <__reset+0xfa1e45c4>
80204648:	0005883a 	mov	r2,zero
8020464c:	003fec06 	br	80204600 <__reset+0xfa1e4600>
80204650:	88801415 	stw	r2,80(r17)
80204654:	003fd206 	br	802045a0 <__reset+0xfa1e45a0>
80204658:	28c00f17 	ldw	r3,60(r5)
8020465c:	00ffb316 	blt	zero,r3,8020452c <__reset+0xfa1e452c>
80204660:	003fd706 	br	802045c0 <__reset+0xfa1e45c0>
80204664:	89400717 	ldw	r5,28(r17)
80204668:	000d883a 	mov	r6,zero
8020466c:	01c00044 	movi	r7,1
80204670:	9809883a 	mov	r4,r19
80204674:	403ee83a 	callr	r8
80204678:	100d883a 	mov	r6,r2
8020467c:	00bfffc4 	movi	r2,-1
80204680:	30801426 	beq	r6,r2,802046d4 <__sflush_r+0x1e4>
80204684:	8880030b 	ldhu	r2,12(r17)
80204688:	8a000a17 	ldw	r8,40(r17)
8020468c:	003fae06 	br	80204548 <__reset+0xfa1e4548>
80204690:	98c00017 	ldw	r3,0(r19)
80204694:	183fba26 	beq	r3,zero,80204580 <__reset+0xfa1e4580>
80204698:	01000744 	movi	r4,29
8020469c:	19000626 	beq	r3,r4,802046b8 <__sflush_r+0x1c8>
802046a0:	01000584 	movi	r4,22
802046a4:	19000426 	beq	r3,r4,802046b8 <__sflush_r+0x1c8>
802046a8:	88c0030b 	ldhu	r3,12(r17)
802046ac:	18c01014 	ori	r3,r3,64
802046b0:	88c0030d 	sth	r3,12(r17)
802046b4:	003fc306 	br	802045c4 <__reset+0xfa1e45c4>
802046b8:	8880030b 	ldhu	r2,12(r17)
802046bc:	88c00417 	ldw	r3,16(r17)
802046c0:	88000115 	stw	zero,4(r17)
802046c4:	10bdffcc 	andi	r2,r2,63487
802046c8:	8880030d 	sth	r2,12(r17)
802046cc:	88c00015 	stw	r3,0(r17)
802046d0:	003fb306 	br	802045a0 <__reset+0xfa1e45a0>
802046d4:	98800017 	ldw	r2,0(r19)
802046d8:	103fea26 	beq	r2,zero,80204684 <__reset+0xfa1e4684>
802046dc:	00c00744 	movi	r3,29
802046e0:	10c00226 	beq	r2,r3,802046ec <__sflush_r+0x1fc>
802046e4:	00c00584 	movi	r3,22
802046e8:	10c0031e 	bne	r2,r3,802046f8 <__sflush_r+0x208>
802046ec:	9c000015 	stw	r16,0(r19)
802046f0:	0005883a 	mov	r2,zero
802046f4:	003fb306 	br	802045c4 <__reset+0xfa1e45c4>
802046f8:	88c0030b 	ldhu	r3,12(r17)
802046fc:	3005883a 	mov	r2,r6
80204700:	18c01014 	ori	r3,r3,64
80204704:	88c0030d 	sth	r3,12(r17)
80204708:	003fae06 	br	802045c4 <__reset+0xfa1e45c4>

8020470c <_fflush_r>:
8020470c:	defffd04 	addi	sp,sp,-12
80204710:	dc000115 	stw	r16,4(sp)
80204714:	dfc00215 	stw	ra,8(sp)
80204718:	2021883a 	mov	r16,r4
8020471c:	20000226 	beq	r4,zero,80204728 <_fflush_r+0x1c>
80204720:	20800e17 	ldw	r2,56(r4)
80204724:	10000c26 	beq	r2,zero,80204758 <_fflush_r+0x4c>
80204728:	2880030f 	ldh	r2,12(r5)
8020472c:	1000051e 	bne	r2,zero,80204744 <_fflush_r+0x38>
80204730:	0005883a 	mov	r2,zero
80204734:	dfc00217 	ldw	ra,8(sp)
80204738:	dc000117 	ldw	r16,4(sp)
8020473c:	dec00304 	addi	sp,sp,12
80204740:	f800283a 	ret
80204744:	8009883a 	mov	r4,r16
80204748:	dfc00217 	ldw	ra,8(sp)
8020474c:	dc000117 	ldw	r16,4(sp)
80204750:	dec00304 	addi	sp,sp,12
80204754:	02044f01 	jmpi	802044f0 <__sflush_r>
80204758:	d9400015 	stw	r5,0(sp)
8020475c:	0204ae80 	call	80204ae8 <__sinit>
80204760:	d9400017 	ldw	r5,0(sp)
80204764:	003ff006 	br	80204728 <__reset+0xfa1e4728>

80204768 <fflush>:
80204768:	20000526 	beq	r4,zero,80204780 <fflush+0x18>
8020476c:	00a00874 	movhi	r2,32801
80204770:	10911c04 	addi	r2,r2,17520
80204774:	200b883a 	mov	r5,r4
80204778:	11000017 	ldw	r4,0(r2)
8020477c:	020470c1 	jmpi	8020470c <_fflush_r>
80204780:	00a00874 	movhi	r2,32801
80204784:	10911b04 	addi	r2,r2,17516
80204788:	11000017 	ldw	r4,0(r2)
8020478c:	01600834 	movhi	r5,32800
80204790:	2951c304 	addi	r5,r5,18188
80204794:	02054ec1 	jmpi	802054ec <_fwalk_reent>

80204798 <__fp_unlock>:
80204798:	0005883a 	mov	r2,zero
8020479c:	f800283a 	ret

802047a0 <_cleanup_r>:
802047a0:	01600874 	movhi	r5,32801
802047a4:	29659f04 	addi	r5,r5,-27012
802047a8:	02054ec1 	jmpi	802054ec <_fwalk_reent>

802047ac <__sinit.part.1>:
802047ac:	defff704 	addi	sp,sp,-36
802047b0:	00e00834 	movhi	r3,32800
802047b4:	dfc00815 	stw	ra,32(sp)
802047b8:	ddc00715 	stw	r23,28(sp)
802047bc:	dd800615 	stw	r22,24(sp)
802047c0:	dd400515 	stw	r21,20(sp)
802047c4:	dd000415 	stw	r20,16(sp)
802047c8:	dcc00315 	stw	r19,12(sp)
802047cc:	dc800215 	stw	r18,8(sp)
802047d0:	dc400115 	stw	r17,4(sp)
802047d4:	dc000015 	stw	r16,0(sp)
802047d8:	18d1e804 	addi	r3,r3,18336
802047dc:	24000117 	ldw	r16,4(r4)
802047e0:	20c00f15 	stw	r3,60(r4)
802047e4:	2080bb04 	addi	r2,r4,748
802047e8:	00c000c4 	movi	r3,3
802047ec:	20c0b915 	stw	r3,740(r4)
802047f0:	2080ba15 	stw	r2,744(r4)
802047f4:	2000b815 	stw	zero,736(r4)
802047f8:	05c00204 	movi	r23,8
802047fc:	00800104 	movi	r2,4
80204800:	2025883a 	mov	r18,r4
80204804:	b80d883a 	mov	r6,r23
80204808:	81001704 	addi	r4,r16,92
8020480c:	000b883a 	mov	r5,zero
80204810:	80000015 	stw	zero,0(r16)
80204814:	80000115 	stw	zero,4(r16)
80204818:	80000215 	stw	zero,8(r16)
8020481c:	8080030d 	sth	r2,12(r16)
80204820:	80001915 	stw	zero,100(r16)
80204824:	8000038d 	sth	zero,14(r16)
80204828:	80000415 	stw	zero,16(r16)
8020482c:	80000515 	stw	zero,20(r16)
80204830:	80000615 	stw	zero,24(r16)
80204834:	02062940 	call	80206294 <memset>
80204838:	05a00834 	movhi	r22,32800
8020483c:	94400217 	ldw	r17,8(r18)
80204840:	05600834 	movhi	r21,32800
80204844:	05200834 	movhi	r20,32800
80204848:	04e00834 	movhi	r19,32800
8020484c:	b59ed304 	addi	r22,r22,31564
80204850:	ad5eea04 	addi	r21,r21,31656
80204854:	a51f0904 	addi	r20,r20,31780
80204858:	9cdf2004 	addi	r19,r19,31872
8020485c:	85800815 	stw	r22,32(r16)
80204860:	85400915 	stw	r21,36(r16)
80204864:	85000a15 	stw	r20,40(r16)
80204868:	84c00b15 	stw	r19,44(r16)
8020486c:	84000715 	stw	r16,28(r16)
80204870:	00800284 	movi	r2,10
80204874:	8880030d 	sth	r2,12(r17)
80204878:	00800044 	movi	r2,1
8020487c:	b80d883a 	mov	r6,r23
80204880:	89001704 	addi	r4,r17,92
80204884:	000b883a 	mov	r5,zero
80204888:	88000015 	stw	zero,0(r17)
8020488c:	88000115 	stw	zero,4(r17)
80204890:	88000215 	stw	zero,8(r17)
80204894:	88001915 	stw	zero,100(r17)
80204898:	8880038d 	sth	r2,14(r17)
8020489c:	88000415 	stw	zero,16(r17)
802048a0:	88000515 	stw	zero,20(r17)
802048a4:	88000615 	stw	zero,24(r17)
802048a8:	02062940 	call	80206294 <memset>
802048ac:	94000317 	ldw	r16,12(r18)
802048b0:	00800484 	movi	r2,18
802048b4:	8c400715 	stw	r17,28(r17)
802048b8:	8d800815 	stw	r22,32(r17)
802048bc:	8d400915 	stw	r21,36(r17)
802048c0:	8d000a15 	stw	r20,40(r17)
802048c4:	8cc00b15 	stw	r19,44(r17)
802048c8:	8080030d 	sth	r2,12(r16)
802048cc:	00800084 	movi	r2,2
802048d0:	80000015 	stw	zero,0(r16)
802048d4:	80000115 	stw	zero,4(r16)
802048d8:	80000215 	stw	zero,8(r16)
802048dc:	80001915 	stw	zero,100(r16)
802048e0:	8080038d 	sth	r2,14(r16)
802048e4:	80000415 	stw	zero,16(r16)
802048e8:	80000515 	stw	zero,20(r16)
802048ec:	80000615 	stw	zero,24(r16)
802048f0:	b80d883a 	mov	r6,r23
802048f4:	000b883a 	mov	r5,zero
802048f8:	81001704 	addi	r4,r16,92
802048fc:	02062940 	call	80206294 <memset>
80204900:	00800044 	movi	r2,1
80204904:	84000715 	stw	r16,28(r16)
80204908:	85800815 	stw	r22,32(r16)
8020490c:	85400915 	stw	r21,36(r16)
80204910:	85000a15 	stw	r20,40(r16)
80204914:	84c00b15 	stw	r19,44(r16)
80204918:	90800e15 	stw	r2,56(r18)
8020491c:	dfc00817 	ldw	ra,32(sp)
80204920:	ddc00717 	ldw	r23,28(sp)
80204924:	dd800617 	ldw	r22,24(sp)
80204928:	dd400517 	ldw	r21,20(sp)
8020492c:	dd000417 	ldw	r20,16(sp)
80204930:	dcc00317 	ldw	r19,12(sp)
80204934:	dc800217 	ldw	r18,8(sp)
80204938:	dc400117 	ldw	r17,4(sp)
8020493c:	dc000017 	ldw	r16,0(sp)
80204940:	dec00904 	addi	sp,sp,36
80204944:	f800283a 	ret

80204948 <__fp_lock>:
80204948:	0005883a 	mov	r2,zero
8020494c:	f800283a 	ret

80204950 <__sfmoreglue>:
80204950:	defffc04 	addi	sp,sp,-16
80204954:	dc400115 	stw	r17,4(sp)
80204958:	2c7fffc4 	addi	r17,r5,-1
8020495c:	8c401a24 	muli	r17,r17,104
80204960:	dc800215 	stw	r18,8(sp)
80204964:	2825883a 	mov	r18,r5
80204968:	89401d04 	addi	r5,r17,116
8020496c:	dc000015 	stw	r16,0(sp)
80204970:	dfc00315 	stw	ra,12(sp)
80204974:	02058480 	call	80205848 <_malloc_r>
80204978:	1021883a 	mov	r16,r2
8020497c:	10000726 	beq	r2,zero,8020499c <__sfmoreglue+0x4c>
80204980:	11000304 	addi	r4,r2,12
80204984:	10000015 	stw	zero,0(r2)
80204988:	14800115 	stw	r18,4(r2)
8020498c:	11000215 	stw	r4,8(r2)
80204990:	89801a04 	addi	r6,r17,104
80204994:	000b883a 	mov	r5,zero
80204998:	02062940 	call	80206294 <memset>
8020499c:	8005883a 	mov	r2,r16
802049a0:	dfc00317 	ldw	ra,12(sp)
802049a4:	dc800217 	ldw	r18,8(sp)
802049a8:	dc400117 	ldw	r17,4(sp)
802049ac:	dc000017 	ldw	r16,0(sp)
802049b0:	dec00404 	addi	sp,sp,16
802049b4:	f800283a 	ret

802049b8 <__sfp>:
802049b8:	defffb04 	addi	sp,sp,-20
802049bc:	dc000015 	stw	r16,0(sp)
802049c0:	04200874 	movhi	r16,32801
802049c4:	84111b04 	addi	r16,r16,17516
802049c8:	dcc00315 	stw	r19,12(sp)
802049cc:	2027883a 	mov	r19,r4
802049d0:	81000017 	ldw	r4,0(r16)
802049d4:	dfc00415 	stw	ra,16(sp)
802049d8:	dc800215 	stw	r18,8(sp)
802049dc:	20800e17 	ldw	r2,56(r4)
802049e0:	dc400115 	stw	r17,4(sp)
802049e4:	1000021e 	bne	r2,zero,802049f0 <__sfp+0x38>
802049e8:	02047ac0 	call	802047ac <__sinit.part.1>
802049ec:	81000017 	ldw	r4,0(r16)
802049f0:	2480b804 	addi	r18,r4,736
802049f4:	047fffc4 	movi	r17,-1
802049f8:	91000117 	ldw	r4,4(r18)
802049fc:	94000217 	ldw	r16,8(r18)
80204a00:	213fffc4 	addi	r4,r4,-1
80204a04:	20000a16 	blt	r4,zero,80204a30 <__sfp+0x78>
80204a08:	8080030f 	ldh	r2,12(r16)
80204a0c:	10000c26 	beq	r2,zero,80204a40 <__sfp+0x88>
80204a10:	80c01d04 	addi	r3,r16,116
80204a14:	00000206 	br	80204a20 <__sfp+0x68>
80204a18:	18bfe60f 	ldh	r2,-104(r3)
80204a1c:	10000826 	beq	r2,zero,80204a40 <__sfp+0x88>
80204a20:	213fffc4 	addi	r4,r4,-1
80204a24:	1c3ffd04 	addi	r16,r3,-12
80204a28:	18c01a04 	addi	r3,r3,104
80204a2c:	247ffa1e 	bne	r4,r17,80204a18 <__reset+0xfa1e4a18>
80204a30:	90800017 	ldw	r2,0(r18)
80204a34:	10001d26 	beq	r2,zero,80204aac <__sfp+0xf4>
80204a38:	1025883a 	mov	r18,r2
80204a3c:	003fee06 	br	802049f8 <__reset+0xfa1e49f8>
80204a40:	00bfffc4 	movi	r2,-1
80204a44:	8080038d 	sth	r2,14(r16)
80204a48:	00800044 	movi	r2,1
80204a4c:	8080030d 	sth	r2,12(r16)
80204a50:	80001915 	stw	zero,100(r16)
80204a54:	80000015 	stw	zero,0(r16)
80204a58:	80000215 	stw	zero,8(r16)
80204a5c:	80000115 	stw	zero,4(r16)
80204a60:	80000415 	stw	zero,16(r16)
80204a64:	80000515 	stw	zero,20(r16)
80204a68:	80000615 	stw	zero,24(r16)
80204a6c:	01800204 	movi	r6,8
80204a70:	000b883a 	mov	r5,zero
80204a74:	81001704 	addi	r4,r16,92
80204a78:	02062940 	call	80206294 <memset>
80204a7c:	8005883a 	mov	r2,r16
80204a80:	80000c15 	stw	zero,48(r16)
80204a84:	80000d15 	stw	zero,52(r16)
80204a88:	80001115 	stw	zero,68(r16)
80204a8c:	80001215 	stw	zero,72(r16)
80204a90:	dfc00417 	ldw	ra,16(sp)
80204a94:	dcc00317 	ldw	r19,12(sp)
80204a98:	dc800217 	ldw	r18,8(sp)
80204a9c:	dc400117 	ldw	r17,4(sp)
80204aa0:	dc000017 	ldw	r16,0(sp)
80204aa4:	dec00504 	addi	sp,sp,20
80204aa8:	f800283a 	ret
80204aac:	01400104 	movi	r5,4
80204ab0:	9809883a 	mov	r4,r19
80204ab4:	02049500 	call	80204950 <__sfmoreglue>
80204ab8:	90800015 	stw	r2,0(r18)
80204abc:	103fde1e 	bne	r2,zero,80204a38 <__reset+0xfa1e4a38>
80204ac0:	00800304 	movi	r2,12
80204ac4:	98800015 	stw	r2,0(r19)
80204ac8:	0005883a 	mov	r2,zero
80204acc:	003ff006 	br	80204a90 <__reset+0xfa1e4a90>

80204ad0 <_cleanup>:
80204ad0:	00a00874 	movhi	r2,32801
80204ad4:	10911b04 	addi	r2,r2,17516
80204ad8:	11000017 	ldw	r4,0(r2)
80204adc:	01600874 	movhi	r5,32801
80204ae0:	29659f04 	addi	r5,r5,-27012
80204ae4:	02054ec1 	jmpi	802054ec <_fwalk_reent>

80204ae8 <__sinit>:
80204ae8:	20800e17 	ldw	r2,56(r4)
80204aec:	10000126 	beq	r2,zero,80204af4 <__sinit+0xc>
80204af0:	f800283a 	ret
80204af4:	02047ac1 	jmpi	802047ac <__sinit.part.1>

80204af8 <__sfp_lock_acquire>:
80204af8:	f800283a 	ret

80204afc <__sfp_lock_release>:
80204afc:	f800283a 	ret

80204b00 <__sinit_lock_acquire>:
80204b00:	f800283a 	ret

80204b04 <__sinit_lock_release>:
80204b04:	f800283a 	ret

80204b08 <__fp_lock_all>:
80204b08:	00a00874 	movhi	r2,32801
80204b0c:	10911c04 	addi	r2,r2,17520
80204b10:	11000017 	ldw	r4,0(r2)
80204b14:	01600834 	movhi	r5,32800
80204b18:	29525204 	addi	r5,r5,18760
80204b1c:	02054281 	jmpi	80205428 <_fwalk>

80204b20 <__fp_unlock_all>:
80204b20:	00a00874 	movhi	r2,32801
80204b24:	10911c04 	addi	r2,r2,17520
80204b28:	11000017 	ldw	r4,0(r2)
80204b2c:	01600834 	movhi	r5,32800
80204b30:	2951e604 	addi	r5,r5,18328
80204b34:	02054281 	jmpi	80205428 <_fwalk>

80204b38 <_malloc_trim_r>:
80204b38:	defffb04 	addi	sp,sp,-20
80204b3c:	dcc00315 	stw	r19,12(sp)
80204b40:	04e00874 	movhi	r19,32801
80204b44:	dc800215 	stw	r18,8(sp)
80204b48:	dc400115 	stw	r17,4(sp)
80204b4c:	dc000015 	stw	r16,0(sp)
80204b50:	dfc00415 	stw	ra,16(sp)
80204b54:	2821883a 	mov	r16,r5
80204b58:	9ccb2704 	addi	r19,r19,11420
80204b5c:	2025883a 	mov	r18,r4
80204b60:	020d43c0 	call	8020d43c <__malloc_lock>
80204b64:	98800217 	ldw	r2,8(r19)
80204b68:	14400117 	ldw	r17,4(r2)
80204b6c:	00bfff04 	movi	r2,-4
80204b70:	88a2703a 	and	r17,r17,r2
80204b74:	8c21c83a 	sub	r16,r17,r16
80204b78:	8403fbc4 	addi	r16,r16,4079
80204b7c:	8020d33a 	srli	r16,r16,12
80204b80:	0083ffc4 	movi	r2,4095
80204b84:	843fffc4 	addi	r16,r16,-1
80204b88:	8020933a 	slli	r16,r16,12
80204b8c:	1400060e 	bge	r2,r16,80204ba8 <_malloc_trim_r+0x70>
80204b90:	000b883a 	mov	r5,zero
80204b94:	9009883a 	mov	r4,r18
80204b98:	0207af80 	call	80207af8 <_sbrk_r>
80204b9c:	98c00217 	ldw	r3,8(r19)
80204ba0:	1c47883a 	add	r3,r3,r17
80204ba4:	10c00a26 	beq	r2,r3,80204bd0 <_malloc_trim_r+0x98>
80204ba8:	9009883a 	mov	r4,r18
80204bac:	020d4600 	call	8020d460 <__malloc_unlock>
80204bb0:	0005883a 	mov	r2,zero
80204bb4:	dfc00417 	ldw	ra,16(sp)
80204bb8:	dcc00317 	ldw	r19,12(sp)
80204bbc:	dc800217 	ldw	r18,8(sp)
80204bc0:	dc400117 	ldw	r17,4(sp)
80204bc4:	dc000017 	ldw	r16,0(sp)
80204bc8:	dec00504 	addi	sp,sp,20
80204bcc:	f800283a 	ret
80204bd0:	040bc83a 	sub	r5,zero,r16
80204bd4:	9009883a 	mov	r4,r18
80204bd8:	0207af80 	call	80207af8 <_sbrk_r>
80204bdc:	00ffffc4 	movi	r3,-1
80204be0:	10c00d26 	beq	r2,r3,80204c18 <_malloc_trim_r+0xe0>
80204be4:	00e00874 	movhi	r3,32801
80204be8:	18d13c04 	addi	r3,r3,17648
80204bec:	18800017 	ldw	r2,0(r3)
80204bf0:	99000217 	ldw	r4,8(r19)
80204bf4:	8c23c83a 	sub	r17,r17,r16
80204bf8:	8c400054 	ori	r17,r17,1
80204bfc:	1421c83a 	sub	r16,r2,r16
80204c00:	24400115 	stw	r17,4(r4)
80204c04:	9009883a 	mov	r4,r18
80204c08:	1c000015 	stw	r16,0(r3)
80204c0c:	020d4600 	call	8020d460 <__malloc_unlock>
80204c10:	00800044 	movi	r2,1
80204c14:	003fe706 	br	80204bb4 <__reset+0xfa1e4bb4>
80204c18:	000b883a 	mov	r5,zero
80204c1c:	9009883a 	mov	r4,r18
80204c20:	0207af80 	call	80207af8 <_sbrk_r>
80204c24:	99000217 	ldw	r4,8(r19)
80204c28:	014003c4 	movi	r5,15
80204c2c:	1107c83a 	sub	r3,r2,r4
80204c30:	28ffdd0e 	bge	r5,r3,80204ba8 <__reset+0xfa1e4ba8>
80204c34:	01600874 	movhi	r5,32801
80204c38:	29511e04 	addi	r5,r5,17528
80204c3c:	29400017 	ldw	r5,0(r5)
80204c40:	18c00054 	ori	r3,r3,1
80204c44:	20c00115 	stw	r3,4(r4)
80204c48:	00e00874 	movhi	r3,32801
80204c4c:	1145c83a 	sub	r2,r2,r5
80204c50:	18d13c04 	addi	r3,r3,17648
80204c54:	18800015 	stw	r2,0(r3)
80204c58:	003fd306 	br	80204ba8 <__reset+0xfa1e4ba8>

80204c5c <_free_r>:
80204c5c:	28004126 	beq	r5,zero,80204d64 <_free_r+0x108>
80204c60:	defffd04 	addi	sp,sp,-12
80204c64:	dc400115 	stw	r17,4(sp)
80204c68:	dc000015 	stw	r16,0(sp)
80204c6c:	2023883a 	mov	r17,r4
80204c70:	2821883a 	mov	r16,r5
80204c74:	dfc00215 	stw	ra,8(sp)
80204c78:	020d43c0 	call	8020d43c <__malloc_lock>
80204c7c:	81ffff17 	ldw	r7,-4(r16)
80204c80:	00bfff84 	movi	r2,-2
80204c84:	01200874 	movhi	r4,32801
80204c88:	81bffe04 	addi	r6,r16,-8
80204c8c:	3884703a 	and	r2,r7,r2
80204c90:	210b2704 	addi	r4,r4,11420
80204c94:	308b883a 	add	r5,r6,r2
80204c98:	2a400117 	ldw	r9,4(r5)
80204c9c:	22000217 	ldw	r8,8(r4)
80204ca0:	00ffff04 	movi	r3,-4
80204ca4:	48c6703a 	and	r3,r9,r3
80204ca8:	2a005726 	beq	r5,r8,80204e08 <_free_r+0x1ac>
80204cac:	28c00115 	stw	r3,4(r5)
80204cb0:	39c0004c 	andi	r7,r7,1
80204cb4:	3800091e 	bne	r7,zero,80204cdc <_free_r+0x80>
80204cb8:	823ffe17 	ldw	r8,-8(r16)
80204cbc:	22400204 	addi	r9,r4,8
80204cc0:	320dc83a 	sub	r6,r6,r8
80204cc4:	31c00217 	ldw	r7,8(r6)
80204cc8:	1205883a 	add	r2,r2,r8
80204ccc:	3a406526 	beq	r7,r9,80204e64 <_free_r+0x208>
80204cd0:	32000317 	ldw	r8,12(r6)
80204cd4:	3a000315 	stw	r8,12(r7)
80204cd8:	41c00215 	stw	r7,8(r8)
80204cdc:	28cf883a 	add	r7,r5,r3
80204ce0:	39c00117 	ldw	r7,4(r7)
80204ce4:	39c0004c 	andi	r7,r7,1
80204ce8:	38003a26 	beq	r7,zero,80204dd4 <_free_r+0x178>
80204cec:	10c00054 	ori	r3,r2,1
80204cf0:	30c00115 	stw	r3,4(r6)
80204cf4:	3087883a 	add	r3,r6,r2
80204cf8:	18800015 	stw	r2,0(r3)
80204cfc:	00c07fc4 	movi	r3,511
80204d00:	18801936 	bltu	r3,r2,80204d68 <_free_r+0x10c>
80204d04:	1004d0fa 	srli	r2,r2,3
80204d08:	01c00044 	movi	r7,1
80204d0c:	21400117 	ldw	r5,4(r4)
80204d10:	10c00044 	addi	r3,r2,1
80204d14:	18c7883a 	add	r3,r3,r3
80204d18:	1005d0ba 	srai	r2,r2,2
80204d1c:	18c7883a 	add	r3,r3,r3
80204d20:	18c7883a 	add	r3,r3,r3
80204d24:	1907883a 	add	r3,r3,r4
80204d28:	3884983a 	sll	r2,r7,r2
80204d2c:	19c00017 	ldw	r7,0(r3)
80204d30:	1a3ffe04 	addi	r8,r3,-8
80204d34:	1144b03a 	or	r2,r2,r5
80204d38:	32000315 	stw	r8,12(r6)
80204d3c:	31c00215 	stw	r7,8(r6)
80204d40:	20800115 	stw	r2,4(r4)
80204d44:	19800015 	stw	r6,0(r3)
80204d48:	39800315 	stw	r6,12(r7)
80204d4c:	8809883a 	mov	r4,r17
80204d50:	dfc00217 	ldw	ra,8(sp)
80204d54:	dc400117 	ldw	r17,4(sp)
80204d58:	dc000017 	ldw	r16,0(sp)
80204d5c:	dec00304 	addi	sp,sp,12
80204d60:	020d4601 	jmpi	8020d460 <__malloc_unlock>
80204d64:	f800283a 	ret
80204d68:	100ad27a 	srli	r5,r2,9
80204d6c:	00c00104 	movi	r3,4
80204d70:	19404a36 	bltu	r3,r5,80204e9c <_free_r+0x240>
80204d74:	100ad1ba 	srli	r5,r2,6
80204d78:	28c00e44 	addi	r3,r5,57
80204d7c:	18c7883a 	add	r3,r3,r3
80204d80:	29400e04 	addi	r5,r5,56
80204d84:	18c7883a 	add	r3,r3,r3
80204d88:	18c7883a 	add	r3,r3,r3
80204d8c:	1909883a 	add	r4,r3,r4
80204d90:	20c00017 	ldw	r3,0(r4)
80204d94:	01e00874 	movhi	r7,32801
80204d98:	213ffe04 	addi	r4,r4,-8
80204d9c:	39cb2704 	addi	r7,r7,11420
80204da0:	20c04426 	beq	r4,r3,80204eb4 <_free_r+0x258>
80204da4:	01ffff04 	movi	r7,-4
80204da8:	19400117 	ldw	r5,4(r3)
80204dac:	29ca703a 	and	r5,r5,r7
80204db0:	1140022e 	bgeu	r2,r5,80204dbc <_free_r+0x160>
80204db4:	18c00217 	ldw	r3,8(r3)
80204db8:	20fffb1e 	bne	r4,r3,80204da8 <__reset+0xfa1e4da8>
80204dbc:	19000317 	ldw	r4,12(r3)
80204dc0:	31000315 	stw	r4,12(r6)
80204dc4:	30c00215 	stw	r3,8(r6)
80204dc8:	21800215 	stw	r6,8(r4)
80204dcc:	19800315 	stw	r6,12(r3)
80204dd0:	003fde06 	br	80204d4c <__reset+0xfa1e4d4c>
80204dd4:	29c00217 	ldw	r7,8(r5)
80204dd8:	10c5883a 	add	r2,r2,r3
80204ddc:	00e00874 	movhi	r3,32801
80204de0:	18cb2904 	addi	r3,r3,11428
80204de4:	38c03b26 	beq	r7,r3,80204ed4 <_free_r+0x278>
80204de8:	2a000317 	ldw	r8,12(r5)
80204dec:	11400054 	ori	r5,r2,1
80204df0:	3087883a 	add	r3,r6,r2
80204df4:	3a000315 	stw	r8,12(r7)
80204df8:	41c00215 	stw	r7,8(r8)
80204dfc:	31400115 	stw	r5,4(r6)
80204e00:	18800015 	stw	r2,0(r3)
80204e04:	003fbd06 	br	80204cfc <__reset+0xfa1e4cfc>
80204e08:	39c0004c 	andi	r7,r7,1
80204e0c:	10c5883a 	add	r2,r2,r3
80204e10:	3800071e 	bne	r7,zero,80204e30 <_free_r+0x1d4>
80204e14:	81fffe17 	ldw	r7,-8(r16)
80204e18:	31cdc83a 	sub	r6,r6,r7
80204e1c:	30c00317 	ldw	r3,12(r6)
80204e20:	31400217 	ldw	r5,8(r6)
80204e24:	11c5883a 	add	r2,r2,r7
80204e28:	28c00315 	stw	r3,12(r5)
80204e2c:	19400215 	stw	r5,8(r3)
80204e30:	10c00054 	ori	r3,r2,1
80204e34:	30c00115 	stw	r3,4(r6)
80204e38:	00e00874 	movhi	r3,32801
80204e3c:	18d11f04 	addi	r3,r3,17532
80204e40:	18c00017 	ldw	r3,0(r3)
80204e44:	21800215 	stw	r6,8(r4)
80204e48:	10ffc036 	bltu	r2,r3,80204d4c <__reset+0xfa1e4d4c>
80204e4c:	00a00874 	movhi	r2,32801
80204e50:	10913304 	addi	r2,r2,17612
80204e54:	11400017 	ldw	r5,0(r2)
80204e58:	8809883a 	mov	r4,r17
80204e5c:	0204b380 	call	80204b38 <_malloc_trim_r>
80204e60:	003fba06 	br	80204d4c <__reset+0xfa1e4d4c>
80204e64:	28c9883a 	add	r4,r5,r3
80204e68:	21000117 	ldw	r4,4(r4)
80204e6c:	2100004c 	andi	r4,r4,1
80204e70:	2000391e 	bne	r4,zero,80204f58 <_free_r+0x2fc>
80204e74:	29c00217 	ldw	r7,8(r5)
80204e78:	29000317 	ldw	r4,12(r5)
80204e7c:	1885883a 	add	r2,r3,r2
80204e80:	10c00054 	ori	r3,r2,1
80204e84:	39000315 	stw	r4,12(r7)
80204e88:	21c00215 	stw	r7,8(r4)
80204e8c:	30c00115 	stw	r3,4(r6)
80204e90:	308d883a 	add	r6,r6,r2
80204e94:	30800015 	stw	r2,0(r6)
80204e98:	003fac06 	br	80204d4c <__reset+0xfa1e4d4c>
80204e9c:	00c00504 	movi	r3,20
80204ea0:	19401536 	bltu	r3,r5,80204ef8 <_free_r+0x29c>
80204ea4:	28c01704 	addi	r3,r5,92
80204ea8:	18c7883a 	add	r3,r3,r3
80204eac:	294016c4 	addi	r5,r5,91
80204eb0:	003fb406 	br	80204d84 <__reset+0xfa1e4d84>
80204eb4:	280bd0ba 	srai	r5,r5,2
80204eb8:	00c00044 	movi	r3,1
80204ebc:	38800117 	ldw	r2,4(r7)
80204ec0:	194a983a 	sll	r5,r3,r5
80204ec4:	2007883a 	mov	r3,r4
80204ec8:	2884b03a 	or	r2,r5,r2
80204ecc:	38800115 	stw	r2,4(r7)
80204ed0:	003fbb06 	br	80204dc0 <__reset+0xfa1e4dc0>
80204ed4:	21800515 	stw	r6,20(r4)
80204ed8:	21800415 	stw	r6,16(r4)
80204edc:	10c00054 	ori	r3,r2,1
80204ee0:	31c00315 	stw	r7,12(r6)
80204ee4:	31c00215 	stw	r7,8(r6)
80204ee8:	30c00115 	stw	r3,4(r6)
80204eec:	308d883a 	add	r6,r6,r2
80204ef0:	30800015 	stw	r2,0(r6)
80204ef4:	003f9506 	br	80204d4c <__reset+0xfa1e4d4c>
80204ef8:	00c01504 	movi	r3,84
80204efc:	19400536 	bltu	r3,r5,80204f14 <_free_r+0x2b8>
80204f00:	100ad33a 	srli	r5,r2,12
80204f04:	28c01bc4 	addi	r3,r5,111
80204f08:	18c7883a 	add	r3,r3,r3
80204f0c:	29401b84 	addi	r5,r5,110
80204f10:	003f9c06 	br	80204d84 <__reset+0xfa1e4d84>
80204f14:	00c05504 	movi	r3,340
80204f18:	19400536 	bltu	r3,r5,80204f30 <_free_r+0x2d4>
80204f1c:	100ad3fa 	srli	r5,r2,15
80204f20:	28c01e04 	addi	r3,r5,120
80204f24:	18c7883a 	add	r3,r3,r3
80204f28:	29401dc4 	addi	r5,r5,119
80204f2c:	003f9506 	br	80204d84 <__reset+0xfa1e4d84>
80204f30:	00c15504 	movi	r3,1364
80204f34:	19400536 	bltu	r3,r5,80204f4c <_free_r+0x2f0>
80204f38:	100ad4ba 	srli	r5,r2,18
80204f3c:	28c01f44 	addi	r3,r5,125
80204f40:	18c7883a 	add	r3,r3,r3
80204f44:	29401f04 	addi	r5,r5,124
80204f48:	003f8e06 	br	80204d84 <__reset+0xfa1e4d84>
80204f4c:	00c03f84 	movi	r3,254
80204f50:	01401f84 	movi	r5,126
80204f54:	003f8b06 	br	80204d84 <__reset+0xfa1e4d84>
80204f58:	10c00054 	ori	r3,r2,1
80204f5c:	30c00115 	stw	r3,4(r6)
80204f60:	308d883a 	add	r6,r6,r2
80204f64:	30800015 	stw	r2,0(r6)
80204f68:	003f7806 	br	80204d4c <__reset+0xfa1e4d4c>

80204f6c <__sfvwrite_r>:
80204f6c:	30800217 	ldw	r2,8(r6)
80204f70:	10006726 	beq	r2,zero,80205110 <__sfvwrite_r+0x1a4>
80204f74:	28c0030b 	ldhu	r3,12(r5)
80204f78:	defff404 	addi	sp,sp,-48
80204f7c:	dd400715 	stw	r21,28(sp)
80204f80:	dd000615 	stw	r20,24(sp)
80204f84:	dc000215 	stw	r16,8(sp)
80204f88:	dfc00b15 	stw	ra,44(sp)
80204f8c:	df000a15 	stw	fp,40(sp)
80204f90:	ddc00915 	stw	r23,36(sp)
80204f94:	dd800815 	stw	r22,32(sp)
80204f98:	dcc00515 	stw	r19,20(sp)
80204f9c:	dc800415 	stw	r18,16(sp)
80204fa0:	dc400315 	stw	r17,12(sp)
80204fa4:	1880020c 	andi	r2,r3,8
80204fa8:	2821883a 	mov	r16,r5
80204fac:	202b883a 	mov	r21,r4
80204fb0:	3029883a 	mov	r20,r6
80204fb4:	10002726 	beq	r2,zero,80205054 <__sfvwrite_r+0xe8>
80204fb8:	28800417 	ldw	r2,16(r5)
80204fbc:	10002526 	beq	r2,zero,80205054 <__sfvwrite_r+0xe8>
80204fc0:	1880008c 	andi	r2,r3,2
80204fc4:	a4400017 	ldw	r17,0(r20)
80204fc8:	10002a26 	beq	r2,zero,80205074 <__sfvwrite_r+0x108>
80204fcc:	05a00034 	movhi	r22,32768
80204fd0:	0027883a 	mov	r19,zero
80204fd4:	0025883a 	mov	r18,zero
80204fd8:	b5bf0004 	addi	r22,r22,-1024
80204fdc:	980d883a 	mov	r6,r19
80204fe0:	a809883a 	mov	r4,r21
80204fe4:	90004626 	beq	r18,zero,80205100 <__sfvwrite_r+0x194>
80204fe8:	900f883a 	mov	r7,r18
80204fec:	b480022e 	bgeu	r22,r18,80204ff8 <__sfvwrite_r+0x8c>
80204ff0:	01e00034 	movhi	r7,32768
80204ff4:	39ff0004 	addi	r7,r7,-1024
80204ff8:	80800917 	ldw	r2,36(r16)
80204ffc:	81400717 	ldw	r5,28(r16)
80205000:	103ee83a 	callr	r2
80205004:	0080570e 	bge	zero,r2,80205164 <__sfvwrite_r+0x1f8>
80205008:	a0c00217 	ldw	r3,8(r20)
8020500c:	98a7883a 	add	r19,r19,r2
80205010:	90a5c83a 	sub	r18,r18,r2
80205014:	1885c83a 	sub	r2,r3,r2
80205018:	a0800215 	stw	r2,8(r20)
8020501c:	103fef1e 	bne	r2,zero,80204fdc <__reset+0xfa1e4fdc>
80205020:	0005883a 	mov	r2,zero
80205024:	dfc00b17 	ldw	ra,44(sp)
80205028:	df000a17 	ldw	fp,40(sp)
8020502c:	ddc00917 	ldw	r23,36(sp)
80205030:	dd800817 	ldw	r22,32(sp)
80205034:	dd400717 	ldw	r21,28(sp)
80205038:	dd000617 	ldw	r20,24(sp)
8020503c:	dcc00517 	ldw	r19,20(sp)
80205040:	dc800417 	ldw	r18,16(sp)
80205044:	dc400317 	ldw	r17,12(sp)
80205048:	dc000217 	ldw	r16,8(sp)
8020504c:	dec00c04 	addi	sp,sp,48
80205050:	f800283a 	ret
80205054:	800b883a 	mov	r5,r16
80205058:	a809883a 	mov	r4,r21
8020505c:	0202b140 	call	80202b14 <__swsetup_r>
80205060:	1000eb1e 	bne	r2,zero,80205410 <__sfvwrite_r+0x4a4>
80205064:	80c0030b 	ldhu	r3,12(r16)
80205068:	a4400017 	ldw	r17,0(r20)
8020506c:	1880008c 	andi	r2,r3,2
80205070:	103fd61e 	bne	r2,zero,80204fcc <__reset+0xfa1e4fcc>
80205074:	1880004c 	andi	r2,r3,1
80205078:	10003f1e 	bne	r2,zero,80205178 <__sfvwrite_r+0x20c>
8020507c:	0039883a 	mov	fp,zero
80205080:	0025883a 	mov	r18,zero
80205084:	90001a26 	beq	r18,zero,802050f0 <__sfvwrite_r+0x184>
80205088:	1880800c 	andi	r2,r3,512
8020508c:	84c00217 	ldw	r19,8(r16)
80205090:	10002126 	beq	r2,zero,80205118 <__sfvwrite_r+0x1ac>
80205094:	982f883a 	mov	r23,r19
80205098:	94c09336 	bltu	r18,r19,802052e8 <__sfvwrite_r+0x37c>
8020509c:	1881200c 	andi	r2,r3,1152
802050a0:	10009e1e 	bne	r2,zero,8020531c <__sfvwrite_r+0x3b0>
802050a4:	81000017 	ldw	r4,0(r16)
802050a8:	b80d883a 	mov	r6,r23
802050ac:	e00b883a 	mov	r5,fp
802050b0:	02061380 	call	80206138 <memmove>
802050b4:	80c00217 	ldw	r3,8(r16)
802050b8:	81000017 	ldw	r4,0(r16)
802050bc:	9005883a 	mov	r2,r18
802050c0:	1ce7c83a 	sub	r19,r3,r19
802050c4:	25cf883a 	add	r7,r4,r23
802050c8:	84c00215 	stw	r19,8(r16)
802050cc:	81c00015 	stw	r7,0(r16)
802050d0:	a0c00217 	ldw	r3,8(r20)
802050d4:	e0b9883a 	add	fp,fp,r2
802050d8:	90a5c83a 	sub	r18,r18,r2
802050dc:	18a7c83a 	sub	r19,r3,r2
802050e0:	a4c00215 	stw	r19,8(r20)
802050e4:	983fce26 	beq	r19,zero,80205020 <__reset+0xfa1e5020>
802050e8:	80c0030b 	ldhu	r3,12(r16)
802050ec:	903fe61e 	bne	r18,zero,80205088 <__reset+0xfa1e5088>
802050f0:	8f000017 	ldw	fp,0(r17)
802050f4:	8c800117 	ldw	r18,4(r17)
802050f8:	8c400204 	addi	r17,r17,8
802050fc:	003fe106 	br	80205084 <__reset+0xfa1e5084>
80205100:	8cc00017 	ldw	r19,0(r17)
80205104:	8c800117 	ldw	r18,4(r17)
80205108:	8c400204 	addi	r17,r17,8
8020510c:	003fb306 	br	80204fdc <__reset+0xfa1e4fdc>
80205110:	0005883a 	mov	r2,zero
80205114:	f800283a 	ret
80205118:	81000017 	ldw	r4,0(r16)
8020511c:	80800417 	ldw	r2,16(r16)
80205120:	11005736 	bltu	r2,r4,80205280 <__sfvwrite_r+0x314>
80205124:	85c00517 	ldw	r23,20(r16)
80205128:	95c05536 	bltu	r18,r23,80205280 <__sfvwrite_r+0x314>
8020512c:	00a00034 	movhi	r2,32768
80205130:	10bfffc4 	addi	r2,r2,-1
80205134:	9009883a 	mov	r4,r18
80205138:	1480012e 	bgeu	r2,r18,80205140 <__sfvwrite_r+0x1d4>
8020513c:	1009883a 	mov	r4,r2
80205140:	b80b883a 	mov	r5,r23
80205144:	020a7900 	call	8020a790 <__divsi3>
80205148:	15cf383a 	mul	r7,r2,r23
8020514c:	81400717 	ldw	r5,28(r16)
80205150:	80800917 	ldw	r2,36(r16)
80205154:	e00d883a 	mov	r6,fp
80205158:	a809883a 	mov	r4,r21
8020515c:	103ee83a 	callr	r2
80205160:	00bfdb16 	blt	zero,r2,802050d0 <__reset+0xfa1e50d0>
80205164:	8080030b 	ldhu	r2,12(r16)
80205168:	10801014 	ori	r2,r2,64
8020516c:	8080030d 	sth	r2,12(r16)
80205170:	00bfffc4 	movi	r2,-1
80205174:	003fab06 	br	80205024 <__reset+0xfa1e5024>
80205178:	0027883a 	mov	r19,zero
8020517c:	0011883a 	mov	r8,zero
80205180:	0039883a 	mov	fp,zero
80205184:	0025883a 	mov	r18,zero
80205188:	90001f26 	beq	r18,zero,80205208 <__sfvwrite_r+0x29c>
8020518c:	40005a26 	beq	r8,zero,802052f8 <__sfvwrite_r+0x38c>
80205190:	982d883a 	mov	r22,r19
80205194:	94c0012e 	bgeu	r18,r19,8020519c <__sfvwrite_r+0x230>
80205198:	902d883a 	mov	r22,r18
8020519c:	81000017 	ldw	r4,0(r16)
802051a0:	80800417 	ldw	r2,16(r16)
802051a4:	b02f883a 	mov	r23,r22
802051a8:	81c00517 	ldw	r7,20(r16)
802051ac:	1100032e 	bgeu	r2,r4,802051bc <__sfvwrite_r+0x250>
802051b0:	80c00217 	ldw	r3,8(r16)
802051b4:	38c7883a 	add	r3,r7,r3
802051b8:	1d801816 	blt	r3,r22,8020521c <__sfvwrite_r+0x2b0>
802051bc:	b1c03e16 	blt	r22,r7,802052b8 <__sfvwrite_r+0x34c>
802051c0:	80800917 	ldw	r2,36(r16)
802051c4:	81400717 	ldw	r5,28(r16)
802051c8:	e00d883a 	mov	r6,fp
802051cc:	da000115 	stw	r8,4(sp)
802051d0:	a809883a 	mov	r4,r21
802051d4:	103ee83a 	callr	r2
802051d8:	102f883a 	mov	r23,r2
802051dc:	da000117 	ldw	r8,4(sp)
802051e0:	00bfe00e 	bge	zero,r2,80205164 <__reset+0xfa1e5164>
802051e4:	9de7c83a 	sub	r19,r19,r23
802051e8:	98001f26 	beq	r19,zero,80205268 <__sfvwrite_r+0x2fc>
802051ec:	a0800217 	ldw	r2,8(r20)
802051f0:	e5f9883a 	add	fp,fp,r23
802051f4:	95e5c83a 	sub	r18,r18,r23
802051f8:	15efc83a 	sub	r23,r2,r23
802051fc:	a5c00215 	stw	r23,8(r20)
80205200:	b83f8726 	beq	r23,zero,80205020 <__reset+0xfa1e5020>
80205204:	903fe11e 	bne	r18,zero,8020518c <__reset+0xfa1e518c>
80205208:	8f000017 	ldw	fp,0(r17)
8020520c:	8c800117 	ldw	r18,4(r17)
80205210:	0011883a 	mov	r8,zero
80205214:	8c400204 	addi	r17,r17,8
80205218:	003fdb06 	br	80205188 <__reset+0xfa1e5188>
8020521c:	180d883a 	mov	r6,r3
80205220:	e00b883a 	mov	r5,fp
80205224:	da000115 	stw	r8,4(sp)
80205228:	d8c00015 	stw	r3,0(sp)
8020522c:	02061380 	call	80206138 <memmove>
80205230:	d8c00017 	ldw	r3,0(sp)
80205234:	80800017 	ldw	r2,0(r16)
80205238:	800b883a 	mov	r5,r16
8020523c:	a809883a 	mov	r4,r21
80205240:	10c5883a 	add	r2,r2,r3
80205244:	80800015 	stw	r2,0(r16)
80205248:	d8c00015 	stw	r3,0(sp)
8020524c:	020470c0 	call	8020470c <_fflush_r>
80205250:	d8c00017 	ldw	r3,0(sp)
80205254:	da000117 	ldw	r8,4(sp)
80205258:	103fc21e 	bne	r2,zero,80205164 <__reset+0xfa1e5164>
8020525c:	182f883a 	mov	r23,r3
80205260:	9de7c83a 	sub	r19,r19,r23
80205264:	983fe11e 	bne	r19,zero,802051ec <__reset+0xfa1e51ec>
80205268:	800b883a 	mov	r5,r16
8020526c:	a809883a 	mov	r4,r21
80205270:	020470c0 	call	8020470c <_fflush_r>
80205274:	103fbb1e 	bne	r2,zero,80205164 <__reset+0xfa1e5164>
80205278:	0011883a 	mov	r8,zero
8020527c:	003fdb06 	br	802051ec <__reset+0xfa1e51ec>
80205280:	94c0012e 	bgeu	r18,r19,80205288 <__sfvwrite_r+0x31c>
80205284:	9027883a 	mov	r19,r18
80205288:	980d883a 	mov	r6,r19
8020528c:	e00b883a 	mov	r5,fp
80205290:	02061380 	call	80206138 <memmove>
80205294:	80800217 	ldw	r2,8(r16)
80205298:	80c00017 	ldw	r3,0(r16)
8020529c:	14c5c83a 	sub	r2,r2,r19
802052a0:	1cc7883a 	add	r3,r3,r19
802052a4:	80800215 	stw	r2,8(r16)
802052a8:	80c00015 	stw	r3,0(r16)
802052ac:	10004326 	beq	r2,zero,802053bc <__sfvwrite_r+0x450>
802052b0:	9805883a 	mov	r2,r19
802052b4:	003f8606 	br	802050d0 <__reset+0xfa1e50d0>
802052b8:	b00d883a 	mov	r6,r22
802052bc:	e00b883a 	mov	r5,fp
802052c0:	da000115 	stw	r8,4(sp)
802052c4:	02061380 	call	80206138 <memmove>
802052c8:	80800217 	ldw	r2,8(r16)
802052cc:	80c00017 	ldw	r3,0(r16)
802052d0:	da000117 	ldw	r8,4(sp)
802052d4:	1585c83a 	sub	r2,r2,r22
802052d8:	1dad883a 	add	r22,r3,r22
802052dc:	80800215 	stw	r2,8(r16)
802052e0:	85800015 	stw	r22,0(r16)
802052e4:	003fbf06 	br	802051e4 <__reset+0xfa1e51e4>
802052e8:	81000017 	ldw	r4,0(r16)
802052ec:	9027883a 	mov	r19,r18
802052f0:	902f883a 	mov	r23,r18
802052f4:	003f6c06 	br	802050a8 <__reset+0xfa1e50a8>
802052f8:	900d883a 	mov	r6,r18
802052fc:	01400284 	movi	r5,10
80205300:	e009883a 	mov	r4,fp
80205304:	02060540 	call	80206054 <memchr>
80205308:	10003e26 	beq	r2,zero,80205404 <__sfvwrite_r+0x498>
8020530c:	10800044 	addi	r2,r2,1
80205310:	1727c83a 	sub	r19,r2,fp
80205314:	02000044 	movi	r8,1
80205318:	003f9d06 	br	80205190 <__reset+0xfa1e5190>
8020531c:	80800517 	ldw	r2,20(r16)
80205320:	81400417 	ldw	r5,16(r16)
80205324:	81c00017 	ldw	r7,0(r16)
80205328:	10a7883a 	add	r19,r2,r2
8020532c:	9885883a 	add	r2,r19,r2
80205330:	1026d7fa 	srli	r19,r2,31
80205334:	396dc83a 	sub	r22,r7,r5
80205338:	b1000044 	addi	r4,r22,1
8020533c:	9885883a 	add	r2,r19,r2
80205340:	1027d07a 	srai	r19,r2,1
80205344:	2485883a 	add	r2,r4,r18
80205348:	980d883a 	mov	r6,r19
8020534c:	9880022e 	bgeu	r19,r2,80205358 <__sfvwrite_r+0x3ec>
80205350:	1027883a 	mov	r19,r2
80205354:	100d883a 	mov	r6,r2
80205358:	18c1000c 	andi	r3,r3,1024
8020535c:	18001c26 	beq	r3,zero,802053d0 <__sfvwrite_r+0x464>
80205360:	300b883a 	mov	r5,r6
80205364:	a809883a 	mov	r4,r21
80205368:	02058480 	call	80205848 <_malloc_r>
8020536c:	102f883a 	mov	r23,r2
80205370:	10002926 	beq	r2,zero,80205418 <__sfvwrite_r+0x4ac>
80205374:	81400417 	ldw	r5,16(r16)
80205378:	b00d883a 	mov	r6,r22
8020537c:	1009883a 	mov	r4,r2
80205380:	02005040 	call	80200504 <memcpy>
80205384:	8080030b 	ldhu	r2,12(r16)
80205388:	00fedfc4 	movi	r3,-1153
8020538c:	10c4703a 	and	r2,r2,r3
80205390:	10802014 	ori	r2,r2,128
80205394:	8080030d 	sth	r2,12(r16)
80205398:	bd89883a 	add	r4,r23,r22
8020539c:	9d8fc83a 	sub	r7,r19,r22
802053a0:	85c00415 	stw	r23,16(r16)
802053a4:	84c00515 	stw	r19,20(r16)
802053a8:	81000015 	stw	r4,0(r16)
802053ac:	9027883a 	mov	r19,r18
802053b0:	81c00215 	stw	r7,8(r16)
802053b4:	902f883a 	mov	r23,r18
802053b8:	003f3b06 	br	802050a8 <__reset+0xfa1e50a8>
802053bc:	800b883a 	mov	r5,r16
802053c0:	a809883a 	mov	r4,r21
802053c4:	020470c0 	call	8020470c <_fflush_r>
802053c8:	103fb926 	beq	r2,zero,802052b0 <__reset+0xfa1e52b0>
802053cc:	003f6506 	br	80205164 <__reset+0xfa1e5164>
802053d0:	a809883a 	mov	r4,r21
802053d4:	02075200 	call	80207520 <_realloc_r>
802053d8:	102f883a 	mov	r23,r2
802053dc:	103fee1e 	bne	r2,zero,80205398 <__reset+0xfa1e5398>
802053e0:	81400417 	ldw	r5,16(r16)
802053e4:	a809883a 	mov	r4,r21
802053e8:	0204c5c0 	call	80204c5c <_free_r>
802053ec:	8080030b 	ldhu	r2,12(r16)
802053f0:	00ffdfc4 	movi	r3,-129
802053f4:	1884703a 	and	r2,r3,r2
802053f8:	00c00304 	movi	r3,12
802053fc:	a8c00015 	stw	r3,0(r21)
80205400:	003f5906 	br	80205168 <__reset+0xfa1e5168>
80205404:	94c00044 	addi	r19,r18,1
80205408:	02000044 	movi	r8,1
8020540c:	003f6006 	br	80205190 <__reset+0xfa1e5190>
80205410:	00bfffc4 	movi	r2,-1
80205414:	003f0306 	br	80205024 <__reset+0xfa1e5024>
80205418:	00800304 	movi	r2,12
8020541c:	a8800015 	stw	r2,0(r21)
80205420:	8080030b 	ldhu	r2,12(r16)
80205424:	003f5006 	br	80205168 <__reset+0xfa1e5168>

80205428 <_fwalk>:
80205428:	defff704 	addi	sp,sp,-36
8020542c:	dd000415 	stw	r20,16(sp)
80205430:	dfc00815 	stw	ra,32(sp)
80205434:	ddc00715 	stw	r23,28(sp)
80205438:	dd800615 	stw	r22,24(sp)
8020543c:	dd400515 	stw	r21,20(sp)
80205440:	dcc00315 	stw	r19,12(sp)
80205444:	dc800215 	stw	r18,8(sp)
80205448:	dc400115 	stw	r17,4(sp)
8020544c:	dc000015 	stw	r16,0(sp)
80205450:	2500b804 	addi	r20,r4,736
80205454:	a0002326 	beq	r20,zero,802054e4 <_fwalk+0xbc>
80205458:	282b883a 	mov	r21,r5
8020545c:	002f883a 	mov	r23,zero
80205460:	05800044 	movi	r22,1
80205464:	04ffffc4 	movi	r19,-1
80205468:	a4400117 	ldw	r17,4(r20)
8020546c:	a4800217 	ldw	r18,8(r20)
80205470:	8c7fffc4 	addi	r17,r17,-1
80205474:	88000d16 	blt	r17,zero,802054ac <_fwalk+0x84>
80205478:	94000304 	addi	r16,r18,12
8020547c:	94800384 	addi	r18,r18,14
80205480:	8080000b 	ldhu	r2,0(r16)
80205484:	8c7fffc4 	addi	r17,r17,-1
80205488:	813ffd04 	addi	r4,r16,-12
8020548c:	b080042e 	bgeu	r22,r2,802054a0 <_fwalk+0x78>
80205490:	9080000f 	ldh	r2,0(r18)
80205494:	14c00226 	beq	r2,r19,802054a0 <_fwalk+0x78>
80205498:	a83ee83a 	callr	r21
8020549c:	b8aeb03a 	or	r23,r23,r2
802054a0:	84001a04 	addi	r16,r16,104
802054a4:	94801a04 	addi	r18,r18,104
802054a8:	8cfff51e 	bne	r17,r19,80205480 <__reset+0xfa1e5480>
802054ac:	a5000017 	ldw	r20,0(r20)
802054b0:	a03fed1e 	bne	r20,zero,80205468 <__reset+0xfa1e5468>
802054b4:	b805883a 	mov	r2,r23
802054b8:	dfc00817 	ldw	ra,32(sp)
802054bc:	ddc00717 	ldw	r23,28(sp)
802054c0:	dd800617 	ldw	r22,24(sp)
802054c4:	dd400517 	ldw	r21,20(sp)
802054c8:	dd000417 	ldw	r20,16(sp)
802054cc:	dcc00317 	ldw	r19,12(sp)
802054d0:	dc800217 	ldw	r18,8(sp)
802054d4:	dc400117 	ldw	r17,4(sp)
802054d8:	dc000017 	ldw	r16,0(sp)
802054dc:	dec00904 	addi	sp,sp,36
802054e0:	f800283a 	ret
802054e4:	002f883a 	mov	r23,zero
802054e8:	003ff206 	br	802054b4 <__reset+0xfa1e54b4>

802054ec <_fwalk_reent>:
802054ec:	defff704 	addi	sp,sp,-36
802054f0:	dd000415 	stw	r20,16(sp)
802054f4:	dfc00815 	stw	ra,32(sp)
802054f8:	ddc00715 	stw	r23,28(sp)
802054fc:	dd800615 	stw	r22,24(sp)
80205500:	dd400515 	stw	r21,20(sp)
80205504:	dcc00315 	stw	r19,12(sp)
80205508:	dc800215 	stw	r18,8(sp)
8020550c:	dc400115 	stw	r17,4(sp)
80205510:	dc000015 	stw	r16,0(sp)
80205514:	2500b804 	addi	r20,r4,736
80205518:	a0002326 	beq	r20,zero,802055a8 <_fwalk_reent+0xbc>
8020551c:	282b883a 	mov	r21,r5
80205520:	2027883a 	mov	r19,r4
80205524:	002f883a 	mov	r23,zero
80205528:	05800044 	movi	r22,1
8020552c:	04bfffc4 	movi	r18,-1
80205530:	a4400117 	ldw	r17,4(r20)
80205534:	a4000217 	ldw	r16,8(r20)
80205538:	8c7fffc4 	addi	r17,r17,-1
8020553c:	88000c16 	blt	r17,zero,80205570 <_fwalk_reent+0x84>
80205540:	84000304 	addi	r16,r16,12
80205544:	8080000b 	ldhu	r2,0(r16)
80205548:	8c7fffc4 	addi	r17,r17,-1
8020554c:	817ffd04 	addi	r5,r16,-12
80205550:	b080052e 	bgeu	r22,r2,80205568 <_fwalk_reent+0x7c>
80205554:	8080008f 	ldh	r2,2(r16)
80205558:	9809883a 	mov	r4,r19
8020555c:	14800226 	beq	r2,r18,80205568 <_fwalk_reent+0x7c>
80205560:	a83ee83a 	callr	r21
80205564:	b8aeb03a 	or	r23,r23,r2
80205568:	84001a04 	addi	r16,r16,104
8020556c:	8cbff51e 	bne	r17,r18,80205544 <__reset+0xfa1e5544>
80205570:	a5000017 	ldw	r20,0(r20)
80205574:	a03fee1e 	bne	r20,zero,80205530 <__reset+0xfa1e5530>
80205578:	b805883a 	mov	r2,r23
8020557c:	dfc00817 	ldw	ra,32(sp)
80205580:	ddc00717 	ldw	r23,28(sp)
80205584:	dd800617 	ldw	r22,24(sp)
80205588:	dd400517 	ldw	r21,20(sp)
8020558c:	dd000417 	ldw	r20,16(sp)
80205590:	dcc00317 	ldw	r19,12(sp)
80205594:	dc800217 	ldw	r18,8(sp)
80205598:	dc400117 	ldw	r17,4(sp)
8020559c:	dc000017 	ldw	r16,0(sp)
802055a0:	dec00904 	addi	sp,sp,36
802055a4:	f800283a 	ret
802055a8:	002f883a 	mov	r23,zero
802055ac:	003ff206 	br	80205578 <__reset+0xfa1e5578>

802055b0 <_setlocale_r>:
802055b0:	30001b26 	beq	r6,zero,80205620 <_setlocale_r+0x70>
802055b4:	01600874 	movhi	r5,32801
802055b8:	defffe04 	addi	sp,sp,-8
802055bc:	2948c104 	addi	r5,r5,8964
802055c0:	3009883a 	mov	r4,r6
802055c4:	dc000015 	stw	r16,0(sp)
802055c8:	dfc00115 	stw	ra,4(sp)
802055cc:	3021883a 	mov	r16,r6
802055d0:	0207c880 	call	80207c88 <strcmp>
802055d4:	1000061e 	bne	r2,zero,802055f0 <_setlocale_r+0x40>
802055d8:	00a00874 	movhi	r2,32801
802055dc:	1088c004 	addi	r2,r2,8960
802055e0:	dfc00117 	ldw	ra,4(sp)
802055e4:	dc000017 	ldw	r16,0(sp)
802055e8:	dec00204 	addi	sp,sp,8
802055ec:	f800283a 	ret
802055f0:	01600874 	movhi	r5,32801
802055f4:	2948c004 	addi	r5,r5,8960
802055f8:	8009883a 	mov	r4,r16
802055fc:	0207c880 	call	80207c88 <strcmp>
80205600:	103ff526 	beq	r2,zero,802055d8 <__reset+0xfa1e55d8>
80205604:	01600874 	movhi	r5,32801
80205608:	2948ab04 	addi	r5,r5,8876
8020560c:	8009883a 	mov	r4,r16
80205610:	0207c880 	call	80207c88 <strcmp>
80205614:	103ff026 	beq	r2,zero,802055d8 <__reset+0xfa1e55d8>
80205618:	0005883a 	mov	r2,zero
8020561c:	003ff006 	br	802055e0 <__reset+0xfa1e55e0>
80205620:	00a00874 	movhi	r2,32801
80205624:	1088c004 	addi	r2,r2,8960
80205628:	f800283a 	ret

8020562c <__locale_charset>:
8020562c:	00a00874 	movhi	r2,32801
80205630:	108b1104 	addi	r2,r2,11332
80205634:	f800283a 	ret

80205638 <__locale_mb_cur_max>:
80205638:	00a00874 	movhi	r2,32801
8020563c:	10911d04 	addi	r2,r2,17524
80205640:	10800017 	ldw	r2,0(r2)
80205644:	f800283a 	ret

80205648 <__locale_msgcharset>:
80205648:	00a00874 	movhi	r2,32801
8020564c:	108b0904 	addi	r2,r2,11300
80205650:	f800283a 	ret

80205654 <__locale_cjk_lang>:
80205654:	0005883a 	mov	r2,zero
80205658:	f800283a 	ret

8020565c <_localeconv_r>:
8020565c:	00a00874 	movhi	r2,32801
80205660:	108b1904 	addi	r2,r2,11364
80205664:	f800283a 	ret

80205668 <setlocale>:
80205668:	00a00874 	movhi	r2,32801
8020566c:	10911c04 	addi	r2,r2,17520
80205670:	280d883a 	mov	r6,r5
80205674:	200b883a 	mov	r5,r4
80205678:	11000017 	ldw	r4,0(r2)
8020567c:	02055b01 	jmpi	802055b0 <_setlocale_r>

80205680 <localeconv>:
80205680:	00a00874 	movhi	r2,32801
80205684:	108b1904 	addi	r2,r2,11364
80205688:	f800283a 	ret

8020568c <__smakebuf_r>:
8020568c:	2880030b 	ldhu	r2,12(r5)
80205690:	10c0008c 	andi	r3,r2,2
80205694:	1800411e 	bne	r3,zero,8020579c <__smakebuf_r+0x110>
80205698:	deffec04 	addi	sp,sp,-80
8020569c:	dc000f15 	stw	r16,60(sp)
802056a0:	2821883a 	mov	r16,r5
802056a4:	2940038f 	ldh	r5,14(r5)
802056a8:	dc401015 	stw	r17,64(sp)
802056ac:	dfc01315 	stw	ra,76(sp)
802056b0:	dcc01215 	stw	r19,72(sp)
802056b4:	dc801115 	stw	r18,68(sp)
802056b8:	2023883a 	mov	r17,r4
802056bc:	28001c16 	blt	r5,zero,80205730 <__smakebuf_r+0xa4>
802056c0:	d80d883a 	mov	r6,sp
802056c4:	02099880 	call	80209988 <_fstat_r>
802056c8:	10001816 	blt	r2,zero,8020572c <__smakebuf_r+0xa0>
802056cc:	d8800117 	ldw	r2,4(sp)
802056d0:	00e00014 	movui	r3,32768
802056d4:	10bc000c 	andi	r2,r2,61440
802056d8:	14c80020 	cmpeqi	r19,r2,8192
802056dc:	10c03726 	beq	r2,r3,802057bc <__smakebuf_r+0x130>
802056e0:	80c0030b 	ldhu	r3,12(r16)
802056e4:	18c20014 	ori	r3,r3,2048
802056e8:	80c0030d 	sth	r3,12(r16)
802056ec:	00c80004 	movi	r3,8192
802056f0:	10c0521e 	bne	r2,r3,8020583c <__smakebuf_r+0x1b0>
802056f4:	8140038f 	ldh	r5,14(r16)
802056f8:	8809883a 	mov	r4,r17
802056fc:	02099e40 	call	802099e4 <_isatty_r>
80205700:	10004c26 	beq	r2,zero,80205834 <__smakebuf_r+0x1a8>
80205704:	8080030b 	ldhu	r2,12(r16)
80205708:	80c010c4 	addi	r3,r16,67
8020570c:	80c00015 	stw	r3,0(r16)
80205710:	10800054 	ori	r2,r2,1
80205714:	8080030d 	sth	r2,12(r16)
80205718:	00800044 	movi	r2,1
8020571c:	80c00415 	stw	r3,16(r16)
80205720:	80800515 	stw	r2,20(r16)
80205724:	04810004 	movi	r18,1024
80205728:	00000706 	br	80205748 <__smakebuf_r+0xbc>
8020572c:	8080030b 	ldhu	r2,12(r16)
80205730:	10c0200c 	andi	r3,r2,128
80205734:	18001f1e 	bne	r3,zero,802057b4 <__smakebuf_r+0x128>
80205738:	04810004 	movi	r18,1024
8020573c:	10820014 	ori	r2,r2,2048
80205740:	8080030d 	sth	r2,12(r16)
80205744:	0027883a 	mov	r19,zero
80205748:	900b883a 	mov	r5,r18
8020574c:	8809883a 	mov	r4,r17
80205750:	02058480 	call	80205848 <_malloc_r>
80205754:	10002c26 	beq	r2,zero,80205808 <__smakebuf_r+0x17c>
80205758:	80c0030b 	ldhu	r3,12(r16)
8020575c:	01200834 	movhi	r4,32800
80205760:	2111e804 	addi	r4,r4,18336
80205764:	89000f15 	stw	r4,60(r17)
80205768:	18c02014 	ori	r3,r3,128
8020576c:	80c0030d 	sth	r3,12(r16)
80205770:	80800015 	stw	r2,0(r16)
80205774:	80800415 	stw	r2,16(r16)
80205778:	84800515 	stw	r18,20(r16)
8020577c:	98001a1e 	bne	r19,zero,802057e8 <__smakebuf_r+0x15c>
80205780:	dfc01317 	ldw	ra,76(sp)
80205784:	dcc01217 	ldw	r19,72(sp)
80205788:	dc801117 	ldw	r18,68(sp)
8020578c:	dc401017 	ldw	r17,64(sp)
80205790:	dc000f17 	ldw	r16,60(sp)
80205794:	dec01404 	addi	sp,sp,80
80205798:	f800283a 	ret
8020579c:	288010c4 	addi	r2,r5,67
802057a0:	28800015 	stw	r2,0(r5)
802057a4:	28800415 	stw	r2,16(r5)
802057a8:	00800044 	movi	r2,1
802057ac:	28800515 	stw	r2,20(r5)
802057b0:	f800283a 	ret
802057b4:	04801004 	movi	r18,64
802057b8:	003fe006 	br	8020573c <__reset+0xfa1e573c>
802057bc:	81000a17 	ldw	r4,40(r16)
802057c0:	00e00834 	movhi	r3,32800
802057c4:	18df0904 	addi	r3,r3,31780
802057c8:	20ffc51e 	bne	r4,r3,802056e0 <__reset+0xfa1e56e0>
802057cc:	8080030b 	ldhu	r2,12(r16)
802057d0:	04810004 	movi	r18,1024
802057d4:	84801315 	stw	r18,76(r16)
802057d8:	1484b03a 	or	r2,r2,r18
802057dc:	8080030d 	sth	r2,12(r16)
802057e0:	0027883a 	mov	r19,zero
802057e4:	003fd806 	br	80205748 <__reset+0xfa1e5748>
802057e8:	8140038f 	ldh	r5,14(r16)
802057ec:	8809883a 	mov	r4,r17
802057f0:	02099e40 	call	802099e4 <_isatty_r>
802057f4:	103fe226 	beq	r2,zero,80205780 <__reset+0xfa1e5780>
802057f8:	8080030b 	ldhu	r2,12(r16)
802057fc:	10800054 	ori	r2,r2,1
80205800:	8080030d 	sth	r2,12(r16)
80205804:	003fde06 	br	80205780 <__reset+0xfa1e5780>
80205808:	8080030b 	ldhu	r2,12(r16)
8020580c:	10c0800c 	andi	r3,r2,512
80205810:	183fdb1e 	bne	r3,zero,80205780 <__reset+0xfa1e5780>
80205814:	10800094 	ori	r2,r2,2
80205818:	80c010c4 	addi	r3,r16,67
8020581c:	8080030d 	sth	r2,12(r16)
80205820:	00800044 	movi	r2,1
80205824:	80c00015 	stw	r3,0(r16)
80205828:	80c00415 	stw	r3,16(r16)
8020582c:	80800515 	stw	r2,20(r16)
80205830:	003fd306 	br	80205780 <__reset+0xfa1e5780>
80205834:	04810004 	movi	r18,1024
80205838:	003fc306 	br	80205748 <__reset+0xfa1e5748>
8020583c:	0027883a 	mov	r19,zero
80205840:	04810004 	movi	r18,1024
80205844:	003fc006 	br	80205748 <__reset+0xfa1e5748>

80205848 <_malloc_r>:
80205848:	defff504 	addi	sp,sp,-44
8020584c:	dc800315 	stw	r18,12(sp)
80205850:	dfc00a15 	stw	ra,40(sp)
80205854:	df000915 	stw	fp,36(sp)
80205858:	ddc00815 	stw	r23,32(sp)
8020585c:	dd800715 	stw	r22,28(sp)
80205860:	dd400615 	stw	r21,24(sp)
80205864:	dd000515 	stw	r20,20(sp)
80205868:	dcc00415 	stw	r19,16(sp)
8020586c:	dc400215 	stw	r17,8(sp)
80205870:	dc000115 	stw	r16,4(sp)
80205874:	288002c4 	addi	r2,r5,11
80205878:	00c00584 	movi	r3,22
8020587c:	2025883a 	mov	r18,r4
80205880:	18807f2e 	bgeu	r3,r2,80205a80 <_malloc_r+0x238>
80205884:	047ffe04 	movi	r17,-8
80205888:	1462703a 	and	r17,r2,r17
8020588c:	8800a316 	blt	r17,zero,80205b1c <_malloc_r+0x2d4>
80205890:	8940a236 	bltu	r17,r5,80205b1c <_malloc_r+0x2d4>
80205894:	020d43c0 	call	8020d43c <__malloc_lock>
80205898:	00807dc4 	movi	r2,503
8020589c:	1441e92e 	bgeu	r2,r17,80206044 <_malloc_r+0x7fc>
802058a0:	8804d27a 	srli	r2,r17,9
802058a4:	1000a126 	beq	r2,zero,80205b2c <_malloc_r+0x2e4>
802058a8:	00c00104 	movi	r3,4
802058ac:	18811e36 	bltu	r3,r2,80205d28 <_malloc_r+0x4e0>
802058b0:	8804d1ba 	srli	r2,r17,6
802058b4:	12000e44 	addi	r8,r2,57
802058b8:	11c00e04 	addi	r7,r2,56
802058bc:	4209883a 	add	r4,r8,r8
802058c0:	04e00874 	movhi	r19,32801
802058c4:	2109883a 	add	r4,r4,r4
802058c8:	9ccb2704 	addi	r19,r19,11420
802058cc:	2109883a 	add	r4,r4,r4
802058d0:	9909883a 	add	r4,r19,r4
802058d4:	24000117 	ldw	r16,4(r4)
802058d8:	213ffe04 	addi	r4,r4,-8
802058dc:	24009726 	beq	r4,r16,80205b3c <_malloc_r+0x2f4>
802058e0:	80800117 	ldw	r2,4(r16)
802058e4:	01bfff04 	movi	r6,-4
802058e8:	014003c4 	movi	r5,15
802058ec:	1184703a 	and	r2,r2,r6
802058f0:	1447c83a 	sub	r3,r2,r17
802058f4:	28c00716 	blt	r5,r3,80205914 <_malloc_r+0xcc>
802058f8:	1800920e 	bge	r3,zero,80205b44 <_malloc_r+0x2fc>
802058fc:	84000317 	ldw	r16,12(r16)
80205900:	24008e26 	beq	r4,r16,80205b3c <_malloc_r+0x2f4>
80205904:	80800117 	ldw	r2,4(r16)
80205908:	1184703a 	and	r2,r2,r6
8020590c:	1447c83a 	sub	r3,r2,r17
80205910:	28fff90e 	bge	r5,r3,802058f8 <__reset+0xfa1e58f8>
80205914:	3809883a 	mov	r4,r7
80205918:	01a00874 	movhi	r6,32801
8020591c:	9c000417 	ldw	r16,16(r19)
80205920:	318b2704 	addi	r6,r6,11420
80205924:	32000204 	addi	r8,r6,8
80205928:	82013426 	beq	r16,r8,80205dfc <_malloc_r+0x5b4>
8020592c:	80c00117 	ldw	r3,4(r16)
80205930:	00bfff04 	movi	r2,-4
80205934:	188e703a 	and	r7,r3,r2
80205938:	3c45c83a 	sub	r2,r7,r17
8020593c:	00c003c4 	movi	r3,15
80205940:	18811f16 	blt	r3,r2,80205dc0 <_malloc_r+0x578>
80205944:	32000515 	stw	r8,20(r6)
80205948:	32000415 	stw	r8,16(r6)
8020594c:	10007f0e 	bge	r2,zero,80205b4c <_malloc_r+0x304>
80205950:	00807fc4 	movi	r2,511
80205954:	11c0fd36 	bltu	r2,r7,80205d4c <_malloc_r+0x504>
80205958:	3806d0fa 	srli	r3,r7,3
8020595c:	01c00044 	movi	r7,1
80205960:	30800117 	ldw	r2,4(r6)
80205964:	19400044 	addi	r5,r3,1
80205968:	294b883a 	add	r5,r5,r5
8020596c:	1807d0ba 	srai	r3,r3,2
80205970:	294b883a 	add	r5,r5,r5
80205974:	294b883a 	add	r5,r5,r5
80205978:	298b883a 	add	r5,r5,r6
8020597c:	38c6983a 	sll	r3,r7,r3
80205980:	29c00017 	ldw	r7,0(r5)
80205984:	2a7ffe04 	addi	r9,r5,-8
80205988:	1886b03a 	or	r3,r3,r2
8020598c:	82400315 	stw	r9,12(r16)
80205990:	81c00215 	stw	r7,8(r16)
80205994:	30c00115 	stw	r3,4(r6)
80205998:	2c000015 	stw	r16,0(r5)
8020599c:	3c000315 	stw	r16,12(r7)
802059a0:	2005d0ba 	srai	r2,r4,2
802059a4:	01400044 	movi	r5,1
802059a8:	288a983a 	sll	r5,r5,r2
802059ac:	19406f36 	bltu	r3,r5,80205b6c <_malloc_r+0x324>
802059b0:	28c4703a 	and	r2,r5,r3
802059b4:	10000a1e 	bne	r2,zero,802059e0 <_malloc_r+0x198>
802059b8:	00bfff04 	movi	r2,-4
802059bc:	294b883a 	add	r5,r5,r5
802059c0:	2088703a 	and	r4,r4,r2
802059c4:	28c4703a 	and	r2,r5,r3
802059c8:	21000104 	addi	r4,r4,4
802059cc:	1000041e 	bne	r2,zero,802059e0 <_malloc_r+0x198>
802059d0:	294b883a 	add	r5,r5,r5
802059d4:	28c4703a 	and	r2,r5,r3
802059d8:	21000104 	addi	r4,r4,4
802059dc:	103ffc26 	beq	r2,zero,802059d0 <__reset+0xfa1e59d0>
802059e0:	02bfff04 	movi	r10,-4
802059e4:	024003c4 	movi	r9,15
802059e8:	21800044 	addi	r6,r4,1
802059ec:	318d883a 	add	r6,r6,r6
802059f0:	318d883a 	add	r6,r6,r6
802059f4:	318d883a 	add	r6,r6,r6
802059f8:	998d883a 	add	r6,r19,r6
802059fc:	333ffe04 	addi	r12,r6,-8
80205a00:	2017883a 	mov	r11,r4
80205a04:	31800104 	addi	r6,r6,4
80205a08:	34000017 	ldw	r16,0(r6)
80205a0c:	31fffd04 	addi	r7,r6,-12
80205a10:	81c0041e 	bne	r16,r7,80205a24 <_malloc_r+0x1dc>
80205a14:	0000fb06 	br	80205e04 <_malloc_r+0x5bc>
80205a18:	1801030e 	bge	r3,zero,80205e28 <_malloc_r+0x5e0>
80205a1c:	84000317 	ldw	r16,12(r16)
80205a20:	81c0f826 	beq	r16,r7,80205e04 <_malloc_r+0x5bc>
80205a24:	80800117 	ldw	r2,4(r16)
80205a28:	1284703a 	and	r2,r2,r10
80205a2c:	1447c83a 	sub	r3,r2,r17
80205a30:	48fff90e 	bge	r9,r3,80205a18 <__reset+0xfa1e5a18>
80205a34:	80800317 	ldw	r2,12(r16)
80205a38:	81000217 	ldw	r4,8(r16)
80205a3c:	89400054 	ori	r5,r17,1
80205a40:	81400115 	stw	r5,4(r16)
80205a44:	20800315 	stw	r2,12(r4)
80205a48:	11000215 	stw	r4,8(r2)
80205a4c:	8463883a 	add	r17,r16,r17
80205a50:	9c400515 	stw	r17,20(r19)
80205a54:	9c400415 	stw	r17,16(r19)
80205a58:	18800054 	ori	r2,r3,1
80205a5c:	88800115 	stw	r2,4(r17)
80205a60:	8a000315 	stw	r8,12(r17)
80205a64:	8a000215 	stw	r8,8(r17)
80205a68:	88e3883a 	add	r17,r17,r3
80205a6c:	88c00015 	stw	r3,0(r17)
80205a70:	9009883a 	mov	r4,r18
80205a74:	020d4600 	call	8020d460 <__malloc_unlock>
80205a78:	80800204 	addi	r2,r16,8
80205a7c:	00001b06 	br	80205aec <_malloc_r+0x2a4>
80205a80:	04400404 	movi	r17,16
80205a84:	89402536 	bltu	r17,r5,80205b1c <_malloc_r+0x2d4>
80205a88:	020d43c0 	call	8020d43c <__malloc_lock>
80205a8c:	00800184 	movi	r2,6
80205a90:	01000084 	movi	r4,2
80205a94:	04e00874 	movhi	r19,32801
80205a98:	1085883a 	add	r2,r2,r2
80205a9c:	9ccb2704 	addi	r19,r19,11420
80205aa0:	1085883a 	add	r2,r2,r2
80205aa4:	9885883a 	add	r2,r19,r2
80205aa8:	14000117 	ldw	r16,4(r2)
80205aac:	10fffe04 	addi	r3,r2,-8
80205ab0:	80c0d926 	beq	r16,r3,80205e18 <_malloc_r+0x5d0>
80205ab4:	80c00117 	ldw	r3,4(r16)
80205ab8:	81000317 	ldw	r4,12(r16)
80205abc:	00bfff04 	movi	r2,-4
80205ac0:	1884703a 	and	r2,r3,r2
80205ac4:	81400217 	ldw	r5,8(r16)
80205ac8:	8085883a 	add	r2,r16,r2
80205acc:	10c00117 	ldw	r3,4(r2)
80205ad0:	29000315 	stw	r4,12(r5)
80205ad4:	21400215 	stw	r5,8(r4)
80205ad8:	18c00054 	ori	r3,r3,1
80205adc:	10c00115 	stw	r3,4(r2)
80205ae0:	9009883a 	mov	r4,r18
80205ae4:	020d4600 	call	8020d460 <__malloc_unlock>
80205ae8:	80800204 	addi	r2,r16,8
80205aec:	dfc00a17 	ldw	ra,40(sp)
80205af0:	df000917 	ldw	fp,36(sp)
80205af4:	ddc00817 	ldw	r23,32(sp)
80205af8:	dd800717 	ldw	r22,28(sp)
80205afc:	dd400617 	ldw	r21,24(sp)
80205b00:	dd000517 	ldw	r20,20(sp)
80205b04:	dcc00417 	ldw	r19,16(sp)
80205b08:	dc800317 	ldw	r18,12(sp)
80205b0c:	dc400217 	ldw	r17,8(sp)
80205b10:	dc000117 	ldw	r16,4(sp)
80205b14:	dec00b04 	addi	sp,sp,44
80205b18:	f800283a 	ret
80205b1c:	00800304 	movi	r2,12
80205b20:	90800015 	stw	r2,0(r18)
80205b24:	0005883a 	mov	r2,zero
80205b28:	003ff006 	br	80205aec <__reset+0xfa1e5aec>
80205b2c:	01002004 	movi	r4,128
80205b30:	02001004 	movi	r8,64
80205b34:	01c00fc4 	movi	r7,63
80205b38:	003f6106 	br	802058c0 <__reset+0xfa1e58c0>
80205b3c:	4009883a 	mov	r4,r8
80205b40:	003f7506 	br	80205918 <__reset+0xfa1e5918>
80205b44:	81000317 	ldw	r4,12(r16)
80205b48:	003fde06 	br	80205ac4 <__reset+0xfa1e5ac4>
80205b4c:	81c5883a 	add	r2,r16,r7
80205b50:	11400117 	ldw	r5,4(r2)
80205b54:	9009883a 	mov	r4,r18
80205b58:	29400054 	ori	r5,r5,1
80205b5c:	11400115 	stw	r5,4(r2)
80205b60:	020d4600 	call	8020d460 <__malloc_unlock>
80205b64:	80800204 	addi	r2,r16,8
80205b68:	003fe006 	br	80205aec <__reset+0xfa1e5aec>
80205b6c:	9c000217 	ldw	r16,8(r19)
80205b70:	00bfff04 	movi	r2,-4
80205b74:	85800117 	ldw	r22,4(r16)
80205b78:	b0ac703a 	and	r22,r22,r2
80205b7c:	b4400336 	bltu	r22,r17,80205b8c <_malloc_r+0x344>
80205b80:	b445c83a 	sub	r2,r22,r17
80205b84:	00c003c4 	movi	r3,15
80205b88:	18805d16 	blt	r3,r2,80205d00 <_malloc_r+0x4b8>
80205b8c:	05e00874 	movhi	r23,32801
80205b90:	00a00874 	movhi	r2,32801
80205b94:	10913304 	addi	r2,r2,17612
80205b98:	bdd11e04 	addi	r23,r23,17528
80205b9c:	15400017 	ldw	r21,0(r2)
80205ba0:	b8c00017 	ldw	r3,0(r23)
80205ba4:	00bfffc4 	movi	r2,-1
80205ba8:	858d883a 	add	r6,r16,r22
80205bac:	8d6b883a 	add	r21,r17,r21
80205bb0:	1880ea26 	beq	r3,r2,80205f5c <_malloc_r+0x714>
80205bb4:	ad4403c4 	addi	r21,r21,4111
80205bb8:	00bc0004 	movi	r2,-4096
80205bbc:	a8aa703a 	and	r21,r21,r2
80205bc0:	a80b883a 	mov	r5,r21
80205bc4:	9009883a 	mov	r4,r18
80205bc8:	d9800015 	stw	r6,0(sp)
80205bcc:	0207af80 	call	80207af8 <_sbrk_r>
80205bd0:	1029883a 	mov	r20,r2
80205bd4:	00bfffc4 	movi	r2,-1
80205bd8:	d9800017 	ldw	r6,0(sp)
80205bdc:	a080e826 	beq	r20,r2,80205f80 <_malloc_r+0x738>
80205be0:	a180a636 	bltu	r20,r6,80205e7c <_malloc_r+0x634>
80205be4:	07200874 	movhi	fp,32801
80205be8:	e7113c04 	addi	fp,fp,17648
80205bec:	e0800017 	ldw	r2,0(fp)
80205bf0:	a887883a 	add	r3,r21,r2
80205bf4:	e0c00015 	stw	r3,0(fp)
80205bf8:	3500e626 	beq	r6,r20,80205f94 <_malloc_r+0x74c>
80205bfc:	b9000017 	ldw	r4,0(r23)
80205c00:	00bfffc4 	movi	r2,-1
80205c04:	2080ee26 	beq	r4,r2,80205fc0 <_malloc_r+0x778>
80205c08:	a185c83a 	sub	r2,r20,r6
80205c0c:	10c5883a 	add	r2,r2,r3
80205c10:	e0800015 	stw	r2,0(fp)
80205c14:	a0c001cc 	andi	r3,r20,7
80205c18:	1800bc26 	beq	r3,zero,80205f0c <_malloc_r+0x6c4>
80205c1c:	a0e9c83a 	sub	r20,r20,r3
80205c20:	00840204 	movi	r2,4104
80205c24:	a5000204 	addi	r20,r20,8
80205c28:	10c7c83a 	sub	r3,r2,r3
80205c2c:	a545883a 	add	r2,r20,r21
80205c30:	1083ffcc 	andi	r2,r2,4095
80205c34:	18abc83a 	sub	r21,r3,r2
80205c38:	a80b883a 	mov	r5,r21
80205c3c:	9009883a 	mov	r4,r18
80205c40:	0207af80 	call	80207af8 <_sbrk_r>
80205c44:	00ffffc4 	movi	r3,-1
80205c48:	10c0e126 	beq	r2,r3,80205fd0 <_malloc_r+0x788>
80205c4c:	1505c83a 	sub	r2,r2,r20
80205c50:	1545883a 	add	r2,r2,r21
80205c54:	10800054 	ori	r2,r2,1
80205c58:	e0c00017 	ldw	r3,0(fp)
80205c5c:	9d000215 	stw	r20,8(r19)
80205c60:	a0800115 	stw	r2,4(r20)
80205c64:	a8c7883a 	add	r3,r21,r3
80205c68:	e0c00015 	stw	r3,0(fp)
80205c6c:	84c00e26 	beq	r16,r19,80205ca8 <_malloc_r+0x460>
80205c70:	018003c4 	movi	r6,15
80205c74:	3580a72e 	bgeu	r6,r22,80205f14 <_malloc_r+0x6cc>
80205c78:	81400117 	ldw	r5,4(r16)
80205c7c:	013ffe04 	movi	r4,-8
80205c80:	b0bffd04 	addi	r2,r22,-12
80205c84:	1104703a 	and	r2,r2,r4
80205c88:	2900004c 	andi	r4,r5,1
80205c8c:	2088b03a 	or	r4,r4,r2
80205c90:	81000115 	stw	r4,4(r16)
80205c94:	01400144 	movi	r5,5
80205c98:	8089883a 	add	r4,r16,r2
80205c9c:	21400115 	stw	r5,4(r4)
80205ca0:	21400215 	stw	r5,8(r4)
80205ca4:	3080cd36 	bltu	r6,r2,80205fdc <_malloc_r+0x794>
80205ca8:	00a00874 	movhi	r2,32801
80205cac:	10913204 	addi	r2,r2,17608
80205cb0:	11000017 	ldw	r4,0(r2)
80205cb4:	20c0012e 	bgeu	r4,r3,80205cbc <_malloc_r+0x474>
80205cb8:	10c00015 	stw	r3,0(r2)
80205cbc:	00a00874 	movhi	r2,32801
80205cc0:	10913104 	addi	r2,r2,17604
80205cc4:	11000017 	ldw	r4,0(r2)
80205cc8:	9c000217 	ldw	r16,8(r19)
80205ccc:	20c0012e 	bgeu	r4,r3,80205cd4 <_malloc_r+0x48c>
80205cd0:	10c00015 	stw	r3,0(r2)
80205cd4:	80c00117 	ldw	r3,4(r16)
80205cd8:	00bfff04 	movi	r2,-4
80205cdc:	1886703a 	and	r3,r3,r2
80205ce0:	1c45c83a 	sub	r2,r3,r17
80205ce4:	1c400236 	bltu	r3,r17,80205cf0 <_malloc_r+0x4a8>
80205ce8:	00c003c4 	movi	r3,15
80205cec:	18800416 	blt	r3,r2,80205d00 <_malloc_r+0x4b8>
80205cf0:	9009883a 	mov	r4,r18
80205cf4:	020d4600 	call	8020d460 <__malloc_unlock>
80205cf8:	0005883a 	mov	r2,zero
80205cfc:	003f7b06 	br	80205aec <__reset+0xfa1e5aec>
80205d00:	88c00054 	ori	r3,r17,1
80205d04:	80c00115 	stw	r3,4(r16)
80205d08:	8463883a 	add	r17,r16,r17
80205d0c:	10800054 	ori	r2,r2,1
80205d10:	9c400215 	stw	r17,8(r19)
80205d14:	88800115 	stw	r2,4(r17)
80205d18:	9009883a 	mov	r4,r18
80205d1c:	020d4600 	call	8020d460 <__malloc_unlock>
80205d20:	80800204 	addi	r2,r16,8
80205d24:	003f7106 	br	80205aec <__reset+0xfa1e5aec>
80205d28:	00c00504 	movi	r3,20
80205d2c:	18804a2e 	bgeu	r3,r2,80205e58 <_malloc_r+0x610>
80205d30:	00c01504 	movi	r3,84
80205d34:	18806e36 	bltu	r3,r2,80205ef0 <_malloc_r+0x6a8>
80205d38:	8804d33a 	srli	r2,r17,12
80205d3c:	12001bc4 	addi	r8,r2,111
80205d40:	11c01b84 	addi	r7,r2,110
80205d44:	4209883a 	add	r4,r8,r8
80205d48:	003edd06 	br	802058c0 <__reset+0xfa1e58c0>
80205d4c:	3804d27a 	srli	r2,r7,9
80205d50:	00c00104 	movi	r3,4
80205d54:	1880442e 	bgeu	r3,r2,80205e68 <_malloc_r+0x620>
80205d58:	00c00504 	movi	r3,20
80205d5c:	18808136 	bltu	r3,r2,80205f64 <_malloc_r+0x71c>
80205d60:	11401704 	addi	r5,r2,92
80205d64:	10c016c4 	addi	r3,r2,91
80205d68:	294b883a 	add	r5,r5,r5
80205d6c:	294b883a 	add	r5,r5,r5
80205d70:	294b883a 	add	r5,r5,r5
80205d74:	994b883a 	add	r5,r19,r5
80205d78:	28800017 	ldw	r2,0(r5)
80205d7c:	01a00874 	movhi	r6,32801
80205d80:	297ffe04 	addi	r5,r5,-8
80205d84:	318b2704 	addi	r6,r6,11420
80205d88:	28806526 	beq	r5,r2,80205f20 <_malloc_r+0x6d8>
80205d8c:	01bfff04 	movi	r6,-4
80205d90:	10c00117 	ldw	r3,4(r2)
80205d94:	1986703a 	and	r3,r3,r6
80205d98:	38c0022e 	bgeu	r7,r3,80205da4 <_malloc_r+0x55c>
80205d9c:	10800217 	ldw	r2,8(r2)
80205da0:	28bffb1e 	bne	r5,r2,80205d90 <__reset+0xfa1e5d90>
80205da4:	11400317 	ldw	r5,12(r2)
80205da8:	98c00117 	ldw	r3,4(r19)
80205dac:	81400315 	stw	r5,12(r16)
80205db0:	80800215 	stw	r2,8(r16)
80205db4:	2c000215 	stw	r16,8(r5)
80205db8:	14000315 	stw	r16,12(r2)
80205dbc:	003ef806 	br	802059a0 <__reset+0xfa1e59a0>
80205dc0:	88c00054 	ori	r3,r17,1
80205dc4:	80c00115 	stw	r3,4(r16)
80205dc8:	8463883a 	add	r17,r16,r17
80205dcc:	34400515 	stw	r17,20(r6)
80205dd0:	34400415 	stw	r17,16(r6)
80205dd4:	10c00054 	ori	r3,r2,1
80205dd8:	8a000315 	stw	r8,12(r17)
80205ddc:	8a000215 	stw	r8,8(r17)
80205de0:	88c00115 	stw	r3,4(r17)
80205de4:	88a3883a 	add	r17,r17,r2
80205de8:	88800015 	stw	r2,0(r17)
80205dec:	9009883a 	mov	r4,r18
80205df0:	020d4600 	call	8020d460 <__malloc_unlock>
80205df4:	80800204 	addi	r2,r16,8
80205df8:	003f3c06 	br	80205aec <__reset+0xfa1e5aec>
80205dfc:	30c00117 	ldw	r3,4(r6)
80205e00:	003ee706 	br	802059a0 <__reset+0xfa1e59a0>
80205e04:	5ac00044 	addi	r11,r11,1
80205e08:	588000cc 	andi	r2,r11,3
80205e0c:	31800204 	addi	r6,r6,8
80205e10:	103efd1e 	bne	r2,zero,80205a08 <__reset+0xfa1e5a08>
80205e14:	00002406 	br	80205ea8 <_malloc_r+0x660>
80205e18:	14000317 	ldw	r16,12(r2)
80205e1c:	143f251e 	bne	r2,r16,80205ab4 <__reset+0xfa1e5ab4>
80205e20:	21000084 	addi	r4,r4,2
80205e24:	003ebc06 	br	80205918 <__reset+0xfa1e5918>
80205e28:	8085883a 	add	r2,r16,r2
80205e2c:	10c00117 	ldw	r3,4(r2)
80205e30:	81000317 	ldw	r4,12(r16)
80205e34:	81400217 	ldw	r5,8(r16)
80205e38:	18c00054 	ori	r3,r3,1
80205e3c:	10c00115 	stw	r3,4(r2)
80205e40:	29000315 	stw	r4,12(r5)
80205e44:	21400215 	stw	r5,8(r4)
80205e48:	9009883a 	mov	r4,r18
80205e4c:	020d4600 	call	8020d460 <__malloc_unlock>
80205e50:	80800204 	addi	r2,r16,8
80205e54:	003f2506 	br	80205aec <__reset+0xfa1e5aec>
80205e58:	12001704 	addi	r8,r2,92
80205e5c:	11c016c4 	addi	r7,r2,91
80205e60:	4209883a 	add	r4,r8,r8
80205e64:	003e9606 	br	802058c0 <__reset+0xfa1e58c0>
80205e68:	3804d1ba 	srli	r2,r7,6
80205e6c:	11400e44 	addi	r5,r2,57
80205e70:	10c00e04 	addi	r3,r2,56
80205e74:	294b883a 	add	r5,r5,r5
80205e78:	003fbc06 	br	80205d6c <__reset+0xfa1e5d6c>
80205e7c:	84ff5926 	beq	r16,r19,80205be4 <__reset+0xfa1e5be4>
80205e80:	00a00874 	movhi	r2,32801
80205e84:	108b2704 	addi	r2,r2,11420
80205e88:	14000217 	ldw	r16,8(r2)
80205e8c:	00bfff04 	movi	r2,-4
80205e90:	80c00117 	ldw	r3,4(r16)
80205e94:	1886703a 	and	r3,r3,r2
80205e98:	003f9106 	br	80205ce0 <__reset+0xfa1e5ce0>
80205e9c:	60800217 	ldw	r2,8(r12)
80205ea0:	213fffc4 	addi	r4,r4,-1
80205ea4:	1300651e 	bne	r2,r12,8020603c <_malloc_r+0x7f4>
80205ea8:	208000cc 	andi	r2,r4,3
80205eac:	633ffe04 	addi	r12,r12,-8
80205eb0:	103ffa1e 	bne	r2,zero,80205e9c <__reset+0xfa1e5e9c>
80205eb4:	98800117 	ldw	r2,4(r19)
80205eb8:	0146303a 	nor	r3,zero,r5
80205ebc:	1884703a 	and	r2,r3,r2
80205ec0:	98800115 	stw	r2,4(r19)
80205ec4:	294b883a 	add	r5,r5,r5
80205ec8:	117f2836 	bltu	r2,r5,80205b6c <__reset+0xfa1e5b6c>
80205ecc:	283f2726 	beq	r5,zero,80205b6c <__reset+0xfa1e5b6c>
80205ed0:	2886703a 	and	r3,r5,r2
80205ed4:	5809883a 	mov	r4,r11
80205ed8:	183ec31e 	bne	r3,zero,802059e8 <__reset+0xfa1e59e8>
80205edc:	294b883a 	add	r5,r5,r5
80205ee0:	2886703a 	and	r3,r5,r2
80205ee4:	21000104 	addi	r4,r4,4
80205ee8:	183ffc26 	beq	r3,zero,80205edc <__reset+0xfa1e5edc>
80205eec:	003ebe06 	br	802059e8 <__reset+0xfa1e59e8>
80205ef0:	00c05504 	movi	r3,340
80205ef4:	18801236 	bltu	r3,r2,80205f40 <_malloc_r+0x6f8>
80205ef8:	8804d3fa 	srli	r2,r17,15
80205efc:	12001e04 	addi	r8,r2,120
80205f00:	11c01dc4 	addi	r7,r2,119
80205f04:	4209883a 	add	r4,r8,r8
80205f08:	003e6d06 	br	802058c0 <__reset+0xfa1e58c0>
80205f0c:	00c40004 	movi	r3,4096
80205f10:	003f4606 	br	80205c2c <__reset+0xfa1e5c2c>
80205f14:	00800044 	movi	r2,1
80205f18:	a0800115 	stw	r2,4(r20)
80205f1c:	003f7406 	br	80205cf0 <__reset+0xfa1e5cf0>
80205f20:	1805d0ba 	srai	r2,r3,2
80205f24:	01c00044 	movi	r7,1
80205f28:	30c00117 	ldw	r3,4(r6)
80205f2c:	388e983a 	sll	r7,r7,r2
80205f30:	2805883a 	mov	r2,r5
80205f34:	38c6b03a 	or	r3,r7,r3
80205f38:	30c00115 	stw	r3,4(r6)
80205f3c:	003f9b06 	br	80205dac <__reset+0xfa1e5dac>
80205f40:	00c15504 	movi	r3,1364
80205f44:	18801a36 	bltu	r3,r2,80205fb0 <_malloc_r+0x768>
80205f48:	8804d4ba 	srli	r2,r17,18
80205f4c:	12001f44 	addi	r8,r2,125
80205f50:	11c01f04 	addi	r7,r2,124
80205f54:	4209883a 	add	r4,r8,r8
80205f58:	003e5906 	br	802058c0 <__reset+0xfa1e58c0>
80205f5c:	ad400404 	addi	r21,r21,16
80205f60:	003f1706 	br	80205bc0 <__reset+0xfa1e5bc0>
80205f64:	00c01504 	movi	r3,84
80205f68:	18802336 	bltu	r3,r2,80205ff8 <_malloc_r+0x7b0>
80205f6c:	3804d33a 	srli	r2,r7,12
80205f70:	11401bc4 	addi	r5,r2,111
80205f74:	10c01b84 	addi	r3,r2,110
80205f78:	294b883a 	add	r5,r5,r5
80205f7c:	003f7b06 	br	80205d6c <__reset+0xfa1e5d6c>
80205f80:	9c000217 	ldw	r16,8(r19)
80205f84:	00bfff04 	movi	r2,-4
80205f88:	80c00117 	ldw	r3,4(r16)
80205f8c:	1886703a 	and	r3,r3,r2
80205f90:	003f5306 	br	80205ce0 <__reset+0xfa1e5ce0>
80205f94:	3083ffcc 	andi	r2,r6,4095
80205f98:	103f181e 	bne	r2,zero,80205bfc <__reset+0xfa1e5bfc>
80205f9c:	99000217 	ldw	r4,8(r19)
80205fa0:	b545883a 	add	r2,r22,r21
80205fa4:	10800054 	ori	r2,r2,1
80205fa8:	20800115 	stw	r2,4(r4)
80205fac:	003f3e06 	br	80205ca8 <__reset+0xfa1e5ca8>
80205fb0:	01003f84 	movi	r4,254
80205fb4:	02001fc4 	movi	r8,127
80205fb8:	01c01f84 	movi	r7,126
80205fbc:	003e4006 	br	802058c0 <__reset+0xfa1e58c0>
80205fc0:	00a00874 	movhi	r2,32801
80205fc4:	10911e04 	addi	r2,r2,17528
80205fc8:	15000015 	stw	r20,0(r2)
80205fcc:	003f1106 	br	80205c14 <__reset+0xfa1e5c14>
80205fd0:	00800044 	movi	r2,1
80205fd4:	002b883a 	mov	r21,zero
80205fd8:	003f1f06 	br	80205c58 <__reset+0xfa1e5c58>
80205fdc:	81400204 	addi	r5,r16,8
80205fe0:	9009883a 	mov	r4,r18
80205fe4:	0204c5c0 	call	80204c5c <_free_r>
80205fe8:	00a00874 	movhi	r2,32801
80205fec:	10913c04 	addi	r2,r2,17648
80205ff0:	10c00017 	ldw	r3,0(r2)
80205ff4:	003f2c06 	br	80205ca8 <__reset+0xfa1e5ca8>
80205ff8:	00c05504 	movi	r3,340
80205ffc:	18800536 	bltu	r3,r2,80206014 <_malloc_r+0x7cc>
80206000:	3804d3fa 	srli	r2,r7,15
80206004:	11401e04 	addi	r5,r2,120
80206008:	10c01dc4 	addi	r3,r2,119
8020600c:	294b883a 	add	r5,r5,r5
80206010:	003f5606 	br	80205d6c <__reset+0xfa1e5d6c>
80206014:	00c15504 	movi	r3,1364
80206018:	18800536 	bltu	r3,r2,80206030 <_malloc_r+0x7e8>
8020601c:	3804d4ba 	srli	r2,r7,18
80206020:	11401f44 	addi	r5,r2,125
80206024:	10c01f04 	addi	r3,r2,124
80206028:	294b883a 	add	r5,r5,r5
8020602c:	003f4f06 	br	80205d6c <__reset+0xfa1e5d6c>
80206030:	01403f84 	movi	r5,254
80206034:	00c01f84 	movi	r3,126
80206038:	003f4c06 	br	80205d6c <__reset+0xfa1e5d6c>
8020603c:	98800117 	ldw	r2,4(r19)
80206040:	003fa006 	br	80205ec4 <__reset+0xfa1e5ec4>
80206044:	8808d0fa 	srli	r4,r17,3
80206048:	20800044 	addi	r2,r4,1
8020604c:	1085883a 	add	r2,r2,r2
80206050:	003e9006 	br	80205a94 <__reset+0xfa1e5a94>

80206054 <memchr>:
80206054:	208000cc 	andi	r2,r4,3
80206058:	280f883a 	mov	r7,r5
8020605c:	10003426 	beq	r2,zero,80206130 <memchr+0xdc>
80206060:	30bfffc4 	addi	r2,r6,-1
80206064:	30001a26 	beq	r6,zero,802060d0 <memchr+0x7c>
80206068:	20c00003 	ldbu	r3,0(r4)
8020606c:	29803fcc 	andi	r6,r5,255
80206070:	30c0051e 	bne	r6,r3,80206088 <memchr+0x34>
80206074:	00001806 	br	802060d8 <memchr+0x84>
80206078:	10001526 	beq	r2,zero,802060d0 <memchr+0x7c>
8020607c:	20c00003 	ldbu	r3,0(r4)
80206080:	10bfffc4 	addi	r2,r2,-1
80206084:	30c01426 	beq	r6,r3,802060d8 <memchr+0x84>
80206088:	21000044 	addi	r4,r4,1
8020608c:	20c000cc 	andi	r3,r4,3
80206090:	183ff91e 	bne	r3,zero,80206078 <__reset+0xfa1e6078>
80206094:	020000c4 	movi	r8,3
80206098:	40801136 	bltu	r8,r2,802060e0 <memchr+0x8c>
8020609c:	10000c26 	beq	r2,zero,802060d0 <memchr+0x7c>
802060a0:	20c00003 	ldbu	r3,0(r4)
802060a4:	29403fcc 	andi	r5,r5,255
802060a8:	28c00b26 	beq	r5,r3,802060d8 <memchr+0x84>
802060ac:	20c00044 	addi	r3,r4,1
802060b0:	39803fcc 	andi	r6,r7,255
802060b4:	2089883a 	add	r4,r4,r2
802060b8:	00000306 	br	802060c8 <memchr+0x74>
802060bc:	18c00044 	addi	r3,r3,1
802060c0:	197fffc3 	ldbu	r5,-1(r3)
802060c4:	31400526 	beq	r6,r5,802060dc <memchr+0x88>
802060c8:	1805883a 	mov	r2,r3
802060cc:	20fffb1e 	bne	r4,r3,802060bc <__reset+0xfa1e60bc>
802060d0:	0005883a 	mov	r2,zero
802060d4:	f800283a 	ret
802060d8:	2005883a 	mov	r2,r4
802060dc:	f800283a 	ret
802060e0:	28c03fcc 	andi	r3,r5,255
802060e4:	1812923a 	slli	r9,r3,8
802060e8:	02ffbff4 	movhi	r11,65279
802060ec:	02a02074 	movhi	r10,32897
802060f0:	48d2b03a 	or	r9,r9,r3
802060f4:	4806943a 	slli	r3,r9,16
802060f8:	5affbfc4 	addi	r11,r11,-257
802060fc:	52a02004 	addi	r10,r10,-32640
80206100:	48d2b03a 	or	r9,r9,r3
80206104:	20c00017 	ldw	r3,0(r4)
80206108:	48c6f03a 	xor	r3,r9,r3
8020610c:	1acd883a 	add	r6,r3,r11
80206110:	00c6303a 	nor	r3,zero,r3
80206114:	30c6703a 	and	r3,r6,r3
80206118:	1a86703a 	and	r3,r3,r10
8020611c:	183fe01e 	bne	r3,zero,802060a0 <__reset+0xfa1e60a0>
80206120:	10bfff04 	addi	r2,r2,-4
80206124:	21000104 	addi	r4,r4,4
80206128:	40bff636 	bltu	r8,r2,80206104 <__reset+0xfa1e6104>
8020612c:	003fdb06 	br	8020609c <__reset+0xfa1e609c>
80206130:	3005883a 	mov	r2,r6
80206134:	003fd706 	br	80206094 <__reset+0xfa1e6094>

80206138 <memmove>:
80206138:	2005883a 	mov	r2,r4
8020613c:	29000b2e 	bgeu	r5,r4,8020616c <memmove+0x34>
80206140:	298f883a 	add	r7,r5,r6
80206144:	21c0092e 	bgeu	r4,r7,8020616c <memmove+0x34>
80206148:	2187883a 	add	r3,r4,r6
8020614c:	198bc83a 	sub	r5,r3,r6
80206150:	30004826 	beq	r6,zero,80206274 <memmove+0x13c>
80206154:	39ffffc4 	addi	r7,r7,-1
80206158:	39000003 	ldbu	r4,0(r7)
8020615c:	18ffffc4 	addi	r3,r3,-1
80206160:	19000005 	stb	r4,0(r3)
80206164:	28fffb1e 	bne	r5,r3,80206154 <__reset+0xfa1e6154>
80206168:	f800283a 	ret
8020616c:	00c003c4 	movi	r3,15
80206170:	1980412e 	bgeu	r3,r6,80206278 <memmove+0x140>
80206174:	2886b03a 	or	r3,r5,r2
80206178:	18c000cc 	andi	r3,r3,3
8020617c:	1800401e 	bne	r3,zero,80206280 <memmove+0x148>
80206180:	33fffc04 	addi	r15,r6,-16
80206184:	781ed13a 	srli	r15,r15,4
80206188:	28c00104 	addi	r3,r5,4
8020618c:	13400104 	addi	r13,r2,4
80206190:	781c913a 	slli	r14,r15,4
80206194:	2b000204 	addi	r12,r5,8
80206198:	12c00204 	addi	r11,r2,8
8020619c:	73800504 	addi	r14,r14,20
802061a0:	2a800304 	addi	r10,r5,12
802061a4:	12400304 	addi	r9,r2,12
802061a8:	2b9d883a 	add	r14,r5,r14
802061ac:	2811883a 	mov	r8,r5
802061b0:	100f883a 	mov	r7,r2
802061b4:	41000017 	ldw	r4,0(r8)
802061b8:	39c00404 	addi	r7,r7,16
802061bc:	18c00404 	addi	r3,r3,16
802061c0:	393ffc15 	stw	r4,-16(r7)
802061c4:	193ffc17 	ldw	r4,-16(r3)
802061c8:	6b400404 	addi	r13,r13,16
802061cc:	5ac00404 	addi	r11,r11,16
802061d0:	693ffc15 	stw	r4,-16(r13)
802061d4:	61000017 	ldw	r4,0(r12)
802061d8:	4a400404 	addi	r9,r9,16
802061dc:	42000404 	addi	r8,r8,16
802061e0:	593ffc15 	stw	r4,-16(r11)
802061e4:	51000017 	ldw	r4,0(r10)
802061e8:	63000404 	addi	r12,r12,16
802061ec:	52800404 	addi	r10,r10,16
802061f0:	493ffc15 	stw	r4,-16(r9)
802061f4:	1bbfef1e 	bne	r3,r14,802061b4 <__reset+0xfa1e61b4>
802061f8:	79000044 	addi	r4,r15,1
802061fc:	2008913a 	slli	r4,r4,4
80206200:	328003cc 	andi	r10,r6,15
80206204:	02c000c4 	movi	r11,3
80206208:	1107883a 	add	r3,r2,r4
8020620c:	290b883a 	add	r5,r5,r4
80206210:	5a801e2e 	bgeu	r11,r10,8020628c <memmove+0x154>
80206214:	1813883a 	mov	r9,r3
80206218:	2811883a 	mov	r8,r5
8020621c:	500f883a 	mov	r7,r10
80206220:	41000017 	ldw	r4,0(r8)
80206224:	4a400104 	addi	r9,r9,4
80206228:	39ffff04 	addi	r7,r7,-4
8020622c:	493fff15 	stw	r4,-4(r9)
80206230:	42000104 	addi	r8,r8,4
80206234:	59fffa36 	bltu	r11,r7,80206220 <__reset+0xfa1e6220>
80206238:	513fff04 	addi	r4,r10,-4
8020623c:	2008d0ba 	srli	r4,r4,2
80206240:	318000cc 	andi	r6,r6,3
80206244:	21000044 	addi	r4,r4,1
80206248:	2109883a 	add	r4,r4,r4
8020624c:	2109883a 	add	r4,r4,r4
80206250:	1907883a 	add	r3,r3,r4
80206254:	290b883a 	add	r5,r5,r4
80206258:	30000b26 	beq	r6,zero,80206288 <memmove+0x150>
8020625c:	198d883a 	add	r6,r3,r6
80206260:	29c00003 	ldbu	r7,0(r5)
80206264:	18c00044 	addi	r3,r3,1
80206268:	29400044 	addi	r5,r5,1
8020626c:	19ffffc5 	stb	r7,-1(r3)
80206270:	19bffb1e 	bne	r3,r6,80206260 <__reset+0xfa1e6260>
80206274:	f800283a 	ret
80206278:	1007883a 	mov	r3,r2
8020627c:	003ff606 	br	80206258 <__reset+0xfa1e6258>
80206280:	1007883a 	mov	r3,r2
80206284:	003ff506 	br	8020625c <__reset+0xfa1e625c>
80206288:	f800283a 	ret
8020628c:	500d883a 	mov	r6,r10
80206290:	003ff106 	br	80206258 <__reset+0xfa1e6258>

80206294 <memset>:
80206294:	20c000cc 	andi	r3,r4,3
80206298:	2005883a 	mov	r2,r4
8020629c:	18004426 	beq	r3,zero,802063b0 <memset+0x11c>
802062a0:	31ffffc4 	addi	r7,r6,-1
802062a4:	30004026 	beq	r6,zero,802063a8 <memset+0x114>
802062a8:	2813883a 	mov	r9,r5
802062ac:	200d883a 	mov	r6,r4
802062b0:	2007883a 	mov	r3,r4
802062b4:	00000406 	br	802062c8 <memset+0x34>
802062b8:	3a3fffc4 	addi	r8,r7,-1
802062bc:	31800044 	addi	r6,r6,1
802062c0:	38003926 	beq	r7,zero,802063a8 <memset+0x114>
802062c4:	400f883a 	mov	r7,r8
802062c8:	18c00044 	addi	r3,r3,1
802062cc:	32400005 	stb	r9,0(r6)
802062d0:	1a0000cc 	andi	r8,r3,3
802062d4:	403ff81e 	bne	r8,zero,802062b8 <__reset+0xfa1e62b8>
802062d8:	010000c4 	movi	r4,3
802062dc:	21c02d2e 	bgeu	r4,r7,80206394 <memset+0x100>
802062e0:	29003fcc 	andi	r4,r5,255
802062e4:	200c923a 	slli	r6,r4,8
802062e8:	3108b03a 	or	r4,r6,r4
802062ec:	200c943a 	slli	r6,r4,16
802062f0:	218cb03a 	or	r6,r4,r6
802062f4:	010003c4 	movi	r4,15
802062f8:	21c0182e 	bgeu	r4,r7,8020635c <memset+0xc8>
802062fc:	3b3ffc04 	addi	r12,r7,-16
80206300:	6018d13a 	srli	r12,r12,4
80206304:	1a000104 	addi	r8,r3,4
80206308:	1ac00204 	addi	r11,r3,8
8020630c:	6008913a 	slli	r4,r12,4
80206310:	1a800304 	addi	r10,r3,12
80206314:	1813883a 	mov	r9,r3
80206318:	21000504 	addi	r4,r4,20
8020631c:	1909883a 	add	r4,r3,r4
80206320:	49800015 	stw	r6,0(r9)
80206324:	41800015 	stw	r6,0(r8)
80206328:	59800015 	stw	r6,0(r11)
8020632c:	51800015 	stw	r6,0(r10)
80206330:	42000404 	addi	r8,r8,16
80206334:	4a400404 	addi	r9,r9,16
80206338:	5ac00404 	addi	r11,r11,16
8020633c:	52800404 	addi	r10,r10,16
80206340:	413ff71e 	bne	r8,r4,80206320 <__reset+0xfa1e6320>
80206344:	63000044 	addi	r12,r12,1
80206348:	6018913a 	slli	r12,r12,4
8020634c:	39c003cc 	andi	r7,r7,15
80206350:	010000c4 	movi	r4,3
80206354:	1b07883a 	add	r3,r3,r12
80206358:	21c00e2e 	bgeu	r4,r7,80206394 <memset+0x100>
8020635c:	1813883a 	mov	r9,r3
80206360:	3811883a 	mov	r8,r7
80206364:	010000c4 	movi	r4,3
80206368:	49800015 	stw	r6,0(r9)
8020636c:	423fff04 	addi	r8,r8,-4
80206370:	4a400104 	addi	r9,r9,4
80206374:	223ffc36 	bltu	r4,r8,80206368 <__reset+0xfa1e6368>
80206378:	393fff04 	addi	r4,r7,-4
8020637c:	2008d0ba 	srli	r4,r4,2
80206380:	39c000cc 	andi	r7,r7,3
80206384:	21000044 	addi	r4,r4,1
80206388:	2109883a 	add	r4,r4,r4
8020638c:	2109883a 	add	r4,r4,r4
80206390:	1907883a 	add	r3,r3,r4
80206394:	38000526 	beq	r7,zero,802063ac <memset+0x118>
80206398:	19cf883a 	add	r7,r3,r7
8020639c:	19400005 	stb	r5,0(r3)
802063a0:	18c00044 	addi	r3,r3,1
802063a4:	38fffd1e 	bne	r7,r3,8020639c <__reset+0xfa1e639c>
802063a8:	f800283a 	ret
802063ac:	f800283a 	ret
802063b0:	2007883a 	mov	r3,r4
802063b4:	300f883a 	mov	r7,r6
802063b8:	003fc706 	br	802062d8 <__reset+0xfa1e62d8>

802063bc <_Balloc>:
802063bc:	20801317 	ldw	r2,76(r4)
802063c0:	defffc04 	addi	sp,sp,-16
802063c4:	dc400115 	stw	r17,4(sp)
802063c8:	dc000015 	stw	r16,0(sp)
802063cc:	dfc00315 	stw	ra,12(sp)
802063d0:	dc800215 	stw	r18,8(sp)
802063d4:	2023883a 	mov	r17,r4
802063d8:	2821883a 	mov	r16,r5
802063dc:	10000f26 	beq	r2,zero,8020641c <_Balloc+0x60>
802063e0:	8407883a 	add	r3,r16,r16
802063e4:	18c7883a 	add	r3,r3,r3
802063e8:	10c7883a 	add	r3,r2,r3
802063ec:	18800017 	ldw	r2,0(r3)
802063f0:	10001126 	beq	r2,zero,80206438 <_Balloc+0x7c>
802063f4:	11000017 	ldw	r4,0(r2)
802063f8:	19000015 	stw	r4,0(r3)
802063fc:	10000415 	stw	zero,16(r2)
80206400:	10000315 	stw	zero,12(r2)
80206404:	dfc00317 	ldw	ra,12(sp)
80206408:	dc800217 	ldw	r18,8(sp)
8020640c:	dc400117 	ldw	r17,4(sp)
80206410:	dc000017 	ldw	r16,0(sp)
80206414:	dec00404 	addi	sp,sp,16
80206418:	f800283a 	ret
8020641c:	01800844 	movi	r6,33
80206420:	01400104 	movi	r5,4
80206424:	02095b80 	call	802095b8 <_calloc_r>
80206428:	88801315 	stw	r2,76(r17)
8020642c:	103fec1e 	bne	r2,zero,802063e0 <__reset+0xfa1e63e0>
80206430:	0005883a 	mov	r2,zero
80206434:	003ff306 	br	80206404 <__reset+0xfa1e6404>
80206438:	01400044 	movi	r5,1
8020643c:	2c24983a 	sll	r18,r5,r16
80206440:	8809883a 	mov	r4,r17
80206444:	91800144 	addi	r6,r18,5
80206448:	318d883a 	add	r6,r6,r6
8020644c:	318d883a 	add	r6,r6,r6
80206450:	02095b80 	call	802095b8 <_calloc_r>
80206454:	103ff626 	beq	r2,zero,80206430 <__reset+0xfa1e6430>
80206458:	14000115 	stw	r16,4(r2)
8020645c:	14800215 	stw	r18,8(r2)
80206460:	003fe606 	br	802063fc <__reset+0xfa1e63fc>

80206464 <_Bfree>:
80206464:	28000826 	beq	r5,zero,80206488 <_Bfree+0x24>
80206468:	28c00117 	ldw	r3,4(r5)
8020646c:	20801317 	ldw	r2,76(r4)
80206470:	18c7883a 	add	r3,r3,r3
80206474:	18c7883a 	add	r3,r3,r3
80206478:	10c5883a 	add	r2,r2,r3
8020647c:	10c00017 	ldw	r3,0(r2)
80206480:	28c00015 	stw	r3,0(r5)
80206484:	11400015 	stw	r5,0(r2)
80206488:	f800283a 	ret

8020648c <__multadd>:
8020648c:	defffa04 	addi	sp,sp,-24
80206490:	dc800315 	stw	r18,12(sp)
80206494:	dc400215 	stw	r17,8(sp)
80206498:	dc000115 	stw	r16,4(sp)
8020649c:	2823883a 	mov	r17,r5
802064a0:	2c000417 	ldw	r16,16(r5)
802064a4:	dfc00515 	stw	ra,20(sp)
802064a8:	dcc00415 	stw	r19,16(sp)
802064ac:	2025883a 	mov	r18,r4
802064b0:	29400504 	addi	r5,r5,20
802064b4:	0011883a 	mov	r8,zero
802064b8:	28c00017 	ldw	r3,0(r5)
802064bc:	29400104 	addi	r5,r5,4
802064c0:	42000044 	addi	r8,r8,1
802064c4:	18bfffcc 	andi	r2,r3,65535
802064c8:	1185383a 	mul	r2,r2,r6
802064cc:	1806d43a 	srli	r3,r3,16
802064d0:	11cf883a 	add	r7,r2,r7
802064d4:	3808d43a 	srli	r4,r7,16
802064d8:	1987383a 	mul	r3,r3,r6
802064dc:	38bfffcc 	andi	r2,r7,65535
802064e0:	1907883a 	add	r3,r3,r4
802064e4:	1808943a 	slli	r4,r3,16
802064e8:	180ed43a 	srli	r7,r3,16
802064ec:	2085883a 	add	r2,r4,r2
802064f0:	28bfff15 	stw	r2,-4(r5)
802064f4:	443ff016 	blt	r8,r16,802064b8 <__reset+0xfa1e64b8>
802064f8:	38000926 	beq	r7,zero,80206520 <__multadd+0x94>
802064fc:	88800217 	ldw	r2,8(r17)
80206500:	80800f0e 	bge	r16,r2,80206540 <__multadd+0xb4>
80206504:	80800144 	addi	r2,r16,5
80206508:	1085883a 	add	r2,r2,r2
8020650c:	1085883a 	add	r2,r2,r2
80206510:	8885883a 	add	r2,r17,r2
80206514:	11c00015 	stw	r7,0(r2)
80206518:	84000044 	addi	r16,r16,1
8020651c:	8c000415 	stw	r16,16(r17)
80206520:	8805883a 	mov	r2,r17
80206524:	dfc00517 	ldw	ra,20(sp)
80206528:	dcc00417 	ldw	r19,16(sp)
8020652c:	dc800317 	ldw	r18,12(sp)
80206530:	dc400217 	ldw	r17,8(sp)
80206534:	dc000117 	ldw	r16,4(sp)
80206538:	dec00604 	addi	sp,sp,24
8020653c:	f800283a 	ret
80206540:	89400117 	ldw	r5,4(r17)
80206544:	9009883a 	mov	r4,r18
80206548:	d9c00015 	stw	r7,0(sp)
8020654c:	29400044 	addi	r5,r5,1
80206550:	02063bc0 	call	802063bc <_Balloc>
80206554:	89800417 	ldw	r6,16(r17)
80206558:	89400304 	addi	r5,r17,12
8020655c:	11000304 	addi	r4,r2,12
80206560:	31800084 	addi	r6,r6,2
80206564:	318d883a 	add	r6,r6,r6
80206568:	318d883a 	add	r6,r6,r6
8020656c:	1027883a 	mov	r19,r2
80206570:	02005040 	call	80200504 <memcpy>
80206574:	d9c00017 	ldw	r7,0(sp)
80206578:	88000a26 	beq	r17,zero,802065a4 <__multadd+0x118>
8020657c:	88c00117 	ldw	r3,4(r17)
80206580:	90801317 	ldw	r2,76(r18)
80206584:	18c7883a 	add	r3,r3,r3
80206588:	18c7883a 	add	r3,r3,r3
8020658c:	10c5883a 	add	r2,r2,r3
80206590:	10c00017 	ldw	r3,0(r2)
80206594:	88c00015 	stw	r3,0(r17)
80206598:	14400015 	stw	r17,0(r2)
8020659c:	9823883a 	mov	r17,r19
802065a0:	003fd806 	br	80206504 <__reset+0xfa1e6504>
802065a4:	9823883a 	mov	r17,r19
802065a8:	003fd606 	br	80206504 <__reset+0xfa1e6504>

802065ac <__s2b>:
802065ac:	defff904 	addi	sp,sp,-28
802065b0:	dc400115 	stw	r17,4(sp)
802065b4:	dc000015 	stw	r16,0(sp)
802065b8:	2023883a 	mov	r17,r4
802065bc:	2821883a 	mov	r16,r5
802065c0:	39000204 	addi	r4,r7,8
802065c4:	01400244 	movi	r5,9
802065c8:	dcc00315 	stw	r19,12(sp)
802065cc:	dc800215 	stw	r18,8(sp)
802065d0:	dfc00615 	stw	ra,24(sp)
802065d4:	dd400515 	stw	r21,20(sp)
802065d8:	dd000415 	stw	r20,16(sp)
802065dc:	3825883a 	mov	r18,r7
802065e0:	3027883a 	mov	r19,r6
802065e4:	020a7900 	call	8020a790 <__divsi3>
802065e8:	00c00044 	movi	r3,1
802065ec:	000b883a 	mov	r5,zero
802065f0:	1880030e 	bge	r3,r2,80206600 <__s2b+0x54>
802065f4:	18c7883a 	add	r3,r3,r3
802065f8:	29400044 	addi	r5,r5,1
802065fc:	18bffd16 	blt	r3,r2,802065f4 <__reset+0xfa1e65f4>
80206600:	8809883a 	mov	r4,r17
80206604:	02063bc0 	call	802063bc <_Balloc>
80206608:	d8c00717 	ldw	r3,28(sp)
8020660c:	10c00515 	stw	r3,20(r2)
80206610:	00c00044 	movi	r3,1
80206614:	10c00415 	stw	r3,16(r2)
80206618:	00c00244 	movi	r3,9
8020661c:	1cc0210e 	bge	r3,r19,802066a4 <__s2b+0xf8>
80206620:	80eb883a 	add	r21,r16,r3
80206624:	a829883a 	mov	r20,r21
80206628:	84e1883a 	add	r16,r16,r19
8020662c:	a1c00007 	ldb	r7,0(r20)
80206630:	01800284 	movi	r6,10
80206634:	a5000044 	addi	r20,r20,1
80206638:	100b883a 	mov	r5,r2
8020663c:	39fff404 	addi	r7,r7,-48
80206640:	8809883a 	mov	r4,r17
80206644:	020648c0 	call	8020648c <__multadd>
80206648:	a43ff81e 	bne	r20,r16,8020662c <__reset+0xfa1e662c>
8020664c:	ace1883a 	add	r16,r21,r19
80206650:	843ffe04 	addi	r16,r16,-8
80206654:	9c800a0e 	bge	r19,r18,80206680 <__s2b+0xd4>
80206658:	94e5c83a 	sub	r18,r18,r19
8020665c:	84a5883a 	add	r18,r16,r18
80206660:	81c00007 	ldb	r7,0(r16)
80206664:	01800284 	movi	r6,10
80206668:	84000044 	addi	r16,r16,1
8020666c:	100b883a 	mov	r5,r2
80206670:	39fff404 	addi	r7,r7,-48
80206674:	8809883a 	mov	r4,r17
80206678:	020648c0 	call	8020648c <__multadd>
8020667c:	84bff81e 	bne	r16,r18,80206660 <__reset+0xfa1e6660>
80206680:	dfc00617 	ldw	ra,24(sp)
80206684:	dd400517 	ldw	r21,20(sp)
80206688:	dd000417 	ldw	r20,16(sp)
8020668c:	dcc00317 	ldw	r19,12(sp)
80206690:	dc800217 	ldw	r18,8(sp)
80206694:	dc400117 	ldw	r17,4(sp)
80206698:	dc000017 	ldw	r16,0(sp)
8020669c:	dec00704 	addi	sp,sp,28
802066a0:	f800283a 	ret
802066a4:	84000284 	addi	r16,r16,10
802066a8:	1827883a 	mov	r19,r3
802066ac:	003fe906 	br	80206654 <__reset+0xfa1e6654>

802066b0 <__hi0bits>:
802066b0:	20bfffec 	andhi	r2,r4,65535
802066b4:	1000141e 	bne	r2,zero,80206708 <__hi0bits+0x58>
802066b8:	2008943a 	slli	r4,r4,16
802066bc:	00800404 	movi	r2,16
802066c0:	20ffc02c 	andhi	r3,r4,65280
802066c4:	1800021e 	bne	r3,zero,802066d0 <__hi0bits+0x20>
802066c8:	2008923a 	slli	r4,r4,8
802066cc:	10800204 	addi	r2,r2,8
802066d0:	20fc002c 	andhi	r3,r4,61440
802066d4:	1800021e 	bne	r3,zero,802066e0 <__hi0bits+0x30>
802066d8:	2008913a 	slli	r4,r4,4
802066dc:	10800104 	addi	r2,r2,4
802066e0:	20f0002c 	andhi	r3,r4,49152
802066e4:	1800031e 	bne	r3,zero,802066f4 <__hi0bits+0x44>
802066e8:	2109883a 	add	r4,r4,r4
802066ec:	10800084 	addi	r2,r2,2
802066f0:	2109883a 	add	r4,r4,r4
802066f4:	20000316 	blt	r4,zero,80206704 <__hi0bits+0x54>
802066f8:	2110002c 	andhi	r4,r4,16384
802066fc:	2000041e 	bne	r4,zero,80206710 <__hi0bits+0x60>
80206700:	00800804 	movi	r2,32
80206704:	f800283a 	ret
80206708:	0005883a 	mov	r2,zero
8020670c:	003fec06 	br	802066c0 <__reset+0xfa1e66c0>
80206710:	10800044 	addi	r2,r2,1
80206714:	f800283a 	ret

80206718 <__lo0bits>:
80206718:	20c00017 	ldw	r3,0(r4)
8020671c:	188001cc 	andi	r2,r3,7
80206720:	10000826 	beq	r2,zero,80206744 <__lo0bits+0x2c>
80206724:	1880004c 	andi	r2,r3,1
80206728:	1000211e 	bne	r2,zero,802067b0 <__lo0bits+0x98>
8020672c:	1880008c 	andi	r2,r3,2
80206730:	1000211e 	bne	r2,zero,802067b8 <__lo0bits+0xa0>
80206734:	1806d0ba 	srli	r3,r3,2
80206738:	00800084 	movi	r2,2
8020673c:	20c00015 	stw	r3,0(r4)
80206740:	f800283a 	ret
80206744:	18bfffcc 	andi	r2,r3,65535
80206748:	10001326 	beq	r2,zero,80206798 <__lo0bits+0x80>
8020674c:	0005883a 	mov	r2,zero
80206750:	19403fcc 	andi	r5,r3,255
80206754:	2800021e 	bne	r5,zero,80206760 <__lo0bits+0x48>
80206758:	1806d23a 	srli	r3,r3,8
8020675c:	10800204 	addi	r2,r2,8
80206760:	194003cc 	andi	r5,r3,15
80206764:	2800021e 	bne	r5,zero,80206770 <__lo0bits+0x58>
80206768:	1806d13a 	srli	r3,r3,4
8020676c:	10800104 	addi	r2,r2,4
80206770:	194000cc 	andi	r5,r3,3
80206774:	2800021e 	bne	r5,zero,80206780 <__lo0bits+0x68>
80206778:	1806d0ba 	srli	r3,r3,2
8020677c:	10800084 	addi	r2,r2,2
80206780:	1940004c 	andi	r5,r3,1
80206784:	2800081e 	bne	r5,zero,802067a8 <__lo0bits+0x90>
80206788:	1806d07a 	srli	r3,r3,1
8020678c:	1800051e 	bne	r3,zero,802067a4 <__lo0bits+0x8c>
80206790:	00800804 	movi	r2,32
80206794:	f800283a 	ret
80206798:	1806d43a 	srli	r3,r3,16
8020679c:	00800404 	movi	r2,16
802067a0:	003feb06 	br	80206750 <__reset+0xfa1e6750>
802067a4:	10800044 	addi	r2,r2,1
802067a8:	20c00015 	stw	r3,0(r4)
802067ac:	f800283a 	ret
802067b0:	0005883a 	mov	r2,zero
802067b4:	f800283a 	ret
802067b8:	1806d07a 	srli	r3,r3,1
802067bc:	00800044 	movi	r2,1
802067c0:	20c00015 	stw	r3,0(r4)
802067c4:	f800283a 	ret

802067c8 <__i2b>:
802067c8:	defffd04 	addi	sp,sp,-12
802067cc:	dc000015 	stw	r16,0(sp)
802067d0:	04000044 	movi	r16,1
802067d4:	dc400115 	stw	r17,4(sp)
802067d8:	2823883a 	mov	r17,r5
802067dc:	800b883a 	mov	r5,r16
802067e0:	dfc00215 	stw	ra,8(sp)
802067e4:	02063bc0 	call	802063bc <_Balloc>
802067e8:	14400515 	stw	r17,20(r2)
802067ec:	14000415 	stw	r16,16(r2)
802067f0:	dfc00217 	ldw	ra,8(sp)
802067f4:	dc400117 	ldw	r17,4(sp)
802067f8:	dc000017 	ldw	r16,0(sp)
802067fc:	dec00304 	addi	sp,sp,12
80206800:	f800283a 	ret

80206804 <__multiply>:
80206804:	defffa04 	addi	sp,sp,-24
80206808:	dcc00315 	stw	r19,12(sp)
8020680c:	dc800215 	stw	r18,8(sp)
80206810:	34c00417 	ldw	r19,16(r6)
80206814:	2c800417 	ldw	r18,16(r5)
80206818:	dd000415 	stw	r20,16(sp)
8020681c:	dc400115 	stw	r17,4(sp)
80206820:	dfc00515 	stw	ra,20(sp)
80206824:	dc000015 	stw	r16,0(sp)
80206828:	2829883a 	mov	r20,r5
8020682c:	3023883a 	mov	r17,r6
80206830:	94c0050e 	bge	r18,r19,80206848 <__multiply+0x44>
80206834:	9007883a 	mov	r3,r18
80206838:	3029883a 	mov	r20,r6
8020683c:	9825883a 	mov	r18,r19
80206840:	2823883a 	mov	r17,r5
80206844:	1827883a 	mov	r19,r3
80206848:	a0800217 	ldw	r2,8(r20)
8020684c:	94e1883a 	add	r16,r18,r19
80206850:	a1400117 	ldw	r5,4(r20)
80206854:	1400010e 	bge	r2,r16,8020685c <__multiply+0x58>
80206858:	29400044 	addi	r5,r5,1
8020685c:	02063bc0 	call	802063bc <_Balloc>
80206860:	8415883a 	add	r10,r16,r16
80206864:	12c00504 	addi	r11,r2,20
80206868:	5295883a 	add	r10,r10,r10
8020686c:	5a95883a 	add	r10,r11,r10
80206870:	5807883a 	mov	r3,r11
80206874:	5a80032e 	bgeu	r11,r10,80206884 <__multiply+0x80>
80206878:	18000015 	stw	zero,0(r3)
8020687c:	18c00104 	addi	r3,r3,4
80206880:	1abffd36 	bltu	r3,r10,80206878 <__reset+0xfa1e6878>
80206884:	9ce7883a 	add	r19,r19,r19
80206888:	94a5883a 	add	r18,r18,r18
8020688c:	89800504 	addi	r6,r17,20
80206890:	9ce7883a 	add	r19,r19,r19
80206894:	a3400504 	addi	r13,r20,20
80206898:	94a5883a 	add	r18,r18,r18
8020689c:	34d9883a 	add	r12,r6,r19
802068a0:	6c93883a 	add	r9,r13,r18
802068a4:	3300422e 	bgeu	r6,r12,802069b0 <__multiply+0x1ac>
802068a8:	37c00017 	ldw	ra,0(r6)
802068ac:	fbffffcc 	andi	r15,ra,65535
802068b0:	78001b26 	beq	r15,zero,80206920 <__multiply+0x11c>
802068b4:	5811883a 	mov	r8,r11
802068b8:	681d883a 	mov	r14,r13
802068bc:	000f883a 	mov	r7,zero
802068c0:	71000017 	ldw	r4,0(r14)
802068c4:	40c00017 	ldw	r3,0(r8)
802068c8:	73800104 	addi	r14,r14,4
802068cc:	217fffcc 	andi	r5,r4,65535
802068d0:	2bcb383a 	mul	r5,r5,r15
802068d4:	2008d43a 	srli	r4,r4,16
802068d8:	1c7fffcc 	andi	r17,r3,65535
802068dc:	2c4b883a 	add	r5,r5,r17
802068e0:	29cb883a 	add	r5,r5,r7
802068e4:	23c9383a 	mul	r4,r4,r15
802068e8:	1806d43a 	srli	r3,r3,16
802068ec:	280ed43a 	srli	r7,r5,16
802068f0:	297fffcc 	andi	r5,r5,65535
802068f4:	20c7883a 	add	r3,r4,r3
802068f8:	19c7883a 	add	r3,r3,r7
802068fc:	1808943a 	slli	r4,r3,16
80206900:	4023883a 	mov	r17,r8
80206904:	180ed43a 	srli	r7,r3,16
80206908:	214ab03a 	or	r5,r4,r5
8020690c:	41400015 	stw	r5,0(r8)
80206910:	42000104 	addi	r8,r8,4
80206914:	727fea36 	bltu	r14,r9,802068c0 <__reset+0xfa1e68c0>
80206918:	89c00115 	stw	r7,4(r17)
8020691c:	37c00017 	ldw	ra,0(r6)
80206920:	f83ed43a 	srli	ra,ra,16
80206924:	f8001f26 	beq	ra,zero,802069a4 <__multiply+0x1a0>
80206928:	58c00017 	ldw	r3,0(r11)
8020692c:	681d883a 	mov	r14,r13
80206930:	581f883a 	mov	r15,r11
80206934:	1811883a 	mov	r8,r3
80206938:	5825883a 	mov	r18,r11
8020693c:	000f883a 	mov	r7,zero
80206940:	00000106 	br	80206948 <__multiply+0x144>
80206944:	8825883a 	mov	r18,r17
80206948:	7140000b 	ldhu	r5,0(r14)
8020694c:	4010d43a 	srli	r8,r8,16
80206950:	193fffcc 	andi	r4,r3,65535
80206954:	2fcb383a 	mul	r5,r5,ra
80206958:	7bc00104 	addi	r15,r15,4
8020695c:	73800104 	addi	r14,r14,4
80206960:	2a0b883a 	add	r5,r5,r8
80206964:	29cb883a 	add	r5,r5,r7
80206968:	2806943a 	slli	r3,r5,16
8020696c:	94400104 	addi	r17,r18,4
80206970:	280ad43a 	srli	r5,r5,16
80206974:	1908b03a 	or	r4,r3,r4
80206978:	793fff15 	stw	r4,-4(r15)
8020697c:	70ffff17 	ldw	r3,-4(r14)
80206980:	8a000017 	ldw	r8,0(r17)
80206984:	1806d43a 	srli	r3,r3,16
80206988:	413fffcc 	andi	r4,r8,65535
8020698c:	1fc7383a 	mul	r3,r3,ra
80206990:	1907883a 	add	r3,r3,r4
80206994:	1947883a 	add	r3,r3,r5
80206998:	180ed43a 	srli	r7,r3,16
8020699c:	727fe936 	bltu	r14,r9,80206944 <__reset+0xfa1e6944>
802069a0:	90c00115 	stw	r3,4(r18)
802069a4:	31800104 	addi	r6,r6,4
802069a8:	5ac00104 	addi	r11,r11,4
802069ac:	333fbe36 	bltu	r6,r12,802068a8 <__reset+0xfa1e68a8>
802069b0:	0400090e 	bge	zero,r16,802069d8 <__multiply+0x1d4>
802069b4:	50ffff17 	ldw	r3,-4(r10)
802069b8:	52bfff04 	addi	r10,r10,-4
802069bc:	18000326 	beq	r3,zero,802069cc <__multiply+0x1c8>
802069c0:	00000506 	br	802069d8 <__multiply+0x1d4>
802069c4:	50c00017 	ldw	r3,0(r10)
802069c8:	1800031e 	bne	r3,zero,802069d8 <__multiply+0x1d4>
802069cc:	843fffc4 	addi	r16,r16,-1
802069d0:	52bfff04 	addi	r10,r10,-4
802069d4:	803ffb1e 	bne	r16,zero,802069c4 <__reset+0xfa1e69c4>
802069d8:	14000415 	stw	r16,16(r2)
802069dc:	dfc00517 	ldw	ra,20(sp)
802069e0:	dd000417 	ldw	r20,16(sp)
802069e4:	dcc00317 	ldw	r19,12(sp)
802069e8:	dc800217 	ldw	r18,8(sp)
802069ec:	dc400117 	ldw	r17,4(sp)
802069f0:	dc000017 	ldw	r16,0(sp)
802069f4:	dec00604 	addi	sp,sp,24
802069f8:	f800283a 	ret

802069fc <__pow5mult>:
802069fc:	defffa04 	addi	sp,sp,-24
80206a00:	dcc00315 	stw	r19,12(sp)
80206a04:	dc000015 	stw	r16,0(sp)
80206a08:	dfc00515 	stw	ra,20(sp)
80206a0c:	dd000415 	stw	r20,16(sp)
80206a10:	dc800215 	stw	r18,8(sp)
80206a14:	dc400115 	stw	r17,4(sp)
80206a18:	308000cc 	andi	r2,r6,3
80206a1c:	3021883a 	mov	r16,r6
80206a20:	2027883a 	mov	r19,r4
80206a24:	10002f1e 	bne	r2,zero,80206ae4 <__pow5mult+0xe8>
80206a28:	2825883a 	mov	r18,r5
80206a2c:	8021d0ba 	srai	r16,r16,2
80206a30:	80001a26 	beq	r16,zero,80206a9c <__pow5mult+0xa0>
80206a34:	9c401217 	ldw	r17,72(r19)
80206a38:	8800061e 	bne	r17,zero,80206a54 <__pow5mult+0x58>
80206a3c:	00003406 	br	80206b10 <__pow5mult+0x114>
80206a40:	8021d07a 	srai	r16,r16,1
80206a44:	80001526 	beq	r16,zero,80206a9c <__pow5mult+0xa0>
80206a48:	88800017 	ldw	r2,0(r17)
80206a4c:	10001c26 	beq	r2,zero,80206ac0 <__pow5mult+0xc4>
80206a50:	1023883a 	mov	r17,r2
80206a54:	8080004c 	andi	r2,r16,1
80206a58:	103ff926 	beq	r2,zero,80206a40 <__reset+0xfa1e6a40>
80206a5c:	880d883a 	mov	r6,r17
80206a60:	900b883a 	mov	r5,r18
80206a64:	9809883a 	mov	r4,r19
80206a68:	02068040 	call	80206804 <__multiply>
80206a6c:	90001b26 	beq	r18,zero,80206adc <__pow5mult+0xe0>
80206a70:	91000117 	ldw	r4,4(r18)
80206a74:	98c01317 	ldw	r3,76(r19)
80206a78:	8021d07a 	srai	r16,r16,1
80206a7c:	2109883a 	add	r4,r4,r4
80206a80:	2109883a 	add	r4,r4,r4
80206a84:	1907883a 	add	r3,r3,r4
80206a88:	19000017 	ldw	r4,0(r3)
80206a8c:	91000015 	stw	r4,0(r18)
80206a90:	1c800015 	stw	r18,0(r3)
80206a94:	1025883a 	mov	r18,r2
80206a98:	803feb1e 	bne	r16,zero,80206a48 <__reset+0xfa1e6a48>
80206a9c:	9005883a 	mov	r2,r18
80206aa0:	dfc00517 	ldw	ra,20(sp)
80206aa4:	dd000417 	ldw	r20,16(sp)
80206aa8:	dcc00317 	ldw	r19,12(sp)
80206aac:	dc800217 	ldw	r18,8(sp)
80206ab0:	dc400117 	ldw	r17,4(sp)
80206ab4:	dc000017 	ldw	r16,0(sp)
80206ab8:	dec00604 	addi	sp,sp,24
80206abc:	f800283a 	ret
80206ac0:	880d883a 	mov	r6,r17
80206ac4:	880b883a 	mov	r5,r17
80206ac8:	9809883a 	mov	r4,r19
80206acc:	02068040 	call	80206804 <__multiply>
80206ad0:	88800015 	stw	r2,0(r17)
80206ad4:	10000015 	stw	zero,0(r2)
80206ad8:	003fdd06 	br	80206a50 <__reset+0xfa1e6a50>
80206adc:	1025883a 	mov	r18,r2
80206ae0:	003fd706 	br	80206a40 <__reset+0xfa1e6a40>
80206ae4:	10bfffc4 	addi	r2,r2,-1
80206ae8:	1085883a 	add	r2,r2,r2
80206aec:	00e00874 	movhi	r3,32801
80206af0:	18c8c404 	addi	r3,r3,8976
80206af4:	1085883a 	add	r2,r2,r2
80206af8:	1885883a 	add	r2,r3,r2
80206afc:	11800017 	ldw	r6,0(r2)
80206b00:	000f883a 	mov	r7,zero
80206b04:	020648c0 	call	8020648c <__multadd>
80206b08:	1025883a 	mov	r18,r2
80206b0c:	003fc706 	br	80206a2c <__reset+0xfa1e6a2c>
80206b10:	05000044 	movi	r20,1
80206b14:	a00b883a 	mov	r5,r20
80206b18:	9809883a 	mov	r4,r19
80206b1c:	02063bc0 	call	802063bc <_Balloc>
80206b20:	1023883a 	mov	r17,r2
80206b24:	00809c44 	movi	r2,625
80206b28:	88800515 	stw	r2,20(r17)
80206b2c:	8d000415 	stw	r20,16(r17)
80206b30:	9c401215 	stw	r17,72(r19)
80206b34:	88000015 	stw	zero,0(r17)
80206b38:	003fc606 	br	80206a54 <__reset+0xfa1e6a54>

80206b3c <__lshift>:
80206b3c:	defff904 	addi	sp,sp,-28
80206b40:	dd400515 	stw	r21,20(sp)
80206b44:	dcc00315 	stw	r19,12(sp)
80206b48:	302bd17a 	srai	r21,r6,5
80206b4c:	2cc00417 	ldw	r19,16(r5)
80206b50:	28800217 	ldw	r2,8(r5)
80206b54:	dd000415 	stw	r20,16(sp)
80206b58:	ace7883a 	add	r19,r21,r19
80206b5c:	dc800215 	stw	r18,8(sp)
80206b60:	dc400115 	stw	r17,4(sp)
80206b64:	dc000015 	stw	r16,0(sp)
80206b68:	dfc00615 	stw	ra,24(sp)
80206b6c:	9c000044 	addi	r16,r19,1
80206b70:	2823883a 	mov	r17,r5
80206b74:	3029883a 	mov	r20,r6
80206b78:	2025883a 	mov	r18,r4
80206b7c:	29400117 	ldw	r5,4(r5)
80206b80:	1400030e 	bge	r2,r16,80206b90 <__lshift+0x54>
80206b84:	1085883a 	add	r2,r2,r2
80206b88:	29400044 	addi	r5,r5,1
80206b8c:	143ffd16 	blt	r2,r16,80206b84 <__reset+0xfa1e6b84>
80206b90:	9009883a 	mov	r4,r18
80206b94:	02063bc0 	call	802063bc <_Balloc>
80206b98:	10c00504 	addi	r3,r2,20
80206b9c:	0540070e 	bge	zero,r21,80206bbc <__lshift+0x80>
80206ba0:	ad6b883a 	add	r21,r21,r21
80206ba4:	ad6b883a 	add	r21,r21,r21
80206ba8:	1809883a 	mov	r4,r3
80206bac:	1d47883a 	add	r3,r3,r21
80206bb0:	20000015 	stw	zero,0(r4)
80206bb4:	21000104 	addi	r4,r4,4
80206bb8:	193ffd1e 	bne	r3,r4,80206bb0 <__reset+0xfa1e6bb0>
80206bbc:	8a000417 	ldw	r8,16(r17)
80206bc0:	89000504 	addi	r4,r17,20
80206bc4:	a18007cc 	andi	r6,r20,31
80206bc8:	4211883a 	add	r8,r8,r8
80206bcc:	4211883a 	add	r8,r8,r8
80206bd0:	2211883a 	add	r8,r4,r8
80206bd4:	30002326 	beq	r6,zero,80206c64 <__lshift+0x128>
80206bd8:	02400804 	movi	r9,32
80206bdc:	4993c83a 	sub	r9,r9,r6
80206be0:	000b883a 	mov	r5,zero
80206be4:	21c00017 	ldw	r7,0(r4)
80206be8:	1815883a 	mov	r10,r3
80206bec:	18c00104 	addi	r3,r3,4
80206bf0:	398e983a 	sll	r7,r7,r6
80206bf4:	21000104 	addi	r4,r4,4
80206bf8:	394ab03a 	or	r5,r7,r5
80206bfc:	197fff15 	stw	r5,-4(r3)
80206c00:	217fff17 	ldw	r5,-4(r4)
80206c04:	2a4ad83a 	srl	r5,r5,r9
80206c08:	223ff636 	bltu	r4,r8,80206be4 <__reset+0xfa1e6be4>
80206c0c:	51400115 	stw	r5,4(r10)
80206c10:	28001a1e 	bne	r5,zero,80206c7c <__lshift+0x140>
80206c14:	843fffc4 	addi	r16,r16,-1
80206c18:	14000415 	stw	r16,16(r2)
80206c1c:	88000826 	beq	r17,zero,80206c40 <__lshift+0x104>
80206c20:	89000117 	ldw	r4,4(r17)
80206c24:	90c01317 	ldw	r3,76(r18)
80206c28:	2109883a 	add	r4,r4,r4
80206c2c:	2109883a 	add	r4,r4,r4
80206c30:	1907883a 	add	r3,r3,r4
80206c34:	19000017 	ldw	r4,0(r3)
80206c38:	89000015 	stw	r4,0(r17)
80206c3c:	1c400015 	stw	r17,0(r3)
80206c40:	dfc00617 	ldw	ra,24(sp)
80206c44:	dd400517 	ldw	r21,20(sp)
80206c48:	dd000417 	ldw	r20,16(sp)
80206c4c:	dcc00317 	ldw	r19,12(sp)
80206c50:	dc800217 	ldw	r18,8(sp)
80206c54:	dc400117 	ldw	r17,4(sp)
80206c58:	dc000017 	ldw	r16,0(sp)
80206c5c:	dec00704 	addi	sp,sp,28
80206c60:	f800283a 	ret
80206c64:	21400017 	ldw	r5,0(r4)
80206c68:	18c00104 	addi	r3,r3,4
80206c6c:	21000104 	addi	r4,r4,4
80206c70:	197fff15 	stw	r5,-4(r3)
80206c74:	223ffb36 	bltu	r4,r8,80206c64 <__reset+0xfa1e6c64>
80206c78:	003fe606 	br	80206c14 <__reset+0xfa1e6c14>
80206c7c:	9c000084 	addi	r16,r19,2
80206c80:	003fe406 	br	80206c14 <__reset+0xfa1e6c14>

80206c84 <__mcmp>:
80206c84:	20800417 	ldw	r2,16(r4)
80206c88:	28c00417 	ldw	r3,16(r5)
80206c8c:	10c5c83a 	sub	r2,r2,r3
80206c90:	1000111e 	bne	r2,zero,80206cd8 <__mcmp+0x54>
80206c94:	18c7883a 	add	r3,r3,r3
80206c98:	18c7883a 	add	r3,r3,r3
80206c9c:	21000504 	addi	r4,r4,20
80206ca0:	29400504 	addi	r5,r5,20
80206ca4:	20c5883a 	add	r2,r4,r3
80206ca8:	28cb883a 	add	r5,r5,r3
80206cac:	00000106 	br	80206cb4 <__mcmp+0x30>
80206cb0:	20800a2e 	bgeu	r4,r2,80206cdc <__mcmp+0x58>
80206cb4:	10bfff04 	addi	r2,r2,-4
80206cb8:	297fff04 	addi	r5,r5,-4
80206cbc:	11800017 	ldw	r6,0(r2)
80206cc0:	28c00017 	ldw	r3,0(r5)
80206cc4:	30fffa26 	beq	r6,r3,80206cb0 <__reset+0xfa1e6cb0>
80206cc8:	30c00236 	bltu	r6,r3,80206cd4 <__mcmp+0x50>
80206ccc:	00800044 	movi	r2,1
80206cd0:	f800283a 	ret
80206cd4:	00bfffc4 	movi	r2,-1
80206cd8:	f800283a 	ret
80206cdc:	0005883a 	mov	r2,zero
80206ce0:	f800283a 	ret

80206ce4 <__mdiff>:
80206ce4:	28c00417 	ldw	r3,16(r5)
80206ce8:	30800417 	ldw	r2,16(r6)
80206cec:	defffa04 	addi	sp,sp,-24
80206cf0:	dcc00315 	stw	r19,12(sp)
80206cf4:	dc800215 	stw	r18,8(sp)
80206cf8:	dfc00515 	stw	ra,20(sp)
80206cfc:	dd000415 	stw	r20,16(sp)
80206d00:	dc400115 	stw	r17,4(sp)
80206d04:	dc000015 	stw	r16,0(sp)
80206d08:	1887c83a 	sub	r3,r3,r2
80206d0c:	2825883a 	mov	r18,r5
80206d10:	3027883a 	mov	r19,r6
80206d14:	1800141e 	bne	r3,zero,80206d68 <__mdiff+0x84>
80206d18:	1085883a 	add	r2,r2,r2
80206d1c:	1085883a 	add	r2,r2,r2
80206d20:	2a000504 	addi	r8,r5,20
80206d24:	34000504 	addi	r16,r6,20
80206d28:	4087883a 	add	r3,r8,r2
80206d2c:	8085883a 	add	r2,r16,r2
80206d30:	00000106 	br	80206d38 <__mdiff+0x54>
80206d34:	40c0592e 	bgeu	r8,r3,80206e9c <__mdiff+0x1b8>
80206d38:	18ffff04 	addi	r3,r3,-4
80206d3c:	10bfff04 	addi	r2,r2,-4
80206d40:	19c00017 	ldw	r7,0(r3)
80206d44:	11400017 	ldw	r5,0(r2)
80206d48:	397ffa26 	beq	r7,r5,80206d34 <__reset+0xfa1e6d34>
80206d4c:	3940592e 	bgeu	r7,r5,80206eb4 <__mdiff+0x1d0>
80206d50:	9005883a 	mov	r2,r18
80206d54:	4023883a 	mov	r17,r8
80206d58:	9825883a 	mov	r18,r19
80206d5c:	05000044 	movi	r20,1
80206d60:	1027883a 	mov	r19,r2
80206d64:	00000406 	br	80206d78 <__mdiff+0x94>
80206d68:	18005616 	blt	r3,zero,80206ec4 <__mdiff+0x1e0>
80206d6c:	34400504 	addi	r17,r6,20
80206d70:	2c000504 	addi	r16,r5,20
80206d74:	0029883a 	mov	r20,zero
80206d78:	91400117 	ldw	r5,4(r18)
80206d7c:	02063bc0 	call	802063bc <_Balloc>
80206d80:	92400417 	ldw	r9,16(r18)
80206d84:	9b000417 	ldw	r12,16(r19)
80206d88:	12c00504 	addi	r11,r2,20
80206d8c:	4a51883a 	add	r8,r9,r9
80206d90:	6319883a 	add	r12,r12,r12
80206d94:	4211883a 	add	r8,r8,r8
80206d98:	6319883a 	add	r12,r12,r12
80206d9c:	15000315 	stw	r20,12(r2)
80206da0:	8211883a 	add	r8,r16,r8
80206da4:	8b19883a 	add	r12,r17,r12
80206da8:	0007883a 	mov	r3,zero
80206dac:	81400017 	ldw	r5,0(r16)
80206db0:	89c00017 	ldw	r7,0(r17)
80206db4:	59800104 	addi	r6,r11,4
80206db8:	293fffcc 	andi	r4,r5,65535
80206dbc:	20c7883a 	add	r3,r4,r3
80206dc0:	393fffcc 	andi	r4,r7,65535
80206dc4:	1909c83a 	sub	r4,r3,r4
80206dc8:	280ad43a 	srli	r5,r5,16
80206dcc:	380ed43a 	srli	r7,r7,16
80206dd0:	2007d43a 	srai	r3,r4,16
80206dd4:	213fffcc 	andi	r4,r4,65535
80206dd8:	29cbc83a 	sub	r5,r5,r7
80206ddc:	28c7883a 	add	r3,r5,r3
80206de0:	180a943a 	slli	r5,r3,16
80206de4:	8c400104 	addi	r17,r17,4
80206de8:	84000104 	addi	r16,r16,4
80206dec:	2908b03a 	or	r4,r5,r4
80206df0:	59000015 	stw	r4,0(r11)
80206df4:	1807d43a 	srai	r3,r3,16
80206df8:	3015883a 	mov	r10,r6
80206dfc:	3017883a 	mov	r11,r6
80206e00:	8b3fea36 	bltu	r17,r12,80206dac <__reset+0xfa1e6dac>
80206e04:	8200162e 	bgeu	r16,r8,80206e60 <__mdiff+0x17c>
80206e08:	8017883a 	mov	r11,r16
80206e0c:	59400017 	ldw	r5,0(r11)
80206e10:	31800104 	addi	r6,r6,4
80206e14:	5ac00104 	addi	r11,r11,4
80206e18:	293fffcc 	andi	r4,r5,65535
80206e1c:	20c7883a 	add	r3,r4,r3
80206e20:	280ed43a 	srli	r7,r5,16
80206e24:	180bd43a 	srai	r5,r3,16
80206e28:	193fffcc 	andi	r4,r3,65535
80206e2c:	3947883a 	add	r3,r7,r5
80206e30:	180a943a 	slli	r5,r3,16
80206e34:	1807d43a 	srai	r3,r3,16
80206e38:	2908b03a 	or	r4,r5,r4
80206e3c:	313fff15 	stw	r4,-4(r6)
80206e40:	5a3ff236 	bltu	r11,r8,80206e0c <__reset+0xfa1e6e0c>
80206e44:	0406303a 	nor	r3,zero,r16
80206e48:	1a07883a 	add	r3,r3,r8
80206e4c:	1806d0ba 	srli	r3,r3,2
80206e50:	18c00044 	addi	r3,r3,1
80206e54:	18c7883a 	add	r3,r3,r3
80206e58:	18c7883a 	add	r3,r3,r3
80206e5c:	50d5883a 	add	r10,r10,r3
80206e60:	50ffff04 	addi	r3,r10,-4
80206e64:	2000041e 	bne	r4,zero,80206e78 <__mdiff+0x194>
80206e68:	18ffff04 	addi	r3,r3,-4
80206e6c:	19000017 	ldw	r4,0(r3)
80206e70:	4a7fffc4 	addi	r9,r9,-1
80206e74:	203ffc26 	beq	r4,zero,80206e68 <__reset+0xfa1e6e68>
80206e78:	12400415 	stw	r9,16(r2)
80206e7c:	dfc00517 	ldw	ra,20(sp)
80206e80:	dd000417 	ldw	r20,16(sp)
80206e84:	dcc00317 	ldw	r19,12(sp)
80206e88:	dc800217 	ldw	r18,8(sp)
80206e8c:	dc400117 	ldw	r17,4(sp)
80206e90:	dc000017 	ldw	r16,0(sp)
80206e94:	dec00604 	addi	sp,sp,24
80206e98:	f800283a 	ret
80206e9c:	000b883a 	mov	r5,zero
80206ea0:	02063bc0 	call	802063bc <_Balloc>
80206ea4:	00c00044 	movi	r3,1
80206ea8:	10c00415 	stw	r3,16(r2)
80206eac:	10000515 	stw	zero,20(r2)
80206eb0:	003ff206 	br	80206e7c <__reset+0xfa1e6e7c>
80206eb4:	8023883a 	mov	r17,r16
80206eb8:	0029883a 	mov	r20,zero
80206ebc:	4021883a 	mov	r16,r8
80206ec0:	003fad06 	br	80206d78 <__reset+0xfa1e6d78>
80206ec4:	9005883a 	mov	r2,r18
80206ec8:	94400504 	addi	r17,r18,20
80206ecc:	9c000504 	addi	r16,r19,20
80206ed0:	9825883a 	mov	r18,r19
80206ed4:	05000044 	movi	r20,1
80206ed8:	1027883a 	mov	r19,r2
80206edc:	003fa606 	br	80206d78 <__reset+0xfa1e6d78>

80206ee0 <__ulp>:
80206ee0:	295ffc2c 	andhi	r5,r5,32752
80206ee4:	00bf3034 	movhi	r2,64704
80206ee8:	2887883a 	add	r3,r5,r2
80206eec:	00c0020e 	bge	zero,r3,80206ef8 <__ulp+0x18>
80206ef0:	0005883a 	mov	r2,zero
80206ef4:	f800283a 	ret
80206ef8:	00c7c83a 	sub	r3,zero,r3
80206efc:	1807d53a 	srai	r3,r3,20
80206f00:	008004c4 	movi	r2,19
80206f04:	10c00b0e 	bge	r2,r3,80206f34 <__ulp+0x54>
80206f08:	18bffb04 	addi	r2,r3,-20
80206f0c:	01000784 	movi	r4,30
80206f10:	0007883a 	mov	r3,zero
80206f14:	20800516 	blt	r4,r2,80206f2c <__ulp+0x4c>
80206f18:	010007c4 	movi	r4,31
80206f1c:	2089c83a 	sub	r4,r4,r2
80206f20:	00800044 	movi	r2,1
80206f24:	1104983a 	sll	r2,r2,r4
80206f28:	f800283a 	ret
80206f2c:	00800044 	movi	r2,1
80206f30:	f800283a 	ret
80206f34:	01400234 	movhi	r5,8
80206f38:	28c7d83a 	sra	r3,r5,r3
80206f3c:	0005883a 	mov	r2,zero
80206f40:	f800283a 	ret

80206f44 <__b2d>:
80206f44:	defffa04 	addi	sp,sp,-24
80206f48:	dc000015 	stw	r16,0(sp)
80206f4c:	24000417 	ldw	r16,16(r4)
80206f50:	dc400115 	stw	r17,4(sp)
80206f54:	24400504 	addi	r17,r4,20
80206f58:	8421883a 	add	r16,r16,r16
80206f5c:	8421883a 	add	r16,r16,r16
80206f60:	8c21883a 	add	r16,r17,r16
80206f64:	dc800215 	stw	r18,8(sp)
80206f68:	84bfff17 	ldw	r18,-4(r16)
80206f6c:	dd000415 	stw	r20,16(sp)
80206f70:	dcc00315 	stw	r19,12(sp)
80206f74:	9009883a 	mov	r4,r18
80206f78:	2829883a 	mov	r20,r5
80206f7c:	dfc00515 	stw	ra,20(sp)
80206f80:	02066b00 	call	802066b0 <__hi0bits>
80206f84:	00c00804 	movi	r3,32
80206f88:	1889c83a 	sub	r4,r3,r2
80206f8c:	a1000015 	stw	r4,0(r20)
80206f90:	01000284 	movi	r4,10
80206f94:	84ffff04 	addi	r19,r16,-4
80206f98:	20801216 	blt	r4,r2,80206fe4 <__b2d+0xa0>
80206f9c:	018002c4 	movi	r6,11
80206fa0:	308dc83a 	sub	r6,r6,r2
80206fa4:	9186d83a 	srl	r3,r18,r6
80206fa8:	18cffc34 	orhi	r3,r3,16368
80206fac:	8cc0212e 	bgeu	r17,r19,80207034 <__b2d+0xf0>
80206fb0:	813ffe17 	ldw	r4,-8(r16)
80206fb4:	218cd83a 	srl	r6,r4,r6
80206fb8:	10800544 	addi	r2,r2,21
80206fbc:	9084983a 	sll	r2,r18,r2
80206fc0:	1184b03a 	or	r2,r2,r6
80206fc4:	dfc00517 	ldw	ra,20(sp)
80206fc8:	dd000417 	ldw	r20,16(sp)
80206fcc:	dcc00317 	ldw	r19,12(sp)
80206fd0:	dc800217 	ldw	r18,8(sp)
80206fd4:	dc400117 	ldw	r17,4(sp)
80206fd8:	dc000017 	ldw	r16,0(sp)
80206fdc:	dec00604 	addi	sp,sp,24
80206fe0:	f800283a 	ret
80206fe4:	8cc00f2e 	bgeu	r17,r19,80207024 <__b2d+0xe0>
80206fe8:	117ffd44 	addi	r5,r2,-11
80206fec:	80bffe17 	ldw	r2,-8(r16)
80206ff0:	28000e26 	beq	r5,zero,8020702c <__b2d+0xe8>
80206ff4:	1949c83a 	sub	r4,r3,r5
80206ff8:	9164983a 	sll	r18,r18,r5
80206ffc:	1106d83a 	srl	r3,r2,r4
80207000:	81bffe04 	addi	r6,r16,-8
80207004:	948ffc34 	orhi	r18,r18,16368
80207008:	90c6b03a 	or	r3,r18,r3
8020700c:	89800e2e 	bgeu	r17,r6,80207048 <__b2d+0x104>
80207010:	81bffd17 	ldw	r6,-12(r16)
80207014:	1144983a 	sll	r2,r2,r5
80207018:	310ad83a 	srl	r5,r6,r4
8020701c:	2884b03a 	or	r2,r5,r2
80207020:	003fe806 	br	80206fc4 <__reset+0xfa1e6fc4>
80207024:	10bffd44 	addi	r2,r2,-11
80207028:	1000041e 	bne	r2,zero,8020703c <__b2d+0xf8>
8020702c:	90cffc34 	orhi	r3,r18,16368
80207030:	003fe406 	br	80206fc4 <__reset+0xfa1e6fc4>
80207034:	000d883a 	mov	r6,zero
80207038:	003fdf06 	br	80206fb8 <__reset+0xfa1e6fb8>
8020703c:	90a4983a 	sll	r18,r18,r2
80207040:	0005883a 	mov	r2,zero
80207044:	003ff906 	br	8020702c <__reset+0xfa1e702c>
80207048:	1144983a 	sll	r2,r2,r5
8020704c:	003fdd06 	br	80206fc4 <__reset+0xfa1e6fc4>

80207050 <__d2b>:
80207050:	defff804 	addi	sp,sp,-32
80207054:	dc000215 	stw	r16,8(sp)
80207058:	3021883a 	mov	r16,r6
8020705c:	dc400315 	stw	r17,12(sp)
80207060:	8022907a 	slli	r17,r16,1
80207064:	dd000615 	stw	r20,24(sp)
80207068:	2829883a 	mov	r20,r5
8020706c:	01400044 	movi	r5,1
80207070:	dcc00515 	stw	r19,20(sp)
80207074:	dc800415 	stw	r18,16(sp)
80207078:	dfc00715 	stw	ra,28(sp)
8020707c:	3825883a 	mov	r18,r7
80207080:	8822d57a 	srli	r17,r17,21
80207084:	02063bc0 	call	802063bc <_Balloc>
80207088:	1027883a 	mov	r19,r2
8020708c:	00800434 	movhi	r2,16
80207090:	10bfffc4 	addi	r2,r2,-1
80207094:	808c703a 	and	r6,r16,r2
80207098:	88000126 	beq	r17,zero,802070a0 <__d2b+0x50>
8020709c:	31800434 	orhi	r6,r6,16
802070a0:	d9800015 	stw	r6,0(sp)
802070a4:	a0002426 	beq	r20,zero,80207138 <__d2b+0xe8>
802070a8:	d9000104 	addi	r4,sp,4
802070ac:	dd000115 	stw	r20,4(sp)
802070b0:	02067180 	call	80206718 <__lo0bits>
802070b4:	d8c00017 	ldw	r3,0(sp)
802070b8:	10002f1e 	bne	r2,zero,80207178 <__d2b+0x128>
802070bc:	d9000117 	ldw	r4,4(sp)
802070c0:	99000515 	stw	r4,20(r19)
802070c4:	1821003a 	cmpeq	r16,r3,zero
802070c8:	01000084 	movi	r4,2
802070cc:	2421c83a 	sub	r16,r4,r16
802070d0:	98c00615 	stw	r3,24(r19)
802070d4:	9c000415 	stw	r16,16(r19)
802070d8:	88001f1e 	bne	r17,zero,80207158 <__d2b+0x108>
802070dc:	10bef384 	addi	r2,r2,-1074
802070e0:	90800015 	stw	r2,0(r18)
802070e4:	00900034 	movhi	r2,16384
802070e8:	10bfffc4 	addi	r2,r2,-1
802070ec:	8085883a 	add	r2,r16,r2
802070f0:	1085883a 	add	r2,r2,r2
802070f4:	1085883a 	add	r2,r2,r2
802070f8:	9885883a 	add	r2,r19,r2
802070fc:	11000517 	ldw	r4,20(r2)
80207100:	8020917a 	slli	r16,r16,5
80207104:	02066b00 	call	802066b0 <__hi0bits>
80207108:	d8c00817 	ldw	r3,32(sp)
8020710c:	8085c83a 	sub	r2,r16,r2
80207110:	18800015 	stw	r2,0(r3)
80207114:	9805883a 	mov	r2,r19
80207118:	dfc00717 	ldw	ra,28(sp)
8020711c:	dd000617 	ldw	r20,24(sp)
80207120:	dcc00517 	ldw	r19,20(sp)
80207124:	dc800417 	ldw	r18,16(sp)
80207128:	dc400317 	ldw	r17,12(sp)
8020712c:	dc000217 	ldw	r16,8(sp)
80207130:	dec00804 	addi	sp,sp,32
80207134:	f800283a 	ret
80207138:	d809883a 	mov	r4,sp
8020713c:	02067180 	call	80206718 <__lo0bits>
80207140:	d8c00017 	ldw	r3,0(sp)
80207144:	04000044 	movi	r16,1
80207148:	9c000415 	stw	r16,16(r19)
8020714c:	98c00515 	stw	r3,20(r19)
80207150:	10800804 	addi	r2,r2,32
80207154:	883fe126 	beq	r17,zero,802070dc <__reset+0xfa1e70dc>
80207158:	00c00d44 	movi	r3,53
8020715c:	8c7ef344 	addi	r17,r17,-1075
80207160:	88a3883a 	add	r17,r17,r2
80207164:	1885c83a 	sub	r2,r3,r2
80207168:	d8c00817 	ldw	r3,32(sp)
8020716c:	94400015 	stw	r17,0(r18)
80207170:	18800015 	stw	r2,0(r3)
80207174:	003fe706 	br	80207114 <__reset+0xfa1e7114>
80207178:	01000804 	movi	r4,32
8020717c:	2089c83a 	sub	r4,r4,r2
80207180:	1908983a 	sll	r4,r3,r4
80207184:	d9400117 	ldw	r5,4(sp)
80207188:	1886d83a 	srl	r3,r3,r2
8020718c:	2148b03a 	or	r4,r4,r5
80207190:	99000515 	stw	r4,20(r19)
80207194:	d8c00015 	stw	r3,0(sp)
80207198:	003fca06 	br	802070c4 <__reset+0xfa1e70c4>

8020719c <__ratio>:
8020719c:	defff904 	addi	sp,sp,-28
802071a0:	dc400315 	stw	r17,12(sp)
802071a4:	2823883a 	mov	r17,r5
802071a8:	d9400104 	addi	r5,sp,4
802071ac:	dfc00615 	stw	ra,24(sp)
802071b0:	dcc00515 	stw	r19,20(sp)
802071b4:	dc800415 	stw	r18,16(sp)
802071b8:	2027883a 	mov	r19,r4
802071bc:	dc000215 	stw	r16,8(sp)
802071c0:	0206f440 	call	80206f44 <__b2d>
802071c4:	d80b883a 	mov	r5,sp
802071c8:	8809883a 	mov	r4,r17
802071cc:	1025883a 	mov	r18,r2
802071d0:	1821883a 	mov	r16,r3
802071d4:	0206f440 	call	80206f44 <__b2d>
802071d8:	8a000417 	ldw	r8,16(r17)
802071dc:	99000417 	ldw	r4,16(r19)
802071e0:	d9400117 	ldw	r5,4(sp)
802071e4:	2209c83a 	sub	r4,r4,r8
802071e8:	2010917a 	slli	r8,r4,5
802071ec:	d9000017 	ldw	r4,0(sp)
802071f0:	2909c83a 	sub	r4,r5,r4
802071f4:	4109883a 	add	r4,r8,r4
802071f8:	01000e0e 	bge	zero,r4,80207234 <__ratio+0x98>
802071fc:	2008953a 	slli	r4,r4,20
80207200:	2421883a 	add	r16,r4,r16
80207204:	100d883a 	mov	r6,r2
80207208:	180f883a 	mov	r7,r3
8020720c:	9009883a 	mov	r4,r18
80207210:	800b883a 	mov	r5,r16
80207214:	020b1f00 	call	8020b1f0 <__divdf3>
80207218:	dfc00617 	ldw	ra,24(sp)
8020721c:	dcc00517 	ldw	r19,20(sp)
80207220:	dc800417 	ldw	r18,16(sp)
80207224:	dc400317 	ldw	r17,12(sp)
80207228:	dc000217 	ldw	r16,8(sp)
8020722c:	dec00704 	addi	sp,sp,28
80207230:	f800283a 	ret
80207234:	2008953a 	slli	r4,r4,20
80207238:	1907c83a 	sub	r3,r3,r4
8020723c:	003ff106 	br	80207204 <__reset+0xfa1e7204>

80207240 <_mprec_log10>:
80207240:	defffe04 	addi	sp,sp,-8
80207244:	dc000015 	stw	r16,0(sp)
80207248:	dfc00115 	stw	ra,4(sp)
8020724c:	008005c4 	movi	r2,23
80207250:	2021883a 	mov	r16,r4
80207254:	11000d0e 	bge	r2,r4,8020728c <_mprec_log10+0x4c>
80207258:	0005883a 	mov	r2,zero
8020725c:	00cffc34 	movhi	r3,16368
80207260:	843fffc4 	addi	r16,r16,-1
80207264:	000d883a 	mov	r6,zero
80207268:	01d00934 	movhi	r7,16420
8020726c:	1009883a 	mov	r4,r2
80207270:	180b883a 	mov	r5,r3
80207274:	020bd300 	call	8020bd30 <__muldf3>
80207278:	803ff91e 	bne	r16,zero,80207260 <__reset+0xfa1e7260>
8020727c:	dfc00117 	ldw	ra,4(sp)
80207280:	dc000017 	ldw	r16,0(sp)
80207284:	dec00204 	addi	sp,sp,8
80207288:	f800283a 	ret
8020728c:	202090fa 	slli	r16,r4,3
80207290:	00a00874 	movhi	r2,32801
80207294:	1088db04 	addi	r2,r2,9068
80207298:	1421883a 	add	r16,r2,r16
8020729c:	80800017 	ldw	r2,0(r16)
802072a0:	80c00117 	ldw	r3,4(r16)
802072a4:	dfc00117 	ldw	ra,4(sp)
802072a8:	dc000017 	ldw	r16,0(sp)
802072ac:	dec00204 	addi	sp,sp,8
802072b0:	f800283a 	ret

802072b4 <__copybits>:
802072b4:	297fffc4 	addi	r5,r5,-1
802072b8:	280fd17a 	srai	r7,r5,5
802072bc:	30c00417 	ldw	r3,16(r6)
802072c0:	30800504 	addi	r2,r6,20
802072c4:	39c00044 	addi	r7,r7,1
802072c8:	18c7883a 	add	r3,r3,r3
802072cc:	39cf883a 	add	r7,r7,r7
802072d0:	18c7883a 	add	r3,r3,r3
802072d4:	39cf883a 	add	r7,r7,r7
802072d8:	10c7883a 	add	r3,r2,r3
802072dc:	21cf883a 	add	r7,r4,r7
802072e0:	10c00d2e 	bgeu	r2,r3,80207318 <__copybits+0x64>
802072e4:	200b883a 	mov	r5,r4
802072e8:	12000017 	ldw	r8,0(r2)
802072ec:	29400104 	addi	r5,r5,4
802072f0:	10800104 	addi	r2,r2,4
802072f4:	2a3fff15 	stw	r8,-4(r5)
802072f8:	10fffb36 	bltu	r2,r3,802072e8 <__reset+0xfa1e72e8>
802072fc:	1985c83a 	sub	r2,r3,r6
80207300:	10bffac4 	addi	r2,r2,-21
80207304:	1004d0ba 	srli	r2,r2,2
80207308:	10800044 	addi	r2,r2,1
8020730c:	1085883a 	add	r2,r2,r2
80207310:	1085883a 	add	r2,r2,r2
80207314:	2089883a 	add	r4,r4,r2
80207318:	21c0032e 	bgeu	r4,r7,80207328 <__copybits+0x74>
8020731c:	20000015 	stw	zero,0(r4)
80207320:	21000104 	addi	r4,r4,4
80207324:	21fffd36 	bltu	r4,r7,8020731c <__reset+0xfa1e731c>
80207328:	f800283a 	ret

8020732c <__any_on>:
8020732c:	20c00417 	ldw	r3,16(r4)
80207330:	2805d17a 	srai	r2,r5,5
80207334:	21000504 	addi	r4,r4,20
80207338:	18800d0e 	bge	r3,r2,80207370 <__any_on+0x44>
8020733c:	18c7883a 	add	r3,r3,r3
80207340:	18c7883a 	add	r3,r3,r3
80207344:	20c7883a 	add	r3,r4,r3
80207348:	20c0192e 	bgeu	r4,r3,802073b0 <__any_on+0x84>
8020734c:	18bfff17 	ldw	r2,-4(r3)
80207350:	18ffff04 	addi	r3,r3,-4
80207354:	1000041e 	bne	r2,zero,80207368 <__any_on+0x3c>
80207358:	20c0142e 	bgeu	r4,r3,802073ac <__any_on+0x80>
8020735c:	18ffff04 	addi	r3,r3,-4
80207360:	19400017 	ldw	r5,0(r3)
80207364:	283ffc26 	beq	r5,zero,80207358 <__reset+0xfa1e7358>
80207368:	00800044 	movi	r2,1
8020736c:	f800283a 	ret
80207370:	10c00a0e 	bge	r2,r3,8020739c <__any_on+0x70>
80207374:	1085883a 	add	r2,r2,r2
80207378:	1085883a 	add	r2,r2,r2
8020737c:	294007cc 	andi	r5,r5,31
80207380:	2087883a 	add	r3,r4,r2
80207384:	283ff026 	beq	r5,zero,80207348 <__reset+0xfa1e7348>
80207388:	19800017 	ldw	r6,0(r3)
8020738c:	3144d83a 	srl	r2,r6,r5
80207390:	114a983a 	sll	r5,r2,r5
80207394:	317ff41e 	bne	r6,r5,80207368 <__reset+0xfa1e7368>
80207398:	003feb06 	br	80207348 <__reset+0xfa1e7348>
8020739c:	1085883a 	add	r2,r2,r2
802073a0:	1085883a 	add	r2,r2,r2
802073a4:	2087883a 	add	r3,r4,r2
802073a8:	003fe706 	br	80207348 <__reset+0xfa1e7348>
802073ac:	f800283a 	ret
802073b0:	0005883a 	mov	r2,zero
802073b4:	f800283a 	ret

802073b8 <_putc_r>:
802073b8:	defffc04 	addi	sp,sp,-16
802073bc:	dc000215 	stw	r16,8(sp)
802073c0:	dfc00315 	stw	ra,12(sp)
802073c4:	2021883a 	mov	r16,r4
802073c8:	20000226 	beq	r4,zero,802073d4 <_putc_r+0x1c>
802073cc:	20800e17 	ldw	r2,56(r4)
802073d0:	10001b26 	beq	r2,zero,80207440 <_putc_r+0x88>
802073d4:	30800217 	ldw	r2,8(r6)
802073d8:	10bfffc4 	addi	r2,r2,-1
802073dc:	30800215 	stw	r2,8(r6)
802073e0:	10000a16 	blt	r2,zero,8020740c <_putc_r+0x54>
802073e4:	30800017 	ldw	r2,0(r6)
802073e8:	11400005 	stb	r5,0(r2)
802073ec:	30800017 	ldw	r2,0(r6)
802073f0:	10c00044 	addi	r3,r2,1
802073f4:	30c00015 	stw	r3,0(r6)
802073f8:	10800003 	ldbu	r2,0(r2)
802073fc:	dfc00317 	ldw	ra,12(sp)
80207400:	dc000217 	ldw	r16,8(sp)
80207404:	dec00404 	addi	sp,sp,16
80207408:	f800283a 	ret
8020740c:	30c00617 	ldw	r3,24(r6)
80207410:	10c00616 	blt	r2,r3,8020742c <_putc_r+0x74>
80207414:	30800017 	ldw	r2,0(r6)
80207418:	00c00284 	movi	r3,10
8020741c:	11400005 	stb	r5,0(r2)
80207420:	30800017 	ldw	r2,0(r6)
80207424:	11400003 	ldbu	r5,0(r2)
80207428:	28fff11e 	bne	r5,r3,802073f0 <__reset+0xfa1e73f0>
8020742c:	8009883a 	mov	r4,r16
80207430:	dfc00317 	ldw	ra,12(sp)
80207434:	dc000217 	ldw	r16,8(sp)
80207438:	dec00404 	addi	sp,sp,16
8020743c:	02093ac1 	jmpi	802093ac <__swbuf_r>
80207440:	d9400015 	stw	r5,0(sp)
80207444:	d9800115 	stw	r6,4(sp)
80207448:	0204ae80 	call	80204ae8 <__sinit>
8020744c:	d9800117 	ldw	r6,4(sp)
80207450:	d9400017 	ldw	r5,0(sp)
80207454:	003fdf06 	br	802073d4 <__reset+0xfa1e73d4>

80207458 <putc>:
80207458:	00a00874 	movhi	r2,32801
8020745c:	defffc04 	addi	sp,sp,-16
80207460:	10911c04 	addi	r2,r2,17520
80207464:	dc000115 	stw	r16,4(sp)
80207468:	14000017 	ldw	r16,0(r2)
8020746c:	dc400215 	stw	r17,8(sp)
80207470:	dfc00315 	stw	ra,12(sp)
80207474:	2023883a 	mov	r17,r4
80207478:	80000226 	beq	r16,zero,80207484 <putc+0x2c>
8020747c:	80800e17 	ldw	r2,56(r16)
80207480:	10001a26 	beq	r2,zero,802074ec <putc+0x94>
80207484:	28800217 	ldw	r2,8(r5)
80207488:	10bfffc4 	addi	r2,r2,-1
8020748c:	28800215 	stw	r2,8(r5)
80207490:	10000b16 	blt	r2,zero,802074c0 <putc+0x68>
80207494:	28800017 	ldw	r2,0(r5)
80207498:	14400005 	stb	r17,0(r2)
8020749c:	28800017 	ldw	r2,0(r5)
802074a0:	10c00044 	addi	r3,r2,1
802074a4:	28c00015 	stw	r3,0(r5)
802074a8:	10800003 	ldbu	r2,0(r2)
802074ac:	dfc00317 	ldw	ra,12(sp)
802074b0:	dc400217 	ldw	r17,8(sp)
802074b4:	dc000117 	ldw	r16,4(sp)
802074b8:	dec00404 	addi	sp,sp,16
802074bc:	f800283a 	ret
802074c0:	28c00617 	ldw	r3,24(r5)
802074c4:	10c00e16 	blt	r2,r3,80207500 <putc+0xa8>
802074c8:	28800017 	ldw	r2,0(r5)
802074cc:	01000284 	movi	r4,10
802074d0:	14400005 	stb	r17,0(r2)
802074d4:	28800017 	ldw	r2,0(r5)
802074d8:	10c00003 	ldbu	r3,0(r2)
802074dc:	193ff01e 	bne	r3,r4,802074a0 <__reset+0xfa1e74a0>
802074e0:	280d883a 	mov	r6,r5
802074e4:	180b883a 	mov	r5,r3
802074e8:	00000706 	br	80207508 <putc+0xb0>
802074ec:	8009883a 	mov	r4,r16
802074f0:	d9400015 	stw	r5,0(sp)
802074f4:	0204ae80 	call	80204ae8 <__sinit>
802074f8:	d9400017 	ldw	r5,0(sp)
802074fc:	003fe106 	br	80207484 <__reset+0xfa1e7484>
80207500:	280d883a 	mov	r6,r5
80207504:	880b883a 	mov	r5,r17
80207508:	8009883a 	mov	r4,r16
8020750c:	dfc00317 	ldw	ra,12(sp)
80207510:	dc400217 	ldw	r17,8(sp)
80207514:	dc000117 	ldw	r16,4(sp)
80207518:	dec00404 	addi	sp,sp,16
8020751c:	02093ac1 	jmpi	802093ac <__swbuf_r>

80207520 <_realloc_r>:
80207520:	defff604 	addi	sp,sp,-40
80207524:	dc800215 	stw	r18,8(sp)
80207528:	dfc00915 	stw	ra,36(sp)
8020752c:	df000815 	stw	fp,32(sp)
80207530:	ddc00715 	stw	r23,28(sp)
80207534:	dd800615 	stw	r22,24(sp)
80207538:	dd400515 	stw	r21,20(sp)
8020753c:	dd000415 	stw	r20,16(sp)
80207540:	dcc00315 	stw	r19,12(sp)
80207544:	dc400115 	stw	r17,4(sp)
80207548:	dc000015 	stw	r16,0(sp)
8020754c:	3025883a 	mov	r18,r6
80207550:	2800b726 	beq	r5,zero,80207830 <_realloc_r+0x310>
80207554:	282b883a 	mov	r21,r5
80207558:	2029883a 	mov	r20,r4
8020755c:	020d43c0 	call	8020d43c <__malloc_lock>
80207560:	a8bfff17 	ldw	r2,-4(r21)
80207564:	043fff04 	movi	r16,-4
80207568:	90c002c4 	addi	r3,r18,11
8020756c:	01000584 	movi	r4,22
80207570:	acfffe04 	addi	r19,r21,-8
80207574:	1420703a 	and	r16,r2,r16
80207578:	20c0332e 	bgeu	r4,r3,80207648 <_realloc_r+0x128>
8020757c:	047ffe04 	movi	r17,-8
80207580:	1c62703a 	and	r17,r3,r17
80207584:	8807883a 	mov	r3,r17
80207588:	88005816 	blt	r17,zero,802076ec <_realloc_r+0x1cc>
8020758c:	8c805736 	bltu	r17,r18,802076ec <_realloc_r+0x1cc>
80207590:	80c0300e 	bge	r16,r3,80207654 <_realloc_r+0x134>
80207594:	07200874 	movhi	fp,32801
80207598:	e70b2704 	addi	fp,fp,11420
8020759c:	e1c00217 	ldw	r7,8(fp)
802075a0:	9c09883a 	add	r4,r19,r16
802075a4:	22000117 	ldw	r8,4(r4)
802075a8:	21c06326 	beq	r4,r7,80207738 <_realloc_r+0x218>
802075ac:	017fff84 	movi	r5,-2
802075b0:	414a703a 	and	r5,r8,r5
802075b4:	214b883a 	add	r5,r4,r5
802075b8:	29800117 	ldw	r6,4(r5)
802075bc:	3180004c 	andi	r6,r6,1
802075c0:	30003f26 	beq	r6,zero,802076c0 <_realloc_r+0x1a0>
802075c4:	1080004c 	andi	r2,r2,1
802075c8:	10008326 	beq	r2,zero,802077d8 <_realloc_r+0x2b8>
802075cc:	900b883a 	mov	r5,r18
802075d0:	a009883a 	mov	r4,r20
802075d4:	02058480 	call	80205848 <_malloc_r>
802075d8:	1025883a 	mov	r18,r2
802075dc:	10011e26 	beq	r2,zero,80207a58 <_realloc_r+0x538>
802075e0:	a93fff17 	ldw	r4,-4(r21)
802075e4:	10fffe04 	addi	r3,r2,-8
802075e8:	00bfff84 	movi	r2,-2
802075ec:	2084703a 	and	r2,r4,r2
802075f0:	9885883a 	add	r2,r19,r2
802075f4:	1880ee26 	beq	r3,r2,802079b0 <_realloc_r+0x490>
802075f8:	81bfff04 	addi	r6,r16,-4
802075fc:	00800904 	movi	r2,36
80207600:	1180b836 	bltu	r2,r6,802078e4 <_realloc_r+0x3c4>
80207604:	00c004c4 	movi	r3,19
80207608:	19809636 	bltu	r3,r6,80207864 <_realloc_r+0x344>
8020760c:	9005883a 	mov	r2,r18
80207610:	a807883a 	mov	r3,r21
80207614:	19000017 	ldw	r4,0(r3)
80207618:	11000015 	stw	r4,0(r2)
8020761c:	19000117 	ldw	r4,4(r3)
80207620:	11000115 	stw	r4,4(r2)
80207624:	18c00217 	ldw	r3,8(r3)
80207628:	10c00215 	stw	r3,8(r2)
8020762c:	a80b883a 	mov	r5,r21
80207630:	a009883a 	mov	r4,r20
80207634:	0204c5c0 	call	80204c5c <_free_r>
80207638:	a009883a 	mov	r4,r20
8020763c:	020d4600 	call	8020d460 <__malloc_unlock>
80207640:	9005883a 	mov	r2,r18
80207644:	00001206 	br	80207690 <_realloc_r+0x170>
80207648:	00c00404 	movi	r3,16
8020764c:	1823883a 	mov	r17,r3
80207650:	003fce06 	br	8020758c <__reset+0xfa1e758c>
80207654:	a825883a 	mov	r18,r21
80207658:	8445c83a 	sub	r2,r16,r17
8020765c:	00c003c4 	movi	r3,15
80207660:	18802636 	bltu	r3,r2,802076fc <_realloc_r+0x1dc>
80207664:	99800117 	ldw	r6,4(r19)
80207668:	9c07883a 	add	r3,r19,r16
8020766c:	3180004c 	andi	r6,r6,1
80207670:	3420b03a 	or	r16,r6,r16
80207674:	9c000115 	stw	r16,4(r19)
80207678:	18800117 	ldw	r2,4(r3)
8020767c:	10800054 	ori	r2,r2,1
80207680:	18800115 	stw	r2,4(r3)
80207684:	a009883a 	mov	r4,r20
80207688:	020d4600 	call	8020d460 <__malloc_unlock>
8020768c:	9005883a 	mov	r2,r18
80207690:	dfc00917 	ldw	ra,36(sp)
80207694:	df000817 	ldw	fp,32(sp)
80207698:	ddc00717 	ldw	r23,28(sp)
8020769c:	dd800617 	ldw	r22,24(sp)
802076a0:	dd400517 	ldw	r21,20(sp)
802076a4:	dd000417 	ldw	r20,16(sp)
802076a8:	dcc00317 	ldw	r19,12(sp)
802076ac:	dc800217 	ldw	r18,8(sp)
802076b0:	dc400117 	ldw	r17,4(sp)
802076b4:	dc000017 	ldw	r16,0(sp)
802076b8:	dec00a04 	addi	sp,sp,40
802076bc:	f800283a 	ret
802076c0:	017fff04 	movi	r5,-4
802076c4:	414a703a 	and	r5,r8,r5
802076c8:	814d883a 	add	r6,r16,r5
802076cc:	30c01f16 	blt	r6,r3,8020774c <_realloc_r+0x22c>
802076d0:	20800317 	ldw	r2,12(r4)
802076d4:	20c00217 	ldw	r3,8(r4)
802076d8:	a825883a 	mov	r18,r21
802076dc:	3021883a 	mov	r16,r6
802076e0:	18800315 	stw	r2,12(r3)
802076e4:	10c00215 	stw	r3,8(r2)
802076e8:	003fdb06 	br	80207658 <__reset+0xfa1e7658>
802076ec:	00800304 	movi	r2,12
802076f0:	a0800015 	stw	r2,0(r20)
802076f4:	0005883a 	mov	r2,zero
802076f8:	003fe506 	br	80207690 <__reset+0xfa1e7690>
802076fc:	98c00117 	ldw	r3,4(r19)
80207700:	9c4b883a 	add	r5,r19,r17
80207704:	11000054 	ori	r4,r2,1
80207708:	18c0004c 	andi	r3,r3,1
8020770c:	1c62b03a 	or	r17,r3,r17
80207710:	9c400115 	stw	r17,4(r19)
80207714:	29000115 	stw	r4,4(r5)
80207718:	2885883a 	add	r2,r5,r2
8020771c:	10c00117 	ldw	r3,4(r2)
80207720:	29400204 	addi	r5,r5,8
80207724:	a009883a 	mov	r4,r20
80207728:	18c00054 	ori	r3,r3,1
8020772c:	10c00115 	stw	r3,4(r2)
80207730:	0204c5c0 	call	80204c5c <_free_r>
80207734:	003fd306 	br	80207684 <__reset+0xfa1e7684>
80207738:	017fff04 	movi	r5,-4
8020773c:	414a703a 	and	r5,r8,r5
80207740:	89800404 	addi	r6,r17,16
80207744:	8151883a 	add	r8,r16,r5
80207748:	4180590e 	bge	r8,r6,802078b0 <_realloc_r+0x390>
8020774c:	1080004c 	andi	r2,r2,1
80207750:	103f9e1e 	bne	r2,zero,802075cc <__reset+0xfa1e75cc>
80207754:	adbffe17 	ldw	r22,-8(r21)
80207758:	00bfff04 	movi	r2,-4
8020775c:	9dadc83a 	sub	r22,r19,r22
80207760:	b1800117 	ldw	r6,4(r22)
80207764:	3084703a 	and	r2,r6,r2
80207768:	20002026 	beq	r4,zero,802077ec <_realloc_r+0x2cc>
8020776c:	80af883a 	add	r23,r16,r2
80207770:	b96f883a 	add	r23,r23,r5
80207774:	21c05f26 	beq	r4,r7,802078f4 <_realloc_r+0x3d4>
80207778:	b8c01c16 	blt	r23,r3,802077ec <_realloc_r+0x2cc>
8020777c:	20800317 	ldw	r2,12(r4)
80207780:	20c00217 	ldw	r3,8(r4)
80207784:	81bfff04 	addi	r6,r16,-4
80207788:	01000904 	movi	r4,36
8020778c:	18800315 	stw	r2,12(r3)
80207790:	10c00215 	stw	r3,8(r2)
80207794:	b0c00217 	ldw	r3,8(r22)
80207798:	b0800317 	ldw	r2,12(r22)
8020779c:	b4800204 	addi	r18,r22,8
802077a0:	18800315 	stw	r2,12(r3)
802077a4:	10c00215 	stw	r3,8(r2)
802077a8:	21801b36 	bltu	r4,r6,80207818 <_realloc_r+0x2f8>
802077ac:	008004c4 	movi	r2,19
802077b0:	1180352e 	bgeu	r2,r6,80207888 <_realloc_r+0x368>
802077b4:	a8800017 	ldw	r2,0(r21)
802077b8:	b0800215 	stw	r2,8(r22)
802077bc:	a8800117 	ldw	r2,4(r21)
802077c0:	b0800315 	stw	r2,12(r22)
802077c4:	008006c4 	movi	r2,27
802077c8:	11807f36 	bltu	r2,r6,802079c8 <_realloc_r+0x4a8>
802077cc:	b0800404 	addi	r2,r22,16
802077d0:	ad400204 	addi	r21,r21,8
802077d4:	00002d06 	br	8020788c <_realloc_r+0x36c>
802077d8:	adbffe17 	ldw	r22,-8(r21)
802077dc:	00bfff04 	movi	r2,-4
802077e0:	9dadc83a 	sub	r22,r19,r22
802077e4:	b1000117 	ldw	r4,4(r22)
802077e8:	2084703a 	and	r2,r4,r2
802077ec:	b03f7726 	beq	r22,zero,802075cc <__reset+0xfa1e75cc>
802077f0:	80af883a 	add	r23,r16,r2
802077f4:	b8ff7516 	blt	r23,r3,802075cc <__reset+0xfa1e75cc>
802077f8:	b0800317 	ldw	r2,12(r22)
802077fc:	b0c00217 	ldw	r3,8(r22)
80207800:	81bfff04 	addi	r6,r16,-4
80207804:	01000904 	movi	r4,36
80207808:	18800315 	stw	r2,12(r3)
8020780c:	10c00215 	stw	r3,8(r2)
80207810:	b4800204 	addi	r18,r22,8
80207814:	21bfe52e 	bgeu	r4,r6,802077ac <__reset+0xfa1e77ac>
80207818:	a80b883a 	mov	r5,r21
8020781c:	9009883a 	mov	r4,r18
80207820:	02061380 	call	80206138 <memmove>
80207824:	b821883a 	mov	r16,r23
80207828:	b027883a 	mov	r19,r22
8020782c:	003f8a06 	br	80207658 <__reset+0xfa1e7658>
80207830:	300b883a 	mov	r5,r6
80207834:	dfc00917 	ldw	ra,36(sp)
80207838:	df000817 	ldw	fp,32(sp)
8020783c:	ddc00717 	ldw	r23,28(sp)
80207840:	dd800617 	ldw	r22,24(sp)
80207844:	dd400517 	ldw	r21,20(sp)
80207848:	dd000417 	ldw	r20,16(sp)
8020784c:	dcc00317 	ldw	r19,12(sp)
80207850:	dc800217 	ldw	r18,8(sp)
80207854:	dc400117 	ldw	r17,4(sp)
80207858:	dc000017 	ldw	r16,0(sp)
8020785c:	dec00a04 	addi	sp,sp,40
80207860:	02058481 	jmpi	80205848 <_malloc_r>
80207864:	a8c00017 	ldw	r3,0(r21)
80207868:	90c00015 	stw	r3,0(r18)
8020786c:	a8c00117 	ldw	r3,4(r21)
80207870:	90c00115 	stw	r3,4(r18)
80207874:	00c006c4 	movi	r3,27
80207878:	19804536 	bltu	r3,r6,80207990 <_realloc_r+0x470>
8020787c:	90800204 	addi	r2,r18,8
80207880:	a8c00204 	addi	r3,r21,8
80207884:	003f6306 	br	80207614 <__reset+0xfa1e7614>
80207888:	9005883a 	mov	r2,r18
8020788c:	a8c00017 	ldw	r3,0(r21)
80207890:	b821883a 	mov	r16,r23
80207894:	b027883a 	mov	r19,r22
80207898:	10c00015 	stw	r3,0(r2)
8020789c:	a8c00117 	ldw	r3,4(r21)
802078a0:	10c00115 	stw	r3,4(r2)
802078a4:	a8c00217 	ldw	r3,8(r21)
802078a8:	10c00215 	stw	r3,8(r2)
802078ac:	003f6a06 	br	80207658 <__reset+0xfa1e7658>
802078b0:	9c67883a 	add	r19,r19,r17
802078b4:	4445c83a 	sub	r2,r8,r17
802078b8:	e4c00215 	stw	r19,8(fp)
802078bc:	10800054 	ori	r2,r2,1
802078c0:	98800115 	stw	r2,4(r19)
802078c4:	a8bfff17 	ldw	r2,-4(r21)
802078c8:	a009883a 	mov	r4,r20
802078cc:	1080004c 	andi	r2,r2,1
802078d0:	1462b03a 	or	r17,r2,r17
802078d4:	ac7fff15 	stw	r17,-4(r21)
802078d8:	020d4600 	call	8020d460 <__malloc_unlock>
802078dc:	a805883a 	mov	r2,r21
802078e0:	003f6b06 	br	80207690 <__reset+0xfa1e7690>
802078e4:	a80b883a 	mov	r5,r21
802078e8:	9009883a 	mov	r4,r18
802078ec:	02061380 	call	80206138 <memmove>
802078f0:	003f4e06 	br	8020762c <__reset+0xfa1e762c>
802078f4:	89000404 	addi	r4,r17,16
802078f8:	b93fbc16 	blt	r23,r4,802077ec <__reset+0xfa1e77ec>
802078fc:	b0800317 	ldw	r2,12(r22)
80207900:	b0c00217 	ldw	r3,8(r22)
80207904:	81bfff04 	addi	r6,r16,-4
80207908:	01000904 	movi	r4,36
8020790c:	18800315 	stw	r2,12(r3)
80207910:	10c00215 	stw	r3,8(r2)
80207914:	b4800204 	addi	r18,r22,8
80207918:	21804336 	bltu	r4,r6,80207a28 <_realloc_r+0x508>
8020791c:	008004c4 	movi	r2,19
80207920:	11803f2e 	bgeu	r2,r6,80207a20 <_realloc_r+0x500>
80207924:	a8800017 	ldw	r2,0(r21)
80207928:	b0800215 	stw	r2,8(r22)
8020792c:	a8800117 	ldw	r2,4(r21)
80207930:	b0800315 	stw	r2,12(r22)
80207934:	008006c4 	movi	r2,27
80207938:	11803f36 	bltu	r2,r6,80207a38 <_realloc_r+0x518>
8020793c:	b0800404 	addi	r2,r22,16
80207940:	ad400204 	addi	r21,r21,8
80207944:	a8c00017 	ldw	r3,0(r21)
80207948:	10c00015 	stw	r3,0(r2)
8020794c:	a8c00117 	ldw	r3,4(r21)
80207950:	10c00115 	stw	r3,4(r2)
80207954:	a8c00217 	ldw	r3,8(r21)
80207958:	10c00215 	stw	r3,8(r2)
8020795c:	b447883a 	add	r3,r22,r17
80207960:	bc45c83a 	sub	r2,r23,r17
80207964:	e0c00215 	stw	r3,8(fp)
80207968:	10800054 	ori	r2,r2,1
8020796c:	18800115 	stw	r2,4(r3)
80207970:	b0800117 	ldw	r2,4(r22)
80207974:	a009883a 	mov	r4,r20
80207978:	1080004c 	andi	r2,r2,1
8020797c:	1462b03a 	or	r17,r2,r17
80207980:	b4400115 	stw	r17,4(r22)
80207984:	020d4600 	call	8020d460 <__malloc_unlock>
80207988:	9005883a 	mov	r2,r18
8020798c:	003f4006 	br	80207690 <__reset+0xfa1e7690>
80207990:	a8c00217 	ldw	r3,8(r21)
80207994:	90c00215 	stw	r3,8(r18)
80207998:	a8c00317 	ldw	r3,12(r21)
8020799c:	90c00315 	stw	r3,12(r18)
802079a0:	30801126 	beq	r6,r2,802079e8 <_realloc_r+0x4c8>
802079a4:	90800404 	addi	r2,r18,16
802079a8:	a8c00404 	addi	r3,r21,16
802079ac:	003f1906 	br	80207614 <__reset+0xfa1e7614>
802079b0:	90ffff17 	ldw	r3,-4(r18)
802079b4:	00bfff04 	movi	r2,-4
802079b8:	a825883a 	mov	r18,r21
802079bc:	1884703a 	and	r2,r3,r2
802079c0:	80a1883a 	add	r16,r16,r2
802079c4:	003f2406 	br	80207658 <__reset+0xfa1e7658>
802079c8:	a8800217 	ldw	r2,8(r21)
802079cc:	b0800415 	stw	r2,16(r22)
802079d0:	a8800317 	ldw	r2,12(r21)
802079d4:	b0800515 	stw	r2,20(r22)
802079d8:	31000a26 	beq	r6,r4,80207a04 <_realloc_r+0x4e4>
802079dc:	b0800604 	addi	r2,r22,24
802079e0:	ad400404 	addi	r21,r21,16
802079e4:	003fa906 	br	8020788c <__reset+0xfa1e788c>
802079e8:	a9000417 	ldw	r4,16(r21)
802079ec:	90800604 	addi	r2,r18,24
802079f0:	a8c00604 	addi	r3,r21,24
802079f4:	91000415 	stw	r4,16(r18)
802079f8:	a9000517 	ldw	r4,20(r21)
802079fc:	91000515 	stw	r4,20(r18)
80207a00:	003f0406 	br	80207614 <__reset+0xfa1e7614>
80207a04:	a8c00417 	ldw	r3,16(r21)
80207a08:	ad400604 	addi	r21,r21,24
80207a0c:	b0800804 	addi	r2,r22,32
80207a10:	b0c00615 	stw	r3,24(r22)
80207a14:	a8ffff17 	ldw	r3,-4(r21)
80207a18:	b0c00715 	stw	r3,28(r22)
80207a1c:	003f9b06 	br	8020788c <__reset+0xfa1e788c>
80207a20:	9005883a 	mov	r2,r18
80207a24:	003fc706 	br	80207944 <__reset+0xfa1e7944>
80207a28:	a80b883a 	mov	r5,r21
80207a2c:	9009883a 	mov	r4,r18
80207a30:	02061380 	call	80206138 <memmove>
80207a34:	003fc906 	br	8020795c <__reset+0xfa1e795c>
80207a38:	a8800217 	ldw	r2,8(r21)
80207a3c:	b0800415 	stw	r2,16(r22)
80207a40:	a8800317 	ldw	r2,12(r21)
80207a44:	b0800515 	stw	r2,20(r22)
80207a48:	31000726 	beq	r6,r4,80207a68 <_realloc_r+0x548>
80207a4c:	b0800604 	addi	r2,r22,24
80207a50:	ad400404 	addi	r21,r21,16
80207a54:	003fbb06 	br	80207944 <__reset+0xfa1e7944>
80207a58:	a009883a 	mov	r4,r20
80207a5c:	020d4600 	call	8020d460 <__malloc_unlock>
80207a60:	0005883a 	mov	r2,zero
80207a64:	003f0a06 	br	80207690 <__reset+0xfa1e7690>
80207a68:	a8c00417 	ldw	r3,16(r21)
80207a6c:	ad400604 	addi	r21,r21,24
80207a70:	b0800804 	addi	r2,r22,32
80207a74:	b0c00615 	stw	r3,24(r22)
80207a78:	a8ffff17 	ldw	r3,-4(r21)
80207a7c:	b0c00715 	stw	r3,28(r22)
80207a80:	003fb006 	br	80207944 <__reset+0xfa1e7944>

80207a84 <__fpclassifyd>:
80207a84:	00a00034 	movhi	r2,32768
80207a88:	10bfffc4 	addi	r2,r2,-1
80207a8c:	2884703a 	and	r2,r5,r2
80207a90:	10000726 	beq	r2,zero,80207ab0 <__fpclassifyd+0x2c>
80207a94:	00fffc34 	movhi	r3,65520
80207a98:	019ff834 	movhi	r6,32736
80207a9c:	28c7883a 	add	r3,r5,r3
80207aa0:	31bfffc4 	addi	r6,r6,-1
80207aa4:	30c00536 	bltu	r6,r3,80207abc <__fpclassifyd+0x38>
80207aa8:	00800104 	movi	r2,4
80207aac:	f800283a 	ret
80207ab0:	2000021e 	bne	r4,zero,80207abc <__fpclassifyd+0x38>
80207ab4:	00800084 	movi	r2,2
80207ab8:	f800283a 	ret
80207abc:	00dffc34 	movhi	r3,32752
80207ac0:	019ff834 	movhi	r6,32736
80207ac4:	28cb883a 	add	r5,r5,r3
80207ac8:	31bfffc4 	addi	r6,r6,-1
80207acc:	317ff62e 	bgeu	r6,r5,80207aa8 <__reset+0xfa1e7aa8>
80207ad0:	01400434 	movhi	r5,16
80207ad4:	297fffc4 	addi	r5,r5,-1
80207ad8:	28800236 	bltu	r5,r2,80207ae4 <__fpclassifyd+0x60>
80207adc:	008000c4 	movi	r2,3
80207ae0:	f800283a 	ret
80207ae4:	10c00226 	beq	r2,r3,80207af0 <__fpclassifyd+0x6c>
80207ae8:	0005883a 	mov	r2,zero
80207aec:	f800283a 	ret
80207af0:	2005003a 	cmpeq	r2,r4,zero
80207af4:	f800283a 	ret

80207af8 <_sbrk_r>:
80207af8:	defffd04 	addi	sp,sp,-12
80207afc:	dc000015 	stw	r16,0(sp)
80207b00:	04200874 	movhi	r16,32801
80207b04:	dc400115 	stw	r17,4(sp)
80207b08:	84113404 	addi	r16,r16,17616
80207b0c:	2023883a 	mov	r17,r4
80207b10:	2809883a 	mov	r4,r5
80207b14:	dfc00215 	stw	ra,8(sp)
80207b18:	80000015 	stw	zero,0(r16)
80207b1c:	020d6200 	call	8020d620 <sbrk>
80207b20:	00ffffc4 	movi	r3,-1
80207b24:	10c00526 	beq	r2,r3,80207b3c <_sbrk_r+0x44>
80207b28:	dfc00217 	ldw	ra,8(sp)
80207b2c:	dc400117 	ldw	r17,4(sp)
80207b30:	dc000017 	ldw	r16,0(sp)
80207b34:	dec00304 	addi	sp,sp,12
80207b38:	f800283a 	ret
80207b3c:	80c00017 	ldw	r3,0(r16)
80207b40:	183ff926 	beq	r3,zero,80207b28 <__reset+0xfa1e7b28>
80207b44:	88c00015 	stw	r3,0(r17)
80207b48:	003ff706 	br	80207b28 <__reset+0xfa1e7b28>

80207b4c <__sread>:
80207b4c:	defffe04 	addi	sp,sp,-8
80207b50:	dc000015 	stw	r16,0(sp)
80207b54:	2821883a 	mov	r16,r5
80207b58:	2940038f 	ldh	r5,14(r5)
80207b5c:	dfc00115 	stw	ra,4(sp)
80207b60:	0209a980 	call	80209a98 <_read_r>
80207b64:	10000716 	blt	r2,zero,80207b84 <__sread+0x38>
80207b68:	80c01417 	ldw	r3,80(r16)
80207b6c:	1887883a 	add	r3,r3,r2
80207b70:	80c01415 	stw	r3,80(r16)
80207b74:	dfc00117 	ldw	ra,4(sp)
80207b78:	dc000017 	ldw	r16,0(sp)
80207b7c:	dec00204 	addi	sp,sp,8
80207b80:	f800283a 	ret
80207b84:	80c0030b 	ldhu	r3,12(r16)
80207b88:	18fbffcc 	andi	r3,r3,61439
80207b8c:	80c0030d 	sth	r3,12(r16)
80207b90:	dfc00117 	ldw	ra,4(sp)
80207b94:	dc000017 	ldw	r16,0(sp)
80207b98:	dec00204 	addi	sp,sp,8
80207b9c:	f800283a 	ret

80207ba0 <__seofread>:
80207ba0:	0005883a 	mov	r2,zero
80207ba4:	f800283a 	ret

80207ba8 <__swrite>:
80207ba8:	2880030b 	ldhu	r2,12(r5)
80207bac:	defffb04 	addi	sp,sp,-20
80207bb0:	dcc00315 	stw	r19,12(sp)
80207bb4:	dc800215 	stw	r18,8(sp)
80207bb8:	dc400115 	stw	r17,4(sp)
80207bbc:	dc000015 	stw	r16,0(sp)
80207bc0:	dfc00415 	stw	ra,16(sp)
80207bc4:	10c0400c 	andi	r3,r2,256
80207bc8:	2821883a 	mov	r16,r5
80207bcc:	2023883a 	mov	r17,r4
80207bd0:	3025883a 	mov	r18,r6
80207bd4:	3827883a 	mov	r19,r7
80207bd8:	18000526 	beq	r3,zero,80207bf0 <__swrite+0x48>
80207bdc:	2940038f 	ldh	r5,14(r5)
80207be0:	01c00084 	movi	r7,2
80207be4:	000d883a 	mov	r6,zero
80207be8:	0209a380 	call	80209a38 <_lseek_r>
80207bec:	8080030b 	ldhu	r2,12(r16)
80207bf0:	8140038f 	ldh	r5,14(r16)
80207bf4:	10bbffcc 	andi	r2,r2,61439
80207bf8:	980f883a 	mov	r7,r19
80207bfc:	900d883a 	mov	r6,r18
80207c00:	8809883a 	mov	r4,r17
80207c04:	8080030d 	sth	r2,12(r16)
80207c08:	dfc00417 	ldw	ra,16(sp)
80207c0c:	dcc00317 	ldw	r19,12(sp)
80207c10:	dc800217 	ldw	r18,8(sp)
80207c14:	dc400117 	ldw	r17,4(sp)
80207c18:	dc000017 	ldw	r16,0(sp)
80207c1c:	dec00504 	addi	sp,sp,20
80207c20:	02095041 	jmpi	80209504 <_write_r>

80207c24 <__sseek>:
80207c24:	defffe04 	addi	sp,sp,-8
80207c28:	dc000015 	stw	r16,0(sp)
80207c2c:	2821883a 	mov	r16,r5
80207c30:	2940038f 	ldh	r5,14(r5)
80207c34:	dfc00115 	stw	ra,4(sp)
80207c38:	0209a380 	call	80209a38 <_lseek_r>
80207c3c:	00ffffc4 	movi	r3,-1
80207c40:	10c00826 	beq	r2,r3,80207c64 <__sseek+0x40>
80207c44:	80c0030b 	ldhu	r3,12(r16)
80207c48:	80801415 	stw	r2,80(r16)
80207c4c:	18c40014 	ori	r3,r3,4096
80207c50:	80c0030d 	sth	r3,12(r16)
80207c54:	dfc00117 	ldw	ra,4(sp)
80207c58:	dc000017 	ldw	r16,0(sp)
80207c5c:	dec00204 	addi	sp,sp,8
80207c60:	f800283a 	ret
80207c64:	80c0030b 	ldhu	r3,12(r16)
80207c68:	18fbffcc 	andi	r3,r3,61439
80207c6c:	80c0030d 	sth	r3,12(r16)
80207c70:	dfc00117 	ldw	ra,4(sp)
80207c74:	dc000017 	ldw	r16,0(sp)
80207c78:	dec00204 	addi	sp,sp,8
80207c7c:	f800283a 	ret

80207c80 <__sclose>:
80207c80:	2940038f 	ldh	r5,14(r5)
80207c84:	02095641 	jmpi	80209564 <_close_r>

80207c88 <strcmp>:
80207c88:	2144b03a 	or	r2,r4,r5
80207c8c:	108000cc 	andi	r2,r2,3
80207c90:	1000171e 	bne	r2,zero,80207cf0 <strcmp+0x68>
80207c94:	20800017 	ldw	r2,0(r4)
80207c98:	28c00017 	ldw	r3,0(r5)
80207c9c:	10c0141e 	bne	r2,r3,80207cf0 <strcmp+0x68>
80207ca0:	027fbff4 	movhi	r9,65279
80207ca4:	4a7fbfc4 	addi	r9,r9,-257
80207ca8:	0086303a 	nor	r3,zero,r2
80207cac:	02202074 	movhi	r8,32897
80207cb0:	1245883a 	add	r2,r2,r9
80207cb4:	42202004 	addi	r8,r8,-32640
80207cb8:	10c4703a 	and	r2,r2,r3
80207cbc:	1204703a 	and	r2,r2,r8
80207cc0:	10000226 	beq	r2,zero,80207ccc <strcmp+0x44>
80207cc4:	00002306 	br	80207d54 <strcmp+0xcc>
80207cc8:	1000221e 	bne	r2,zero,80207d54 <strcmp+0xcc>
80207ccc:	21000104 	addi	r4,r4,4
80207cd0:	20c00017 	ldw	r3,0(r4)
80207cd4:	29400104 	addi	r5,r5,4
80207cd8:	29800017 	ldw	r6,0(r5)
80207cdc:	1a4f883a 	add	r7,r3,r9
80207ce0:	00c4303a 	nor	r2,zero,r3
80207ce4:	3884703a 	and	r2,r7,r2
80207ce8:	1204703a 	and	r2,r2,r8
80207cec:	19bff626 	beq	r3,r6,80207cc8 <__reset+0xfa1e7cc8>
80207cf0:	20800003 	ldbu	r2,0(r4)
80207cf4:	10c03fcc 	andi	r3,r2,255
80207cf8:	18c0201c 	xori	r3,r3,128
80207cfc:	18ffe004 	addi	r3,r3,-128
80207d00:	18000c26 	beq	r3,zero,80207d34 <strcmp+0xac>
80207d04:	29800007 	ldb	r6,0(r5)
80207d08:	19800326 	beq	r3,r6,80207d18 <strcmp+0x90>
80207d0c:	00001306 	br	80207d5c <strcmp+0xd4>
80207d10:	29800007 	ldb	r6,0(r5)
80207d14:	11800b1e 	bne	r2,r6,80207d44 <strcmp+0xbc>
80207d18:	21000044 	addi	r4,r4,1
80207d1c:	20c00003 	ldbu	r3,0(r4)
80207d20:	29400044 	addi	r5,r5,1
80207d24:	18803fcc 	andi	r2,r3,255
80207d28:	1080201c 	xori	r2,r2,128
80207d2c:	10bfe004 	addi	r2,r2,-128
80207d30:	103ff71e 	bne	r2,zero,80207d10 <__reset+0xfa1e7d10>
80207d34:	0007883a 	mov	r3,zero
80207d38:	28800003 	ldbu	r2,0(r5)
80207d3c:	1885c83a 	sub	r2,r3,r2
80207d40:	f800283a 	ret
80207d44:	28800003 	ldbu	r2,0(r5)
80207d48:	18c03fcc 	andi	r3,r3,255
80207d4c:	1885c83a 	sub	r2,r3,r2
80207d50:	f800283a 	ret
80207d54:	0005883a 	mov	r2,zero
80207d58:	f800283a 	ret
80207d5c:	10c03fcc 	andi	r3,r2,255
80207d60:	003ff506 	br	80207d38 <__reset+0xfa1e7d38>

80207d64 <__sprint_r.part.0>:
80207d64:	28801917 	ldw	r2,100(r5)
80207d68:	defff604 	addi	sp,sp,-40
80207d6c:	dd400515 	stw	r21,20(sp)
80207d70:	dfc00915 	stw	ra,36(sp)
80207d74:	df000815 	stw	fp,32(sp)
80207d78:	ddc00715 	stw	r23,28(sp)
80207d7c:	dd800615 	stw	r22,24(sp)
80207d80:	dd000415 	stw	r20,16(sp)
80207d84:	dcc00315 	stw	r19,12(sp)
80207d88:	dc800215 	stw	r18,8(sp)
80207d8c:	dc400115 	stw	r17,4(sp)
80207d90:	dc000015 	stw	r16,0(sp)
80207d94:	1088000c 	andi	r2,r2,8192
80207d98:	302b883a 	mov	r21,r6
80207d9c:	10002e26 	beq	r2,zero,80207e58 <__sprint_r.part.0+0xf4>
80207da0:	30800217 	ldw	r2,8(r6)
80207da4:	35800017 	ldw	r22,0(r6)
80207da8:	10002926 	beq	r2,zero,80207e50 <__sprint_r.part.0+0xec>
80207dac:	2827883a 	mov	r19,r5
80207db0:	2029883a 	mov	r20,r4
80207db4:	b5c00104 	addi	r23,r22,4
80207db8:	04bfffc4 	movi	r18,-1
80207dbc:	bc400017 	ldw	r17,0(r23)
80207dc0:	b4000017 	ldw	r16,0(r22)
80207dc4:	0039883a 	mov	fp,zero
80207dc8:	8822d0ba 	srli	r17,r17,2
80207dcc:	8800031e 	bne	r17,zero,80207ddc <__sprint_r.part.0+0x78>
80207dd0:	00001806 	br	80207e34 <__sprint_r.part.0+0xd0>
80207dd4:	84000104 	addi	r16,r16,4
80207dd8:	8f001526 	beq	r17,fp,80207e30 <__sprint_r.part.0+0xcc>
80207ddc:	81400017 	ldw	r5,0(r16)
80207de0:	980d883a 	mov	r6,r19
80207de4:	a009883a 	mov	r4,r20
80207de8:	02098e40 	call	802098e4 <_fputwc_r>
80207dec:	e7000044 	addi	fp,fp,1
80207df0:	14bff81e 	bne	r2,r18,80207dd4 <__reset+0xfa1e7dd4>
80207df4:	9005883a 	mov	r2,r18
80207df8:	a8000215 	stw	zero,8(r21)
80207dfc:	a8000115 	stw	zero,4(r21)
80207e00:	dfc00917 	ldw	ra,36(sp)
80207e04:	df000817 	ldw	fp,32(sp)
80207e08:	ddc00717 	ldw	r23,28(sp)
80207e0c:	dd800617 	ldw	r22,24(sp)
80207e10:	dd400517 	ldw	r21,20(sp)
80207e14:	dd000417 	ldw	r20,16(sp)
80207e18:	dcc00317 	ldw	r19,12(sp)
80207e1c:	dc800217 	ldw	r18,8(sp)
80207e20:	dc400117 	ldw	r17,4(sp)
80207e24:	dc000017 	ldw	r16,0(sp)
80207e28:	dec00a04 	addi	sp,sp,40
80207e2c:	f800283a 	ret
80207e30:	a8800217 	ldw	r2,8(r21)
80207e34:	8c63883a 	add	r17,r17,r17
80207e38:	8c63883a 	add	r17,r17,r17
80207e3c:	1445c83a 	sub	r2,r2,r17
80207e40:	a8800215 	stw	r2,8(r21)
80207e44:	b5800204 	addi	r22,r22,8
80207e48:	bdc00204 	addi	r23,r23,8
80207e4c:	103fdb1e 	bne	r2,zero,80207dbc <__reset+0xfa1e7dbc>
80207e50:	0005883a 	mov	r2,zero
80207e54:	003fe806 	br	80207df8 <__reset+0xfa1e7df8>
80207e58:	0204f6c0 	call	80204f6c <__sfvwrite_r>
80207e5c:	003fe606 	br	80207df8 <__reset+0xfa1e7df8>

80207e60 <__sprint_r>:
80207e60:	30c00217 	ldw	r3,8(r6)
80207e64:	18000126 	beq	r3,zero,80207e6c <__sprint_r+0xc>
80207e68:	0207d641 	jmpi	80207d64 <__sprint_r.part.0>
80207e6c:	30000115 	stw	zero,4(r6)
80207e70:	0005883a 	mov	r2,zero
80207e74:	f800283a 	ret

80207e78 <___vfiprintf_internal_r>:
80207e78:	deffc904 	addi	sp,sp,-220
80207e7c:	df003515 	stw	fp,212(sp)
80207e80:	dd003115 	stw	r20,196(sp)
80207e84:	dfc03615 	stw	ra,216(sp)
80207e88:	ddc03415 	stw	r23,208(sp)
80207e8c:	dd803315 	stw	r22,204(sp)
80207e90:	dd403215 	stw	r21,200(sp)
80207e94:	dcc03015 	stw	r19,192(sp)
80207e98:	dc802f15 	stw	r18,188(sp)
80207e9c:	dc402e15 	stw	r17,184(sp)
80207ea0:	dc002d15 	stw	r16,180(sp)
80207ea4:	d9002015 	stw	r4,128(sp)
80207ea8:	d9c02215 	stw	r7,136(sp)
80207eac:	2829883a 	mov	r20,r5
80207eb0:	3039883a 	mov	fp,r6
80207eb4:	20000226 	beq	r4,zero,80207ec0 <___vfiprintf_internal_r+0x48>
80207eb8:	20800e17 	ldw	r2,56(r4)
80207ebc:	1000cf26 	beq	r2,zero,802081fc <___vfiprintf_internal_r+0x384>
80207ec0:	a080030b 	ldhu	r2,12(r20)
80207ec4:	10c8000c 	andi	r3,r2,8192
80207ec8:	1800061e 	bne	r3,zero,80207ee4 <___vfiprintf_internal_r+0x6c>
80207ecc:	a1001917 	ldw	r4,100(r20)
80207ed0:	00f7ffc4 	movi	r3,-8193
80207ed4:	10880014 	ori	r2,r2,8192
80207ed8:	20c6703a 	and	r3,r4,r3
80207edc:	a080030d 	sth	r2,12(r20)
80207ee0:	a0c01915 	stw	r3,100(r20)
80207ee4:	10c0020c 	andi	r3,r2,8
80207ee8:	1800a926 	beq	r3,zero,80208190 <___vfiprintf_internal_r+0x318>
80207eec:	a0c00417 	ldw	r3,16(r20)
80207ef0:	1800a726 	beq	r3,zero,80208190 <___vfiprintf_internal_r+0x318>
80207ef4:	1080068c 	andi	r2,r2,26
80207ef8:	00c00284 	movi	r3,10
80207efc:	10c0ac26 	beq	r2,r3,802081b0 <___vfiprintf_internal_r+0x338>
80207f00:	da801a04 	addi	r10,sp,104
80207f04:	da801e15 	stw	r10,120(sp)
80207f08:	d8801e17 	ldw	r2,120(sp)
80207f0c:	da8019c4 	addi	r10,sp,103
80207f10:	05a00874 	movhi	r22,32801
80207f14:	05e00874 	movhi	r23,32801
80207f18:	da801f15 	stw	r10,124(sp)
80207f1c:	1295c83a 	sub	r10,r2,r10
80207f20:	b5891104 	addi	r22,r22,9284
80207f24:	bdc90d04 	addi	r23,r23,9268
80207f28:	dec01a15 	stw	sp,104(sp)
80207f2c:	d8001c15 	stw	zero,112(sp)
80207f30:	d8001b15 	stw	zero,108(sp)
80207f34:	d8002615 	stw	zero,152(sp)
80207f38:	d8002315 	stw	zero,140(sp)
80207f3c:	da802715 	stw	r10,156(sp)
80207f40:	d811883a 	mov	r8,sp
80207f44:	dd002115 	stw	r20,132(sp)
80207f48:	e021883a 	mov	r16,fp
80207f4c:	80800007 	ldb	r2,0(r16)
80207f50:	1003ea26 	beq	r2,zero,80208efc <___vfiprintf_internal_r+0x1084>
80207f54:	00c00944 	movi	r3,37
80207f58:	8025883a 	mov	r18,r16
80207f5c:	10c0021e 	bne	r2,r3,80207f68 <___vfiprintf_internal_r+0xf0>
80207f60:	00001606 	br	80207fbc <___vfiprintf_internal_r+0x144>
80207f64:	10c00326 	beq	r2,r3,80207f74 <___vfiprintf_internal_r+0xfc>
80207f68:	94800044 	addi	r18,r18,1
80207f6c:	90800007 	ldb	r2,0(r18)
80207f70:	103ffc1e 	bne	r2,zero,80207f64 <__reset+0xfa1e7f64>
80207f74:	9423c83a 	sub	r17,r18,r16
80207f78:	88001026 	beq	r17,zero,80207fbc <___vfiprintf_internal_r+0x144>
80207f7c:	d8c01c17 	ldw	r3,112(sp)
80207f80:	d8801b17 	ldw	r2,108(sp)
80207f84:	44000015 	stw	r16,0(r8)
80207f88:	88c7883a 	add	r3,r17,r3
80207f8c:	10800044 	addi	r2,r2,1
80207f90:	44400115 	stw	r17,4(r8)
80207f94:	d8c01c15 	stw	r3,112(sp)
80207f98:	d8801b15 	stw	r2,108(sp)
80207f9c:	010001c4 	movi	r4,7
80207fa0:	2080760e 	bge	r4,r2,8020817c <___vfiprintf_internal_r+0x304>
80207fa4:	1803821e 	bne	r3,zero,80208db0 <___vfiprintf_internal_r+0xf38>
80207fa8:	da802317 	ldw	r10,140(sp)
80207fac:	d8001b15 	stw	zero,108(sp)
80207fb0:	d811883a 	mov	r8,sp
80207fb4:	5455883a 	add	r10,r10,r17
80207fb8:	da802315 	stw	r10,140(sp)
80207fbc:	90800007 	ldb	r2,0(r18)
80207fc0:	10044626 	beq	r2,zero,802090dc <___vfiprintf_internal_r+0x1264>
80207fc4:	90c00047 	ldb	r3,1(r18)
80207fc8:	94000044 	addi	r16,r18,1
80207fcc:	d8001d85 	stb	zero,118(sp)
80207fd0:	0009883a 	mov	r4,zero
80207fd4:	000f883a 	mov	r7,zero
80207fd8:	027fffc4 	movi	r9,-1
80207fdc:	0023883a 	mov	r17,zero
80207fe0:	0029883a 	mov	r20,zero
80207fe4:	01401604 	movi	r5,88
80207fe8:	01800244 	movi	r6,9
80207fec:	03400a84 	movi	r13,42
80207ff0:	03001b04 	movi	r12,108
80207ff4:	84000044 	addi	r16,r16,1
80207ff8:	18bff804 	addi	r2,r3,-32
80207ffc:	28827336 	bltu	r5,r2,802089cc <___vfiprintf_internal_r+0xb54>
80208000:	100490ba 	slli	r2,r2,2
80208004:	02a00874 	movhi	r10,32801
80208008:	52a00604 	addi	r10,r10,-32744
8020800c:	1285883a 	add	r2,r2,r10
80208010:	10800017 	ldw	r2,0(r2)
80208014:	1000683a 	jmp	r2
80208018:	80208700 	call	88020870 <__reset+0x2000870>
8020801c:	802089cc 	andi	zero,r16,33319
80208020:	802089cc 	andi	zero,r16,33319
80208024:	80208720 	cmpeqi	zero,r16,-32228
80208028:	802089cc 	andi	zero,r16,33319
8020802c:	802089cc 	andi	zero,r16,33319
80208030:	802089cc 	andi	zero,r16,33319
80208034:	802089cc 	andi	zero,r16,33319
80208038:	802089cc 	andi	zero,r16,33319
8020803c:	802089cc 	andi	zero,r16,33319
80208040:	80208908 	cmpgei	zero,r16,-32220
80208044:	80208924 	muli	zero,r16,-32220
80208048:	802089cc 	andi	zero,r16,33319
8020804c:	8020820c 	andi	zero,r16,33288
80208050:	80208934 	orhi	zero,r16,33316
80208054:	802089cc 	andi	zero,r16,33319
80208058:	8020872c 	andhi	zero,r16,33308
8020805c:	80208738 	rdprs	zero,r16,-32228
80208060:	80208738 	rdprs	zero,r16,-32228
80208064:	80208738 	rdprs	zero,r16,-32228
80208068:	80208738 	rdprs	zero,r16,-32228
8020806c:	80208738 	rdprs	zero,r16,-32228
80208070:	80208738 	rdprs	zero,r16,-32228
80208074:	80208738 	rdprs	zero,r16,-32228
80208078:	80208738 	rdprs	zero,r16,-32228
8020807c:	80208738 	rdprs	zero,r16,-32228
80208080:	802089cc 	andi	zero,r16,33319
80208084:	802089cc 	andi	zero,r16,33319
80208088:	802089cc 	andi	zero,r16,33319
8020808c:	802089cc 	andi	zero,r16,33319
80208090:	802089cc 	andi	zero,r16,33319
80208094:	802089cc 	andi	zero,r16,33319
80208098:	802089cc 	andi	zero,r16,33319
8020809c:	802089cc 	andi	zero,r16,33319
802080a0:	802089cc 	andi	zero,r16,33319
802080a4:	802089cc 	andi	zero,r16,33319
802080a8:	80208764 	muli	zero,r16,-32227
802080ac:	802089cc 	andi	zero,r16,33319
802080b0:	802089cc 	andi	zero,r16,33319
802080b4:	802089cc 	andi	zero,r16,33319
802080b8:	802089cc 	andi	zero,r16,33319
802080bc:	802089cc 	andi	zero,r16,33319
802080c0:	802089cc 	andi	zero,r16,33319
802080c4:	802089cc 	andi	zero,r16,33319
802080c8:	802089cc 	andi	zero,r16,33319
802080cc:	802089cc 	andi	zero,r16,33319
802080d0:	802089cc 	andi	zero,r16,33319
802080d4:	8020879c 	xori	zero,r16,33310
802080d8:	802089cc 	andi	zero,r16,33319
802080dc:	802089cc 	andi	zero,r16,33319
802080e0:	802089cc 	andi	zero,r16,33319
802080e4:	802089cc 	andi	zero,r16,33319
802080e8:	802089cc 	andi	zero,r16,33319
802080ec:	802087f4 	orhi	zero,r16,33311
802080f0:	802089cc 	andi	zero,r16,33319
802080f4:	802089cc 	andi	zero,r16,33319
802080f8:	80208864 	muli	zero,r16,-32223
802080fc:	802089cc 	andi	zero,r16,33319
80208100:	802089cc 	andi	zero,r16,33319
80208104:	802089cc 	andi	zero,r16,33319
80208108:	802089cc 	andi	zero,r16,33319
8020810c:	802089cc 	andi	zero,r16,33319
80208110:	802089cc 	andi	zero,r16,33319
80208114:	802089cc 	andi	zero,r16,33319
80208118:	802089cc 	andi	zero,r16,33319
8020811c:	802089cc 	andi	zero,r16,33319
80208120:	802089cc 	andi	zero,r16,33319
80208124:	80208610 	cmplti	zero,r16,-32232
80208128:	8020863c 	xorhi	zero,r16,33304
8020812c:	802089cc 	andi	zero,r16,33319
80208130:	802089cc 	andi	zero,r16,33319
80208134:	802089cc 	andi	zero,r16,33319
80208138:	80208974 	orhi	zero,r16,33317
8020813c:	8020863c 	xorhi	zero,r16,33304
80208140:	802089cc 	andi	zero,r16,33319
80208144:	802089cc 	andi	zero,r16,33319
80208148:	802084d0 	cmplti	zero,r16,-32237
8020814c:	802089cc 	andi	zero,r16,33319
80208150:	802084e0 	cmpeqi	zero,r16,-32237
80208154:	8020851c 	xori	zero,r16,33300
80208158:	80208218 	cmpnei	zero,r16,-32248
8020815c:	802084c4 	addi	zero,r16,-32237
80208160:	802089cc 	andi	zero,r16,33319
80208164:	802088a0 	cmpeqi	zero,r16,-32222
80208168:	802089cc 	andi	zero,r16,33319
8020816c:	802088f8 	rdprs	zero,r16,-32221
80208170:	802089cc 	andi	zero,r16,33319
80208174:	802089cc 	andi	zero,r16,33319
80208178:	802085bc 	xorhi	zero,r16,33302
8020817c:	42000204 	addi	r8,r8,8
80208180:	da802317 	ldw	r10,140(sp)
80208184:	5455883a 	add	r10,r10,r17
80208188:	da802315 	stw	r10,140(sp)
8020818c:	003f8b06 	br	80207fbc <__reset+0xfa1e7fbc>
80208190:	d9002017 	ldw	r4,128(sp)
80208194:	a00b883a 	mov	r5,r20
80208198:	0202b140 	call	80202b14 <__swsetup_r>
8020819c:	1003b11e 	bne	r2,zero,80209064 <___vfiprintf_internal_r+0x11ec>
802081a0:	a080030b 	ldhu	r2,12(r20)
802081a4:	00c00284 	movi	r3,10
802081a8:	1080068c 	andi	r2,r2,26
802081ac:	10ff541e 	bne	r2,r3,80207f00 <__reset+0xfa1e7f00>
802081b0:	a080038f 	ldh	r2,14(r20)
802081b4:	103f5216 	blt	r2,zero,80207f00 <__reset+0xfa1e7f00>
802081b8:	d9c02217 	ldw	r7,136(sp)
802081bc:	d9002017 	ldw	r4,128(sp)
802081c0:	e00d883a 	mov	r6,fp
802081c4:	a00b883a 	mov	r5,r20
802081c8:	02092f00 	call	802092f0 <__sbprintf>
802081cc:	dfc03617 	ldw	ra,216(sp)
802081d0:	df003517 	ldw	fp,212(sp)
802081d4:	ddc03417 	ldw	r23,208(sp)
802081d8:	dd803317 	ldw	r22,204(sp)
802081dc:	dd403217 	ldw	r21,200(sp)
802081e0:	dd003117 	ldw	r20,196(sp)
802081e4:	dcc03017 	ldw	r19,192(sp)
802081e8:	dc802f17 	ldw	r18,188(sp)
802081ec:	dc402e17 	ldw	r17,184(sp)
802081f0:	dc002d17 	ldw	r16,180(sp)
802081f4:	dec03704 	addi	sp,sp,220
802081f8:	f800283a 	ret
802081fc:	0204ae80 	call	80204ae8 <__sinit>
80208200:	003f2f06 	br	80207ec0 <__reset+0xfa1e7ec0>
80208204:	0463c83a 	sub	r17,zero,r17
80208208:	d8802215 	stw	r2,136(sp)
8020820c:	a5000114 	ori	r20,r20,4
80208210:	80c00007 	ldb	r3,0(r16)
80208214:	003f7706 	br	80207ff4 <__reset+0xfa1e7ff4>
80208218:	00800c04 	movi	r2,48
8020821c:	da802217 	ldw	r10,136(sp)
80208220:	d8801d05 	stb	r2,116(sp)
80208224:	00801e04 	movi	r2,120
80208228:	d8801d45 	stb	r2,117(sp)
8020822c:	d8001d85 	stb	zero,118(sp)
80208230:	50c00104 	addi	r3,r10,4
80208234:	54800017 	ldw	r18,0(r10)
80208238:	0027883a 	mov	r19,zero
8020823c:	a0800094 	ori	r2,r20,2
80208240:	48030b16 	blt	r9,zero,80208e70 <___vfiprintf_internal_r+0xff8>
80208244:	00bfdfc4 	movi	r2,-129
80208248:	a096703a 	and	r11,r20,r2
8020824c:	d8c02215 	stw	r3,136(sp)
80208250:	5d000094 	ori	r20,r11,2
80208254:	90032b1e 	bne	r18,zero,80208f04 <___vfiprintf_internal_r+0x108c>
80208258:	00a00874 	movhi	r2,32801
8020825c:	1088ac04 	addi	r2,r2,8880
80208260:	d8802615 	stw	r2,152(sp)
80208264:	0039883a 	mov	fp,zero
80208268:	48017b1e 	bne	r9,zero,80208858 <___vfiprintf_internal_r+0x9e0>
8020826c:	0013883a 	mov	r9,zero
80208270:	0027883a 	mov	r19,zero
80208274:	dd401a04 	addi	r21,sp,104
80208278:	4825883a 	mov	r18,r9
8020827c:	4cc0010e 	bge	r9,r19,80208284 <___vfiprintf_internal_r+0x40c>
80208280:	9825883a 	mov	r18,r19
80208284:	e7003fcc 	andi	fp,fp,255
80208288:	e700201c 	xori	fp,fp,128
8020828c:	e73fe004 	addi	fp,fp,-128
80208290:	e0000126 	beq	fp,zero,80208298 <___vfiprintf_internal_r+0x420>
80208294:	94800044 	addi	r18,r18,1
80208298:	a380008c 	andi	r14,r20,2
8020829c:	70000126 	beq	r14,zero,802082a4 <___vfiprintf_internal_r+0x42c>
802082a0:	94800084 	addi	r18,r18,2
802082a4:	a700210c 	andi	fp,r20,132
802082a8:	e001df1e 	bne	fp,zero,80208a28 <___vfiprintf_internal_r+0xbb0>
802082ac:	8c87c83a 	sub	r3,r17,r18
802082b0:	00c1dd0e 	bge	zero,r3,80208a28 <___vfiprintf_internal_r+0xbb0>
802082b4:	01c00404 	movi	r7,16
802082b8:	d8801c17 	ldw	r2,112(sp)
802082bc:	38c3ad0e 	bge	r7,r3,80209174 <___vfiprintf_internal_r+0x12fc>
802082c0:	02a00874 	movhi	r10,32801
802082c4:	52891104 	addi	r10,r10,9284
802082c8:	dc002915 	stw	r16,164(sp)
802082cc:	d9801b17 	ldw	r6,108(sp)
802082d0:	da802415 	stw	r10,144(sp)
802082d4:	03c001c4 	movi	r15,7
802082d8:	da402515 	stw	r9,148(sp)
802082dc:	db802815 	stw	r14,160(sp)
802082e0:	1821883a 	mov	r16,r3
802082e4:	00000506 	br	802082fc <___vfiprintf_internal_r+0x484>
802082e8:	31400084 	addi	r5,r6,2
802082ec:	42000204 	addi	r8,r8,8
802082f0:	200d883a 	mov	r6,r4
802082f4:	843ffc04 	addi	r16,r16,-16
802082f8:	3c000d0e 	bge	r7,r16,80208330 <___vfiprintf_internal_r+0x4b8>
802082fc:	10800404 	addi	r2,r2,16
80208300:	31000044 	addi	r4,r6,1
80208304:	45800015 	stw	r22,0(r8)
80208308:	41c00115 	stw	r7,4(r8)
8020830c:	d8801c15 	stw	r2,112(sp)
80208310:	d9001b15 	stw	r4,108(sp)
80208314:	793ff40e 	bge	r15,r4,802082e8 <__reset+0xfa1e82e8>
80208318:	1001b51e 	bne	r2,zero,802089f0 <___vfiprintf_internal_r+0xb78>
8020831c:	843ffc04 	addi	r16,r16,-16
80208320:	000d883a 	mov	r6,zero
80208324:	01400044 	movi	r5,1
80208328:	d811883a 	mov	r8,sp
8020832c:	3c3ff316 	blt	r7,r16,802082fc <__reset+0xfa1e82fc>
80208330:	8007883a 	mov	r3,r16
80208334:	da402517 	ldw	r9,148(sp)
80208338:	db802817 	ldw	r14,160(sp)
8020833c:	dc002917 	ldw	r16,164(sp)
80208340:	da802417 	ldw	r10,144(sp)
80208344:	1885883a 	add	r2,r3,r2
80208348:	40c00115 	stw	r3,4(r8)
8020834c:	42800015 	stw	r10,0(r8)
80208350:	d8801c15 	stw	r2,112(sp)
80208354:	d9401b15 	stw	r5,108(sp)
80208358:	00c001c4 	movi	r3,7
8020835c:	19426016 	blt	r3,r5,80208ce0 <___vfiprintf_internal_r+0xe68>
80208360:	d8c01d87 	ldb	r3,118(sp)
80208364:	42000204 	addi	r8,r8,8
80208368:	29000044 	addi	r4,r5,1
8020836c:	1801b31e 	bne	r3,zero,80208a3c <___vfiprintf_internal_r+0xbc4>
80208370:	7001c026 	beq	r14,zero,80208a74 <___vfiprintf_internal_r+0xbfc>
80208374:	d8c01d04 	addi	r3,sp,116
80208378:	10800084 	addi	r2,r2,2
8020837c:	40c00015 	stw	r3,0(r8)
80208380:	00c00084 	movi	r3,2
80208384:	40c00115 	stw	r3,4(r8)
80208388:	d8801c15 	stw	r2,112(sp)
8020838c:	d9001b15 	stw	r4,108(sp)
80208390:	00c001c4 	movi	r3,7
80208394:	1902650e 	bge	r3,r4,80208d2c <___vfiprintf_internal_r+0xeb4>
80208398:	10029a1e 	bne	r2,zero,80208e04 <___vfiprintf_internal_r+0xf8c>
8020839c:	00c02004 	movi	r3,128
802083a0:	01000044 	movi	r4,1
802083a4:	000b883a 	mov	r5,zero
802083a8:	d811883a 	mov	r8,sp
802083ac:	e0c1b31e 	bne	fp,r3,80208a7c <___vfiprintf_internal_r+0xc04>
802083b0:	8cb9c83a 	sub	fp,r17,r18
802083b4:	0701b10e 	bge	zero,fp,80208a7c <___vfiprintf_internal_r+0xc04>
802083b8:	01c00404 	movi	r7,16
802083bc:	3f03890e 	bge	r7,fp,802091e4 <___vfiprintf_internal_r+0x136c>
802083c0:	00e00874 	movhi	r3,32801
802083c4:	18c90d04 	addi	r3,r3,9268
802083c8:	d8c02415 	stw	r3,144(sp)
802083cc:	8007883a 	mov	r3,r16
802083d0:	034001c4 	movi	r13,7
802083d4:	e021883a 	mov	r16,fp
802083d8:	da402515 	stw	r9,148(sp)
802083dc:	1839883a 	mov	fp,r3
802083e0:	00000506 	br	802083f8 <___vfiprintf_internal_r+0x580>
802083e4:	29800084 	addi	r6,r5,2
802083e8:	42000204 	addi	r8,r8,8
802083ec:	180b883a 	mov	r5,r3
802083f0:	843ffc04 	addi	r16,r16,-16
802083f4:	3c000d0e 	bge	r7,r16,8020842c <___vfiprintf_internal_r+0x5b4>
802083f8:	10800404 	addi	r2,r2,16
802083fc:	28c00044 	addi	r3,r5,1
80208400:	45c00015 	stw	r23,0(r8)
80208404:	41c00115 	stw	r7,4(r8)
80208408:	d8801c15 	stw	r2,112(sp)
8020840c:	d8c01b15 	stw	r3,108(sp)
80208410:	68fff40e 	bge	r13,r3,802083e4 <__reset+0xfa1e83e4>
80208414:	1002241e 	bne	r2,zero,80208ca8 <___vfiprintf_internal_r+0xe30>
80208418:	843ffc04 	addi	r16,r16,-16
8020841c:	01800044 	movi	r6,1
80208420:	000b883a 	mov	r5,zero
80208424:	d811883a 	mov	r8,sp
80208428:	3c3ff316 	blt	r7,r16,802083f8 <__reset+0xfa1e83f8>
8020842c:	da402517 	ldw	r9,148(sp)
80208430:	e007883a 	mov	r3,fp
80208434:	8039883a 	mov	fp,r16
80208438:	1821883a 	mov	r16,r3
8020843c:	d8c02417 	ldw	r3,144(sp)
80208440:	1705883a 	add	r2,r2,fp
80208444:	47000115 	stw	fp,4(r8)
80208448:	40c00015 	stw	r3,0(r8)
8020844c:	d8801c15 	stw	r2,112(sp)
80208450:	d9801b15 	stw	r6,108(sp)
80208454:	00c001c4 	movi	r3,7
80208458:	19827616 	blt	r3,r6,80208e34 <___vfiprintf_internal_r+0xfbc>
8020845c:	4cf9c83a 	sub	fp,r9,r19
80208460:	42000204 	addi	r8,r8,8
80208464:	31000044 	addi	r4,r6,1
80208468:	300b883a 	mov	r5,r6
8020846c:	07018516 	blt	zero,fp,80208a84 <___vfiprintf_internal_r+0xc0c>
80208470:	9885883a 	add	r2,r19,r2
80208474:	45400015 	stw	r21,0(r8)
80208478:	44c00115 	stw	r19,4(r8)
8020847c:	d8801c15 	stw	r2,112(sp)
80208480:	d9001b15 	stw	r4,108(sp)
80208484:	00c001c4 	movi	r3,7
80208488:	1901dd0e 	bge	r3,r4,80208c00 <___vfiprintf_internal_r+0xd88>
8020848c:	1002401e 	bne	r2,zero,80208d90 <___vfiprintf_internal_r+0xf18>
80208490:	d8001b15 	stw	zero,108(sp)
80208494:	a2c0010c 	andi	r11,r20,4
80208498:	58000226 	beq	r11,zero,802084a4 <___vfiprintf_internal_r+0x62c>
8020849c:	8ca7c83a 	sub	r19,r17,r18
802084a0:	04c2f216 	blt	zero,r19,8020906c <___vfiprintf_internal_r+0x11f4>
802084a4:	8c80010e 	bge	r17,r18,802084ac <___vfiprintf_internal_r+0x634>
802084a8:	9023883a 	mov	r17,r18
802084ac:	da802317 	ldw	r10,140(sp)
802084b0:	5455883a 	add	r10,r10,r17
802084b4:	da802315 	stw	r10,140(sp)
802084b8:	d8001b15 	stw	zero,108(sp)
802084bc:	d811883a 	mov	r8,sp
802084c0:	003ea206 	br	80207f4c <__reset+0xfa1e7f4c>
802084c4:	a5000814 	ori	r20,r20,32
802084c8:	80c00007 	ldb	r3,0(r16)
802084cc:	003ec906 	br	80207ff4 <__reset+0xfa1e7ff4>
802084d0:	80c00007 	ldb	r3,0(r16)
802084d4:	1b030926 	beq	r3,r12,802090fc <___vfiprintf_internal_r+0x1284>
802084d8:	a5000414 	ori	r20,r20,16
802084dc:	003ec506 	br	80207ff4 <__reset+0xfa1e7ff4>
802084e0:	21003fcc 	andi	r4,r4,255
802084e4:	20035e1e 	bne	r4,zero,80209260 <___vfiprintf_internal_r+0x13e8>
802084e8:	a080080c 	andi	r2,r20,32
802084ec:	1002a526 	beq	r2,zero,80208f84 <___vfiprintf_internal_r+0x110c>
802084f0:	da802217 	ldw	r10,136(sp)
802084f4:	50800017 	ldw	r2,0(r10)
802084f8:	da802317 	ldw	r10,140(sp)
802084fc:	5007d7fa 	srai	r3,r10,31
80208500:	da802217 	ldw	r10,136(sp)
80208504:	10c00115 	stw	r3,4(r2)
80208508:	52800104 	addi	r10,r10,4
8020850c:	da802215 	stw	r10,136(sp)
80208510:	da802317 	ldw	r10,140(sp)
80208514:	12800015 	stw	r10,0(r2)
80208518:	003e8c06 	br	80207f4c <__reset+0xfa1e7f4c>
8020851c:	21003fcc 	andi	r4,r4,255
80208520:	2003511e 	bne	r4,zero,80209268 <___vfiprintf_internal_r+0x13f0>
80208524:	a080080c 	andi	r2,r20,32
80208528:	1000a126 	beq	r2,zero,802087b0 <___vfiprintf_internal_r+0x938>
8020852c:	da802217 	ldw	r10,136(sp)
80208530:	d8001d85 	stb	zero,118(sp)
80208534:	50800204 	addi	r2,r10,8
80208538:	54800017 	ldw	r18,0(r10)
8020853c:	54c00117 	ldw	r19,4(r10)
80208540:	4802b416 	blt	r9,zero,80209014 <___vfiprintf_internal_r+0x119c>
80208544:	013fdfc4 	movi	r4,-129
80208548:	94c6b03a 	or	r3,r18,r19
8020854c:	d8802215 	stw	r2,136(sp)
80208550:	a128703a 	and	r20,r20,r4
80208554:	1800a226 	beq	r3,zero,802087e0 <___vfiprintf_internal_r+0x968>
80208558:	0039883a 	mov	fp,zero
8020855c:	dd401a04 	addi	r21,sp,104
80208560:	9006d0fa 	srli	r3,r18,3
80208564:	9808977a 	slli	r4,r19,29
80208568:	9826d0fa 	srli	r19,r19,3
8020856c:	948001cc 	andi	r18,r18,7
80208570:	90800c04 	addi	r2,r18,48
80208574:	ad7fffc4 	addi	r21,r21,-1
80208578:	20e4b03a 	or	r18,r4,r3
8020857c:	a8800005 	stb	r2,0(r21)
80208580:	94c6b03a 	or	r3,r18,r19
80208584:	183ff61e 	bne	r3,zero,80208560 <__reset+0xfa1e8560>
80208588:	a0c0004c 	andi	r3,r20,1
8020858c:	18005926 	beq	r3,zero,802086f4 <___vfiprintf_internal_r+0x87c>
80208590:	10803fcc 	andi	r2,r2,255
80208594:	1080201c 	xori	r2,r2,128
80208598:	10bfe004 	addi	r2,r2,-128
8020859c:	00c00c04 	movi	r3,48
802085a0:	10c05426 	beq	r2,r3,802086f4 <___vfiprintf_internal_r+0x87c>
802085a4:	da801e17 	ldw	r10,120(sp)
802085a8:	a8bfffc4 	addi	r2,r21,-1
802085ac:	a8ffffc5 	stb	r3,-1(r21)
802085b0:	50a7c83a 	sub	r19,r10,r2
802085b4:	102b883a 	mov	r21,r2
802085b8:	003f2f06 	br	80208278 <__reset+0xfa1e8278>
802085bc:	21003fcc 	andi	r4,r4,255
802085c0:	2003421e 	bne	r4,zero,802092cc <___vfiprintf_internal_r+0x1454>
802085c4:	00a00874 	movhi	r2,32801
802085c8:	1088ac04 	addi	r2,r2,8880
802085cc:	d8802615 	stw	r2,152(sp)
802085d0:	a080080c 	andi	r2,r20,32
802085d4:	1000aa26 	beq	r2,zero,80208880 <___vfiprintf_internal_r+0xa08>
802085d8:	da802217 	ldw	r10,136(sp)
802085dc:	54800017 	ldw	r18,0(r10)
802085e0:	54c00117 	ldw	r19,4(r10)
802085e4:	52800204 	addi	r10,r10,8
802085e8:	da802215 	stw	r10,136(sp)
802085ec:	a080004c 	andi	r2,r20,1
802085f0:	1001d226 	beq	r2,zero,80208d3c <___vfiprintf_internal_r+0xec4>
802085f4:	94c4b03a 	or	r2,r18,r19
802085f8:	1002351e 	bne	r2,zero,80208ed0 <___vfiprintf_internal_r+0x1058>
802085fc:	d8001d85 	stb	zero,118(sp)
80208600:	48022216 	blt	r9,zero,80208e8c <___vfiprintf_internal_r+0x1014>
80208604:	00bfdfc4 	movi	r2,-129
80208608:	a0a8703a 	and	r20,r20,r2
8020860c:	003f1506 	br	80208264 <__reset+0xfa1e8264>
80208610:	da802217 	ldw	r10,136(sp)
80208614:	04800044 	movi	r18,1
80208618:	d8001d85 	stb	zero,118(sp)
8020861c:	50800017 	ldw	r2,0(r10)
80208620:	52800104 	addi	r10,r10,4
80208624:	da802215 	stw	r10,136(sp)
80208628:	d8801005 	stb	r2,64(sp)
8020862c:	9027883a 	mov	r19,r18
80208630:	dd401004 	addi	r21,sp,64
80208634:	0013883a 	mov	r9,zero
80208638:	003f1706 	br	80208298 <__reset+0xfa1e8298>
8020863c:	21003fcc 	andi	r4,r4,255
80208640:	2003201e 	bne	r4,zero,802092c4 <___vfiprintf_internal_r+0x144c>
80208644:	a080080c 	andi	r2,r20,32
80208648:	10004b26 	beq	r2,zero,80208778 <___vfiprintf_internal_r+0x900>
8020864c:	da802217 	ldw	r10,136(sp)
80208650:	50800117 	ldw	r2,4(r10)
80208654:	54800017 	ldw	r18,0(r10)
80208658:	52800204 	addi	r10,r10,8
8020865c:	da802215 	stw	r10,136(sp)
80208660:	1027883a 	mov	r19,r2
80208664:	10022c16 	blt	r2,zero,80208f18 <___vfiprintf_internal_r+0x10a0>
80208668:	df001d83 	ldbu	fp,118(sp)
8020866c:	48007216 	blt	r9,zero,80208838 <___vfiprintf_internal_r+0x9c0>
80208670:	00ffdfc4 	movi	r3,-129
80208674:	94c4b03a 	or	r2,r18,r19
80208678:	a0e8703a 	and	r20,r20,r3
8020867c:	1000cc26 	beq	r2,zero,802089b0 <___vfiprintf_internal_r+0xb38>
80208680:	98021026 	beq	r19,zero,80208ec4 <___vfiprintf_internal_r+0x104c>
80208684:	dc402415 	stw	r17,144(sp)
80208688:	dc002515 	stw	r16,148(sp)
8020868c:	9823883a 	mov	r17,r19
80208690:	9021883a 	mov	r16,r18
80208694:	dd401a04 	addi	r21,sp,104
80208698:	4825883a 	mov	r18,r9
8020869c:	4027883a 	mov	r19,r8
802086a0:	8009883a 	mov	r4,r16
802086a4:	880b883a 	mov	r5,r17
802086a8:	01800284 	movi	r6,10
802086ac:	000f883a 	mov	r7,zero
802086b0:	020a2580 	call	8020a258 <__umoddi3>
802086b4:	10800c04 	addi	r2,r2,48
802086b8:	ad7fffc4 	addi	r21,r21,-1
802086bc:	8009883a 	mov	r4,r16
802086c0:	880b883a 	mov	r5,r17
802086c4:	a8800005 	stb	r2,0(r21)
802086c8:	01800284 	movi	r6,10
802086cc:	000f883a 	mov	r7,zero
802086d0:	0209ce00 	call	80209ce0 <__udivdi3>
802086d4:	1021883a 	mov	r16,r2
802086d8:	10c4b03a 	or	r2,r2,r3
802086dc:	1823883a 	mov	r17,r3
802086e0:	103fef1e 	bne	r2,zero,802086a0 <__reset+0xfa1e86a0>
802086e4:	dc402417 	ldw	r17,144(sp)
802086e8:	dc002517 	ldw	r16,148(sp)
802086ec:	9013883a 	mov	r9,r18
802086f0:	9811883a 	mov	r8,r19
802086f4:	da801e17 	ldw	r10,120(sp)
802086f8:	5567c83a 	sub	r19,r10,r21
802086fc:	003ede06 	br	80208278 <__reset+0xfa1e8278>
80208700:	38803fcc 	andi	r2,r7,255
80208704:	1080201c 	xori	r2,r2,128
80208708:	10bfe004 	addi	r2,r2,-128
8020870c:	1002371e 	bne	r2,zero,80208fec <___vfiprintf_internal_r+0x1174>
80208710:	01000044 	movi	r4,1
80208714:	01c00804 	movi	r7,32
80208718:	80c00007 	ldb	r3,0(r16)
8020871c:	003e3506 	br	80207ff4 <__reset+0xfa1e7ff4>
80208720:	a5000054 	ori	r20,r20,1
80208724:	80c00007 	ldb	r3,0(r16)
80208728:	003e3206 	br	80207ff4 <__reset+0xfa1e7ff4>
8020872c:	a5002014 	ori	r20,r20,128
80208730:	80c00007 	ldb	r3,0(r16)
80208734:	003e2f06 	br	80207ff4 <__reset+0xfa1e7ff4>
80208738:	8015883a 	mov	r10,r16
8020873c:	0023883a 	mov	r17,zero
80208740:	18bff404 	addi	r2,r3,-48
80208744:	50c00007 	ldb	r3,0(r10)
80208748:	8c4002a4 	muli	r17,r17,10
8020874c:	84000044 	addi	r16,r16,1
80208750:	8015883a 	mov	r10,r16
80208754:	1463883a 	add	r17,r2,r17
80208758:	18bff404 	addi	r2,r3,-48
8020875c:	30bff92e 	bgeu	r6,r2,80208744 <__reset+0xfa1e8744>
80208760:	003e2506 	br	80207ff8 <__reset+0xfa1e7ff8>
80208764:	21003fcc 	andi	r4,r4,255
80208768:	2002d41e 	bne	r4,zero,802092bc <___vfiprintf_internal_r+0x1444>
8020876c:	a5000414 	ori	r20,r20,16
80208770:	a080080c 	andi	r2,r20,32
80208774:	103fb51e 	bne	r2,zero,8020864c <__reset+0xfa1e864c>
80208778:	a080040c 	andi	r2,r20,16
8020877c:	1001f826 	beq	r2,zero,80208f60 <___vfiprintf_internal_r+0x10e8>
80208780:	da802217 	ldw	r10,136(sp)
80208784:	54800017 	ldw	r18,0(r10)
80208788:	52800104 	addi	r10,r10,4
8020878c:	da802215 	stw	r10,136(sp)
80208790:	9027d7fa 	srai	r19,r18,31
80208794:	9805883a 	mov	r2,r19
80208798:	003fb206 	br	80208664 <__reset+0xfa1e8664>
8020879c:	21003fcc 	andi	r4,r4,255
802087a0:	2002c41e 	bne	r4,zero,802092b4 <___vfiprintf_internal_r+0x143c>
802087a4:	a5000414 	ori	r20,r20,16
802087a8:	a080080c 	andi	r2,r20,32
802087ac:	103f5f1e 	bne	r2,zero,8020852c <__reset+0xfa1e852c>
802087b0:	a080040c 	andi	r2,r20,16
802087b4:	10020f26 	beq	r2,zero,80208ff4 <___vfiprintf_internal_r+0x117c>
802087b8:	da802217 	ldw	r10,136(sp)
802087bc:	d8001d85 	stb	zero,118(sp)
802087c0:	0027883a 	mov	r19,zero
802087c4:	50800104 	addi	r2,r10,4
802087c8:	54800017 	ldw	r18,0(r10)
802087cc:	48021116 	blt	r9,zero,80209014 <___vfiprintf_internal_r+0x119c>
802087d0:	00ffdfc4 	movi	r3,-129
802087d4:	d8802215 	stw	r2,136(sp)
802087d8:	a0e8703a 	and	r20,r20,r3
802087dc:	903f5e1e 	bne	r18,zero,80208558 <__reset+0xfa1e8558>
802087e0:	0039883a 	mov	fp,zero
802087e4:	4802a626 	beq	r9,zero,80209280 <___vfiprintf_internal_r+0x1408>
802087e8:	0025883a 	mov	r18,zero
802087ec:	0027883a 	mov	r19,zero
802087f0:	003f5a06 	br	8020855c <__reset+0xfa1e855c>
802087f4:	21003fcc 	andi	r4,r4,255
802087f8:	20029f1e 	bne	r4,zero,80209278 <___vfiprintf_internal_r+0x1400>
802087fc:	a5000414 	ori	r20,r20,16
80208800:	a080080c 	andi	r2,r20,32
80208804:	10005e1e 	bne	r2,zero,80208980 <___vfiprintf_internal_r+0xb08>
80208808:	a080040c 	andi	r2,r20,16
8020880c:	1001a21e 	bne	r2,zero,80208e98 <___vfiprintf_internal_r+0x1020>
80208810:	a080100c 	andi	r2,r20,64
80208814:	d8001d85 	stb	zero,118(sp)
80208818:	da802217 	ldw	r10,136(sp)
8020881c:	1002231e 	bne	r2,zero,802090ac <___vfiprintf_internal_r+0x1234>
80208820:	50800104 	addi	r2,r10,4
80208824:	54800017 	ldw	r18,0(r10)
80208828:	0027883a 	mov	r19,zero
8020882c:	4801a00e 	bge	r9,zero,80208eb0 <___vfiprintf_internal_r+0x1038>
80208830:	d8802215 	stw	r2,136(sp)
80208834:	0039883a 	mov	fp,zero
80208838:	94c4b03a 	or	r2,r18,r19
8020883c:	103f901e 	bne	r2,zero,80208680 <__reset+0xfa1e8680>
80208840:	00800044 	movi	r2,1
80208844:	10803fcc 	andi	r2,r2,255
80208848:	00c00044 	movi	r3,1
8020884c:	10c05926 	beq	r2,r3,802089b4 <___vfiprintf_internal_r+0xb3c>
80208850:	00c00084 	movi	r3,2
80208854:	10ffe41e 	bne	r2,r3,802087e8 <__reset+0xfa1e87e8>
80208858:	0025883a 	mov	r18,zero
8020885c:	0027883a 	mov	r19,zero
80208860:	00013d06 	br	80208d58 <___vfiprintf_internal_r+0xee0>
80208864:	21003fcc 	andi	r4,r4,255
80208868:	2002811e 	bne	r4,zero,80209270 <___vfiprintf_internal_r+0x13f8>
8020886c:	00a00874 	movhi	r2,32801
80208870:	1088a704 	addi	r2,r2,8860
80208874:	d8802615 	stw	r2,152(sp)
80208878:	a080080c 	andi	r2,r20,32
8020887c:	103f561e 	bne	r2,zero,802085d8 <__reset+0xfa1e85d8>
80208880:	a080040c 	andi	r2,r20,16
80208884:	1001d126 	beq	r2,zero,80208fcc <___vfiprintf_internal_r+0x1154>
80208888:	da802217 	ldw	r10,136(sp)
8020888c:	0027883a 	mov	r19,zero
80208890:	54800017 	ldw	r18,0(r10)
80208894:	52800104 	addi	r10,r10,4
80208898:	da802215 	stw	r10,136(sp)
8020889c:	003f5306 	br	802085ec <__reset+0xfa1e85ec>
802088a0:	da802217 	ldw	r10,136(sp)
802088a4:	d8001d85 	stb	zero,118(sp)
802088a8:	55400017 	ldw	r21,0(r10)
802088ac:	50c00104 	addi	r3,r10,4
802088b0:	a8024226 	beq	r21,zero,802091bc <___vfiprintf_internal_r+0x1344>
802088b4:	48021816 	blt	r9,zero,80209118 <___vfiprintf_internal_r+0x12a0>
802088b8:	480d883a 	mov	r6,r9
802088bc:	000b883a 	mov	r5,zero
802088c0:	a809883a 	mov	r4,r21
802088c4:	d8c02a15 	stw	r3,168(sp)
802088c8:	da002b15 	stw	r8,172(sp)
802088cc:	da402c15 	stw	r9,176(sp)
802088d0:	02060540 	call	80206054 <memchr>
802088d4:	d8c02a17 	ldw	r3,168(sp)
802088d8:	da002b17 	ldw	r8,172(sp)
802088dc:	da402c17 	ldw	r9,176(sp)
802088e0:	10024826 	beq	r2,zero,80209204 <___vfiprintf_internal_r+0x138c>
802088e4:	1567c83a 	sub	r19,r2,r21
802088e8:	df001d83 	ldbu	fp,118(sp)
802088ec:	d8c02215 	stw	r3,136(sp)
802088f0:	0013883a 	mov	r9,zero
802088f4:	003e6006 	br	80208278 <__reset+0xfa1e8278>
802088f8:	21003fcc 	andi	r4,r4,255
802088fc:	203fc026 	beq	r4,zero,80208800 <__reset+0xfa1e8800>
80208900:	d9c01d85 	stb	r7,118(sp)
80208904:	003fbe06 	br	80208800 <__reset+0xfa1e8800>
80208908:	da802217 	ldw	r10,136(sp)
8020890c:	54400017 	ldw	r17,0(r10)
80208910:	50800104 	addi	r2,r10,4
80208914:	883e3b16 	blt	r17,zero,80208204 <__reset+0xfa1e8204>
80208918:	d8802215 	stw	r2,136(sp)
8020891c:	80c00007 	ldb	r3,0(r16)
80208920:	003db406 	br	80207ff4 <__reset+0xfa1e7ff4>
80208924:	01000044 	movi	r4,1
80208928:	01c00ac4 	movi	r7,43
8020892c:	80c00007 	ldb	r3,0(r16)
80208930:	003db006 	br	80207ff4 <__reset+0xfa1e7ff4>
80208934:	80c00007 	ldb	r3,0(r16)
80208938:	82800044 	addi	r10,r16,1
8020893c:	1b423c26 	beq	r3,r13,80209230 <___vfiprintf_internal_r+0x13b8>
80208940:	18bff404 	addi	r2,r3,-48
80208944:	0013883a 	mov	r9,zero
80208948:	30822b36 	bltu	r6,r2,802091f8 <___vfiprintf_internal_r+0x1380>
8020894c:	50c00007 	ldb	r3,0(r10)
80208950:	4a4002a4 	muli	r9,r9,10
80208954:	54000044 	addi	r16,r10,1
80208958:	8015883a 	mov	r10,r16
8020895c:	4893883a 	add	r9,r9,r2
80208960:	18bff404 	addi	r2,r3,-48
80208964:	30bff92e 	bgeu	r6,r2,8020894c <__reset+0xfa1e894c>
80208968:	483da30e 	bge	r9,zero,80207ff8 <__reset+0xfa1e7ff8>
8020896c:	027fffc4 	movi	r9,-1
80208970:	003da106 	br	80207ff8 <__reset+0xfa1e7ff8>
80208974:	a5001014 	ori	r20,r20,64
80208978:	80c00007 	ldb	r3,0(r16)
8020897c:	003d9d06 	br	80207ff4 <__reset+0xfa1e7ff4>
80208980:	da802217 	ldw	r10,136(sp)
80208984:	d8001d85 	stb	zero,118(sp)
80208988:	50c00204 	addi	r3,r10,8
8020898c:	54800017 	ldw	r18,0(r10)
80208990:	54c00117 	ldw	r19,4(r10)
80208994:	4801ca16 	blt	r9,zero,802090c0 <___vfiprintf_internal_r+0x1248>
80208998:	013fdfc4 	movi	r4,-129
8020899c:	94c4b03a 	or	r2,r18,r19
802089a0:	d8c02215 	stw	r3,136(sp)
802089a4:	a128703a 	and	r20,r20,r4
802089a8:	0039883a 	mov	fp,zero
802089ac:	103f341e 	bne	r2,zero,80208680 <__reset+0xfa1e8680>
802089b0:	483e2e26 	beq	r9,zero,8020826c <__reset+0xfa1e826c>
802089b4:	0025883a 	mov	r18,zero
802089b8:	94800c04 	addi	r18,r18,48
802089bc:	dc8019c5 	stb	r18,103(sp)
802089c0:	dcc02717 	ldw	r19,156(sp)
802089c4:	dd4019c4 	addi	r21,sp,103
802089c8:	003e2b06 	br	80208278 <__reset+0xfa1e8278>
802089cc:	21003fcc 	andi	r4,r4,255
802089d0:	2002361e 	bne	r4,zero,802092ac <___vfiprintf_internal_r+0x1434>
802089d4:	1801c126 	beq	r3,zero,802090dc <___vfiprintf_internal_r+0x1264>
802089d8:	04800044 	movi	r18,1
802089dc:	d8c01005 	stb	r3,64(sp)
802089e0:	d8001d85 	stb	zero,118(sp)
802089e4:	9027883a 	mov	r19,r18
802089e8:	dd401004 	addi	r21,sp,64
802089ec:	003f1106 	br	80208634 <__reset+0xfa1e8634>
802089f0:	d9402117 	ldw	r5,132(sp)
802089f4:	d9002017 	ldw	r4,128(sp)
802089f8:	d9801a04 	addi	r6,sp,104
802089fc:	d9c02b15 	stw	r7,172(sp)
80208a00:	dbc02a15 	stw	r15,168(sp)
80208a04:	0207d640 	call	80207d64 <__sprint_r.part.0>
80208a08:	d9c02b17 	ldw	r7,172(sp)
80208a0c:	dbc02a17 	ldw	r15,168(sp)
80208a10:	10006d1e 	bne	r2,zero,80208bc8 <___vfiprintf_internal_r+0xd50>
80208a14:	d9801b17 	ldw	r6,108(sp)
80208a18:	d8801c17 	ldw	r2,112(sp)
80208a1c:	d811883a 	mov	r8,sp
80208a20:	31400044 	addi	r5,r6,1
80208a24:	003e3306 	br	802082f4 <__reset+0xfa1e82f4>
80208a28:	d9401b17 	ldw	r5,108(sp)
80208a2c:	d8801c17 	ldw	r2,112(sp)
80208a30:	29000044 	addi	r4,r5,1
80208a34:	d8c01d87 	ldb	r3,118(sp)
80208a38:	183e4d26 	beq	r3,zero,80208370 <__reset+0xfa1e8370>
80208a3c:	00c00044 	movi	r3,1
80208a40:	d9401d84 	addi	r5,sp,118
80208a44:	10c5883a 	add	r2,r2,r3
80208a48:	41400015 	stw	r5,0(r8)
80208a4c:	40c00115 	stw	r3,4(r8)
80208a50:	d8801c15 	stw	r2,112(sp)
80208a54:	d9001b15 	stw	r4,108(sp)
80208a58:	014001c4 	movi	r5,7
80208a5c:	2900a90e 	bge	r5,r4,80208d04 <___vfiprintf_internal_r+0xe8c>
80208a60:	1000da1e 	bne	r2,zero,80208dcc <___vfiprintf_internal_r+0xf54>
80208a64:	7000ab1e 	bne	r14,zero,80208d14 <___vfiprintf_internal_r+0xe9c>
80208a68:	000b883a 	mov	r5,zero
80208a6c:	1809883a 	mov	r4,r3
80208a70:	d811883a 	mov	r8,sp
80208a74:	00c02004 	movi	r3,128
80208a78:	e0fe4d26 	beq	fp,r3,802083b0 <__reset+0xfa1e83b0>
80208a7c:	4cf9c83a 	sub	fp,r9,r19
80208a80:	073e7b0e 	bge	zero,fp,80208470 <__reset+0xfa1e8470>
80208a84:	01c00404 	movi	r7,16
80208a88:	3f01900e 	bge	r7,fp,802090cc <___vfiprintf_internal_r+0x1254>
80208a8c:	00e00874 	movhi	r3,32801
80208a90:	18c90d04 	addi	r3,r3,9268
80208a94:	d8c02415 	stw	r3,144(sp)
80208a98:	034001c4 	movi	r13,7
80208a9c:	00000506 	br	80208ab4 <___vfiprintf_internal_r+0xc3c>
80208aa0:	29000084 	addi	r4,r5,2
80208aa4:	42000204 	addi	r8,r8,8
80208aa8:	180b883a 	mov	r5,r3
80208aac:	e73ffc04 	addi	fp,fp,-16
80208ab0:	3f000d0e 	bge	r7,fp,80208ae8 <___vfiprintf_internal_r+0xc70>
80208ab4:	10800404 	addi	r2,r2,16
80208ab8:	28c00044 	addi	r3,r5,1
80208abc:	45c00015 	stw	r23,0(r8)
80208ac0:	41c00115 	stw	r7,4(r8)
80208ac4:	d8801c15 	stw	r2,112(sp)
80208ac8:	d8c01b15 	stw	r3,108(sp)
80208acc:	68fff40e 	bge	r13,r3,80208aa0 <__reset+0xfa1e8aa0>
80208ad0:	1000101e 	bne	r2,zero,80208b14 <___vfiprintf_internal_r+0xc9c>
80208ad4:	e73ffc04 	addi	fp,fp,-16
80208ad8:	01000044 	movi	r4,1
80208adc:	000b883a 	mov	r5,zero
80208ae0:	d811883a 	mov	r8,sp
80208ae4:	3f3ff316 	blt	r7,fp,80208ab4 <__reset+0xfa1e8ab4>
80208ae8:	da802417 	ldw	r10,144(sp)
80208aec:	1705883a 	add	r2,r2,fp
80208af0:	47000115 	stw	fp,4(r8)
80208af4:	42800015 	stw	r10,0(r8)
80208af8:	d8801c15 	stw	r2,112(sp)
80208afc:	d9001b15 	stw	r4,108(sp)
80208b00:	00c001c4 	movi	r3,7
80208b04:	19003616 	blt	r3,r4,80208be0 <___vfiprintf_internal_r+0xd68>
80208b08:	42000204 	addi	r8,r8,8
80208b0c:	21000044 	addi	r4,r4,1
80208b10:	003e5706 	br	80208470 <__reset+0xfa1e8470>
80208b14:	d9402117 	ldw	r5,132(sp)
80208b18:	d9002017 	ldw	r4,128(sp)
80208b1c:	d9801a04 	addi	r6,sp,104
80208b20:	d9c02b15 	stw	r7,172(sp)
80208b24:	db402a15 	stw	r13,168(sp)
80208b28:	0207d640 	call	80207d64 <__sprint_r.part.0>
80208b2c:	d9c02b17 	ldw	r7,172(sp)
80208b30:	db402a17 	ldw	r13,168(sp)
80208b34:	1000241e 	bne	r2,zero,80208bc8 <___vfiprintf_internal_r+0xd50>
80208b38:	d9401b17 	ldw	r5,108(sp)
80208b3c:	d8801c17 	ldw	r2,112(sp)
80208b40:	d811883a 	mov	r8,sp
80208b44:	29000044 	addi	r4,r5,1
80208b48:	003fd806 	br	80208aac <__reset+0xfa1e8aac>
80208b4c:	d9401b17 	ldw	r5,108(sp)
80208b50:	00e00874 	movhi	r3,32801
80208b54:	18c91104 	addi	r3,r3,9284
80208b58:	d8c02415 	stw	r3,144(sp)
80208b5c:	29400044 	addi	r5,r5,1
80208b60:	d8c02417 	ldw	r3,144(sp)
80208b64:	14c5883a 	add	r2,r2,r19
80208b68:	44c00115 	stw	r19,4(r8)
80208b6c:	40c00015 	stw	r3,0(r8)
80208b70:	d8801c15 	stw	r2,112(sp)
80208b74:	d9401b15 	stw	r5,108(sp)
80208b78:	00c001c4 	movi	r3,7
80208b7c:	1940070e 	bge	r3,r5,80208b9c <___vfiprintf_internal_r+0xd24>
80208b80:	103e4826 	beq	r2,zero,802084a4 <__reset+0xfa1e84a4>
80208b84:	d9402117 	ldw	r5,132(sp)
80208b88:	d9002017 	ldw	r4,128(sp)
80208b8c:	d9801a04 	addi	r6,sp,104
80208b90:	0207d640 	call	80207d64 <__sprint_r.part.0>
80208b94:	10000c1e 	bne	r2,zero,80208bc8 <___vfiprintf_internal_r+0xd50>
80208b98:	d8801c17 	ldw	r2,112(sp)
80208b9c:	8c80010e 	bge	r17,r18,80208ba4 <___vfiprintf_internal_r+0xd2c>
80208ba0:	9023883a 	mov	r17,r18
80208ba4:	da802317 	ldw	r10,140(sp)
80208ba8:	5455883a 	add	r10,r10,r17
80208bac:	da802315 	stw	r10,140(sp)
80208bb0:	103e4126 	beq	r2,zero,802084b8 <__reset+0xfa1e84b8>
80208bb4:	d9402117 	ldw	r5,132(sp)
80208bb8:	d9002017 	ldw	r4,128(sp)
80208bbc:	d9801a04 	addi	r6,sp,104
80208bc0:	0207d640 	call	80207d64 <__sprint_r.part.0>
80208bc4:	103e3c26 	beq	r2,zero,802084b8 <__reset+0xfa1e84b8>
80208bc8:	dd002117 	ldw	r20,132(sp)
80208bcc:	a080030b 	ldhu	r2,12(r20)
80208bd0:	1080100c 	andi	r2,r2,64
80208bd4:	1001231e 	bne	r2,zero,80209064 <___vfiprintf_internal_r+0x11ec>
80208bd8:	d8802317 	ldw	r2,140(sp)
80208bdc:	003d7b06 	br	802081cc <__reset+0xfa1e81cc>
80208be0:	1000991e 	bne	r2,zero,80208e48 <___vfiprintf_internal_r+0xfd0>
80208be4:	00c00044 	movi	r3,1
80208be8:	9805883a 	mov	r2,r19
80208bec:	dd400015 	stw	r21,0(sp)
80208bf0:	dcc00115 	stw	r19,4(sp)
80208bf4:	dcc01c15 	stw	r19,112(sp)
80208bf8:	d8c01b15 	stw	r3,108(sp)
80208bfc:	d811883a 	mov	r8,sp
80208c00:	42000204 	addi	r8,r8,8
80208c04:	a2c0010c 	andi	r11,r20,4
80208c08:	583fe426 	beq	r11,zero,80208b9c <__reset+0xfa1e8b9c>
80208c0c:	8ca7c83a 	sub	r19,r17,r18
80208c10:	04ffe20e 	bge	zero,r19,80208b9c <__reset+0xfa1e8b9c>
80208c14:	01c00404 	movi	r7,16
80208c18:	3cffcc0e 	bge	r7,r19,80208b4c <__reset+0xfa1e8b4c>
80208c1c:	02a00874 	movhi	r10,32801
80208c20:	52891104 	addi	r10,r10,9284
80208c24:	d9001b17 	ldw	r4,108(sp)
80208c28:	da802415 	stw	r10,144(sp)
80208c2c:	382b883a 	mov	r21,r7
80208c30:	050001c4 	movi	r20,7
80208c34:	df002017 	ldw	fp,128(sp)
80208c38:	00000506 	br	80208c50 <___vfiprintf_internal_r+0xdd8>
80208c3c:	21400084 	addi	r5,r4,2
80208c40:	42000204 	addi	r8,r8,8
80208c44:	1809883a 	mov	r4,r3
80208c48:	9cfffc04 	addi	r19,r19,-16
80208c4c:	acffc40e 	bge	r21,r19,80208b60 <__reset+0xfa1e8b60>
80208c50:	10800404 	addi	r2,r2,16
80208c54:	20c00044 	addi	r3,r4,1
80208c58:	45800015 	stw	r22,0(r8)
80208c5c:	45400115 	stw	r21,4(r8)
80208c60:	d8801c15 	stw	r2,112(sp)
80208c64:	d8c01b15 	stw	r3,108(sp)
80208c68:	a0fff40e 	bge	r20,r3,80208c3c <__reset+0xfa1e8c3c>
80208c6c:	1000041e 	bne	r2,zero,80208c80 <___vfiprintf_internal_r+0xe08>
80208c70:	01400044 	movi	r5,1
80208c74:	0009883a 	mov	r4,zero
80208c78:	d811883a 	mov	r8,sp
80208c7c:	003ff206 	br	80208c48 <__reset+0xfa1e8c48>
80208c80:	d9402117 	ldw	r5,132(sp)
80208c84:	d9801a04 	addi	r6,sp,104
80208c88:	e009883a 	mov	r4,fp
80208c8c:	0207d640 	call	80207d64 <__sprint_r.part.0>
80208c90:	103fcd1e 	bne	r2,zero,80208bc8 <__reset+0xfa1e8bc8>
80208c94:	d9001b17 	ldw	r4,108(sp)
80208c98:	d8801c17 	ldw	r2,112(sp)
80208c9c:	d811883a 	mov	r8,sp
80208ca0:	21400044 	addi	r5,r4,1
80208ca4:	003fe806 	br	80208c48 <__reset+0xfa1e8c48>
80208ca8:	d9402117 	ldw	r5,132(sp)
80208cac:	d9002017 	ldw	r4,128(sp)
80208cb0:	d9801a04 	addi	r6,sp,104
80208cb4:	d9c02b15 	stw	r7,172(sp)
80208cb8:	db402a15 	stw	r13,168(sp)
80208cbc:	0207d640 	call	80207d64 <__sprint_r.part.0>
80208cc0:	d9c02b17 	ldw	r7,172(sp)
80208cc4:	db402a17 	ldw	r13,168(sp)
80208cc8:	103fbf1e 	bne	r2,zero,80208bc8 <__reset+0xfa1e8bc8>
80208ccc:	d9401b17 	ldw	r5,108(sp)
80208cd0:	d8801c17 	ldw	r2,112(sp)
80208cd4:	d811883a 	mov	r8,sp
80208cd8:	29800044 	addi	r6,r5,1
80208cdc:	003dc406 	br	802083f0 <__reset+0xfa1e83f0>
80208ce0:	1000d21e 	bne	r2,zero,8020902c <___vfiprintf_internal_r+0x11b4>
80208ce4:	d8c01d87 	ldb	r3,118(sp)
80208ce8:	18009526 	beq	r3,zero,80208f40 <___vfiprintf_internal_r+0x10c8>
80208cec:	00800044 	movi	r2,1
80208cf0:	d8c01d84 	addi	r3,sp,118
80208cf4:	1009883a 	mov	r4,r2
80208cf8:	d8c00015 	stw	r3,0(sp)
80208cfc:	d8800115 	stw	r2,4(sp)
80208d00:	d811883a 	mov	r8,sp
80208d04:	200b883a 	mov	r5,r4
80208d08:	42000204 	addi	r8,r8,8
80208d0c:	21000044 	addi	r4,r4,1
80208d10:	003d9706 	br	80208370 <__reset+0xfa1e8370>
80208d14:	d9001d04 	addi	r4,sp,116
80208d18:	00800084 	movi	r2,2
80208d1c:	d9000015 	stw	r4,0(sp)
80208d20:	d8800115 	stw	r2,4(sp)
80208d24:	1809883a 	mov	r4,r3
80208d28:	d811883a 	mov	r8,sp
80208d2c:	200b883a 	mov	r5,r4
80208d30:	42000204 	addi	r8,r8,8
80208d34:	21000044 	addi	r4,r4,1
80208d38:	003f4e06 	br	80208a74 <__reset+0xfa1e8a74>
80208d3c:	d8001d85 	stb	zero,118(sp)
80208d40:	48005016 	blt	r9,zero,80208e84 <___vfiprintf_internal_r+0x100c>
80208d44:	00ffdfc4 	movi	r3,-129
80208d48:	94c4b03a 	or	r2,r18,r19
80208d4c:	a0e8703a 	and	r20,r20,r3
80208d50:	103d4426 	beq	r2,zero,80208264 <__reset+0xfa1e8264>
80208d54:	0039883a 	mov	fp,zero
80208d58:	d9002617 	ldw	r4,152(sp)
80208d5c:	dd401a04 	addi	r21,sp,104
80208d60:	908003cc 	andi	r2,r18,15
80208d64:	9806973a 	slli	r3,r19,28
80208d68:	2085883a 	add	r2,r4,r2
80208d6c:	9024d13a 	srli	r18,r18,4
80208d70:	10800003 	ldbu	r2,0(r2)
80208d74:	9826d13a 	srli	r19,r19,4
80208d78:	ad7fffc4 	addi	r21,r21,-1
80208d7c:	1ca4b03a 	or	r18,r3,r18
80208d80:	a8800005 	stb	r2,0(r21)
80208d84:	94c4b03a 	or	r2,r18,r19
80208d88:	103ff51e 	bne	r2,zero,80208d60 <__reset+0xfa1e8d60>
80208d8c:	003e5906 	br	802086f4 <__reset+0xfa1e86f4>
80208d90:	d9402117 	ldw	r5,132(sp)
80208d94:	d9002017 	ldw	r4,128(sp)
80208d98:	d9801a04 	addi	r6,sp,104
80208d9c:	0207d640 	call	80207d64 <__sprint_r.part.0>
80208da0:	103f891e 	bne	r2,zero,80208bc8 <__reset+0xfa1e8bc8>
80208da4:	d8801c17 	ldw	r2,112(sp)
80208da8:	d811883a 	mov	r8,sp
80208dac:	003f9506 	br	80208c04 <__reset+0xfa1e8c04>
80208db0:	d9402117 	ldw	r5,132(sp)
80208db4:	d9002017 	ldw	r4,128(sp)
80208db8:	d9801a04 	addi	r6,sp,104
80208dbc:	0207d640 	call	80207d64 <__sprint_r.part.0>
80208dc0:	103f811e 	bne	r2,zero,80208bc8 <__reset+0xfa1e8bc8>
80208dc4:	d811883a 	mov	r8,sp
80208dc8:	003ced06 	br	80208180 <__reset+0xfa1e8180>
80208dcc:	d9402117 	ldw	r5,132(sp)
80208dd0:	d9002017 	ldw	r4,128(sp)
80208dd4:	d9801a04 	addi	r6,sp,104
80208dd8:	da402c15 	stw	r9,176(sp)
80208ddc:	db802a15 	stw	r14,168(sp)
80208de0:	0207d640 	call	80207d64 <__sprint_r.part.0>
80208de4:	da402c17 	ldw	r9,176(sp)
80208de8:	db802a17 	ldw	r14,168(sp)
80208dec:	103f761e 	bne	r2,zero,80208bc8 <__reset+0xfa1e8bc8>
80208df0:	d9401b17 	ldw	r5,108(sp)
80208df4:	d8801c17 	ldw	r2,112(sp)
80208df8:	d811883a 	mov	r8,sp
80208dfc:	29000044 	addi	r4,r5,1
80208e00:	003d5b06 	br	80208370 <__reset+0xfa1e8370>
80208e04:	d9402117 	ldw	r5,132(sp)
80208e08:	d9002017 	ldw	r4,128(sp)
80208e0c:	d9801a04 	addi	r6,sp,104
80208e10:	da402c15 	stw	r9,176(sp)
80208e14:	0207d640 	call	80207d64 <__sprint_r.part.0>
80208e18:	da402c17 	ldw	r9,176(sp)
80208e1c:	103f6a1e 	bne	r2,zero,80208bc8 <__reset+0xfa1e8bc8>
80208e20:	d9401b17 	ldw	r5,108(sp)
80208e24:	d8801c17 	ldw	r2,112(sp)
80208e28:	d811883a 	mov	r8,sp
80208e2c:	29000044 	addi	r4,r5,1
80208e30:	003f1006 	br	80208a74 <__reset+0xfa1e8a74>
80208e34:	1000c31e 	bne	r2,zero,80209144 <___vfiprintf_internal_r+0x12cc>
80208e38:	01000044 	movi	r4,1
80208e3c:	000b883a 	mov	r5,zero
80208e40:	d811883a 	mov	r8,sp
80208e44:	003f0d06 	br	80208a7c <__reset+0xfa1e8a7c>
80208e48:	d9402117 	ldw	r5,132(sp)
80208e4c:	d9002017 	ldw	r4,128(sp)
80208e50:	d9801a04 	addi	r6,sp,104
80208e54:	0207d640 	call	80207d64 <__sprint_r.part.0>
80208e58:	103f5b1e 	bne	r2,zero,80208bc8 <__reset+0xfa1e8bc8>
80208e5c:	d9001b17 	ldw	r4,108(sp)
80208e60:	d8801c17 	ldw	r2,112(sp)
80208e64:	d811883a 	mov	r8,sp
80208e68:	21000044 	addi	r4,r4,1
80208e6c:	003d8006 	br	80208470 <__reset+0xfa1e8470>
80208e70:	01200874 	movhi	r4,32801
80208e74:	2108ac04 	addi	r4,r4,8880
80208e78:	d9002615 	stw	r4,152(sp)
80208e7c:	d8c02215 	stw	r3,136(sp)
80208e80:	1029883a 	mov	r20,r2
80208e84:	94c4b03a 	or	r2,r18,r19
80208e88:	103fb21e 	bne	r2,zero,80208d54 <__reset+0xfa1e8d54>
80208e8c:	0039883a 	mov	fp,zero
80208e90:	00800084 	movi	r2,2
80208e94:	003e6b06 	br	80208844 <__reset+0xfa1e8844>
80208e98:	da802217 	ldw	r10,136(sp)
80208e9c:	d8001d85 	stb	zero,118(sp)
80208ea0:	0027883a 	mov	r19,zero
80208ea4:	50800104 	addi	r2,r10,4
80208ea8:	54800017 	ldw	r18,0(r10)
80208eac:	483e6016 	blt	r9,zero,80208830 <__reset+0xfa1e8830>
80208eb0:	00ffdfc4 	movi	r3,-129
80208eb4:	d8802215 	stw	r2,136(sp)
80208eb8:	a0e8703a 	and	r20,r20,r3
80208ebc:	0039883a 	mov	fp,zero
80208ec0:	903ebb26 	beq	r18,zero,802089b0 <__reset+0xfa1e89b0>
80208ec4:	00800244 	movi	r2,9
80208ec8:	14bdee36 	bltu	r2,r18,80208684 <__reset+0xfa1e8684>
80208ecc:	003eba06 	br	802089b8 <__reset+0xfa1e89b8>
80208ed0:	00800c04 	movi	r2,48
80208ed4:	d8c01d45 	stb	r3,117(sp)
80208ed8:	d8801d05 	stb	r2,116(sp)
80208edc:	d8001d85 	stb	zero,118(sp)
80208ee0:	a0c00094 	ori	r3,r20,2
80208ee4:	4800a916 	blt	r9,zero,8020918c <___vfiprintf_internal_r+0x1314>
80208ee8:	00bfdfc4 	movi	r2,-129
80208eec:	a096703a 	and	r11,r20,r2
80208ef0:	5d000094 	ori	r20,r11,2
80208ef4:	0039883a 	mov	fp,zero
80208ef8:	003f9706 	br	80208d58 <__reset+0xfa1e8d58>
80208efc:	8025883a 	mov	r18,r16
80208f00:	003c2e06 	br	80207fbc <__reset+0xfa1e7fbc>
80208f04:	00a00874 	movhi	r2,32801
80208f08:	1088ac04 	addi	r2,r2,8880
80208f0c:	0039883a 	mov	fp,zero
80208f10:	d8802615 	stw	r2,152(sp)
80208f14:	003f9006 	br	80208d58 <__reset+0xfa1e8d58>
80208f18:	04a5c83a 	sub	r18,zero,r18
80208f1c:	07000b44 	movi	fp,45
80208f20:	9004c03a 	cmpne	r2,r18,zero
80208f24:	04e7c83a 	sub	r19,zero,r19
80208f28:	df001d85 	stb	fp,118(sp)
80208f2c:	98a7c83a 	sub	r19,r19,r2
80208f30:	48009f16 	blt	r9,zero,802091b0 <___vfiprintf_internal_r+0x1338>
80208f34:	00bfdfc4 	movi	r2,-129
80208f38:	a0a8703a 	and	r20,r20,r2
80208f3c:	003dd006 	br	80208680 <__reset+0xfa1e8680>
80208f40:	70004c26 	beq	r14,zero,80209074 <___vfiprintf_internal_r+0x11fc>
80208f44:	00800084 	movi	r2,2
80208f48:	d8c01d04 	addi	r3,sp,116
80208f4c:	d8c00015 	stw	r3,0(sp)
80208f50:	d8800115 	stw	r2,4(sp)
80208f54:	01000044 	movi	r4,1
80208f58:	d811883a 	mov	r8,sp
80208f5c:	003f7306 	br	80208d2c <__reset+0xfa1e8d2c>
80208f60:	a080100c 	andi	r2,r20,64
80208f64:	da802217 	ldw	r10,136(sp)
80208f68:	103e0626 	beq	r2,zero,80208784 <__reset+0xfa1e8784>
80208f6c:	5480000f 	ldh	r18,0(r10)
80208f70:	52800104 	addi	r10,r10,4
80208f74:	da802215 	stw	r10,136(sp)
80208f78:	9027d7fa 	srai	r19,r18,31
80208f7c:	9805883a 	mov	r2,r19
80208f80:	003db806 	br	80208664 <__reset+0xfa1e8664>
80208f84:	a080040c 	andi	r2,r20,16
80208f88:	1000091e 	bne	r2,zero,80208fb0 <___vfiprintf_internal_r+0x1138>
80208f8c:	a2c0100c 	andi	r11,r20,64
80208f90:	58000726 	beq	r11,zero,80208fb0 <___vfiprintf_internal_r+0x1138>
80208f94:	da802217 	ldw	r10,136(sp)
80208f98:	50800017 	ldw	r2,0(r10)
80208f9c:	52800104 	addi	r10,r10,4
80208fa0:	da802215 	stw	r10,136(sp)
80208fa4:	da802317 	ldw	r10,140(sp)
80208fa8:	1280000d 	sth	r10,0(r2)
80208fac:	003be706 	br	80207f4c <__reset+0xfa1e7f4c>
80208fb0:	da802217 	ldw	r10,136(sp)
80208fb4:	50800017 	ldw	r2,0(r10)
80208fb8:	52800104 	addi	r10,r10,4
80208fbc:	da802215 	stw	r10,136(sp)
80208fc0:	da802317 	ldw	r10,140(sp)
80208fc4:	12800015 	stw	r10,0(r2)
80208fc8:	003be006 	br	80207f4c <__reset+0xfa1e7f4c>
80208fcc:	a080100c 	andi	r2,r20,64
80208fd0:	da802217 	ldw	r10,136(sp)
80208fd4:	10003026 	beq	r2,zero,80209098 <___vfiprintf_internal_r+0x1220>
80208fd8:	5480000b 	ldhu	r18,0(r10)
80208fdc:	52800104 	addi	r10,r10,4
80208fe0:	0027883a 	mov	r19,zero
80208fe4:	da802215 	stw	r10,136(sp)
80208fe8:	003d8006 	br	802085ec <__reset+0xfa1e85ec>
80208fec:	80c00007 	ldb	r3,0(r16)
80208ff0:	003c0006 	br	80207ff4 <__reset+0xfa1e7ff4>
80208ff4:	a080100c 	andi	r2,r20,64
80208ff8:	d8001d85 	stb	zero,118(sp)
80208ffc:	da802217 	ldw	r10,136(sp)
80209000:	1000201e 	bne	r2,zero,80209084 <___vfiprintf_internal_r+0x120c>
80209004:	50800104 	addi	r2,r10,4
80209008:	54800017 	ldw	r18,0(r10)
8020900c:	0027883a 	mov	r19,zero
80209010:	483def0e 	bge	r9,zero,802087d0 <__reset+0xfa1e87d0>
80209014:	94c6b03a 	or	r3,r18,r19
80209018:	d8802215 	stw	r2,136(sp)
8020901c:	183d4e1e 	bne	r3,zero,80208558 <__reset+0xfa1e8558>
80209020:	0039883a 	mov	fp,zero
80209024:	0005883a 	mov	r2,zero
80209028:	003e0606 	br	80208844 <__reset+0xfa1e8844>
8020902c:	d9402117 	ldw	r5,132(sp)
80209030:	d9002017 	ldw	r4,128(sp)
80209034:	d9801a04 	addi	r6,sp,104
80209038:	da402c15 	stw	r9,176(sp)
8020903c:	db802a15 	stw	r14,168(sp)
80209040:	0207d640 	call	80207d64 <__sprint_r.part.0>
80209044:	da402c17 	ldw	r9,176(sp)
80209048:	db802a17 	ldw	r14,168(sp)
8020904c:	103ede1e 	bne	r2,zero,80208bc8 <__reset+0xfa1e8bc8>
80209050:	d9401b17 	ldw	r5,108(sp)
80209054:	d8801c17 	ldw	r2,112(sp)
80209058:	d811883a 	mov	r8,sp
8020905c:	29000044 	addi	r4,r5,1
80209060:	003e7406 	br	80208a34 <__reset+0xfa1e8a34>
80209064:	00bfffc4 	movi	r2,-1
80209068:	003c5806 	br	802081cc <__reset+0xfa1e81cc>
8020906c:	d811883a 	mov	r8,sp
80209070:	003ee806 	br	80208c14 <__reset+0xfa1e8c14>
80209074:	000b883a 	mov	r5,zero
80209078:	01000044 	movi	r4,1
8020907c:	d811883a 	mov	r8,sp
80209080:	003e7c06 	br	80208a74 <__reset+0xfa1e8a74>
80209084:	50800104 	addi	r2,r10,4
80209088:	5480000b 	ldhu	r18,0(r10)
8020908c:	0027883a 	mov	r19,zero
80209090:	483dcf0e 	bge	r9,zero,802087d0 <__reset+0xfa1e87d0>
80209094:	003fdf06 	br	80209014 <__reset+0xfa1e9014>
80209098:	54800017 	ldw	r18,0(r10)
8020909c:	52800104 	addi	r10,r10,4
802090a0:	0027883a 	mov	r19,zero
802090a4:	da802215 	stw	r10,136(sp)
802090a8:	003d5006 	br	802085ec <__reset+0xfa1e85ec>
802090ac:	50800104 	addi	r2,r10,4
802090b0:	5480000b 	ldhu	r18,0(r10)
802090b4:	0027883a 	mov	r19,zero
802090b8:	483f7d0e 	bge	r9,zero,80208eb0 <__reset+0xfa1e8eb0>
802090bc:	003ddc06 	br	80208830 <__reset+0xfa1e8830>
802090c0:	d8c02215 	stw	r3,136(sp)
802090c4:	0039883a 	mov	fp,zero
802090c8:	003ddb06 	br	80208838 <__reset+0xfa1e8838>
802090cc:	02a00874 	movhi	r10,32801
802090d0:	52890d04 	addi	r10,r10,9268
802090d4:	da802415 	stw	r10,144(sp)
802090d8:	003e8306 	br	80208ae8 <__reset+0xfa1e8ae8>
802090dc:	d8801c17 	ldw	r2,112(sp)
802090e0:	dd002117 	ldw	r20,132(sp)
802090e4:	103eb926 	beq	r2,zero,80208bcc <__reset+0xfa1e8bcc>
802090e8:	d9002017 	ldw	r4,128(sp)
802090ec:	d9801a04 	addi	r6,sp,104
802090f0:	a00b883a 	mov	r5,r20
802090f4:	0207d640 	call	80207d64 <__sprint_r.part.0>
802090f8:	003eb406 	br	80208bcc <__reset+0xfa1e8bcc>
802090fc:	80c00043 	ldbu	r3,1(r16)
80209100:	a5000814 	ori	r20,r20,32
80209104:	84000044 	addi	r16,r16,1
80209108:	18c03fcc 	andi	r3,r3,255
8020910c:	18c0201c 	xori	r3,r3,128
80209110:	18ffe004 	addi	r3,r3,-128
80209114:	003bb706 	br	80207ff4 <__reset+0xfa1e7ff4>
80209118:	a809883a 	mov	r4,r21
8020911c:	d8c02a15 	stw	r3,168(sp)
80209120:	da002b15 	stw	r8,172(sp)
80209124:	02007ac0 	call	802007ac <strlen>
80209128:	d8c02a17 	ldw	r3,168(sp)
8020912c:	1027883a 	mov	r19,r2
80209130:	df001d83 	ldbu	fp,118(sp)
80209134:	d8c02215 	stw	r3,136(sp)
80209138:	0013883a 	mov	r9,zero
8020913c:	da002b17 	ldw	r8,172(sp)
80209140:	003c4d06 	br	80208278 <__reset+0xfa1e8278>
80209144:	d9402117 	ldw	r5,132(sp)
80209148:	d9002017 	ldw	r4,128(sp)
8020914c:	d9801a04 	addi	r6,sp,104
80209150:	da402c15 	stw	r9,176(sp)
80209154:	0207d640 	call	80207d64 <__sprint_r.part.0>
80209158:	da402c17 	ldw	r9,176(sp)
8020915c:	103e9a1e 	bne	r2,zero,80208bc8 <__reset+0xfa1e8bc8>
80209160:	d9401b17 	ldw	r5,108(sp)
80209164:	d8801c17 	ldw	r2,112(sp)
80209168:	d811883a 	mov	r8,sp
8020916c:	29000044 	addi	r4,r5,1
80209170:	003e4206 	br	80208a7c <__reset+0xfa1e8a7c>
80209174:	d9401b17 	ldw	r5,108(sp)
80209178:	01200874 	movhi	r4,32801
8020917c:	21091104 	addi	r4,r4,9284
80209180:	d9002415 	stw	r4,144(sp)
80209184:	29400044 	addi	r5,r5,1
80209188:	003c6d06 	br	80208340 <__reset+0xfa1e8340>
8020918c:	0039883a 	mov	fp,zero
80209190:	00800084 	movi	r2,2
80209194:	10803fcc 	andi	r2,r2,255
80209198:	01000044 	movi	r4,1
8020919c:	11001e26 	beq	r2,r4,80209218 <___vfiprintf_internal_r+0x13a0>
802091a0:	01000084 	movi	r4,2
802091a4:	11001e1e 	bne	r2,r4,80209220 <___vfiprintf_internal_r+0x13a8>
802091a8:	1829883a 	mov	r20,r3
802091ac:	003eea06 	br	80208d58 <__reset+0xfa1e8d58>
802091b0:	a007883a 	mov	r3,r20
802091b4:	00800044 	movi	r2,1
802091b8:	003ff606 	br	80209194 <__reset+0xfa1e9194>
802091bc:	00800184 	movi	r2,6
802091c0:	1240012e 	bgeu	r2,r9,802091c8 <___vfiprintf_internal_r+0x1350>
802091c4:	1013883a 	mov	r9,r2
802091c8:	4827883a 	mov	r19,r9
802091cc:	4825883a 	mov	r18,r9
802091d0:	48001516 	blt	r9,zero,80209228 <___vfiprintf_internal_r+0x13b0>
802091d4:	05600874 	movhi	r21,32801
802091d8:	d8c02215 	stw	r3,136(sp)
802091dc:	ad48b104 	addi	r21,r21,8900
802091e0:	003d1406 	br	80208634 <__reset+0xfa1e8634>
802091e4:	02a00874 	movhi	r10,32801
802091e8:	52890d04 	addi	r10,r10,9268
802091ec:	da802415 	stw	r10,144(sp)
802091f0:	200d883a 	mov	r6,r4
802091f4:	003c9106 	br	8020843c <__reset+0xfa1e843c>
802091f8:	5021883a 	mov	r16,r10
802091fc:	0013883a 	mov	r9,zero
80209200:	003b7d06 	br	80207ff8 <__reset+0xfa1e7ff8>
80209204:	4827883a 	mov	r19,r9
80209208:	df001d83 	ldbu	fp,118(sp)
8020920c:	d8c02215 	stw	r3,136(sp)
80209210:	0013883a 	mov	r9,zero
80209214:	003c1806 	br	80208278 <__reset+0xfa1e8278>
80209218:	1829883a 	mov	r20,r3
8020921c:	003d1806 	br	80208680 <__reset+0xfa1e8680>
80209220:	1829883a 	mov	r20,r3
80209224:	003ccd06 	br	8020855c <__reset+0xfa1e855c>
80209228:	0025883a 	mov	r18,zero
8020922c:	003fe906 	br	802091d4 <__reset+0xfa1e91d4>
80209230:	d8802217 	ldw	r2,136(sp)
80209234:	80c00043 	ldbu	r3,1(r16)
80209238:	5021883a 	mov	r16,r10
8020923c:	12400017 	ldw	r9,0(r2)
80209240:	10800104 	addi	r2,r2,4
80209244:	d8802215 	stw	r2,136(sp)
80209248:	483faf0e 	bge	r9,zero,80209108 <__reset+0xfa1e9108>
8020924c:	18c03fcc 	andi	r3,r3,255
80209250:	18c0201c 	xori	r3,r3,128
80209254:	027fffc4 	movi	r9,-1
80209258:	18ffe004 	addi	r3,r3,-128
8020925c:	003b6506 	br	80207ff4 <__reset+0xfa1e7ff4>
80209260:	d9c01d85 	stb	r7,118(sp)
80209264:	003ca006 	br	802084e8 <__reset+0xfa1e84e8>
80209268:	d9c01d85 	stb	r7,118(sp)
8020926c:	003cad06 	br	80208524 <__reset+0xfa1e8524>
80209270:	d9c01d85 	stb	r7,118(sp)
80209274:	003d7d06 	br	8020886c <__reset+0xfa1e886c>
80209278:	d9c01d85 	stb	r7,118(sp)
8020927c:	003d5f06 	br	802087fc <__reset+0xfa1e87fc>
80209280:	a080004c 	andi	r2,r20,1
80209284:	0039883a 	mov	fp,zero
80209288:	10000526 	beq	r2,zero,802092a0 <___vfiprintf_internal_r+0x1428>
8020928c:	00800c04 	movi	r2,48
80209290:	d88019c5 	stb	r2,103(sp)
80209294:	dcc02717 	ldw	r19,156(sp)
80209298:	dd4019c4 	addi	r21,sp,103
8020929c:	003bf606 	br	80208278 <__reset+0xfa1e8278>
802092a0:	0027883a 	mov	r19,zero
802092a4:	dd401a04 	addi	r21,sp,104
802092a8:	003bf306 	br	80208278 <__reset+0xfa1e8278>
802092ac:	d9c01d85 	stb	r7,118(sp)
802092b0:	003dc806 	br	802089d4 <__reset+0xfa1e89d4>
802092b4:	d9c01d85 	stb	r7,118(sp)
802092b8:	003d3a06 	br	802087a4 <__reset+0xfa1e87a4>
802092bc:	d9c01d85 	stb	r7,118(sp)
802092c0:	003d2a06 	br	8020876c <__reset+0xfa1e876c>
802092c4:	d9c01d85 	stb	r7,118(sp)
802092c8:	003cde06 	br	80208644 <__reset+0xfa1e8644>
802092cc:	d9c01d85 	stb	r7,118(sp)
802092d0:	003cbc06 	br	802085c4 <__reset+0xfa1e85c4>

802092d4 <__vfiprintf_internal>:
802092d4:	00a00874 	movhi	r2,32801
802092d8:	10911c04 	addi	r2,r2,17520
802092dc:	300f883a 	mov	r7,r6
802092e0:	280d883a 	mov	r6,r5
802092e4:	200b883a 	mov	r5,r4
802092e8:	11000017 	ldw	r4,0(r2)
802092ec:	0207e781 	jmpi	80207e78 <___vfiprintf_internal_r>

802092f0 <__sbprintf>:
802092f0:	2880030b 	ldhu	r2,12(r5)
802092f4:	2ac01917 	ldw	r11,100(r5)
802092f8:	2a80038b 	ldhu	r10,14(r5)
802092fc:	2a400717 	ldw	r9,28(r5)
80209300:	2a000917 	ldw	r8,36(r5)
80209304:	defee204 	addi	sp,sp,-1144
80209308:	00c10004 	movi	r3,1024
8020930c:	dc011a15 	stw	r16,1128(sp)
80209310:	10bfff4c 	andi	r2,r2,65533
80209314:	2821883a 	mov	r16,r5
80209318:	d8cb883a 	add	r5,sp,r3
8020931c:	dc811c15 	stw	r18,1136(sp)
80209320:	dc411b15 	stw	r17,1132(sp)
80209324:	dfc11d15 	stw	ra,1140(sp)
80209328:	2025883a 	mov	r18,r4
8020932c:	d881030d 	sth	r2,1036(sp)
80209330:	dac11915 	stw	r11,1124(sp)
80209334:	da81038d 	sth	r10,1038(sp)
80209338:	da410715 	stw	r9,1052(sp)
8020933c:	da010915 	stw	r8,1060(sp)
80209340:	dec10015 	stw	sp,1024(sp)
80209344:	dec10415 	stw	sp,1040(sp)
80209348:	d8c10215 	stw	r3,1032(sp)
8020934c:	d8c10515 	stw	r3,1044(sp)
80209350:	d8010615 	stw	zero,1048(sp)
80209354:	0207e780 	call	80207e78 <___vfiprintf_internal_r>
80209358:	1023883a 	mov	r17,r2
8020935c:	10000416 	blt	r2,zero,80209370 <__sbprintf+0x80>
80209360:	d9410004 	addi	r5,sp,1024
80209364:	9009883a 	mov	r4,r18
80209368:	020470c0 	call	8020470c <_fflush_r>
8020936c:	10000d1e 	bne	r2,zero,802093a4 <__sbprintf+0xb4>
80209370:	d881030b 	ldhu	r2,1036(sp)
80209374:	1080100c 	andi	r2,r2,64
80209378:	10000326 	beq	r2,zero,80209388 <__sbprintf+0x98>
8020937c:	8080030b 	ldhu	r2,12(r16)
80209380:	10801014 	ori	r2,r2,64
80209384:	8080030d 	sth	r2,12(r16)
80209388:	8805883a 	mov	r2,r17
8020938c:	dfc11d17 	ldw	ra,1140(sp)
80209390:	dc811c17 	ldw	r18,1136(sp)
80209394:	dc411b17 	ldw	r17,1132(sp)
80209398:	dc011a17 	ldw	r16,1128(sp)
8020939c:	dec11e04 	addi	sp,sp,1144
802093a0:	f800283a 	ret
802093a4:	047fffc4 	movi	r17,-1
802093a8:	003ff106 	br	80209370 <__reset+0xfa1e9370>

802093ac <__swbuf_r>:
802093ac:	defffb04 	addi	sp,sp,-20
802093b0:	dcc00315 	stw	r19,12(sp)
802093b4:	dc800215 	stw	r18,8(sp)
802093b8:	dc000015 	stw	r16,0(sp)
802093bc:	dfc00415 	stw	ra,16(sp)
802093c0:	dc400115 	stw	r17,4(sp)
802093c4:	2025883a 	mov	r18,r4
802093c8:	2827883a 	mov	r19,r5
802093cc:	3021883a 	mov	r16,r6
802093d0:	20000226 	beq	r4,zero,802093dc <__swbuf_r+0x30>
802093d4:	20800e17 	ldw	r2,56(r4)
802093d8:	10004226 	beq	r2,zero,802094e4 <__swbuf_r+0x138>
802093dc:	80800617 	ldw	r2,24(r16)
802093e0:	8100030b 	ldhu	r4,12(r16)
802093e4:	80800215 	stw	r2,8(r16)
802093e8:	2080020c 	andi	r2,r4,8
802093ec:	10003626 	beq	r2,zero,802094c8 <__swbuf_r+0x11c>
802093f0:	80c00417 	ldw	r3,16(r16)
802093f4:	18003426 	beq	r3,zero,802094c8 <__swbuf_r+0x11c>
802093f8:	2088000c 	andi	r2,r4,8192
802093fc:	9c403fcc 	andi	r17,r19,255
80209400:	10001a26 	beq	r2,zero,8020946c <__swbuf_r+0xc0>
80209404:	80800017 	ldw	r2,0(r16)
80209408:	81000517 	ldw	r4,20(r16)
8020940c:	10c7c83a 	sub	r3,r2,r3
80209410:	1900200e 	bge	r3,r4,80209494 <__swbuf_r+0xe8>
80209414:	18c00044 	addi	r3,r3,1
80209418:	81000217 	ldw	r4,8(r16)
8020941c:	11400044 	addi	r5,r2,1
80209420:	81400015 	stw	r5,0(r16)
80209424:	213fffc4 	addi	r4,r4,-1
80209428:	81000215 	stw	r4,8(r16)
8020942c:	14c00005 	stb	r19,0(r2)
80209430:	80800517 	ldw	r2,20(r16)
80209434:	10c01e26 	beq	r2,r3,802094b0 <__swbuf_r+0x104>
80209438:	8080030b 	ldhu	r2,12(r16)
8020943c:	1080004c 	andi	r2,r2,1
80209440:	10000226 	beq	r2,zero,8020944c <__swbuf_r+0xa0>
80209444:	00800284 	movi	r2,10
80209448:	88801926 	beq	r17,r2,802094b0 <__swbuf_r+0x104>
8020944c:	8805883a 	mov	r2,r17
80209450:	dfc00417 	ldw	ra,16(sp)
80209454:	dcc00317 	ldw	r19,12(sp)
80209458:	dc800217 	ldw	r18,8(sp)
8020945c:	dc400117 	ldw	r17,4(sp)
80209460:	dc000017 	ldw	r16,0(sp)
80209464:	dec00504 	addi	sp,sp,20
80209468:	f800283a 	ret
8020946c:	81401917 	ldw	r5,100(r16)
80209470:	00b7ffc4 	movi	r2,-8193
80209474:	21080014 	ori	r4,r4,8192
80209478:	2884703a 	and	r2,r5,r2
8020947c:	80801915 	stw	r2,100(r16)
80209480:	80800017 	ldw	r2,0(r16)
80209484:	8100030d 	sth	r4,12(r16)
80209488:	81000517 	ldw	r4,20(r16)
8020948c:	10c7c83a 	sub	r3,r2,r3
80209490:	193fe016 	blt	r3,r4,80209414 <__reset+0xfa1e9414>
80209494:	800b883a 	mov	r5,r16
80209498:	9009883a 	mov	r4,r18
8020949c:	020470c0 	call	8020470c <_fflush_r>
802094a0:	1000071e 	bne	r2,zero,802094c0 <__swbuf_r+0x114>
802094a4:	80800017 	ldw	r2,0(r16)
802094a8:	00c00044 	movi	r3,1
802094ac:	003fda06 	br	80209418 <__reset+0xfa1e9418>
802094b0:	800b883a 	mov	r5,r16
802094b4:	9009883a 	mov	r4,r18
802094b8:	020470c0 	call	8020470c <_fflush_r>
802094bc:	103fe326 	beq	r2,zero,8020944c <__reset+0xfa1e944c>
802094c0:	00bfffc4 	movi	r2,-1
802094c4:	003fe206 	br	80209450 <__reset+0xfa1e9450>
802094c8:	800b883a 	mov	r5,r16
802094cc:	9009883a 	mov	r4,r18
802094d0:	0202b140 	call	80202b14 <__swsetup_r>
802094d4:	103ffa1e 	bne	r2,zero,802094c0 <__reset+0xfa1e94c0>
802094d8:	8100030b 	ldhu	r4,12(r16)
802094dc:	80c00417 	ldw	r3,16(r16)
802094e0:	003fc506 	br	802093f8 <__reset+0xfa1e93f8>
802094e4:	0204ae80 	call	80204ae8 <__sinit>
802094e8:	003fbc06 	br	802093dc <__reset+0xfa1e93dc>

802094ec <__swbuf>:
802094ec:	00a00874 	movhi	r2,32801
802094f0:	10911c04 	addi	r2,r2,17520
802094f4:	280d883a 	mov	r6,r5
802094f8:	200b883a 	mov	r5,r4
802094fc:	11000017 	ldw	r4,0(r2)
80209500:	02093ac1 	jmpi	802093ac <__swbuf_r>

80209504 <_write_r>:
80209504:	defffd04 	addi	sp,sp,-12
80209508:	2805883a 	mov	r2,r5
8020950c:	dc000015 	stw	r16,0(sp)
80209510:	04200874 	movhi	r16,32801
80209514:	dc400115 	stw	r17,4(sp)
80209518:	300b883a 	mov	r5,r6
8020951c:	84113404 	addi	r16,r16,17616
80209520:	2023883a 	mov	r17,r4
80209524:	380d883a 	mov	r6,r7
80209528:	1009883a 	mov	r4,r2
8020952c:	dfc00215 	stw	ra,8(sp)
80209530:	80000015 	stw	zero,0(r16)
80209534:	020d73c0 	call	8020d73c <write>
80209538:	00ffffc4 	movi	r3,-1
8020953c:	10c00526 	beq	r2,r3,80209554 <_write_r+0x50>
80209540:	dfc00217 	ldw	ra,8(sp)
80209544:	dc400117 	ldw	r17,4(sp)
80209548:	dc000017 	ldw	r16,0(sp)
8020954c:	dec00304 	addi	sp,sp,12
80209550:	f800283a 	ret
80209554:	80c00017 	ldw	r3,0(r16)
80209558:	183ff926 	beq	r3,zero,80209540 <__reset+0xfa1e9540>
8020955c:	88c00015 	stw	r3,0(r17)
80209560:	003ff706 	br	80209540 <__reset+0xfa1e9540>

80209564 <_close_r>:
80209564:	defffd04 	addi	sp,sp,-12
80209568:	dc000015 	stw	r16,0(sp)
8020956c:	04200874 	movhi	r16,32801
80209570:	dc400115 	stw	r17,4(sp)
80209574:	84113404 	addi	r16,r16,17616
80209578:	2023883a 	mov	r17,r4
8020957c:	2809883a 	mov	r4,r5
80209580:	dfc00215 	stw	ra,8(sp)
80209584:	80000015 	stw	zero,0(r16)
80209588:	020cfe80 	call	8020cfe8 <close>
8020958c:	00ffffc4 	movi	r3,-1
80209590:	10c00526 	beq	r2,r3,802095a8 <_close_r+0x44>
80209594:	dfc00217 	ldw	ra,8(sp)
80209598:	dc400117 	ldw	r17,4(sp)
8020959c:	dc000017 	ldw	r16,0(sp)
802095a0:	dec00304 	addi	sp,sp,12
802095a4:	f800283a 	ret
802095a8:	80c00017 	ldw	r3,0(r16)
802095ac:	183ff926 	beq	r3,zero,80209594 <__reset+0xfa1e9594>
802095b0:	88c00015 	stw	r3,0(r17)
802095b4:	003ff706 	br	80209594 <__reset+0xfa1e9594>

802095b8 <_calloc_r>:
802095b8:	298b383a 	mul	r5,r5,r6
802095bc:	defffe04 	addi	sp,sp,-8
802095c0:	dfc00115 	stw	ra,4(sp)
802095c4:	dc000015 	stw	r16,0(sp)
802095c8:	02058480 	call	80205848 <_malloc_r>
802095cc:	10002926 	beq	r2,zero,80209674 <_calloc_r+0xbc>
802095d0:	11bfff17 	ldw	r6,-4(r2)
802095d4:	1021883a 	mov	r16,r2
802095d8:	00bfff04 	movi	r2,-4
802095dc:	308c703a 	and	r6,r6,r2
802095e0:	00c00904 	movi	r3,36
802095e4:	308d883a 	add	r6,r6,r2
802095e8:	19801636 	bltu	r3,r6,80209644 <_calloc_r+0x8c>
802095ec:	008004c4 	movi	r2,19
802095f0:	11800b2e 	bgeu	r2,r6,80209620 <_calloc_r+0x68>
802095f4:	80000015 	stw	zero,0(r16)
802095f8:	80000115 	stw	zero,4(r16)
802095fc:	008006c4 	movi	r2,27
80209600:	11801a2e 	bgeu	r2,r6,8020966c <_calloc_r+0xb4>
80209604:	80000215 	stw	zero,8(r16)
80209608:	80000315 	stw	zero,12(r16)
8020960c:	30c0151e 	bne	r6,r3,80209664 <_calloc_r+0xac>
80209610:	80000415 	stw	zero,16(r16)
80209614:	80800604 	addi	r2,r16,24
80209618:	80000515 	stw	zero,20(r16)
8020961c:	00000106 	br	80209624 <_calloc_r+0x6c>
80209620:	8005883a 	mov	r2,r16
80209624:	10000015 	stw	zero,0(r2)
80209628:	10000115 	stw	zero,4(r2)
8020962c:	10000215 	stw	zero,8(r2)
80209630:	8005883a 	mov	r2,r16
80209634:	dfc00117 	ldw	ra,4(sp)
80209638:	dc000017 	ldw	r16,0(sp)
8020963c:	dec00204 	addi	sp,sp,8
80209640:	f800283a 	ret
80209644:	000b883a 	mov	r5,zero
80209648:	8009883a 	mov	r4,r16
8020964c:	02062940 	call	80206294 <memset>
80209650:	8005883a 	mov	r2,r16
80209654:	dfc00117 	ldw	ra,4(sp)
80209658:	dc000017 	ldw	r16,0(sp)
8020965c:	dec00204 	addi	sp,sp,8
80209660:	f800283a 	ret
80209664:	80800404 	addi	r2,r16,16
80209668:	003fee06 	br	80209624 <__reset+0xfa1e9624>
8020966c:	80800204 	addi	r2,r16,8
80209670:	003fec06 	br	80209624 <__reset+0xfa1e9624>
80209674:	0005883a 	mov	r2,zero
80209678:	003fee06 	br	80209634 <__reset+0xfa1e9634>

8020967c <_fclose_r>:
8020967c:	28003926 	beq	r5,zero,80209764 <_fclose_r+0xe8>
80209680:	defffc04 	addi	sp,sp,-16
80209684:	dc400115 	stw	r17,4(sp)
80209688:	dc000015 	stw	r16,0(sp)
8020968c:	dfc00315 	stw	ra,12(sp)
80209690:	dc800215 	stw	r18,8(sp)
80209694:	2023883a 	mov	r17,r4
80209698:	2821883a 	mov	r16,r5
8020969c:	20000226 	beq	r4,zero,802096a8 <_fclose_r+0x2c>
802096a0:	20800e17 	ldw	r2,56(r4)
802096a4:	10002726 	beq	r2,zero,80209744 <_fclose_r+0xc8>
802096a8:	8080030f 	ldh	r2,12(r16)
802096ac:	1000071e 	bne	r2,zero,802096cc <_fclose_r+0x50>
802096b0:	0005883a 	mov	r2,zero
802096b4:	dfc00317 	ldw	ra,12(sp)
802096b8:	dc800217 	ldw	r18,8(sp)
802096bc:	dc400117 	ldw	r17,4(sp)
802096c0:	dc000017 	ldw	r16,0(sp)
802096c4:	dec00404 	addi	sp,sp,16
802096c8:	f800283a 	ret
802096cc:	800b883a 	mov	r5,r16
802096d0:	8809883a 	mov	r4,r17
802096d4:	02044f00 	call	802044f0 <__sflush_r>
802096d8:	1025883a 	mov	r18,r2
802096dc:	80800b17 	ldw	r2,44(r16)
802096e0:	10000426 	beq	r2,zero,802096f4 <_fclose_r+0x78>
802096e4:	81400717 	ldw	r5,28(r16)
802096e8:	8809883a 	mov	r4,r17
802096ec:	103ee83a 	callr	r2
802096f0:	10001616 	blt	r2,zero,8020974c <_fclose_r+0xd0>
802096f4:	8080030b 	ldhu	r2,12(r16)
802096f8:	1080200c 	andi	r2,r2,128
802096fc:	1000151e 	bne	r2,zero,80209754 <_fclose_r+0xd8>
80209700:	81400c17 	ldw	r5,48(r16)
80209704:	28000526 	beq	r5,zero,8020971c <_fclose_r+0xa0>
80209708:	80801004 	addi	r2,r16,64
8020970c:	28800226 	beq	r5,r2,80209718 <_fclose_r+0x9c>
80209710:	8809883a 	mov	r4,r17
80209714:	0204c5c0 	call	80204c5c <_free_r>
80209718:	80000c15 	stw	zero,48(r16)
8020971c:	81401117 	ldw	r5,68(r16)
80209720:	28000326 	beq	r5,zero,80209730 <_fclose_r+0xb4>
80209724:	8809883a 	mov	r4,r17
80209728:	0204c5c0 	call	80204c5c <_free_r>
8020972c:	80001115 	stw	zero,68(r16)
80209730:	0204af80 	call	80204af8 <__sfp_lock_acquire>
80209734:	8000030d 	sth	zero,12(r16)
80209738:	0204afc0 	call	80204afc <__sfp_lock_release>
8020973c:	9005883a 	mov	r2,r18
80209740:	003fdc06 	br	802096b4 <__reset+0xfa1e96b4>
80209744:	0204ae80 	call	80204ae8 <__sinit>
80209748:	003fd706 	br	802096a8 <__reset+0xfa1e96a8>
8020974c:	04bfffc4 	movi	r18,-1
80209750:	003fe806 	br	802096f4 <__reset+0xfa1e96f4>
80209754:	81400417 	ldw	r5,16(r16)
80209758:	8809883a 	mov	r4,r17
8020975c:	0204c5c0 	call	80204c5c <_free_r>
80209760:	003fe706 	br	80209700 <__reset+0xfa1e9700>
80209764:	0005883a 	mov	r2,zero
80209768:	f800283a 	ret

8020976c <fclose>:
8020976c:	00a00874 	movhi	r2,32801
80209770:	10911c04 	addi	r2,r2,17520
80209774:	200b883a 	mov	r5,r4
80209778:	11000017 	ldw	r4,0(r2)
8020977c:	020967c1 	jmpi	8020967c <_fclose_r>

80209780 <__fputwc>:
80209780:	defff804 	addi	sp,sp,-32
80209784:	dcc00415 	stw	r19,16(sp)
80209788:	dc800315 	stw	r18,12(sp)
8020978c:	dc000115 	stw	r16,4(sp)
80209790:	dfc00715 	stw	ra,28(sp)
80209794:	dd400615 	stw	r21,24(sp)
80209798:	dd000515 	stw	r20,20(sp)
8020979c:	dc400215 	stw	r17,8(sp)
802097a0:	2027883a 	mov	r19,r4
802097a4:	2825883a 	mov	r18,r5
802097a8:	3021883a 	mov	r16,r6
802097ac:	02056380 	call	80205638 <__locale_mb_cur_max>
802097b0:	00c00044 	movi	r3,1
802097b4:	10c03e26 	beq	r2,r3,802098b0 <__fputwc+0x130>
802097b8:	81c01704 	addi	r7,r16,92
802097bc:	900d883a 	mov	r6,r18
802097c0:	d80b883a 	mov	r5,sp
802097c4:	9809883a 	mov	r4,r19
802097c8:	0209af80 	call	80209af8 <_wcrtomb_r>
802097cc:	1029883a 	mov	r20,r2
802097d0:	00bfffc4 	movi	r2,-1
802097d4:	a0802026 	beq	r20,r2,80209858 <__fputwc+0xd8>
802097d8:	d9400003 	ldbu	r5,0(sp)
802097dc:	a0001c26 	beq	r20,zero,80209850 <__fputwc+0xd0>
802097e0:	0023883a 	mov	r17,zero
802097e4:	05400284 	movi	r21,10
802097e8:	00000906 	br	80209810 <__fputwc+0x90>
802097ec:	80800017 	ldw	r2,0(r16)
802097f0:	11400005 	stb	r5,0(r2)
802097f4:	80c00017 	ldw	r3,0(r16)
802097f8:	18c00044 	addi	r3,r3,1
802097fc:	80c00015 	stw	r3,0(r16)
80209800:	8c400044 	addi	r17,r17,1
80209804:	dc45883a 	add	r2,sp,r17
80209808:	8d00112e 	bgeu	r17,r20,80209850 <__fputwc+0xd0>
8020980c:	11400003 	ldbu	r5,0(r2)
80209810:	80c00217 	ldw	r3,8(r16)
80209814:	18ffffc4 	addi	r3,r3,-1
80209818:	80c00215 	stw	r3,8(r16)
8020981c:	183ff30e 	bge	r3,zero,802097ec <__reset+0xfa1e97ec>
80209820:	80800617 	ldw	r2,24(r16)
80209824:	18801916 	blt	r3,r2,8020988c <__fputwc+0x10c>
80209828:	80800017 	ldw	r2,0(r16)
8020982c:	11400005 	stb	r5,0(r2)
80209830:	80800017 	ldw	r2,0(r16)
80209834:	10c00003 	ldbu	r3,0(r2)
80209838:	10800044 	addi	r2,r2,1
8020983c:	1d402326 	beq	r3,r21,802098cc <__fputwc+0x14c>
80209840:	80800015 	stw	r2,0(r16)
80209844:	8c400044 	addi	r17,r17,1
80209848:	dc45883a 	add	r2,sp,r17
8020984c:	8d3fef36 	bltu	r17,r20,8020980c <__reset+0xfa1e980c>
80209850:	9005883a 	mov	r2,r18
80209854:	00000406 	br	80209868 <__fputwc+0xe8>
80209858:	80c0030b 	ldhu	r3,12(r16)
8020985c:	a005883a 	mov	r2,r20
80209860:	18c01014 	ori	r3,r3,64
80209864:	80c0030d 	sth	r3,12(r16)
80209868:	dfc00717 	ldw	ra,28(sp)
8020986c:	dd400617 	ldw	r21,24(sp)
80209870:	dd000517 	ldw	r20,20(sp)
80209874:	dcc00417 	ldw	r19,16(sp)
80209878:	dc800317 	ldw	r18,12(sp)
8020987c:	dc400217 	ldw	r17,8(sp)
80209880:	dc000117 	ldw	r16,4(sp)
80209884:	dec00804 	addi	sp,sp,32
80209888:	f800283a 	ret
8020988c:	800d883a 	mov	r6,r16
80209890:	29403fcc 	andi	r5,r5,255
80209894:	9809883a 	mov	r4,r19
80209898:	02093ac0 	call	802093ac <__swbuf_r>
8020989c:	10bfffe0 	cmpeqi	r2,r2,-1
802098a0:	10803fcc 	andi	r2,r2,255
802098a4:	103fd626 	beq	r2,zero,80209800 <__reset+0xfa1e9800>
802098a8:	00bfffc4 	movi	r2,-1
802098ac:	003fee06 	br	80209868 <__reset+0xfa1e9868>
802098b0:	90ffffc4 	addi	r3,r18,-1
802098b4:	01003f84 	movi	r4,254
802098b8:	20ffbf36 	bltu	r4,r3,802097b8 <__reset+0xfa1e97b8>
802098bc:	900b883a 	mov	r5,r18
802098c0:	dc800005 	stb	r18,0(sp)
802098c4:	1029883a 	mov	r20,r2
802098c8:	003fc506 	br	802097e0 <__reset+0xfa1e97e0>
802098cc:	800d883a 	mov	r6,r16
802098d0:	a80b883a 	mov	r5,r21
802098d4:	9809883a 	mov	r4,r19
802098d8:	02093ac0 	call	802093ac <__swbuf_r>
802098dc:	10bfffe0 	cmpeqi	r2,r2,-1
802098e0:	003fef06 	br	802098a0 <__reset+0xfa1e98a0>

802098e4 <_fputwc_r>:
802098e4:	3080030b 	ldhu	r2,12(r6)
802098e8:	10c8000c 	andi	r3,r2,8192
802098ec:	1800051e 	bne	r3,zero,80209904 <_fputwc_r+0x20>
802098f0:	30c01917 	ldw	r3,100(r6)
802098f4:	10880014 	ori	r2,r2,8192
802098f8:	3080030d 	sth	r2,12(r6)
802098fc:	18880014 	ori	r2,r3,8192
80209900:	30801915 	stw	r2,100(r6)
80209904:	02097801 	jmpi	80209780 <__fputwc>

80209908 <fputwc>:
80209908:	00a00874 	movhi	r2,32801
8020990c:	defffc04 	addi	sp,sp,-16
80209910:	10911c04 	addi	r2,r2,17520
80209914:	dc000115 	stw	r16,4(sp)
80209918:	14000017 	ldw	r16,0(r2)
8020991c:	dc400215 	stw	r17,8(sp)
80209920:	dfc00315 	stw	ra,12(sp)
80209924:	2023883a 	mov	r17,r4
80209928:	80000226 	beq	r16,zero,80209934 <fputwc+0x2c>
8020992c:	80800e17 	ldw	r2,56(r16)
80209930:	10001026 	beq	r2,zero,80209974 <fputwc+0x6c>
80209934:	2880030b 	ldhu	r2,12(r5)
80209938:	10c8000c 	andi	r3,r2,8192
8020993c:	1800051e 	bne	r3,zero,80209954 <fputwc+0x4c>
80209940:	28c01917 	ldw	r3,100(r5)
80209944:	10880014 	ori	r2,r2,8192
80209948:	2880030d 	sth	r2,12(r5)
8020994c:	18880014 	ori	r2,r3,8192
80209950:	28801915 	stw	r2,100(r5)
80209954:	280d883a 	mov	r6,r5
80209958:	8009883a 	mov	r4,r16
8020995c:	880b883a 	mov	r5,r17
80209960:	dfc00317 	ldw	ra,12(sp)
80209964:	dc400217 	ldw	r17,8(sp)
80209968:	dc000117 	ldw	r16,4(sp)
8020996c:	dec00404 	addi	sp,sp,16
80209970:	02097801 	jmpi	80209780 <__fputwc>
80209974:	8009883a 	mov	r4,r16
80209978:	d9400015 	stw	r5,0(sp)
8020997c:	0204ae80 	call	80204ae8 <__sinit>
80209980:	d9400017 	ldw	r5,0(sp)
80209984:	003feb06 	br	80209934 <__reset+0xfa1e9934>

80209988 <_fstat_r>:
80209988:	defffd04 	addi	sp,sp,-12
8020998c:	2805883a 	mov	r2,r5
80209990:	dc000015 	stw	r16,0(sp)
80209994:	04200874 	movhi	r16,32801
80209998:	dc400115 	stw	r17,4(sp)
8020999c:	84113404 	addi	r16,r16,17616
802099a0:	2023883a 	mov	r17,r4
802099a4:	300b883a 	mov	r5,r6
802099a8:	1009883a 	mov	r4,r2
802099ac:	dfc00215 	stw	ra,8(sp)
802099b0:	80000015 	stw	zero,0(r16)
802099b4:	020d1200 	call	8020d120 <fstat>
802099b8:	00ffffc4 	movi	r3,-1
802099bc:	10c00526 	beq	r2,r3,802099d4 <_fstat_r+0x4c>
802099c0:	dfc00217 	ldw	ra,8(sp)
802099c4:	dc400117 	ldw	r17,4(sp)
802099c8:	dc000017 	ldw	r16,0(sp)
802099cc:	dec00304 	addi	sp,sp,12
802099d0:	f800283a 	ret
802099d4:	80c00017 	ldw	r3,0(r16)
802099d8:	183ff926 	beq	r3,zero,802099c0 <__reset+0xfa1e99c0>
802099dc:	88c00015 	stw	r3,0(r17)
802099e0:	003ff706 	br	802099c0 <__reset+0xfa1e99c0>

802099e4 <_isatty_r>:
802099e4:	defffd04 	addi	sp,sp,-12
802099e8:	dc000015 	stw	r16,0(sp)
802099ec:	04200874 	movhi	r16,32801
802099f0:	dc400115 	stw	r17,4(sp)
802099f4:	84113404 	addi	r16,r16,17616
802099f8:	2023883a 	mov	r17,r4
802099fc:	2809883a 	mov	r4,r5
80209a00:	dfc00215 	stw	ra,8(sp)
80209a04:	80000015 	stw	zero,0(r16)
80209a08:	020d20c0 	call	8020d20c <isatty>
80209a0c:	00ffffc4 	movi	r3,-1
80209a10:	10c00526 	beq	r2,r3,80209a28 <_isatty_r+0x44>
80209a14:	dfc00217 	ldw	ra,8(sp)
80209a18:	dc400117 	ldw	r17,4(sp)
80209a1c:	dc000017 	ldw	r16,0(sp)
80209a20:	dec00304 	addi	sp,sp,12
80209a24:	f800283a 	ret
80209a28:	80c00017 	ldw	r3,0(r16)
80209a2c:	183ff926 	beq	r3,zero,80209a14 <__reset+0xfa1e9a14>
80209a30:	88c00015 	stw	r3,0(r17)
80209a34:	003ff706 	br	80209a14 <__reset+0xfa1e9a14>

80209a38 <_lseek_r>:
80209a38:	defffd04 	addi	sp,sp,-12
80209a3c:	2805883a 	mov	r2,r5
80209a40:	dc000015 	stw	r16,0(sp)
80209a44:	04200874 	movhi	r16,32801
80209a48:	dc400115 	stw	r17,4(sp)
80209a4c:	300b883a 	mov	r5,r6
80209a50:	84113404 	addi	r16,r16,17616
80209a54:	2023883a 	mov	r17,r4
80209a58:	380d883a 	mov	r6,r7
80209a5c:	1009883a 	mov	r4,r2
80209a60:	dfc00215 	stw	ra,8(sp)
80209a64:	80000015 	stw	zero,0(r16)
80209a68:	020d2ec0 	call	8020d2ec <lseek>
80209a6c:	00ffffc4 	movi	r3,-1
80209a70:	10c00526 	beq	r2,r3,80209a88 <_lseek_r+0x50>
80209a74:	dfc00217 	ldw	ra,8(sp)
80209a78:	dc400117 	ldw	r17,4(sp)
80209a7c:	dc000017 	ldw	r16,0(sp)
80209a80:	dec00304 	addi	sp,sp,12
80209a84:	f800283a 	ret
80209a88:	80c00017 	ldw	r3,0(r16)
80209a8c:	183ff926 	beq	r3,zero,80209a74 <__reset+0xfa1e9a74>
80209a90:	88c00015 	stw	r3,0(r17)
80209a94:	003ff706 	br	80209a74 <__reset+0xfa1e9a74>

80209a98 <_read_r>:
80209a98:	defffd04 	addi	sp,sp,-12
80209a9c:	2805883a 	mov	r2,r5
80209aa0:	dc000015 	stw	r16,0(sp)
80209aa4:	04200874 	movhi	r16,32801
80209aa8:	dc400115 	stw	r17,4(sp)
80209aac:	300b883a 	mov	r5,r6
80209ab0:	84113404 	addi	r16,r16,17616
80209ab4:	2023883a 	mov	r17,r4
80209ab8:	380d883a 	mov	r6,r7
80209abc:	1009883a 	mov	r4,r2
80209ac0:	dfc00215 	stw	ra,8(sp)
80209ac4:	80000015 	stw	zero,0(r16)
80209ac8:	020d4c00 	call	8020d4c0 <read>
80209acc:	00ffffc4 	movi	r3,-1
80209ad0:	10c00526 	beq	r2,r3,80209ae8 <_read_r+0x50>
80209ad4:	dfc00217 	ldw	ra,8(sp)
80209ad8:	dc400117 	ldw	r17,4(sp)
80209adc:	dc000017 	ldw	r16,0(sp)
80209ae0:	dec00304 	addi	sp,sp,12
80209ae4:	f800283a 	ret
80209ae8:	80c00017 	ldw	r3,0(r16)
80209aec:	183ff926 	beq	r3,zero,80209ad4 <__reset+0xfa1e9ad4>
80209af0:	88c00015 	stw	r3,0(r17)
80209af4:	003ff706 	br	80209ad4 <__reset+0xfa1e9ad4>

80209af8 <_wcrtomb_r>:
80209af8:	defff604 	addi	sp,sp,-40
80209afc:	00a00874 	movhi	r2,32801
80209b00:	dc800815 	stw	r18,32(sp)
80209b04:	dc400715 	stw	r17,28(sp)
80209b08:	dc000615 	stw	r16,24(sp)
80209b0c:	10912004 	addi	r2,r2,17536
80209b10:	dfc00915 	stw	ra,36(sp)
80209b14:	2021883a 	mov	r16,r4
80209b18:	3823883a 	mov	r17,r7
80209b1c:	14800017 	ldw	r18,0(r2)
80209b20:	28001426 	beq	r5,zero,80209b74 <_wcrtomb_r+0x7c>
80209b24:	d9400415 	stw	r5,16(sp)
80209b28:	d9800515 	stw	r6,20(sp)
80209b2c:	020562c0 	call	8020562c <__locale_charset>
80209b30:	d9800517 	ldw	r6,20(sp)
80209b34:	d9400417 	ldw	r5,16(sp)
80209b38:	100f883a 	mov	r7,r2
80209b3c:	dc400015 	stw	r17,0(sp)
80209b40:	8009883a 	mov	r4,r16
80209b44:	903ee83a 	callr	r18
80209b48:	00ffffc4 	movi	r3,-1
80209b4c:	10c0031e 	bne	r2,r3,80209b5c <_wcrtomb_r+0x64>
80209b50:	88000015 	stw	zero,0(r17)
80209b54:	00c02284 	movi	r3,138
80209b58:	80c00015 	stw	r3,0(r16)
80209b5c:	dfc00917 	ldw	ra,36(sp)
80209b60:	dc800817 	ldw	r18,32(sp)
80209b64:	dc400717 	ldw	r17,28(sp)
80209b68:	dc000617 	ldw	r16,24(sp)
80209b6c:	dec00a04 	addi	sp,sp,40
80209b70:	f800283a 	ret
80209b74:	020562c0 	call	8020562c <__locale_charset>
80209b78:	100f883a 	mov	r7,r2
80209b7c:	dc400015 	stw	r17,0(sp)
80209b80:	000d883a 	mov	r6,zero
80209b84:	d9400104 	addi	r5,sp,4
80209b88:	8009883a 	mov	r4,r16
80209b8c:	903ee83a 	callr	r18
80209b90:	003fed06 	br	80209b48 <__reset+0xfa1e9b48>

80209b94 <wcrtomb>:
80209b94:	defff604 	addi	sp,sp,-40
80209b98:	00a00874 	movhi	r2,32801
80209b9c:	dc800615 	stw	r18,24(sp)
80209ba0:	dc400515 	stw	r17,20(sp)
80209ba4:	10911c04 	addi	r2,r2,17520
80209ba8:	dfc00915 	stw	ra,36(sp)
80209bac:	dd000815 	stw	r20,32(sp)
80209bb0:	dcc00715 	stw	r19,28(sp)
80209bb4:	dc000415 	stw	r16,16(sp)
80209bb8:	3025883a 	mov	r18,r6
80209bbc:	14400017 	ldw	r17,0(r2)
80209bc0:	20001926 	beq	r4,zero,80209c28 <wcrtomb+0x94>
80209bc4:	00a00874 	movhi	r2,32801
80209bc8:	10912004 	addi	r2,r2,17536
80209bcc:	15000017 	ldw	r20,0(r2)
80209bd0:	2021883a 	mov	r16,r4
80209bd4:	2827883a 	mov	r19,r5
80209bd8:	020562c0 	call	8020562c <__locale_charset>
80209bdc:	100f883a 	mov	r7,r2
80209be0:	dc800015 	stw	r18,0(sp)
80209be4:	980d883a 	mov	r6,r19
80209be8:	800b883a 	mov	r5,r16
80209bec:	8809883a 	mov	r4,r17
80209bf0:	a03ee83a 	callr	r20
80209bf4:	00ffffc4 	movi	r3,-1
80209bf8:	10c0031e 	bne	r2,r3,80209c08 <wcrtomb+0x74>
80209bfc:	90000015 	stw	zero,0(r18)
80209c00:	00c02284 	movi	r3,138
80209c04:	88c00015 	stw	r3,0(r17)
80209c08:	dfc00917 	ldw	ra,36(sp)
80209c0c:	dd000817 	ldw	r20,32(sp)
80209c10:	dcc00717 	ldw	r19,28(sp)
80209c14:	dc800617 	ldw	r18,24(sp)
80209c18:	dc400517 	ldw	r17,20(sp)
80209c1c:	dc000417 	ldw	r16,16(sp)
80209c20:	dec00a04 	addi	sp,sp,40
80209c24:	f800283a 	ret
80209c28:	00a00874 	movhi	r2,32801
80209c2c:	10912004 	addi	r2,r2,17536
80209c30:	14000017 	ldw	r16,0(r2)
80209c34:	020562c0 	call	8020562c <__locale_charset>
80209c38:	100f883a 	mov	r7,r2
80209c3c:	dc800015 	stw	r18,0(sp)
80209c40:	000d883a 	mov	r6,zero
80209c44:	d9400104 	addi	r5,sp,4
80209c48:	8809883a 	mov	r4,r17
80209c4c:	803ee83a 	callr	r16
80209c50:	003fe806 	br	80209bf4 <__reset+0xfa1e9bf4>

80209c54 <__ascii_wctomb>:
80209c54:	28000526 	beq	r5,zero,80209c6c <__ascii_wctomb+0x18>
80209c58:	00803fc4 	movi	r2,255
80209c5c:	11800536 	bltu	r2,r6,80209c74 <__ascii_wctomb+0x20>
80209c60:	29800005 	stb	r6,0(r5)
80209c64:	00800044 	movi	r2,1
80209c68:	f800283a 	ret
80209c6c:	0005883a 	mov	r2,zero
80209c70:	f800283a 	ret
80209c74:	00802284 	movi	r2,138
80209c78:	20800015 	stw	r2,0(r4)
80209c7c:	00bfffc4 	movi	r2,-1
80209c80:	f800283a 	ret

80209c84 <_wctomb_r>:
80209c84:	00a00874 	movhi	r2,32801
80209c88:	defff904 	addi	sp,sp,-28
80209c8c:	10912004 	addi	r2,r2,17536
80209c90:	dfc00615 	stw	ra,24(sp)
80209c94:	dc400515 	stw	r17,20(sp)
80209c98:	dc000415 	stw	r16,16(sp)
80209c9c:	3823883a 	mov	r17,r7
80209ca0:	14000017 	ldw	r16,0(r2)
80209ca4:	d9000115 	stw	r4,4(sp)
80209ca8:	d9400215 	stw	r5,8(sp)
80209cac:	d9800315 	stw	r6,12(sp)
80209cb0:	020562c0 	call	8020562c <__locale_charset>
80209cb4:	d9800317 	ldw	r6,12(sp)
80209cb8:	d9400217 	ldw	r5,8(sp)
80209cbc:	d9000117 	ldw	r4,4(sp)
80209cc0:	100f883a 	mov	r7,r2
80209cc4:	dc400015 	stw	r17,0(sp)
80209cc8:	803ee83a 	callr	r16
80209ccc:	dfc00617 	ldw	ra,24(sp)
80209cd0:	dc400517 	ldw	r17,20(sp)
80209cd4:	dc000417 	ldw	r16,16(sp)
80209cd8:	dec00704 	addi	sp,sp,28
80209cdc:	f800283a 	ret

80209ce0 <__udivdi3>:
80209ce0:	defff504 	addi	sp,sp,-44
80209ce4:	dcc00415 	stw	r19,16(sp)
80209ce8:	dc000115 	stw	r16,4(sp)
80209cec:	dfc00a15 	stw	ra,40(sp)
80209cf0:	df000915 	stw	fp,36(sp)
80209cf4:	ddc00815 	stw	r23,32(sp)
80209cf8:	dd800715 	stw	r22,28(sp)
80209cfc:	dd400615 	stw	r21,24(sp)
80209d00:	dd000515 	stw	r20,20(sp)
80209d04:	dc800315 	stw	r18,12(sp)
80209d08:	dc400215 	stw	r17,8(sp)
80209d0c:	2027883a 	mov	r19,r4
80209d10:	2821883a 	mov	r16,r5
80209d14:	3800411e 	bne	r7,zero,80209e1c <__udivdi3+0x13c>
80209d18:	3023883a 	mov	r17,r6
80209d1c:	2025883a 	mov	r18,r4
80209d20:	2980522e 	bgeu	r5,r6,80209e6c <__udivdi3+0x18c>
80209d24:	00bfffd4 	movui	r2,65535
80209d28:	282d883a 	mov	r22,r5
80209d2c:	1180a836 	bltu	r2,r6,80209fd0 <__udivdi3+0x2f0>
80209d30:	00803fc4 	movi	r2,255
80209d34:	1185803a 	cmpltu	r2,r2,r6
80209d38:	100490fa 	slli	r2,r2,3
80209d3c:	3086d83a 	srl	r3,r6,r2
80209d40:	01200874 	movhi	r4,32801
80209d44:	21091504 	addi	r4,r4,9300
80209d48:	20c7883a 	add	r3,r4,r3
80209d4c:	18c00003 	ldbu	r3,0(r3)
80209d50:	1885883a 	add	r2,r3,r2
80209d54:	00c00804 	movi	r3,32
80209d58:	1887c83a 	sub	r3,r3,r2
80209d5c:	18000526 	beq	r3,zero,80209d74 <__udivdi3+0x94>
80209d60:	80e0983a 	sll	r16,r16,r3
80209d64:	9884d83a 	srl	r2,r19,r2
80209d68:	30e2983a 	sll	r17,r6,r3
80209d6c:	98e4983a 	sll	r18,r19,r3
80209d70:	142cb03a 	or	r22,r2,r16
80209d74:	882ad43a 	srli	r21,r17,16
80209d78:	b009883a 	mov	r4,r22
80209d7c:	8d3fffcc 	andi	r20,r17,65535
80209d80:	a80b883a 	mov	r5,r21
80209d84:	020a8ec0 	call	8020a8ec <__umodsi3>
80209d88:	b009883a 	mov	r4,r22
80209d8c:	a80b883a 	mov	r5,r21
80209d90:	1027883a 	mov	r19,r2
80209d94:	020a8880 	call	8020a888 <__udivsi3>
80209d98:	102d883a 	mov	r22,r2
80209d9c:	9826943a 	slli	r19,r19,16
80209da0:	9004d43a 	srli	r2,r18,16
80209da4:	a5a1383a 	mul	r16,r20,r22
80209da8:	14c4b03a 	or	r2,r2,r19
80209dac:	1400052e 	bgeu	r2,r16,80209dc4 <__udivdi3+0xe4>
80209db0:	1445883a 	add	r2,r2,r17
80209db4:	b0ffffc4 	addi	r3,r22,-1
80209db8:	14400136 	bltu	r2,r17,80209dc0 <__udivdi3+0xe0>
80209dbc:	14012336 	bltu	r2,r16,8020a24c <__udivdi3+0x56c>
80209dc0:	182d883a 	mov	r22,r3
80209dc4:	1421c83a 	sub	r16,r2,r16
80209dc8:	a80b883a 	mov	r5,r21
80209dcc:	8009883a 	mov	r4,r16
80209dd0:	020a8ec0 	call	8020a8ec <__umodsi3>
80209dd4:	1027883a 	mov	r19,r2
80209dd8:	a80b883a 	mov	r5,r21
80209ddc:	8009883a 	mov	r4,r16
80209de0:	020a8880 	call	8020a888 <__udivsi3>
80209de4:	9826943a 	slli	r19,r19,16
80209de8:	a0a9383a 	mul	r20,r20,r2
80209dec:	94bfffcc 	andi	r18,r18,65535
80209df0:	94e4b03a 	or	r18,r18,r19
80209df4:	9500052e 	bgeu	r18,r20,80209e0c <__udivdi3+0x12c>
80209df8:	8ca5883a 	add	r18,r17,r18
80209dfc:	10ffffc4 	addi	r3,r2,-1
80209e00:	9440f136 	bltu	r18,r17,8020a1c8 <__udivdi3+0x4e8>
80209e04:	9500f02e 	bgeu	r18,r20,8020a1c8 <__udivdi3+0x4e8>
80209e08:	10bfff84 	addi	r2,r2,-2
80209e0c:	b00c943a 	slli	r6,r22,16
80209e10:	0007883a 	mov	r3,zero
80209e14:	3084b03a 	or	r2,r6,r2
80209e18:	00005906 	br	80209f80 <__udivdi3+0x2a0>
80209e1c:	29c05636 	bltu	r5,r7,80209f78 <__udivdi3+0x298>
80209e20:	00bfffd4 	movui	r2,65535
80209e24:	11c0622e 	bgeu	r2,r7,80209fb0 <__udivdi3+0x2d0>
80209e28:	00804034 	movhi	r2,256
80209e2c:	10bfffc4 	addi	r2,r2,-1
80209e30:	11c0ee36 	bltu	r2,r7,8020a1ec <__udivdi3+0x50c>
80209e34:	00800404 	movi	r2,16
80209e38:	3886d83a 	srl	r3,r7,r2
80209e3c:	01200874 	movhi	r4,32801
80209e40:	21091504 	addi	r4,r4,9300
80209e44:	20c7883a 	add	r3,r4,r3
80209e48:	18c00003 	ldbu	r3,0(r3)
80209e4c:	05400804 	movi	r21,32
80209e50:	1885883a 	add	r2,r3,r2
80209e54:	a8abc83a 	sub	r21,r21,r2
80209e58:	a800621e 	bne	r21,zero,80209fe4 <__udivdi3+0x304>
80209e5c:	3c00e936 	bltu	r7,r16,8020a204 <__udivdi3+0x524>
80209e60:	9985403a 	cmpgeu	r2,r19,r6
80209e64:	0007883a 	mov	r3,zero
80209e68:	00004506 	br	80209f80 <__udivdi3+0x2a0>
80209e6c:	3000041e 	bne	r6,zero,80209e80 <__udivdi3+0x1a0>
80209e70:	000b883a 	mov	r5,zero
80209e74:	01000044 	movi	r4,1
80209e78:	020a8880 	call	8020a888 <__udivsi3>
80209e7c:	1023883a 	mov	r17,r2
80209e80:	00bfffd4 	movui	r2,65535
80209e84:	14404e2e 	bgeu	r2,r17,80209fc0 <__udivdi3+0x2e0>
80209e88:	00804034 	movhi	r2,256
80209e8c:	10bfffc4 	addi	r2,r2,-1
80209e90:	1440d836 	bltu	r2,r17,8020a1f4 <__udivdi3+0x514>
80209e94:	00800404 	movi	r2,16
80209e98:	8886d83a 	srl	r3,r17,r2
80209e9c:	01200874 	movhi	r4,32801
80209ea0:	21091504 	addi	r4,r4,9300
80209ea4:	20c7883a 	add	r3,r4,r3
80209ea8:	18c00003 	ldbu	r3,0(r3)
80209eac:	1885883a 	add	r2,r3,r2
80209eb0:	00c00804 	movi	r3,32
80209eb4:	1887c83a 	sub	r3,r3,r2
80209eb8:	18008f1e 	bne	r3,zero,8020a0f8 <__udivdi3+0x418>
80209ebc:	882ad43a 	srli	r21,r17,16
80209ec0:	8461c83a 	sub	r16,r16,r17
80209ec4:	8d3fffcc 	andi	r20,r17,65535
80209ec8:	00c00044 	movi	r3,1
80209ecc:	8009883a 	mov	r4,r16
80209ed0:	a80b883a 	mov	r5,r21
80209ed4:	d8c00015 	stw	r3,0(sp)
80209ed8:	020a8ec0 	call	8020a8ec <__umodsi3>
80209edc:	8009883a 	mov	r4,r16
80209ee0:	a80b883a 	mov	r5,r21
80209ee4:	1027883a 	mov	r19,r2
80209ee8:	020a8880 	call	8020a888 <__udivsi3>
80209eec:	9826943a 	slli	r19,r19,16
80209ef0:	9008d43a 	srli	r4,r18,16
80209ef4:	1521383a 	mul	r16,r2,r20
80209ef8:	102d883a 	mov	r22,r2
80209efc:	24c8b03a 	or	r4,r4,r19
80209f00:	d8c00017 	ldw	r3,0(sp)
80209f04:	2400052e 	bgeu	r4,r16,80209f1c <__udivdi3+0x23c>
80209f08:	2449883a 	add	r4,r4,r17
80209f0c:	b0bfffc4 	addi	r2,r22,-1
80209f10:	24400136 	bltu	r4,r17,80209f18 <__udivdi3+0x238>
80209f14:	2400ca36 	bltu	r4,r16,8020a240 <__udivdi3+0x560>
80209f18:	102d883a 	mov	r22,r2
80209f1c:	2421c83a 	sub	r16,r4,r16
80209f20:	a80b883a 	mov	r5,r21
80209f24:	8009883a 	mov	r4,r16
80209f28:	d8c00015 	stw	r3,0(sp)
80209f2c:	020a8ec0 	call	8020a8ec <__umodsi3>
80209f30:	1027883a 	mov	r19,r2
80209f34:	a80b883a 	mov	r5,r21
80209f38:	8009883a 	mov	r4,r16
80209f3c:	020a8880 	call	8020a888 <__udivsi3>
80209f40:	9826943a 	slli	r19,r19,16
80209f44:	1529383a 	mul	r20,r2,r20
80209f48:	94bfffcc 	andi	r18,r18,65535
80209f4c:	94e4b03a 	or	r18,r18,r19
80209f50:	d8c00017 	ldw	r3,0(sp)
80209f54:	9500052e 	bgeu	r18,r20,80209f6c <__udivdi3+0x28c>
80209f58:	8ca5883a 	add	r18,r17,r18
80209f5c:	113fffc4 	addi	r4,r2,-1
80209f60:	94409736 	bltu	r18,r17,8020a1c0 <__udivdi3+0x4e0>
80209f64:	9500962e 	bgeu	r18,r20,8020a1c0 <__udivdi3+0x4e0>
80209f68:	10bfff84 	addi	r2,r2,-2
80209f6c:	b00c943a 	slli	r6,r22,16
80209f70:	3084b03a 	or	r2,r6,r2
80209f74:	00000206 	br	80209f80 <__udivdi3+0x2a0>
80209f78:	0007883a 	mov	r3,zero
80209f7c:	0005883a 	mov	r2,zero
80209f80:	dfc00a17 	ldw	ra,40(sp)
80209f84:	df000917 	ldw	fp,36(sp)
80209f88:	ddc00817 	ldw	r23,32(sp)
80209f8c:	dd800717 	ldw	r22,28(sp)
80209f90:	dd400617 	ldw	r21,24(sp)
80209f94:	dd000517 	ldw	r20,20(sp)
80209f98:	dcc00417 	ldw	r19,16(sp)
80209f9c:	dc800317 	ldw	r18,12(sp)
80209fa0:	dc400217 	ldw	r17,8(sp)
80209fa4:	dc000117 	ldw	r16,4(sp)
80209fa8:	dec00b04 	addi	sp,sp,44
80209fac:	f800283a 	ret
80209fb0:	00803fc4 	movi	r2,255
80209fb4:	11c5803a 	cmpltu	r2,r2,r7
80209fb8:	100490fa 	slli	r2,r2,3
80209fbc:	003f9e06 	br	80209e38 <__reset+0xfa1e9e38>
80209fc0:	00803fc4 	movi	r2,255
80209fc4:	1445803a 	cmpltu	r2,r2,r17
80209fc8:	100490fa 	slli	r2,r2,3
80209fcc:	003fb206 	br	80209e98 <__reset+0xfa1e9e98>
80209fd0:	00804034 	movhi	r2,256
80209fd4:	10bfffc4 	addi	r2,r2,-1
80209fd8:	11808836 	bltu	r2,r6,8020a1fc <__udivdi3+0x51c>
80209fdc:	00800404 	movi	r2,16
80209fe0:	003f5606 	br	80209d3c <__reset+0xfa1e9d3c>
80209fe4:	30aed83a 	srl	r23,r6,r2
80209fe8:	3d4e983a 	sll	r7,r7,r21
80209fec:	80acd83a 	srl	r22,r16,r2
80209ff0:	9884d83a 	srl	r2,r19,r2
80209ff4:	3deeb03a 	or	r23,r7,r23
80209ff8:	b824d43a 	srli	r18,r23,16
80209ffc:	8560983a 	sll	r16,r16,r21
8020a000:	b009883a 	mov	r4,r22
8020a004:	900b883a 	mov	r5,r18
8020a008:	3568983a 	sll	r20,r6,r21
8020a00c:	1420b03a 	or	r16,r2,r16
8020a010:	020a8ec0 	call	8020a8ec <__umodsi3>
8020a014:	b009883a 	mov	r4,r22
8020a018:	900b883a 	mov	r5,r18
8020a01c:	1023883a 	mov	r17,r2
8020a020:	020a8880 	call	8020a888 <__udivsi3>
8020a024:	8808943a 	slli	r4,r17,16
8020a028:	bf3fffcc 	andi	fp,r23,65535
8020a02c:	8006d43a 	srli	r3,r16,16
8020a030:	e0a3383a 	mul	r17,fp,r2
8020a034:	100d883a 	mov	r6,r2
8020a038:	1906b03a 	or	r3,r3,r4
8020a03c:	1c40042e 	bgeu	r3,r17,8020a050 <__udivdi3+0x370>
8020a040:	1dc7883a 	add	r3,r3,r23
8020a044:	10bfffc4 	addi	r2,r2,-1
8020a048:	1dc0752e 	bgeu	r3,r23,8020a220 <__udivdi3+0x540>
8020a04c:	100d883a 	mov	r6,r2
8020a050:	1c63c83a 	sub	r17,r3,r17
8020a054:	900b883a 	mov	r5,r18
8020a058:	8809883a 	mov	r4,r17
8020a05c:	d9800015 	stw	r6,0(sp)
8020a060:	020a8ec0 	call	8020a8ec <__umodsi3>
8020a064:	102d883a 	mov	r22,r2
8020a068:	8809883a 	mov	r4,r17
8020a06c:	900b883a 	mov	r5,r18
8020a070:	020a8880 	call	8020a888 <__udivsi3>
8020a074:	b02c943a 	slli	r22,r22,16
8020a078:	e089383a 	mul	r4,fp,r2
8020a07c:	843fffcc 	andi	r16,r16,65535
8020a080:	85a0b03a 	or	r16,r16,r22
8020a084:	d9800017 	ldw	r6,0(sp)
8020a088:	8100042e 	bgeu	r16,r4,8020a09c <__udivdi3+0x3bc>
8020a08c:	85e1883a 	add	r16,r16,r23
8020a090:	10ffffc4 	addi	r3,r2,-1
8020a094:	85c05e2e 	bgeu	r16,r23,8020a210 <__udivdi3+0x530>
8020a098:	1805883a 	mov	r2,r3
8020a09c:	300c943a 	slli	r6,r6,16
8020a0a0:	a17fffcc 	andi	r5,r20,65535
8020a0a4:	a028d43a 	srli	r20,r20,16
8020a0a8:	3084b03a 	or	r2,r6,r2
8020a0ac:	10ffffcc 	andi	r3,r2,65535
8020a0b0:	100cd43a 	srli	r6,r2,16
8020a0b4:	194f383a 	mul	r7,r3,r5
8020a0b8:	1d07383a 	mul	r3,r3,r20
8020a0bc:	314b383a 	mul	r5,r6,r5
8020a0c0:	3810d43a 	srli	r8,r7,16
8020a0c4:	8121c83a 	sub	r16,r16,r4
8020a0c8:	1947883a 	add	r3,r3,r5
8020a0cc:	40c7883a 	add	r3,r8,r3
8020a0d0:	350d383a 	mul	r6,r6,r20
8020a0d4:	1940022e 	bgeu	r3,r5,8020a0e0 <__udivdi3+0x400>
8020a0d8:	01000074 	movhi	r4,1
8020a0dc:	310d883a 	add	r6,r6,r4
8020a0e0:	1828d43a 	srli	r20,r3,16
8020a0e4:	a18d883a 	add	r6,r20,r6
8020a0e8:	81803e36 	bltu	r16,r6,8020a1e4 <__udivdi3+0x504>
8020a0ec:	81803826 	beq	r16,r6,8020a1d0 <__udivdi3+0x4f0>
8020a0f0:	0007883a 	mov	r3,zero
8020a0f4:	003fa206 	br	80209f80 <__reset+0xfa1e9f80>
8020a0f8:	88e2983a 	sll	r17,r17,r3
8020a0fc:	80a8d83a 	srl	r20,r16,r2
8020a100:	80e0983a 	sll	r16,r16,r3
8020a104:	882ad43a 	srli	r21,r17,16
8020a108:	9884d83a 	srl	r2,r19,r2
8020a10c:	a009883a 	mov	r4,r20
8020a110:	a80b883a 	mov	r5,r21
8020a114:	142eb03a 	or	r23,r2,r16
8020a118:	98e4983a 	sll	r18,r19,r3
8020a11c:	020a8ec0 	call	8020a8ec <__umodsi3>
8020a120:	a009883a 	mov	r4,r20
8020a124:	a80b883a 	mov	r5,r21
8020a128:	1021883a 	mov	r16,r2
8020a12c:	020a8880 	call	8020a888 <__udivsi3>
8020a130:	1039883a 	mov	fp,r2
8020a134:	8d3fffcc 	andi	r20,r17,65535
8020a138:	8020943a 	slli	r16,r16,16
8020a13c:	b804d43a 	srli	r2,r23,16
8020a140:	a72d383a 	mul	r22,r20,fp
8020a144:	1404b03a 	or	r2,r2,r16
8020a148:	1580062e 	bgeu	r2,r22,8020a164 <__udivdi3+0x484>
8020a14c:	1445883a 	add	r2,r2,r17
8020a150:	e0ffffc4 	addi	r3,fp,-1
8020a154:	14403836 	bltu	r2,r17,8020a238 <__udivdi3+0x558>
8020a158:	1580372e 	bgeu	r2,r22,8020a238 <__udivdi3+0x558>
8020a15c:	e73fff84 	addi	fp,fp,-2
8020a160:	1445883a 	add	r2,r2,r17
8020a164:	15adc83a 	sub	r22,r2,r22
8020a168:	a80b883a 	mov	r5,r21
8020a16c:	b009883a 	mov	r4,r22
8020a170:	020a8ec0 	call	8020a8ec <__umodsi3>
8020a174:	1027883a 	mov	r19,r2
8020a178:	b009883a 	mov	r4,r22
8020a17c:	a80b883a 	mov	r5,r21
8020a180:	020a8880 	call	8020a888 <__udivsi3>
8020a184:	9826943a 	slli	r19,r19,16
8020a188:	a0a1383a 	mul	r16,r20,r2
8020a18c:	b93fffcc 	andi	r4,r23,65535
8020a190:	24c8b03a 	or	r4,r4,r19
8020a194:	2400062e 	bgeu	r4,r16,8020a1b0 <__udivdi3+0x4d0>
8020a198:	2449883a 	add	r4,r4,r17
8020a19c:	10ffffc4 	addi	r3,r2,-1
8020a1a0:	24402336 	bltu	r4,r17,8020a230 <__udivdi3+0x550>
8020a1a4:	2400222e 	bgeu	r4,r16,8020a230 <__udivdi3+0x550>
8020a1a8:	10bfff84 	addi	r2,r2,-2
8020a1ac:	2449883a 	add	r4,r4,r17
8020a1b0:	e038943a 	slli	fp,fp,16
8020a1b4:	2421c83a 	sub	r16,r4,r16
8020a1b8:	e086b03a 	or	r3,fp,r2
8020a1bc:	003f4306 	br	80209ecc <__reset+0xfa1e9ecc>
8020a1c0:	2005883a 	mov	r2,r4
8020a1c4:	003f6906 	br	80209f6c <__reset+0xfa1e9f6c>
8020a1c8:	1805883a 	mov	r2,r3
8020a1cc:	003f0f06 	br	80209e0c <__reset+0xfa1e9e0c>
8020a1d0:	1806943a 	slli	r3,r3,16
8020a1d4:	9d66983a 	sll	r19,r19,r21
8020a1d8:	39ffffcc 	andi	r7,r7,65535
8020a1dc:	19c7883a 	add	r3,r3,r7
8020a1e0:	98ffc32e 	bgeu	r19,r3,8020a0f0 <__reset+0xfa1ea0f0>
8020a1e4:	10bfffc4 	addi	r2,r2,-1
8020a1e8:	003fc106 	br	8020a0f0 <__reset+0xfa1ea0f0>
8020a1ec:	00800604 	movi	r2,24
8020a1f0:	003f1106 	br	80209e38 <__reset+0xfa1e9e38>
8020a1f4:	00800604 	movi	r2,24
8020a1f8:	003f2706 	br	80209e98 <__reset+0xfa1e9e98>
8020a1fc:	00800604 	movi	r2,24
8020a200:	003ece06 	br	80209d3c <__reset+0xfa1e9d3c>
8020a204:	0007883a 	mov	r3,zero
8020a208:	00800044 	movi	r2,1
8020a20c:	003f5c06 	br	80209f80 <__reset+0xfa1e9f80>
8020a210:	813fa12e 	bgeu	r16,r4,8020a098 <__reset+0xfa1ea098>
8020a214:	10bfff84 	addi	r2,r2,-2
8020a218:	85e1883a 	add	r16,r16,r23
8020a21c:	003f9f06 	br	8020a09c <__reset+0xfa1ea09c>
8020a220:	1c7f8a2e 	bgeu	r3,r17,8020a04c <__reset+0xfa1ea04c>
8020a224:	31bfff84 	addi	r6,r6,-2
8020a228:	1dc7883a 	add	r3,r3,r23
8020a22c:	003f8806 	br	8020a050 <__reset+0xfa1ea050>
8020a230:	1805883a 	mov	r2,r3
8020a234:	003fde06 	br	8020a1b0 <__reset+0xfa1ea1b0>
8020a238:	1839883a 	mov	fp,r3
8020a23c:	003fc906 	br	8020a164 <__reset+0xfa1ea164>
8020a240:	b5bfff84 	addi	r22,r22,-2
8020a244:	2449883a 	add	r4,r4,r17
8020a248:	003f3406 	br	80209f1c <__reset+0xfa1e9f1c>
8020a24c:	b5bfff84 	addi	r22,r22,-2
8020a250:	1445883a 	add	r2,r2,r17
8020a254:	003edb06 	br	80209dc4 <__reset+0xfa1e9dc4>

8020a258 <__umoddi3>:
8020a258:	defff404 	addi	sp,sp,-48
8020a25c:	df000a15 	stw	fp,40(sp)
8020a260:	dc400315 	stw	r17,12(sp)
8020a264:	dc000215 	stw	r16,8(sp)
8020a268:	dfc00b15 	stw	ra,44(sp)
8020a26c:	ddc00915 	stw	r23,36(sp)
8020a270:	dd800815 	stw	r22,32(sp)
8020a274:	dd400715 	stw	r21,28(sp)
8020a278:	dd000615 	stw	r20,24(sp)
8020a27c:	dcc00515 	stw	r19,20(sp)
8020a280:	dc800415 	stw	r18,16(sp)
8020a284:	2021883a 	mov	r16,r4
8020a288:	2823883a 	mov	r17,r5
8020a28c:	2839883a 	mov	fp,r5
8020a290:	38003c1e 	bne	r7,zero,8020a384 <__umoddi3+0x12c>
8020a294:	3027883a 	mov	r19,r6
8020a298:	2029883a 	mov	r20,r4
8020a29c:	2980512e 	bgeu	r5,r6,8020a3e4 <__umoddi3+0x18c>
8020a2a0:	00bfffd4 	movui	r2,65535
8020a2a4:	11809a36 	bltu	r2,r6,8020a510 <__umoddi3+0x2b8>
8020a2a8:	01003fc4 	movi	r4,255
8020a2ac:	2189803a 	cmpltu	r4,r4,r6
8020a2b0:	200890fa 	slli	r4,r4,3
8020a2b4:	3104d83a 	srl	r2,r6,r4
8020a2b8:	00e00874 	movhi	r3,32801
8020a2bc:	18c91504 	addi	r3,r3,9300
8020a2c0:	1885883a 	add	r2,r3,r2
8020a2c4:	10c00003 	ldbu	r3,0(r2)
8020a2c8:	00800804 	movi	r2,32
8020a2cc:	1909883a 	add	r4,r3,r4
8020a2d0:	1125c83a 	sub	r18,r2,r4
8020a2d4:	90000526 	beq	r18,zero,8020a2ec <__umoddi3+0x94>
8020a2d8:	8ca2983a 	sll	r17,r17,r18
8020a2dc:	8108d83a 	srl	r4,r16,r4
8020a2e0:	34a6983a 	sll	r19,r6,r18
8020a2e4:	84a8983a 	sll	r20,r16,r18
8020a2e8:	2478b03a 	or	fp,r4,r17
8020a2ec:	982ed43a 	srli	r23,r19,16
8020a2f0:	e009883a 	mov	r4,fp
8020a2f4:	9dbfffcc 	andi	r22,r19,65535
8020a2f8:	b80b883a 	mov	r5,r23
8020a2fc:	020a8ec0 	call	8020a8ec <__umodsi3>
8020a300:	e009883a 	mov	r4,fp
8020a304:	b80b883a 	mov	r5,r23
8020a308:	102b883a 	mov	r21,r2
8020a30c:	020a8880 	call	8020a888 <__udivsi3>
8020a310:	a806943a 	slli	r3,r21,16
8020a314:	a008d43a 	srli	r4,r20,16
8020a318:	b085383a 	mul	r2,r22,r2
8020a31c:	20c8b03a 	or	r4,r4,r3
8020a320:	2080032e 	bgeu	r4,r2,8020a330 <__umoddi3+0xd8>
8020a324:	24c9883a 	add	r4,r4,r19
8020a328:	24c00136 	bltu	r4,r19,8020a330 <__umoddi3+0xd8>
8020a32c:	20811036 	bltu	r4,r2,8020a770 <__umoddi3+0x518>
8020a330:	20abc83a 	sub	r21,r4,r2
8020a334:	b80b883a 	mov	r5,r23
8020a338:	a809883a 	mov	r4,r21
8020a33c:	020a8ec0 	call	8020a8ec <__umodsi3>
8020a340:	1023883a 	mov	r17,r2
8020a344:	b80b883a 	mov	r5,r23
8020a348:	a809883a 	mov	r4,r21
8020a34c:	020a8880 	call	8020a888 <__udivsi3>
8020a350:	8822943a 	slli	r17,r17,16
8020a354:	b085383a 	mul	r2,r22,r2
8020a358:	a0ffffcc 	andi	r3,r20,65535
8020a35c:	1c46b03a 	or	r3,r3,r17
8020a360:	1880042e 	bgeu	r3,r2,8020a374 <__umoddi3+0x11c>
8020a364:	1cc7883a 	add	r3,r3,r19
8020a368:	1cc00236 	bltu	r3,r19,8020a374 <__umoddi3+0x11c>
8020a36c:	1880012e 	bgeu	r3,r2,8020a374 <__umoddi3+0x11c>
8020a370:	1cc7883a 	add	r3,r3,r19
8020a374:	1885c83a 	sub	r2,r3,r2
8020a378:	1484d83a 	srl	r2,r2,r18
8020a37c:	0007883a 	mov	r3,zero
8020a380:	00004f06 	br	8020a4c0 <__umoddi3+0x268>
8020a384:	29c04c36 	bltu	r5,r7,8020a4b8 <__umoddi3+0x260>
8020a388:	00bfffd4 	movui	r2,65535
8020a38c:	11c0582e 	bgeu	r2,r7,8020a4f0 <__umoddi3+0x298>
8020a390:	00804034 	movhi	r2,256
8020a394:	10bfffc4 	addi	r2,r2,-1
8020a398:	11c0e736 	bltu	r2,r7,8020a738 <__umoddi3+0x4e0>
8020a39c:	01000404 	movi	r4,16
8020a3a0:	3904d83a 	srl	r2,r7,r4
8020a3a4:	00e00874 	movhi	r3,32801
8020a3a8:	18c91504 	addi	r3,r3,9300
8020a3ac:	1885883a 	add	r2,r3,r2
8020a3b0:	14c00003 	ldbu	r19,0(r2)
8020a3b4:	00c00804 	movi	r3,32
8020a3b8:	9927883a 	add	r19,r19,r4
8020a3bc:	1ce9c83a 	sub	r20,r3,r19
8020a3c0:	a000581e 	bne	r20,zero,8020a524 <__umoddi3+0x2cc>
8020a3c4:	3c400136 	bltu	r7,r17,8020a3cc <__umoddi3+0x174>
8020a3c8:	8180eb36 	bltu	r16,r6,8020a778 <__umoddi3+0x520>
8020a3cc:	8185c83a 	sub	r2,r16,r6
8020a3d0:	89e3c83a 	sub	r17,r17,r7
8020a3d4:	8089803a 	cmpltu	r4,r16,r2
8020a3d8:	8939c83a 	sub	fp,r17,r4
8020a3dc:	e007883a 	mov	r3,fp
8020a3e0:	00003706 	br	8020a4c0 <__umoddi3+0x268>
8020a3e4:	3000041e 	bne	r6,zero,8020a3f8 <__umoddi3+0x1a0>
8020a3e8:	000b883a 	mov	r5,zero
8020a3ec:	01000044 	movi	r4,1
8020a3f0:	020a8880 	call	8020a888 <__udivsi3>
8020a3f4:	1027883a 	mov	r19,r2
8020a3f8:	00bfffd4 	movui	r2,65535
8020a3fc:	14c0402e 	bgeu	r2,r19,8020a500 <__umoddi3+0x2a8>
8020a400:	00804034 	movhi	r2,256
8020a404:	10bfffc4 	addi	r2,r2,-1
8020a408:	14c0cd36 	bltu	r2,r19,8020a740 <__umoddi3+0x4e8>
8020a40c:	00800404 	movi	r2,16
8020a410:	9886d83a 	srl	r3,r19,r2
8020a414:	01200874 	movhi	r4,32801
8020a418:	21091504 	addi	r4,r4,9300
8020a41c:	20c7883a 	add	r3,r4,r3
8020a420:	18c00003 	ldbu	r3,0(r3)
8020a424:	1887883a 	add	r3,r3,r2
8020a428:	00800804 	movi	r2,32
8020a42c:	10e5c83a 	sub	r18,r2,r3
8020a430:	9000901e 	bne	r18,zero,8020a674 <__umoddi3+0x41c>
8020a434:	982cd43a 	srli	r22,r19,16
8020a438:	8ce3c83a 	sub	r17,r17,r19
8020a43c:	9d7fffcc 	andi	r21,r19,65535
8020a440:	b00b883a 	mov	r5,r22
8020a444:	8809883a 	mov	r4,r17
8020a448:	020a8ec0 	call	8020a8ec <__umodsi3>
8020a44c:	8809883a 	mov	r4,r17
8020a450:	b00b883a 	mov	r5,r22
8020a454:	1021883a 	mov	r16,r2
8020a458:	020a8880 	call	8020a888 <__udivsi3>
8020a45c:	8006943a 	slli	r3,r16,16
8020a460:	a008d43a 	srli	r4,r20,16
8020a464:	1545383a 	mul	r2,r2,r21
8020a468:	20c8b03a 	or	r4,r4,r3
8020a46c:	2080042e 	bgeu	r4,r2,8020a480 <__umoddi3+0x228>
8020a470:	24c9883a 	add	r4,r4,r19
8020a474:	24c00236 	bltu	r4,r19,8020a480 <__umoddi3+0x228>
8020a478:	2080012e 	bgeu	r4,r2,8020a480 <__umoddi3+0x228>
8020a47c:	24c9883a 	add	r4,r4,r19
8020a480:	20a1c83a 	sub	r16,r4,r2
8020a484:	b00b883a 	mov	r5,r22
8020a488:	8009883a 	mov	r4,r16
8020a48c:	020a8ec0 	call	8020a8ec <__umodsi3>
8020a490:	1023883a 	mov	r17,r2
8020a494:	b00b883a 	mov	r5,r22
8020a498:	8009883a 	mov	r4,r16
8020a49c:	020a8880 	call	8020a888 <__udivsi3>
8020a4a0:	8822943a 	slli	r17,r17,16
8020a4a4:	1545383a 	mul	r2,r2,r21
8020a4a8:	a53fffcc 	andi	r20,r20,65535
8020a4ac:	a446b03a 	or	r3,r20,r17
8020a4b0:	18bfb02e 	bgeu	r3,r2,8020a374 <__reset+0xfa1ea374>
8020a4b4:	003fab06 	br	8020a364 <__reset+0xfa1ea364>
8020a4b8:	2005883a 	mov	r2,r4
8020a4bc:	2807883a 	mov	r3,r5
8020a4c0:	dfc00b17 	ldw	ra,44(sp)
8020a4c4:	df000a17 	ldw	fp,40(sp)
8020a4c8:	ddc00917 	ldw	r23,36(sp)
8020a4cc:	dd800817 	ldw	r22,32(sp)
8020a4d0:	dd400717 	ldw	r21,28(sp)
8020a4d4:	dd000617 	ldw	r20,24(sp)
8020a4d8:	dcc00517 	ldw	r19,20(sp)
8020a4dc:	dc800417 	ldw	r18,16(sp)
8020a4e0:	dc400317 	ldw	r17,12(sp)
8020a4e4:	dc000217 	ldw	r16,8(sp)
8020a4e8:	dec00c04 	addi	sp,sp,48
8020a4ec:	f800283a 	ret
8020a4f0:	04c03fc4 	movi	r19,255
8020a4f4:	99c9803a 	cmpltu	r4,r19,r7
8020a4f8:	200890fa 	slli	r4,r4,3
8020a4fc:	003fa806 	br	8020a3a0 <__reset+0xfa1ea3a0>
8020a500:	00803fc4 	movi	r2,255
8020a504:	14c5803a 	cmpltu	r2,r2,r19
8020a508:	100490fa 	slli	r2,r2,3
8020a50c:	003fc006 	br	8020a410 <__reset+0xfa1ea410>
8020a510:	00804034 	movhi	r2,256
8020a514:	10bfffc4 	addi	r2,r2,-1
8020a518:	11808b36 	bltu	r2,r6,8020a748 <__umoddi3+0x4f0>
8020a51c:	01000404 	movi	r4,16
8020a520:	003f6406 	br	8020a2b4 <__reset+0xfa1ea2b4>
8020a524:	34c4d83a 	srl	r2,r6,r19
8020a528:	3d0e983a 	sll	r7,r7,r20
8020a52c:	8cf8d83a 	srl	fp,r17,r19
8020a530:	8d10983a 	sll	r8,r17,r20
8020a534:	38aab03a 	or	r21,r7,r2
8020a538:	a82cd43a 	srli	r22,r21,16
8020a53c:	84e2d83a 	srl	r17,r16,r19
8020a540:	e009883a 	mov	r4,fp
8020a544:	b00b883a 	mov	r5,r22
8020a548:	8a22b03a 	or	r17,r17,r8
8020a54c:	3524983a 	sll	r18,r6,r20
8020a550:	020a8ec0 	call	8020a8ec <__umodsi3>
8020a554:	e009883a 	mov	r4,fp
8020a558:	b00b883a 	mov	r5,r22
8020a55c:	102f883a 	mov	r23,r2
8020a560:	020a8880 	call	8020a888 <__udivsi3>
8020a564:	100d883a 	mov	r6,r2
8020a568:	b808943a 	slli	r4,r23,16
8020a56c:	aa3fffcc 	andi	r8,r21,65535
8020a570:	8804d43a 	srli	r2,r17,16
8020a574:	41af383a 	mul	r23,r8,r6
8020a578:	8520983a 	sll	r16,r16,r20
8020a57c:	1104b03a 	or	r2,r2,r4
8020a580:	15c0042e 	bgeu	r2,r23,8020a594 <__umoddi3+0x33c>
8020a584:	1545883a 	add	r2,r2,r21
8020a588:	30ffffc4 	addi	r3,r6,-1
8020a58c:	1540742e 	bgeu	r2,r21,8020a760 <__umoddi3+0x508>
8020a590:	180d883a 	mov	r6,r3
8020a594:	15efc83a 	sub	r23,r2,r23
8020a598:	b00b883a 	mov	r5,r22
8020a59c:	b809883a 	mov	r4,r23
8020a5a0:	d9800115 	stw	r6,4(sp)
8020a5a4:	da000015 	stw	r8,0(sp)
8020a5a8:	020a8ec0 	call	8020a8ec <__umodsi3>
8020a5ac:	b00b883a 	mov	r5,r22
8020a5b0:	b809883a 	mov	r4,r23
8020a5b4:	1039883a 	mov	fp,r2
8020a5b8:	020a8880 	call	8020a888 <__udivsi3>
8020a5bc:	da000017 	ldw	r8,0(sp)
8020a5c0:	e038943a 	slli	fp,fp,16
8020a5c4:	100b883a 	mov	r5,r2
8020a5c8:	4089383a 	mul	r4,r8,r2
8020a5cc:	8a3fffcc 	andi	r8,r17,65535
8020a5d0:	4710b03a 	or	r8,r8,fp
8020a5d4:	d9800117 	ldw	r6,4(sp)
8020a5d8:	4100042e 	bgeu	r8,r4,8020a5ec <__umoddi3+0x394>
8020a5dc:	4551883a 	add	r8,r8,r21
8020a5e0:	10bfffc4 	addi	r2,r2,-1
8020a5e4:	45405a2e 	bgeu	r8,r21,8020a750 <__umoddi3+0x4f8>
8020a5e8:	100b883a 	mov	r5,r2
8020a5ec:	300c943a 	slli	r6,r6,16
8020a5f0:	91ffffcc 	andi	r7,r18,65535
8020a5f4:	9004d43a 	srli	r2,r18,16
8020a5f8:	314cb03a 	or	r6,r6,r5
8020a5fc:	317fffcc 	andi	r5,r6,65535
8020a600:	300cd43a 	srli	r6,r6,16
8020a604:	29d3383a 	mul	r9,r5,r7
8020a608:	288b383a 	mul	r5,r5,r2
8020a60c:	31cf383a 	mul	r7,r6,r7
8020a610:	4806d43a 	srli	r3,r9,16
8020a614:	4111c83a 	sub	r8,r8,r4
8020a618:	29cb883a 	add	r5,r5,r7
8020a61c:	194b883a 	add	r5,r3,r5
8020a620:	3085383a 	mul	r2,r6,r2
8020a624:	29c0022e 	bgeu	r5,r7,8020a630 <__umoddi3+0x3d8>
8020a628:	00c00074 	movhi	r3,1
8020a62c:	10c5883a 	add	r2,r2,r3
8020a630:	2808d43a 	srli	r4,r5,16
8020a634:	280a943a 	slli	r5,r5,16
8020a638:	4a7fffcc 	andi	r9,r9,65535
8020a63c:	2085883a 	add	r2,r4,r2
8020a640:	2a4b883a 	add	r5,r5,r9
8020a644:	40803636 	bltu	r8,r2,8020a720 <__umoddi3+0x4c8>
8020a648:	40804d26 	beq	r8,r2,8020a780 <__umoddi3+0x528>
8020a64c:	4089c83a 	sub	r4,r8,r2
8020a650:	280f883a 	mov	r7,r5
8020a654:	81cfc83a 	sub	r7,r16,r7
8020a658:	81c7803a 	cmpltu	r3,r16,r7
8020a65c:	20c7c83a 	sub	r3,r4,r3
8020a660:	1cc4983a 	sll	r2,r3,r19
8020a664:	3d0ed83a 	srl	r7,r7,r20
8020a668:	1d06d83a 	srl	r3,r3,r20
8020a66c:	11c4b03a 	or	r2,r2,r7
8020a670:	003f9306 	br	8020a4c0 <__reset+0xfa1ea4c0>
8020a674:	9ca6983a 	sll	r19,r19,r18
8020a678:	88e8d83a 	srl	r20,r17,r3
8020a67c:	80c4d83a 	srl	r2,r16,r3
8020a680:	982cd43a 	srli	r22,r19,16
8020a684:	8ca2983a 	sll	r17,r17,r18
8020a688:	a009883a 	mov	r4,r20
8020a68c:	b00b883a 	mov	r5,r22
8020a690:	1478b03a 	or	fp,r2,r17
8020a694:	020a8ec0 	call	8020a8ec <__umodsi3>
8020a698:	a009883a 	mov	r4,r20
8020a69c:	b00b883a 	mov	r5,r22
8020a6a0:	1023883a 	mov	r17,r2
8020a6a4:	020a8880 	call	8020a888 <__udivsi3>
8020a6a8:	9d7fffcc 	andi	r21,r19,65535
8020a6ac:	880a943a 	slli	r5,r17,16
8020a6b0:	e008d43a 	srli	r4,fp,16
8020a6b4:	a885383a 	mul	r2,r21,r2
8020a6b8:	84a8983a 	sll	r20,r16,r18
8020a6bc:	2148b03a 	or	r4,r4,r5
8020a6c0:	2080042e 	bgeu	r4,r2,8020a6d4 <__umoddi3+0x47c>
8020a6c4:	24c9883a 	add	r4,r4,r19
8020a6c8:	24c00236 	bltu	r4,r19,8020a6d4 <__umoddi3+0x47c>
8020a6cc:	2080012e 	bgeu	r4,r2,8020a6d4 <__umoddi3+0x47c>
8020a6d0:	24c9883a 	add	r4,r4,r19
8020a6d4:	20a3c83a 	sub	r17,r4,r2
8020a6d8:	b00b883a 	mov	r5,r22
8020a6dc:	8809883a 	mov	r4,r17
8020a6e0:	020a8ec0 	call	8020a8ec <__umodsi3>
8020a6e4:	102f883a 	mov	r23,r2
8020a6e8:	8809883a 	mov	r4,r17
8020a6ec:	b00b883a 	mov	r5,r22
8020a6f0:	020a8880 	call	8020a888 <__udivsi3>
8020a6f4:	b82e943a 	slli	r23,r23,16
8020a6f8:	a885383a 	mul	r2,r21,r2
8020a6fc:	e13fffcc 	andi	r4,fp,65535
8020a700:	25c8b03a 	or	r4,r4,r23
8020a704:	2080042e 	bgeu	r4,r2,8020a718 <__umoddi3+0x4c0>
8020a708:	24c9883a 	add	r4,r4,r19
8020a70c:	24c00236 	bltu	r4,r19,8020a718 <__umoddi3+0x4c0>
8020a710:	2080012e 	bgeu	r4,r2,8020a718 <__umoddi3+0x4c0>
8020a714:	24c9883a 	add	r4,r4,r19
8020a718:	20a3c83a 	sub	r17,r4,r2
8020a71c:	003f4806 	br	8020a440 <__reset+0xfa1ea440>
8020a720:	2c8fc83a 	sub	r7,r5,r18
8020a724:	1545c83a 	sub	r2,r2,r21
8020a728:	29cb803a 	cmpltu	r5,r5,r7
8020a72c:	1145c83a 	sub	r2,r2,r5
8020a730:	4089c83a 	sub	r4,r8,r2
8020a734:	003fc706 	br	8020a654 <__reset+0xfa1ea654>
8020a738:	01000604 	movi	r4,24
8020a73c:	003f1806 	br	8020a3a0 <__reset+0xfa1ea3a0>
8020a740:	00800604 	movi	r2,24
8020a744:	003f3206 	br	8020a410 <__reset+0xfa1ea410>
8020a748:	01000604 	movi	r4,24
8020a74c:	003ed906 	br	8020a2b4 <__reset+0xfa1ea2b4>
8020a750:	413fa52e 	bgeu	r8,r4,8020a5e8 <__reset+0xfa1ea5e8>
8020a754:	297fff84 	addi	r5,r5,-2
8020a758:	4551883a 	add	r8,r8,r21
8020a75c:	003fa306 	br	8020a5ec <__reset+0xfa1ea5ec>
8020a760:	15ff8b2e 	bgeu	r2,r23,8020a590 <__reset+0xfa1ea590>
8020a764:	31bfff84 	addi	r6,r6,-2
8020a768:	1545883a 	add	r2,r2,r21
8020a76c:	003f8906 	br	8020a594 <__reset+0xfa1ea594>
8020a770:	24c9883a 	add	r4,r4,r19
8020a774:	003eee06 	br	8020a330 <__reset+0xfa1ea330>
8020a778:	8005883a 	mov	r2,r16
8020a77c:	003f1706 	br	8020a3dc <__reset+0xfa1ea3dc>
8020a780:	817fe736 	bltu	r16,r5,8020a720 <__reset+0xfa1ea720>
8020a784:	280f883a 	mov	r7,r5
8020a788:	0009883a 	mov	r4,zero
8020a78c:	003fb106 	br	8020a654 <__reset+0xfa1ea654>

8020a790 <__divsi3>:
8020a790:	20001b16 	blt	r4,zero,8020a800 <__divsi3+0x70>
8020a794:	000f883a 	mov	r7,zero
8020a798:	28001616 	blt	r5,zero,8020a7f4 <__divsi3+0x64>
8020a79c:	200d883a 	mov	r6,r4
8020a7a0:	29001a2e 	bgeu	r5,r4,8020a80c <__divsi3+0x7c>
8020a7a4:	00800804 	movi	r2,32
8020a7a8:	00c00044 	movi	r3,1
8020a7ac:	00000106 	br	8020a7b4 <__divsi3+0x24>
8020a7b0:	10000d26 	beq	r2,zero,8020a7e8 <__divsi3+0x58>
8020a7b4:	294b883a 	add	r5,r5,r5
8020a7b8:	10bfffc4 	addi	r2,r2,-1
8020a7bc:	18c7883a 	add	r3,r3,r3
8020a7c0:	293ffb36 	bltu	r5,r4,8020a7b0 <__reset+0xfa1ea7b0>
8020a7c4:	0005883a 	mov	r2,zero
8020a7c8:	18000726 	beq	r3,zero,8020a7e8 <__divsi3+0x58>
8020a7cc:	0005883a 	mov	r2,zero
8020a7d0:	31400236 	bltu	r6,r5,8020a7dc <__divsi3+0x4c>
8020a7d4:	314dc83a 	sub	r6,r6,r5
8020a7d8:	10c4b03a 	or	r2,r2,r3
8020a7dc:	1806d07a 	srli	r3,r3,1
8020a7e0:	280ad07a 	srli	r5,r5,1
8020a7e4:	183ffa1e 	bne	r3,zero,8020a7d0 <__reset+0xfa1ea7d0>
8020a7e8:	38000126 	beq	r7,zero,8020a7f0 <__divsi3+0x60>
8020a7ec:	0085c83a 	sub	r2,zero,r2
8020a7f0:	f800283a 	ret
8020a7f4:	014bc83a 	sub	r5,zero,r5
8020a7f8:	39c0005c 	xori	r7,r7,1
8020a7fc:	003fe706 	br	8020a79c <__reset+0xfa1ea79c>
8020a800:	0109c83a 	sub	r4,zero,r4
8020a804:	01c00044 	movi	r7,1
8020a808:	003fe306 	br	8020a798 <__reset+0xfa1ea798>
8020a80c:	00c00044 	movi	r3,1
8020a810:	003fee06 	br	8020a7cc <__reset+0xfa1ea7cc>

8020a814 <__modsi3>:
8020a814:	20001716 	blt	r4,zero,8020a874 <__modsi3+0x60>
8020a818:	000f883a 	mov	r7,zero
8020a81c:	2005883a 	mov	r2,r4
8020a820:	28001216 	blt	r5,zero,8020a86c <__modsi3+0x58>
8020a824:	2900162e 	bgeu	r5,r4,8020a880 <__modsi3+0x6c>
8020a828:	01800804 	movi	r6,32
8020a82c:	00c00044 	movi	r3,1
8020a830:	00000106 	br	8020a838 <__modsi3+0x24>
8020a834:	30000a26 	beq	r6,zero,8020a860 <__modsi3+0x4c>
8020a838:	294b883a 	add	r5,r5,r5
8020a83c:	31bfffc4 	addi	r6,r6,-1
8020a840:	18c7883a 	add	r3,r3,r3
8020a844:	293ffb36 	bltu	r5,r4,8020a834 <__reset+0xfa1ea834>
8020a848:	18000526 	beq	r3,zero,8020a860 <__modsi3+0x4c>
8020a84c:	1806d07a 	srli	r3,r3,1
8020a850:	11400136 	bltu	r2,r5,8020a858 <__modsi3+0x44>
8020a854:	1145c83a 	sub	r2,r2,r5
8020a858:	280ad07a 	srli	r5,r5,1
8020a85c:	183ffb1e 	bne	r3,zero,8020a84c <__reset+0xfa1ea84c>
8020a860:	38000126 	beq	r7,zero,8020a868 <__modsi3+0x54>
8020a864:	0085c83a 	sub	r2,zero,r2
8020a868:	f800283a 	ret
8020a86c:	014bc83a 	sub	r5,zero,r5
8020a870:	003fec06 	br	8020a824 <__reset+0xfa1ea824>
8020a874:	0109c83a 	sub	r4,zero,r4
8020a878:	01c00044 	movi	r7,1
8020a87c:	003fe706 	br	8020a81c <__reset+0xfa1ea81c>
8020a880:	00c00044 	movi	r3,1
8020a884:	003ff106 	br	8020a84c <__reset+0xfa1ea84c>

8020a888 <__udivsi3>:
8020a888:	200d883a 	mov	r6,r4
8020a88c:	2900152e 	bgeu	r5,r4,8020a8e4 <__udivsi3+0x5c>
8020a890:	28001416 	blt	r5,zero,8020a8e4 <__udivsi3+0x5c>
8020a894:	00800804 	movi	r2,32
8020a898:	00c00044 	movi	r3,1
8020a89c:	00000206 	br	8020a8a8 <__udivsi3+0x20>
8020a8a0:	10000e26 	beq	r2,zero,8020a8dc <__udivsi3+0x54>
8020a8a4:	28000516 	blt	r5,zero,8020a8bc <__udivsi3+0x34>
8020a8a8:	294b883a 	add	r5,r5,r5
8020a8ac:	10bfffc4 	addi	r2,r2,-1
8020a8b0:	18c7883a 	add	r3,r3,r3
8020a8b4:	293ffa36 	bltu	r5,r4,8020a8a0 <__reset+0xfa1ea8a0>
8020a8b8:	18000826 	beq	r3,zero,8020a8dc <__udivsi3+0x54>
8020a8bc:	0005883a 	mov	r2,zero
8020a8c0:	31400236 	bltu	r6,r5,8020a8cc <__udivsi3+0x44>
8020a8c4:	314dc83a 	sub	r6,r6,r5
8020a8c8:	10c4b03a 	or	r2,r2,r3
8020a8cc:	1806d07a 	srli	r3,r3,1
8020a8d0:	280ad07a 	srli	r5,r5,1
8020a8d4:	183ffa1e 	bne	r3,zero,8020a8c0 <__reset+0xfa1ea8c0>
8020a8d8:	f800283a 	ret
8020a8dc:	0005883a 	mov	r2,zero
8020a8e0:	f800283a 	ret
8020a8e4:	00c00044 	movi	r3,1
8020a8e8:	003ff406 	br	8020a8bc <__reset+0xfa1ea8bc>

8020a8ec <__umodsi3>:
8020a8ec:	2005883a 	mov	r2,r4
8020a8f0:	2900122e 	bgeu	r5,r4,8020a93c <__umodsi3+0x50>
8020a8f4:	28001116 	blt	r5,zero,8020a93c <__umodsi3+0x50>
8020a8f8:	01800804 	movi	r6,32
8020a8fc:	00c00044 	movi	r3,1
8020a900:	00000206 	br	8020a90c <__umodsi3+0x20>
8020a904:	30000c26 	beq	r6,zero,8020a938 <__umodsi3+0x4c>
8020a908:	28000516 	blt	r5,zero,8020a920 <__umodsi3+0x34>
8020a90c:	294b883a 	add	r5,r5,r5
8020a910:	31bfffc4 	addi	r6,r6,-1
8020a914:	18c7883a 	add	r3,r3,r3
8020a918:	293ffa36 	bltu	r5,r4,8020a904 <__reset+0xfa1ea904>
8020a91c:	18000626 	beq	r3,zero,8020a938 <__umodsi3+0x4c>
8020a920:	1806d07a 	srli	r3,r3,1
8020a924:	11400136 	bltu	r2,r5,8020a92c <__umodsi3+0x40>
8020a928:	1145c83a 	sub	r2,r2,r5
8020a92c:	280ad07a 	srli	r5,r5,1
8020a930:	183ffb1e 	bne	r3,zero,8020a920 <__reset+0xfa1ea920>
8020a934:	f800283a 	ret
8020a938:	f800283a 	ret
8020a93c:	00c00044 	movi	r3,1
8020a940:	003ff706 	br	8020a920 <__reset+0xfa1ea920>

8020a944 <__adddf3>:
8020a944:	02c00434 	movhi	r11,16
8020a948:	5affffc4 	addi	r11,r11,-1
8020a94c:	2806d7fa 	srli	r3,r5,31
8020a950:	2ad4703a 	and	r10,r5,r11
8020a954:	3ad2703a 	and	r9,r7,r11
8020a958:	3804d53a 	srli	r2,r7,20
8020a95c:	3018d77a 	srli	r12,r6,29
8020a960:	280ad53a 	srli	r5,r5,20
8020a964:	501490fa 	slli	r10,r10,3
8020a968:	2010d77a 	srli	r8,r4,29
8020a96c:	481290fa 	slli	r9,r9,3
8020a970:	380ed7fa 	srli	r7,r7,31
8020a974:	defffb04 	addi	sp,sp,-20
8020a978:	dc800215 	stw	r18,8(sp)
8020a97c:	dc400115 	stw	r17,4(sp)
8020a980:	dc000015 	stw	r16,0(sp)
8020a984:	dfc00415 	stw	ra,16(sp)
8020a988:	dcc00315 	stw	r19,12(sp)
8020a98c:	1c803fcc 	andi	r18,r3,255
8020a990:	2c01ffcc 	andi	r16,r5,2047
8020a994:	5210b03a 	or	r8,r10,r8
8020a998:	202290fa 	slli	r17,r4,3
8020a99c:	1081ffcc 	andi	r2,r2,2047
8020a9a0:	4b12b03a 	or	r9,r9,r12
8020a9a4:	300c90fa 	slli	r6,r6,3
8020a9a8:	91c07526 	beq	r18,r7,8020ab80 <__adddf3+0x23c>
8020a9ac:	8087c83a 	sub	r3,r16,r2
8020a9b0:	00c0ab0e 	bge	zero,r3,8020ac60 <__adddf3+0x31c>
8020a9b4:	10002a1e 	bne	r2,zero,8020aa60 <__adddf3+0x11c>
8020a9b8:	4984b03a 	or	r2,r9,r6
8020a9bc:	1000961e 	bne	r2,zero,8020ac18 <__adddf3+0x2d4>
8020a9c0:	888001cc 	andi	r2,r17,7
8020a9c4:	10000726 	beq	r2,zero,8020a9e4 <__adddf3+0xa0>
8020a9c8:	888003cc 	andi	r2,r17,15
8020a9cc:	00c00104 	movi	r3,4
8020a9d0:	10c00426 	beq	r2,r3,8020a9e4 <__adddf3+0xa0>
8020a9d4:	88c7883a 	add	r3,r17,r3
8020a9d8:	1c63803a 	cmpltu	r17,r3,r17
8020a9dc:	4451883a 	add	r8,r8,r17
8020a9e0:	1823883a 	mov	r17,r3
8020a9e4:	4080202c 	andhi	r2,r8,128
8020a9e8:	10005926 	beq	r2,zero,8020ab50 <__adddf3+0x20c>
8020a9ec:	84000044 	addi	r16,r16,1
8020a9f0:	0081ffc4 	movi	r2,2047
8020a9f4:	8080ba26 	beq	r16,r2,8020ace0 <__adddf3+0x39c>
8020a9f8:	00bfe034 	movhi	r2,65408
8020a9fc:	10bfffc4 	addi	r2,r2,-1
8020aa00:	4090703a 	and	r8,r8,r2
8020aa04:	4004977a 	slli	r2,r8,29
8020aa08:	4010927a 	slli	r8,r8,9
8020aa0c:	8822d0fa 	srli	r17,r17,3
8020aa10:	8401ffcc 	andi	r16,r16,2047
8020aa14:	4010d33a 	srli	r8,r8,12
8020aa18:	9007883a 	mov	r3,r18
8020aa1c:	1444b03a 	or	r2,r2,r17
8020aa20:	8401ffcc 	andi	r16,r16,2047
8020aa24:	8020953a 	slli	r16,r16,20
8020aa28:	18c03fcc 	andi	r3,r3,255
8020aa2c:	01000434 	movhi	r4,16
8020aa30:	213fffc4 	addi	r4,r4,-1
8020aa34:	180697fa 	slli	r3,r3,31
8020aa38:	4110703a 	and	r8,r8,r4
8020aa3c:	4410b03a 	or	r8,r8,r16
8020aa40:	40c6b03a 	or	r3,r8,r3
8020aa44:	dfc00417 	ldw	ra,16(sp)
8020aa48:	dcc00317 	ldw	r19,12(sp)
8020aa4c:	dc800217 	ldw	r18,8(sp)
8020aa50:	dc400117 	ldw	r17,4(sp)
8020aa54:	dc000017 	ldw	r16,0(sp)
8020aa58:	dec00504 	addi	sp,sp,20
8020aa5c:	f800283a 	ret
8020aa60:	0081ffc4 	movi	r2,2047
8020aa64:	80bfd626 	beq	r16,r2,8020a9c0 <__reset+0xfa1ea9c0>
8020aa68:	4a402034 	orhi	r9,r9,128
8020aa6c:	00800e04 	movi	r2,56
8020aa70:	10c09f16 	blt	r2,r3,8020acf0 <__adddf3+0x3ac>
8020aa74:	008007c4 	movi	r2,31
8020aa78:	10c0c216 	blt	r2,r3,8020ad84 <__adddf3+0x440>
8020aa7c:	00800804 	movi	r2,32
8020aa80:	10c5c83a 	sub	r2,r2,r3
8020aa84:	488a983a 	sll	r5,r9,r2
8020aa88:	30c8d83a 	srl	r4,r6,r3
8020aa8c:	3084983a 	sll	r2,r6,r2
8020aa90:	48c6d83a 	srl	r3,r9,r3
8020aa94:	290cb03a 	or	r6,r5,r4
8020aa98:	1004c03a 	cmpne	r2,r2,zero
8020aa9c:	308cb03a 	or	r6,r6,r2
8020aaa0:	898dc83a 	sub	r6,r17,r6
8020aaa4:	89a3803a 	cmpltu	r17,r17,r6
8020aaa8:	40d1c83a 	sub	r8,r8,r3
8020aaac:	4451c83a 	sub	r8,r8,r17
8020aab0:	3023883a 	mov	r17,r6
8020aab4:	4080202c 	andhi	r2,r8,128
8020aab8:	10002326 	beq	r2,zero,8020ab48 <__adddf3+0x204>
8020aabc:	04c02034 	movhi	r19,128
8020aac0:	9cffffc4 	addi	r19,r19,-1
8020aac4:	44e6703a 	and	r19,r8,r19
8020aac8:	98007626 	beq	r19,zero,8020aca4 <__adddf3+0x360>
8020aacc:	9809883a 	mov	r4,r19
8020aad0:	020cf480 	call	8020cf48 <__clzsi2>
8020aad4:	10fffe04 	addi	r3,r2,-8
8020aad8:	010007c4 	movi	r4,31
8020aadc:	20c07716 	blt	r4,r3,8020acbc <__adddf3+0x378>
8020aae0:	00800804 	movi	r2,32
8020aae4:	10c5c83a 	sub	r2,r2,r3
8020aae8:	8884d83a 	srl	r2,r17,r2
8020aaec:	98d0983a 	sll	r8,r19,r3
8020aaf0:	88e2983a 	sll	r17,r17,r3
8020aaf4:	1204b03a 	or	r2,r2,r8
8020aaf8:	1c007416 	blt	r3,r16,8020accc <__adddf3+0x388>
8020aafc:	1c21c83a 	sub	r16,r3,r16
8020ab00:	82000044 	addi	r8,r16,1
8020ab04:	00c007c4 	movi	r3,31
8020ab08:	1a009116 	blt	r3,r8,8020ad50 <__adddf3+0x40c>
8020ab0c:	00c00804 	movi	r3,32
8020ab10:	1a07c83a 	sub	r3,r3,r8
8020ab14:	8a08d83a 	srl	r4,r17,r8
8020ab18:	88e2983a 	sll	r17,r17,r3
8020ab1c:	10c6983a 	sll	r3,r2,r3
8020ab20:	1210d83a 	srl	r8,r2,r8
8020ab24:	8804c03a 	cmpne	r2,r17,zero
8020ab28:	1906b03a 	or	r3,r3,r4
8020ab2c:	18a2b03a 	or	r17,r3,r2
8020ab30:	0021883a 	mov	r16,zero
8020ab34:	003fa206 	br	8020a9c0 <__reset+0xfa1ea9c0>
8020ab38:	1890b03a 	or	r8,r3,r2
8020ab3c:	40017d26 	beq	r8,zero,8020b134 <__adddf3+0x7f0>
8020ab40:	1011883a 	mov	r8,r2
8020ab44:	1823883a 	mov	r17,r3
8020ab48:	888001cc 	andi	r2,r17,7
8020ab4c:	103f9e1e 	bne	r2,zero,8020a9c8 <__reset+0xfa1ea9c8>
8020ab50:	4004977a 	slli	r2,r8,29
8020ab54:	8822d0fa 	srli	r17,r17,3
8020ab58:	4010d0fa 	srli	r8,r8,3
8020ab5c:	9007883a 	mov	r3,r18
8020ab60:	1444b03a 	or	r2,r2,r17
8020ab64:	0101ffc4 	movi	r4,2047
8020ab68:	81002426 	beq	r16,r4,8020abfc <__adddf3+0x2b8>
8020ab6c:	8120703a 	and	r16,r16,r4
8020ab70:	01000434 	movhi	r4,16
8020ab74:	213fffc4 	addi	r4,r4,-1
8020ab78:	4110703a 	and	r8,r8,r4
8020ab7c:	003fa806 	br	8020aa20 <__reset+0xfa1eaa20>
8020ab80:	8089c83a 	sub	r4,r16,r2
8020ab84:	01005e0e 	bge	zero,r4,8020ad00 <__adddf3+0x3bc>
8020ab88:	10002b26 	beq	r2,zero,8020ac38 <__adddf3+0x2f4>
8020ab8c:	0081ffc4 	movi	r2,2047
8020ab90:	80bf8b26 	beq	r16,r2,8020a9c0 <__reset+0xfa1ea9c0>
8020ab94:	4a402034 	orhi	r9,r9,128
8020ab98:	00800e04 	movi	r2,56
8020ab9c:	1100a40e 	bge	r2,r4,8020ae30 <__adddf3+0x4ec>
8020aba0:	498cb03a 	or	r6,r9,r6
8020aba4:	300ac03a 	cmpne	r5,r6,zero
8020aba8:	0013883a 	mov	r9,zero
8020abac:	2c4b883a 	add	r5,r5,r17
8020abb0:	2c63803a 	cmpltu	r17,r5,r17
8020abb4:	4a11883a 	add	r8,r9,r8
8020abb8:	8a11883a 	add	r8,r17,r8
8020abbc:	2823883a 	mov	r17,r5
8020abc0:	4080202c 	andhi	r2,r8,128
8020abc4:	103fe026 	beq	r2,zero,8020ab48 <__reset+0xfa1eab48>
8020abc8:	84000044 	addi	r16,r16,1
8020abcc:	0081ffc4 	movi	r2,2047
8020abd0:	8080d226 	beq	r16,r2,8020af1c <__adddf3+0x5d8>
8020abd4:	00bfe034 	movhi	r2,65408
8020abd8:	10bfffc4 	addi	r2,r2,-1
8020abdc:	4090703a 	and	r8,r8,r2
8020abe0:	880ad07a 	srli	r5,r17,1
8020abe4:	400897fa 	slli	r4,r8,31
8020abe8:	88c0004c 	andi	r3,r17,1
8020abec:	28e2b03a 	or	r17,r5,r3
8020abf0:	4010d07a 	srli	r8,r8,1
8020abf4:	2462b03a 	or	r17,r4,r17
8020abf8:	003f7106 	br	8020a9c0 <__reset+0xfa1ea9c0>
8020abfc:	4088b03a 	or	r4,r8,r2
8020ac00:	20014526 	beq	r4,zero,8020b118 <__adddf3+0x7d4>
8020ac04:	01000434 	movhi	r4,16
8020ac08:	42000234 	orhi	r8,r8,8
8020ac0c:	213fffc4 	addi	r4,r4,-1
8020ac10:	4110703a 	and	r8,r8,r4
8020ac14:	003f8206 	br	8020aa20 <__reset+0xfa1eaa20>
8020ac18:	18ffffc4 	addi	r3,r3,-1
8020ac1c:	1800491e 	bne	r3,zero,8020ad44 <__adddf3+0x400>
8020ac20:	898bc83a 	sub	r5,r17,r6
8020ac24:	8963803a 	cmpltu	r17,r17,r5
8020ac28:	4251c83a 	sub	r8,r8,r9
8020ac2c:	4451c83a 	sub	r8,r8,r17
8020ac30:	2823883a 	mov	r17,r5
8020ac34:	003f9f06 	br	8020aab4 <__reset+0xfa1eaab4>
8020ac38:	4984b03a 	or	r2,r9,r6
8020ac3c:	103f6026 	beq	r2,zero,8020a9c0 <__reset+0xfa1ea9c0>
8020ac40:	213fffc4 	addi	r4,r4,-1
8020ac44:	2000931e 	bne	r4,zero,8020ae94 <__adddf3+0x550>
8020ac48:	898d883a 	add	r6,r17,r6
8020ac4c:	3463803a 	cmpltu	r17,r6,r17
8020ac50:	4251883a 	add	r8,r8,r9
8020ac54:	8a11883a 	add	r8,r17,r8
8020ac58:	3023883a 	mov	r17,r6
8020ac5c:	003fd806 	br	8020abc0 <__reset+0xfa1eabc0>
8020ac60:	1800541e 	bne	r3,zero,8020adb4 <__adddf3+0x470>
8020ac64:	80800044 	addi	r2,r16,1
8020ac68:	1081ffcc 	andi	r2,r2,2047
8020ac6c:	00c00044 	movi	r3,1
8020ac70:	1880a00e 	bge	r3,r2,8020aef4 <__adddf3+0x5b0>
8020ac74:	8989c83a 	sub	r4,r17,r6
8020ac78:	8905803a 	cmpltu	r2,r17,r4
8020ac7c:	4267c83a 	sub	r19,r8,r9
8020ac80:	98a7c83a 	sub	r19,r19,r2
8020ac84:	9880202c 	andhi	r2,r19,128
8020ac88:	10006326 	beq	r2,zero,8020ae18 <__adddf3+0x4d4>
8020ac8c:	3463c83a 	sub	r17,r6,r17
8020ac90:	4a07c83a 	sub	r3,r9,r8
8020ac94:	344d803a 	cmpltu	r6,r6,r17
8020ac98:	19a7c83a 	sub	r19,r3,r6
8020ac9c:	3825883a 	mov	r18,r7
8020aca0:	983f8a1e 	bne	r19,zero,8020aacc <__reset+0xfa1eaacc>
8020aca4:	8809883a 	mov	r4,r17
8020aca8:	020cf480 	call	8020cf48 <__clzsi2>
8020acac:	10800804 	addi	r2,r2,32
8020acb0:	10fffe04 	addi	r3,r2,-8
8020acb4:	010007c4 	movi	r4,31
8020acb8:	20ff890e 	bge	r4,r3,8020aae0 <__reset+0xfa1eaae0>
8020acbc:	10bff604 	addi	r2,r2,-40
8020acc0:	8884983a 	sll	r2,r17,r2
8020acc4:	0023883a 	mov	r17,zero
8020acc8:	1c3f8c0e 	bge	r3,r16,8020aafc <__reset+0xfa1eaafc>
8020accc:	023fe034 	movhi	r8,65408
8020acd0:	423fffc4 	addi	r8,r8,-1
8020acd4:	80e1c83a 	sub	r16,r16,r3
8020acd8:	1210703a 	and	r8,r2,r8
8020acdc:	003f3806 	br	8020a9c0 <__reset+0xfa1ea9c0>
8020ace0:	9007883a 	mov	r3,r18
8020ace4:	0011883a 	mov	r8,zero
8020ace8:	0005883a 	mov	r2,zero
8020acec:	003f4c06 	br	8020aa20 <__reset+0xfa1eaa20>
8020acf0:	498cb03a 	or	r6,r9,r6
8020acf4:	300cc03a 	cmpne	r6,r6,zero
8020acf8:	0007883a 	mov	r3,zero
8020acfc:	003f6806 	br	8020aaa0 <__reset+0xfa1eaaa0>
8020ad00:	20009c1e 	bne	r4,zero,8020af74 <__adddf3+0x630>
8020ad04:	80800044 	addi	r2,r16,1
8020ad08:	1141ffcc 	andi	r5,r2,2047
8020ad0c:	01000044 	movi	r4,1
8020ad10:	2140670e 	bge	r4,r5,8020aeb0 <__adddf3+0x56c>
8020ad14:	0101ffc4 	movi	r4,2047
8020ad18:	11007f26 	beq	r2,r4,8020af18 <__adddf3+0x5d4>
8020ad1c:	898d883a 	add	r6,r17,r6
8020ad20:	4247883a 	add	r3,r8,r9
8020ad24:	3451803a 	cmpltu	r8,r6,r17
8020ad28:	40d1883a 	add	r8,r8,r3
8020ad2c:	402297fa 	slli	r17,r8,31
8020ad30:	300cd07a 	srli	r6,r6,1
8020ad34:	4010d07a 	srli	r8,r8,1
8020ad38:	1021883a 	mov	r16,r2
8020ad3c:	89a2b03a 	or	r17,r17,r6
8020ad40:	003f1f06 	br	8020a9c0 <__reset+0xfa1ea9c0>
8020ad44:	0081ffc4 	movi	r2,2047
8020ad48:	80bf481e 	bne	r16,r2,8020aa6c <__reset+0xfa1eaa6c>
8020ad4c:	003f1c06 	br	8020a9c0 <__reset+0xfa1ea9c0>
8020ad50:	843ff844 	addi	r16,r16,-31
8020ad54:	01000804 	movi	r4,32
8020ad58:	1406d83a 	srl	r3,r2,r16
8020ad5c:	41005026 	beq	r8,r4,8020aea0 <__adddf3+0x55c>
8020ad60:	01001004 	movi	r4,64
8020ad64:	2211c83a 	sub	r8,r4,r8
8020ad68:	1204983a 	sll	r2,r2,r8
8020ad6c:	88a2b03a 	or	r17,r17,r2
8020ad70:	8822c03a 	cmpne	r17,r17,zero
8020ad74:	1c62b03a 	or	r17,r3,r17
8020ad78:	0011883a 	mov	r8,zero
8020ad7c:	0021883a 	mov	r16,zero
8020ad80:	003f7106 	br	8020ab48 <__reset+0xfa1eab48>
8020ad84:	193ff804 	addi	r4,r3,-32
8020ad88:	00800804 	movi	r2,32
8020ad8c:	4908d83a 	srl	r4,r9,r4
8020ad90:	18804526 	beq	r3,r2,8020aea8 <__adddf3+0x564>
8020ad94:	00801004 	movi	r2,64
8020ad98:	10c5c83a 	sub	r2,r2,r3
8020ad9c:	4886983a 	sll	r3,r9,r2
8020ada0:	198cb03a 	or	r6,r3,r6
8020ada4:	300cc03a 	cmpne	r6,r6,zero
8020ada8:	218cb03a 	or	r6,r4,r6
8020adac:	0007883a 	mov	r3,zero
8020adb0:	003f3b06 	br	8020aaa0 <__reset+0xfa1eaaa0>
8020adb4:	80002a26 	beq	r16,zero,8020ae60 <__adddf3+0x51c>
8020adb8:	0101ffc4 	movi	r4,2047
8020adbc:	11006826 	beq	r2,r4,8020af60 <__adddf3+0x61c>
8020adc0:	00c7c83a 	sub	r3,zero,r3
8020adc4:	42002034 	orhi	r8,r8,128
8020adc8:	01000e04 	movi	r4,56
8020adcc:	20c07c16 	blt	r4,r3,8020afc0 <__adddf3+0x67c>
8020add0:	010007c4 	movi	r4,31
8020add4:	20c0da16 	blt	r4,r3,8020b140 <__adddf3+0x7fc>
8020add8:	01000804 	movi	r4,32
8020addc:	20c9c83a 	sub	r4,r4,r3
8020ade0:	4114983a 	sll	r10,r8,r4
8020ade4:	88cad83a 	srl	r5,r17,r3
8020ade8:	8908983a 	sll	r4,r17,r4
8020adec:	40c6d83a 	srl	r3,r8,r3
8020adf0:	5162b03a 	or	r17,r10,r5
8020adf4:	2008c03a 	cmpne	r4,r4,zero
8020adf8:	8922b03a 	or	r17,r17,r4
8020adfc:	3463c83a 	sub	r17,r6,r17
8020ae00:	48c7c83a 	sub	r3,r9,r3
8020ae04:	344d803a 	cmpltu	r6,r6,r17
8020ae08:	1991c83a 	sub	r8,r3,r6
8020ae0c:	1021883a 	mov	r16,r2
8020ae10:	3825883a 	mov	r18,r7
8020ae14:	003f2706 	br	8020aab4 <__reset+0xfa1eaab4>
8020ae18:	24d0b03a 	or	r8,r4,r19
8020ae1c:	40001b1e 	bne	r8,zero,8020ae8c <__adddf3+0x548>
8020ae20:	0005883a 	mov	r2,zero
8020ae24:	0007883a 	mov	r3,zero
8020ae28:	0021883a 	mov	r16,zero
8020ae2c:	003f4d06 	br	8020ab64 <__reset+0xfa1eab64>
8020ae30:	008007c4 	movi	r2,31
8020ae34:	11003c16 	blt	r2,r4,8020af28 <__adddf3+0x5e4>
8020ae38:	00800804 	movi	r2,32
8020ae3c:	1105c83a 	sub	r2,r2,r4
8020ae40:	488e983a 	sll	r7,r9,r2
8020ae44:	310ad83a 	srl	r5,r6,r4
8020ae48:	3084983a 	sll	r2,r6,r2
8020ae4c:	4912d83a 	srl	r9,r9,r4
8020ae50:	394ab03a 	or	r5,r7,r5
8020ae54:	1004c03a 	cmpne	r2,r2,zero
8020ae58:	288ab03a 	or	r5,r5,r2
8020ae5c:	003f5306 	br	8020abac <__reset+0xfa1eabac>
8020ae60:	4448b03a 	or	r4,r8,r17
8020ae64:	20003e26 	beq	r4,zero,8020af60 <__adddf3+0x61c>
8020ae68:	00c6303a 	nor	r3,zero,r3
8020ae6c:	18003a1e 	bne	r3,zero,8020af58 <__adddf3+0x614>
8020ae70:	3463c83a 	sub	r17,r6,r17
8020ae74:	4a07c83a 	sub	r3,r9,r8
8020ae78:	344d803a 	cmpltu	r6,r6,r17
8020ae7c:	1991c83a 	sub	r8,r3,r6
8020ae80:	1021883a 	mov	r16,r2
8020ae84:	3825883a 	mov	r18,r7
8020ae88:	003f0a06 	br	8020aab4 <__reset+0xfa1eaab4>
8020ae8c:	2023883a 	mov	r17,r4
8020ae90:	003f0d06 	br	8020aac8 <__reset+0xfa1eaac8>
8020ae94:	0081ffc4 	movi	r2,2047
8020ae98:	80bf3f1e 	bne	r16,r2,8020ab98 <__reset+0xfa1eab98>
8020ae9c:	003ec806 	br	8020a9c0 <__reset+0xfa1ea9c0>
8020aea0:	0005883a 	mov	r2,zero
8020aea4:	003fb106 	br	8020ad6c <__reset+0xfa1ead6c>
8020aea8:	0007883a 	mov	r3,zero
8020aeac:	003fbc06 	br	8020ada0 <__reset+0xfa1eada0>
8020aeb0:	4444b03a 	or	r2,r8,r17
8020aeb4:	8000871e 	bne	r16,zero,8020b0d4 <__adddf3+0x790>
8020aeb8:	1000ba26 	beq	r2,zero,8020b1a4 <__adddf3+0x860>
8020aebc:	4984b03a 	or	r2,r9,r6
8020aec0:	103ebf26 	beq	r2,zero,8020a9c0 <__reset+0xfa1ea9c0>
8020aec4:	8985883a 	add	r2,r17,r6
8020aec8:	4247883a 	add	r3,r8,r9
8020aecc:	1451803a 	cmpltu	r8,r2,r17
8020aed0:	40d1883a 	add	r8,r8,r3
8020aed4:	40c0202c 	andhi	r3,r8,128
8020aed8:	1023883a 	mov	r17,r2
8020aedc:	183f1a26 	beq	r3,zero,8020ab48 <__reset+0xfa1eab48>
8020aee0:	00bfe034 	movhi	r2,65408
8020aee4:	10bfffc4 	addi	r2,r2,-1
8020aee8:	2021883a 	mov	r16,r4
8020aeec:	4090703a 	and	r8,r8,r2
8020aef0:	003eb306 	br	8020a9c0 <__reset+0xfa1ea9c0>
8020aef4:	4444b03a 	or	r2,r8,r17
8020aef8:	8000291e 	bne	r16,zero,8020afa0 <__adddf3+0x65c>
8020aefc:	10004b1e 	bne	r2,zero,8020b02c <__adddf3+0x6e8>
8020af00:	4990b03a 	or	r8,r9,r6
8020af04:	40008b26 	beq	r8,zero,8020b134 <__adddf3+0x7f0>
8020af08:	4811883a 	mov	r8,r9
8020af0c:	3023883a 	mov	r17,r6
8020af10:	3825883a 	mov	r18,r7
8020af14:	003eaa06 	br	8020a9c0 <__reset+0xfa1ea9c0>
8020af18:	1021883a 	mov	r16,r2
8020af1c:	0011883a 	mov	r8,zero
8020af20:	0005883a 	mov	r2,zero
8020af24:	003f0f06 	br	8020ab64 <__reset+0xfa1eab64>
8020af28:	217ff804 	addi	r5,r4,-32
8020af2c:	00800804 	movi	r2,32
8020af30:	494ad83a 	srl	r5,r9,r5
8020af34:	20807d26 	beq	r4,r2,8020b12c <__adddf3+0x7e8>
8020af38:	00801004 	movi	r2,64
8020af3c:	1109c83a 	sub	r4,r2,r4
8020af40:	4912983a 	sll	r9,r9,r4
8020af44:	498cb03a 	or	r6,r9,r6
8020af48:	300cc03a 	cmpne	r6,r6,zero
8020af4c:	298ab03a 	or	r5,r5,r6
8020af50:	0013883a 	mov	r9,zero
8020af54:	003f1506 	br	8020abac <__reset+0xfa1eabac>
8020af58:	0101ffc4 	movi	r4,2047
8020af5c:	113f9a1e 	bne	r2,r4,8020adc8 <__reset+0xfa1eadc8>
8020af60:	4811883a 	mov	r8,r9
8020af64:	3023883a 	mov	r17,r6
8020af68:	1021883a 	mov	r16,r2
8020af6c:	3825883a 	mov	r18,r7
8020af70:	003e9306 	br	8020a9c0 <__reset+0xfa1ea9c0>
8020af74:	8000161e 	bne	r16,zero,8020afd0 <__adddf3+0x68c>
8020af78:	444ab03a 	or	r5,r8,r17
8020af7c:	28005126 	beq	r5,zero,8020b0c4 <__adddf3+0x780>
8020af80:	0108303a 	nor	r4,zero,r4
8020af84:	20004d1e 	bne	r4,zero,8020b0bc <__adddf3+0x778>
8020af88:	89a3883a 	add	r17,r17,r6
8020af8c:	4253883a 	add	r9,r8,r9
8020af90:	898d803a 	cmpltu	r6,r17,r6
8020af94:	3251883a 	add	r8,r6,r9
8020af98:	1021883a 	mov	r16,r2
8020af9c:	003f0806 	br	8020abc0 <__reset+0xfa1eabc0>
8020afa0:	1000301e 	bne	r2,zero,8020b064 <__adddf3+0x720>
8020afa4:	4984b03a 	or	r2,r9,r6
8020afa8:	10007126 	beq	r2,zero,8020b170 <__adddf3+0x82c>
8020afac:	4811883a 	mov	r8,r9
8020afb0:	3023883a 	mov	r17,r6
8020afb4:	3825883a 	mov	r18,r7
8020afb8:	0401ffc4 	movi	r16,2047
8020afbc:	003e8006 	br	8020a9c0 <__reset+0xfa1ea9c0>
8020afc0:	4462b03a 	or	r17,r8,r17
8020afc4:	8822c03a 	cmpne	r17,r17,zero
8020afc8:	0007883a 	mov	r3,zero
8020afcc:	003f8b06 	br	8020adfc <__reset+0xfa1eadfc>
8020afd0:	0141ffc4 	movi	r5,2047
8020afd4:	11403b26 	beq	r2,r5,8020b0c4 <__adddf3+0x780>
8020afd8:	0109c83a 	sub	r4,zero,r4
8020afdc:	42002034 	orhi	r8,r8,128
8020afe0:	01400e04 	movi	r5,56
8020afe4:	29006716 	blt	r5,r4,8020b184 <__adddf3+0x840>
8020afe8:	014007c4 	movi	r5,31
8020afec:	29007016 	blt	r5,r4,8020b1b0 <__adddf3+0x86c>
8020aff0:	01400804 	movi	r5,32
8020aff4:	290bc83a 	sub	r5,r5,r4
8020aff8:	4154983a 	sll	r10,r8,r5
8020affc:	890ed83a 	srl	r7,r17,r4
8020b000:	894a983a 	sll	r5,r17,r5
8020b004:	4108d83a 	srl	r4,r8,r4
8020b008:	51e2b03a 	or	r17,r10,r7
8020b00c:	280ac03a 	cmpne	r5,r5,zero
8020b010:	8962b03a 	or	r17,r17,r5
8020b014:	89a3883a 	add	r17,r17,r6
8020b018:	2253883a 	add	r9,r4,r9
8020b01c:	898d803a 	cmpltu	r6,r17,r6
8020b020:	3251883a 	add	r8,r6,r9
8020b024:	1021883a 	mov	r16,r2
8020b028:	003ee506 	br	8020abc0 <__reset+0xfa1eabc0>
8020b02c:	4984b03a 	or	r2,r9,r6
8020b030:	103e6326 	beq	r2,zero,8020a9c0 <__reset+0xfa1ea9c0>
8020b034:	8987c83a 	sub	r3,r17,r6
8020b038:	88c9803a 	cmpltu	r4,r17,r3
8020b03c:	4245c83a 	sub	r2,r8,r9
8020b040:	1105c83a 	sub	r2,r2,r4
8020b044:	1100202c 	andhi	r4,r2,128
8020b048:	203ebb26 	beq	r4,zero,8020ab38 <__reset+0xfa1eab38>
8020b04c:	3463c83a 	sub	r17,r6,r17
8020b050:	4a07c83a 	sub	r3,r9,r8
8020b054:	344d803a 	cmpltu	r6,r6,r17
8020b058:	1991c83a 	sub	r8,r3,r6
8020b05c:	3825883a 	mov	r18,r7
8020b060:	003e5706 	br	8020a9c0 <__reset+0xfa1ea9c0>
8020b064:	4984b03a 	or	r2,r9,r6
8020b068:	10002e26 	beq	r2,zero,8020b124 <__adddf3+0x7e0>
8020b06c:	4004d0fa 	srli	r2,r8,3
8020b070:	8822d0fa 	srli	r17,r17,3
8020b074:	4010977a 	slli	r8,r8,29
8020b078:	10c0022c 	andhi	r3,r2,8
8020b07c:	4462b03a 	or	r17,r8,r17
8020b080:	18000826 	beq	r3,zero,8020b0a4 <__adddf3+0x760>
8020b084:	4808d0fa 	srli	r4,r9,3
8020b088:	20c0022c 	andhi	r3,r4,8
8020b08c:	1800051e 	bne	r3,zero,8020b0a4 <__adddf3+0x760>
8020b090:	300cd0fa 	srli	r6,r6,3
8020b094:	4806977a 	slli	r3,r9,29
8020b098:	2005883a 	mov	r2,r4
8020b09c:	3825883a 	mov	r18,r7
8020b0a0:	19a2b03a 	or	r17,r3,r6
8020b0a4:	8810d77a 	srli	r8,r17,29
8020b0a8:	100490fa 	slli	r2,r2,3
8020b0ac:	882290fa 	slli	r17,r17,3
8020b0b0:	0401ffc4 	movi	r16,2047
8020b0b4:	4090b03a 	or	r8,r8,r2
8020b0b8:	003e4106 	br	8020a9c0 <__reset+0xfa1ea9c0>
8020b0bc:	0141ffc4 	movi	r5,2047
8020b0c0:	117fc71e 	bne	r2,r5,8020afe0 <__reset+0xfa1eafe0>
8020b0c4:	4811883a 	mov	r8,r9
8020b0c8:	3023883a 	mov	r17,r6
8020b0cc:	1021883a 	mov	r16,r2
8020b0d0:	003e3b06 	br	8020a9c0 <__reset+0xfa1ea9c0>
8020b0d4:	10002f26 	beq	r2,zero,8020b194 <__adddf3+0x850>
8020b0d8:	4984b03a 	or	r2,r9,r6
8020b0dc:	10001126 	beq	r2,zero,8020b124 <__adddf3+0x7e0>
8020b0e0:	4004d0fa 	srli	r2,r8,3
8020b0e4:	8822d0fa 	srli	r17,r17,3
8020b0e8:	4010977a 	slli	r8,r8,29
8020b0ec:	10c0022c 	andhi	r3,r2,8
8020b0f0:	4462b03a 	or	r17,r8,r17
8020b0f4:	183feb26 	beq	r3,zero,8020b0a4 <__reset+0xfa1eb0a4>
8020b0f8:	4808d0fa 	srli	r4,r9,3
8020b0fc:	20c0022c 	andhi	r3,r4,8
8020b100:	183fe81e 	bne	r3,zero,8020b0a4 <__reset+0xfa1eb0a4>
8020b104:	300cd0fa 	srli	r6,r6,3
8020b108:	4806977a 	slli	r3,r9,29
8020b10c:	2005883a 	mov	r2,r4
8020b110:	19a2b03a 	or	r17,r3,r6
8020b114:	003fe306 	br	8020b0a4 <__reset+0xfa1eb0a4>
8020b118:	0011883a 	mov	r8,zero
8020b11c:	0005883a 	mov	r2,zero
8020b120:	003e3f06 	br	8020aa20 <__reset+0xfa1eaa20>
8020b124:	0401ffc4 	movi	r16,2047
8020b128:	003e2506 	br	8020a9c0 <__reset+0xfa1ea9c0>
8020b12c:	0013883a 	mov	r9,zero
8020b130:	003f8406 	br	8020af44 <__reset+0xfa1eaf44>
8020b134:	0005883a 	mov	r2,zero
8020b138:	0007883a 	mov	r3,zero
8020b13c:	003e8906 	br	8020ab64 <__reset+0xfa1eab64>
8020b140:	197ff804 	addi	r5,r3,-32
8020b144:	01000804 	movi	r4,32
8020b148:	414ad83a 	srl	r5,r8,r5
8020b14c:	19002426 	beq	r3,r4,8020b1e0 <__adddf3+0x89c>
8020b150:	01001004 	movi	r4,64
8020b154:	20c7c83a 	sub	r3,r4,r3
8020b158:	40c6983a 	sll	r3,r8,r3
8020b15c:	1c46b03a 	or	r3,r3,r17
8020b160:	1806c03a 	cmpne	r3,r3,zero
8020b164:	28e2b03a 	or	r17,r5,r3
8020b168:	0007883a 	mov	r3,zero
8020b16c:	003f2306 	br	8020adfc <__reset+0xfa1eadfc>
8020b170:	0007883a 	mov	r3,zero
8020b174:	5811883a 	mov	r8,r11
8020b178:	00bfffc4 	movi	r2,-1
8020b17c:	0401ffc4 	movi	r16,2047
8020b180:	003e7806 	br	8020ab64 <__reset+0xfa1eab64>
8020b184:	4462b03a 	or	r17,r8,r17
8020b188:	8822c03a 	cmpne	r17,r17,zero
8020b18c:	0009883a 	mov	r4,zero
8020b190:	003fa006 	br	8020b014 <__reset+0xfa1eb014>
8020b194:	4811883a 	mov	r8,r9
8020b198:	3023883a 	mov	r17,r6
8020b19c:	0401ffc4 	movi	r16,2047
8020b1a0:	003e0706 	br	8020a9c0 <__reset+0xfa1ea9c0>
8020b1a4:	4811883a 	mov	r8,r9
8020b1a8:	3023883a 	mov	r17,r6
8020b1ac:	003e0406 	br	8020a9c0 <__reset+0xfa1ea9c0>
8020b1b0:	21fff804 	addi	r7,r4,-32
8020b1b4:	01400804 	movi	r5,32
8020b1b8:	41ced83a 	srl	r7,r8,r7
8020b1bc:	21400a26 	beq	r4,r5,8020b1e8 <__adddf3+0x8a4>
8020b1c0:	01401004 	movi	r5,64
8020b1c4:	2909c83a 	sub	r4,r5,r4
8020b1c8:	4108983a 	sll	r4,r8,r4
8020b1cc:	2448b03a 	or	r4,r4,r17
8020b1d0:	2008c03a 	cmpne	r4,r4,zero
8020b1d4:	3922b03a 	or	r17,r7,r4
8020b1d8:	0009883a 	mov	r4,zero
8020b1dc:	003f8d06 	br	8020b014 <__reset+0xfa1eb014>
8020b1e0:	0007883a 	mov	r3,zero
8020b1e4:	003fdd06 	br	8020b15c <__reset+0xfa1eb15c>
8020b1e8:	0009883a 	mov	r4,zero
8020b1ec:	003ff706 	br	8020b1cc <__reset+0xfa1eb1cc>

8020b1f0 <__divdf3>:
8020b1f0:	defff204 	addi	sp,sp,-56
8020b1f4:	dd400915 	stw	r21,36(sp)
8020b1f8:	282ad53a 	srli	r21,r5,20
8020b1fc:	dd000815 	stw	r20,32(sp)
8020b200:	2828d7fa 	srli	r20,r5,31
8020b204:	dc000415 	stw	r16,16(sp)
8020b208:	04000434 	movhi	r16,16
8020b20c:	df000c15 	stw	fp,48(sp)
8020b210:	843fffc4 	addi	r16,r16,-1
8020b214:	dfc00d15 	stw	ra,52(sp)
8020b218:	ddc00b15 	stw	r23,44(sp)
8020b21c:	dd800a15 	stw	r22,40(sp)
8020b220:	dcc00715 	stw	r19,28(sp)
8020b224:	dc800615 	stw	r18,24(sp)
8020b228:	dc400515 	stw	r17,20(sp)
8020b22c:	ad41ffcc 	andi	r21,r21,2047
8020b230:	2c20703a 	and	r16,r5,r16
8020b234:	a7003fcc 	andi	fp,r20,255
8020b238:	a8006126 	beq	r21,zero,8020b3c0 <__divdf3+0x1d0>
8020b23c:	0081ffc4 	movi	r2,2047
8020b240:	2025883a 	mov	r18,r4
8020b244:	a8803726 	beq	r21,r2,8020b324 <__divdf3+0x134>
8020b248:	80800434 	orhi	r2,r16,16
8020b24c:	100490fa 	slli	r2,r2,3
8020b250:	2020d77a 	srli	r16,r4,29
8020b254:	202490fa 	slli	r18,r4,3
8020b258:	ad7f0044 	addi	r21,r21,-1023
8020b25c:	80a0b03a 	or	r16,r16,r2
8020b260:	0027883a 	mov	r19,zero
8020b264:	0013883a 	mov	r9,zero
8020b268:	3804d53a 	srli	r2,r7,20
8020b26c:	382cd7fa 	srli	r22,r7,31
8020b270:	04400434 	movhi	r17,16
8020b274:	8c7fffc4 	addi	r17,r17,-1
8020b278:	1081ffcc 	andi	r2,r2,2047
8020b27c:	3011883a 	mov	r8,r6
8020b280:	3c62703a 	and	r17,r7,r17
8020b284:	b5c03fcc 	andi	r23,r22,255
8020b288:	10006c26 	beq	r2,zero,8020b43c <__divdf3+0x24c>
8020b28c:	00c1ffc4 	movi	r3,2047
8020b290:	10c06426 	beq	r2,r3,8020b424 <__divdf3+0x234>
8020b294:	88c00434 	orhi	r3,r17,16
8020b298:	180690fa 	slli	r3,r3,3
8020b29c:	3022d77a 	srli	r17,r6,29
8020b2a0:	301090fa 	slli	r8,r6,3
8020b2a4:	10bf0044 	addi	r2,r2,-1023
8020b2a8:	88e2b03a 	or	r17,r17,r3
8020b2ac:	000f883a 	mov	r7,zero
8020b2b0:	a58cf03a 	xor	r6,r20,r22
8020b2b4:	3cc8b03a 	or	r4,r7,r19
8020b2b8:	a8abc83a 	sub	r21,r21,r2
8020b2bc:	008003c4 	movi	r2,15
8020b2c0:	3007883a 	mov	r3,r6
8020b2c4:	34c03fcc 	andi	r19,r6,255
8020b2c8:	11009036 	bltu	r2,r4,8020b50c <__divdf3+0x31c>
8020b2cc:	200890ba 	slli	r4,r4,2
8020b2d0:	00a00874 	movhi	r2,32801
8020b2d4:	10acb904 	addi	r2,r2,-19740
8020b2d8:	2089883a 	add	r4,r4,r2
8020b2dc:	20800017 	ldw	r2,0(r4)
8020b2e0:	1000683a 	jmp	r2
8020b2e4:	8020b50c 	andi	zero,r16,33492
8020b2e8:	8020b35c 	xori	zero,r16,33485
8020b2ec:	8020b4fc 	xorhi	zero,r16,33491
8020b2f0:	8020b350 	cmplti	zero,r16,-32051
8020b2f4:	8020b4fc 	xorhi	zero,r16,33491
8020b2f8:	8020b4d0 	cmplti	zero,r16,-32045
8020b2fc:	8020b4fc 	xorhi	zero,r16,33491
8020b300:	8020b350 	cmplti	zero,r16,-32051
8020b304:	8020b35c 	xori	zero,r16,33485
8020b308:	8020b35c 	xori	zero,r16,33485
8020b30c:	8020b4d0 	cmplti	zero,r16,-32045
8020b310:	8020b350 	cmplti	zero,r16,-32051
8020b314:	8020b340 	call	88020b34 <__reset+0x2000b34>
8020b318:	8020b340 	call	88020b34 <__reset+0x2000b34>
8020b31c:	8020b340 	call	88020b34 <__reset+0x2000b34>
8020b320:	8020b7f0 	cmpltui	zero,r16,33503
8020b324:	2404b03a 	or	r2,r4,r16
8020b328:	1000661e 	bne	r2,zero,8020b4c4 <__divdf3+0x2d4>
8020b32c:	04c00204 	movi	r19,8
8020b330:	0021883a 	mov	r16,zero
8020b334:	0025883a 	mov	r18,zero
8020b338:	02400084 	movi	r9,2
8020b33c:	003fca06 	br	8020b268 <__reset+0xfa1eb268>
8020b340:	8023883a 	mov	r17,r16
8020b344:	9011883a 	mov	r8,r18
8020b348:	e02f883a 	mov	r23,fp
8020b34c:	480f883a 	mov	r7,r9
8020b350:	00800084 	movi	r2,2
8020b354:	3881311e 	bne	r7,r2,8020b81c <__divdf3+0x62c>
8020b358:	b827883a 	mov	r19,r23
8020b35c:	98c0004c 	andi	r3,r19,1
8020b360:	0081ffc4 	movi	r2,2047
8020b364:	000b883a 	mov	r5,zero
8020b368:	0025883a 	mov	r18,zero
8020b36c:	1004953a 	slli	r2,r2,20
8020b370:	18c03fcc 	andi	r3,r3,255
8020b374:	04400434 	movhi	r17,16
8020b378:	8c7fffc4 	addi	r17,r17,-1
8020b37c:	180697fa 	slli	r3,r3,31
8020b380:	2c4a703a 	and	r5,r5,r17
8020b384:	288ab03a 	or	r5,r5,r2
8020b388:	28c6b03a 	or	r3,r5,r3
8020b38c:	9005883a 	mov	r2,r18
8020b390:	dfc00d17 	ldw	ra,52(sp)
8020b394:	df000c17 	ldw	fp,48(sp)
8020b398:	ddc00b17 	ldw	r23,44(sp)
8020b39c:	dd800a17 	ldw	r22,40(sp)
8020b3a0:	dd400917 	ldw	r21,36(sp)
8020b3a4:	dd000817 	ldw	r20,32(sp)
8020b3a8:	dcc00717 	ldw	r19,28(sp)
8020b3ac:	dc800617 	ldw	r18,24(sp)
8020b3b0:	dc400517 	ldw	r17,20(sp)
8020b3b4:	dc000417 	ldw	r16,16(sp)
8020b3b8:	dec00e04 	addi	sp,sp,56
8020b3bc:	f800283a 	ret
8020b3c0:	2404b03a 	or	r2,r4,r16
8020b3c4:	2027883a 	mov	r19,r4
8020b3c8:	10003926 	beq	r2,zero,8020b4b0 <__divdf3+0x2c0>
8020b3cc:	80012e26 	beq	r16,zero,8020b888 <__divdf3+0x698>
8020b3d0:	8009883a 	mov	r4,r16
8020b3d4:	d9800315 	stw	r6,12(sp)
8020b3d8:	d9c00215 	stw	r7,8(sp)
8020b3dc:	020cf480 	call	8020cf48 <__clzsi2>
8020b3e0:	d9800317 	ldw	r6,12(sp)
8020b3e4:	d9c00217 	ldw	r7,8(sp)
8020b3e8:	113ffd44 	addi	r4,r2,-11
8020b3ec:	00c00704 	movi	r3,28
8020b3f0:	19012116 	blt	r3,r4,8020b878 <__divdf3+0x688>
8020b3f4:	00c00744 	movi	r3,29
8020b3f8:	147ffe04 	addi	r17,r2,-8
8020b3fc:	1907c83a 	sub	r3,r3,r4
8020b400:	8460983a 	sll	r16,r16,r17
8020b404:	98c6d83a 	srl	r3,r19,r3
8020b408:	9c64983a 	sll	r18,r19,r17
8020b40c:	1c20b03a 	or	r16,r3,r16
8020b410:	1080fcc4 	addi	r2,r2,1011
8020b414:	00abc83a 	sub	r21,zero,r2
8020b418:	0027883a 	mov	r19,zero
8020b41c:	0013883a 	mov	r9,zero
8020b420:	003f9106 	br	8020b268 <__reset+0xfa1eb268>
8020b424:	3446b03a 	or	r3,r6,r17
8020b428:	18001f1e 	bne	r3,zero,8020b4a8 <__divdf3+0x2b8>
8020b42c:	0023883a 	mov	r17,zero
8020b430:	0011883a 	mov	r8,zero
8020b434:	01c00084 	movi	r7,2
8020b438:	003f9d06 	br	8020b2b0 <__reset+0xfa1eb2b0>
8020b43c:	3446b03a 	or	r3,r6,r17
8020b440:	18001526 	beq	r3,zero,8020b498 <__divdf3+0x2a8>
8020b444:	88011b26 	beq	r17,zero,8020b8b4 <__divdf3+0x6c4>
8020b448:	8809883a 	mov	r4,r17
8020b44c:	d9800315 	stw	r6,12(sp)
8020b450:	da400115 	stw	r9,4(sp)
8020b454:	020cf480 	call	8020cf48 <__clzsi2>
8020b458:	d9800317 	ldw	r6,12(sp)
8020b45c:	da400117 	ldw	r9,4(sp)
8020b460:	113ffd44 	addi	r4,r2,-11
8020b464:	00c00704 	movi	r3,28
8020b468:	19010e16 	blt	r3,r4,8020b8a4 <__divdf3+0x6b4>
8020b46c:	00c00744 	movi	r3,29
8020b470:	123ffe04 	addi	r8,r2,-8
8020b474:	1907c83a 	sub	r3,r3,r4
8020b478:	8a22983a 	sll	r17,r17,r8
8020b47c:	30c6d83a 	srl	r3,r6,r3
8020b480:	3210983a 	sll	r8,r6,r8
8020b484:	1c62b03a 	or	r17,r3,r17
8020b488:	1080fcc4 	addi	r2,r2,1011
8020b48c:	0085c83a 	sub	r2,zero,r2
8020b490:	000f883a 	mov	r7,zero
8020b494:	003f8606 	br	8020b2b0 <__reset+0xfa1eb2b0>
8020b498:	0023883a 	mov	r17,zero
8020b49c:	0011883a 	mov	r8,zero
8020b4a0:	01c00044 	movi	r7,1
8020b4a4:	003f8206 	br	8020b2b0 <__reset+0xfa1eb2b0>
8020b4a8:	01c000c4 	movi	r7,3
8020b4ac:	003f8006 	br	8020b2b0 <__reset+0xfa1eb2b0>
8020b4b0:	04c00104 	movi	r19,4
8020b4b4:	0021883a 	mov	r16,zero
8020b4b8:	0025883a 	mov	r18,zero
8020b4bc:	02400044 	movi	r9,1
8020b4c0:	003f6906 	br	8020b268 <__reset+0xfa1eb268>
8020b4c4:	04c00304 	movi	r19,12
8020b4c8:	024000c4 	movi	r9,3
8020b4cc:	003f6606 	br	8020b268 <__reset+0xfa1eb268>
8020b4d0:	01400434 	movhi	r5,16
8020b4d4:	0007883a 	mov	r3,zero
8020b4d8:	297fffc4 	addi	r5,r5,-1
8020b4dc:	04bfffc4 	movi	r18,-1
8020b4e0:	0081ffc4 	movi	r2,2047
8020b4e4:	003fa106 	br	8020b36c <__reset+0xfa1eb36c>
8020b4e8:	00c00044 	movi	r3,1
8020b4ec:	1887c83a 	sub	r3,r3,r2
8020b4f0:	01000e04 	movi	r4,56
8020b4f4:	20c1210e 	bge	r4,r3,8020b97c <__divdf3+0x78c>
8020b4f8:	98c0004c 	andi	r3,r19,1
8020b4fc:	0005883a 	mov	r2,zero
8020b500:	000b883a 	mov	r5,zero
8020b504:	0025883a 	mov	r18,zero
8020b508:	003f9806 	br	8020b36c <__reset+0xfa1eb36c>
8020b50c:	8c00fd36 	bltu	r17,r16,8020b904 <__divdf3+0x714>
8020b510:	8440fb26 	beq	r16,r17,8020b900 <__divdf3+0x710>
8020b514:	8007883a 	mov	r3,r16
8020b518:	ad7fffc4 	addi	r21,r21,-1
8020b51c:	0021883a 	mov	r16,zero
8020b520:	4004d63a 	srli	r2,r8,24
8020b524:	8822923a 	slli	r17,r17,8
8020b528:	1809883a 	mov	r4,r3
8020b52c:	402c923a 	slli	r22,r8,8
8020b530:	88b8b03a 	or	fp,r17,r2
8020b534:	e028d43a 	srli	r20,fp,16
8020b538:	d8c00015 	stw	r3,0(sp)
8020b53c:	e5ffffcc 	andi	r23,fp,65535
8020b540:	a00b883a 	mov	r5,r20
8020b544:	020a8880 	call	8020a888 <__udivsi3>
8020b548:	d8c00017 	ldw	r3,0(sp)
8020b54c:	a00b883a 	mov	r5,r20
8020b550:	d8800315 	stw	r2,12(sp)
8020b554:	1809883a 	mov	r4,r3
8020b558:	020a8ec0 	call	8020a8ec <__umodsi3>
8020b55c:	d9800317 	ldw	r6,12(sp)
8020b560:	1006943a 	slli	r3,r2,16
8020b564:	9004d43a 	srli	r2,r18,16
8020b568:	b9a3383a 	mul	r17,r23,r6
8020b56c:	10c4b03a 	or	r2,r2,r3
8020b570:	1440062e 	bgeu	r2,r17,8020b58c <__divdf3+0x39c>
8020b574:	1705883a 	add	r2,r2,fp
8020b578:	30ffffc4 	addi	r3,r6,-1
8020b57c:	1700ee36 	bltu	r2,fp,8020b938 <__divdf3+0x748>
8020b580:	1440ed2e 	bgeu	r2,r17,8020b938 <__divdf3+0x748>
8020b584:	31bfff84 	addi	r6,r6,-2
8020b588:	1705883a 	add	r2,r2,fp
8020b58c:	1463c83a 	sub	r17,r2,r17
8020b590:	a00b883a 	mov	r5,r20
8020b594:	8809883a 	mov	r4,r17
8020b598:	d9800315 	stw	r6,12(sp)
8020b59c:	020a8880 	call	8020a888 <__udivsi3>
8020b5a0:	a00b883a 	mov	r5,r20
8020b5a4:	8809883a 	mov	r4,r17
8020b5a8:	d8800215 	stw	r2,8(sp)
8020b5ac:	020a8ec0 	call	8020a8ec <__umodsi3>
8020b5b0:	d9c00217 	ldw	r7,8(sp)
8020b5b4:	1004943a 	slli	r2,r2,16
8020b5b8:	94bfffcc 	andi	r18,r18,65535
8020b5bc:	b9d1383a 	mul	r8,r23,r7
8020b5c0:	90a4b03a 	or	r18,r18,r2
8020b5c4:	d9800317 	ldw	r6,12(sp)
8020b5c8:	9200062e 	bgeu	r18,r8,8020b5e4 <__divdf3+0x3f4>
8020b5cc:	9725883a 	add	r18,r18,fp
8020b5d0:	38bfffc4 	addi	r2,r7,-1
8020b5d4:	9700d636 	bltu	r18,fp,8020b930 <__divdf3+0x740>
8020b5d8:	9200d52e 	bgeu	r18,r8,8020b930 <__divdf3+0x740>
8020b5dc:	39ffff84 	addi	r7,r7,-2
8020b5e0:	9725883a 	add	r18,r18,fp
8020b5e4:	3004943a 	slli	r2,r6,16
8020b5e8:	b012d43a 	srli	r9,r22,16
8020b5ec:	b1bfffcc 	andi	r6,r22,65535
8020b5f0:	11e2b03a 	or	r17,r2,r7
8020b5f4:	8806d43a 	srli	r3,r17,16
8020b5f8:	893fffcc 	andi	r4,r17,65535
8020b5fc:	218b383a 	mul	r5,r4,r6
8020b600:	30c5383a 	mul	r2,r6,r3
8020b604:	2249383a 	mul	r4,r4,r9
8020b608:	280ed43a 	srli	r7,r5,16
8020b60c:	9225c83a 	sub	r18,r18,r8
8020b610:	2089883a 	add	r4,r4,r2
8020b614:	3909883a 	add	r4,r7,r4
8020b618:	1a47383a 	mul	r3,r3,r9
8020b61c:	2080022e 	bgeu	r4,r2,8020b628 <__divdf3+0x438>
8020b620:	00800074 	movhi	r2,1
8020b624:	1887883a 	add	r3,r3,r2
8020b628:	2004d43a 	srli	r2,r4,16
8020b62c:	2008943a 	slli	r4,r4,16
8020b630:	297fffcc 	andi	r5,r5,65535
8020b634:	10c7883a 	add	r3,r2,r3
8020b638:	2149883a 	add	r4,r4,r5
8020b63c:	90c0a536 	bltu	r18,r3,8020b8d4 <__divdf3+0x6e4>
8020b640:	90c0bf26 	beq	r18,r3,8020b940 <__divdf3+0x750>
8020b644:	90c7c83a 	sub	r3,r18,r3
8020b648:	810fc83a 	sub	r7,r16,r4
8020b64c:	81e5803a 	cmpltu	r18,r16,r7
8020b650:	1ca5c83a 	sub	r18,r3,r18
8020b654:	e480c126 	beq	fp,r18,8020b95c <__divdf3+0x76c>
8020b658:	a00b883a 	mov	r5,r20
8020b65c:	9009883a 	mov	r4,r18
8020b660:	d9800315 	stw	r6,12(sp)
8020b664:	d9c00215 	stw	r7,8(sp)
8020b668:	da400115 	stw	r9,4(sp)
8020b66c:	020a8880 	call	8020a888 <__udivsi3>
8020b670:	a00b883a 	mov	r5,r20
8020b674:	9009883a 	mov	r4,r18
8020b678:	d8800015 	stw	r2,0(sp)
8020b67c:	020a8ec0 	call	8020a8ec <__umodsi3>
8020b680:	d9c00217 	ldw	r7,8(sp)
8020b684:	da000017 	ldw	r8,0(sp)
8020b688:	1006943a 	slli	r3,r2,16
8020b68c:	3804d43a 	srli	r2,r7,16
8020b690:	ba21383a 	mul	r16,r23,r8
8020b694:	d9800317 	ldw	r6,12(sp)
8020b698:	10c4b03a 	or	r2,r2,r3
8020b69c:	da400117 	ldw	r9,4(sp)
8020b6a0:	1400062e 	bgeu	r2,r16,8020b6bc <__divdf3+0x4cc>
8020b6a4:	1705883a 	add	r2,r2,fp
8020b6a8:	40ffffc4 	addi	r3,r8,-1
8020b6ac:	1700ad36 	bltu	r2,fp,8020b964 <__divdf3+0x774>
8020b6b0:	1400ac2e 	bgeu	r2,r16,8020b964 <__divdf3+0x774>
8020b6b4:	423fff84 	addi	r8,r8,-2
8020b6b8:	1705883a 	add	r2,r2,fp
8020b6bc:	1421c83a 	sub	r16,r2,r16
8020b6c0:	a00b883a 	mov	r5,r20
8020b6c4:	8009883a 	mov	r4,r16
8020b6c8:	d9800315 	stw	r6,12(sp)
8020b6cc:	d9c00215 	stw	r7,8(sp)
8020b6d0:	da000015 	stw	r8,0(sp)
8020b6d4:	da400115 	stw	r9,4(sp)
8020b6d8:	020a8880 	call	8020a888 <__udivsi3>
8020b6dc:	8009883a 	mov	r4,r16
8020b6e0:	a00b883a 	mov	r5,r20
8020b6e4:	1025883a 	mov	r18,r2
8020b6e8:	020a8ec0 	call	8020a8ec <__umodsi3>
8020b6ec:	d9c00217 	ldw	r7,8(sp)
8020b6f0:	1004943a 	slli	r2,r2,16
8020b6f4:	bcaf383a 	mul	r23,r23,r18
8020b6f8:	393fffcc 	andi	r4,r7,65535
8020b6fc:	2088b03a 	or	r4,r4,r2
8020b700:	d9800317 	ldw	r6,12(sp)
8020b704:	da000017 	ldw	r8,0(sp)
8020b708:	da400117 	ldw	r9,4(sp)
8020b70c:	25c0062e 	bgeu	r4,r23,8020b728 <__divdf3+0x538>
8020b710:	2709883a 	add	r4,r4,fp
8020b714:	90bfffc4 	addi	r2,r18,-1
8020b718:	27009436 	bltu	r4,fp,8020b96c <__divdf3+0x77c>
8020b71c:	25c0932e 	bgeu	r4,r23,8020b96c <__divdf3+0x77c>
8020b720:	94bfff84 	addi	r18,r18,-2
8020b724:	2709883a 	add	r4,r4,fp
8020b728:	4004943a 	slli	r2,r8,16
8020b72c:	25efc83a 	sub	r23,r4,r23
8020b730:	1490b03a 	or	r8,r2,r18
8020b734:	4008d43a 	srli	r4,r8,16
8020b738:	40ffffcc 	andi	r3,r8,65535
8020b73c:	30c5383a 	mul	r2,r6,r3
8020b740:	1a47383a 	mul	r3,r3,r9
8020b744:	310d383a 	mul	r6,r6,r4
8020b748:	100ad43a 	srli	r5,r2,16
8020b74c:	4913383a 	mul	r9,r9,r4
8020b750:	1987883a 	add	r3,r3,r6
8020b754:	28c7883a 	add	r3,r5,r3
8020b758:	1980022e 	bgeu	r3,r6,8020b764 <__divdf3+0x574>
8020b75c:	01000074 	movhi	r4,1
8020b760:	4913883a 	add	r9,r9,r4
8020b764:	1808d43a 	srli	r4,r3,16
8020b768:	1806943a 	slli	r3,r3,16
8020b76c:	10bfffcc 	andi	r2,r2,65535
8020b770:	2253883a 	add	r9,r4,r9
8020b774:	1887883a 	add	r3,r3,r2
8020b778:	ba403836 	bltu	r23,r9,8020b85c <__divdf3+0x66c>
8020b77c:	ba403626 	beq	r23,r9,8020b858 <__divdf3+0x668>
8020b780:	42000054 	ori	r8,r8,1
8020b784:	a880ffc4 	addi	r2,r21,1023
8020b788:	00bf570e 	bge	zero,r2,8020b4e8 <__reset+0xfa1eb4e8>
8020b78c:	40c001cc 	andi	r3,r8,7
8020b790:	18000726 	beq	r3,zero,8020b7b0 <__divdf3+0x5c0>
8020b794:	40c003cc 	andi	r3,r8,15
8020b798:	01000104 	movi	r4,4
8020b79c:	19000426 	beq	r3,r4,8020b7b0 <__divdf3+0x5c0>
8020b7a0:	4107883a 	add	r3,r8,r4
8020b7a4:	1a11803a 	cmpltu	r8,r3,r8
8020b7a8:	8a23883a 	add	r17,r17,r8
8020b7ac:	1811883a 	mov	r8,r3
8020b7b0:	88c0402c 	andhi	r3,r17,256
8020b7b4:	18000426 	beq	r3,zero,8020b7c8 <__divdf3+0x5d8>
8020b7b8:	00ffc034 	movhi	r3,65280
8020b7bc:	18ffffc4 	addi	r3,r3,-1
8020b7c0:	a8810004 	addi	r2,r21,1024
8020b7c4:	88e2703a 	and	r17,r17,r3
8020b7c8:	00c1ff84 	movi	r3,2046
8020b7cc:	18bee316 	blt	r3,r2,8020b35c <__reset+0xfa1eb35c>
8020b7d0:	8824977a 	slli	r18,r17,29
8020b7d4:	4010d0fa 	srli	r8,r8,3
8020b7d8:	8822927a 	slli	r17,r17,9
8020b7dc:	1081ffcc 	andi	r2,r2,2047
8020b7e0:	9224b03a 	or	r18,r18,r8
8020b7e4:	880ad33a 	srli	r5,r17,12
8020b7e8:	98c0004c 	andi	r3,r19,1
8020b7ec:	003edf06 	br	8020b36c <__reset+0xfa1eb36c>
8020b7f0:	8080022c 	andhi	r2,r16,8
8020b7f4:	10001226 	beq	r2,zero,8020b840 <__divdf3+0x650>
8020b7f8:	8880022c 	andhi	r2,r17,8
8020b7fc:	1000101e 	bne	r2,zero,8020b840 <__divdf3+0x650>
8020b800:	00800434 	movhi	r2,16
8020b804:	89400234 	orhi	r5,r17,8
8020b808:	10bfffc4 	addi	r2,r2,-1
8020b80c:	b007883a 	mov	r3,r22
8020b810:	288a703a 	and	r5,r5,r2
8020b814:	4025883a 	mov	r18,r8
8020b818:	003f3106 	br	8020b4e0 <__reset+0xfa1eb4e0>
8020b81c:	008000c4 	movi	r2,3
8020b820:	3880a626 	beq	r7,r2,8020babc <__divdf3+0x8cc>
8020b824:	00800044 	movi	r2,1
8020b828:	3880521e 	bne	r7,r2,8020b974 <__divdf3+0x784>
8020b82c:	b807883a 	mov	r3,r23
8020b830:	0005883a 	mov	r2,zero
8020b834:	000b883a 	mov	r5,zero
8020b838:	0025883a 	mov	r18,zero
8020b83c:	003ecb06 	br	8020b36c <__reset+0xfa1eb36c>
8020b840:	00800434 	movhi	r2,16
8020b844:	81400234 	orhi	r5,r16,8
8020b848:	10bfffc4 	addi	r2,r2,-1
8020b84c:	a007883a 	mov	r3,r20
8020b850:	288a703a 	and	r5,r5,r2
8020b854:	003f2206 	br	8020b4e0 <__reset+0xfa1eb4e0>
8020b858:	183fca26 	beq	r3,zero,8020b784 <__reset+0xfa1eb784>
8020b85c:	e5ef883a 	add	r23,fp,r23
8020b860:	40bfffc4 	addi	r2,r8,-1
8020b864:	bf00392e 	bgeu	r23,fp,8020b94c <__divdf3+0x75c>
8020b868:	1011883a 	mov	r8,r2
8020b86c:	ba7fc41e 	bne	r23,r9,8020b780 <__reset+0xfa1eb780>
8020b870:	b0ffc31e 	bne	r22,r3,8020b780 <__reset+0xfa1eb780>
8020b874:	003fc306 	br	8020b784 <__reset+0xfa1eb784>
8020b878:	143ff604 	addi	r16,r2,-40
8020b87c:	9c20983a 	sll	r16,r19,r16
8020b880:	0025883a 	mov	r18,zero
8020b884:	003ee206 	br	8020b410 <__reset+0xfa1eb410>
8020b888:	d9800315 	stw	r6,12(sp)
8020b88c:	d9c00215 	stw	r7,8(sp)
8020b890:	020cf480 	call	8020cf48 <__clzsi2>
8020b894:	10800804 	addi	r2,r2,32
8020b898:	d9c00217 	ldw	r7,8(sp)
8020b89c:	d9800317 	ldw	r6,12(sp)
8020b8a0:	003ed106 	br	8020b3e8 <__reset+0xfa1eb3e8>
8020b8a4:	147ff604 	addi	r17,r2,-40
8020b8a8:	3462983a 	sll	r17,r6,r17
8020b8ac:	0011883a 	mov	r8,zero
8020b8b0:	003ef506 	br	8020b488 <__reset+0xfa1eb488>
8020b8b4:	3009883a 	mov	r4,r6
8020b8b8:	d9800315 	stw	r6,12(sp)
8020b8bc:	da400115 	stw	r9,4(sp)
8020b8c0:	020cf480 	call	8020cf48 <__clzsi2>
8020b8c4:	10800804 	addi	r2,r2,32
8020b8c8:	da400117 	ldw	r9,4(sp)
8020b8cc:	d9800317 	ldw	r6,12(sp)
8020b8d0:	003ee306 	br	8020b460 <__reset+0xfa1eb460>
8020b8d4:	85a1883a 	add	r16,r16,r22
8020b8d8:	8585803a 	cmpltu	r2,r16,r22
8020b8dc:	1705883a 	add	r2,r2,fp
8020b8e0:	14a5883a 	add	r18,r2,r18
8020b8e4:	88bfffc4 	addi	r2,r17,-1
8020b8e8:	e4800c2e 	bgeu	fp,r18,8020b91c <__divdf3+0x72c>
8020b8ec:	90c03e36 	bltu	r18,r3,8020b9e8 <__divdf3+0x7f8>
8020b8f0:	1c806926 	beq	r3,r18,8020ba98 <__divdf3+0x8a8>
8020b8f4:	90c7c83a 	sub	r3,r18,r3
8020b8f8:	1023883a 	mov	r17,r2
8020b8fc:	003f5206 	br	8020b648 <__reset+0xfa1eb648>
8020b900:	923f0436 	bltu	r18,r8,8020b514 <__reset+0xfa1eb514>
8020b904:	800897fa 	slli	r4,r16,31
8020b908:	9004d07a 	srli	r2,r18,1
8020b90c:	8006d07a 	srli	r3,r16,1
8020b910:	902097fa 	slli	r16,r18,31
8020b914:	20a4b03a 	or	r18,r4,r2
8020b918:	003f0106 	br	8020b520 <__reset+0xfa1eb520>
8020b91c:	e4bff51e 	bne	fp,r18,8020b8f4 <__reset+0xfa1eb8f4>
8020b920:	85bff22e 	bgeu	r16,r22,8020b8ec <__reset+0xfa1eb8ec>
8020b924:	e0c7c83a 	sub	r3,fp,r3
8020b928:	1023883a 	mov	r17,r2
8020b92c:	003f4606 	br	8020b648 <__reset+0xfa1eb648>
8020b930:	100f883a 	mov	r7,r2
8020b934:	003f2b06 	br	8020b5e4 <__reset+0xfa1eb5e4>
8020b938:	180d883a 	mov	r6,r3
8020b93c:	003f1306 	br	8020b58c <__reset+0xfa1eb58c>
8020b940:	813fe436 	bltu	r16,r4,8020b8d4 <__reset+0xfa1eb8d4>
8020b944:	0007883a 	mov	r3,zero
8020b948:	003f3f06 	br	8020b648 <__reset+0xfa1eb648>
8020b94c:	ba402c36 	bltu	r23,r9,8020ba00 <__divdf3+0x810>
8020b950:	4dc05426 	beq	r9,r23,8020baa4 <__divdf3+0x8b4>
8020b954:	1011883a 	mov	r8,r2
8020b958:	003f8906 	br	8020b780 <__reset+0xfa1eb780>
8020b95c:	023fffc4 	movi	r8,-1
8020b960:	003f8806 	br	8020b784 <__reset+0xfa1eb784>
8020b964:	1811883a 	mov	r8,r3
8020b968:	003f5406 	br	8020b6bc <__reset+0xfa1eb6bc>
8020b96c:	1025883a 	mov	r18,r2
8020b970:	003f6d06 	br	8020b728 <__reset+0xfa1eb728>
8020b974:	b827883a 	mov	r19,r23
8020b978:	003f8206 	br	8020b784 <__reset+0xfa1eb784>
8020b97c:	010007c4 	movi	r4,31
8020b980:	20c02616 	blt	r4,r3,8020ba1c <__divdf3+0x82c>
8020b984:	00800804 	movi	r2,32
8020b988:	10c5c83a 	sub	r2,r2,r3
8020b98c:	888a983a 	sll	r5,r17,r2
8020b990:	40c8d83a 	srl	r4,r8,r3
8020b994:	4084983a 	sll	r2,r8,r2
8020b998:	88e2d83a 	srl	r17,r17,r3
8020b99c:	2906b03a 	or	r3,r5,r4
8020b9a0:	1004c03a 	cmpne	r2,r2,zero
8020b9a4:	1886b03a 	or	r3,r3,r2
8020b9a8:	188001cc 	andi	r2,r3,7
8020b9ac:	10000726 	beq	r2,zero,8020b9cc <__divdf3+0x7dc>
8020b9b0:	188003cc 	andi	r2,r3,15
8020b9b4:	01000104 	movi	r4,4
8020b9b8:	11000426 	beq	r2,r4,8020b9cc <__divdf3+0x7dc>
8020b9bc:	1805883a 	mov	r2,r3
8020b9c0:	10c00104 	addi	r3,r2,4
8020b9c4:	1885803a 	cmpltu	r2,r3,r2
8020b9c8:	88a3883a 	add	r17,r17,r2
8020b9cc:	8880202c 	andhi	r2,r17,128
8020b9d0:	10002726 	beq	r2,zero,8020ba70 <__divdf3+0x880>
8020b9d4:	98c0004c 	andi	r3,r19,1
8020b9d8:	00800044 	movi	r2,1
8020b9dc:	000b883a 	mov	r5,zero
8020b9e0:	0025883a 	mov	r18,zero
8020b9e4:	003e6106 	br	8020b36c <__reset+0xfa1eb36c>
8020b9e8:	85a1883a 	add	r16,r16,r22
8020b9ec:	8585803a 	cmpltu	r2,r16,r22
8020b9f0:	1705883a 	add	r2,r2,fp
8020b9f4:	14a5883a 	add	r18,r2,r18
8020b9f8:	8c7fff84 	addi	r17,r17,-2
8020b9fc:	003f1106 	br	8020b644 <__reset+0xfa1eb644>
8020ba00:	b589883a 	add	r4,r22,r22
8020ba04:	25ad803a 	cmpltu	r22,r4,r22
8020ba08:	b739883a 	add	fp,r22,fp
8020ba0c:	40bfff84 	addi	r2,r8,-2
8020ba10:	bf2f883a 	add	r23,r23,fp
8020ba14:	202d883a 	mov	r22,r4
8020ba18:	003f9306 	br	8020b868 <__reset+0xfa1eb868>
8020ba1c:	013ff844 	movi	r4,-31
8020ba20:	2085c83a 	sub	r2,r4,r2
8020ba24:	8888d83a 	srl	r4,r17,r2
8020ba28:	00800804 	movi	r2,32
8020ba2c:	18802126 	beq	r3,r2,8020bab4 <__divdf3+0x8c4>
8020ba30:	00801004 	movi	r2,64
8020ba34:	10c5c83a 	sub	r2,r2,r3
8020ba38:	8884983a 	sll	r2,r17,r2
8020ba3c:	1204b03a 	or	r2,r2,r8
8020ba40:	1004c03a 	cmpne	r2,r2,zero
8020ba44:	2084b03a 	or	r2,r4,r2
8020ba48:	144001cc 	andi	r17,r2,7
8020ba4c:	88000d1e 	bne	r17,zero,8020ba84 <__divdf3+0x894>
8020ba50:	000b883a 	mov	r5,zero
8020ba54:	1024d0fa 	srli	r18,r2,3
8020ba58:	98c0004c 	andi	r3,r19,1
8020ba5c:	0005883a 	mov	r2,zero
8020ba60:	9464b03a 	or	r18,r18,r17
8020ba64:	003e4106 	br	8020b36c <__reset+0xfa1eb36c>
8020ba68:	1007883a 	mov	r3,r2
8020ba6c:	0023883a 	mov	r17,zero
8020ba70:	880a927a 	slli	r5,r17,9
8020ba74:	1805883a 	mov	r2,r3
8020ba78:	8822977a 	slli	r17,r17,29
8020ba7c:	280ad33a 	srli	r5,r5,12
8020ba80:	003ff406 	br	8020ba54 <__reset+0xfa1eba54>
8020ba84:	10c003cc 	andi	r3,r2,15
8020ba88:	01000104 	movi	r4,4
8020ba8c:	193ff626 	beq	r3,r4,8020ba68 <__reset+0xfa1eba68>
8020ba90:	0023883a 	mov	r17,zero
8020ba94:	003fca06 	br	8020b9c0 <__reset+0xfa1eb9c0>
8020ba98:	813fd336 	bltu	r16,r4,8020b9e8 <__reset+0xfa1eb9e8>
8020ba9c:	1023883a 	mov	r17,r2
8020baa0:	003fa806 	br	8020b944 <__reset+0xfa1eb944>
8020baa4:	b0ffd636 	bltu	r22,r3,8020ba00 <__reset+0xfa1eba00>
8020baa8:	1011883a 	mov	r8,r2
8020baac:	b0ff341e 	bne	r22,r3,8020b780 <__reset+0xfa1eb780>
8020bab0:	003f3406 	br	8020b784 <__reset+0xfa1eb784>
8020bab4:	0005883a 	mov	r2,zero
8020bab8:	003fe006 	br	8020ba3c <__reset+0xfa1eba3c>
8020babc:	00800434 	movhi	r2,16
8020bac0:	89400234 	orhi	r5,r17,8
8020bac4:	10bfffc4 	addi	r2,r2,-1
8020bac8:	b807883a 	mov	r3,r23
8020bacc:	288a703a 	and	r5,r5,r2
8020bad0:	4025883a 	mov	r18,r8
8020bad4:	003e8206 	br	8020b4e0 <__reset+0xfa1eb4e0>

8020bad8 <__eqdf2>:
8020bad8:	2804d53a 	srli	r2,r5,20
8020badc:	3806d53a 	srli	r3,r7,20
8020bae0:	02000434 	movhi	r8,16
8020bae4:	423fffc4 	addi	r8,r8,-1
8020bae8:	1081ffcc 	andi	r2,r2,2047
8020baec:	0281ffc4 	movi	r10,2047
8020baf0:	2a12703a 	and	r9,r5,r8
8020baf4:	18c1ffcc 	andi	r3,r3,2047
8020baf8:	3a10703a 	and	r8,r7,r8
8020bafc:	280ad7fa 	srli	r5,r5,31
8020bb00:	380ed7fa 	srli	r7,r7,31
8020bb04:	12801026 	beq	r2,r10,8020bb48 <__eqdf2+0x70>
8020bb08:	0281ffc4 	movi	r10,2047
8020bb0c:	1a800a26 	beq	r3,r10,8020bb38 <__eqdf2+0x60>
8020bb10:	10c00226 	beq	r2,r3,8020bb1c <__eqdf2+0x44>
8020bb14:	00800044 	movi	r2,1
8020bb18:	f800283a 	ret
8020bb1c:	4a3ffd1e 	bne	r9,r8,8020bb14 <__reset+0xfa1ebb14>
8020bb20:	21bffc1e 	bne	r4,r6,8020bb14 <__reset+0xfa1ebb14>
8020bb24:	29c00c26 	beq	r5,r7,8020bb58 <__eqdf2+0x80>
8020bb28:	103ffa1e 	bne	r2,zero,8020bb14 <__reset+0xfa1ebb14>
8020bb2c:	2244b03a 	or	r2,r4,r9
8020bb30:	1004c03a 	cmpne	r2,r2,zero
8020bb34:	f800283a 	ret
8020bb38:	3214b03a 	or	r10,r6,r8
8020bb3c:	503ff426 	beq	r10,zero,8020bb10 <__reset+0xfa1ebb10>
8020bb40:	00800044 	movi	r2,1
8020bb44:	f800283a 	ret
8020bb48:	2254b03a 	or	r10,r4,r9
8020bb4c:	503fee26 	beq	r10,zero,8020bb08 <__reset+0xfa1ebb08>
8020bb50:	00800044 	movi	r2,1
8020bb54:	f800283a 	ret
8020bb58:	0005883a 	mov	r2,zero
8020bb5c:	f800283a 	ret

8020bb60 <__gedf2>:
8020bb60:	2804d53a 	srli	r2,r5,20
8020bb64:	3806d53a 	srli	r3,r7,20
8020bb68:	02000434 	movhi	r8,16
8020bb6c:	423fffc4 	addi	r8,r8,-1
8020bb70:	1081ffcc 	andi	r2,r2,2047
8020bb74:	0241ffc4 	movi	r9,2047
8020bb78:	2a14703a 	and	r10,r5,r8
8020bb7c:	18c1ffcc 	andi	r3,r3,2047
8020bb80:	3a10703a 	and	r8,r7,r8
8020bb84:	280ad7fa 	srli	r5,r5,31
8020bb88:	380ed7fa 	srli	r7,r7,31
8020bb8c:	12401d26 	beq	r2,r9,8020bc04 <__gedf2+0xa4>
8020bb90:	0241ffc4 	movi	r9,2047
8020bb94:	1a401226 	beq	r3,r9,8020bbe0 <__gedf2+0x80>
8020bb98:	1000081e 	bne	r2,zero,8020bbbc <__gedf2+0x5c>
8020bb9c:	2296b03a 	or	r11,r4,r10
8020bba0:	5813003a 	cmpeq	r9,r11,zero
8020bba4:	1800091e 	bne	r3,zero,8020bbcc <__gedf2+0x6c>
8020bba8:	3218b03a 	or	r12,r6,r8
8020bbac:	6000071e 	bne	r12,zero,8020bbcc <__gedf2+0x6c>
8020bbb0:	0005883a 	mov	r2,zero
8020bbb4:	5800101e 	bne	r11,zero,8020bbf8 <__gedf2+0x98>
8020bbb8:	f800283a 	ret
8020bbbc:	18000c1e 	bne	r3,zero,8020bbf0 <__gedf2+0x90>
8020bbc0:	3212b03a 	or	r9,r6,r8
8020bbc4:	48000c26 	beq	r9,zero,8020bbf8 <__gedf2+0x98>
8020bbc8:	0013883a 	mov	r9,zero
8020bbcc:	39c03fcc 	andi	r7,r7,255
8020bbd0:	48000826 	beq	r9,zero,8020bbf4 <__gedf2+0x94>
8020bbd4:	38000926 	beq	r7,zero,8020bbfc <__gedf2+0x9c>
8020bbd8:	00800044 	movi	r2,1
8020bbdc:	f800283a 	ret
8020bbe0:	3212b03a 	or	r9,r6,r8
8020bbe4:	483fec26 	beq	r9,zero,8020bb98 <__reset+0xfa1ebb98>
8020bbe8:	00bfff84 	movi	r2,-2
8020bbec:	f800283a 	ret
8020bbf0:	39c03fcc 	andi	r7,r7,255
8020bbf4:	29c00626 	beq	r5,r7,8020bc10 <__gedf2+0xb0>
8020bbf8:	283ff726 	beq	r5,zero,8020bbd8 <__reset+0xfa1ebbd8>
8020bbfc:	00bfffc4 	movi	r2,-1
8020bc00:	f800283a 	ret
8020bc04:	2292b03a 	or	r9,r4,r10
8020bc08:	483fe126 	beq	r9,zero,8020bb90 <__reset+0xfa1ebb90>
8020bc0c:	003ff606 	br	8020bbe8 <__reset+0xfa1ebbe8>
8020bc10:	18bff916 	blt	r3,r2,8020bbf8 <__reset+0xfa1ebbf8>
8020bc14:	10c00316 	blt	r2,r3,8020bc24 <__gedf2+0xc4>
8020bc18:	42bff736 	bltu	r8,r10,8020bbf8 <__reset+0xfa1ebbf8>
8020bc1c:	52000326 	beq	r10,r8,8020bc2c <__gedf2+0xcc>
8020bc20:	5200042e 	bgeu	r10,r8,8020bc34 <__gedf2+0xd4>
8020bc24:	283fec1e 	bne	r5,zero,8020bbd8 <__reset+0xfa1ebbd8>
8020bc28:	003ff406 	br	8020bbfc <__reset+0xfa1ebbfc>
8020bc2c:	313ff236 	bltu	r6,r4,8020bbf8 <__reset+0xfa1ebbf8>
8020bc30:	21bffc36 	bltu	r4,r6,8020bc24 <__reset+0xfa1ebc24>
8020bc34:	0005883a 	mov	r2,zero
8020bc38:	f800283a 	ret

8020bc3c <__ledf2>:
8020bc3c:	2804d53a 	srli	r2,r5,20
8020bc40:	3810d53a 	srli	r8,r7,20
8020bc44:	00c00434 	movhi	r3,16
8020bc48:	18ffffc4 	addi	r3,r3,-1
8020bc4c:	1081ffcc 	andi	r2,r2,2047
8020bc50:	0241ffc4 	movi	r9,2047
8020bc54:	28d4703a 	and	r10,r5,r3
8020bc58:	4201ffcc 	andi	r8,r8,2047
8020bc5c:	38c6703a 	and	r3,r7,r3
8020bc60:	280ad7fa 	srli	r5,r5,31
8020bc64:	380ed7fa 	srli	r7,r7,31
8020bc68:	12401f26 	beq	r2,r9,8020bce8 <__ledf2+0xac>
8020bc6c:	0241ffc4 	movi	r9,2047
8020bc70:	42401426 	beq	r8,r9,8020bcc4 <__ledf2+0x88>
8020bc74:	1000091e 	bne	r2,zero,8020bc9c <__ledf2+0x60>
8020bc78:	2296b03a 	or	r11,r4,r10
8020bc7c:	5813003a 	cmpeq	r9,r11,zero
8020bc80:	29403fcc 	andi	r5,r5,255
8020bc84:	40000a1e 	bne	r8,zero,8020bcb0 <__ledf2+0x74>
8020bc88:	30d8b03a 	or	r12,r6,r3
8020bc8c:	6000081e 	bne	r12,zero,8020bcb0 <__ledf2+0x74>
8020bc90:	0005883a 	mov	r2,zero
8020bc94:	5800111e 	bne	r11,zero,8020bcdc <__ledf2+0xa0>
8020bc98:	f800283a 	ret
8020bc9c:	29403fcc 	andi	r5,r5,255
8020bca0:	40000c1e 	bne	r8,zero,8020bcd4 <__ledf2+0x98>
8020bca4:	30d2b03a 	or	r9,r6,r3
8020bca8:	48000c26 	beq	r9,zero,8020bcdc <__ledf2+0xa0>
8020bcac:	0013883a 	mov	r9,zero
8020bcb0:	39c03fcc 	andi	r7,r7,255
8020bcb4:	48000826 	beq	r9,zero,8020bcd8 <__ledf2+0x9c>
8020bcb8:	38001126 	beq	r7,zero,8020bd00 <__ledf2+0xc4>
8020bcbc:	00800044 	movi	r2,1
8020bcc0:	f800283a 	ret
8020bcc4:	30d2b03a 	or	r9,r6,r3
8020bcc8:	483fea26 	beq	r9,zero,8020bc74 <__reset+0xfa1ebc74>
8020bccc:	00800084 	movi	r2,2
8020bcd0:	f800283a 	ret
8020bcd4:	39c03fcc 	andi	r7,r7,255
8020bcd8:	39400726 	beq	r7,r5,8020bcf8 <__ledf2+0xbc>
8020bcdc:	2800081e 	bne	r5,zero,8020bd00 <__ledf2+0xc4>
8020bce0:	00800044 	movi	r2,1
8020bce4:	f800283a 	ret
8020bce8:	2292b03a 	or	r9,r4,r10
8020bcec:	483fdf26 	beq	r9,zero,8020bc6c <__reset+0xfa1ebc6c>
8020bcf0:	00800084 	movi	r2,2
8020bcf4:	f800283a 	ret
8020bcf8:	4080030e 	bge	r8,r2,8020bd08 <__ledf2+0xcc>
8020bcfc:	383fef26 	beq	r7,zero,8020bcbc <__reset+0xfa1ebcbc>
8020bd00:	00bfffc4 	movi	r2,-1
8020bd04:	f800283a 	ret
8020bd08:	123feb16 	blt	r2,r8,8020bcb8 <__reset+0xfa1ebcb8>
8020bd0c:	1abff336 	bltu	r3,r10,8020bcdc <__reset+0xfa1ebcdc>
8020bd10:	50c00326 	beq	r10,r3,8020bd20 <__ledf2+0xe4>
8020bd14:	50c0042e 	bgeu	r10,r3,8020bd28 <__ledf2+0xec>
8020bd18:	283fe81e 	bne	r5,zero,8020bcbc <__reset+0xfa1ebcbc>
8020bd1c:	003ff806 	br	8020bd00 <__reset+0xfa1ebd00>
8020bd20:	313fee36 	bltu	r6,r4,8020bcdc <__reset+0xfa1ebcdc>
8020bd24:	21bffc36 	bltu	r4,r6,8020bd18 <__reset+0xfa1ebd18>
8020bd28:	0005883a 	mov	r2,zero
8020bd2c:	f800283a 	ret

8020bd30 <__muldf3>:
8020bd30:	defff304 	addi	sp,sp,-52
8020bd34:	2804d53a 	srli	r2,r5,20
8020bd38:	dd800915 	stw	r22,36(sp)
8020bd3c:	282cd7fa 	srli	r22,r5,31
8020bd40:	dc000315 	stw	r16,12(sp)
8020bd44:	04000434 	movhi	r16,16
8020bd48:	dd400815 	stw	r21,32(sp)
8020bd4c:	dc800515 	stw	r18,20(sp)
8020bd50:	843fffc4 	addi	r16,r16,-1
8020bd54:	dfc00c15 	stw	ra,48(sp)
8020bd58:	df000b15 	stw	fp,44(sp)
8020bd5c:	ddc00a15 	stw	r23,40(sp)
8020bd60:	dd000715 	stw	r20,28(sp)
8020bd64:	dcc00615 	stw	r19,24(sp)
8020bd68:	dc400415 	stw	r17,16(sp)
8020bd6c:	1481ffcc 	andi	r18,r2,2047
8020bd70:	2c20703a 	and	r16,r5,r16
8020bd74:	b02b883a 	mov	r21,r22
8020bd78:	b2403fcc 	andi	r9,r22,255
8020bd7c:	90006026 	beq	r18,zero,8020bf00 <__muldf3+0x1d0>
8020bd80:	0081ffc4 	movi	r2,2047
8020bd84:	2029883a 	mov	r20,r4
8020bd88:	90803626 	beq	r18,r2,8020be64 <__muldf3+0x134>
8020bd8c:	80800434 	orhi	r2,r16,16
8020bd90:	100490fa 	slli	r2,r2,3
8020bd94:	2020d77a 	srli	r16,r4,29
8020bd98:	202890fa 	slli	r20,r4,3
8020bd9c:	94bf0044 	addi	r18,r18,-1023
8020bda0:	80a0b03a 	or	r16,r16,r2
8020bda4:	0027883a 	mov	r19,zero
8020bda8:	0039883a 	mov	fp,zero
8020bdac:	3804d53a 	srli	r2,r7,20
8020bdb0:	382ed7fa 	srli	r23,r7,31
8020bdb4:	04400434 	movhi	r17,16
8020bdb8:	8c7fffc4 	addi	r17,r17,-1
8020bdbc:	1081ffcc 	andi	r2,r2,2047
8020bdc0:	3011883a 	mov	r8,r6
8020bdc4:	3c62703a 	and	r17,r7,r17
8020bdc8:	ba803fcc 	andi	r10,r23,255
8020bdcc:	10006d26 	beq	r2,zero,8020bf84 <__muldf3+0x254>
8020bdd0:	00c1ffc4 	movi	r3,2047
8020bdd4:	10c06526 	beq	r2,r3,8020bf6c <__muldf3+0x23c>
8020bdd8:	88c00434 	orhi	r3,r17,16
8020bddc:	180690fa 	slli	r3,r3,3
8020bde0:	3022d77a 	srli	r17,r6,29
8020bde4:	301090fa 	slli	r8,r6,3
8020bde8:	10bf0044 	addi	r2,r2,-1023
8020bdec:	88e2b03a 	or	r17,r17,r3
8020bdf0:	000b883a 	mov	r5,zero
8020bdf4:	9085883a 	add	r2,r18,r2
8020bdf8:	2cc8b03a 	or	r4,r5,r19
8020bdfc:	00c003c4 	movi	r3,15
8020be00:	bdacf03a 	xor	r22,r23,r22
8020be04:	12c00044 	addi	r11,r2,1
8020be08:	19009936 	bltu	r3,r4,8020c070 <__muldf3+0x340>
8020be0c:	200890ba 	slli	r4,r4,2
8020be10:	00e00874 	movhi	r3,32801
8020be14:	18ef8904 	addi	r3,r3,-16860
8020be18:	20c9883a 	add	r4,r4,r3
8020be1c:	20c00017 	ldw	r3,0(r4)
8020be20:	1800683a 	jmp	r3
8020be24:	8020c070 	cmpltui	zero,r16,33537
8020be28:	8020be84 	addi	zero,r16,-32006
8020be2c:	8020be84 	addi	zero,r16,-32006
8020be30:	8020be80 	call	88020be8 <__reset+0x2000be8>
8020be34:	8020c04c 	andi	zero,r16,33537
8020be38:	8020c04c 	andi	zero,r16,33537
8020be3c:	8020c034 	orhi	zero,r16,33536
8020be40:	8020be80 	call	88020be8 <__reset+0x2000be8>
8020be44:	8020c04c 	andi	zero,r16,33537
8020be48:	8020c034 	orhi	zero,r16,33536
8020be4c:	8020c04c 	andi	zero,r16,33537
8020be50:	8020be80 	call	88020be8 <__reset+0x2000be8>
8020be54:	8020c05c 	xori	zero,r16,33537
8020be58:	8020c05c 	xori	zero,r16,33537
8020be5c:	8020c05c 	xori	zero,r16,33537
8020be60:	8020c278 	rdprs	zero,r16,-31991
8020be64:	2404b03a 	or	r2,r4,r16
8020be68:	10006f1e 	bne	r2,zero,8020c028 <__muldf3+0x2f8>
8020be6c:	04c00204 	movi	r19,8
8020be70:	0021883a 	mov	r16,zero
8020be74:	0029883a 	mov	r20,zero
8020be78:	07000084 	movi	fp,2
8020be7c:	003fcb06 	br	8020bdac <__reset+0xfa1ebdac>
8020be80:	502d883a 	mov	r22,r10
8020be84:	00800084 	movi	r2,2
8020be88:	28805726 	beq	r5,r2,8020bfe8 <__muldf3+0x2b8>
8020be8c:	008000c4 	movi	r2,3
8020be90:	28816626 	beq	r5,r2,8020c42c <__muldf3+0x6fc>
8020be94:	00800044 	movi	r2,1
8020be98:	2881411e 	bne	r5,r2,8020c3a0 <__muldf3+0x670>
8020be9c:	b02b883a 	mov	r21,r22
8020bea0:	0005883a 	mov	r2,zero
8020bea4:	000b883a 	mov	r5,zero
8020bea8:	0029883a 	mov	r20,zero
8020beac:	1004953a 	slli	r2,r2,20
8020beb0:	a8c03fcc 	andi	r3,r21,255
8020beb4:	04400434 	movhi	r17,16
8020beb8:	8c7fffc4 	addi	r17,r17,-1
8020bebc:	180697fa 	slli	r3,r3,31
8020bec0:	2c4a703a 	and	r5,r5,r17
8020bec4:	288ab03a 	or	r5,r5,r2
8020bec8:	28c6b03a 	or	r3,r5,r3
8020becc:	a005883a 	mov	r2,r20
8020bed0:	dfc00c17 	ldw	ra,48(sp)
8020bed4:	df000b17 	ldw	fp,44(sp)
8020bed8:	ddc00a17 	ldw	r23,40(sp)
8020bedc:	dd800917 	ldw	r22,36(sp)
8020bee0:	dd400817 	ldw	r21,32(sp)
8020bee4:	dd000717 	ldw	r20,28(sp)
8020bee8:	dcc00617 	ldw	r19,24(sp)
8020beec:	dc800517 	ldw	r18,20(sp)
8020bef0:	dc400417 	ldw	r17,16(sp)
8020bef4:	dc000317 	ldw	r16,12(sp)
8020bef8:	dec00d04 	addi	sp,sp,52
8020befc:	f800283a 	ret
8020bf00:	2404b03a 	or	r2,r4,r16
8020bf04:	2027883a 	mov	r19,r4
8020bf08:	10004226 	beq	r2,zero,8020c014 <__muldf3+0x2e4>
8020bf0c:	8000fc26 	beq	r16,zero,8020c300 <__muldf3+0x5d0>
8020bf10:	8009883a 	mov	r4,r16
8020bf14:	d9800215 	stw	r6,8(sp)
8020bf18:	d9c00015 	stw	r7,0(sp)
8020bf1c:	da400115 	stw	r9,4(sp)
8020bf20:	020cf480 	call	8020cf48 <__clzsi2>
8020bf24:	d9800217 	ldw	r6,8(sp)
8020bf28:	d9c00017 	ldw	r7,0(sp)
8020bf2c:	da400117 	ldw	r9,4(sp)
8020bf30:	113ffd44 	addi	r4,r2,-11
8020bf34:	00c00704 	movi	r3,28
8020bf38:	1900ed16 	blt	r3,r4,8020c2f0 <__muldf3+0x5c0>
8020bf3c:	00c00744 	movi	r3,29
8020bf40:	147ffe04 	addi	r17,r2,-8
8020bf44:	1907c83a 	sub	r3,r3,r4
8020bf48:	8460983a 	sll	r16,r16,r17
8020bf4c:	98c6d83a 	srl	r3,r19,r3
8020bf50:	9c68983a 	sll	r20,r19,r17
8020bf54:	1c20b03a 	or	r16,r3,r16
8020bf58:	1080fcc4 	addi	r2,r2,1011
8020bf5c:	00a5c83a 	sub	r18,zero,r2
8020bf60:	0027883a 	mov	r19,zero
8020bf64:	0039883a 	mov	fp,zero
8020bf68:	003f9006 	br	8020bdac <__reset+0xfa1ebdac>
8020bf6c:	3446b03a 	or	r3,r6,r17
8020bf70:	1800261e 	bne	r3,zero,8020c00c <__muldf3+0x2dc>
8020bf74:	0023883a 	mov	r17,zero
8020bf78:	0011883a 	mov	r8,zero
8020bf7c:	01400084 	movi	r5,2
8020bf80:	003f9c06 	br	8020bdf4 <__reset+0xfa1ebdf4>
8020bf84:	3446b03a 	or	r3,r6,r17
8020bf88:	18001c26 	beq	r3,zero,8020bffc <__muldf3+0x2cc>
8020bf8c:	8800ce26 	beq	r17,zero,8020c2c8 <__muldf3+0x598>
8020bf90:	8809883a 	mov	r4,r17
8020bf94:	d9800215 	stw	r6,8(sp)
8020bf98:	da400115 	stw	r9,4(sp)
8020bf9c:	da800015 	stw	r10,0(sp)
8020bfa0:	020cf480 	call	8020cf48 <__clzsi2>
8020bfa4:	d9800217 	ldw	r6,8(sp)
8020bfa8:	da400117 	ldw	r9,4(sp)
8020bfac:	da800017 	ldw	r10,0(sp)
8020bfb0:	113ffd44 	addi	r4,r2,-11
8020bfb4:	00c00704 	movi	r3,28
8020bfb8:	1900bf16 	blt	r3,r4,8020c2b8 <__muldf3+0x588>
8020bfbc:	00c00744 	movi	r3,29
8020bfc0:	123ffe04 	addi	r8,r2,-8
8020bfc4:	1907c83a 	sub	r3,r3,r4
8020bfc8:	8a22983a 	sll	r17,r17,r8
8020bfcc:	30c6d83a 	srl	r3,r6,r3
8020bfd0:	3210983a 	sll	r8,r6,r8
8020bfd4:	1c62b03a 	or	r17,r3,r17
8020bfd8:	1080fcc4 	addi	r2,r2,1011
8020bfdc:	0085c83a 	sub	r2,zero,r2
8020bfe0:	000b883a 	mov	r5,zero
8020bfe4:	003f8306 	br	8020bdf4 <__reset+0xfa1ebdf4>
8020bfe8:	b02b883a 	mov	r21,r22
8020bfec:	0081ffc4 	movi	r2,2047
8020bff0:	000b883a 	mov	r5,zero
8020bff4:	0029883a 	mov	r20,zero
8020bff8:	003fac06 	br	8020beac <__reset+0xfa1ebeac>
8020bffc:	0023883a 	mov	r17,zero
8020c000:	0011883a 	mov	r8,zero
8020c004:	01400044 	movi	r5,1
8020c008:	003f7a06 	br	8020bdf4 <__reset+0xfa1ebdf4>
8020c00c:	014000c4 	movi	r5,3
8020c010:	003f7806 	br	8020bdf4 <__reset+0xfa1ebdf4>
8020c014:	04c00104 	movi	r19,4
8020c018:	0021883a 	mov	r16,zero
8020c01c:	0029883a 	mov	r20,zero
8020c020:	07000044 	movi	fp,1
8020c024:	003f6106 	br	8020bdac <__reset+0xfa1ebdac>
8020c028:	04c00304 	movi	r19,12
8020c02c:	070000c4 	movi	fp,3
8020c030:	003f5e06 	br	8020bdac <__reset+0xfa1ebdac>
8020c034:	01400434 	movhi	r5,16
8020c038:	002b883a 	mov	r21,zero
8020c03c:	297fffc4 	addi	r5,r5,-1
8020c040:	053fffc4 	movi	r20,-1
8020c044:	0081ffc4 	movi	r2,2047
8020c048:	003f9806 	br	8020beac <__reset+0xfa1ebeac>
8020c04c:	8023883a 	mov	r17,r16
8020c050:	a011883a 	mov	r8,r20
8020c054:	e00b883a 	mov	r5,fp
8020c058:	003f8a06 	br	8020be84 <__reset+0xfa1ebe84>
8020c05c:	8023883a 	mov	r17,r16
8020c060:	a011883a 	mov	r8,r20
8020c064:	482d883a 	mov	r22,r9
8020c068:	e00b883a 	mov	r5,fp
8020c06c:	003f8506 	br	8020be84 <__reset+0xfa1ebe84>
8020c070:	a00ad43a 	srli	r5,r20,16
8020c074:	401ad43a 	srli	r13,r8,16
8020c078:	a53fffcc 	andi	r20,r20,65535
8020c07c:	423fffcc 	andi	r8,r8,65535
8020c080:	4519383a 	mul	r12,r8,r20
8020c084:	4147383a 	mul	r3,r8,r5
8020c088:	6d09383a 	mul	r4,r13,r20
8020c08c:	600cd43a 	srli	r6,r12,16
8020c090:	2b5d383a 	mul	r14,r5,r13
8020c094:	20c9883a 	add	r4,r4,r3
8020c098:	310d883a 	add	r6,r6,r4
8020c09c:	30c0022e 	bgeu	r6,r3,8020c0a8 <__muldf3+0x378>
8020c0a0:	00c00074 	movhi	r3,1
8020c0a4:	70dd883a 	add	r14,r14,r3
8020c0a8:	8826d43a 	srli	r19,r17,16
8020c0ac:	8bffffcc 	andi	r15,r17,65535
8020c0b0:	7d23383a 	mul	r17,r15,r20
8020c0b4:	7949383a 	mul	r4,r15,r5
8020c0b8:	9d29383a 	mul	r20,r19,r20
8020c0bc:	8814d43a 	srli	r10,r17,16
8020c0c0:	3012943a 	slli	r9,r6,16
8020c0c4:	a129883a 	add	r20,r20,r4
8020c0c8:	633fffcc 	andi	r12,r12,65535
8020c0cc:	5515883a 	add	r10,r10,r20
8020c0d0:	3006d43a 	srli	r3,r6,16
8020c0d4:	4b13883a 	add	r9,r9,r12
8020c0d8:	2ccb383a 	mul	r5,r5,r19
8020c0dc:	5100022e 	bgeu	r10,r4,8020c0e8 <__muldf3+0x3b8>
8020c0e0:	01000074 	movhi	r4,1
8020c0e4:	290b883a 	add	r5,r5,r4
8020c0e8:	802ad43a 	srli	r21,r16,16
8020c0ec:	843fffcc 	andi	r16,r16,65535
8020c0f0:	440d383a 	mul	r6,r8,r16
8020c0f4:	4565383a 	mul	r18,r8,r21
8020c0f8:	8349383a 	mul	r4,r16,r13
8020c0fc:	500e943a 	slli	r7,r10,16
8020c100:	3010d43a 	srli	r8,r6,16
8020c104:	5028d43a 	srli	r20,r10,16
8020c108:	2489883a 	add	r4,r4,r18
8020c10c:	8abfffcc 	andi	r10,r17,65535
8020c110:	3a95883a 	add	r10,r7,r10
8020c114:	4119883a 	add	r12,r8,r4
8020c118:	a169883a 	add	r20,r20,r5
8020c11c:	1a87883a 	add	r3,r3,r10
8020c120:	6d5b383a 	mul	r13,r13,r21
8020c124:	6480022e 	bgeu	r12,r18,8020c130 <__muldf3+0x400>
8020c128:	01000074 	movhi	r4,1
8020c12c:	691b883a 	add	r13,r13,r4
8020c130:	7c25383a 	mul	r18,r15,r16
8020c134:	7d4b383a 	mul	r5,r15,r21
8020c138:	84cf383a 	mul	r7,r16,r19
8020c13c:	901ed43a 	srli	r15,r18,16
8020c140:	6008d43a 	srli	r4,r12,16
8020c144:	6010943a 	slli	r8,r12,16
8020c148:	394f883a 	add	r7,r7,r5
8020c14c:	333fffcc 	andi	r12,r6,65535
8020c150:	79df883a 	add	r15,r15,r7
8020c154:	235b883a 	add	r13,r4,r13
8020c158:	9d63383a 	mul	r17,r19,r21
8020c15c:	4309883a 	add	r4,r8,r12
8020c160:	7940022e 	bgeu	r15,r5,8020c16c <__muldf3+0x43c>
8020c164:	01400074 	movhi	r5,1
8020c168:	8963883a 	add	r17,r17,r5
8020c16c:	780a943a 	slli	r5,r15,16
8020c170:	91bfffcc 	andi	r6,r18,65535
8020c174:	70c7883a 	add	r3,r14,r3
8020c178:	298d883a 	add	r6,r5,r6
8020c17c:	1a8f803a 	cmpltu	r7,r3,r10
8020c180:	350b883a 	add	r5,r6,r20
8020c184:	20c7883a 	add	r3,r4,r3
8020c188:	3955883a 	add	r10,r7,r5
8020c18c:	1909803a 	cmpltu	r4,r3,r4
8020c190:	6a91883a 	add	r8,r13,r10
8020c194:	780cd43a 	srli	r6,r15,16
8020c198:	2219883a 	add	r12,r4,r8
8020c19c:	2d0b803a 	cmpltu	r5,r5,r20
8020c1a0:	51cf803a 	cmpltu	r7,r10,r7
8020c1a4:	29ceb03a 	or	r7,r5,r7
8020c1a8:	4351803a 	cmpltu	r8,r8,r13
8020c1ac:	610b803a 	cmpltu	r5,r12,r4
8020c1b0:	4148b03a 	or	r4,r8,r5
8020c1b4:	398f883a 	add	r7,r7,r6
8020c1b8:	3909883a 	add	r4,r7,r4
8020c1bc:	1810927a 	slli	r8,r3,9
8020c1c0:	2449883a 	add	r4,r4,r17
8020c1c4:	2008927a 	slli	r4,r4,9
8020c1c8:	6022d5fa 	srli	r17,r12,23
8020c1cc:	1806d5fa 	srli	r3,r3,23
8020c1d0:	4252b03a 	or	r9,r8,r9
8020c1d4:	600a927a 	slli	r5,r12,9
8020c1d8:	4810c03a 	cmpne	r8,r9,zero
8020c1dc:	2462b03a 	or	r17,r4,r17
8020c1e0:	40c6b03a 	or	r3,r8,r3
8020c1e4:	8900402c 	andhi	r4,r17,256
8020c1e8:	1950b03a 	or	r8,r3,r5
8020c1ec:	20000726 	beq	r4,zero,8020c20c <__muldf3+0x4dc>
8020c1f0:	4006d07a 	srli	r3,r8,1
8020c1f4:	880497fa 	slli	r2,r17,31
8020c1f8:	4200004c 	andi	r8,r8,1
8020c1fc:	8822d07a 	srli	r17,r17,1
8020c200:	1a10b03a 	or	r8,r3,r8
8020c204:	1210b03a 	or	r8,r2,r8
8020c208:	5805883a 	mov	r2,r11
8020c20c:	1140ffc4 	addi	r5,r2,1023
8020c210:	0140440e 	bge	zero,r5,8020c324 <__muldf3+0x5f4>
8020c214:	40c001cc 	andi	r3,r8,7
8020c218:	18000726 	beq	r3,zero,8020c238 <__muldf3+0x508>
8020c21c:	40c003cc 	andi	r3,r8,15
8020c220:	01000104 	movi	r4,4
8020c224:	19000426 	beq	r3,r4,8020c238 <__muldf3+0x508>
8020c228:	4107883a 	add	r3,r8,r4
8020c22c:	1a11803a 	cmpltu	r8,r3,r8
8020c230:	8a23883a 	add	r17,r17,r8
8020c234:	1811883a 	mov	r8,r3
8020c238:	88c0402c 	andhi	r3,r17,256
8020c23c:	18000426 	beq	r3,zero,8020c250 <__muldf3+0x520>
8020c240:	11410004 	addi	r5,r2,1024
8020c244:	00bfc034 	movhi	r2,65280
8020c248:	10bfffc4 	addi	r2,r2,-1
8020c24c:	88a2703a 	and	r17,r17,r2
8020c250:	0081ff84 	movi	r2,2046
8020c254:	117f6416 	blt	r2,r5,8020bfe8 <__reset+0xfa1ebfe8>
8020c258:	8828977a 	slli	r20,r17,29
8020c25c:	4010d0fa 	srli	r8,r8,3
8020c260:	8822927a 	slli	r17,r17,9
8020c264:	2881ffcc 	andi	r2,r5,2047
8020c268:	a228b03a 	or	r20,r20,r8
8020c26c:	880ad33a 	srli	r5,r17,12
8020c270:	b02b883a 	mov	r21,r22
8020c274:	003f0d06 	br	8020beac <__reset+0xfa1ebeac>
8020c278:	8080022c 	andhi	r2,r16,8
8020c27c:	10000926 	beq	r2,zero,8020c2a4 <__muldf3+0x574>
8020c280:	8880022c 	andhi	r2,r17,8
8020c284:	1000071e 	bne	r2,zero,8020c2a4 <__muldf3+0x574>
8020c288:	00800434 	movhi	r2,16
8020c28c:	89400234 	orhi	r5,r17,8
8020c290:	10bfffc4 	addi	r2,r2,-1
8020c294:	b82b883a 	mov	r21,r23
8020c298:	288a703a 	and	r5,r5,r2
8020c29c:	4029883a 	mov	r20,r8
8020c2a0:	003f6806 	br	8020c044 <__reset+0xfa1ec044>
8020c2a4:	00800434 	movhi	r2,16
8020c2a8:	81400234 	orhi	r5,r16,8
8020c2ac:	10bfffc4 	addi	r2,r2,-1
8020c2b0:	288a703a 	and	r5,r5,r2
8020c2b4:	003f6306 	br	8020c044 <__reset+0xfa1ec044>
8020c2b8:	147ff604 	addi	r17,r2,-40
8020c2bc:	3462983a 	sll	r17,r6,r17
8020c2c0:	0011883a 	mov	r8,zero
8020c2c4:	003f4406 	br	8020bfd8 <__reset+0xfa1ebfd8>
8020c2c8:	3009883a 	mov	r4,r6
8020c2cc:	d9800215 	stw	r6,8(sp)
8020c2d0:	da400115 	stw	r9,4(sp)
8020c2d4:	da800015 	stw	r10,0(sp)
8020c2d8:	020cf480 	call	8020cf48 <__clzsi2>
8020c2dc:	10800804 	addi	r2,r2,32
8020c2e0:	da800017 	ldw	r10,0(sp)
8020c2e4:	da400117 	ldw	r9,4(sp)
8020c2e8:	d9800217 	ldw	r6,8(sp)
8020c2ec:	003f3006 	br	8020bfb0 <__reset+0xfa1ebfb0>
8020c2f0:	143ff604 	addi	r16,r2,-40
8020c2f4:	9c20983a 	sll	r16,r19,r16
8020c2f8:	0029883a 	mov	r20,zero
8020c2fc:	003f1606 	br	8020bf58 <__reset+0xfa1ebf58>
8020c300:	d9800215 	stw	r6,8(sp)
8020c304:	d9c00015 	stw	r7,0(sp)
8020c308:	da400115 	stw	r9,4(sp)
8020c30c:	020cf480 	call	8020cf48 <__clzsi2>
8020c310:	10800804 	addi	r2,r2,32
8020c314:	da400117 	ldw	r9,4(sp)
8020c318:	d9c00017 	ldw	r7,0(sp)
8020c31c:	d9800217 	ldw	r6,8(sp)
8020c320:	003f0306 	br	8020bf30 <__reset+0xfa1ebf30>
8020c324:	00c00044 	movi	r3,1
8020c328:	1947c83a 	sub	r3,r3,r5
8020c32c:	00800e04 	movi	r2,56
8020c330:	10feda16 	blt	r2,r3,8020be9c <__reset+0xfa1ebe9c>
8020c334:	008007c4 	movi	r2,31
8020c338:	10c01b16 	blt	r2,r3,8020c3a8 <__muldf3+0x678>
8020c33c:	00800804 	movi	r2,32
8020c340:	10c5c83a 	sub	r2,r2,r3
8020c344:	888a983a 	sll	r5,r17,r2
8020c348:	40c8d83a 	srl	r4,r8,r3
8020c34c:	4084983a 	sll	r2,r8,r2
8020c350:	88e2d83a 	srl	r17,r17,r3
8020c354:	2906b03a 	or	r3,r5,r4
8020c358:	1004c03a 	cmpne	r2,r2,zero
8020c35c:	1886b03a 	or	r3,r3,r2
8020c360:	188001cc 	andi	r2,r3,7
8020c364:	10000726 	beq	r2,zero,8020c384 <__muldf3+0x654>
8020c368:	188003cc 	andi	r2,r3,15
8020c36c:	01000104 	movi	r4,4
8020c370:	11000426 	beq	r2,r4,8020c384 <__muldf3+0x654>
8020c374:	1805883a 	mov	r2,r3
8020c378:	10c00104 	addi	r3,r2,4
8020c37c:	1885803a 	cmpltu	r2,r3,r2
8020c380:	88a3883a 	add	r17,r17,r2
8020c384:	8880202c 	andhi	r2,r17,128
8020c388:	10001c26 	beq	r2,zero,8020c3fc <__muldf3+0x6cc>
8020c38c:	b02b883a 	mov	r21,r22
8020c390:	00800044 	movi	r2,1
8020c394:	000b883a 	mov	r5,zero
8020c398:	0029883a 	mov	r20,zero
8020c39c:	003ec306 	br	8020beac <__reset+0xfa1ebeac>
8020c3a0:	5805883a 	mov	r2,r11
8020c3a4:	003f9906 	br	8020c20c <__reset+0xfa1ec20c>
8020c3a8:	00bff844 	movi	r2,-31
8020c3ac:	1145c83a 	sub	r2,r2,r5
8020c3b0:	8888d83a 	srl	r4,r17,r2
8020c3b4:	00800804 	movi	r2,32
8020c3b8:	18801a26 	beq	r3,r2,8020c424 <__muldf3+0x6f4>
8020c3bc:	00801004 	movi	r2,64
8020c3c0:	10c5c83a 	sub	r2,r2,r3
8020c3c4:	8884983a 	sll	r2,r17,r2
8020c3c8:	1204b03a 	or	r2,r2,r8
8020c3cc:	1004c03a 	cmpne	r2,r2,zero
8020c3d0:	2084b03a 	or	r2,r4,r2
8020c3d4:	144001cc 	andi	r17,r2,7
8020c3d8:	88000d1e 	bne	r17,zero,8020c410 <__muldf3+0x6e0>
8020c3dc:	000b883a 	mov	r5,zero
8020c3e0:	1028d0fa 	srli	r20,r2,3
8020c3e4:	b02b883a 	mov	r21,r22
8020c3e8:	0005883a 	mov	r2,zero
8020c3ec:	a468b03a 	or	r20,r20,r17
8020c3f0:	003eae06 	br	8020beac <__reset+0xfa1ebeac>
8020c3f4:	1007883a 	mov	r3,r2
8020c3f8:	0023883a 	mov	r17,zero
8020c3fc:	880a927a 	slli	r5,r17,9
8020c400:	1805883a 	mov	r2,r3
8020c404:	8822977a 	slli	r17,r17,29
8020c408:	280ad33a 	srli	r5,r5,12
8020c40c:	003ff406 	br	8020c3e0 <__reset+0xfa1ec3e0>
8020c410:	10c003cc 	andi	r3,r2,15
8020c414:	01000104 	movi	r4,4
8020c418:	193ff626 	beq	r3,r4,8020c3f4 <__reset+0xfa1ec3f4>
8020c41c:	0023883a 	mov	r17,zero
8020c420:	003fd506 	br	8020c378 <__reset+0xfa1ec378>
8020c424:	0005883a 	mov	r2,zero
8020c428:	003fe706 	br	8020c3c8 <__reset+0xfa1ec3c8>
8020c42c:	00800434 	movhi	r2,16
8020c430:	89400234 	orhi	r5,r17,8
8020c434:	10bfffc4 	addi	r2,r2,-1
8020c438:	b02b883a 	mov	r21,r22
8020c43c:	288a703a 	and	r5,r5,r2
8020c440:	4029883a 	mov	r20,r8
8020c444:	003eff06 	br	8020c044 <__reset+0xfa1ec044>

8020c448 <__subdf3>:
8020c448:	02000434 	movhi	r8,16
8020c44c:	423fffc4 	addi	r8,r8,-1
8020c450:	defffb04 	addi	sp,sp,-20
8020c454:	2a14703a 	and	r10,r5,r8
8020c458:	3812d53a 	srli	r9,r7,20
8020c45c:	3a10703a 	and	r8,r7,r8
8020c460:	2006d77a 	srli	r3,r4,29
8020c464:	3004d77a 	srli	r2,r6,29
8020c468:	dc000015 	stw	r16,0(sp)
8020c46c:	501490fa 	slli	r10,r10,3
8020c470:	2820d53a 	srli	r16,r5,20
8020c474:	401090fa 	slli	r8,r8,3
8020c478:	dc800215 	stw	r18,8(sp)
8020c47c:	dc400115 	stw	r17,4(sp)
8020c480:	dfc00415 	stw	ra,16(sp)
8020c484:	202290fa 	slli	r17,r4,3
8020c488:	dcc00315 	stw	r19,12(sp)
8020c48c:	4a41ffcc 	andi	r9,r9,2047
8020c490:	0101ffc4 	movi	r4,2047
8020c494:	2824d7fa 	srli	r18,r5,31
8020c498:	8401ffcc 	andi	r16,r16,2047
8020c49c:	50c6b03a 	or	r3,r10,r3
8020c4a0:	380ed7fa 	srli	r7,r7,31
8020c4a4:	408ab03a 	or	r5,r8,r2
8020c4a8:	300c90fa 	slli	r6,r6,3
8020c4ac:	49009626 	beq	r9,r4,8020c708 <__subdf3+0x2c0>
8020c4b0:	39c0005c 	xori	r7,r7,1
8020c4b4:	8245c83a 	sub	r2,r16,r9
8020c4b8:	3c807426 	beq	r7,r18,8020c68c <__subdf3+0x244>
8020c4bc:	0080af0e 	bge	zero,r2,8020c77c <__subdf3+0x334>
8020c4c0:	48002a1e 	bne	r9,zero,8020c56c <__subdf3+0x124>
8020c4c4:	2988b03a 	or	r4,r5,r6
8020c4c8:	20009a1e 	bne	r4,zero,8020c734 <__subdf3+0x2ec>
8020c4cc:	888001cc 	andi	r2,r17,7
8020c4d0:	10000726 	beq	r2,zero,8020c4f0 <__subdf3+0xa8>
8020c4d4:	888003cc 	andi	r2,r17,15
8020c4d8:	01000104 	movi	r4,4
8020c4dc:	11000426 	beq	r2,r4,8020c4f0 <__subdf3+0xa8>
8020c4e0:	890b883a 	add	r5,r17,r4
8020c4e4:	2c63803a 	cmpltu	r17,r5,r17
8020c4e8:	1c47883a 	add	r3,r3,r17
8020c4ec:	2823883a 	mov	r17,r5
8020c4f0:	1880202c 	andhi	r2,r3,128
8020c4f4:	10005926 	beq	r2,zero,8020c65c <__subdf3+0x214>
8020c4f8:	84000044 	addi	r16,r16,1
8020c4fc:	0081ffc4 	movi	r2,2047
8020c500:	8080be26 	beq	r16,r2,8020c7fc <__subdf3+0x3b4>
8020c504:	017fe034 	movhi	r5,65408
8020c508:	297fffc4 	addi	r5,r5,-1
8020c50c:	1946703a 	and	r3,r3,r5
8020c510:	1804977a 	slli	r2,r3,29
8020c514:	1806927a 	slli	r3,r3,9
8020c518:	8822d0fa 	srli	r17,r17,3
8020c51c:	8401ffcc 	andi	r16,r16,2047
8020c520:	180ad33a 	srli	r5,r3,12
8020c524:	9100004c 	andi	r4,r18,1
8020c528:	1444b03a 	or	r2,r2,r17
8020c52c:	80c1ffcc 	andi	r3,r16,2047
8020c530:	1820953a 	slli	r16,r3,20
8020c534:	20c03fcc 	andi	r3,r4,255
8020c538:	180897fa 	slli	r4,r3,31
8020c53c:	00c00434 	movhi	r3,16
8020c540:	18ffffc4 	addi	r3,r3,-1
8020c544:	28c6703a 	and	r3,r5,r3
8020c548:	1c06b03a 	or	r3,r3,r16
8020c54c:	1906b03a 	or	r3,r3,r4
8020c550:	dfc00417 	ldw	ra,16(sp)
8020c554:	dcc00317 	ldw	r19,12(sp)
8020c558:	dc800217 	ldw	r18,8(sp)
8020c55c:	dc400117 	ldw	r17,4(sp)
8020c560:	dc000017 	ldw	r16,0(sp)
8020c564:	dec00504 	addi	sp,sp,20
8020c568:	f800283a 	ret
8020c56c:	0101ffc4 	movi	r4,2047
8020c570:	813fd626 	beq	r16,r4,8020c4cc <__reset+0xfa1ec4cc>
8020c574:	29402034 	orhi	r5,r5,128
8020c578:	01000e04 	movi	r4,56
8020c57c:	2080a316 	blt	r4,r2,8020c80c <__subdf3+0x3c4>
8020c580:	010007c4 	movi	r4,31
8020c584:	2080c616 	blt	r4,r2,8020c8a0 <__subdf3+0x458>
8020c588:	01000804 	movi	r4,32
8020c58c:	2089c83a 	sub	r4,r4,r2
8020c590:	2910983a 	sll	r8,r5,r4
8020c594:	308ed83a 	srl	r7,r6,r2
8020c598:	3108983a 	sll	r4,r6,r4
8020c59c:	2884d83a 	srl	r2,r5,r2
8020c5a0:	41ccb03a 	or	r6,r8,r7
8020c5a4:	2008c03a 	cmpne	r4,r4,zero
8020c5a8:	310cb03a 	or	r6,r6,r4
8020c5ac:	898dc83a 	sub	r6,r17,r6
8020c5b0:	89a3803a 	cmpltu	r17,r17,r6
8020c5b4:	1887c83a 	sub	r3,r3,r2
8020c5b8:	1c47c83a 	sub	r3,r3,r17
8020c5bc:	3023883a 	mov	r17,r6
8020c5c0:	1880202c 	andhi	r2,r3,128
8020c5c4:	10002326 	beq	r2,zero,8020c654 <__subdf3+0x20c>
8020c5c8:	04c02034 	movhi	r19,128
8020c5cc:	9cffffc4 	addi	r19,r19,-1
8020c5d0:	1ce6703a 	and	r19,r3,r19
8020c5d4:	98007a26 	beq	r19,zero,8020c7c0 <__subdf3+0x378>
8020c5d8:	9809883a 	mov	r4,r19
8020c5dc:	020cf480 	call	8020cf48 <__clzsi2>
8020c5e0:	113ffe04 	addi	r4,r2,-8
8020c5e4:	00c007c4 	movi	r3,31
8020c5e8:	19007b16 	blt	r3,r4,8020c7d8 <__subdf3+0x390>
8020c5ec:	00800804 	movi	r2,32
8020c5f0:	1105c83a 	sub	r2,r2,r4
8020c5f4:	8884d83a 	srl	r2,r17,r2
8020c5f8:	9906983a 	sll	r3,r19,r4
8020c5fc:	8922983a 	sll	r17,r17,r4
8020c600:	10c4b03a 	or	r2,r2,r3
8020c604:	24007816 	blt	r4,r16,8020c7e8 <__subdf3+0x3a0>
8020c608:	2421c83a 	sub	r16,r4,r16
8020c60c:	80c00044 	addi	r3,r16,1
8020c610:	010007c4 	movi	r4,31
8020c614:	20c09516 	blt	r4,r3,8020c86c <__subdf3+0x424>
8020c618:	01400804 	movi	r5,32
8020c61c:	28cbc83a 	sub	r5,r5,r3
8020c620:	88c8d83a 	srl	r4,r17,r3
8020c624:	8962983a 	sll	r17,r17,r5
8020c628:	114a983a 	sll	r5,r2,r5
8020c62c:	10c6d83a 	srl	r3,r2,r3
8020c630:	8804c03a 	cmpne	r2,r17,zero
8020c634:	290ab03a 	or	r5,r5,r4
8020c638:	28a2b03a 	or	r17,r5,r2
8020c63c:	0021883a 	mov	r16,zero
8020c640:	003fa206 	br	8020c4cc <__reset+0xfa1ec4cc>
8020c644:	2090b03a 	or	r8,r4,r2
8020c648:	40018e26 	beq	r8,zero,8020cc84 <__subdf3+0x83c>
8020c64c:	1007883a 	mov	r3,r2
8020c650:	2023883a 	mov	r17,r4
8020c654:	888001cc 	andi	r2,r17,7
8020c658:	103f9e1e 	bne	r2,zero,8020c4d4 <__reset+0xfa1ec4d4>
8020c65c:	1804977a 	slli	r2,r3,29
8020c660:	8822d0fa 	srli	r17,r17,3
8020c664:	1810d0fa 	srli	r8,r3,3
8020c668:	9100004c 	andi	r4,r18,1
8020c66c:	1444b03a 	or	r2,r2,r17
8020c670:	00c1ffc4 	movi	r3,2047
8020c674:	80c02826 	beq	r16,r3,8020c718 <__subdf3+0x2d0>
8020c678:	01400434 	movhi	r5,16
8020c67c:	297fffc4 	addi	r5,r5,-1
8020c680:	80e0703a 	and	r16,r16,r3
8020c684:	414a703a 	and	r5,r8,r5
8020c688:	003fa806 	br	8020c52c <__reset+0xfa1ec52c>
8020c68c:	0080630e 	bge	zero,r2,8020c81c <__subdf3+0x3d4>
8020c690:	48003026 	beq	r9,zero,8020c754 <__subdf3+0x30c>
8020c694:	0101ffc4 	movi	r4,2047
8020c698:	813f8c26 	beq	r16,r4,8020c4cc <__reset+0xfa1ec4cc>
8020c69c:	29402034 	orhi	r5,r5,128
8020c6a0:	01000e04 	movi	r4,56
8020c6a4:	2080a90e 	bge	r4,r2,8020c94c <__subdf3+0x504>
8020c6a8:	298cb03a 	or	r6,r5,r6
8020c6ac:	3012c03a 	cmpne	r9,r6,zero
8020c6b0:	0005883a 	mov	r2,zero
8020c6b4:	4c53883a 	add	r9,r9,r17
8020c6b8:	4c63803a 	cmpltu	r17,r9,r17
8020c6bc:	10c7883a 	add	r3,r2,r3
8020c6c0:	88c7883a 	add	r3,r17,r3
8020c6c4:	4823883a 	mov	r17,r9
8020c6c8:	1880202c 	andhi	r2,r3,128
8020c6cc:	1000d026 	beq	r2,zero,8020ca10 <__subdf3+0x5c8>
8020c6d0:	84000044 	addi	r16,r16,1
8020c6d4:	0081ffc4 	movi	r2,2047
8020c6d8:	8080fe26 	beq	r16,r2,8020cad4 <__subdf3+0x68c>
8020c6dc:	00bfe034 	movhi	r2,65408
8020c6e0:	10bfffc4 	addi	r2,r2,-1
8020c6e4:	1886703a 	and	r3,r3,r2
8020c6e8:	880ad07a 	srli	r5,r17,1
8020c6ec:	180497fa 	slli	r2,r3,31
8020c6f0:	8900004c 	andi	r4,r17,1
8020c6f4:	2922b03a 	or	r17,r5,r4
8020c6f8:	1806d07a 	srli	r3,r3,1
8020c6fc:	1462b03a 	or	r17,r2,r17
8020c700:	3825883a 	mov	r18,r7
8020c704:	003f7106 	br	8020c4cc <__reset+0xfa1ec4cc>
8020c708:	2984b03a 	or	r2,r5,r6
8020c70c:	103f6826 	beq	r2,zero,8020c4b0 <__reset+0xfa1ec4b0>
8020c710:	39c03fcc 	andi	r7,r7,255
8020c714:	003f6706 	br	8020c4b4 <__reset+0xfa1ec4b4>
8020c718:	4086b03a 	or	r3,r8,r2
8020c71c:	18015226 	beq	r3,zero,8020cc68 <__subdf3+0x820>
8020c720:	00c00434 	movhi	r3,16
8020c724:	41400234 	orhi	r5,r8,8
8020c728:	18ffffc4 	addi	r3,r3,-1
8020c72c:	28ca703a 	and	r5,r5,r3
8020c730:	003f7e06 	br	8020c52c <__reset+0xfa1ec52c>
8020c734:	10bfffc4 	addi	r2,r2,-1
8020c738:	1000491e 	bne	r2,zero,8020c860 <__subdf3+0x418>
8020c73c:	898fc83a 	sub	r7,r17,r6
8020c740:	89e3803a 	cmpltu	r17,r17,r7
8020c744:	1947c83a 	sub	r3,r3,r5
8020c748:	1c47c83a 	sub	r3,r3,r17
8020c74c:	3823883a 	mov	r17,r7
8020c750:	003f9b06 	br	8020c5c0 <__reset+0xfa1ec5c0>
8020c754:	2988b03a 	or	r4,r5,r6
8020c758:	203f5c26 	beq	r4,zero,8020c4cc <__reset+0xfa1ec4cc>
8020c75c:	10bfffc4 	addi	r2,r2,-1
8020c760:	1000931e 	bne	r2,zero,8020c9b0 <__subdf3+0x568>
8020c764:	898d883a 	add	r6,r17,r6
8020c768:	3463803a 	cmpltu	r17,r6,r17
8020c76c:	1947883a 	add	r3,r3,r5
8020c770:	88c7883a 	add	r3,r17,r3
8020c774:	3023883a 	mov	r17,r6
8020c778:	003fd306 	br	8020c6c8 <__reset+0xfa1ec6c8>
8020c77c:	1000541e 	bne	r2,zero,8020c8d0 <__subdf3+0x488>
8020c780:	80800044 	addi	r2,r16,1
8020c784:	1081ffcc 	andi	r2,r2,2047
8020c788:	01000044 	movi	r4,1
8020c78c:	2080a20e 	bge	r4,r2,8020ca18 <__subdf3+0x5d0>
8020c790:	8989c83a 	sub	r4,r17,r6
8020c794:	8905803a 	cmpltu	r2,r17,r4
8020c798:	1967c83a 	sub	r19,r3,r5
8020c79c:	98a7c83a 	sub	r19,r19,r2
8020c7a0:	9880202c 	andhi	r2,r19,128
8020c7a4:	10006326 	beq	r2,zero,8020c934 <__subdf3+0x4ec>
8020c7a8:	3463c83a 	sub	r17,r6,r17
8020c7ac:	28c7c83a 	sub	r3,r5,r3
8020c7b0:	344d803a 	cmpltu	r6,r6,r17
8020c7b4:	19a7c83a 	sub	r19,r3,r6
8020c7b8:	3825883a 	mov	r18,r7
8020c7bc:	983f861e 	bne	r19,zero,8020c5d8 <__reset+0xfa1ec5d8>
8020c7c0:	8809883a 	mov	r4,r17
8020c7c4:	020cf480 	call	8020cf48 <__clzsi2>
8020c7c8:	10800804 	addi	r2,r2,32
8020c7cc:	113ffe04 	addi	r4,r2,-8
8020c7d0:	00c007c4 	movi	r3,31
8020c7d4:	193f850e 	bge	r3,r4,8020c5ec <__reset+0xfa1ec5ec>
8020c7d8:	10bff604 	addi	r2,r2,-40
8020c7dc:	8884983a 	sll	r2,r17,r2
8020c7e0:	0023883a 	mov	r17,zero
8020c7e4:	243f880e 	bge	r4,r16,8020c608 <__reset+0xfa1ec608>
8020c7e8:	00ffe034 	movhi	r3,65408
8020c7ec:	18ffffc4 	addi	r3,r3,-1
8020c7f0:	8121c83a 	sub	r16,r16,r4
8020c7f4:	10c6703a 	and	r3,r2,r3
8020c7f8:	003f3406 	br	8020c4cc <__reset+0xfa1ec4cc>
8020c7fc:	9100004c 	andi	r4,r18,1
8020c800:	000b883a 	mov	r5,zero
8020c804:	0005883a 	mov	r2,zero
8020c808:	003f4806 	br	8020c52c <__reset+0xfa1ec52c>
8020c80c:	298cb03a 	or	r6,r5,r6
8020c810:	300cc03a 	cmpne	r6,r6,zero
8020c814:	0005883a 	mov	r2,zero
8020c818:	003f6406 	br	8020c5ac <__reset+0xfa1ec5ac>
8020c81c:	10009a1e 	bne	r2,zero,8020ca88 <__subdf3+0x640>
8020c820:	82400044 	addi	r9,r16,1
8020c824:	4881ffcc 	andi	r2,r9,2047
8020c828:	02800044 	movi	r10,1
8020c82c:	5080670e 	bge	r10,r2,8020c9cc <__subdf3+0x584>
8020c830:	0081ffc4 	movi	r2,2047
8020c834:	4880af26 	beq	r9,r2,8020caf4 <__subdf3+0x6ac>
8020c838:	898d883a 	add	r6,r17,r6
8020c83c:	1945883a 	add	r2,r3,r5
8020c840:	3447803a 	cmpltu	r3,r6,r17
8020c844:	1887883a 	add	r3,r3,r2
8020c848:	182297fa 	slli	r17,r3,31
8020c84c:	300cd07a 	srli	r6,r6,1
8020c850:	1806d07a 	srli	r3,r3,1
8020c854:	4821883a 	mov	r16,r9
8020c858:	89a2b03a 	or	r17,r17,r6
8020c85c:	003f1b06 	br	8020c4cc <__reset+0xfa1ec4cc>
8020c860:	0101ffc4 	movi	r4,2047
8020c864:	813f441e 	bne	r16,r4,8020c578 <__reset+0xfa1ec578>
8020c868:	003f1806 	br	8020c4cc <__reset+0xfa1ec4cc>
8020c86c:	843ff844 	addi	r16,r16,-31
8020c870:	01400804 	movi	r5,32
8020c874:	1408d83a 	srl	r4,r2,r16
8020c878:	19405026 	beq	r3,r5,8020c9bc <__subdf3+0x574>
8020c87c:	01401004 	movi	r5,64
8020c880:	28c7c83a 	sub	r3,r5,r3
8020c884:	10c4983a 	sll	r2,r2,r3
8020c888:	88a2b03a 	or	r17,r17,r2
8020c88c:	8822c03a 	cmpne	r17,r17,zero
8020c890:	2462b03a 	or	r17,r4,r17
8020c894:	0007883a 	mov	r3,zero
8020c898:	0021883a 	mov	r16,zero
8020c89c:	003f6d06 	br	8020c654 <__reset+0xfa1ec654>
8020c8a0:	11fff804 	addi	r7,r2,-32
8020c8a4:	01000804 	movi	r4,32
8020c8a8:	29ced83a 	srl	r7,r5,r7
8020c8ac:	11004526 	beq	r2,r4,8020c9c4 <__subdf3+0x57c>
8020c8b0:	01001004 	movi	r4,64
8020c8b4:	2089c83a 	sub	r4,r4,r2
8020c8b8:	2904983a 	sll	r2,r5,r4
8020c8bc:	118cb03a 	or	r6,r2,r6
8020c8c0:	300cc03a 	cmpne	r6,r6,zero
8020c8c4:	398cb03a 	or	r6,r7,r6
8020c8c8:	0005883a 	mov	r2,zero
8020c8cc:	003f3706 	br	8020c5ac <__reset+0xfa1ec5ac>
8020c8d0:	80002a26 	beq	r16,zero,8020c97c <__subdf3+0x534>
8020c8d4:	0101ffc4 	movi	r4,2047
8020c8d8:	49006626 	beq	r9,r4,8020ca74 <__subdf3+0x62c>
8020c8dc:	0085c83a 	sub	r2,zero,r2
8020c8e0:	18c02034 	orhi	r3,r3,128
8020c8e4:	01000e04 	movi	r4,56
8020c8e8:	20807e16 	blt	r4,r2,8020cae4 <__subdf3+0x69c>
8020c8ec:	010007c4 	movi	r4,31
8020c8f0:	2080e716 	blt	r4,r2,8020cc90 <__subdf3+0x848>
8020c8f4:	01000804 	movi	r4,32
8020c8f8:	2089c83a 	sub	r4,r4,r2
8020c8fc:	1914983a 	sll	r10,r3,r4
8020c900:	8890d83a 	srl	r8,r17,r2
8020c904:	8908983a 	sll	r4,r17,r4
8020c908:	1884d83a 	srl	r2,r3,r2
8020c90c:	5222b03a 	or	r17,r10,r8
8020c910:	2006c03a 	cmpne	r3,r4,zero
8020c914:	88e2b03a 	or	r17,r17,r3
8020c918:	3463c83a 	sub	r17,r6,r17
8020c91c:	2885c83a 	sub	r2,r5,r2
8020c920:	344d803a 	cmpltu	r6,r6,r17
8020c924:	1187c83a 	sub	r3,r2,r6
8020c928:	4821883a 	mov	r16,r9
8020c92c:	3825883a 	mov	r18,r7
8020c930:	003f2306 	br	8020c5c0 <__reset+0xfa1ec5c0>
8020c934:	24d0b03a 	or	r8,r4,r19
8020c938:	40001b1e 	bne	r8,zero,8020c9a8 <__subdf3+0x560>
8020c93c:	0005883a 	mov	r2,zero
8020c940:	0009883a 	mov	r4,zero
8020c944:	0021883a 	mov	r16,zero
8020c948:	003f4906 	br	8020c670 <__reset+0xfa1ec670>
8020c94c:	010007c4 	movi	r4,31
8020c950:	20803a16 	blt	r4,r2,8020ca3c <__subdf3+0x5f4>
8020c954:	01000804 	movi	r4,32
8020c958:	2089c83a 	sub	r4,r4,r2
8020c95c:	2912983a 	sll	r9,r5,r4
8020c960:	3090d83a 	srl	r8,r6,r2
8020c964:	3108983a 	sll	r4,r6,r4
8020c968:	2884d83a 	srl	r2,r5,r2
8020c96c:	4a12b03a 	or	r9,r9,r8
8020c970:	2008c03a 	cmpne	r4,r4,zero
8020c974:	4912b03a 	or	r9,r9,r4
8020c978:	003f4e06 	br	8020c6b4 <__reset+0xfa1ec6b4>
8020c97c:	1c48b03a 	or	r4,r3,r17
8020c980:	20003c26 	beq	r4,zero,8020ca74 <__subdf3+0x62c>
8020c984:	0084303a 	nor	r2,zero,r2
8020c988:	1000381e 	bne	r2,zero,8020ca6c <__subdf3+0x624>
8020c98c:	3463c83a 	sub	r17,r6,r17
8020c990:	28c5c83a 	sub	r2,r5,r3
8020c994:	344d803a 	cmpltu	r6,r6,r17
8020c998:	1187c83a 	sub	r3,r2,r6
8020c99c:	4821883a 	mov	r16,r9
8020c9a0:	3825883a 	mov	r18,r7
8020c9a4:	003f0606 	br	8020c5c0 <__reset+0xfa1ec5c0>
8020c9a8:	2023883a 	mov	r17,r4
8020c9ac:	003f0906 	br	8020c5d4 <__reset+0xfa1ec5d4>
8020c9b0:	0101ffc4 	movi	r4,2047
8020c9b4:	813f3a1e 	bne	r16,r4,8020c6a0 <__reset+0xfa1ec6a0>
8020c9b8:	003ec406 	br	8020c4cc <__reset+0xfa1ec4cc>
8020c9bc:	0005883a 	mov	r2,zero
8020c9c0:	003fb106 	br	8020c888 <__reset+0xfa1ec888>
8020c9c4:	0005883a 	mov	r2,zero
8020c9c8:	003fbc06 	br	8020c8bc <__reset+0xfa1ec8bc>
8020c9cc:	1c44b03a 	or	r2,r3,r17
8020c9d0:	80008e1e 	bne	r16,zero,8020cc0c <__subdf3+0x7c4>
8020c9d4:	1000c826 	beq	r2,zero,8020ccf8 <__subdf3+0x8b0>
8020c9d8:	2984b03a 	or	r2,r5,r6
8020c9dc:	103ebb26 	beq	r2,zero,8020c4cc <__reset+0xfa1ec4cc>
8020c9e0:	8989883a 	add	r4,r17,r6
8020c9e4:	1945883a 	add	r2,r3,r5
8020c9e8:	2447803a 	cmpltu	r3,r4,r17
8020c9ec:	1887883a 	add	r3,r3,r2
8020c9f0:	1880202c 	andhi	r2,r3,128
8020c9f4:	2023883a 	mov	r17,r4
8020c9f8:	103f1626 	beq	r2,zero,8020c654 <__reset+0xfa1ec654>
8020c9fc:	00bfe034 	movhi	r2,65408
8020ca00:	10bfffc4 	addi	r2,r2,-1
8020ca04:	5021883a 	mov	r16,r10
8020ca08:	1886703a 	and	r3,r3,r2
8020ca0c:	003eaf06 	br	8020c4cc <__reset+0xfa1ec4cc>
8020ca10:	3825883a 	mov	r18,r7
8020ca14:	003f0f06 	br	8020c654 <__reset+0xfa1ec654>
8020ca18:	1c44b03a 	or	r2,r3,r17
8020ca1c:	8000251e 	bne	r16,zero,8020cab4 <__subdf3+0x66c>
8020ca20:	1000661e 	bne	r2,zero,8020cbbc <__subdf3+0x774>
8020ca24:	2990b03a 	or	r8,r5,r6
8020ca28:	40009626 	beq	r8,zero,8020cc84 <__subdf3+0x83c>
8020ca2c:	2807883a 	mov	r3,r5
8020ca30:	3023883a 	mov	r17,r6
8020ca34:	3825883a 	mov	r18,r7
8020ca38:	003ea406 	br	8020c4cc <__reset+0xfa1ec4cc>
8020ca3c:	127ff804 	addi	r9,r2,-32
8020ca40:	01000804 	movi	r4,32
8020ca44:	2a52d83a 	srl	r9,r5,r9
8020ca48:	11008c26 	beq	r2,r4,8020cc7c <__subdf3+0x834>
8020ca4c:	01001004 	movi	r4,64
8020ca50:	2085c83a 	sub	r2,r4,r2
8020ca54:	2884983a 	sll	r2,r5,r2
8020ca58:	118cb03a 	or	r6,r2,r6
8020ca5c:	300cc03a 	cmpne	r6,r6,zero
8020ca60:	4992b03a 	or	r9,r9,r6
8020ca64:	0005883a 	mov	r2,zero
8020ca68:	003f1206 	br	8020c6b4 <__reset+0xfa1ec6b4>
8020ca6c:	0101ffc4 	movi	r4,2047
8020ca70:	493f9c1e 	bne	r9,r4,8020c8e4 <__reset+0xfa1ec8e4>
8020ca74:	2807883a 	mov	r3,r5
8020ca78:	3023883a 	mov	r17,r6
8020ca7c:	4821883a 	mov	r16,r9
8020ca80:	3825883a 	mov	r18,r7
8020ca84:	003e9106 	br	8020c4cc <__reset+0xfa1ec4cc>
8020ca88:	80001f1e 	bne	r16,zero,8020cb08 <__subdf3+0x6c0>
8020ca8c:	1c48b03a 	or	r4,r3,r17
8020ca90:	20005a26 	beq	r4,zero,8020cbfc <__subdf3+0x7b4>
8020ca94:	0084303a 	nor	r2,zero,r2
8020ca98:	1000561e 	bne	r2,zero,8020cbf4 <__subdf3+0x7ac>
8020ca9c:	89a3883a 	add	r17,r17,r6
8020caa0:	1945883a 	add	r2,r3,r5
8020caa4:	898d803a 	cmpltu	r6,r17,r6
8020caa8:	3087883a 	add	r3,r6,r2
8020caac:	4821883a 	mov	r16,r9
8020cab0:	003f0506 	br	8020c6c8 <__reset+0xfa1ec6c8>
8020cab4:	10002b1e 	bne	r2,zero,8020cb64 <__subdf3+0x71c>
8020cab8:	2984b03a 	or	r2,r5,r6
8020cabc:	10008026 	beq	r2,zero,8020ccc0 <__subdf3+0x878>
8020cac0:	2807883a 	mov	r3,r5
8020cac4:	3023883a 	mov	r17,r6
8020cac8:	3825883a 	mov	r18,r7
8020cacc:	0401ffc4 	movi	r16,2047
8020cad0:	003e7e06 	br	8020c4cc <__reset+0xfa1ec4cc>
8020cad4:	3809883a 	mov	r4,r7
8020cad8:	0011883a 	mov	r8,zero
8020cadc:	0005883a 	mov	r2,zero
8020cae0:	003ee306 	br	8020c670 <__reset+0xfa1ec670>
8020cae4:	1c62b03a 	or	r17,r3,r17
8020cae8:	8822c03a 	cmpne	r17,r17,zero
8020caec:	0005883a 	mov	r2,zero
8020caf0:	003f8906 	br	8020c918 <__reset+0xfa1ec918>
8020caf4:	3809883a 	mov	r4,r7
8020caf8:	4821883a 	mov	r16,r9
8020cafc:	0011883a 	mov	r8,zero
8020cb00:	0005883a 	mov	r2,zero
8020cb04:	003eda06 	br	8020c670 <__reset+0xfa1ec670>
8020cb08:	0101ffc4 	movi	r4,2047
8020cb0c:	49003b26 	beq	r9,r4,8020cbfc <__subdf3+0x7b4>
8020cb10:	0085c83a 	sub	r2,zero,r2
8020cb14:	18c02034 	orhi	r3,r3,128
8020cb18:	01000e04 	movi	r4,56
8020cb1c:	20806e16 	blt	r4,r2,8020ccd8 <__subdf3+0x890>
8020cb20:	010007c4 	movi	r4,31
8020cb24:	20807716 	blt	r4,r2,8020cd04 <__subdf3+0x8bc>
8020cb28:	01000804 	movi	r4,32
8020cb2c:	2089c83a 	sub	r4,r4,r2
8020cb30:	1914983a 	sll	r10,r3,r4
8020cb34:	8890d83a 	srl	r8,r17,r2
8020cb38:	8908983a 	sll	r4,r17,r4
8020cb3c:	1884d83a 	srl	r2,r3,r2
8020cb40:	5222b03a 	or	r17,r10,r8
8020cb44:	2006c03a 	cmpne	r3,r4,zero
8020cb48:	88e2b03a 	or	r17,r17,r3
8020cb4c:	89a3883a 	add	r17,r17,r6
8020cb50:	1145883a 	add	r2,r2,r5
8020cb54:	898d803a 	cmpltu	r6,r17,r6
8020cb58:	3087883a 	add	r3,r6,r2
8020cb5c:	4821883a 	mov	r16,r9
8020cb60:	003ed906 	br	8020c6c8 <__reset+0xfa1ec6c8>
8020cb64:	2984b03a 	or	r2,r5,r6
8020cb68:	10004226 	beq	r2,zero,8020cc74 <__subdf3+0x82c>
8020cb6c:	1808d0fa 	srli	r4,r3,3
8020cb70:	8822d0fa 	srli	r17,r17,3
8020cb74:	1806977a 	slli	r3,r3,29
8020cb78:	2080022c 	andhi	r2,r4,8
8020cb7c:	1c62b03a 	or	r17,r3,r17
8020cb80:	10000826 	beq	r2,zero,8020cba4 <__subdf3+0x75c>
8020cb84:	2812d0fa 	srli	r9,r5,3
8020cb88:	4880022c 	andhi	r2,r9,8
8020cb8c:	1000051e 	bne	r2,zero,8020cba4 <__subdf3+0x75c>
8020cb90:	300cd0fa 	srli	r6,r6,3
8020cb94:	2804977a 	slli	r2,r5,29
8020cb98:	4809883a 	mov	r4,r9
8020cb9c:	3825883a 	mov	r18,r7
8020cba0:	11a2b03a 	or	r17,r2,r6
8020cba4:	8806d77a 	srli	r3,r17,29
8020cba8:	200890fa 	slli	r4,r4,3
8020cbac:	882290fa 	slli	r17,r17,3
8020cbb0:	0401ffc4 	movi	r16,2047
8020cbb4:	1906b03a 	or	r3,r3,r4
8020cbb8:	003e4406 	br	8020c4cc <__reset+0xfa1ec4cc>
8020cbbc:	2984b03a 	or	r2,r5,r6
8020cbc0:	103e4226 	beq	r2,zero,8020c4cc <__reset+0xfa1ec4cc>
8020cbc4:	8989c83a 	sub	r4,r17,r6
8020cbc8:	8911803a 	cmpltu	r8,r17,r4
8020cbcc:	1945c83a 	sub	r2,r3,r5
8020cbd0:	1205c83a 	sub	r2,r2,r8
8020cbd4:	1200202c 	andhi	r8,r2,128
8020cbd8:	403e9a26 	beq	r8,zero,8020c644 <__reset+0xfa1ec644>
8020cbdc:	3463c83a 	sub	r17,r6,r17
8020cbe0:	28c5c83a 	sub	r2,r5,r3
8020cbe4:	344d803a 	cmpltu	r6,r6,r17
8020cbe8:	1187c83a 	sub	r3,r2,r6
8020cbec:	3825883a 	mov	r18,r7
8020cbf0:	003e3606 	br	8020c4cc <__reset+0xfa1ec4cc>
8020cbf4:	0101ffc4 	movi	r4,2047
8020cbf8:	493fc71e 	bne	r9,r4,8020cb18 <__reset+0xfa1ecb18>
8020cbfc:	2807883a 	mov	r3,r5
8020cc00:	3023883a 	mov	r17,r6
8020cc04:	4821883a 	mov	r16,r9
8020cc08:	003e3006 	br	8020c4cc <__reset+0xfa1ec4cc>
8020cc0c:	10003626 	beq	r2,zero,8020cce8 <__subdf3+0x8a0>
8020cc10:	2984b03a 	or	r2,r5,r6
8020cc14:	10001726 	beq	r2,zero,8020cc74 <__subdf3+0x82c>
8020cc18:	1808d0fa 	srli	r4,r3,3
8020cc1c:	8822d0fa 	srli	r17,r17,3
8020cc20:	1806977a 	slli	r3,r3,29
8020cc24:	2080022c 	andhi	r2,r4,8
8020cc28:	1c62b03a 	or	r17,r3,r17
8020cc2c:	10000726 	beq	r2,zero,8020cc4c <__subdf3+0x804>
8020cc30:	2812d0fa 	srli	r9,r5,3
8020cc34:	4880022c 	andhi	r2,r9,8
8020cc38:	1000041e 	bne	r2,zero,8020cc4c <__subdf3+0x804>
8020cc3c:	300cd0fa 	srli	r6,r6,3
8020cc40:	2804977a 	slli	r2,r5,29
8020cc44:	4809883a 	mov	r4,r9
8020cc48:	11a2b03a 	or	r17,r2,r6
8020cc4c:	8806d77a 	srli	r3,r17,29
8020cc50:	200890fa 	slli	r4,r4,3
8020cc54:	882290fa 	slli	r17,r17,3
8020cc58:	3825883a 	mov	r18,r7
8020cc5c:	1906b03a 	or	r3,r3,r4
8020cc60:	0401ffc4 	movi	r16,2047
8020cc64:	003e1906 	br	8020c4cc <__reset+0xfa1ec4cc>
8020cc68:	000b883a 	mov	r5,zero
8020cc6c:	0005883a 	mov	r2,zero
8020cc70:	003e2e06 	br	8020c52c <__reset+0xfa1ec52c>
8020cc74:	0401ffc4 	movi	r16,2047
8020cc78:	003e1406 	br	8020c4cc <__reset+0xfa1ec4cc>
8020cc7c:	0005883a 	mov	r2,zero
8020cc80:	003f7506 	br	8020ca58 <__reset+0xfa1eca58>
8020cc84:	0005883a 	mov	r2,zero
8020cc88:	0009883a 	mov	r4,zero
8020cc8c:	003e7806 	br	8020c670 <__reset+0xfa1ec670>
8020cc90:	123ff804 	addi	r8,r2,-32
8020cc94:	01000804 	movi	r4,32
8020cc98:	1a10d83a 	srl	r8,r3,r8
8020cc9c:	11002526 	beq	r2,r4,8020cd34 <__subdf3+0x8ec>
8020cca0:	01001004 	movi	r4,64
8020cca4:	2085c83a 	sub	r2,r4,r2
8020cca8:	1884983a 	sll	r2,r3,r2
8020ccac:	1444b03a 	or	r2,r2,r17
8020ccb0:	1004c03a 	cmpne	r2,r2,zero
8020ccb4:	40a2b03a 	or	r17,r8,r2
8020ccb8:	0005883a 	mov	r2,zero
8020ccbc:	003f1606 	br	8020c918 <__reset+0xfa1ec918>
8020ccc0:	02000434 	movhi	r8,16
8020ccc4:	0009883a 	mov	r4,zero
8020ccc8:	423fffc4 	addi	r8,r8,-1
8020cccc:	00bfffc4 	movi	r2,-1
8020ccd0:	0401ffc4 	movi	r16,2047
8020ccd4:	003e6606 	br	8020c670 <__reset+0xfa1ec670>
8020ccd8:	1c62b03a 	or	r17,r3,r17
8020ccdc:	8822c03a 	cmpne	r17,r17,zero
8020cce0:	0005883a 	mov	r2,zero
8020cce4:	003f9906 	br	8020cb4c <__reset+0xfa1ecb4c>
8020cce8:	2807883a 	mov	r3,r5
8020ccec:	3023883a 	mov	r17,r6
8020ccf0:	0401ffc4 	movi	r16,2047
8020ccf4:	003df506 	br	8020c4cc <__reset+0xfa1ec4cc>
8020ccf8:	2807883a 	mov	r3,r5
8020ccfc:	3023883a 	mov	r17,r6
8020cd00:	003df206 	br	8020c4cc <__reset+0xfa1ec4cc>
8020cd04:	123ff804 	addi	r8,r2,-32
8020cd08:	01000804 	movi	r4,32
8020cd0c:	1a10d83a 	srl	r8,r3,r8
8020cd10:	11000a26 	beq	r2,r4,8020cd3c <__subdf3+0x8f4>
8020cd14:	01001004 	movi	r4,64
8020cd18:	2085c83a 	sub	r2,r4,r2
8020cd1c:	1884983a 	sll	r2,r3,r2
8020cd20:	1444b03a 	or	r2,r2,r17
8020cd24:	1004c03a 	cmpne	r2,r2,zero
8020cd28:	40a2b03a 	or	r17,r8,r2
8020cd2c:	0005883a 	mov	r2,zero
8020cd30:	003f8606 	br	8020cb4c <__reset+0xfa1ecb4c>
8020cd34:	0005883a 	mov	r2,zero
8020cd38:	003fdc06 	br	8020ccac <__reset+0xfa1eccac>
8020cd3c:	0005883a 	mov	r2,zero
8020cd40:	003ff706 	br	8020cd20 <__reset+0xfa1ecd20>

8020cd44 <__fixdfsi>:
8020cd44:	280cd53a 	srli	r6,r5,20
8020cd48:	00c00434 	movhi	r3,16
8020cd4c:	18ffffc4 	addi	r3,r3,-1
8020cd50:	3181ffcc 	andi	r6,r6,2047
8020cd54:	01c0ff84 	movi	r7,1022
8020cd58:	28c6703a 	and	r3,r5,r3
8020cd5c:	280ad7fa 	srli	r5,r5,31
8020cd60:	3980120e 	bge	r7,r6,8020cdac <__fixdfsi+0x68>
8020cd64:	00810744 	movi	r2,1053
8020cd68:	11800c16 	blt	r2,r6,8020cd9c <__fixdfsi+0x58>
8020cd6c:	00810cc4 	movi	r2,1075
8020cd70:	1185c83a 	sub	r2,r2,r6
8020cd74:	01c007c4 	movi	r7,31
8020cd78:	18c00434 	orhi	r3,r3,16
8020cd7c:	38800d16 	blt	r7,r2,8020cdb4 <__fixdfsi+0x70>
8020cd80:	31befb44 	addi	r6,r6,-1043
8020cd84:	2084d83a 	srl	r2,r4,r2
8020cd88:	1986983a 	sll	r3,r3,r6
8020cd8c:	1884b03a 	or	r2,r3,r2
8020cd90:	28000726 	beq	r5,zero,8020cdb0 <__fixdfsi+0x6c>
8020cd94:	0085c83a 	sub	r2,zero,r2
8020cd98:	f800283a 	ret
8020cd9c:	00a00034 	movhi	r2,32768
8020cda0:	10bfffc4 	addi	r2,r2,-1
8020cda4:	2885883a 	add	r2,r5,r2
8020cda8:	f800283a 	ret
8020cdac:	0005883a 	mov	r2,zero
8020cdb0:	f800283a 	ret
8020cdb4:	008104c4 	movi	r2,1043
8020cdb8:	1185c83a 	sub	r2,r2,r6
8020cdbc:	1884d83a 	srl	r2,r3,r2
8020cdc0:	003ff306 	br	8020cd90 <__reset+0xfa1ecd90>

8020cdc4 <__floatsidf>:
8020cdc4:	defffd04 	addi	sp,sp,-12
8020cdc8:	dfc00215 	stw	ra,8(sp)
8020cdcc:	dc400115 	stw	r17,4(sp)
8020cdd0:	dc000015 	stw	r16,0(sp)
8020cdd4:	20002b26 	beq	r4,zero,8020ce84 <__floatsidf+0xc0>
8020cdd8:	2023883a 	mov	r17,r4
8020cddc:	2020d7fa 	srli	r16,r4,31
8020cde0:	20002d16 	blt	r4,zero,8020ce98 <__floatsidf+0xd4>
8020cde4:	8809883a 	mov	r4,r17
8020cde8:	020cf480 	call	8020cf48 <__clzsi2>
8020cdec:	01410784 	movi	r5,1054
8020cdf0:	288bc83a 	sub	r5,r5,r2
8020cdf4:	01010cc4 	movi	r4,1075
8020cdf8:	2149c83a 	sub	r4,r4,r5
8020cdfc:	00c007c4 	movi	r3,31
8020ce00:	1900160e 	bge	r3,r4,8020ce5c <__floatsidf+0x98>
8020ce04:	00c104c4 	movi	r3,1043
8020ce08:	1947c83a 	sub	r3,r3,r5
8020ce0c:	88c6983a 	sll	r3,r17,r3
8020ce10:	00800434 	movhi	r2,16
8020ce14:	10bfffc4 	addi	r2,r2,-1
8020ce18:	1886703a 	and	r3,r3,r2
8020ce1c:	2941ffcc 	andi	r5,r5,2047
8020ce20:	800d883a 	mov	r6,r16
8020ce24:	0005883a 	mov	r2,zero
8020ce28:	280a953a 	slli	r5,r5,20
8020ce2c:	31803fcc 	andi	r6,r6,255
8020ce30:	01000434 	movhi	r4,16
8020ce34:	300c97fa 	slli	r6,r6,31
8020ce38:	213fffc4 	addi	r4,r4,-1
8020ce3c:	1906703a 	and	r3,r3,r4
8020ce40:	1946b03a 	or	r3,r3,r5
8020ce44:	1986b03a 	or	r3,r3,r6
8020ce48:	dfc00217 	ldw	ra,8(sp)
8020ce4c:	dc400117 	ldw	r17,4(sp)
8020ce50:	dc000017 	ldw	r16,0(sp)
8020ce54:	dec00304 	addi	sp,sp,12
8020ce58:	f800283a 	ret
8020ce5c:	00c002c4 	movi	r3,11
8020ce60:	1887c83a 	sub	r3,r3,r2
8020ce64:	88c6d83a 	srl	r3,r17,r3
8020ce68:	8904983a 	sll	r2,r17,r4
8020ce6c:	01000434 	movhi	r4,16
8020ce70:	213fffc4 	addi	r4,r4,-1
8020ce74:	2941ffcc 	andi	r5,r5,2047
8020ce78:	1906703a 	and	r3,r3,r4
8020ce7c:	800d883a 	mov	r6,r16
8020ce80:	003fe906 	br	8020ce28 <__reset+0xfa1ece28>
8020ce84:	000d883a 	mov	r6,zero
8020ce88:	000b883a 	mov	r5,zero
8020ce8c:	0007883a 	mov	r3,zero
8020ce90:	0005883a 	mov	r2,zero
8020ce94:	003fe406 	br	8020ce28 <__reset+0xfa1ece28>
8020ce98:	0123c83a 	sub	r17,zero,r4
8020ce9c:	003fd106 	br	8020cde4 <__reset+0xfa1ecde4>

8020cea0 <__floatunsidf>:
8020cea0:	defffe04 	addi	sp,sp,-8
8020cea4:	dc000015 	stw	r16,0(sp)
8020cea8:	dfc00115 	stw	ra,4(sp)
8020ceac:	2021883a 	mov	r16,r4
8020ceb0:	20002226 	beq	r4,zero,8020cf3c <__floatunsidf+0x9c>
8020ceb4:	020cf480 	call	8020cf48 <__clzsi2>
8020ceb8:	01010784 	movi	r4,1054
8020cebc:	2089c83a 	sub	r4,r4,r2
8020cec0:	01810cc4 	movi	r6,1075
8020cec4:	310dc83a 	sub	r6,r6,r4
8020cec8:	00c007c4 	movi	r3,31
8020cecc:	1980120e 	bge	r3,r6,8020cf18 <__floatunsidf+0x78>
8020ced0:	00c104c4 	movi	r3,1043
8020ced4:	1907c83a 	sub	r3,r3,r4
8020ced8:	80ca983a 	sll	r5,r16,r3
8020cedc:	00800434 	movhi	r2,16
8020cee0:	10bfffc4 	addi	r2,r2,-1
8020cee4:	2101ffcc 	andi	r4,r4,2047
8020cee8:	0021883a 	mov	r16,zero
8020ceec:	288a703a 	and	r5,r5,r2
8020cef0:	2008953a 	slli	r4,r4,20
8020cef4:	00c00434 	movhi	r3,16
8020cef8:	18ffffc4 	addi	r3,r3,-1
8020cefc:	28c6703a 	and	r3,r5,r3
8020cf00:	8005883a 	mov	r2,r16
8020cf04:	1906b03a 	or	r3,r3,r4
8020cf08:	dfc00117 	ldw	ra,4(sp)
8020cf0c:	dc000017 	ldw	r16,0(sp)
8020cf10:	dec00204 	addi	sp,sp,8
8020cf14:	f800283a 	ret
8020cf18:	00c002c4 	movi	r3,11
8020cf1c:	188bc83a 	sub	r5,r3,r2
8020cf20:	814ad83a 	srl	r5,r16,r5
8020cf24:	00c00434 	movhi	r3,16
8020cf28:	18ffffc4 	addi	r3,r3,-1
8020cf2c:	81a0983a 	sll	r16,r16,r6
8020cf30:	2101ffcc 	andi	r4,r4,2047
8020cf34:	28ca703a 	and	r5,r5,r3
8020cf38:	003fed06 	br	8020cef0 <__reset+0xfa1ecef0>
8020cf3c:	0009883a 	mov	r4,zero
8020cf40:	000b883a 	mov	r5,zero
8020cf44:	003fea06 	br	8020cef0 <__reset+0xfa1ecef0>

8020cf48 <__clzsi2>:
8020cf48:	00bfffd4 	movui	r2,65535
8020cf4c:	11000536 	bltu	r2,r4,8020cf64 <__clzsi2+0x1c>
8020cf50:	00803fc4 	movi	r2,255
8020cf54:	11000f36 	bltu	r2,r4,8020cf94 <__clzsi2+0x4c>
8020cf58:	00800804 	movi	r2,32
8020cf5c:	0007883a 	mov	r3,zero
8020cf60:	00000506 	br	8020cf78 <__clzsi2+0x30>
8020cf64:	00804034 	movhi	r2,256
8020cf68:	10bfffc4 	addi	r2,r2,-1
8020cf6c:	11000c2e 	bgeu	r2,r4,8020cfa0 <__clzsi2+0x58>
8020cf70:	00800204 	movi	r2,8
8020cf74:	00c00604 	movi	r3,24
8020cf78:	20c8d83a 	srl	r4,r4,r3
8020cf7c:	00e00874 	movhi	r3,32801
8020cf80:	18c91504 	addi	r3,r3,9300
8020cf84:	1909883a 	add	r4,r3,r4
8020cf88:	20c00003 	ldbu	r3,0(r4)
8020cf8c:	10c5c83a 	sub	r2,r2,r3
8020cf90:	f800283a 	ret
8020cf94:	00800604 	movi	r2,24
8020cf98:	00c00204 	movi	r3,8
8020cf9c:	003ff606 	br	8020cf78 <__reset+0xfa1ecf78>
8020cfa0:	00800404 	movi	r2,16
8020cfa4:	1007883a 	mov	r3,r2
8020cfa8:	003ff306 	br	8020cf78 <__reset+0xfa1ecf78>

8020cfac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
8020cfac:	defffe04 	addi	sp,sp,-8
8020cfb0:	dfc00115 	stw	ra,4(sp)
8020cfb4:	df000015 	stw	fp,0(sp)
8020cfb8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
8020cfbc:	d0a00b17 	ldw	r2,-32724(gp)
8020cfc0:	10000326 	beq	r2,zero,8020cfd0 <alt_get_errno+0x24>
8020cfc4:	d0a00b17 	ldw	r2,-32724(gp)
8020cfc8:	103ee83a 	callr	r2
8020cfcc:	00000106 	br	8020cfd4 <alt_get_errno+0x28>
8020cfd0:	d0a01904 	addi	r2,gp,-32668
}
8020cfd4:	e037883a 	mov	sp,fp
8020cfd8:	dfc00117 	ldw	ra,4(sp)
8020cfdc:	df000017 	ldw	fp,0(sp)
8020cfe0:	dec00204 	addi	sp,sp,8
8020cfe4:	f800283a 	ret

8020cfe8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
8020cfe8:	defffb04 	addi	sp,sp,-20
8020cfec:	dfc00415 	stw	ra,16(sp)
8020cff0:	df000315 	stw	fp,12(sp)
8020cff4:	df000304 	addi	fp,sp,12
8020cff8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
8020cffc:	e0bfff17 	ldw	r2,-4(fp)
8020d000:	10000616 	blt	r2,zero,8020d01c <close+0x34>
8020d004:	e0bfff17 	ldw	r2,-4(fp)
8020d008:	10c00324 	muli	r3,r2,12
8020d00c:	00a00874 	movhi	r2,32801
8020d010:	108c3304 	addi	r2,r2,12492
8020d014:	1885883a 	add	r2,r3,r2
8020d018:	00000106 	br	8020d020 <close+0x38>
8020d01c:	0005883a 	mov	r2,zero
8020d020:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
8020d024:	e0bffd17 	ldw	r2,-12(fp)
8020d028:	10001926 	beq	r2,zero,8020d090 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
8020d02c:	e0bffd17 	ldw	r2,-12(fp)
8020d030:	10800017 	ldw	r2,0(r2)
8020d034:	10800417 	ldw	r2,16(r2)
8020d038:	10000626 	beq	r2,zero,8020d054 <close+0x6c>
8020d03c:	e0bffd17 	ldw	r2,-12(fp)
8020d040:	10800017 	ldw	r2,0(r2)
8020d044:	10800417 	ldw	r2,16(r2)
8020d048:	e13ffd17 	ldw	r4,-12(fp)
8020d04c:	103ee83a 	callr	r2
8020d050:	00000106 	br	8020d058 <close+0x70>
8020d054:	0005883a 	mov	r2,zero
8020d058:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
8020d05c:	e13fff17 	ldw	r4,-4(fp)
8020d060:	020d5bc0 	call	8020d5bc <alt_release_fd>
    if (rval < 0)
8020d064:	e0bffe17 	ldw	r2,-8(fp)
8020d068:	1000070e 	bge	r2,zero,8020d088 <close+0xa0>
    {
      ALT_ERRNO = -rval;
8020d06c:	020cfac0 	call	8020cfac <alt_get_errno>
8020d070:	1007883a 	mov	r3,r2
8020d074:	e0bffe17 	ldw	r2,-8(fp)
8020d078:	0085c83a 	sub	r2,zero,r2
8020d07c:	18800015 	stw	r2,0(r3)
      return -1;
8020d080:	00bfffc4 	movi	r2,-1
8020d084:	00000706 	br	8020d0a4 <close+0xbc>
    }
    return 0;
8020d088:	0005883a 	mov	r2,zero
8020d08c:	00000506 	br	8020d0a4 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
8020d090:	020cfac0 	call	8020cfac <alt_get_errno>
8020d094:	1007883a 	mov	r3,r2
8020d098:	00801444 	movi	r2,81
8020d09c:	18800015 	stw	r2,0(r3)
    return -1;
8020d0a0:	00bfffc4 	movi	r2,-1
  }
}
8020d0a4:	e037883a 	mov	sp,fp
8020d0a8:	dfc00117 	ldw	ra,4(sp)
8020d0ac:	df000017 	ldw	fp,0(sp)
8020d0b0:	dec00204 	addi	sp,sp,8
8020d0b4:	f800283a 	ret

8020d0b8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
8020d0b8:	defffc04 	addi	sp,sp,-16
8020d0bc:	df000315 	stw	fp,12(sp)
8020d0c0:	df000304 	addi	fp,sp,12
8020d0c4:	e13ffd15 	stw	r4,-12(fp)
8020d0c8:	e17ffe15 	stw	r5,-8(fp)
8020d0cc:	e1bfff15 	stw	r6,-4(fp)
  return len;
8020d0d0:	e0bfff17 	ldw	r2,-4(fp)
}
8020d0d4:	e037883a 	mov	sp,fp
8020d0d8:	df000017 	ldw	fp,0(sp)
8020d0dc:	dec00104 	addi	sp,sp,4
8020d0e0:	f800283a 	ret

8020d0e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
8020d0e4:	defffe04 	addi	sp,sp,-8
8020d0e8:	dfc00115 	stw	ra,4(sp)
8020d0ec:	df000015 	stw	fp,0(sp)
8020d0f0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
8020d0f4:	d0a00b17 	ldw	r2,-32724(gp)
8020d0f8:	10000326 	beq	r2,zero,8020d108 <alt_get_errno+0x24>
8020d0fc:	d0a00b17 	ldw	r2,-32724(gp)
8020d100:	103ee83a 	callr	r2
8020d104:	00000106 	br	8020d10c <alt_get_errno+0x28>
8020d108:	d0a01904 	addi	r2,gp,-32668
}
8020d10c:	e037883a 	mov	sp,fp
8020d110:	dfc00117 	ldw	ra,4(sp)
8020d114:	df000017 	ldw	fp,0(sp)
8020d118:	dec00204 	addi	sp,sp,8
8020d11c:	f800283a 	ret

8020d120 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
8020d120:	defffb04 	addi	sp,sp,-20
8020d124:	dfc00415 	stw	ra,16(sp)
8020d128:	df000315 	stw	fp,12(sp)
8020d12c:	df000304 	addi	fp,sp,12
8020d130:	e13ffe15 	stw	r4,-8(fp)
8020d134:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
8020d138:	e0bffe17 	ldw	r2,-8(fp)
8020d13c:	10000616 	blt	r2,zero,8020d158 <fstat+0x38>
8020d140:	e0bffe17 	ldw	r2,-8(fp)
8020d144:	10c00324 	muli	r3,r2,12
8020d148:	00a00874 	movhi	r2,32801
8020d14c:	108c3304 	addi	r2,r2,12492
8020d150:	1885883a 	add	r2,r3,r2
8020d154:	00000106 	br	8020d15c <fstat+0x3c>
8020d158:	0005883a 	mov	r2,zero
8020d15c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
8020d160:	e0bffd17 	ldw	r2,-12(fp)
8020d164:	10001026 	beq	r2,zero,8020d1a8 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
8020d168:	e0bffd17 	ldw	r2,-12(fp)
8020d16c:	10800017 	ldw	r2,0(r2)
8020d170:	10800817 	ldw	r2,32(r2)
8020d174:	10000726 	beq	r2,zero,8020d194 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
8020d178:	e0bffd17 	ldw	r2,-12(fp)
8020d17c:	10800017 	ldw	r2,0(r2)
8020d180:	10800817 	ldw	r2,32(r2)
8020d184:	e17fff17 	ldw	r5,-4(fp)
8020d188:	e13ffd17 	ldw	r4,-12(fp)
8020d18c:	103ee83a 	callr	r2
8020d190:	00000a06 	br	8020d1bc <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
8020d194:	e0bfff17 	ldw	r2,-4(fp)
8020d198:	00c80004 	movi	r3,8192
8020d19c:	10c00115 	stw	r3,4(r2)
      return 0;
8020d1a0:	0005883a 	mov	r2,zero
8020d1a4:	00000506 	br	8020d1bc <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
8020d1a8:	020d0e40 	call	8020d0e4 <alt_get_errno>
8020d1ac:	1007883a 	mov	r3,r2
8020d1b0:	00801444 	movi	r2,81
8020d1b4:	18800015 	stw	r2,0(r3)
    return -1;
8020d1b8:	00bfffc4 	movi	r2,-1
  }
}
8020d1bc:	e037883a 	mov	sp,fp
8020d1c0:	dfc00117 	ldw	ra,4(sp)
8020d1c4:	df000017 	ldw	fp,0(sp)
8020d1c8:	dec00204 	addi	sp,sp,8
8020d1cc:	f800283a 	ret

8020d1d0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
8020d1d0:	defffe04 	addi	sp,sp,-8
8020d1d4:	dfc00115 	stw	ra,4(sp)
8020d1d8:	df000015 	stw	fp,0(sp)
8020d1dc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
8020d1e0:	d0a00b17 	ldw	r2,-32724(gp)
8020d1e4:	10000326 	beq	r2,zero,8020d1f4 <alt_get_errno+0x24>
8020d1e8:	d0a00b17 	ldw	r2,-32724(gp)
8020d1ec:	103ee83a 	callr	r2
8020d1f0:	00000106 	br	8020d1f8 <alt_get_errno+0x28>
8020d1f4:	d0a01904 	addi	r2,gp,-32668
}
8020d1f8:	e037883a 	mov	sp,fp
8020d1fc:	dfc00117 	ldw	ra,4(sp)
8020d200:	df000017 	ldw	fp,0(sp)
8020d204:	dec00204 	addi	sp,sp,8
8020d208:	f800283a 	ret

8020d20c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
8020d20c:	deffed04 	addi	sp,sp,-76
8020d210:	dfc01215 	stw	ra,72(sp)
8020d214:	df001115 	stw	fp,68(sp)
8020d218:	df001104 	addi	fp,sp,68
8020d21c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
8020d220:	e0bfff17 	ldw	r2,-4(fp)
8020d224:	10000616 	blt	r2,zero,8020d240 <isatty+0x34>
8020d228:	e0bfff17 	ldw	r2,-4(fp)
8020d22c:	10c00324 	muli	r3,r2,12
8020d230:	00a00874 	movhi	r2,32801
8020d234:	108c3304 	addi	r2,r2,12492
8020d238:	1885883a 	add	r2,r3,r2
8020d23c:	00000106 	br	8020d244 <isatty+0x38>
8020d240:	0005883a 	mov	r2,zero
8020d244:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
8020d248:	e0bfef17 	ldw	r2,-68(fp)
8020d24c:	10000e26 	beq	r2,zero,8020d288 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
8020d250:	e0bfef17 	ldw	r2,-68(fp)
8020d254:	10800017 	ldw	r2,0(r2)
8020d258:	10800817 	ldw	r2,32(r2)
8020d25c:	1000021e 	bne	r2,zero,8020d268 <isatty+0x5c>
    {
      return 1;
8020d260:	00800044 	movi	r2,1
8020d264:	00000d06 	br	8020d29c <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
8020d268:	e0bff004 	addi	r2,fp,-64
8020d26c:	100b883a 	mov	r5,r2
8020d270:	e13fff17 	ldw	r4,-4(fp)
8020d274:	020d1200 	call	8020d120 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
8020d278:	e0bff117 	ldw	r2,-60(fp)
8020d27c:	10880020 	cmpeqi	r2,r2,8192
8020d280:	10803fcc 	andi	r2,r2,255
8020d284:	00000506 	br	8020d29c <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
8020d288:	020d1d00 	call	8020d1d0 <alt_get_errno>
8020d28c:	1007883a 	mov	r3,r2
8020d290:	00801444 	movi	r2,81
8020d294:	18800015 	stw	r2,0(r3)
    return 0;
8020d298:	0005883a 	mov	r2,zero
  }
}
8020d29c:	e037883a 	mov	sp,fp
8020d2a0:	dfc00117 	ldw	ra,4(sp)
8020d2a4:	df000017 	ldw	fp,0(sp)
8020d2a8:	dec00204 	addi	sp,sp,8
8020d2ac:	f800283a 	ret

8020d2b0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
8020d2b0:	defffe04 	addi	sp,sp,-8
8020d2b4:	dfc00115 	stw	ra,4(sp)
8020d2b8:	df000015 	stw	fp,0(sp)
8020d2bc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
8020d2c0:	d0a00b17 	ldw	r2,-32724(gp)
8020d2c4:	10000326 	beq	r2,zero,8020d2d4 <alt_get_errno+0x24>
8020d2c8:	d0a00b17 	ldw	r2,-32724(gp)
8020d2cc:	103ee83a 	callr	r2
8020d2d0:	00000106 	br	8020d2d8 <alt_get_errno+0x28>
8020d2d4:	d0a01904 	addi	r2,gp,-32668
}
8020d2d8:	e037883a 	mov	sp,fp
8020d2dc:	dfc00117 	ldw	ra,4(sp)
8020d2e0:	df000017 	ldw	fp,0(sp)
8020d2e4:	dec00204 	addi	sp,sp,8
8020d2e8:	f800283a 	ret

8020d2ec <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
8020d2ec:	defff904 	addi	sp,sp,-28
8020d2f0:	dfc00615 	stw	ra,24(sp)
8020d2f4:	df000515 	stw	fp,20(sp)
8020d2f8:	df000504 	addi	fp,sp,20
8020d2fc:	e13ffd15 	stw	r4,-12(fp)
8020d300:	e17ffe15 	stw	r5,-8(fp)
8020d304:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
8020d308:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
8020d30c:	e0bffd17 	ldw	r2,-12(fp)
8020d310:	10000616 	blt	r2,zero,8020d32c <lseek+0x40>
8020d314:	e0bffd17 	ldw	r2,-12(fp)
8020d318:	10c00324 	muli	r3,r2,12
8020d31c:	00a00874 	movhi	r2,32801
8020d320:	108c3304 	addi	r2,r2,12492
8020d324:	1885883a 	add	r2,r3,r2
8020d328:	00000106 	br	8020d330 <lseek+0x44>
8020d32c:	0005883a 	mov	r2,zero
8020d330:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
8020d334:	e0bffc17 	ldw	r2,-16(fp)
8020d338:	10001026 	beq	r2,zero,8020d37c <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
8020d33c:	e0bffc17 	ldw	r2,-16(fp)
8020d340:	10800017 	ldw	r2,0(r2)
8020d344:	10800717 	ldw	r2,28(r2)
8020d348:	10000926 	beq	r2,zero,8020d370 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
8020d34c:	e0bffc17 	ldw	r2,-16(fp)
8020d350:	10800017 	ldw	r2,0(r2)
8020d354:	10800717 	ldw	r2,28(r2)
8020d358:	e1bfff17 	ldw	r6,-4(fp)
8020d35c:	e17ffe17 	ldw	r5,-8(fp)
8020d360:	e13ffc17 	ldw	r4,-16(fp)
8020d364:	103ee83a 	callr	r2
8020d368:	e0bffb15 	stw	r2,-20(fp)
8020d36c:	00000506 	br	8020d384 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
8020d370:	00bfde84 	movi	r2,-134
8020d374:	e0bffb15 	stw	r2,-20(fp)
8020d378:	00000206 	br	8020d384 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
8020d37c:	00bfebc4 	movi	r2,-81
8020d380:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
8020d384:	e0bffb17 	ldw	r2,-20(fp)
8020d388:	1000070e 	bge	r2,zero,8020d3a8 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
8020d38c:	020d2b00 	call	8020d2b0 <alt_get_errno>
8020d390:	1007883a 	mov	r3,r2
8020d394:	e0bffb17 	ldw	r2,-20(fp)
8020d398:	0085c83a 	sub	r2,zero,r2
8020d39c:	18800015 	stw	r2,0(r3)
    rc = -1;
8020d3a0:	00bfffc4 	movi	r2,-1
8020d3a4:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
8020d3a8:	e0bffb17 	ldw	r2,-20(fp)
}
8020d3ac:	e037883a 	mov	sp,fp
8020d3b0:	dfc00117 	ldw	ra,4(sp)
8020d3b4:	df000017 	ldw	fp,0(sp)
8020d3b8:	dec00204 	addi	sp,sp,8
8020d3bc:	f800283a 	ret

8020d3c0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
8020d3c0:	defffd04 	addi	sp,sp,-12
8020d3c4:	dfc00215 	stw	ra,8(sp)
8020d3c8:	df000115 	stw	fp,4(sp)
8020d3cc:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
8020d3d0:	0009883a 	mov	r4,zero
8020d3d4:	020d8680 	call	8020d868 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
8020d3d8:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
8020d3dc:	020d8a00 	call	8020d8a0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
8020d3e0:	01a00874 	movhi	r6,32801
8020d3e4:	31895804 	addi	r6,r6,9568
8020d3e8:	01600874 	movhi	r5,32801
8020d3ec:	29495804 	addi	r5,r5,9568
8020d3f0:	01200874 	movhi	r4,32801
8020d3f4:	21095804 	addi	r4,r4,9568
8020d3f8:	021156c0 	call	8021156c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
8020d3fc:	02110b80 	call	802110b8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
8020d400:	01200874 	movhi	r4,32801
8020d404:	21044604 	addi	r4,r4,4376
8020d408:	0211eb40 	call	80211eb4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
8020d40c:	d0a01a17 	ldw	r2,-32664(gp)
8020d410:	d0e01b17 	ldw	r3,-32660(gp)
8020d414:	d1201c17 	ldw	r4,-32656(gp)
8020d418:	200d883a 	mov	r6,r4
8020d41c:	180b883a 	mov	r5,r3
8020d420:	1009883a 	mov	r4,r2
8020d424:	020027c0 	call	8020027c <main>
8020d428:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
8020d42c:	01000044 	movi	r4,1
8020d430:	020cfe80 	call	8020cfe8 <close>
  exit (result);
8020d434:	e13fff17 	ldw	r4,-4(fp)
8020d438:	0211ec80 	call	80211ec8 <exit>

8020d43c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
8020d43c:	defffe04 	addi	sp,sp,-8
8020d440:	df000115 	stw	fp,4(sp)
8020d444:	df000104 	addi	fp,sp,4
8020d448:	e13fff15 	stw	r4,-4(fp)
}
8020d44c:	0001883a 	nop
8020d450:	e037883a 	mov	sp,fp
8020d454:	df000017 	ldw	fp,0(sp)
8020d458:	dec00104 	addi	sp,sp,4
8020d45c:	f800283a 	ret

8020d460 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
8020d460:	defffe04 	addi	sp,sp,-8
8020d464:	df000115 	stw	fp,4(sp)
8020d468:	df000104 	addi	fp,sp,4
8020d46c:	e13fff15 	stw	r4,-4(fp)
}
8020d470:	0001883a 	nop
8020d474:	e037883a 	mov	sp,fp
8020d478:	df000017 	ldw	fp,0(sp)
8020d47c:	dec00104 	addi	sp,sp,4
8020d480:	f800283a 	ret

8020d484 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
8020d484:	defffe04 	addi	sp,sp,-8
8020d488:	dfc00115 	stw	ra,4(sp)
8020d48c:	df000015 	stw	fp,0(sp)
8020d490:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
8020d494:	d0a00b17 	ldw	r2,-32724(gp)
8020d498:	10000326 	beq	r2,zero,8020d4a8 <alt_get_errno+0x24>
8020d49c:	d0a00b17 	ldw	r2,-32724(gp)
8020d4a0:	103ee83a 	callr	r2
8020d4a4:	00000106 	br	8020d4ac <alt_get_errno+0x28>
8020d4a8:	d0a01904 	addi	r2,gp,-32668
}
8020d4ac:	e037883a 	mov	sp,fp
8020d4b0:	dfc00117 	ldw	ra,4(sp)
8020d4b4:	df000017 	ldw	fp,0(sp)
8020d4b8:	dec00204 	addi	sp,sp,8
8020d4bc:	f800283a 	ret

8020d4c0 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
8020d4c0:	defff904 	addi	sp,sp,-28
8020d4c4:	dfc00615 	stw	ra,24(sp)
8020d4c8:	df000515 	stw	fp,20(sp)
8020d4cc:	df000504 	addi	fp,sp,20
8020d4d0:	e13ffd15 	stw	r4,-12(fp)
8020d4d4:	e17ffe15 	stw	r5,-8(fp)
8020d4d8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
8020d4dc:	e0bffd17 	ldw	r2,-12(fp)
8020d4e0:	10000616 	blt	r2,zero,8020d4fc <read+0x3c>
8020d4e4:	e0bffd17 	ldw	r2,-12(fp)
8020d4e8:	10c00324 	muli	r3,r2,12
8020d4ec:	00a00874 	movhi	r2,32801
8020d4f0:	108c3304 	addi	r2,r2,12492
8020d4f4:	1885883a 	add	r2,r3,r2
8020d4f8:	00000106 	br	8020d500 <read+0x40>
8020d4fc:	0005883a 	mov	r2,zero
8020d500:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
8020d504:	e0bffb17 	ldw	r2,-20(fp)
8020d508:	10002226 	beq	r2,zero,8020d594 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
8020d50c:	e0bffb17 	ldw	r2,-20(fp)
8020d510:	10800217 	ldw	r2,8(r2)
8020d514:	108000cc 	andi	r2,r2,3
8020d518:	10800060 	cmpeqi	r2,r2,1
8020d51c:	1000181e 	bne	r2,zero,8020d580 <read+0xc0>
        (fd->dev->read))
8020d520:	e0bffb17 	ldw	r2,-20(fp)
8020d524:	10800017 	ldw	r2,0(r2)
8020d528:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
8020d52c:	10001426 	beq	r2,zero,8020d580 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
8020d530:	e0bffb17 	ldw	r2,-20(fp)
8020d534:	10800017 	ldw	r2,0(r2)
8020d538:	10800517 	ldw	r2,20(r2)
8020d53c:	e0ffff17 	ldw	r3,-4(fp)
8020d540:	180d883a 	mov	r6,r3
8020d544:	e17ffe17 	ldw	r5,-8(fp)
8020d548:	e13ffb17 	ldw	r4,-20(fp)
8020d54c:	103ee83a 	callr	r2
8020d550:	e0bffc15 	stw	r2,-16(fp)
8020d554:	e0bffc17 	ldw	r2,-16(fp)
8020d558:	1000070e 	bge	r2,zero,8020d578 <read+0xb8>
        {
          ALT_ERRNO = -rval;
8020d55c:	020d4840 	call	8020d484 <alt_get_errno>
8020d560:	1007883a 	mov	r3,r2
8020d564:	e0bffc17 	ldw	r2,-16(fp)
8020d568:	0085c83a 	sub	r2,zero,r2
8020d56c:	18800015 	stw	r2,0(r3)
          return -1;
8020d570:	00bfffc4 	movi	r2,-1
8020d574:	00000c06 	br	8020d5a8 <read+0xe8>
        }
        return rval;
8020d578:	e0bffc17 	ldw	r2,-16(fp)
8020d57c:	00000a06 	br	8020d5a8 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
8020d580:	020d4840 	call	8020d484 <alt_get_errno>
8020d584:	1007883a 	mov	r3,r2
8020d588:	00800344 	movi	r2,13
8020d58c:	18800015 	stw	r2,0(r3)
8020d590:	00000406 	br	8020d5a4 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
8020d594:	020d4840 	call	8020d484 <alt_get_errno>
8020d598:	1007883a 	mov	r3,r2
8020d59c:	00801444 	movi	r2,81
8020d5a0:	18800015 	stw	r2,0(r3)
  }
  return -1;
8020d5a4:	00bfffc4 	movi	r2,-1
}
8020d5a8:	e037883a 	mov	sp,fp
8020d5ac:	dfc00117 	ldw	ra,4(sp)
8020d5b0:	df000017 	ldw	fp,0(sp)
8020d5b4:	dec00204 	addi	sp,sp,8
8020d5b8:	f800283a 	ret

8020d5bc <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
8020d5bc:	defffe04 	addi	sp,sp,-8
8020d5c0:	df000115 	stw	fp,4(sp)
8020d5c4:	df000104 	addi	fp,sp,4
8020d5c8:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
8020d5cc:	e0bfff17 	ldw	r2,-4(fp)
8020d5d0:	108000d0 	cmplti	r2,r2,3
8020d5d4:	10000d1e 	bne	r2,zero,8020d60c <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
8020d5d8:	00a00874 	movhi	r2,32801
8020d5dc:	108c3304 	addi	r2,r2,12492
8020d5e0:	e0ffff17 	ldw	r3,-4(fp)
8020d5e4:	18c00324 	muli	r3,r3,12
8020d5e8:	10c5883a 	add	r2,r2,r3
8020d5ec:	10800204 	addi	r2,r2,8
8020d5f0:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
8020d5f4:	00a00874 	movhi	r2,32801
8020d5f8:	108c3304 	addi	r2,r2,12492
8020d5fc:	e0ffff17 	ldw	r3,-4(fp)
8020d600:	18c00324 	muli	r3,r3,12
8020d604:	10c5883a 	add	r2,r2,r3
8020d608:	10000015 	stw	zero,0(r2)
  }
}
8020d60c:	0001883a 	nop
8020d610:	e037883a 	mov	sp,fp
8020d614:	df000017 	ldw	fp,0(sp)
8020d618:	dec00104 	addi	sp,sp,4
8020d61c:	f800283a 	ret

8020d620 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
8020d620:	defff904 	addi	sp,sp,-28
8020d624:	df000615 	stw	fp,24(sp)
8020d628:	df000604 	addi	fp,sp,24
8020d62c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8020d630:	0005303a 	rdctl	r2,status
8020d634:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8020d638:	e0fffe17 	ldw	r3,-8(fp)
8020d63c:	00bfff84 	movi	r2,-2
8020d640:	1884703a 	and	r2,r3,r2
8020d644:	1001703a 	wrctl	status,r2
  
  return context;
8020d648:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
8020d64c:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
8020d650:	d0a00c17 	ldw	r2,-32720(gp)
8020d654:	10c000c4 	addi	r3,r2,3
8020d658:	00bfff04 	movi	r2,-4
8020d65c:	1884703a 	and	r2,r3,r2
8020d660:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
8020d664:	d0e00c17 	ldw	r3,-32720(gp)
8020d668:	e0bfff17 	ldw	r2,-4(fp)
8020d66c:	1887883a 	add	r3,r3,r2
8020d670:	00a00bb4 	movhi	r2,32814
8020d674:	10800004 	addi	r2,r2,0
8020d678:	10c0062e 	bgeu	r2,r3,8020d694 <sbrk+0x74>
8020d67c:	e0bffb17 	ldw	r2,-20(fp)
8020d680:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8020d684:	e0bffa17 	ldw	r2,-24(fp)
8020d688:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
8020d68c:	00bfffc4 	movi	r2,-1
8020d690:	00000b06 	br	8020d6c0 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
8020d694:	d0a00c17 	ldw	r2,-32720(gp)
8020d698:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
8020d69c:	d0e00c17 	ldw	r3,-32720(gp)
8020d6a0:	e0bfff17 	ldw	r2,-4(fp)
8020d6a4:	1885883a 	add	r2,r3,r2
8020d6a8:	d0a00c15 	stw	r2,-32720(gp)
8020d6ac:	e0bffb17 	ldw	r2,-20(fp)
8020d6b0:	e0bffc15 	stw	r2,-16(fp)
8020d6b4:	e0bffc17 	ldw	r2,-16(fp)
8020d6b8:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
8020d6bc:	e0bffd17 	ldw	r2,-12(fp)
} 
8020d6c0:	e037883a 	mov	sp,fp
8020d6c4:	df000017 	ldw	fp,0(sp)
8020d6c8:	dec00104 	addi	sp,sp,4
8020d6cc:	f800283a 	ret

8020d6d0 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
8020d6d0:	defffd04 	addi	sp,sp,-12
8020d6d4:	dfc00215 	stw	ra,8(sp)
8020d6d8:	df000115 	stw	fp,4(sp)
8020d6dc:	df000104 	addi	fp,sp,4
8020d6e0:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
8020d6e4:	e13fff17 	ldw	r4,-4(fp)
8020d6e8:	0210e880 	call	80210e88 <alt_busy_sleep>
}
8020d6ec:	e037883a 	mov	sp,fp
8020d6f0:	dfc00117 	ldw	ra,4(sp)
8020d6f4:	df000017 	ldw	fp,0(sp)
8020d6f8:	dec00204 	addi	sp,sp,8
8020d6fc:	f800283a 	ret

8020d700 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
8020d700:	defffe04 	addi	sp,sp,-8
8020d704:	dfc00115 	stw	ra,4(sp)
8020d708:	df000015 	stw	fp,0(sp)
8020d70c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
8020d710:	d0a00b17 	ldw	r2,-32724(gp)
8020d714:	10000326 	beq	r2,zero,8020d724 <alt_get_errno+0x24>
8020d718:	d0a00b17 	ldw	r2,-32724(gp)
8020d71c:	103ee83a 	callr	r2
8020d720:	00000106 	br	8020d728 <alt_get_errno+0x28>
8020d724:	d0a01904 	addi	r2,gp,-32668
}
8020d728:	e037883a 	mov	sp,fp
8020d72c:	dfc00117 	ldw	ra,4(sp)
8020d730:	df000017 	ldw	fp,0(sp)
8020d734:	dec00204 	addi	sp,sp,8
8020d738:	f800283a 	ret

8020d73c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
8020d73c:	defff904 	addi	sp,sp,-28
8020d740:	dfc00615 	stw	ra,24(sp)
8020d744:	df000515 	stw	fp,20(sp)
8020d748:	df000504 	addi	fp,sp,20
8020d74c:	e13ffd15 	stw	r4,-12(fp)
8020d750:	e17ffe15 	stw	r5,-8(fp)
8020d754:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
8020d758:	e0bffd17 	ldw	r2,-12(fp)
8020d75c:	10000616 	blt	r2,zero,8020d778 <write+0x3c>
8020d760:	e0bffd17 	ldw	r2,-12(fp)
8020d764:	10c00324 	muli	r3,r2,12
8020d768:	00a00874 	movhi	r2,32801
8020d76c:	108c3304 	addi	r2,r2,12492
8020d770:	1885883a 	add	r2,r3,r2
8020d774:	00000106 	br	8020d77c <write+0x40>
8020d778:	0005883a 	mov	r2,zero
8020d77c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
8020d780:	e0bffb17 	ldw	r2,-20(fp)
8020d784:	10002126 	beq	r2,zero,8020d80c <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
8020d788:	e0bffb17 	ldw	r2,-20(fp)
8020d78c:	10800217 	ldw	r2,8(r2)
8020d790:	108000cc 	andi	r2,r2,3
8020d794:	10001826 	beq	r2,zero,8020d7f8 <write+0xbc>
8020d798:	e0bffb17 	ldw	r2,-20(fp)
8020d79c:	10800017 	ldw	r2,0(r2)
8020d7a0:	10800617 	ldw	r2,24(r2)
8020d7a4:	10001426 	beq	r2,zero,8020d7f8 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
8020d7a8:	e0bffb17 	ldw	r2,-20(fp)
8020d7ac:	10800017 	ldw	r2,0(r2)
8020d7b0:	10800617 	ldw	r2,24(r2)
8020d7b4:	e0ffff17 	ldw	r3,-4(fp)
8020d7b8:	180d883a 	mov	r6,r3
8020d7bc:	e17ffe17 	ldw	r5,-8(fp)
8020d7c0:	e13ffb17 	ldw	r4,-20(fp)
8020d7c4:	103ee83a 	callr	r2
8020d7c8:	e0bffc15 	stw	r2,-16(fp)
8020d7cc:	e0bffc17 	ldw	r2,-16(fp)
8020d7d0:	1000070e 	bge	r2,zero,8020d7f0 <write+0xb4>
      {
        ALT_ERRNO = -rval;
8020d7d4:	020d7000 	call	8020d700 <alt_get_errno>
8020d7d8:	1007883a 	mov	r3,r2
8020d7dc:	e0bffc17 	ldw	r2,-16(fp)
8020d7e0:	0085c83a 	sub	r2,zero,r2
8020d7e4:	18800015 	stw	r2,0(r3)
        return -1;
8020d7e8:	00bfffc4 	movi	r2,-1
8020d7ec:	00000c06 	br	8020d820 <write+0xe4>
      }
      return rval;
8020d7f0:	e0bffc17 	ldw	r2,-16(fp)
8020d7f4:	00000a06 	br	8020d820 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
8020d7f8:	020d7000 	call	8020d700 <alt_get_errno>
8020d7fc:	1007883a 	mov	r3,r2
8020d800:	00800344 	movi	r2,13
8020d804:	18800015 	stw	r2,0(r3)
8020d808:	00000406 	br	8020d81c <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
8020d80c:	020d7000 	call	8020d700 <alt_get_errno>
8020d810:	1007883a 	mov	r3,r2
8020d814:	00801444 	movi	r2,81
8020d818:	18800015 	stw	r2,0(r3)
  }
  return -1;
8020d81c:	00bfffc4 	movi	r2,-1
}
8020d820:	e037883a 	mov	sp,fp
8020d824:	dfc00117 	ldw	ra,4(sp)
8020d828:	df000017 	ldw	fp,0(sp)
8020d82c:	dec00204 	addi	sp,sp,8
8020d830:	f800283a 	ret

8020d834 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
8020d834:	defffd04 	addi	sp,sp,-12
8020d838:	dfc00215 	stw	ra,8(sp)
8020d83c:	df000115 	stw	fp,4(sp)
8020d840:	df000104 	addi	fp,sp,4
8020d844:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
8020d848:	d1600804 	addi	r5,gp,-32736
8020d84c:	e13fff17 	ldw	r4,-4(fp)
8020d850:	02110140 	call	80211014 <alt_dev_llist_insert>
}
8020d854:	e037883a 	mov	sp,fp
8020d858:	dfc00117 	ldw	ra,4(sp)
8020d85c:	df000017 	ldw	fp,0(sp)
8020d860:	dec00204 	addi	sp,sp,8
8020d864:	f800283a 	ret

8020d868 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
8020d868:	defffd04 	addi	sp,sp,-12
8020d86c:	dfc00215 	stw	ra,8(sp)
8020d870:	df000115 	stw	fp,4(sp)
8020d874:	df000104 	addi	fp,sp,4
8020d878:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
8020d87c:	0211c480 	call	80211c48 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
8020d880:	00800044 	movi	r2,1
8020d884:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
8020d888:	0001883a 	nop
8020d88c:	e037883a 	mov	sp,fp
8020d890:	dfc00117 	ldw	ra,4(sp)
8020d894:	df000017 	ldw	fp,0(sp)
8020d898:	dec00204 	addi	sp,sp,8
8020d89c:	f800283a 	ret

8020d8a0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
8020d8a0:	defffe04 	addi	sp,sp,-8
8020d8a4:	dfc00115 	stw	ra,4(sp)
8020d8a8:	df000015 	stw	fp,0(sp)
8020d8ac:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_1MS, timer_1ms);
8020d8b0:	01c0fa04 	movi	r7,1000
8020d8b4:	01800104 	movi	r6,4
8020d8b8:	000b883a 	mov	r5,zero
8020d8bc:	01208034 	movhi	r4,33280
8020d8c0:	21022004 	addi	r4,r4,2176
8020d8c4:	020e4680 	call	8020e468 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1US, timer_1us);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
8020d8c8:	018000c4 	movi	r6,3
8020d8cc:	000b883a 	mov	r5,zero
8020d8d0:	01200874 	movhi	r4,32801
8020d8d4:	210c9e04 	addi	r4,r4,12920
8020d8d8:	020daec0 	call	8020daec <altera_avalon_jtag_uart_init>
8020d8dc:	01200874 	movhi	r4,32801
8020d8e0:	210c9404 	addi	r4,r4,12880
8020d8e4:	020d8340 	call	8020d834 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS, sysid_qsys);
8020d8e8:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( RS232_UART, rs232_uart);
8020d8ec:	018001c4 	movi	r6,7
8020d8f0:	000b883a 	mov	r5,zero
8020d8f4:	01200874 	movhi	r4,32801
8020d8f8:	2110b604 	addi	r4,r4,17112
8020d8fc:	020e5f40 	call	8020e5f4 <altera_avalon_uart_init>
8020d900:	01200874 	movhi	r4,32801
8020d904:	2110ac04 	addi	r4,r4,17072
8020d908:	020d8340 	call	8020d834 <alt_dev_reg>
    ALTERA_MSGDMA_INIT ( DMA_DDR_M1, dma_DDR_M1);
8020d90c:	00a00874 	movhi	r2,32801
8020d910:	1090e004 	addi	r2,r2,17280
8020d914:	10c00717 	ldw	r3,28(r2)
8020d918:	00a00874 	movhi	r2,32801
8020d91c:	1090e004 	addi	r2,r2,17280
8020d920:	10800817 	ldw	r2,32(r2)
8020d924:	100d883a 	mov	r6,r2
8020d928:	180b883a 	mov	r5,r3
8020d92c:	01200874 	movhi	r4,32801
8020d930:	2110e004 	addi	r4,r4,17280
8020d934:	0210aac0 	call	80210aac <alt_msgdma_init>
    ALTERA_MSGDMA_INIT ( DMA_DDR_M2, dma_DDR_M2);
8020d938:	00a00874 	movhi	r2,32801
8020d93c:	1090f804 	addi	r2,r2,17376
8020d940:	10c00717 	ldw	r3,28(r2)
8020d944:	00a00874 	movhi	r2,32801
8020d948:	1090f804 	addi	r2,r2,17376
8020d94c:	10800817 	ldw	r2,32(r2)
8020d950:	100d883a 	mov	r6,r2
8020d954:	180b883a 	mov	r5,r3
8020d958:	01200874 	movhi	r4,32801
8020d95c:	2110f804 	addi	r4,r4,17376
8020d960:	0210aac0 	call	80210aac <alt_msgdma_init>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( ALTERA_UP_SD_CARD_AVALON_INTERFACE_0, Altera_UP_SD_Card_Avalon_Interface_0);
8020d964:	01200874 	movhi	r4,32801
8020d968:	21111004 	addi	r4,r4,17472
8020d96c:	020d8340 	call	8020d834 <alt_dev_reg>
}
8020d970:	0001883a 	nop
8020d974:	e037883a 	mov	sp,fp
8020d978:	dfc00117 	ldw	ra,4(sp)
8020d97c:	df000017 	ldw	fp,0(sp)
8020d980:	dec00204 	addi	sp,sp,8
8020d984:	f800283a 	ret

8020d988 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
8020d988:	defffa04 	addi	sp,sp,-24
8020d98c:	dfc00515 	stw	ra,20(sp)
8020d990:	df000415 	stw	fp,16(sp)
8020d994:	df000404 	addi	fp,sp,16
8020d998:	e13ffd15 	stw	r4,-12(fp)
8020d99c:	e17ffe15 	stw	r5,-8(fp)
8020d9a0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
8020d9a4:	e0bffd17 	ldw	r2,-12(fp)
8020d9a8:	10800017 	ldw	r2,0(r2)
8020d9ac:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
8020d9b0:	e0bffc17 	ldw	r2,-16(fp)
8020d9b4:	10c00a04 	addi	r3,r2,40
8020d9b8:	e0bffd17 	ldw	r2,-12(fp)
8020d9bc:	10800217 	ldw	r2,8(r2)
8020d9c0:	100f883a 	mov	r7,r2
8020d9c4:	e1bfff17 	ldw	r6,-4(fp)
8020d9c8:	e17ffe17 	ldw	r5,-8(fp)
8020d9cc:	1809883a 	mov	r4,r3
8020d9d0:	020dfb00 	call	8020dfb0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
8020d9d4:	e037883a 	mov	sp,fp
8020d9d8:	dfc00117 	ldw	ra,4(sp)
8020d9dc:	df000017 	ldw	fp,0(sp)
8020d9e0:	dec00204 	addi	sp,sp,8
8020d9e4:	f800283a 	ret

8020d9e8 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
8020d9e8:	defffa04 	addi	sp,sp,-24
8020d9ec:	dfc00515 	stw	ra,20(sp)
8020d9f0:	df000415 	stw	fp,16(sp)
8020d9f4:	df000404 	addi	fp,sp,16
8020d9f8:	e13ffd15 	stw	r4,-12(fp)
8020d9fc:	e17ffe15 	stw	r5,-8(fp)
8020da00:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
8020da04:	e0bffd17 	ldw	r2,-12(fp)
8020da08:	10800017 	ldw	r2,0(r2)
8020da0c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
8020da10:	e0bffc17 	ldw	r2,-16(fp)
8020da14:	10c00a04 	addi	r3,r2,40
8020da18:	e0bffd17 	ldw	r2,-12(fp)
8020da1c:	10800217 	ldw	r2,8(r2)
8020da20:	100f883a 	mov	r7,r2
8020da24:	e1bfff17 	ldw	r6,-4(fp)
8020da28:	e17ffe17 	ldw	r5,-8(fp)
8020da2c:	1809883a 	mov	r4,r3
8020da30:	020e1cc0 	call	8020e1cc <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
8020da34:	e037883a 	mov	sp,fp
8020da38:	dfc00117 	ldw	ra,4(sp)
8020da3c:	df000017 	ldw	fp,0(sp)
8020da40:	dec00204 	addi	sp,sp,8
8020da44:	f800283a 	ret

8020da48 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
8020da48:	defffc04 	addi	sp,sp,-16
8020da4c:	dfc00315 	stw	ra,12(sp)
8020da50:	df000215 	stw	fp,8(sp)
8020da54:	df000204 	addi	fp,sp,8
8020da58:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
8020da5c:	e0bfff17 	ldw	r2,-4(fp)
8020da60:	10800017 	ldw	r2,0(r2)
8020da64:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
8020da68:	e0bffe17 	ldw	r2,-8(fp)
8020da6c:	10c00a04 	addi	r3,r2,40
8020da70:	e0bfff17 	ldw	r2,-4(fp)
8020da74:	10800217 	ldw	r2,8(r2)
8020da78:	100b883a 	mov	r5,r2
8020da7c:	1809883a 	mov	r4,r3
8020da80:	020de580 	call	8020de58 <altera_avalon_jtag_uart_close>
}
8020da84:	e037883a 	mov	sp,fp
8020da88:	dfc00117 	ldw	ra,4(sp)
8020da8c:	df000017 	ldw	fp,0(sp)
8020da90:	dec00204 	addi	sp,sp,8
8020da94:	f800283a 	ret

8020da98 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
8020da98:	defffa04 	addi	sp,sp,-24
8020da9c:	dfc00515 	stw	ra,20(sp)
8020daa0:	df000415 	stw	fp,16(sp)
8020daa4:	df000404 	addi	fp,sp,16
8020daa8:	e13ffd15 	stw	r4,-12(fp)
8020daac:	e17ffe15 	stw	r5,-8(fp)
8020dab0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
8020dab4:	e0bffd17 	ldw	r2,-12(fp)
8020dab8:	10800017 	ldw	r2,0(r2)
8020dabc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
8020dac0:	e0bffc17 	ldw	r2,-16(fp)
8020dac4:	10800a04 	addi	r2,r2,40
8020dac8:	e1bfff17 	ldw	r6,-4(fp)
8020dacc:	e17ffe17 	ldw	r5,-8(fp)
8020dad0:	1009883a 	mov	r4,r2
8020dad4:	020dec00 	call	8020dec0 <altera_avalon_jtag_uart_ioctl>
}
8020dad8:	e037883a 	mov	sp,fp
8020dadc:	dfc00117 	ldw	ra,4(sp)
8020dae0:	df000017 	ldw	fp,0(sp)
8020dae4:	dec00204 	addi	sp,sp,8
8020dae8:	f800283a 	ret

8020daec <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
8020daec:	defffa04 	addi	sp,sp,-24
8020daf0:	dfc00515 	stw	ra,20(sp)
8020daf4:	df000415 	stw	fp,16(sp)
8020daf8:	df000404 	addi	fp,sp,16
8020dafc:	e13ffd15 	stw	r4,-12(fp)
8020db00:	e17ffe15 	stw	r5,-8(fp)
8020db04:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
8020db08:	e0bffd17 	ldw	r2,-12(fp)
8020db0c:	00c00044 	movi	r3,1
8020db10:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
8020db14:	e0bffd17 	ldw	r2,-12(fp)
8020db18:	10800017 	ldw	r2,0(r2)
8020db1c:	10800104 	addi	r2,r2,4
8020db20:	1007883a 	mov	r3,r2
8020db24:	e0bffd17 	ldw	r2,-12(fp)
8020db28:	10800817 	ldw	r2,32(r2)
8020db2c:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
8020db30:	e0bffe17 	ldw	r2,-8(fp)
8020db34:	e0ffff17 	ldw	r3,-4(fp)
8020db38:	d8000015 	stw	zero,0(sp)
8020db3c:	e1fffd17 	ldw	r7,-12(fp)
8020db40:	01a00874 	movhi	r6,32801
8020db44:	31b6eb04 	addi	r6,r6,-9300
8020db48:	180b883a 	mov	r5,r3
8020db4c:	1009883a 	mov	r4,r2
8020db50:	02112080 	call	80211208 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
8020db54:	e0bffd17 	ldw	r2,-12(fp)
8020db58:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
8020db5c:	e0bffd17 	ldw	r2,-12(fp)
8020db60:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
8020db64:	d0e01e17 	ldw	r3,-32648(gp)
8020db68:	e1fffd17 	ldw	r7,-12(fp)
8020db6c:	01a00874 	movhi	r6,32801
8020db70:	31b76e04 	addi	r6,r6,-8776
8020db74:	180b883a 	mov	r5,r3
8020db78:	1009883a 	mov	r4,r2
8020db7c:	0210d5c0 	call	80210d5c <alt_alarm_start>
8020db80:	1000040e 	bge	r2,zero,8020db94 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
8020db84:	e0fffd17 	ldw	r3,-12(fp)
8020db88:	00a00034 	movhi	r2,32768
8020db8c:	10bfffc4 	addi	r2,r2,-1
8020db90:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
8020db94:	0001883a 	nop
8020db98:	e037883a 	mov	sp,fp
8020db9c:	dfc00117 	ldw	ra,4(sp)
8020dba0:	df000017 	ldw	fp,0(sp)
8020dba4:	dec00204 	addi	sp,sp,8
8020dba8:	f800283a 	ret

8020dbac <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
8020dbac:	defff804 	addi	sp,sp,-32
8020dbb0:	df000715 	stw	fp,28(sp)
8020dbb4:	df000704 	addi	fp,sp,28
8020dbb8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
8020dbbc:	e0bfff17 	ldw	r2,-4(fp)
8020dbc0:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
8020dbc4:	e0bffb17 	ldw	r2,-20(fp)
8020dbc8:	10800017 	ldw	r2,0(r2)
8020dbcc:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
8020dbd0:	e0bffc17 	ldw	r2,-16(fp)
8020dbd4:	10800104 	addi	r2,r2,4
8020dbd8:	10800037 	ldwio	r2,0(r2)
8020dbdc:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
8020dbe0:	e0bffd17 	ldw	r2,-12(fp)
8020dbe4:	1080c00c 	andi	r2,r2,768
8020dbe8:	10006d26 	beq	r2,zero,8020dda0 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
8020dbec:	e0bffd17 	ldw	r2,-12(fp)
8020dbf0:	1080400c 	andi	r2,r2,256
8020dbf4:	10003526 	beq	r2,zero,8020dccc <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
8020dbf8:	00800074 	movhi	r2,1
8020dbfc:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
8020dc00:	e0bffb17 	ldw	r2,-20(fp)
8020dc04:	10800a17 	ldw	r2,40(r2)
8020dc08:	10800044 	addi	r2,r2,1
8020dc0c:	1081ffcc 	andi	r2,r2,2047
8020dc10:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
8020dc14:	e0bffb17 	ldw	r2,-20(fp)
8020dc18:	10c00b17 	ldw	r3,44(r2)
8020dc1c:	e0bffe17 	ldw	r2,-8(fp)
8020dc20:	18801526 	beq	r3,r2,8020dc78 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
8020dc24:	e0bffc17 	ldw	r2,-16(fp)
8020dc28:	10800037 	ldwio	r2,0(r2)
8020dc2c:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
8020dc30:	e0bff917 	ldw	r2,-28(fp)
8020dc34:	10a0000c 	andi	r2,r2,32768
8020dc38:	10001126 	beq	r2,zero,8020dc80 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
8020dc3c:	e0bffb17 	ldw	r2,-20(fp)
8020dc40:	10800a17 	ldw	r2,40(r2)
8020dc44:	e0fff917 	ldw	r3,-28(fp)
8020dc48:	1809883a 	mov	r4,r3
8020dc4c:	e0fffb17 	ldw	r3,-20(fp)
8020dc50:	1885883a 	add	r2,r3,r2
8020dc54:	10800e04 	addi	r2,r2,56
8020dc58:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
8020dc5c:	e0bffb17 	ldw	r2,-20(fp)
8020dc60:	10800a17 	ldw	r2,40(r2)
8020dc64:	10800044 	addi	r2,r2,1
8020dc68:	10c1ffcc 	andi	r3,r2,2047
8020dc6c:	e0bffb17 	ldw	r2,-20(fp)
8020dc70:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
8020dc74:	003fe206 	br	8020dc00 <__reset+0xfa1edc00>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
8020dc78:	0001883a 	nop
8020dc7c:	00000106 	br	8020dc84 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
8020dc80:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
8020dc84:	e0bff917 	ldw	r2,-28(fp)
8020dc88:	10bfffec 	andhi	r2,r2,65535
8020dc8c:	10000f26 	beq	r2,zero,8020dccc <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
8020dc90:	e0bffb17 	ldw	r2,-20(fp)
8020dc94:	10c00817 	ldw	r3,32(r2)
8020dc98:	00bfff84 	movi	r2,-2
8020dc9c:	1886703a 	and	r3,r3,r2
8020dca0:	e0bffb17 	ldw	r2,-20(fp)
8020dca4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
8020dca8:	e0bffc17 	ldw	r2,-16(fp)
8020dcac:	10800104 	addi	r2,r2,4
8020dcb0:	1007883a 	mov	r3,r2
8020dcb4:	e0bffb17 	ldw	r2,-20(fp)
8020dcb8:	10800817 	ldw	r2,32(r2)
8020dcbc:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
8020dcc0:	e0bffc17 	ldw	r2,-16(fp)
8020dcc4:	10800104 	addi	r2,r2,4
8020dcc8:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
8020dccc:	e0bffd17 	ldw	r2,-12(fp)
8020dcd0:	1080800c 	andi	r2,r2,512
8020dcd4:	103fbe26 	beq	r2,zero,8020dbd0 <__reset+0xfa1edbd0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
8020dcd8:	e0bffd17 	ldw	r2,-12(fp)
8020dcdc:	1004d43a 	srli	r2,r2,16
8020dce0:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
8020dce4:	00001406 	br	8020dd38 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
8020dce8:	e0bffc17 	ldw	r2,-16(fp)
8020dcec:	e0fffb17 	ldw	r3,-20(fp)
8020dcf0:	18c00d17 	ldw	r3,52(r3)
8020dcf4:	e13ffb17 	ldw	r4,-20(fp)
8020dcf8:	20c7883a 	add	r3,r4,r3
8020dcfc:	18c20e04 	addi	r3,r3,2104
8020dd00:	18c00003 	ldbu	r3,0(r3)
8020dd04:	18c03fcc 	andi	r3,r3,255
8020dd08:	18c0201c 	xori	r3,r3,128
8020dd0c:	18ffe004 	addi	r3,r3,-128
8020dd10:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
8020dd14:	e0bffb17 	ldw	r2,-20(fp)
8020dd18:	10800d17 	ldw	r2,52(r2)
8020dd1c:	10800044 	addi	r2,r2,1
8020dd20:	10c1ffcc 	andi	r3,r2,2047
8020dd24:	e0bffb17 	ldw	r2,-20(fp)
8020dd28:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
8020dd2c:	e0bffa17 	ldw	r2,-24(fp)
8020dd30:	10bfffc4 	addi	r2,r2,-1
8020dd34:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
8020dd38:	e0bffa17 	ldw	r2,-24(fp)
8020dd3c:	10000526 	beq	r2,zero,8020dd54 <altera_avalon_jtag_uart_irq+0x1a8>
8020dd40:	e0bffb17 	ldw	r2,-20(fp)
8020dd44:	10c00d17 	ldw	r3,52(r2)
8020dd48:	e0bffb17 	ldw	r2,-20(fp)
8020dd4c:	10800c17 	ldw	r2,48(r2)
8020dd50:	18bfe51e 	bne	r3,r2,8020dce8 <__reset+0xfa1edce8>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
8020dd54:	e0bffa17 	ldw	r2,-24(fp)
8020dd58:	103f9d26 	beq	r2,zero,8020dbd0 <__reset+0xfa1edbd0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
8020dd5c:	e0bffb17 	ldw	r2,-20(fp)
8020dd60:	10c00817 	ldw	r3,32(r2)
8020dd64:	00bfff44 	movi	r2,-3
8020dd68:	1886703a 	and	r3,r3,r2
8020dd6c:	e0bffb17 	ldw	r2,-20(fp)
8020dd70:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
8020dd74:	e0bffb17 	ldw	r2,-20(fp)
8020dd78:	10800017 	ldw	r2,0(r2)
8020dd7c:	10800104 	addi	r2,r2,4
8020dd80:	1007883a 	mov	r3,r2
8020dd84:	e0bffb17 	ldw	r2,-20(fp)
8020dd88:	10800817 	ldw	r2,32(r2)
8020dd8c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
8020dd90:	e0bffc17 	ldw	r2,-16(fp)
8020dd94:	10800104 	addi	r2,r2,4
8020dd98:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
8020dd9c:	003f8c06 	br	8020dbd0 <__reset+0xfa1edbd0>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
8020dda0:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
8020dda4:	0001883a 	nop
8020dda8:	e037883a 	mov	sp,fp
8020ddac:	df000017 	ldw	fp,0(sp)
8020ddb0:	dec00104 	addi	sp,sp,4
8020ddb4:	f800283a 	ret

8020ddb8 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
8020ddb8:	defff804 	addi	sp,sp,-32
8020ddbc:	df000715 	stw	fp,28(sp)
8020ddc0:	df000704 	addi	fp,sp,28
8020ddc4:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
8020ddc8:	e0bffb17 	ldw	r2,-20(fp)
8020ddcc:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
8020ddd0:	e0bff917 	ldw	r2,-28(fp)
8020ddd4:	10800017 	ldw	r2,0(r2)
8020ddd8:	10800104 	addi	r2,r2,4
8020dddc:	10800037 	ldwio	r2,0(r2)
8020dde0:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
8020dde4:	e0bffa17 	ldw	r2,-24(fp)
8020dde8:	1081000c 	andi	r2,r2,1024
8020ddec:	10000b26 	beq	r2,zero,8020de1c <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
8020ddf0:	e0bff917 	ldw	r2,-28(fp)
8020ddf4:	10800017 	ldw	r2,0(r2)
8020ddf8:	10800104 	addi	r2,r2,4
8020ddfc:	1007883a 	mov	r3,r2
8020de00:	e0bff917 	ldw	r2,-28(fp)
8020de04:	10800817 	ldw	r2,32(r2)
8020de08:	10810014 	ori	r2,r2,1024
8020de0c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
8020de10:	e0bff917 	ldw	r2,-28(fp)
8020de14:	10000915 	stw	zero,36(r2)
8020de18:	00000a06 	br	8020de44 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
8020de1c:	e0bff917 	ldw	r2,-28(fp)
8020de20:	10c00917 	ldw	r3,36(r2)
8020de24:	00a00034 	movhi	r2,32768
8020de28:	10bfff04 	addi	r2,r2,-4
8020de2c:	10c00536 	bltu	r2,r3,8020de44 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
8020de30:	e0bff917 	ldw	r2,-28(fp)
8020de34:	10800917 	ldw	r2,36(r2)
8020de38:	10c00044 	addi	r3,r2,1
8020de3c:	e0bff917 	ldw	r2,-28(fp)
8020de40:	10c00915 	stw	r3,36(r2)
8020de44:	d0a01e17 	ldw	r2,-32648(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
8020de48:	e037883a 	mov	sp,fp
8020de4c:	df000017 	ldw	fp,0(sp)
8020de50:	dec00104 	addi	sp,sp,4
8020de54:	f800283a 	ret

8020de58 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
8020de58:	defffd04 	addi	sp,sp,-12
8020de5c:	df000215 	stw	fp,8(sp)
8020de60:	df000204 	addi	fp,sp,8
8020de64:	e13ffe15 	stw	r4,-8(fp)
8020de68:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
8020de6c:	00000506 	br	8020de84 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
8020de70:	e0bfff17 	ldw	r2,-4(fp)
8020de74:	1090000c 	andi	r2,r2,16384
8020de78:	10000226 	beq	r2,zero,8020de84 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
8020de7c:	00bffd44 	movi	r2,-11
8020de80:	00000b06 	br	8020deb0 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
8020de84:	e0bffe17 	ldw	r2,-8(fp)
8020de88:	10c00d17 	ldw	r3,52(r2)
8020de8c:	e0bffe17 	ldw	r2,-8(fp)
8020de90:	10800c17 	ldw	r2,48(r2)
8020de94:	18800526 	beq	r3,r2,8020deac <altera_avalon_jtag_uart_close+0x54>
8020de98:	e0bffe17 	ldw	r2,-8(fp)
8020de9c:	10c00917 	ldw	r3,36(r2)
8020dea0:	e0bffe17 	ldw	r2,-8(fp)
8020dea4:	10800117 	ldw	r2,4(r2)
8020dea8:	18bff136 	bltu	r3,r2,8020de70 <__reset+0xfa1ede70>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
8020deac:	0005883a 	mov	r2,zero
}
8020deb0:	e037883a 	mov	sp,fp
8020deb4:	df000017 	ldw	fp,0(sp)
8020deb8:	dec00104 	addi	sp,sp,4
8020debc:	f800283a 	ret

8020dec0 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
8020dec0:	defffa04 	addi	sp,sp,-24
8020dec4:	df000515 	stw	fp,20(sp)
8020dec8:	df000504 	addi	fp,sp,20
8020decc:	e13ffd15 	stw	r4,-12(fp)
8020ded0:	e17ffe15 	stw	r5,-8(fp)
8020ded4:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
8020ded8:	00bff9c4 	movi	r2,-25
8020dedc:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
8020dee0:	e0bffe17 	ldw	r2,-8(fp)
8020dee4:	10da8060 	cmpeqi	r3,r2,27137
8020dee8:	1800031e 	bne	r3,zero,8020def8 <altera_avalon_jtag_uart_ioctl+0x38>
8020deec:	109a80a0 	cmpeqi	r2,r2,27138
8020def0:	1000181e 	bne	r2,zero,8020df54 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
8020def4:	00002906 	br	8020df9c <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
8020def8:	e0bffd17 	ldw	r2,-12(fp)
8020defc:	10c00117 	ldw	r3,4(r2)
8020df00:	00a00034 	movhi	r2,32768
8020df04:	10bfffc4 	addi	r2,r2,-1
8020df08:	18802126 	beq	r3,r2,8020df90 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
8020df0c:	e0bfff17 	ldw	r2,-4(fp)
8020df10:	10800017 	ldw	r2,0(r2)
8020df14:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
8020df18:	e0bffc17 	ldw	r2,-16(fp)
8020df1c:	10800090 	cmplti	r2,r2,2
8020df20:	1000061e 	bne	r2,zero,8020df3c <altera_avalon_jtag_uart_ioctl+0x7c>
8020df24:	e0fffc17 	ldw	r3,-16(fp)
8020df28:	00a00034 	movhi	r2,32768
8020df2c:	10bfffc4 	addi	r2,r2,-1
8020df30:	18800226 	beq	r3,r2,8020df3c <altera_avalon_jtag_uart_ioctl+0x7c>
8020df34:	e0bffc17 	ldw	r2,-16(fp)
8020df38:	00000206 	br	8020df44 <altera_avalon_jtag_uart_ioctl+0x84>
8020df3c:	00a00034 	movhi	r2,32768
8020df40:	10bfff84 	addi	r2,r2,-2
8020df44:	e0fffd17 	ldw	r3,-12(fp)
8020df48:	18800115 	stw	r2,4(r3)
      rc = 0;
8020df4c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
8020df50:	00000f06 	br	8020df90 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
8020df54:	e0bffd17 	ldw	r2,-12(fp)
8020df58:	10c00117 	ldw	r3,4(r2)
8020df5c:	00a00034 	movhi	r2,32768
8020df60:	10bfffc4 	addi	r2,r2,-1
8020df64:	18800c26 	beq	r3,r2,8020df98 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
8020df68:	e0bffd17 	ldw	r2,-12(fp)
8020df6c:	10c00917 	ldw	r3,36(r2)
8020df70:	e0bffd17 	ldw	r2,-12(fp)
8020df74:	10800117 	ldw	r2,4(r2)
8020df78:	1885803a 	cmpltu	r2,r3,r2
8020df7c:	10c03fcc 	andi	r3,r2,255
8020df80:	e0bfff17 	ldw	r2,-4(fp)
8020df84:	10c00015 	stw	r3,0(r2)
      rc = 0;
8020df88:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
8020df8c:	00000206 	br	8020df98 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
8020df90:	0001883a 	nop
8020df94:	00000106 	br	8020df9c <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
8020df98:	0001883a 	nop

  default:
    break;
  }

  return rc;
8020df9c:	e0bffb17 	ldw	r2,-20(fp)
}
8020dfa0:	e037883a 	mov	sp,fp
8020dfa4:	df000017 	ldw	fp,0(sp)
8020dfa8:	dec00104 	addi	sp,sp,4
8020dfac:	f800283a 	ret

8020dfb0 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
8020dfb0:	defff304 	addi	sp,sp,-52
8020dfb4:	dfc00c15 	stw	ra,48(sp)
8020dfb8:	df000b15 	stw	fp,44(sp)
8020dfbc:	df000b04 	addi	fp,sp,44
8020dfc0:	e13ffc15 	stw	r4,-16(fp)
8020dfc4:	e17ffd15 	stw	r5,-12(fp)
8020dfc8:	e1bffe15 	stw	r6,-8(fp)
8020dfcc:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
8020dfd0:	e0bffd17 	ldw	r2,-12(fp)
8020dfd4:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
8020dfd8:	00004706 	br	8020e0f8 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
8020dfdc:	e0bffc17 	ldw	r2,-16(fp)
8020dfe0:	10800a17 	ldw	r2,40(r2)
8020dfe4:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
8020dfe8:	e0bffc17 	ldw	r2,-16(fp)
8020dfec:	10800b17 	ldw	r2,44(r2)
8020dff0:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
8020dff4:	e0fff717 	ldw	r3,-36(fp)
8020dff8:	e0bff817 	ldw	r2,-32(fp)
8020dffc:	18800536 	bltu	r3,r2,8020e014 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
8020e000:	e0fff717 	ldw	r3,-36(fp)
8020e004:	e0bff817 	ldw	r2,-32(fp)
8020e008:	1885c83a 	sub	r2,r3,r2
8020e00c:	e0bff615 	stw	r2,-40(fp)
8020e010:	00000406 	br	8020e024 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
8020e014:	00c20004 	movi	r3,2048
8020e018:	e0bff817 	ldw	r2,-32(fp)
8020e01c:	1885c83a 	sub	r2,r3,r2
8020e020:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
8020e024:	e0bff617 	ldw	r2,-40(fp)
8020e028:	10001e26 	beq	r2,zero,8020e0a4 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
8020e02c:	e0fffe17 	ldw	r3,-8(fp)
8020e030:	e0bff617 	ldw	r2,-40(fp)
8020e034:	1880022e 	bgeu	r3,r2,8020e040 <altera_avalon_jtag_uart_read+0x90>
        n = space;
8020e038:	e0bffe17 	ldw	r2,-8(fp)
8020e03c:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
8020e040:	e0bffc17 	ldw	r2,-16(fp)
8020e044:	10c00e04 	addi	r3,r2,56
8020e048:	e0bff817 	ldw	r2,-32(fp)
8020e04c:	1885883a 	add	r2,r3,r2
8020e050:	e1bff617 	ldw	r6,-40(fp)
8020e054:	100b883a 	mov	r5,r2
8020e058:	e13ff517 	ldw	r4,-44(fp)
8020e05c:	02005040 	call	80200504 <memcpy>
      ptr   += n;
8020e060:	e0fff517 	ldw	r3,-44(fp)
8020e064:	e0bff617 	ldw	r2,-40(fp)
8020e068:	1885883a 	add	r2,r3,r2
8020e06c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
8020e070:	e0fffe17 	ldw	r3,-8(fp)
8020e074:	e0bff617 	ldw	r2,-40(fp)
8020e078:	1885c83a 	sub	r2,r3,r2
8020e07c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
8020e080:	e0fff817 	ldw	r3,-32(fp)
8020e084:	e0bff617 	ldw	r2,-40(fp)
8020e088:	1885883a 	add	r2,r3,r2
8020e08c:	10c1ffcc 	andi	r3,r2,2047
8020e090:	e0bffc17 	ldw	r2,-16(fp)
8020e094:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
8020e098:	e0bffe17 	ldw	r2,-8(fp)
8020e09c:	00bfcf16 	blt	zero,r2,8020dfdc <__reset+0xfa1edfdc>
8020e0a0:	00000106 	br	8020e0a8 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
8020e0a4:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
8020e0a8:	e0fff517 	ldw	r3,-44(fp)
8020e0ac:	e0bffd17 	ldw	r2,-12(fp)
8020e0b0:	1880141e 	bne	r3,r2,8020e104 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
8020e0b4:	e0bfff17 	ldw	r2,-4(fp)
8020e0b8:	1090000c 	andi	r2,r2,16384
8020e0bc:	1000131e 	bne	r2,zero,8020e10c <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
8020e0c0:	0001883a 	nop
8020e0c4:	e0bffc17 	ldw	r2,-16(fp)
8020e0c8:	10c00a17 	ldw	r3,40(r2)
8020e0cc:	e0bff717 	ldw	r2,-36(fp)
8020e0d0:	1880051e 	bne	r3,r2,8020e0e8 <altera_avalon_jtag_uart_read+0x138>
8020e0d4:	e0bffc17 	ldw	r2,-16(fp)
8020e0d8:	10c00917 	ldw	r3,36(r2)
8020e0dc:	e0bffc17 	ldw	r2,-16(fp)
8020e0e0:	10800117 	ldw	r2,4(r2)
8020e0e4:	18bff736 	bltu	r3,r2,8020e0c4 <__reset+0xfa1ee0c4>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
8020e0e8:	e0bffc17 	ldw	r2,-16(fp)
8020e0ec:	10c00a17 	ldw	r3,40(r2)
8020e0f0:	e0bff717 	ldw	r2,-36(fp)
8020e0f4:	18800726 	beq	r3,r2,8020e114 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
8020e0f8:	e0bffe17 	ldw	r2,-8(fp)
8020e0fc:	00bfb716 	blt	zero,r2,8020dfdc <__reset+0xfa1edfdc>
8020e100:	00000506 	br	8020e118 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
8020e104:	0001883a 	nop
8020e108:	00000306 	br	8020e118 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
8020e10c:	0001883a 	nop
8020e110:	00000106 	br	8020e118 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
8020e114:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
8020e118:	e0fff517 	ldw	r3,-44(fp)
8020e11c:	e0bffd17 	ldw	r2,-12(fp)
8020e120:	18801826 	beq	r3,r2,8020e184 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8020e124:	0005303a 	rdctl	r2,status
8020e128:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8020e12c:	e0fffb17 	ldw	r3,-20(fp)
8020e130:	00bfff84 	movi	r2,-2
8020e134:	1884703a 	and	r2,r3,r2
8020e138:	1001703a 	wrctl	status,r2
  
  return context;
8020e13c:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
8020e140:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
8020e144:	e0bffc17 	ldw	r2,-16(fp)
8020e148:	10800817 	ldw	r2,32(r2)
8020e14c:	10c00054 	ori	r3,r2,1
8020e150:	e0bffc17 	ldw	r2,-16(fp)
8020e154:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
8020e158:	e0bffc17 	ldw	r2,-16(fp)
8020e15c:	10800017 	ldw	r2,0(r2)
8020e160:	10800104 	addi	r2,r2,4
8020e164:	1007883a 	mov	r3,r2
8020e168:	e0bffc17 	ldw	r2,-16(fp)
8020e16c:	10800817 	ldw	r2,32(r2)
8020e170:	18800035 	stwio	r2,0(r3)
8020e174:	e0bffa17 	ldw	r2,-24(fp)
8020e178:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8020e17c:	e0bff917 	ldw	r2,-28(fp)
8020e180:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
8020e184:	e0fff517 	ldw	r3,-44(fp)
8020e188:	e0bffd17 	ldw	r2,-12(fp)
8020e18c:	18800426 	beq	r3,r2,8020e1a0 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
8020e190:	e0fff517 	ldw	r3,-44(fp)
8020e194:	e0bffd17 	ldw	r2,-12(fp)
8020e198:	1885c83a 	sub	r2,r3,r2
8020e19c:	00000606 	br	8020e1b8 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
8020e1a0:	e0bfff17 	ldw	r2,-4(fp)
8020e1a4:	1090000c 	andi	r2,r2,16384
8020e1a8:	10000226 	beq	r2,zero,8020e1b4 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
8020e1ac:	00bffd44 	movi	r2,-11
8020e1b0:	00000106 	br	8020e1b8 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
8020e1b4:	00bffec4 	movi	r2,-5
}
8020e1b8:	e037883a 	mov	sp,fp
8020e1bc:	dfc00117 	ldw	ra,4(sp)
8020e1c0:	df000017 	ldw	fp,0(sp)
8020e1c4:	dec00204 	addi	sp,sp,8
8020e1c8:	f800283a 	ret

8020e1cc <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
8020e1cc:	defff304 	addi	sp,sp,-52
8020e1d0:	dfc00c15 	stw	ra,48(sp)
8020e1d4:	df000b15 	stw	fp,44(sp)
8020e1d8:	df000b04 	addi	fp,sp,44
8020e1dc:	e13ffc15 	stw	r4,-16(fp)
8020e1e0:	e17ffd15 	stw	r5,-12(fp)
8020e1e4:	e1bffe15 	stw	r6,-8(fp)
8020e1e8:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
8020e1ec:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
8020e1f0:	e0bffd17 	ldw	r2,-12(fp)
8020e1f4:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
8020e1f8:	00003706 	br	8020e2d8 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
8020e1fc:	e0bffc17 	ldw	r2,-16(fp)
8020e200:	10800c17 	ldw	r2,48(r2)
8020e204:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
8020e208:	e0bffc17 	ldw	r2,-16(fp)
8020e20c:	10800d17 	ldw	r2,52(r2)
8020e210:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
8020e214:	e0fff917 	ldw	r3,-28(fp)
8020e218:	e0bff517 	ldw	r2,-44(fp)
8020e21c:	1880062e 	bgeu	r3,r2,8020e238 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
8020e220:	e0fff517 	ldw	r3,-44(fp)
8020e224:	e0bff917 	ldw	r2,-28(fp)
8020e228:	1885c83a 	sub	r2,r3,r2
8020e22c:	10bfffc4 	addi	r2,r2,-1
8020e230:	e0bff615 	stw	r2,-40(fp)
8020e234:	00000b06 	br	8020e264 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
8020e238:	e0bff517 	ldw	r2,-44(fp)
8020e23c:	10000526 	beq	r2,zero,8020e254 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
8020e240:	00c20004 	movi	r3,2048
8020e244:	e0bff917 	ldw	r2,-28(fp)
8020e248:	1885c83a 	sub	r2,r3,r2
8020e24c:	e0bff615 	stw	r2,-40(fp)
8020e250:	00000406 	br	8020e264 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
8020e254:	00c1ffc4 	movi	r3,2047
8020e258:	e0bff917 	ldw	r2,-28(fp)
8020e25c:	1885c83a 	sub	r2,r3,r2
8020e260:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
8020e264:	e0bff617 	ldw	r2,-40(fp)
8020e268:	10001e26 	beq	r2,zero,8020e2e4 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
8020e26c:	e0fffe17 	ldw	r3,-8(fp)
8020e270:	e0bff617 	ldw	r2,-40(fp)
8020e274:	1880022e 	bgeu	r3,r2,8020e280 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
8020e278:	e0bffe17 	ldw	r2,-8(fp)
8020e27c:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
8020e280:	e0bffc17 	ldw	r2,-16(fp)
8020e284:	10c20e04 	addi	r3,r2,2104
8020e288:	e0bff917 	ldw	r2,-28(fp)
8020e28c:	1885883a 	add	r2,r3,r2
8020e290:	e1bff617 	ldw	r6,-40(fp)
8020e294:	e17ffd17 	ldw	r5,-12(fp)
8020e298:	1009883a 	mov	r4,r2
8020e29c:	02005040 	call	80200504 <memcpy>
      ptr   += n;
8020e2a0:	e0fffd17 	ldw	r3,-12(fp)
8020e2a4:	e0bff617 	ldw	r2,-40(fp)
8020e2a8:	1885883a 	add	r2,r3,r2
8020e2ac:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
8020e2b0:	e0fffe17 	ldw	r3,-8(fp)
8020e2b4:	e0bff617 	ldw	r2,-40(fp)
8020e2b8:	1885c83a 	sub	r2,r3,r2
8020e2bc:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
8020e2c0:	e0fff917 	ldw	r3,-28(fp)
8020e2c4:	e0bff617 	ldw	r2,-40(fp)
8020e2c8:	1885883a 	add	r2,r3,r2
8020e2cc:	10c1ffcc 	andi	r3,r2,2047
8020e2d0:	e0bffc17 	ldw	r2,-16(fp)
8020e2d4:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
8020e2d8:	e0bffe17 	ldw	r2,-8(fp)
8020e2dc:	00bfc716 	blt	zero,r2,8020e1fc <__reset+0xfa1ee1fc>
8020e2e0:	00000106 	br	8020e2e8 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
8020e2e4:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8020e2e8:	0005303a 	rdctl	r2,status
8020e2ec:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8020e2f0:	e0fffb17 	ldw	r3,-20(fp)
8020e2f4:	00bfff84 	movi	r2,-2
8020e2f8:	1884703a 	and	r2,r3,r2
8020e2fc:	1001703a 	wrctl	status,r2
  
  return context;
8020e300:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
8020e304:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
8020e308:	e0bffc17 	ldw	r2,-16(fp)
8020e30c:	10800817 	ldw	r2,32(r2)
8020e310:	10c00094 	ori	r3,r2,2
8020e314:	e0bffc17 	ldw	r2,-16(fp)
8020e318:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
8020e31c:	e0bffc17 	ldw	r2,-16(fp)
8020e320:	10800017 	ldw	r2,0(r2)
8020e324:	10800104 	addi	r2,r2,4
8020e328:	1007883a 	mov	r3,r2
8020e32c:	e0bffc17 	ldw	r2,-16(fp)
8020e330:	10800817 	ldw	r2,32(r2)
8020e334:	18800035 	stwio	r2,0(r3)
8020e338:	e0bffa17 	ldw	r2,-24(fp)
8020e33c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8020e340:	e0bff817 	ldw	r2,-32(fp)
8020e344:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
8020e348:	e0bffe17 	ldw	r2,-8(fp)
8020e34c:	0080100e 	bge	zero,r2,8020e390 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
8020e350:	e0bfff17 	ldw	r2,-4(fp)
8020e354:	1090000c 	andi	r2,r2,16384
8020e358:	1000101e 	bne	r2,zero,8020e39c <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
8020e35c:	0001883a 	nop
8020e360:	e0bffc17 	ldw	r2,-16(fp)
8020e364:	10c00d17 	ldw	r3,52(r2)
8020e368:	e0bff517 	ldw	r2,-44(fp)
8020e36c:	1880051e 	bne	r3,r2,8020e384 <altera_avalon_jtag_uart_write+0x1b8>
8020e370:	e0bffc17 	ldw	r2,-16(fp)
8020e374:	10c00917 	ldw	r3,36(r2)
8020e378:	e0bffc17 	ldw	r2,-16(fp)
8020e37c:	10800117 	ldw	r2,4(r2)
8020e380:	18bff736 	bltu	r3,r2,8020e360 <__reset+0xfa1ee360>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
8020e384:	e0bffc17 	ldw	r2,-16(fp)
8020e388:	10800917 	ldw	r2,36(r2)
8020e38c:	1000051e 	bne	r2,zero,8020e3a4 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
8020e390:	e0bffe17 	ldw	r2,-8(fp)
8020e394:	00bfd016 	blt	zero,r2,8020e2d8 <__reset+0xfa1ee2d8>
8020e398:	00000306 	br	8020e3a8 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
8020e39c:	0001883a 	nop
8020e3a0:	00000106 	br	8020e3a8 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
8020e3a4:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
8020e3a8:	e0fffd17 	ldw	r3,-12(fp)
8020e3ac:	e0bff717 	ldw	r2,-36(fp)
8020e3b0:	18800426 	beq	r3,r2,8020e3c4 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
8020e3b4:	e0fffd17 	ldw	r3,-12(fp)
8020e3b8:	e0bff717 	ldw	r2,-36(fp)
8020e3bc:	1885c83a 	sub	r2,r3,r2
8020e3c0:	00000606 	br	8020e3dc <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
8020e3c4:	e0bfff17 	ldw	r2,-4(fp)
8020e3c8:	1090000c 	andi	r2,r2,16384
8020e3cc:	10000226 	beq	r2,zero,8020e3d8 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
8020e3d0:	00bffd44 	movi	r2,-11
8020e3d4:	00000106 	br	8020e3dc <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
8020e3d8:	00bffec4 	movi	r2,-5
}
8020e3dc:	e037883a 	mov	sp,fp
8020e3e0:	dfc00117 	ldw	ra,4(sp)
8020e3e4:	df000017 	ldw	fp,0(sp)
8020e3e8:	dec00204 	addi	sp,sp,8
8020e3ec:	f800283a 	ret

8020e3f0 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
8020e3f0:	defffa04 	addi	sp,sp,-24
8020e3f4:	dfc00515 	stw	ra,20(sp)
8020e3f8:	df000415 	stw	fp,16(sp)
8020e3fc:	df000404 	addi	fp,sp,16
8020e400:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
8020e404:	0007883a 	mov	r3,zero
8020e408:	e0bfff17 	ldw	r2,-4(fp)
8020e40c:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
8020e410:	e0bfff17 	ldw	r2,-4(fp)
8020e414:	10800104 	addi	r2,r2,4
8020e418:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8020e41c:	0005303a 	rdctl	r2,status
8020e420:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8020e424:	e0fffd17 	ldw	r3,-12(fp)
8020e428:	00bfff84 	movi	r2,-2
8020e42c:	1884703a 	and	r2,r3,r2
8020e430:	1001703a 	wrctl	status,r2
  
  return context;
8020e434:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
8020e438:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
8020e43c:	0211b400 	call	80211b40 <alt_tick>
8020e440:	e0bffc17 	ldw	r2,-16(fp)
8020e444:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8020e448:	e0bffe17 	ldw	r2,-8(fp)
8020e44c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
8020e450:	0001883a 	nop
8020e454:	e037883a 	mov	sp,fp
8020e458:	dfc00117 	ldw	ra,4(sp)
8020e45c:	df000017 	ldw	fp,0(sp)
8020e460:	dec00204 	addi	sp,sp,8
8020e464:	f800283a 	ret

8020e468 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
8020e468:	defff804 	addi	sp,sp,-32
8020e46c:	dfc00715 	stw	ra,28(sp)
8020e470:	df000615 	stw	fp,24(sp)
8020e474:	df000604 	addi	fp,sp,24
8020e478:	e13ffc15 	stw	r4,-16(fp)
8020e47c:	e17ffd15 	stw	r5,-12(fp)
8020e480:	e1bffe15 	stw	r6,-8(fp)
8020e484:	e1ffff15 	stw	r7,-4(fp)
8020e488:	e0bfff17 	ldw	r2,-4(fp)
8020e48c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
8020e490:	d0a01e17 	ldw	r2,-32648(gp)
8020e494:	1000021e 	bne	r2,zero,8020e4a0 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
8020e498:	e0bffb17 	ldw	r2,-20(fp)
8020e49c:	d0a01e15 	stw	r2,-32648(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
8020e4a0:	e0bffc17 	ldw	r2,-16(fp)
8020e4a4:	10800104 	addi	r2,r2,4
8020e4a8:	00c001c4 	movi	r3,7
8020e4ac:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
8020e4b0:	d8000015 	stw	zero,0(sp)
8020e4b4:	e1fffc17 	ldw	r7,-16(fp)
8020e4b8:	01a00874 	movhi	r6,32801
8020e4bc:	31b8fc04 	addi	r6,r6,-7184
8020e4c0:	e17ffe17 	ldw	r5,-8(fp)
8020e4c4:	e13ffd17 	ldw	r4,-12(fp)
8020e4c8:	02112080 	call	80211208 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
8020e4cc:	0001883a 	nop
8020e4d0:	e037883a 	mov	sp,fp
8020e4d4:	dfc00117 	ldw	ra,4(sp)
8020e4d8:	df000017 	ldw	fp,0(sp)
8020e4dc:	dec00204 	addi	sp,sp,8
8020e4e0:	f800283a 	ret

8020e4e4 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
8020e4e4:	defffa04 	addi	sp,sp,-24
8020e4e8:	dfc00515 	stw	ra,20(sp)
8020e4ec:	df000415 	stw	fp,16(sp)
8020e4f0:	df000404 	addi	fp,sp,16
8020e4f4:	e13ffd15 	stw	r4,-12(fp)
8020e4f8:	e17ffe15 	stw	r5,-8(fp)
8020e4fc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
8020e500:	e0bffd17 	ldw	r2,-12(fp)
8020e504:	10800017 	ldw	r2,0(r2)
8020e508:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
8020e50c:	e0bffc17 	ldw	r2,-16(fp)
8020e510:	10c00a04 	addi	r3,r2,40
8020e514:	e0bffd17 	ldw	r2,-12(fp)
8020e518:	10800217 	ldw	r2,8(r2)
8020e51c:	100f883a 	mov	r7,r2
8020e520:	e1bfff17 	ldw	r6,-4(fp)
8020e524:	e17ffe17 	ldw	r5,-8(fp)
8020e528:	1809883a 	mov	r4,r3
8020e52c:	020e9f80 	call	8020e9f8 <altera_avalon_uart_read>
      fd->fd_flags);
}
8020e530:	e037883a 	mov	sp,fp
8020e534:	dfc00117 	ldw	ra,4(sp)
8020e538:	df000017 	ldw	fp,0(sp)
8020e53c:	dec00204 	addi	sp,sp,8
8020e540:	f800283a 	ret

8020e544 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
8020e544:	defffa04 	addi	sp,sp,-24
8020e548:	dfc00515 	stw	ra,20(sp)
8020e54c:	df000415 	stw	fp,16(sp)
8020e550:	df000404 	addi	fp,sp,16
8020e554:	e13ffd15 	stw	r4,-12(fp)
8020e558:	e17ffe15 	stw	r5,-8(fp)
8020e55c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
8020e560:	e0bffd17 	ldw	r2,-12(fp)
8020e564:	10800017 	ldw	r2,0(r2)
8020e568:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
8020e56c:	e0bffc17 	ldw	r2,-16(fp)
8020e570:	10c00a04 	addi	r3,r2,40
8020e574:	e0bffd17 	ldw	r2,-12(fp)
8020e578:	10800217 	ldw	r2,8(r2)
8020e57c:	100f883a 	mov	r7,r2
8020e580:	e1bfff17 	ldw	r6,-4(fp)
8020e584:	e17ffe17 	ldw	r5,-8(fp)
8020e588:	1809883a 	mov	r4,r3
8020e58c:	020ec100 	call	8020ec10 <altera_avalon_uart_write>
      fd->fd_flags);
}
8020e590:	e037883a 	mov	sp,fp
8020e594:	dfc00117 	ldw	ra,4(sp)
8020e598:	df000017 	ldw	fp,0(sp)
8020e59c:	dec00204 	addi	sp,sp,8
8020e5a0:	f800283a 	ret

8020e5a4 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
8020e5a4:	defffc04 	addi	sp,sp,-16
8020e5a8:	dfc00315 	stw	ra,12(sp)
8020e5ac:	df000215 	stw	fp,8(sp)
8020e5b0:	df000204 	addi	fp,sp,8
8020e5b4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
8020e5b8:	e0bfff17 	ldw	r2,-4(fp)
8020e5bc:	10800017 	ldw	r2,0(r2)
8020e5c0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
8020e5c4:	e0bffe17 	ldw	r2,-8(fp)
8020e5c8:	10c00a04 	addi	r3,r2,40
8020e5cc:	e0bfff17 	ldw	r2,-4(fp)
8020e5d0:	10800217 	ldw	r2,8(r2)
8020e5d4:	100b883a 	mov	r5,r2
8020e5d8:	1809883a 	mov	r4,r3
8020e5dc:	020e9680 	call	8020e968 <altera_avalon_uart_close>
}
8020e5e0:	e037883a 	mov	sp,fp
8020e5e4:	dfc00117 	ldw	ra,4(sp)
8020e5e8:	df000017 	ldw	fp,0(sp)
8020e5ec:	dec00204 	addi	sp,sp,8
8020e5f0:	f800283a 	ret

8020e5f4 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
8020e5f4:	defff804 	addi	sp,sp,-32
8020e5f8:	dfc00715 	stw	ra,28(sp)
8020e5fc:	df000615 	stw	fp,24(sp)
8020e600:	df000604 	addi	fp,sp,24
8020e604:	e13ffd15 	stw	r4,-12(fp)
8020e608:	e17ffe15 	stw	r5,-8(fp)
8020e60c:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
8020e610:	e0bffd17 	ldw	r2,-12(fp)
8020e614:	10800017 	ldw	r2,0(r2)
8020e618:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
8020e61c:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
8020e620:	1000041e 	bne	r2,zero,8020e634 <altera_avalon_uart_init+0x40>
8020e624:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
8020e628:	1000021e 	bne	r2,zero,8020e634 <altera_avalon_uart_init+0x40>
8020e62c:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
8020e630:	10000226 	beq	r2,zero,8020e63c <altera_avalon_uart_init+0x48>
8020e634:	00800044 	movi	r2,1
8020e638:	00000106 	br	8020e640 <altera_avalon_uart_init+0x4c>
8020e63c:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
8020e640:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
8020e644:	e0bffc17 	ldw	r2,-16(fp)
8020e648:	10000f1e 	bne	r2,zero,8020e688 <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
8020e64c:	e0bffd17 	ldw	r2,-12(fp)
8020e650:	00c32004 	movi	r3,3200
8020e654:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
8020e658:	e0bffb17 	ldw	r2,-20(fp)
8020e65c:	10800304 	addi	r2,r2,12
8020e660:	e0fffd17 	ldw	r3,-12(fp)
8020e664:	18c00117 	ldw	r3,4(r3)
8020e668:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
8020e66c:	d8000015 	stw	zero,0(sp)
8020e670:	e1fffd17 	ldw	r7,-12(fp)
8020e674:	01a00874 	movhi	r6,32801
8020e678:	31b9a804 	addi	r6,r6,-6496
8020e67c:	e17fff17 	ldw	r5,-4(fp)
8020e680:	e13ffe17 	ldw	r4,-8(fp)
8020e684:	02112080 	call	80211208 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
8020e688:	0001883a 	nop
8020e68c:	e037883a 	mov	sp,fp
8020e690:	dfc00117 	ldw	ra,4(sp)
8020e694:	df000017 	ldw	fp,0(sp)
8020e698:	dec00204 	addi	sp,sp,8
8020e69c:	f800283a 	ret

8020e6a0 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
8020e6a0:	defffa04 	addi	sp,sp,-24
8020e6a4:	dfc00515 	stw	ra,20(sp)
8020e6a8:	df000415 	stw	fp,16(sp)
8020e6ac:	df000404 	addi	fp,sp,16
8020e6b0:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
8020e6b4:	e0bfff17 	ldw	r2,-4(fp)
8020e6b8:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
8020e6bc:	e0bffc17 	ldw	r2,-16(fp)
8020e6c0:	10800017 	ldw	r2,0(r2)
8020e6c4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
8020e6c8:	e0bffd17 	ldw	r2,-12(fp)
8020e6cc:	10800204 	addi	r2,r2,8
8020e6d0:	10800037 	ldwio	r2,0(r2)
8020e6d4:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
8020e6d8:	e0bffd17 	ldw	r2,-12(fp)
8020e6dc:	10800204 	addi	r2,r2,8
8020e6e0:	0007883a 	mov	r3,zero
8020e6e4:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
8020e6e8:	e0bffd17 	ldw	r2,-12(fp)
8020e6ec:	10800204 	addi	r2,r2,8
8020e6f0:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
8020e6f4:	e0bffe17 	ldw	r2,-8(fp)
8020e6f8:	1080200c 	andi	r2,r2,128
8020e6fc:	10000326 	beq	r2,zero,8020e70c <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
8020e700:	e17ffe17 	ldw	r5,-8(fp)
8020e704:	e13ffc17 	ldw	r4,-16(fp)
8020e708:	020e73c0 	call	8020e73c <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
8020e70c:	e0bffe17 	ldw	r2,-8(fp)
8020e710:	1081100c 	andi	r2,r2,1088
8020e714:	10000326 	beq	r2,zero,8020e724 <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
8020e718:	e17ffe17 	ldw	r5,-8(fp)
8020e71c:	e13ffc17 	ldw	r4,-16(fp)
8020e720:	020e8200 	call	8020e820 <altera_avalon_uart_txirq>
  }
  

}
8020e724:	0001883a 	nop
8020e728:	e037883a 	mov	sp,fp
8020e72c:	dfc00117 	ldw	ra,4(sp)
8020e730:	df000017 	ldw	fp,0(sp)
8020e734:	dec00204 	addi	sp,sp,8
8020e738:	f800283a 	ret

8020e73c <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
8020e73c:	defffc04 	addi	sp,sp,-16
8020e740:	df000315 	stw	fp,12(sp)
8020e744:	df000304 	addi	fp,sp,12
8020e748:	e13ffe15 	stw	r4,-8(fp)
8020e74c:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
8020e750:	e0bfff17 	ldw	r2,-4(fp)
8020e754:	108000cc 	andi	r2,r2,3
8020e758:	10002c1e 	bne	r2,zero,8020e80c <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
8020e75c:	e0bffe17 	ldw	r2,-8(fp)
8020e760:	10800317 	ldw	r2,12(r2)
8020e764:	e0bffe17 	ldw	r2,-8(fp)
8020e768:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
8020e76c:	e0bffe17 	ldw	r2,-8(fp)
8020e770:	10800317 	ldw	r2,12(r2)
8020e774:	10800044 	addi	r2,r2,1
8020e778:	10800fcc 	andi	r2,r2,63
8020e77c:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
8020e780:	e0bffe17 	ldw	r2,-8(fp)
8020e784:	10800317 	ldw	r2,12(r2)
8020e788:	e0fffe17 	ldw	r3,-8(fp)
8020e78c:	18c00017 	ldw	r3,0(r3)
8020e790:	18c00037 	ldwio	r3,0(r3)
8020e794:	1809883a 	mov	r4,r3
8020e798:	e0fffe17 	ldw	r3,-8(fp)
8020e79c:	1885883a 	add	r2,r3,r2
8020e7a0:	10800704 	addi	r2,r2,28
8020e7a4:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
8020e7a8:	e0bffe17 	ldw	r2,-8(fp)
8020e7ac:	e0fffd17 	ldw	r3,-12(fp)
8020e7b0:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
8020e7b4:	e0bffe17 	ldw	r2,-8(fp)
8020e7b8:	10800317 	ldw	r2,12(r2)
8020e7bc:	10800044 	addi	r2,r2,1
8020e7c0:	10800fcc 	andi	r2,r2,63
8020e7c4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
8020e7c8:	e0bffe17 	ldw	r2,-8(fp)
8020e7cc:	10c00217 	ldw	r3,8(r2)
8020e7d0:	e0bffd17 	ldw	r2,-12(fp)
8020e7d4:	18800e1e 	bne	r3,r2,8020e810 <altera_avalon_uart_rxirq+0xd4>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
8020e7d8:	e0bffe17 	ldw	r2,-8(fp)
8020e7dc:	10c00117 	ldw	r3,4(r2)
8020e7e0:	00bfdfc4 	movi	r2,-129
8020e7e4:	1886703a 	and	r3,r3,r2
8020e7e8:	e0bffe17 	ldw	r2,-8(fp)
8020e7ec:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
8020e7f0:	e0bffe17 	ldw	r2,-8(fp)
8020e7f4:	10800017 	ldw	r2,0(r2)
8020e7f8:	10800304 	addi	r2,r2,12
8020e7fc:	e0fffe17 	ldw	r3,-8(fp)
8020e800:	18c00117 	ldw	r3,4(r3)
8020e804:	10c00035 	stwio	r3,0(r2)
8020e808:	00000106 	br	8020e810 <altera_avalon_uart_rxirq+0xd4>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
8020e80c:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
8020e810:	e037883a 	mov	sp,fp
8020e814:	df000017 	ldw	fp,0(sp)
8020e818:	dec00104 	addi	sp,sp,4
8020e81c:	f800283a 	ret

8020e820 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
8020e820:	defffb04 	addi	sp,sp,-20
8020e824:	df000415 	stw	fp,16(sp)
8020e828:	df000404 	addi	fp,sp,16
8020e82c:	e13ffc15 	stw	r4,-16(fp)
8020e830:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
8020e834:	e0bffc17 	ldw	r2,-16(fp)
8020e838:	10c00417 	ldw	r3,16(r2)
8020e83c:	e0bffc17 	ldw	r2,-16(fp)
8020e840:	10800517 	ldw	r2,20(r2)
8020e844:	18803226 	beq	r3,r2,8020e910 <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
8020e848:	e0bffc17 	ldw	r2,-16(fp)
8020e84c:	10800617 	ldw	r2,24(r2)
8020e850:	1080008c 	andi	r2,r2,2
8020e854:	10000326 	beq	r2,zero,8020e864 <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
8020e858:	e0bffd17 	ldw	r2,-12(fp)
8020e85c:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
8020e860:	10001d26 	beq	r2,zero,8020e8d8 <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
8020e864:	e0bffc17 	ldw	r2,-16(fp)
8020e868:	10800417 	ldw	r2,16(r2)
8020e86c:	e0bffc17 	ldw	r2,-16(fp)
8020e870:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
8020e874:	e0bffc17 	ldw	r2,-16(fp)
8020e878:	10800017 	ldw	r2,0(r2)
8020e87c:	10800104 	addi	r2,r2,4
8020e880:	e0fffc17 	ldw	r3,-16(fp)
8020e884:	18c00417 	ldw	r3,16(r3)
8020e888:	e13ffc17 	ldw	r4,-16(fp)
8020e88c:	20c7883a 	add	r3,r4,r3
8020e890:	18c01704 	addi	r3,r3,92
8020e894:	18c00003 	ldbu	r3,0(r3)
8020e898:	18c03fcc 	andi	r3,r3,255
8020e89c:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
8020e8a0:	e0bffc17 	ldw	r2,-16(fp)
8020e8a4:	10800417 	ldw	r2,16(r2)
8020e8a8:	10800044 	addi	r2,r2,1
8020e8ac:	e0fffc17 	ldw	r3,-16(fp)
8020e8b0:	18800415 	stw	r2,16(r3)
8020e8b4:	10c00fcc 	andi	r3,r2,63
8020e8b8:	e0bffc17 	ldw	r2,-16(fp)
8020e8bc:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
8020e8c0:	e0bffc17 	ldw	r2,-16(fp)
8020e8c4:	10800117 	ldw	r2,4(r2)
8020e8c8:	10c01014 	ori	r3,r2,64
8020e8cc:	e0bffc17 	ldw	r2,-16(fp)
8020e8d0:	10c00115 	stw	r3,4(r2)
8020e8d4:	00000e06 	br	8020e910 <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
8020e8d8:	e0bffc17 	ldw	r2,-16(fp)
8020e8dc:	10800017 	ldw	r2,0(r2)
8020e8e0:	10800204 	addi	r2,r2,8
8020e8e4:	10800037 	ldwio	r2,0(r2)
8020e8e8:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
8020e8ec:	e0bffd17 	ldw	r2,-12(fp)
8020e8f0:	1082000c 	andi	r2,r2,2048
8020e8f4:	1000061e 	bne	r2,zero,8020e910 <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
8020e8f8:	e0bffc17 	ldw	r2,-16(fp)
8020e8fc:	10c00117 	ldw	r3,4(r2)
8020e900:	00bfefc4 	movi	r2,-65
8020e904:	1886703a 	and	r3,r3,r2
8020e908:	e0bffc17 	ldw	r2,-16(fp)
8020e90c:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
8020e910:	e0bffc17 	ldw	r2,-16(fp)
8020e914:	10c00417 	ldw	r3,16(r2)
8020e918:	e0bffc17 	ldw	r2,-16(fp)
8020e91c:	10800517 	ldw	r2,20(r2)
8020e920:	1880061e 	bne	r3,r2,8020e93c <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
8020e924:	e0bffc17 	ldw	r2,-16(fp)
8020e928:	10c00117 	ldw	r3,4(r2)
8020e92c:	00beefc4 	movi	r2,-1089
8020e930:	1886703a 	and	r3,r3,r2
8020e934:	e0bffc17 	ldw	r2,-16(fp)
8020e938:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
8020e93c:	e0bffc17 	ldw	r2,-16(fp)
8020e940:	10800017 	ldw	r2,0(r2)
8020e944:	10800304 	addi	r2,r2,12
8020e948:	e0fffc17 	ldw	r3,-16(fp)
8020e94c:	18c00117 	ldw	r3,4(r3)
8020e950:	10c00035 	stwio	r3,0(r2)
}
8020e954:	0001883a 	nop
8020e958:	e037883a 	mov	sp,fp
8020e95c:	df000017 	ldw	fp,0(sp)
8020e960:	dec00104 	addi	sp,sp,4
8020e964:	f800283a 	ret

8020e968 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
8020e968:	defffd04 	addi	sp,sp,-12
8020e96c:	df000215 	stw	fp,8(sp)
8020e970:	df000204 	addi	fp,sp,8
8020e974:	e13ffe15 	stw	r4,-8(fp)
8020e978:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
8020e97c:	00000506 	br	8020e994 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
8020e980:	e0bfff17 	ldw	r2,-4(fp)
8020e984:	1090000c 	andi	r2,r2,16384
8020e988:	10000226 	beq	r2,zero,8020e994 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
8020e98c:	00bffd44 	movi	r2,-11
8020e990:	00000606 	br	8020e9ac <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
8020e994:	e0bffe17 	ldw	r2,-8(fp)
8020e998:	10c00417 	ldw	r3,16(r2)
8020e99c:	e0bffe17 	ldw	r2,-8(fp)
8020e9a0:	10800517 	ldw	r2,20(r2)
8020e9a4:	18bff61e 	bne	r3,r2,8020e980 <__reset+0xfa1ee980>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
8020e9a8:	0005883a 	mov	r2,zero
}
8020e9ac:	e037883a 	mov	sp,fp
8020e9b0:	df000017 	ldw	fp,0(sp)
8020e9b4:	dec00104 	addi	sp,sp,4
8020e9b8:	f800283a 	ret

8020e9bc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
8020e9bc:	defffe04 	addi	sp,sp,-8
8020e9c0:	dfc00115 	stw	ra,4(sp)
8020e9c4:	df000015 	stw	fp,0(sp)
8020e9c8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
8020e9cc:	d0a00b17 	ldw	r2,-32724(gp)
8020e9d0:	10000326 	beq	r2,zero,8020e9e0 <alt_get_errno+0x24>
8020e9d4:	d0a00b17 	ldw	r2,-32724(gp)
8020e9d8:	103ee83a 	callr	r2
8020e9dc:	00000106 	br	8020e9e4 <alt_get_errno+0x28>
8020e9e0:	d0a01904 	addi	r2,gp,-32668
}
8020e9e4:	e037883a 	mov	sp,fp
8020e9e8:	dfc00117 	ldw	ra,4(sp)
8020e9ec:	df000017 	ldw	fp,0(sp)
8020e9f0:	dec00204 	addi	sp,sp,8
8020e9f4:	f800283a 	ret

8020e9f8 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
8020e9f8:	defff204 	addi	sp,sp,-56
8020e9fc:	dfc00d15 	stw	ra,52(sp)
8020ea00:	df000c15 	stw	fp,48(sp)
8020ea04:	df000c04 	addi	fp,sp,48
8020ea08:	e13ffc15 	stw	r4,-16(fp)
8020ea0c:	e17ffd15 	stw	r5,-12(fp)
8020ea10:	e1bffe15 	stw	r6,-8(fp)
8020ea14:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
8020ea18:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
8020ea1c:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
8020ea20:	e0bfff17 	ldw	r2,-4(fp)
8020ea24:	1090000c 	andi	r2,r2,16384
8020ea28:	1005003a 	cmpeq	r2,r2,zero
8020ea2c:	10803fcc 	andi	r2,r2,255
8020ea30:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
8020ea34:	00001306 	br	8020ea84 <altera_avalon_uart_read+0x8c>
    {
      count++;
8020ea38:	e0bff517 	ldw	r2,-44(fp)
8020ea3c:	10800044 	addi	r2,r2,1
8020ea40:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
8020ea44:	e0bffd17 	ldw	r2,-12(fp)
8020ea48:	10c00044 	addi	r3,r2,1
8020ea4c:	e0fffd15 	stw	r3,-12(fp)
8020ea50:	e0fffc17 	ldw	r3,-16(fp)
8020ea54:	18c00217 	ldw	r3,8(r3)
8020ea58:	e13ffc17 	ldw	r4,-16(fp)
8020ea5c:	20c7883a 	add	r3,r4,r3
8020ea60:	18c00704 	addi	r3,r3,28
8020ea64:	18c00003 	ldbu	r3,0(r3)
8020ea68:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
8020ea6c:	e0bffc17 	ldw	r2,-16(fp)
8020ea70:	10800217 	ldw	r2,8(r2)
8020ea74:	10800044 	addi	r2,r2,1
8020ea78:	10c00fcc 	andi	r3,r2,63
8020ea7c:	e0bffc17 	ldw	r2,-16(fp)
8020ea80:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
8020ea84:	e0fff517 	ldw	r3,-44(fp)
8020ea88:	e0bffe17 	ldw	r2,-8(fp)
8020ea8c:	1880050e 	bge	r3,r2,8020eaa4 <altera_avalon_uart_read+0xac>
8020ea90:	e0bffc17 	ldw	r2,-16(fp)
8020ea94:	10c00217 	ldw	r3,8(r2)
8020ea98:	e0bffc17 	ldw	r2,-16(fp)
8020ea9c:	10800317 	ldw	r2,12(r2)
8020eaa0:	18bfe51e 	bne	r3,r2,8020ea38 <__reset+0xfa1eea38>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
8020eaa4:	e0bff517 	ldw	r2,-44(fp)
8020eaa8:	1000251e 	bne	r2,zero,8020eb40 <altera_avalon_uart_read+0x148>
8020eaac:	e0bffc17 	ldw	r2,-16(fp)
8020eab0:	10c00217 	ldw	r3,8(r2)
8020eab4:	e0bffc17 	ldw	r2,-16(fp)
8020eab8:	10800317 	ldw	r2,12(r2)
8020eabc:	1880201e 	bne	r3,r2,8020eb40 <altera_avalon_uart_read+0x148>
    {
      if (!block)
8020eac0:	e0bff617 	ldw	r2,-40(fp)
8020eac4:	1000071e 	bne	r2,zero,8020eae4 <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
8020eac8:	020e9bc0 	call	8020e9bc <alt_get_errno>
8020eacc:	1007883a 	mov	r3,r2
8020ead0:	008002c4 	movi	r2,11
8020ead4:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
8020ead8:	00800044 	movi	r2,1
8020eadc:	e0bff405 	stb	r2,-48(fp)
        break;
8020eae0:	00001b06 	br	8020eb50 <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8020eae4:	0005303a 	rdctl	r2,status
8020eae8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8020eaec:	e0fff917 	ldw	r3,-28(fp)
8020eaf0:	00bfff84 	movi	r2,-2
8020eaf4:	1884703a 	and	r2,r3,r2
8020eaf8:	1001703a 	wrctl	status,r2
  
  return context;
8020eafc:	e0bff917 	ldw	r2,-28(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
8020eb00:	e0bff815 	stw	r2,-32(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
8020eb04:	e0bffc17 	ldw	r2,-16(fp)
8020eb08:	10800117 	ldw	r2,4(r2)
8020eb0c:	10c02014 	ori	r3,r2,128
8020eb10:	e0bffc17 	ldw	r2,-16(fp)
8020eb14:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
8020eb18:	e0bffc17 	ldw	r2,-16(fp)
8020eb1c:	10800017 	ldw	r2,0(r2)
8020eb20:	10800304 	addi	r2,r2,12
8020eb24:	e0fffc17 	ldw	r3,-16(fp)
8020eb28:	18c00117 	ldw	r3,4(r3)
8020eb2c:	10c00035 	stwio	r3,0(r2)
8020eb30:	e0bff817 	ldw	r2,-32(fp)
8020eb34:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8020eb38:	e0bffa17 	ldw	r2,-24(fp)
8020eb3c:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
8020eb40:	e0bff517 	ldw	r2,-44(fp)
8020eb44:	1000021e 	bne	r2,zero,8020eb50 <altera_avalon_uart_read+0x158>
8020eb48:	e0bffe17 	ldw	r2,-8(fp)
8020eb4c:	103fcd1e 	bne	r2,zero,8020ea84 <__reset+0xfa1eea84>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8020eb50:	0005303a 	rdctl	r2,status
8020eb54:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8020eb58:	e0fffb17 	ldw	r3,-20(fp)
8020eb5c:	00bfff84 	movi	r2,-2
8020eb60:	1884703a 	and	r2,r3,r2
8020eb64:	1001703a 	wrctl	status,r2
  
  return context;
8020eb68:	e0bffb17 	ldw	r2,-20(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
8020eb6c:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
8020eb70:	e0bffc17 	ldw	r2,-16(fp)
8020eb74:	10800117 	ldw	r2,4(r2)
8020eb78:	10c02014 	ori	r3,r2,128
8020eb7c:	e0bffc17 	ldw	r2,-16(fp)
8020eb80:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
8020eb84:	e0bffc17 	ldw	r2,-16(fp)
8020eb88:	10800017 	ldw	r2,0(r2)
8020eb8c:	10800304 	addi	r2,r2,12
8020eb90:	e0fffc17 	ldw	r3,-16(fp)
8020eb94:	18c00117 	ldw	r3,4(r3)
8020eb98:	10c00035 	stwio	r3,0(r2)
8020eb9c:	e0bff817 	ldw	r2,-32(fp)
8020eba0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8020eba4:	e0bff717 	ldw	r2,-36(fp)
8020eba8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
8020ebac:	e0bff403 	ldbu	r2,-48(fp)
8020ebb0:	10000226 	beq	r2,zero,8020ebbc <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
8020ebb4:	00bffd44 	movi	r2,-11
8020ebb8:	00000106 	br	8020ebc0 <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
8020ebbc:	e0bff517 	ldw	r2,-44(fp)
  }
}
8020ebc0:	e037883a 	mov	sp,fp
8020ebc4:	dfc00117 	ldw	ra,4(sp)
8020ebc8:	df000017 	ldw	fp,0(sp)
8020ebcc:	dec00204 	addi	sp,sp,8
8020ebd0:	f800283a 	ret

8020ebd4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
8020ebd4:	defffe04 	addi	sp,sp,-8
8020ebd8:	dfc00115 	stw	ra,4(sp)
8020ebdc:	df000015 	stw	fp,0(sp)
8020ebe0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
8020ebe4:	d0a00b17 	ldw	r2,-32724(gp)
8020ebe8:	10000326 	beq	r2,zero,8020ebf8 <alt_get_errno+0x24>
8020ebec:	d0a00b17 	ldw	r2,-32724(gp)
8020ebf0:	103ee83a 	callr	r2
8020ebf4:	00000106 	br	8020ebfc <alt_get_errno+0x28>
8020ebf8:	d0a01904 	addi	r2,gp,-32668
}
8020ebfc:	e037883a 	mov	sp,fp
8020ec00:	dfc00117 	ldw	ra,4(sp)
8020ec04:	df000017 	ldw	fp,0(sp)
8020ec08:	dec00204 	addi	sp,sp,8
8020ec0c:	f800283a 	ret

8020ec10 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
8020ec10:	defff204 	addi	sp,sp,-56
8020ec14:	dfc00d15 	stw	ra,52(sp)
8020ec18:	df000c15 	stw	fp,48(sp)
8020ec1c:	df000c04 	addi	fp,sp,48
8020ec20:	e13ffc15 	stw	r4,-16(fp)
8020ec24:	e17ffd15 	stw	r5,-12(fp)
8020ec28:	e1bffe15 	stw	r6,-8(fp)
8020ec2c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
8020ec30:	e0bffe17 	ldw	r2,-8(fp)
8020ec34:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
8020ec38:	e0bfff17 	ldw	r2,-4(fp)
8020ec3c:	1090000c 	andi	r2,r2,16384
8020ec40:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
8020ec44:	00003c06 	br	8020ed38 <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
8020ec48:	e0bffc17 	ldw	r2,-16(fp)
8020ec4c:	10800517 	ldw	r2,20(r2)
8020ec50:	10800044 	addi	r2,r2,1
8020ec54:	10800fcc 	andi	r2,r2,63
8020ec58:	e0bff715 	stw	r2,-36(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
8020ec5c:	e0bffc17 	ldw	r2,-16(fp)
8020ec60:	10c00417 	ldw	r3,16(r2)
8020ec64:	e0bff717 	ldw	r2,-36(fp)
8020ec68:	1880221e 	bne	r3,r2,8020ecf4 <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
8020ec6c:	e0bff517 	ldw	r2,-44(fp)
8020ec70:	10000526 	beq	r2,zero,8020ec88 <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
8020ec74:	020ebd40 	call	8020ebd4 <alt_get_errno>
8020ec78:	1007883a 	mov	r3,r2
8020ec7c:	008002c4 	movi	r2,11
8020ec80:	18800015 	stw	r2,0(r3)
        break;
8020ec84:	00002e06 	br	8020ed40 <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8020ec88:	0005303a 	rdctl	r2,status
8020ec8c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8020ec90:	e0fff917 	ldw	r3,-28(fp)
8020ec94:	00bfff84 	movi	r2,-2
8020ec98:	1884703a 	and	r2,r3,r2
8020ec9c:	1001703a 	wrctl	status,r2
  
  return context;
8020eca0:	e0bff917 	ldw	r2,-28(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
8020eca4:	e0bff815 	stw	r2,-32(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
8020eca8:	e0bffc17 	ldw	r2,-16(fp)
8020ecac:	10800117 	ldw	r2,4(r2)
8020ecb0:	10c11014 	ori	r3,r2,1088
8020ecb4:	e0bffc17 	ldw	r2,-16(fp)
8020ecb8:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
8020ecbc:	e0bffc17 	ldw	r2,-16(fp)
8020ecc0:	10800017 	ldw	r2,0(r2)
8020ecc4:	10800304 	addi	r2,r2,12
8020ecc8:	e0fffc17 	ldw	r3,-16(fp)
8020eccc:	18c00117 	ldw	r3,4(r3)
8020ecd0:	10c00035 	stwio	r3,0(r2)
8020ecd4:	e0bff817 	ldw	r2,-32(fp)
8020ecd8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8020ecdc:	e0bff617 	ldw	r2,-40(fp)
8020ece0:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
8020ece4:	e0bffc17 	ldw	r2,-16(fp)
8020ece8:	10c00417 	ldw	r3,16(r2)
8020ecec:	e0bff717 	ldw	r2,-36(fp)
8020ecf0:	18bffc26 	beq	r3,r2,8020ece4 <__reset+0xfa1eece4>
      }
    }

    count--;
8020ecf4:	e0bff417 	ldw	r2,-48(fp)
8020ecf8:	10bfffc4 	addi	r2,r2,-1
8020ecfc:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
8020ed00:	e0bffc17 	ldw	r2,-16(fp)
8020ed04:	10c00517 	ldw	r3,20(r2)
8020ed08:	e0bffd17 	ldw	r2,-12(fp)
8020ed0c:	11000044 	addi	r4,r2,1
8020ed10:	e13ffd15 	stw	r4,-12(fp)
8020ed14:	10800003 	ldbu	r2,0(r2)
8020ed18:	1009883a 	mov	r4,r2
8020ed1c:	e0bffc17 	ldw	r2,-16(fp)
8020ed20:	10c5883a 	add	r2,r2,r3
8020ed24:	10801704 	addi	r2,r2,92
8020ed28:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
8020ed2c:	e0bffc17 	ldw	r2,-16(fp)
8020ed30:	e0fff717 	ldw	r3,-36(fp)
8020ed34:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
8020ed38:	e0bff417 	ldw	r2,-48(fp)
8020ed3c:	103fc21e 	bne	r2,zero,8020ec48 <__reset+0xfa1eec48>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8020ed40:	0005303a 	rdctl	r2,status
8020ed44:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8020ed48:	e0fffb17 	ldw	r3,-20(fp)
8020ed4c:	00bfff84 	movi	r2,-2
8020ed50:	1884703a 	and	r2,r3,r2
8020ed54:	1001703a 	wrctl	status,r2
  
  return context;
8020ed58:	e0bffb17 	ldw	r2,-20(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
8020ed5c:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
8020ed60:	e0bffc17 	ldw	r2,-16(fp)
8020ed64:	10800117 	ldw	r2,4(r2)
8020ed68:	10c11014 	ori	r3,r2,1088
8020ed6c:	e0bffc17 	ldw	r2,-16(fp)
8020ed70:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
8020ed74:	e0bffc17 	ldw	r2,-16(fp)
8020ed78:	10800017 	ldw	r2,0(r2)
8020ed7c:	10800304 	addi	r2,r2,12
8020ed80:	e0fffc17 	ldw	r3,-16(fp)
8020ed84:	18c00117 	ldw	r3,4(r3)
8020ed88:	10c00035 	stwio	r3,0(r2)
8020ed8c:	e0bff817 	ldw	r2,-32(fp)
8020ed90:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8020ed94:	e0bffa17 	ldw	r2,-24(fp)
8020ed98:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
8020ed9c:	e0fffe17 	ldw	r3,-8(fp)
8020eda0:	e0bff417 	ldw	r2,-48(fp)
8020eda4:	1885c83a 	sub	r2,r3,r2
}
8020eda8:	e037883a 	mov	sp,fp
8020edac:	dfc00117 	ldw	ra,4(sp)
8020edb0:	df000017 	ldw	fp,0(sp)
8020edb4:	dec00204 	addi	sp,sp,8
8020edb8:	f800283a 	ret

8020edbc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
8020edbc:	defffe04 	addi	sp,sp,-8
8020edc0:	dfc00115 	stw	ra,4(sp)
8020edc4:	df000015 	stw	fp,0(sp)
8020edc8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
8020edcc:	d0a00b17 	ldw	r2,-32724(gp)
8020edd0:	10000326 	beq	r2,zero,8020ede0 <alt_get_errno+0x24>
8020edd4:	d0a00b17 	ldw	r2,-32724(gp)
8020edd8:	103ee83a 	callr	r2
8020eddc:	00000106 	br	8020ede4 <alt_get_errno+0x28>
8020ede0:	d0a01904 	addi	r2,gp,-32668
}
8020ede4:	e037883a 	mov	sp,fp
8020ede8:	dfc00117 	ldw	ra,4(sp)
8020edec:	df000017 	ldw	fp,0(sp)
8020edf0:	dec00204 	addi	sp,sp,8
8020edf4:	f800283a 	ret

8020edf8 <alt_msgdma_write_standard_descriptor>:
 */
static int alt_msgdma_write_standard_descriptor (
    alt_u32 *csr_base, 
    alt_u32 *descriptor_base,
    alt_msgdma_standard_descriptor *descriptor)
{
8020edf8:	defffc04 	addi	sp,sp,-16
8020edfc:	df000315 	stw	fp,12(sp)
8020ee00:	df000304 	addi	fp,sp,12
8020ee04:	e13ffd15 	stw	r4,-12(fp)
8020ee08:	e17ffe15 	stw	r5,-8(fp)
8020ee0c:	e1bfff15 	stw	r6,-4(fp)
    if (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(csr_base) & 
8020ee10:	e0bffd17 	ldw	r2,-12(fp)
8020ee14:	10800037 	ldwio	r2,0(r2)
8020ee18:	1080010c 	andi	r2,r2,4
8020ee1c:	10000226 	beq	r2,zero,8020ee28 <alt_msgdma_write_standard_descriptor+0x30>
        ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK))
    {
      /*at least one descriptor buffer is full, returning so that this function 
        is non-blocking*/
        return -ENOSPC;
8020ee20:	00bff904 	movi	r2,-28
8020ee24:	00001506 	br	8020ee7c <alt_msgdma_write_standard_descriptor+0x84>
    }

    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS(descriptor_base, 
8020ee28:	e0bfff17 	ldw	r2,-4(fp)
8020ee2c:	10800017 	ldw	r2,0(r2)
8020ee30:	1007883a 	mov	r3,r2
8020ee34:	e0bffe17 	ldw	r2,-8(fp)
8020ee38:	10c00035 	stwio	r3,0(r2)
        (alt_u32)descriptor->read_address);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS(descriptor_base, 
8020ee3c:	e0bffe17 	ldw	r2,-8(fp)
8020ee40:	10800104 	addi	r2,r2,4
8020ee44:	e0ffff17 	ldw	r3,-4(fp)
8020ee48:	18c00117 	ldw	r3,4(r3)
8020ee4c:	10c00035 	stwio	r3,0(r2)
    (    alt_u32)descriptor->write_address);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_LENGTH(descriptor_base, 
8020ee50:	e0bffe17 	ldw	r2,-8(fp)
8020ee54:	10800204 	addi	r2,r2,8
8020ee58:	e0ffff17 	ldw	r3,-4(fp)
8020ee5c:	18c00217 	ldw	r3,8(r3)
8020ee60:	10c00035 	stwio	r3,0(r2)
        descriptor->transfer_length);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_CONTROL_STANDARD(descriptor_base, 
8020ee64:	e0bffe17 	ldw	r2,-8(fp)
8020ee68:	10800304 	addi	r2,r2,12
8020ee6c:	e0ffff17 	ldw	r3,-4(fp)
8020ee70:	18c00317 	ldw	r3,12(r3)
8020ee74:	10c00035 	stwio	r3,0(r2)
        descriptor->control);
        return 0;
8020ee78:	0005883a 	mov	r2,zero
}
8020ee7c:	e037883a 	mov	sp,fp
8020ee80:	df000017 	ldw	fp,0(sp)
8020ee84:	dec00104 	addi	sp,sp,4
8020ee88:	f800283a 	ret

8020ee8c <alt_msgdma_write_extended_descriptor>:
 */
static int alt_msgdma_write_extended_descriptor (
    alt_u32 *csr_base, 
    alt_u32 *descriptor_base,
    alt_msgdma_extended_descriptor *descriptor)
{
8020ee8c:	defffc04 	addi	sp,sp,-16
8020ee90:	df000315 	stw	fp,12(sp)
8020ee94:	df000304 	addi	fp,sp,12
8020ee98:	e13ffd15 	stw	r4,-12(fp)
8020ee9c:	e17ffe15 	stw	r5,-8(fp)
8020eea0:	e1bfff15 	stw	r6,-4(fp)
    if (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(csr_base) & 
8020eea4:	e0bffd17 	ldw	r2,-12(fp)
8020eea8:	10800037 	ldwio	r2,0(r2)
8020eeac:	1080010c 	andi	r2,r2,4
8020eeb0:	10000226 	beq	r2,zero,8020eebc <alt_msgdma_write_extended_descriptor+0x30>
        ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK))
    {
      /*at least one descriptor buffer is full, returning so that this function 
    is non-blocking*/
        return -ENOSPC;
8020eeb4:	00bff904 	movi	r2,-28
8020eeb8:	00003b06 	br	8020efa8 <alt_msgdma_write_extended_descriptor+0x11c>
    }

    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS(
8020eebc:	e0bfff17 	ldw	r2,-4(fp)
8020eec0:	10800017 	ldw	r2,0(r2)
8020eec4:	1007883a 	mov	r3,r2
8020eec8:	e0bffe17 	ldw	r2,-8(fp)
8020eecc:	10c00035 	stwio	r3,0(r2)
        descriptor_base, 
        (alt_u32)descriptor->read_address_low);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS(
8020eed0:	e0bffe17 	ldw	r2,-8(fp)
8020eed4:	10800104 	addi	r2,r2,4
8020eed8:	e0ffff17 	ldw	r3,-4(fp)
8020eedc:	18c00117 	ldw	r3,4(r3)
8020eee0:	10c00035 	stwio	r3,0(r2)
        descriptor_base, 
        (alt_u32)descriptor->write_address_low);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_LENGTH(
8020eee4:	e0bffe17 	ldw	r2,-8(fp)
8020eee8:	10800204 	addi	r2,r2,8
8020eeec:	e0ffff17 	ldw	r3,-4(fp)
8020eef0:	18c00217 	ldw	r3,8(r3)
8020eef4:	10c00035 	stwio	r3,0(r2)
        descriptor_base, 
        descriptor->transfer_length);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_SEQUENCE_NUMBER(
8020eef8:	e0bffe17 	ldw	r2,-8(fp)
8020eefc:	10800304 	addi	r2,r2,12
8020ef00:	e0ffff17 	ldw	r3,-4(fp)
8020ef04:	18c0030b 	ldhu	r3,12(r3)
8020ef08:	18ffffcc 	andi	r3,r3,65535
8020ef0c:	10c0002d 	sthio	r3,0(r2)
        descriptor_base, 
        descriptor->sequence_number);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_BURST(
8020ef10:	e0bffe17 	ldw	r2,-8(fp)
8020ef14:	10800384 	addi	r2,r2,14
8020ef18:	e0ffff17 	ldw	r3,-4(fp)
8020ef1c:	18c00383 	ldbu	r3,14(r3)
8020ef20:	18c03fcc 	andi	r3,r3,255
8020ef24:	10c00025 	stbio	r3,0(r2)
        descriptor_base, 
        descriptor->read_burst_count);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_BURST(
8020ef28:	e0bffe17 	ldw	r2,-8(fp)
8020ef2c:	108003c4 	addi	r2,r2,15
8020ef30:	e0ffff17 	ldw	r3,-4(fp)
8020ef34:	18c003c3 	ldbu	r3,15(r3)
8020ef38:	18c03fcc 	andi	r3,r3,255
8020ef3c:	10c00025 	stbio	r3,0(r2)
        descriptor_base, 
        descriptor->write_burst_count);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_STRIDE(
8020ef40:	e0bffe17 	ldw	r2,-8(fp)
8020ef44:	10800404 	addi	r2,r2,16
8020ef48:	e0ffff17 	ldw	r3,-4(fp)
8020ef4c:	18c0040b 	ldhu	r3,16(r3)
8020ef50:	18ffffcc 	andi	r3,r3,65535
8020ef54:	10c0002d 	sthio	r3,0(r2)
        descriptor_base, 
        descriptor->read_stride);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_STRIDE(
8020ef58:	e0bffe17 	ldw	r2,-8(fp)
8020ef5c:	10800484 	addi	r2,r2,18
8020ef60:	e0ffff17 	ldw	r3,-4(fp)
8020ef64:	18c0048b 	ldhu	r3,18(r3)
8020ef68:	18ffffcc 	andi	r3,r3,65535
8020ef6c:	10c0002d 	sthio	r3,0(r2)
        descriptor_base, 
        descriptor->write_stride);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS_HIGH(descriptor_base, 0);
8020ef70:	e0bffe17 	ldw	r2,-8(fp)
8020ef74:	10800504 	addi	r2,r2,20
8020ef78:	0007883a 	mov	r3,zero
8020ef7c:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS_HIGH(descriptor_base, 0);
8020ef80:	e0bffe17 	ldw	r2,-8(fp)
8020ef84:	10800604 	addi	r2,r2,24
8020ef88:	0007883a 	mov	r3,zero
8020ef8c:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_CONTROL_ENHANCED(
8020ef90:	e0bffe17 	ldw	r2,-8(fp)
8020ef94:	10800704 	addi	r2,r2,28
8020ef98:	e0ffff17 	ldw	r3,-4(fp)
8020ef9c:	18c00717 	ldw	r3,28(r3)
8020efa0:	10c00035 	stwio	r3,0(r2)
        descriptor_base, 
        descriptor->control);
    return 0;
8020efa4:	0005883a 	mov	r2,zero
}
8020efa8:	e037883a 	mov	sp,fp
8020efac:	df000017 	ldw	fp,0(sp)
8020efb0:	dec00104 	addi	sp,sp,4
8020efb4:	f800283a 	ret

8020efb8 <alt_msgdma_irq>:
 * alt_msgdma_irq()
 *
 * Interrupt handler for the Modular Scatter-Gather DMA controller.
 */
static void alt_msgdma_irq(void *context)
{
8020efb8:	defff804 	addi	sp,sp,-32
8020efbc:	dfc00715 	stw	ra,28(sp)
8020efc0:	df000615 	stw	fp,24(sp)
8020efc4:	df000604 	addi	fp,sp,24
8020efc8:	e13fff15 	stw	r4,-4(fp)
    alt_msgdma_dev *dev = (alt_msgdma_dev *) context;
8020efcc:	e0bfff17 	ldw	r2,-4(fp)
8020efd0:	e0bffa15 	stw	r2,-24(fp)
    alt_irq_context cpu_sr;
    alt_u32 temporary_control;

    
    /* disable global interrupt*/
    if (dev->prefetcher_enable)
8020efd4:	e0bffa17 	ldw	r2,-24(fp)
8020efd8:	10801783 	ldbu	r2,94(r2)
8020efdc:	10803fcc 	andi	r2,r2,255
8020efe0:	10001126 	beq	r2,zero,8020f028 <alt_msgdma_irq+0x70>
    {
        temporary_control = 
                IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
8020efe4:	e0bffa17 	ldw	r2,-24(fp)
8020efe8:	10800617 	ldw	r2,24(r2)
8020efec:	10800037 	ldwio	r2,0(r2)

    
    /* disable global interrupt*/
    if (dev->prefetcher_enable)
    {
        temporary_control = 
8020eff0:	1007883a 	mov	r3,r2
8020eff4:	00bffdc4 	movi	r2,-9
8020eff8:	1884703a 	and	r2,r3,r2
8020effc:	e0bffb15 	stw	r2,-20(fp)
                IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
                & ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_CLR_MASK;
        
        IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
8020f000:	e0bffa17 	ldw	r2,-24(fp)
8020f004:	10800617 	ldw	r2,24(r2)
8020f008:	e0fffb17 	ldw	r3,-20(fp)
8020f00c:	10c00035 	stwio	r3,0(r2)
                temporary_control);
        
        /* clear the IRQ status- W1C */
        IOWR_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base,
8020f010:	e0bffa17 	ldw	r2,-24(fp)
8020f014:	10800617 	ldw	r2,24(r2)
8020f018:	10800404 	addi	r2,r2,16
8020f01c:	00c00044 	movi	r3,1
8020f020:	10c00035 	stwio	r3,0(r2)
8020f024:	00001106 	br	8020f06c <alt_msgdma_irq+0xb4>
                ALT_MSGDMA_PREFETCHER_STATUS_IRQ_SET_MASK);
    }
    else
    {
        temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base)
8020f028:	e0bffa17 	ldw	r2,-24(fp)
8020f02c:	10800317 	ldw	r2,12(r2)
8020f030:	10800104 	addi	r2,r2,4
8020f034:	10800037 	ldwio	r2,0(r2)
8020f038:	1007883a 	mov	r3,r2
8020f03c:	00bffbc4 	movi	r2,-17
8020f040:	1884703a 	and	r2,r3,r2
8020f044:	e0bffb15 	stw	r2,-20(fp)
                & (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
        
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
8020f048:	e0bffa17 	ldw	r2,-24(fp)
8020f04c:	10800317 	ldw	r2,12(r2)
8020f050:	10800104 	addi	r2,r2,4
8020f054:	e0fffb17 	ldw	r3,-20(fp)
8020f058:	10c00035 	stwio	r3,0(r2)
        /* clear the IRQ status */
        IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base,
8020f05c:	e0bffa17 	ldw	r2,-24(fp)
8020f060:	10800317 	ldw	r2,12(r2)
8020f064:	00c08004 	movi	r3,512
8020f068:	10c00035 	stwio	r3,0(r2)
    * Other interrupts are explicitly disabled if callbacks
    * are registered because there is no guarantee that they are 
    * pre-emption-safe. This allows the driver to support 
    * interrupt pre-emption.
    */
    if(dev->callback) 
8020f06c:	e0bffa17 	ldw	r2,-24(fp)
8020f070:	10800b17 	ldw	r2,44(r2)
8020f074:	10001226 	beq	r2,zero,8020f0c0 <alt_msgdma_irq+0x108>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8020f078:	0005303a 	rdctl	r2,status
8020f07c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8020f080:	e0fffd17 	ldw	r3,-12(fp)
8020f084:	00bfff84 	movi	r2,-2
8020f088:	1884703a 	and	r2,r3,r2
8020f08c:	1001703a 	wrctl	status,r2
  
  return context;
8020f090:	e0bffd17 	ldw	r2,-12(fp)
    {
        cpu_sr = alt_irq_disable_all();
8020f094:	e0bffc15 	stw	r2,-16(fp)
        dev->callback (dev->callback_context);
8020f098:	e0bffa17 	ldw	r2,-24(fp)
8020f09c:	10800b17 	ldw	r2,44(r2)
8020f0a0:	e0fffa17 	ldw	r3,-24(fp)
8020f0a4:	18c00c17 	ldw	r3,48(r3)
8020f0a8:	1809883a 	mov	r4,r3
8020f0ac:	103ee83a 	callr	r2
8020f0b0:	e0bffc17 	ldw	r2,-16(fp)
8020f0b4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8020f0b8:	e0bffe17 	ldw	r2,-8(fp)
8020f0bc:	1001703a 	wrctl	status,r2
        alt_irq_enable_all(cpu_sr);
    }

    /* enable global interrupt */
    if (dev->prefetcher_enable)
8020f0c0:	e0bffa17 	ldw	r2,-24(fp)
8020f0c4:	10801783 	ldbu	r2,94(r2)
8020f0c8:	10803fcc 	andi	r2,r2,255
8020f0cc:	10000a26 	beq	r2,zero,8020f0f8 <alt_msgdma_irq+0x140>
    {
        temporary_control = 
                IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
8020f0d0:	e0bffa17 	ldw	r2,-24(fp)
8020f0d4:	10800617 	ldw	r2,24(r2)
8020f0d8:	10800037 	ldwio	r2,0(r2)
                | ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
8020f0dc:	10800214 	ori	r2,r2,8
    }

    /* enable global interrupt */
    if (dev->prefetcher_enable)
    {
        temporary_control = 
8020f0e0:	e0bffb15 	stw	r2,-20(fp)
                IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
                | ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
        
        IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
8020f0e4:	e0bffa17 	ldw	r2,-24(fp)
8020f0e8:	10800617 	ldw	r2,24(r2)
8020f0ec:	e0fffb17 	ldw	r3,-20(fp)
8020f0f0:	10c00035 	stwio	r3,0(r2)
                | (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
        
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
    }

    return;
8020f0f4:	00000c06 	br	8020f128 <alt_msgdma_irq+0x170>
        IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
                temporary_control);
    }
    else
    {
        temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) 
8020f0f8:	e0bffa17 	ldw	r2,-24(fp)
8020f0fc:	10800317 	ldw	r2,12(r2)
8020f100:	10800104 	addi	r2,r2,4
8020f104:	10800037 	ldwio	r2,0(r2)
                | (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
8020f108:	10800414 	ori	r2,r2,16
        IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
                temporary_control);
    }
    else
    {
        temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) 
8020f10c:	e0bffb15 	stw	r2,-20(fp)
                | (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
        
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
8020f110:	e0bffa17 	ldw	r2,-24(fp)
8020f114:	10800317 	ldw	r2,12(r2)
8020f118:	10800104 	addi	r2,r2,4
8020f11c:	e0fffb17 	ldw	r3,-20(fp)
8020f120:	10c00035 	stwio	r3,0(r2)
    }

    return;
8020f124:	0001883a 	nop
}
8020f128:	e037883a 	mov	sp,fp
8020f12c:	dfc00117 	ldw	ra,4(sp)
8020f130:	df000017 	ldw	fp,0(sp)
8020f134:	dec00204 	addi	sp,sp,8
8020f138:	f800283a 	ret

8020f13c <alt_msgdma_construct_standard_descriptor>:
    alt_msgdma_standard_descriptor *descriptor,
    alt_u32 *read_address, 
    alt_u32 *write_address, 
    alt_u32 length, 
    alt_u32 control)
{
8020f13c:	defffb04 	addi	sp,sp,-20
8020f140:	df000415 	stw	fp,16(sp)
8020f144:	df000404 	addi	fp,sp,16
8020f148:	e13ffc15 	stw	r4,-16(fp)
8020f14c:	e17ffd15 	stw	r5,-12(fp)
8020f150:	e1bffe15 	stw	r6,-8(fp)
8020f154:	e1ffff15 	stw	r7,-4(fp)
    if(dev->max_byte < length ||
8020f158:	e0bffc17 	ldw	r2,-16(fp)
8020f15c:	10c01217 	ldw	r3,72(r2)
8020f160:	e0800117 	ldw	r2,4(fp)
8020f164:	18800436 	bltu	r3,r2,8020f178 <alt_msgdma_construct_standard_descriptor+0x3c>
       dev->enhanced_features != 0
8020f168:	e0bffc17 	ldw	r2,-16(fp)
8020f16c:	10801703 	ldbu	r2,92(r2)
    alt_u32 *read_address, 
    alt_u32 *write_address, 
    alt_u32 length, 
    alt_u32 control)
{
    if(dev->max_byte < length ||
8020f170:	10803fcc 	andi	r2,r2,255
8020f174:	10000226 	beq	r2,zero,8020f180 <alt_msgdma_construct_standard_descriptor+0x44>
       dev->enhanced_features != 0
      )
    {
        return -EINVAL;
8020f178:	00bffa84 	movi	r2,-22
8020f17c:	00000e06 	br	8020f1b8 <alt_msgdma_construct_standard_descriptor+0x7c>
    }
    descriptor->read_address = read_address;
8020f180:	e0bffd17 	ldw	r2,-12(fp)
8020f184:	e0fffe17 	ldw	r3,-8(fp)
8020f188:	10c00015 	stw	r3,0(r2)
    descriptor->write_address = write_address;
8020f18c:	e0bffd17 	ldw	r2,-12(fp)
8020f190:	e0ffff17 	ldw	r3,-4(fp)
8020f194:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
8020f198:	e0bffd17 	ldw	r2,-12(fp)
8020f19c:	e0c00117 	ldw	r3,4(fp)
8020f1a0:	10c00215 	stw	r3,8(r2)
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
8020f1a4:	e0800217 	ldw	r2,8(fp)
8020f1a8:	10e00034 	orhi	r3,r2,32768
8020f1ac:	e0bffd17 	ldw	r2,-12(fp)
8020f1b0:	10c00315 	stw	r3,12(r2)
    
    return 0;
8020f1b4:	0005883a 	mov	r2,zero
}
8020f1b8:	e037883a 	mov	sp,fp
8020f1bc:	df000017 	ldw	fp,0(sp)
8020f1c0:	dec00104 	addi	sp,sp,4
8020f1c4:	f800283a 	ret

8020f1c8 <alt_msgdma_construct_extended_descriptor>:
    alt_u16 sequence_number, 
    alt_u8 read_burst_count, 
    alt_u8 write_burst_count,
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
8020f1c8:	defff604 	addi	sp,sp,-40
8020f1cc:	df000915 	stw	fp,36(sp)
8020f1d0:	df000904 	addi	fp,sp,36
8020f1d4:	e13ff715 	stw	r4,-36(fp)
8020f1d8:	e17ff815 	stw	r5,-32(fp)
8020f1dc:	e1bff915 	stw	r6,-28(fp)
8020f1e0:	e1fffa15 	stw	r7,-24(fp)
8020f1e4:	e1800317 	ldw	r6,12(fp)
8020f1e8:	e1400417 	ldw	r5,16(fp)
8020f1ec:	e1000517 	ldw	r4,20(fp)
8020f1f0:	e0c00617 	ldw	r3,24(fp)
8020f1f4:	e0800717 	ldw	r2,28(fp)
8020f1f8:	e1bffb0d 	sth	r6,-20(fp)
8020f1fc:	e17ffc05 	stb	r5,-16(fp)
8020f200:	e13ffd05 	stb	r4,-12(fp)
8020f204:	e0fffe0d 	sth	r3,-8(fp)
8020f208:	e0bfff0d 	sth	r2,-4(fp)
    if(dev->max_byte < length ||
8020f20c:	e0bff717 	ldw	r2,-36(fp)
8020f210:	10c01217 	ldw	r3,72(r2)
8020f214:	e0800117 	ldw	r2,4(fp)
8020f218:	18801936 	bltu	r3,r2,8020f280 <alt_msgdma_construct_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
8020f21c:	e13ff717 	ldw	r4,-36(fp)
8020f220:	20801317 	ldw	r2,76(r4)
8020f224:	20c01417 	ldw	r3,80(r4)
8020f228:	e13ffe0b 	ldhu	r4,-8(fp)
8020f22c:	213fffcc 	andi	r4,r4,65535
8020f230:	2015883a 	mov	r10,r4
8020f234:	0017883a 	mov	r11,zero
    alt_u8 read_burst_count, 
    alt_u8 write_burst_count,
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
    if(dev->max_byte < length ||
8020f238:	1ac01136 	bltu	r3,r11,8020f280 <alt_msgdma_construct_extended_descriptor+0xb8>
8020f23c:	58c0011e 	bne	r11,r3,8020f244 <alt_msgdma_construct_extended_descriptor+0x7c>
8020f240:	12800f36 	bltu	r2,r10,8020f280 <alt_msgdma_construct_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
8020f244:	e13ff717 	ldw	r4,-36(fp)
8020f248:	20801317 	ldw	r2,76(r4)
8020f24c:	20c01417 	ldw	r3,80(r4)
8020f250:	e13fff0b 	ldhu	r4,-4(fp)
8020f254:	213fffcc 	andi	r4,r4,65535
8020f258:	2011883a 	mov	r8,r4
8020f25c:	0013883a 	mov	r9,zero
    alt_u8 write_burst_count,
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
    if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
8020f260:	1a400736 	bltu	r3,r9,8020f280 <alt_msgdma_construct_extended_descriptor+0xb8>
8020f264:	48c0011e 	bne	r9,r3,8020f26c <alt_msgdma_construct_extended_descriptor+0xa4>
8020f268:	12000536 	bltu	r2,r8,8020f280 <alt_msgdma_construct_extended_descriptor+0xb8>
       dev->max_stride < write_stride ||
       dev->enhanced_features != 1 
8020f26c:	e0bff717 	ldw	r2,-36(fp)
8020f270:	10801703 	ldbu	r2,92(r2)
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
    if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
8020f274:	10803fcc 	andi	r2,r2,255
8020f278:	10800060 	cmpeqi	r2,r2,1
8020f27c:	1000021e 	bne	r2,zero,8020f288 <alt_msgdma_construct_extended_descriptor+0xc0>
       dev->enhanced_features != 1 
      )
    {
        return -EINVAL;
8020f280:	00bffa84 	movi	r2,-22
8020f284:	00002106 	br	8020f30c <alt_msgdma_construct_extended_descriptor+0x144>
    }
    
    descriptor->read_address_low = read_address;
8020f288:	e0bff817 	ldw	r2,-32(fp)
8020f28c:	e0fff917 	ldw	r3,-28(fp)
8020f290:	10c00015 	stw	r3,0(r2)
    descriptor->write_address_low = write_address;
8020f294:	e0bff817 	ldw	r2,-32(fp)
8020f298:	e0fffa17 	ldw	r3,-24(fp)
8020f29c:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
8020f2a0:	e0bff817 	ldw	r2,-32(fp)
8020f2a4:	e0c00117 	ldw	r3,4(fp)
8020f2a8:	10c00215 	stw	r3,8(r2)
    descriptor->sequence_number = sequence_number;
8020f2ac:	e0bff817 	ldw	r2,-32(fp)
8020f2b0:	e0fffb0b 	ldhu	r3,-20(fp)
8020f2b4:	10c0030d 	sth	r3,12(r2)
    descriptor->read_burst_count = read_burst_count;
8020f2b8:	e0bff817 	ldw	r2,-32(fp)
8020f2bc:	e0fffc03 	ldbu	r3,-16(fp)
8020f2c0:	10c00385 	stb	r3,14(r2)
    descriptor->write_burst_count = write_burst_count;
8020f2c4:	e0bff817 	ldw	r2,-32(fp)
8020f2c8:	e0fffd03 	ldbu	r3,-12(fp)
8020f2cc:	10c003c5 	stb	r3,15(r2)
    descriptor->read_stride = read_stride;
8020f2d0:	e0bff817 	ldw	r2,-32(fp)
8020f2d4:	e0fffe0b 	ldhu	r3,-8(fp)
8020f2d8:	10c0040d 	sth	r3,16(r2)
    descriptor->write_stride = write_stride;
8020f2dc:	e0bff817 	ldw	r2,-32(fp)
8020f2e0:	e0ffff0b 	ldhu	r3,-4(fp)
8020f2e4:	10c0048d 	sth	r3,18(r2)
    descriptor->read_address_high = NULL;
8020f2e8:	e0bff817 	ldw	r2,-32(fp)
8020f2ec:	10000515 	stw	zero,20(r2)
    descriptor->write_address_high = NULL;
8020f2f0:	e0bff817 	ldw	r2,-32(fp)
8020f2f4:	10000615 	stw	zero,24(r2)
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
8020f2f8:	e0800217 	ldw	r2,8(fp)
8020f2fc:	10e00034 	orhi	r3,r2,32768
8020f300:	e0bff817 	ldw	r2,-32(fp)
8020f304:	10c00715 	stw	r3,28(r2)

  return 0 ;
8020f308:	0005883a 	mov	r2,zero

}
8020f30c:	e037883a 	mov	sp,fp
8020f310:	df000017 	ldw	fp,0(sp)
8020f314:	dec00104 	addi	sp,sp,4
8020f318:	f800283a 	ret

8020f31c <alt_msgdma_descriptor_async_transfer>:
 */
static int alt_msgdma_descriptor_async_transfer (
    alt_msgdma_dev *dev, 
    alt_msgdma_standard_descriptor *standard_desc, 
    alt_msgdma_extended_descriptor *extended_desc)
{
8020f31c:	defff004 	addi	sp,sp,-64
8020f320:	dfc00f15 	stw	ra,60(sp)
8020f324:	df000e15 	stw	fp,56(sp)
8020f328:	df000e04 	addi	fp,sp,56
8020f32c:	e13ffd15 	stw	r4,-12(fp)
8020f330:	e17ffe15 	stw	r5,-8(fp)
8020f334:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 control = 0;
8020f338:	e03ff315 	stw	zero,-52(fp)
    alt_irq_context context = 0;
8020f33c:	e03ff415 	stw	zero,-48(fp)
    alt_u16 counter = 0;
8020f340:	e03ff20d 	sth	zero,-56(fp)
    alt_u32 fifo_read_fill_level = (
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
8020f344:	e0bffd17 	ldw	r2,-12(fp)
8020f348:	10800317 	ldw	r2,12(r2)
8020f34c:	10800204 	addi	r2,r2,8
8020f350:	10800037 	ldwio	r2,0(r2)
    alt_msgdma_extended_descriptor *extended_desc)
{
    alt_u32 control = 0;
    alt_irq_context context = 0;
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
8020f354:	10bfffcc 	andi	r2,r2,65535
8020f358:	e0bff515 	stw	r2,-44(fp)
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
        ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
        ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
8020f35c:	e0bffd17 	ldw	r2,-12(fp)
8020f360:	10800317 	ldw	r2,12(r2)
8020f364:	10800204 	addi	r2,r2,8
8020f368:	10800037 	ldwio	r2,0(r2)
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
        ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
        ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
8020f36c:	1004d43a 	srli	r2,r2,16
8020f370:	e0bff615 	stw	r2,-40(fp)
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
        ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
        ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;

    /* Return with error immediately if one of read/write buffer is full */
    if((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
8020f374:	e0bffd17 	ldw	r2,-12(fp)
8020f378:	10800917 	ldw	r2,36(r2)
8020f37c:	e0fff617 	ldw	r3,-40(fp)
8020f380:	1880042e 	bgeu	r3,r2,8020f394 <alt_msgdma_descriptor_async_transfer+0x78>
        (dev->descriptor_fifo_depth <= fifo_read_fill_level))
8020f384:	e0bffd17 	ldw	r2,-12(fp)
8020f388:	10800917 	ldw	r2,36(r2)
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
        ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
        ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;

    /* Return with error immediately if one of read/write buffer is full */
    if((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
8020f38c:	e0fff517 	ldw	r3,-44(fp)
8020f390:	18800236 	bltu	r3,r2,8020f39c <alt_msgdma_descriptor_async_transfer+0x80>
        (dev->descriptor_fifo_depth <= fifo_read_fill_level))
    {
        /*at least one write or read FIFO descriptor buffer is full,
        returning so that this function is non-blocking*/
        return -ENOSPC;
8020f394:	00bff904 	movi	r2,-28
8020f398:	00008f06 	br	8020f5d8 <alt_msgdma_descriptor_async_transfer+0x2bc>
    ALT_SEM_PEND (dev->regs_lock, 0);
    
    /* Stop the msgdma dispatcher from issuing more descriptors to the
    read or write masters  */
    /* stop issuing more descriptors */
    control = ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
8020f39c:	00800804 	movi	r2,32
8020f3a0:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8020f3a4:	0005303a 	rdctl	r2,status
8020f3a8:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8020f3ac:	e0fff717 	ldw	r3,-36(fp)
8020f3b0:	00bfff84 	movi	r2,-2
8020f3b4:	1884703a 	and	r2,r3,r2
8020f3b8:	1001703a 	wrctl	status,r2
  
  return context;
8020f3bc:	e0bff717 	ldw	r2,-36(fp)
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();
8020f3c0:	e0bff415 	stw	r2,-48(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
8020f3c4:	e0bffd17 	ldw	r2,-12(fp)
8020f3c8:	10800317 	ldw	r2,12(r2)
8020f3cc:	10800104 	addi	r2,r2,4
8020f3d0:	e0fff317 	ldw	r3,-52(fp)
8020f3d4:	10c00035 	stwio	r3,0(r2)
    /*
    * Clear any (previous) status register information
    * that might occlude our error checking later.
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
8020f3d8:	e0bffd17 	ldw	r2,-12(fp)
8020f3dc:	10800317 	ldw	r2,12(r2)
8020f3e0:	e0fffd17 	ldw	r3,-12(fp)
8020f3e4:	18c00317 	ldw	r3,12(r3)
8020f3e8:	18c00037 	ldwio	r3,0(r3)
8020f3ec:	10c00035 	stwio	r3,0(r2)
8020f3f0:	e0bff417 	ldw	r2,-48(fp)
8020f3f4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8020f3f8:	e0bffc17 	ldw	r2,-16(fp)
8020f3fc:	1001703a 	wrctl	status,r2
        dev->csr_base, 
        IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
    alt_irq_enable_all(context);

    if (NULL != standard_desc && NULL == extended_desc)
8020f400:	e0bffe17 	ldw	r2,-8(fp)
8020f404:	10001a26 	beq	r2,zero,8020f470 <alt_msgdma_descriptor_async_transfer+0x154>
8020f408:	e0bfff17 	ldw	r2,-4(fp)
8020f40c:	1000181e 	bne	r2,zero,8020f470 <alt_msgdma_descriptor_async_transfer+0x154>
    {
        /*writing descriptor structure to the dispatcher, wait until descriptor 
      write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
8020f410:	00000d06 	br	8020f448 <alt_msgdma_descriptor_async_transfer+0x12c>
        dev->csr_base, dev->descriptor_base, standard_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
8020f414:	01000044 	movi	r4,1
8020f418:	0210e880 	call	80210e88 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
8020f41c:	e0bff20b 	ldhu	r2,-56(fp)
8020f420:	1084e230 	cmpltui	r2,r2,5000
8020f424:	1000051e 	bne	r2,zero,8020f43c <alt_msgdma_descriptor_async_transfer+0x120>
            {
                alt_printf("time out after 5 msec while waiting" 
8020f428:	01200874 	movhi	r4,32801
8020f42c:	21098104 	addi	r4,r4,9732
8020f430:	021183c0 	call	8021183c <alt_printf>
                * registers semaphore so that other threads can access the 
                * registers.
                */
                ALT_SEM_POST (dev->regs_lock);
                
                return -ETIME;
8020f434:	00bff084 	movi	r2,-62
8020f438:	00006706 	br	8020f5d8 <alt_msgdma_descriptor_async_transfer+0x2bc>
            }
            counter++; 
8020f43c:	e0bff20b 	ldhu	r2,-56(fp)
8020f440:	10800044 	addi	r2,r2,1
8020f444:	e0bff20d 	sth	r2,-56(fp)

    if (NULL != standard_desc && NULL == extended_desc)
    {
        /*writing descriptor structure to the dispatcher, wait until descriptor 
      write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
8020f448:	e0bffd17 	ldw	r2,-12(fp)
8020f44c:	10c00317 	ldw	r3,12(r2)
8020f450:	e0bffd17 	ldw	r2,-12(fp)
8020f454:	10800417 	ldw	r2,16(r2)
8020f458:	e1bffe17 	ldw	r6,-8(fp)
8020f45c:	100b883a 	mov	r5,r2
8020f460:	1809883a 	mov	r4,r3
8020f464:	020edf80 	call	8020edf8 <alt_msgdma_write_standard_descriptor>
8020f468:	103fea1e 	bne	r2,zero,8020f414 <__reset+0xfa1ef414>
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
        dev->csr_base, 
        IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
    alt_irq_enable_all(context);

    if (NULL != standard_desc && NULL == extended_desc)
8020f46c:	00001f06 	br	8020f4ec <alt_msgdma_descriptor_async_transfer+0x1d0>
                return -ETIME;
            }
            counter++; 
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
8020f470:	e0bffe17 	ldw	r2,-8(fp)
8020f474:	10001b1e 	bne	r2,zero,8020f4e4 <alt_msgdma_descriptor_async_transfer+0x1c8>
8020f478:	e0bfff17 	ldw	r2,-4(fp)
8020f47c:	10001926 	beq	r2,zero,8020f4e4 <alt_msgdma_descriptor_async_transfer+0x1c8>
    {
        counter = 0; /* reset counter */
8020f480:	e03ff20d 	sth	zero,-56(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
      write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
8020f484:	00000d06 	br	8020f4bc <alt_msgdma_descriptor_async_transfer+0x1a0>
        dev->csr_base, 
        dev->descriptor_base, 
        extended_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
8020f488:	01000044 	movi	r4,1
8020f48c:	0210e880 	call	80210e88 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
8020f490:	e0bff20b 	ldhu	r2,-56(fp)
8020f494:	1084e230 	cmpltui	r2,r2,5000
8020f498:	1000051e 	bne	r2,zero,8020f4b0 <alt_msgdma_descriptor_async_transfer+0x194>
            {
                alt_printf("time out after 5 msec while waiting free FIFO buffer" 
8020f49c:	01200874 	movhi	r4,32801
8020f4a0:	21099704 	addi	r4,r4,9820
8020f4a4:	021183c0 	call	8021183c <alt_printf>
                * registers semaphore so that other threads can access the 
                * registers.
                */
                ALT_SEM_POST (dev->regs_lock);
                
                return -ETIME;
8020f4a8:	00bff084 	movi	r2,-62
8020f4ac:	00004a06 	br	8020f5d8 <alt_msgdma_descriptor_async_transfer+0x2bc>
            }
            counter++; 
8020f4b0:	e0bff20b 	ldhu	r2,-56(fp)
8020f4b4:	10800044 	addi	r2,r2,1
8020f4b8:	e0bff20d 	sth	r2,-56(fp)
    else if (NULL == standard_desc && NULL != extended_desc)
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
      write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
8020f4bc:	e0bffd17 	ldw	r2,-12(fp)
8020f4c0:	10c00317 	ldw	r3,12(r2)
8020f4c4:	e0bffd17 	ldw	r2,-12(fp)
8020f4c8:	10800417 	ldw	r2,16(r2)
8020f4cc:	e1bfff17 	ldw	r6,-4(fp)
8020f4d0:	100b883a 	mov	r5,r2
8020f4d4:	1809883a 	mov	r4,r3
8020f4d8:	020ee8c0 	call	8020ee8c <alt_msgdma_write_extended_descriptor>
8020f4dc:	103fea1e 	bne	r2,zero,8020f488 <__reset+0xfa1ef488>
                return -ETIME;
            }
            counter++; 
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
8020f4e0:	00000206 	br	8020f4ec <alt_msgdma_descriptor_async_transfer+0x1d0>
        * semaphore so that other threads can access the registers.
        */
        ALT_SEM_POST (dev->regs_lock);
        
        /* operation not permitted due to descriptor type conflict */
        return -EPERM; 
8020f4e4:	00bfffc4 	movi	r2,-1
8020f4e8:	00003b06 	br	8020f5d8 <alt_msgdma_descriptor_async_transfer+0x2bc>
    * If a callback routine has been previously registered which will be
    * called from the msgdma ISR. Set up controller to:
    *  - Run
    *  - Stop on an error with any particular descriptor
    */
    if(dev->callback)
8020f4ec:	e0bffd17 	ldw	r2,-12(fp)
8020f4f0:	10800b17 	ldw	r2,44(r2)
8020f4f4:	10001c26 	beq	r2,zero,8020f568 <alt_msgdma_descriptor_async_transfer+0x24c>
    {

        control |= (dev->control |
8020f4f8:	e0bffd17 	ldw	r2,-12(fp)
8020f4fc:	10c00d17 	ldw	r3,52(r2)
8020f500:	e0bff317 	ldw	r2,-52(fp)
8020f504:	1884b03a 	or	r2,r3,r2
8020f508:	10800514 	ori	r2,r2,20
8020f50c:	e0bff315 	stw	r2,-52(fp)
                    ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK |
                    ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK );
        control &=  (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
8020f510:	e0fff317 	ldw	r3,-52(fp)
8020f514:	00bff7c4 	movi	r2,-33
8020f518:	1884703a 	and	r2,r3,r2
8020f51c:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8020f520:	0005303a 	rdctl	r2,status
8020f524:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8020f528:	e0fffa17 	ldw	r3,-24(fp)
8020f52c:	00bfff84 	movi	r2,-2
8020f530:	1884703a 	and	r2,r3,r2
8020f534:	1001703a 	wrctl	status,r2
  
  return context;
8020f538:	e0bffa17 	ldw	r2,-24(fp)
    /* making sure the read-modify-write below can't be pre-empted */
        context = alt_irq_disable_all(); 
8020f53c:	e0bff415 	stw	r2,-48(fp)
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
8020f540:	e0bffd17 	ldw	r2,-12(fp)
8020f544:	10800317 	ldw	r2,12(r2)
8020f548:	10800104 	addi	r2,r2,4
8020f54c:	e0fff317 	ldw	r3,-52(fp)
8020f550:	10c00035 	stwio	r3,0(r2)
8020f554:	e0bff417 	ldw	r2,-48(fp)
8020f558:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8020f55c:	e0bff817 	ldw	r2,-32(fp)
8020f560:	1001703a 	wrctl	status,r2
8020f564:	00001b06 	br	8020f5d4 <alt_msgdma_descriptor_async_transfer+0x2b8>
    *   - Stop on an error with any particular descriptor
    *   - Disable interrupt generation
    */
    else
    {
        control |= (dev->control |
8020f568:	e0bffd17 	ldw	r2,-12(fp)
8020f56c:	10c00d17 	ldw	r3,52(r2)
8020f570:	e0bff317 	ldw	r2,-52(fp)
8020f574:	1884b03a 	or	r2,r3,r2
8020f578:	10800114 	ori	r2,r2,4
8020f57c:	e0bff315 	stw	r2,-52(fp)
                    ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK );
        control &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) &
8020f580:	e0fff317 	ldw	r3,-52(fp)
8020f584:	00bff3c4 	movi	r2,-49
8020f588:	1884703a 	and	r2,r3,r2
8020f58c:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8020f590:	0005303a 	rdctl	r2,status
8020f594:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8020f598:	e0fffb17 	ldw	r3,-20(fp)
8020f59c:	00bfff84 	movi	r2,-2
8020f5a0:	1884703a 	and	r2,r3,r2
8020f5a4:	1001703a 	wrctl	status,r2
  
  return context;
8020f5a8:	e0bffb17 	ldw	r2,-20(fp)
                   (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
        /* making sure the read-modify-write below can't be pre-empted */
        context = alt_irq_disable_all();
8020f5ac:	e0bff415 	stw	r2,-48(fp)
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
8020f5b0:	e0bffd17 	ldw	r2,-12(fp)
8020f5b4:	10800317 	ldw	r2,12(r2)
8020f5b8:	10800104 	addi	r2,r2,4
8020f5bc:	e0fff317 	ldw	r3,-52(fp)
8020f5c0:	10c00035 	stwio	r3,0(r2)
8020f5c4:	e0bff417 	ldw	r2,-48(fp)
8020f5c8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8020f5cc:	e0bff917 	ldw	r2,-28(fp)
8020f5d0:	1001703a 	wrctl	status,r2
     * Now that access to the registers is complete, release the registers
     * semaphore so that other threads can access the registers.
     */
    ALT_SEM_POST (dev->regs_lock);
    
    return 0;
8020f5d4:	0005883a 	mov	r2,zero
}
8020f5d8:	e037883a 	mov	sp,fp
8020f5dc:	dfc00117 	ldw	ra,4(sp)
8020f5e0:	df000017 	ldw	fp,0(sp)
8020f5e4:	dec00204 	addi	sp,sp,8
8020f5e8:	f800283a 	ret

8020f5ec <alt_msgdma_descriptor_sync_transfer>:
 */
static int alt_msgdma_descriptor_sync_transfer (
    alt_msgdma_dev *dev, 
    alt_msgdma_standard_descriptor *standard_desc, 
    alt_msgdma_extended_descriptor *extended_desc)
{
8020f5ec:	defff004 	addi	sp,sp,-64
8020f5f0:	dfc00f15 	stw	ra,60(sp)
8020f5f4:	df000e15 	stw	fp,56(sp)
8020f5f8:	df000e04 	addi	fp,sp,56
8020f5fc:	e13ffd15 	stw	r4,-12(fp)
8020f600:	e17ffe15 	stw	r5,-8(fp)
8020f604:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 control=0;
8020f608:	e03ff615 	stw	zero,-40(fp)
    alt_irq_context context=0;
8020f60c:	e03ff715 	stw	zero,-36(fp)
    alt_u32 csr_status = 0;
8020f610:	e03ff215 	stw	zero,-56(fp)
    alt_u16 counter = 0;
8020f614:	e03ff30d 	sth	zero,-52(fp)
    alt_u32 fifo_read_fill_level = (
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
8020f618:	e0bffd17 	ldw	r2,-12(fp)
8020f61c:	10800317 	ldw	r2,12(r2)
8020f620:	10800204 	addi	r2,r2,8
8020f624:	10800037 	ldwio	r2,0(r2)
{
    alt_u32 control=0;
    alt_irq_context context=0;
    alt_u32 csr_status = 0;
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
8020f628:	10bfffcc 	andi	r2,r2,65535
8020f62c:	e0bff415 	stw	r2,-48(fp)
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
        ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
        ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
8020f630:	e0bffd17 	ldw	r2,-12(fp)
8020f634:	10800317 	ldw	r2,12(r2)
8020f638:	10800204 	addi	r2,r2,8
8020f63c:	10800037 	ldwio	r2,0(r2)
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
        ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
        ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
8020f640:	1004d43a 	srli	r2,r2,16
8020f644:	e0bff515 	stw	r2,-44(fp)
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
        ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
        ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;
    alt_u32 error = ALTERA_MSGDMA_CSR_STOPPED_ON_ERROR_MASK | 
8020f648:	00807804 	movi	r2,480
8020f64c:	e0bff815 	stw	r2,-32(fp)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
8020f650:	00001906 	br	8020f6b8 <alt_msgdma_descriptor_sync_transfer+0xcc>
        (dev->descriptor_fifo_depth <= fifo_read_fill_level))
    { 
        alt_busy_sleep(1); /* delay 1us */
8020f654:	01000044 	movi	r4,1
8020f658:	0210e880 	call	80210e88 <alt_busy_sleep>
        if(5000 <= counter) /* time_out if waiting longer than 5 msec */
8020f65c:	e0bff30b 	ldhu	r2,-52(fp)
8020f660:	1084e230 	cmpltui	r2,r2,5000
8020f664:	1000051e 	bne	r2,zero,8020f67c <alt_msgdma_descriptor_sync_transfer+0x90>
        {
            alt_printf("time out after 5 msec while waiting free FIFO buffer"
8020f668:	01200874 	movhi	r4,32801
8020f66c:	2109ad04 	addi	r4,r4,9908
8020f670:	021183c0 	call	8021183c <alt_printf>
                " for storing descriptor\n");
            return -ETIME;
8020f674:	00bff084 	movi	r2,-62
8020f678:	0000b506 	br	8020f950 <alt_msgdma_descriptor_sync_transfer+0x364>
        }
        counter++;  
8020f67c:	e0bff30b 	ldhu	r2,-52(fp)
8020f680:	10800044 	addi	r2,r2,1
8020f684:	e0bff30d 	sth	r2,-52(fp)
        fifo_read_fill_level = (
            IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
8020f688:	e0bffd17 	ldw	r2,-12(fp)
8020f68c:	10800317 	ldw	r2,12(r2)
8020f690:	10800204 	addi	r2,r2,8
8020f694:	10800037 	ldwio	r2,0(r2)
            alt_printf("time out after 5 msec while waiting free FIFO buffer"
                " for storing descriptor\n");
            return -ETIME;
        }
        counter++;  
        fifo_read_fill_level = (
8020f698:	10bfffcc 	andi	r2,r2,65535
8020f69c:	e0bff415 	stw	r2,-48(fp)
            IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
            ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
            ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
        fifo_write_fill_level = (
            IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
8020f6a0:	e0bffd17 	ldw	r2,-12(fp)
8020f6a4:	10800317 	ldw	r2,12(r2)
8020f6a8:	10800204 	addi	r2,r2,8
8020f6ac:	10800037 	ldwio	r2,0(r2)
        counter++;  
        fifo_read_fill_level = (
            IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
            ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
            ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
        fifo_write_fill_level = (
8020f6b0:	1004d43a 	srli	r2,r2,16
8020f6b4:	e0bff515 	stw	r2,-44(fp)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
8020f6b8:	e0bffd17 	ldw	r2,-12(fp)
8020f6bc:	10800917 	ldw	r2,36(r2)
8020f6c0:	e0fff517 	ldw	r3,-44(fp)
8020f6c4:	18bfe32e 	bgeu	r3,r2,8020f654 <__reset+0xfa1ef654>
        (dev->descriptor_fifo_depth <= fifo_read_fill_level))
8020f6c8:	e0bffd17 	ldw	r2,-12(fp)
8020f6cc:	10800917 	ldw	r2,36(r2)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
8020f6d0:	e0fff417 	ldw	r3,-48(fp)
8020f6d4:	18bfdf2e 	bgeu	r3,r2,8020f654 <__reset+0xfa1ef654>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8020f6d8:	0005303a 	rdctl	r2,status
8020f6dc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8020f6e0:	e0fffc17 	ldw	r3,-16(fp)
8020f6e4:	00bfff84 	movi	r2,-2
8020f6e8:	1884703a 	and	r2,r3,r2
8020f6ec:	1001703a 	wrctl	status,r2
  
  return context;
8020f6f0:	e0bffc17 	ldw	r2,-16(fp)
    ALT_SEM_PEND (dev->regs_lock, 0);
    
    /* Stop the msgdma dispatcher from issuing more descriptors to the
    read or write masters  */
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();
8020f6f4:	e0bff715 	stw	r2,-36(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
8020f6f8:	e0bffd17 	ldw	r2,-12(fp)
8020f6fc:	10800317 	ldw	r2,12(r2)
8020f700:	10800104 	addi	r2,r2,4
8020f704:	00c00804 	movi	r3,32
8020f708:	10c00035 	stwio	r3,0(r2)
        ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
    /*
    * Clear any (previous) status register information
    * that might occlude our error checking later.
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
8020f70c:	e0bffd17 	ldw	r2,-12(fp)
8020f710:	10800317 	ldw	r2,12(r2)
8020f714:	e0fffd17 	ldw	r3,-12(fp)
8020f718:	18c00317 	ldw	r3,12(r3)
8020f71c:	18c00037 	ldwio	r3,0(r3)
8020f720:	10c00035 	stwio	r3,0(r2)
        dev->csr_base, 
        IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));

    if (NULL != standard_desc && NULL == extended_desc)
8020f724:	e0bffe17 	ldw	r2,-8(fp)
8020f728:	10001b26 	beq	r2,zero,8020f798 <alt_msgdma_descriptor_sync_transfer+0x1ac>
8020f72c:	e0bfff17 	ldw	r2,-4(fp)
8020f730:	1000191e 	bne	r2,zero,8020f798 <alt_msgdma_descriptor_sync_transfer+0x1ac>
    {
        counter = 0; /* reset counter */
8020f734:	e03ff30d 	sth	zero,-52(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
          write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
8020f738:	00000d06 	br	8020f770 <alt_msgdma_descriptor_sync_transfer+0x184>
            dev->csr_base, dev->descriptor_base, standard_desc))
        {     
            alt_busy_sleep(1); /* delay 1us */
8020f73c:	01000044 	movi	r4,1
8020f740:	0210e880 	call	80210e88 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
8020f744:	e0bff30b 	ldhu	r2,-52(fp)
8020f748:	1084e230 	cmpltui	r2,r2,5000
8020f74c:	1000051e 	bne	r2,zero,8020f764 <alt_msgdma_descriptor_sync_transfer+0x178>
            {
                alt_printf("time out after 5 msec while writing standard" 
8020f750:	01200874 	movhi	r4,32801
8020f754:	2109c104 	addi	r4,r4,9988
8020f758:	021183c0 	call	8021183c <alt_printf>
                * registers semaphore so that other threads can access the 
                * registers.
                */
                ALT_SEM_POST (dev->regs_lock);
                
                return -ETIME;
8020f75c:	00bff084 	movi	r2,-62
8020f760:	00007b06 	br	8020f950 <alt_msgdma_descriptor_sync_transfer+0x364>
            }
            counter++;    
8020f764:	e0bff30b 	ldhu	r2,-52(fp)
8020f768:	10800044 	addi	r2,r2,1
8020f76c:	e0bff30d 	sth	r2,-52(fp)
    if (NULL != standard_desc && NULL == extended_desc)
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
          write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
8020f770:	e0bffd17 	ldw	r2,-12(fp)
8020f774:	10c00317 	ldw	r3,12(r2)
8020f778:	e0bffd17 	ldw	r2,-12(fp)
8020f77c:	10800417 	ldw	r2,16(r2)
8020f780:	e1bffe17 	ldw	r6,-8(fp)
8020f784:	100b883a 	mov	r5,r2
8020f788:	1809883a 	mov	r4,r3
8020f78c:	020edf80 	call	8020edf8 <alt_msgdma_write_standard_descriptor>
8020f790:	103fea1e 	bne	r2,zero,8020f73c <__reset+0xfa1ef73c>
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
        dev->csr_base, 
        IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));

    if (NULL != standard_desc && NULL == extended_desc)
8020f794:	00001f06 	br	8020f814 <alt_msgdma_descriptor_sync_transfer+0x228>
                return -ETIME;
            }
            counter++;    
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
8020f798:	e0bffe17 	ldw	r2,-8(fp)
8020f79c:	10001b1e 	bne	r2,zero,8020f80c <alt_msgdma_descriptor_sync_transfer+0x220>
8020f7a0:	e0bfff17 	ldw	r2,-4(fp)
8020f7a4:	10001926 	beq	r2,zero,8020f80c <alt_msgdma_descriptor_sync_transfer+0x220>
    {
        counter = 0; /* reset counter */
8020f7a8:	e03ff30d 	sth	zero,-52(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
          write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
8020f7ac:	00000d06 	br	8020f7e4 <alt_msgdma_descriptor_sync_transfer+0x1f8>
            dev->csr_base, dev->descriptor_base, extended_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
8020f7b0:	01000044 	movi	r4,1
8020f7b4:	0210e880 	call	80210e88 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
8020f7b8:	e0bff30b 	ldhu	r2,-52(fp)
8020f7bc:	1084e230 	cmpltui	r2,r2,5000
8020f7c0:	1000051e 	bne	r2,zero,8020f7d8 <alt_msgdma_descriptor_sync_transfer+0x1ec>
            {
                alt_printf("time out after 5 msec while writing extended" 
8020f7c4:	01200874 	movhi	r4,32801
8020f7c8:	2109d204 	addi	r4,r4,10056
8020f7cc:	021183c0 	call	8021183c <alt_printf>
                * registers semaphore so that other threads can access the 
                * registers.
                */
                ALT_SEM_POST (dev->regs_lock);
                
                return -ETIME;
8020f7d0:	00bff084 	movi	r2,-62
8020f7d4:	00005e06 	br	8020f950 <alt_msgdma_descriptor_sync_transfer+0x364>
            }
            counter++;
8020f7d8:	e0bff30b 	ldhu	r2,-52(fp)
8020f7dc:	10800044 	addi	r2,r2,1
8020f7e0:	e0bff30d 	sth	r2,-52(fp)
    else if (NULL == standard_desc && NULL != extended_desc)
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
          write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
8020f7e4:	e0bffd17 	ldw	r2,-12(fp)
8020f7e8:	10c00317 	ldw	r3,12(r2)
8020f7ec:	e0bffd17 	ldw	r2,-12(fp)
8020f7f0:	10800417 	ldw	r2,16(r2)
8020f7f4:	e1bfff17 	ldw	r6,-4(fp)
8020f7f8:	100b883a 	mov	r5,r2
8020f7fc:	1809883a 	mov	r4,r3
8020f800:	020ee8c0 	call	8020ee8c <alt_msgdma_write_extended_descriptor>
8020f804:	103fea1e 	bne	r2,zero,8020f7b0 <__reset+0xfa1ef7b0>
                return -ETIME;
            }
            counter++;    
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
8020f808:	00000206 	br	8020f814 <alt_msgdma_descriptor_sync_transfer+0x228>
        * semaphore so that other threads can access the registers.
        */
        ALT_SEM_POST (dev->regs_lock);
        
        /* operation not permitted due to descriptor type conflict */
        return -EPERM; 
8020f80c:	00bfffc4 	movi	r2,-1
8020f810:	00004f06 	br	8020f950 <alt_msgdma_descriptor_sync_transfer+0x364>
    * Set up msgdma controller to:
    * - Disable interrupt generation
    * - Run once a valid descriptor is written to controller
    * - Stop on an error with any particular descriptor
    */
     IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
8020f814:	e0bffd17 	ldw	r2,-12(fp)
8020f818:	10800317 	ldw	r2,12(r2)
8020f81c:	10800104 	addi	r2,r2,4
8020f820:	e0fffd17 	ldw	r3,-12(fp)
8020f824:	19000d17 	ldw	r4,52(r3)
8020f828:	00fff2c4 	movi	r3,-53
8020f82c:	20c6703a 	and	r3,r4,r3
8020f830:	18c00114 	ori	r3,r3,4
8020f834:	10c00035 	stwio	r3,0(r2)
8020f838:	e0bff717 	ldw	r2,-36(fp)
8020f83c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8020f840:	e0bff917 	ldw	r2,-28(fp)
8020f844:	1001703a 	wrctl	status,r2
        (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) &
        (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK)) ;
     
    alt_irq_enable_all(context);
     
    counter = 0; /* reset counter */ 
8020f848:	e03ff30d 	sth	zero,-52(fp)
    
    csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
8020f84c:	e0bffd17 	ldw	r2,-12(fp)
8020f850:	10800317 	ldw	r2,12(r2)
8020f854:	10800037 	ldwio	r2,0(r2)
8020f858:	e0bff215 	stw	r2,-56(fp)
    
    /* Wait for any pending transfers to complete or checking any errors or 
    conditions causing descriptor to stop dispatching */
    while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK))
8020f85c:	00001106 	br	8020f8a4 <alt_msgdma_descriptor_sync_transfer+0x2b8>
    {
        alt_busy_sleep(1); /* delay 1us */
8020f860:	01000044 	movi	r4,1
8020f864:	0210e880 	call	80210e88 <alt_busy_sleep>
        if(5000 <= counter) /* time_out if waiting longer than 5 msec */
8020f868:	e0bff30b 	ldhu	r2,-52(fp)
8020f86c:	1084e230 	cmpltui	r2,r2,5000
8020f870:	1000051e 	bne	r2,zero,8020f888 <alt_msgdma_descriptor_sync_transfer+0x29c>
        {
            alt_printf("time out after 5 msec while waiting for any pending" 
8020f874:	01200874 	movhi	r4,32801
8020f878:	2109e304 	addi	r4,r4,10124
8020f87c:	021183c0 	call	8021183c <alt_printf>
            * Now that access to the registers is complete, release the registers
            * semaphore so that other threads can access the registers.
            */
            ALT_SEM_POST (dev->regs_lock);
            
            return -ETIME;
8020f880:	00bff084 	movi	r2,-62
8020f884:	00003206 	br	8020f950 <alt_msgdma_descriptor_sync_transfer+0x364>
        }
        counter++;
8020f888:	e0bff30b 	ldhu	r2,-52(fp)
8020f88c:	10800044 	addi	r2,r2,1
8020f890:	e0bff30d 	sth	r2,-52(fp)
        csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
8020f894:	e0bffd17 	ldw	r2,-12(fp)
8020f898:	10800317 	ldw	r2,12(r2)
8020f89c:	10800037 	ldwio	r2,0(r2)
8020f8a0:	e0bff215 	stw	r2,-56(fp)
    
    csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
    
    /* Wait for any pending transfers to complete or checking any errors or 
    conditions causing descriptor to stop dispatching */
    while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK))
8020f8a4:	e0fff217 	ldw	r3,-56(fp)
8020f8a8:	e0bff817 	ldw	r2,-32(fp)
8020f8ac:	1884703a 	and	r2,r3,r2
8020f8b0:	1000031e 	bne	r2,zero,8020f8c0 <alt_msgdma_descriptor_sync_transfer+0x2d4>
8020f8b4:	e0bff217 	ldw	r2,-56(fp)
8020f8b8:	1080004c 	andi	r2,r2,1
8020f8bc:	103fe81e 	bne	r2,zero,8020f860 <__reset+0xfa1ef860>
    }
    

    /*Errors or conditions causing the dispatcher stopping issuing read/write 
      commands to masters*/
    if(0 != (csr_status & error))
8020f8c0:	e0fff217 	ldw	r3,-56(fp)
8020f8c4:	e0bff817 	ldw	r2,-32(fp)
8020f8c8:	1884703a 	and	r2,r3,r2
8020f8cc:	10000226 	beq	r2,zero,8020f8d8 <alt_msgdma_descriptor_sync_transfer+0x2ec>
        * Now that access to the registers is complete, release the registers
        * semaphore so that other threads can access the registers.
        */
        ALT_SEM_POST (dev->regs_lock);
        
        return error;
8020f8d0:	e0bff817 	ldw	r2,-32(fp)
8020f8d4:	00001e06 	br	8020f950 <alt_msgdma_descriptor_sync_transfer+0x364>
    }

    /* Stop the msgdma dispatcher from issuing more descriptors to the
    read or write masters  */
    /* stop issuing more descriptors */
    control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) | 
8020f8d8:	e0bffd17 	ldw	r2,-12(fp)
8020f8dc:	10800317 	ldw	r2,12(r2)
8020f8e0:	10800104 	addi	r2,r2,4
8020f8e4:	10800037 	ldwio	r2,0(r2)
8020f8e8:	10800814 	ori	r2,r2,32
8020f8ec:	e0bff615 	stw	r2,-40(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8020f8f0:	0005303a 	rdctl	r2,status
8020f8f4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8020f8f8:	e0fffa17 	ldw	r3,-24(fp)
8020f8fc:	00bfff84 	movi	r2,-2
8020f900:	1884703a 	and	r2,r3,r2
8020f904:	1001703a 	wrctl	status,r2
  
  return context;
8020f908:	e0bffa17 	ldw	r2,-24(fp)
    ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();  
8020f90c:	e0bff715 	stw	r2,-36(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
8020f910:	e0bffd17 	ldw	r2,-12(fp)
8020f914:	10800317 	ldw	r2,12(r2)
8020f918:	10800104 	addi	r2,r2,4
8020f91c:	e0fff617 	ldw	r3,-40(fp)
8020f920:	10c00035 	stwio	r3,0(r2)
    /*
    * Clear any (previous) status register information
    * that might occlude our error checking later.
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
8020f924:	e0bffd17 	ldw	r2,-12(fp)
8020f928:	10800317 	ldw	r2,12(r2)
8020f92c:	e0fffd17 	ldw	r3,-12(fp)
8020f930:	18c00317 	ldw	r3,12(r3)
8020f934:	18c00037 	ldwio	r3,0(r3)
8020f938:	10c00035 	stwio	r3,0(r2)
8020f93c:	e0bff717 	ldw	r2,-36(fp)
8020f940:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8020f944:	e0bffb17 	ldw	r2,-20(fp)
8020f948:	1001703a 	wrctl	status,r2
    * Now that access to the registers is complete, release the registers
    * semaphore so that other threads can access the registers.
    */
    ALT_SEM_POST (dev->regs_lock);
    
    return 0;
8020f94c:	0005883a 	mov	r2,zero

}
8020f950:	e037883a 	mov	sp,fp
8020f954:	dfc00117 	ldw	ra,4(sp)
8020f958:	df000017 	ldw	fp,0(sp)
8020f95c:	dec00204 	addi	sp,sp,8
8020f960:	f800283a 	ret

8020f964 <alt_msgdma_construct_standard_st_to_mm_descriptor>:
 */
int alt_msgdma_construct_standard_st_to_mm_descriptor (
    alt_msgdma_dev *dev,
    alt_msgdma_standard_descriptor *descriptor,
    alt_u32 *write_address, alt_u32 length, alt_u32 control)
{
8020f964:	defff804 	addi	sp,sp,-32
8020f968:	dfc00715 	stw	ra,28(sp)
8020f96c:	df000615 	stw	fp,24(sp)
8020f970:	df000604 	addi	fp,sp,24
8020f974:	e13ffc15 	stw	r4,-16(fp)
8020f978:	e17ffd15 	stw	r5,-12(fp)
8020f97c:	e1bffe15 	stw	r6,-8(fp)
8020f980:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, NULL, 
8020f984:	e0800217 	ldw	r2,8(fp)
8020f988:	d8800115 	stw	r2,4(sp)
8020f98c:	e0bfff17 	ldw	r2,-4(fp)
8020f990:	d8800015 	stw	r2,0(sp)
8020f994:	e1fffe17 	ldw	r7,-8(fp)
8020f998:	000d883a 	mov	r6,zero
8020f99c:	e17ffd17 	ldw	r5,-12(fp)
8020f9a0:	e13ffc17 	ldw	r4,-16(fp)
8020f9a4:	020f13c0 	call	8020f13c <alt_msgdma_construct_standard_descriptor>
            write_address, length, control);
}
8020f9a8:	e037883a 	mov	sp,fp
8020f9ac:	dfc00117 	ldw	ra,4(sp)
8020f9b0:	df000017 	ldw	fp,0(sp)
8020f9b4:	dec00204 	addi	sp,sp,8
8020f9b8:	f800283a 	ret

8020f9bc <alt_msgdma_construct_standard_mm_to_st_descriptor>:
    alt_msgdma_dev *dev,
    alt_msgdma_standard_descriptor *descriptor,
    alt_u32 *read_address,
    alt_u32 length,
    alt_u32 control)
{
8020f9bc:	defff804 	addi	sp,sp,-32
8020f9c0:	dfc00715 	stw	ra,28(sp)
8020f9c4:	df000615 	stw	fp,24(sp)
8020f9c8:	df000604 	addi	fp,sp,24
8020f9cc:	e13ffc15 	stw	r4,-16(fp)
8020f9d0:	e17ffd15 	stw	r5,-12(fp)
8020f9d4:	e1bffe15 	stw	r6,-8(fp)
8020f9d8:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, read_address, 
8020f9dc:	e0800217 	ldw	r2,8(fp)
8020f9e0:	d8800115 	stw	r2,4(sp)
8020f9e4:	e0bfff17 	ldw	r2,-4(fp)
8020f9e8:	d8800015 	stw	r2,0(sp)
8020f9ec:	000f883a 	mov	r7,zero
8020f9f0:	e1bffe17 	ldw	r6,-8(fp)
8020f9f4:	e17ffd17 	ldw	r5,-12(fp)
8020f9f8:	e13ffc17 	ldw	r4,-16(fp)
8020f9fc:	020f13c0 	call	8020f13c <alt_msgdma_construct_standard_descriptor>
            NULL, length, control);

}
8020fa00:	e037883a 	mov	sp,fp
8020fa04:	dfc00117 	ldw	ra,4(sp)
8020fa08:	df000017 	ldw	fp,0(sp)
8020fa0c:	dec00204 	addi	sp,sp,8
8020fa10:	f800283a 	ret

8020fa14 <alt_msgdma_construct_standard_mm_to_mm_descriptor>:
    alt_msgdma_standard_descriptor *descriptor,
    alt_u32 *read_address, 
    alt_u32 *write_address, 
    alt_u32 length, 
    alt_u32 control)
{
8020fa14:	defff804 	addi	sp,sp,-32
8020fa18:	dfc00715 	stw	ra,28(sp)
8020fa1c:	df000615 	stw	fp,24(sp)
8020fa20:	df000604 	addi	fp,sp,24
8020fa24:	e13ffc15 	stw	r4,-16(fp)
8020fa28:	e17ffd15 	stw	r5,-12(fp)
8020fa2c:	e1bffe15 	stw	r6,-8(fp)
8020fa30:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, read_address, 
8020fa34:	e0800317 	ldw	r2,12(fp)
8020fa38:	d8800115 	stw	r2,4(sp)
8020fa3c:	e0800217 	ldw	r2,8(fp)
8020fa40:	d8800015 	stw	r2,0(sp)
8020fa44:	e1ffff17 	ldw	r7,-4(fp)
8020fa48:	e1bffe17 	ldw	r6,-8(fp)
8020fa4c:	e17ffd17 	ldw	r5,-12(fp)
8020fa50:	e13ffc17 	ldw	r4,-16(fp)
8020fa54:	020f13c0 	call	8020f13c <alt_msgdma_construct_standard_descriptor>
            write_address, length, control);
}
8020fa58:	e037883a 	mov	sp,fp
8020fa5c:	dfc00117 	ldw	ra,4(sp)
8020fa60:	df000017 	ldw	fp,0(sp)
8020fa64:	dec00204 	addi	sp,sp,8
8020fa68:	f800283a 	ret

8020fa6c <alt_msgdma_construct_extended_st_to_mm_descriptor>:
    alt_u32 length, 
    alt_u32 control, 
    alt_u16 sequence_number, 
    alt_u8 write_burst_count, 
    alt_u16 write_stride)
{
8020fa6c:	defff004 	addi	sp,sp,-64
8020fa70:	dfc00f15 	stw	ra,60(sp)
8020fa74:	df000e15 	stw	fp,56(sp)
8020fa78:	df000e04 	addi	fp,sp,56
8020fa7c:	e13ff915 	stw	r4,-28(fp)
8020fa80:	e17ffa15 	stw	r5,-24(fp)
8020fa84:	e1bffb15 	stw	r6,-20(fp)
8020fa88:	e1fffc15 	stw	r7,-16(fp)
8020fa8c:	e1000317 	ldw	r4,12(fp)
8020fa90:	e0c00417 	ldw	r3,16(fp)
8020fa94:	e0800517 	ldw	r2,20(fp)
8020fa98:	e13ffd0d 	sth	r4,-12(fp)
8020fa9c:	e0fffe05 	stb	r3,-8(fp)
8020faa0:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, 
8020faa4:	e0bffd0b 	ldhu	r2,-12(fp)
8020faa8:	e0fffe03 	ldbu	r3,-8(fp)
8020faac:	e13fff0b 	ldhu	r4,-4(fp)
8020fab0:	d9000615 	stw	r4,24(sp)
8020fab4:	d8000515 	stw	zero,20(sp)
8020fab8:	d8c00415 	stw	r3,16(sp)
8020fabc:	d8000315 	stw	zero,12(sp)
8020fac0:	d8800215 	stw	r2,8(sp)
8020fac4:	e0800217 	ldw	r2,8(fp)
8020fac8:	d8800115 	stw	r2,4(sp)
8020facc:	e0bffc17 	ldw	r2,-16(fp)
8020fad0:	d8800015 	stw	r2,0(sp)
8020fad4:	e1fffb17 	ldw	r7,-20(fp)
8020fad8:	000d883a 	mov	r6,zero
8020fadc:	e17ffa17 	ldw	r5,-24(fp)
8020fae0:	e13ff917 	ldw	r4,-28(fp)
8020fae4:	020f1c80 	call	8020f1c8 <alt_msgdma_construct_extended_descriptor>
            NULL, write_address, length, control, sequence_number, 0, 
            write_burst_count, 0, write_stride);
}
8020fae8:	e037883a 	mov	sp,fp
8020faec:	dfc00117 	ldw	ra,4(sp)
8020faf0:	df000017 	ldw	fp,0(sp)
8020faf4:	dec00204 	addi	sp,sp,8
8020faf8:	f800283a 	ret

8020fafc <alt_msgdma_construct_extended_mm_to_st_descriptor>:
    alt_u32 length,
    alt_u32 control,
    alt_u16 sequence_number,
    alt_u8 read_burst_count, 
    alt_u16 read_stride)
{
8020fafc:	defff004 	addi	sp,sp,-64
8020fb00:	dfc00f15 	stw	ra,60(sp)
8020fb04:	df000e15 	stw	fp,56(sp)
8020fb08:	df000e04 	addi	fp,sp,56
8020fb0c:	e13ff915 	stw	r4,-28(fp)
8020fb10:	e17ffa15 	stw	r5,-24(fp)
8020fb14:	e1bffb15 	stw	r6,-20(fp)
8020fb18:	e1fffc15 	stw	r7,-16(fp)
8020fb1c:	e1000317 	ldw	r4,12(fp)
8020fb20:	e0c00417 	ldw	r3,16(fp)
8020fb24:	e0800517 	ldw	r2,20(fp)
8020fb28:	e13ffd0d 	sth	r4,-12(fp)
8020fb2c:	e0fffe05 	stb	r3,-8(fp)
8020fb30:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, read_address, 
8020fb34:	e0bffd0b 	ldhu	r2,-12(fp)
8020fb38:	e0fffe03 	ldbu	r3,-8(fp)
8020fb3c:	e13fff0b 	ldhu	r4,-4(fp)
8020fb40:	d8000615 	stw	zero,24(sp)
8020fb44:	d9000515 	stw	r4,20(sp)
8020fb48:	d8000415 	stw	zero,16(sp)
8020fb4c:	d8c00315 	stw	r3,12(sp)
8020fb50:	d8800215 	stw	r2,8(sp)
8020fb54:	e0800217 	ldw	r2,8(fp)
8020fb58:	d8800115 	stw	r2,4(sp)
8020fb5c:	e0bffc17 	ldw	r2,-16(fp)
8020fb60:	d8800015 	stw	r2,0(sp)
8020fb64:	000f883a 	mov	r7,zero
8020fb68:	e1bffb17 	ldw	r6,-20(fp)
8020fb6c:	e17ffa17 	ldw	r5,-24(fp)
8020fb70:	e13ff917 	ldw	r4,-28(fp)
8020fb74:	020f1c80 	call	8020f1c8 <alt_msgdma_construct_extended_descriptor>
            NULL, length, control, sequence_number, read_burst_count, 0, 
            read_stride, 0);

}
8020fb78:	e037883a 	mov	sp,fp
8020fb7c:	dfc00117 	ldw	ra,4(sp)
8020fb80:	df000017 	ldw	fp,0(sp)
8020fb84:	dec00204 	addi	sp,sp,8
8020fb88:	f800283a 	ret

8020fb8c <alt_msgdma_construct_extended_mm_to_mm_descriptor>:
    alt_u16 sequence_number, 
    alt_u8 read_burst_count, 
    alt_u8 write_burst_count,
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
8020fb8c:	deffee04 	addi	sp,sp,-72
8020fb90:	dfc01115 	stw	ra,68(sp)
8020fb94:	df001015 	stw	fp,64(sp)
8020fb98:	df001004 	addi	fp,sp,64
8020fb9c:	e13ff715 	stw	r4,-36(fp)
8020fba0:	e17ff815 	stw	r5,-32(fp)
8020fba4:	e1bff915 	stw	r6,-28(fp)
8020fba8:	e1fffa15 	stw	r7,-24(fp)
8020fbac:	e1800417 	ldw	r6,16(fp)
8020fbb0:	e1400517 	ldw	r5,20(fp)
8020fbb4:	e1000617 	ldw	r4,24(fp)
8020fbb8:	e0c00717 	ldw	r3,28(fp)
8020fbbc:	e0800817 	ldw	r2,32(fp)
8020fbc0:	e1bffb0d 	sth	r6,-20(fp)
8020fbc4:	e17ffc05 	stb	r5,-16(fp)
8020fbc8:	e13ffd05 	stb	r4,-12(fp)
8020fbcc:	e0fffe0d 	sth	r3,-8(fp)
8020fbd0:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, 
8020fbd4:	e0bffb0b 	ldhu	r2,-20(fp)
8020fbd8:	e0fffc03 	ldbu	r3,-16(fp)
8020fbdc:	e13ffd03 	ldbu	r4,-12(fp)
8020fbe0:	e17ffe0b 	ldhu	r5,-8(fp)
8020fbe4:	e1bfff0b 	ldhu	r6,-4(fp)
8020fbe8:	d9800615 	stw	r6,24(sp)
8020fbec:	d9400515 	stw	r5,20(sp)
8020fbf0:	d9000415 	stw	r4,16(sp)
8020fbf4:	d8c00315 	stw	r3,12(sp)
8020fbf8:	d8800215 	stw	r2,8(sp)
8020fbfc:	e0800317 	ldw	r2,12(fp)
8020fc00:	d8800115 	stw	r2,4(sp)
8020fc04:	e0800217 	ldw	r2,8(fp)
8020fc08:	d8800015 	stw	r2,0(sp)
8020fc0c:	e1fffa17 	ldw	r7,-24(fp)
8020fc10:	e1bff917 	ldw	r6,-28(fp)
8020fc14:	e17ff817 	ldw	r5,-32(fp)
8020fc18:	e13ff717 	ldw	r4,-36(fp)
8020fc1c:	020f1c80 	call	8020f1c8 <alt_msgdma_construct_extended_descriptor>
            read_address, write_address, length, control, sequence_number, 
            read_burst_count, write_burst_count, read_stride, write_stride);

}
8020fc20:	e037883a 	mov	sp,fp
8020fc24:	dfc00117 	ldw	ra,4(sp)
8020fc28:	df000017 	ldw	fp,0(sp)
8020fc2c:	dec00204 	addi	sp,sp,8
8020fc30:	f800283a 	ret

8020fc34 <alt_msgdma_construct_prefetcher_standard_descriptor>:
    alt_msgdma_prefetcher_standard_descriptor *descriptor,
    alt_u32 read_address, 
    alt_u32 write_address, 
    alt_u32 length, 
    alt_u32 control)
{
8020fc34:	defffb04 	addi	sp,sp,-20
8020fc38:	df000415 	stw	fp,16(sp)
8020fc3c:	df000404 	addi	fp,sp,16
8020fc40:	e13ffc15 	stw	r4,-16(fp)
8020fc44:	e17ffd15 	stw	r5,-12(fp)
8020fc48:	e1bffe15 	stw	r6,-8(fp)
8020fc4c:	e1ffff15 	stw	r7,-4(fp)
    if(dev->max_byte < length ||
8020fc50:	e0bffc17 	ldw	r2,-16(fp)
8020fc54:	10c01217 	ldw	r3,72(r2)
8020fc58:	e0800117 	ldw	r2,4(fp)
8020fc5c:	18800436 	bltu	r3,r2,8020fc70 <alt_msgdma_construct_prefetcher_standard_descriptor+0x3c>
       dev->enhanced_features != 0
8020fc60:	e0bffc17 	ldw	r2,-16(fp)
8020fc64:	10801703 	ldbu	r2,92(r2)
    alt_u32 read_address, 
    alt_u32 write_address, 
    alt_u32 length, 
    alt_u32 control)
{
    if(dev->max_byte < length ||
8020fc68:	10803fcc 	andi	r2,r2,255
8020fc6c:	10000226 	beq	r2,zero,8020fc78 <alt_msgdma_construct_prefetcher_standard_descriptor+0x44>
       dev->enhanced_features != 0
      )
    {
        return -EINVAL;
8020fc70:	00bffa84 	movi	r2,-22
8020fc74:	00001406 	br	8020fcc8 <alt_msgdma_construct_prefetcher_standard_descriptor+0x94>
    }
    descriptor->read_address = read_address;
8020fc78:	e0bffd17 	ldw	r2,-12(fp)
8020fc7c:	e0fffe17 	ldw	r3,-8(fp)
8020fc80:	10c00015 	stw	r3,0(r2)
    descriptor->write_address = write_address;
8020fc84:	e0bffd17 	ldw	r2,-12(fp)
8020fc88:	e0ffff17 	ldw	r3,-4(fp)
8020fc8c:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
8020fc90:	e0bffd17 	ldw	r2,-12(fp)
8020fc94:	e0c00117 	ldw	r3,4(fp)
8020fc98:	10c00215 	stw	r3,8(r2)
    /* have descriptor point to itself for park_mode */
    descriptor->next_desc_ptr = (alt_u32)descriptor;  
8020fc9c:	e0fffd17 	ldw	r3,-12(fp)
8020fca0:	e0bffd17 	ldw	r2,-12(fp)
8020fca4:	10c00315 	stw	r3,12(r2)
    
    /* clear control own_by_hw bit field (SW owns this descriptor)*/
    descriptor->control = (control 
            & ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
            | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
8020fca8:	e0c00217 	ldw	r3,8(fp)
8020fcac:	00900034 	movhi	r2,16384
8020fcb0:	10bfffc4 	addi	r2,r2,-1
8020fcb4:	1884703a 	and	r2,r3,r2
8020fcb8:	10e00034 	orhi	r3,r2,32768
    descriptor->transfer_length = length;
    /* have descriptor point to itself for park_mode */
    descriptor->next_desc_ptr = (alt_u32)descriptor;  
    
    /* clear control own_by_hw bit field (SW owns this descriptor)*/
    descriptor->control = (control 
8020fcbc:	e0bffd17 	ldw	r2,-12(fp)
8020fcc0:	10c00715 	stw	r3,28(r2)
            & ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
            | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
    
    return 0;
8020fcc4:	0005883a 	mov	r2,zero
}
8020fcc8:	e037883a 	mov	sp,fp
8020fccc:	df000017 	ldw	fp,0(sp)
8020fcd0:	dec00104 	addi	sp,sp,4
8020fcd4:	f800283a 	ret

8020fcd8 <alt_msgdma_construct_prefetcher_extended_descriptor>:
    alt_u16 sequence_number, 
    alt_u8 read_burst_count, 
    alt_u8 write_burst_count,
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
8020fcd8:	defff404 	addi	sp,sp,-48
8020fcdc:	df000b15 	stw	fp,44(sp)
8020fce0:	df000b04 	addi	fp,sp,44
8020fce4:	e13ff715 	stw	r4,-36(fp)
8020fce8:	e17ff815 	stw	r5,-32(fp)
8020fcec:	e1bff915 	stw	r6,-28(fp)
8020fcf0:	e1fffa15 	stw	r7,-24(fp)
8020fcf4:	e1800517 	ldw	r6,20(fp)
8020fcf8:	e1400617 	ldw	r5,24(fp)
8020fcfc:	e1000717 	ldw	r4,28(fp)
8020fd00:	e0c00817 	ldw	r3,32(fp)
8020fd04:	e0800917 	ldw	r2,36(fp)
8020fd08:	e1bffb0d 	sth	r6,-20(fp)
8020fd0c:	e17ffc05 	stb	r5,-16(fp)
8020fd10:	e13ffd05 	stb	r4,-12(fp)
8020fd14:	e0fffe0d 	sth	r3,-8(fp)
8020fd18:	e0bfff0d 	sth	r2,-4(fp)
    msgdma_addr64 node_addr;
    
    if(dev->max_byte < length ||
8020fd1c:	e0bff717 	ldw	r2,-36(fp)
8020fd20:	10c01217 	ldw	r3,72(r2)
8020fd24:	e0800317 	ldw	r2,12(fp)
8020fd28:	18801936 	bltu	r3,r2,8020fd90 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
8020fd2c:	e13ff717 	ldw	r4,-36(fp)
8020fd30:	20801317 	ldw	r2,76(r4)
8020fd34:	20c01417 	ldw	r3,80(r4)
8020fd38:	e13ffe0b 	ldhu	r4,-8(fp)
8020fd3c:	213fffcc 	andi	r4,r4,65535
8020fd40:	2015883a 	mov	r10,r4
8020fd44:	0017883a 	mov	r11,zero
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
    msgdma_addr64 node_addr;
    
    if(dev->max_byte < length ||
8020fd48:	1ac01136 	bltu	r3,r11,8020fd90 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
8020fd4c:	58c0011e 	bne	r11,r3,8020fd54 <alt_msgdma_construct_prefetcher_extended_descriptor+0x7c>
8020fd50:	12800f36 	bltu	r2,r10,8020fd90 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
8020fd54:	e13ff717 	ldw	r4,-36(fp)
8020fd58:	20801317 	ldw	r2,76(r4)
8020fd5c:	20c01417 	ldw	r3,80(r4)
8020fd60:	e13fff0b 	ldhu	r4,-4(fp)
8020fd64:	213fffcc 	andi	r4,r4,65535
8020fd68:	2011883a 	mov	r8,r4
8020fd6c:	0013883a 	mov	r9,zero
    alt_u16 write_stride)
{
    msgdma_addr64 node_addr;
    
    if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
8020fd70:	1a400736 	bltu	r3,r9,8020fd90 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
8020fd74:	48c0011e 	bne	r9,r3,8020fd7c <alt_msgdma_construct_prefetcher_extended_descriptor+0xa4>
8020fd78:	12000536 	bltu	r2,r8,8020fd90 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
       dev->max_stride < write_stride ||
       dev->enhanced_features != 1 
8020fd7c:	e0bff717 	ldw	r2,-36(fp)
8020fd80:	10801703 	ldbu	r2,92(r2)
{
    msgdma_addr64 node_addr;
    
    if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
8020fd84:	10803fcc 	andi	r2,r2,255
8020fd88:	10800060 	cmpeqi	r2,r2,1
8020fd8c:	1000021e 	bne	r2,zero,8020fd98 <alt_msgdma_construct_prefetcher_extended_descriptor+0xc0>
       dev->enhanced_features != 1 
      )
    {
        return -EINVAL;
8020fd90:	00bffa84 	movi	r2,-22
8020fd94:	00003106 	br	8020fe5c <alt_msgdma_construct_prefetcher_extended_descriptor+0x184>
    }
    
    descriptor->read_address_high = read_address_high;
8020fd98:	e0bff817 	ldw	r2,-32(fp)
8020fd9c:	e0fff917 	ldw	r3,-28(fp)
8020fda0:	10c00915 	stw	r3,36(r2)
    descriptor->read_address_low = read_address_low;
8020fda4:	e0bff817 	ldw	r2,-32(fp)
8020fda8:	e0fffa17 	ldw	r3,-24(fp)
8020fdac:	10c00015 	stw	r3,0(r2)
    descriptor->write_address_high = write_address_high;
8020fdb0:	e0bff817 	ldw	r2,-32(fp)
8020fdb4:	e0c00117 	ldw	r3,4(fp)
8020fdb8:	10c00a15 	stw	r3,40(r2)
    descriptor->write_address_low = write_address_low;
8020fdbc:	e0bff817 	ldw	r2,-32(fp)
8020fdc0:	e0c00217 	ldw	r3,8(fp)
8020fdc4:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
8020fdc8:	e0bff817 	ldw	r2,-32(fp)
8020fdcc:	e0c00317 	ldw	r3,12(fp)
8020fdd0:	10c00215 	stw	r3,8(r2)
    descriptor->sequence_number = sequence_number;
8020fdd4:	e0bff817 	ldw	r2,-32(fp)
8020fdd8:	e0fffb0b 	ldhu	r3,-20(fp)
8020fddc:	10c0070d 	sth	r3,28(r2)
    descriptor->read_burst_count = read_burst_count;
8020fde0:	e0bff817 	ldw	r2,-32(fp)
8020fde4:	e0fffc03 	ldbu	r3,-16(fp)
8020fde8:	10c00785 	stb	r3,30(r2)
    descriptor->write_burst_count = write_burst_count;
8020fdec:	e0bff817 	ldw	r2,-32(fp)
8020fdf0:	e0fffd03 	ldbu	r3,-12(fp)
8020fdf4:	10c007c5 	stb	r3,31(r2)
    descriptor->read_stride = read_stride;
8020fdf8:	e0bff817 	ldw	r2,-32(fp)
8020fdfc:	e0fffe0b 	ldhu	r3,-8(fp)
8020fe00:	10c0080d 	sth	r3,32(r2)
    descriptor->write_stride = write_stride;
8020fe04:	e0bff817 	ldw	r2,-32(fp)
8020fe08:	e0ffff0b 	ldhu	r3,-4(fp)
8020fe0c:	10c0088d 	sth	r3,34(r2)
    /* have descriptor point to itself */
    node_addr.u64 = (uintptr_t)descriptor;
8020fe10:	e0bff817 	ldw	r2,-32(fp)
8020fe14:	1019883a 	mov	r12,r2
8020fe18:	001b883a 	mov	r13,zero
8020fe1c:	e33ff515 	stw	r12,-44(fp)
8020fe20:	e37ff615 	stw	r13,-40(fp)
    descriptor->next_desc_ptr_low = node_addr.u32[0];  
8020fe24:	e0fff517 	ldw	r3,-44(fp)
8020fe28:	e0bff817 	ldw	r2,-32(fp)
8020fe2c:	10c00315 	stw	r3,12(r2)
    descriptor->next_desc_ptr_high = node_addr.u32[1];
8020fe30:	e0fff617 	ldw	r3,-40(fp)
8020fe34:	e0bff817 	ldw	r2,-32(fp)
8020fe38:	10c00b15 	stw	r3,44(r2)
    
    /* clear control own_by_hw bit field (SW still owns this descriptor). */
    descriptor->control = (control 
            & ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
            | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
8020fe3c:	e0c00417 	ldw	r3,16(fp)
8020fe40:	00900034 	movhi	r2,16384
8020fe44:	10bfffc4 	addi	r2,r2,-1
8020fe48:	1884703a 	and	r2,r3,r2
8020fe4c:	10e00034 	orhi	r3,r2,32768
    node_addr.u64 = (uintptr_t)descriptor;
    descriptor->next_desc_ptr_low = node_addr.u32[0];  
    descriptor->next_desc_ptr_high = node_addr.u32[1];
    
    /* clear control own_by_hw bit field (SW still owns this descriptor). */
    descriptor->control = (control 
8020fe50:	e0bff817 	ldw	r2,-32(fp)
8020fe54:	10c00f15 	stw	r3,60(r2)
            & ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
            | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;

  return 0 ;
8020fe58:	0005883a 	mov	r2,zero
}
8020fe5c:	e037883a 	mov	sp,fp
8020fe60:	df000017 	ldw	fp,0(sp)
8020fe64:	dec00104 	addi	sp,sp,4
8020fe68:	f800283a 	ret

8020fe6c <alt_msgdma_construct_prefetcher_standard_mm_to_mm_descriptor>:
    alt_msgdma_prefetcher_standard_descriptor *descriptor,
    alt_u32 read_address,
    alt_u32 write_address,
    alt_u32 length,
    alt_u32 control)
{
8020fe6c:	defff804 	addi	sp,sp,-32
8020fe70:	dfc00715 	stw	ra,28(sp)
8020fe74:	df000615 	stw	fp,24(sp)
8020fe78:	df000604 	addi	fp,sp,24
8020fe7c:	e13ffc15 	stw	r4,-16(fp)
8020fe80:	e17ffd15 	stw	r5,-12(fp)
8020fe84:	e1bffe15 	stw	r6,-8(fp)
8020fe88:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
8020fe8c:	e0800317 	ldw	r2,12(fp)
8020fe90:	d8800115 	stw	r2,4(sp)
8020fe94:	e0800217 	ldw	r2,8(fp)
8020fe98:	d8800015 	stw	r2,0(sp)
8020fe9c:	e1ffff17 	ldw	r7,-4(fp)
8020fea0:	e1bffe17 	ldw	r6,-8(fp)
8020fea4:	e17ffd17 	ldw	r5,-12(fp)
8020fea8:	e13ffc17 	ldw	r4,-16(fp)
8020feac:	020fc340 	call	8020fc34 <alt_msgdma_construct_prefetcher_standard_descriptor>
            read_address, write_address, length, control);
}
8020feb0:	e037883a 	mov	sp,fp
8020feb4:	dfc00117 	ldw	ra,4(sp)
8020feb8:	df000017 	ldw	fp,0(sp)
8020febc:	dec00204 	addi	sp,sp,8
8020fec0:	f800283a 	ret

8020fec4 <alt_msgdma_construct_prefetcher_standard_st_to_mm_descriptor>:
    alt_msgdma_dev *dev,
    alt_msgdma_prefetcher_standard_descriptor *descriptor, 
    alt_u32 write_address, 
    alt_u32 length, 
    alt_u32 control)
{
8020fec4:	defff804 	addi	sp,sp,-32
8020fec8:	dfc00715 	stw	ra,28(sp)
8020fecc:	df000615 	stw	fp,24(sp)
8020fed0:	df000604 	addi	fp,sp,24
8020fed4:	e13ffc15 	stw	r4,-16(fp)
8020fed8:	e17ffd15 	stw	r5,-12(fp)
8020fedc:	e1bffe15 	stw	r6,-8(fp)
8020fee0:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
8020fee4:	e0800217 	ldw	r2,8(fp)
8020fee8:	d8800115 	stw	r2,4(sp)
8020feec:	e0bfff17 	ldw	r2,-4(fp)
8020fef0:	d8800015 	stw	r2,0(sp)
8020fef4:	e1fffe17 	ldw	r7,-8(fp)
8020fef8:	000d883a 	mov	r6,zero
8020fefc:	e17ffd17 	ldw	r5,-12(fp)
8020ff00:	e13ffc17 	ldw	r4,-16(fp)
8020ff04:	020fc340 	call	8020fc34 <alt_msgdma_construct_prefetcher_standard_descriptor>
            0, write_address, length, control);
}
8020ff08:	e037883a 	mov	sp,fp
8020ff0c:	dfc00117 	ldw	ra,4(sp)
8020ff10:	df000017 	ldw	fp,0(sp)
8020ff14:	dec00204 	addi	sp,sp,8
8020ff18:	f800283a 	ret

8020ff1c <alt_msgdma_construct_prefetcher_standard_mm_to_st_descriptor>:
    alt_msgdma_dev *dev,
    alt_msgdma_prefetcher_standard_descriptor *descriptor, 
    alt_u32 read_address, 
    alt_u32 length, 
    alt_u32 control)
{
8020ff1c:	defff804 	addi	sp,sp,-32
8020ff20:	dfc00715 	stw	ra,28(sp)
8020ff24:	df000615 	stw	fp,24(sp)
8020ff28:	df000604 	addi	fp,sp,24
8020ff2c:	e13ffc15 	stw	r4,-16(fp)
8020ff30:	e17ffd15 	stw	r5,-12(fp)
8020ff34:	e1bffe15 	stw	r6,-8(fp)
8020ff38:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
8020ff3c:	e0800217 	ldw	r2,8(fp)
8020ff40:	d8800115 	stw	r2,4(sp)
8020ff44:	e0bfff17 	ldw	r2,-4(fp)
8020ff48:	d8800015 	stw	r2,0(sp)
8020ff4c:	000f883a 	mov	r7,zero
8020ff50:	e1bffe17 	ldw	r6,-8(fp)
8020ff54:	e17ffd17 	ldw	r5,-12(fp)
8020ff58:	e13ffc17 	ldw	r4,-16(fp)
8020ff5c:	020fc340 	call	8020fc34 <alt_msgdma_construct_prefetcher_standard_descriptor>
            read_address, 0, length, control);
}
8020ff60:	e037883a 	mov	sp,fp
8020ff64:	dfc00117 	ldw	ra,4(sp)
8020ff68:	df000017 	ldw	fp,0(sp)
8020ff6c:	dec00204 	addi	sp,sp,8
8020ff70:	f800283a 	ret

8020ff74 <alt_msgdma_construct_prefetcher_extended_st_to_mm_descriptor>:
    alt_u32 length, 
    alt_u32 control, 
    alt_u16 sequence_number,
    alt_u8 write_burst_count,
    alt_u16 write_stride)
{
8020ff74:	deffee04 	addi	sp,sp,-72
8020ff78:	dfc01115 	stw	ra,68(sp)
8020ff7c:	df001015 	stw	fp,64(sp)
8020ff80:	df001004 	addi	fp,sp,64
8020ff84:	e13ff915 	stw	r4,-28(fp)
8020ff88:	e17ffa15 	stw	r5,-24(fp)
8020ff8c:	e1bffb15 	stw	r6,-20(fp)
8020ff90:	e1fffc15 	stw	r7,-16(fp)
8020ff94:	e1000417 	ldw	r4,16(fp)
8020ff98:	e0c00517 	ldw	r3,20(fp)
8020ff9c:	e0800617 	ldw	r2,24(fp)
8020ffa0:	e13ffd0d 	sth	r4,-12(fp)
8020ffa4:	e0fffe05 	stb	r3,-8(fp)
8020ffa8:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor, 
8020ffac:	e0bffd0b 	ldhu	r2,-12(fp)
8020ffb0:	e0fffe03 	ldbu	r3,-8(fp)
8020ffb4:	e13fff0b 	ldhu	r4,-4(fp)
8020ffb8:	d9000815 	stw	r4,32(sp)
8020ffbc:	d8000715 	stw	zero,28(sp)
8020ffc0:	d8c00615 	stw	r3,24(sp)
8020ffc4:	d8000515 	stw	zero,20(sp)
8020ffc8:	d8800415 	stw	r2,16(sp)
8020ffcc:	e0800317 	ldw	r2,12(fp)
8020ffd0:	d8800315 	stw	r2,12(sp)
8020ffd4:	e0800217 	ldw	r2,8(fp)
8020ffd8:	d8800215 	stw	r2,8(sp)
8020ffdc:	e0bffc17 	ldw	r2,-16(fp)
8020ffe0:	d8800115 	stw	r2,4(sp)
8020ffe4:	e0bffb17 	ldw	r2,-20(fp)
8020ffe8:	d8800015 	stw	r2,0(sp)
8020ffec:	000f883a 	mov	r7,zero
8020fff0:	000d883a 	mov	r6,zero
8020fff4:	e17ffa17 	ldw	r5,-24(fp)
8020fff8:	e13ff917 	ldw	r4,-28(fp)
8020fffc:	020fcd80 	call	8020fcd8 <alt_msgdma_construct_prefetcher_extended_descriptor>
            0, 0, write_address_high, write_address_low, length, control, 
            sequence_number, 0, write_burst_count, 0, write_stride);
}
80210000:	e037883a 	mov	sp,fp
80210004:	dfc00117 	ldw	ra,4(sp)
80210008:	df000017 	ldw	fp,0(sp)
8021000c:	dec00204 	addi	sp,sp,8
80210010:	f800283a 	ret

80210014 <alt_msgdma_construct_prefetcher_extended_mm_to_st_descriptor>:
    alt_u32 length, 
    alt_u32 control, 
    alt_u16 sequence_number, 
    alt_u8 read_burst_count, 
    alt_u16 read_stride)
{
80210014:	deffee04 	addi	sp,sp,-72
80210018:	dfc01115 	stw	ra,68(sp)
8021001c:	df001015 	stw	fp,64(sp)
80210020:	df001004 	addi	fp,sp,64
80210024:	e13ff915 	stw	r4,-28(fp)
80210028:	e17ffa15 	stw	r5,-24(fp)
8021002c:	e1bffb15 	stw	r6,-20(fp)
80210030:	e1fffc15 	stw	r7,-16(fp)
80210034:	e1000417 	ldw	r4,16(fp)
80210038:	e0c00517 	ldw	r3,20(fp)
8021003c:	e0800617 	ldw	r2,24(fp)
80210040:	e13ffd0d 	sth	r4,-12(fp)
80210044:	e0fffe05 	stb	r3,-8(fp)
80210048:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor,
8021004c:	e0bffd0b 	ldhu	r2,-12(fp)
80210050:	e0fffe03 	ldbu	r3,-8(fp)
80210054:	e13fff0b 	ldhu	r4,-4(fp)
80210058:	d8000815 	stw	zero,32(sp)
8021005c:	d9000715 	stw	r4,28(sp)
80210060:	d8000615 	stw	zero,24(sp)
80210064:	d8c00515 	stw	r3,20(sp)
80210068:	d8800415 	stw	r2,16(sp)
8021006c:	e0800317 	ldw	r2,12(fp)
80210070:	d8800315 	stw	r2,12(sp)
80210074:	e0800217 	ldw	r2,8(fp)
80210078:	d8800215 	stw	r2,8(sp)
8021007c:	d8000115 	stw	zero,4(sp)
80210080:	d8000015 	stw	zero,0(sp)
80210084:	e1fffc17 	ldw	r7,-16(fp)
80210088:	e1bffb17 	ldw	r6,-20(fp)
8021008c:	e17ffa17 	ldw	r5,-24(fp)
80210090:	e13ff917 	ldw	r4,-28(fp)
80210094:	020fcd80 	call	8020fcd8 <alt_msgdma_construct_prefetcher_extended_descriptor>
            read_address_high, read_address_low, 0, 0, length, control, 
            sequence_number, read_burst_count, 0, read_stride, 0);
}
80210098:	e037883a 	mov	sp,fp
8021009c:	dfc00117 	ldw	ra,4(sp)
802100a0:	df000017 	ldw	fp,0(sp)
802100a4:	dec00204 	addi	sp,sp,8
802100a8:	f800283a 	ret

802100ac <alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor>:
    alt_u16 sequence_number,
    alt_u8 read_burst_count,
    alt_u8 write_burst_count, 
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
802100ac:	deffec04 	addi	sp,sp,-80
802100b0:	dfc01315 	stw	ra,76(sp)
802100b4:	df001215 	stw	fp,72(sp)
802100b8:	df001204 	addi	fp,sp,72
802100bc:	e13ff715 	stw	r4,-36(fp)
802100c0:	e17ff815 	stw	r5,-32(fp)
802100c4:	e1bff915 	stw	r6,-28(fp)
802100c8:	e1fffa15 	stw	r7,-24(fp)
802100cc:	e1800617 	ldw	r6,24(fp)
802100d0:	e1400717 	ldw	r5,28(fp)
802100d4:	e1000817 	ldw	r4,32(fp)
802100d8:	e0c00917 	ldw	r3,36(fp)
802100dc:	e0800a17 	ldw	r2,40(fp)
802100e0:	e1bffb0d 	sth	r6,-20(fp)
802100e4:	e17ffc05 	stb	r5,-16(fp)
802100e8:	e13ffd05 	stb	r4,-12(fp)
802100ec:	e0fffe0d 	sth	r3,-8(fp)
802100f0:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor,
802100f4:	e0bffb0b 	ldhu	r2,-20(fp)
802100f8:	e0fffc03 	ldbu	r3,-16(fp)
802100fc:	e13ffd03 	ldbu	r4,-12(fp)
80210100:	e17ffe0b 	ldhu	r5,-8(fp)
80210104:	e1bfff0b 	ldhu	r6,-4(fp)
80210108:	d9800815 	stw	r6,32(sp)
8021010c:	d9400715 	stw	r5,28(sp)
80210110:	d9000615 	stw	r4,24(sp)
80210114:	d8c00515 	stw	r3,20(sp)
80210118:	d8800415 	stw	r2,16(sp)
8021011c:	e0800517 	ldw	r2,20(fp)
80210120:	d8800315 	stw	r2,12(sp)
80210124:	e0800417 	ldw	r2,16(fp)
80210128:	d8800215 	stw	r2,8(sp)
8021012c:	e0800317 	ldw	r2,12(fp)
80210130:	d8800115 	stw	r2,4(sp)
80210134:	e0800217 	ldw	r2,8(fp)
80210138:	d8800015 	stw	r2,0(sp)
8021013c:	e1fffa17 	ldw	r7,-24(fp)
80210140:	e1bff917 	ldw	r6,-28(fp)
80210144:	e17ff817 	ldw	r5,-32(fp)
80210148:	e13ff717 	ldw	r4,-36(fp)
8021014c:	020fcd80 	call	8020fcd8 <alt_msgdma_construct_prefetcher_extended_descriptor>
            read_address_high, read_address_low, write_address_high, 
            write_address_low, length, control, sequence_number, 
            read_burst_count, write_burst_count, read_stride, write_stride);

}
80210150:	e037883a 	mov	sp,fp
80210154:	dfc00117 	ldw	ra,4(sp)
80210158:	df000017 	ldw	fp,0(sp)
8021015c:	dec00204 	addi	sp,sp,8
80210160:	f800283a 	ret

80210164 <alt_msgdma_prefetcher_add_standard_desc_to_list>:
 *           descriptor.next_ptr not pointing back to itslef)
 */
int alt_msgdma_prefetcher_add_standard_desc_to_list (
    alt_msgdma_prefetcher_standard_descriptor** list,
    alt_msgdma_prefetcher_standard_descriptor* descriptor)
{
80210164:	defffc04 	addi	sp,sp,-16
80210168:	df000315 	stw	fp,12(sp)
8021016c:	df000304 	addi	fp,sp,12
80210170:	e13ffe15 	stw	r4,-8(fp)
80210174:	e17fff15 	stw	r5,-4(fp)
    alt_msgdma_prefetcher_standard_descriptor *last_descr_ptr;
    
    if (descriptor == NULL)
80210178:	e0bfff17 	ldw	r2,-4(fp)
8021017c:	1000021e 	bne	r2,zero,80210188 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x24>
    {
        return -EINVAL;  /* this descriptor cannot be NULL */
80210180:	00bffa84 	movi	r2,-22
80210184:	00002f06 	br	80210244 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
    }
    if (descriptor->next_desc_ptr != (alt_u32)descriptor)
80210188:	e0bfff17 	ldw	r2,-4(fp)
8021018c:	10c00317 	ldw	r3,12(r2)
80210190:	e0bfff17 	ldw	r2,-4(fp)
80210194:	18800226 	beq	r3,r2,802101a0 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x3c>
    {
        return -EINVAL;  /* descriptor.next_ptr must point to itself */
80210198:	00bffa84 	movi	r2,-22
8021019c:	00002906 	br	80210244 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
    }
    if (*list == NULL)
802101a0:	e0bffe17 	ldw	r2,-8(fp)
802101a4:	10800017 	ldw	r2,0(r2)
802101a8:	1000051e 	bne	r2,zero,802101c0 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x5c>
    {
        *list = descriptor;  /* make this root-node if list is empty */
802101ac:	e0bffe17 	ldw	r2,-8(fp)
802101b0:	e0ffff17 	ldw	r3,-4(fp)
802101b4:	10c00015 	stw	r3,0(r2)
        return 0;  /* successfully added */
802101b8:	0005883a 	mov	r2,zero
802101bc:	00002106 	br	80210244 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
    }
    if (*list == descriptor)
802101c0:	e0bffe17 	ldw	r2,-8(fp)
802101c4:	10c00017 	ldw	r3,0(r2)
802101c8:	e0bfff17 	ldw	r2,-4(fp)
802101cc:	1880021e 	bne	r3,r2,802101d8 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x74>
    {
        return -EINVAL;  /* this descriptor cannot already be root-node */
802101d0:	00bffa84 	movi	r2,-22
802101d4:	00001b06 	br	80210244 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
    }
    
    /* get to last node in the list */
    last_descr_ptr = *list; /* start at list root-node */
802101d8:	e0bffe17 	ldw	r2,-8(fp)
802101dc:	10800017 	ldw	r2,0(r2)
802101e0:	e0bffd15 	stw	r2,-12(fp)
    /* traverse list until you get the last node */
    while (last_descr_ptr->next_desc_ptr != (alt_u32)*list)  
802101e4:	00000906 	br	8021020c <alt_msgdma_prefetcher_add_standard_desc_to_list+0xa8>
    {
        if (last_descr_ptr->next_desc_ptr == (alt_u32)descriptor)
802101e8:	e0bffd17 	ldw	r2,-12(fp)
802101ec:	10c00317 	ldw	r3,12(r2)
802101f0:	e0bfff17 	ldw	r2,-4(fp)
802101f4:	1880021e 	bne	r3,r2,80210200 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x9c>
        {
            return -EINVAL;  /* descriptor cannot already be in the list */
802101f8:	00bffa84 	movi	r2,-22
802101fc:	00001106 	br	80210244 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
        }
        last_descr_ptr = 
            (alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
80210200:	e0bffd17 	ldw	r2,-12(fp)
80210204:	10800317 	ldw	r2,12(r2)
    {
        if (last_descr_ptr->next_desc_ptr == (alt_u32)descriptor)
        {
            return -EINVAL;  /* descriptor cannot already be in the list */
        }
        last_descr_ptr = 
80210208:	e0bffd15 	stw	r2,-12(fp)
    }
    
    /* get to last node in the list */
    last_descr_ptr = *list; /* start at list root-node */
    /* traverse list until you get the last node */
    while (last_descr_ptr->next_desc_ptr != (alt_u32)*list)  
8021020c:	e0bffd17 	ldw	r2,-12(fp)
80210210:	10800317 	ldw	r2,12(r2)
80210214:	e0fffe17 	ldw	r3,-8(fp)
80210218:	18c00017 	ldw	r3,0(r3)
8021021c:	10fff21e 	bne	r2,r3,802101e8 <__reset+0xfa1f01e8>
        }
        last_descr_ptr = 
            (alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
    }
    /* add this descriptor to end of list */
    last_descr_ptr->next_desc_ptr = (alt_u32)((uintptr_t)descriptor);
80210220:	e0ffff17 	ldw	r3,-4(fp)
80210224:	e0bffd17 	ldw	r2,-12(fp)
80210228:	10c00315 	stw	r3,12(r2)
    /* ensure new last pointer points the start of the list */
    descriptor->next_desc_ptr = (alt_u32)((uintptr_t)*list);  
8021022c:	e0bffe17 	ldw	r2,-8(fp)
80210230:	10800017 	ldw	r2,0(r2)
80210234:	1007883a 	mov	r3,r2
80210238:	e0bfff17 	ldw	r2,-4(fp)
8021023c:	10c00315 	stw	r3,12(r2)
    return 0; /* successfully added */
80210240:	0005883a 	mov	r2,zero
}
80210244:	e037883a 	mov	sp,fp
80210248:	df000017 	ldw	fp,0(sp)
8021024c:	dec00104 	addi	sp,sp,4
80210250:	f800283a 	ret

80210254 <alt_msgdma_prefetcher_add_extended_desc_to_list>:

int alt_msgdma_prefetcher_add_extended_desc_to_list (
    alt_msgdma_prefetcher_extended_descriptor** list,
    alt_msgdma_prefetcher_extended_descriptor* descriptor)
{
80210254:	defff804 	addi	sp,sp,-32
80210258:	df000715 	stw	fp,28(sp)
8021025c:	df000704 	addi	fp,sp,28
80210260:	e13ffe15 	stw	r4,-8(fp)
80210264:	e17fff15 	stw	r5,-4(fp)
    alt_msgdma_prefetcher_extended_descriptor *last_descr_ptr;
    msgdma_addr64 root_node_addr, next_node_addr;
    
    if (descriptor == NULL)
80210268:	e13fff17 	ldw	r4,-4(fp)
8021026c:	2000021e 	bne	r4,zero,80210278 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x24>
    {
        return -EINVAL;  /* this descriptor cannot be NULL */
80210270:	00bffa84 	movi	r2,-22
80210274:	00005906 	br	802103dc <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
    }
    
    next_node_addr.u64 = (uintptr_t)descriptor;
80210278:	e13fff17 	ldw	r4,-4(fp)
8021027c:	2015883a 	mov	r10,r4
80210280:	0017883a 	mov	r11,zero
80210284:	e2bffc15 	stw	r10,-16(fp)
80210288:	e2fffd15 	stw	r11,-12(fp)
    if( (descriptor->next_desc_ptr_low != next_node_addr.u32[0]) ||
8021028c:	e13fff17 	ldw	r4,-4(fp)
80210290:	21400317 	ldw	r5,12(r4)
80210294:	e13ffc17 	ldw	r4,-16(fp)
80210298:	2900041e 	bne	r5,r4,802102ac <alt_msgdma_prefetcher_add_extended_desc_to_list+0x58>
        (descriptor->next_desc_ptr_high != next_node_addr.u32[1]))
8021029c:	e13fff17 	ldw	r4,-4(fp)
802102a0:	21400b17 	ldw	r5,44(r4)
802102a4:	e13ffd17 	ldw	r4,-12(fp)
    {
        return -EINVAL;  /* this descriptor cannot be NULL */
    }
    
    next_node_addr.u64 = (uintptr_t)descriptor;
    if( (descriptor->next_desc_ptr_low != next_node_addr.u32[0]) ||
802102a8:	29000226 	beq	r5,r4,802102b4 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x60>
        (descriptor->next_desc_ptr_high != next_node_addr.u32[1]))
    {
        return -EINVAL;  /* descriptor.next_ptr must point to itself */
802102ac:	00bffa84 	movi	r2,-22
802102b0:	00004a06 	br	802103dc <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
    }
    
    if (*list == NULL)
802102b4:	e13ffe17 	ldw	r4,-8(fp)
802102b8:	21000017 	ldw	r4,0(r4)
802102bc:	2000051e 	bne	r4,zero,802102d4 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x80>
    {
        *list = descriptor;  /* make this the root-node if list is empty */
802102c0:	e0bffe17 	ldw	r2,-8(fp)
802102c4:	e0ffff17 	ldw	r3,-4(fp)
802102c8:	10c00015 	stw	r3,0(r2)
        return 0;
802102cc:	0005883a 	mov	r2,zero
802102d0:	00004206 	br	802103dc <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
    }
    if (*list == descriptor)
802102d4:	e13ffe17 	ldw	r4,-8(fp)
802102d8:	21400017 	ldw	r5,0(r4)
802102dc:	e13fff17 	ldw	r4,-4(fp)
802102e0:	2900021e 	bne	r5,r4,802102ec <alt_msgdma_prefetcher_add_extended_desc_to_list+0x98>
    {
        return -EINVAL;  /* this descriptor cannot already be root-node */
802102e4:	00bffa84 	movi	r2,-22
802102e8:	00003c06 	br	802103dc <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
    }
    
    /* get to last node in the list */
    last_descr_ptr = *list; /* start at list root-node */
802102ec:	e13ffe17 	ldw	r4,-8(fp)
802102f0:	21000017 	ldw	r4,0(r4)
802102f4:	e13ff915 	stw	r4,-28(fp)
    /* the last nodes next ptr should point to the root node*/
    root_node_addr.u64 = (uintptr_t)*list;
802102f8:	e13ffe17 	ldw	r4,-8(fp)
802102fc:	21000017 	ldw	r4,0(r4)
80210300:	2011883a 	mov	r8,r4
80210304:	0013883a 	mov	r9,zero
80210308:	e23ffa15 	stw	r8,-24(fp)
8021030c:	e27ffb15 	stw	r9,-20(fp)
    
    /* traverse list until you get the last node */
    while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
80210310:	00001806 	br	80210374 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x120>
        || (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
    {
        /* first check if descriptor already in the list */
        next_node_addr.u64 = (uintptr_t)descriptor;
80210314:	e13fff17 	ldw	r4,-4(fp)
80210318:	200d883a 	mov	r6,r4
8021031c:	000f883a 	mov	r7,zero
80210320:	e1bffc15 	stw	r6,-16(fp)
80210324:	e1fffd15 	stw	r7,-12(fp)
        if ((last_descr_ptr->next_desc_ptr_low == next_node_addr.u32[0])
80210328:	e13ff917 	ldw	r4,-28(fp)
8021032c:	21400317 	ldw	r5,12(r4)
80210330:	e13ffc17 	ldw	r4,-16(fp)
80210334:	2900061e 	bne	r5,r4,80210350 <alt_msgdma_prefetcher_add_extended_desc_to_list+0xfc>
            && (last_descr_ptr->next_desc_ptr_high == next_node_addr.u32[1]))
80210338:	e13ff917 	ldw	r4,-28(fp)
8021033c:	21400b17 	ldw	r5,44(r4)
80210340:	e13ffd17 	ldw	r4,-12(fp)
80210344:	2900021e 	bne	r5,r4,80210350 <alt_msgdma_prefetcher_add_extended_desc_to_list+0xfc>
        {
            return -EINVAL;  /* descriptor cannot already be in the list */
80210348:	00bffa84 	movi	r2,-22
8021034c:	00002306 	br	802103dc <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
        }
        /* go to next node in list, using 64 bit address */
        next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
80210350:	e13ff917 	ldw	r4,-28(fp)
80210354:	21000317 	ldw	r4,12(r4)
80210358:	e13ffc15 	stw	r4,-16(fp)
        next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
8021035c:	e13ff917 	ldw	r4,-28(fp)
80210360:	21000b17 	ldw	r4,44(r4)
80210364:	e13ffd15 	stw	r4,-12(fp)
        last_descr_ptr = 
            (alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
80210368:	e13ffc17 	ldw	r4,-16(fp)
8021036c:	e17ffd17 	ldw	r5,-12(fp)
            return -EINVAL;  /* descriptor cannot already be in the list */
        }
        /* go to next node in list, using 64 bit address */
        next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
        next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
        last_descr_ptr = 
80210370:	e13ff915 	stw	r4,-28(fp)
    last_descr_ptr = *list; /* start at list root-node */
    /* the last nodes next ptr should point to the root node*/
    root_node_addr.u64 = (uintptr_t)*list;
    
    /* traverse list until you get the last node */
    while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
80210374:	e13ff917 	ldw	r4,-28(fp)
80210378:	21400317 	ldw	r5,12(r4)
8021037c:	e13ffa17 	ldw	r4,-24(fp)
80210380:	293fe41e 	bne	r5,r4,80210314 <__reset+0xfa1f0314>
        || (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
80210384:	e13ff917 	ldw	r4,-28(fp)
80210388:	21400b17 	ldw	r5,44(r4)
8021038c:	e13ffb17 	ldw	r4,-20(fp)
80210390:	293fe01e 	bne	r5,r4,80210314 <__reset+0xfa1f0314>
        next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
        last_descr_ptr = 
            (alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
    }
    /* add this descriptor to end of list */
    next_node_addr.u64 = (uintptr_t)descriptor;
80210394:	e13fff17 	ldw	r4,-4(fp)
80210398:	2005883a 	mov	r2,r4
8021039c:	0007883a 	mov	r3,zero
802103a0:	e0bffc15 	stw	r2,-16(fp)
802103a4:	e0fffd15 	stw	r3,-12(fp)
    last_descr_ptr->next_desc_ptr_low = next_node_addr.u32[0];
802103a8:	e0fffc17 	ldw	r3,-16(fp)
802103ac:	e0bff917 	ldw	r2,-28(fp)
802103b0:	10c00315 	stw	r3,12(r2)
    last_descr_ptr->next_desc_ptr_high = next_node_addr.u32[1];
802103b4:	e0fffd17 	ldw	r3,-12(fp)
802103b8:	e0bff917 	ldw	r2,-28(fp)
802103bc:	10c00b15 	stw	r3,44(r2)
    /* ensure new last pointer points the beginning of the list */
    descriptor->next_desc_ptr_low = root_node_addr.u32[0];
802103c0:	e0fffa17 	ldw	r3,-24(fp)
802103c4:	e0bfff17 	ldw	r2,-4(fp)
802103c8:	10c00315 	stw	r3,12(r2)
    descriptor->next_desc_ptr_high = root_node_addr.u32[1];
802103cc:	e0fffb17 	ldw	r3,-20(fp)
802103d0:	e0bfff17 	ldw	r2,-4(fp)
802103d4:	10c00b15 	stw	r3,44(r2)
    return 0;
802103d8:	0005883a 	mov	r2,zero
}
802103dc:	e037883a 	mov	sp,fp
802103e0:	df000017 	ldw	fp,0(sp)
802103e4:	dec00104 	addi	sp,sp,4
802103e8:	f800283a 	ret

802103ec <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits>:
 */ 
int alt_msgdma_prefetcher_set_std_list_own_by_hw_bits (
    alt_msgdma_prefetcher_standard_descriptor *list,
    alt_u8 last_desc_owned_by_sw,
    alt_u8 dcache_flush_desc_list)    
{
802103ec:	defff804 	addi	sp,sp,-32
802103f0:	dfc00715 	stw	ra,28(sp)
802103f4:	df000615 	stw	fp,24(sp)
802103f8:	df000604 	addi	fp,sp,24
802103fc:	e13ffd15 	stw	r4,-12(fp)
80210400:	2807883a 	mov	r3,r5
80210404:	3005883a 	mov	r2,r6
80210408:	e0fffe05 	stb	r3,-8(fp)
8021040c:	e0bfff05 	stb	r2,-4(fp)
    alt_u32 descriptor_control_field = 0;
80210410:	e03ffc15 	stw	zero,-16(fp)
    alt_msgdma_prefetcher_standard_descriptor *last_descr_ptr;
    alt_u32 descriptor_count = 0;
80210414:	e03ffb15 	stw	zero,-20(fp)
    
    if (list == NULL)
80210418:	e0bffd17 	ldw	r2,-12(fp)
8021041c:	1000021e 	bne	r2,zero,80210428 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x3c>
    {
        return -EINVAL;  /* this list cannot be empty */
80210420:	00bffa84 	movi	r2,-22
80210424:	00002f06 	br	802104e4 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0xf8>
    }

    /* update all nodes in the list */
    last_descr_ptr = list; /* start at list root-node */
80210428:	e0bffd17 	ldw	r2,-12(fp)
8021042c:	e0bffa15 	stw	r2,-24(fp)
    /* traverse list to update all of the nodes */
    while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
80210430:	00000d06 	br	80210468 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x7c>
    {
        /* get current value */
        descriptor_control_field = last_descr_ptr->control;
80210434:	e0bffa17 	ldw	r2,-24(fp)
80210438:	10800717 	ldw	r2,28(r2)
8021043c:	e0bffc15 	stw	r2,-16(fp)
        /* update own_by_hw bit only */
        last_descr_ptr->control = descriptor_control_field 
                | ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
80210440:	e0bffc17 	ldw	r2,-16(fp)
80210444:	10d00034 	orhi	r3,r2,16384
    while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
    {
        /* get current value */
        descriptor_control_field = last_descr_ptr->control;
        /* update own_by_hw bit only */
        last_descr_ptr->control = descriptor_control_field 
80210448:	e0bffa17 	ldw	r2,-24(fp)
8021044c:	10c00715 	stw	r3,28(r2)
                | ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
        /* go to next node in list */
        last_descr_ptr = 
            (alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
80210450:	e0bffa17 	ldw	r2,-24(fp)
80210454:	10800317 	ldw	r2,12(r2)
        descriptor_control_field = last_descr_ptr->control;
        /* update own_by_hw bit only */
        last_descr_ptr->control = descriptor_control_field 
                | ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
        /* go to next node in list */
        last_descr_ptr = 
80210458:	e0bffa15 	stw	r2,-24(fp)
            (alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
            
        descriptor_count++;
8021045c:	e0bffb17 	ldw	r2,-20(fp)
80210460:	10800044 	addi	r2,r2,1
80210464:	e0bffb15 	stw	r2,-20(fp)
    }

    /* update all nodes in the list */
    last_descr_ptr = list; /* start at list root-node */
    /* traverse list to update all of the nodes */
    while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
80210468:	e0bffa17 	ldw	r2,-24(fp)
8021046c:	10c00317 	ldw	r3,12(r2)
80210470:	e0bffd17 	ldw	r2,-12(fp)
80210474:	18bfef1e 	bne	r3,r2,80210434 <__reset+0xfa1f0434>
            (alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
            
        descriptor_count++;
    }
    /* update the last node in the list, currently last_descr_ptr after while loop */
    descriptor_control_field = last_descr_ptr->control;    /* get current value */
80210478:	e0bffa17 	ldw	r2,-24(fp)
8021047c:	10800717 	ldw	r2,28(r2)
80210480:	e0bffc15 	stw	r2,-16(fp)
    /* update own_by_hw bit only */
    if (last_desc_owned_by_sw)
80210484:	e0bffe03 	ldbu	r2,-8(fp)
80210488:	10000726 	beq	r2,zero,802104a8 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0xbc>
    {
        last_descr_ptr->control = descriptor_control_field 
            & ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK;
8021048c:	e0fffc17 	ldw	r3,-16(fp)
80210490:	00b00034 	movhi	r2,49152
80210494:	10bfffc4 	addi	r2,r2,-1
80210498:	1886703a 	and	r3,r3,r2
    /* update the last node in the list, currently last_descr_ptr after while loop */
    descriptor_control_field = last_descr_ptr->control;    /* get current value */
    /* update own_by_hw bit only */
    if (last_desc_owned_by_sw)
    {
        last_descr_ptr->control = descriptor_control_field 
8021049c:	e0bffa17 	ldw	r2,-24(fp)
802104a0:	10c00715 	stw	r3,28(r2)
802104a4:	00000406 	br	802104b8 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0xcc>
            & ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK;
    }
    else {
        last_descr_ptr->control = descriptor_control_field 
            | ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;        
802104a8:	e0bffc17 	ldw	r2,-16(fp)
802104ac:	10d00034 	orhi	r3,r2,16384
    {
        last_descr_ptr->control = descriptor_control_field 
            & ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK;
    }
    else {
        last_descr_ptr->control = descriptor_control_field 
802104b0:	e0bffa17 	ldw	r2,-24(fp)
802104b4:	10c00715 	stw	r3,28(r2)
            | ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;        
    }
    
    descriptor_count++;
802104b8:	e0bffb17 	ldw	r2,-20(fp)
802104bc:	10800044 	addi	r2,r2,1
802104c0:	e0bffb15 	stw	r2,-20(fp)
    
    if (dcache_flush_desc_list)
802104c4:	e0bfff03 	ldbu	r2,-4(fp)
802104c8:	10000526 	beq	r2,zero,802104e0 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0xf4>
    {        
        alt_dcache_flush(list,sizeof(alt_msgdma_prefetcher_standard_descriptor) * descriptor_count);
802104cc:	e0bffb17 	ldw	r2,-20(fp)
802104d0:	1004917a 	slli	r2,r2,5
802104d4:	100b883a 	mov	r5,r2
802104d8:	e13ffd17 	ldw	r4,-12(fp)
802104dc:	0210fb00 	call	80210fb0 <alt_dcache_flush>
    }
    
    return 0;
802104e0:	0005883a 	mov	r2,zero
}
802104e4:	e037883a 	mov	sp,fp
802104e8:	dfc00117 	ldw	ra,4(sp)
802104ec:	df000017 	ldw	fp,0(sp)
802104f0:	dec00204 	addi	sp,sp,8
802104f4:	f800283a 	ret

802104f8 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits>:
 */    
int alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits (
    alt_msgdma_prefetcher_extended_descriptor *list,
    alt_u8 last_desc_owned_by_sw,
    alt_u8 dcache_flush_desc_list) 
{    
802104f8:	defff404 	addi	sp,sp,-48
802104fc:	dfc00b15 	stw	ra,44(sp)
80210500:	df000a15 	stw	fp,40(sp)
80210504:	df000a04 	addi	fp,sp,40
80210508:	e13ffd15 	stw	r4,-12(fp)
8021050c:	3009883a 	mov	r4,r6
80210510:	e17ffe05 	stb	r5,-8(fp)
80210514:	e13fff05 	stb	r4,-4(fp)
    alt_u32 descriptor_control_field = 0;
80210518:	e03ff815 	stw	zero,-32(fp)
    msgdma_addr64 root_node_addr, next_node_addr;
    alt_msgdma_prefetcher_extended_descriptor *last_descr_ptr;
    alt_u32 descriptor_count = 0;
8021051c:	e03ff715 	stw	zero,-36(fp)
    
    if (list == NULL)
80210520:	e13ffd17 	ldw	r4,-12(fp)
80210524:	2000021e 	bne	r4,zero,80210530 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x38>
    {
        return -EINVAL;  /* this list cannot be empty */
80210528:	00bffa84 	movi	r2,-22
8021052c:	00003e06 	br	80210628 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x130>
    }
    
    /* update all nodes in the list */
    last_descr_ptr = list; /* start at list root-node */
80210530:	e13ffd17 	ldw	r4,-12(fp)
80210534:	e13ff615 	stw	r4,-40(fp)
    /* the last nodes next ptr should point to the root node*/
    root_node_addr.u64 = (uintptr_t)list;
80210538:	e13ffd17 	ldw	r4,-12(fp)
8021053c:	2005883a 	mov	r2,r4
80210540:	0007883a 	mov	r3,zero
80210544:	e0bff915 	stw	r2,-28(fp)
80210548:	e0fffa15 	stw	r3,-24(fp)

    /* traverse list until you get the last node */
    while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
8021054c:	00001306 	br	8021059c <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0xa4>
        || (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
    {
        /* start with current value */
        descriptor_control_field = last_descr_ptr->control;
80210550:	e0bff617 	ldw	r2,-40(fp)
80210554:	10800f17 	ldw	r2,60(r2)
80210558:	e0bff815 	stw	r2,-32(fp)
        /* update own_by_hw bit only */
        last_descr_ptr->control = descriptor_control_field 
                | ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
8021055c:	e0bff817 	ldw	r2,-32(fp)
80210560:	10d00034 	orhi	r3,r2,16384
        || (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
    {
        /* start with current value */
        descriptor_control_field = last_descr_ptr->control;
        /* update own_by_hw bit only */
        last_descr_ptr->control = descriptor_control_field 
80210564:	e0bff617 	ldw	r2,-40(fp)
80210568:	10c00f15 	stw	r3,60(r2)
                | ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
        /* go to next node in list, using 64 bit address */
        next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
8021056c:	e0bff617 	ldw	r2,-40(fp)
80210570:	10800317 	ldw	r2,12(r2)
80210574:	e0bffb15 	stw	r2,-20(fp)
        next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
80210578:	e0bff617 	ldw	r2,-40(fp)
8021057c:	10800b17 	ldw	r2,44(r2)
80210580:	e0bffc15 	stw	r2,-16(fp)
        last_descr_ptr = 
            (alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
80210584:	e0bffb17 	ldw	r2,-20(fp)
80210588:	e0fffc17 	ldw	r3,-16(fp)
        last_descr_ptr->control = descriptor_control_field 
                | ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
        /* go to next node in list, using 64 bit address */
        next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
        next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
        last_descr_ptr = 
8021058c:	e0bff615 	stw	r2,-40(fp)
            (alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
        descriptor_count++;            
80210590:	e0bff717 	ldw	r2,-36(fp)
80210594:	10800044 	addi	r2,r2,1
80210598:	e0bff715 	stw	r2,-36(fp)
    last_descr_ptr = list; /* start at list root-node */
    /* the last nodes next ptr should point to the root node*/
    root_node_addr.u64 = (uintptr_t)list;

    /* traverse list until you get the last node */
    while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
8021059c:	e0bff617 	ldw	r2,-40(fp)
802105a0:	10c00317 	ldw	r3,12(r2)
802105a4:	e0bff917 	ldw	r2,-28(fp)
802105a8:	18bfe91e 	bne	r3,r2,80210550 <__reset+0xfa1f0550>
        || (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
802105ac:	e0bff617 	ldw	r2,-40(fp)
802105b0:	10c00b17 	ldw	r3,44(r2)
802105b4:	e0bffa17 	ldw	r2,-24(fp)
802105b8:	18bfe51e 	bne	r3,r2,80210550 <__reset+0xfa1f0550>
        last_descr_ptr = 
            (alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
        descriptor_count++;            
    }
    /* update the last node in the list, currently last_descr_ptr after while loop */
    descriptor_control_field = last_descr_ptr->control;    /* start with current value */
802105bc:	e0bff617 	ldw	r2,-40(fp)
802105c0:	10800f17 	ldw	r2,60(r2)
802105c4:	e0bff815 	stw	r2,-32(fp)
    /* update own_by_hw bit only */
    if (last_desc_owned_by_sw)
802105c8:	e0bffe03 	ldbu	r2,-8(fp)
802105cc:	10000726 	beq	r2,zero,802105ec <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0xf4>
    {
        last_descr_ptr->control = descriptor_control_field 
            & ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK;
802105d0:	e0fff817 	ldw	r3,-32(fp)
802105d4:	00b00034 	movhi	r2,49152
802105d8:	10bfffc4 	addi	r2,r2,-1
802105dc:	1886703a 	and	r3,r3,r2
    /* update the last node in the list, currently last_descr_ptr after while loop */
    descriptor_control_field = last_descr_ptr->control;    /* start with current value */
    /* update own_by_hw bit only */
    if (last_desc_owned_by_sw)
    {
        last_descr_ptr->control = descriptor_control_field 
802105e0:	e0bff617 	ldw	r2,-40(fp)
802105e4:	10c00f15 	stw	r3,60(r2)
802105e8:	00000406 	br	802105fc <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x104>
            & ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK;
    }
    else {
        last_descr_ptr->control = descriptor_control_field 
            | ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;        
802105ec:	e0bff817 	ldw	r2,-32(fp)
802105f0:	10d00034 	orhi	r3,r2,16384
    {
        last_descr_ptr->control = descriptor_control_field 
            & ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK;
    }
    else {
        last_descr_ptr->control = descriptor_control_field 
802105f4:	e0bff617 	ldw	r2,-40(fp)
802105f8:	10c00f15 	stw	r3,60(r2)
            | ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;        
    }
    
    descriptor_count++;
802105fc:	e0bff717 	ldw	r2,-36(fp)
80210600:	10800044 	addi	r2,r2,1
80210604:	e0bff715 	stw	r2,-36(fp)
    
    if (dcache_flush_desc_list)
80210608:	e0bfff03 	ldbu	r2,-4(fp)
8021060c:	10000526 	beq	r2,zero,80210624 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x12c>
    {        
        alt_dcache_flush(list,sizeof(alt_msgdma_prefetcher_extended_descriptor) * descriptor_count);        
80210610:	e0bff717 	ldw	r2,-36(fp)
80210614:	100491ba 	slli	r2,r2,6
80210618:	100b883a 	mov	r5,r2
8021061c:	e13ffd17 	ldw	r4,-12(fp)
80210620:	0210fb00 	call	80210fb0 <alt_dcache_flush>
    }
    
    return 0;
80210624:	0005883a 	mov	r2,zero
}
80210628:	e037883a 	mov	sp,fp
8021062c:	dfc00117 	ldw	ra,4(sp)
80210630:	df000017 	ldw	fp,0(sp)
80210634:	dec00204 	addi	sp,sp,8
80210638:	f800283a 	ret

8021063c <alt_msgdma_start_prefetcher_with_list_addr>:
int alt_msgdma_start_prefetcher_with_list_addr (
    alt_msgdma_dev *dev,
    alt_u64  list_addr,
    alt_u8 park_mode_en,
    alt_u8 poll_en)
{
8021063c:	deffef04 	addi	sp,sp,-68
80210640:	df001015 	stw	fp,64(sp)
80210644:	df001004 	addi	fp,sp,64
80210648:	e13ffb15 	stw	r4,-20(fp)
8021064c:	e17ffc15 	stw	r5,-16(fp)
80210650:	e1bffd15 	stw	r6,-12(fp)
80210654:	3807883a 	mov	r3,r7
80210658:	e0800117 	ldw	r2,4(fp)
8021065c:	e0fffe05 	stb	r3,-8(fp)
80210660:	e0bfff05 	stb	r2,-4(fp)
    alt_u32 prefetcher_ctl = 0;
80210664:	e03ff015 	stw	zero,-64(fp)
    alt_u32 dispatcher_ctl = 0;
80210668:	e03ff115 	stw	zero,-60(fp)
    alt_irq_context context = 0;
8021066c:	e03ff215 	stw	zero,-56(fp)
    
    /* use helper struct to get easy access to hi/low address */
    msgdma_addr64 root_node_addr;
    root_node_addr.u64 = list_addr;  
80210670:	e0bffc17 	ldw	r2,-16(fp)
80210674:	e0bff915 	stw	r2,-28(fp)
80210678:	e0bffd17 	ldw	r2,-12(fp)
8021067c:	e0bffa15 	stw	r2,-24(fp)
     * semaphore. This ensures that accessing registers is thread-safe.
     */
    ALT_SEM_PEND (dev->regs_lock, 0);
    
    /* case where prefetcher already started, return busy error */ 
    prefetcher_ctl = IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base);
80210680:	e0bffb17 	ldw	r2,-20(fp)
80210684:	10800617 	ldw	r2,24(r2)
80210688:	10800037 	ldwio	r2,0(r2)
8021068c:	e0bff015 	stw	r2,-64(fp)
    if(ALT_MSGDMA_PREFETCHER_CTRL_RUN_GET(prefetcher_ctl)){
80210690:	e0bff017 	ldw	r2,-64(fp)
80210694:	1080004c 	andi	r2,r2,1
80210698:	10000226 	beq	r2,zero,802106a4 <alt_msgdma_start_prefetcher_with_list_addr+0x68>
        /* release the registers semaphore */
        ALT_SEM_POST (dev->regs_lock);
        return -EBUSY;
8021069c:	00bffc04 	movi	r2,-16
802106a0:	00009206 	br	802108ec <alt_msgdma_start_prefetcher_with_list_addr+0x2b0>
    }
        
    /* Stop the msgdma dispatcher from issuing more descriptors to the
       read or write masters  */
    /* stop issuing more descriptors */
    dispatcher_ctl = ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
802106a4:	00800804 	movi	r2,32
802106a8:	e0bff115 	stw	r2,-60(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
802106ac:	0005303a 	rdctl	r2,status
802106b0:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
802106b4:	e0fff517 	ldw	r3,-44(fp)
802106b8:	00bfff84 	movi	r2,-2
802106bc:	1884703a 	and	r2,r3,r2
802106c0:	1001703a 	wrctl	status,r2
  
  return context;
802106c4:	e0bff517 	ldw	r2,-44(fp)
    
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();
802106c8:	e0bff215 	stw	r2,-56(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
802106cc:	e0bffb17 	ldw	r2,-20(fp)
802106d0:	10800317 	ldw	r2,12(r2)
802106d4:	10800104 	addi	r2,r2,4
802106d8:	e0fff117 	ldw	r3,-60(fp)
802106dc:	10c00035 	stwio	r3,0(r2)
    /*
     * Clear any (previous) status register information
     * that might occlude our error checking later.
     */
    IOWR_ALTERA_MSGDMA_CSR_STATUS( dev->csr_base, 
802106e0:	e0bffb17 	ldw	r2,-20(fp)
802106e4:	10800317 	ldw	r2,12(r2)
802106e8:	e0fffb17 	ldw	r3,-20(fp)
802106ec:	18c00317 	ldw	r3,12(r3)
802106f0:	18c00037 	ldwio	r3,0(r3)
802106f4:	10c00035 	stwio	r3,0(r2)
802106f8:	e0bff217 	ldw	r2,-56(fp)
802106fc:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80210700:	e0bff317 	ldw	r2,-52(fp)
80210704:	1001703a 	wrctl	status,r2
     * If a callback routine has been previously registered which will be
     * called from the msgdma ISR. Set up dispatcher to:
     *  - Run
     *  - Stop on an error with any particular descriptor
     */
    if(dev->callback)
80210708:	e0bffb17 	ldw	r2,-20(fp)
8021070c:	10800b17 	ldw	r2,44(r2)
80210710:	10002326 	beq	r2,zero,802107a0 <alt_msgdma_start_prefetcher_with_list_addr+0x164>
    {
        dispatcher_ctl |= (dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK 
80210714:	e0bffb17 	ldw	r2,-20(fp)
80210718:	10c00d17 	ldw	r3,52(r2)
8021071c:	e0bff117 	ldw	r2,-60(fp)
80210720:	1884b03a 	or	r2,r3,r2
80210724:	10800514 	ori	r2,r2,20
80210728:	e0bff115 	stw	r2,-60(fp)
                | ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK );
        dispatcher_ctl &=  (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
8021072c:	e0fff117 	ldw	r3,-60(fp)
80210730:	00bff7c4 	movi	r2,-33
80210734:	1884703a 	and	r2,r3,r2
80210738:	e0bff115 	stw	r2,-60(fp)
        
        prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
8021073c:	e0bff017 	ldw	r2,-64(fp)
80210740:	10800214 	ori	r2,r2,8
80210744:	e0bff015 	stw	r2,-64(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80210748:	0005303a 	rdctl	r2,status
8021074c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80210750:	e0fff717 	ldw	r3,-36(fp)
80210754:	00bfff84 	movi	r2,-2
80210758:	1884703a 	and	r2,r3,r2
8021075c:	1001703a 	wrctl	status,r2
  
  return context;
80210760:	e0bff717 	ldw	r2,-36(fp)
        /* making sure the read-modify-write below can't be pre-empted */
        context = alt_irq_disable_all(); 
80210764:	e0bff215 	stw	r2,-56(fp)
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
80210768:	e0bffb17 	ldw	r2,-20(fp)
8021076c:	10800317 	ldw	r2,12(r2)
80210770:	10800104 	addi	r2,r2,4
80210774:	e0fff117 	ldw	r3,-60(fp)
80210778:	10c00035 	stwio	r3,0(r2)
        IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
8021077c:	e0bffb17 	ldw	r2,-20(fp)
80210780:	10800617 	ldw	r2,24(r2)
80210784:	e0fff017 	ldw	r3,-64(fp)
80210788:	10c00035 	stwio	r3,0(r2)
8021078c:	e0bff217 	ldw	r2,-56(fp)
80210790:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80210794:	e0bff417 	ldw	r2,-48(fp)
80210798:	1001703a 	wrctl	status,r2
8021079c:	00002306 	br	8021082c <alt_msgdma_start_prefetcher_with_list_addr+0x1f0>
      *   - Stop on an error with any particular descriptor
      *   - Disable interrupt generation
      */
     else
     {
         dispatcher_ctl |= (dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK);
802107a0:	e0bffb17 	ldw	r2,-20(fp)
802107a4:	10c00d17 	ldw	r3,52(r2)
802107a8:	e0bff117 	ldw	r2,-60(fp)
802107ac:	1884b03a 	or	r2,r3,r2
802107b0:	10800114 	ori	r2,r2,4
802107b4:	e0bff115 	stw	r2,-60(fp)
         dispatcher_ctl &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) 
802107b8:	e0fff117 	ldw	r3,-60(fp)
802107bc:	00bff3c4 	movi	r2,-49
802107c0:	1884703a 	and	r2,r3,r2
802107c4:	e0bff115 	stw	r2,-60(fp)
                 & (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
         prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_CLR_MASK;
802107c8:	e0fff017 	ldw	r3,-64(fp)
802107cc:	00bffdc4 	movi	r2,-9
802107d0:	1884703a 	and	r2,r3,r2
802107d4:	e0bff015 	stw	r2,-64(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
802107d8:	0005303a 	rdctl	r2,status
802107dc:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
802107e0:	e0fff817 	ldw	r3,-32(fp)
802107e4:	00bfff84 	movi	r2,-2
802107e8:	1884703a 	and	r2,r3,r2
802107ec:	1001703a 	wrctl	status,r2
  
  return context;
802107f0:	e0bff817 	ldw	r2,-32(fp)
         /* making sure the read-modify-write below can't be pre-empted */
         context = alt_irq_disable_all();
802107f4:	e0bff215 	stw	r2,-56(fp)
         IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
802107f8:	e0bffb17 	ldw	r2,-20(fp)
802107fc:	10800317 	ldw	r2,12(r2)
80210800:	10800104 	addi	r2,r2,4
80210804:	e0fff117 	ldw	r3,-60(fp)
80210808:	10c00035 	stwio	r3,0(r2)
         IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
8021080c:	e0bffb17 	ldw	r2,-20(fp)
80210810:	10800617 	ldw	r2,24(r2)
80210814:	e0fff017 	ldw	r3,-64(fp)
80210818:	10c00035 	stwio	r3,0(r2)
8021081c:	e0bff217 	ldw	r2,-56(fp)
80210820:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80210824:	e0bff617 	ldw	r2,-40(fp)
80210828:	1001703a 	wrctl	status,r2
         alt_irq_enable_all(context);
     }   
    
     /* set next descriptor registers to point to the list root-node */
     IOWR_ALT_MSGDMA_PREFETCHER_NEXT_DESCRIPTOR_PTR_LOW(dev->prefetcher_base,
8021082c:	e0bffb17 	ldw	r2,-20(fp)
80210830:	10800617 	ldw	r2,24(r2)
80210834:	10800104 	addi	r2,r2,4
80210838:	e0fff917 	ldw	r3,-28(fp)
8021083c:	10c00035 	stwio	r3,0(r2)
             root_node_addr.u32[0]);
     IOWR_ALT_MSGDMA_PREFETCHER_NEXT_DESCRIPTOR_PTR_HIGH(dev->prefetcher_base,
80210840:	e0bffb17 	ldw	r2,-20(fp)
80210844:	10800617 	ldw	r2,24(r2)
80210848:	10800204 	addi	r2,r2,8
8021084c:	e0fffa17 	ldw	r3,-24(fp)
80210850:	10c00035 	stwio	r3,0(r2)
             root_node_addr.u32[1]);
        
     /* set park-mode */
     if (park_mode_en){
80210854:	e0bffe03 	ldbu	r2,-8(fp)
80210858:	10000426 	beq	r2,zero,8021086c <alt_msgdma_start_prefetcher_with_list_addr+0x230>
         prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_SET_MASK;
8021085c:	e0bff017 	ldw	r2,-64(fp)
80210860:	10800414 	ori	r2,r2,16
80210864:	e0bff015 	stw	r2,-64(fp)
80210868:	00000406 	br	8021087c <alt_msgdma_start_prefetcher_with_list_addr+0x240>
     }
     else {
         prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_CLR_MASK;
8021086c:	e0fff017 	ldw	r3,-64(fp)
80210870:	00bffbc4 	movi	r2,-17
80210874:	1884703a 	and	r2,r3,r2
80210878:	e0bff015 	stw	r2,-64(fp)
     }
     
     /* set poll-en */
     if (poll_en){
8021087c:	e0bfff03 	ldbu	r2,-4(fp)
80210880:	10000e26 	beq	r2,zero,802108bc <alt_msgdma_start_prefetcher_with_list_addr+0x280>
         prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_DESC_POLL_EN_MASK; 
80210884:	e0bff017 	ldw	r2,-64(fp)
80210888:	10800094 	ori	r2,r2,2
8021088c:	e0bff015 	stw	r2,-64(fp)
         if(IORD_ALT_MSGDMA_PREFETCHER_DESCRIPTOR_POLLING_FREQ(
80210890:	e0bffb17 	ldw	r2,-20(fp)
80210894:	10800617 	ldw	r2,24(r2)
80210898:	10800304 	addi	r2,r2,12
8021089c:	10800037 	ldwio	r2,0(r2)
802108a0:	10000a1e 	bne	r2,zero,802108cc <alt_msgdma_start_prefetcher_with_list_addr+0x290>
                 dev->prefetcher_base) == 0){
             /* set poll frequency to some non-zero default value */
             IOWR_ALT_MSGDMA_PREFETCHER_DESCRIPTOR_POLLING_FREQ(
802108a4:	e0bffb17 	ldw	r2,-20(fp)
802108a8:	10800617 	ldw	r2,24(r2)
802108ac:	10800304 	addi	r2,r2,12
802108b0:	00c03fc4 	movi	r3,255
802108b4:	10c00035 	stwio	r3,0(r2)
802108b8:	00000406 	br	802108cc <alt_msgdma_start_prefetcher_with_list_addr+0x290>
                     dev->prefetcher_base, 0xFF);
         }
     }
     else {
         prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_DESC_POLL_EN_CLR_MASK; 
802108bc:	e0fff017 	ldw	r3,-64(fp)
802108c0:	00bfff44 	movi	r2,-3
802108c4:	1884703a 	and	r2,r3,r2
802108c8:	e0bff015 	stw	r2,-64(fp)
     }
     
     /* set the prefetcher run bit */
     prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_RUN_SET_MASK;
802108cc:	e0bff017 	ldw	r2,-64(fp)
802108d0:	10800054 	ori	r2,r2,1
802108d4:	e0bff015 	stw	r2,-64(fp)
     /* start the dma since run bit is set */
     IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
802108d8:	e0bffb17 	ldw	r2,-20(fp)
802108dc:	10800617 	ldw	r2,24(r2)
802108e0:	e0fff017 	ldw	r3,-64(fp)
802108e4:	10c00035 	stwio	r3,0(r2)
      * Now that access to the registers is complete, release the registers
      * semaphore so that other threads can access the registers.
      */
     ALT_SEM_POST (dev->regs_lock);
     
     return 0;
802108e8:	0005883a 	mov	r2,zero
}
802108ec:	e037883a 	mov	sp,fp
802108f0:	df000017 	ldw	fp,0(sp)
802108f4:	dec00104 	addi	sp,sp,4
802108f8:	f800283a 	ret

802108fc <alt_msgdma_start_prefetcher_with_std_desc_list>:
    alt_msgdma_prefetcher_standard_descriptor *list,
    alt_u8 park_mode_en,
    alt_u8 poll_en,
    alt_u8 last_desc_owned_by_sw,
    alt_u8 dcache_flush_desc_list)
{    
802108fc:	defff504 	addi	sp,sp,-44
80210900:	dfc00a15 	stw	ra,40(sp)
80210904:	df000915 	stw	fp,36(sp)
80210908:	dc400815 	stw	r17,32(sp)
8021090c:	dc000715 	stw	r16,28(sp)
80210910:	df000904 	addi	fp,sp,36
80210914:	e13ff815 	stw	r4,-32(fp)
80210918:	e17ff915 	stw	r5,-28(fp)
8021091c:	300b883a 	mov	r5,r6
80210920:	3809883a 	mov	r4,r7
80210924:	e0c00217 	ldw	r3,8(fp)
80210928:	e0800317 	ldw	r2,12(fp)
8021092c:	e17ffa05 	stb	r5,-24(fp)
80210930:	e13ffb05 	stb	r4,-20(fp)
80210934:	e0fffc05 	stb	r3,-16(fp)
80210938:	e0bffd05 	stb	r2,-12(fp)
    if (alt_msgdma_prefetcher_set_std_list_own_by_hw_bits(list,last_desc_owned_by_sw,dcache_flush_desc_list) != 0)
8021093c:	e0bffc03 	ldbu	r2,-16(fp)
80210940:	e0fffd03 	ldbu	r3,-12(fp)
80210944:	180d883a 	mov	r6,r3
80210948:	100b883a 	mov	r5,r2
8021094c:	e13ff917 	ldw	r4,-28(fp)
80210950:	02103ec0 	call	802103ec <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits>
80210954:	10000226 	beq	r2,zero,80210960 <alt_msgdma_start_prefetcher_with_std_desc_list+0x64>
    {
        return -EINVAL;
80210958:	00bffa84 	movi	r2,-22
8021095c:	00000b06 	br	8021098c <alt_msgdma_start_prefetcher_with_std_desc_list+0x90>
    }

    return alt_msgdma_start_prefetcher_with_list_addr (dev, (uintptr_t)list,
80210960:	e0bff917 	ldw	r2,-28(fp)
80210964:	1021883a 	mov	r16,r2
80210968:	0023883a 	mov	r17,zero
8021096c:	e0fffa03 	ldbu	r3,-24(fp)
80210970:	e0bffb03 	ldbu	r2,-20(fp)
80210974:	d8800015 	stw	r2,0(sp)
80210978:	180f883a 	mov	r7,r3
8021097c:	800b883a 	mov	r5,r16
80210980:	880d883a 	mov	r6,r17
80210984:	e13ff817 	ldw	r4,-32(fp)
80210988:	021063c0 	call	8021063c <alt_msgdma_start_prefetcher_with_list_addr>
            park_mode_en, poll_en);
}
8021098c:	e6fffe04 	addi	sp,fp,-8
80210990:	dfc00317 	ldw	ra,12(sp)
80210994:	df000217 	ldw	fp,8(sp)
80210998:	dc400117 	ldw	r17,4(sp)
8021099c:	dc000017 	ldw	r16,0(sp)
802109a0:	dec00404 	addi	sp,sp,16
802109a4:	f800283a 	ret

802109a8 <alt_msgdma_start_prefetcher_with_extd_desc_list>:
    alt_msgdma_prefetcher_extended_descriptor *list,
    alt_u8 park_mode_en,
    alt_u8 poll_en,
    alt_u8 last_desc_owned_by_sw,
    alt_u8 dcache_flush_desc_list)
{
802109a8:	defff504 	addi	sp,sp,-44
802109ac:	dfc00a15 	stw	ra,40(sp)
802109b0:	df000915 	stw	fp,36(sp)
802109b4:	dc400815 	stw	r17,32(sp)
802109b8:	dc000715 	stw	r16,28(sp)
802109bc:	df000904 	addi	fp,sp,36
802109c0:	e13ff815 	stw	r4,-32(fp)
802109c4:	e17ff915 	stw	r5,-28(fp)
802109c8:	300b883a 	mov	r5,r6
802109cc:	3809883a 	mov	r4,r7
802109d0:	e0c00217 	ldw	r3,8(fp)
802109d4:	e0800317 	ldw	r2,12(fp)
802109d8:	e17ffa05 	stb	r5,-24(fp)
802109dc:	e13ffb05 	stb	r4,-20(fp)
802109e0:	e0fffc05 	stb	r3,-16(fp)
802109e4:	e0bffd05 	stb	r2,-12(fp)
    
     if (alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits(list,last_desc_owned_by_sw,dcache_flush_desc_list) != 0)
802109e8:	e0bffc03 	ldbu	r2,-16(fp)
802109ec:	e0fffd03 	ldbu	r3,-12(fp)
802109f0:	180d883a 	mov	r6,r3
802109f4:	100b883a 	mov	r5,r2
802109f8:	e13ff917 	ldw	r4,-28(fp)
802109fc:	02104f80 	call	802104f8 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits>
80210a00:	10000226 	beq	r2,zero,80210a0c <alt_msgdma_start_prefetcher_with_extd_desc_list+0x64>
    {
        return -EINVAL;
80210a04:	00bffa84 	movi	r2,-22
80210a08:	00000b06 	br	80210a38 <alt_msgdma_start_prefetcher_with_extd_desc_list+0x90>
    }
        
    return alt_msgdma_start_prefetcher_with_list_addr (dev, (uintptr_t)list, 
80210a0c:	e0bff917 	ldw	r2,-28(fp)
80210a10:	1021883a 	mov	r16,r2
80210a14:	0023883a 	mov	r17,zero
80210a18:	e0fffa03 	ldbu	r3,-24(fp)
80210a1c:	e0bffb03 	ldbu	r2,-20(fp)
80210a20:	d8800015 	stw	r2,0(sp)
80210a24:	180f883a 	mov	r7,r3
80210a28:	800b883a 	mov	r5,r16
80210a2c:	880d883a 	mov	r6,r17
80210a30:	e13ff817 	ldw	r4,-32(fp)
80210a34:	021063c0 	call	8021063c <alt_msgdma_start_prefetcher_with_list_addr>
            park_mode_en, poll_en);
}
80210a38:	e6fffe04 	addi	sp,fp,-8
80210a3c:	dfc00317 	ldw	ra,12(sp)
80210a40:	df000217 	ldw	fp,8(sp)
80210a44:	dc400117 	ldw	r17,4(sp)
80210a48:	dc000017 	ldw	r16,0(sp)
80210a4c:	dec00404 	addi	sp,sp,16
80210a50:	f800283a 	ret

80210a54 <alt_msgdma_open>:
 * Returns:
 * - Pointer to msgdma device instance structure, or null if the device
 *   could not be opened.
 */
alt_msgdma_dev* alt_msgdma_open (const char* name)
{
80210a54:	defffc04 	addi	sp,sp,-16
80210a58:	dfc00315 	stw	ra,12(sp)
80210a5c:	df000215 	stw	fp,8(sp)
80210a60:	df000204 	addi	fp,sp,8
80210a64:	e13fff15 	stw	r4,-4(fp)
    alt_msgdma_dev* dev = NULL;
80210a68:	e03ffe15 	stw	zero,-8(fp)

    dev = (alt_msgdma_dev*) alt_find_dev (name, &alt_msgdma_list);
80210a6c:	d1600d04 	addi	r5,gp,-32716
80210a70:	e13fff17 	ldw	r4,-4(fp)
80210a74:	02111780 	call	80211178 <alt_find_dev>
80210a78:	e0bffe15 	stw	r2,-8(fp)

    if (NULL == dev)
80210a7c:	e0bffe17 	ldw	r2,-8(fp)
80210a80:	1000041e 	bne	r2,zero,80210a94 <alt_msgdma_open+0x40>
    {
        ALT_ERRNO = ENODEV;
80210a84:	020edbc0 	call	8020edbc <alt_get_errno>
80210a88:	1007883a 	mov	r3,r2
80210a8c:	008004c4 	movi	r2,19
80210a90:	18800015 	stw	r2,0(r3)
    }

    return dev;
80210a94:	e0bffe17 	ldw	r2,-8(fp)
}
80210a98:	e037883a 	mov	sp,fp
80210a9c:	dfc00117 	ldw	ra,4(sp)
80210aa0:	df000017 	ldw	fp,0(sp)
80210aa4:	dec00204 	addi	sp,sp,8
80210aa8:	f800283a 	ret

80210aac <alt_msgdma_init>:
 * This routine disables interrupts, descriptor processing,
 * registers a specific instance of the device with the HAL,
 * and installs an interrupt handler for the device.
 */
void alt_msgdma_init (alt_msgdma_dev *dev, alt_u32 ic_id, alt_u32 irq)
{
80210aac:	defff804 	addi	sp,sp,-32
80210ab0:	dfc00715 	stw	ra,28(sp)
80210ab4:	df000615 	stw	fp,24(sp)
80210ab8:	df000604 	addi	fp,sp,24
80210abc:	e13ffd15 	stw	r4,-12(fp)
80210ac0:	e17ffe15 	stw	r5,-8(fp)
80210ac4:	e1bfff15 	stw	r6,-4(fp)
    extern alt_llist alt_msgdma_list;
    alt_u32 temporary_control;
    int error;

    if (dev->prefetcher_enable)
80210ac8:	e0bffd17 	ldw	r2,-12(fp)
80210acc:	10801783 	ldbu	r2,94(r2)
80210ad0:	10803fcc 	andi	r2,r2,255
80210ad4:	10000b26 	beq	r2,zero,80210b04 <alt_msgdma_init+0x58>
    {
        /* start prefetcher reset sequence */
        IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, 
80210ad8:	e0bffd17 	ldw	r2,-12(fp)
80210adc:	10800617 	ldw	r2,24(r2)
80210ae0:	00c00104 	movi	r3,4
80210ae4:	10c00035 	stwio	r3,0(r2)
                ALT_MSGDMA_PREFETCHER_CTRL_RESET_SET_MASK);
        /* wait until hw clears the bit */
        while(ALT_MSGDMA_PREFETCHER_CTRL_RESET_GET(
80210ae8:	0001883a 	nop
80210aec:	e0bffd17 	ldw	r2,-12(fp)
80210af0:	10800617 	ldw	r2,24(r2)
80210af4:	10800037 	ldwio	r2,0(r2)
80210af8:	1080010c 	andi	r2,r2,4
80210afc:	1005d0ba 	srai	r2,r2,2
80210b00:	103ffa1e 	bne	r2,zero,80210aec <__reset+0xfa1f0aec>
    }    
    
    /* Reset the registers and FIFOs of the dispatcher and master modules */
    /* set the reset bit, no need to read the control register first since 
    this write is going to clear it out */
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
80210b04:	e0bffd17 	ldw	r2,-12(fp)
80210b08:	10800317 	ldw	r2,12(r2)
80210b0c:	10800104 	addi	r2,r2,4
80210b10:	00c00084 	movi	r3,2
80210b14:	10c00035 	stwio	r3,0(r2)
    while(0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base)
80210b18:	0001883a 	nop
80210b1c:	e0bffd17 	ldw	r2,-12(fp)
80210b20:	10800317 	ldw	r2,12(r2)
80210b24:	10800037 	ldwio	r2,0(r2)
            & ALTERA_MSGDMA_CSR_RESET_STATE_MASK));
80210b28:	1080100c 	andi	r2,r2,64
    
    /* Reset the registers and FIFOs of the dispatcher and master modules */
    /* set the reset bit, no need to read the control register first since 
    this write is going to clear it out */
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
    while(0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base)
80210b2c:	103ffb1e 	bne	r2,zero,80210b1c <__reset+0xfa1f0b1c>
    * Disable interrupts, halt descriptor processing,
    * and clear status register content
    */

    /* disable global interrupt */
    temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base)
80210b30:	e0bffd17 	ldw	r2,-12(fp)
80210b34:	10800317 	ldw	r2,12(r2)
80210b38:	10800104 	addi	r2,r2,4
80210b3c:	10800037 	ldwio	r2,0(r2)
80210b40:	1007883a 	mov	r3,r2
80210b44:	00bffbc4 	movi	r2,-17
80210b48:	1884703a 	and	r2,r3,r2
80210b4c:	e0bffb15 	stw	r2,-20(fp)
            & (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    /* stopping descriptor */
    temporary_control |= ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
80210b50:	e0bffb17 	ldw	r2,-20(fp)
80210b54:	10800814 	ori	r2,r2,32
80210b58:	e0bffb15 	stw	r2,-20(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
80210b5c:	e0bffd17 	ldw	r2,-12(fp)
80210b60:	10800317 	ldw	r2,12(r2)
80210b64:	10800104 	addi	r2,r2,4
80210b68:	e0fffb17 	ldw	r3,-20(fp)
80210b6c:	10c00035 	stwio	r3,0(r2)

    /* clear the CSR status register */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base, 
80210b70:	e0bffd17 	ldw	r2,-12(fp)
80210b74:	10800317 	ldw	r2,12(r2)
80210b78:	e0fffd17 	ldw	r3,-12(fp)
80210b7c:	18c00317 	ldw	r3,12(r3)
80210b80:	18c00037 	ldwio	r3,0(r3)
80210b84:	10c00035 	stwio	r3,0(r2)
            IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
    
    if (dev->prefetcher_enable)
80210b88:	e0bffd17 	ldw	r2,-12(fp)
80210b8c:	10801783 	ldbu	r2,94(r2)
80210b90:	10803fcc 	andi	r2,r2,255
80210b94:	10000826 	beq	r2,zero,80210bb8 <alt_msgdma_init+0x10c>
    {
        /* clear all status bits that are set, since theyre W1C */
        IOWR_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base, 
80210b98:	e0bffd17 	ldw	r2,-12(fp)
80210b9c:	10800617 	ldw	r2,24(r2)
80210ba0:	10800404 	addi	r2,r2,16
80210ba4:	e0fffd17 	ldw	r3,-12(fp)
80210ba8:	18c00617 	ldw	r3,24(r3)
80210bac:	18c00404 	addi	r3,r3,16
80210bb0:	18c00037 	ldwio	r3,0(r3)
80210bb4:	10c00035 	stwio	r3,0(r2)
                IORD_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base));
    }

    /* Register this instance of the msgdma controller with HAL */
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_msgdma_list);
80210bb8:	d1600d04 	addi	r5,gp,-32716
80210bbc:	e13ffd17 	ldw	r4,-12(fp)
80210bc0:	02110140 	call	80211014 <alt_dev_llist_insert>
80210bc4:	0005883a 	mov	r2,zero

    /*
     * Creating semaphores used to protect access to the registers 
     * when running in a multi-threaded environment.
     */
    error = ALT_SEM_CREATE (&dev->regs_lock, 1);
80210bc8:	e0bffc15 	stw	r2,-16(fp)
            
    if (!error)
80210bcc:	e0bffc17 	ldw	r2,-16(fp)
80210bd0:	1000081e 	bne	r2,zero,80210bf4 <alt_msgdma_init+0x148>
    {        
        /* Install IRQ handler */
        alt_ic_isr_register(ic_id, irq, alt_msgdma_irq, dev, 0x0);
80210bd4:	d8000015 	stw	zero,0(sp)
80210bd8:	e1fffd17 	ldw	r7,-12(fp)
80210bdc:	01a00874 	movhi	r6,32801
80210be0:	31bbee04 	addi	r6,r6,-4168
80210be4:	e17fff17 	ldw	r5,-4(fp)
80210be8:	e13ffe17 	ldw	r4,-8(fp)
80210bec:	02112080 	call	80211208 <alt_ic_isr_register>
    else
    {
        alt_printf("failed to create semaphores\n");
    }
    
    return;
80210bf0:	00000406 	br	80210c04 <alt_msgdma_init+0x158>
        /* Install IRQ handler */
        alt_ic_isr_register(ic_id, irq, alt_msgdma_irq, dev, 0x0);
    }
    else
    {
        alt_printf("failed to create semaphores\n");
80210bf4:	01200874 	movhi	r4,32801
80210bf8:	2109f504 	addi	r4,r4,10196
80210bfc:	021183c0 	call	8021183c <alt_printf>
    }
    
    return;
80210c00:	0001883a 	nop

}
80210c04:	e037883a 	mov	sp,fp
80210c08:	dfc00117 	ldw	ra,4(sp)
80210c0c:	df000017 	ldw	fp,0(sp)
80210c10:	dec00204 	addi	sp,sp,8
80210c14:	f800283a 	ret

80210c18 <alt_msgdma_register_callback>:
void alt_msgdma_register_callback(
    alt_msgdma_dev *dev,
    alt_msgdma_callback callback,
    alt_u32 control,
    void *context)
{
80210c18:	defffb04 	addi	sp,sp,-20
80210c1c:	df000415 	stw	fp,16(sp)
80210c20:	df000404 	addi	fp,sp,16
80210c24:	e13ffc15 	stw	r4,-16(fp)
80210c28:	e17ffd15 	stw	r5,-12(fp)
80210c2c:	e1bffe15 	stw	r6,-8(fp)
80210c30:	e1ffff15 	stw	r7,-4(fp)
    dev->callback         = callback;
80210c34:	e0bffc17 	ldw	r2,-16(fp)
80210c38:	e0fffd17 	ldw	r3,-12(fp)
80210c3c:	10c00b15 	stw	r3,44(r2)
    dev->callback_context = context;
80210c40:	e0bffc17 	ldw	r2,-16(fp)
80210c44:	e0ffff17 	ldw	r3,-4(fp)
80210c48:	10c00c15 	stw	r3,48(r2)
    dev->control          = control;
80210c4c:	e0bffc17 	ldw	r2,-16(fp)
80210c50:	e0fffe17 	ldw	r3,-8(fp)
80210c54:	10c00d15 	stw	r3,52(r2)

    return ;
80210c58:	0001883a 	nop
}
80210c5c:	e037883a 	mov	sp,fp
80210c60:	df000017 	ldw	fp,0(sp)
80210c64:	dec00104 	addi	sp,sp,4
80210c68:	f800283a 	ret

80210c6c <alt_msgdma_standard_descriptor_async_transfer>:
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
int alt_msgdma_standard_descriptor_async_transfer(
    alt_msgdma_dev *dev,
    alt_msgdma_standard_descriptor *desc)
{
80210c6c:	defffc04 	addi	sp,sp,-16
80210c70:	dfc00315 	stw	ra,12(sp)
80210c74:	df000215 	stw	fp,8(sp)
80210c78:	df000204 	addi	fp,sp,8
80210c7c:	e13ffe15 	stw	r4,-8(fp)
80210c80:	e17fff15 	stw	r5,-4(fp)
   /*
   * Error detection/handling should be performed at the application
   * or callback level as appropriate.
   */
    return alt_msgdma_descriptor_async_transfer(dev, desc, NULL);
80210c84:	000d883a 	mov	r6,zero
80210c88:	e17fff17 	ldw	r5,-4(fp)
80210c8c:	e13ffe17 	ldw	r4,-8(fp)
80210c90:	020f31c0 	call	8020f31c <alt_msgdma_descriptor_async_transfer>

}
80210c94:	e037883a 	mov	sp,fp
80210c98:	dfc00117 	ldw	ra,4(sp)
80210c9c:	df000017 	ldw	fp,0(sp)
80210ca0:	dec00204 	addi	sp,sp,8
80210ca4:	f800283a 	ret

80210ca8 <alt_msgdma_extended_descriptor_async_transfer>:
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
int alt_msgdma_extended_descriptor_async_transfer(
    alt_msgdma_dev *dev,
    alt_msgdma_extended_descriptor *desc)
{
80210ca8:	defffc04 	addi	sp,sp,-16
80210cac:	dfc00315 	stw	ra,12(sp)
80210cb0:	df000215 	stw	fp,8(sp)
80210cb4:	df000204 	addi	fp,sp,8
80210cb8:	e13ffe15 	stw	r4,-8(fp)
80210cbc:	e17fff15 	stw	r5,-4(fp)
    /*
    * Error detection/handling should be performed at the application
    * or callback level as appropriate.
    */
    return alt_msgdma_descriptor_async_transfer(dev, NULL, desc);
80210cc0:	e1bfff17 	ldw	r6,-4(fp)
80210cc4:	000b883a 	mov	r5,zero
80210cc8:	e13ffe17 	ldw	r4,-8(fp)
80210ccc:	020f31c0 	call	8020f31c <alt_msgdma_descriptor_async_transfer>
}
80210cd0:	e037883a 	mov	sp,fp
80210cd4:	dfc00117 	ldw	ra,4(sp)
80210cd8:	df000017 	ldw	fp,0(sp)
80210cdc:	dec00204 	addi	sp,sp,8
80210ce0:	f800283a 	ret

80210ce4 <alt_msgdma_standard_descriptor_sync_transfer>:
 *           return -ETIME (Time out and skipping the looping after 5 msec)
 */
int alt_msgdma_standard_descriptor_sync_transfer(
    alt_msgdma_dev *dev,
    alt_msgdma_standard_descriptor *desc)
{
80210ce4:	defffc04 	addi	sp,sp,-16
80210ce8:	dfc00315 	stw	ra,12(sp)
80210cec:	df000215 	stw	fp,8(sp)
80210cf0:	df000204 	addi	fp,sp,8
80210cf4:	e13ffe15 	stw	r4,-8(fp)
80210cf8:	e17fff15 	stw	r5,-4(fp)
    return alt_msgdma_descriptor_sync_transfer(dev, desc, NULL);
80210cfc:	000d883a 	mov	r6,zero
80210d00:	e17fff17 	ldw	r5,-4(fp)
80210d04:	e13ffe17 	ldw	r4,-8(fp)
80210d08:	020f5ec0 	call	8020f5ec <alt_msgdma_descriptor_sync_transfer>
}
80210d0c:	e037883a 	mov	sp,fp
80210d10:	dfc00117 	ldw	ra,4(sp)
80210d14:	df000017 	ldw	fp,0(sp)
80210d18:	dec00204 	addi	sp,sp,8
80210d1c:	f800283a 	ret

80210d20 <alt_msgdma_extended_descriptor_sync_transfer>:
 *           return -ETIME (Time out and skipping the looping after 5 msec)
 */
int alt_msgdma_extended_descriptor_sync_transfer(
    alt_msgdma_dev *dev,
    alt_msgdma_extended_descriptor *desc)
{
80210d20:	defffc04 	addi	sp,sp,-16
80210d24:	dfc00315 	stw	ra,12(sp)
80210d28:	df000215 	stw	fp,8(sp)
80210d2c:	df000204 	addi	fp,sp,8
80210d30:	e13ffe15 	stw	r4,-8(fp)
80210d34:	e17fff15 	stw	r5,-4(fp)
    return alt_msgdma_descriptor_sync_transfer(dev, NULL, desc);
80210d38:	e1bfff17 	ldw	r6,-4(fp)
80210d3c:	000b883a 	mov	r5,zero
80210d40:	e13ffe17 	ldw	r4,-8(fp)
80210d44:	020f5ec0 	call	8020f5ec <alt_msgdma_descriptor_sync_transfer>
}
80210d48:	e037883a 	mov	sp,fp
80210d4c:	dfc00117 	ldw	ra,4(sp)
80210d50:	df000017 	ldw	fp,0(sp)
80210d54:	dec00204 	addi	sp,sp,8
80210d58:	f800283a 	ret

80210d5c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
80210d5c:	defff504 	addi	sp,sp,-44
80210d60:	df000a15 	stw	fp,40(sp)
80210d64:	df000a04 	addi	fp,sp,40
80210d68:	e13ffc15 	stw	r4,-16(fp)
80210d6c:	e17ffd15 	stw	r5,-12(fp)
80210d70:	e1bffe15 	stw	r6,-8(fp)
80210d74:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
80210d78:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
80210d7c:	d0a01e17 	ldw	r2,-32648(gp)
  
  if (alt_ticks_per_second ())
80210d80:	10003c26 	beq	r2,zero,80210e74 <alt_alarm_start+0x118>
  {
    if (alarm)
80210d84:	e0bffc17 	ldw	r2,-16(fp)
80210d88:	10003826 	beq	r2,zero,80210e6c <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
80210d8c:	e0bffc17 	ldw	r2,-16(fp)
80210d90:	e0fffe17 	ldw	r3,-8(fp)
80210d94:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
80210d98:	e0bffc17 	ldw	r2,-16(fp)
80210d9c:	e0ffff17 	ldw	r3,-4(fp)
80210da0:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80210da4:	0005303a 	rdctl	r2,status
80210da8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80210dac:	e0fff917 	ldw	r3,-28(fp)
80210db0:	00bfff84 	movi	r2,-2
80210db4:	1884703a 	and	r2,r3,r2
80210db8:	1001703a 	wrctl	status,r2
  
  return context;
80210dbc:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
80210dc0:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
80210dc4:	d0a01f17 	ldw	r2,-32644(gp)
      
      current_nticks = alt_nticks();
80210dc8:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
80210dcc:	e0fffd17 	ldw	r3,-12(fp)
80210dd0:	e0bff617 	ldw	r2,-40(fp)
80210dd4:	1885883a 	add	r2,r3,r2
80210dd8:	10c00044 	addi	r3,r2,1
80210ddc:	e0bffc17 	ldw	r2,-16(fp)
80210de0:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
80210de4:	e0bffc17 	ldw	r2,-16(fp)
80210de8:	10c00217 	ldw	r3,8(r2)
80210dec:	e0bff617 	ldw	r2,-40(fp)
80210df0:	1880042e 	bgeu	r3,r2,80210e04 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
80210df4:	e0bffc17 	ldw	r2,-16(fp)
80210df8:	00c00044 	movi	r3,1
80210dfc:	10c00405 	stb	r3,16(r2)
80210e00:	00000206 	br	80210e0c <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
80210e04:	e0bffc17 	ldw	r2,-16(fp)
80210e08:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
80210e0c:	e0bffc17 	ldw	r2,-16(fp)
80210e10:	d0e01004 	addi	r3,gp,-32704
80210e14:	e0fffa15 	stw	r3,-24(fp)
80210e18:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
80210e1c:	e0bffb17 	ldw	r2,-20(fp)
80210e20:	e0fffa17 	ldw	r3,-24(fp)
80210e24:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
80210e28:	e0bffa17 	ldw	r2,-24(fp)
80210e2c:	10c00017 	ldw	r3,0(r2)
80210e30:	e0bffb17 	ldw	r2,-20(fp)
80210e34:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
80210e38:	e0bffa17 	ldw	r2,-24(fp)
80210e3c:	10800017 	ldw	r2,0(r2)
80210e40:	e0fffb17 	ldw	r3,-20(fp)
80210e44:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
80210e48:	e0bffa17 	ldw	r2,-24(fp)
80210e4c:	e0fffb17 	ldw	r3,-20(fp)
80210e50:	10c00015 	stw	r3,0(r2)
80210e54:	e0bff817 	ldw	r2,-32(fp)
80210e58:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80210e5c:	e0bff717 	ldw	r2,-36(fp)
80210e60:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
80210e64:	0005883a 	mov	r2,zero
80210e68:	00000306 	br	80210e78 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
80210e6c:	00bffa84 	movi	r2,-22
80210e70:	00000106 	br	80210e78 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
80210e74:	00bfde84 	movi	r2,-134
  }
}
80210e78:	e037883a 	mov	sp,fp
80210e7c:	df000017 	ldw	fp,0(sp)
80210e80:	dec00104 	addi	sp,sp,4
80210e84:	f800283a 	ret

80210e88 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
80210e88:	defffb04 	addi	sp,sp,-20
80210e8c:	df000415 	stw	fp,16(sp)
80210e90:	df000404 	addi	fp,sp,16
80210e94:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
80210e98:	008000c4 	movi	r2,3
80210e9c:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
80210ea0:	e0fffd17 	ldw	r3,-12(fp)
80210ea4:	008003f4 	movhi	r2,15
80210ea8:	10909004 	addi	r2,r2,16960
80210eac:	1887383a 	mul	r3,r3,r2
80210eb0:	00817db4 	movhi	r2,1526
80210eb4:	10b84004 	addi	r2,r2,-7936
80210eb8:	10c7203a 	divu	r3,r2,r3
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
80210ebc:	00a00034 	movhi	r2,32768
80210ec0:	10bfffc4 	addi	r2,r2,-1
80210ec4:	10c5203a 	divu	r2,r2,r3
80210ec8:	e0ffff17 	ldw	r3,-4(fp)
80210ecc:	1885203a 	divu	r2,r3,r2
80210ed0:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
80210ed4:	e0bffe17 	ldw	r2,-8(fp)
80210ed8:	10002526 	beq	r2,zero,80210f70 <alt_busy_sleep+0xe8>
  {
    for(i=0;i<big_loops;i++)
80210edc:	e03ffc15 	stw	zero,-16(fp)
80210ee0:	00001406 	br	80210f34 <alt_busy_sleep+0xac>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
80210ee4:	00a00034 	movhi	r2,32768
80210ee8:	10bfffc4 	addi	r2,r2,-1
80210eec:	10bfffc4 	addi	r2,r2,-1
80210ef0:	103ffe1e 	bne	r2,zero,80210eec <__reset+0xfa1f0eec>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
80210ef4:	e0fffd17 	ldw	r3,-12(fp)
80210ef8:	008003f4 	movhi	r2,15
80210efc:	10909004 	addi	r2,r2,16960
80210f00:	1887383a 	mul	r3,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
80210f04:	00817db4 	movhi	r2,1526
80210f08:	10b84004 	addi	r2,r2,-7936
80210f0c:	10c7203a 	divu	r3,r2,r3
80210f10:	00a00034 	movhi	r2,32768
80210f14:	10bfffc4 	addi	r2,r2,-1
80210f18:	10c5203a 	divu	r2,r2,r3
80210f1c:	e0ffff17 	ldw	r3,-4(fp)
80210f20:	1885c83a 	sub	r2,r3,r2
80210f24:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
80210f28:	e0bffc17 	ldw	r2,-16(fp)
80210f2c:	10800044 	addi	r2,r2,1
80210f30:	e0bffc15 	stw	r2,-16(fp)
80210f34:	e0fffc17 	ldw	r3,-16(fp)
80210f38:	e0bffe17 	ldw	r2,-8(fp)
80210f3c:	18bfe916 	blt	r3,r2,80210ee4 <__reset+0xfa1f0ee4>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
80210f40:	e0fffd17 	ldw	r3,-12(fp)
80210f44:	008003f4 	movhi	r2,15
80210f48:	10909004 	addi	r2,r2,16960
80210f4c:	1887383a 	mul	r3,r3,r2
80210f50:	00817db4 	movhi	r2,1526
80210f54:	10b84004 	addi	r2,r2,-7936
80210f58:	10c7203a 	divu	r3,r2,r3
80210f5c:	e0bfff17 	ldw	r2,-4(fp)
80210f60:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
80210f64:	10bfffc4 	addi	r2,r2,-1
80210f68:	103ffe1e 	bne	r2,zero,80210f64 <__reset+0xfa1f0f64>
80210f6c:	00000b06 	br	80210f9c <alt_busy_sleep+0x114>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
80210f70:	e0fffd17 	ldw	r3,-12(fp)
80210f74:	008003f4 	movhi	r2,15
80210f78:	10909004 	addi	r2,r2,16960
80210f7c:	1887383a 	mul	r3,r3,r2
80210f80:	00817db4 	movhi	r2,1526
80210f84:	10b84004 	addi	r2,r2,-7936
80210f88:	10c7203a 	divu	r3,r2,r3
80210f8c:	e0bfff17 	ldw	r2,-4(fp)
80210f90:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
80210f94:	10bfffc4 	addi	r2,r2,-1
80210f98:	00bffe16 	blt	zero,r2,80210f94 <__reset+0xfa1f0f94>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
80210f9c:	0005883a 	mov	r2,zero
}
80210fa0:	e037883a 	mov	sp,fp
80210fa4:	df000017 	ldw	fp,0(sp)
80210fa8:	dec00104 	addi	sp,sp,4
80210fac:	f800283a 	ret

80210fb0 <alt_dcache_flush>:
 *
 * Any dirty lines in the data cache are written back to memory.
 */

void alt_dcache_flush (void* start, alt_u32 len)
{
80210fb0:	defffd04 	addi	sp,sp,-12
80210fb4:	df000215 	stw	fp,8(sp)
80210fb8:	df000204 	addi	fp,sp,8
80210fbc:	e13ffe15 	stw	r4,-8(fp)
80210fc0:	e17fff15 	stw	r5,-4(fp)
  {
    ALT_FLUSH_DATA(i);
  }

#endif /* NIOS2_DCACHE_SIZE > 0 */
}
80210fc4:	0001883a 	nop
80210fc8:	e037883a 	mov	sp,fp
80210fcc:	df000017 	ldw	fp,0(sp)
80210fd0:	dec00104 	addi	sp,sp,4
80210fd4:	f800283a 	ret

80210fd8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
80210fd8:	defffe04 	addi	sp,sp,-8
80210fdc:	dfc00115 	stw	ra,4(sp)
80210fe0:	df000015 	stw	fp,0(sp)
80210fe4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
80210fe8:	d0a00b17 	ldw	r2,-32724(gp)
80210fec:	10000326 	beq	r2,zero,80210ffc <alt_get_errno+0x24>
80210ff0:	d0a00b17 	ldw	r2,-32724(gp)
80210ff4:	103ee83a 	callr	r2
80210ff8:	00000106 	br	80211000 <alt_get_errno+0x28>
80210ffc:	d0a01904 	addi	r2,gp,-32668
}
80211000:	e037883a 	mov	sp,fp
80211004:	dfc00117 	ldw	ra,4(sp)
80211008:	df000017 	ldw	fp,0(sp)
8021100c:	dec00204 	addi	sp,sp,8
80211010:	f800283a 	ret

80211014 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
80211014:	defffa04 	addi	sp,sp,-24
80211018:	dfc00515 	stw	ra,20(sp)
8021101c:	df000415 	stw	fp,16(sp)
80211020:	df000404 	addi	fp,sp,16
80211024:	e13ffe15 	stw	r4,-8(fp)
80211028:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
8021102c:	e0bffe17 	ldw	r2,-8(fp)
80211030:	10000326 	beq	r2,zero,80211040 <alt_dev_llist_insert+0x2c>
80211034:	e0bffe17 	ldw	r2,-8(fp)
80211038:	10800217 	ldw	r2,8(r2)
8021103c:	1000061e 	bne	r2,zero,80211058 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
80211040:	0210fd80 	call	80210fd8 <alt_get_errno>
80211044:	1007883a 	mov	r3,r2
80211048:	00800584 	movi	r2,22
8021104c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
80211050:	00bffa84 	movi	r2,-22
80211054:	00001306 	br	802110a4 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
80211058:	e0bffe17 	ldw	r2,-8(fp)
8021105c:	e0ffff17 	ldw	r3,-4(fp)
80211060:	e0fffc15 	stw	r3,-16(fp)
80211064:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
80211068:	e0bffd17 	ldw	r2,-12(fp)
8021106c:	e0fffc17 	ldw	r3,-16(fp)
80211070:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
80211074:	e0bffc17 	ldw	r2,-16(fp)
80211078:	10c00017 	ldw	r3,0(r2)
8021107c:	e0bffd17 	ldw	r2,-12(fp)
80211080:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
80211084:	e0bffc17 	ldw	r2,-16(fp)
80211088:	10800017 	ldw	r2,0(r2)
8021108c:	e0fffd17 	ldw	r3,-12(fp)
80211090:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
80211094:	e0bffc17 	ldw	r2,-16(fp)
80211098:	e0fffd17 	ldw	r3,-12(fp)
8021109c:	10c00015 	stw	r3,0(r2)

  return 0;  
802110a0:	0005883a 	mov	r2,zero
}
802110a4:	e037883a 	mov	sp,fp
802110a8:	dfc00117 	ldw	ra,4(sp)
802110ac:	df000017 	ldw	fp,0(sp)
802110b0:	dec00204 	addi	sp,sp,8
802110b4:	f800283a 	ret

802110b8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
802110b8:	defffd04 	addi	sp,sp,-12
802110bc:	dfc00215 	stw	ra,8(sp)
802110c0:	df000115 	stw	fp,4(sp)
802110c4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
802110c8:	00a00874 	movhi	r2,32801
802110cc:	10889104 	addi	r2,r2,8772
802110d0:	e0bfff15 	stw	r2,-4(fp)
802110d4:	00000606 	br	802110f0 <_do_ctors+0x38>
        (*ctor) (); 
802110d8:	e0bfff17 	ldw	r2,-4(fp)
802110dc:	10800017 	ldw	r2,0(r2)
802110e0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
802110e4:	e0bfff17 	ldw	r2,-4(fp)
802110e8:	10bfff04 	addi	r2,r2,-4
802110ec:	e0bfff15 	stw	r2,-4(fp)
802110f0:	e0ffff17 	ldw	r3,-4(fp)
802110f4:	00a00874 	movhi	r2,32801
802110f8:	10889204 	addi	r2,r2,8776
802110fc:	18bff62e 	bgeu	r3,r2,802110d8 <__reset+0xfa1f10d8>
        (*ctor) (); 
}
80211100:	0001883a 	nop
80211104:	e037883a 	mov	sp,fp
80211108:	dfc00117 	ldw	ra,4(sp)
8021110c:	df000017 	ldw	fp,0(sp)
80211110:	dec00204 	addi	sp,sp,8
80211114:	f800283a 	ret

80211118 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
80211118:	defffd04 	addi	sp,sp,-12
8021111c:	dfc00215 	stw	ra,8(sp)
80211120:	df000115 	stw	fp,4(sp)
80211124:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
80211128:	00a00874 	movhi	r2,32801
8021112c:	10889104 	addi	r2,r2,8772
80211130:	e0bfff15 	stw	r2,-4(fp)
80211134:	00000606 	br	80211150 <_do_dtors+0x38>
        (*dtor) (); 
80211138:	e0bfff17 	ldw	r2,-4(fp)
8021113c:	10800017 	ldw	r2,0(r2)
80211140:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
80211144:	e0bfff17 	ldw	r2,-4(fp)
80211148:	10bfff04 	addi	r2,r2,-4
8021114c:	e0bfff15 	stw	r2,-4(fp)
80211150:	e0ffff17 	ldw	r3,-4(fp)
80211154:	00a00874 	movhi	r2,32801
80211158:	10889204 	addi	r2,r2,8776
8021115c:	18bff62e 	bgeu	r3,r2,80211138 <__reset+0xfa1f1138>
        (*dtor) (); 
}
80211160:	0001883a 	nop
80211164:	e037883a 	mov	sp,fp
80211168:	dfc00117 	ldw	ra,4(sp)
8021116c:	df000017 	ldw	fp,0(sp)
80211170:	dec00204 	addi	sp,sp,8
80211174:	f800283a 	ret

80211178 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
80211178:	defffa04 	addi	sp,sp,-24
8021117c:	dfc00515 	stw	ra,20(sp)
80211180:	df000415 	stw	fp,16(sp)
80211184:	df000404 	addi	fp,sp,16
80211188:	e13ffe15 	stw	r4,-8(fp)
8021118c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
80211190:	e0bfff17 	ldw	r2,-4(fp)
80211194:	10800017 	ldw	r2,0(r2)
80211198:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
8021119c:	e13ffe17 	ldw	r4,-8(fp)
802111a0:	02007ac0 	call	802007ac <strlen>
802111a4:	10800044 	addi	r2,r2,1
802111a8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
802111ac:	00000d06 	br	802111e4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
802111b0:	e0bffc17 	ldw	r2,-16(fp)
802111b4:	10800217 	ldw	r2,8(r2)
802111b8:	e0fffd17 	ldw	r3,-12(fp)
802111bc:	180d883a 	mov	r6,r3
802111c0:	e17ffe17 	ldw	r5,-8(fp)
802111c4:	1009883a 	mov	r4,r2
802111c8:	0211f000 	call	80211f00 <memcmp>
802111cc:	1000021e 	bne	r2,zero,802111d8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
802111d0:	e0bffc17 	ldw	r2,-16(fp)
802111d4:	00000706 	br	802111f4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
802111d8:	e0bffc17 	ldw	r2,-16(fp)
802111dc:	10800017 	ldw	r2,0(r2)
802111e0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
802111e4:	e0fffc17 	ldw	r3,-16(fp)
802111e8:	e0bfff17 	ldw	r2,-4(fp)
802111ec:	18bff01e 	bne	r3,r2,802111b0 <__reset+0xfa1f11b0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
802111f0:	0005883a 	mov	r2,zero
}
802111f4:	e037883a 	mov	sp,fp
802111f8:	dfc00117 	ldw	ra,4(sp)
802111fc:	df000017 	ldw	fp,0(sp)
80211200:	dec00204 	addi	sp,sp,8
80211204:	f800283a 	ret

80211208 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
80211208:	defff904 	addi	sp,sp,-28
8021120c:	dfc00615 	stw	ra,24(sp)
80211210:	df000515 	stw	fp,20(sp)
80211214:	df000504 	addi	fp,sp,20
80211218:	e13ffc15 	stw	r4,-16(fp)
8021121c:	e17ffd15 	stw	r5,-12(fp)
80211220:	e1bffe15 	stw	r6,-8(fp)
80211224:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
80211228:	e0800217 	ldw	r2,8(fp)
8021122c:	d8800015 	stw	r2,0(sp)
80211230:	e1ffff17 	ldw	r7,-4(fp)
80211234:	e1bffe17 	ldw	r6,-8(fp)
80211238:	e17ffd17 	ldw	r5,-12(fp)
8021123c:	e13ffc17 	ldw	r4,-16(fp)
80211240:	02113b80 	call	802113b8 <alt_iic_isr_register>
}  
80211244:	e037883a 	mov	sp,fp
80211248:	dfc00117 	ldw	ra,4(sp)
8021124c:	df000017 	ldw	fp,0(sp)
80211250:	dec00204 	addi	sp,sp,8
80211254:	f800283a 	ret

80211258 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
80211258:	defff904 	addi	sp,sp,-28
8021125c:	df000615 	stw	fp,24(sp)
80211260:	df000604 	addi	fp,sp,24
80211264:	e13ffe15 	stw	r4,-8(fp)
80211268:	e17fff15 	stw	r5,-4(fp)
8021126c:	e0bfff17 	ldw	r2,-4(fp)
80211270:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80211274:	0005303a 	rdctl	r2,status
80211278:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8021127c:	e0fffb17 	ldw	r3,-20(fp)
80211280:	00bfff84 	movi	r2,-2
80211284:	1884703a 	and	r2,r3,r2
80211288:	1001703a 	wrctl	status,r2
  
  return context;
8021128c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
80211290:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
80211294:	00c00044 	movi	r3,1
80211298:	e0bffa17 	ldw	r2,-24(fp)
8021129c:	1884983a 	sll	r2,r3,r2
802112a0:	1007883a 	mov	r3,r2
802112a4:	d0a01d17 	ldw	r2,-32652(gp)
802112a8:	1884b03a 	or	r2,r3,r2
802112ac:	d0a01d15 	stw	r2,-32652(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
802112b0:	d0a01d17 	ldw	r2,-32652(gp)
802112b4:	100170fa 	wrctl	ienable,r2
802112b8:	e0bffc17 	ldw	r2,-16(fp)
802112bc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
802112c0:	e0bffd17 	ldw	r2,-12(fp)
802112c4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
802112c8:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
802112cc:	0001883a 	nop
}
802112d0:	e037883a 	mov	sp,fp
802112d4:	df000017 	ldw	fp,0(sp)
802112d8:	dec00104 	addi	sp,sp,4
802112dc:	f800283a 	ret

802112e0 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
802112e0:	defff904 	addi	sp,sp,-28
802112e4:	df000615 	stw	fp,24(sp)
802112e8:	df000604 	addi	fp,sp,24
802112ec:	e13ffe15 	stw	r4,-8(fp)
802112f0:	e17fff15 	stw	r5,-4(fp)
802112f4:	e0bfff17 	ldw	r2,-4(fp)
802112f8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
802112fc:	0005303a 	rdctl	r2,status
80211300:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80211304:	e0fffb17 	ldw	r3,-20(fp)
80211308:	00bfff84 	movi	r2,-2
8021130c:	1884703a 	and	r2,r3,r2
80211310:	1001703a 	wrctl	status,r2
  
  return context;
80211314:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
80211318:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
8021131c:	00c00044 	movi	r3,1
80211320:	e0bffa17 	ldw	r2,-24(fp)
80211324:	1884983a 	sll	r2,r3,r2
80211328:	0084303a 	nor	r2,zero,r2
8021132c:	1007883a 	mov	r3,r2
80211330:	d0a01d17 	ldw	r2,-32652(gp)
80211334:	1884703a 	and	r2,r3,r2
80211338:	d0a01d15 	stw	r2,-32652(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
8021133c:	d0a01d17 	ldw	r2,-32652(gp)
80211340:	100170fa 	wrctl	ienable,r2
80211344:	e0bffc17 	ldw	r2,-16(fp)
80211348:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8021134c:	e0bffd17 	ldw	r2,-12(fp)
80211350:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
80211354:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
80211358:	0001883a 	nop
}
8021135c:	e037883a 	mov	sp,fp
80211360:	df000017 	ldw	fp,0(sp)
80211364:	dec00104 	addi	sp,sp,4
80211368:	f800283a 	ret

8021136c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
8021136c:	defffc04 	addi	sp,sp,-16
80211370:	df000315 	stw	fp,12(sp)
80211374:	df000304 	addi	fp,sp,12
80211378:	e13ffe15 	stw	r4,-8(fp)
8021137c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
80211380:	000530fa 	rdctl	r2,ienable
80211384:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
80211388:	00c00044 	movi	r3,1
8021138c:	e0bfff17 	ldw	r2,-4(fp)
80211390:	1884983a 	sll	r2,r3,r2
80211394:	1007883a 	mov	r3,r2
80211398:	e0bffd17 	ldw	r2,-12(fp)
8021139c:	1884703a 	and	r2,r3,r2
802113a0:	1004c03a 	cmpne	r2,r2,zero
802113a4:	10803fcc 	andi	r2,r2,255
}
802113a8:	e037883a 	mov	sp,fp
802113ac:	df000017 	ldw	fp,0(sp)
802113b0:	dec00104 	addi	sp,sp,4
802113b4:	f800283a 	ret

802113b8 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
802113b8:	defff504 	addi	sp,sp,-44
802113bc:	dfc00a15 	stw	ra,40(sp)
802113c0:	df000915 	stw	fp,36(sp)
802113c4:	df000904 	addi	fp,sp,36
802113c8:	e13ffc15 	stw	r4,-16(fp)
802113cc:	e17ffd15 	stw	r5,-12(fp)
802113d0:	e1bffe15 	stw	r6,-8(fp)
802113d4:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
802113d8:	00bffa84 	movi	r2,-22
802113dc:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
802113e0:	e0bffd17 	ldw	r2,-12(fp)
802113e4:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
802113e8:	e0bff817 	ldw	r2,-32(fp)
802113ec:	10800808 	cmpgei	r2,r2,32
802113f0:	1000271e 	bne	r2,zero,80211490 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
802113f4:	0005303a 	rdctl	r2,status
802113f8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
802113fc:	e0fffb17 	ldw	r3,-20(fp)
80211400:	00bfff84 	movi	r2,-2
80211404:	1884703a 	and	r2,r3,r2
80211408:	1001703a 	wrctl	status,r2
  
  return context;
8021140c:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
80211410:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
80211414:	00a00874 	movhi	r2,32801
80211418:	10916604 	addi	r2,r2,17816
8021141c:	e0fff817 	ldw	r3,-32(fp)
80211420:	180690fa 	slli	r3,r3,3
80211424:	10c5883a 	add	r2,r2,r3
80211428:	e0fffe17 	ldw	r3,-8(fp)
8021142c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
80211430:	00a00874 	movhi	r2,32801
80211434:	10916604 	addi	r2,r2,17816
80211438:	e0fff817 	ldw	r3,-32(fp)
8021143c:	180690fa 	slli	r3,r3,3
80211440:	10c5883a 	add	r2,r2,r3
80211444:	10800104 	addi	r2,r2,4
80211448:	e0ffff17 	ldw	r3,-4(fp)
8021144c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
80211450:	e0bffe17 	ldw	r2,-8(fp)
80211454:	10000526 	beq	r2,zero,8021146c <alt_iic_isr_register+0xb4>
80211458:	e0bff817 	ldw	r2,-32(fp)
8021145c:	100b883a 	mov	r5,r2
80211460:	e13ffc17 	ldw	r4,-16(fp)
80211464:	02112580 	call	80211258 <alt_ic_irq_enable>
80211468:	00000406 	br	8021147c <alt_iic_isr_register+0xc4>
8021146c:	e0bff817 	ldw	r2,-32(fp)
80211470:	100b883a 	mov	r5,r2
80211474:	e13ffc17 	ldw	r4,-16(fp)
80211478:	02112e00 	call	802112e0 <alt_ic_irq_disable>
8021147c:	e0bff715 	stw	r2,-36(fp)
80211480:	e0bffa17 	ldw	r2,-24(fp)
80211484:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80211488:	e0bff917 	ldw	r2,-28(fp)
8021148c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
80211490:	e0bff717 	ldw	r2,-36(fp)
}
80211494:	e037883a 	mov	sp,fp
80211498:	dfc00117 	ldw	ra,4(sp)
8021149c:	df000017 	ldw	fp,0(sp)
802114a0:	dec00204 	addi	sp,sp,8
802114a4:	f800283a 	ret

802114a8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
802114a8:	defff904 	addi	sp,sp,-28
802114ac:	dfc00615 	stw	ra,24(sp)
802114b0:	df000515 	stw	fp,20(sp)
802114b4:	df000504 	addi	fp,sp,20
802114b8:	e13ffc15 	stw	r4,-16(fp)
802114bc:	e17ffd15 	stw	r5,-12(fp)
802114c0:	e1bffe15 	stw	r6,-8(fp)
802114c4:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
802114c8:	e1bfff17 	ldw	r6,-4(fp)
802114cc:	e17ffe17 	ldw	r5,-8(fp)
802114d0:	e13ffd17 	ldw	r4,-12(fp)
802114d4:	02116e80 	call	802116e8 <open>
802114d8:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
802114dc:	e0bffb17 	ldw	r2,-20(fp)
802114e0:	10001c16 	blt	r2,zero,80211554 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
802114e4:	00a00874 	movhi	r2,32801
802114e8:	108c3304 	addi	r2,r2,12492
802114ec:	e0fffb17 	ldw	r3,-20(fp)
802114f0:	18c00324 	muli	r3,r3,12
802114f4:	10c5883a 	add	r2,r2,r3
802114f8:	10c00017 	ldw	r3,0(r2)
802114fc:	e0bffc17 	ldw	r2,-16(fp)
80211500:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
80211504:	00a00874 	movhi	r2,32801
80211508:	108c3304 	addi	r2,r2,12492
8021150c:	e0fffb17 	ldw	r3,-20(fp)
80211510:	18c00324 	muli	r3,r3,12
80211514:	10c5883a 	add	r2,r2,r3
80211518:	10800104 	addi	r2,r2,4
8021151c:	10c00017 	ldw	r3,0(r2)
80211520:	e0bffc17 	ldw	r2,-16(fp)
80211524:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
80211528:	00a00874 	movhi	r2,32801
8021152c:	108c3304 	addi	r2,r2,12492
80211530:	e0fffb17 	ldw	r3,-20(fp)
80211534:	18c00324 	muli	r3,r3,12
80211538:	10c5883a 	add	r2,r2,r3
8021153c:	10800204 	addi	r2,r2,8
80211540:	10c00017 	ldw	r3,0(r2)
80211544:	e0bffc17 	ldw	r2,-16(fp)
80211548:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
8021154c:	e13ffb17 	ldw	r4,-20(fp)
80211550:	020d5bc0 	call	8020d5bc <alt_release_fd>
  }
} 
80211554:	0001883a 	nop
80211558:	e037883a 	mov	sp,fp
8021155c:	dfc00117 	ldw	ra,4(sp)
80211560:	df000017 	ldw	fp,0(sp)
80211564:	dec00204 	addi	sp,sp,8
80211568:	f800283a 	ret

8021156c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
8021156c:	defffb04 	addi	sp,sp,-20
80211570:	dfc00415 	stw	ra,16(sp)
80211574:	df000315 	stw	fp,12(sp)
80211578:	df000304 	addi	fp,sp,12
8021157c:	e13ffd15 	stw	r4,-12(fp)
80211580:	e17ffe15 	stw	r5,-8(fp)
80211584:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
80211588:	01c07fc4 	movi	r7,511
8021158c:	01800044 	movi	r6,1
80211590:	e17ffd17 	ldw	r5,-12(fp)
80211594:	01200874 	movhi	r4,32801
80211598:	210c3604 	addi	r4,r4,12504
8021159c:	02114a80 	call	802114a8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
802115a0:	01c07fc4 	movi	r7,511
802115a4:	000d883a 	mov	r6,zero
802115a8:	e17ffe17 	ldw	r5,-8(fp)
802115ac:	01200874 	movhi	r4,32801
802115b0:	210c3304 	addi	r4,r4,12492
802115b4:	02114a80 	call	802114a8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
802115b8:	01c07fc4 	movi	r7,511
802115bc:	01800044 	movi	r6,1
802115c0:	e17fff17 	ldw	r5,-4(fp)
802115c4:	01200874 	movhi	r4,32801
802115c8:	210c3904 	addi	r4,r4,12516
802115cc:	02114a80 	call	802114a8 <alt_open_fd>
}  
802115d0:	0001883a 	nop
802115d4:	e037883a 	mov	sp,fp
802115d8:	dfc00117 	ldw	ra,4(sp)
802115dc:	df000017 	ldw	fp,0(sp)
802115e0:	dec00204 	addi	sp,sp,8
802115e4:	f800283a 	ret

802115e8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
802115e8:	defffe04 	addi	sp,sp,-8
802115ec:	dfc00115 	stw	ra,4(sp)
802115f0:	df000015 	stw	fp,0(sp)
802115f4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
802115f8:	d0a00b17 	ldw	r2,-32724(gp)
802115fc:	10000326 	beq	r2,zero,8021160c <alt_get_errno+0x24>
80211600:	d0a00b17 	ldw	r2,-32724(gp)
80211604:	103ee83a 	callr	r2
80211608:	00000106 	br	80211610 <alt_get_errno+0x28>
8021160c:	d0a01904 	addi	r2,gp,-32668
}
80211610:	e037883a 	mov	sp,fp
80211614:	dfc00117 	ldw	ra,4(sp)
80211618:	df000017 	ldw	fp,0(sp)
8021161c:	dec00204 	addi	sp,sp,8
80211620:	f800283a 	ret

80211624 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
80211624:	defffd04 	addi	sp,sp,-12
80211628:	df000215 	stw	fp,8(sp)
8021162c:	df000204 	addi	fp,sp,8
80211630:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
80211634:	e0bfff17 	ldw	r2,-4(fp)
80211638:	10800217 	ldw	r2,8(r2)
8021163c:	10d00034 	orhi	r3,r2,16384
80211640:	e0bfff17 	ldw	r2,-4(fp)
80211644:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
80211648:	e03ffe15 	stw	zero,-8(fp)
8021164c:	00001d06 	br	802116c4 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
80211650:	00a00874 	movhi	r2,32801
80211654:	108c3304 	addi	r2,r2,12492
80211658:	e0fffe17 	ldw	r3,-8(fp)
8021165c:	18c00324 	muli	r3,r3,12
80211660:	10c5883a 	add	r2,r2,r3
80211664:	10c00017 	ldw	r3,0(r2)
80211668:	e0bfff17 	ldw	r2,-4(fp)
8021166c:	10800017 	ldw	r2,0(r2)
80211670:	1880111e 	bne	r3,r2,802116b8 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
80211674:	00a00874 	movhi	r2,32801
80211678:	108c3304 	addi	r2,r2,12492
8021167c:	e0fffe17 	ldw	r3,-8(fp)
80211680:	18c00324 	muli	r3,r3,12
80211684:	10c5883a 	add	r2,r2,r3
80211688:	10800204 	addi	r2,r2,8
8021168c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
80211690:	1000090e 	bge	r2,zero,802116b8 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
80211694:	e0bffe17 	ldw	r2,-8(fp)
80211698:	10c00324 	muli	r3,r2,12
8021169c:	00a00874 	movhi	r2,32801
802116a0:	108c3304 	addi	r2,r2,12492
802116a4:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
802116a8:	e0bfff17 	ldw	r2,-4(fp)
802116ac:	18800226 	beq	r3,r2,802116b8 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
802116b0:	00bffcc4 	movi	r2,-13
802116b4:	00000806 	br	802116d8 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
802116b8:	e0bffe17 	ldw	r2,-8(fp)
802116bc:	10800044 	addi	r2,r2,1
802116c0:	e0bffe15 	stw	r2,-8(fp)
802116c4:	d0a00a17 	ldw	r2,-32728(gp)
802116c8:	1007883a 	mov	r3,r2
802116cc:	e0bffe17 	ldw	r2,-8(fp)
802116d0:	18bfdf2e 	bgeu	r3,r2,80211650 <__reset+0xfa1f1650>
    }
  }
  
  /* The device is not locked */
 
  return 0;
802116d4:	0005883a 	mov	r2,zero
}
802116d8:	e037883a 	mov	sp,fp
802116dc:	df000017 	ldw	fp,0(sp)
802116e0:	dec00104 	addi	sp,sp,4
802116e4:	f800283a 	ret

802116e8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
802116e8:	defff604 	addi	sp,sp,-40
802116ec:	dfc00915 	stw	ra,36(sp)
802116f0:	df000815 	stw	fp,32(sp)
802116f4:	df000804 	addi	fp,sp,32
802116f8:	e13ffd15 	stw	r4,-12(fp)
802116fc:	e17ffe15 	stw	r5,-8(fp)
80211700:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
80211704:	00bfffc4 	movi	r2,-1
80211708:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
8021170c:	00bffb44 	movi	r2,-19
80211710:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
80211714:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
80211718:	d1600804 	addi	r5,gp,-32736
8021171c:	e13ffd17 	ldw	r4,-12(fp)
80211720:	02111780 	call	80211178 <alt_find_dev>
80211724:	e0bff815 	stw	r2,-32(fp)
80211728:	e0bff817 	ldw	r2,-32(fp)
8021172c:	1000051e 	bne	r2,zero,80211744 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
80211730:	e13ffd17 	ldw	r4,-12(fp)
80211734:	0211c6c0 	call	80211c6c <alt_find_file>
80211738:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
8021173c:	00800044 	movi	r2,1
80211740:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
80211744:	e0bff817 	ldw	r2,-32(fp)
80211748:	10002926 	beq	r2,zero,802117f0 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
8021174c:	e13ff817 	ldw	r4,-32(fp)
80211750:	0211d740 	call	80211d74 <alt_get_fd>
80211754:	e0bff915 	stw	r2,-28(fp)
80211758:	e0bff917 	ldw	r2,-28(fp)
8021175c:	1000030e 	bge	r2,zero,8021176c <open+0x84>
    {
      status = index;
80211760:	e0bff917 	ldw	r2,-28(fp)
80211764:	e0bffa15 	stw	r2,-24(fp)
80211768:	00002306 	br	802117f8 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
8021176c:	e0bff917 	ldw	r2,-28(fp)
80211770:	10c00324 	muli	r3,r2,12
80211774:	00a00874 	movhi	r2,32801
80211778:	108c3304 	addi	r2,r2,12492
8021177c:	1885883a 	add	r2,r3,r2
80211780:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
80211784:	e0fffe17 	ldw	r3,-8(fp)
80211788:	00900034 	movhi	r2,16384
8021178c:	10bfffc4 	addi	r2,r2,-1
80211790:	1886703a 	and	r3,r3,r2
80211794:	e0bffc17 	ldw	r2,-16(fp)
80211798:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
8021179c:	e0bffb17 	ldw	r2,-20(fp)
802117a0:	1000051e 	bne	r2,zero,802117b8 <open+0xd0>
802117a4:	e13ffc17 	ldw	r4,-16(fp)
802117a8:	02116240 	call	80211624 <alt_file_locked>
802117ac:	e0bffa15 	stw	r2,-24(fp)
802117b0:	e0bffa17 	ldw	r2,-24(fp)
802117b4:	10001016 	blt	r2,zero,802117f8 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
802117b8:	e0bff817 	ldw	r2,-32(fp)
802117bc:	10800317 	ldw	r2,12(r2)
802117c0:	10000826 	beq	r2,zero,802117e4 <open+0xfc>
802117c4:	e0bff817 	ldw	r2,-32(fp)
802117c8:	10800317 	ldw	r2,12(r2)
802117cc:	e1ffff17 	ldw	r7,-4(fp)
802117d0:	e1bffe17 	ldw	r6,-8(fp)
802117d4:	e17ffd17 	ldw	r5,-12(fp)
802117d8:	e13ffc17 	ldw	r4,-16(fp)
802117dc:	103ee83a 	callr	r2
802117e0:	00000106 	br	802117e8 <open+0x100>
802117e4:	0005883a 	mov	r2,zero
802117e8:	e0bffa15 	stw	r2,-24(fp)
802117ec:	00000206 	br	802117f8 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
802117f0:	00bffb44 	movi	r2,-19
802117f4:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
802117f8:	e0bffa17 	ldw	r2,-24(fp)
802117fc:	1000090e 	bge	r2,zero,80211824 <open+0x13c>
  {
    alt_release_fd (index);  
80211800:	e13ff917 	ldw	r4,-28(fp)
80211804:	020d5bc0 	call	8020d5bc <alt_release_fd>
    ALT_ERRNO = -status;
80211808:	02115e80 	call	802115e8 <alt_get_errno>
8021180c:	1007883a 	mov	r3,r2
80211810:	e0bffa17 	ldw	r2,-24(fp)
80211814:	0085c83a 	sub	r2,zero,r2
80211818:	18800015 	stw	r2,0(r3)
    return -1;
8021181c:	00bfffc4 	movi	r2,-1
80211820:	00000106 	br	80211828 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
80211824:	e0bff917 	ldw	r2,-28(fp)
}
80211828:	e037883a 	mov	sp,fp
8021182c:	dfc00117 	ldw	ra,4(sp)
80211830:	df000017 	ldw	fp,0(sp)
80211834:	dec00204 	addi	sp,sp,8
80211838:	f800283a 	ret

8021183c <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
8021183c:	defff204 	addi	sp,sp,-56
80211840:	dfc00a15 	stw	ra,40(sp)
80211844:	df000915 	stw	fp,36(sp)
80211848:	df000904 	addi	fp,sp,36
8021184c:	e13fff15 	stw	r4,-4(fp)
80211850:	e1400215 	stw	r5,8(fp)
80211854:	e1800315 	stw	r6,12(fp)
80211858:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
8021185c:	e0800204 	addi	r2,fp,8
80211860:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
80211864:	e0bfff17 	ldw	r2,-4(fp)
80211868:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
8021186c:	00006f06 	br	80211a2c <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
80211870:	e0bff807 	ldb	r2,-32(fp)
80211874:	10800960 	cmpeqi	r2,r2,37
80211878:	1000041e 	bne	r2,zero,8021188c <alt_printf+0x50>
        {
            alt_putchar(c);
8021187c:	e0bff807 	ldb	r2,-32(fp)
80211880:	1009883a 	mov	r4,r2
80211884:	0211a680 	call	80211a68 <alt_putchar>
80211888:	00006806 	br	80211a2c <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
8021188c:	e0bff717 	ldw	r2,-36(fp)
80211890:	10c00044 	addi	r3,r2,1
80211894:	e0fff715 	stw	r3,-36(fp)
80211898:	10800003 	ldbu	r2,0(r2)
8021189c:	e0bff805 	stb	r2,-32(fp)
802118a0:	e0bff807 	ldb	r2,-32(fp)
802118a4:	10006926 	beq	r2,zero,80211a4c <alt_printf+0x210>
            {
                if (c == '%')
802118a8:	e0bff807 	ldb	r2,-32(fp)
802118ac:	10800958 	cmpnei	r2,r2,37
802118b0:	1000041e 	bne	r2,zero,802118c4 <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
802118b4:	e0bff807 	ldb	r2,-32(fp)
802118b8:	1009883a 	mov	r4,r2
802118bc:	0211a680 	call	80211a68 <alt_putchar>
802118c0:	00005a06 	br	80211a2c <alt_printf+0x1f0>
                } 
                else if (c == 'c')
802118c4:	e0bff807 	ldb	r2,-32(fp)
802118c8:	108018d8 	cmpnei	r2,r2,99
802118cc:	1000081e 	bne	r2,zero,802118f0 <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
802118d0:	e0bffe17 	ldw	r2,-8(fp)
802118d4:	10c00104 	addi	r3,r2,4
802118d8:	e0fffe15 	stw	r3,-8(fp)
802118dc:	10800017 	ldw	r2,0(r2)
802118e0:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
802118e4:	e13ffd17 	ldw	r4,-12(fp)
802118e8:	0211a680 	call	80211a68 <alt_putchar>
802118ec:	00004f06 	br	80211a2c <alt_printf+0x1f0>
                }
                else if (c == 'x')
802118f0:	e0bff807 	ldb	r2,-32(fp)
802118f4:	10801e18 	cmpnei	r2,r2,120
802118f8:	1000341e 	bne	r2,zero,802119cc <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
802118fc:	e0bffe17 	ldw	r2,-8(fp)
80211900:	10c00104 	addi	r3,r2,4
80211904:	e0fffe15 	stw	r3,-8(fp)
80211908:	10800017 	ldw	r2,0(r2)
8021190c:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
80211910:	e0bffb17 	ldw	r2,-20(fp)
80211914:	1000031e 	bne	r2,zero,80211924 <alt_printf+0xe8>
                    {
                        alt_putchar('0');
80211918:	01000c04 	movi	r4,48
8021191c:	0211a680 	call	80211a68 <alt_putchar>
                        continue;
80211920:	00004206 	br	80211a2c <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
80211924:	00800704 	movi	r2,28
80211928:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
8021192c:	00000306 	br	8021193c <alt_printf+0x100>
                        digit_shift -= 4;
80211930:	e0bff917 	ldw	r2,-28(fp)
80211934:	10bfff04 	addi	r2,r2,-4
80211938:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
8021193c:	00c003c4 	movi	r3,15
80211940:	e0bff917 	ldw	r2,-28(fp)
80211944:	1884983a 	sll	r2,r3,r2
80211948:	1007883a 	mov	r3,r2
8021194c:	e0bffb17 	ldw	r2,-20(fp)
80211950:	1884703a 	and	r2,r3,r2
80211954:	103ff626 	beq	r2,zero,80211930 <__reset+0xfa1f1930>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
80211958:	00001906 	br	802119c0 <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
8021195c:	00c003c4 	movi	r3,15
80211960:	e0bff917 	ldw	r2,-28(fp)
80211964:	1884983a 	sll	r2,r3,r2
80211968:	1007883a 	mov	r3,r2
8021196c:	e0bffb17 	ldw	r2,-20(fp)
80211970:	1886703a 	and	r3,r3,r2
80211974:	e0bff917 	ldw	r2,-28(fp)
80211978:	1884d83a 	srl	r2,r3,r2
8021197c:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
80211980:	e0bffc17 	ldw	r2,-16(fp)
80211984:	108002a8 	cmpgeui	r2,r2,10
80211988:	1000041e 	bne	r2,zero,8021199c <alt_printf+0x160>
                            c = '0' + digit;
8021198c:	e0bffc17 	ldw	r2,-16(fp)
80211990:	10800c04 	addi	r2,r2,48
80211994:	e0bff805 	stb	r2,-32(fp)
80211998:	00000306 	br	802119a8 <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
8021199c:	e0bffc17 	ldw	r2,-16(fp)
802119a0:	108015c4 	addi	r2,r2,87
802119a4:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
802119a8:	e0bff807 	ldb	r2,-32(fp)
802119ac:	1009883a 	mov	r4,r2
802119b0:	0211a680 	call	80211a68 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
802119b4:	e0bff917 	ldw	r2,-28(fp)
802119b8:	10bfff04 	addi	r2,r2,-4
802119bc:	e0bff915 	stw	r2,-28(fp)
802119c0:	e0bff917 	ldw	r2,-28(fp)
802119c4:	103fe50e 	bge	r2,zero,8021195c <__reset+0xfa1f195c>
802119c8:	00001806 	br	80211a2c <alt_printf+0x1f0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
802119cc:	e0bff807 	ldb	r2,-32(fp)
802119d0:	10801cd8 	cmpnei	r2,r2,115
802119d4:	1000151e 	bne	r2,zero,80211a2c <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
802119d8:	e0bffe17 	ldw	r2,-8(fp)
802119dc:	10c00104 	addi	r3,r2,4
802119e0:	e0fffe15 	stw	r3,-8(fp)
802119e4:	10800017 	ldw	r2,0(r2)
802119e8:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
802119ec:	00000906 	br	80211a14 <alt_printf+0x1d8>
                      alt_putchar(*s++);
802119f0:	e0bffa17 	ldw	r2,-24(fp)
802119f4:	10c00044 	addi	r3,r2,1
802119f8:	e0fffa15 	stw	r3,-24(fp)
802119fc:	10800003 	ldbu	r2,0(r2)
80211a00:	10803fcc 	andi	r2,r2,255
80211a04:	1080201c 	xori	r2,r2,128
80211a08:	10bfe004 	addi	r2,r2,-128
80211a0c:	1009883a 	mov	r4,r2
80211a10:	0211a680 	call	80211a68 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
80211a14:	e0bffa17 	ldw	r2,-24(fp)
80211a18:	10800003 	ldbu	r2,0(r2)
80211a1c:	10803fcc 	andi	r2,r2,255
80211a20:	1080201c 	xori	r2,r2,128
80211a24:	10bfe004 	addi	r2,r2,-128
80211a28:	103ff11e 	bne	r2,zero,802119f0 <__reset+0xfa1f19f0>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
80211a2c:	e0bff717 	ldw	r2,-36(fp)
80211a30:	10c00044 	addi	r3,r2,1
80211a34:	e0fff715 	stw	r3,-36(fp)
80211a38:	10800003 	ldbu	r2,0(r2)
80211a3c:	e0bff805 	stb	r2,-32(fp)
80211a40:	e0bff807 	ldb	r2,-32(fp)
80211a44:	103f8a1e 	bne	r2,zero,80211870 <__reset+0xfa1f1870>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
80211a48:	00000106 	br	80211a50 <alt_printf+0x214>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
80211a4c:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
80211a50:	0001883a 	nop
80211a54:	e037883a 	mov	sp,fp
80211a58:	dfc00117 	ldw	ra,4(sp)
80211a5c:	df000017 	ldw	fp,0(sp)
80211a60:	dec00504 	addi	sp,sp,20
80211a64:	f800283a 	ret

80211a68 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
80211a68:	defffd04 	addi	sp,sp,-12
80211a6c:	dfc00215 	stw	ra,8(sp)
80211a70:	df000115 	stw	fp,4(sp)
80211a74:	df000104 	addi	fp,sp,4
80211a78:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
80211a7c:	d0a00117 	ldw	r2,-32764(gp)
80211a80:	10800217 	ldw	r2,8(r2)
80211a84:	100b883a 	mov	r5,r2
80211a88:	e13fff17 	ldw	r4,-4(fp)
80211a8c:	02074580 	call	80207458 <putc>
#endif
#endif
}
80211a90:	e037883a 	mov	sp,fp
80211a94:	dfc00117 	ldw	ra,4(sp)
80211a98:	df000017 	ldw	fp,0(sp)
80211a9c:	dec00204 	addi	sp,sp,8
80211aa0:	f800283a 	ret

80211aa4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
80211aa4:	defffa04 	addi	sp,sp,-24
80211aa8:	df000515 	stw	fp,20(sp)
80211aac:	df000504 	addi	fp,sp,20
80211ab0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80211ab4:	0005303a 	rdctl	r2,status
80211ab8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80211abc:	e0fffc17 	ldw	r3,-16(fp)
80211ac0:	00bfff84 	movi	r2,-2
80211ac4:	1884703a 	and	r2,r3,r2
80211ac8:	1001703a 	wrctl	status,r2
  
  return context;
80211acc:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
80211ad0:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
80211ad4:	e0bfff17 	ldw	r2,-4(fp)
80211ad8:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
80211adc:	e0bffd17 	ldw	r2,-12(fp)
80211ae0:	10800017 	ldw	r2,0(r2)
80211ae4:	e0fffd17 	ldw	r3,-12(fp)
80211ae8:	18c00117 	ldw	r3,4(r3)
80211aec:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
80211af0:	e0bffd17 	ldw	r2,-12(fp)
80211af4:	10800117 	ldw	r2,4(r2)
80211af8:	e0fffd17 	ldw	r3,-12(fp)
80211afc:	18c00017 	ldw	r3,0(r3)
80211b00:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
80211b04:	e0bffd17 	ldw	r2,-12(fp)
80211b08:	e0fffd17 	ldw	r3,-12(fp)
80211b0c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
80211b10:	e0bffd17 	ldw	r2,-12(fp)
80211b14:	e0fffd17 	ldw	r3,-12(fp)
80211b18:	10c00015 	stw	r3,0(r2)
80211b1c:	e0bffb17 	ldw	r2,-20(fp)
80211b20:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80211b24:	e0bffe17 	ldw	r2,-8(fp)
80211b28:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
80211b2c:	0001883a 	nop
80211b30:	e037883a 	mov	sp,fp
80211b34:	df000017 	ldw	fp,0(sp)
80211b38:	dec00104 	addi	sp,sp,4
80211b3c:	f800283a 	ret

80211b40 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
80211b40:	defffb04 	addi	sp,sp,-20
80211b44:	dfc00415 	stw	ra,16(sp)
80211b48:	df000315 	stw	fp,12(sp)
80211b4c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
80211b50:	d0a01017 	ldw	r2,-32704(gp)
80211b54:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
80211b58:	d0a01f17 	ldw	r2,-32644(gp)
80211b5c:	10800044 	addi	r2,r2,1
80211b60:	d0a01f15 	stw	r2,-32644(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
80211b64:	00002e06 	br	80211c20 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
80211b68:	e0bffd17 	ldw	r2,-12(fp)
80211b6c:	10800017 	ldw	r2,0(r2)
80211b70:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
80211b74:	e0bffd17 	ldw	r2,-12(fp)
80211b78:	10800403 	ldbu	r2,16(r2)
80211b7c:	10803fcc 	andi	r2,r2,255
80211b80:	10000426 	beq	r2,zero,80211b94 <alt_tick+0x54>
80211b84:	d0a01f17 	ldw	r2,-32644(gp)
80211b88:	1000021e 	bne	r2,zero,80211b94 <alt_tick+0x54>
    {
      alarm->rollover = 0;
80211b8c:	e0bffd17 	ldw	r2,-12(fp)
80211b90:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
80211b94:	e0bffd17 	ldw	r2,-12(fp)
80211b98:	10800217 	ldw	r2,8(r2)
80211b9c:	d0e01f17 	ldw	r3,-32644(gp)
80211ba0:	18801d36 	bltu	r3,r2,80211c18 <alt_tick+0xd8>
80211ba4:	e0bffd17 	ldw	r2,-12(fp)
80211ba8:	10800403 	ldbu	r2,16(r2)
80211bac:	10803fcc 	andi	r2,r2,255
80211bb0:	1000191e 	bne	r2,zero,80211c18 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
80211bb4:	e0bffd17 	ldw	r2,-12(fp)
80211bb8:	10800317 	ldw	r2,12(r2)
80211bbc:	e0fffd17 	ldw	r3,-12(fp)
80211bc0:	18c00517 	ldw	r3,20(r3)
80211bc4:	1809883a 	mov	r4,r3
80211bc8:	103ee83a 	callr	r2
80211bcc:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
80211bd0:	e0bfff17 	ldw	r2,-4(fp)
80211bd4:	1000031e 	bne	r2,zero,80211be4 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
80211bd8:	e13ffd17 	ldw	r4,-12(fp)
80211bdc:	0211aa40 	call	80211aa4 <alt_alarm_stop>
80211be0:	00000d06 	br	80211c18 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
80211be4:	e0bffd17 	ldw	r2,-12(fp)
80211be8:	10c00217 	ldw	r3,8(r2)
80211bec:	e0bfff17 	ldw	r2,-4(fp)
80211bf0:	1887883a 	add	r3,r3,r2
80211bf4:	e0bffd17 	ldw	r2,-12(fp)
80211bf8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
80211bfc:	e0bffd17 	ldw	r2,-12(fp)
80211c00:	10c00217 	ldw	r3,8(r2)
80211c04:	d0a01f17 	ldw	r2,-32644(gp)
80211c08:	1880032e 	bgeu	r3,r2,80211c18 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
80211c0c:	e0bffd17 	ldw	r2,-12(fp)
80211c10:	00c00044 	movi	r3,1
80211c14:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
80211c18:	e0bffe17 	ldw	r2,-8(fp)
80211c1c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
80211c20:	e0fffd17 	ldw	r3,-12(fp)
80211c24:	d0a01004 	addi	r2,gp,-32704
80211c28:	18bfcf1e 	bne	r3,r2,80211b68 <__reset+0xfa1f1b68>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
80211c2c:	0001883a 	nop
}
80211c30:	0001883a 	nop
80211c34:	e037883a 	mov	sp,fp
80211c38:	dfc00117 	ldw	ra,4(sp)
80211c3c:	df000017 	ldw	fp,0(sp)
80211c40:	dec00204 	addi	sp,sp,8
80211c44:	f800283a 	ret

80211c48 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
80211c48:	deffff04 	addi	sp,sp,-4
80211c4c:	df000015 	stw	fp,0(sp)
80211c50:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
80211c54:	000170fa 	wrctl	ienable,zero
}
80211c58:	0001883a 	nop
80211c5c:	e037883a 	mov	sp,fp
80211c60:	df000017 	ldw	fp,0(sp)
80211c64:	dec00104 	addi	sp,sp,4
80211c68:	f800283a 	ret

80211c6c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
80211c6c:	defffb04 	addi	sp,sp,-20
80211c70:	dfc00415 	stw	ra,16(sp)
80211c74:	df000315 	stw	fp,12(sp)
80211c78:	df000304 	addi	fp,sp,12
80211c7c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
80211c80:	d0a00617 	ldw	r2,-32744(gp)
80211c84:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
80211c88:	00003106 	br	80211d50 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
80211c8c:	e0bffd17 	ldw	r2,-12(fp)
80211c90:	10800217 	ldw	r2,8(r2)
80211c94:	1009883a 	mov	r4,r2
80211c98:	02007ac0 	call	802007ac <strlen>
80211c9c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
80211ca0:	e0bffd17 	ldw	r2,-12(fp)
80211ca4:	10c00217 	ldw	r3,8(r2)
80211ca8:	e0bffe17 	ldw	r2,-8(fp)
80211cac:	10bfffc4 	addi	r2,r2,-1
80211cb0:	1885883a 	add	r2,r3,r2
80211cb4:	10800003 	ldbu	r2,0(r2)
80211cb8:	10803fcc 	andi	r2,r2,255
80211cbc:	1080201c 	xori	r2,r2,128
80211cc0:	10bfe004 	addi	r2,r2,-128
80211cc4:	10800bd8 	cmpnei	r2,r2,47
80211cc8:	1000031e 	bne	r2,zero,80211cd8 <alt_find_file+0x6c>
    {
      len -= 1;
80211ccc:	e0bffe17 	ldw	r2,-8(fp)
80211cd0:	10bfffc4 	addi	r2,r2,-1
80211cd4:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
80211cd8:	e0bffe17 	ldw	r2,-8(fp)
80211cdc:	e0ffff17 	ldw	r3,-4(fp)
80211ce0:	1885883a 	add	r2,r3,r2
80211ce4:	10800003 	ldbu	r2,0(r2)
80211ce8:	10803fcc 	andi	r2,r2,255
80211cec:	1080201c 	xori	r2,r2,128
80211cf0:	10bfe004 	addi	r2,r2,-128
80211cf4:	10800be0 	cmpeqi	r2,r2,47
80211cf8:	1000081e 	bne	r2,zero,80211d1c <alt_find_file+0xb0>
80211cfc:	e0bffe17 	ldw	r2,-8(fp)
80211d00:	e0ffff17 	ldw	r3,-4(fp)
80211d04:	1885883a 	add	r2,r3,r2
80211d08:	10800003 	ldbu	r2,0(r2)
80211d0c:	10803fcc 	andi	r2,r2,255
80211d10:	1080201c 	xori	r2,r2,128
80211d14:	10bfe004 	addi	r2,r2,-128
80211d18:	10000a1e 	bne	r2,zero,80211d44 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
80211d1c:	e0bffd17 	ldw	r2,-12(fp)
80211d20:	10800217 	ldw	r2,8(r2)
80211d24:	e0fffe17 	ldw	r3,-8(fp)
80211d28:	180d883a 	mov	r6,r3
80211d2c:	e17fff17 	ldw	r5,-4(fp)
80211d30:	1009883a 	mov	r4,r2
80211d34:	0211f000 	call	80211f00 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
80211d38:	1000021e 	bne	r2,zero,80211d44 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
80211d3c:	e0bffd17 	ldw	r2,-12(fp)
80211d40:	00000706 	br	80211d60 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
80211d44:	e0bffd17 	ldw	r2,-12(fp)
80211d48:	10800017 	ldw	r2,0(r2)
80211d4c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
80211d50:	e0fffd17 	ldw	r3,-12(fp)
80211d54:	d0a00604 	addi	r2,gp,-32744
80211d58:	18bfcc1e 	bne	r3,r2,80211c8c <__reset+0xfa1f1c8c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
80211d5c:	0005883a 	mov	r2,zero
}
80211d60:	e037883a 	mov	sp,fp
80211d64:	dfc00117 	ldw	ra,4(sp)
80211d68:	df000017 	ldw	fp,0(sp)
80211d6c:	dec00204 	addi	sp,sp,8
80211d70:	f800283a 	ret

80211d74 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
80211d74:	defffc04 	addi	sp,sp,-16
80211d78:	df000315 	stw	fp,12(sp)
80211d7c:	df000304 	addi	fp,sp,12
80211d80:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
80211d84:	00bffa04 	movi	r2,-24
80211d88:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
80211d8c:	e03ffd15 	stw	zero,-12(fp)
80211d90:	00001906 	br	80211df8 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
80211d94:	00a00874 	movhi	r2,32801
80211d98:	108c3304 	addi	r2,r2,12492
80211d9c:	e0fffd17 	ldw	r3,-12(fp)
80211da0:	18c00324 	muli	r3,r3,12
80211da4:	10c5883a 	add	r2,r2,r3
80211da8:	10800017 	ldw	r2,0(r2)
80211dac:	10000f1e 	bne	r2,zero,80211dec <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
80211db0:	00a00874 	movhi	r2,32801
80211db4:	108c3304 	addi	r2,r2,12492
80211db8:	e0fffd17 	ldw	r3,-12(fp)
80211dbc:	18c00324 	muli	r3,r3,12
80211dc0:	10c5883a 	add	r2,r2,r3
80211dc4:	e0ffff17 	ldw	r3,-4(fp)
80211dc8:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
80211dcc:	d0e00a17 	ldw	r3,-32728(gp)
80211dd0:	e0bffd17 	ldw	r2,-12(fp)
80211dd4:	1880020e 	bge	r3,r2,80211de0 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
80211dd8:	e0bffd17 	ldw	r2,-12(fp)
80211ddc:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
80211de0:	e0bffd17 	ldw	r2,-12(fp)
80211de4:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
80211de8:	00000606 	br	80211e04 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
80211dec:	e0bffd17 	ldw	r2,-12(fp)
80211df0:	10800044 	addi	r2,r2,1
80211df4:	e0bffd15 	stw	r2,-12(fp)
80211df8:	e0bffd17 	ldw	r2,-12(fp)
80211dfc:	10800810 	cmplti	r2,r2,32
80211e00:	103fe41e 	bne	r2,zero,80211d94 <__reset+0xfa1f1d94>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
80211e04:	e0bffe17 	ldw	r2,-8(fp)
}
80211e08:	e037883a 	mov	sp,fp
80211e0c:	df000017 	ldw	fp,0(sp)
80211e10:	dec00104 	addi	sp,sp,4
80211e14:	f800283a 	ret

80211e18 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
80211e18:	defffe04 	addi	sp,sp,-8
80211e1c:	df000115 	stw	fp,4(sp)
80211e20:	df000104 	addi	fp,sp,4
80211e24:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
80211e28:	e0bfff17 	ldw	r2,-4(fp)
80211e2c:	10bffe84 	addi	r2,r2,-6
80211e30:	10c00428 	cmpgeui	r3,r2,16
80211e34:	18001a1e 	bne	r3,zero,80211ea0 <alt_exception_cause_generated_bad_addr+0x88>
80211e38:	100690ba 	slli	r3,r2,2
80211e3c:	00a00874 	movhi	r2,32801
80211e40:	10879404 	addi	r2,r2,7760
80211e44:	1885883a 	add	r2,r3,r2
80211e48:	10800017 	ldw	r2,0(r2)
80211e4c:	1000683a 	jmp	r2
80211e50:	80211e90 	cmplti	zero,r16,-31622
80211e54:	80211e90 	cmplti	zero,r16,-31622
80211e58:	80211ea0 	cmpeqi	zero,r16,-31622
80211e5c:	80211ea0 	cmpeqi	zero,r16,-31622
80211e60:	80211ea0 	cmpeqi	zero,r16,-31622
80211e64:	80211e90 	cmplti	zero,r16,-31622
80211e68:	80211e98 	cmpnei	zero,r16,-31622
80211e6c:	80211ea0 	cmpeqi	zero,r16,-31622
80211e70:	80211e90 	cmplti	zero,r16,-31622
80211e74:	80211e90 	cmplti	zero,r16,-31622
80211e78:	80211ea0 	cmpeqi	zero,r16,-31622
80211e7c:	80211e90 	cmplti	zero,r16,-31622
80211e80:	80211e98 	cmpnei	zero,r16,-31622
80211e84:	80211ea0 	cmpeqi	zero,r16,-31622
80211e88:	80211ea0 	cmpeqi	zero,r16,-31622
80211e8c:	80211e90 	cmplti	zero,r16,-31622
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
80211e90:	00800044 	movi	r2,1
80211e94:	00000306 	br	80211ea4 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
80211e98:	0005883a 	mov	r2,zero
80211e9c:	00000106 	br	80211ea4 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
80211ea0:	0005883a 	mov	r2,zero
  }
}
80211ea4:	e037883a 	mov	sp,fp
80211ea8:	df000017 	ldw	fp,0(sp)
80211eac:	dec00104 	addi	sp,sp,4
80211eb0:	f800283a 	ret

80211eb4 <atexit>:
80211eb4:	200b883a 	mov	r5,r4
80211eb8:	000f883a 	mov	r7,zero
80211ebc:	000d883a 	mov	r6,zero
80211ec0:	0009883a 	mov	r4,zero
80211ec4:	0211f7c1 	jmpi	80211f7c <__register_exitproc>

80211ec8 <exit>:
80211ec8:	defffe04 	addi	sp,sp,-8
80211ecc:	000b883a 	mov	r5,zero
80211ed0:	dc000015 	stw	r16,0(sp)
80211ed4:	dfc00115 	stw	ra,4(sp)
80211ed8:	2021883a 	mov	r16,r4
80211edc:	02120940 	call	80212094 <__call_exitprocs>
80211ee0:	00a00874 	movhi	r2,32801
80211ee4:	10911b04 	addi	r2,r2,17516
80211ee8:	11000017 	ldw	r4,0(r2)
80211eec:	20800f17 	ldw	r2,60(r4)
80211ef0:	10000126 	beq	r2,zero,80211ef8 <exit+0x30>
80211ef4:	103ee83a 	callr	r2
80211ef8:	8009883a 	mov	r4,r16
80211efc:	02122140 	call	80212214 <_exit>

80211f00 <memcmp>:
80211f00:	01c000c4 	movi	r7,3
80211f04:	3980192e 	bgeu	r7,r6,80211f6c <memcmp+0x6c>
80211f08:	2144b03a 	or	r2,r4,r5
80211f0c:	11c4703a 	and	r2,r2,r7
80211f10:	10000f26 	beq	r2,zero,80211f50 <memcmp+0x50>
80211f14:	20800003 	ldbu	r2,0(r4)
80211f18:	28c00003 	ldbu	r3,0(r5)
80211f1c:	10c0151e 	bne	r2,r3,80211f74 <memcmp+0x74>
80211f20:	31bfff84 	addi	r6,r6,-2
80211f24:	01ffffc4 	movi	r7,-1
80211f28:	00000406 	br	80211f3c <memcmp+0x3c>
80211f2c:	20800003 	ldbu	r2,0(r4)
80211f30:	28c00003 	ldbu	r3,0(r5)
80211f34:	31bfffc4 	addi	r6,r6,-1
80211f38:	10c00e1e 	bne	r2,r3,80211f74 <memcmp+0x74>
80211f3c:	21000044 	addi	r4,r4,1
80211f40:	29400044 	addi	r5,r5,1
80211f44:	31fff91e 	bne	r6,r7,80211f2c <__reset+0xfa1f1f2c>
80211f48:	0005883a 	mov	r2,zero
80211f4c:	f800283a 	ret
80211f50:	20c00017 	ldw	r3,0(r4)
80211f54:	28800017 	ldw	r2,0(r5)
80211f58:	18bfee1e 	bne	r3,r2,80211f14 <__reset+0xfa1f1f14>
80211f5c:	31bfff04 	addi	r6,r6,-4
80211f60:	21000104 	addi	r4,r4,4
80211f64:	29400104 	addi	r5,r5,4
80211f68:	39bff936 	bltu	r7,r6,80211f50 <__reset+0xfa1f1f50>
80211f6c:	303fe91e 	bne	r6,zero,80211f14 <__reset+0xfa1f1f14>
80211f70:	003ff506 	br	80211f48 <__reset+0xfa1f1f48>
80211f74:	10c5c83a 	sub	r2,r2,r3
80211f78:	f800283a 	ret

80211f7c <__register_exitproc>:
80211f7c:	defffa04 	addi	sp,sp,-24
80211f80:	dc000315 	stw	r16,12(sp)
80211f84:	04200874 	movhi	r16,32801
80211f88:	84111b04 	addi	r16,r16,17516
80211f8c:	80c00017 	ldw	r3,0(r16)
80211f90:	dc400415 	stw	r17,16(sp)
80211f94:	dfc00515 	stw	ra,20(sp)
80211f98:	18805217 	ldw	r2,328(r3)
80211f9c:	2023883a 	mov	r17,r4
80211fa0:	10003726 	beq	r2,zero,80212080 <__register_exitproc+0x104>
80211fa4:	10c00117 	ldw	r3,4(r2)
80211fa8:	010007c4 	movi	r4,31
80211fac:	20c00e16 	blt	r4,r3,80211fe8 <__register_exitproc+0x6c>
80211fb0:	1a000044 	addi	r8,r3,1
80211fb4:	8800221e 	bne	r17,zero,80212040 <__register_exitproc+0xc4>
80211fb8:	18c00084 	addi	r3,r3,2
80211fbc:	18c7883a 	add	r3,r3,r3
80211fc0:	18c7883a 	add	r3,r3,r3
80211fc4:	12000115 	stw	r8,4(r2)
80211fc8:	10c7883a 	add	r3,r2,r3
80211fcc:	19400015 	stw	r5,0(r3)
80211fd0:	0005883a 	mov	r2,zero
80211fd4:	dfc00517 	ldw	ra,20(sp)
80211fd8:	dc400417 	ldw	r17,16(sp)
80211fdc:	dc000317 	ldw	r16,12(sp)
80211fe0:	dec00604 	addi	sp,sp,24
80211fe4:	f800283a 	ret
80211fe8:	00800034 	movhi	r2,0
80211fec:	10800004 	addi	r2,r2,0
80211ff0:	10002626 	beq	r2,zero,8021208c <__register_exitproc+0x110>
80211ff4:	01006404 	movi	r4,400
80211ff8:	d9400015 	stw	r5,0(sp)
80211ffc:	d9800115 	stw	r6,4(sp)
80212000:	d9c00215 	stw	r7,8(sp)
80212004:	00000000 	call	80000000 <__alt_mem_onchip_memory-0x200000>
80212008:	d9400017 	ldw	r5,0(sp)
8021200c:	d9800117 	ldw	r6,4(sp)
80212010:	d9c00217 	ldw	r7,8(sp)
80212014:	10001d26 	beq	r2,zero,8021208c <__register_exitproc+0x110>
80212018:	81000017 	ldw	r4,0(r16)
8021201c:	10000115 	stw	zero,4(r2)
80212020:	02000044 	movi	r8,1
80212024:	22405217 	ldw	r9,328(r4)
80212028:	0007883a 	mov	r3,zero
8021202c:	12400015 	stw	r9,0(r2)
80212030:	20805215 	stw	r2,328(r4)
80212034:	10006215 	stw	zero,392(r2)
80212038:	10006315 	stw	zero,396(r2)
8021203c:	883fde26 	beq	r17,zero,80211fb8 <__reset+0xfa1f1fb8>
80212040:	18c9883a 	add	r4,r3,r3
80212044:	2109883a 	add	r4,r4,r4
80212048:	1109883a 	add	r4,r2,r4
8021204c:	21802215 	stw	r6,136(r4)
80212050:	01800044 	movi	r6,1
80212054:	12406217 	ldw	r9,392(r2)
80212058:	30cc983a 	sll	r6,r6,r3
8021205c:	4992b03a 	or	r9,r9,r6
80212060:	12406215 	stw	r9,392(r2)
80212064:	21c04215 	stw	r7,264(r4)
80212068:	01000084 	movi	r4,2
8021206c:	893fd21e 	bne	r17,r4,80211fb8 <__reset+0xfa1f1fb8>
80212070:	11006317 	ldw	r4,396(r2)
80212074:	218cb03a 	or	r6,r4,r6
80212078:	11806315 	stw	r6,396(r2)
8021207c:	003fce06 	br	80211fb8 <__reset+0xfa1f1fb8>
80212080:	18805304 	addi	r2,r3,332
80212084:	18805215 	stw	r2,328(r3)
80212088:	003fc606 	br	80211fa4 <__reset+0xfa1f1fa4>
8021208c:	00bfffc4 	movi	r2,-1
80212090:	003fd006 	br	80211fd4 <__reset+0xfa1f1fd4>

80212094 <__call_exitprocs>:
80212094:	defff504 	addi	sp,sp,-44
80212098:	df000915 	stw	fp,36(sp)
8021209c:	dd400615 	stw	r21,24(sp)
802120a0:	dc800315 	stw	r18,12(sp)
802120a4:	dfc00a15 	stw	ra,40(sp)
802120a8:	ddc00815 	stw	r23,32(sp)
802120ac:	dd800715 	stw	r22,28(sp)
802120b0:	dd000515 	stw	r20,20(sp)
802120b4:	dcc00415 	stw	r19,16(sp)
802120b8:	dc400215 	stw	r17,8(sp)
802120bc:	dc000115 	stw	r16,4(sp)
802120c0:	d9000015 	stw	r4,0(sp)
802120c4:	2839883a 	mov	fp,r5
802120c8:	04800044 	movi	r18,1
802120cc:	057fffc4 	movi	r21,-1
802120d0:	00a00874 	movhi	r2,32801
802120d4:	10911b04 	addi	r2,r2,17516
802120d8:	12000017 	ldw	r8,0(r2)
802120dc:	45005217 	ldw	r20,328(r8)
802120e0:	44c05204 	addi	r19,r8,328
802120e4:	a0001c26 	beq	r20,zero,80212158 <__call_exitprocs+0xc4>
802120e8:	a0800117 	ldw	r2,4(r20)
802120ec:	15ffffc4 	addi	r23,r2,-1
802120f0:	b8000d16 	blt	r23,zero,80212128 <__call_exitprocs+0x94>
802120f4:	14000044 	addi	r16,r2,1
802120f8:	8421883a 	add	r16,r16,r16
802120fc:	8421883a 	add	r16,r16,r16
80212100:	84402004 	addi	r17,r16,128
80212104:	a463883a 	add	r17,r20,r17
80212108:	a421883a 	add	r16,r20,r16
8021210c:	e0001e26 	beq	fp,zero,80212188 <__call_exitprocs+0xf4>
80212110:	80804017 	ldw	r2,256(r16)
80212114:	e0801c26 	beq	fp,r2,80212188 <__call_exitprocs+0xf4>
80212118:	bdffffc4 	addi	r23,r23,-1
8021211c:	843fff04 	addi	r16,r16,-4
80212120:	8c7fff04 	addi	r17,r17,-4
80212124:	bd7ff91e 	bne	r23,r21,8021210c <__reset+0xfa1f210c>
80212128:	00800034 	movhi	r2,0
8021212c:	10800004 	addi	r2,r2,0
80212130:	10000926 	beq	r2,zero,80212158 <__call_exitprocs+0xc4>
80212134:	a0800117 	ldw	r2,4(r20)
80212138:	1000301e 	bne	r2,zero,802121fc <__call_exitprocs+0x168>
8021213c:	a0800017 	ldw	r2,0(r20)
80212140:	10003226 	beq	r2,zero,8021220c <__call_exitprocs+0x178>
80212144:	a009883a 	mov	r4,r20
80212148:	98800015 	stw	r2,0(r19)
8021214c:	00000000 	call	80000000 <__alt_mem_onchip_memory-0x200000>
80212150:	9d000017 	ldw	r20,0(r19)
80212154:	a03fe41e 	bne	r20,zero,802120e8 <__reset+0xfa1f20e8>
80212158:	dfc00a17 	ldw	ra,40(sp)
8021215c:	df000917 	ldw	fp,36(sp)
80212160:	ddc00817 	ldw	r23,32(sp)
80212164:	dd800717 	ldw	r22,28(sp)
80212168:	dd400617 	ldw	r21,24(sp)
8021216c:	dd000517 	ldw	r20,20(sp)
80212170:	dcc00417 	ldw	r19,16(sp)
80212174:	dc800317 	ldw	r18,12(sp)
80212178:	dc400217 	ldw	r17,8(sp)
8021217c:	dc000117 	ldw	r16,4(sp)
80212180:	dec00b04 	addi	sp,sp,44
80212184:	f800283a 	ret
80212188:	a0800117 	ldw	r2,4(r20)
8021218c:	80c00017 	ldw	r3,0(r16)
80212190:	10bfffc4 	addi	r2,r2,-1
80212194:	15c01426 	beq	r2,r23,802121e8 <__call_exitprocs+0x154>
80212198:	80000015 	stw	zero,0(r16)
8021219c:	183fde26 	beq	r3,zero,80212118 <__reset+0xfa1f2118>
802121a0:	95c8983a 	sll	r4,r18,r23
802121a4:	a0806217 	ldw	r2,392(r20)
802121a8:	a5800117 	ldw	r22,4(r20)
802121ac:	2084703a 	and	r2,r4,r2
802121b0:	10000b26 	beq	r2,zero,802121e0 <__call_exitprocs+0x14c>
802121b4:	a0806317 	ldw	r2,396(r20)
802121b8:	2088703a 	and	r4,r4,r2
802121bc:	20000c1e 	bne	r4,zero,802121f0 <__call_exitprocs+0x15c>
802121c0:	89400017 	ldw	r5,0(r17)
802121c4:	d9000017 	ldw	r4,0(sp)
802121c8:	183ee83a 	callr	r3
802121cc:	a0800117 	ldw	r2,4(r20)
802121d0:	15bfbf1e 	bne	r2,r22,802120d0 <__reset+0xfa1f20d0>
802121d4:	98800017 	ldw	r2,0(r19)
802121d8:	153fcf26 	beq	r2,r20,80212118 <__reset+0xfa1f2118>
802121dc:	003fbc06 	br	802120d0 <__reset+0xfa1f20d0>
802121e0:	183ee83a 	callr	r3
802121e4:	003ff906 	br	802121cc <__reset+0xfa1f21cc>
802121e8:	a5c00115 	stw	r23,4(r20)
802121ec:	003feb06 	br	8021219c <__reset+0xfa1f219c>
802121f0:	89000017 	ldw	r4,0(r17)
802121f4:	183ee83a 	callr	r3
802121f8:	003ff406 	br	802121cc <__reset+0xfa1f21cc>
802121fc:	a0800017 	ldw	r2,0(r20)
80212200:	a027883a 	mov	r19,r20
80212204:	1029883a 	mov	r20,r2
80212208:	003fb606 	br	802120e4 <__reset+0xfa1f20e4>
8021220c:	0005883a 	mov	r2,zero
80212210:	003ffb06 	br	80212200 <__reset+0xfa1f2200>

80212214 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
80212214:	defffd04 	addi	sp,sp,-12
80212218:	df000215 	stw	fp,8(sp)
8021221c:	df000204 	addi	fp,sp,8
80212220:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
80212224:	0001883a 	nop
80212228:	e0bfff17 	ldw	r2,-4(fp)
8021222c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
80212230:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
80212234:	10000226 	beq	r2,zero,80212240 <_exit+0x2c>
    ALT_SIM_FAIL();
80212238:	002af070 	cmpltui	zero,zero,43969
8021223c:	00000106 	br	80212244 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
80212240:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
80212244:	003fff06 	br	80212244 <__reset+0xfa1f2244>
