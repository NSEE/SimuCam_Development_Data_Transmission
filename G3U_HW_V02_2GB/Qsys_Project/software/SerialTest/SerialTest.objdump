
SerialTest.elf:     file format elf32-littlenios2
SerialTest.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x80200244

Program Header:
    LOAD off    0x00001020 vaddr 0x80200020 paddr 0x80200020 align 2**12
         filesz 0x00013a74 memsz 0x00013c58 flags rwx
    LOAD off    0x00015000 vaddr 0x86020000 paddr 0x86020000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000000  86020000  86020000  00015000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  80200020  80200020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000116c4  80200244  80200244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000059c  80211908  80211908  00012908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001be4  80211eb0  80211eb0  00012eb0  2**4
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000001e4  80213a94  80213a94  00014a94  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  80213c78  80213c78  00015000  2**0
                  CONTENTS
  7 .ext_flash    00000000  86020020  86020020  00015000  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00015000  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000f38  00000000  00000000  00015028  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0002650c  00000000  00000000  00015f60  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000982d  00000000  00000000  0003c46c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000c020  00000000  00000000  00045c99  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002724  00000000  00000000  00051cbc  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000044a4  00000000  00000000  000543e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00017a8c  00000000  00000000  00058884  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  00070310  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000018e8  00000000  00000000  00070350  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0007564d  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  00075650  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0007565c  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0007565d  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0007565e  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  00075662  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00075666  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  0007566a  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  00075675  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  00075680  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000011  00000000  00000000  0007568b  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000057  00000000  00000000  0007569c  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00262632  00000000  00000000  000756f3  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
86020000 l    d  .entry	00000000 .entry
80200020 l    d  .exceptions	00000000 .exceptions
80200244 l    d  .text	00000000 .text
80211908 l    d  .rodata	00000000 .rodata
80211eb0 l    d  .rwdata	00000000 .rwdata
80213a94 l    d  .bss	00000000 .bss
80213c78 l    d  .onchip_memory	00000000 .onchip_memory
86020020 l    d  .ext_flash	00000000 .ext_flash
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../SerialTest_bsp//obj/HAL/src/crt0.o
80200278 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 uart.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
8021198e l     O .rodata	00000010 zeroes.4404
80202a10 l     F .text	000000bc __sbprintf
8021199e l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
80202c20 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
80204750 l     F .text	00000008 __fp_unlock
80204764 l     F .text	0000019c __sinit.part.1
80204900 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
80211eb0 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
802122f4 l     O .rwdata	00000020 lc_ctype_charset
802122d4 l     O .rwdata	00000020 lc_message_charset
80212314 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
802119d0 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
80207bb4 l     F .text	000000fc __sprint_r.part.0
80211b04 l     O .rodata	00000010 blanks.4348
80211af4 l     O .rodata	00000010 zeroes.4349
80209140 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
8020cdfc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
8020cf08 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
8020cf34 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
8020d020 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
8020d100 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
8020d2d4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
80213a7c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
8020d550 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
8020d684 l     F .text	00000034 alt_dev_reg
80212900 l     O .rwdata	00001060 jtag_uart_0
80213960 l     O .rwdata	00000060 dma_DDR_M1
802139c0 l     O .rwdata	00000060 dma_DDR_M2
80213a20 l     O .rwdata	0000002c Altera_UP_SD_Card_Avalon_Interface_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
8020d9dc l     F .text	0000020c altera_avalon_jtag_uart_irq
8020dbe8 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
8020e220 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_msgdma.c
8020e314 l     F .text	0000003c alt_get_errno
8020e350 l     F .text	00000094 alt_msgdma_write_standard_descriptor
8020e3e4 l     F .text	0000012c alt_msgdma_write_extended_descriptor
8020e510 l     F .text	00000184 alt_msgdma_irq
8020e694 l     F .text	0000008c alt_msgdma_construct_standard_descriptor
8020e720 l     F .text	00000154 alt_msgdma_construct_extended_descriptor
8020e874 l     F .text	000002d0 alt_msgdma_descriptor_async_transfer
8020eb44 l     F .text	00000378 alt_msgdma_descriptor_sync_transfer
8020f18c l     F .text	000000a4 alt_msgdma_construct_prefetcher_standard_descriptor
8020f230 l     F .text	00000194 alt_msgdma_construct_prefetcher_extended_descriptor
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
80210530 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
80210a00 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
80210b40 l     F .text	0000003c alt_get_errno
80210b7c l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
80213acc g     O .bss	00000004 alt_instruction_exception_handler
802101c4 g     F .text	0000003c alt_msgdma_standard_descriptor_async_transfer
802071f8 g     F .text	00000074 _mprec_log10
802072e4 g     F .text	0000008c __any_on
802096dc g     F .text	00000054 _isatty_r
802119dc g     O .rodata	00000028 __mprec_tinytens
8020d210 g     F .text	0000007c alt_main
80200690 g     F .text	000000c0 _puts_r
80213b78 g     O .bss	00000100 alt_irq
80209730 g     F .text	00000060 _lseek_r
8020b928 g     F .text	00000088 .hidden __eqdf2
8020ef6c g     F .text	00000058 alt_msgdma_construct_standard_mm_to_mm_descriptor
80213c78 g       *ABS*	00000000 __alt_heap_start
80200654 g     F .text	0000003c printf
80209948 g     F .text	0000009c _wcrtomb_r
80207a74 g     F .text	0000005c __sseek
80204aa0 g     F .text	00000010 __sinit
802097f0 g     F .text	00000140 __swbuf_r
80205568 g     F .text	0000007c _setlocale_r
80204908 g     F .text	00000068 __sfmoreglue
8020d2b0 g     F .text	00000024 __malloc_unlock
802060f0 g     F .text	0000015c memmove
80204a88 g     F .text	00000018 _cleanup
80206374 g     F .text	000000a8 _Balloc
80213af8 g     O .bss	00000040 cTxBuffer
8020eebc g     F .text	00000058 alt_msgdma_construct_standard_st_to_mm_descriptor
8020b9b0 g     F .text	000000dc .hidden __gtdf2
802111a0 g     F .text	00000024 altera_nios2_gen2_irq_init
86020000 g     F .entry	00000000 __reset
80209680 g     F .text	0000005c _fstat_r
80213ab0 g     O .bss	00000004 errno
802079f0 g     F .text	00000008 __seofread
80213ab8 g     O .bss	00000004 alt_argv
8021ba4c g       *ABS*	00000000 _gp
8020d520 g     F .text	00000030 usleep
8020fa50 g     F .text	00000144 alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits
8021277c g     O .rwdata	00000180 alt_fd_list
802106d0 g     F .text	00000090 alt_find_dev
802004dc g     F .text	00000148 memcpy
80204758 g     F .text	0000000c _cleanup_r
8020cc14 g     F .text	000000dc .hidden __floatsidf
80210ac4 g     F .text	0000007c alt_io_redirect
8020ba8c g     F .text	000000f4 .hidden __ltdf2
80211908 g       *ABS*	00000000 __DTOR_END__
8020ff00 g     F .text	000000ac alt_msgdma_start_prefetcher_with_extd_desc_list
80210200 g     F .text	0000003c alt_msgdma_extended_descriptor_async_transfer
80210170 g     F .text	00000054 alt_msgdma_register_callback
80200750 g     F .text	00000014 puts
80211370 g     F .text	0000009c alt_exception_cause_generated_bad_addr
802078d4 g     F .text	00000074 __fpclassifyd
80207154 g     F .text	000000a4 __ratio
80209124 g     F .text	0000001c __vfiprintf_internal
8020dde0 g     F .text	0000021c altera_avalon_jtag_uart_read
8020f6bc g     F .text	000000f0 alt_msgdma_prefetcher_add_standard_desc_to_list
80200624 g     F .text	00000030 _printf_r
8020a6d8 g     F .text	00000064 .hidden __udivsi3
8020d05c g     F .text	000000a4 isatty
80211a2c g     O .rodata	000000c8 __mprec_tens
802055e4 g     F .text	0000000c __locale_charset
80213aac g     O .bss	00000004 __malloc_top_pad
80213a54 g     O .rwdata	00000004 __mb_cur_max
80205614 g     F .text	0000000c _localeconv_r
80206780 g     F .text	0000003c __i2b
80204f24 g     F .text	000004bc __sfvwrite_r
80207948 g     F .text	00000054 _sbrk_r
80209790 g     F .text	00000060 _read_r
80210508 g     F .text	00000028 alt_dcache_flush
80213a74 g     O .rwdata	00000004 alt_max_fd
80209374 g     F .text	000000f0 _fclose_r
80204720 g     F .text	00000030 fflush
80213aa8 g     O .bss	00000004 __malloc_max_sbrked_mem
8020a794 g     F .text	000008ac .hidden __adddf3
80206efc g     F .text	0000010c __b2d
8020f41c g     F .text	00000058 alt_msgdma_construct_prefetcher_standard_st_to_mm_descriptor
8020a0a8 g     F .text	00000538 .hidden __umoddi3
8020d13c g     F .text	000000d4 lseek
80213a4c g     O .rwdata	00000004 _global_impure_ptr
80207370 g     F .text	00000564 _realloc_r
80213c78 g       *ABS*	00000000 __bss_end
80210910 g     F .text	000000f0 alt_iic_isr_register
80211098 g     F .text	00000108 alt_tick
80210004 g     F .text	0000016c alt_msgdma_init
80209b30 g     F .text	00000578 .hidden __udivdi3
802095dc g     F .text	00000024 _fputwc_r
80211a04 g     O .rodata	00000028 __mprec_bigtens
80206564 g     F .text	00000104 __s2b
8020ccf0 g     F .text	000000a8 .hidden __floatunsidf
80206c3c g     F .text	00000060 __mcmp
80210278 g     F .text	0000003c alt_msgdma_extended_descriptor_sync_transfer
80204ac0 g     F .text	00000018 __fp_lock_all
802108c4 g     F .text	0000004c alt_ic_irq_enabled
80210ffc g     F .text	0000009c alt_alarm_stop
80213ac0 g     O .bss	00000004 alt_irq_active
802000fc g     F .exceptions	000000d4 alt_irq_handler
80212754 g     O .rwdata	00000028 alt_dev_null
8020f054 g     F .text	00000090 alt_msgdma_construct_extended_mm_to_st_descriptor
8020fe54 g     F .text	000000ac alt_msgdma_start_prefetcher_with_std_desc_list
80206668 g     F .text	00000068 __hi0bits
8020cb94 g     F .text	00000080 .hidden __fixdfsi
8020036c g     F .text	0000008c vUartWriteBuffer
80200000 g       *ABS*	00000000 __alt_mem_onchip_memory
80213a6c g     O .rwdata	00000008 alt_dev_list
8020d58c g     F .text	000000f8 write
802114d4 g     F .text	000000a0 _putc_r
8020cf70 g     F .text	000000b0 fstat
8020ba8c g     F .text	000000f4 .hidden __ledf2
802069b4 g     F .text	00000140 __pow5mult
80207cc8 g     F .text	0000145c ___vfiprintf_internal_r
80213aa0 g     O .bss	00000004 __nlocale_changed
8020a73c g     F .text	00000058 .hidden __umodsi3
8020f474 g     F .text	00000058 alt_msgdma_construct_prefetcher_standard_mm_to_st_descriptor
80213c78 g       *ABS*	00000000 end
8020d91c g     F .text	000000c0 altera_avalon_jtag_uart_init
802001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
80211908 g       *ABS*	00000000 __CTOR_LIST__
802e0000 g       *ABS*	00000000 __alt_stack_pointer
8020e298 g     F .text	0000007c alt_avalon_timer_sc_init
8020cd98 g     F .text	00000064 .hidden __clzsi2
8020dffc g     F .text	00000224 altera_avalon_jtag_uart_write
80204ab0 g     F .text	00000004 __sfp_lock_acquire
8020600c g     F .text	000000e4 memchr
802007fc g     F .text	000021f8 ___vfprintf_internal_r
80204c14 g     F .text	00000310 _free_r
80210d94 g     F .text	0000022c alt_printf
802055f0 g     F .text	00000010 __locale_mb_cur_max
80211754 g     F .text	00000180 __call_exitprocs
80213a9c g     O .bss	00000004 __mlocale_changed
80213a58 g     O .rwdata	00000004 __malloc_sbrk_base
80200244 g     F .text	00000038 _start
80213ac4 g     O .bss	00000004 _alt_tick_rate
80206af4 g     F .text	00000148 __lshift
80213ac8 g     O .bss	00000004 _alt_nticks
8020ef14 g     F .text	00000058 alt_msgdma_construct_standard_mm_to_st_descriptor
8020d310 g     F .text	000000fc read
8020d6f0 g     F .text	000000c8 alt_sys_init
8021163c g     F .text	00000118 __register_exitproc
802067bc g     F .text	000001f8 __multiply
8020dc88 g     F .text	00000068 altera_avalon_jtag_uart_close
80213b38 g     O .bss	00000040 cRxBuffer
80213ad0 g     O .bss	00000028 __malloc_current_mallinfo
80207008 g     F .text	0000014c __d2b
802003f8 g     F .text	00000054 cUartReadChar
8020d7b8 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
802112cc g     F .text	000000a4 alt_get_fd
802103e0 g     F .text	00000128 alt_busy_sleep
8020925c g     F .text	00000054 _close_r
8020f3c4 g     F .text	00000058 alt_msgdma_construct_prefetcher_standard_mm_to_mm_descriptor
80211458 g     F .text	0000007c memcmp
8020d878 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
80213c78 g       *ABS*	00000000 __alt_stack_base
8020d8c8 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
8020f4cc g     F .text	000000a0 alt_msgdma_construct_prefetcher_extended_st_to_mm_descriptor
80202acc g     F .text	00000154 __swsetup_r
8020b040 g     F .text	000008e8 .hidden __divdf3
80204970 g     F .text	00000118 __sfp
8020726c g     F .text	00000078 __copybits
8021234c g     O .rwdata	00000408 __malloc_av_
80204abc g     F .text	00000004 __sinit_lock_release
8020bb80 g     F .text	00000718 .hidden __muldf3
8020799c g     F .text	00000054 __sread
802111c4 g     F .text	00000108 alt_find_file
8021056c g     F .text	000000a4 alt_dev_llist_insert
8020d28c g     F .text	00000024 __malloc_lock
8020d470 g     F .text	000000b0 sbrk
802046c4 g     F .text	0000005c _fflush_r
802092b0 g     F .text	000000c4 _calloc_r
80213a94 g     O .bss	00000002 usiStringLength
80213a94 g       *ABS*	00000000 __bss_start
8020624c g     F .text	00000128 memset
8020ffac g     F .text	00000058 alt_msgdma_open
8020027c g     F .text	000000a4 main
80213abc g     O .bss	00000004 alt_envp
8020044c g     F .text	00000090 vUartReadBuffer
80213aa4 g     O .bss	00000004 __malloc_max_total_mem
8020f7ac g     F .text	00000198 alt_msgdma_prefetcher_add_extended_desc_to_list
8020d818 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
80209930 g     F .text	00000018 __swbuf
80207ad0 g     F .text	00000008 __sclose
802e0000 g       *ABS*	00000000 __alt_heap_limit
80209464 g     F .text	00000014 fclose
80202e20 g     F .text	00001688 _dtoa_r
8020fb94 g     F .text	000002c0 alt_msgdma_start_prefetcher_with_list_addr
80205800 g     F .text	0000080c _malloc_r
80209aa4 g     F .text	00000030 __ascii_wctomb
80213a78 g     O .rwdata	00000004 alt_errno
8020f604 g     F .text	000000b8 alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor
802053e0 g     F .text	000000c4 _fwalk
80211574 g     F .text	000000c8 putc
8020a5e0 g     F .text	00000084 .hidden __divsi3
80204af0 g     F .text	00000124 _malloc_trim_r
80211908 g       *ABS*	00000000 __CTOR_END__
80207ad8 g     F .text	000000dc strcmp
80211908 g       *ABS*	00000000 __DTOR_LIST__
8020b928 g     F .text	00000088 .hidden __nedf2
8020d6b8 g     F .text	00000038 alt_irq_init
8020d40c g     F .text	00000064 alt_release_fd
8021023c g     F .text	0000003c alt_msgdma_standard_descriptor_sync_transfer
80211b14 g     O .rodata	00000100 .hidden __clz_tab
80213a98 g     O .bss	00000004 _PathLocale
8021140c g     F .text	00000014 atexit
802091fc g     F .text	00000060 _write_r
80205620 g     F .text	00000018 setlocale
8020f56c g     F .text	00000098 alt_msgdma_construct_prefetcher_extended_mm_to_st_descriptor
80213a50 g     O .rwdata	00000004 _impure_ptr
80213ab4 g     O .bss	00000004 alt_argc
802044a8 g     F .text	0000021c __sflush_r
80210670 g     F .text	00000060 _do_dtors
8020560c g     F .text	00000008 __locale_cjk_lang
80200020 g       .exceptions	00000000 alt_irq_entry
80206e98 g     F .text	00000064 __ulp
80204ad8 g     F .text	00000018 __fp_unlock_all
80213a64 g     O .rwdata	00000008 alt_fs_list
80205638 g     F .text	0000000c localeconv
80210760 g     F .text	00000050 alt_ic_isr_register
80213a94 g       *ABS*	00000000 _edata
80213c78 g       *ABS*	00000000 _end
80209478 g     F .text	00000164 __fputwc
8020dcf0 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
80210838 g     F .text	0000008c alt_ic_irq_disable
802079f8 g     F .text	0000007c __swrite
80213a5c g     O .rwdata	00000004 __malloc_trim_threshold
80205600 g     F .text	0000000c __locale_msgcharset
80211420 g     F .text	00000038 exit
802054a4 g     F .text	000000c4 _fwalk_reent
8020f944 g     F .text	0000010c alt_msgdma_prefetcher_set_std_list_own_by_hw_bits
80206c9c g     F .text	000001fc __mdiff
8020a664 g     F .text	00000074 .hidden __modsi3
802e0000 g       *ABS*	00000000 __alt_data_end
80200020 g     F .exceptions	00000000 alt_exception
80204ab4 g     F .text	00000004 __sfp_lock_release
8020f0e4 g     F .text	000000a8 alt_msgdma_construct_extended_mm_to_mm_descriptor
84000000 g       *ABS*	00000000 __alt_mem_ext_flash
8020efc4 g     F .text	00000090 alt_msgdma_construct_extended_st_to_mm_descriptor
802118d4 g     F .text	00000034 _exit
802102b4 g     F .text	0000012c alt_alarm_start
80205644 g     F .text	000001bc __smakebuf_r
80213a80 g     O .rwdata	00000008 alt_msgdma_list
80200764 g     F .text	00000098 strlen
80210c40 g     F .text	00000154 open
8020b9b0 g     F .text	000000dc .hidden __gedf2
80210fc0 g     F .text	0000003c alt_putchar
80213a60 g     O .rwdata	00000004 __wctomb
80207cb0 g     F .text	00000018 __sprint_r
80213a88 g     O .rwdata	00000004 alt_priority_mask
802107b0 g     F .text	00000088 alt_ic_irq_enable
802029f4 g     F .text	0000001c __vfprintf_internal
80209ad4 g     F .text	0000005c _wctomb_r
8020c298 g     F .text	000008fc .hidden __subdf3
802066d0 g     F .text	000000b0 __lo0bits
80213a8c g     O .rwdata	00000008 alt_alarm_list
80210610 g     F .text	00000060 _do_ctors
802099e4 g     F .text	000000c0 wcrtomb
8020ce38 g     F .text	000000d0 close
80200320 g     F .text	0000004c vUartWriteChar
80209600 g     F .text	00000080 fputwc
80204ab8 g     F .text	00000004 __sinit_lock_acquire
80206444 g     F .text	00000120 __multadd
8020641c g     F .text	00000028 _Bfree



Disassembly of section .exceptions:

80200020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
80200020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
80200024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
80200028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
8020002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
80200030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
80200034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
80200038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
8020003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
80200040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
80200044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
80200048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
8020004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
80200050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
80200054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
80200058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
8020005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
80200060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
80200064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
80200068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
8020006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
80200070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
80200074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
80200078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
8020007c:	10000326 	beq	r2,zero,8020008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
80200080:	20000226 	beq	r4,zero,8020008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
80200084:	02000fc0 	call	802000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
80200088:	00000706 	br	802000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
8020008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
80200090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
80200094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
80200098:	02001d00 	call	802001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
8020009c:	1000021e 	bne	r2,zero,802000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
802000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
802000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
802000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
802000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
802000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
802000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
802000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
802000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
802000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
802000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
802000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
802000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
802000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
802000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
802000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
802000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
802000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
802000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
802000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
802000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
802000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
802000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
802000f8:	ef80083a 	eret

802000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
802000fc:	defff904 	addi	sp,sp,-28
80200100:	dfc00615 	stw	ra,24(sp)
80200104:	df000515 	stw	fp,20(sp)
80200108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
8020010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
80200110:	0005313a 	rdctl	r2,ipending
80200114:	e0bffe15 	stw	r2,-8(fp)

  return active;
80200118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
8020011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
80200120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
80200124:	00800044 	movi	r2,1
80200128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
8020012c:	e0fffb17 	ldw	r3,-20(fp)
80200130:	e0bffc17 	ldw	r2,-16(fp)
80200134:	1884703a 	and	r2,r3,r2
80200138:	10001426 	beq	r2,zero,8020018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
8020013c:	00a00874 	movhi	r2,32801
80200140:	108ede04 	addi	r2,r2,15224
80200144:	e0fffd17 	ldw	r3,-12(fp)
80200148:	180690fa 	slli	r3,r3,3
8020014c:	10c5883a 	add	r2,r2,r3
80200150:	10c00017 	ldw	r3,0(r2)
80200154:	00a00874 	movhi	r2,32801
80200158:	108ede04 	addi	r2,r2,15224
8020015c:	e13ffd17 	ldw	r4,-12(fp)
80200160:	200890fa 	slli	r4,r4,3
80200164:	1105883a 	add	r2,r2,r4
80200168:	10800104 	addi	r2,r2,4
8020016c:	10800017 	ldw	r2,0(r2)
80200170:	1009883a 	mov	r4,r2
80200174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
80200178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
8020017c:	0005313a 	rdctl	r2,ipending
80200180:	e0bfff15 	stw	r2,-4(fp)

  return active;
80200184:	e0bfff17 	ldw	r2,-4(fp)
80200188:	00000706 	br	802001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
8020018c:	e0bffc17 	ldw	r2,-16(fp)
80200190:	1085883a 	add	r2,r2,r2
80200194:	e0bffc15 	stw	r2,-16(fp)
      i++;
80200198:	e0bffd17 	ldw	r2,-12(fp)
8020019c:	10800044 	addi	r2,r2,1
802001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
802001a4:	003fe106 	br	8020012c <__reset+0xfa1e012c>

    active = alt_irq_pending ();
802001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
802001ac:	e0bffb17 	ldw	r2,-20(fp)
802001b0:	103fdb1e 	bne	r2,zero,80200120 <__reset+0xfa1e0120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
802001b4:	0001883a 	nop
}
802001b8:	0001883a 	nop
802001bc:	e037883a 	mov	sp,fp
802001c0:	dfc00117 	ldw	ra,4(sp)
802001c4:	df000017 	ldw	fp,0(sp)
802001c8:	dec00204 	addi	sp,sp,8
802001cc:	f800283a 	ret

802001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
802001d0:	defffb04 	addi	sp,sp,-20
802001d4:	dfc00415 	stw	ra,16(sp)
802001d8:	df000315 	stw	fp,12(sp)
802001dc:	df000304 	addi	fp,sp,12
802001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
802001e4:	000531fa 	rdctl	r2,exception
802001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
802001ec:	e0bffd17 	ldw	r2,-12(fp)
802001f0:	10801f0c 	andi	r2,r2,124
802001f4:	1004d0ba 	srli	r2,r2,2
802001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
802001fc:	0005333a 	rdctl	r2,badaddr
80200200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
80200204:	d0a02017 	ldw	r2,-32640(gp)
80200208:	10000726 	beq	r2,zero,80200228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
8020020c:	d0a02017 	ldw	r2,-32640(gp)
80200210:	e0fffd17 	ldw	r3,-12(fp)
80200214:	e1bffe17 	ldw	r6,-8(fp)
80200218:	e17fff17 	ldw	r5,-4(fp)
8020021c:	1809883a 	mov	r4,r3
80200220:	103ee83a 	callr	r2
80200224:	00000206 	br	80200230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
80200228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
8020022c:	0005883a 	mov	r2,zero
}
80200230:	e037883a 	mov	sp,fp
80200234:	dfc00117 	ldw	ra,4(sp)
80200238:	df000017 	ldw	fp,0(sp)
8020023c:	dec00204 	addi	sp,sp,8
80200240:	f800283a 	ret

Disassembly of section .text:

80200244 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
80200244:	06e00bb4 	movhi	sp,32814
    ori sp, sp, %lo(__alt_stack_pointer)
80200248:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
8020024c:	06a00874 	movhi	gp,32801
    ori gp, gp, %lo(_gp)
80200250:	d6ae9314 	ori	gp,gp,47692
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
80200254:	00a00874 	movhi	r2,32801
    ori r2, r2, %lo(__bss_start)
80200258:	108ea514 	ori	r2,r2,14996

    movhi r3, %hi(__bss_end)
8020025c:	00e00874 	movhi	r3,32801
    ori r3, r3, %lo(__bss_end)
80200260:	18cf1e14 	ori	r3,r3,15480

    beq r2, r3, 1f
80200264:	10c00326 	beq	r2,r3,80200274 <_start+0x30>

0:
    stw zero, (r2)
80200268:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
8020026c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
80200270:	10fffd36 	bltu	r2,r3,80200268 <__reset+0xfa1e0268>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
80200274:	020d2100 	call	8020d210 <alt_main>

80200278 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
80200278:	003fff06 	br	80200278 <__reset+0xfa1e0278>

8020027c <main>:
char cTxBuffer[64];
char cRxBuffer[64];
alt_u16 usiStringLength = 0;

int main()
{
8020027c:	defffd04 	addi	sp,sp,-12
80200280:	dfc00215 	stw	ra,8(sp)
80200284:	df000115 	stw	fp,4(sp)
80200288:	df000104 	addi	fp,sp,4
  printf("Hello from Nios II!\n");
8020028c:	01200874 	movhi	r4,32801
80200290:	21064204 	addi	r4,r4,6408
80200294:	02007500 	call	80200750 <puts>

  volatile TUartModule *vpxUartModule = (TUartModule *)UART_MODULE_TOP_0_BASE;
80200298:	00a08034 	movhi	r2,33280
8020029c:	10830004 	addi	r2,r2,3072
802002a0:	e0bfff15 	stw	r2,-4(fp)
//  printf("0x%08lX \n", *((alt_u32*)(UART_MODULE_TOP_0_BASE + 28)));

  while (1) {


	  usiStringLength = sprintf(cTxBuffer, "Hello from Nios II!\n");
802002a4:	00e00874 	movhi	r3,32801
802002a8:	18cebe04 	addi	r3,r3,15096
802002ac:	00a00874 	movhi	r2,32801
802002b0:	10864704 	addi	r2,r2,6428
802002b4:	1009883a 	mov	r4,r2
802002b8:	00800544 	movi	r2,21
802002bc:	100d883a 	mov	r6,r2
802002c0:	200b883a 	mov	r5,r4
802002c4:	1809883a 	mov	r4,r3
802002c8:	02004dc0 	call	802004dc <memcpy>
802002cc:	00800504 	movi	r2,20
802002d0:	d0a0120d 	sth	r2,-32696(gp)
	  vUartWriteBuffer(cTxBuffer, usiStringLength);
802002d4:	d0a0120b 	ldhu	r2,-32696(gp)
802002d8:	10bfffcc 	andi	r2,r2,65535
802002dc:	100b883a 	mov	r5,r2
802002e0:	01200874 	movhi	r4,32801
802002e4:	210ebe04 	addi	r4,r4,15096
802002e8:	020036c0 	call	8020036c <vUartWriteBuffer>

	  vUartReadBuffer(cRxBuffer, 16);
802002ec:	01400404 	movi	r5,16
802002f0:	01200874 	movhi	r4,32801
802002f4:	210ece04 	addi	r4,r4,15160
802002f8:	020044c0 	call	8020044c <vUartReadBuffer>
	  printf("Incoming data: %s\n", cRxBuffer);
802002fc:	01600874 	movhi	r5,32801
80200300:	294ece04 	addi	r5,r5,15160
80200304:	01200874 	movhi	r4,32801
80200308:	21064d04 	addi	r4,r4,6452
8020030c:	02006540 	call	80200654 <printf>
//	  vpxUartModule->uliUartTxWrdata = (alt_u32)'o';
//	  vpxUartModule->bUartTxWrreq = true;
//	  vpxUartModule->uliUartTxWrdata = (alt_u32)'\n';
//	  vpxUartModule->bUartTxWrreq = true;

	  usleep(1000000);
80200310:	010003f4 	movhi	r4,15
80200314:	21109004 	addi	r4,r4,16960
80200318:	020d5200 	call	8020d520 <usleep>

  }
8020031c:	003fe106 	br	802002a4 <__reset+0xfa1e02a4>

80200320 <vUartWriteChar>:
 *      Author: rfranca
 */

#include "uart.h"

void vUartWriteChar(char cTxChar){
80200320:	defffd04 	addi	sp,sp,-12
80200324:	df000215 	stw	fp,8(sp)
80200328:	df000204 	addi	fp,sp,8
8020032c:	2005883a 	mov	r2,r4
80200330:	e0bfff05 	stb	r2,-4(fp)
	volatile TUartModule *vpxUartModule = (TUartModule *)UART_BASE_ADDR;
80200334:	00a08034 	movhi	r2,33280
80200338:	10830004 	addi	r2,r2,3072
8020033c:	e0bffe15 	stw	r2,-8(fp)
	vpxUartModule->uliUartTxWrdata = (alt_u32)cTxChar;
80200340:	e0ffff07 	ldb	r3,-4(fp)
80200344:	e0bffe17 	ldw	r2,-8(fp)
80200348:	10c00115 	stw	r3,4(r2)
	vpxUartModule->bUartTxWrreq = true;
8020034c:	e0bffe17 	ldw	r2,-8(fp)
80200350:	00c00044 	movi	r3,1
80200354:	10c00015 	stw	r3,0(r2)
}
80200358:	0001883a 	nop
8020035c:	e037883a 	mov	sp,fp
80200360:	df000017 	ldw	fp,0(sp)
80200364:	dec00104 	addi	sp,sp,4
80200368:	f800283a 	ret

8020036c <vUartWriteBuffer>:

void vUartWriteBuffer(char *pcTxBuffer, alt_u16 usiLength){
8020036c:	defffb04 	addi	sp,sp,-20
80200370:	df000415 	stw	fp,16(sp)
80200374:	df000404 	addi	fp,sp,16
80200378:	e13ffe15 	stw	r4,-8(fp)
8020037c:	2805883a 	mov	r2,r5
80200380:	e0bfff0d 	sth	r2,-4(fp)
	volatile TUartModule *vpxUartModule = (TUartModule *)UART_BASE_ADDR;
80200384:	00a08034 	movhi	r2,33280
80200388:	10830004 	addi	r2,r2,3072
8020038c:	e0bffd15 	stw	r2,-12(fp)
	alt_u16 usiCnt = 0;
80200390:	e03ffc0d 	sth	zero,-16(fp)
	for (usiCnt = 0; usiCnt < usiLength; usiCnt++) {
80200394:	e03ffc0d 	sth	zero,-16(fp)
80200398:	00000f06 	br	802003d8 <vUartWriteBuffer+0x6c>
		vpxUartModule->uliUartTxWrdata = (alt_u32)(pcTxBuffer[usiCnt]);
8020039c:	e0bffc0b 	ldhu	r2,-16(fp)
802003a0:	e0fffe17 	ldw	r3,-8(fp)
802003a4:	1885883a 	add	r2,r3,r2
802003a8:	10800003 	ldbu	r2,0(r2)
802003ac:	10c03fcc 	andi	r3,r2,255
802003b0:	18c0201c 	xori	r3,r3,128
802003b4:	18ffe004 	addi	r3,r3,-128
802003b8:	e0bffd17 	ldw	r2,-12(fp)
802003bc:	10c00115 	stw	r3,4(r2)
		vpxUartModule->bUartTxWrreq = true;
802003c0:	e0bffd17 	ldw	r2,-12(fp)
802003c4:	00c00044 	movi	r3,1
802003c8:	10c00015 	stw	r3,0(r2)
}

void vUartWriteBuffer(char *pcTxBuffer, alt_u16 usiLength){
	volatile TUartModule *vpxUartModule = (TUartModule *)UART_BASE_ADDR;
	alt_u16 usiCnt = 0;
	for (usiCnt = 0; usiCnt < usiLength; usiCnt++) {
802003cc:	e0bffc0b 	ldhu	r2,-16(fp)
802003d0:	10800044 	addi	r2,r2,1
802003d4:	e0bffc0d 	sth	r2,-16(fp)
802003d8:	e0fffc0b 	ldhu	r3,-16(fp)
802003dc:	e0bfff0b 	ldhu	r2,-4(fp)
802003e0:	18bfee36 	bltu	r3,r2,8020039c <__reset+0xfa1e039c>
		vpxUartModule->uliUartTxWrdata = (alt_u32)(pcTxBuffer[usiCnt]);
		vpxUartModule->bUartTxWrreq = true;
	}
}
802003e4:	0001883a 	nop
802003e8:	e037883a 	mov	sp,fp
802003ec:	df000017 	ldw	fp,0(sp)
802003f0:	dec00104 	addi	sp,sp,4
802003f4:	f800283a 	ret

802003f8 <cUartReadChar>:

char cUartReadChar(){
802003f8:	defffd04 	addi	sp,sp,-12
802003fc:	df000215 	stw	fp,8(sp)
80200400:	df000204 	addi	fp,sp,8
	volatile TUartModule *vpxUartModule = (TUartModule *)UART_BASE_ADDR;
80200404:	00a08034 	movhi	r2,33280
80200408:	10830004 	addi	r2,r2,3072
8020040c:	e0bffe15 	stw	r2,-8(fp)
	char cRxChar;
	while (vpxUartModule->bUartRxEmpty){}
80200410:	0001883a 	nop
80200414:	e0bffe17 	ldw	r2,-8(fp)
80200418:	10800517 	ldw	r2,20(r2)
8020041c:	103ffd1e 	bne	r2,zero,80200414 <__reset+0xfa1e0414>
	cRxChar = (char)((vpxUartModule->uliUartRxRddata) & 0xFF);
80200420:	e0bffe17 	ldw	r2,-8(fp)
80200424:	10800617 	ldw	r2,24(r2)
80200428:	e0bfff05 	stb	r2,-4(fp)
	vpxUartModule->bUartRxRdreq = true;
8020042c:	e0bffe17 	ldw	r2,-8(fp)
80200430:	00c00044 	movi	r3,1
80200434:	10c00415 	stw	r3,16(r2)
	return cRxChar;
80200438:	e0bfff03 	ldbu	r2,-4(fp)
}
8020043c:	e037883a 	mov	sp,fp
80200440:	df000017 	ldw	fp,0(sp)
80200444:	dec00104 	addi	sp,sp,4
80200448:	f800283a 	ret

8020044c <vUartReadBuffer>:

void vUartReadBuffer(char *pcRxBuffer, alt_u16 usiLength){
8020044c:	defffb04 	addi	sp,sp,-20
80200450:	df000415 	stw	fp,16(sp)
80200454:	df000404 	addi	fp,sp,16
80200458:	e13ffe15 	stw	r4,-8(fp)
8020045c:	2805883a 	mov	r2,r5
80200460:	e0bfff0d 	sth	r2,-4(fp)
	volatile TUartModule *vpxUartModule = (TUartModule *)UART_BASE_ADDR;
80200464:	00a08034 	movhi	r2,33280
80200468:	10830004 	addi	r2,r2,3072
8020046c:	e0bffd15 	stw	r2,-12(fp)
	alt_u16 usiCnt = 0;
80200470:	e03ffc0d 	sth	zero,-16(fp)
	for (usiCnt = 0; usiCnt < usiLength; usiCnt++) {
80200474:	e03ffc0d 	sth	zero,-16(fp)
80200478:	00001006 	br	802004bc <vUartReadBuffer+0x70>
		while (vpxUartModule->bUartRxEmpty){}
8020047c:	0001883a 	nop
80200480:	e0bffd17 	ldw	r2,-12(fp)
80200484:	10800517 	ldw	r2,20(r2)
80200488:	103ffd1e 	bne	r2,zero,80200480 <__reset+0xfa1e0480>
		pcRxBuffer[usiCnt] = (char)((vpxUartModule->uliUartRxRddata) & 0xFF);
8020048c:	e0bffc0b 	ldhu	r2,-16(fp)
80200490:	e0fffe17 	ldw	r3,-8(fp)
80200494:	1885883a 	add	r2,r3,r2
80200498:	e0fffd17 	ldw	r3,-12(fp)
8020049c:	18c00617 	ldw	r3,24(r3)
802004a0:	10c00005 	stb	r3,0(r2)
		vpxUartModule->bUartRxRdreq = true;
802004a4:	e0bffd17 	ldw	r2,-12(fp)
802004a8:	00c00044 	movi	r3,1
802004ac:	10c00415 	stw	r3,16(r2)
}

void vUartReadBuffer(char *pcRxBuffer, alt_u16 usiLength){
	volatile TUartModule *vpxUartModule = (TUartModule *)UART_BASE_ADDR;
	alt_u16 usiCnt = 0;
	for (usiCnt = 0; usiCnt < usiLength; usiCnt++) {
802004b0:	e0bffc0b 	ldhu	r2,-16(fp)
802004b4:	10800044 	addi	r2,r2,1
802004b8:	e0bffc0d 	sth	r2,-16(fp)
802004bc:	e0fffc0b 	ldhu	r3,-16(fp)
802004c0:	e0bfff0b 	ldhu	r2,-4(fp)
802004c4:	18bfed36 	bltu	r3,r2,8020047c <__reset+0xfa1e047c>
		while (vpxUartModule->bUartRxEmpty){}
		pcRxBuffer[usiCnt] = (char)((vpxUartModule->uliUartRxRddata) & 0xFF);
		vpxUartModule->bUartRxRdreq = true;
	}
}
802004c8:	0001883a 	nop
802004cc:	e037883a 	mov	sp,fp
802004d0:	df000017 	ldw	fp,0(sp)
802004d4:	dec00104 	addi	sp,sp,4
802004d8:	f800283a 	ret

802004dc <memcpy>:
802004dc:	defffd04 	addi	sp,sp,-12
802004e0:	dfc00215 	stw	ra,8(sp)
802004e4:	dc400115 	stw	r17,4(sp)
802004e8:	dc000015 	stw	r16,0(sp)
802004ec:	00c003c4 	movi	r3,15
802004f0:	2005883a 	mov	r2,r4
802004f4:	1980452e 	bgeu	r3,r6,8020060c <memcpy+0x130>
802004f8:	2906b03a 	or	r3,r5,r4
802004fc:	18c000cc 	andi	r3,r3,3
80200500:	1800441e 	bne	r3,zero,80200614 <memcpy+0x138>
80200504:	347ffc04 	addi	r17,r6,-16
80200508:	8822d13a 	srli	r17,r17,4
8020050c:	28c00104 	addi	r3,r5,4
80200510:	23400104 	addi	r13,r4,4
80200514:	8820913a 	slli	r16,r17,4
80200518:	2b000204 	addi	r12,r5,8
8020051c:	22c00204 	addi	r11,r4,8
80200520:	84000504 	addi	r16,r16,20
80200524:	2a800304 	addi	r10,r5,12
80200528:	22400304 	addi	r9,r4,12
8020052c:	2c21883a 	add	r16,r5,r16
80200530:	2811883a 	mov	r8,r5
80200534:	200f883a 	mov	r7,r4
80200538:	41000017 	ldw	r4,0(r8)
8020053c:	1fc00017 	ldw	ra,0(r3)
80200540:	63c00017 	ldw	r15,0(r12)
80200544:	39000015 	stw	r4,0(r7)
80200548:	53800017 	ldw	r14,0(r10)
8020054c:	6fc00015 	stw	ra,0(r13)
80200550:	5bc00015 	stw	r15,0(r11)
80200554:	4b800015 	stw	r14,0(r9)
80200558:	18c00404 	addi	r3,r3,16
8020055c:	39c00404 	addi	r7,r7,16
80200560:	42000404 	addi	r8,r8,16
80200564:	6b400404 	addi	r13,r13,16
80200568:	63000404 	addi	r12,r12,16
8020056c:	5ac00404 	addi	r11,r11,16
80200570:	52800404 	addi	r10,r10,16
80200574:	4a400404 	addi	r9,r9,16
80200578:	1c3fef1e 	bne	r3,r16,80200538 <__reset+0xfa1e0538>
8020057c:	89c00044 	addi	r7,r17,1
80200580:	380e913a 	slli	r7,r7,4
80200584:	310003cc 	andi	r4,r6,15
80200588:	02c000c4 	movi	r11,3
8020058c:	11c7883a 	add	r3,r2,r7
80200590:	29cb883a 	add	r5,r5,r7
80200594:	5900212e 	bgeu	r11,r4,8020061c <memcpy+0x140>
80200598:	1813883a 	mov	r9,r3
8020059c:	2811883a 	mov	r8,r5
802005a0:	200f883a 	mov	r7,r4
802005a4:	42800017 	ldw	r10,0(r8)
802005a8:	4a400104 	addi	r9,r9,4
802005ac:	39ffff04 	addi	r7,r7,-4
802005b0:	4abfff15 	stw	r10,-4(r9)
802005b4:	42000104 	addi	r8,r8,4
802005b8:	59fffa36 	bltu	r11,r7,802005a4 <__reset+0xfa1e05a4>
802005bc:	213fff04 	addi	r4,r4,-4
802005c0:	2008d0ba 	srli	r4,r4,2
802005c4:	318000cc 	andi	r6,r6,3
802005c8:	21000044 	addi	r4,r4,1
802005cc:	2109883a 	add	r4,r4,r4
802005d0:	2109883a 	add	r4,r4,r4
802005d4:	1907883a 	add	r3,r3,r4
802005d8:	290b883a 	add	r5,r5,r4
802005dc:	30000626 	beq	r6,zero,802005f8 <memcpy+0x11c>
802005e0:	198d883a 	add	r6,r3,r6
802005e4:	29c00003 	ldbu	r7,0(r5)
802005e8:	18c00044 	addi	r3,r3,1
802005ec:	29400044 	addi	r5,r5,1
802005f0:	19ffffc5 	stb	r7,-1(r3)
802005f4:	19bffb1e 	bne	r3,r6,802005e4 <__reset+0xfa1e05e4>
802005f8:	dfc00217 	ldw	ra,8(sp)
802005fc:	dc400117 	ldw	r17,4(sp)
80200600:	dc000017 	ldw	r16,0(sp)
80200604:	dec00304 	addi	sp,sp,12
80200608:	f800283a 	ret
8020060c:	2007883a 	mov	r3,r4
80200610:	003ff206 	br	802005dc <__reset+0xfa1e05dc>
80200614:	2007883a 	mov	r3,r4
80200618:	003ff106 	br	802005e0 <__reset+0xfa1e05e0>
8020061c:	200d883a 	mov	r6,r4
80200620:	003fee06 	br	802005dc <__reset+0xfa1e05dc>

80200624 <_printf_r>:
80200624:	defffd04 	addi	sp,sp,-12
80200628:	2805883a 	mov	r2,r5
8020062c:	dfc00015 	stw	ra,0(sp)
80200630:	d9800115 	stw	r6,4(sp)
80200634:	d9c00215 	stw	r7,8(sp)
80200638:	21400217 	ldw	r5,8(r4)
8020063c:	d9c00104 	addi	r7,sp,4
80200640:	100d883a 	mov	r6,r2
80200644:	02007fc0 	call	802007fc <___vfprintf_internal_r>
80200648:	dfc00017 	ldw	ra,0(sp)
8020064c:	dec00304 	addi	sp,sp,12
80200650:	f800283a 	ret

80200654 <printf>:
80200654:	defffc04 	addi	sp,sp,-16
80200658:	dfc00015 	stw	ra,0(sp)
8020065c:	d9400115 	stw	r5,4(sp)
80200660:	d9800215 	stw	r6,8(sp)
80200664:	d9c00315 	stw	r7,12(sp)
80200668:	00a00874 	movhi	r2,32801
8020066c:	108e9404 	addi	r2,r2,14928
80200670:	10800017 	ldw	r2,0(r2)
80200674:	200b883a 	mov	r5,r4
80200678:	d9800104 	addi	r6,sp,4
8020067c:	11000217 	ldw	r4,8(r2)
80200680:	02029f40 	call	802029f4 <__vfprintf_internal>
80200684:	dfc00017 	ldw	ra,0(sp)
80200688:	dec00404 	addi	sp,sp,16
8020068c:	f800283a 	ret

80200690 <_puts_r>:
80200690:	defff604 	addi	sp,sp,-40
80200694:	dc000715 	stw	r16,28(sp)
80200698:	2021883a 	mov	r16,r4
8020069c:	2809883a 	mov	r4,r5
802006a0:	dc400815 	stw	r17,32(sp)
802006a4:	dfc00915 	stw	ra,36(sp)
802006a8:	2823883a 	mov	r17,r5
802006ac:	02007640 	call	80200764 <strlen>
802006b0:	10c00044 	addi	r3,r2,1
802006b4:	d8800115 	stw	r2,4(sp)
802006b8:	00a00874 	movhi	r2,32801
802006bc:	10865204 	addi	r2,r2,6472
802006c0:	d8800215 	stw	r2,8(sp)
802006c4:	00800044 	movi	r2,1
802006c8:	d8800315 	stw	r2,12(sp)
802006cc:	00800084 	movi	r2,2
802006d0:	dc400015 	stw	r17,0(sp)
802006d4:	d8c00615 	stw	r3,24(sp)
802006d8:	dec00415 	stw	sp,16(sp)
802006dc:	d8800515 	stw	r2,20(sp)
802006e0:	80000226 	beq	r16,zero,802006ec <_puts_r+0x5c>
802006e4:	80800e17 	ldw	r2,56(r16)
802006e8:	10001426 	beq	r2,zero,8020073c <_puts_r+0xac>
802006ec:	81400217 	ldw	r5,8(r16)
802006f0:	2880030b 	ldhu	r2,12(r5)
802006f4:	10c8000c 	andi	r3,r2,8192
802006f8:	1800061e 	bne	r3,zero,80200714 <_puts_r+0x84>
802006fc:	29001917 	ldw	r4,100(r5)
80200700:	00f7ffc4 	movi	r3,-8193
80200704:	10880014 	ori	r2,r2,8192
80200708:	20c6703a 	and	r3,r4,r3
8020070c:	2880030d 	sth	r2,12(r5)
80200710:	28c01915 	stw	r3,100(r5)
80200714:	d9800404 	addi	r6,sp,16
80200718:	8009883a 	mov	r4,r16
8020071c:	0204f240 	call	80204f24 <__sfvwrite_r>
80200720:	1000091e 	bne	r2,zero,80200748 <_puts_r+0xb8>
80200724:	00800284 	movi	r2,10
80200728:	dfc00917 	ldw	ra,36(sp)
8020072c:	dc400817 	ldw	r17,32(sp)
80200730:	dc000717 	ldw	r16,28(sp)
80200734:	dec00a04 	addi	sp,sp,40
80200738:	f800283a 	ret
8020073c:	8009883a 	mov	r4,r16
80200740:	0204aa00 	call	80204aa0 <__sinit>
80200744:	003fe906 	br	802006ec <__reset+0xfa1e06ec>
80200748:	00bfffc4 	movi	r2,-1
8020074c:	003ff606 	br	80200728 <__reset+0xfa1e0728>

80200750 <puts>:
80200750:	00a00874 	movhi	r2,32801
80200754:	108e9404 	addi	r2,r2,14928
80200758:	200b883a 	mov	r5,r4
8020075c:	11000017 	ldw	r4,0(r2)
80200760:	02006901 	jmpi	80200690 <_puts_r>

80200764 <strlen>:
80200764:	208000cc 	andi	r2,r4,3
80200768:	10002026 	beq	r2,zero,802007ec <strlen+0x88>
8020076c:	20800007 	ldb	r2,0(r4)
80200770:	10002026 	beq	r2,zero,802007f4 <strlen+0x90>
80200774:	2005883a 	mov	r2,r4
80200778:	00000206 	br	80200784 <strlen+0x20>
8020077c:	10c00007 	ldb	r3,0(r2)
80200780:	18001826 	beq	r3,zero,802007e4 <strlen+0x80>
80200784:	10800044 	addi	r2,r2,1
80200788:	10c000cc 	andi	r3,r2,3
8020078c:	183ffb1e 	bne	r3,zero,8020077c <__reset+0xfa1e077c>
80200790:	10c00017 	ldw	r3,0(r2)
80200794:	01ffbff4 	movhi	r7,65279
80200798:	39ffbfc4 	addi	r7,r7,-257
8020079c:	00ca303a 	nor	r5,zero,r3
802007a0:	01a02074 	movhi	r6,32897
802007a4:	19c7883a 	add	r3,r3,r7
802007a8:	31a02004 	addi	r6,r6,-32640
802007ac:	1946703a 	and	r3,r3,r5
802007b0:	1986703a 	and	r3,r3,r6
802007b4:	1800091e 	bne	r3,zero,802007dc <strlen+0x78>
802007b8:	10800104 	addi	r2,r2,4
802007bc:	10c00017 	ldw	r3,0(r2)
802007c0:	19cb883a 	add	r5,r3,r7
802007c4:	00c6303a 	nor	r3,zero,r3
802007c8:	28c6703a 	and	r3,r5,r3
802007cc:	1986703a 	and	r3,r3,r6
802007d0:	183ff926 	beq	r3,zero,802007b8 <__reset+0xfa1e07b8>
802007d4:	00000106 	br	802007dc <strlen+0x78>
802007d8:	10800044 	addi	r2,r2,1
802007dc:	10c00007 	ldb	r3,0(r2)
802007e0:	183ffd1e 	bne	r3,zero,802007d8 <__reset+0xfa1e07d8>
802007e4:	1105c83a 	sub	r2,r2,r4
802007e8:	f800283a 	ret
802007ec:	2005883a 	mov	r2,r4
802007f0:	003fe706 	br	80200790 <__reset+0xfa1e0790>
802007f4:	0005883a 	mov	r2,zero
802007f8:	f800283a 	ret

802007fc <___vfprintf_internal_r>:
802007fc:	deffb804 	addi	sp,sp,-288
80200800:	dfc04715 	stw	ra,284(sp)
80200804:	ddc04515 	stw	r23,276(sp)
80200808:	dd404315 	stw	r21,268(sp)
8020080c:	d9002c15 	stw	r4,176(sp)
80200810:	282f883a 	mov	r23,r5
80200814:	302b883a 	mov	r21,r6
80200818:	d9c02d15 	stw	r7,180(sp)
8020081c:	df004615 	stw	fp,280(sp)
80200820:	dd804415 	stw	r22,272(sp)
80200824:	dd004215 	stw	r20,264(sp)
80200828:	dcc04115 	stw	r19,260(sp)
8020082c:	dc804015 	stw	r18,256(sp)
80200830:	dc403f15 	stw	r17,252(sp)
80200834:	dc003e15 	stw	r16,248(sp)
80200838:	02056140 	call	80205614 <_localeconv_r>
8020083c:	10800017 	ldw	r2,0(r2)
80200840:	1009883a 	mov	r4,r2
80200844:	d8803415 	stw	r2,208(sp)
80200848:	02007640 	call	80200764 <strlen>
8020084c:	d8803715 	stw	r2,220(sp)
80200850:	d8802c17 	ldw	r2,176(sp)
80200854:	10000226 	beq	r2,zero,80200860 <___vfprintf_internal_r+0x64>
80200858:	10800e17 	ldw	r2,56(r2)
8020085c:	1000f926 	beq	r2,zero,80200c44 <___vfprintf_internal_r+0x448>
80200860:	b880030b 	ldhu	r2,12(r23)
80200864:	10c8000c 	andi	r3,r2,8192
80200868:	1800061e 	bne	r3,zero,80200884 <___vfprintf_internal_r+0x88>
8020086c:	b9001917 	ldw	r4,100(r23)
80200870:	00f7ffc4 	movi	r3,-8193
80200874:	10880014 	ori	r2,r2,8192
80200878:	20c6703a 	and	r3,r4,r3
8020087c:	b880030d 	sth	r2,12(r23)
80200880:	b8c01915 	stw	r3,100(r23)
80200884:	10c0020c 	andi	r3,r2,8
80200888:	1800c126 	beq	r3,zero,80200b90 <___vfprintf_internal_r+0x394>
8020088c:	b8c00417 	ldw	r3,16(r23)
80200890:	1800bf26 	beq	r3,zero,80200b90 <___vfprintf_internal_r+0x394>
80200894:	1080068c 	andi	r2,r2,26
80200898:	00c00284 	movi	r3,10
8020089c:	10c0c426 	beq	r2,r3,80200bb0 <___vfprintf_internal_r+0x3b4>
802008a0:	d8c00404 	addi	r3,sp,16
802008a4:	05200874 	movhi	r20,32801
802008a8:	d9001e04 	addi	r4,sp,120
802008ac:	a5066384 	addi	r20,r20,6542
802008b0:	d8c01e15 	stw	r3,120(sp)
802008b4:	d8002015 	stw	zero,128(sp)
802008b8:	d8001f15 	stw	zero,124(sp)
802008bc:	d8003315 	stw	zero,204(sp)
802008c0:	d8003615 	stw	zero,216(sp)
802008c4:	d8003815 	stw	zero,224(sp)
802008c8:	1811883a 	mov	r8,r3
802008cc:	d8003915 	stw	zero,228(sp)
802008d0:	d8003a15 	stw	zero,232(sp)
802008d4:	d8002f15 	stw	zero,188(sp)
802008d8:	d9002815 	stw	r4,160(sp)
802008dc:	a8800007 	ldb	r2,0(r21)
802008e0:	10027b26 	beq	r2,zero,802012d0 <___vfprintf_internal_r+0xad4>
802008e4:	00c00944 	movi	r3,37
802008e8:	a821883a 	mov	r16,r21
802008ec:	10c0021e 	bne	r2,r3,802008f8 <___vfprintf_internal_r+0xfc>
802008f0:	00001406 	br	80200944 <___vfprintf_internal_r+0x148>
802008f4:	10c00326 	beq	r2,r3,80200904 <___vfprintf_internal_r+0x108>
802008f8:	84000044 	addi	r16,r16,1
802008fc:	80800007 	ldb	r2,0(r16)
80200900:	103ffc1e 	bne	r2,zero,802008f4 <__reset+0xfa1e08f4>
80200904:	8563c83a 	sub	r17,r16,r21
80200908:	88000e26 	beq	r17,zero,80200944 <___vfprintf_internal_r+0x148>
8020090c:	d8c02017 	ldw	r3,128(sp)
80200910:	d8801f17 	ldw	r2,124(sp)
80200914:	45400015 	stw	r21,0(r8)
80200918:	1c47883a 	add	r3,r3,r17
8020091c:	10800044 	addi	r2,r2,1
80200920:	d8c02015 	stw	r3,128(sp)
80200924:	44400115 	stw	r17,4(r8)
80200928:	d8801f15 	stw	r2,124(sp)
8020092c:	00c001c4 	movi	r3,7
80200930:	1880a716 	blt	r3,r2,80200bd0 <___vfprintf_internal_r+0x3d4>
80200934:	42000204 	addi	r8,r8,8
80200938:	d9402f17 	ldw	r5,188(sp)
8020093c:	2c4b883a 	add	r5,r5,r17
80200940:	d9402f15 	stw	r5,188(sp)
80200944:	80800007 	ldb	r2,0(r16)
80200948:	1000a826 	beq	r2,zero,80200bec <___vfprintf_internal_r+0x3f0>
8020094c:	84400047 	ldb	r17,1(r16)
80200950:	00bfffc4 	movi	r2,-1
80200954:	85400044 	addi	r21,r16,1
80200958:	d8002785 	stb	zero,158(sp)
8020095c:	0007883a 	mov	r3,zero
80200960:	000f883a 	mov	r7,zero
80200964:	d8802915 	stw	r2,164(sp)
80200968:	d8003115 	stw	zero,196(sp)
8020096c:	0025883a 	mov	r18,zero
80200970:	01401604 	movi	r5,88
80200974:	01800244 	movi	r6,9
80200978:	02800a84 	movi	r10,42
8020097c:	02401b04 	movi	r9,108
80200980:	ad400044 	addi	r21,r21,1
80200984:	88bff804 	addi	r2,r17,-32
80200988:	28830436 	bltu	r5,r2,8020159c <___vfprintf_internal_r+0xda0>
8020098c:	100490ba 	slli	r2,r2,2
80200990:	01200834 	movhi	r4,32800
80200994:	21026904 	addi	r4,r4,2468
80200998:	1105883a 	add	r2,r2,r4
8020099c:	10800017 	ldw	r2,0(r2)
802009a0:	1000683a 	jmp	r2
802009a4:	802014bc 	xorhi	zero,r16,32850
802009a8:	8020159c 	xori	zero,r16,32854
802009ac:	8020159c 	xori	zero,r16,32854
802009b0:	802014dc 	xori	zero,r16,32851
802009b4:	8020159c 	xori	zero,r16,32854
802009b8:	8020159c 	xori	zero,r16,32854
802009bc:	8020159c 	xori	zero,r16,32854
802009c0:	8020159c 	xori	zero,r16,32854
802009c4:	8020159c 	xori	zero,r16,32854
802009c8:	8020159c 	xori	zero,r16,32854
802009cc:	80200c50 	cmplti	zero,r16,-32719
802009d0:	802013f8 	rdprs	zero,r16,-32689
802009d4:	8020159c 	xori	zero,r16,32854
802009d8:	80200b18 	cmpnei	zero,r16,-32724
802009dc:	80200c78 	rdprs	zero,r16,-32719
802009e0:	8020159c 	xori	zero,r16,32854
802009e4:	80200cb8 	rdprs	zero,r16,-32718
802009e8:	80200cc4 	addi	zero,r16,-32717
802009ec:	80200cc4 	addi	zero,r16,-32717
802009f0:	80200cc4 	addi	zero,r16,-32717
802009f4:	80200cc4 	addi	zero,r16,-32717
802009f8:	80200cc4 	addi	zero,r16,-32717
802009fc:	80200cc4 	addi	zero,r16,-32717
80200a00:	80200cc4 	addi	zero,r16,-32717
80200a04:	80200cc4 	addi	zero,r16,-32717
80200a08:	80200cc4 	addi	zero,r16,-32717
80200a0c:	8020159c 	xori	zero,r16,32854
80200a10:	8020159c 	xori	zero,r16,32854
80200a14:	8020159c 	xori	zero,r16,32854
80200a18:	8020159c 	xori	zero,r16,32854
80200a1c:	8020159c 	xori	zero,r16,32854
80200a20:	8020159c 	xori	zero,r16,32854
80200a24:	8020159c 	xori	zero,r16,32854
80200a28:	8020159c 	xori	zero,r16,32854
80200a2c:	8020159c 	xori	zero,r16,32854
80200a30:	8020159c 	xori	zero,r16,32854
80200a34:	80200cf8 	rdprs	zero,r16,-32717
80200a38:	80200db4 	orhi	zero,r16,32822
80200a3c:	8020159c 	xori	zero,r16,32854
80200a40:	80200db4 	orhi	zero,r16,32822
80200a44:	8020159c 	xori	zero,r16,32854
80200a48:	8020159c 	xori	zero,r16,32854
80200a4c:	8020159c 	xori	zero,r16,32854
80200a50:	8020159c 	xori	zero,r16,32854
80200a54:	80200e54 	ori	zero,r16,32825
80200a58:	8020159c 	xori	zero,r16,32854
80200a5c:	8020159c 	xori	zero,r16,32854
80200a60:	80200e60 	cmpeqi	zero,r16,-32711
80200a64:	8020159c 	xori	zero,r16,32854
80200a68:	8020159c 	xori	zero,r16,32854
80200a6c:	8020159c 	xori	zero,r16,32854
80200a70:	8020159c 	xori	zero,r16,32854
80200a74:	8020159c 	xori	zero,r16,32854
80200a78:	802012d8 	cmpnei	zero,r16,-32693
80200a7c:	8020159c 	xori	zero,r16,32854
80200a80:	8020159c 	xori	zero,r16,32854
80200a84:	80201338 	rdprs	zero,r16,-32692
80200a88:	8020159c 	xori	zero,r16,32854
80200a8c:	8020159c 	xori	zero,r16,32854
80200a90:	8020159c 	xori	zero,r16,32854
80200a94:	8020159c 	xori	zero,r16,32854
80200a98:	8020159c 	xori	zero,r16,32854
80200a9c:	8020159c 	xori	zero,r16,32854
80200aa0:	8020159c 	xori	zero,r16,32854
80200aa4:	8020159c 	xori	zero,r16,32854
80200aa8:	8020159c 	xori	zero,r16,32854
80200aac:	8020159c 	xori	zero,r16,32854
80200ab0:	80201548 	cmpgei	zero,r16,-32683
80200ab4:	802014e8 	cmpgeui	zero,r16,32851
80200ab8:	80200db4 	orhi	zero,r16,32822
80200abc:	80200db4 	orhi	zero,r16,32822
80200ac0:	80200db4 	orhi	zero,r16,32822
80200ac4:	802014f8 	rdprs	zero,r16,-32685
80200ac8:	802014e8 	cmpgeui	zero,r16,32851
80200acc:	8020159c 	xori	zero,r16,32854
80200ad0:	8020159c 	xori	zero,r16,32854
80200ad4:	80201504 	addi	zero,r16,-32684
80200ad8:	8020159c 	xori	zero,r16,32854
80200adc:	80201514 	ori	zero,r16,32852
80200ae0:	802013e8 	cmpgeui	zero,r16,32847
80200ae4:	80200b24 	muli	zero,r16,-32724
80200ae8:	80201408 	cmpgei	zero,r16,-32688
80200aec:	8020159c 	xori	zero,r16,32854
80200af0:	80201414 	ori	zero,r16,32848
80200af4:	8020159c 	xori	zero,r16,32854
80200af8:	80201470 	cmpltui	zero,r16,32849
80200afc:	8020159c 	xori	zero,r16,32854
80200b00:	8020159c 	xori	zero,r16,32854
80200b04:	80201480 	call	88020148 <__reset+0x2000148>
80200b08:	d9003117 	ldw	r4,196(sp)
80200b0c:	d8802d15 	stw	r2,180(sp)
80200b10:	0109c83a 	sub	r4,zero,r4
80200b14:	d9003115 	stw	r4,196(sp)
80200b18:	94800114 	ori	r18,r18,4
80200b1c:	ac400007 	ldb	r17,0(r21)
80200b20:	003f9706 	br	80200980 <__reset+0xfa1e0980>
80200b24:	00800c04 	movi	r2,48
80200b28:	d9002d17 	ldw	r4,180(sp)
80200b2c:	d9402917 	ldw	r5,164(sp)
80200b30:	d8802705 	stb	r2,156(sp)
80200b34:	00801e04 	movi	r2,120
80200b38:	d8802745 	stb	r2,157(sp)
80200b3c:	d8002785 	stb	zero,158(sp)
80200b40:	20c00104 	addi	r3,r4,4
80200b44:	24c00017 	ldw	r19,0(r4)
80200b48:	002d883a 	mov	r22,zero
80200b4c:	90800094 	ori	r2,r18,2
80200b50:	28029a16 	blt	r5,zero,802015bc <___vfprintf_internal_r+0xdc0>
80200b54:	00bfdfc4 	movi	r2,-129
80200b58:	90a4703a 	and	r18,r18,r2
80200b5c:	d8c02d15 	stw	r3,180(sp)
80200b60:	94800094 	ori	r18,r18,2
80200b64:	9802871e 	bne	r19,zero,80201584 <___vfprintf_internal_r+0xd88>
80200b68:	00a00874 	movhi	r2,32801
80200b6c:	10865c04 	addi	r2,r2,6512
80200b70:	d8803915 	stw	r2,228(sp)
80200b74:	04401e04 	movi	r17,120
80200b78:	d8802917 	ldw	r2,164(sp)
80200b7c:	0039883a 	mov	fp,zero
80200b80:	1001e926 	beq	r2,zero,80201328 <___vfprintf_internal_r+0xb2c>
80200b84:	0027883a 	mov	r19,zero
80200b88:	002d883a 	mov	r22,zero
80200b8c:	00020506 	br	802013a4 <___vfprintf_internal_r+0xba8>
80200b90:	d9002c17 	ldw	r4,176(sp)
80200b94:	b80b883a 	mov	r5,r23
80200b98:	0202acc0 	call	80202acc <__swsetup_r>
80200b9c:	1005ac1e 	bne	r2,zero,80202250 <___vfprintf_internal_r+0x1a54>
80200ba0:	b880030b 	ldhu	r2,12(r23)
80200ba4:	00c00284 	movi	r3,10
80200ba8:	1080068c 	andi	r2,r2,26
80200bac:	10ff3c1e 	bne	r2,r3,802008a0 <__reset+0xfa1e08a0>
80200bb0:	b880038f 	ldh	r2,14(r23)
80200bb4:	103f3a16 	blt	r2,zero,802008a0 <__reset+0xfa1e08a0>
80200bb8:	d9c02d17 	ldw	r7,180(sp)
80200bbc:	d9002c17 	ldw	r4,176(sp)
80200bc0:	a80d883a 	mov	r6,r21
80200bc4:	b80b883a 	mov	r5,r23
80200bc8:	0202a100 	call	80202a10 <__sbprintf>
80200bcc:	00001106 	br	80200c14 <___vfprintf_internal_r+0x418>
80200bd0:	d9002c17 	ldw	r4,176(sp)
80200bd4:	d9801e04 	addi	r6,sp,120
80200bd8:	b80b883a 	mov	r5,r23
80200bdc:	0207cb00 	call	80207cb0 <__sprint_r>
80200be0:	1000081e 	bne	r2,zero,80200c04 <___vfprintf_internal_r+0x408>
80200be4:	da000404 	addi	r8,sp,16
80200be8:	003f5306 	br	80200938 <__reset+0xfa1e0938>
80200bec:	d8802017 	ldw	r2,128(sp)
80200bf0:	10000426 	beq	r2,zero,80200c04 <___vfprintf_internal_r+0x408>
80200bf4:	d9002c17 	ldw	r4,176(sp)
80200bf8:	d9801e04 	addi	r6,sp,120
80200bfc:	b80b883a 	mov	r5,r23
80200c00:	0207cb00 	call	80207cb0 <__sprint_r>
80200c04:	b880030b 	ldhu	r2,12(r23)
80200c08:	1080100c 	andi	r2,r2,64
80200c0c:	1005901e 	bne	r2,zero,80202250 <___vfprintf_internal_r+0x1a54>
80200c10:	d8802f17 	ldw	r2,188(sp)
80200c14:	dfc04717 	ldw	ra,284(sp)
80200c18:	df004617 	ldw	fp,280(sp)
80200c1c:	ddc04517 	ldw	r23,276(sp)
80200c20:	dd804417 	ldw	r22,272(sp)
80200c24:	dd404317 	ldw	r21,268(sp)
80200c28:	dd004217 	ldw	r20,264(sp)
80200c2c:	dcc04117 	ldw	r19,260(sp)
80200c30:	dc804017 	ldw	r18,256(sp)
80200c34:	dc403f17 	ldw	r17,252(sp)
80200c38:	dc003e17 	ldw	r16,248(sp)
80200c3c:	dec04804 	addi	sp,sp,288
80200c40:	f800283a 	ret
80200c44:	d9002c17 	ldw	r4,176(sp)
80200c48:	0204aa00 	call	80204aa0 <__sinit>
80200c4c:	003f0406 	br	80200860 <__reset+0xfa1e0860>
80200c50:	d8802d17 	ldw	r2,180(sp)
80200c54:	d9002d17 	ldw	r4,180(sp)
80200c58:	10800017 	ldw	r2,0(r2)
80200c5c:	d8803115 	stw	r2,196(sp)
80200c60:	20800104 	addi	r2,r4,4
80200c64:	d9003117 	ldw	r4,196(sp)
80200c68:	203fa716 	blt	r4,zero,80200b08 <__reset+0xfa1e0b08>
80200c6c:	d8802d15 	stw	r2,180(sp)
80200c70:	ac400007 	ldb	r17,0(r21)
80200c74:	003f4206 	br	80200980 <__reset+0xfa1e0980>
80200c78:	ac400007 	ldb	r17,0(r21)
80200c7c:	aac00044 	addi	r11,r21,1
80200c80:	8a872826 	beq	r17,r10,80202924 <___vfprintf_internal_r+0x2128>
80200c84:	88bff404 	addi	r2,r17,-48
80200c88:	0009883a 	mov	r4,zero
80200c8c:	30867d36 	bltu	r6,r2,80202684 <___vfprintf_internal_r+0x1e88>
80200c90:	5c400007 	ldb	r17,0(r11)
80200c94:	210002a4 	muli	r4,r4,10
80200c98:	5d400044 	addi	r21,r11,1
80200c9c:	a817883a 	mov	r11,r21
80200ca0:	2089883a 	add	r4,r4,r2
80200ca4:	88bff404 	addi	r2,r17,-48
80200ca8:	30bff92e 	bgeu	r6,r2,80200c90 <__reset+0xfa1e0c90>
80200cac:	2005c916 	blt	r4,zero,802023d4 <___vfprintf_internal_r+0x1bd8>
80200cb0:	d9002915 	stw	r4,164(sp)
80200cb4:	003f3306 	br	80200984 <__reset+0xfa1e0984>
80200cb8:	94802014 	ori	r18,r18,128
80200cbc:	ac400007 	ldb	r17,0(r21)
80200cc0:	003f2f06 	br	80200980 <__reset+0xfa1e0980>
80200cc4:	a809883a 	mov	r4,r21
80200cc8:	d8003115 	stw	zero,196(sp)
80200ccc:	88bff404 	addi	r2,r17,-48
80200cd0:	0017883a 	mov	r11,zero
80200cd4:	24400007 	ldb	r17,0(r4)
80200cd8:	5ac002a4 	muli	r11,r11,10
80200cdc:	ad400044 	addi	r21,r21,1
80200ce0:	a809883a 	mov	r4,r21
80200ce4:	12d7883a 	add	r11,r2,r11
80200ce8:	88bff404 	addi	r2,r17,-48
80200cec:	30bff92e 	bgeu	r6,r2,80200cd4 <__reset+0xfa1e0cd4>
80200cf0:	dac03115 	stw	r11,196(sp)
80200cf4:	003f2306 	br	80200984 <__reset+0xfa1e0984>
80200cf8:	18c03fcc 	andi	r3,r3,255
80200cfc:	18072b1e 	bne	r3,zero,802029ac <___vfprintf_internal_r+0x21b0>
80200d00:	94800414 	ori	r18,r18,16
80200d04:	9080080c 	andi	r2,r18,32
80200d08:	10037b26 	beq	r2,zero,80201af8 <___vfprintf_internal_r+0x12fc>
80200d0c:	d9402d17 	ldw	r5,180(sp)
80200d10:	28800117 	ldw	r2,4(r5)
80200d14:	2cc00017 	ldw	r19,0(r5)
80200d18:	29400204 	addi	r5,r5,8
80200d1c:	d9402d15 	stw	r5,180(sp)
80200d20:	102d883a 	mov	r22,r2
80200d24:	10044b16 	blt	r2,zero,80201e54 <___vfprintf_internal_r+0x1658>
80200d28:	d9402917 	ldw	r5,164(sp)
80200d2c:	df002783 	ldbu	fp,158(sp)
80200d30:	2803bc16 	blt	r5,zero,80201c24 <___vfprintf_internal_r+0x1428>
80200d34:	00ffdfc4 	movi	r3,-129
80200d38:	9d84b03a 	or	r2,r19,r22
80200d3c:	90e4703a 	and	r18,r18,r3
80200d40:	10017726 	beq	r2,zero,80201320 <___vfprintf_internal_r+0xb24>
80200d44:	b0038326 	beq	r22,zero,80201b54 <___vfprintf_internal_r+0x1358>
80200d48:	dc402a15 	stw	r17,168(sp)
80200d4c:	dc001e04 	addi	r16,sp,120
80200d50:	b023883a 	mov	r17,r22
80200d54:	402d883a 	mov	r22,r8
80200d58:	9809883a 	mov	r4,r19
80200d5c:	880b883a 	mov	r5,r17
80200d60:	01800284 	movi	r6,10
80200d64:	000f883a 	mov	r7,zero
80200d68:	020a0a80 	call	8020a0a8 <__umoddi3>
80200d6c:	10800c04 	addi	r2,r2,48
80200d70:	843fffc4 	addi	r16,r16,-1
80200d74:	9809883a 	mov	r4,r19
80200d78:	880b883a 	mov	r5,r17
80200d7c:	80800005 	stb	r2,0(r16)
80200d80:	01800284 	movi	r6,10
80200d84:	000f883a 	mov	r7,zero
80200d88:	0209b300 	call	80209b30 <__udivdi3>
80200d8c:	1027883a 	mov	r19,r2
80200d90:	10c4b03a 	or	r2,r2,r3
80200d94:	1823883a 	mov	r17,r3
80200d98:	103fef1e 	bne	r2,zero,80200d58 <__reset+0xfa1e0d58>
80200d9c:	d8c02817 	ldw	r3,160(sp)
80200da0:	dc402a17 	ldw	r17,168(sp)
80200da4:	b011883a 	mov	r8,r22
80200da8:	1c07c83a 	sub	r3,r3,r16
80200dac:	d8c02e15 	stw	r3,184(sp)
80200db0:	00005906 	br	80200f18 <___vfprintf_internal_r+0x71c>
80200db4:	18c03fcc 	andi	r3,r3,255
80200db8:	1806fa1e 	bne	r3,zero,802029a4 <___vfprintf_internal_r+0x21a8>
80200dbc:	9080020c 	andi	r2,r18,8
80200dc0:	10048a26 	beq	r2,zero,80201fec <___vfprintf_internal_r+0x17f0>
80200dc4:	d8c02d17 	ldw	r3,180(sp)
80200dc8:	d9002d17 	ldw	r4,180(sp)
80200dcc:	d9402d17 	ldw	r5,180(sp)
80200dd0:	18c00017 	ldw	r3,0(r3)
80200dd4:	21000117 	ldw	r4,4(r4)
80200dd8:	29400204 	addi	r5,r5,8
80200ddc:	d8c03615 	stw	r3,216(sp)
80200de0:	d9003815 	stw	r4,224(sp)
80200de4:	d9402d15 	stw	r5,180(sp)
80200de8:	d9003617 	ldw	r4,216(sp)
80200dec:	d9403817 	ldw	r5,224(sp)
80200df0:	da003d15 	stw	r8,244(sp)
80200df4:	04000044 	movi	r16,1
80200df8:	02078d40 	call	802078d4 <__fpclassifyd>
80200dfc:	da003d17 	ldw	r8,244(sp)
80200e00:	14041f1e 	bne	r2,r16,80201e80 <___vfprintf_internal_r+0x1684>
80200e04:	d9003617 	ldw	r4,216(sp)
80200e08:	d9403817 	ldw	r5,224(sp)
80200e0c:	000d883a 	mov	r6,zero
80200e10:	000f883a 	mov	r7,zero
80200e14:	020ba8c0 	call	8020ba8c <__ledf2>
80200e18:	da003d17 	ldw	r8,244(sp)
80200e1c:	1005be16 	blt	r2,zero,80202518 <___vfprintf_internal_r+0x1d1c>
80200e20:	df002783 	ldbu	fp,158(sp)
80200e24:	008011c4 	movi	r2,71
80200e28:	1445330e 	bge	r2,r17,802022f8 <___vfprintf_internal_r+0x1afc>
80200e2c:	04200874 	movhi	r16,32801
80200e30:	84065404 	addi	r16,r16,6480
80200e34:	00c000c4 	movi	r3,3
80200e38:	00bfdfc4 	movi	r2,-129
80200e3c:	d8c02a15 	stw	r3,168(sp)
80200e40:	90a4703a 	and	r18,r18,r2
80200e44:	d8c02e15 	stw	r3,184(sp)
80200e48:	d8002915 	stw	zero,164(sp)
80200e4c:	d8003215 	stw	zero,200(sp)
80200e50:	00003706 	br	80200f30 <___vfprintf_internal_r+0x734>
80200e54:	94800214 	ori	r18,r18,8
80200e58:	ac400007 	ldb	r17,0(r21)
80200e5c:	003ec806 	br	80200980 <__reset+0xfa1e0980>
80200e60:	18c03fcc 	andi	r3,r3,255
80200e64:	1806db1e 	bne	r3,zero,802029d4 <___vfprintf_internal_r+0x21d8>
80200e68:	94800414 	ori	r18,r18,16
80200e6c:	9080080c 	andi	r2,r18,32
80200e70:	1002d826 	beq	r2,zero,802019d4 <___vfprintf_internal_r+0x11d8>
80200e74:	d9402d17 	ldw	r5,180(sp)
80200e78:	d8c02917 	ldw	r3,164(sp)
80200e7c:	d8002785 	stb	zero,158(sp)
80200e80:	28800204 	addi	r2,r5,8
80200e84:	2cc00017 	ldw	r19,0(r5)
80200e88:	2d800117 	ldw	r22,4(r5)
80200e8c:	18048f16 	blt	r3,zero,802020cc <___vfprintf_internal_r+0x18d0>
80200e90:	013fdfc4 	movi	r4,-129
80200e94:	9d86b03a 	or	r3,r19,r22
80200e98:	d8802d15 	stw	r2,180(sp)
80200e9c:	9124703a 	and	r18,r18,r4
80200ea0:	1802d91e 	bne	r3,zero,80201a08 <___vfprintf_internal_r+0x120c>
80200ea4:	d8c02917 	ldw	r3,164(sp)
80200ea8:	0039883a 	mov	fp,zero
80200eac:	1805c326 	beq	r3,zero,802025bc <___vfprintf_internal_r+0x1dc0>
80200eb0:	0027883a 	mov	r19,zero
80200eb4:	002d883a 	mov	r22,zero
80200eb8:	dc001e04 	addi	r16,sp,120
80200ebc:	9806d0fa 	srli	r3,r19,3
80200ec0:	b008977a 	slli	r4,r22,29
80200ec4:	b02cd0fa 	srli	r22,r22,3
80200ec8:	9cc001cc 	andi	r19,r19,7
80200ecc:	98800c04 	addi	r2,r19,48
80200ed0:	843fffc4 	addi	r16,r16,-1
80200ed4:	20e6b03a 	or	r19,r4,r3
80200ed8:	80800005 	stb	r2,0(r16)
80200edc:	9d86b03a 	or	r3,r19,r22
80200ee0:	183ff61e 	bne	r3,zero,80200ebc <__reset+0xfa1e0ebc>
80200ee4:	90c0004c 	andi	r3,r18,1
80200ee8:	18013b26 	beq	r3,zero,802013d8 <___vfprintf_internal_r+0xbdc>
80200eec:	10803fcc 	andi	r2,r2,255
80200ef0:	1080201c 	xori	r2,r2,128
80200ef4:	10bfe004 	addi	r2,r2,-128
80200ef8:	00c00c04 	movi	r3,48
80200efc:	10c13626 	beq	r2,r3,802013d8 <___vfprintf_internal_r+0xbdc>
80200f00:	80ffffc5 	stb	r3,-1(r16)
80200f04:	d8c02817 	ldw	r3,160(sp)
80200f08:	80bfffc4 	addi	r2,r16,-1
80200f0c:	1021883a 	mov	r16,r2
80200f10:	1887c83a 	sub	r3,r3,r2
80200f14:	d8c02e15 	stw	r3,184(sp)
80200f18:	d8802e17 	ldw	r2,184(sp)
80200f1c:	d9002917 	ldw	r4,164(sp)
80200f20:	1100010e 	bge	r2,r4,80200f28 <___vfprintf_internal_r+0x72c>
80200f24:	2005883a 	mov	r2,r4
80200f28:	d8802a15 	stw	r2,168(sp)
80200f2c:	d8003215 	stw	zero,200(sp)
80200f30:	e7003fcc 	andi	fp,fp,255
80200f34:	e700201c 	xori	fp,fp,128
80200f38:	e73fe004 	addi	fp,fp,-128
80200f3c:	e0000326 	beq	fp,zero,80200f4c <___vfprintf_internal_r+0x750>
80200f40:	d8c02a17 	ldw	r3,168(sp)
80200f44:	18c00044 	addi	r3,r3,1
80200f48:	d8c02a15 	stw	r3,168(sp)
80200f4c:	90c0008c 	andi	r3,r18,2
80200f50:	d8c02b15 	stw	r3,172(sp)
80200f54:	18000326 	beq	r3,zero,80200f64 <___vfprintf_internal_r+0x768>
80200f58:	d8c02a17 	ldw	r3,168(sp)
80200f5c:	18c00084 	addi	r3,r3,2
80200f60:	d8c02a15 	stw	r3,168(sp)
80200f64:	90c0210c 	andi	r3,r18,132
80200f68:	d8c03015 	stw	r3,192(sp)
80200f6c:	1801a31e 	bne	r3,zero,802015fc <___vfprintf_internal_r+0xe00>
80200f70:	d9003117 	ldw	r4,196(sp)
80200f74:	d8c02a17 	ldw	r3,168(sp)
80200f78:	20e7c83a 	sub	r19,r4,r3
80200f7c:	04c19f0e 	bge	zero,r19,802015fc <___vfprintf_internal_r+0xe00>
80200f80:	02400404 	movi	r9,16
80200f84:	d8c02017 	ldw	r3,128(sp)
80200f88:	d8801f17 	ldw	r2,124(sp)
80200f8c:	4cc50d0e 	bge	r9,r19,802023c4 <___vfprintf_internal_r+0x1bc8>
80200f90:	01600874 	movhi	r5,32801
80200f94:	29466784 	addi	r5,r5,6558
80200f98:	dc403b15 	stw	r17,236(sp)
80200f9c:	d9403515 	stw	r5,212(sp)
80200fa0:	9823883a 	mov	r17,r19
80200fa4:	482d883a 	mov	r22,r9
80200fa8:	9027883a 	mov	r19,r18
80200fac:	070001c4 	movi	fp,7
80200fb0:	8025883a 	mov	r18,r16
80200fb4:	dc002c17 	ldw	r16,176(sp)
80200fb8:	00000306 	br	80200fc8 <___vfprintf_internal_r+0x7cc>
80200fbc:	8c7ffc04 	addi	r17,r17,-16
80200fc0:	42000204 	addi	r8,r8,8
80200fc4:	b440130e 	bge	r22,r17,80201014 <___vfprintf_internal_r+0x818>
80200fc8:	01200874 	movhi	r4,32801
80200fcc:	18c00404 	addi	r3,r3,16
80200fd0:	10800044 	addi	r2,r2,1
80200fd4:	21066784 	addi	r4,r4,6558
80200fd8:	41000015 	stw	r4,0(r8)
80200fdc:	45800115 	stw	r22,4(r8)
80200fe0:	d8c02015 	stw	r3,128(sp)
80200fe4:	d8801f15 	stw	r2,124(sp)
80200fe8:	e0bff40e 	bge	fp,r2,80200fbc <__reset+0xfa1e0fbc>
80200fec:	d9801e04 	addi	r6,sp,120
80200ff0:	b80b883a 	mov	r5,r23
80200ff4:	8009883a 	mov	r4,r16
80200ff8:	0207cb00 	call	80207cb0 <__sprint_r>
80200ffc:	103f011e 	bne	r2,zero,80200c04 <__reset+0xfa1e0c04>
80201000:	8c7ffc04 	addi	r17,r17,-16
80201004:	d8c02017 	ldw	r3,128(sp)
80201008:	d8801f17 	ldw	r2,124(sp)
8020100c:	da000404 	addi	r8,sp,16
80201010:	b47fed16 	blt	r22,r17,80200fc8 <__reset+0xfa1e0fc8>
80201014:	9021883a 	mov	r16,r18
80201018:	9825883a 	mov	r18,r19
8020101c:	8827883a 	mov	r19,r17
80201020:	dc403b17 	ldw	r17,236(sp)
80201024:	d9403517 	ldw	r5,212(sp)
80201028:	98c7883a 	add	r3,r19,r3
8020102c:	10800044 	addi	r2,r2,1
80201030:	41400015 	stw	r5,0(r8)
80201034:	44c00115 	stw	r19,4(r8)
80201038:	d8c02015 	stw	r3,128(sp)
8020103c:	d8801f15 	stw	r2,124(sp)
80201040:	010001c4 	movi	r4,7
80201044:	2082a316 	blt	r4,r2,80201ad4 <___vfprintf_internal_r+0x12d8>
80201048:	df002787 	ldb	fp,158(sp)
8020104c:	42000204 	addi	r8,r8,8
80201050:	e0000c26 	beq	fp,zero,80201084 <___vfprintf_internal_r+0x888>
80201054:	d8801f17 	ldw	r2,124(sp)
80201058:	d9002784 	addi	r4,sp,158
8020105c:	18c00044 	addi	r3,r3,1
80201060:	10800044 	addi	r2,r2,1
80201064:	41000015 	stw	r4,0(r8)
80201068:	01000044 	movi	r4,1
8020106c:	41000115 	stw	r4,4(r8)
80201070:	d8c02015 	stw	r3,128(sp)
80201074:	d8801f15 	stw	r2,124(sp)
80201078:	010001c4 	movi	r4,7
8020107c:	20823c16 	blt	r4,r2,80201970 <___vfprintf_internal_r+0x1174>
80201080:	42000204 	addi	r8,r8,8
80201084:	d8802b17 	ldw	r2,172(sp)
80201088:	10000c26 	beq	r2,zero,802010bc <___vfprintf_internal_r+0x8c0>
8020108c:	d8801f17 	ldw	r2,124(sp)
80201090:	d9002704 	addi	r4,sp,156
80201094:	18c00084 	addi	r3,r3,2
80201098:	10800044 	addi	r2,r2,1
8020109c:	41000015 	stw	r4,0(r8)
802010a0:	01000084 	movi	r4,2
802010a4:	41000115 	stw	r4,4(r8)
802010a8:	d8c02015 	stw	r3,128(sp)
802010ac:	d8801f15 	stw	r2,124(sp)
802010b0:	010001c4 	movi	r4,7
802010b4:	20823616 	blt	r4,r2,80201990 <___vfprintf_internal_r+0x1194>
802010b8:	42000204 	addi	r8,r8,8
802010bc:	d9003017 	ldw	r4,192(sp)
802010c0:	00802004 	movi	r2,128
802010c4:	20819926 	beq	r4,r2,8020172c <___vfprintf_internal_r+0xf30>
802010c8:	d9402917 	ldw	r5,164(sp)
802010cc:	d8802e17 	ldw	r2,184(sp)
802010d0:	28adc83a 	sub	r22,r5,r2
802010d4:	0580310e 	bge	zero,r22,8020119c <___vfprintf_internal_r+0x9a0>
802010d8:	07000404 	movi	fp,16
802010dc:	d8801f17 	ldw	r2,124(sp)
802010e0:	e584140e 	bge	fp,r22,80202134 <___vfprintf_internal_r+0x1938>
802010e4:	01600874 	movhi	r5,32801
802010e8:	29466384 	addi	r5,r5,6542
802010ec:	dc402915 	stw	r17,164(sp)
802010f0:	d9402b15 	stw	r5,172(sp)
802010f4:	b023883a 	mov	r17,r22
802010f8:	04c001c4 	movi	r19,7
802010fc:	a82d883a 	mov	r22,r21
80201100:	902b883a 	mov	r21,r18
80201104:	8025883a 	mov	r18,r16
80201108:	dc002c17 	ldw	r16,176(sp)
8020110c:	00000306 	br	8020111c <___vfprintf_internal_r+0x920>
80201110:	8c7ffc04 	addi	r17,r17,-16
80201114:	42000204 	addi	r8,r8,8
80201118:	e440110e 	bge	fp,r17,80201160 <___vfprintf_internal_r+0x964>
8020111c:	18c00404 	addi	r3,r3,16
80201120:	10800044 	addi	r2,r2,1
80201124:	45000015 	stw	r20,0(r8)
80201128:	47000115 	stw	fp,4(r8)
8020112c:	d8c02015 	stw	r3,128(sp)
80201130:	d8801f15 	stw	r2,124(sp)
80201134:	98bff60e 	bge	r19,r2,80201110 <__reset+0xfa1e1110>
80201138:	d9801e04 	addi	r6,sp,120
8020113c:	b80b883a 	mov	r5,r23
80201140:	8009883a 	mov	r4,r16
80201144:	0207cb00 	call	80207cb0 <__sprint_r>
80201148:	103eae1e 	bne	r2,zero,80200c04 <__reset+0xfa1e0c04>
8020114c:	8c7ffc04 	addi	r17,r17,-16
80201150:	d8c02017 	ldw	r3,128(sp)
80201154:	d8801f17 	ldw	r2,124(sp)
80201158:	da000404 	addi	r8,sp,16
8020115c:	e47fef16 	blt	fp,r17,8020111c <__reset+0xfa1e111c>
80201160:	9021883a 	mov	r16,r18
80201164:	a825883a 	mov	r18,r21
80201168:	b02b883a 	mov	r21,r22
8020116c:	882d883a 	mov	r22,r17
80201170:	dc402917 	ldw	r17,164(sp)
80201174:	d9002b17 	ldw	r4,172(sp)
80201178:	1d87883a 	add	r3,r3,r22
8020117c:	10800044 	addi	r2,r2,1
80201180:	41000015 	stw	r4,0(r8)
80201184:	45800115 	stw	r22,4(r8)
80201188:	d8c02015 	stw	r3,128(sp)
8020118c:	d8801f15 	stw	r2,124(sp)
80201190:	010001c4 	movi	r4,7
80201194:	2081ee16 	blt	r4,r2,80201950 <___vfprintf_internal_r+0x1154>
80201198:	42000204 	addi	r8,r8,8
8020119c:	9080400c 	andi	r2,r18,256
802011a0:	1001181e 	bne	r2,zero,80201604 <___vfprintf_internal_r+0xe08>
802011a4:	d9402e17 	ldw	r5,184(sp)
802011a8:	d8801f17 	ldw	r2,124(sp)
802011ac:	44000015 	stw	r16,0(r8)
802011b0:	1947883a 	add	r3,r3,r5
802011b4:	10800044 	addi	r2,r2,1
802011b8:	41400115 	stw	r5,4(r8)
802011bc:	d8c02015 	stw	r3,128(sp)
802011c0:	d8801f15 	stw	r2,124(sp)
802011c4:	010001c4 	movi	r4,7
802011c8:	2081d316 	blt	r4,r2,80201918 <___vfprintf_internal_r+0x111c>
802011cc:	42000204 	addi	r8,r8,8
802011d0:	9480010c 	andi	r18,r18,4
802011d4:	90003226 	beq	r18,zero,802012a0 <___vfprintf_internal_r+0xaa4>
802011d8:	d9403117 	ldw	r5,196(sp)
802011dc:	d8802a17 	ldw	r2,168(sp)
802011e0:	28a1c83a 	sub	r16,r5,r2
802011e4:	04002e0e 	bge	zero,r16,802012a0 <___vfprintf_internal_r+0xaa4>
802011e8:	04400404 	movi	r17,16
802011ec:	d8801f17 	ldw	r2,124(sp)
802011f0:	8c04a20e 	bge	r17,r16,8020247c <___vfprintf_internal_r+0x1c80>
802011f4:	01600874 	movhi	r5,32801
802011f8:	29466784 	addi	r5,r5,6558
802011fc:	d9403515 	stw	r5,212(sp)
80201200:	048001c4 	movi	r18,7
80201204:	dcc02c17 	ldw	r19,176(sp)
80201208:	00000306 	br	80201218 <___vfprintf_internal_r+0xa1c>
8020120c:	843ffc04 	addi	r16,r16,-16
80201210:	42000204 	addi	r8,r8,8
80201214:	8c00130e 	bge	r17,r16,80201264 <___vfprintf_internal_r+0xa68>
80201218:	01200874 	movhi	r4,32801
8020121c:	18c00404 	addi	r3,r3,16
80201220:	10800044 	addi	r2,r2,1
80201224:	21066784 	addi	r4,r4,6558
80201228:	41000015 	stw	r4,0(r8)
8020122c:	44400115 	stw	r17,4(r8)
80201230:	d8c02015 	stw	r3,128(sp)
80201234:	d8801f15 	stw	r2,124(sp)
80201238:	90bff40e 	bge	r18,r2,8020120c <__reset+0xfa1e120c>
8020123c:	d9801e04 	addi	r6,sp,120
80201240:	b80b883a 	mov	r5,r23
80201244:	9809883a 	mov	r4,r19
80201248:	0207cb00 	call	80207cb0 <__sprint_r>
8020124c:	103e6d1e 	bne	r2,zero,80200c04 <__reset+0xfa1e0c04>
80201250:	843ffc04 	addi	r16,r16,-16
80201254:	d8c02017 	ldw	r3,128(sp)
80201258:	d8801f17 	ldw	r2,124(sp)
8020125c:	da000404 	addi	r8,sp,16
80201260:	8c3fed16 	blt	r17,r16,80201218 <__reset+0xfa1e1218>
80201264:	d9403517 	ldw	r5,212(sp)
80201268:	1c07883a 	add	r3,r3,r16
8020126c:	10800044 	addi	r2,r2,1
80201270:	41400015 	stw	r5,0(r8)
80201274:	44000115 	stw	r16,4(r8)
80201278:	d8c02015 	stw	r3,128(sp)
8020127c:	d8801f15 	stw	r2,124(sp)
80201280:	010001c4 	movi	r4,7
80201284:	2080060e 	bge	r4,r2,802012a0 <___vfprintf_internal_r+0xaa4>
80201288:	d9002c17 	ldw	r4,176(sp)
8020128c:	d9801e04 	addi	r6,sp,120
80201290:	b80b883a 	mov	r5,r23
80201294:	0207cb00 	call	80207cb0 <__sprint_r>
80201298:	103e5a1e 	bne	r2,zero,80200c04 <__reset+0xfa1e0c04>
8020129c:	d8c02017 	ldw	r3,128(sp)
802012a0:	d8803117 	ldw	r2,196(sp)
802012a4:	d9002a17 	ldw	r4,168(sp)
802012a8:	1100010e 	bge	r2,r4,802012b0 <___vfprintf_internal_r+0xab4>
802012ac:	2005883a 	mov	r2,r4
802012b0:	d9402f17 	ldw	r5,188(sp)
802012b4:	288b883a 	add	r5,r5,r2
802012b8:	d9402f15 	stw	r5,188(sp)
802012bc:	18019e1e 	bne	r3,zero,80201938 <___vfprintf_internal_r+0x113c>
802012c0:	a8800007 	ldb	r2,0(r21)
802012c4:	d8001f15 	stw	zero,124(sp)
802012c8:	da000404 	addi	r8,sp,16
802012cc:	103d851e 	bne	r2,zero,802008e4 <__reset+0xfa1e08e4>
802012d0:	a821883a 	mov	r16,r21
802012d4:	003d9b06 	br	80200944 <__reset+0xfa1e0944>
802012d8:	18c03fcc 	andi	r3,r3,255
802012dc:	1805c11e 	bne	r3,zero,802029e4 <___vfprintf_internal_r+0x21e8>
802012e0:	94800414 	ori	r18,r18,16
802012e4:	9080080c 	andi	r2,r18,32
802012e8:	10020c26 	beq	r2,zero,80201b1c <___vfprintf_internal_r+0x1320>
802012ec:	d8802d17 	ldw	r2,180(sp)
802012f0:	d9002917 	ldw	r4,164(sp)
802012f4:	d8002785 	stb	zero,158(sp)
802012f8:	10c00204 	addi	r3,r2,8
802012fc:	14c00017 	ldw	r19,0(r2)
80201300:	15800117 	ldw	r22,4(r2)
80201304:	20040f16 	blt	r4,zero,80202344 <___vfprintf_internal_r+0x1b48>
80201308:	013fdfc4 	movi	r4,-129
8020130c:	9d84b03a 	or	r2,r19,r22
80201310:	d8c02d15 	stw	r3,180(sp)
80201314:	9124703a 	and	r18,r18,r4
80201318:	0039883a 	mov	fp,zero
8020131c:	103e891e 	bne	r2,zero,80200d44 <__reset+0xfa1e0d44>
80201320:	d9002917 	ldw	r4,164(sp)
80201324:	2002c11e 	bne	r4,zero,80201e2c <___vfprintf_internal_r+0x1630>
80201328:	d8002915 	stw	zero,164(sp)
8020132c:	d8002e15 	stw	zero,184(sp)
80201330:	dc001e04 	addi	r16,sp,120
80201334:	003ef806 	br	80200f18 <__reset+0xfa1e0f18>
80201338:	18c03fcc 	andi	r3,r3,255
8020133c:	18059d1e 	bne	r3,zero,802029b4 <___vfprintf_internal_r+0x21b8>
80201340:	01600874 	movhi	r5,32801
80201344:	29465704 	addi	r5,r5,6492
80201348:	d9403915 	stw	r5,228(sp)
8020134c:	9080080c 	andi	r2,r18,32
80201350:	10005226 	beq	r2,zero,8020149c <___vfprintf_internal_r+0xca0>
80201354:	d8802d17 	ldw	r2,180(sp)
80201358:	14c00017 	ldw	r19,0(r2)
8020135c:	15800117 	ldw	r22,4(r2)
80201360:	10800204 	addi	r2,r2,8
80201364:	d8802d15 	stw	r2,180(sp)
80201368:	9080004c 	andi	r2,r18,1
8020136c:	10019026 	beq	r2,zero,802019b0 <___vfprintf_internal_r+0x11b4>
80201370:	9d84b03a 	or	r2,r19,r22
80201374:	10036926 	beq	r2,zero,8020211c <___vfprintf_internal_r+0x1920>
80201378:	d8c02917 	ldw	r3,164(sp)
8020137c:	00800c04 	movi	r2,48
80201380:	d8802705 	stb	r2,156(sp)
80201384:	dc402745 	stb	r17,157(sp)
80201388:	d8002785 	stb	zero,158(sp)
8020138c:	90800094 	ori	r2,r18,2
80201390:	18045d16 	blt	r3,zero,80202508 <___vfprintf_internal_r+0x1d0c>
80201394:	00bfdfc4 	movi	r2,-129
80201398:	90a4703a 	and	r18,r18,r2
8020139c:	94800094 	ori	r18,r18,2
802013a0:	0039883a 	mov	fp,zero
802013a4:	d9003917 	ldw	r4,228(sp)
802013a8:	dc001e04 	addi	r16,sp,120
802013ac:	988003cc 	andi	r2,r19,15
802013b0:	b006973a 	slli	r3,r22,28
802013b4:	2085883a 	add	r2,r4,r2
802013b8:	9826d13a 	srli	r19,r19,4
802013bc:	10800003 	ldbu	r2,0(r2)
802013c0:	b02cd13a 	srli	r22,r22,4
802013c4:	843fffc4 	addi	r16,r16,-1
802013c8:	1ce6b03a 	or	r19,r3,r19
802013cc:	80800005 	stb	r2,0(r16)
802013d0:	9d84b03a 	or	r2,r19,r22
802013d4:	103ff51e 	bne	r2,zero,802013ac <__reset+0xfa1e13ac>
802013d8:	d8c02817 	ldw	r3,160(sp)
802013dc:	1c07c83a 	sub	r3,r3,r16
802013e0:	d8c02e15 	stw	r3,184(sp)
802013e4:	003ecc06 	br	80200f18 <__reset+0xfa1e0f18>
802013e8:	18c03fcc 	andi	r3,r3,255
802013ec:	183e9f26 	beq	r3,zero,80200e6c <__reset+0xfa1e0e6c>
802013f0:	d9c02785 	stb	r7,158(sp)
802013f4:	003e9d06 	br	80200e6c <__reset+0xfa1e0e6c>
802013f8:	00c00044 	movi	r3,1
802013fc:	01c00ac4 	movi	r7,43
80201400:	ac400007 	ldb	r17,0(r21)
80201404:	003d5e06 	br	80200980 <__reset+0xfa1e0980>
80201408:	94800814 	ori	r18,r18,32
8020140c:	ac400007 	ldb	r17,0(r21)
80201410:	003d5b06 	br	80200980 <__reset+0xfa1e0980>
80201414:	d8c02d17 	ldw	r3,180(sp)
80201418:	d8002785 	stb	zero,158(sp)
8020141c:	1c000017 	ldw	r16,0(r3)
80201420:	1cc00104 	addi	r19,r3,4
80201424:	80041926 	beq	r16,zero,8020248c <___vfprintf_internal_r+0x1c90>
80201428:	d9002917 	ldw	r4,164(sp)
8020142c:	2003d016 	blt	r4,zero,80202370 <___vfprintf_internal_r+0x1b74>
80201430:	200d883a 	mov	r6,r4
80201434:	000b883a 	mov	r5,zero
80201438:	8009883a 	mov	r4,r16
8020143c:	da003d15 	stw	r8,244(sp)
80201440:	020600c0 	call	8020600c <memchr>
80201444:	da003d17 	ldw	r8,244(sp)
80201448:	10045426 	beq	r2,zero,8020259c <___vfprintf_internal_r+0x1da0>
8020144c:	1405c83a 	sub	r2,r2,r16
80201450:	d8802e15 	stw	r2,184(sp)
80201454:	1003cc16 	blt	r2,zero,80202388 <___vfprintf_internal_r+0x1b8c>
80201458:	df002783 	ldbu	fp,158(sp)
8020145c:	d8802a15 	stw	r2,168(sp)
80201460:	dcc02d15 	stw	r19,180(sp)
80201464:	d8002915 	stw	zero,164(sp)
80201468:	d8003215 	stw	zero,200(sp)
8020146c:	003eb006 	br	80200f30 <__reset+0xfa1e0f30>
80201470:	18c03fcc 	andi	r3,r3,255
80201474:	183f9b26 	beq	r3,zero,802012e4 <__reset+0xfa1e12e4>
80201478:	d9c02785 	stb	r7,158(sp)
8020147c:	003f9906 	br	802012e4 <__reset+0xfa1e12e4>
80201480:	18c03fcc 	andi	r3,r3,255
80201484:	1805551e 	bne	r3,zero,802029dc <___vfprintf_internal_r+0x21e0>
80201488:	01600874 	movhi	r5,32801
8020148c:	29465c04 	addi	r5,r5,6512
80201490:	d9403915 	stw	r5,228(sp)
80201494:	9080080c 	andi	r2,r18,32
80201498:	103fae1e 	bne	r2,zero,80201354 <__reset+0xfa1e1354>
8020149c:	9080040c 	andi	r2,r18,16
802014a0:	1002de26 	beq	r2,zero,8020201c <___vfprintf_internal_r+0x1820>
802014a4:	d8c02d17 	ldw	r3,180(sp)
802014a8:	002d883a 	mov	r22,zero
802014ac:	1cc00017 	ldw	r19,0(r3)
802014b0:	18c00104 	addi	r3,r3,4
802014b4:	d8c02d15 	stw	r3,180(sp)
802014b8:	003fab06 	br	80201368 <__reset+0xfa1e1368>
802014bc:	38803fcc 	andi	r2,r7,255
802014c0:	1080201c 	xori	r2,r2,128
802014c4:	10bfe004 	addi	r2,r2,-128
802014c8:	1002d21e 	bne	r2,zero,80202014 <___vfprintf_internal_r+0x1818>
802014cc:	00c00044 	movi	r3,1
802014d0:	01c00804 	movi	r7,32
802014d4:	ac400007 	ldb	r17,0(r21)
802014d8:	003d2906 	br	80200980 <__reset+0xfa1e0980>
802014dc:	94800054 	ori	r18,r18,1
802014e0:	ac400007 	ldb	r17,0(r21)
802014e4:	003d2606 	br	80200980 <__reset+0xfa1e0980>
802014e8:	18c03fcc 	andi	r3,r3,255
802014ec:	183e0526 	beq	r3,zero,80200d04 <__reset+0xfa1e0d04>
802014f0:	d9c02785 	stb	r7,158(sp)
802014f4:	003e0306 	br	80200d04 <__reset+0xfa1e0d04>
802014f8:	94801014 	ori	r18,r18,64
802014fc:	ac400007 	ldb	r17,0(r21)
80201500:	003d1f06 	br	80200980 <__reset+0xfa1e0980>
80201504:	ac400007 	ldb	r17,0(r21)
80201508:	8a438726 	beq	r17,r9,80202328 <___vfprintf_internal_r+0x1b2c>
8020150c:	94800414 	ori	r18,r18,16
80201510:	003d1b06 	br	80200980 <__reset+0xfa1e0980>
80201514:	18c03fcc 	andi	r3,r3,255
80201518:	1805341e 	bne	r3,zero,802029ec <___vfprintf_internal_r+0x21f0>
8020151c:	9080080c 	andi	r2,r18,32
80201520:	1002cd26 	beq	r2,zero,80202058 <___vfprintf_internal_r+0x185c>
80201524:	d9402d17 	ldw	r5,180(sp)
80201528:	d9002f17 	ldw	r4,188(sp)
8020152c:	28800017 	ldw	r2,0(r5)
80201530:	2007d7fa 	srai	r3,r4,31
80201534:	29400104 	addi	r5,r5,4
80201538:	d9402d15 	stw	r5,180(sp)
8020153c:	11000015 	stw	r4,0(r2)
80201540:	10c00115 	stw	r3,4(r2)
80201544:	003ce506 	br	802008dc <__reset+0xfa1e08dc>
80201548:	d8c02d17 	ldw	r3,180(sp)
8020154c:	d9002d17 	ldw	r4,180(sp)
80201550:	d8002785 	stb	zero,158(sp)
80201554:	18800017 	ldw	r2,0(r3)
80201558:	21000104 	addi	r4,r4,4
8020155c:	00c00044 	movi	r3,1
80201560:	d8c02a15 	stw	r3,168(sp)
80201564:	d8801405 	stb	r2,80(sp)
80201568:	d9002d15 	stw	r4,180(sp)
8020156c:	d8c02e15 	stw	r3,184(sp)
80201570:	d8002915 	stw	zero,164(sp)
80201574:	d8003215 	stw	zero,200(sp)
80201578:	dc001404 	addi	r16,sp,80
8020157c:	0039883a 	mov	fp,zero
80201580:	003e7206 	br	80200f4c <__reset+0xfa1e0f4c>
80201584:	01200874 	movhi	r4,32801
80201588:	21065c04 	addi	r4,r4,6512
8020158c:	0039883a 	mov	fp,zero
80201590:	d9003915 	stw	r4,228(sp)
80201594:	04401e04 	movi	r17,120
80201598:	003f8206 	br	802013a4 <__reset+0xfa1e13a4>
8020159c:	18c03fcc 	andi	r3,r3,255
802015a0:	1805061e 	bne	r3,zero,802029bc <___vfprintf_internal_r+0x21c0>
802015a4:	883d9126 	beq	r17,zero,80200bec <__reset+0xfa1e0bec>
802015a8:	00c00044 	movi	r3,1
802015ac:	d8c02a15 	stw	r3,168(sp)
802015b0:	dc401405 	stb	r17,80(sp)
802015b4:	d8002785 	stb	zero,158(sp)
802015b8:	003fec06 	br	8020156c <__reset+0xfa1e156c>
802015bc:	01600874 	movhi	r5,32801
802015c0:	29465c04 	addi	r5,r5,6512
802015c4:	d9403915 	stw	r5,228(sp)
802015c8:	d8c02d15 	stw	r3,180(sp)
802015cc:	1025883a 	mov	r18,r2
802015d0:	04401e04 	movi	r17,120
802015d4:	9d84b03a 	or	r2,r19,r22
802015d8:	1000fc1e 	bne	r2,zero,802019cc <___vfprintf_internal_r+0x11d0>
802015dc:	0039883a 	mov	fp,zero
802015e0:	00800084 	movi	r2,2
802015e4:	10803fcc 	andi	r2,r2,255
802015e8:	00c00044 	movi	r3,1
802015ec:	10c20f26 	beq	r2,r3,80201e2c <___vfprintf_internal_r+0x1630>
802015f0:	00c00084 	movi	r3,2
802015f4:	10fd6326 	beq	r2,r3,80200b84 <__reset+0xfa1e0b84>
802015f8:	003e2d06 	br	80200eb0 <__reset+0xfa1e0eb0>
802015fc:	d8c02017 	ldw	r3,128(sp)
80201600:	003e9306 	br	80201050 <__reset+0xfa1e1050>
80201604:	00801944 	movi	r2,101
80201608:	14407e0e 	bge	r2,r17,80201804 <___vfprintf_internal_r+0x1008>
8020160c:	d9003617 	ldw	r4,216(sp)
80201610:	d9403817 	ldw	r5,224(sp)
80201614:	000d883a 	mov	r6,zero
80201618:	000f883a 	mov	r7,zero
8020161c:	d8c03c15 	stw	r3,240(sp)
80201620:	da003d15 	stw	r8,244(sp)
80201624:	020b9280 	call	8020b928 <__eqdf2>
80201628:	d8c03c17 	ldw	r3,240(sp)
8020162c:	da003d17 	ldw	r8,244(sp)
80201630:	1000f71e 	bne	r2,zero,80201a10 <___vfprintf_internal_r+0x1214>
80201634:	d8801f17 	ldw	r2,124(sp)
80201638:	01200874 	movhi	r4,32801
8020163c:	21066304 	addi	r4,r4,6540
80201640:	18c00044 	addi	r3,r3,1
80201644:	10800044 	addi	r2,r2,1
80201648:	41000015 	stw	r4,0(r8)
8020164c:	01000044 	movi	r4,1
80201650:	41000115 	stw	r4,4(r8)
80201654:	d8c02015 	stw	r3,128(sp)
80201658:	d8801f15 	stw	r2,124(sp)
8020165c:	010001c4 	movi	r4,7
80201660:	2082b816 	blt	r4,r2,80202144 <___vfprintf_internal_r+0x1948>
80201664:	42000204 	addi	r8,r8,8
80201668:	d8802617 	ldw	r2,152(sp)
8020166c:	d9403317 	ldw	r5,204(sp)
80201670:	11400216 	blt	r2,r5,8020167c <___vfprintf_internal_r+0xe80>
80201674:	9080004c 	andi	r2,r18,1
80201678:	103ed526 	beq	r2,zero,802011d0 <__reset+0xfa1e11d0>
8020167c:	d8803717 	ldw	r2,220(sp)
80201680:	d9003417 	ldw	r4,208(sp)
80201684:	d9403717 	ldw	r5,220(sp)
80201688:	1887883a 	add	r3,r3,r2
8020168c:	d8801f17 	ldw	r2,124(sp)
80201690:	41000015 	stw	r4,0(r8)
80201694:	41400115 	stw	r5,4(r8)
80201698:	10800044 	addi	r2,r2,1
8020169c:	d8c02015 	stw	r3,128(sp)
802016a0:	d8801f15 	stw	r2,124(sp)
802016a4:	010001c4 	movi	r4,7
802016a8:	20832916 	blt	r4,r2,80202350 <___vfprintf_internal_r+0x1b54>
802016ac:	42000204 	addi	r8,r8,8
802016b0:	d8803317 	ldw	r2,204(sp)
802016b4:	143fffc4 	addi	r16,r2,-1
802016b8:	043ec50e 	bge	zero,r16,802011d0 <__reset+0xfa1e11d0>
802016bc:	04400404 	movi	r17,16
802016c0:	d8801f17 	ldw	r2,124(sp)
802016c4:	8c00880e 	bge	r17,r16,802018e8 <___vfprintf_internal_r+0x10ec>
802016c8:	01600874 	movhi	r5,32801
802016cc:	29466384 	addi	r5,r5,6542
802016d0:	d9402b15 	stw	r5,172(sp)
802016d4:	058001c4 	movi	r22,7
802016d8:	dcc02c17 	ldw	r19,176(sp)
802016dc:	00000306 	br	802016ec <___vfprintf_internal_r+0xef0>
802016e0:	42000204 	addi	r8,r8,8
802016e4:	843ffc04 	addi	r16,r16,-16
802016e8:	8c00820e 	bge	r17,r16,802018f4 <___vfprintf_internal_r+0x10f8>
802016ec:	18c00404 	addi	r3,r3,16
802016f0:	10800044 	addi	r2,r2,1
802016f4:	45000015 	stw	r20,0(r8)
802016f8:	44400115 	stw	r17,4(r8)
802016fc:	d8c02015 	stw	r3,128(sp)
80201700:	d8801f15 	stw	r2,124(sp)
80201704:	b0bff60e 	bge	r22,r2,802016e0 <__reset+0xfa1e16e0>
80201708:	d9801e04 	addi	r6,sp,120
8020170c:	b80b883a 	mov	r5,r23
80201710:	9809883a 	mov	r4,r19
80201714:	0207cb00 	call	80207cb0 <__sprint_r>
80201718:	103d3a1e 	bne	r2,zero,80200c04 <__reset+0xfa1e0c04>
8020171c:	d8c02017 	ldw	r3,128(sp)
80201720:	d8801f17 	ldw	r2,124(sp)
80201724:	da000404 	addi	r8,sp,16
80201728:	003fee06 	br	802016e4 <__reset+0xfa1e16e4>
8020172c:	d9403117 	ldw	r5,196(sp)
80201730:	d8802a17 	ldw	r2,168(sp)
80201734:	28adc83a 	sub	r22,r5,r2
80201738:	05be630e 	bge	zero,r22,802010c8 <__reset+0xfa1e10c8>
8020173c:	07000404 	movi	fp,16
80201740:	d8801f17 	ldw	r2,124(sp)
80201744:	e5838f0e 	bge	fp,r22,80202584 <___vfprintf_internal_r+0x1d88>
80201748:	01600874 	movhi	r5,32801
8020174c:	29466384 	addi	r5,r5,6542
80201750:	dc403015 	stw	r17,192(sp)
80201754:	d9402b15 	stw	r5,172(sp)
80201758:	b023883a 	mov	r17,r22
8020175c:	04c001c4 	movi	r19,7
80201760:	a82d883a 	mov	r22,r21
80201764:	902b883a 	mov	r21,r18
80201768:	8025883a 	mov	r18,r16
8020176c:	dc002c17 	ldw	r16,176(sp)
80201770:	00000306 	br	80201780 <___vfprintf_internal_r+0xf84>
80201774:	8c7ffc04 	addi	r17,r17,-16
80201778:	42000204 	addi	r8,r8,8
8020177c:	e440110e 	bge	fp,r17,802017c4 <___vfprintf_internal_r+0xfc8>
80201780:	18c00404 	addi	r3,r3,16
80201784:	10800044 	addi	r2,r2,1
80201788:	45000015 	stw	r20,0(r8)
8020178c:	47000115 	stw	fp,4(r8)
80201790:	d8c02015 	stw	r3,128(sp)
80201794:	d8801f15 	stw	r2,124(sp)
80201798:	98bff60e 	bge	r19,r2,80201774 <__reset+0xfa1e1774>
8020179c:	d9801e04 	addi	r6,sp,120
802017a0:	b80b883a 	mov	r5,r23
802017a4:	8009883a 	mov	r4,r16
802017a8:	0207cb00 	call	80207cb0 <__sprint_r>
802017ac:	103d151e 	bne	r2,zero,80200c04 <__reset+0xfa1e0c04>
802017b0:	8c7ffc04 	addi	r17,r17,-16
802017b4:	d8c02017 	ldw	r3,128(sp)
802017b8:	d8801f17 	ldw	r2,124(sp)
802017bc:	da000404 	addi	r8,sp,16
802017c0:	e47fef16 	blt	fp,r17,80201780 <__reset+0xfa1e1780>
802017c4:	9021883a 	mov	r16,r18
802017c8:	a825883a 	mov	r18,r21
802017cc:	b02b883a 	mov	r21,r22
802017d0:	882d883a 	mov	r22,r17
802017d4:	dc403017 	ldw	r17,192(sp)
802017d8:	d9002b17 	ldw	r4,172(sp)
802017dc:	1d87883a 	add	r3,r3,r22
802017e0:	10800044 	addi	r2,r2,1
802017e4:	41000015 	stw	r4,0(r8)
802017e8:	45800115 	stw	r22,4(r8)
802017ec:	d8c02015 	stw	r3,128(sp)
802017f0:	d8801f15 	stw	r2,124(sp)
802017f4:	010001c4 	movi	r4,7
802017f8:	20818e16 	blt	r4,r2,80201e34 <___vfprintf_internal_r+0x1638>
802017fc:	42000204 	addi	r8,r8,8
80201800:	003e3106 	br	802010c8 <__reset+0xfa1e10c8>
80201804:	d9403317 	ldw	r5,204(sp)
80201808:	00800044 	movi	r2,1
8020180c:	18c00044 	addi	r3,r3,1
80201810:	1141530e 	bge	r2,r5,80201d60 <___vfprintf_internal_r+0x1564>
80201814:	dc401f17 	ldw	r17,124(sp)
80201818:	00800044 	movi	r2,1
8020181c:	40800115 	stw	r2,4(r8)
80201820:	8c400044 	addi	r17,r17,1
80201824:	44000015 	stw	r16,0(r8)
80201828:	d8c02015 	stw	r3,128(sp)
8020182c:	dc401f15 	stw	r17,124(sp)
80201830:	008001c4 	movi	r2,7
80201834:	14416b16 	blt	r2,r17,80201de4 <___vfprintf_internal_r+0x15e8>
80201838:	42000204 	addi	r8,r8,8
8020183c:	d8803717 	ldw	r2,220(sp)
80201840:	d9003417 	ldw	r4,208(sp)
80201844:	8c400044 	addi	r17,r17,1
80201848:	10c7883a 	add	r3,r2,r3
8020184c:	40800115 	stw	r2,4(r8)
80201850:	41000015 	stw	r4,0(r8)
80201854:	d8c02015 	stw	r3,128(sp)
80201858:	dc401f15 	stw	r17,124(sp)
8020185c:	008001c4 	movi	r2,7
80201860:	14416916 	blt	r2,r17,80201e08 <___vfprintf_internal_r+0x160c>
80201864:	45800204 	addi	r22,r8,8
80201868:	d9003617 	ldw	r4,216(sp)
8020186c:	d9403817 	ldw	r5,224(sp)
80201870:	000d883a 	mov	r6,zero
80201874:	000f883a 	mov	r7,zero
80201878:	d8c03c15 	stw	r3,240(sp)
8020187c:	020b9280 	call	8020b928 <__eqdf2>
80201880:	d8c03c17 	ldw	r3,240(sp)
80201884:	1000bc26 	beq	r2,zero,80201b78 <___vfprintf_internal_r+0x137c>
80201888:	d9403317 	ldw	r5,204(sp)
8020188c:	84000044 	addi	r16,r16,1
80201890:	8c400044 	addi	r17,r17,1
80201894:	28bfffc4 	addi	r2,r5,-1
80201898:	1887883a 	add	r3,r3,r2
8020189c:	b0800115 	stw	r2,4(r22)
802018a0:	b4000015 	stw	r16,0(r22)
802018a4:	d8c02015 	stw	r3,128(sp)
802018a8:	dc401f15 	stw	r17,124(sp)
802018ac:	008001c4 	movi	r2,7
802018b0:	14414316 	blt	r2,r17,80201dc0 <___vfprintf_internal_r+0x15c4>
802018b4:	b5800204 	addi	r22,r22,8
802018b8:	d9003a17 	ldw	r4,232(sp)
802018bc:	df0022c4 	addi	fp,sp,139
802018c0:	8c400044 	addi	r17,r17,1
802018c4:	20c7883a 	add	r3,r4,r3
802018c8:	b7000015 	stw	fp,0(r22)
802018cc:	b1000115 	stw	r4,4(r22)
802018d0:	d8c02015 	stw	r3,128(sp)
802018d4:	dc401f15 	stw	r17,124(sp)
802018d8:	008001c4 	movi	r2,7
802018dc:	14400e16 	blt	r2,r17,80201918 <___vfprintf_internal_r+0x111c>
802018e0:	b2000204 	addi	r8,r22,8
802018e4:	003e3a06 	br	802011d0 <__reset+0xfa1e11d0>
802018e8:	01200874 	movhi	r4,32801
802018ec:	21066384 	addi	r4,r4,6542
802018f0:	d9002b15 	stw	r4,172(sp)
802018f4:	d9002b17 	ldw	r4,172(sp)
802018f8:	1c07883a 	add	r3,r3,r16
802018fc:	44000115 	stw	r16,4(r8)
80201900:	41000015 	stw	r4,0(r8)
80201904:	10800044 	addi	r2,r2,1
80201908:	d8c02015 	stw	r3,128(sp)
8020190c:	d8801f15 	stw	r2,124(sp)
80201910:	010001c4 	movi	r4,7
80201914:	20be2d0e 	bge	r4,r2,802011cc <__reset+0xfa1e11cc>
80201918:	d9002c17 	ldw	r4,176(sp)
8020191c:	d9801e04 	addi	r6,sp,120
80201920:	b80b883a 	mov	r5,r23
80201924:	0207cb00 	call	80207cb0 <__sprint_r>
80201928:	103cb61e 	bne	r2,zero,80200c04 <__reset+0xfa1e0c04>
8020192c:	d8c02017 	ldw	r3,128(sp)
80201930:	da000404 	addi	r8,sp,16
80201934:	003e2606 	br	802011d0 <__reset+0xfa1e11d0>
80201938:	d9002c17 	ldw	r4,176(sp)
8020193c:	d9801e04 	addi	r6,sp,120
80201940:	b80b883a 	mov	r5,r23
80201944:	0207cb00 	call	80207cb0 <__sprint_r>
80201948:	103e5d26 	beq	r2,zero,802012c0 <__reset+0xfa1e12c0>
8020194c:	003cad06 	br	80200c04 <__reset+0xfa1e0c04>
80201950:	d9002c17 	ldw	r4,176(sp)
80201954:	d9801e04 	addi	r6,sp,120
80201958:	b80b883a 	mov	r5,r23
8020195c:	0207cb00 	call	80207cb0 <__sprint_r>
80201960:	103ca81e 	bne	r2,zero,80200c04 <__reset+0xfa1e0c04>
80201964:	d8c02017 	ldw	r3,128(sp)
80201968:	da000404 	addi	r8,sp,16
8020196c:	003e0b06 	br	8020119c <__reset+0xfa1e119c>
80201970:	d9002c17 	ldw	r4,176(sp)
80201974:	d9801e04 	addi	r6,sp,120
80201978:	b80b883a 	mov	r5,r23
8020197c:	0207cb00 	call	80207cb0 <__sprint_r>
80201980:	103ca01e 	bne	r2,zero,80200c04 <__reset+0xfa1e0c04>
80201984:	d8c02017 	ldw	r3,128(sp)
80201988:	da000404 	addi	r8,sp,16
8020198c:	003dbd06 	br	80201084 <__reset+0xfa1e1084>
80201990:	d9002c17 	ldw	r4,176(sp)
80201994:	d9801e04 	addi	r6,sp,120
80201998:	b80b883a 	mov	r5,r23
8020199c:	0207cb00 	call	80207cb0 <__sprint_r>
802019a0:	103c981e 	bne	r2,zero,80200c04 <__reset+0xfa1e0c04>
802019a4:	d8c02017 	ldw	r3,128(sp)
802019a8:	da000404 	addi	r8,sp,16
802019ac:	003dc306 	br	802010bc <__reset+0xfa1e10bc>
802019b0:	d8802917 	ldw	r2,164(sp)
802019b4:	d8002785 	stb	zero,158(sp)
802019b8:	103f0616 	blt	r2,zero,802015d4 <__reset+0xfa1e15d4>
802019bc:	00ffdfc4 	movi	r3,-129
802019c0:	9d84b03a 	or	r2,r19,r22
802019c4:	90e4703a 	and	r18,r18,r3
802019c8:	103c6b26 	beq	r2,zero,80200b78 <__reset+0xfa1e0b78>
802019cc:	0039883a 	mov	fp,zero
802019d0:	003e7406 	br	802013a4 <__reset+0xfa1e13a4>
802019d4:	9080040c 	andi	r2,r18,16
802019d8:	1001b326 	beq	r2,zero,802020a8 <___vfprintf_internal_r+0x18ac>
802019dc:	d9002d17 	ldw	r4,180(sp)
802019e0:	d9402917 	ldw	r5,164(sp)
802019e4:	d8002785 	stb	zero,158(sp)
802019e8:	20800104 	addi	r2,r4,4
802019ec:	24c00017 	ldw	r19,0(r4)
802019f0:	002d883a 	mov	r22,zero
802019f4:	2801b516 	blt	r5,zero,802020cc <___vfprintf_internal_r+0x18d0>
802019f8:	00ffdfc4 	movi	r3,-129
802019fc:	d8802d15 	stw	r2,180(sp)
80201a00:	90e4703a 	and	r18,r18,r3
80201a04:	983d2726 	beq	r19,zero,80200ea4 <__reset+0xfa1e0ea4>
80201a08:	0039883a 	mov	fp,zero
80201a0c:	003d2a06 	br	80200eb8 <__reset+0xfa1e0eb8>
80201a10:	dc402617 	ldw	r17,152(sp)
80201a14:	0441d30e 	bge	zero,r17,80202164 <___vfprintf_internal_r+0x1968>
80201a18:	dc403217 	ldw	r17,200(sp)
80201a1c:	d8803317 	ldw	r2,204(sp)
80201a20:	1440010e 	bge	r2,r17,80201a28 <___vfprintf_internal_r+0x122c>
80201a24:	1023883a 	mov	r17,r2
80201a28:	04400a0e 	bge	zero,r17,80201a54 <___vfprintf_internal_r+0x1258>
80201a2c:	d8801f17 	ldw	r2,124(sp)
80201a30:	1c47883a 	add	r3,r3,r17
80201a34:	44000015 	stw	r16,0(r8)
80201a38:	10800044 	addi	r2,r2,1
80201a3c:	44400115 	stw	r17,4(r8)
80201a40:	d8c02015 	stw	r3,128(sp)
80201a44:	d8801f15 	stw	r2,124(sp)
80201a48:	010001c4 	movi	r4,7
80201a4c:	20826516 	blt	r4,r2,802023e4 <___vfprintf_internal_r+0x1be8>
80201a50:	42000204 	addi	r8,r8,8
80201a54:	88026116 	blt	r17,zero,802023dc <___vfprintf_internal_r+0x1be0>
80201a58:	d9003217 	ldw	r4,200(sp)
80201a5c:	2463c83a 	sub	r17,r4,r17
80201a60:	04407b0e 	bge	zero,r17,80201c50 <___vfprintf_internal_r+0x1454>
80201a64:	05800404 	movi	r22,16
80201a68:	d8801f17 	ldw	r2,124(sp)
80201a6c:	b4419d0e 	bge	r22,r17,802020e4 <___vfprintf_internal_r+0x18e8>
80201a70:	01200874 	movhi	r4,32801
80201a74:	21066384 	addi	r4,r4,6542
80201a78:	d9002b15 	stw	r4,172(sp)
80201a7c:	070001c4 	movi	fp,7
80201a80:	dcc02c17 	ldw	r19,176(sp)
80201a84:	00000306 	br	80201a94 <___vfprintf_internal_r+0x1298>
80201a88:	42000204 	addi	r8,r8,8
80201a8c:	8c7ffc04 	addi	r17,r17,-16
80201a90:	b441970e 	bge	r22,r17,802020f0 <___vfprintf_internal_r+0x18f4>
80201a94:	18c00404 	addi	r3,r3,16
80201a98:	10800044 	addi	r2,r2,1
80201a9c:	45000015 	stw	r20,0(r8)
80201aa0:	45800115 	stw	r22,4(r8)
80201aa4:	d8c02015 	stw	r3,128(sp)
80201aa8:	d8801f15 	stw	r2,124(sp)
80201aac:	e0bff60e 	bge	fp,r2,80201a88 <__reset+0xfa1e1a88>
80201ab0:	d9801e04 	addi	r6,sp,120
80201ab4:	b80b883a 	mov	r5,r23
80201ab8:	9809883a 	mov	r4,r19
80201abc:	0207cb00 	call	80207cb0 <__sprint_r>
80201ac0:	103c501e 	bne	r2,zero,80200c04 <__reset+0xfa1e0c04>
80201ac4:	d8c02017 	ldw	r3,128(sp)
80201ac8:	d8801f17 	ldw	r2,124(sp)
80201acc:	da000404 	addi	r8,sp,16
80201ad0:	003fee06 	br	80201a8c <__reset+0xfa1e1a8c>
80201ad4:	d9002c17 	ldw	r4,176(sp)
80201ad8:	d9801e04 	addi	r6,sp,120
80201adc:	b80b883a 	mov	r5,r23
80201ae0:	0207cb00 	call	80207cb0 <__sprint_r>
80201ae4:	103c471e 	bne	r2,zero,80200c04 <__reset+0xfa1e0c04>
80201ae8:	d8c02017 	ldw	r3,128(sp)
80201aec:	df002787 	ldb	fp,158(sp)
80201af0:	da000404 	addi	r8,sp,16
80201af4:	003d5606 	br	80201050 <__reset+0xfa1e1050>
80201af8:	9080040c 	andi	r2,r18,16
80201afc:	10016126 	beq	r2,zero,80202084 <___vfprintf_internal_r+0x1888>
80201b00:	d8802d17 	ldw	r2,180(sp)
80201b04:	14c00017 	ldw	r19,0(r2)
80201b08:	10800104 	addi	r2,r2,4
80201b0c:	d8802d15 	stw	r2,180(sp)
80201b10:	982dd7fa 	srai	r22,r19,31
80201b14:	b005883a 	mov	r2,r22
80201b18:	003c8206 	br	80200d24 <__reset+0xfa1e0d24>
80201b1c:	9080040c 	andi	r2,r18,16
80201b20:	10003526 	beq	r2,zero,80201bf8 <___vfprintf_internal_r+0x13fc>
80201b24:	d9402d17 	ldw	r5,180(sp)
80201b28:	d8c02917 	ldw	r3,164(sp)
80201b2c:	d8002785 	stb	zero,158(sp)
80201b30:	28800104 	addi	r2,r5,4
80201b34:	2cc00017 	ldw	r19,0(r5)
80201b38:	002d883a 	mov	r22,zero
80201b3c:	18003716 	blt	r3,zero,80201c1c <___vfprintf_internal_r+0x1420>
80201b40:	00ffdfc4 	movi	r3,-129
80201b44:	d8802d15 	stw	r2,180(sp)
80201b48:	90e4703a 	and	r18,r18,r3
80201b4c:	0039883a 	mov	fp,zero
80201b50:	983df326 	beq	r19,zero,80201320 <__reset+0xfa1e1320>
80201b54:	00800244 	movi	r2,9
80201b58:	14fc7b36 	bltu	r2,r19,80200d48 <__reset+0xfa1e0d48>
80201b5c:	d8c02817 	ldw	r3,160(sp)
80201b60:	dc001dc4 	addi	r16,sp,119
80201b64:	9cc00c04 	addi	r19,r19,48
80201b68:	1c07c83a 	sub	r3,r3,r16
80201b6c:	dcc01dc5 	stb	r19,119(sp)
80201b70:	d8c02e15 	stw	r3,184(sp)
80201b74:	003ce806 	br	80200f18 <__reset+0xfa1e0f18>
80201b78:	d8803317 	ldw	r2,204(sp)
80201b7c:	143fffc4 	addi	r16,r2,-1
80201b80:	043f4d0e 	bge	zero,r16,802018b8 <__reset+0xfa1e18b8>
80201b84:	07000404 	movi	fp,16
80201b88:	e400810e 	bge	fp,r16,80201d90 <___vfprintf_internal_r+0x1594>
80201b8c:	01600874 	movhi	r5,32801
80201b90:	29466384 	addi	r5,r5,6542
80201b94:	d9402b15 	stw	r5,172(sp)
80201b98:	01c001c4 	movi	r7,7
80201b9c:	dcc02c17 	ldw	r19,176(sp)
80201ba0:	00000306 	br	80201bb0 <___vfprintf_internal_r+0x13b4>
80201ba4:	b5800204 	addi	r22,r22,8
80201ba8:	843ffc04 	addi	r16,r16,-16
80201bac:	e4007b0e 	bge	fp,r16,80201d9c <___vfprintf_internal_r+0x15a0>
80201bb0:	18c00404 	addi	r3,r3,16
80201bb4:	8c400044 	addi	r17,r17,1
80201bb8:	b5000015 	stw	r20,0(r22)
80201bbc:	b7000115 	stw	fp,4(r22)
80201bc0:	d8c02015 	stw	r3,128(sp)
80201bc4:	dc401f15 	stw	r17,124(sp)
80201bc8:	3c7ff60e 	bge	r7,r17,80201ba4 <__reset+0xfa1e1ba4>
80201bcc:	d9801e04 	addi	r6,sp,120
80201bd0:	b80b883a 	mov	r5,r23
80201bd4:	9809883a 	mov	r4,r19
80201bd8:	d9c03c15 	stw	r7,240(sp)
80201bdc:	0207cb00 	call	80207cb0 <__sprint_r>
80201be0:	d9c03c17 	ldw	r7,240(sp)
80201be4:	103c071e 	bne	r2,zero,80200c04 <__reset+0xfa1e0c04>
80201be8:	d8c02017 	ldw	r3,128(sp)
80201bec:	dc401f17 	ldw	r17,124(sp)
80201bf0:	dd800404 	addi	r22,sp,16
80201bf4:	003fec06 	br	80201ba8 <__reset+0xfa1e1ba8>
80201bf8:	9080100c 	andi	r2,r18,64
80201bfc:	d8002785 	stb	zero,158(sp)
80201c00:	10010e26 	beq	r2,zero,8020203c <___vfprintf_internal_r+0x1840>
80201c04:	d9002d17 	ldw	r4,180(sp)
80201c08:	d9402917 	ldw	r5,164(sp)
80201c0c:	002d883a 	mov	r22,zero
80201c10:	20800104 	addi	r2,r4,4
80201c14:	24c0000b 	ldhu	r19,0(r4)
80201c18:	283fc90e 	bge	r5,zero,80201b40 <__reset+0xfa1e1b40>
80201c1c:	d8802d15 	stw	r2,180(sp)
80201c20:	0039883a 	mov	fp,zero
80201c24:	9d84b03a 	or	r2,r19,r22
80201c28:	103c461e 	bne	r2,zero,80200d44 <__reset+0xfa1e0d44>
80201c2c:	00800044 	movi	r2,1
80201c30:	003e6c06 	br	802015e4 <__reset+0xfa1e15e4>
80201c34:	d9002c17 	ldw	r4,176(sp)
80201c38:	d9801e04 	addi	r6,sp,120
80201c3c:	b80b883a 	mov	r5,r23
80201c40:	0207cb00 	call	80207cb0 <__sprint_r>
80201c44:	103bef1e 	bne	r2,zero,80200c04 <__reset+0xfa1e0c04>
80201c48:	d8c02017 	ldw	r3,128(sp)
80201c4c:	da000404 	addi	r8,sp,16
80201c50:	d9003217 	ldw	r4,200(sp)
80201c54:	d8802617 	ldw	r2,152(sp)
80201c58:	d9403317 	ldw	r5,204(sp)
80201c5c:	8123883a 	add	r17,r16,r4
80201c60:	11400216 	blt	r2,r5,80201c6c <___vfprintf_internal_r+0x1470>
80201c64:	9100004c 	andi	r4,r18,1
80201c68:	20000d26 	beq	r4,zero,80201ca0 <___vfprintf_internal_r+0x14a4>
80201c6c:	d9003717 	ldw	r4,220(sp)
80201c70:	d9403417 	ldw	r5,208(sp)
80201c74:	1907883a 	add	r3,r3,r4
80201c78:	d9001f17 	ldw	r4,124(sp)
80201c7c:	41400015 	stw	r5,0(r8)
80201c80:	d9403717 	ldw	r5,220(sp)
80201c84:	21000044 	addi	r4,r4,1
80201c88:	d8c02015 	stw	r3,128(sp)
80201c8c:	41400115 	stw	r5,4(r8)
80201c90:	d9001f15 	stw	r4,124(sp)
80201c94:	014001c4 	movi	r5,7
80201c98:	2901e816 	blt	r5,r4,8020243c <___vfprintf_internal_r+0x1c40>
80201c9c:	42000204 	addi	r8,r8,8
80201ca0:	d9003317 	ldw	r4,204(sp)
80201ca4:	8121883a 	add	r16,r16,r4
80201ca8:	2085c83a 	sub	r2,r4,r2
80201cac:	8461c83a 	sub	r16,r16,r17
80201cb0:	1400010e 	bge	r2,r16,80201cb8 <___vfprintf_internal_r+0x14bc>
80201cb4:	1021883a 	mov	r16,r2
80201cb8:	04000a0e 	bge	zero,r16,80201ce4 <___vfprintf_internal_r+0x14e8>
80201cbc:	d9001f17 	ldw	r4,124(sp)
80201cc0:	1c07883a 	add	r3,r3,r16
80201cc4:	44400015 	stw	r17,0(r8)
80201cc8:	21000044 	addi	r4,r4,1
80201ccc:	44000115 	stw	r16,4(r8)
80201cd0:	d8c02015 	stw	r3,128(sp)
80201cd4:	d9001f15 	stw	r4,124(sp)
80201cd8:	014001c4 	movi	r5,7
80201cdc:	2901fb16 	blt	r5,r4,802024cc <___vfprintf_internal_r+0x1cd0>
80201ce0:	42000204 	addi	r8,r8,8
80201ce4:	8001f716 	blt	r16,zero,802024c4 <___vfprintf_internal_r+0x1cc8>
80201ce8:	1421c83a 	sub	r16,r2,r16
80201cec:	043d380e 	bge	zero,r16,802011d0 <__reset+0xfa1e11d0>
80201cf0:	04400404 	movi	r17,16
80201cf4:	d8801f17 	ldw	r2,124(sp)
80201cf8:	8c3efb0e 	bge	r17,r16,802018e8 <__reset+0xfa1e18e8>
80201cfc:	01600874 	movhi	r5,32801
80201d00:	29466384 	addi	r5,r5,6542
80201d04:	d9402b15 	stw	r5,172(sp)
80201d08:	058001c4 	movi	r22,7
80201d0c:	dcc02c17 	ldw	r19,176(sp)
80201d10:	00000306 	br	80201d20 <___vfprintf_internal_r+0x1524>
80201d14:	42000204 	addi	r8,r8,8
80201d18:	843ffc04 	addi	r16,r16,-16
80201d1c:	8c3ef50e 	bge	r17,r16,802018f4 <__reset+0xfa1e18f4>
80201d20:	18c00404 	addi	r3,r3,16
80201d24:	10800044 	addi	r2,r2,1
80201d28:	45000015 	stw	r20,0(r8)
80201d2c:	44400115 	stw	r17,4(r8)
80201d30:	d8c02015 	stw	r3,128(sp)
80201d34:	d8801f15 	stw	r2,124(sp)
80201d38:	b0bff60e 	bge	r22,r2,80201d14 <__reset+0xfa1e1d14>
80201d3c:	d9801e04 	addi	r6,sp,120
80201d40:	b80b883a 	mov	r5,r23
80201d44:	9809883a 	mov	r4,r19
80201d48:	0207cb00 	call	80207cb0 <__sprint_r>
80201d4c:	103bad1e 	bne	r2,zero,80200c04 <__reset+0xfa1e0c04>
80201d50:	d8c02017 	ldw	r3,128(sp)
80201d54:	d8801f17 	ldw	r2,124(sp)
80201d58:	da000404 	addi	r8,sp,16
80201d5c:	003fee06 	br	80201d18 <__reset+0xfa1e1d18>
80201d60:	9088703a 	and	r4,r18,r2
80201d64:	203eab1e 	bne	r4,zero,80201814 <__reset+0xfa1e1814>
80201d68:	dc401f17 	ldw	r17,124(sp)
80201d6c:	40800115 	stw	r2,4(r8)
80201d70:	44000015 	stw	r16,0(r8)
80201d74:	8c400044 	addi	r17,r17,1
80201d78:	d8c02015 	stw	r3,128(sp)
80201d7c:	dc401f15 	stw	r17,124(sp)
80201d80:	008001c4 	movi	r2,7
80201d84:	14400e16 	blt	r2,r17,80201dc0 <___vfprintf_internal_r+0x15c4>
80201d88:	45800204 	addi	r22,r8,8
80201d8c:	003eca06 	br	802018b8 <__reset+0xfa1e18b8>
80201d90:	01200874 	movhi	r4,32801
80201d94:	21066384 	addi	r4,r4,6542
80201d98:	d9002b15 	stw	r4,172(sp)
80201d9c:	d8802b17 	ldw	r2,172(sp)
80201da0:	1c07883a 	add	r3,r3,r16
80201da4:	8c400044 	addi	r17,r17,1
80201da8:	b0800015 	stw	r2,0(r22)
80201dac:	b4000115 	stw	r16,4(r22)
80201db0:	d8c02015 	stw	r3,128(sp)
80201db4:	dc401f15 	stw	r17,124(sp)
80201db8:	008001c4 	movi	r2,7
80201dbc:	147ebd0e 	bge	r2,r17,802018b4 <__reset+0xfa1e18b4>
80201dc0:	d9002c17 	ldw	r4,176(sp)
80201dc4:	d9801e04 	addi	r6,sp,120
80201dc8:	b80b883a 	mov	r5,r23
80201dcc:	0207cb00 	call	80207cb0 <__sprint_r>
80201dd0:	103b8c1e 	bne	r2,zero,80200c04 <__reset+0xfa1e0c04>
80201dd4:	d8c02017 	ldw	r3,128(sp)
80201dd8:	dc401f17 	ldw	r17,124(sp)
80201ddc:	dd800404 	addi	r22,sp,16
80201de0:	003eb506 	br	802018b8 <__reset+0xfa1e18b8>
80201de4:	d9002c17 	ldw	r4,176(sp)
80201de8:	d9801e04 	addi	r6,sp,120
80201dec:	b80b883a 	mov	r5,r23
80201df0:	0207cb00 	call	80207cb0 <__sprint_r>
80201df4:	103b831e 	bne	r2,zero,80200c04 <__reset+0xfa1e0c04>
80201df8:	d8c02017 	ldw	r3,128(sp)
80201dfc:	dc401f17 	ldw	r17,124(sp)
80201e00:	da000404 	addi	r8,sp,16
80201e04:	003e8d06 	br	8020183c <__reset+0xfa1e183c>
80201e08:	d9002c17 	ldw	r4,176(sp)
80201e0c:	d9801e04 	addi	r6,sp,120
80201e10:	b80b883a 	mov	r5,r23
80201e14:	0207cb00 	call	80207cb0 <__sprint_r>
80201e18:	103b7a1e 	bne	r2,zero,80200c04 <__reset+0xfa1e0c04>
80201e1c:	d8c02017 	ldw	r3,128(sp)
80201e20:	dc401f17 	ldw	r17,124(sp)
80201e24:	dd800404 	addi	r22,sp,16
80201e28:	003e8f06 	br	80201868 <__reset+0xfa1e1868>
80201e2c:	0027883a 	mov	r19,zero
80201e30:	003f4a06 	br	80201b5c <__reset+0xfa1e1b5c>
80201e34:	d9002c17 	ldw	r4,176(sp)
80201e38:	d9801e04 	addi	r6,sp,120
80201e3c:	b80b883a 	mov	r5,r23
80201e40:	0207cb00 	call	80207cb0 <__sprint_r>
80201e44:	103b6f1e 	bne	r2,zero,80200c04 <__reset+0xfa1e0c04>
80201e48:	d8c02017 	ldw	r3,128(sp)
80201e4c:	da000404 	addi	r8,sp,16
80201e50:	003c9d06 	br	802010c8 <__reset+0xfa1e10c8>
80201e54:	04e7c83a 	sub	r19,zero,r19
80201e58:	9804c03a 	cmpne	r2,r19,zero
80201e5c:	05adc83a 	sub	r22,zero,r22
80201e60:	b0adc83a 	sub	r22,r22,r2
80201e64:	d8802917 	ldw	r2,164(sp)
80201e68:	07000b44 	movi	fp,45
80201e6c:	df002785 	stb	fp,158(sp)
80201e70:	10017b16 	blt	r2,zero,80202460 <___vfprintf_internal_r+0x1c64>
80201e74:	00bfdfc4 	movi	r2,-129
80201e78:	90a4703a 	and	r18,r18,r2
80201e7c:	003bb106 	br	80200d44 <__reset+0xfa1e0d44>
80201e80:	d9003617 	ldw	r4,216(sp)
80201e84:	d9403817 	ldw	r5,224(sp)
80201e88:	da003d15 	stw	r8,244(sp)
80201e8c:	02078d40 	call	802078d4 <__fpclassifyd>
80201e90:	da003d17 	ldw	r8,244(sp)
80201e94:	1000f026 	beq	r2,zero,80202258 <___vfprintf_internal_r+0x1a5c>
80201e98:	d9002917 	ldw	r4,164(sp)
80201e9c:	05bff7c4 	movi	r22,-33
80201ea0:	00bfffc4 	movi	r2,-1
80201ea4:	8dac703a 	and	r22,r17,r22
80201ea8:	20820026 	beq	r4,r2,802026ac <___vfprintf_internal_r+0x1eb0>
80201eac:	008011c4 	movi	r2,71
80201eb0:	b081f726 	beq	r22,r2,80202690 <___vfprintf_internal_r+0x1e94>
80201eb4:	d9003817 	ldw	r4,224(sp)
80201eb8:	90c04014 	ori	r3,r18,256
80201ebc:	d8c02b15 	stw	r3,172(sp)
80201ec0:	20021516 	blt	r4,zero,80202718 <___vfprintf_internal_r+0x1f1c>
80201ec4:	dcc03817 	ldw	r19,224(sp)
80201ec8:	d8002a05 	stb	zero,168(sp)
80201ecc:	00801984 	movi	r2,102
80201ed0:	8881f926 	beq	r17,r2,802026b8 <___vfprintf_internal_r+0x1ebc>
80201ed4:	00801184 	movi	r2,70
80201ed8:	88821c26 	beq	r17,r2,8020274c <___vfprintf_internal_r+0x1f50>
80201edc:	00801144 	movi	r2,69
80201ee0:	b081ef26 	beq	r22,r2,802026a0 <___vfprintf_internal_r+0x1ea4>
80201ee4:	d8c02917 	ldw	r3,164(sp)
80201ee8:	d8802104 	addi	r2,sp,132
80201eec:	d8800315 	stw	r2,12(sp)
80201ef0:	d9403617 	ldw	r5,216(sp)
80201ef4:	d8802504 	addi	r2,sp,148
80201ef8:	d9002c17 	ldw	r4,176(sp)
80201efc:	d8800215 	stw	r2,8(sp)
80201f00:	d8802604 	addi	r2,sp,152
80201f04:	d8c00015 	stw	r3,0(sp)
80201f08:	d8800115 	stw	r2,4(sp)
80201f0c:	01c00084 	movi	r7,2
80201f10:	980d883a 	mov	r6,r19
80201f14:	d8c03c15 	stw	r3,240(sp)
80201f18:	da003d15 	stw	r8,244(sp)
80201f1c:	0202e200 	call	80202e20 <_dtoa_r>
80201f20:	1021883a 	mov	r16,r2
80201f24:	008019c4 	movi	r2,103
80201f28:	d8c03c17 	ldw	r3,240(sp)
80201f2c:	da003d17 	ldw	r8,244(sp)
80201f30:	88817126 	beq	r17,r2,802024f8 <___vfprintf_internal_r+0x1cfc>
80201f34:	008011c4 	movi	r2,71
80201f38:	88829226 	beq	r17,r2,80202984 <___vfprintf_internal_r+0x2188>
80201f3c:	80f9883a 	add	fp,r16,r3
80201f40:	d9003617 	ldw	r4,216(sp)
80201f44:	000d883a 	mov	r6,zero
80201f48:	000f883a 	mov	r7,zero
80201f4c:	980b883a 	mov	r5,r19
80201f50:	da003d15 	stw	r8,244(sp)
80201f54:	020b9280 	call	8020b928 <__eqdf2>
80201f58:	da003d17 	ldw	r8,244(sp)
80201f5c:	10018d26 	beq	r2,zero,80202594 <___vfprintf_internal_r+0x1d98>
80201f60:	d8802117 	ldw	r2,132(sp)
80201f64:	1700062e 	bgeu	r2,fp,80201f80 <___vfprintf_internal_r+0x1784>
80201f68:	01000c04 	movi	r4,48
80201f6c:	10c00044 	addi	r3,r2,1
80201f70:	d8c02115 	stw	r3,132(sp)
80201f74:	11000005 	stb	r4,0(r2)
80201f78:	d8802117 	ldw	r2,132(sp)
80201f7c:	173ffb36 	bltu	r2,fp,80201f6c <__reset+0xfa1e1f6c>
80201f80:	1405c83a 	sub	r2,r2,r16
80201f84:	d8803315 	stw	r2,204(sp)
80201f88:	008011c4 	movi	r2,71
80201f8c:	b0817626 	beq	r22,r2,80202568 <___vfprintf_internal_r+0x1d6c>
80201f90:	00801944 	movi	r2,101
80201f94:	1442810e 	bge	r2,r17,8020299c <___vfprintf_internal_r+0x21a0>
80201f98:	d8c02617 	ldw	r3,152(sp)
80201f9c:	00801984 	movi	r2,102
80201fa0:	d8c03215 	stw	r3,200(sp)
80201fa4:	8881fe26 	beq	r17,r2,802027a0 <___vfprintf_internal_r+0x1fa4>
80201fa8:	d8c03217 	ldw	r3,200(sp)
80201fac:	d9003317 	ldw	r4,204(sp)
80201fb0:	1901dd16 	blt	r3,r4,80202728 <___vfprintf_internal_r+0x1f2c>
80201fb4:	9480004c 	andi	r18,r18,1
80201fb8:	90022b1e 	bne	r18,zero,80202868 <___vfprintf_internal_r+0x206c>
80201fbc:	1805883a 	mov	r2,r3
80201fc0:	18028016 	blt	r3,zero,802029c4 <___vfprintf_internal_r+0x21c8>
80201fc4:	d8c03217 	ldw	r3,200(sp)
80201fc8:	044019c4 	movi	r17,103
80201fcc:	d8c02e15 	stw	r3,184(sp)
80201fd0:	df002a07 	ldb	fp,168(sp)
80201fd4:	e001531e 	bne	fp,zero,80202524 <___vfprintf_internal_r+0x1d28>
80201fd8:	df002783 	ldbu	fp,158(sp)
80201fdc:	d8802a15 	stw	r2,168(sp)
80201fe0:	dc802b17 	ldw	r18,172(sp)
80201fe4:	d8002915 	stw	zero,164(sp)
80201fe8:	003bd106 	br	80200f30 <__reset+0xfa1e0f30>
80201fec:	d8802d17 	ldw	r2,180(sp)
80201ff0:	d8c02d17 	ldw	r3,180(sp)
80201ff4:	d9002d17 	ldw	r4,180(sp)
80201ff8:	10800017 	ldw	r2,0(r2)
80201ffc:	18c00117 	ldw	r3,4(r3)
80202000:	21000204 	addi	r4,r4,8
80202004:	d8803615 	stw	r2,216(sp)
80202008:	d8c03815 	stw	r3,224(sp)
8020200c:	d9002d15 	stw	r4,180(sp)
80202010:	003b7506 	br	80200de8 <__reset+0xfa1e0de8>
80202014:	ac400007 	ldb	r17,0(r21)
80202018:	003a5906 	br	80200980 <__reset+0xfa1e0980>
8020201c:	9080100c 	andi	r2,r18,64
80202020:	1000a826 	beq	r2,zero,802022c4 <___vfprintf_internal_r+0x1ac8>
80202024:	d9002d17 	ldw	r4,180(sp)
80202028:	002d883a 	mov	r22,zero
8020202c:	24c0000b 	ldhu	r19,0(r4)
80202030:	21000104 	addi	r4,r4,4
80202034:	d9002d15 	stw	r4,180(sp)
80202038:	003ccb06 	br	80201368 <__reset+0xfa1e1368>
8020203c:	d8c02d17 	ldw	r3,180(sp)
80202040:	d9002917 	ldw	r4,164(sp)
80202044:	002d883a 	mov	r22,zero
80202048:	18800104 	addi	r2,r3,4
8020204c:	1cc00017 	ldw	r19,0(r3)
80202050:	203ebb0e 	bge	r4,zero,80201b40 <__reset+0xfa1e1b40>
80202054:	003ef106 	br	80201c1c <__reset+0xfa1e1c1c>
80202058:	9080040c 	andi	r2,r18,16
8020205c:	1000921e 	bne	r2,zero,802022a8 <___vfprintf_internal_r+0x1aac>
80202060:	9480100c 	andi	r18,r18,64
80202064:	90013926 	beq	r18,zero,8020254c <___vfprintf_internal_r+0x1d50>
80202068:	d9002d17 	ldw	r4,180(sp)
8020206c:	d9402f17 	ldw	r5,188(sp)
80202070:	20800017 	ldw	r2,0(r4)
80202074:	21000104 	addi	r4,r4,4
80202078:	d9002d15 	stw	r4,180(sp)
8020207c:	1140000d 	sth	r5,0(r2)
80202080:	003a1606 	br	802008dc <__reset+0xfa1e08dc>
80202084:	9080100c 	andi	r2,r18,64
80202088:	10008026 	beq	r2,zero,8020228c <___vfprintf_internal_r+0x1a90>
8020208c:	d8c02d17 	ldw	r3,180(sp)
80202090:	1cc0000f 	ldh	r19,0(r3)
80202094:	18c00104 	addi	r3,r3,4
80202098:	d8c02d15 	stw	r3,180(sp)
8020209c:	982dd7fa 	srai	r22,r19,31
802020a0:	b005883a 	mov	r2,r22
802020a4:	003b1f06 	br	80200d24 <__reset+0xfa1e0d24>
802020a8:	9080100c 	andi	r2,r18,64
802020ac:	d8002785 	stb	zero,158(sp)
802020b0:	10008a1e 	bne	r2,zero,802022dc <___vfprintf_internal_r+0x1ae0>
802020b4:	d9402d17 	ldw	r5,180(sp)
802020b8:	d8c02917 	ldw	r3,164(sp)
802020bc:	002d883a 	mov	r22,zero
802020c0:	28800104 	addi	r2,r5,4
802020c4:	2cc00017 	ldw	r19,0(r5)
802020c8:	183e4b0e 	bge	r3,zero,802019f8 <__reset+0xfa1e19f8>
802020cc:	9d86b03a 	or	r3,r19,r22
802020d0:	d8802d15 	stw	r2,180(sp)
802020d4:	183e4c1e 	bne	r3,zero,80201a08 <__reset+0xfa1e1a08>
802020d8:	0039883a 	mov	fp,zero
802020dc:	0005883a 	mov	r2,zero
802020e0:	003d4006 	br	802015e4 <__reset+0xfa1e15e4>
802020e4:	01600874 	movhi	r5,32801
802020e8:	29466384 	addi	r5,r5,6542
802020ec:	d9402b15 	stw	r5,172(sp)
802020f0:	d9402b17 	ldw	r5,172(sp)
802020f4:	1c47883a 	add	r3,r3,r17
802020f8:	10800044 	addi	r2,r2,1
802020fc:	41400015 	stw	r5,0(r8)
80202100:	44400115 	stw	r17,4(r8)
80202104:	d8c02015 	stw	r3,128(sp)
80202108:	d8801f15 	stw	r2,124(sp)
8020210c:	010001c4 	movi	r4,7
80202110:	20bec816 	blt	r4,r2,80201c34 <__reset+0xfa1e1c34>
80202114:	42000204 	addi	r8,r8,8
80202118:	003ecd06 	br	80201c50 <__reset+0xfa1e1c50>
8020211c:	d9002917 	ldw	r4,164(sp)
80202120:	d8002785 	stb	zero,158(sp)
80202124:	203d2d16 	blt	r4,zero,802015dc <__reset+0xfa1e15dc>
80202128:	00bfdfc4 	movi	r2,-129
8020212c:	90a4703a 	and	r18,r18,r2
80202130:	003a9106 	br	80200b78 <__reset+0xfa1e0b78>
80202134:	01200874 	movhi	r4,32801
80202138:	21066384 	addi	r4,r4,6542
8020213c:	d9002b15 	stw	r4,172(sp)
80202140:	003c0c06 	br	80201174 <__reset+0xfa1e1174>
80202144:	d9002c17 	ldw	r4,176(sp)
80202148:	d9801e04 	addi	r6,sp,120
8020214c:	b80b883a 	mov	r5,r23
80202150:	0207cb00 	call	80207cb0 <__sprint_r>
80202154:	103aab1e 	bne	r2,zero,80200c04 <__reset+0xfa1e0c04>
80202158:	d8c02017 	ldw	r3,128(sp)
8020215c:	da000404 	addi	r8,sp,16
80202160:	003d4106 	br	80201668 <__reset+0xfa1e1668>
80202164:	d8801f17 	ldw	r2,124(sp)
80202168:	01600874 	movhi	r5,32801
8020216c:	01000044 	movi	r4,1
80202170:	18c00044 	addi	r3,r3,1
80202174:	10800044 	addi	r2,r2,1
80202178:	29466304 	addi	r5,r5,6540
8020217c:	41000115 	stw	r4,4(r8)
80202180:	41400015 	stw	r5,0(r8)
80202184:	d8c02015 	stw	r3,128(sp)
80202188:	d8801f15 	stw	r2,124(sp)
8020218c:	010001c4 	movi	r4,7
80202190:	20805c16 	blt	r4,r2,80202304 <___vfprintf_internal_r+0x1b08>
80202194:	42000204 	addi	r8,r8,8
80202198:	8800041e 	bne	r17,zero,802021ac <___vfprintf_internal_r+0x19b0>
8020219c:	d8803317 	ldw	r2,204(sp)
802021a0:	1000021e 	bne	r2,zero,802021ac <___vfprintf_internal_r+0x19b0>
802021a4:	9080004c 	andi	r2,r18,1
802021a8:	103c0926 	beq	r2,zero,802011d0 <__reset+0xfa1e11d0>
802021ac:	d9003717 	ldw	r4,220(sp)
802021b0:	d8801f17 	ldw	r2,124(sp)
802021b4:	d9403417 	ldw	r5,208(sp)
802021b8:	20c7883a 	add	r3,r4,r3
802021bc:	10800044 	addi	r2,r2,1
802021c0:	41000115 	stw	r4,4(r8)
802021c4:	41400015 	stw	r5,0(r8)
802021c8:	d8c02015 	stw	r3,128(sp)
802021cc:	d8801f15 	stw	r2,124(sp)
802021d0:	010001c4 	movi	r4,7
802021d4:	20812116 	blt	r4,r2,8020265c <___vfprintf_internal_r+0x1e60>
802021d8:	42000204 	addi	r8,r8,8
802021dc:	0463c83a 	sub	r17,zero,r17
802021e0:	0440730e 	bge	zero,r17,802023b0 <___vfprintf_internal_r+0x1bb4>
802021e4:	05800404 	movi	r22,16
802021e8:	b440860e 	bge	r22,r17,80202404 <___vfprintf_internal_r+0x1c08>
802021ec:	01600874 	movhi	r5,32801
802021f0:	29466384 	addi	r5,r5,6542
802021f4:	d9402b15 	stw	r5,172(sp)
802021f8:	070001c4 	movi	fp,7
802021fc:	dcc02c17 	ldw	r19,176(sp)
80202200:	00000306 	br	80202210 <___vfprintf_internal_r+0x1a14>
80202204:	42000204 	addi	r8,r8,8
80202208:	8c7ffc04 	addi	r17,r17,-16
8020220c:	b440800e 	bge	r22,r17,80202410 <___vfprintf_internal_r+0x1c14>
80202210:	18c00404 	addi	r3,r3,16
80202214:	10800044 	addi	r2,r2,1
80202218:	45000015 	stw	r20,0(r8)
8020221c:	45800115 	stw	r22,4(r8)
80202220:	d8c02015 	stw	r3,128(sp)
80202224:	d8801f15 	stw	r2,124(sp)
80202228:	e0bff60e 	bge	fp,r2,80202204 <__reset+0xfa1e2204>
8020222c:	d9801e04 	addi	r6,sp,120
80202230:	b80b883a 	mov	r5,r23
80202234:	9809883a 	mov	r4,r19
80202238:	0207cb00 	call	80207cb0 <__sprint_r>
8020223c:	103a711e 	bne	r2,zero,80200c04 <__reset+0xfa1e0c04>
80202240:	d8c02017 	ldw	r3,128(sp)
80202244:	d8801f17 	ldw	r2,124(sp)
80202248:	da000404 	addi	r8,sp,16
8020224c:	003fee06 	br	80202208 <__reset+0xfa1e2208>
80202250:	00bfffc4 	movi	r2,-1
80202254:	003a6f06 	br	80200c14 <__reset+0xfa1e0c14>
80202258:	008011c4 	movi	r2,71
8020225c:	1440b816 	blt	r2,r17,80202540 <___vfprintf_internal_r+0x1d44>
80202260:	04200874 	movhi	r16,32801
80202264:	84065504 	addi	r16,r16,6484
80202268:	00c000c4 	movi	r3,3
8020226c:	00bfdfc4 	movi	r2,-129
80202270:	d8c02a15 	stw	r3,168(sp)
80202274:	90a4703a 	and	r18,r18,r2
80202278:	df002783 	ldbu	fp,158(sp)
8020227c:	d8c02e15 	stw	r3,184(sp)
80202280:	d8002915 	stw	zero,164(sp)
80202284:	d8003215 	stw	zero,200(sp)
80202288:	003b2906 	br	80200f30 <__reset+0xfa1e0f30>
8020228c:	d9002d17 	ldw	r4,180(sp)
80202290:	24c00017 	ldw	r19,0(r4)
80202294:	21000104 	addi	r4,r4,4
80202298:	d9002d15 	stw	r4,180(sp)
8020229c:	982dd7fa 	srai	r22,r19,31
802022a0:	b005883a 	mov	r2,r22
802022a4:	003a9f06 	br	80200d24 <__reset+0xfa1e0d24>
802022a8:	d9402d17 	ldw	r5,180(sp)
802022ac:	d8c02f17 	ldw	r3,188(sp)
802022b0:	28800017 	ldw	r2,0(r5)
802022b4:	29400104 	addi	r5,r5,4
802022b8:	d9402d15 	stw	r5,180(sp)
802022bc:	10c00015 	stw	r3,0(r2)
802022c0:	00398606 	br	802008dc <__reset+0xfa1e08dc>
802022c4:	d9402d17 	ldw	r5,180(sp)
802022c8:	002d883a 	mov	r22,zero
802022cc:	2cc00017 	ldw	r19,0(r5)
802022d0:	29400104 	addi	r5,r5,4
802022d4:	d9402d15 	stw	r5,180(sp)
802022d8:	003c2306 	br	80201368 <__reset+0xfa1e1368>
802022dc:	d8c02d17 	ldw	r3,180(sp)
802022e0:	d9002917 	ldw	r4,164(sp)
802022e4:	002d883a 	mov	r22,zero
802022e8:	18800104 	addi	r2,r3,4
802022ec:	1cc0000b 	ldhu	r19,0(r3)
802022f0:	203dc10e 	bge	r4,zero,802019f8 <__reset+0xfa1e19f8>
802022f4:	003f7506 	br	802020cc <__reset+0xfa1e20cc>
802022f8:	04200874 	movhi	r16,32801
802022fc:	84065304 	addi	r16,r16,6476
80202300:	003acc06 	br	80200e34 <__reset+0xfa1e0e34>
80202304:	d9002c17 	ldw	r4,176(sp)
80202308:	d9801e04 	addi	r6,sp,120
8020230c:	b80b883a 	mov	r5,r23
80202310:	0207cb00 	call	80207cb0 <__sprint_r>
80202314:	103a3b1e 	bne	r2,zero,80200c04 <__reset+0xfa1e0c04>
80202318:	dc402617 	ldw	r17,152(sp)
8020231c:	d8c02017 	ldw	r3,128(sp)
80202320:	da000404 	addi	r8,sp,16
80202324:	003f9c06 	br	80202198 <__reset+0xfa1e2198>
80202328:	ac400043 	ldbu	r17,1(r21)
8020232c:	94800814 	ori	r18,r18,32
80202330:	ad400044 	addi	r21,r21,1
80202334:	8c403fcc 	andi	r17,r17,255
80202338:	8c40201c 	xori	r17,r17,128
8020233c:	8c7fe004 	addi	r17,r17,-128
80202340:	00398f06 	br	80200980 <__reset+0xfa1e0980>
80202344:	d8c02d15 	stw	r3,180(sp)
80202348:	0039883a 	mov	fp,zero
8020234c:	003e3506 	br	80201c24 <__reset+0xfa1e1c24>
80202350:	d9002c17 	ldw	r4,176(sp)
80202354:	d9801e04 	addi	r6,sp,120
80202358:	b80b883a 	mov	r5,r23
8020235c:	0207cb00 	call	80207cb0 <__sprint_r>
80202360:	103a281e 	bne	r2,zero,80200c04 <__reset+0xfa1e0c04>
80202364:	d8c02017 	ldw	r3,128(sp)
80202368:	da000404 	addi	r8,sp,16
8020236c:	003cd006 	br	802016b0 <__reset+0xfa1e16b0>
80202370:	8009883a 	mov	r4,r16
80202374:	da003d15 	stw	r8,244(sp)
80202378:	02007640 	call	80200764 <strlen>
8020237c:	d8802e15 	stw	r2,184(sp)
80202380:	da003d17 	ldw	r8,244(sp)
80202384:	103c340e 	bge	r2,zero,80201458 <__reset+0xfa1e1458>
80202388:	0005883a 	mov	r2,zero
8020238c:	003c3206 	br	80201458 <__reset+0xfa1e1458>
80202390:	d9002c17 	ldw	r4,176(sp)
80202394:	d9801e04 	addi	r6,sp,120
80202398:	b80b883a 	mov	r5,r23
8020239c:	0207cb00 	call	80207cb0 <__sprint_r>
802023a0:	103a181e 	bne	r2,zero,80200c04 <__reset+0xfa1e0c04>
802023a4:	d8c02017 	ldw	r3,128(sp)
802023a8:	d8801f17 	ldw	r2,124(sp)
802023ac:	da000404 	addi	r8,sp,16
802023b0:	d9403317 	ldw	r5,204(sp)
802023b4:	10800044 	addi	r2,r2,1
802023b8:	44000015 	stw	r16,0(r8)
802023bc:	28c7883a 	add	r3,r5,r3
802023c0:	003b7d06 	br	802011b8 <__reset+0xfa1e11b8>
802023c4:	01200874 	movhi	r4,32801
802023c8:	21066784 	addi	r4,r4,6558
802023cc:	d9003515 	stw	r4,212(sp)
802023d0:	003b1406 	br	80201024 <__reset+0xfa1e1024>
802023d4:	013fffc4 	movi	r4,-1
802023d8:	003a3506 	br	80200cb0 <__reset+0xfa1e0cb0>
802023dc:	0023883a 	mov	r17,zero
802023e0:	003d9d06 	br	80201a58 <__reset+0xfa1e1a58>
802023e4:	d9002c17 	ldw	r4,176(sp)
802023e8:	d9801e04 	addi	r6,sp,120
802023ec:	b80b883a 	mov	r5,r23
802023f0:	0207cb00 	call	80207cb0 <__sprint_r>
802023f4:	103a031e 	bne	r2,zero,80200c04 <__reset+0xfa1e0c04>
802023f8:	d8c02017 	ldw	r3,128(sp)
802023fc:	da000404 	addi	r8,sp,16
80202400:	003d9406 	br	80201a54 <__reset+0xfa1e1a54>
80202404:	01200874 	movhi	r4,32801
80202408:	21066384 	addi	r4,r4,6542
8020240c:	d9002b15 	stw	r4,172(sp)
80202410:	d9002b17 	ldw	r4,172(sp)
80202414:	1c47883a 	add	r3,r3,r17
80202418:	10800044 	addi	r2,r2,1
8020241c:	41000015 	stw	r4,0(r8)
80202420:	44400115 	stw	r17,4(r8)
80202424:	d8c02015 	stw	r3,128(sp)
80202428:	d8801f15 	stw	r2,124(sp)
8020242c:	010001c4 	movi	r4,7
80202430:	20bfd716 	blt	r4,r2,80202390 <__reset+0xfa1e2390>
80202434:	42000204 	addi	r8,r8,8
80202438:	003fdd06 	br	802023b0 <__reset+0xfa1e23b0>
8020243c:	d9002c17 	ldw	r4,176(sp)
80202440:	d9801e04 	addi	r6,sp,120
80202444:	b80b883a 	mov	r5,r23
80202448:	0207cb00 	call	80207cb0 <__sprint_r>
8020244c:	1039ed1e 	bne	r2,zero,80200c04 <__reset+0xfa1e0c04>
80202450:	d8802617 	ldw	r2,152(sp)
80202454:	d8c02017 	ldw	r3,128(sp)
80202458:	da000404 	addi	r8,sp,16
8020245c:	003e1006 	br	80201ca0 <__reset+0xfa1e1ca0>
80202460:	00800044 	movi	r2,1
80202464:	10803fcc 	andi	r2,r2,255
80202468:	00c00044 	movi	r3,1
8020246c:	10fa3526 	beq	r2,r3,80200d44 <__reset+0xfa1e0d44>
80202470:	00c00084 	movi	r3,2
80202474:	10fbcb26 	beq	r2,r3,802013a4 <__reset+0xfa1e13a4>
80202478:	003a8f06 	br	80200eb8 <__reset+0xfa1e0eb8>
8020247c:	01200874 	movhi	r4,32801
80202480:	21066784 	addi	r4,r4,6558
80202484:	d9003515 	stw	r4,212(sp)
80202488:	003b7606 	br	80201264 <__reset+0xfa1e1264>
8020248c:	d8802917 	ldw	r2,164(sp)
80202490:	00c00184 	movi	r3,6
80202494:	1880012e 	bgeu	r3,r2,8020249c <___vfprintf_internal_r+0x1ca0>
80202498:	1805883a 	mov	r2,r3
8020249c:	d8802e15 	stw	r2,184(sp)
802024a0:	1000ef16 	blt	r2,zero,80202860 <___vfprintf_internal_r+0x2064>
802024a4:	04200874 	movhi	r16,32801
802024a8:	d8802a15 	stw	r2,168(sp)
802024ac:	dcc02d15 	stw	r19,180(sp)
802024b0:	d8002915 	stw	zero,164(sp)
802024b4:	d8003215 	stw	zero,200(sp)
802024b8:	84066104 	addi	r16,r16,6532
802024bc:	0039883a 	mov	fp,zero
802024c0:	003aa206 	br	80200f4c <__reset+0xfa1e0f4c>
802024c4:	0021883a 	mov	r16,zero
802024c8:	003e0706 	br	80201ce8 <__reset+0xfa1e1ce8>
802024cc:	d9002c17 	ldw	r4,176(sp)
802024d0:	d9801e04 	addi	r6,sp,120
802024d4:	b80b883a 	mov	r5,r23
802024d8:	0207cb00 	call	80207cb0 <__sprint_r>
802024dc:	1039c91e 	bne	r2,zero,80200c04 <__reset+0xfa1e0c04>
802024e0:	d8802617 	ldw	r2,152(sp)
802024e4:	d9403317 	ldw	r5,204(sp)
802024e8:	d8c02017 	ldw	r3,128(sp)
802024ec:	da000404 	addi	r8,sp,16
802024f0:	2885c83a 	sub	r2,r5,r2
802024f4:	003dfb06 	br	80201ce4 <__reset+0xfa1e1ce4>
802024f8:	9080004c 	andi	r2,r18,1
802024fc:	103e8f1e 	bne	r2,zero,80201f3c <__reset+0xfa1e1f3c>
80202500:	d8802117 	ldw	r2,132(sp)
80202504:	003e9e06 	br	80201f80 <__reset+0xfa1e1f80>
80202508:	1025883a 	mov	r18,r2
8020250c:	0039883a 	mov	fp,zero
80202510:	00800084 	movi	r2,2
80202514:	003fd306 	br	80202464 <__reset+0xfa1e2464>
80202518:	07000b44 	movi	fp,45
8020251c:	df002785 	stb	fp,158(sp)
80202520:	003a4006 	br	80200e24 <__reset+0xfa1e0e24>
80202524:	00c00b44 	movi	r3,45
80202528:	d8c02785 	stb	r3,158(sp)
8020252c:	d8802a15 	stw	r2,168(sp)
80202530:	dc802b17 	ldw	r18,172(sp)
80202534:	d8002915 	stw	zero,164(sp)
80202538:	07000b44 	movi	fp,45
8020253c:	003a8006 	br	80200f40 <__reset+0xfa1e0f40>
80202540:	04200874 	movhi	r16,32801
80202544:	84065604 	addi	r16,r16,6488
80202548:	003f4706 	br	80202268 <__reset+0xfa1e2268>
8020254c:	d8c02d17 	ldw	r3,180(sp)
80202550:	d9002f17 	ldw	r4,188(sp)
80202554:	18800017 	ldw	r2,0(r3)
80202558:	18c00104 	addi	r3,r3,4
8020255c:	d8c02d15 	stw	r3,180(sp)
80202560:	11000015 	stw	r4,0(r2)
80202564:	0038dd06 	br	802008dc <__reset+0xfa1e08dc>
80202568:	dd802617 	ldw	r22,152(sp)
8020256c:	00bfff44 	movi	r2,-3
80202570:	b0801c16 	blt	r22,r2,802025e4 <___vfprintf_internal_r+0x1de8>
80202574:	d9402917 	ldw	r5,164(sp)
80202578:	2d801a16 	blt	r5,r22,802025e4 <___vfprintf_internal_r+0x1de8>
8020257c:	dd803215 	stw	r22,200(sp)
80202580:	003e8906 	br	80201fa8 <__reset+0xfa1e1fa8>
80202584:	01200874 	movhi	r4,32801
80202588:	21066384 	addi	r4,r4,6542
8020258c:	d9002b15 	stw	r4,172(sp)
80202590:	003c9106 	br	802017d8 <__reset+0xfa1e17d8>
80202594:	e005883a 	mov	r2,fp
80202598:	003e7906 	br	80201f80 <__reset+0xfa1e1f80>
8020259c:	d9402917 	ldw	r5,164(sp)
802025a0:	df002783 	ldbu	fp,158(sp)
802025a4:	dcc02d15 	stw	r19,180(sp)
802025a8:	d9402a15 	stw	r5,168(sp)
802025ac:	d9402e15 	stw	r5,184(sp)
802025b0:	d8002915 	stw	zero,164(sp)
802025b4:	d8003215 	stw	zero,200(sp)
802025b8:	003a5d06 	br	80200f30 <__reset+0xfa1e0f30>
802025bc:	9080004c 	andi	r2,r18,1
802025c0:	0039883a 	mov	fp,zero
802025c4:	10000426 	beq	r2,zero,802025d8 <___vfprintf_internal_r+0x1ddc>
802025c8:	00800c04 	movi	r2,48
802025cc:	dc001dc4 	addi	r16,sp,119
802025d0:	d8801dc5 	stb	r2,119(sp)
802025d4:	003b8006 	br	802013d8 <__reset+0xfa1e13d8>
802025d8:	d8002e15 	stw	zero,184(sp)
802025dc:	dc001e04 	addi	r16,sp,120
802025e0:	003a4d06 	br	80200f18 <__reset+0xfa1e0f18>
802025e4:	8c7fff84 	addi	r17,r17,-2
802025e8:	b5bfffc4 	addi	r22,r22,-1
802025ec:	dd802615 	stw	r22,152(sp)
802025f0:	dc4022c5 	stb	r17,139(sp)
802025f4:	b000bf16 	blt	r22,zero,802028f4 <___vfprintf_internal_r+0x20f8>
802025f8:	00800ac4 	movi	r2,43
802025fc:	d8802305 	stb	r2,140(sp)
80202600:	00800244 	movi	r2,9
80202604:	15807016 	blt	r2,r22,802027c8 <___vfprintf_internal_r+0x1fcc>
80202608:	00800c04 	movi	r2,48
8020260c:	b5800c04 	addi	r22,r22,48
80202610:	d8802345 	stb	r2,141(sp)
80202614:	dd802385 	stb	r22,142(sp)
80202618:	d88023c4 	addi	r2,sp,143
8020261c:	df0022c4 	addi	fp,sp,139
80202620:	d8c03317 	ldw	r3,204(sp)
80202624:	1739c83a 	sub	fp,r2,fp
80202628:	d9003317 	ldw	r4,204(sp)
8020262c:	e0c7883a 	add	r3,fp,r3
80202630:	df003a15 	stw	fp,232(sp)
80202634:	d8c02e15 	stw	r3,184(sp)
80202638:	00800044 	movi	r2,1
8020263c:	1100b30e 	bge	r2,r4,8020290c <___vfprintf_internal_r+0x2110>
80202640:	d8c02e17 	ldw	r3,184(sp)
80202644:	18c00044 	addi	r3,r3,1
80202648:	d8c02e15 	stw	r3,184(sp)
8020264c:	1805883a 	mov	r2,r3
80202650:	1800ac16 	blt	r3,zero,80202904 <___vfprintf_internal_r+0x2108>
80202654:	d8003215 	stw	zero,200(sp)
80202658:	003e5d06 	br	80201fd0 <__reset+0xfa1e1fd0>
8020265c:	d9002c17 	ldw	r4,176(sp)
80202660:	d9801e04 	addi	r6,sp,120
80202664:	b80b883a 	mov	r5,r23
80202668:	0207cb00 	call	80207cb0 <__sprint_r>
8020266c:	1039651e 	bne	r2,zero,80200c04 <__reset+0xfa1e0c04>
80202670:	dc402617 	ldw	r17,152(sp)
80202674:	d8c02017 	ldw	r3,128(sp)
80202678:	d8801f17 	ldw	r2,124(sp)
8020267c:	da000404 	addi	r8,sp,16
80202680:	003ed606 	br	802021dc <__reset+0xfa1e21dc>
80202684:	582b883a 	mov	r21,r11
80202688:	d8002915 	stw	zero,164(sp)
8020268c:	0038bd06 	br	80200984 <__reset+0xfa1e0984>
80202690:	d8802917 	ldw	r2,164(sp)
80202694:	103e071e 	bne	r2,zero,80201eb4 <__reset+0xfa1e1eb4>
80202698:	dc002915 	stw	r16,164(sp)
8020269c:	003e0506 	br	80201eb4 <__reset+0xfa1e1eb4>
802026a0:	d9002917 	ldw	r4,164(sp)
802026a4:	20c00044 	addi	r3,r4,1
802026a8:	003e0f06 	br	80201ee8 <__reset+0xfa1e1ee8>
802026ac:	01400184 	movi	r5,6
802026b0:	d9402915 	stw	r5,164(sp)
802026b4:	003dff06 	br	80201eb4 <__reset+0xfa1e1eb4>
802026b8:	d8802104 	addi	r2,sp,132
802026bc:	d8800315 	stw	r2,12(sp)
802026c0:	d8802504 	addi	r2,sp,148
802026c4:	d8800215 	stw	r2,8(sp)
802026c8:	d8802604 	addi	r2,sp,152
802026cc:	d8800115 	stw	r2,4(sp)
802026d0:	d8802917 	ldw	r2,164(sp)
802026d4:	d9403617 	ldw	r5,216(sp)
802026d8:	d9002c17 	ldw	r4,176(sp)
802026dc:	d8800015 	stw	r2,0(sp)
802026e0:	01c000c4 	movi	r7,3
802026e4:	980d883a 	mov	r6,r19
802026e8:	da003d15 	stw	r8,244(sp)
802026ec:	0202e200 	call	80202e20 <_dtoa_r>
802026f0:	d8c02917 	ldw	r3,164(sp)
802026f4:	da003d17 	ldw	r8,244(sp)
802026f8:	1021883a 	mov	r16,r2
802026fc:	10f9883a 	add	fp,r2,r3
80202700:	81000007 	ldb	r4,0(r16)
80202704:	00800c04 	movi	r2,48
80202708:	20805e26 	beq	r4,r2,80202884 <___vfprintf_internal_r+0x2088>
8020270c:	d8c02617 	ldw	r3,152(sp)
80202710:	e0f9883a 	add	fp,fp,r3
80202714:	003e0a06 	br	80201f40 <__reset+0xfa1e1f40>
80202718:	00c00b44 	movi	r3,45
8020271c:	24e0003c 	xorhi	r19,r4,32768
80202720:	d8c02a05 	stb	r3,168(sp)
80202724:	003de906 	br	80201ecc <__reset+0xfa1e1ecc>
80202728:	d8c03217 	ldw	r3,200(sp)
8020272c:	00c07a0e 	bge	zero,r3,80202918 <___vfprintf_internal_r+0x211c>
80202730:	00800044 	movi	r2,1
80202734:	d9003317 	ldw	r4,204(sp)
80202738:	1105883a 	add	r2,r2,r4
8020273c:	d8802e15 	stw	r2,184(sp)
80202740:	10004e16 	blt	r2,zero,8020287c <___vfprintf_internal_r+0x2080>
80202744:	044019c4 	movi	r17,103
80202748:	003e2106 	br	80201fd0 <__reset+0xfa1e1fd0>
8020274c:	d9002917 	ldw	r4,164(sp)
80202750:	d8802104 	addi	r2,sp,132
80202754:	d8800315 	stw	r2,12(sp)
80202758:	d9000015 	stw	r4,0(sp)
8020275c:	d8802504 	addi	r2,sp,148
80202760:	d9403617 	ldw	r5,216(sp)
80202764:	d9002c17 	ldw	r4,176(sp)
80202768:	d8800215 	stw	r2,8(sp)
8020276c:	d8802604 	addi	r2,sp,152
80202770:	d8800115 	stw	r2,4(sp)
80202774:	01c000c4 	movi	r7,3
80202778:	980d883a 	mov	r6,r19
8020277c:	da003d15 	stw	r8,244(sp)
80202780:	0202e200 	call	80202e20 <_dtoa_r>
80202784:	d8c02917 	ldw	r3,164(sp)
80202788:	da003d17 	ldw	r8,244(sp)
8020278c:	1021883a 	mov	r16,r2
80202790:	00801184 	movi	r2,70
80202794:	80f9883a 	add	fp,r16,r3
80202798:	88bfd926 	beq	r17,r2,80202700 <__reset+0xfa1e2700>
8020279c:	003de806 	br	80201f40 <__reset+0xfa1e1f40>
802027a0:	d9002917 	ldw	r4,164(sp)
802027a4:	00c04d0e 	bge	zero,r3,802028dc <___vfprintf_internal_r+0x20e0>
802027a8:	2000441e 	bne	r4,zero,802028bc <___vfprintf_internal_r+0x20c0>
802027ac:	9480004c 	andi	r18,r18,1
802027b0:	9000421e 	bne	r18,zero,802028bc <___vfprintf_internal_r+0x20c0>
802027b4:	1805883a 	mov	r2,r3
802027b8:	18007016 	blt	r3,zero,8020297c <___vfprintf_internal_r+0x2180>
802027bc:	d8c03217 	ldw	r3,200(sp)
802027c0:	d8c02e15 	stw	r3,184(sp)
802027c4:	003e0206 	br	80201fd0 <__reset+0xfa1e1fd0>
802027c8:	df0022c4 	addi	fp,sp,139
802027cc:	dc002915 	stw	r16,164(sp)
802027d0:	4027883a 	mov	r19,r8
802027d4:	e021883a 	mov	r16,fp
802027d8:	b009883a 	mov	r4,r22
802027dc:	01400284 	movi	r5,10
802027e0:	020a6640 	call	8020a664 <__modsi3>
802027e4:	10800c04 	addi	r2,r2,48
802027e8:	843fffc4 	addi	r16,r16,-1
802027ec:	b009883a 	mov	r4,r22
802027f0:	01400284 	movi	r5,10
802027f4:	80800005 	stb	r2,0(r16)
802027f8:	020a5e00 	call	8020a5e0 <__divsi3>
802027fc:	102d883a 	mov	r22,r2
80202800:	00800244 	movi	r2,9
80202804:	15bff416 	blt	r2,r22,802027d8 <__reset+0xfa1e27d8>
80202808:	9811883a 	mov	r8,r19
8020280c:	b0800c04 	addi	r2,r22,48
80202810:	8027883a 	mov	r19,r16
80202814:	997fffc4 	addi	r5,r19,-1
80202818:	98bfffc5 	stb	r2,-1(r19)
8020281c:	dc002917 	ldw	r16,164(sp)
80202820:	2f006a2e 	bgeu	r5,fp,802029cc <___vfprintf_internal_r+0x21d0>
80202824:	d9c02384 	addi	r7,sp,142
80202828:	3ccfc83a 	sub	r7,r7,r19
8020282c:	d9002344 	addi	r4,sp,141
80202830:	e1cf883a 	add	r7,fp,r7
80202834:	00000106 	br	8020283c <___vfprintf_internal_r+0x2040>
80202838:	28800003 	ldbu	r2,0(r5)
8020283c:	20800005 	stb	r2,0(r4)
80202840:	21000044 	addi	r4,r4,1
80202844:	29400044 	addi	r5,r5,1
80202848:	393ffb1e 	bne	r7,r4,80202838 <__reset+0xfa1e2838>
8020284c:	d8802304 	addi	r2,sp,140
80202850:	14c5c83a 	sub	r2,r2,r19
80202854:	d8c02344 	addi	r3,sp,141
80202858:	1885883a 	add	r2,r3,r2
8020285c:	003f7006 	br	80202620 <__reset+0xfa1e2620>
80202860:	0005883a 	mov	r2,zero
80202864:	003f0f06 	br	802024a4 <__reset+0xfa1e24a4>
80202868:	d8c03217 	ldw	r3,200(sp)
8020286c:	18c00044 	addi	r3,r3,1
80202870:	d8c02e15 	stw	r3,184(sp)
80202874:	1805883a 	mov	r2,r3
80202878:	183fb20e 	bge	r3,zero,80202744 <__reset+0xfa1e2744>
8020287c:	0005883a 	mov	r2,zero
80202880:	003fb006 	br	80202744 <__reset+0xfa1e2744>
80202884:	d9003617 	ldw	r4,216(sp)
80202888:	000d883a 	mov	r6,zero
8020288c:	000f883a 	mov	r7,zero
80202890:	980b883a 	mov	r5,r19
80202894:	d8c03c15 	stw	r3,240(sp)
80202898:	da003d15 	stw	r8,244(sp)
8020289c:	020b9280 	call	8020b928 <__eqdf2>
802028a0:	d8c03c17 	ldw	r3,240(sp)
802028a4:	da003d17 	ldw	r8,244(sp)
802028a8:	103f9826 	beq	r2,zero,8020270c <__reset+0xfa1e270c>
802028ac:	00800044 	movi	r2,1
802028b0:	10c7c83a 	sub	r3,r2,r3
802028b4:	d8c02615 	stw	r3,152(sp)
802028b8:	003f9506 	br	80202710 <__reset+0xfa1e2710>
802028bc:	d9002917 	ldw	r4,164(sp)
802028c0:	d8c03217 	ldw	r3,200(sp)
802028c4:	20800044 	addi	r2,r4,1
802028c8:	1885883a 	add	r2,r3,r2
802028cc:	d8802e15 	stw	r2,184(sp)
802028d0:	103dbf0e 	bge	r2,zero,80201fd0 <__reset+0xfa1e1fd0>
802028d4:	0005883a 	mov	r2,zero
802028d8:	003dbd06 	br	80201fd0 <__reset+0xfa1e1fd0>
802028dc:	2000211e 	bne	r4,zero,80202964 <___vfprintf_internal_r+0x2168>
802028e0:	9480004c 	andi	r18,r18,1
802028e4:	90001f1e 	bne	r18,zero,80202964 <___vfprintf_internal_r+0x2168>
802028e8:	00800044 	movi	r2,1
802028ec:	d8802e15 	stw	r2,184(sp)
802028f0:	003db706 	br	80201fd0 <__reset+0xfa1e1fd0>
802028f4:	00800b44 	movi	r2,45
802028f8:	05adc83a 	sub	r22,zero,r22
802028fc:	d8802305 	stb	r2,140(sp)
80202900:	003f3f06 	br	80202600 <__reset+0xfa1e2600>
80202904:	0005883a 	mov	r2,zero
80202908:	003f5206 	br	80202654 <__reset+0xfa1e2654>
8020290c:	90a4703a 	and	r18,r18,r2
80202910:	903f4e26 	beq	r18,zero,8020264c <__reset+0xfa1e264c>
80202914:	003f4a06 	br	80202640 <__reset+0xfa1e2640>
80202918:	00800084 	movi	r2,2
8020291c:	10c5c83a 	sub	r2,r2,r3
80202920:	003f8406 	br	80202734 <__reset+0xfa1e2734>
80202924:	d8802d17 	ldw	r2,180(sp)
80202928:	d9002d17 	ldw	r4,180(sp)
8020292c:	ac400043 	ldbu	r17,1(r21)
80202930:	10800017 	ldw	r2,0(r2)
80202934:	582b883a 	mov	r21,r11
80202938:	d8802915 	stw	r2,164(sp)
8020293c:	20800104 	addi	r2,r4,4
80202940:	d9002917 	ldw	r4,164(sp)
80202944:	d8802d15 	stw	r2,180(sp)
80202948:	203e7a0e 	bge	r4,zero,80202334 <__reset+0xfa1e2334>
8020294c:	8c403fcc 	andi	r17,r17,255
80202950:	00bfffc4 	movi	r2,-1
80202954:	8c40201c 	xori	r17,r17,128
80202958:	d8802915 	stw	r2,164(sp)
8020295c:	8c7fe004 	addi	r17,r17,-128
80202960:	00380706 	br	80200980 <__reset+0xfa1e0980>
80202964:	d8c02917 	ldw	r3,164(sp)
80202968:	18c00084 	addi	r3,r3,2
8020296c:	d8c02e15 	stw	r3,184(sp)
80202970:	1805883a 	mov	r2,r3
80202974:	183d960e 	bge	r3,zero,80201fd0 <__reset+0xfa1e1fd0>
80202978:	003fd606 	br	802028d4 <__reset+0xfa1e28d4>
8020297c:	0005883a 	mov	r2,zero
80202980:	003f8e06 	br	802027bc <__reset+0xfa1e27bc>
80202984:	9080004c 	andi	r2,r18,1
80202988:	103f811e 	bne	r2,zero,80202790 <__reset+0xfa1e2790>
8020298c:	d8802117 	ldw	r2,132(sp)
80202990:	1405c83a 	sub	r2,r2,r16
80202994:	d8803315 	stw	r2,204(sp)
80202998:	b47ef326 	beq	r22,r17,80202568 <__reset+0xfa1e2568>
8020299c:	dd802617 	ldw	r22,152(sp)
802029a0:	003f1106 	br	802025e8 <__reset+0xfa1e25e8>
802029a4:	d9c02785 	stb	r7,158(sp)
802029a8:	00390406 	br	80200dbc <__reset+0xfa1e0dbc>
802029ac:	d9c02785 	stb	r7,158(sp)
802029b0:	0038d306 	br	80200d00 <__reset+0xfa1e0d00>
802029b4:	d9c02785 	stb	r7,158(sp)
802029b8:	003a6106 	br	80201340 <__reset+0xfa1e1340>
802029bc:	d9c02785 	stb	r7,158(sp)
802029c0:	003af806 	br	802015a4 <__reset+0xfa1e15a4>
802029c4:	0005883a 	mov	r2,zero
802029c8:	003d7e06 	br	80201fc4 <__reset+0xfa1e1fc4>
802029cc:	d8802344 	addi	r2,sp,141
802029d0:	003f1306 	br	80202620 <__reset+0xfa1e2620>
802029d4:	d9c02785 	stb	r7,158(sp)
802029d8:	00392306 	br	80200e68 <__reset+0xfa1e0e68>
802029dc:	d9c02785 	stb	r7,158(sp)
802029e0:	003aa906 	br	80201488 <__reset+0xfa1e1488>
802029e4:	d9c02785 	stb	r7,158(sp)
802029e8:	003a3d06 	br	802012e0 <__reset+0xfa1e12e0>
802029ec:	d9c02785 	stb	r7,158(sp)
802029f0:	003aca06 	br	8020151c <__reset+0xfa1e151c>

802029f4 <__vfprintf_internal>:
802029f4:	00a00874 	movhi	r2,32801
802029f8:	108e9404 	addi	r2,r2,14928
802029fc:	300f883a 	mov	r7,r6
80202a00:	280d883a 	mov	r6,r5
80202a04:	200b883a 	mov	r5,r4
80202a08:	11000017 	ldw	r4,0(r2)
80202a0c:	02007fc1 	jmpi	802007fc <___vfprintf_internal_r>

80202a10 <__sbprintf>:
80202a10:	2880030b 	ldhu	r2,12(r5)
80202a14:	2ac01917 	ldw	r11,100(r5)
80202a18:	2a80038b 	ldhu	r10,14(r5)
80202a1c:	2a400717 	ldw	r9,28(r5)
80202a20:	2a000917 	ldw	r8,36(r5)
80202a24:	defee204 	addi	sp,sp,-1144
80202a28:	00c10004 	movi	r3,1024
80202a2c:	dc011a15 	stw	r16,1128(sp)
80202a30:	10bfff4c 	andi	r2,r2,65533
80202a34:	2821883a 	mov	r16,r5
80202a38:	d8cb883a 	add	r5,sp,r3
80202a3c:	dc811c15 	stw	r18,1136(sp)
80202a40:	dc411b15 	stw	r17,1132(sp)
80202a44:	dfc11d15 	stw	ra,1140(sp)
80202a48:	2025883a 	mov	r18,r4
80202a4c:	d881030d 	sth	r2,1036(sp)
80202a50:	dac11915 	stw	r11,1124(sp)
80202a54:	da81038d 	sth	r10,1038(sp)
80202a58:	da410715 	stw	r9,1052(sp)
80202a5c:	da010915 	stw	r8,1060(sp)
80202a60:	dec10015 	stw	sp,1024(sp)
80202a64:	dec10415 	stw	sp,1040(sp)
80202a68:	d8c10215 	stw	r3,1032(sp)
80202a6c:	d8c10515 	stw	r3,1044(sp)
80202a70:	d8010615 	stw	zero,1048(sp)
80202a74:	02007fc0 	call	802007fc <___vfprintf_internal_r>
80202a78:	1023883a 	mov	r17,r2
80202a7c:	10000416 	blt	r2,zero,80202a90 <__sbprintf+0x80>
80202a80:	d9410004 	addi	r5,sp,1024
80202a84:	9009883a 	mov	r4,r18
80202a88:	02046c40 	call	802046c4 <_fflush_r>
80202a8c:	10000d1e 	bne	r2,zero,80202ac4 <__sbprintf+0xb4>
80202a90:	d881030b 	ldhu	r2,1036(sp)
80202a94:	1080100c 	andi	r2,r2,64
80202a98:	10000326 	beq	r2,zero,80202aa8 <__sbprintf+0x98>
80202a9c:	8080030b 	ldhu	r2,12(r16)
80202aa0:	10801014 	ori	r2,r2,64
80202aa4:	8080030d 	sth	r2,12(r16)
80202aa8:	8805883a 	mov	r2,r17
80202aac:	dfc11d17 	ldw	ra,1140(sp)
80202ab0:	dc811c17 	ldw	r18,1136(sp)
80202ab4:	dc411b17 	ldw	r17,1132(sp)
80202ab8:	dc011a17 	ldw	r16,1128(sp)
80202abc:	dec11e04 	addi	sp,sp,1144
80202ac0:	f800283a 	ret
80202ac4:	047fffc4 	movi	r17,-1
80202ac8:	003ff106 	br	80202a90 <__reset+0xfa1e2a90>

80202acc <__swsetup_r>:
80202acc:	00a00874 	movhi	r2,32801
80202ad0:	defffd04 	addi	sp,sp,-12
80202ad4:	108e9404 	addi	r2,r2,14928
80202ad8:	dc400115 	stw	r17,4(sp)
80202adc:	2023883a 	mov	r17,r4
80202ae0:	11000017 	ldw	r4,0(r2)
80202ae4:	dc000015 	stw	r16,0(sp)
80202ae8:	dfc00215 	stw	ra,8(sp)
80202aec:	2821883a 	mov	r16,r5
80202af0:	20000226 	beq	r4,zero,80202afc <__swsetup_r+0x30>
80202af4:	20800e17 	ldw	r2,56(r4)
80202af8:	10003126 	beq	r2,zero,80202bc0 <__swsetup_r+0xf4>
80202afc:	8080030b 	ldhu	r2,12(r16)
80202b00:	10c0020c 	andi	r3,r2,8
80202b04:	1009883a 	mov	r4,r2
80202b08:	18000f26 	beq	r3,zero,80202b48 <__swsetup_r+0x7c>
80202b0c:	80c00417 	ldw	r3,16(r16)
80202b10:	18001526 	beq	r3,zero,80202b68 <__swsetup_r+0x9c>
80202b14:	1100004c 	andi	r4,r2,1
80202b18:	20001c1e 	bne	r4,zero,80202b8c <__swsetup_r+0xc0>
80202b1c:	1080008c 	andi	r2,r2,2
80202b20:	1000291e 	bne	r2,zero,80202bc8 <__swsetup_r+0xfc>
80202b24:	80800517 	ldw	r2,20(r16)
80202b28:	80800215 	stw	r2,8(r16)
80202b2c:	18001c26 	beq	r3,zero,80202ba0 <__swsetup_r+0xd4>
80202b30:	0005883a 	mov	r2,zero
80202b34:	dfc00217 	ldw	ra,8(sp)
80202b38:	dc400117 	ldw	r17,4(sp)
80202b3c:	dc000017 	ldw	r16,0(sp)
80202b40:	dec00304 	addi	sp,sp,12
80202b44:	f800283a 	ret
80202b48:	2080040c 	andi	r2,r4,16
80202b4c:	10002e26 	beq	r2,zero,80202c08 <__swsetup_r+0x13c>
80202b50:	2080010c 	andi	r2,r4,4
80202b54:	10001e1e 	bne	r2,zero,80202bd0 <__swsetup_r+0x104>
80202b58:	80c00417 	ldw	r3,16(r16)
80202b5c:	20800214 	ori	r2,r4,8
80202b60:	8080030d 	sth	r2,12(r16)
80202b64:	183feb1e 	bne	r3,zero,80202b14 <__reset+0xfa1e2b14>
80202b68:	1100a00c 	andi	r4,r2,640
80202b6c:	01408004 	movi	r5,512
80202b70:	217fe826 	beq	r4,r5,80202b14 <__reset+0xfa1e2b14>
80202b74:	800b883a 	mov	r5,r16
80202b78:	8809883a 	mov	r4,r17
80202b7c:	02056440 	call	80205644 <__smakebuf_r>
80202b80:	8080030b 	ldhu	r2,12(r16)
80202b84:	80c00417 	ldw	r3,16(r16)
80202b88:	003fe206 	br	80202b14 <__reset+0xfa1e2b14>
80202b8c:	80800517 	ldw	r2,20(r16)
80202b90:	80000215 	stw	zero,8(r16)
80202b94:	0085c83a 	sub	r2,zero,r2
80202b98:	80800615 	stw	r2,24(r16)
80202b9c:	183fe41e 	bne	r3,zero,80202b30 <__reset+0xfa1e2b30>
80202ba0:	80c0030b 	ldhu	r3,12(r16)
80202ba4:	0005883a 	mov	r2,zero
80202ba8:	1900200c 	andi	r4,r3,128
80202bac:	203fe126 	beq	r4,zero,80202b34 <__reset+0xfa1e2b34>
80202bb0:	18c01014 	ori	r3,r3,64
80202bb4:	80c0030d 	sth	r3,12(r16)
80202bb8:	00bfffc4 	movi	r2,-1
80202bbc:	003fdd06 	br	80202b34 <__reset+0xfa1e2b34>
80202bc0:	0204aa00 	call	80204aa0 <__sinit>
80202bc4:	003fcd06 	br	80202afc <__reset+0xfa1e2afc>
80202bc8:	0005883a 	mov	r2,zero
80202bcc:	003fd606 	br	80202b28 <__reset+0xfa1e2b28>
80202bd0:	81400c17 	ldw	r5,48(r16)
80202bd4:	28000626 	beq	r5,zero,80202bf0 <__swsetup_r+0x124>
80202bd8:	80801004 	addi	r2,r16,64
80202bdc:	28800326 	beq	r5,r2,80202bec <__swsetup_r+0x120>
80202be0:	8809883a 	mov	r4,r17
80202be4:	0204c140 	call	80204c14 <_free_r>
80202be8:	8100030b 	ldhu	r4,12(r16)
80202bec:	80000c15 	stw	zero,48(r16)
80202bf0:	80c00417 	ldw	r3,16(r16)
80202bf4:	00bff6c4 	movi	r2,-37
80202bf8:	1108703a 	and	r4,r2,r4
80202bfc:	80000115 	stw	zero,4(r16)
80202c00:	80c00015 	stw	r3,0(r16)
80202c04:	003fd506 	br	80202b5c <__reset+0xfa1e2b5c>
80202c08:	00800244 	movi	r2,9
80202c0c:	88800015 	stw	r2,0(r17)
80202c10:	20801014 	ori	r2,r4,64
80202c14:	8080030d 	sth	r2,12(r16)
80202c18:	00bfffc4 	movi	r2,-1
80202c1c:	003fc506 	br	80202b34 <__reset+0xfa1e2b34>

80202c20 <quorem>:
80202c20:	defff704 	addi	sp,sp,-36
80202c24:	dc800215 	stw	r18,8(sp)
80202c28:	20800417 	ldw	r2,16(r4)
80202c2c:	2c800417 	ldw	r18,16(r5)
80202c30:	dfc00815 	stw	ra,32(sp)
80202c34:	ddc00715 	stw	r23,28(sp)
80202c38:	dd800615 	stw	r22,24(sp)
80202c3c:	dd400515 	stw	r21,20(sp)
80202c40:	dd000415 	stw	r20,16(sp)
80202c44:	dcc00315 	stw	r19,12(sp)
80202c48:	dc400115 	stw	r17,4(sp)
80202c4c:	dc000015 	stw	r16,0(sp)
80202c50:	14807116 	blt	r2,r18,80202e18 <quorem+0x1f8>
80202c54:	94bfffc4 	addi	r18,r18,-1
80202c58:	94ad883a 	add	r22,r18,r18
80202c5c:	b5ad883a 	add	r22,r22,r22
80202c60:	2c400504 	addi	r17,r5,20
80202c64:	8da9883a 	add	r20,r17,r22
80202c68:	25400504 	addi	r21,r4,20
80202c6c:	282f883a 	mov	r23,r5
80202c70:	adad883a 	add	r22,r21,r22
80202c74:	a1400017 	ldw	r5,0(r20)
80202c78:	2021883a 	mov	r16,r4
80202c7c:	b1000017 	ldw	r4,0(r22)
80202c80:	29400044 	addi	r5,r5,1
80202c84:	020a6d80 	call	8020a6d8 <__udivsi3>
80202c88:	1027883a 	mov	r19,r2
80202c8c:	10002c26 	beq	r2,zero,80202d40 <quorem+0x120>
80202c90:	a813883a 	mov	r9,r21
80202c94:	880b883a 	mov	r5,r17
80202c98:	0009883a 	mov	r4,zero
80202c9c:	000d883a 	mov	r6,zero
80202ca0:	2a000017 	ldw	r8,0(r5)
80202ca4:	49c00017 	ldw	r7,0(r9)
80202ca8:	29400104 	addi	r5,r5,4
80202cac:	40bfffcc 	andi	r2,r8,65535
80202cb0:	14c5383a 	mul	r2,r2,r19
80202cb4:	4010d43a 	srli	r8,r8,16
80202cb8:	38ffffcc 	andi	r3,r7,65535
80202cbc:	1105883a 	add	r2,r2,r4
80202cc0:	1008d43a 	srli	r4,r2,16
80202cc4:	44d1383a 	mul	r8,r8,r19
80202cc8:	198d883a 	add	r6,r3,r6
80202ccc:	10ffffcc 	andi	r3,r2,65535
80202cd0:	30c7c83a 	sub	r3,r6,r3
80202cd4:	380ed43a 	srli	r7,r7,16
80202cd8:	4105883a 	add	r2,r8,r4
80202cdc:	180dd43a 	srai	r6,r3,16
80202ce0:	113fffcc 	andi	r4,r2,65535
80202ce4:	390fc83a 	sub	r7,r7,r4
80202ce8:	398d883a 	add	r6,r7,r6
80202cec:	300e943a 	slli	r7,r6,16
80202cf0:	18ffffcc 	andi	r3,r3,65535
80202cf4:	1008d43a 	srli	r4,r2,16
80202cf8:	38ceb03a 	or	r7,r7,r3
80202cfc:	49c00015 	stw	r7,0(r9)
80202d00:	300dd43a 	srai	r6,r6,16
80202d04:	4a400104 	addi	r9,r9,4
80202d08:	a17fe52e 	bgeu	r20,r5,80202ca0 <__reset+0xfa1e2ca0>
80202d0c:	b0800017 	ldw	r2,0(r22)
80202d10:	10000b1e 	bne	r2,zero,80202d40 <quorem+0x120>
80202d14:	b0bfff04 	addi	r2,r22,-4
80202d18:	a880082e 	bgeu	r21,r2,80202d3c <quorem+0x11c>
80202d1c:	b0ffff17 	ldw	r3,-4(r22)
80202d20:	18000326 	beq	r3,zero,80202d30 <quorem+0x110>
80202d24:	00000506 	br	80202d3c <quorem+0x11c>
80202d28:	10c00017 	ldw	r3,0(r2)
80202d2c:	1800031e 	bne	r3,zero,80202d3c <quorem+0x11c>
80202d30:	10bfff04 	addi	r2,r2,-4
80202d34:	94bfffc4 	addi	r18,r18,-1
80202d38:	a8bffb36 	bltu	r21,r2,80202d28 <__reset+0xfa1e2d28>
80202d3c:	84800415 	stw	r18,16(r16)
80202d40:	b80b883a 	mov	r5,r23
80202d44:	8009883a 	mov	r4,r16
80202d48:	0206c3c0 	call	80206c3c <__mcmp>
80202d4c:	10002616 	blt	r2,zero,80202de8 <quorem+0x1c8>
80202d50:	9cc00044 	addi	r19,r19,1
80202d54:	a805883a 	mov	r2,r21
80202d58:	000b883a 	mov	r5,zero
80202d5c:	11000017 	ldw	r4,0(r2)
80202d60:	89800017 	ldw	r6,0(r17)
80202d64:	10800104 	addi	r2,r2,4
80202d68:	20ffffcc 	andi	r3,r4,65535
80202d6c:	194b883a 	add	r5,r3,r5
80202d70:	30ffffcc 	andi	r3,r6,65535
80202d74:	28c7c83a 	sub	r3,r5,r3
80202d78:	300cd43a 	srli	r6,r6,16
80202d7c:	2008d43a 	srli	r4,r4,16
80202d80:	180bd43a 	srai	r5,r3,16
80202d84:	18ffffcc 	andi	r3,r3,65535
80202d88:	2189c83a 	sub	r4,r4,r6
80202d8c:	2149883a 	add	r4,r4,r5
80202d90:	200c943a 	slli	r6,r4,16
80202d94:	8c400104 	addi	r17,r17,4
80202d98:	200bd43a 	srai	r5,r4,16
80202d9c:	30c6b03a 	or	r3,r6,r3
80202da0:	10ffff15 	stw	r3,-4(r2)
80202da4:	a47fed2e 	bgeu	r20,r17,80202d5c <__reset+0xfa1e2d5c>
80202da8:	9485883a 	add	r2,r18,r18
80202dac:	1085883a 	add	r2,r2,r2
80202db0:	a887883a 	add	r3,r21,r2
80202db4:	18800017 	ldw	r2,0(r3)
80202db8:	10000b1e 	bne	r2,zero,80202de8 <quorem+0x1c8>
80202dbc:	18bfff04 	addi	r2,r3,-4
80202dc0:	a880082e 	bgeu	r21,r2,80202de4 <quorem+0x1c4>
80202dc4:	18ffff17 	ldw	r3,-4(r3)
80202dc8:	18000326 	beq	r3,zero,80202dd8 <quorem+0x1b8>
80202dcc:	00000506 	br	80202de4 <quorem+0x1c4>
80202dd0:	10c00017 	ldw	r3,0(r2)
80202dd4:	1800031e 	bne	r3,zero,80202de4 <quorem+0x1c4>
80202dd8:	10bfff04 	addi	r2,r2,-4
80202ddc:	94bfffc4 	addi	r18,r18,-1
80202de0:	a8bffb36 	bltu	r21,r2,80202dd0 <__reset+0xfa1e2dd0>
80202de4:	84800415 	stw	r18,16(r16)
80202de8:	9805883a 	mov	r2,r19
80202dec:	dfc00817 	ldw	ra,32(sp)
80202df0:	ddc00717 	ldw	r23,28(sp)
80202df4:	dd800617 	ldw	r22,24(sp)
80202df8:	dd400517 	ldw	r21,20(sp)
80202dfc:	dd000417 	ldw	r20,16(sp)
80202e00:	dcc00317 	ldw	r19,12(sp)
80202e04:	dc800217 	ldw	r18,8(sp)
80202e08:	dc400117 	ldw	r17,4(sp)
80202e0c:	dc000017 	ldw	r16,0(sp)
80202e10:	dec00904 	addi	sp,sp,36
80202e14:	f800283a 	ret
80202e18:	0005883a 	mov	r2,zero
80202e1c:	003ff306 	br	80202dec <__reset+0xfa1e2dec>

80202e20 <_dtoa_r>:
80202e20:	20801017 	ldw	r2,64(r4)
80202e24:	deffde04 	addi	sp,sp,-136
80202e28:	df002015 	stw	fp,128(sp)
80202e2c:	dcc01b15 	stw	r19,108(sp)
80202e30:	dc801a15 	stw	r18,104(sp)
80202e34:	dc401915 	stw	r17,100(sp)
80202e38:	dc001815 	stw	r16,96(sp)
80202e3c:	dfc02115 	stw	ra,132(sp)
80202e40:	ddc01f15 	stw	r23,124(sp)
80202e44:	dd801e15 	stw	r22,120(sp)
80202e48:	dd401d15 	stw	r21,116(sp)
80202e4c:	dd001c15 	stw	r20,112(sp)
80202e50:	d9c00315 	stw	r7,12(sp)
80202e54:	2039883a 	mov	fp,r4
80202e58:	3023883a 	mov	r17,r6
80202e5c:	2825883a 	mov	r18,r5
80202e60:	dc002417 	ldw	r16,144(sp)
80202e64:	3027883a 	mov	r19,r6
80202e68:	10000826 	beq	r2,zero,80202e8c <_dtoa_r+0x6c>
80202e6c:	21801117 	ldw	r6,68(r4)
80202e70:	00c00044 	movi	r3,1
80202e74:	100b883a 	mov	r5,r2
80202e78:	1986983a 	sll	r3,r3,r6
80202e7c:	11800115 	stw	r6,4(r2)
80202e80:	10c00215 	stw	r3,8(r2)
80202e84:	020641c0 	call	8020641c <_Bfree>
80202e88:	e0001015 	stw	zero,64(fp)
80202e8c:	88002e16 	blt	r17,zero,80202f48 <_dtoa_r+0x128>
80202e90:	80000015 	stw	zero,0(r16)
80202e94:	889ffc2c 	andhi	r2,r17,32752
80202e98:	00dffc34 	movhi	r3,32752
80202e9c:	10c01c26 	beq	r2,r3,80202f10 <_dtoa_r+0xf0>
80202ea0:	000d883a 	mov	r6,zero
80202ea4:	000f883a 	mov	r7,zero
80202ea8:	9009883a 	mov	r4,r18
80202eac:	980b883a 	mov	r5,r19
80202eb0:	020b9280 	call	8020b928 <__eqdf2>
80202eb4:	10002b1e 	bne	r2,zero,80202f64 <_dtoa_r+0x144>
80202eb8:	d9c02317 	ldw	r7,140(sp)
80202ebc:	00800044 	movi	r2,1
80202ec0:	38800015 	stw	r2,0(r7)
80202ec4:	d8802517 	ldw	r2,148(sp)
80202ec8:	10019e26 	beq	r2,zero,80203544 <_dtoa_r+0x724>
80202ecc:	d8c02517 	ldw	r3,148(sp)
80202ed0:	00a00874 	movhi	r2,32801
80202ed4:	10866344 	addi	r2,r2,6541
80202ed8:	18800015 	stw	r2,0(r3)
80202edc:	10bfffc4 	addi	r2,r2,-1
80202ee0:	dfc02117 	ldw	ra,132(sp)
80202ee4:	df002017 	ldw	fp,128(sp)
80202ee8:	ddc01f17 	ldw	r23,124(sp)
80202eec:	dd801e17 	ldw	r22,120(sp)
80202ef0:	dd401d17 	ldw	r21,116(sp)
80202ef4:	dd001c17 	ldw	r20,112(sp)
80202ef8:	dcc01b17 	ldw	r19,108(sp)
80202efc:	dc801a17 	ldw	r18,104(sp)
80202f00:	dc401917 	ldw	r17,100(sp)
80202f04:	dc001817 	ldw	r16,96(sp)
80202f08:	dec02204 	addi	sp,sp,136
80202f0c:	f800283a 	ret
80202f10:	d8c02317 	ldw	r3,140(sp)
80202f14:	0089c3c4 	movi	r2,9999
80202f18:	18800015 	stw	r2,0(r3)
80202f1c:	90017726 	beq	r18,zero,802034fc <_dtoa_r+0x6dc>
80202f20:	00a00874 	movhi	r2,32801
80202f24:	10866f04 	addi	r2,r2,6588
80202f28:	d9002517 	ldw	r4,148(sp)
80202f2c:	203fec26 	beq	r4,zero,80202ee0 <__reset+0xfa1e2ee0>
80202f30:	10c000c7 	ldb	r3,3(r2)
80202f34:	1801781e 	bne	r3,zero,80203518 <_dtoa_r+0x6f8>
80202f38:	10c000c4 	addi	r3,r2,3
80202f3c:	d9802517 	ldw	r6,148(sp)
80202f40:	30c00015 	stw	r3,0(r6)
80202f44:	003fe606 	br	80202ee0 <__reset+0xfa1e2ee0>
80202f48:	04e00034 	movhi	r19,32768
80202f4c:	9cffffc4 	addi	r19,r19,-1
80202f50:	00800044 	movi	r2,1
80202f54:	8ce6703a 	and	r19,r17,r19
80202f58:	80800015 	stw	r2,0(r16)
80202f5c:	9823883a 	mov	r17,r19
80202f60:	003fcc06 	br	80202e94 <__reset+0xfa1e2e94>
80202f64:	d8800204 	addi	r2,sp,8
80202f68:	d8800015 	stw	r2,0(sp)
80202f6c:	d9c00104 	addi	r7,sp,4
80202f70:	900b883a 	mov	r5,r18
80202f74:	980d883a 	mov	r6,r19
80202f78:	e009883a 	mov	r4,fp
80202f7c:	8820d53a 	srli	r16,r17,20
80202f80:	02070080 	call	80207008 <__d2b>
80202f84:	d8800915 	stw	r2,36(sp)
80202f88:	8001651e 	bne	r16,zero,80203520 <_dtoa_r+0x700>
80202f8c:	dd800217 	ldw	r22,8(sp)
80202f90:	dc000117 	ldw	r16,4(sp)
80202f94:	00800804 	movi	r2,32
80202f98:	b421883a 	add	r16,r22,r16
80202f9c:	80c10c84 	addi	r3,r16,1074
80202fa0:	10c2d10e 	bge	r2,r3,80203ae8 <_dtoa_r+0xcc8>
80202fa4:	00801004 	movi	r2,64
80202fa8:	81010484 	addi	r4,r16,1042
80202fac:	10c7c83a 	sub	r3,r2,r3
80202fb0:	9108d83a 	srl	r4,r18,r4
80202fb4:	88e2983a 	sll	r17,r17,r3
80202fb8:	2448b03a 	or	r4,r4,r17
80202fbc:	020ccf00 	call	8020ccf0 <__floatunsidf>
80202fc0:	017f8434 	movhi	r5,65040
80202fc4:	01800044 	movi	r6,1
80202fc8:	1009883a 	mov	r4,r2
80202fcc:	194b883a 	add	r5,r3,r5
80202fd0:	843fffc4 	addi	r16,r16,-1
80202fd4:	d9801115 	stw	r6,68(sp)
80202fd8:	000d883a 	mov	r6,zero
80202fdc:	01cffe34 	movhi	r7,16376
80202fe0:	020c2980 	call	8020c298 <__subdf3>
80202fe4:	0198dbf4 	movhi	r6,25455
80202fe8:	01cff4f4 	movhi	r7,16339
80202fec:	3190d844 	addi	r6,r6,17249
80202ff0:	39e1e9c4 	addi	r7,r7,-30809
80202ff4:	1009883a 	mov	r4,r2
80202ff8:	180b883a 	mov	r5,r3
80202ffc:	020bb800 	call	8020bb80 <__muldf3>
80203000:	01a2d874 	movhi	r6,35681
80203004:	01cff1f4 	movhi	r7,16327
80203008:	31b22cc4 	addi	r6,r6,-14157
8020300c:	39e28a04 	addi	r7,r7,-30168
80203010:	180b883a 	mov	r5,r3
80203014:	1009883a 	mov	r4,r2
80203018:	020a7940 	call	8020a794 <__adddf3>
8020301c:	8009883a 	mov	r4,r16
80203020:	1029883a 	mov	r20,r2
80203024:	1823883a 	mov	r17,r3
80203028:	020cc140 	call	8020cc14 <__floatsidf>
8020302c:	019427f4 	movhi	r6,20639
80203030:	01cff4f4 	movhi	r7,16339
80203034:	319e7ec4 	addi	r6,r6,31227
80203038:	39d104c4 	addi	r7,r7,17427
8020303c:	1009883a 	mov	r4,r2
80203040:	180b883a 	mov	r5,r3
80203044:	020bb800 	call	8020bb80 <__muldf3>
80203048:	100d883a 	mov	r6,r2
8020304c:	180f883a 	mov	r7,r3
80203050:	a009883a 	mov	r4,r20
80203054:	880b883a 	mov	r5,r17
80203058:	020a7940 	call	8020a794 <__adddf3>
8020305c:	1009883a 	mov	r4,r2
80203060:	180b883a 	mov	r5,r3
80203064:	1029883a 	mov	r20,r2
80203068:	1823883a 	mov	r17,r3
8020306c:	020cb940 	call	8020cb94 <__fixdfsi>
80203070:	000d883a 	mov	r6,zero
80203074:	000f883a 	mov	r7,zero
80203078:	a009883a 	mov	r4,r20
8020307c:	880b883a 	mov	r5,r17
80203080:	d8800515 	stw	r2,20(sp)
80203084:	020ba8c0 	call	8020ba8c <__ledf2>
80203088:	10028716 	blt	r2,zero,80203aa8 <_dtoa_r+0xc88>
8020308c:	d8c00517 	ldw	r3,20(sp)
80203090:	00800584 	movi	r2,22
80203094:	10c27536 	bltu	r2,r3,80203a6c <_dtoa_r+0xc4c>
80203098:	180490fa 	slli	r2,r3,3
8020309c:	00e00874 	movhi	r3,32801
802030a0:	18c68b04 	addi	r3,r3,6700
802030a4:	1885883a 	add	r2,r3,r2
802030a8:	11000017 	ldw	r4,0(r2)
802030ac:	11400117 	ldw	r5,4(r2)
802030b0:	900d883a 	mov	r6,r18
802030b4:	980f883a 	mov	r7,r19
802030b8:	020b9b00 	call	8020b9b0 <__gedf2>
802030bc:	00828d0e 	bge	zero,r2,80203af4 <_dtoa_r+0xcd4>
802030c0:	d9000517 	ldw	r4,20(sp)
802030c4:	d8000e15 	stw	zero,56(sp)
802030c8:	213fffc4 	addi	r4,r4,-1
802030cc:	d9000515 	stw	r4,20(sp)
802030d0:	b42dc83a 	sub	r22,r22,r16
802030d4:	b5bfffc4 	addi	r22,r22,-1
802030d8:	b0026f16 	blt	r22,zero,80203a98 <_dtoa_r+0xc78>
802030dc:	d8000815 	stw	zero,32(sp)
802030e0:	d9c00517 	ldw	r7,20(sp)
802030e4:	38026416 	blt	r7,zero,80203a78 <_dtoa_r+0xc58>
802030e8:	b1ed883a 	add	r22,r22,r7
802030ec:	d9c00d15 	stw	r7,52(sp)
802030f0:	d8000a15 	stw	zero,40(sp)
802030f4:	d9800317 	ldw	r6,12(sp)
802030f8:	00800244 	movi	r2,9
802030fc:	11811436 	bltu	r2,r6,80203550 <_dtoa_r+0x730>
80203100:	00800144 	movi	r2,5
80203104:	1184e10e 	bge	r2,r6,8020448c <_dtoa_r+0x166c>
80203108:	31bfff04 	addi	r6,r6,-4
8020310c:	d9800315 	stw	r6,12(sp)
80203110:	0023883a 	mov	r17,zero
80203114:	d9800317 	ldw	r6,12(sp)
80203118:	008000c4 	movi	r2,3
8020311c:	30836726 	beq	r6,r2,80203ebc <_dtoa_r+0x109c>
80203120:	1183410e 	bge	r2,r6,80203e28 <_dtoa_r+0x1008>
80203124:	d9c00317 	ldw	r7,12(sp)
80203128:	00800104 	movi	r2,4
8020312c:	38827c26 	beq	r7,r2,80203b20 <_dtoa_r+0xd00>
80203130:	00800144 	movi	r2,5
80203134:	3884c41e 	bne	r7,r2,80204448 <_dtoa_r+0x1628>
80203138:	00800044 	movi	r2,1
8020313c:	d8800b15 	stw	r2,44(sp)
80203140:	d8c00517 	ldw	r3,20(sp)
80203144:	d9002217 	ldw	r4,136(sp)
80203148:	1907883a 	add	r3,r3,r4
8020314c:	19800044 	addi	r6,r3,1
80203150:	d8c00c15 	stw	r3,48(sp)
80203154:	d9800615 	stw	r6,24(sp)
80203158:	0183a40e 	bge	zero,r6,80203fec <_dtoa_r+0x11cc>
8020315c:	d9800617 	ldw	r6,24(sp)
80203160:	3021883a 	mov	r16,r6
80203164:	e0001115 	stw	zero,68(fp)
80203168:	008005c4 	movi	r2,23
8020316c:	1184c92e 	bgeu	r2,r6,80204494 <_dtoa_r+0x1674>
80203170:	00c00044 	movi	r3,1
80203174:	00800104 	movi	r2,4
80203178:	1085883a 	add	r2,r2,r2
8020317c:	11000504 	addi	r4,r2,20
80203180:	180b883a 	mov	r5,r3
80203184:	18c00044 	addi	r3,r3,1
80203188:	313ffb2e 	bgeu	r6,r4,80203178 <__reset+0xfa1e3178>
8020318c:	e1401115 	stw	r5,68(fp)
80203190:	e009883a 	mov	r4,fp
80203194:	02063740 	call	80206374 <_Balloc>
80203198:	d8800715 	stw	r2,28(sp)
8020319c:	e0801015 	stw	r2,64(fp)
802031a0:	00800384 	movi	r2,14
802031a4:	1400f736 	bltu	r2,r16,80203584 <_dtoa_r+0x764>
802031a8:	8800f626 	beq	r17,zero,80203584 <_dtoa_r+0x764>
802031ac:	d9c00517 	ldw	r7,20(sp)
802031b0:	01c39a0e 	bge	zero,r7,8020401c <_dtoa_r+0x11fc>
802031b4:	388003cc 	andi	r2,r7,15
802031b8:	100490fa 	slli	r2,r2,3
802031bc:	382bd13a 	srai	r21,r7,4
802031c0:	00e00874 	movhi	r3,32801
802031c4:	18c68b04 	addi	r3,r3,6700
802031c8:	1885883a 	add	r2,r3,r2
802031cc:	a8c0040c 	andi	r3,r21,16
802031d0:	12400017 	ldw	r9,0(r2)
802031d4:	12000117 	ldw	r8,4(r2)
802031d8:	18037926 	beq	r3,zero,80203fc0 <_dtoa_r+0x11a0>
802031dc:	00a00874 	movhi	r2,32801
802031e0:	10868104 	addi	r2,r2,6660
802031e4:	11800817 	ldw	r6,32(r2)
802031e8:	11c00917 	ldw	r7,36(r2)
802031ec:	9009883a 	mov	r4,r18
802031f0:	980b883a 	mov	r5,r19
802031f4:	da001715 	stw	r8,92(sp)
802031f8:	da401615 	stw	r9,88(sp)
802031fc:	020b0400 	call	8020b040 <__divdf3>
80203200:	da001717 	ldw	r8,92(sp)
80203204:	da401617 	ldw	r9,88(sp)
80203208:	ad4003cc 	andi	r21,r21,15
8020320c:	040000c4 	movi	r16,3
80203210:	1023883a 	mov	r17,r2
80203214:	1829883a 	mov	r20,r3
80203218:	a8001126 	beq	r21,zero,80203260 <_dtoa_r+0x440>
8020321c:	05e00874 	movhi	r23,32801
80203220:	bdc68104 	addi	r23,r23,6660
80203224:	4805883a 	mov	r2,r9
80203228:	4007883a 	mov	r3,r8
8020322c:	a980004c 	andi	r6,r21,1
80203230:	1009883a 	mov	r4,r2
80203234:	a82bd07a 	srai	r21,r21,1
80203238:	180b883a 	mov	r5,r3
8020323c:	30000426 	beq	r6,zero,80203250 <_dtoa_r+0x430>
80203240:	b9800017 	ldw	r6,0(r23)
80203244:	b9c00117 	ldw	r7,4(r23)
80203248:	84000044 	addi	r16,r16,1
8020324c:	020bb800 	call	8020bb80 <__muldf3>
80203250:	bdc00204 	addi	r23,r23,8
80203254:	a83ff51e 	bne	r21,zero,8020322c <__reset+0xfa1e322c>
80203258:	1013883a 	mov	r9,r2
8020325c:	1811883a 	mov	r8,r3
80203260:	480d883a 	mov	r6,r9
80203264:	400f883a 	mov	r7,r8
80203268:	8809883a 	mov	r4,r17
8020326c:	a00b883a 	mov	r5,r20
80203270:	020b0400 	call	8020b040 <__divdf3>
80203274:	d8800f15 	stw	r2,60(sp)
80203278:	d8c01015 	stw	r3,64(sp)
8020327c:	d8c00e17 	ldw	r3,56(sp)
80203280:	18000626 	beq	r3,zero,8020329c <_dtoa_r+0x47c>
80203284:	d9000f17 	ldw	r4,60(sp)
80203288:	d9401017 	ldw	r5,64(sp)
8020328c:	000d883a 	mov	r6,zero
80203290:	01cffc34 	movhi	r7,16368
80203294:	020ba8c0 	call	8020ba8c <__ledf2>
80203298:	10040b16 	blt	r2,zero,802042c8 <_dtoa_r+0x14a8>
8020329c:	8009883a 	mov	r4,r16
802032a0:	020cc140 	call	8020cc14 <__floatsidf>
802032a4:	d9800f17 	ldw	r6,60(sp)
802032a8:	d9c01017 	ldw	r7,64(sp)
802032ac:	1009883a 	mov	r4,r2
802032b0:	180b883a 	mov	r5,r3
802032b4:	020bb800 	call	8020bb80 <__muldf3>
802032b8:	000d883a 	mov	r6,zero
802032bc:	01d00734 	movhi	r7,16412
802032c0:	1009883a 	mov	r4,r2
802032c4:	180b883a 	mov	r5,r3
802032c8:	020a7940 	call	8020a794 <__adddf3>
802032cc:	1021883a 	mov	r16,r2
802032d0:	d8800617 	ldw	r2,24(sp)
802032d4:	047f3034 	movhi	r17,64704
802032d8:	1c63883a 	add	r17,r3,r17
802032dc:	10031826 	beq	r2,zero,80203f40 <_dtoa_r+0x1120>
802032e0:	d8c00517 	ldw	r3,20(sp)
802032e4:	db000617 	ldw	r12,24(sp)
802032e8:	d8c01315 	stw	r3,76(sp)
802032ec:	d9000b17 	ldw	r4,44(sp)
802032f0:	20038f26 	beq	r4,zero,80204130 <_dtoa_r+0x1310>
802032f4:	60bfffc4 	addi	r2,r12,-1
802032f8:	100490fa 	slli	r2,r2,3
802032fc:	00e00874 	movhi	r3,32801
80203300:	18c68b04 	addi	r3,r3,6700
80203304:	1885883a 	add	r2,r3,r2
80203308:	11800017 	ldw	r6,0(r2)
8020330c:	11c00117 	ldw	r7,4(r2)
80203310:	d8800717 	ldw	r2,28(sp)
80203314:	0009883a 	mov	r4,zero
80203318:	014ff834 	movhi	r5,16352
8020331c:	db001615 	stw	r12,88(sp)
80203320:	15c00044 	addi	r23,r2,1
80203324:	020b0400 	call	8020b040 <__divdf3>
80203328:	800d883a 	mov	r6,r16
8020332c:	880f883a 	mov	r7,r17
80203330:	1009883a 	mov	r4,r2
80203334:	180b883a 	mov	r5,r3
80203338:	020c2980 	call	8020c298 <__subdf3>
8020333c:	d9401017 	ldw	r5,64(sp)
80203340:	d9000f17 	ldw	r4,60(sp)
80203344:	102b883a 	mov	r21,r2
80203348:	d8c01215 	stw	r3,72(sp)
8020334c:	020cb940 	call	8020cb94 <__fixdfsi>
80203350:	1009883a 	mov	r4,r2
80203354:	1029883a 	mov	r20,r2
80203358:	020cc140 	call	8020cc14 <__floatsidf>
8020335c:	d9000f17 	ldw	r4,60(sp)
80203360:	d9401017 	ldw	r5,64(sp)
80203364:	100d883a 	mov	r6,r2
80203368:	180f883a 	mov	r7,r3
8020336c:	020c2980 	call	8020c298 <__subdf3>
80203370:	1823883a 	mov	r17,r3
80203374:	d8c00717 	ldw	r3,28(sp)
80203378:	d9401217 	ldw	r5,72(sp)
8020337c:	a2000c04 	addi	r8,r20,48
80203380:	1021883a 	mov	r16,r2
80203384:	1a000005 	stb	r8,0(r3)
80203388:	800d883a 	mov	r6,r16
8020338c:	880f883a 	mov	r7,r17
80203390:	a809883a 	mov	r4,r21
80203394:	4029883a 	mov	r20,r8
80203398:	020b9b00 	call	8020b9b0 <__gedf2>
8020339c:	00841d16 	blt	zero,r2,80204414 <_dtoa_r+0x15f4>
802033a0:	800d883a 	mov	r6,r16
802033a4:	880f883a 	mov	r7,r17
802033a8:	0009883a 	mov	r4,zero
802033ac:	014ffc34 	movhi	r5,16368
802033b0:	020c2980 	call	8020c298 <__subdf3>
802033b4:	d9401217 	ldw	r5,72(sp)
802033b8:	100d883a 	mov	r6,r2
802033bc:	180f883a 	mov	r7,r3
802033c0:	a809883a 	mov	r4,r21
802033c4:	020b9b00 	call	8020b9b0 <__gedf2>
802033c8:	db001617 	ldw	r12,88(sp)
802033cc:	00840e16 	blt	zero,r2,80204408 <_dtoa_r+0x15e8>
802033d0:	00800044 	movi	r2,1
802033d4:	13006b0e 	bge	r2,r12,80203584 <_dtoa_r+0x764>
802033d8:	d9000717 	ldw	r4,28(sp)
802033dc:	dd800f15 	stw	r22,60(sp)
802033e0:	dcc01015 	stw	r19,64(sp)
802033e4:	2319883a 	add	r12,r4,r12
802033e8:	dcc01217 	ldw	r19,72(sp)
802033ec:	602d883a 	mov	r22,r12
802033f0:	dc801215 	stw	r18,72(sp)
802033f4:	b825883a 	mov	r18,r23
802033f8:	00000906 	br	80203420 <_dtoa_r+0x600>
802033fc:	020c2980 	call	8020c298 <__subdf3>
80203400:	a80d883a 	mov	r6,r21
80203404:	980f883a 	mov	r7,r19
80203408:	1009883a 	mov	r4,r2
8020340c:	180b883a 	mov	r5,r3
80203410:	020ba8c0 	call	8020ba8c <__ledf2>
80203414:	1003e816 	blt	r2,zero,802043b8 <_dtoa_r+0x1598>
80203418:	b825883a 	mov	r18,r23
8020341c:	bd83e926 	beq	r23,r22,802043c4 <_dtoa_r+0x15a4>
80203420:	a809883a 	mov	r4,r21
80203424:	980b883a 	mov	r5,r19
80203428:	000d883a 	mov	r6,zero
8020342c:	01d00934 	movhi	r7,16420
80203430:	020bb800 	call	8020bb80 <__muldf3>
80203434:	000d883a 	mov	r6,zero
80203438:	01d00934 	movhi	r7,16420
8020343c:	8009883a 	mov	r4,r16
80203440:	880b883a 	mov	r5,r17
80203444:	102b883a 	mov	r21,r2
80203448:	1827883a 	mov	r19,r3
8020344c:	020bb800 	call	8020bb80 <__muldf3>
80203450:	180b883a 	mov	r5,r3
80203454:	1009883a 	mov	r4,r2
80203458:	1821883a 	mov	r16,r3
8020345c:	1023883a 	mov	r17,r2
80203460:	020cb940 	call	8020cb94 <__fixdfsi>
80203464:	1009883a 	mov	r4,r2
80203468:	1029883a 	mov	r20,r2
8020346c:	020cc140 	call	8020cc14 <__floatsidf>
80203470:	8809883a 	mov	r4,r17
80203474:	800b883a 	mov	r5,r16
80203478:	100d883a 	mov	r6,r2
8020347c:	180f883a 	mov	r7,r3
80203480:	020c2980 	call	8020c298 <__subdf3>
80203484:	a5000c04 	addi	r20,r20,48
80203488:	a80d883a 	mov	r6,r21
8020348c:	980f883a 	mov	r7,r19
80203490:	1009883a 	mov	r4,r2
80203494:	180b883a 	mov	r5,r3
80203498:	95000005 	stb	r20,0(r18)
8020349c:	1021883a 	mov	r16,r2
802034a0:	1823883a 	mov	r17,r3
802034a4:	020ba8c0 	call	8020ba8c <__ledf2>
802034a8:	bdc00044 	addi	r23,r23,1
802034ac:	800d883a 	mov	r6,r16
802034b0:	880f883a 	mov	r7,r17
802034b4:	0009883a 	mov	r4,zero
802034b8:	014ffc34 	movhi	r5,16368
802034bc:	103fcf0e 	bge	r2,zero,802033fc <__reset+0xfa1e33fc>
802034c0:	d8c01317 	ldw	r3,76(sp)
802034c4:	d8c00515 	stw	r3,20(sp)
802034c8:	d9400917 	ldw	r5,36(sp)
802034cc:	e009883a 	mov	r4,fp
802034d0:	020641c0 	call	8020641c <_Bfree>
802034d4:	d9000517 	ldw	r4,20(sp)
802034d8:	d9802317 	ldw	r6,140(sp)
802034dc:	d9c02517 	ldw	r7,148(sp)
802034e0:	b8000005 	stb	zero,0(r23)
802034e4:	20800044 	addi	r2,r4,1
802034e8:	30800015 	stw	r2,0(r6)
802034ec:	3802aa26 	beq	r7,zero,80203f98 <_dtoa_r+0x1178>
802034f0:	3dc00015 	stw	r23,0(r7)
802034f4:	d8800717 	ldw	r2,28(sp)
802034f8:	003e7906 	br	80202ee0 <__reset+0xfa1e2ee0>
802034fc:	00800434 	movhi	r2,16
80203500:	10bfffc4 	addi	r2,r2,-1
80203504:	88a2703a 	and	r17,r17,r2
80203508:	883e851e 	bne	r17,zero,80202f20 <__reset+0xfa1e2f20>
8020350c:	00a00874 	movhi	r2,32801
80203510:	10866c04 	addi	r2,r2,6576
80203514:	003e8406 	br	80202f28 <__reset+0xfa1e2f28>
80203518:	10c00204 	addi	r3,r2,8
8020351c:	003e8706 	br	80202f3c <__reset+0xfa1e2f3c>
80203520:	01400434 	movhi	r5,16
80203524:	297fffc4 	addi	r5,r5,-1
80203528:	994a703a 	and	r5,r19,r5
8020352c:	9009883a 	mov	r4,r18
80203530:	843f0044 	addi	r16,r16,-1023
80203534:	294ffc34 	orhi	r5,r5,16368
80203538:	dd800217 	ldw	r22,8(sp)
8020353c:	d8001115 	stw	zero,68(sp)
80203540:	003ea506 	br	80202fd8 <__reset+0xfa1e2fd8>
80203544:	00a00874 	movhi	r2,32801
80203548:	10866304 	addi	r2,r2,6540
8020354c:	003e6406 	br	80202ee0 <__reset+0xfa1e2ee0>
80203550:	e0001115 	stw	zero,68(fp)
80203554:	000b883a 	mov	r5,zero
80203558:	e009883a 	mov	r4,fp
8020355c:	02063740 	call	80206374 <_Balloc>
80203560:	01bfffc4 	movi	r6,-1
80203564:	01c00044 	movi	r7,1
80203568:	d8800715 	stw	r2,28(sp)
8020356c:	d9800c15 	stw	r6,48(sp)
80203570:	e0801015 	stw	r2,64(fp)
80203574:	d8000315 	stw	zero,12(sp)
80203578:	d9c00b15 	stw	r7,44(sp)
8020357c:	d9800615 	stw	r6,24(sp)
80203580:	d8002215 	stw	zero,136(sp)
80203584:	d8800117 	ldw	r2,4(sp)
80203588:	10008916 	blt	r2,zero,802037b0 <_dtoa_r+0x990>
8020358c:	d9000517 	ldw	r4,20(sp)
80203590:	00c00384 	movi	r3,14
80203594:	19008616 	blt	r3,r4,802037b0 <_dtoa_r+0x990>
80203598:	200490fa 	slli	r2,r4,3
8020359c:	00e00874 	movhi	r3,32801
802035a0:	d9802217 	ldw	r6,136(sp)
802035a4:	18c68b04 	addi	r3,r3,6700
802035a8:	1885883a 	add	r2,r3,r2
802035ac:	14000017 	ldw	r16,0(r2)
802035b0:	14400117 	ldw	r17,4(r2)
802035b4:	30016316 	blt	r6,zero,80203b44 <_dtoa_r+0xd24>
802035b8:	800d883a 	mov	r6,r16
802035bc:	880f883a 	mov	r7,r17
802035c0:	9009883a 	mov	r4,r18
802035c4:	980b883a 	mov	r5,r19
802035c8:	020b0400 	call	8020b040 <__divdf3>
802035cc:	180b883a 	mov	r5,r3
802035d0:	1009883a 	mov	r4,r2
802035d4:	020cb940 	call	8020cb94 <__fixdfsi>
802035d8:	1009883a 	mov	r4,r2
802035dc:	102b883a 	mov	r21,r2
802035e0:	020cc140 	call	8020cc14 <__floatsidf>
802035e4:	800d883a 	mov	r6,r16
802035e8:	880f883a 	mov	r7,r17
802035ec:	1009883a 	mov	r4,r2
802035f0:	180b883a 	mov	r5,r3
802035f4:	020bb800 	call	8020bb80 <__muldf3>
802035f8:	100d883a 	mov	r6,r2
802035fc:	180f883a 	mov	r7,r3
80203600:	9009883a 	mov	r4,r18
80203604:	980b883a 	mov	r5,r19
80203608:	020c2980 	call	8020c298 <__subdf3>
8020360c:	d9c00717 	ldw	r7,28(sp)
80203610:	1009883a 	mov	r4,r2
80203614:	a8800c04 	addi	r2,r21,48
80203618:	38800005 	stb	r2,0(r7)
8020361c:	3dc00044 	addi	r23,r7,1
80203620:	d9c00617 	ldw	r7,24(sp)
80203624:	01800044 	movi	r6,1
80203628:	180b883a 	mov	r5,r3
8020362c:	2005883a 	mov	r2,r4
80203630:	39803826 	beq	r7,r6,80203714 <_dtoa_r+0x8f4>
80203634:	000d883a 	mov	r6,zero
80203638:	01d00934 	movhi	r7,16420
8020363c:	020bb800 	call	8020bb80 <__muldf3>
80203640:	000d883a 	mov	r6,zero
80203644:	000f883a 	mov	r7,zero
80203648:	1009883a 	mov	r4,r2
8020364c:	180b883a 	mov	r5,r3
80203650:	1025883a 	mov	r18,r2
80203654:	1827883a 	mov	r19,r3
80203658:	020b9280 	call	8020b928 <__eqdf2>
8020365c:	103f9a26 	beq	r2,zero,802034c8 <__reset+0xfa1e34c8>
80203660:	d9c00617 	ldw	r7,24(sp)
80203664:	d8c00717 	ldw	r3,28(sp)
80203668:	b829883a 	mov	r20,r23
8020366c:	38bfffc4 	addi	r2,r7,-1
80203670:	18ad883a 	add	r22,r3,r2
80203674:	00000a06 	br	802036a0 <_dtoa_r+0x880>
80203678:	020bb800 	call	8020bb80 <__muldf3>
8020367c:	000d883a 	mov	r6,zero
80203680:	000f883a 	mov	r7,zero
80203684:	1009883a 	mov	r4,r2
80203688:	180b883a 	mov	r5,r3
8020368c:	1025883a 	mov	r18,r2
80203690:	1827883a 	mov	r19,r3
80203694:	b829883a 	mov	r20,r23
80203698:	020b9280 	call	8020b928 <__eqdf2>
8020369c:	103f8a26 	beq	r2,zero,802034c8 <__reset+0xfa1e34c8>
802036a0:	800d883a 	mov	r6,r16
802036a4:	880f883a 	mov	r7,r17
802036a8:	9009883a 	mov	r4,r18
802036ac:	980b883a 	mov	r5,r19
802036b0:	020b0400 	call	8020b040 <__divdf3>
802036b4:	180b883a 	mov	r5,r3
802036b8:	1009883a 	mov	r4,r2
802036bc:	020cb940 	call	8020cb94 <__fixdfsi>
802036c0:	1009883a 	mov	r4,r2
802036c4:	102b883a 	mov	r21,r2
802036c8:	020cc140 	call	8020cc14 <__floatsidf>
802036cc:	800d883a 	mov	r6,r16
802036d0:	880f883a 	mov	r7,r17
802036d4:	1009883a 	mov	r4,r2
802036d8:	180b883a 	mov	r5,r3
802036dc:	020bb800 	call	8020bb80 <__muldf3>
802036e0:	100d883a 	mov	r6,r2
802036e4:	180f883a 	mov	r7,r3
802036e8:	9009883a 	mov	r4,r18
802036ec:	980b883a 	mov	r5,r19
802036f0:	020c2980 	call	8020c298 <__subdf3>
802036f4:	aa000c04 	addi	r8,r21,48
802036f8:	a2000005 	stb	r8,0(r20)
802036fc:	000d883a 	mov	r6,zero
80203700:	01d00934 	movhi	r7,16420
80203704:	1009883a 	mov	r4,r2
80203708:	180b883a 	mov	r5,r3
8020370c:	a5c00044 	addi	r23,r20,1
80203710:	b53fd91e 	bne	r22,r20,80203678 <__reset+0xfa1e3678>
80203714:	100d883a 	mov	r6,r2
80203718:	180f883a 	mov	r7,r3
8020371c:	1009883a 	mov	r4,r2
80203720:	180b883a 	mov	r5,r3
80203724:	020a7940 	call	8020a794 <__adddf3>
80203728:	100d883a 	mov	r6,r2
8020372c:	180f883a 	mov	r7,r3
80203730:	8009883a 	mov	r4,r16
80203734:	880b883a 	mov	r5,r17
80203738:	1027883a 	mov	r19,r2
8020373c:	1825883a 	mov	r18,r3
80203740:	020ba8c0 	call	8020ba8c <__ledf2>
80203744:	10000816 	blt	r2,zero,80203768 <_dtoa_r+0x948>
80203748:	980d883a 	mov	r6,r19
8020374c:	900f883a 	mov	r7,r18
80203750:	8009883a 	mov	r4,r16
80203754:	880b883a 	mov	r5,r17
80203758:	020b9280 	call	8020b928 <__eqdf2>
8020375c:	103f5a1e 	bne	r2,zero,802034c8 <__reset+0xfa1e34c8>
80203760:	ad40004c 	andi	r21,r21,1
80203764:	a83f5826 	beq	r21,zero,802034c8 <__reset+0xfa1e34c8>
80203768:	bd3fffc3 	ldbu	r20,-1(r23)
8020376c:	b8bfffc4 	addi	r2,r23,-1
80203770:	1007883a 	mov	r3,r2
80203774:	01400e44 	movi	r5,57
80203778:	d9800717 	ldw	r6,28(sp)
8020377c:	00000506 	br	80203794 <_dtoa_r+0x974>
80203780:	18ffffc4 	addi	r3,r3,-1
80203784:	11824726 	beq	r2,r6,802040a4 <_dtoa_r+0x1284>
80203788:	1d000003 	ldbu	r20,0(r3)
8020378c:	102f883a 	mov	r23,r2
80203790:	10bfffc4 	addi	r2,r2,-1
80203794:	a1003fcc 	andi	r4,r20,255
80203798:	2100201c 	xori	r4,r4,128
8020379c:	213fe004 	addi	r4,r4,-128
802037a0:	217ff726 	beq	r4,r5,80203780 <__reset+0xfa1e3780>
802037a4:	a2000044 	addi	r8,r20,1
802037a8:	12000005 	stb	r8,0(r2)
802037ac:	003f4606 	br	802034c8 <__reset+0xfa1e34c8>
802037b0:	d9000b17 	ldw	r4,44(sp)
802037b4:	2000c826 	beq	r4,zero,80203ad8 <_dtoa_r+0xcb8>
802037b8:	d9800317 	ldw	r6,12(sp)
802037bc:	00c00044 	movi	r3,1
802037c0:	1980f90e 	bge	r3,r6,80203ba8 <_dtoa_r+0xd88>
802037c4:	d8800617 	ldw	r2,24(sp)
802037c8:	d8c00a17 	ldw	r3,40(sp)
802037cc:	157fffc4 	addi	r21,r2,-1
802037d0:	1d41f316 	blt	r3,r21,80203fa0 <_dtoa_r+0x1180>
802037d4:	1d6bc83a 	sub	r21,r3,r21
802037d8:	d9c00617 	ldw	r7,24(sp)
802037dc:	3802aa16 	blt	r7,zero,80204288 <_dtoa_r+0x1468>
802037e0:	dd000817 	ldw	r20,32(sp)
802037e4:	d8800617 	ldw	r2,24(sp)
802037e8:	d8c00817 	ldw	r3,32(sp)
802037ec:	01400044 	movi	r5,1
802037f0:	e009883a 	mov	r4,fp
802037f4:	1887883a 	add	r3,r3,r2
802037f8:	d8c00815 	stw	r3,32(sp)
802037fc:	b0ad883a 	add	r22,r22,r2
80203800:	02067800 	call	80206780 <__i2b>
80203804:	1023883a 	mov	r17,r2
80203808:	a0000826 	beq	r20,zero,8020382c <_dtoa_r+0xa0c>
8020380c:	0580070e 	bge	zero,r22,8020382c <_dtoa_r+0xa0c>
80203810:	a005883a 	mov	r2,r20
80203814:	b500b916 	blt	r22,r20,80203afc <_dtoa_r+0xcdc>
80203818:	d9000817 	ldw	r4,32(sp)
8020381c:	a0a9c83a 	sub	r20,r20,r2
80203820:	b0adc83a 	sub	r22,r22,r2
80203824:	2089c83a 	sub	r4,r4,r2
80203828:	d9000815 	stw	r4,32(sp)
8020382c:	d9800a17 	ldw	r6,40(sp)
80203830:	0181810e 	bge	zero,r6,80203e38 <_dtoa_r+0x1018>
80203834:	d9c00b17 	ldw	r7,44(sp)
80203838:	3800b326 	beq	r7,zero,80203b08 <_dtoa_r+0xce8>
8020383c:	a800b226 	beq	r21,zero,80203b08 <_dtoa_r+0xce8>
80203840:	880b883a 	mov	r5,r17
80203844:	a80d883a 	mov	r6,r21
80203848:	e009883a 	mov	r4,fp
8020384c:	02069b40 	call	802069b4 <__pow5mult>
80203850:	d9800917 	ldw	r6,36(sp)
80203854:	100b883a 	mov	r5,r2
80203858:	e009883a 	mov	r4,fp
8020385c:	1023883a 	mov	r17,r2
80203860:	02067bc0 	call	802067bc <__multiply>
80203864:	1021883a 	mov	r16,r2
80203868:	d8800a17 	ldw	r2,40(sp)
8020386c:	d9400917 	ldw	r5,36(sp)
80203870:	e009883a 	mov	r4,fp
80203874:	1545c83a 	sub	r2,r2,r21
80203878:	d8800a15 	stw	r2,40(sp)
8020387c:	020641c0 	call	8020641c <_Bfree>
80203880:	d8c00a17 	ldw	r3,40(sp)
80203884:	18009f1e 	bne	r3,zero,80203b04 <_dtoa_r+0xce4>
80203888:	05c00044 	movi	r23,1
8020388c:	e009883a 	mov	r4,fp
80203890:	b80b883a 	mov	r5,r23
80203894:	02067800 	call	80206780 <__i2b>
80203898:	d9000d17 	ldw	r4,52(sp)
8020389c:	102b883a 	mov	r21,r2
802038a0:	2000ce26 	beq	r4,zero,80203bdc <_dtoa_r+0xdbc>
802038a4:	200d883a 	mov	r6,r4
802038a8:	100b883a 	mov	r5,r2
802038ac:	e009883a 	mov	r4,fp
802038b0:	02069b40 	call	802069b4 <__pow5mult>
802038b4:	d9800317 	ldw	r6,12(sp)
802038b8:	102b883a 	mov	r21,r2
802038bc:	b981810e 	bge	r23,r6,80203ec4 <_dtoa_r+0x10a4>
802038c0:	0027883a 	mov	r19,zero
802038c4:	a8800417 	ldw	r2,16(r21)
802038c8:	05c00804 	movi	r23,32
802038cc:	10800104 	addi	r2,r2,4
802038d0:	1085883a 	add	r2,r2,r2
802038d4:	1085883a 	add	r2,r2,r2
802038d8:	a885883a 	add	r2,r21,r2
802038dc:	11000017 	ldw	r4,0(r2)
802038e0:	02066680 	call	80206668 <__hi0bits>
802038e4:	b885c83a 	sub	r2,r23,r2
802038e8:	1585883a 	add	r2,r2,r22
802038ec:	108007cc 	andi	r2,r2,31
802038f0:	1000b326 	beq	r2,zero,80203bc0 <_dtoa_r+0xda0>
802038f4:	00c00804 	movi	r3,32
802038f8:	1887c83a 	sub	r3,r3,r2
802038fc:	01000104 	movi	r4,4
80203900:	20c2cd0e 	bge	r4,r3,80204438 <_dtoa_r+0x1618>
80203904:	00c00704 	movi	r3,28
80203908:	1885c83a 	sub	r2,r3,r2
8020390c:	d8c00817 	ldw	r3,32(sp)
80203910:	a0a9883a 	add	r20,r20,r2
80203914:	b0ad883a 	add	r22,r22,r2
80203918:	1887883a 	add	r3,r3,r2
8020391c:	d8c00815 	stw	r3,32(sp)
80203920:	d9800817 	ldw	r6,32(sp)
80203924:	0180040e 	bge	zero,r6,80203938 <_dtoa_r+0xb18>
80203928:	800b883a 	mov	r5,r16
8020392c:	e009883a 	mov	r4,fp
80203930:	0206af40 	call	80206af4 <__lshift>
80203934:	1021883a 	mov	r16,r2
80203938:	0580050e 	bge	zero,r22,80203950 <_dtoa_r+0xb30>
8020393c:	a80b883a 	mov	r5,r21
80203940:	b00d883a 	mov	r6,r22
80203944:	e009883a 	mov	r4,fp
80203948:	0206af40 	call	80206af4 <__lshift>
8020394c:	102b883a 	mov	r21,r2
80203950:	d9c00e17 	ldw	r7,56(sp)
80203954:	3801211e 	bne	r7,zero,80203ddc <_dtoa_r+0xfbc>
80203958:	d9800617 	ldw	r6,24(sp)
8020395c:	0181380e 	bge	zero,r6,80203e40 <_dtoa_r+0x1020>
80203960:	d8c00b17 	ldw	r3,44(sp)
80203964:	1800ab1e 	bne	r3,zero,80203c14 <_dtoa_r+0xdf4>
80203968:	dc800717 	ldw	r18,28(sp)
8020396c:	dcc00617 	ldw	r19,24(sp)
80203970:	9029883a 	mov	r20,r18
80203974:	00000206 	br	80203980 <_dtoa_r+0xb60>
80203978:	02064440 	call	80206444 <__multadd>
8020397c:	1021883a 	mov	r16,r2
80203980:	a80b883a 	mov	r5,r21
80203984:	8009883a 	mov	r4,r16
80203988:	0202c200 	call	80202c20 <quorem>
8020398c:	10800c04 	addi	r2,r2,48
80203990:	90800005 	stb	r2,0(r18)
80203994:	94800044 	addi	r18,r18,1
80203998:	9507c83a 	sub	r3,r18,r20
8020399c:	000f883a 	mov	r7,zero
802039a0:	01800284 	movi	r6,10
802039a4:	800b883a 	mov	r5,r16
802039a8:	e009883a 	mov	r4,fp
802039ac:	1cfff216 	blt	r3,r19,80203978 <__reset+0xfa1e3978>
802039b0:	1011883a 	mov	r8,r2
802039b4:	d8800617 	ldw	r2,24(sp)
802039b8:	0082370e 	bge	zero,r2,80204298 <_dtoa_r+0x1478>
802039bc:	d9000717 	ldw	r4,28(sp)
802039c0:	0025883a 	mov	r18,zero
802039c4:	20af883a 	add	r23,r4,r2
802039c8:	01800044 	movi	r6,1
802039cc:	800b883a 	mov	r5,r16
802039d0:	e009883a 	mov	r4,fp
802039d4:	da001715 	stw	r8,92(sp)
802039d8:	0206af40 	call	80206af4 <__lshift>
802039dc:	a80b883a 	mov	r5,r21
802039e0:	1009883a 	mov	r4,r2
802039e4:	d8800915 	stw	r2,36(sp)
802039e8:	0206c3c0 	call	80206c3c <__mcmp>
802039ec:	da001717 	ldw	r8,92(sp)
802039f0:	0081800e 	bge	zero,r2,80203ff4 <_dtoa_r+0x11d4>
802039f4:	b93fffc3 	ldbu	r4,-1(r23)
802039f8:	b8bfffc4 	addi	r2,r23,-1
802039fc:	1007883a 	mov	r3,r2
80203a00:	01800e44 	movi	r6,57
80203a04:	d9c00717 	ldw	r7,28(sp)
80203a08:	00000506 	br	80203a20 <_dtoa_r+0xc00>
80203a0c:	18ffffc4 	addi	r3,r3,-1
80203a10:	11c12326 	beq	r2,r7,80203ea0 <_dtoa_r+0x1080>
80203a14:	19000003 	ldbu	r4,0(r3)
80203a18:	102f883a 	mov	r23,r2
80203a1c:	10bfffc4 	addi	r2,r2,-1
80203a20:	21403fcc 	andi	r5,r4,255
80203a24:	2940201c 	xori	r5,r5,128
80203a28:	297fe004 	addi	r5,r5,-128
80203a2c:	29bff726 	beq	r5,r6,80203a0c <__reset+0xfa1e3a0c>
80203a30:	21000044 	addi	r4,r4,1
80203a34:	11000005 	stb	r4,0(r2)
80203a38:	a80b883a 	mov	r5,r21
80203a3c:	e009883a 	mov	r4,fp
80203a40:	020641c0 	call	8020641c <_Bfree>
80203a44:	883ea026 	beq	r17,zero,802034c8 <__reset+0xfa1e34c8>
80203a48:	90000426 	beq	r18,zero,80203a5c <_dtoa_r+0xc3c>
80203a4c:	94400326 	beq	r18,r17,80203a5c <_dtoa_r+0xc3c>
80203a50:	900b883a 	mov	r5,r18
80203a54:	e009883a 	mov	r4,fp
80203a58:	020641c0 	call	8020641c <_Bfree>
80203a5c:	880b883a 	mov	r5,r17
80203a60:	e009883a 	mov	r4,fp
80203a64:	020641c0 	call	8020641c <_Bfree>
80203a68:	003e9706 	br	802034c8 <__reset+0xfa1e34c8>
80203a6c:	01800044 	movi	r6,1
80203a70:	d9800e15 	stw	r6,56(sp)
80203a74:	003d9606 	br	802030d0 <__reset+0xfa1e30d0>
80203a78:	d8800817 	ldw	r2,32(sp)
80203a7c:	d8c00517 	ldw	r3,20(sp)
80203a80:	d8000d15 	stw	zero,52(sp)
80203a84:	10c5c83a 	sub	r2,r2,r3
80203a88:	00c9c83a 	sub	r4,zero,r3
80203a8c:	d8800815 	stw	r2,32(sp)
80203a90:	d9000a15 	stw	r4,40(sp)
80203a94:	003d9706 	br	802030f4 <__reset+0xfa1e30f4>
80203a98:	05adc83a 	sub	r22,zero,r22
80203a9c:	dd800815 	stw	r22,32(sp)
80203aa0:	002d883a 	mov	r22,zero
80203aa4:	003d8e06 	br	802030e0 <__reset+0xfa1e30e0>
80203aa8:	d9000517 	ldw	r4,20(sp)
80203aac:	020cc140 	call	8020cc14 <__floatsidf>
80203ab0:	100d883a 	mov	r6,r2
80203ab4:	180f883a 	mov	r7,r3
80203ab8:	a009883a 	mov	r4,r20
80203abc:	880b883a 	mov	r5,r17
80203ac0:	020b9280 	call	8020b928 <__eqdf2>
80203ac4:	103d7126 	beq	r2,zero,8020308c <__reset+0xfa1e308c>
80203ac8:	d9c00517 	ldw	r7,20(sp)
80203acc:	39ffffc4 	addi	r7,r7,-1
80203ad0:	d9c00515 	stw	r7,20(sp)
80203ad4:	003d6d06 	br	8020308c <__reset+0xfa1e308c>
80203ad8:	dd400a17 	ldw	r21,40(sp)
80203adc:	dd000817 	ldw	r20,32(sp)
80203ae0:	0023883a 	mov	r17,zero
80203ae4:	003f4806 	br	80203808 <__reset+0xfa1e3808>
80203ae8:	10e3c83a 	sub	r17,r2,r3
80203aec:	9448983a 	sll	r4,r18,r17
80203af0:	003d3206 	br	80202fbc <__reset+0xfa1e2fbc>
80203af4:	d8000e15 	stw	zero,56(sp)
80203af8:	003d7506 	br	802030d0 <__reset+0xfa1e30d0>
80203afc:	b005883a 	mov	r2,r22
80203b00:	003f4506 	br	80203818 <__reset+0xfa1e3818>
80203b04:	dc000915 	stw	r16,36(sp)
80203b08:	d9800a17 	ldw	r6,40(sp)
80203b0c:	d9400917 	ldw	r5,36(sp)
80203b10:	e009883a 	mov	r4,fp
80203b14:	02069b40 	call	802069b4 <__pow5mult>
80203b18:	1021883a 	mov	r16,r2
80203b1c:	003f5a06 	br	80203888 <__reset+0xfa1e3888>
80203b20:	01c00044 	movi	r7,1
80203b24:	d9c00b15 	stw	r7,44(sp)
80203b28:	d8802217 	ldw	r2,136(sp)
80203b2c:	0081280e 	bge	zero,r2,80203fd0 <_dtoa_r+0x11b0>
80203b30:	100d883a 	mov	r6,r2
80203b34:	1021883a 	mov	r16,r2
80203b38:	d8800c15 	stw	r2,48(sp)
80203b3c:	d8800615 	stw	r2,24(sp)
80203b40:	003d8806 	br	80203164 <__reset+0xfa1e3164>
80203b44:	d8800617 	ldw	r2,24(sp)
80203b48:	00be9b16 	blt	zero,r2,802035b8 <__reset+0xfa1e35b8>
80203b4c:	10010f1e 	bne	r2,zero,80203f8c <_dtoa_r+0x116c>
80203b50:	880b883a 	mov	r5,r17
80203b54:	000d883a 	mov	r6,zero
80203b58:	01d00534 	movhi	r7,16404
80203b5c:	8009883a 	mov	r4,r16
80203b60:	020bb800 	call	8020bb80 <__muldf3>
80203b64:	900d883a 	mov	r6,r18
80203b68:	980f883a 	mov	r7,r19
80203b6c:	1009883a 	mov	r4,r2
80203b70:	180b883a 	mov	r5,r3
80203b74:	020b9b00 	call	8020b9b0 <__gedf2>
80203b78:	002b883a 	mov	r21,zero
80203b7c:	0023883a 	mov	r17,zero
80203b80:	1000bf16 	blt	r2,zero,80203e80 <_dtoa_r+0x1060>
80203b84:	d9802217 	ldw	r6,136(sp)
80203b88:	ddc00717 	ldw	r23,28(sp)
80203b8c:	018c303a 	nor	r6,zero,r6
80203b90:	d9800515 	stw	r6,20(sp)
80203b94:	a80b883a 	mov	r5,r21
80203b98:	e009883a 	mov	r4,fp
80203b9c:	020641c0 	call	8020641c <_Bfree>
80203ba0:	883e4926 	beq	r17,zero,802034c8 <__reset+0xfa1e34c8>
80203ba4:	003fad06 	br	80203a5c <__reset+0xfa1e3a5c>
80203ba8:	d9c01117 	ldw	r7,68(sp)
80203bac:	3801bc26 	beq	r7,zero,802042a0 <_dtoa_r+0x1480>
80203bb0:	10810cc4 	addi	r2,r2,1075
80203bb4:	dd400a17 	ldw	r21,40(sp)
80203bb8:	dd000817 	ldw	r20,32(sp)
80203bbc:	003f0a06 	br	802037e8 <__reset+0xfa1e37e8>
80203bc0:	00800704 	movi	r2,28
80203bc4:	d9000817 	ldw	r4,32(sp)
80203bc8:	a0a9883a 	add	r20,r20,r2
80203bcc:	b0ad883a 	add	r22,r22,r2
80203bd0:	2089883a 	add	r4,r4,r2
80203bd4:	d9000815 	stw	r4,32(sp)
80203bd8:	003f5106 	br	80203920 <__reset+0xfa1e3920>
80203bdc:	d8c00317 	ldw	r3,12(sp)
80203be0:	b8c1fc0e 	bge	r23,r3,802043d4 <_dtoa_r+0x15b4>
80203be4:	0027883a 	mov	r19,zero
80203be8:	b805883a 	mov	r2,r23
80203bec:	003f3e06 	br	802038e8 <__reset+0xfa1e38e8>
80203bf0:	880b883a 	mov	r5,r17
80203bf4:	e009883a 	mov	r4,fp
80203bf8:	000f883a 	mov	r7,zero
80203bfc:	01800284 	movi	r6,10
80203c00:	02064440 	call	80206444 <__multadd>
80203c04:	d9000c17 	ldw	r4,48(sp)
80203c08:	1023883a 	mov	r17,r2
80203c0c:	0102040e 	bge	zero,r4,80204420 <_dtoa_r+0x1600>
80203c10:	d9000615 	stw	r4,24(sp)
80203c14:	0500050e 	bge	zero,r20,80203c2c <_dtoa_r+0xe0c>
80203c18:	880b883a 	mov	r5,r17
80203c1c:	a00d883a 	mov	r6,r20
80203c20:	e009883a 	mov	r4,fp
80203c24:	0206af40 	call	80206af4 <__lshift>
80203c28:	1023883a 	mov	r17,r2
80203c2c:	9801241e 	bne	r19,zero,802040c0 <_dtoa_r+0x12a0>
80203c30:	8829883a 	mov	r20,r17
80203c34:	d9000617 	ldw	r4,24(sp)
80203c38:	dcc00717 	ldw	r19,28(sp)
80203c3c:	9480004c 	andi	r18,r18,1
80203c40:	20bfffc4 	addi	r2,r4,-1
80203c44:	9885883a 	add	r2,r19,r2
80203c48:	d8800415 	stw	r2,16(sp)
80203c4c:	dc800615 	stw	r18,24(sp)
80203c50:	a80b883a 	mov	r5,r21
80203c54:	8009883a 	mov	r4,r16
80203c58:	0202c200 	call	80202c20 <quorem>
80203c5c:	880b883a 	mov	r5,r17
80203c60:	8009883a 	mov	r4,r16
80203c64:	102f883a 	mov	r23,r2
80203c68:	0206c3c0 	call	80206c3c <__mcmp>
80203c6c:	a80b883a 	mov	r5,r21
80203c70:	a00d883a 	mov	r6,r20
80203c74:	e009883a 	mov	r4,fp
80203c78:	102d883a 	mov	r22,r2
80203c7c:	0206c9c0 	call	80206c9c <__mdiff>
80203c80:	1007883a 	mov	r3,r2
80203c84:	10800317 	ldw	r2,12(r2)
80203c88:	bc800c04 	addi	r18,r23,48
80203c8c:	180b883a 	mov	r5,r3
80203c90:	10004e1e 	bne	r2,zero,80203dcc <_dtoa_r+0xfac>
80203c94:	8009883a 	mov	r4,r16
80203c98:	d8c01615 	stw	r3,88(sp)
80203c9c:	0206c3c0 	call	80206c3c <__mcmp>
80203ca0:	d8c01617 	ldw	r3,88(sp)
80203ca4:	e009883a 	mov	r4,fp
80203ca8:	d8801615 	stw	r2,88(sp)
80203cac:	180b883a 	mov	r5,r3
80203cb0:	020641c0 	call	8020641c <_Bfree>
80203cb4:	d8801617 	ldw	r2,88(sp)
80203cb8:	1000041e 	bne	r2,zero,80203ccc <_dtoa_r+0xeac>
80203cbc:	d9800317 	ldw	r6,12(sp)
80203cc0:	3000021e 	bne	r6,zero,80203ccc <_dtoa_r+0xeac>
80203cc4:	d8c00617 	ldw	r3,24(sp)
80203cc8:	18003726 	beq	r3,zero,80203da8 <_dtoa_r+0xf88>
80203ccc:	b0002016 	blt	r22,zero,80203d50 <_dtoa_r+0xf30>
80203cd0:	b000041e 	bne	r22,zero,80203ce4 <_dtoa_r+0xec4>
80203cd4:	d9000317 	ldw	r4,12(sp)
80203cd8:	2000021e 	bne	r4,zero,80203ce4 <_dtoa_r+0xec4>
80203cdc:	d8c00617 	ldw	r3,24(sp)
80203ce0:	18001b26 	beq	r3,zero,80203d50 <_dtoa_r+0xf30>
80203ce4:	00810716 	blt	zero,r2,80204104 <_dtoa_r+0x12e4>
80203ce8:	d8c00417 	ldw	r3,16(sp)
80203cec:	9d800044 	addi	r22,r19,1
80203cf0:	9c800005 	stb	r18,0(r19)
80203cf4:	b02f883a 	mov	r23,r22
80203cf8:	98c10626 	beq	r19,r3,80204114 <_dtoa_r+0x12f4>
80203cfc:	800b883a 	mov	r5,r16
80203d00:	000f883a 	mov	r7,zero
80203d04:	01800284 	movi	r6,10
80203d08:	e009883a 	mov	r4,fp
80203d0c:	02064440 	call	80206444 <__multadd>
80203d10:	1021883a 	mov	r16,r2
80203d14:	000f883a 	mov	r7,zero
80203d18:	01800284 	movi	r6,10
80203d1c:	880b883a 	mov	r5,r17
80203d20:	e009883a 	mov	r4,fp
80203d24:	8d002526 	beq	r17,r20,80203dbc <_dtoa_r+0xf9c>
80203d28:	02064440 	call	80206444 <__multadd>
80203d2c:	a00b883a 	mov	r5,r20
80203d30:	000f883a 	mov	r7,zero
80203d34:	01800284 	movi	r6,10
80203d38:	e009883a 	mov	r4,fp
80203d3c:	1023883a 	mov	r17,r2
80203d40:	02064440 	call	80206444 <__multadd>
80203d44:	1029883a 	mov	r20,r2
80203d48:	b027883a 	mov	r19,r22
80203d4c:	003fc006 	br	80203c50 <__reset+0xfa1e3c50>
80203d50:	9011883a 	mov	r8,r18
80203d54:	00800e0e 	bge	zero,r2,80203d90 <_dtoa_r+0xf70>
80203d58:	800b883a 	mov	r5,r16
80203d5c:	01800044 	movi	r6,1
80203d60:	e009883a 	mov	r4,fp
80203d64:	da001715 	stw	r8,92(sp)
80203d68:	0206af40 	call	80206af4 <__lshift>
80203d6c:	a80b883a 	mov	r5,r21
80203d70:	1009883a 	mov	r4,r2
80203d74:	1021883a 	mov	r16,r2
80203d78:	0206c3c0 	call	80206c3c <__mcmp>
80203d7c:	da001717 	ldw	r8,92(sp)
80203d80:	0081960e 	bge	zero,r2,802043dc <_dtoa_r+0x15bc>
80203d84:	00800e44 	movi	r2,57
80203d88:	40817026 	beq	r8,r2,8020434c <_dtoa_r+0x152c>
80203d8c:	ba000c44 	addi	r8,r23,49
80203d90:	8825883a 	mov	r18,r17
80203d94:	9dc00044 	addi	r23,r19,1
80203d98:	9a000005 	stb	r8,0(r19)
80203d9c:	a023883a 	mov	r17,r20
80203da0:	dc000915 	stw	r16,36(sp)
80203da4:	003f2406 	br	80203a38 <__reset+0xfa1e3a38>
80203da8:	00800e44 	movi	r2,57
80203dac:	9011883a 	mov	r8,r18
80203db0:	90816626 	beq	r18,r2,8020434c <_dtoa_r+0x152c>
80203db4:	05bff516 	blt	zero,r22,80203d8c <__reset+0xfa1e3d8c>
80203db8:	003ff506 	br	80203d90 <__reset+0xfa1e3d90>
80203dbc:	02064440 	call	80206444 <__multadd>
80203dc0:	1023883a 	mov	r17,r2
80203dc4:	1029883a 	mov	r20,r2
80203dc8:	003fdf06 	br	80203d48 <__reset+0xfa1e3d48>
80203dcc:	e009883a 	mov	r4,fp
80203dd0:	020641c0 	call	8020641c <_Bfree>
80203dd4:	00800044 	movi	r2,1
80203dd8:	003fbc06 	br	80203ccc <__reset+0xfa1e3ccc>
80203ddc:	a80b883a 	mov	r5,r21
80203de0:	8009883a 	mov	r4,r16
80203de4:	0206c3c0 	call	80206c3c <__mcmp>
80203de8:	103edb0e 	bge	r2,zero,80203958 <__reset+0xfa1e3958>
80203dec:	800b883a 	mov	r5,r16
80203df0:	000f883a 	mov	r7,zero
80203df4:	01800284 	movi	r6,10
80203df8:	e009883a 	mov	r4,fp
80203dfc:	02064440 	call	80206444 <__multadd>
80203e00:	1021883a 	mov	r16,r2
80203e04:	d8800517 	ldw	r2,20(sp)
80203e08:	d8c00b17 	ldw	r3,44(sp)
80203e0c:	10bfffc4 	addi	r2,r2,-1
80203e10:	d8800515 	stw	r2,20(sp)
80203e14:	183f761e 	bne	r3,zero,80203bf0 <__reset+0xfa1e3bf0>
80203e18:	d9000c17 	ldw	r4,48(sp)
80203e1c:	0101730e 	bge	zero,r4,802043ec <_dtoa_r+0x15cc>
80203e20:	d9000615 	stw	r4,24(sp)
80203e24:	003ed006 	br	80203968 <__reset+0xfa1e3968>
80203e28:	00800084 	movi	r2,2
80203e2c:	3081861e 	bne	r6,r2,80204448 <_dtoa_r+0x1628>
80203e30:	d8000b15 	stw	zero,44(sp)
80203e34:	003f3c06 	br	80203b28 <__reset+0xfa1e3b28>
80203e38:	dc000917 	ldw	r16,36(sp)
80203e3c:	003e9206 	br	80203888 <__reset+0xfa1e3888>
80203e40:	d9c00317 	ldw	r7,12(sp)
80203e44:	00800084 	movi	r2,2
80203e48:	11fec50e 	bge	r2,r7,80203960 <__reset+0xfa1e3960>
80203e4c:	d9000617 	ldw	r4,24(sp)
80203e50:	20013c1e 	bne	r4,zero,80204344 <_dtoa_r+0x1524>
80203e54:	a80b883a 	mov	r5,r21
80203e58:	000f883a 	mov	r7,zero
80203e5c:	01800144 	movi	r6,5
80203e60:	e009883a 	mov	r4,fp
80203e64:	02064440 	call	80206444 <__multadd>
80203e68:	100b883a 	mov	r5,r2
80203e6c:	8009883a 	mov	r4,r16
80203e70:	102b883a 	mov	r21,r2
80203e74:	0206c3c0 	call	80206c3c <__mcmp>
80203e78:	dc000915 	stw	r16,36(sp)
80203e7c:	00bf410e 	bge	zero,r2,80203b84 <__reset+0xfa1e3b84>
80203e80:	d9c00717 	ldw	r7,28(sp)
80203e84:	00800c44 	movi	r2,49
80203e88:	38800005 	stb	r2,0(r7)
80203e8c:	d8800517 	ldw	r2,20(sp)
80203e90:	3dc00044 	addi	r23,r7,1
80203e94:	10800044 	addi	r2,r2,1
80203e98:	d8800515 	stw	r2,20(sp)
80203e9c:	003f3d06 	br	80203b94 <__reset+0xfa1e3b94>
80203ea0:	d9800517 	ldw	r6,20(sp)
80203ea4:	d9c00717 	ldw	r7,28(sp)
80203ea8:	00800c44 	movi	r2,49
80203eac:	31800044 	addi	r6,r6,1
80203eb0:	d9800515 	stw	r6,20(sp)
80203eb4:	38800005 	stb	r2,0(r7)
80203eb8:	003edf06 	br	80203a38 <__reset+0xfa1e3a38>
80203ebc:	d8000b15 	stw	zero,44(sp)
80203ec0:	003c9f06 	br	80203140 <__reset+0xfa1e3140>
80203ec4:	903e7e1e 	bne	r18,zero,802038c0 <__reset+0xfa1e38c0>
80203ec8:	00800434 	movhi	r2,16
80203ecc:	10bfffc4 	addi	r2,r2,-1
80203ed0:	9884703a 	and	r2,r19,r2
80203ed4:	1000ea1e 	bne	r2,zero,80204280 <_dtoa_r+0x1460>
80203ed8:	9cdffc2c 	andhi	r19,r19,32752
80203edc:	9800e826 	beq	r19,zero,80204280 <_dtoa_r+0x1460>
80203ee0:	d9c00817 	ldw	r7,32(sp)
80203ee4:	b5800044 	addi	r22,r22,1
80203ee8:	04c00044 	movi	r19,1
80203eec:	39c00044 	addi	r7,r7,1
80203ef0:	d9c00815 	stw	r7,32(sp)
80203ef4:	d8800d17 	ldw	r2,52(sp)
80203ef8:	103e721e 	bne	r2,zero,802038c4 <__reset+0xfa1e38c4>
80203efc:	00800044 	movi	r2,1
80203f00:	003e7906 	br	802038e8 <__reset+0xfa1e38e8>
80203f04:	8009883a 	mov	r4,r16
80203f08:	020cc140 	call	8020cc14 <__floatsidf>
80203f0c:	d9800f17 	ldw	r6,60(sp)
80203f10:	d9c01017 	ldw	r7,64(sp)
80203f14:	1009883a 	mov	r4,r2
80203f18:	180b883a 	mov	r5,r3
80203f1c:	020bb800 	call	8020bb80 <__muldf3>
80203f20:	000d883a 	mov	r6,zero
80203f24:	01d00734 	movhi	r7,16412
80203f28:	1009883a 	mov	r4,r2
80203f2c:	180b883a 	mov	r5,r3
80203f30:	020a7940 	call	8020a794 <__adddf3>
80203f34:	047f3034 	movhi	r17,64704
80203f38:	1021883a 	mov	r16,r2
80203f3c:	1c63883a 	add	r17,r3,r17
80203f40:	d9000f17 	ldw	r4,60(sp)
80203f44:	d9401017 	ldw	r5,64(sp)
80203f48:	000d883a 	mov	r6,zero
80203f4c:	01d00534 	movhi	r7,16404
80203f50:	020c2980 	call	8020c298 <__subdf3>
80203f54:	800d883a 	mov	r6,r16
80203f58:	880f883a 	mov	r7,r17
80203f5c:	1009883a 	mov	r4,r2
80203f60:	180b883a 	mov	r5,r3
80203f64:	102b883a 	mov	r21,r2
80203f68:	1829883a 	mov	r20,r3
80203f6c:	020b9b00 	call	8020b9b0 <__gedf2>
80203f70:	00806c16 	blt	zero,r2,80204124 <_dtoa_r+0x1304>
80203f74:	89e0003c 	xorhi	r7,r17,32768
80203f78:	800d883a 	mov	r6,r16
80203f7c:	a809883a 	mov	r4,r21
80203f80:	a00b883a 	mov	r5,r20
80203f84:	020ba8c0 	call	8020ba8c <__ledf2>
80203f88:	103d7e0e 	bge	r2,zero,80203584 <__reset+0xfa1e3584>
80203f8c:	002b883a 	mov	r21,zero
80203f90:	0023883a 	mov	r17,zero
80203f94:	003efb06 	br	80203b84 <__reset+0xfa1e3b84>
80203f98:	d8800717 	ldw	r2,28(sp)
80203f9c:	003bd006 	br	80202ee0 <__reset+0xfa1e2ee0>
80203fa0:	d9000a17 	ldw	r4,40(sp)
80203fa4:	d9800d17 	ldw	r6,52(sp)
80203fa8:	dd400a15 	stw	r21,40(sp)
80203fac:	a905c83a 	sub	r2,r21,r4
80203fb0:	308d883a 	add	r6,r6,r2
80203fb4:	d9800d15 	stw	r6,52(sp)
80203fb8:	002b883a 	mov	r21,zero
80203fbc:	003e0606 	br	802037d8 <__reset+0xfa1e37d8>
80203fc0:	9023883a 	mov	r17,r18
80203fc4:	9829883a 	mov	r20,r19
80203fc8:	04000084 	movi	r16,2
80203fcc:	003c9206 	br	80203218 <__reset+0xfa1e3218>
80203fd0:	04000044 	movi	r16,1
80203fd4:	dc000c15 	stw	r16,48(sp)
80203fd8:	dc000615 	stw	r16,24(sp)
80203fdc:	dc002215 	stw	r16,136(sp)
80203fe0:	e0001115 	stw	zero,68(fp)
80203fe4:	000b883a 	mov	r5,zero
80203fe8:	003c6906 	br	80203190 <__reset+0xfa1e3190>
80203fec:	3021883a 	mov	r16,r6
80203ff0:	003ffb06 	br	80203fe0 <__reset+0xfa1e3fe0>
80203ff4:	1000021e 	bne	r2,zero,80204000 <_dtoa_r+0x11e0>
80203ff8:	4200004c 	andi	r8,r8,1
80203ffc:	403e7d1e 	bne	r8,zero,802039f4 <__reset+0xfa1e39f4>
80204000:	01000c04 	movi	r4,48
80204004:	00000106 	br	8020400c <_dtoa_r+0x11ec>
80204008:	102f883a 	mov	r23,r2
8020400c:	b8bfffc4 	addi	r2,r23,-1
80204010:	10c00007 	ldb	r3,0(r2)
80204014:	193ffc26 	beq	r3,r4,80204008 <__reset+0xfa1e4008>
80204018:	003e8706 	br	80203a38 <__reset+0xfa1e3a38>
8020401c:	d8800517 	ldw	r2,20(sp)
80204020:	00a3c83a 	sub	r17,zero,r2
80204024:	8800a426 	beq	r17,zero,802042b8 <_dtoa_r+0x1498>
80204028:	888003cc 	andi	r2,r17,15
8020402c:	100490fa 	slli	r2,r2,3
80204030:	00e00874 	movhi	r3,32801
80204034:	18c68b04 	addi	r3,r3,6700
80204038:	1885883a 	add	r2,r3,r2
8020403c:	11800017 	ldw	r6,0(r2)
80204040:	11c00117 	ldw	r7,4(r2)
80204044:	9009883a 	mov	r4,r18
80204048:	980b883a 	mov	r5,r19
8020404c:	8823d13a 	srai	r17,r17,4
80204050:	020bb800 	call	8020bb80 <__muldf3>
80204054:	d8800f15 	stw	r2,60(sp)
80204058:	d8c01015 	stw	r3,64(sp)
8020405c:	8800e826 	beq	r17,zero,80204400 <_dtoa_r+0x15e0>
80204060:	05200874 	movhi	r20,32801
80204064:	a5068104 	addi	r20,r20,6660
80204068:	04000084 	movi	r16,2
8020406c:	8980004c 	andi	r6,r17,1
80204070:	1009883a 	mov	r4,r2
80204074:	8823d07a 	srai	r17,r17,1
80204078:	180b883a 	mov	r5,r3
8020407c:	30000426 	beq	r6,zero,80204090 <_dtoa_r+0x1270>
80204080:	a1800017 	ldw	r6,0(r20)
80204084:	a1c00117 	ldw	r7,4(r20)
80204088:	84000044 	addi	r16,r16,1
8020408c:	020bb800 	call	8020bb80 <__muldf3>
80204090:	a5000204 	addi	r20,r20,8
80204094:	883ff51e 	bne	r17,zero,8020406c <__reset+0xfa1e406c>
80204098:	d8800f15 	stw	r2,60(sp)
8020409c:	d8c01015 	stw	r3,64(sp)
802040a0:	003c7606 	br	8020327c <__reset+0xfa1e327c>
802040a4:	00c00c04 	movi	r3,48
802040a8:	10c00005 	stb	r3,0(r2)
802040ac:	d8c00517 	ldw	r3,20(sp)
802040b0:	bd3fffc3 	ldbu	r20,-1(r23)
802040b4:	18c00044 	addi	r3,r3,1
802040b8:	d8c00515 	stw	r3,20(sp)
802040bc:	003db906 	br	802037a4 <__reset+0xfa1e37a4>
802040c0:	89400117 	ldw	r5,4(r17)
802040c4:	e009883a 	mov	r4,fp
802040c8:	02063740 	call	80206374 <_Balloc>
802040cc:	89800417 	ldw	r6,16(r17)
802040d0:	89400304 	addi	r5,r17,12
802040d4:	11000304 	addi	r4,r2,12
802040d8:	31800084 	addi	r6,r6,2
802040dc:	318d883a 	add	r6,r6,r6
802040e0:	318d883a 	add	r6,r6,r6
802040e4:	1027883a 	mov	r19,r2
802040e8:	02004dc0 	call	802004dc <memcpy>
802040ec:	01800044 	movi	r6,1
802040f0:	980b883a 	mov	r5,r19
802040f4:	e009883a 	mov	r4,fp
802040f8:	0206af40 	call	80206af4 <__lshift>
802040fc:	1029883a 	mov	r20,r2
80204100:	003ecc06 	br	80203c34 <__reset+0xfa1e3c34>
80204104:	00800e44 	movi	r2,57
80204108:	90809026 	beq	r18,r2,8020434c <_dtoa_r+0x152c>
8020410c:	92000044 	addi	r8,r18,1
80204110:	003f1f06 	br	80203d90 <__reset+0xfa1e3d90>
80204114:	9011883a 	mov	r8,r18
80204118:	8825883a 	mov	r18,r17
8020411c:	a023883a 	mov	r17,r20
80204120:	003e2906 	br	802039c8 <__reset+0xfa1e39c8>
80204124:	002b883a 	mov	r21,zero
80204128:	0023883a 	mov	r17,zero
8020412c:	003f5406 	br	80203e80 <__reset+0xfa1e3e80>
80204130:	61bfffc4 	addi	r6,r12,-1
80204134:	300490fa 	slli	r2,r6,3
80204138:	00e00874 	movhi	r3,32801
8020413c:	18c68b04 	addi	r3,r3,6700
80204140:	1885883a 	add	r2,r3,r2
80204144:	11000017 	ldw	r4,0(r2)
80204148:	11400117 	ldw	r5,4(r2)
8020414c:	d8800717 	ldw	r2,28(sp)
80204150:	880f883a 	mov	r7,r17
80204154:	d9801215 	stw	r6,72(sp)
80204158:	800d883a 	mov	r6,r16
8020415c:	db001615 	stw	r12,88(sp)
80204160:	15c00044 	addi	r23,r2,1
80204164:	020bb800 	call	8020bb80 <__muldf3>
80204168:	d9401017 	ldw	r5,64(sp)
8020416c:	d9000f17 	ldw	r4,60(sp)
80204170:	d8c01515 	stw	r3,84(sp)
80204174:	d8801415 	stw	r2,80(sp)
80204178:	020cb940 	call	8020cb94 <__fixdfsi>
8020417c:	1009883a 	mov	r4,r2
80204180:	1021883a 	mov	r16,r2
80204184:	020cc140 	call	8020cc14 <__floatsidf>
80204188:	d9000f17 	ldw	r4,60(sp)
8020418c:	d9401017 	ldw	r5,64(sp)
80204190:	100d883a 	mov	r6,r2
80204194:	180f883a 	mov	r7,r3
80204198:	020c2980 	call	8020c298 <__subdf3>
8020419c:	1829883a 	mov	r20,r3
802041a0:	d8c00717 	ldw	r3,28(sp)
802041a4:	84000c04 	addi	r16,r16,48
802041a8:	1023883a 	mov	r17,r2
802041ac:	1c000005 	stb	r16,0(r3)
802041b0:	db001617 	ldw	r12,88(sp)
802041b4:	00800044 	movi	r2,1
802041b8:	60802226 	beq	r12,r2,80204244 <_dtoa_r+0x1424>
802041bc:	d9c00717 	ldw	r7,28(sp)
802041c0:	8805883a 	mov	r2,r17
802041c4:	b82b883a 	mov	r21,r23
802041c8:	3b19883a 	add	r12,r7,r12
802041cc:	6023883a 	mov	r17,r12
802041d0:	a007883a 	mov	r3,r20
802041d4:	dc800f15 	stw	r18,60(sp)
802041d8:	000d883a 	mov	r6,zero
802041dc:	01d00934 	movhi	r7,16420
802041e0:	1009883a 	mov	r4,r2
802041e4:	180b883a 	mov	r5,r3
802041e8:	020bb800 	call	8020bb80 <__muldf3>
802041ec:	180b883a 	mov	r5,r3
802041f0:	1009883a 	mov	r4,r2
802041f4:	1829883a 	mov	r20,r3
802041f8:	1025883a 	mov	r18,r2
802041fc:	020cb940 	call	8020cb94 <__fixdfsi>
80204200:	1009883a 	mov	r4,r2
80204204:	1021883a 	mov	r16,r2
80204208:	020cc140 	call	8020cc14 <__floatsidf>
8020420c:	100d883a 	mov	r6,r2
80204210:	180f883a 	mov	r7,r3
80204214:	9009883a 	mov	r4,r18
80204218:	a00b883a 	mov	r5,r20
8020421c:	84000c04 	addi	r16,r16,48
80204220:	020c2980 	call	8020c298 <__subdf3>
80204224:	ad400044 	addi	r21,r21,1
80204228:	ac3fffc5 	stb	r16,-1(r21)
8020422c:	ac7fea1e 	bne	r21,r17,802041d8 <__reset+0xfa1e41d8>
80204230:	1023883a 	mov	r17,r2
80204234:	d8801217 	ldw	r2,72(sp)
80204238:	dc800f17 	ldw	r18,60(sp)
8020423c:	1829883a 	mov	r20,r3
80204240:	b8af883a 	add	r23,r23,r2
80204244:	d9001417 	ldw	r4,80(sp)
80204248:	d9401517 	ldw	r5,84(sp)
8020424c:	000d883a 	mov	r6,zero
80204250:	01cff834 	movhi	r7,16352
80204254:	020a7940 	call	8020a794 <__adddf3>
80204258:	880d883a 	mov	r6,r17
8020425c:	a00f883a 	mov	r7,r20
80204260:	1009883a 	mov	r4,r2
80204264:	180b883a 	mov	r5,r3
80204268:	020ba8c0 	call	8020ba8c <__ledf2>
8020426c:	10003e0e 	bge	r2,zero,80204368 <_dtoa_r+0x1548>
80204270:	d9001317 	ldw	r4,76(sp)
80204274:	bd3fffc3 	ldbu	r20,-1(r23)
80204278:	d9000515 	stw	r4,20(sp)
8020427c:	003d3b06 	br	8020376c <__reset+0xfa1e376c>
80204280:	0027883a 	mov	r19,zero
80204284:	003f1b06 	br	80203ef4 <__reset+0xfa1e3ef4>
80204288:	d8800817 	ldw	r2,32(sp)
8020428c:	11e9c83a 	sub	r20,r2,r7
80204290:	0005883a 	mov	r2,zero
80204294:	003d5406 	br	802037e8 <__reset+0xfa1e37e8>
80204298:	00800044 	movi	r2,1
8020429c:	003dc706 	br	802039bc <__reset+0xfa1e39bc>
802042a0:	d8c00217 	ldw	r3,8(sp)
802042a4:	00800d84 	movi	r2,54
802042a8:	dd400a17 	ldw	r21,40(sp)
802042ac:	10c5c83a 	sub	r2,r2,r3
802042b0:	dd000817 	ldw	r20,32(sp)
802042b4:	003d4c06 	br	802037e8 <__reset+0xfa1e37e8>
802042b8:	dc800f15 	stw	r18,60(sp)
802042bc:	dcc01015 	stw	r19,64(sp)
802042c0:	04000084 	movi	r16,2
802042c4:	003bed06 	br	8020327c <__reset+0xfa1e327c>
802042c8:	d9000617 	ldw	r4,24(sp)
802042cc:	203f0d26 	beq	r4,zero,80203f04 <__reset+0xfa1e3f04>
802042d0:	d9800c17 	ldw	r6,48(sp)
802042d4:	01bcab0e 	bge	zero,r6,80203584 <__reset+0xfa1e3584>
802042d8:	d9401017 	ldw	r5,64(sp)
802042dc:	d9000f17 	ldw	r4,60(sp)
802042e0:	000d883a 	mov	r6,zero
802042e4:	01d00934 	movhi	r7,16420
802042e8:	020bb800 	call	8020bb80 <__muldf3>
802042ec:	81000044 	addi	r4,r16,1
802042f0:	d8800f15 	stw	r2,60(sp)
802042f4:	d8c01015 	stw	r3,64(sp)
802042f8:	020cc140 	call	8020cc14 <__floatsidf>
802042fc:	d9800f17 	ldw	r6,60(sp)
80204300:	d9c01017 	ldw	r7,64(sp)
80204304:	1009883a 	mov	r4,r2
80204308:	180b883a 	mov	r5,r3
8020430c:	020bb800 	call	8020bb80 <__muldf3>
80204310:	01d00734 	movhi	r7,16412
80204314:	000d883a 	mov	r6,zero
80204318:	1009883a 	mov	r4,r2
8020431c:	180b883a 	mov	r5,r3
80204320:	020a7940 	call	8020a794 <__adddf3>
80204324:	d9c00517 	ldw	r7,20(sp)
80204328:	047f3034 	movhi	r17,64704
8020432c:	1021883a 	mov	r16,r2
80204330:	39ffffc4 	addi	r7,r7,-1
80204334:	d9c01315 	stw	r7,76(sp)
80204338:	1c63883a 	add	r17,r3,r17
8020433c:	db000c17 	ldw	r12,48(sp)
80204340:	003bea06 	br	802032ec <__reset+0xfa1e32ec>
80204344:	dc000915 	stw	r16,36(sp)
80204348:	003e0e06 	br	80203b84 <__reset+0xfa1e3b84>
8020434c:	01000e44 	movi	r4,57
80204350:	8825883a 	mov	r18,r17
80204354:	9dc00044 	addi	r23,r19,1
80204358:	99000005 	stb	r4,0(r19)
8020435c:	a023883a 	mov	r17,r20
80204360:	dc000915 	stw	r16,36(sp)
80204364:	003da406 	br	802039f8 <__reset+0xfa1e39f8>
80204368:	d9801417 	ldw	r6,80(sp)
8020436c:	d9c01517 	ldw	r7,84(sp)
80204370:	0009883a 	mov	r4,zero
80204374:	014ff834 	movhi	r5,16352
80204378:	020c2980 	call	8020c298 <__subdf3>
8020437c:	880d883a 	mov	r6,r17
80204380:	a00f883a 	mov	r7,r20
80204384:	1009883a 	mov	r4,r2
80204388:	180b883a 	mov	r5,r3
8020438c:	020b9b00 	call	8020b9b0 <__gedf2>
80204390:	00bc7c0e 	bge	zero,r2,80203584 <__reset+0xfa1e3584>
80204394:	01000c04 	movi	r4,48
80204398:	00000106 	br	802043a0 <_dtoa_r+0x1580>
8020439c:	102f883a 	mov	r23,r2
802043a0:	b8bfffc4 	addi	r2,r23,-1
802043a4:	10c00007 	ldb	r3,0(r2)
802043a8:	193ffc26 	beq	r3,r4,8020439c <__reset+0xfa1e439c>
802043ac:	d9801317 	ldw	r6,76(sp)
802043b0:	d9800515 	stw	r6,20(sp)
802043b4:	003c4406 	br	802034c8 <__reset+0xfa1e34c8>
802043b8:	d9801317 	ldw	r6,76(sp)
802043bc:	d9800515 	stw	r6,20(sp)
802043c0:	003cea06 	br	8020376c <__reset+0xfa1e376c>
802043c4:	dd800f17 	ldw	r22,60(sp)
802043c8:	dcc01017 	ldw	r19,64(sp)
802043cc:	dc801217 	ldw	r18,72(sp)
802043d0:	003c6c06 	br	80203584 <__reset+0xfa1e3584>
802043d4:	903e031e 	bne	r18,zero,80203be4 <__reset+0xfa1e3be4>
802043d8:	003ebb06 	br	80203ec8 <__reset+0xfa1e3ec8>
802043dc:	103e6c1e 	bne	r2,zero,80203d90 <__reset+0xfa1e3d90>
802043e0:	4080004c 	andi	r2,r8,1
802043e4:	103e6a26 	beq	r2,zero,80203d90 <__reset+0xfa1e3d90>
802043e8:	003e6606 	br	80203d84 <__reset+0xfa1e3d84>
802043ec:	d8c00317 	ldw	r3,12(sp)
802043f0:	00800084 	movi	r2,2
802043f4:	10c02916 	blt	r2,r3,8020449c <_dtoa_r+0x167c>
802043f8:	d9000c17 	ldw	r4,48(sp)
802043fc:	003e8806 	br	80203e20 <__reset+0xfa1e3e20>
80204400:	04000084 	movi	r16,2
80204404:	003b9d06 	br	8020327c <__reset+0xfa1e327c>
80204408:	d9001317 	ldw	r4,76(sp)
8020440c:	d9000515 	stw	r4,20(sp)
80204410:	003cd606 	br	8020376c <__reset+0xfa1e376c>
80204414:	d8801317 	ldw	r2,76(sp)
80204418:	d8800515 	stw	r2,20(sp)
8020441c:	003c2a06 	br	802034c8 <__reset+0xfa1e34c8>
80204420:	d9800317 	ldw	r6,12(sp)
80204424:	00800084 	movi	r2,2
80204428:	11801516 	blt	r2,r6,80204480 <_dtoa_r+0x1660>
8020442c:	d9c00c17 	ldw	r7,48(sp)
80204430:	d9c00615 	stw	r7,24(sp)
80204434:	003df706 	br	80203c14 <__reset+0xfa1e3c14>
80204438:	193d3926 	beq	r3,r4,80203920 <__reset+0xfa1e3920>
8020443c:	00c00f04 	movi	r3,60
80204440:	1885c83a 	sub	r2,r3,r2
80204444:	003ddf06 	br	80203bc4 <__reset+0xfa1e3bc4>
80204448:	e009883a 	mov	r4,fp
8020444c:	e0001115 	stw	zero,68(fp)
80204450:	000b883a 	mov	r5,zero
80204454:	02063740 	call	80206374 <_Balloc>
80204458:	d8800715 	stw	r2,28(sp)
8020445c:	d8c00717 	ldw	r3,28(sp)
80204460:	00bfffc4 	movi	r2,-1
80204464:	01000044 	movi	r4,1
80204468:	d8800c15 	stw	r2,48(sp)
8020446c:	e0c01015 	stw	r3,64(fp)
80204470:	d9000b15 	stw	r4,44(sp)
80204474:	d8800615 	stw	r2,24(sp)
80204478:	d8002215 	stw	zero,136(sp)
8020447c:	003c4106 	br	80203584 <__reset+0xfa1e3584>
80204480:	d8c00c17 	ldw	r3,48(sp)
80204484:	d8c00615 	stw	r3,24(sp)
80204488:	003e7006 	br	80203e4c <__reset+0xfa1e3e4c>
8020448c:	04400044 	movi	r17,1
80204490:	003b2006 	br	80203114 <__reset+0xfa1e3114>
80204494:	000b883a 	mov	r5,zero
80204498:	003b3d06 	br	80203190 <__reset+0xfa1e3190>
8020449c:	d8800c17 	ldw	r2,48(sp)
802044a0:	d8800615 	stw	r2,24(sp)
802044a4:	003e6906 	br	80203e4c <__reset+0xfa1e3e4c>

802044a8 <__sflush_r>:
802044a8:	2880030b 	ldhu	r2,12(r5)
802044ac:	defffb04 	addi	sp,sp,-20
802044b0:	dcc00315 	stw	r19,12(sp)
802044b4:	dc400115 	stw	r17,4(sp)
802044b8:	dfc00415 	stw	ra,16(sp)
802044bc:	dc800215 	stw	r18,8(sp)
802044c0:	dc000015 	stw	r16,0(sp)
802044c4:	10c0020c 	andi	r3,r2,8
802044c8:	2823883a 	mov	r17,r5
802044cc:	2027883a 	mov	r19,r4
802044d0:	1800311e 	bne	r3,zero,80204598 <__sflush_r+0xf0>
802044d4:	28c00117 	ldw	r3,4(r5)
802044d8:	10820014 	ori	r2,r2,2048
802044dc:	2880030d 	sth	r2,12(r5)
802044e0:	00c04b0e 	bge	zero,r3,80204610 <__sflush_r+0x168>
802044e4:	8a000a17 	ldw	r8,40(r17)
802044e8:	40002326 	beq	r8,zero,80204578 <__sflush_r+0xd0>
802044ec:	9c000017 	ldw	r16,0(r19)
802044f0:	10c4000c 	andi	r3,r2,4096
802044f4:	98000015 	stw	zero,0(r19)
802044f8:	18004826 	beq	r3,zero,8020461c <__sflush_r+0x174>
802044fc:	89801417 	ldw	r6,80(r17)
80204500:	10c0010c 	andi	r3,r2,4
80204504:	18000626 	beq	r3,zero,80204520 <__sflush_r+0x78>
80204508:	88c00117 	ldw	r3,4(r17)
8020450c:	88800c17 	ldw	r2,48(r17)
80204510:	30cdc83a 	sub	r6,r6,r3
80204514:	10000226 	beq	r2,zero,80204520 <__sflush_r+0x78>
80204518:	88800f17 	ldw	r2,60(r17)
8020451c:	308dc83a 	sub	r6,r6,r2
80204520:	89400717 	ldw	r5,28(r17)
80204524:	000f883a 	mov	r7,zero
80204528:	9809883a 	mov	r4,r19
8020452c:	403ee83a 	callr	r8
80204530:	00ffffc4 	movi	r3,-1
80204534:	10c04426 	beq	r2,r3,80204648 <__sflush_r+0x1a0>
80204538:	88c0030b 	ldhu	r3,12(r17)
8020453c:	89000417 	ldw	r4,16(r17)
80204540:	88000115 	stw	zero,4(r17)
80204544:	197dffcc 	andi	r5,r3,63487
80204548:	8940030d 	sth	r5,12(r17)
8020454c:	89000015 	stw	r4,0(r17)
80204550:	18c4000c 	andi	r3,r3,4096
80204554:	18002c1e 	bne	r3,zero,80204608 <__sflush_r+0x160>
80204558:	89400c17 	ldw	r5,48(r17)
8020455c:	9c000015 	stw	r16,0(r19)
80204560:	28000526 	beq	r5,zero,80204578 <__sflush_r+0xd0>
80204564:	88801004 	addi	r2,r17,64
80204568:	28800226 	beq	r5,r2,80204574 <__sflush_r+0xcc>
8020456c:	9809883a 	mov	r4,r19
80204570:	0204c140 	call	80204c14 <_free_r>
80204574:	88000c15 	stw	zero,48(r17)
80204578:	0005883a 	mov	r2,zero
8020457c:	dfc00417 	ldw	ra,16(sp)
80204580:	dcc00317 	ldw	r19,12(sp)
80204584:	dc800217 	ldw	r18,8(sp)
80204588:	dc400117 	ldw	r17,4(sp)
8020458c:	dc000017 	ldw	r16,0(sp)
80204590:	dec00504 	addi	sp,sp,20
80204594:	f800283a 	ret
80204598:	2c800417 	ldw	r18,16(r5)
8020459c:	903ff626 	beq	r18,zero,80204578 <__reset+0xfa1e4578>
802045a0:	2c000017 	ldw	r16,0(r5)
802045a4:	108000cc 	andi	r2,r2,3
802045a8:	2c800015 	stw	r18,0(r5)
802045ac:	84a1c83a 	sub	r16,r16,r18
802045b0:	1000131e 	bne	r2,zero,80204600 <__sflush_r+0x158>
802045b4:	28800517 	ldw	r2,20(r5)
802045b8:	88800215 	stw	r2,8(r17)
802045bc:	04000316 	blt	zero,r16,802045cc <__sflush_r+0x124>
802045c0:	003fed06 	br	80204578 <__reset+0xfa1e4578>
802045c4:	90a5883a 	add	r18,r18,r2
802045c8:	043feb0e 	bge	zero,r16,80204578 <__reset+0xfa1e4578>
802045cc:	88800917 	ldw	r2,36(r17)
802045d0:	89400717 	ldw	r5,28(r17)
802045d4:	800f883a 	mov	r7,r16
802045d8:	900d883a 	mov	r6,r18
802045dc:	9809883a 	mov	r4,r19
802045e0:	103ee83a 	callr	r2
802045e4:	80a1c83a 	sub	r16,r16,r2
802045e8:	00bff616 	blt	zero,r2,802045c4 <__reset+0xfa1e45c4>
802045ec:	88c0030b 	ldhu	r3,12(r17)
802045f0:	00bfffc4 	movi	r2,-1
802045f4:	18c01014 	ori	r3,r3,64
802045f8:	88c0030d 	sth	r3,12(r17)
802045fc:	003fdf06 	br	8020457c <__reset+0xfa1e457c>
80204600:	0005883a 	mov	r2,zero
80204604:	003fec06 	br	802045b8 <__reset+0xfa1e45b8>
80204608:	88801415 	stw	r2,80(r17)
8020460c:	003fd206 	br	80204558 <__reset+0xfa1e4558>
80204610:	28c00f17 	ldw	r3,60(r5)
80204614:	00ffb316 	blt	zero,r3,802044e4 <__reset+0xfa1e44e4>
80204618:	003fd706 	br	80204578 <__reset+0xfa1e4578>
8020461c:	89400717 	ldw	r5,28(r17)
80204620:	000d883a 	mov	r6,zero
80204624:	01c00044 	movi	r7,1
80204628:	9809883a 	mov	r4,r19
8020462c:	403ee83a 	callr	r8
80204630:	100d883a 	mov	r6,r2
80204634:	00bfffc4 	movi	r2,-1
80204638:	30801426 	beq	r6,r2,8020468c <__sflush_r+0x1e4>
8020463c:	8880030b 	ldhu	r2,12(r17)
80204640:	8a000a17 	ldw	r8,40(r17)
80204644:	003fae06 	br	80204500 <__reset+0xfa1e4500>
80204648:	98c00017 	ldw	r3,0(r19)
8020464c:	183fba26 	beq	r3,zero,80204538 <__reset+0xfa1e4538>
80204650:	01000744 	movi	r4,29
80204654:	19000626 	beq	r3,r4,80204670 <__sflush_r+0x1c8>
80204658:	01000584 	movi	r4,22
8020465c:	19000426 	beq	r3,r4,80204670 <__sflush_r+0x1c8>
80204660:	88c0030b 	ldhu	r3,12(r17)
80204664:	18c01014 	ori	r3,r3,64
80204668:	88c0030d 	sth	r3,12(r17)
8020466c:	003fc306 	br	8020457c <__reset+0xfa1e457c>
80204670:	8880030b 	ldhu	r2,12(r17)
80204674:	88c00417 	ldw	r3,16(r17)
80204678:	88000115 	stw	zero,4(r17)
8020467c:	10bdffcc 	andi	r2,r2,63487
80204680:	8880030d 	sth	r2,12(r17)
80204684:	88c00015 	stw	r3,0(r17)
80204688:	003fb306 	br	80204558 <__reset+0xfa1e4558>
8020468c:	98800017 	ldw	r2,0(r19)
80204690:	103fea26 	beq	r2,zero,8020463c <__reset+0xfa1e463c>
80204694:	00c00744 	movi	r3,29
80204698:	10c00226 	beq	r2,r3,802046a4 <__sflush_r+0x1fc>
8020469c:	00c00584 	movi	r3,22
802046a0:	10c0031e 	bne	r2,r3,802046b0 <__sflush_r+0x208>
802046a4:	9c000015 	stw	r16,0(r19)
802046a8:	0005883a 	mov	r2,zero
802046ac:	003fb306 	br	8020457c <__reset+0xfa1e457c>
802046b0:	88c0030b 	ldhu	r3,12(r17)
802046b4:	3005883a 	mov	r2,r6
802046b8:	18c01014 	ori	r3,r3,64
802046bc:	88c0030d 	sth	r3,12(r17)
802046c0:	003fae06 	br	8020457c <__reset+0xfa1e457c>

802046c4 <_fflush_r>:
802046c4:	defffd04 	addi	sp,sp,-12
802046c8:	dc000115 	stw	r16,4(sp)
802046cc:	dfc00215 	stw	ra,8(sp)
802046d0:	2021883a 	mov	r16,r4
802046d4:	20000226 	beq	r4,zero,802046e0 <_fflush_r+0x1c>
802046d8:	20800e17 	ldw	r2,56(r4)
802046dc:	10000c26 	beq	r2,zero,80204710 <_fflush_r+0x4c>
802046e0:	2880030f 	ldh	r2,12(r5)
802046e4:	1000051e 	bne	r2,zero,802046fc <_fflush_r+0x38>
802046e8:	0005883a 	mov	r2,zero
802046ec:	dfc00217 	ldw	ra,8(sp)
802046f0:	dc000117 	ldw	r16,4(sp)
802046f4:	dec00304 	addi	sp,sp,12
802046f8:	f800283a 	ret
802046fc:	8009883a 	mov	r4,r16
80204700:	dfc00217 	ldw	ra,8(sp)
80204704:	dc000117 	ldw	r16,4(sp)
80204708:	dec00304 	addi	sp,sp,12
8020470c:	02044a81 	jmpi	802044a8 <__sflush_r>
80204710:	d9400015 	stw	r5,0(sp)
80204714:	0204aa00 	call	80204aa0 <__sinit>
80204718:	d9400017 	ldw	r5,0(sp)
8020471c:	003ff006 	br	802046e0 <__reset+0xfa1e46e0>

80204720 <fflush>:
80204720:	20000526 	beq	r4,zero,80204738 <fflush+0x18>
80204724:	00a00874 	movhi	r2,32801
80204728:	108e9404 	addi	r2,r2,14928
8020472c:	200b883a 	mov	r5,r4
80204730:	11000017 	ldw	r4,0(r2)
80204734:	02046c41 	jmpi	802046c4 <_fflush_r>
80204738:	00a00874 	movhi	r2,32801
8020473c:	108e9304 	addi	r2,r2,14924
80204740:	11000017 	ldw	r4,0(r2)
80204744:	01600834 	movhi	r5,32800
80204748:	2951b104 	addi	r5,r5,18116
8020474c:	02054a41 	jmpi	802054a4 <_fwalk_reent>

80204750 <__fp_unlock>:
80204750:	0005883a 	mov	r2,zero
80204754:	f800283a 	ret

80204758 <_cleanup_r>:
80204758:	01600874 	movhi	r5,32801
8020475c:	2964dd04 	addi	r5,r5,-27788
80204760:	02054a41 	jmpi	802054a4 <_fwalk_reent>

80204764 <__sinit.part.1>:
80204764:	defff704 	addi	sp,sp,-36
80204768:	00e00834 	movhi	r3,32800
8020476c:	dfc00815 	stw	ra,32(sp)
80204770:	ddc00715 	stw	r23,28(sp)
80204774:	dd800615 	stw	r22,24(sp)
80204778:	dd400515 	stw	r21,20(sp)
8020477c:	dd000415 	stw	r20,16(sp)
80204780:	dcc00315 	stw	r19,12(sp)
80204784:	dc800215 	stw	r18,8(sp)
80204788:	dc400115 	stw	r17,4(sp)
8020478c:	dc000015 	stw	r16,0(sp)
80204790:	18d1d604 	addi	r3,r3,18264
80204794:	24000117 	ldw	r16,4(r4)
80204798:	20c00f15 	stw	r3,60(r4)
8020479c:	2080bb04 	addi	r2,r4,748
802047a0:	00c000c4 	movi	r3,3
802047a4:	20c0b915 	stw	r3,740(r4)
802047a8:	2080ba15 	stw	r2,744(r4)
802047ac:	2000b815 	stw	zero,736(r4)
802047b0:	05c00204 	movi	r23,8
802047b4:	00800104 	movi	r2,4
802047b8:	2025883a 	mov	r18,r4
802047bc:	b80d883a 	mov	r6,r23
802047c0:	81001704 	addi	r4,r16,92
802047c4:	000b883a 	mov	r5,zero
802047c8:	80000015 	stw	zero,0(r16)
802047cc:	80000115 	stw	zero,4(r16)
802047d0:	80000215 	stw	zero,8(r16)
802047d4:	8080030d 	sth	r2,12(r16)
802047d8:	80001915 	stw	zero,100(r16)
802047dc:	8000038d 	sth	zero,14(r16)
802047e0:	80000415 	stw	zero,16(r16)
802047e4:	80000515 	stw	zero,20(r16)
802047e8:	80000615 	stw	zero,24(r16)
802047ec:	020624c0 	call	8020624c <memset>
802047f0:	05a00834 	movhi	r22,32800
802047f4:	94400217 	ldw	r17,8(r18)
802047f8:	05600834 	movhi	r21,32800
802047fc:	05200834 	movhi	r20,32800
80204800:	04e00834 	movhi	r19,32800
80204804:	b59e6704 	addi	r22,r22,31132
80204808:	ad5e7e04 	addi	r21,r21,31224
8020480c:	a51e9d04 	addi	r20,r20,31348
80204810:	9cdeb404 	addi	r19,r19,31440
80204814:	85800815 	stw	r22,32(r16)
80204818:	85400915 	stw	r21,36(r16)
8020481c:	85000a15 	stw	r20,40(r16)
80204820:	84c00b15 	stw	r19,44(r16)
80204824:	84000715 	stw	r16,28(r16)
80204828:	00800284 	movi	r2,10
8020482c:	8880030d 	sth	r2,12(r17)
80204830:	00800044 	movi	r2,1
80204834:	b80d883a 	mov	r6,r23
80204838:	89001704 	addi	r4,r17,92
8020483c:	000b883a 	mov	r5,zero
80204840:	88000015 	stw	zero,0(r17)
80204844:	88000115 	stw	zero,4(r17)
80204848:	88000215 	stw	zero,8(r17)
8020484c:	88001915 	stw	zero,100(r17)
80204850:	8880038d 	sth	r2,14(r17)
80204854:	88000415 	stw	zero,16(r17)
80204858:	88000515 	stw	zero,20(r17)
8020485c:	88000615 	stw	zero,24(r17)
80204860:	020624c0 	call	8020624c <memset>
80204864:	94000317 	ldw	r16,12(r18)
80204868:	00800484 	movi	r2,18
8020486c:	8c400715 	stw	r17,28(r17)
80204870:	8d800815 	stw	r22,32(r17)
80204874:	8d400915 	stw	r21,36(r17)
80204878:	8d000a15 	stw	r20,40(r17)
8020487c:	8cc00b15 	stw	r19,44(r17)
80204880:	8080030d 	sth	r2,12(r16)
80204884:	00800084 	movi	r2,2
80204888:	80000015 	stw	zero,0(r16)
8020488c:	80000115 	stw	zero,4(r16)
80204890:	80000215 	stw	zero,8(r16)
80204894:	80001915 	stw	zero,100(r16)
80204898:	8080038d 	sth	r2,14(r16)
8020489c:	80000415 	stw	zero,16(r16)
802048a0:	80000515 	stw	zero,20(r16)
802048a4:	80000615 	stw	zero,24(r16)
802048a8:	b80d883a 	mov	r6,r23
802048ac:	000b883a 	mov	r5,zero
802048b0:	81001704 	addi	r4,r16,92
802048b4:	020624c0 	call	8020624c <memset>
802048b8:	00800044 	movi	r2,1
802048bc:	84000715 	stw	r16,28(r16)
802048c0:	85800815 	stw	r22,32(r16)
802048c4:	85400915 	stw	r21,36(r16)
802048c8:	85000a15 	stw	r20,40(r16)
802048cc:	84c00b15 	stw	r19,44(r16)
802048d0:	90800e15 	stw	r2,56(r18)
802048d4:	dfc00817 	ldw	ra,32(sp)
802048d8:	ddc00717 	ldw	r23,28(sp)
802048dc:	dd800617 	ldw	r22,24(sp)
802048e0:	dd400517 	ldw	r21,20(sp)
802048e4:	dd000417 	ldw	r20,16(sp)
802048e8:	dcc00317 	ldw	r19,12(sp)
802048ec:	dc800217 	ldw	r18,8(sp)
802048f0:	dc400117 	ldw	r17,4(sp)
802048f4:	dc000017 	ldw	r16,0(sp)
802048f8:	dec00904 	addi	sp,sp,36
802048fc:	f800283a 	ret

80204900 <__fp_lock>:
80204900:	0005883a 	mov	r2,zero
80204904:	f800283a 	ret

80204908 <__sfmoreglue>:
80204908:	defffc04 	addi	sp,sp,-16
8020490c:	dc400115 	stw	r17,4(sp)
80204910:	2c7fffc4 	addi	r17,r5,-1
80204914:	8c401a24 	muli	r17,r17,104
80204918:	dc800215 	stw	r18,8(sp)
8020491c:	2825883a 	mov	r18,r5
80204920:	89401d04 	addi	r5,r17,116
80204924:	dc000015 	stw	r16,0(sp)
80204928:	dfc00315 	stw	ra,12(sp)
8020492c:	02058000 	call	80205800 <_malloc_r>
80204930:	1021883a 	mov	r16,r2
80204934:	10000726 	beq	r2,zero,80204954 <__sfmoreglue+0x4c>
80204938:	11000304 	addi	r4,r2,12
8020493c:	10000015 	stw	zero,0(r2)
80204940:	14800115 	stw	r18,4(r2)
80204944:	11000215 	stw	r4,8(r2)
80204948:	89801a04 	addi	r6,r17,104
8020494c:	000b883a 	mov	r5,zero
80204950:	020624c0 	call	8020624c <memset>
80204954:	8005883a 	mov	r2,r16
80204958:	dfc00317 	ldw	ra,12(sp)
8020495c:	dc800217 	ldw	r18,8(sp)
80204960:	dc400117 	ldw	r17,4(sp)
80204964:	dc000017 	ldw	r16,0(sp)
80204968:	dec00404 	addi	sp,sp,16
8020496c:	f800283a 	ret

80204970 <__sfp>:
80204970:	defffb04 	addi	sp,sp,-20
80204974:	dc000015 	stw	r16,0(sp)
80204978:	04200874 	movhi	r16,32801
8020497c:	840e9304 	addi	r16,r16,14924
80204980:	dcc00315 	stw	r19,12(sp)
80204984:	2027883a 	mov	r19,r4
80204988:	81000017 	ldw	r4,0(r16)
8020498c:	dfc00415 	stw	ra,16(sp)
80204990:	dc800215 	stw	r18,8(sp)
80204994:	20800e17 	ldw	r2,56(r4)
80204998:	dc400115 	stw	r17,4(sp)
8020499c:	1000021e 	bne	r2,zero,802049a8 <__sfp+0x38>
802049a0:	02047640 	call	80204764 <__sinit.part.1>
802049a4:	81000017 	ldw	r4,0(r16)
802049a8:	2480b804 	addi	r18,r4,736
802049ac:	047fffc4 	movi	r17,-1
802049b0:	91000117 	ldw	r4,4(r18)
802049b4:	94000217 	ldw	r16,8(r18)
802049b8:	213fffc4 	addi	r4,r4,-1
802049bc:	20000a16 	blt	r4,zero,802049e8 <__sfp+0x78>
802049c0:	8080030f 	ldh	r2,12(r16)
802049c4:	10000c26 	beq	r2,zero,802049f8 <__sfp+0x88>
802049c8:	80c01d04 	addi	r3,r16,116
802049cc:	00000206 	br	802049d8 <__sfp+0x68>
802049d0:	18bfe60f 	ldh	r2,-104(r3)
802049d4:	10000826 	beq	r2,zero,802049f8 <__sfp+0x88>
802049d8:	213fffc4 	addi	r4,r4,-1
802049dc:	1c3ffd04 	addi	r16,r3,-12
802049e0:	18c01a04 	addi	r3,r3,104
802049e4:	247ffa1e 	bne	r4,r17,802049d0 <__reset+0xfa1e49d0>
802049e8:	90800017 	ldw	r2,0(r18)
802049ec:	10001d26 	beq	r2,zero,80204a64 <__sfp+0xf4>
802049f0:	1025883a 	mov	r18,r2
802049f4:	003fee06 	br	802049b0 <__reset+0xfa1e49b0>
802049f8:	00bfffc4 	movi	r2,-1
802049fc:	8080038d 	sth	r2,14(r16)
80204a00:	00800044 	movi	r2,1
80204a04:	8080030d 	sth	r2,12(r16)
80204a08:	80001915 	stw	zero,100(r16)
80204a0c:	80000015 	stw	zero,0(r16)
80204a10:	80000215 	stw	zero,8(r16)
80204a14:	80000115 	stw	zero,4(r16)
80204a18:	80000415 	stw	zero,16(r16)
80204a1c:	80000515 	stw	zero,20(r16)
80204a20:	80000615 	stw	zero,24(r16)
80204a24:	01800204 	movi	r6,8
80204a28:	000b883a 	mov	r5,zero
80204a2c:	81001704 	addi	r4,r16,92
80204a30:	020624c0 	call	8020624c <memset>
80204a34:	8005883a 	mov	r2,r16
80204a38:	80000c15 	stw	zero,48(r16)
80204a3c:	80000d15 	stw	zero,52(r16)
80204a40:	80001115 	stw	zero,68(r16)
80204a44:	80001215 	stw	zero,72(r16)
80204a48:	dfc00417 	ldw	ra,16(sp)
80204a4c:	dcc00317 	ldw	r19,12(sp)
80204a50:	dc800217 	ldw	r18,8(sp)
80204a54:	dc400117 	ldw	r17,4(sp)
80204a58:	dc000017 	ldw	r16,0(sp)
80204a5c:	dec00504 	addi	sp,sp,20
80204a60:	f800283a 	ret
80204a64:	01400104 	movi	r5,4
80204a68:	9809883a 	mov	r4,r19
80204a6c:	02049080 	call	80204908 <__sfmoreglue>
80204a70:	90800015 	stw	r2,0(r18)
80204a74:	103fde1e 	bne	r2,zero,802049f0 <__reset+0xfa1e49f0>
80204a78:	00800304 	movi	r2,12
80204a7c:	98800015 	stw	r2,0(r19)
80204a80:	0005883a 	mov	r2,zero
80204a84:	003ff006 	br	80204a48 <__reset+0xfa1e4a48>

80204a88 <_cleanup>:
80204a88:	00a00874 	movhi	r2,32801
80204a8c:	108e9304 	addi	r2,r2,14924
80204a90:	11000017 	ldw	r4,0(r2)
80204a94:	01600874 	movhi	r5,32801
80204a98:	2964dd04 	addi	r5,r5,-27788
80204a9c:	02054a41 	jmpi	802054a4 <_fwalk_reent>

80204aa0 <__sinit>:
80204aa0:	20800e17 	ldw	r2,56(r4)
80204aa4:	10000126 	beq	r2,zero,80204aac <__sinit+0xc>
80204aa8:	f800283a 	ret
80204aac:	02047641 	jmpi	80204764 <__sinit.part.1>

80204ab0 <__sfp_lock_acquire>:
80204ab0:	f800283a 	ret

80204ab4 <__sfp_lock_release>:
80204ab4:	f800283a 	ret

80204ab8 <__sinit_lock_acquire>:
80204ab8:	f800283a 	ret

80204abc <__sinit_lock_release>:
80204abc:	f800283a 	ret

80204ac0 <__fp_lock_all>:
80204ac0:	00a00874 	movhi	r2,32801
80204ac4:	108e9404 	addi	r2,r2,14928
80204ac8:	11000017 	ldw	r4,0(r2)
80204acc:	01600834 	movhi	r5,32800
80204ad0:	29524004 	addi	r5,r5,18688
80204ad4:	02053e01 	jmpi	802053e0 <_fwalk>

80204ad8 <__fp_unlock_all>:
80204ad8:	00a00874 	movhi	r2,32801
80204adc:	108e9404 	addi	r2,r2,14928
80204ae0:	11000017 	ldw	r4,0(r2)
80204ae4:	01600834 	movhi	r5,32800
80204ae8:	2951d404 	addi	r5,r5,18256
80204aec:	02053e01 	jmpi	802053e0 <_fwalk>

80204af0 <_malloc_trim_r>:
80204af0:	defffb04 	addi	sp,sp,-20
80204af4:	dcc00315 	stw	r19,12(sp)
80204af8:	04e00874 	movhi	r19,32801
80204afc:	dc800215 	stw	r18,8(sp)
80204b00:	dc400115 	stw	r17,4(sp)
80204b04:	dc000015 	stw	r16,0(sp)
80204b08:	dfc00415 	stw	ra,16(sp)
80204b0c:	2821883a 	mov	r16,r5
80204b10:	9cc8d304 	addi	r19,r19,9036
80204b14:	2025883a 	mov	r18,r4
80204b18:	020d28c0 	call	8020d28c <__malloc_lock>
80204b1c:	98800217 	ldw	r2,8(r19)
80204b20:	14400117 	ldw	r17,4(r2)
80204b24:	00bfff04 	movi	r2,-4
80204b28:	88a2703a 	and	r17,r17,r2
80204b2c:	8c21c83a 	sub	r16,r17,r16
80204b30:	8403fbc4 	addi	r16,r16,4079
80204b34:	8020d33a 	srli	r16,r16,12
80204b38:	0083ffc4 	movi	r2,4095
80204b3c:	843fffc4 	addi	r16,r16,-1
80204b40:	8020933a 	slli	r16,r16,12
80204b44:	1400060e 	bge	r2,r16,80204b60 <_malloc_trim_r+0x70>
80204b48:	000b883a 	mov	r5,zero
80204b4c:	9009883a 	mov	r4,r18
80204b50:	02079480 	call	80207948 <_sbrk_r>
80204b54:	98c00217 	ldw	r3,8(r19)
80204b58:	1c47883a 	add	r3,r3,r17
80204b5c:	10c00a26 	beq	r2,r3,80204b88 <_malloc_trim_r+0x98>
80204b60:	9009883a 	mov	r4,r18
80204b64:	020d2b00 	call	8020d2b0 <__malloc_unlock>
80204b68:	0005883a 	mov	r2,zero
80204b6c:	dfc00417 	ldw	ra,16(sp)
80204b70:	dcc00317 	ldw	r19,12(sp)
80204b74:	dc800217 	ldw	r18,8(sp)
80204b78:	dc400117 	ldw	r17,4(sp)
80204b7c:	dc000017 	ldw	r16,0(sp)
80204b80:	dec00504 	addi	sp,sp,20
80204b84:	f800283a 	ret
80204b88:	040bc83a 	sub	r5,zero,r16
80204b8c:	9009883a 	mov	r4,r18
80204b90:	02079480 	call	80207948 <_sbrk_r>
80204b94:	00ffffc4 	movi	r3,-1
80204b98:	10c00d26 	beq	r2,r3,80204bd0 <_malloc_trim_r+0xe0>
80204b9c:	00e00874 	movhi	r3,32801
80204ba0:	18ceb404 	addi	r3,r3,15056
80204ba4:	18800017 	ldw	r2,0(r3)
80204ba8:	99000217 	ldw	r4,8(r19)
80204bac:	8c23c83a 	sub	r17,r17,r16
80204bb0:	8c400054 	ori	r17,r17,1
80204bb4:	1421c83a 	sub	r16,r2,r16
80204bb8:	24400115 	stw	r17,4(r4)
80204bbc:	9009883a 	mov	r4,r18
80204bc0:	1c000015 	stw	r16,0(r3)
80204bc4:	020d2b00 	call	8020d2b0 <__malloc_unlock>
80204bc8:	00800044 	movi	r2,1
80204bcc:	003fe706 	br	80204b6c <__reset+0xfa1e4b6c>
80204bd0:	000b883a 	mov	r5,zero
80204bd4:	9009883a 	mov	r4,r18
80204bd8:	02079480 	call	80207948 <_sbrk_r>
80204bdc:	99000217 	ldw	r4,8(r19)
80204be0:	014003c4 	movi	r5,15
80204be4:	1107c83a 	sub	r3,r2,r4
80204be8:	28ffdd0e 	bge	r5,r3,80204b60 <__reset+0xfa1e4b60>
80204bec:	01600874 	movhi	r5,32801
80204bf0:	294e9604 	addi	r5,r5,14936
80204bf4:	29400017 	ldw	r5,0(r5)
80204bf8:	18c00054 	ori	r3,r3,1
80204bfc:	20c00115 	stw	r3,4(r4)
80204c00:	00e00874 	movhi	r3,32801
80204c04:	1145c83a 	sub	r2,r2,r5
80204c08:	18ceb404 	addi	r3,r3,15056
80204c0c:	18800015 	stw	r2,0(r3)
80204c10:	003fd306 	br	80204b60 <__reset+0xfa1e4b60>

80204c14 <_free_r>:
80204c14:	28004126 	beq	r5,zero,80204d1c <_free_r+0x108>
80204c18:	defffd04 	addi	sp,sp,-12
80204c1c:	dc400115 	stw	r17,4(sp)
80204c20:	dc000015 	stw	r16,0(sp)
80204c24:	2023883a 	mov	r17,r4
80204c28:	2821883a 	mov	r16,r5
80204c2c:	dfc00215 	stw	ra,8(sp)
80204c30:	020d28c0 	call	8020d28c <__malloc_lock>
80204c34:	81ffff17 	ldw	r7,-4(r16)
80204c38:	00bfff84 	movi	r2,-2
80204c3c:	01200874 	movhi	r4,32801
80204c40:	81bffe04 	addi	r6,r16,-8
80204c44:	3884703a 	and	r2,r7,r2
80204c48:	2108d304 	addi	r4,r4,9036
80204c4c:	308b883a 	add	r5,r6,r2
80204c50:	2a400117 	ldw	r9,4(r5)
80204c54:	22000217 	ldw	r8,8(r4)
80204c58:	00ffff04 	movi	r3,-4
80204c5c:	48c6703a 	and	r3,r9,r3
80204c60:	2a005726 	beq	r5,r8,80204dc0 <_free_r+0x1ac>
80204c64:	28c00115 	stw	r3,4(r5)
80204c68:	39c0004c 	andi	r7,r7,1
80204c6c:	3800091e 	bne	r7,zero,80204c94 <_free_r+0x80>
80204c70:	823ffe17 	ldw	r8,-8(r16)
80204c74:	22400204 	addi	r9,r4,8
80204c78:	320dc83a 	sub	r6,r6,r8
80204c7c:	31c00217 	ldw	r7,8(r6)
80204c80:	1205883a 	add	r2,r2,r8
80204c84:	3a406526 	beq	r7,r9,80204e1c <_free_r+0x208>
80204c88:	32000317 	ldw	r8,12(r6)
80204c8c:	3a000315 	stw	r8,12(r7)
80204c90:	41c00215 	stw	r7,8(r8)
80204c94:	28cf883a 	add	r7,r5,r3
80204c98:	39c00117 	ldw	r7,4(r7)
80204c9c:	39c0004c 	andi	r7,r7,1
80204ca0:	38003a26 	beq	r7,zero,80204d8c <_free_r+0x178>
80204ca4:	10c00054 	ori	r3,r2,1
80204ca8:	30c00115 	stw	r3,4(r6)
80204cac:	3087883a 	add	r3,r6,r2
80204cb0:	18800015 	stw	r2,0(r3)
80204cb4:	00c07fc4 	movi	r3,511
80204cb8:	18801936 	bltu	r3,r2,80204d20 <_free_r+0x10c>
80204cbc:	1004d0fa 	srli	r2,r2,3
80204cc0:	01c00044 	movi	r7,1
80204cc4:	21400117 	ldw	r5,4(r4)
80204cc8:	10c00044 	addi	r3,r2,1
80204ccc:	18c7883a 	add	r3,r3,r3
80204cd0:	1005d0ba 	srai	r2,r2,2
80204cd4:	18c7883a 	add	r3,r3,r3
80204cd8:	18c7883a 	add	r3,r3,r3
80204cdc:	1907883a 	add	r3,r3,r4
80204ce0:	3884983a 	sll	r2,r7,r2
80204ce4:	19c00017 	ldw	r7,0(r3)
80204ce8:	1a3ffe04 	addi	r8,r3,-8
80204cec:	1144b03a 	or	r2,r2,r5
80204cf0:	32000315 	stw	r8,12(r6)
80204cf4:	31c00215 	stw	r7,8(r6)
80204cf8:	20800115 	stw	r2,4(r4)
80204cfc:	19800015 	stw	r6,0(r3)
80204d00:	39800315 	stw	r6,12(r7)
80204d04:	8809883a 	mov	r4,r17
80204d08:	dfc00217 	ldw	ra,8(sp)
80204d0c:	dc400117 	ldw	r17,4(sp)
80204d10:	dc000017 	ldw	r16,0(sp)
80204d14:	dec00304 	addi	sp,sp,12
80204d18:	020d2b01 	jmpi	8020d2b0 <__malloc_unlock>
80204d1c:	f800283a 	ret
80204d20:	100ad27a 	srli	r5,r2,9
80204d24:	00c00104 	movi	r3,4
80204d28:	19404a36 	bltu	r3,r5,80204e54 <_free_r+0x240>
80204d2c:	100ad1ba 	srli	r5,r2,6
80204d30:	28c00e44 	addi	r3,r5,57
80204d34:	18c7883a 	add	r3,r3,r3
80204d38:	29400e04 	addi	r5,r5,56
80204d3c:	18c7883a 	add	r3,r3,r3
80204d40:	18c7883a 	add	r3,r3,r3
80204d44:	1909883a 	add	r4,r3,r4
80204d48:	20c00017 	ldw	r3,0(r4)
80204d4c:	01e00874 	movhi	r7,32801
80204d50:	213ffe04 	addi	r4,r4,-8
80204d54:	39c8d304 	addi	r7,r7,9036
80204d58:	20c04426 	beq	r4,r3,80204e6c <_free_r+0x258>
80204d5c:	01ffff04 	movi	r7,-4
80204d60:	19400117 	ldw	r5,4(r3)
80204d64:	29ca703a 	and	r5,r5,r7
80204d68:	1140022e 	bgeu	r2,r5,80204d74 <_free_r+0x160>
80204d6c:	18c00217 	ldw	r3,8(r3)
80204d70:	20fffb1e 	bne	r4,r3,80204d60 <__reset+0xfa1e4d60>
80204d74:	19000317 	ldw	r4,12(r3)
80204d78:	31000315 	stw	r4,12(r6)
80204d7c:	30c00215 	stw	r3,8(r6)
80204d80:	21800215 	stw	r6,8(r4)
80204d84:	19800315 	stw	r6,12(r3)
80204d88:	003fde06 	br	80204d04 <__reset+0xfa1e4d04>
80204d8c:	29c00217 	ldw	r7,8(r5)
80204d90:	10c5883a 	add	r2,r2,r3
80204d94:	00e00874 	movhi	r3,32801
80204d98:	18c8d504 	addi	r3,r3,9044
80204d9c:	38c03b26 	beq	r7,r3,80204e8c <_free_r+0x278>
80204da0:	2a000317 	ldw	r8,12(r5)
80204da4:	11400054 	ori	r5,r2,1
80204da8:	3087883a 	add	r3,r6,r2
80204dac:	3a000315 	stw	r8,12(r7)
80204db0:	41c00215 	stw	r7,8(r8)
80204db4:	31400115 	stw	r5,4(r6)
80204db8:	18800015 	stw	r2,0(r3)
80204dbc:	003fbd06 	br	80204cb4 <__reset+0xfa1e4cb4>
80204dc0:	39c0004c 	andi	r7,r7,1
80204dc4:	10c5883a 	add	r2,r2,r3
80204dc8:	3800071e 	bne	r7,zero,80204de8 <_free_r+0x1d4>
80204dcc:	81fffe17 	ldw	r7,-8(r16)
80204dd0:	31cdc83a 	sub	r6,r6,r7
80204dd4:	30c00317 	ldw	r3,12(r6)
80204dd8:	31400217 	ldw	r5,8(r6)
80204ddc:	11c5883a 	add	r2,r2,r7
80204de0:	28c00315 	stw	r3,12(r5)
80204de4:	19400215 	stw	r5,8(r3)
80204de8:	10c00054 	ori	r3,r2,1
80204dec:	30c00115 	stw	r3,4(r6)
80204df0:	00e00874 	movhi	r3,32801
80204df4:	18ce9704 	addi	r3,r3,14940
80204df8:	18c00017 	ldw	r3,0(r3)
80204dfc:	21800215 	stw	r6,8(r4)
80204e00:	10ffc036 	bltu	r2,r3,80204d04 <__reset+0xfa1e4d04>
80204e04:	00a00874 	movhi	r2,32801
80204e08:	108eab04 	addi	r2,r2,15020
80204e0c:	11400017 	ldw	r5,0(r2)
80204e10:	8809883a 	mov	r4,r17
80204e14:	0204af00 	call	80204af0 <_malloc_trim_r>
80204e18:	003fba06 	br	80204d04 <__reset+0xfa1e4d04>
80204e1c:	28c9883a 	add	r4,r5,r3
80204e20:	21000117 	ldw	r4,4(r4)
80204e24:	2100004c 	andi	r4,r4,1
80204e28:	2000391e 	bne	r4,zero,80204f10 <_free_r+0x2fc>
80204e2c:	29c00217 	ldw	r7,8(r5)
80204e30:	29000317 	ldw	r4,12(r5)
80204e34:	1885883a 	add	r2,r3,r2
80204e38:	10c00054 	ori	r3,r2,1
80204e3c:	39000315 	stw	r4,12(r7)
80204e40:	21c00215 	stw	r7,8(r4)
80204e44:	30c00115 	stw	r3,4(r6)
80204e48:	308d883a 	add	r6,r6,r2
80204e4c:	30800015 	stw	r2,0(r6)
80204e50:	003fac06 	br	80204d04 <__reset+0xfa1e4d04>
80204e54:	00c00504 	movi	r3,20
80204e58:	19401536 	bltu	r3,r5,80204eb0 <_free_r+0x29c>
80204e5c:	28c01704 	addi	r3,r5,92
80204e60:	18c7883a 	add	r3,r3,r3
80204e64:	294016c4 	addi	r5,r5,91
80204e68:	003fb406 	br	80204d3c <__reset+0xfa1e4d3c>
80204e6c:	280bd0ba 	srai	r5,r5,2
80204e70:	00c00044 	movi	r3,1
80204e74:	38800117 	ldw	r2,4(r7)
80204e78:	194a983a 	sll	r5,r3,r5
80204e7c:	2007883a 	mov	r3,r4
80204e80:	2884b03a 	or	r2,r5,r2
80204e84:	38800115 	stw	r2,4(r7)
80204e88:	003fbb06 	br	80204d78 <__reset+0xfa1e4d78>
80204e8c:	21800515 	stw	r6,20(r4)
80204e90:	21800415 	stw	r6,16(r4)
80204e94:	10c00054 	ori	r3,r2,1
80204e98:	31c00315 	stw	r7,12(r6)
80204e9c:	31c00215 	stw	r7,8(r6)
80204ea0:	30c00115 	stw	r3,4(r6)
80204ea4:	308d883a 	add	r6,r6,r2
80204ea8:	30800015 	stw	r2,0(r6)
80204eac:	003f9506 	br	80204d04 <__reset+0xfa1e4d04>
80204eb0:	00c01504 	movi	r3,84
80204eb4:	19400536 	bltu	r3,r5,80204ecc <_free_r+0x2b8>
80204eb8:	100ad33a 	srli	r5,r2,12
80204ebc:	28c01bc4 	addi	r3,r5,111
80204ec0:	18c7883a 	add	r3,r3,r3
80204ec4:	29401b84 	addi	r5,r5,110
80204ec8:	003f9c06 	br	80204d3c <__reset+0xfa1e4d3c>
80204ecc:	00c05504 	movi	r3,340
80204ed0:	19400536 	bltu	r3,r5,80204ee8 <_free_r+0x2d4>
80204ed4:	100ad3fa 	srli	r5,r2,15
80204ed8:	28c01e04 	addi	r3,r5,120
80204edc:	18c7883a 	add	r3,r3,r3
80204ee0:	29401dc4 	addi	r5,r5,119
80204ee4:	003f9506 	br	80204d3c <__reset+0xfa1e4d3c>
80204ee8:	00c15504 	movi	r3,1364
80204eec:	19400536 	bltu	r3,r5,80204f04 <_free_r+0x2f0>
80204ef0:	100ad4ba 	srli	r5,r2,18
80204ef4:	28c01f44 	addi	r3,r5,125
80204ef8:	18c7883a 	add	r3,r3,r3
80204efc:	29401f04 	addi	r5,r5,124
80204f00:	003f8e06 	br	80204d3c <__reset+0xfa1e4d3c>
80204f04:	00c03f84 	movi	r3,254
80204f08:	01401f84 	movi	r5,126
80204f0c:	003f8b06 	br	80204d3c <__reset+0xfa1e4d3c>
80204f10:	10c00054 	ori	r3,r2,1
80204f14:	30c00115 	stw	r3,4(r6)
80204f18:	308d883a 	add	r6,r6,r2
80204f1c:	30800015 	stw	r2,0(r6)
80204f20:	003f7806 	br	80204d04 <__reset+0xfa1e4d04>

80204f24 <__sfvwrite_r>:
80204f24:	30800217 	ldw	r2,8(r6)
80204f28:	10006726 	beq	r2,zero,802050c8 <__sfvwrite_r+0x1a4>
80204f2c:	28c0030b 	ldhu	r3,12(r5)
80204f30:	defff404 	addi	sp,sp,-48
80204f34:	dd400715 	stw	r21,28(sp)
80204f38:	dd000615 	stw	r20,24(sp)
80204f3c:	dc000215 	stw	r16,8(sp)
80204f40:	dfc00b15 	stw	ra,44(sp)
80204f44:	df000a15 	stw	fp,40(sp)
80204f48:	ddc00915 	stw	r23,36(sp)
80204f4c:	dd800815 	stw	r22,32(sp)
80204f50:	dcc00515 	stw	r19,20(sp)
80204f54:	dc800415 	stw	r18,16(sp)
80204f58:	dc400315 	stw	r17,12(sp)
80204f5c:	1880020c 	andi	r2,r3,8
80204f60:	2821883a 	mov	r16,r5
80204f64:	202b883a 	mov	r21,r4
80204f68:	3029883a 	mov	r20,r6
80204f6c:	10002726 	beq	r2,zero,8020500c <__sfvwrite_r+0xe8>
80204f70:	28800417 	ldw	r2,16(r5)
80204f74:	10002526 	beq	r2,zero,8020500c <__sfvwrite_r+0xe8>
80204f78:	1880008c 	andi	r2,r3,2
80204f7c:	a4400017 	ldw	r17,0(r20)
80204f80:	10002a26 	beq	r2,zero,8020502c <__sfvwrite_r+0x108>
80204f84:	05a00034 	movhi	r22,32768
80204f88:	0027883a 	mov	r19,zero
80204f8c:	0025883a 	mov	r18,zero
80204f90:	b5bf0004 	addi	r22,r22,-1024
80204f94:	980d883a 	mov	r6,r19
80204f98:	a809883a 	mov	r4,r21
80204f9c:	90004626 	beq	r18,zero,802050b8 <__sfvwrite_r+0x194>
80204fa0:	900f883a 	mov	r7,r18
80204fa4:	b480022e 	bgeu	r22,r18,80204fb0 <__sfvwrite_r+0x8c>
80204fa8:	01e00034 	movhi	r7,32768
80204fac:	39ff0004 	addi	r7,r7,-1024
80204fb0:	80800917 	ldw	r2,36(r16)
80204fb4:	81400717 	ldw	r5,28(r16)
80204fb8:	103ee83a 	callr	r2
80204fbc:	0080570e 	bge	zero,r2,8020511c <__sfvwrite_r+0x1f8>
80204fc0:	a0c00217 	ldw	r3,8(r20)
80204fc4:	98a7883a 	add	r19,r19,r2
80204fc8:	90a5c83a 	sub	r18,r18,r2
80204fcc:	1885c83a 	sub	r2,r3,r2
80204fd0:	a0800215 	stw	r2,8(r20)
80204fd4:	103fef1e 	bne	r2,zero,80204f94 <__reset+0xfa1e4f94>
80204fd8:	0005883a 	mov	r2,zero
80204fdc:	dfc00b17 	ldw	ra,44(sp)
80204fe0:	df000a17 	ldw	fp,40(sp)
80204fe4:	ddc00917 	ldw	r23,36(sp)
80204fe8:	dd800817 	ldw	r22,32(sp)
80204fec:	dd400717 	ldw	r21,28(sp)
80204ff0:	dd000617 	ldw	r20,24(sp)
80204ff4:	dcc00517 	ldw	r19,20(sp)
80204ff8:	dc800417 	ldw	r18,16(sp)
80204ffc:	dc400317 	ldw	r17,12(sp)
80205000:	dc000217 	ldw	r16,8(sp)
80205004:	dec00c04 	addi	sp,sp,48
80205008:	f800283a 	ret
8020500c:	800b883a 	mov	r5,r16
80205010:	a809883a 	mov	r4,r21
80205014:	0202acc0 	call	80202acc <__swsetup_r>
80205018:	1000eb1e 	bne	r2,zero,802053c8 <__sfvwrite_r+0x4a4>
8020501c:	80c0030b 	ldhu	r3,12(r16)
80205020:	a4400017 	ldw	r17,0(r20)
80205024:	1880008c 	andi	r2,r3,2
80205028:	103fd61e 	bne	r2,zero,80204f84 <__reset+0xfa1e4f84>
8020502c:	1880004c 	andi	r2,r3,1
80205030:	10003f1e 	bne	r2,zero,80205130 <__sfvwrite_r+0x20c>
80205034:	0039883a 	mov	fp,zero
80205038:	0025883a 	mov	r18,zero
8020503c:	90001a26 	beq	r18,zero,802050a8 <__sfvwrite_r+0x184>
80205040:	1880800c 	andi	r2,r3,512
80205044:	84c00217 	ldw	r19,8(r16)
80205048:	10002126 	beq	r2,zero,802050d0 <__sfvwrite_r+0x1ac>
8020504c:	982f883a 	mov	r23,r19
80205050:	94c09336 	bltu	r18,r19,802052a0 <__sfvwrite_r+0x37c>
80205054:	1881200c 	andi	r2,r3,1152
80205058:	10009e1e 	bne	r2,zero,802052d4 <__sfvwrite_r+0x3b0>
8020505c:	81000017 	ldw	r4,0(r16)
80205060:	b80d883a 	mov	r6,r23
80205064:	e00b883a 	mov	r5,fp
80205068:	02060f00 	call	802060f0 <memmove>
8020506c:	80c00217 	ldw	r3,8(r16)
80205070:	81000017 	ldw	r4,0(r16)
80205074:	9005883a 	mov	r2,r18
80205078:	1ce7c83a 	sub	r19,r3,r19
8020507c:	25cf883a 	add	r7,r4,r23
80205080:	84c00215 	stw	r19,8(r16)
80205084:	81c00015 	stw	r7,0(r16)
80205088:	a0c00217 	ldw	r3,8(r20)
8020508c:	e0b9883a 	add	fp,fp,r2
80205090:	90a5c83a 	sub	r18,r18,r2
80205094:	18a7c83a 	sub	r19,r3,r2
80205098:	a4c00215 	stw	r19,8(r20)
8020509c:	983fce26 	beq	r19,zero,80204fd8 <__reset+0xfa1e4fd8>
802050a0:	80c0030b 	ldhu	r3,12(r16)
802050a4:	903fe61e 	bne	r18,zero,80205040 <__reset+0xfa1e5040>
802050a8:	8f000017 	ldw	fp,0(r17)
802050ac:	8c800117 	ldw	r18,4(r17)
802050b0:	8c400204 	addi	r17,r17,8
802050b4:	003fe106 	br	8020503c <__reset+0xfa1e503c>
802050b8:	8cc00017 	ldw	r19,0(r17)
802050bc:	8c800117 	ldw	r18,4(r17)
802050c0:	8c400204 	addi	r17,r17,8
802050c4:	003fb306 	br	80204f94 <__reset+0xfa1e4f94>
802050c8:	0005883a 	mov	r2,zero
802050cc:	f800283a 	ret
802050d0:	81000017 	ldw	r4,0(r16)
802050d4:	80800417 	ldw	r2,16(r16)
802050d8:	11005736 	bltu	r2,r4,80205238 <__sfvwrite_r+0x314>
802050dc:	85c00517 	ldw	r23,20(r16)
802050e0:	95c05536 	bltu	r18,r23,80205238 <__sfvwrite_r+0x314>
802050e4:	00a00034 	movhi	r2,32768
802050e8:	10bfffc4 	addi	r2,r2,-1
802050ec:	9009883a 	mov	r4,r18
802050f0:	1480012e 	bgeu	r2,r18,802050f8 <__sfvwrite_r+0x1d4>
802050f4:	1009883a 	mov	r4,r2
802050f8:	b80b883a 	mov	r5,r23
802050fc:	020a5e00 	call	8020a5e0 <__divsi3>
80205100:	15cf383a 	mul	r7,r2,r23
80205104:	81400717 	ldw	r5,28(r16)
80205108:	80800917 	ldw	r2,36(r16)
8020510c:	e00d883a 	mov	r6,fp
80205110:	a809883a 	mov	r4,r21
80205114:	103ee83a 	callr	r2
80205118:	00bfdb16 	blt	zero,r2,80205088 <__reset+0xfa1e5088>
8020511c:	8080030b 	ldhu	r2,12(r16)
80205120:	10801014 	ori	r2,r2,64
80205124:	8080030d 	sth	r2,12(r16)
80205128:	00bfffc4 	movi	r2,-1
8020512c:	003fab06 	br	80204fdc <__reset+0xfa1e4fdc>
80205130:	0027883a 	mov	r19,zero
80205134:	0011883a 	mov	r8,zero
80205138:	0039883a 	mov	fp,zero
8020513c:	0025883a 	mov	r18,zero
80205140:	90001f26 	beq	r18,zero,802051c0 <__sfvwrite_r+0x29c>
80205144:	40005a26 	beq	r8,zero,802052b0 <__sfvwrite_r+0x38c>
80205148:	982d883a 	mov	r22,r19
8020514c:	94c0012e 	bgeu	r18,r19,80205154 <__sfvwrite_r+0x230>
80205150:	902d883a 	mov	r22,r18
80205154:	81000017 	ldw	r4,0(r16)
80205158:	80800417 	ldw	r2,16(r16)
8020515c:	b02f883a 	mov	r23,r22
80205160:	81c00517 	ldw	r7,20(r16)
80205164:	1100032e 	bgeu	r2,r4,80205174 <__sfvwrite_r+0x250>
80205168:	80c00217 	ldw	r3,8(r16)
8020516c:	38c7883a 	add	r3,r7,r3
80205170:	1d801816 	blt	r3,r22,802051d4 <__sfvwrite_r+0x2b0>
80205174:	b1c03e16 	blt	r22,r7,80205270 <__sfvwrite_r+0x34c>
80205178:	80800917 	ldw	r2,36(r16)
8020517c:	81400717 	ldw	r5,28(r16)
80205180:	e00d883a 	mov	r6,fp
80205184:	da000115 	stw	r8,4(sp)
80205188:	a809883a 	mov	r4,r21
8020518c:	103ee83a 	callr	r2
80205190:	102f883a 	mov	r23,r2
80205194:	da000117 	ldw	r8,4(sp)
80205198:	00bfe00e 	bge	zero,r2,8020511c <__reset+0xfa1e511c>
8020519c:	9de7c83a 	sub	r19,r19,r23
802051a0:	98001f26 	beq	r19,zero,80205220 <__sfvwrite_r+0x2fc>
802051a4:	a0800217 	ldw	r2,8(r20)
802051a8:	e5f9883a 	add	fp,fp,r23
802051ac:	95e5c83a 	sub	r18,r18,r23
802051b0:	15efc83a 	sub	r23,r2,r23
802051b4:	a5c00215 	stw	r23,8(r20)
802051b8:	b83f8726 	beq	r23,zero,80204fd8 <__reset+0xfa1e4fd8>
802051bc:	903fe11e 	bne	r18,zero,80205144 <__reset+0xfa1e5144>
802051c0:	8f000017 	ldw	fp,0(r17)
802051c4:	8c800117 	ldw	r18,4(r17)
802051c8:	0011883a 	mov	r8,zero
802051cc:	8c400204 	addi	r17,r17,8
802051d0:	003fdb06 	br	80205140 <__reset+0xfa1e5140>
802051d4:	180d883a 	mov	r6,r3
802051d8:	e00b883a 	mov	r5,fp
802051dc:	da000115 	stw	r8,4(sp)
802051e0:	d8c00015 	stw	r3,0(sp)
802051e4:	02060f00 	call	802060f0 <memmove>
802051e8:	d8c00017 	ldw	r3,0(sp)
802051ec:	80800017 	ldw	r2,0(r16)
802051f0:	800b883a 	mov	r5,r16
802051f4:	a809883a 	mov	r4,r21
802051f8:	10c5883a 	add	r2,r2,r3
802051fc:	80800015 	stw	r2,0(r16)
80205200:	d8c00015 	stw	r3,0(sp)
80205204:	02046c40 	call	802046c4 <_fflush_r>
80205208:	d8c00017 	ldw	r3,0(sp)
8020520c:	da000117 	ldw	r8,4(sp)
80205210:	103fc21e 	bne	r2,zero,8020511c <__reset+0xfa1e511c>
80205214:	182f883a 	mov	r23,r3
80205218:	9de7c83a 	sub	r19,r19,r23
8020521c:	983fe11e 	bne	r19,zero,802051a4 <__reset+0xfa1e51a4>
80205220:	800b883a 	mov	r5,r16
80205224:	a809883a 	mov	r4,r21
80205228:	02046c40 	call	802046c4 <_fflush_r>
8020522c:	103fbb1e 	bne	r2,zero,8020511c <__reset+0xfa1e511c>
80205230:	0011883a 	mov	r8,zero
80205234:	003fdb06 	br	802051a4 <__reset+0xfa1e51a4>
80205238:	94c0012e 	bgeu	r18,r19,80205240 <__sfvwrite_r+0x31c>
8020523c:	9027883a 	mov	r19,r18
80205240:	980d883a 	mov	r6,r19
80205244:	e00b883a 	mov	r5,fp
80205248:	02060f00 	call	802060f0 <memmove>
8020524c:	80800217 	ldw	r2,8(r16)
80205250:	80c00017 	ldw	r3,0(r16)
80205254:	14c5c83a 	sub	r2,r2,r19
80205258:	1cc7883a 	add	r3,r3,r19
8020525c:	80800215 	stw	r2,8(r16)
80205260:	80c00015 	stw	r3,0(r16)
80205264:	10004326 	beq	r2,zero,80205374 <__sfvwrite_r+0x450>
80205268:	9805883a 	mov	r2,r19
8020526c:	003f8606 	br	80205088 <__reset+0xfa1e5088>
80205270:	b00d883a 	mov	r6,r22
80205274:	e00b883a 	mov	r5,fp
80205278:	da000115 	stw	r8,4(sp)
8020527c:	02060f00 	call	802060f0 <memmove>
80205280:	80800217 	ldw	r2,8(r16)
80205284:	80c00017 	ldw	r3,0(r16)
80205288:	da000117 	ldw	r8,4(sp)
8020528c:	1585c83a 	sub	r2,r2,r22
80205290:	1dad883a 	add	r22,r3,r22
80205294:	80800215 	stw	r2,8(r16)
80205298:	85800015 	stw	r22,0(r16)
8020529c:	003fbf06 	br	8020519c <__reset+0xfa1e519c>
802052a0:	81000017 	ldw	r4,0(r16)
802052a4:	9027883a 	mov	r19,r18
802052a8:	902f883a 	mov	r23,r18
802052ac:	003f6c06 	br	80205060 <__reset+0xfa1e5060>
802052b0:	900d883a 	mov	r6,r18
802052b4:	01400284 	movi	r5,10
802052b8:	e009883a 	mov	r4,fp
802052bc:	020600c0 	call	8020600c <memchr>
802052c0:	10003e26 	beq	r2,zero,802053bc <__sfvwrite_r+0x498>
802052c4:	10800044 	addi	r2,r2,1
802052c8:	1727c83a 	sub	r19,r2,fp
802052cc:	02000044 	movi	r8,1
802052d0:	003f9d06 	br	80205148 <__reset+0xfa1e5148>
802052d4:	80800517 	ldw	r2,20(r16)
802052d8:	81400417 	ldw	r5,16(r16)
802052dc:	81c00017 	ldw	r7,0(r16)
802052e0:	10a7883a 	add	r19,r2,r2
802052e4:	9885883a 	add	r2,r19,r2
802052e8:	1026d7fa 	srli	r19,r2,31
802052ec:	396dc83a 	sub	r22,r7,r5
802052f0:	b1000044 	addi	r4,r22,1
802052f4:	9885883a 	add	r2,r19,r2
802052f8:	1027d07a 	srai	r19,r2,1
802052fc:	2485883a 	add	r2,r4,r18
80205300:	980d883a 	mov	r6,r19
80205304:	9880022e 	bgeu	r19,r2,80205310 <__sfvwrite_r+0x3ec>
80205308:	1027883a 	mov	r19,r2
8020530c:	100d883a 	mov	r6,r2
80205310:	18c1000c 	andi	r3,r3,1024
80205314:	18001c26 	beq	r3,zero,80205388 <__sfvwrite_r+0x464>
80205318:	300b883a 	mov	r5,r6
8020531c:	a809883a 	mov	r4,r21
80205320:	02058000 	call	80205800 <_malloc_r>
80205324:	102f883a 	mov	r23,r2
80205328:	10002926 	beq	r2,zero,802053d0 <__sfvwrite_r+0x4ac>
8020532c:	81400417 	ldw	r5,16(r16)
80205330:	b00d883a 	mov	r6,r22
80205334:	1009883a 	mov	r4,r2
80205338:	02004dc0 	call	802004dc <memcpy>
8020533c:	8080030b 	ldhu	r2,12(r16)
80205340:	00fedfc4 	movi	r3,-1153
80205344:	10c4703a 	and	r2,r2,r3
80205348:	10802014 	ori	r2,r2,128
8020534c:	8080030d 	sth	r2,12(r16)
80205350:	bd89883a 	add	r4,r23,r22
80205354:	9d8fc83a 	sub	r7,r19,r22
80205358:	85c00415 	stw	r23,16(r16)
8020535c:	84c00515 	stw	r19,20(r16)
80205360:	81000015 	stw	r4,0(r16)
80205364:	9027883a 	mov	r19,r18
80205368:	81c00215 	stw	r7,8(r16)
8020536c:	902f883a 	mov	r23,r18
80205370:	003f3b06 	br	80205060 <__reset+0xfa1e5060>
80205374:	800b883a 	mov	r5,r16
80205378:	a809883a 	mov	r4,r21
8020537c:	02046c40 	call	802046c4 <_fflush_r>
80205380:	103fb926 	beq	r2,zero,80205268 <__reset+0xfa1e5268>
80205384:	003f6506 	br	8020511c <__reset+0xfa1e511c>
80205388:	a809883a 	mov	r4,r21
8020538c:	02073700 	call	80207370 <_realloc_r>
80205390:	102f883a 	mov	r23,r2
80205394:	103fee1e 	bne	r2,zero,80205350 <__reset+0xfa1e5350>
80205398:	81400417 	ldw	r5,16(r16)
8020539c:	a809883a 	mov	r4,r21
802053a0:	0204c140 	call	80204c14 <_free_r>
802053a4:	8080030b 	ldhu	r2,12(r16)
802053a8:	00ffdfc4 	movi	r3,-129
802053ac:	1884703a 	and	r2,r3,r2
802053b0:	00c00304 	movi	r3,12
802053b4:	a8c00015 	stw	r3,0(r21)
802053b8:	003f5906 	br	80205120 <__reset+0xfa1e5120>
802053bc:	94c00044 	addi	r19,r18,1
802053c0:	02000044 	movi	r8,1
802053c4:	003f6006 	br	80205148 <__reset+0xfa1e5148>
802053c8:	00bfffc4 	movi	r2,-1
802053cc:	003f0306 	br	80204fdc <__reset+0xfa1e4fdc>
802053d0:	00800304 	movi	r2,12
802053d4:	a8800015 	stw	r2,0(r21)
802053d8:	8080030b 	ldhu	r2,12(r16)
802053dc:	003f5006 	br	80205120 <__reset+0xfa1e5120>

802053e0 <_fwalk>:
802053e0:	defff704 	addi	sp,sp,-36
802053e4:	dd000415 	stw	r20,16(sp)
802053e8:	dfc00815 	stw	ra,32(sp)
802053ec:	ddc00715 	stw	r23,28(sp)
802053f0:	dd800615 	stw	r22,24(sp)
802053f4:	dd400515 	stw	r21,20(sp)
802053f8:	dcc00315 	stw	r19,12(sp)
802053fc:	dc800215 	stw	r18,8(sp)
80205400:	dc400115 	stw	r17,4(sp)
80205404:	dc000015 	stw	r16,0(sp)
80205408:	2500b804 	addi	r20,r4,736
8020540c:	a0002326 	beq	r20,zero,8020549c <_fwalk+0xbc>
80205410:	282b883a 	mov	r21,r5
80205414:	002f883a 	mov	r23,zero
80205418:	05800044 	movi	r22,1
8020541c:	04ffffc4 	movi	r19,-1
80205420:	a4400117 	ldw	r17,4(r20)
80205424:	a4800217 	ldw	r18,8(r20)
80205428:	8c7fffc4 	addi	r17,r17,-1
8020542c:	88000d16 	blt	r17,zero,80205464 <_fwalk+0x84>
80205430:	94000304 	addi	r16,r18,12
80205434:	94800384 	addi	r18,r18,14
80205438:	8080000b 	ldhu	r2,0(r16)
8020543c:	8c7fffc4 	addi	r17,r17,-1
80205440:	813ffd04 	addi	r4,r16,-12
80205444:	b080042e 	bgeu	r22,r2,80205458 <_fwalk+0x78>
80205448:	9080000f 	ldh	r2,0(r18)
8020544c:	14c00226 	beq	r2,r19,80205458 <_fwalk+0x78>
80205450:	a83ee83a 	callr	r21
80205454:	b8aeb03a 	or	r23,r23,r2
80205458:	84001a04 	addi	r16,r16,104
8020545c:	94801a04 	addi	r18,r18,104
80205460:	8cfff51e 	bne	r17,r19,80205438 <__reset+0xfa1e5438>
80205464:	a5000017 	ldw	r20,0(r20)
80205468:	a03fed1e 	bne	r20,zero,80205420 <__reset+0xfa1e5420>
8020546c:	b805883a 	mov	r2,r23
80205470:	dfc00817 	ldw	ra,32(sp)
80205474:	ddc00717 	ldw	r23,28(sp)
80205478:	dd800617 	ldw	r22,24(sp)
8020547c:	dd400517 	ldw	r21,20(sp)
80205480:	dd000417 	ldw	r20,16(sp)
80205484:	dcc00317 	ldw	r19,12(sp)
80205488:	dc800217 	ldw	r18,8(sp)
8020548c:	dc400117 	ldw	r17,4(sp)
80205490:	dc000017 	ldw	r16,0(sp)
80205494:	dec00904 	addi	sp,sp,36
80205498:	f800283a 	ret
8020549c:	002f883a 	mov	r23,zero
802054a0:	003ff206 	br	8020546c <__reset+0xfa1e546c>

802054a4 <_fwalk_reent>:
802054a4:	defff704 	addi	sp,sp,-36
802054a8:	dd000415 	stw	r20,16(sp)
802054ac:	dfc00815 	stw	ra,32(sp)
802054b0:	ddc00715 	stw	r23,28(sp)
802054b4:	dd800615 	stw	r22,24(sp)
802054b8:	dd400515 	stw	r21,20(sp)
802054bc:	dcc00315 	stw	r19,12(sp)
802054c0:	dc800215 	stw	r18,8(sp)
802054c4:	dc400115 	stw	r17,4(sp)
802054c8:	dc000015 	stw	r16,0(sp)
802054cc:	2500b804 	addi	r20,r4,736
802054d0:	a0002326 	beq	r20,zero,80205560 <_fwalk_reent+0xbc>
802054d4:	282b883a 	mov	r21,r5
802054d8:	2027883a 	mov	r19,r4
802054dc:	002f883a 	mov	r23,zero
802054e0:	05800044 	movi	r22,1
802054e4:	04bfffc4 	movi	r18,-1
802054e8:	a4400117 	ldw	r17,4(r20)
802054ec:	a4000217 	ldw	r16,8(r20)
802054f0:	8c7fffc4 	addi	r17,r17,-1
802054f4:	88000c16 	blt	r17,zero,80205528 <_fwalk_reent+0x84>
802054f8:	84000304 	addi	r16,r16,12
802054fc:	8080000b 	ldhu	r2,0(r16)
80205500:	8c7fffc4 	addi	r17,r17,-1
80205504:	817ffd04 	addi	r5,r16,-12
80205508:	b080052e 	bgeu	r22,r2,80205520 <_fwalk_reent+0x7c>
8020550c:	8080008f 	ldh	r2,2(r16)
80205510:	9809883a 	mov	r4,r19
80205514:	14800226 	beq	r2,r18,80205520 <_fwalk_reent+0x7c>
80205518:	a83ee83a 	callr	r21
8020551c:	b8aeb03a 	or	r23,r23,r2
80205520:	84001a04 	addi	r16,r16,104
80205524:	8cbff51e 	bne	r17,r18,802054fc <__reset+0xfa1e54fc>
80205528:	a5000017 	ldw	r20,0(r20)
8020552c:	a03fee1e 	bne	r20,zero,802054e8 <__reset+0xfa1e54e8>
80205530:	b805883a 	mov	r2,r23
80205534:	dfc00817 	ldw	ra,32(sp)
80205538:	ddc00717 	ldw	r23,28(sp)
8020553c:	dd800617 	ldw	r22,24(sp)
80205540:	dd400517 	ldw	r21,20(sp)
80205544:	dd000417 	ldw	r20,16(sp)
80205548:	dcc00317 	ldw	r19,12(sp)
8020554c:	dc800217 	ldw	r18,8(sp)
80205550:	dc400117 	ldw	r17,4(sp)
80205554:	dc000017 	ldw	r16,0(sp)
80205558:	dec00904 	addi	sp,sp,36
8020555c:	f800283a 	ret
80205560:	002f883a 	mov	r23,zero
80205564:	003ff206 	br	80205530 <__reset+0xfa1e5530>

80205568 <_setlocale_r>:
80205568:	30001b26 	beq	r6,zero,802055d8 <_setlocale_r+0x70>
8020556c:	01600874 	movhi	r5,32801
80205570:	defffe04 	addi	sp,sp,-8
80205574:	29467104 	addi	r5,r5,6596
80205578:	3009883a 	mov	r4,r6
8020557c:	dc000015 	stw	r16,0(sp)
80205580:	dfc00115 	stw	ra,4(sp)
80205584:	3021883a 	mov	r16,r6
80205588:	0207ad80 	call	80207ad8 <strcmp>
8020558c:	1000061e 	bne	r2,zero,802055a8 <_setlocale_r+0x40>
80205590:	00a00874 	movhi	r2,32801
80205594:	10867004 	addi	r2,r2,6592
80205598:	dfc00117 	ldw	ra,4(sp)
8020559c:	dc000017 	ldw	r16,0(sp)
802055a0:	dec00204 	addi	sp,sp,8
802055a4:	f800283a 	ret
802055a8:	01600874 	movhi	r5,32801
802055ac:	29467004 	addi	r5,r5,6592
802055b0:	8009883a 	mov	r4,r16
802055b4:	0207ad80 	call	80207ad8 <strcmp>
802055b8:	103ff526 	beq	r2,zero,80205590 <__reset+0xfa1e5590>
802055bc:	01600874 	movhi	r5,32801
802055c0:	29465b04 	addi	r5,r5,6508
802055c4:	8009883a 	mov	r4,r16
802055c8:	0207ad80 	call	80207ad8 <strcmp>
802055cc:	103ff026 	beq	r2,zero,80205590 <__reset+0xfa1e5590>
802055d0:	0005883a 	mov	r2,zero
802055d4:	003ff006 	br	80205598 <__reset+0xfa1e5598>
802055d8:	00a00874 	movhi	r2,32801
802055dc:	10867004 	addi	r2,r2,6592
802055e0:	f800283a 	ret

802055e4 <__locale_charset>:
802055e4:	00a00874 	movhi	r2,32801
802055e8:	1088bd04 	addi	r2,r2,8948
802055ec:	f800283a 	ret

802055f0 <__locale_mb_cur_max>:
802055f0:	00a00874 	movhi	r2,32801
802055f4:	108e9504 	addi	r2,r2,14932
802055f8:	10800017 	ldw	r2,0(r2)
802055fc:	f800283a 	ret

80205600 <__locale_msgcharset>:
80205600:	00a00874 	movhi	r2,32801
80205604:	1088b504 	addi	r2,r2,8916
80205608:	f800283a 	ret

8020560c <__locale_cjk_lang>:
8020560c:	0005883a 	mov	r2,zero
80205610:	f800283a 	ret

80205614 <_localeconv_r>:
80205614:	00a00874 	movhi	r2,32801
80205618:	1088c504 	addi	r2,r2,8980
8020561c:	f800283a 	ret

80205620 <setlocale>:
80205620:	00a00874 	movhi	r2,32801
80205624:	108e9404 	addi	r2,r2,14928
80205628:	280d883a 	mov	r6,r5
8020562c:	200b883a 	mov	r5,r4
80205630:	11000017 	ldw	r4,0(r2)
80205634:	02055681 	jmpi	80205568 <_setlocale_r>

80205638 <localeconv>:
80205638:	00a00874 	movhi	r2,32801
8020563c:	1088c504 	addi	r2,r2,8980
80205640:	f800283a 	ret

80205644 <__smakebuf_r>:
80205644:	2880030b 	ldhu	r2,12(r5)
80205648:	10c0008c 	andi	r3,r2,2
8020564c:	1800411e 	bne	r3,zero,80205754 <__smakebuf_r+0x110>
80205650:	deffec04 	addi	sp,sp,-80
80205654:	dc000f15 	stw	r16,60(sp)
80205658:	2821883a 	mov	r16,r5
8020565c:	2940038f 	ldh	r5,14(r5)
80205660:	dc401015 	stw	r17,64(sp)
80205664:	dfc01315 	stw	ra,76(sp)
80205668:	dcc01215 	stw	r19,72(sp)
8020566c:	dc801115 	stw	r18,68(sp)
80205670:	2023883a 	mov	r17,r4
80205674:	28001c16 	blt	r5,zero,802056e8 <__smakebuf_r+0xa4>
80205678:	d80d883a 	mov	r6,sp
8020567c:	02096800 	call	80209680 <_fstat_r>
80205680:	10001816 	blt	r2,zero,802056e4 <__smakebuf_r+0xa0>
80205684:	d8800117 	ldw	r2,4(sp)
80205688:	00e00014 	movui	r3,32768
8020568c:	10bc000c 	andi	r2,r2,61440
80205690:	14c80020 	cmpeqi	r19,r2,8192
80205694:	10c03726 	beq	r2,r3,80205774 <__smakebuf_r+0x130>
80205698:	80c0030b 	ldhu	r3,12(r16)
8020569c:	18c20014 	ori	r3,r3,2048
802056a0:	80c0030d 	sth	r3,12(r16)
802056a4:	00c80004 	movi	r3,8192
802056a8:	10c0521e 	bne	r2,r3,802057f4 <__smakebuf_r+0x1b0>
802056ac:	8140038f 	ldh	r5,14(r16)
802056b0:	8809883a 	mov	r4,r17
802056b4:	02096dc0 	call	802096dc <_isatty_r>
802056b8:	10004c26 	beq	r2,zero,802057ec <__smakebuf_r+0x1a8>
802056bc:	8080030b 	ldhu	r2,12(r16)
802056c0:	80c010c4 	addi	r3,r16,67
802056c4:	80c00015 	stw	r3,0(r16)
802056c8:	10800054 	ori	r2,r2,1
802056cc:	8080030d 	sth	r2,12(r16)
802056d0:	00800044 	movi	r2,1
802056d4:	80c00415 	stw	r3,16(r16)
802056d8:	80800515 	stw	r2,20(r16)
802056dc:	04810004 	movi	r18,1024
802056e0:	00000706 	br	80205700 <__smakebuf_r+0xbc>
802056e4:	8080030b 	ldhu	r2,12(r16)
802056e8:	10c0200c 	andi	r3,r2,128
802056ec:	18001f1e 	bne	r3,zero,8020576c <__smakebuf_r+0x128>
802056f0:	04810004 	movi	r18,1024
802056f4:	10820014 	ori	r2,r2,2048
802056f8:	8080030d 	sth	r2,12(r16)
802056fc:	0027883a 	mov	r19,zero
80205700:	900b883a 	mov	r5,r18
80205704:	8809883a 	mov	r4,r17
80205708:	02058000 	call	80205800 <_malloc_r>
8020570c:	10002c26 	beq	r2,zero,802057c0 <__smakebuf_r+0x17c>
80205710:	80c0030b 	ldhu	r3,12(r16)
80205714:	01200834 	movhi	r4,32800
80205718:	2111d604 	addi	r4,r4,18264
8020571c:	89000f15 	stw	r4,60(r17)
80205720:	18c02014 	ori	r3,r3,128
80205724:	80c0030d 	sth	r3,12(r16)
80205728:	80800015 	stw	r2,0(r16)
8020572c:	80800415 	stw	r2,16(r16)
80205730:	84800515 	stw	r18,20(r16)
80205734:	98001a1e 	bne	r19,zero,802057a0 <__smakebuf_r+0x15c>
80205738:	dfc01317 	ldw	ra,76(sp)
8020573c:	dcc01217 	ldw	r19,72(sp)
80205740:	dc801117 	ldw	r18,68(sp)
80205744:	dc401017 	ldw	r17,64(sp)
80205748:	dc000f17 	ldw	r16,60(sp)
8020574c:	dec01404 	addi	sp,sp,80
80205750:	f800283a 	ret
80205754:	288010c4 	addi	r2,r5,67
80205758:	28800015 	stw	r2,0(r5)
8020575c:	28800415 	stw	r2,16(r5)
80205760:	00800044 	movi	r2,1
80205764:	28800515 	stw	r2,20(r5)
80205768:	f800283a 	ret
8020576c:	04801004 	movi	r18,64
80205770:	003fe006 	br	802056f4 <__reset+0xfa1e56f4>
80205774:	81000a17 	ldw	r4,40(r16)
80205778:	00e00834 	movhi	r3,32800
8020577c:	18de9d04 	addi	r3,r3,31348
80205780:	20ffc51e 	bne	r4,r3,80205698 <__reset+0xfa1e5698>
80205784:	8080030b 	ldhu	r2,12(r16)
80205788:	04810004 	movi	r18,1024
8020578c:	84801315 	stw	r18,76(r16)
80205790:	1484b03a 	or	r2,r2,r18
80205794:	8080030d 	sth	r2,12(r16)
80205798:	0027883a 	mov	r19,zero
8020579c:	003fd806 	br	80205700 <__reset+0xfa1e5700>
802057a0:	8140038f 	ldh	r5,14(r16)
802057a4:	8809883a 	mov	r4,r17
802057a8:	02096dc0 	call	802096dc <_isatty_r>
802057ac:	103fe226 	beq	r2,zero,80205738 <__reset+0xfa1e5738>
802057b0:	8080030b 	ldhu	r2,12(r16)
802057b4:	10800054 	ori	r2,r2,1
802057b8:	8080030d 	sth	r2,12(r16)
802057bc:	003fde06 	br	80205738 <__reset+0xfa1e5738>
802057c0:	8080030b 	ldhu	r2,12(r16)
802057c4:	10c0800c 	andi	r3,r2,512
802057c8:	183fdb1e 	bne	r3,zero,80205738 <__reset+0xfa1e5738>
802057cc:	10800094 	ori	r2,r2,2
802057d0:	80c010c4 	addi	r3,r16,67
802057d4:	8080030d 	sth	r2,12(r16)
802057d8:	00800044 	movi	r2,1
802057dc:	80c00015 	stw	r3,0(r16)
802057e0:	80c00415 	stw	r3,16(r16)
802057e4:	80800515 	stw	r2,20(r16)
802057e8:	003fd306 	br	80205738 <__reset+0xfa1e5738>
802057ec:	04810004 	movi	r18,1024
802057f0:	003fc306 	br	80205700 <__reset+0xfa1e5700>
802057f4:	0027883a 	mov	r19,zero
802057f8:	04810004 	movi	r18,1024
802057fc:	003fc006 	br	80205700 <__reset+0xfa1e5700>

80205800 <_malloc_r>:
80205800:	defff504 	addi	sp,sp,-44
80205804:	dc800315 	stw	r18,12(sp)
80205808:	dfc00a15 	stw	ra,40(sp)
8020580c:	df000915 	stw	fp,36(sp)
80205810:	ddc00815 	stw	r23,32(sp)
80205814:	dd800715 	stw	r22,28(sp)
80205818:	dd400615 	stw	r21,24(sp)
8020581c:	dd000515 	stw	r20,20(sp)
80205820:	dcc00415 	stw	r19,16(sp)
80205824:	dc400215 	stw	r17,8(sp)
80205828:	dc000115 	stw	r16,4(sp)
8020582c:	288002c4 	addi	r2,r5,11
80205830:	00c00584 	movi	r3,22
80205834:	2025883a 	mov	r18,r4
80205838:	18807f2e 	bgeu	r3,r2,80205a38 <_malloc_r+0x238>
8020583c:	047ffe04 	movi	r17,-8
80205840:	1462703a 	and	r17,r2,r17
80205844:	8800a316 	blt	r17,zero,80205ad4 <_malloc_r+0x2d4>
80205848:	8940a236 	bltu	r17,r5,80205ad4 <_malloc_r+0x2d4>
8020584c:	020d28c0 	call	8020d28c <__malloc_lock>
80205850:	00807dc4 	movi	r2,503
80205854:	1441e92e 	bgeu	r2,r17,80205ffc <_malloc_r+0x7fc>
80205858:	8804d27a 	srli	r2,r17,9
8020585c:	1000a126 	beq	r2,zero,80205ae4 <_malloc_r+0x2e4>
80205860:	00c00104 	movi	r3,4
80205864:	18811e36 	bltu	r3,r2,80205ce0 <_malloc_r+0x4e0>
80205868:	8804d1ba 	srli	r2,r17,6
8020586c:	12000e44 	addi	r8,r2,57
80205870:	11c00e04 	addi	r7,r2,56
80205874:	4209883a 	add	r4,r8,r8
80205878:	04e00874 	movhi	r19,32801
8020587c:	2109883a 	add	r4,r4,r4
80205880:	9cc8d304 	addi	r19,r19,9036
80205884:	2109883a 	add	r4,r4,r4
80205888:	9909883a 	add	r4,r19,r4
8020588c:	24000117 	ldw	r16,4(r4)
80205890:	213ffe04 	addi	r4,r4,-8
80205894:	24009726 	beq	r4,r16,80205af4 <_malloc_r+0x2f4>
80205898:	80800117 	ldw	r2,4(r16)
8020589c:	01bfff04 	movi	r6,-4
802058a0:	014003c4 	movi	r5,15
802058a4:	1184703a 	and	r2,r2,r6
802058a8:	1447c83a 	sub	r3,r2,r17
802058ac:	28c00716 	blt	r5,r3,802058cc <_malloc_r+0xcc>
802058b0:	1800920e 	bge	r3,zero,80205afc <_malloc_r+0x2fc>
802058b4:	84000317 	ldw	r16,12(r16)
802058b8:	24008e26 	beq	r4,r16,80205af4 <_malloc_r+0x2f4>
802058bc:	80800117 	ldw	r2,4(r16)
802058c0:	1184703a 	and	r2,r2,r6
802058c4:	1447c83a 	sub	r3,r2,r17
802058c8:	28fff90e 	bge	r5,r3,802058b0 <__reset+0xfa1e58b0>
802058cc:	3809883a 	mov	r4,r7
802058d0:	01a00874 	movhi	r6,32801
802058d4:	9c000417 	ldw	r16,16(r19)
802058d8:	3188d304 	addi	r6,r6,9036
802058dc:	32000204 	addi	r8,r6,8
802058e0:	82013426 	beq	r16,r8,80205db4 <_malloc_r+0x5b4>
802058e4:	80c00117 	ldw	r3,4(r16)
802058e8:	00bfff04 	movi	r2,-4
802058ec:	188e703a 	and	r7,r3,r2
802058f0:	3c45c83a 	sub	r2,r7,r17
802058f4:	00c003c4 	movi	r3,15
802058f8:	18811f16 	blt	r3,r2,80205d78 <_malloc_r+0x578>
802058fc:	32000515 	stw	r8,20(r6)
80205900:	32000415 	stw	r8,16(r6)
80205904:	10007f0e 	bge	r2,zero,80205b04 <_malloc_r+0x304>
80205908:	00807fc4 	movi	r2,511
8020590c:	11c0fd36 	bltu	r2,r7,80205d04 <_malloc_r+0x504>
80205910:	3806d0fa 	srli	r3,r7,3
80205914:	01c00044 	movi	r7,1
80205918:	30800117 	ldw	r2,4(r6)
8020591c:	19400044 	addi	r5,r3,1
80205920:	294b883a 	add	r5,r5,r5
80205924:	1807d0ba 	srai	r3,r3,2
80205928:	294b883a 	add	r5,r5,r5
8020592c:	294b883a 	add	r5,r5,r5
80205930:	298b883a 	add	r5,r5,r6
80205934:	38c6983a 	sll	r3,r7,r3
80205938:	29c00017 	ldw	r7,0(r5)
8020593c:	2a7ffe04 	addi	r9,r5,-8
80205940:	1886b03a 	or	r3,r3,r2
80205944:	82400315 	stw	r9,12(r16)
80205948:	81c00215 	stw	r7,8(r16)
8020594c:	30c00115 	stw	r3,4(r6)
80205950:	2c000015 	stw	r16,0(r5)
80205954:	3c000315 	stw	r16,12(r7)
80205958:	2005d0ba 	srai	r2,r4,2
8020595c:	01400044 	movi	r5,1
80205960:	288a983a 	sll	r5,r5,r2
80205964:	19406f36 	bltu	r3,r5,80205b24 <_malloc_r+0x324>
80205968:	28c4703a 	and	r2,r5,r3
8020596c:	10000a1e 	bne	r2,zero,80205998 <_malloc_r+0x198>
80205970:	00bfff04 	movi	r2,-4
80205974:	294b883a 	add	r5,r5,r5
80205978:	2088703a 	and	r4,r4,r2
8020597c:	28c4703a 	and	r2,r5,r3
80205980:	21000104 	addi	r4,r4,4
80205984:	1000041e 	bne	r2,zero,80205998 <_malloc_r+0x198>
80205988:	294b883a 	add	r5,r5,r5
8020598c:	28c4703a 	and	r2,r5,r3
80205990:	21000104 	addi	r4,r4,4
80205994:	103ffc26 	beq	r2,zero,80205988 <__reset+0xfa1e5988>
80205998:	02bfff04 	movi	r10,-4
8020599c:	024003c4 	movi	r9,15
802059a0:	21800044 	addi	r6,r4,1
802059a4:	318d883a 	add	r6,r6,r6
802059a8:	318d883a 	add	r6,r6,r6
802059ac:	318d883a 	add	r6,r6,r6
802059b0:	998d883a 	add	r6,r19,r6
802059b4:	333ffe04 	addi	r12,r6,-8
802059b8:	2017883a 	mov	r11,r4
802059bc:	31800104 	addi	r6,r6,4
802059c0:	34000017 	ldw	r16,0(r6)
802059c4:	31fffd04 	addi	r7,r6,-12
802059c8:	81c0041e 	bne	r16,r7,802059dc <_malloc_r+0x1dc>
802059cc:	0000fb06 	br	80205dbc <_malloc_r+0x5bc>
802059d0:	1801030e 	bge	r3,zero,80205de0 <_malloc_r+0x5e0>
802059d4:	84000317 	ldw	r16,12(r16)
802059d8:	81c0f826 	beq	r16,r7,80205dbc <_malloc_r+0x5bc>
802059dc:	80800117 	ldw	r2,4(r16)
802059e0:	1284703a 	and	r2,r2,r10
802059e4:	1447c83a 	sub	r3,r2,r17
802059e8:	48fff90e 	bge	r9,r3,802059d0 <__reset+0xfa1e59d0>
802059ec:	80800317 	ldw	r2,12(r16)
802059f0:	81000217 	ldw	r4,8(r16)
802059f4:	89400054 	ori	r5,r17,1
802059f8:	81400115 	stw	r5,4(r16)
802059fc:	20800315 	stw	r2,12(r4)
80205a00:	11000215 	stw	r4,8(r2)
80205a04:	8463883a 	add	r17,r16,r17
80205a08:	9c400515 	stw	r17,20(r19)
80205a0c:	9c400415 	stw	r17,16(r19)
80205a10:	18800054 	ori	r2,r3,1
80205a14:	88800115 	stw	r2,4(r17)
80205a18:	8a000315 	stw	r8,12(r17)
80205a1c:	8a000215 	stw	r8,8(r17)
80205a20:	88e3883a 	add	r17,r17,r3
80205a24:	88c00015 	stw	r3,0(r17)
80205a28:	9009883a 	mov	r4,r18
80205a2c:	020d2b00 	call	8020d2b0 <__malloc_unlock>
80205a30:	80800204 	addi	r2,r16,8
80205a34:	00001b06 	br	80205aa4 <_malloc_r+0x2a4>
80205a38:	04400404 	movi	r17,16
80205a3c:	89402536 	bltu	r17,r5,80205ad4 <_malloc_r+0x2d4>
80205a40:	020d28c0 	call	8020d28c <__malloc_lock>
80205a44:	00800184 	movi	r2,6
80205a48:	01000084 	movi	r4,2
80205a4c:	04e00874 	movhi	r19,32801
80205a50:	1085883a 	add	r2,r2,r2
80205a54:	9cc8d304 	addi	r19,r19,9036
80205a58:	1085883a 	add	r2,r2,r2
80205a5c:	9885883a 	add	r2,r19,r2
80205a60:	14000117 	ldw	r16,4(r2)
80205a64:	10fffe04 	addi	r3,r2,-8
80205a68:	80c0d926 	beq	r16,r3,80205dd0 <_malloc_r+0x5d0>
80205a6c:	80c00117 	ldw	r3,4(r16)
80205a70:	81000317 	ldw	r4,12(r16)
80205a74:	00bfff04 	movi	r2,-4
80205a78:	1884703a 	and	r2,r3,r2
80205a7c:	81400217 	ldw	r5,8(r16)
80205a80:	8085883a 	add	r2,r16,r2
80205a84:	10c00117 	ldw	r3,4(r2)
80205a88:	29000315 	stw	r4,12(r5)
80205a8c:	21400215 	stw	r5,8(r4)
80205a90:	18c00054 	ori	r3,r3,1
80205a94:	10c00115 	stw	r3,4(r2)
80205a98:	9009883a 	mov	r4,r18
80205a9c:	020d2b00 	call	8020d2b0 <__malloc_unlock>
80205aa0:	80800204 	addi	r2,r16,8
80205aa4:	dfc00a17 	ldw	ra,40(sp)
80205aa8:	df000917 	ldw	fp,36(sp)
80205aac:	ddc00817 	ldw	r23,32(sp)
80205ab0:	dd800717 	ldw	r22,28(sp)
80205ab4:	dd400617 	ldw	r21,24(sp)
80205ab8:	dd000517 	ldw	r20,20(sp)
80205abc:	dcc00417 	ldw	r19,16(sp)
80205ac0:	dc800317 	ldw	r18,12(sp)
80205ac4:	dc400217 	ldw	r17,8(sp)
80205ac8:	dc000117 	ldw	r16,4(sp)
80205acc:	dec00b04 	addi	sp,sp,44
80205ad0:	f800283a 	ret
80205ad4:	00800304 	movi	r2,12
80205ad8:	90800015 	stw	r2,0(r18)
80205adc:	0005883a 	mov	r2,zero
80205ae0:	003ff006 	br	80205aa4 <__reset+0xfa1e5aa4>
80205ae4:	01002004 	movi	r4,128
80205ae8:	02001004 	movi	r8,64
80205aec:	01c00fc4 	movi	r7,63
80205af0:	003f6106 	br	80205878 <__reset+0xfa1e5878>
80205af4:	4009883a 	mov	r4,r8
80205af8:	003f7506 	br	802058d0 <__reset+0xfa1e58d0>
80205afc:	81000317 	ldw	r4,12(r16)
80205b00:	003fde06 	br	80205a7c <__reset+0xfa1e5a7c>
80205b04:	81c5883a 	add	r2,r16,r7
80205b08:	11400117 	ldw	r5,4(r2)
80205b0c:	9009883a 	mov	r4,r18
80205b10:	29400054 	ori	r5,r5,1
80205b14:	11400115 	stw	r5,4(r2)
80205b18:	020d2b00 	call	8020d2b0 <__malloc_unlock>
80205b1c:	80800204 	addi	r2,r16,8
80205b20:	003fe006 	br	80205aa4 <__reset+0xfa1e5aa4>
80205b24:	9c000217 	ldw	r16,8(r19)
80205b28:	00bfff04 	movi	r2,-4
80205b2c:	85800117 	ldw	r22,4(r16)
80205b30:	b0ac703a 	and	r22,r22,r2
80205b34:	b4400336 	bltu	r22,r17,80205b44 <_malloc_r+0x344>
80205b38:	b445c83a 	sub	r2,r22,r17
80205b3c:	00c003c4 	movi	r3,15
80205b40:	18805d16 	blt	r3,r2,80205cb8 <_malloc_r+0x4b8>
80205b44:	05e00874 	movhi	r23,32801
80205b48:	00a00874 	movhi	r2,32801
80205b4c:	108eab04 	addi	r2,r2,15020
80205b50:	bdce9604 	addi	r23,r23,14936
80205b54:	15400017 	ldw	r21,0(r2)
80205b58:	b8c00017 	ldw	r3,0(r23)
80205b5c:	00bfffc4 	movi	r2,-1
80205b60:	858d883a 	add	r6,r16,r22
80205b64:	8d6b883a 	add	r21,r17,r21
80205b68:	1880ea26 	beq	r3,r2,80205f14 <_malloc_r+0x714>
80205b6c:	ad4403c4 	addi	r21,r21,4111
80205b70:	00bc0004 	movi	r2,-4096
80205b74:	a8aa703a 	and	r21,r21,r2
80205b78:	a80b883a 	mov	r5,r21
80205b7c:	9009883a 	mov	r4,r18
80205b80:	d9800015 	stw	r6,0(sp)
80205b84:	02079480 	call	80207948 <_sbrk_r>
80205b88:	1029883a 	mov	r20,r2
80205b8c:	00bfffc4 	movi	r2,-1
80205b90:	d9800017 	ldw	r6,0(sp)
80205b94:	a080e826 	beq	r20,r2,80205f38 <_malloc_r+0x738>
80205b98:	a180a636 	bltu	r20,r6,80205e34 <_malloc_r+0x634>
80205b9c:	07200874 	movhi	fp,32801
80205ba0:	e70eb404 	addi	fp,fp,15056
80205ba4:	e0800017 	ldw	r2,0(fp)
80205ba8:	a887883a 	add	r3,r21,r2
80205bac:	e0c00015 	stw	r3,0(fp)
80205bb0:	3500e626 	beq	r6,r20,80205f4c <_malloc_r+0x74c>
80205bb4:	b9000017 	ldw	r4,0(r23)
80205bb8:	00bfffc4 	movi	r2,-1
80205bbc:	2080ee26 	beq	r4,r2,80205f78 <_malloc_r+0x778>
80205bc0:	a185c83a 	sub	r2,r20,r6
80205bc4:	10c5883a 	add	r2,r2,r3
80205bc8:	e0800015 	stw	r2,0(fp)
80205bcc:	a0c001cc 	andi	r3,r20,7
80205bd0:	1800bc26 	beq	r3,zero,80205ec4 <_malloc_r+0x6c4>
80205bd4:	a0e9c83a 	sub	r20,r20,r3
80205bd8:	00840204 	movi	r2,4104
80205bdc:	a5000204 	addi	r20,r20,8
80205be0:	10c7c83a 	sub	r3,r2,r3
80205be4:	a545883a 	add	r2,r20,r21
80205be8:	1083ffcc 	andi	r2,r2,4095
80205bec:	18abc83a 	sub	r21,r3,r2
80205bf0:	a80b883a 	mov	r5,r21
80205bf4:	9009883a 	mov	r4,r18
80205bf8:	02079480 	call	80207948 <_sbrk_r>
80205bfc:	00ffffc4 	movi	r3,-1
80205c00:	10c0e126 	beq	r2,r3,80205f88 <_malloc_r+0x788>
80205c04:	1505c83a 	sub	r2,r2,r20
80205c08:	1545883a 	add	r2,r2,r21
80205c0c:	10800054 	ori	r2,r2,1
80205c10:	e0c00017 	ldw	r3,0(fp)
80205c14:	9d000215 	stw	r20,8(r19)
80205c18:	a0800115 	stw	r2,4(r20)
80205c1c:	a8c7883a 	add	r3,r21,r3
80205c20:	e0c00015 	stw	r3,0(fp)
80205c24:	84c00e26 	beq	r16,r19,80205c60 <_malloc_r+0x460>
80205c28:	018003c4 	movi	r6,15
80205c2c:	3580a72e 	bgeu	r6,r22,80205ecc <_malloc_r+0x6cc>
80205c30:	81400117 	ldw	r5,4(r16)
80205c34:	013ffe04 	movi	r4,-8
80205c38:	b0bffd04 	addi	r2,r22,-12
80205c3c:	1104703a 	and	r2,r2,r4
80205c40:	2900004c 	andi	r4,r5,1
80205c44:	2088b03a 	or	r4,r4,r2
80205c48:	81000115 	stw	r4,4(r16)
80205c4c:	01400144 	movi	r5,5
80205c50:	8089883a 	add	r4,r16,r2
80205c54:	21400115 	stw	r5,4(r4)
80205c58:	21400215 	stw	r5,8(r4)
80205c5c:	3080cd36 	bltu	r6,r2,80205f94 <_malloc_r+0x794>
80205c60:	00a00874 	movhi	r2,32801
80205c64:	108eaa04 	addi	r2,r2,15016
80205c68:	11000017 	ldw	r4,0(r2)
80205c6c:	20c0012e 	bgeu	r4,r3,80205c74 <_malloc_r+0x474>
80205c70:	10c00015 	stw	r3,0(r2)
80205c74:	00a00874 	movhi	r2,32801
80205c78:	108ea904 	addi	r2,r2,15012
80205c7c:	11000017 	ldw	r4,0(r2)
80205c80:	9c000217 	ldw	r16,8(r19)
80205c84:	20c0012e 	bgeu	r4,r3,80205c8c <_malloc_r+0x48c>
80205c88:	10c00015 	stw	r3,0(r2)
80205c8c:	80c00117 	ldw	r3,4(r16)
80205c90:	00bfff04 	movi	r2,-4
80205c94:	1886703a 	and	r3,r3,r2
80205c98:	1c45c83a 	sub	r2,r3,r17
80205c9c:	1c400236 	bltu	r3,r17,80205ca8 <_malloc_r+0x4a8>
80205ca0:	00c003c4 	movi	r3,15
80205ca4:	18800416 	blt	r3,r2,80205cb8 <_malloc_r+0x4b8>
80205ca8:	9009883a 	mov	r4,r18
80205cac:	020d2b00 	call	8020d2b0 <__malloc_unlock>
80205cb0:	0005883a 	mov	r2,zero
80205cb4:	003f7b06 	br	80205aa4 <__reset+0xfa1e5aa4>
80205cb8:	88c00054 	ori	r3,r17,1
80205cbc:	80c00115 	stw	r3,4(r16)
80205cc0:	8463883a 	add	r17,r16,r17
80205cc4:	10800054 	ori	r2,r2,1
80205cc8:	9c400215 	stw	r17,8(r19)
80205ccc:	88800115 	stw	r2,4(r17)
80205cd0:	9009883a 	mov	r4,r18
80205cd4:	020d2b00 	call	8020d2b0 <__malloc_unlock>
80205cd8:	80800204 	addi	r2,r16,8
80205cdc:	003f7106 	br	80205aa4 <__reset+0xfa1e5aa4>
80205ce0:	00c00504 	movi	r3,20
80205ce4:	18804a2e 	bgeu	r3,r2,80205e10 <_malloc_r+0x610>
80205ce8:	00c01504 	movi	r3,84
80205cec:	18806e36 	bltu	r3,r2,80205ea8 <_malloc_r+0x6a8>
80205cf0:	8804d33a 	srli	r2,r17,12
80205cf4:	12001bc4 	addi	r8,r2,111
80205cf8:	11c01b84 	addi	r7,r2,110
80205cfc:	4209883a 	add	r4,r8,r8
80205d00:	003edd06 	br	80205878 <__reset+0xfa1e5878>
80205d04:	3804d27a 	srli	r2,r7,9
80205d08:	00c00104 	movi	r3,4
80205d0c:	1880442e 	bgeu	r3,r2,80205e20 <_malloc_r+0x620>
80205d10:	00c00504 	movi	r3,20
80205d14:	18808136 	bltu	r3,r2,80205f1c <_malloc_r+0x71c>
80205d18:	11401704 	addi	r5,r2,92
80205d1c:	10c016c4 	addi	r3,r2,91
80205d20:	294b883a 	add	r5,r5,r5
80205d24:	294b883a 	add	r5,r5,r5
80205d28:	294b883a 	add	r5,r5,r5
80205d2c:	994b883a 	add	r5,r19,r5
80205d30:	28800017 	ldw	r2,0(r5)
80205d34:	01a00874 	movhi	r6,32801
80205d38:	297ffe04 	addi	r5,r5,-8
80205d3c:	3188d304 	addi	r6,r6,9036
80205d40:	28806526 	beq	r5,r2,80205ed8 <_malloc_r+0x6d8>
80205d44:	01bfff04 	movi	r6,-4
80205d48:	10c00117 	ldw	r3,4(r2)
80205d4c:	1986703a 	and	r3,r3,r6
80205d50:	38c0022e 	bgeu	r7,r3,80205d5c <_malloc_r+0x55c>
80205d54:	10800217 	ldw	r2,8(r2)
80205d58:	28bffb1e 	bne	r5,r2,80205d48 <__reset+0xfa1e5d48>
80205d5c:	11400317 	ldw	r5,12(r2)
80205d60:	98c00117 	ldw	r3,4(r19)
80205d64:	81400315 	stw	r5,12(r16)
80205d68:	80800215 	stw	r2,8(r16)
80205d6c:	2c000215 	stw	r16,8(r5)
80205d70:	14000315 	stw	r16,12(r2)
80205d74:	003ef806 	br	80205958 <__reset+0xfa1e5958>
80205d78:	88c00054 	ori	r3,r17,1
80205d7c:	80c00115 	stw	r3,4(r16)
80205d80:	8463883a 	add	r17,r16,r17
80205d84:	34400515 	stw	r17,20(r6)
80205d88:	34400415 	stw	r17,16(r6)
80205d8c:	10c00054 	ori	r3,r2,1
80205d90:	8a000315 	stw	r8,12(r17)
80205d94:	8a000215 	stw	r8,8(r17)
80205d98:	88c00115 	stw	r3,4(r17)
80205d9c:	88a3883a 	add	r17,r17,r2
80205da0:	88800015 	stw	r2,0(r17)
80205da4:	9009883a 	mov	r4,r18
80205da8:	020d2b00 	call	8020d2b0 <__malloc_unlock>
80205dac:	80800204 	addi	r2,r16,8
80205db0:	003f3c06 	br	80205aa4 <__reset+0xfa1e5aa4>
80205db4:	30c00117 	ldw	r3,4(r6)
80205db8:	003ee706 	br	80205958 <__reset+0xfa1e5958>
80205dbc:	5ac00044 	addi	r11,r11,1
80205dc0:	588000cc 	andi	r2,r11,3
80205dc4:	31800204 	addi	r6,r6,8
80205dc8:	103efd1e 	bne	r2,zero,802059c0 <__reset+0xfa1e59c0>
80205dcc:	00002406 	br	80205e60 <_malloc_r+0x660>
80205dd0:	14000317 	ldw	r16,12(r2)
80205dd4:	143f251e 	bne	r2,r16,80205a6c <__reset+0xfa1e5a6c>
80205dd8:	21000084 	addi	r4,r4,2
80205ddc:	003ebc06 	br	802058d0 <__reset+0xfa1e58d0>
80205de0:	8085883a 	add	r2,r16,r2
80205de4:	10c00117 	ldw	r3,4(r2)
80205de8:	81000317 	ldw	r4,12(r16)
80205dec:	81400217 	ldw	r5,8(r16)
80205df0:	18c00054 	ori	r3,r3,1
80205df4:	10c00115 	stw	r3,4(r2)
80205df8:	29000315 	stw	r4,12(r5)
80205dfc:	21400215 	stw	r5,8(r4)
80205e00:	9009883a 	mov	r4,r18
80205e04:	020d2b00 	call	8020d2b0 <__malloc_unlock>
80205e08:	80800204 	addi	r2,r16,8
80205e0c:	003f2506 	br	80205aa4 <__reset+0xfa1e5aa4>
80205e10:	12001704 	addi	r8,r2,92
80205e14:	11c016c4 	addi	r7,r2,91
80205e18:	4209883a 	add	r4,r8,r8
80205e1c:	003e9606 	br	80205878 <__reset+0xfa1e5878>
80205e20:	3804d1ba 	srli	r2,r7,6
80205e24:	11400e44 	addi	r5,r2,57
80205e28:	10c00e04 	addi	r3,r2,56
80205e2c:	294b883a 	add	r5,r5,r5
80205e30:	003fbc06 	br	80205d24 <__reset+0xfa1e5d24>
80205e34:	84ff5926 	beq	r16,r19,80205b9c <__reset+0xfa1e5b9c>
80205e38:	00a00874 	movhi	r2,32801
80205e3c:	1088d304 	addi	r2,r2,9036
80205e40:	14000217 	ldw	r16,8(r2)
80205e44:	00bfff04 	movi	r2,-4
80205e48:	80c00117 	ldw	r3,4(r16)
80205e4c:	1886703a 	and	r3,r3,r2
80205e50:	003f9106 	br	80205c98 <__reset+0xfa1e5c98>
80205e54:	60800217 	ldw	r2,8(r12)
80205e58:	213fffc4 	addi	r4,r4,-1
80205e5c:	1300651e 	bne	r2,r12,80205ff4 <_malloc_r+0x7f4>
80205e60:	208000cc 	andi	r2,r4,3
80205e64:	633ffe04 	addi	r12,r12,-8
80205e68:	103ffa1e 	bne	r2,zero,80205e54 <__reset+0xfa1e5e54>
80205e6c:	98800117 	ldw	r2,4(r19)
80205e70:	0146303a 	nor	r3,zero,r5
80205e74:	1884703a 	and	r2,r3,r2
80205e78:	98800115 	stw	r2,4(r19)
80205e7c:	294b883a 	add	r5,r5,r5
80205e80:	117f2836 	bltu	r2,r5,80205b24 <__reset+0xfa1e5b24>
80205e84:	283f2726 	beq	r5,zero,80205b24 <__reset+0xfa1e5b24>
80205e88:	2886703a 	and	r3,r5,r2
80205e8c:	5809883a 	mov	r4,r11
80205e90:	183ec31e 	bne	r3,zero,802059a0 <__reset+0xfa1e59a0>
80205e94:	294b883a 	add	r5,r5,r5
80205e98:	2886703a 	and	r3,r5,r2
80205e9c:	21000104 	addi	r4,r4,4
80205ea0:	183ffc26 	beq	r3,zero,80205e94 <__reset+0xfa1e5e94>
80205ea4:	003ebe06 	br	802059a0 <__reset+0xfa1e59a0>
80205ea8:	00c05504 	movi	r3,340
80205eac:	18801236 	bltu	r3,r2,80205ef8 <_malloc_r+0x6f8>
80205eb0:	8804d3fa 	srli	r2,r17,15
80205eb4:	12001e04 	addi	r8,r2,120
80205eb8:	11c01dc4 	addi	r7,r2,119
80205ebc:	4209883a 	add	r4,r8,r8
80205ec0:	003e6d06 	br	80205878 <__reset+0xfa1e5878>
80205ec4:	00c40004 	movi	r3,4096
80205ec8:	003f4606 	br	80205be4 <__reset+0xfa1e5be4>
80205ecc:	00800044 	movi	r2,1
80205ed0:	a0800115 	stw	r2,4(r20)
80205ed4:	003f7406 	br	80205ca8 <__reset+0xfa1e5ca8>
80205ed8:	1805d0ba 	srai	r2,r3,2
80205edc:	01c00044 	movi	r7,1
80205ee0:	30c00117 	ldw	r3,4(r6)
80205ee4:	388e983a 	sll	r7,r7,r2
80205ee8:	2805883a 	mov	r2,r5
80205eec:	38c6b03a 	or	r3,r7,r3
80205ef0:	30c00115 	stw	r3,4(r6)
80205ef4:	003f9b06 	br	80205d64 <__reset+0xfa1e5d64>
80205ef8:	00c15504 	movi	r3,1364
80205efc:	18801a36 	bltu	r3,r2,80205f68 <_malloc_r+0x768>
80205f00:	8804d4ba 	srli	r2,r17,18
80205f04:	12001f44 	addi	r8,r2,125
80205f08:	11c01f04 	addi	r7,r2,124
80205f0c:	4209883a 	add	r4,r8,r8
80205f10:	003e5906 	br	80205878 <__reset+0xfa1e5878>
80205f14:	ad400404 	addi	r21,r21,16
80205f18:	003f1706 	br	80205b78 <__reset+0xfa1e5b78>
80205f1c:	00c01504 	movi	r3,84
80205f20:	18802336 	bltu	r3,r2,80205fb0 <_malloc_r+0x7b0>
80205f24:	3804d33a 	srli	r2,r7,12
80205f28:	11401bc4 	addi	r5,r2,111
80205f2c:	10c01b84 	addi	r3,r2,110
80205f30:	294b883a 	add	r5,r5,r5
80205f34:	003f7b06 	br	80205d24 <__reset+0xfa1e5d24>
80205f38:	9c000217 	ldw	r16,8(r19)
80205f3c:	00bfff04 	movi	r2,-4
80205f40:	80c00117 	ldw	r3,4(r16)
80205f44:	1886703a 	and	r3,r3,r2
80205f48:	003f5306 	br	80205c98 <__reset+0xfa1e5c98>
80205f4c:	3083ffcc 	andi	r2,r6,4095
80205f50:	103f181e 	bne	r2,zero,80205bb4 <__reset+0xfa1e5bb4>
80205f54:	99000217 	ldw	r4,8(r19)
80205f58:	b545883a 	add	r2,r22,r21
80205f5c:	10800054 	ori	r2,r2,1
80205f60:	20800115 	stw	r2,4(r4)
80205f64:	003f3e06 	br	80205c60 <__reset+0xfa1e5c60>
80205f68:	01003f84 	movi	r4,254
80205f6c:	02001fc4 	movi	r8,127
80205f70:	01c01f84 	movi	r7,126
80205f74:	003e4006 	br	80205878 <__reset+0xfa1e5878>
80205f78:	00a00874 	movhi	r2,32801
80205f7c:	108e9604 	addi	r2,r2,14936
80205f80:	15000015 	stw	r20,0(r2)
80205f84:	003f1106 	br	80205bcc <__reset+0xfa1e5bcc>
80205f88:	00800044 	movi	r2,1
80205f8c:	002b883a 	mov	r21,zero
80205f90:	003f1f06 	br	80205c10 <__reset+0xfa1e5c10>
80205f94:	81400204 	addi	r5,r16,8
80205f98:	9009883a 	mov	r4,r18
80205f9c:	0204c140 	call	80204c14 <_free_r>
80205fa0:	00a00874 	movhi	r2,32801
80205fa4:	108eb404 	addi	r2,r2,15056
80205fa8:	10c00017 	ldw	r3,0(r2)
80205fac:	003f2c06 	br	80205c60 <__reset+0xfa1e5c60>
80205fb0:	00c05504 	movi	r3,340
80205fb4:	18800536 	bltu	r3,r2,80205fcc <_malloc_r+0x7cc>
80205fb8:	3804d3fa 	srli	r2,r7,15
80205fbc:	11401e04 	addi	r5,r2,120
80205fc0:	10c01dc4 	addi	r3,r2,119
80205fc4:	294b883a 	add	r5,r5,r5
80205fc8:	003f5606 	br	80205d24 <__reset+0xfa1e5d24>
80205fcc:	00c15504 	movi	r3,1364
80205fd0:	18800536 	bltu	r3,r2,80205fe8 <_malloc_r+0x7e8>
80205fd4:	3804d4ba 	srli	r2,r7,18
80205fd8:	11401f44 	addi	r5,r2,125
80205fdc:	10c01f04 	addi	r3,r2,124
80205fe0:	294b883a 	add	r5,r5,r5
80205fe4:	003f4f06 	br	80205d24 <__reset+0xfa1e5d24>
80205fe8:	01403f84 	movi	r5,254
80205fec:	00c01f84 	movi	r3,126
80205ff0:	003f4c06 	br	80205d24 <__reset+0xfa1e5d24>
80205ff4:	98800117 	ldw	r2,4(r19)
80205ff8:	003fa006 	br	80205e7c <__reset+0xfa1e5e7c>
80205ffc:	8808d0fa 	srli	r4,r17,3
80206000:	20800044 	addi	r2,r4,1
80206004:	1085883a 	add	r2,r2,r2
80206008:	003e9006 	br	80205a4c <__reset+0xfa1e5a4c>

8020600c <memchr>:
8020600c:	208000cc 	andi	r2,r4,3
80206010:	280f883a 	mov	r7,r5
80206014:	10003426 	beq	r2,zero,802060e8 <memchr+0xdc>
80206018:	30bfffc4 	addi	r2,r6,-1
8020601c:	30001a26 	beq	r6,zero,80206088 <memchr+0x7c>
80206020:	20c00003 	ldbu	r3,0(r4)
80206024:	29803fcc 	andi	r6,r5,255
80206028:	30c0051e 	bne	r6,r3,80206040 <memchr+0x34>
8020602c:	00001806 	br	80206090 <memchr+0x84>
80206030:	10001526 	beq	r2,zero,80206088 <memchr+0x7c>
80206034:	20c00003 	ldbu	r3,0(r4)
80206038:	10bfffc4 	addi	r2,r2,-1
8020603c:	30c01426 	beq	r6,r3,80206090 <memchr+0x84>
80206040:	21000044 	addi	r4,r4,1
80206044:	20c000cc 	andi	r3,r4,3
80206048:	183ff91e 	bne	r3,zero,80206030 <__reset+0xfa1e6030>
8020604c:	020000c4 	movi	r8,3
80206050:	40801136 	bltu	r8,r2,80206098 <memchr+0x8c>
80206054:	10000c26 	beq	r2,zero,80206088 <memchr+0x7c>
80206058:	20c00003 	ldbu	r3,0(r4)
8020605c:	29403fcc 	andi	r5,r5,255
80206060:	28c00b26 	beq	r5,r3,80206090 <memchr+0x84>
80206064:	20c00044 	addi	r3,r4,1
80206068:	39803fcc 	andi	r6,r7,255
8020606c:	2089883a 	add	r4,r4,r2
80206070:	00000306 	br	80206080 <memchr+0x74>
80206074:	18c00044 	addi	r3,r3,1
80206078:	197fffc3 	ldbu	r5,-1(r3)
8020607c:	31400526 	beq	r6,r5,80206094 <memchr+0x88>
80206080:	1805883a 	mov	r2,r3
80206084:	20fffb1e 	bne	r4,r3,80206074 <__reset+0xfa1e6074>
80206088:	0005883a 	mov	r2,zero
8020608c:	f800283a 	ret
80206090:	2005883a 	mov	r2,r4
80206094:	f800283a 	ret
80206098:	28c03fcc 	andi	r3,r5,255
8020609c:	1812923a 	slli	r9,r3,8
802060a0:	02ffbff4 	movhi	r11,65279
802060a4:	02a02074 	movhi	r10,32897
802060a8:	48d2b03a 	or	r9,r9,r3
802060ac:	4806943a 	slli	r3,r9,16
802060b0:	5affbfc4 	addi	r11,r11,-257
802060b4:	52a02004 	addi	r10,r10,-32640
802060b8:	48d2b03a 	or	r9,r9,r3
802060bc:	20c00017 	ldw	r3,0(r4)
802060c0:	48c6f03a 	xor	r3,r9,r3
802060c4:	1acd883a 	add	r6,r3,r11
802060c8:	00c6303a 	nor	r3,zero,r3
802060cc:	30c6703a 	and	r3,r6,r3
802060d0:	1a86703a 	and	r3,r3,r10
802060d4:	183fe01e 	bne	r3,zero,80206058 <__reset+0xfa1e6058>
802060d8:	10bfff04 	addi	r2,r2,-4
802060dc:	21000104 	addi	r4,r4,4
802060e0:	40bff636 	bltu	r8,r2,802060bc <__reset+0xfa1e60bc>
802060e4:	003fdb06 	br	80206054 <__reset+0xfa1e6054>
802060e8:	3005883a 	mov	r2,r6
802060ec:	003fd706 	br	8020604c <__reset+0xfa1e604c>

802060f0 <memmove>:
802060f0:	2005883a 	mov	r2,r4
802060f4:	29000b2e 	bgeu	r5,r4,80206124 <memmove+0x34>
802060f8:	298f883a 	add	r7,r5,r6
802060fc:	21c0092e 	bgeu	r4,r7,80206124 <memmove+0x34>
80206100:	2187883a 	add	r3,r4,r6
80206104:	198bc83a 	sub	r5,r3,r6
80206108:	30004826 	beq	r6,zero,8020622c <memmove+0x13c>
8020610c:	39ffffc4 	addi	r7,r7,-1
80206110:	39000003 	ldbu	r4,0(r7)
80206114:	18ffffc4 	addi	r3,r3,-1
80206118:	19000005 	stb	r4,0(r3)
8020611c:	28fffb1e 	bne	r5,r3,8020610c <__reset+0xfa1e610c>
80206120:	f800283a 	ret
80206124:	00c003c4 	movi	r3,15
80206128:	1980412e 	bgeu	r3,r6,80206230 <memmove+0x140>
8020612c:	2886b03a 	or	r3,r5,r2
80206130:	18c000cc 	andi	r3,r3,3
80206134:	1800401e 	bne	r3,zero,80206238 <memmove+0x148>
80206138:	33fffc04 	addi	r15,r6,-16
8020613c:	781ed13a 	srli	r15,r15,4
80206140:	28c00104 	addi	r3,r5,4
80206144:	13400104 	addi	r13,r2,4
80206148:	781c913a 	slli	r14,r15,4
8020614c:	2b000204 	addi	r12,r5,8
80206150:	12c00204 	addi	r11,r2,8
80206154:	73800504 	addi	r14,r14,20
80206158:	2a800304 	addi	r10,r5,12
8020615c:	12400304 	addi	r9,r2,12
80206160:	2b9d883a 	add	r14,r5,r14
80206164:	2811883a 	mov	r8,r5
80206168:	100f883a 	mov	r7,r2
8020616c:	41000017 	ldw	r4,0(r8)
80206170:	39c00404 	addi	r7,r7,16
80206174:	18c00404 	addi	r3,r3,16
80206178:	393ffc15 	stw	r4,-16(r7)
8020617c:	193ffc17 	ldw	r4,-16(r3)
80206180:	6b400404 	addi	r13,r13,16
80206184:	5ac00404 	addi	r11,r11,16
80206188:	693ffc15 	stw	r4,-16(r13)
8020618c:	61000017 	ldw	r4,0(r12)
80206190:	4a400404 	addi	r9,r9,16
80206194:	42000404 	addi	r8,r8,16
80206198:	593ffc15 	stw	r4,-16(r11)
8020619c:	51000017 	ldw	r4,0(r10)
802061a0:	63000404 	addi	r12,r12,16
802061a4:	52800404 	addi	r10,r10,16
802061a8:	493ffc15 	stw	r4,-16(r9)
802061ac:	1bbfef1e 	bne	r3,r14,8020616c <__reset+0xfa1e616c>
802061b0:	79000044 	addi	r4,r15,1
802061b4:	2008913a 	slli	r4,r4,4
802061b8:	328003cc 	andi	r10,r6,15
802061bc:	02c000c4 	movi	r11,3
802061c0:	1107883a 	add	r3,r2,r4
802061c4:	290b883a 	add	r5,r5,r4
802061c8:	5a801e2e 	bgeu	r11,r10,80206244 <memmove+0x154>
802061cc:	1813883a 	mov	r9,r3
802061d0:	2811883a 	mov	r8,r5
802061d4:	500f883a 	mov	r7,r10
802061d8:	41000017 	ldw	r4,0(r8)
802061dc:	4a400104 	addi	r9,r9,4
802061e0:	39ffff04 	addi	r7,r7,-4
802061e4:	493fff15 	stw	r4,-4(r9)
802061e8:	42000104 	addi	r8,r8,4
802061ec:	59fffa36 	bltu	r11,r7,802061d8 <__reset+0xfa1e61d8>
802061f0:	513fff04 	addi	r4,r10,-4
802061f4:	2008d0ba 	srli	r4,r4,2
802061f8:	318000cc 	andi	r6,r6,3
802061fc:	21000044 	addi	r4,r4,1
80206200:	2109883a 	add	r4,r4,r4
80206204:	2109883a 	add	r4,r4,r4
80206208:	1907883a 	add	r3,r3,r4
8020620c:	290b883a 	add	r5,r5,r4
80206210:	30000b26 	beq	r6,zero,80206240 <memmove+0x150>
80206214:	198d883a 	add	r6,r3,r6
80206218:	29c00003 	ldbu	r7,0(r5)
8020621c:	18c00044 	addi	r3,r3,1
80206220:	29400044 	addi	r5,r5,1
80206224:	19ffffc5 	stb	r7,-1(r3)
80206228:	19bffb1e 	bne	r3,r6,80206218 <__reset+0xfa1e6218>
8020622c:	f800283a 	ret
80206230:	1007883a 	mov	r3,r2
80206234:	003ff606 	br	80206210 <__reset+0xfa1e6210>
80206238:	1007883a 	mov	r3,r2
8020623c:	003ff506 	br	80206214 <__reset+0xfa1e6214>
80206240:	f800283a 	ret
80206244:	500d883a 	mov	r6,r10
80206248:	003ff106 	br	80206210 <__reset+0xfa1e6210>

8020624c <memset>:
8020624c:	20c000cc 	andi	r3,r4,3
80206250:	2005883a 	mov	r2,r4
80206254:	18004426 	beq	r3,zero,80206368 <memset+0x11c>
80206258:	31ffffc4 	addi	r7,r6,-1
8020625c:	30004026 	beq	r6,zero,80206360 <memset+0x114>
80206260:	2813883a 	mov	r9,r5
80206264:	200d883a 	mov	r6,r4
80206268:	2007883a 	mov	r3,r4
8020626c:	00000406 	br	80206280 <memset+0x34>
80206270:	3a3fffc4 	addi	r8,r7,-1
80206274:	31800044 	addi	r6,r6,1
80206278:	38003926 	beq	r7,zero,80206360 <memset+0x114>
8020627c:	400f883a 	mov	r7,r8
80206280:	18c00044 	addi	r3,r3,1
80206284:	32400005 	stb	r9,0(r6)
80206288:	1a0000cc 	andi	r8,r3,3
8020628c:	403ff81e 	bne	r8,zero,80206270 <__reset+0xfa1e6270>
80206290:	010000c4 	movi	r4,3
80206294:	21c02d2e 	bgeu	r4,r7,8020634c <memset+0x100>
80206298:	29003fcc 	andi	r4,r5,255
8020629c:	200c923a 	slli	r6,r4,8
802062a0:	3108b03a 	or	r4,r6,r4
802062a4:	200c943a 	slli	r6,r4,16
802062a8:	218cb03a 	or	r6,r4,r6
802062ac:	010003c4 	movi	r4,15
802062b0:	21c0182e 	bgeu	r4,r7,80206314 <memset+0xc8>
802062b4:	3b3ffc04 	addi	r12,r7,-16
802062b8:	6018d13a 	srli	r12,r12,4
802062bc:	1a000104 	addi	r8,r3,4
802062c0:	1ac00204 	addi	r11,r3,8
802062c4:	6008913a 	slli	r4,r12,4
802062c8:	1a800304 	addi	r10,r3,12
802062cc:	1813883a 	mov	r9,r3
802062d0:	21000504 	addi	r4,r4,20
802062d4:	1909883a 	add	r4,r3,r4
802062d8:	49800015 	stw	r6,0(r9)
802062dc:	41800015 	stw	r6,0(r8)
802062e0:	59800015 	stw	r6,0(r11)
802062e4:	51800015 	stw	r6,0(r10)
802062e8:	42000404 	addi	r8,r8,16
802062ec:	4a400404 	addi	r9,r9,16
802062f0:	5ac00404 	addi	r11,r11,16
802062f4:	52800404 	addi	r10,r10,16
802062f8:	413ff71e 	bne	r8,r4,802062d8 <__reset+0xfa1e62d8>
802062fc:	63000044 	addi	r12,r12,1
80206300:	6018913a 	slli	r12,r12,4
80206304:	39c003cc 	andi	r7,r7,15
80206308:	010000c4 	movi	r4,3
8020630c:	1b07883a 	add	r3,r3,r12
80206310:	21c00e2e 	bgeu	r4,r7,8020634c <memset+0x100>
80206314:	1813883a 	mov	r9,r3
80206318:	3811883a 	mov	r8,r7
8020631c:	010000c4 	movi	r4,3
80206320:	49800015 	stw	r6,0(r9)
80206324:	423fff04 	addi	r8,r8,-4
80206328:	4a400104 	addi	r9,r9,4
8020632c:	223ffc36 	bltu	r4,r8,80206320 <__reset+0xfa1e6320>
80206330:	393fff04 	addi	r4,r7,-4
80206334:	2008d0ba 	srli	r4,r4,2
80206338:	39c000cc 	andi	r7,r7,3
8020633c:	21000044 	addi	r4,r4,1
80206340:	2109883a 	add	r4,r4,r4
80206344:	2109883a 	add	r4,r4,r4
80206348:	1907883a 	add	r3,r3,r4
8020634c:	38000526 	beq	r7,zero,80206364 <memset+0x118>
80206350:	19cf883a 	add	r7,r3,r7
80206354:	19400005 	stb	r5,0(r3)
80206358:	18c00044 	addi	r3,r3,1
8020635c:	38fffd1e 	bne	r7,r3,80206354 <__reset+0xfa1e6354>
80206360:	f800283a 	ret
80206364:	f800283a 	ret
80206368:	2007883a 	mov	r3,r4
8020636c:	300f883a 	mov	r7,r6
80206370:	003fc706 	br	80206290 <__reset+0xfa1e6290>

80206374 <_Balloc>:
80206374:	20801317 	ldw	r2,76(r4)
80206378:	defffc04 	addi	sp,sp,-16
8020637c:	dc400115 	stw	r17,4(sp)
80206380:	dc000015 	stw	r16,0(sp)
80206384:	dfc00315 	stw	ra,12(sp)
80206388:	dc800215 	stw	r18,8(sp)
8020638c:	2023883a 	mov	r17,r4
80206390:	2821883a 	mov	r16,r5
80206394:	10000f26 	beq	r2,zero,802063d4 <_Balloc+0x60>
80206398:	8407883a 	add	r3,r16,r16
8020639c:	18c7883a 	add	r3,r3,r3
802063a0:	10c7883a 	add	r3,r2,r3
802063a4:	18800017 	ldw	r2,0(r3)
802063a8:	10001126 	beq	r2,zero,802063f0 <_Balloc+0x7c>
802063ac:	11000017 	ldw	r4,0(r2)
802063b0:	19000015 	stw	r4,0(r3)
802063b4:	10000415 	stw	zero,16(r2)
802063b8:	10000315 	stw	zero,12(r2)
802063bc:	dfc00317 	ldw	ra,12(sp)
802063c0:	dc800217 	ldw	r18,8(sp)
802063c4:	dc400117 	ldw	r17,4(sp)
802063c8:	dc000017 	ldw	r16,0(sp)
802063cc:	dec00404 	addi	sp,sp,16
802063d0:	f800283a 	ret
802063d4:	01800844 	movi	r6,33
802063d8:	01400104 	movi	r5,4
802063dc:	02092b00 	call	802092b0 <_calloc_r>
802063e0:	88801315 	stw	r2,76(r17)
802063e4:	103fec1e 	bne	r2,zero,80206398 <__reset+0xfa1e6398>
802063e8:	0005883a 	mov	r2,zero
802063ec:	003ff306 	br	802063bc <__reset+0xfa1e63bc>
802063f0:	01400044 	movi	r5,1
802063f4:	2c24983a 	sll	r18,r5,r16
802063f8:	8809883a 	mov	r4,r17
802063fc:	91800144 	addi	r6,r18,5
80206400:	318d883a 	add	r6,r6,r6
80206404:	318d883a 	add	r6,r6,r6
80206408:	02092b00 	call	802092b0 <_calloc_r>
8020640c:	103ff626 	beq	r2,zero,802063e8 <__reset+0xfa1e63e8>
80206410:	14000115 	stw	r16,4(r2)
80206414:	14800215 	stw	r18,8(r2)
80206418:	003fe606 	br	802063b4 <__reset+0xfa1e63b4>

8020641c <_Bfree>:
8020641c:	28000826 	beq	r5,zero,80206440 <_Bfree+0x24>
80206420:	28c00117 	ldw	r3,4(r5)
80206424:	20801317 	ldw	r2,76(r4)
80206428:	18c7883a 	add	r3,r3,r3
8020642c:	18c7883a 	add	r3,r3,r3
80206430:	10c5883a 	add	r2,r2,r3
80206434:	10c00017 	ldw	r3,0(r2)
80206438:	28c00015 	stw	r3,0(r5)
8020643c:	11400015 	stw	r5,0(r2)
80206440:	f800283a 	ret

80206444 <__multadd>:
80206444:	defffa04 	addi	sp,sp,-24
80206448:	dc800315 	stw	r18,12(sp)
8020644c:	dc400215 	stw	r17,8(sp)
80206450:	dc000115 	stw	r16,4(sp)
80206454:	2823883a 	mov	r17,r5
80206458:	2c000417 	ldw	r16,16(r5)
8020645c:	dfc00515 	stw	ra,20(sp)
80206460:	dcc00415 	stw	r19,16(sp)
80206464:	2025883a 	mov	r18,r4
80206468:	29400504 	addi	r5,r5,20
8020646c:	0011883a 	mov	r8,zero
80206470:	28c00017 	ldw	r3,0(r5)
80206474:	29400104 	addi	r5,r5,4
80206478:	42000044 	addi	r8,r8,1
8020647c:	18bfffcc 	andi	r2,r3,65535
80206480:	1185383a 	mul	r2,r2,r6
80206484:	1806d43a 	srli	r3,r3,16
80206488:	11cf883a 	add	r7,r2,r7
8020648c:	3808d43a 	srli	r4,r7,16
80206490:	1987383a 	mul	r3,r3,r6
80206494:	38bfffcc 	andi	r2,r7,65535
80206498:	1907883a 	add	r3,r3,r4
8020649c:	1808943a 	slli	r4,r3,16
802064a0:	180ed43a 	srli	r7,r3,16
802064a4:	2085883a 	add	r2,r4,r2
802064a8:	28bfff15 	stw	r2,-4(r5)
802064ac:	443ff016 	blt	r8,r16,80206470 <__reset+0xfa1e6470>
802064b0:	38000926 	beq	r7,zero,802064d8 <__multadd+0x94>
802064b4:	88800217 	ldw	r2,8(r17)
802064b8:	80800f0e 	bge	r16,r2,802064f8 <__multadd+0xb4>
802064bc:	80800144 	addi	r2,r16,5
802064c0:	1085883a 	add	r2,r2,r2
802064c4:	1085883a 	add	r2,r2,r2
802064c8:	8885883a 	add	r2,r17,r2
802064cc:	11c00015 	stw	r7,0(r2)
802064d0:	84000044 	addi	r16,r16,1
802064d4:	8c000415 	stw	r16,16(r17)
802064d8:	8805883a 	mov	r2,r17
802064dc:	dfc00517 	ldw	ra,20(sp)
802064e0:	dcc00417 	ldw	r19,16(sp)
802064e4:	dc800317 	ldw	r18,12(sp)
802064e8:	dc400217 	ldw	r17,8(sp)
802064ec:	dc000117 	ldw	r16,4(sp)
802064f0:	dec00604 	addi	sp,sp,24
802064f4:	f800283a 	ret
802064f8:	89400117 	ldw	r5,4(r17)
802064fc:	9009883a 	mov	r4,r18
80206500:	d9c00015 	stw	r7,0(sp)
80206504:	29400044 	addi	r5,r5,1
80206508:	02063740 	call	80206374 <_Balloc>
8020650c:	89800417 	ldw	r6,16(r17)
80206510:	89400304 	addi	r5,r17,12
80206514:	11000304 	addi	r4,r2,12
80206518:	31800084 	addi	r6,r6,2
8020651c:	318d883a 	add	r6,r6,r6
80206520:	318d883a 	add	r6,r6,r6
80206524:	1027883a 	mov	r19,r2
80206528:	02004dc0 	call	802004dc <memcpy>
8020652c:	d9c00017 	ldw	r7,0(sp)
80206530:	88000a26 	beq	r17,zero,8020655c <__multadd+0x118>
80206534:	88c00117 	ldw	r3,4(r17)
80206538:	90801317 	ldw	r2,76(r18)
8020653c:	18c7883a 	add	r3,r3,r3
80206540:	18c7883a 	add	r3,r3,r3
80206544:	10c5883a 	add	r2,r2,r3
80206548:	10c00017 	ldw	r3,0(r2)
8020654c:	88c00015 	stw	r3,0(r17)
80206550:	14400015 	stw	r17,0(r2)
80206554:	9823883a 	mov	r17,r19
80206558:	003fd806 	br	802064bc <__reset+0xfa1e64bc>
8020655c:	9823883a 	mov	r17,r19
80206560:	003fd606 	br	802064bc <__reset+0xfa1e64bc>

80206564 <__s2b>:
80206564:	defff904 	addi	sp,sp,-28
80206568:	dc400115 	stw	r17,4(sp)
8020656c:	dc000015 	stw	r16,0(sp)
80206570:	2023883a 	mov	r17,r4
80206574:	2821883a 	mov	r16,r5
80206578:	39000204 	addi	r4,r7,8
8020657c:	01400244 	movi	r5,9
80206580:	dcc00315 	stw	r19,12(sp)
80206584:	dc800215 	stw	r18,8(sp)
80206588:	dfc00615 	stw	ra,24(sp)
8020658c:	dd400515 	stw	r21,20(sp)
80206590:	dd000415 	stw	r20,16(sp)
80206594:	3825883a 	mov	r18,r7
80206598:	3027883a 	mov	r19,r6
8020659c:	020a5e00 	call	8020a5e0 <__divsi3>
802065a0:	00c00044 	movi	r3,1
802065a4:	000b883a 	mov	r5,zero
802065a8:	1880030e 	bge	r3,r2,802065b8 <__s2b+0x54>
802065ac:	18c7883a 	add	r3,r3,r3
802065b0:	29400044 	addi	r5,r5,1
802065b4:	18bffd16 	blt	r3,r2,802065ac <__reset+0xfa1e65ac>
802065b8:	8809883a 	mov	r4,r17
802065bc:	02063740 	call	80206374 <_Balloc>
802065c0:	d8c00717 	ldw	r3,28(sp)
802065c4:	10c00515 	stw	r3,20(r2)
802065c8:	00c00044 	movi	r3,1
802065cc:	10c00415 	stw	r3,16(r2)
802065d0:	00c00244 	movi	r3,9
802065d4:	1cc0210e 	bge	r3,r19,8020665c <__s2b+0xf8>
802065d8:	80eb883a 	add	r21,r16,r3
802065dc:	a829883a 	mov	r20,r21
802065e0:	84e1883a 	add	r16,r16,r19
802065e4:	a1c00007 	ldb	r7,0(r20)
802065e8:	01800284 	movi	r6,10
802065ec:	a5000044 	addi	r20,r20,1
802065f0:	100b883a 	mov	r5,r2
802065f4:	39fff404 	addi	r7,r7,-48
802065f8:	8809883a 	mov	r4,r17
802065fc:	02064440 	call	80206444 <__multadd>
80206600:	a43ff81e 	bne	r20,r16,802065e4 <__reset+0xfa1e65e4>
80206604:	ace1883a 	add	r16,r21,r19
80206608:	843ffe04 	addi	r16,r16,-8
8020660c:	9c800a0e 	bge	r19,r18,80206638 <__s2b+0xd4>
80206610:	94e5c83a 	sub	r18,r18,r19
80206614:	84a5883a 	add	r18,r16,r18
80206618:	81c00007 	ldb	r7,0(r16)
8020661c:	01800284 	movi	r6,10
80206620:	84000044 	addi	r16,r16,1
80206624:	100b883a 	mov	r5,r2
80206628:	39fff404 	addi	r7,r7,-48
8020662c:	8809883a 	mov	r4,r17
80206630:	02064440 	call	80206444 <__multadd>
80206634:	84bff81e 	bne	r16,r18,80206618 <__reset+0xfa1e6618>
80206638:	dfc00617 	ldw	ra,24(sp)
8020663c:	dd400517 	ldw	r21,20(sp)
80206640:	dd000417 	ldw	r20,16(sp)
80206644:	dcc00317 	ldw	r19,12(sp)
80206648:	dc800217 	ldw	r18,8(sp)
8020664c:	dc400117 	ldw	r17,4(sp)
80206650:	dc000017 	ldw	r16,0(sp)
80206654:	dec00704 	addi	sp,sp,28
80206658:	f800283a 	ret
8020665c:	84000284 	addi	r16,r16,10
80206660:	1827883a 	mov	r19,r3
80206664:	003fe906 	br	8020660c <__reset+0xfa1e660c>

80206668 <__hi0bits>:
80206668:	20bfffec 	andhi	r2,r4,65535
8020666c:	1000141e 	bne	r2,zero,802066c0 <__hi0bits+0x58>
80206670:	2008943a 	slli	r4,r4,16
80206674:	00800404 	movi	r2,16
80206678:	20ffc02c 	andhi	r3,r4,65280
8020667c:	1800021e 	bne	r3,zero,80206688 <__hi0bits+0x20>
80206680:	2008923a 	slli	r4,r4,8
80206684:	10800204 	addi	r2,r2,8
80206688:	20fc002c 	andhi	r3,r4,61440
8020668c:	1800021e 	bne	r3,zero,80206698 <__hi0bits+0x30>
80206690:	2008913a 	slli	r4,r4,4
80206694:	10800104 	addi	r2,r2,4
80206698:	20f0002c 	andhi	r3,r4,49152
8020669c:	1800031e 	bne	r3,zero,802066ac <__hi0bits+0x44>
802066a0:	2109883a 	add	r4,r4,r4
802066a4:	10800084 	addi	r2,r2,2
802066a8:	2109883a 	add	r4,r4,r4
802066ac:	20000316 	blt	r4,zero,802066bc <__hi0bits+0x54>
802066b0:	2110002c 	andhi	r4,r4,16384
802066b4:	2000041e 	bne	r4,zero,802066c8 <__hi0bits+0x60>
802066b8:	00800804 	movi	r2,32
802066bc:	f800283a 	ret
802066c0:	0005883a 	mov	r2,zero
802066c4:	003fec06 	br	80206678 <__reset+0xfa1e6678>
802066c8:	10800044 	addi	r2,r2,1
802066cc:	f800283a 	ret

802066d0 <__lo0bits>:
802066d0:	20c00017 	ldw	r3,0(r4)
802066d4:	188001cc 	andi	r2,r3,7
802066d8:	10000826 	beq	r2,zero,802066fc <__lo0bits+0x2c>
802066dc:	1880004c 	andi	r2,r3,1
802066e0:	1000211e 	bne	r2,zero,80206768 <__lo0bits+0x98>
802066e4:	1880008c 	andi	r2,r3,2
802066e8:	1000211e 	bne	r2,zero,80206770 <__lo0bits+0xa0>
802066ec:	1806d0ba 	srli	r3,r3,2
802066f0:	00800084 	movi	r2,2
802066f4:	20c00015 	stw	r3,0(r4)
802066f8:	f800283a 	ret
802066fc:	18bfffcc 	andi	r2,r3,65535
80206700:	10001326 	beq	r2,zero,80206750 <__lo0bits+0x80>
80206704:	0005883a 	mov	r2,zero
80206708:	19403fcc 	andi	r5,r3,255
8020670c:	2800021e 	bne	r5,zero,80206718 <__lo0bits+0x48>
80206710:	1806d23a 	srli	r3,r3,8
80206714:	10800204 	addi	r2,r2,8
80206718:	194003cc 	andi	r5,r3,15
8020671c:	2800021e 	bne	r5,zero,80206728 <__lo0bits+0x58>
80206720:	1806d13a 	srli	r3,r3,4
80206724:	10800104 	addi	r2,r2,4
80206728:	194000cc 	andi	r5,r3,3
8020672c:	2800021e 	bne	r5,zero,80206738 <__lo0bits+0x68>
80206730:	1806d0ba 	srli	r3,r3,2
80206734:	10800084 	addi	r2,r2,2
80206738:	1940004c 	andi	r5,r3,1
8020673c:	2800081e 	bne	r5,zero,80206760 <__lo0bits+0x90>
80206740:	1806d07a 	srli	r3,r3,1
80206744:	1800051e 	bne	r3,zero,8020675c <__lo0bits+0x8c>
80206748:	00800804 	movi	r2,32
8020674c:	f800283a 	ret
80206750:	1806d43a 	srli	r3,r3,16
80206754:	00800404 	movi	r2,16
80206758:	003feb06 	br	80206708 <__reset+0xfa1e6708>
8020675c:	10800044 	addi	r2,r2,1
80206760:	20c00015 	stw	r3,0(r4)
80206764:	f800283a 	ret
80206768:	0005883a 	mov	r2,zero
8020676c:	f800283a 	ret
80206770:	1806d07a 	srli	r3,r3,1
80206774:	00800044 	movi	r2,1
80206778:	20c00015 	stw	r3,0(r4)
8020677c:	f800283a 	ret

80206780 <__i2b>:
80206780:	defffd04 	addi	sp,sp,-12
80206784:	dc000015 	stw	r16,0(sp)
80206788:	04000044 	movi	r16,1
8020678c:	dc400115 	stw	r17,4(sp)
80206790:	2823883a 	mov	r17,r5
80206794:	800b883a 	mov	r5,r16
80206798:	dfc00215 	stw	ra,8(sp)
8020679c:	02063740 	call	80206374 <_Balloc>
802067a0:	14400515 	stw	r17,20(r2)
802067a4:	14000415 	stw	r16,16(r2)
802067a8:	dfc00217 	ldw	ra,8(sp)
802067ac:	dc400117 	ldw	r17,4(sp)
802067b0:	dc000017 	ldw	r16,0(sp)
802067b4:	dec00304 	addi	sp,sp,12
802067b8:	f800283a 	ret

802067bc <__multiply>:
802067bc:	defffa04 	addi	sp,sp,-24
802067c0:	dcc00315 	stw	r19,12(sp)
802067c4:	dc800215 	stw	r18,8(sp)
802067c8:	34c00417 	ldw	r19,16(r6)
802067cc:	2c800417 	ldw	r18,16(r5)
802067d0:	dd000415 	stw	r20,16(sp)
802067d4:	dc400115 	stw	r17,4(sp)
802067d8:	dfc00515 	stw	ra,20(sp)
802067dc:	dc000015 	stw	r16,0(sp)
802067e0:	2829883a 	mov	r20,r5
802067e4:	3023883a 	mov	r17,r6
802067e8:	94c0050e 	bge	r18,r19,80206800 <__multiply+0x44>
802067ec:	9007883a 	mov	r3,r18
802067f0:	3029883a 	mov	r20,r6
802067f4:	9825883a 	mov	r18,r19
802067f8:	2823883a 	mov	r17,r5
802067fc:	1827883a 	mov	r19,r3
80206800:	a0800217 	ldw	r2,8(r20)
80206804:	94e1883a 	add	r16,r18,r19
80206808:	a1400117 	ldw	r5,4(r20)
8020680c:	1400010e 	bge	r2,r16,80206814 <__multiply+0x58>
80206810:	29400044 	addi	r5,r5,1
80206814:	02063740 	call	80206374 <_Balloc>
80206818:	8415883a 	add	r10,r16,r16
8020681c:	12c00504 	addi	r11,r2,20
80206820:	5295883a 	add	r10,r10,r10
80206824:	5a95883a 	add	r10,r11,r10
80206828:	5807883a 	mov	r3,r11
8020682c:	5a80032e 	bgeu	r11,r10,8020683c <__multiply+0x80>
80206830:	18000015 	stw	zero,0(r3)
80206834:	18c00104 	addi	r3,r3,4
80206838:	1abffd36 	bltu	r3,r10,80206830 <__reset+0xfa1e6830>
8020683c:	9ce7883a 	add	r19,r19,r19
80206840:	94a5883a 	add	r18,r18,r18
80206844:	89800504 	addi	r6,r17,20
80206848:	9ce7883a 	add	r19,r19,r19
8020684c:	a3400504 	addi	r13,r20,20
80206850:	94a5883a 	add	r18,r18,r18
80206854:	34d9883a 	add	r12,r6,r19
80206858:	6c93883a 	add	r9,r13,r18
8020685c:	3300422e 	bgeu	r6,r12,80206968 <__multiply+0x1ac>
80206860:	37c00017 	ldw	ra,0(r6)
80206864:	fbffffcc 	andi	r15,ra,65535
80206868:	78001b26 	beq	r15,zero,802068d8 <__multiply+0x11c>
8020686c:	5811883a 	mov	r8,r11
80206870:	681d883a 	mov	r14,r13
80206874:	000f883a 	mov	r7,zero
80206878:	71000017 	ldw	r4,0(r14)
8020687c:	40c00017 	ldw	r3,0(r8)
80206880:	73800104 	addi	r14,r14,4
80206884:	217fffcc 	andi	r5,r4,65535
80206888:	2bcb383a 	mul	r5,r5,r15
8020688c:	2008d43a 	srli	r4,r4,16
80206890:	1c7fffcc 	andi	r17,r3,65535
80206894:	2c4b883a 	add	r5,r5,r17
80206898:	29cb883a 	add	r5,r5,r7
8020689c:	23c9383a 	mul	r4,r4,r15
802068a0:	1806d43a 	srli	r3,r3,16
802068a4:	280ed43a 	srli	r7,r5,16
802068a8:	297fffcc 	andi	r5,r5,65535
802068ac:	20c7883a 	add	r3,r4,r3
802068b0:	19c7883a 	add	r3,r3,r7
802068b4:	1808943a 	slli	r4,r3,16
802068b8:	4023883a 	mov	r17,r8
802068bc:	180ed43a 	srli	r7,r3,16
802068c0:	214ab03a 	or	r5,r4,r5
802068c4:	41400015 	stw	r5,0(r8)
802068c8:	42000104 	addi	r8,r8,4
802068cc:	727fea36 	bltu	r14,r9,80206878 <__reset+0xfa1e6878>
802068d0:	89c00115 	stw	r7,4(r17)
802068d4:	37c00017 	ldw	ra,0(r6)
802068d8:	f83ed43a 	srli	ra,ra,16
802068dc:	f8001f26 	beq	ra,zero,8020695c <__multiply+0x1a0>
802068e0:	58c00017 	ldw	r3,0(r11)
802068e4:	681d883a 	mov	r14,r13
802068e8:	581f883a 	mov	r15,r11
802068ec:	1811883a 	mov	r8,r3
802068f0:	5825883a 	mov	r18,r11
802068f4:	000f883a 	mov	r7,zero
802068f8:	00000106 	br	80206900 <__multiply+0x144>
802068fc:	8825883a 	mov	r18,r17
80206900:	7140000b 	ldhu	r5,0(r14)
80206904:	4010d43a 	srli	r8,r8,16
80206908:	193fffcc 	andi	r4,r3,65535
8020690c:	2fcb383a 	mul	r5,r5,ra
80206910:	7bc00104 	addi	r15,r15,4
80206914:	73800104 	addi	r14,r14,4
80206918:	2a0b883a 	add	r5,r5,r8
8020691c:	29cb883a 	add	r5,r5,r7
80206920:	2806943a 	slli	r3,r5,16
80206924:	94400104 	addi	r17,r18,4
80206928:	280ad43a 	srli	r5,r5,16
8020692c:	1908b03a 	or	r4,r3,r4
80206930:	793fff15 	stw	r4,-4(r15)
80206934:	70ffff17 	ldw	r3,-4(r14)
80206938:	8a000017 	ldw	r8,0(r17)
8020693c:	1806d43a 	srli	r3,r3,16
80206940:	413fffcc 	andi	r4,r8,65535
80206944:	1fc7383a 	mul	r3,r3,ra
80206948:	1907883a 	add	r3,r3,r4
8020694c:	1947883a 	add	r3,r3,r5
80206950:	180ed43a 	srli	r7,r3,16
80206954:	727fe936 	bltu	r14,r9,802068fc <__reset+0xfa1e68fc>
80206958:	90c00115 	stw	r3,4(r18)
8020695c:	31800104 	addi	r6,r6,4
80206960:	5ac00104 	addi	r11,r11,4
80206964:	333fbe36 	bltu	r6,r12,80206860 <__reset+0xfa1e6860>
80206968:	0400090e 	bge	zero,r16,80206990 <__multiply+0x1d4>
8020696c:	50ffff17 	ldw	r3,-4(r10)
80206970:	52bfff04 	addi	r10,r10,-4
80206974:	18000326 	beq	r3,zero,80206984 <__multiply+0x1c8>
80206978:	00000506 	br	80206990 <__multiply+0x1d4>
8020697c:	50c00017 	ldw	r3,0(r10)
80206980:	1800031e 	bne	r3,zero,80206990 <__multiply+0x1d4>
80206984:	843fffc4 	addi	r16,r16,-1
80206988:	52bfff04 	addi	r10,r10,-4
8020698c:	803ffb1e 	bne	r16,zero,8020697c <__reset+0xfa1e697c>
80206990:	14000415 	stw	r16,16(r2)
80206994:	dfc00517 	ldw	ra,20(sp)
80206998:	dd000417 	ldw	r20,16(sp)
8020699c:	dcc00317 	ldw	r19,12(sp)
802069a0:	dc800217 	ldw	r18,8(sp)
802069a4:	dc400117 	ldw	r17,4(sp)
802069a8:	dc000017 	ldw	r16,0(sp)
802069ac:	dec00604 	addi	sp,sp,24
802069b0:	f800283a 	ret

802069b4 <__pow5mult>:
802069b4:	defffa04 	addi	sp,sp,-24
802069b8:	dcc00315 	stw	r19,12(sp)
802069bc:	dc000015 	stw	r16,0(sp)
802069c0:	dfc00515 	stw	ra,20(sp)
802069c4:	dd000415 	stw	r20,16(sp)
802069c8:	dc800215 	stw	r18,8(sp)
802069cc:	dc400115 	stw	r17,4(sp)
802069d0:	308000cc 	andi	r2,r6,3
802069d4:	3021883a 	mov	r16,r6
802069d8:	2027883a 	mov	r19,r4
802069dc:	10002f1e 	bne	r2,zero,80206a9c <__pow5mult+0xe8>
802069e0:	2825883a 	mov	r18,r5
802069e4:	8021d0ba 	srai	r16,r16,2
802069e8:	80001a26 	beq	r16,zero,80206a54 <__pow5mult+0xa0>
802069ec:	9c401217 	ldw	r17,72(r19)
802069f0:	8800061e 	bne	r17,zero,80206a0c <__pow5mult+0x58>
802069f4:	00003406 	br	80206ac8 <__pow5mult+0x114>
802069f8:	8021d07a 	srai	r16,r16,1
802069fc:	80001526 	beq	r16,zero,80206a54 <__pow5mult+0xa0>
80206a00:	88800017 	ldw	r2,0(r17)
80206a04:	10001c26 	beq	r2,zero,80206a78 <__pow5mult+0xc4>
80206a08:	1023883a 	mov	r17,r2
80206a0c:	8080004c 	andi	r2,r16,1
80206a10:	103ff926 	beq	r2,zero,802069f8 <__reset+0xfa1e69f8>
80206a14:	880d883a 	mov	r6,r17
80206a18:	900b883a 	mov	r5,r18
80206a1c:	9809883a 	mov	r4,r19
80206a20:	02067bc0 	call	802067bc <__multiply>
80206a24:	90001b26 	beq	r18,zero,80206a94 <__pow5mult+0xe0>
80206a28:	91000117 	ldw	r4,4(r18)
80206a2c:	98c01317 	ldw	r3,76(r19)
80206a30:	8021d07a 	srai	r16,r16,1
80206a34:	2109883a 	add	r4,r4,r4
80206a38:	2109883a 	add	r4,r4,r4
80206a3c:	1907883a 	add	r3,r3,r4
80206a40:	19000017 	ldw	r4,0(r3)
80206a44:	91000015 	stw	r4,0(r18)
80206a48:	1c800015 	stw	r18,0(r3)
80206a4c:	1025883a 	mov	r18,r2
80206a50:	803feb1e 	bne	r16,zero,80206a00 <__reset+0xfa1e6a00>
80206a54:	9005883a 	mov	r2,r18
80206a58:	dfc00517 	ldw	ra,20(sp)
80206a5c:	dd000417 	ldw	r20,16(sp)
80206a60:	dcc00317 	ldw	r19,12(sp)
80206a64:	dc800217 	ldw	r18,8(sp)
80206a68:	dc400117 	ldw	r17,4(sp)
80206a6c:	dc000017 	ldw	r16,0(sp)
80206a70:	dec00604 	addi	sp,sp,24
80206a74:	f800283a 	ret
80206a78:	880d883a 	mov	r6,r17
80206a7c:	880b883a 	mov	r5,r17
80206a80:	9809883a 	mov	r4,r19
80206a84:	02067bc0 	call	802067bc <__multiply>
80206a88:	88800015 	stw	r2,0(r17)
80206a8c:	10000015 	stw	zero,0(r2)
80206a90:	003fdd06 	br	80206a08 <__reset+0xfa1e6a08>
80206a94:	1025883a 	mov	r18,r2
80206a98:	003fd706 	br	802069f8 <__reset+0xfa1e69f8>
80206a9c:	10bfffc4 	addi	r2,r2,-1
80206aa0:	1085883a 	add	r2,r2,r2
80206aa4:	00e00874 	movhi	r3,32801
80206aa8:	18c67404 	addi	r3,r3,6608
80206aac:	1085883a 	add	r2,r2,r2
80206ab0:	1885883a 	add	r2,r3,r2
80206ab4:	11800017 	ldw	r6,0(r2)
80206ab8:	000f883a 	mov	r7,zero
80206abc:	02064440 	call	80206444 <__multadd>
80206ac0:	1025883a 	mov	r18,r2
80206ac4:	003fc706 	br	802069e4 <__reset+0xfa1e69e4>
80206ac8:	05000044 	movi	r20,1
80206acc:	a00b883a 	mov	r5,r20
80206ad0:	9809883a 	mov	r4,r19
80206ad4:	02063740 	call	80206374 <_Balloc>
80206ad8:	1023883a 	mov	r17,r2
80206adc:	00809c44 	movi	r2,625
80206ae0:	88800515 	stw	r2,20(r17)
80206ae4:	8d000415 	stw	r20,16(r17)
80206ae8:	9c401215 	stw	r17,72(r19)
80206aec:	88000015 	stw	zero,0(r17)
80206af0:	003fc606 	br	80206a0c <__reset+0xfa1e6a0c>

80206af4 <__lshift>:
80206af4:	defff904 	addi	sp,sp,-28
80206af8:	dd400515 	stw	r21,20(sp)
80206afc:	dcc00315 	stw	r19,12(sp)
80206b00:	302bd17a 	srai	r21,r6,5
80206b04:	2cc00417 	ldw	r19,16(r5)
80206b08:	28800217 	ldw	r2,8(r5)
80206b0c:	dd000415 	stw	r20,16(sp)
80206b10:	ace7883a 	add	r19,r21,r19
80206b14:	dc800215 	stw	r18,8(sp)
80206b18:	dc400115 	stw	r17,4(sp)
80206b1c:	dc000015 	stw	r16,0(sp)
80206b20:	dfc00615 	stw	ra,24(sp)
80206b24:	9c000044 	addi	r16,r19,1
80206b28:	2823883a 	mov	r17,r5
80206b2c:	3029883a 	mov	r20,r6
80206b30:	2025883a 	mov	r18,r4
80206b34:	29400117 	ldw	r5,4(r5)
80206b38:	1400030e 	bge	r2,r16,80206b48 <__lshift+0x54>
80206b3c:	1085883a 	add	r2,r2,r2
80206b40:	29400044 	addi	r5,r5,1
80206b44:	143ffd16 	blt	r2,r16,80206b3c <__reset+0xfa1e6b3c>
80206b48:	9009883a 	mov	r4,r18
80206b4c:	02063740 	call	80206374 <_Balloc>
80206b50:	10c00504 	addi	r3,r2,20
80206b54:	0540070e 	bge	zero,r21,80206b74 <__lshift+0x80>
80206b58:	ad6b883a 	add	r21,r21,r21
80206b5c:	ad6b883a 	add	r21,r21,r21
80206b60:	1809883a 	mov	r4,r3
80206b64:	1d47883a 	add	r3,r3,r21
80206b68:	20000015 	stw	zero,0(r4)
80206b6c:	21000104 	addi	r4,r4,4
80206b70:	193ffd1e 	bne	r3,r4,80206b68 <__reset+0xfa1e6b68>
80206b74:	8a000417 	ldw	r8,16(r17)
80206b78:	89000504 	addi	r4,r17,20
80206b7c:	a18007cc 	andi	r6,r20,31
80206b80:	4211883a 	add	r8,r8,r8
80206b84:	4211883a 	add	r8,r8,r8
80206b88:	2211883a 	add	r8,r4,r8
80206b8c:	30002326 	beq	r6,zero,80206c1c <__lshift+0x128>
80206b90:	02400804 	movi	r9,32
80206b94:	4993c83a 	sub	r9,r9,r6
80206b98:	000b883a 	mov	r5,zero
80206b9c:	21c00017 	ldw	r7,0(r4)
80206ba0:	1815883a 	mov	r10,r3
80206ba4:	18c00104 	addi	r3,r3,4
80206ba8:	398e983a 	sll	r7,r7,r6
80206bac:	21000104 	addi	r4,r4,4
80206bb0:	394ab03a 	or	r5,r7,r5
80206bb4:	197fff15 	stw	r5,-4(r3)
80206bb8:	217fff17 	ldw	r5,-4(r4)
80206bbc:	2a4ad83a 	srl	r5,r5,r9
80206bc0:	223ff636 	bltu	r4,r8,80206b9c <__reset+0xfa1e6b9c>
80206bc4:	51400115 	stw	r5,4(r10)
80206bc8:	28001a1e 	bne	r5,zero,80206c34 <__lshift+0x140>
80206bcc:	843fffc4 	addi	r16,r16,-1
80206bd0:	14000415 	stw	r16,16(r2)
80206bd4:	88000826 	beq	r17,zero,80206bf8 <__lshift+0x104>
80206bd8:	89000117 	ldw	r4,4(r17)
80206bdc:	90c01317 	ldw	r3,76(r18)
80206be0:	2109883a 	add	r4,r4,r4
80206be4:	2109883a 	add	r4,r4,r4
80206be8:	1907883a 	add	r3,r3,r4
80206bec:	19000017 	ldw	r4,0(r3)
80206bf0:	89000015 	stw	r4,0(r17)
80206bf4:	1c400015 	stw	r17,0(r3)
80206bf8:	dfc00617 	ldw	ra,24(sp)
80206bfc:	dd400517 	ldw	r21,20(sp)
80206c00:	dd000417 	ldw	r20,16(sp)
80206c04:	dcc00317 	ldw	r19,12(sp)
80206c08:	dc800217 	ldw	r18,8(sp)
80206c0c:	dc400117 	ldw	r17,4(sp)
80206c10:	dc000017 	ldw	r16,0(sp)
80206c14:	dec00704 	addi	sp,sp,28
80206c18:	f800283a 	ret
80206c1c:	21400017 	ldw	r5,0(r4)
80206c20:	18c00104 	addi	r3,r3,4
80206c24:	21000104 	addi	r4,r4,4
80206c28:	197fff15 	stw	r5,-4(r3)
80206c2c:	223ffb36 	bltu	r4,r8,80206c1c <__reset+0xfa1e6c1c>
80206c30:	003fe606 	br	80206bcc <__reset+0xfa1e6bcc>
80206c34:	9c000084 	addi	r16,r19,2
80206c38:	003fe406 	br	80206bcc <__reset+0xfa1e6bcc>

80206c3c <__mcmp>:
80206c3c:	20800417 	ldw	r2,16(r4)
80206c40:	28c00417 	ldw	r3,16(r5)
80206c44:	10c5c83a 	sub	r2,r2,r3
80206c48:	1000111e 	bne	r2,zero,80206c90 <__mcmp+0x54>
80206c4c:	18c7883a 	add	r3,r3,r3
80206c50:	18c7883a 	add	r3,r3,r3
80206c54:	21000504 	addi	r4,r4,20
80206c58:	29400504 	addi	r5,r5,20
80206c5c:	20c5883a 	add	r2,r4,r3
80206c60:	28cb883a 	add	r5,r5,r3
80206c64:	00000106 	br	80206c6c <__mcmp+0x30>
80206c68:	20800a2e 	bgeu	r4,r2,80206c94 <__mcmp+0x58>
80206c6c:	10bfff04 	addi	r2,r2,-4
80206c70:	297fff04 	addi	r5,r5,-4
80206c74:	11800017 	ldw	r6,0(r2)
80206c78:	28c00017 	ldw	r3,0(r5)
80206c7c:	30fffa26 	beq	r6,r3,80206c68 <__reset+0xfa1e6c68>
80206c80:	30c00236 	bltu	r6,r3,80206c8c <__mcmp+0x50>
80206c84:	00800044 	movi	r2,1
80206c88:	f800283a 	ret
80206c8c:	00bfffc4 	movi	r2,-1
80206c90:	f800283a 	ret
80206c94:	0005883a 	mov	r2,zero
80206c98:	f800283a 	ret

80206c9c <__mdiff>:
80206c9c:	28c00417 	ldw	r3,16(r5)
80206ca0:	30800417 	ldw	r2,16(r6)
80206ca4:	defffa04 	addi	sp,sp,-24
80206ca8:	dcc00315 	stw	r19,12(sp)
80206cac:	dc800215 	stw	r18,8(sp)
80206cb0:	dfc00515 	stw	ra,20(sp)
80206cb4:	dd000415 	stw	r20,16(sp)
80206cb8:	dc400115 	stw	r17,4(sp)
80206cbc:	dc000015 	stw	r16,0(sp)
80206cc0:	1887c83a 	sub	r3,r3,r2
80206cc4:	2825883a 	mov	r18,r5
80206cc8:	3027883a 	mov	r19,r6
80206ccc:	1800141e 	bne	r3,zero,80206d20 <__mdiff+0x84>
80206cd0:	1085883a 	add	r2,r2,r2
80206cd4:	1085883a 	add	r2,r2,r2
80206cd8:	2a000504 	addi	r8,r5,20
80206cdc:	34000504 	addi	r16,r6,20
80206ce0:	4087883a 	add	r3,r8,r2
80206ce4:	8085883a 	add	r2,r16,r2
80206ce8:	00000106 	br	80206cf0 <__mdiff+0x54>
80206cec:	40c0592e 	bgeu	r8,r3,80206e54 <__mdiff+0x1b8>
80206cf0:	18ffff04 	addi	r3,r3,-4
80206cf4:	10bfff04 	addi	r2,r2,-4
80206cf8:	19c00017 	ldw	r7,0(r3)
80206cfc:	11400017 	ldw	r5,0(r2)
80206d00:	397ffa26 	beq	r7,r5,80206cec <__reset+0xfa1e6cec>
80206d04:	3940592e 	bgeu	r7,r5,80206e6c <__mdiff+0x1d0>
80206d08:	9005883a 	mov	r2,r18
80206d0c:	4023883a 	mov	r17,r8
80206d10:	9825883a 	mov	r18,r19
80206d14:	05000044 	movi	r20,1
80206d18:	1027883a 	mov	r19,r2
80206d1c:	00000406 	br	80206d30 <__mdiff+0x94>
80206d20:	18005616 	blt	r3,zero,80206e7c <__mdiff+0x1e0>
80206d24:	34400504 	addi	r17,r6,20
80206d28:	2c000504 	addi	r16,r5,20
80206d2c:	0029883a 	mov	r20,zero
80206d30:	91400117 	ldw	r5,4(r18)
80206d34:	02063740 	call	80206374 <_Balloc>
80206d38:	92400417 	ldw	r9,16(r18)
80206d3c:	9b000417 	ldw	r12,16(r19)
80206d40:	12c00504 	addi	r11,r2,20
80206d44:	4a51883a 	add	r8,r9,r9
80206d48:	6319883a 	add	r12,r12,r12
80206d4c:	4211883a 	add	r8,r8,r8
80206d50:	6319883a 	add	r12,r12,r12
80206d54:	15000315 	stw	r20,12(r2)
80206d58:	8211883a 	add	r8,r16,r8
80206d5c:	8b19883a 	add	r12,r17,r12
80206d60:	0007883a 	mov	r3,zero
80206d64:	81400017 	ldw	r5,0(r16)
80206d68:	89c00017 	ldw	r7,0(r17)
80206d6c:	59800104 	addi	r6,r11,4
80206d70:	293fffcc 	andi	r4,r5,65535
80206d74:	20c7883a 	add	r3,r4,r3
80206d78:	393fffcc 	andi	r4,r7,65535
80206d7c:	1909c83a 	sub	r4,r3,r4
80206d80:	280ad43a 	srli	r5,r5,16
80206d84:	380ed43a 	srli	r7,r7,16
80206d88:	2007d43a 	srai	r3,r4,16
80206d8c:	213fffcc 	andi	r4,r4,65535
80206d90:	29cbc83a 	sub	r5,r5,r7
80206d94:	28c7883a 	add	r3,r5,r3
80206d98:	180a943a 	slli	r5,r3,16
80206d9c:	8c400104 	addi	r17,r17,4
80206da0:	84000104 	addi	r16,r16,4
80206da4:	2908b03a 	or	r4,r5,r4
80206da8:	59000015 	stw	r4,0(r11)
80206dac:	1807d43a 	srai	r3,r3,16
80206db0:	3015883a 	mov	r10,r6
80206db4:	3017883a 	mov	r11,r6
80206db8:	8b3fea36 	bltu	r17,r12,80206d64 <__reset+0xfa1e6d64>
80206dbc:	8200162e 	bgeu	r16,r8,80206e18 <__mdiff+0x17c>
80206dc0:	8017883a 	mov	r11,r16
80206dc4:	59400017 	ldw	r5,0(r11)
80206dc8:	31800104 	addi	r6,r6,4
80206dcc:	5ac00104 	addi	r11,r11,4
80206dd0:	293fffcc 	andi	r4,r5,65535
80206dd4:	20c7883a 	add	r3,r4,r3
80206dd8:	280ed43a 	srli	r7,r5,16
80206ddc:	180bd43a 	srai	r5,r3,16
80206de0:	193fffcc 	andi	r4,r3,65535
80206de4:	3947883a 	add	r3,r7,r5
80206de8:	180a943a 	slli	r5,r3,16
80206dec:	1807d43a 	srai	r3,r3,16
80206df0:	2908b03a 	or	r4,r5,r4
80206df4:	313fff15 	stw	r4,-4(r6)
80206df8:	5a3ff236 	bltu	r11,r8,80206dc4 <__reset+0xfa1e6dc4>
80206dfc:	0406303a 	nor	r3,zero,r16
80206e00:	1a07883a 	add	r3,r3,r8
80206e04:	1806d0ba 	srli	r3,r3,2
80206e08:	18c00044 	addi	r3,r3,1
80206e0c:	18c7883a 	add	r3,r3,r3
80206e10:	18c7883a 	add	r3,r3,r3
80206e14:	50d5883a 	add	r10,r10,r3
80206e18:	50ffff04 	addi	r3,r10,-4
80206e1c:	2000041e 	bne	r4,zero,80206e30 <__mdiff+0x194>
80206e20:	18ffff04 	addi	r3,r3,-4
80206e24:	19000017 	ldw	r4,0(r3)
80206e28:	4a7fffc4 	addi	r9,r9,-1
80206e2c:	203ffc26 	beq	r4,zero,80206e20 <__reset+0xfa1e6e20>
80206e30:	12400415 	stw	r9,16(r2)
80206e34:	dfc00517 	ldw	ra,20(sp)
80206e38:	dd000417 	ldw	r20,16(sp)
80206e3c:	dcc00317 	ldw	r19,12(sp)
80206e40:	dc800217 	ldw	r18,8(sp)
80206e44:	dc400117 	ldw	r17,4(sp)
80206e48:	dc000017 	ldw	r16,0(sp)
80206e4c:	dec00604 	addi	sp,sp,24
80206e50:	f800283a 	ret
80206e54:	000b883a 	mov	r5,zero
80206e58:	02063740 	call	80206374 <_Balloc>
80206e5c:	00c00044 	movi	r3,1
80206e60:	10c00415 	stw	r3,16(r2)
80206e64:	10000515 	stw	zero,20(r2)
80206e68:	003ff206 	br	80206e34 <__reset+0xfa1e6e34>
80206e6c:	8023883a 	mov	r17,r16
80206e70:	0029883a 	mov	r20,zero
80206e74:	4021883a 	mov	r16,r8
80206e78:	003fad06 	br	80206d30 <__reset+0xfa1e6d30>
80206e7c:	9005883a 	mov	r2,r18
80206e80:	94400504 	addi	r17,r18,20
80206e84:	9c000504 	addi	r16,r19,20
80206e88:	9825883a 	mov	r18,r19
80206e8c:	05000044 	movi	r20,1
80206e90:	1027883a 	mov	r19,r2
80206e94:	003fa606 	br	80206d30 <__reset+0xfa1e6d30>

80206e98 <__ulp>:
80206e98:	295ffc2c 	andhi	r5,r5,32752
80206e9c:	00bf3034 	movhi	r2,64704
80206ea0:	2887883a 	add	r3,r5,r2
80206ea4:	00c0020e 	bge	zero,r3,80206eb0 <__ulp+0x18>
80206ea8:	0005883a 	mov	r2,zero
80206eac:	f800283a 	ret
80206eb0:	00c7c83a 	sub	r3,zero,r3
80206eb4:	1807d53a 	srai	r3,r3,20
80206eb8:	008004c4 	movi	r2,19
80206ebc:	10c00b0e 	bge	r2,r3,80206eec <__ulp+0x54>
80206ec0:	18bffb04 	addi	r2,r3,-20
80206ec4:	01000784 	movi	r4,30
80206ec8:	0007883a 	mov	r3,zero
80206ecc:	20800516 	blt	r4,r2,80206ee4 <__ulp+0x4c>
80206ed0:	010007c4 	movi	r4,31
80206ed4:	2089c83a 	sub	r4,r4,r2
80206ed8:	00800044 	movi	r2,1
80206edc:	1104983a 	sll	r2,r2,r4
80206ee0:	f800283a 	ret
80206ee4:	00800044 	movi	r2,1
80206ee8:	f800283a 	ret
80206eec:	01400234 	movhi	r5,8
80206ef0:	28c7d83a 	sra	r3,r5,r3
80206ef4:	0005883a 	mov	r2,zero
80206ef8:	f800283a 	ret

80206efc <__b2d>:
80206efc:	defffa04 	addi	sp,sp,-24
80206f00:	dc000015 	stw	r16,0(sp)
80206f04:	24000417 	ldw	r16,16(r4)
80206f08:	dc400115 	stw	r17,4(sp)
80206f0c:	24400504 	addi	r17,r4,20
80206f10:	8421883a 	add	r16,r16,r16
80206f14:	8421883a 	add	r16,r16,r16
80206f18:	8c21883a 	add	r16,r17,r16
80206f1c:	dc800215 	stw	r18,8(sp)
80206f20:	84bfff17 	ldw	r18,-4(r16)
80206f24:	dd000415 	stw	r20,16(sp)
80206f28:	dcc00315 	stw	r19,12(sp)
80206f2c:	9009883a 	mov	r4,r18
80206f30:	2829883a 	mov	r20,r5
80206f34:	dfc00515 	stw	ra,20(sp)
80206f38:	02066680 	call	80206668 <__hi0bits>
80206f3c:	00c00804 	movi	r3,32
80206f40:	1889c83a 	sub	r4,r3,r2
80206f44:	a1000015 	stw	r4,0(r20)
80206f48:	01000284 	movi	r4,10
80206f4c:	84ffff04 	addi	r19,r16,-4
80206f50:	20801216 	blt	r4,r2,80206f9c <__b2d+0xa0>
80206f54:	018002c4 	movi	r6,11
80206f58:	308dc83a 	sub	r6,r6,r2
80206f5c:	9186d83a 	srl	r3,r18,r6
80206f60:	18cffc34 	orhi	r3,r3,16368
80206f64:	8cc0212e 	bgeu	r17,r19,80206fec <__b2d+0xf0>
80206f68:	813ffe17 	ldw	r4,-8(r16)
80206f6c:	218cd83a 	srl	r6,r4,r6
80206f70:	10800544 	addi	r2,r2,21
80206f74:	9084983a 	sll	r2,r18,r2
80206f78:	1184b03a 	or	r2,r2,r6
80206f7c:	dfc00517 	ldw	ra,20(sp)
80206f80:	dd000417 	ldw	r20,16(sp)
80206f84:	dcc00317 	ldw	r19,12(sp)
80206f88:	dc800217 	ldw	r18,8(sp)
80206f8c:	dc400117 	ldw	r17,4(sp)
80206f90:	dc000017 	ldw	r16,0(sp)
80206f94:	dec00604 	addi	sp,sp,24
80206f98:	f800283a 	ret
80206f9c:	8cc00f2e 	bgeu	r17,r19,80206fdc <__b2d+0xe0>
80206fa0:	117ffd44 	addi	r5,r2,-11
80206fa4:	80bffe17 	ldw	r2,-8(r16)
80206fa8:	28000e26 	beq	r5,zero,80206fe4 <__b2d+0xe8>
80206fac:	1949c83a 	sub	r4,r3,r5
80206fb0:	9164983a 	sll	r18,r18,r5
80206fb4:	1106d83a 	srl	r3,r2,r4
80206fb8:	81bffe04 	addi	r6,r16,-8
80206fbc:	948ffc34 	orhi	r18,r18,16368
80206fc0:	90c6b03a 	or	r3,r18,r3
80206fc4:	89800e2e 	bgeu	r17,r6,80207000 <__b2d+0x104>
80206fc8:	81bffd17 	ldw	r6,-12(r16)
80206fcc:	1144983a 	sll	r2,r2,r5
80206fd0:	310ad83a 	srl	r5,r6,r4
80206fd4:	2884b03a 	or	r2,r5,r2
80206fd8:	003fe806 	br	80206f7c <__reset+0xfa1e6f7c>
80206fdc:	10bffd44 	addi	r2,r2,-11
80206fe0:	1000041e 	bne	r2,zero,80206ff4 <__b2d+0xf8>
80206fe4:	90cffc34 	orhi	r3,r18,16368
80206fe8:	003fe406 	br	80206f7c <__reset+0xfa1e6f7c>
80206fec:	000d883a 	mov	r6,zero
80206ff0:	003fdf06 	br	80206f70 <__reset+0xfa1e6f70>
80206ff4:	90a4983a 	sll	r18,r18,r2
80206ff8:	0005883a 	mov	r2,zero
80206ffc:	003ff906 	br	80206fe4 <__reset+0xfa1e6fe4>
80207000:	1144983a 	sll	r2,r2,r5
80207004:	003fdd06 	br	80206f7c <__reset+0xfa1e6f7c>

80207008 <__d2b>:
80207008:	defff804 	addi	sp,sp,-32
8020700c:	dc000215 	stw	r16,8(sp)
80207010:	3021883a 	mov	r16,r6
80207014:	dc400315 	stw	r17,12(sp)
80207018:	8022907a 	slli	r17,r16,1
8020701c:	dd000615 	stw	r20,24(sp)
80207020:	2829883a 	mov	r20,r5
80207024:	01400044 	movi	r5,1
80207028:	dcc00515 	stw	r19,20(sp)
8020702c:	dc800415 	stw	r18,16(sp)
80207030:	dfc00715 	stw	ra,28(sp)
80207034:	3825883a 	mov	r18,r7
80207038:	8822d57a 	srli	r17,r17,21
8020703c:	02063740 	call	80206374 <_Balloc>
80207040:	1027883a 	mov	r19,r2
80207044:	00800434 	movhi	r2,16
80207048:	10bfffc4 	addi	r2,r2,-1
8020704c:	808c703a 	and	r6,r16,r2
80207050:	88000126 	beq	r17,zero,80207058 <__d2b+0x50>
80207054:	31800434 	orhi	r6,r6,16
80207058:	d9800015 	stw	r6,0(sp)
8020705c:	a0002426 	beq	r20,zero,802070f0 <__d2b+0xe8>
80207060:	d9000104 	addi	r4,sp,4
80207064:	dd000115 	stw	r20,4(sp)
80207068:	02066d00 	call	802066d0 <__lo0bits>
8020706c:	d8c00017 	ldw	r3,0(sp)
80207070:	10002f1e 	bne	r2,zero,80207130 <__d2b+0x128>
80207074:	d9000117 	ldw	r4,4(sp)
80207078:	99000515 	stw	r4,20(r19)
8020707c:	1821003a 	cmpeq	r16,r3,zero
80207080:	01000084 	movi	r4,2
80207084:	2421c83a 	sub	r16,r4,r16
80207088:	98c00615 	stw	r3,24(r19)
8020708c:	9c000415 	stw	r16,16(r19)
80207090:	88001f1e 	bne	r17,zero,80207110 <__d2b+0x108>
80207094:	10bef384 	addi	r2,r2,-1074
80207098:	90800015 	stw	r2,0(r18)
8020709c:	00900034 	movhi	r2,16384
802070a0:	10bfffc4 	addi	r2,r2,-1
802070a4:	8085883a 	add	r2,r16,r2
802070a8:	1085883a 	add	r2,r2,r2
802070ac:	1085883a 	add	r2,r2,r2
802070b0:	9885883a 	add	r2,r19,r2
802070b4:	11000517 	ldw	r4,20(r2)
802070b8:	8020917a 	slli	r16,r16,5
802070bc:	02066680 	call	80206668 <__hi0bits>
802070c0:	d8c00817 	ldw	r3,32(sp)
802070c4:	8085c83a 	sub	r2,r16,r2
802070c8:	18800015 	stw	r2,0(r3)
802070cc:	9805883a 	mov	r2,r19
802070d0:	dfc00717 	ldw	ra,28(sp)
802070d4:	dd000617 	ldw	r20,24(sp)
802070d8:	dcc00517 	ldw	r19,20(sp)
802070dc:	dc800417 	ldw	r18,16(sp)
802070e0:	dc400317 	ldw	r17,12(sp)
802070e4:	dc000217 	ldw	r16,8(sp)
802070e8:	dec00804 	addi	sp,sp,32
802070ec:	f800283a 	ret
802070f0:	d809883a 	mov	r4,sp
802070f4:	02066d00 	call	802066d0 <__lo0bits>
802070f8:	d8c00017 	ldw	r3,0(sp)
802070fc:	04000044 	movi	r16,1
80207100:	9c000415 	stw	r16,16(r19)
80207104:	98c00515 	stw	r3,20(r19)
80207108:	10800804 	addi	r2,r2,32
8020710c:	883fe126 	beq	r17,zero,80207094 <__reset+0xfa1e7094>
80207110:	00c00d44 	movi	r3,53
80207114:	8c7ef344 	addi	r17,r17,-1075
80207118:	88a3883a 	add	r17,r17,r2
8020711c:	1885c83a 	sub	r2,r3,r2
80207120:	d8c00817 	ldw	r3,32(sp)
80207124:	94400015 	stw	r17,0(r18)
80207128:	18800015 	stw	r2,0(r3)
8020712c:	003fe706 	br	802070cc <__reset+0xfa1e70cc>
80207130:	01000804 	movi	r4,32
80207134:	2089c83a 	sub	r4,r4,r2
80207138:	1908983a 	sll	r4,r3,r4
8020713c:	d9400117 	ldw	r5,4(sp)
80207140:	1886d83a 	srl	r3,r3,r2
80207144:	2148b03a 	or	r4,r4,r5
80207148:	99000515 	stw	r4,20(r19)
8020714c:	d8c00015 	stw	r3,0(sp)
80207150:	003fca06 	br	8020707c <__reset+0xfa1e707c>

80207154 <__ratio>:
80207154:	defff904 	addi	sp,sp,-28
80207158:	dc400315 	stw	r17,12(sp)
8020715c:	2823883a 	mov	r17,r5
80207160:	d9400104 	addi	r5,sp,4
80207164:	dfc00615 	stw	ra,24(sp)
80207168:	dcc00515 	stw	r19,20(sp)
8020716c:	dc800415 	stw	r18,16(sp)
80207170:	2027883a 	mov	r19,r4
80207174:	dc000215 	stw	r16,8(sp)
80207178:	0206efc0 	call	80206efc <__b2d>
8020717c:	d80b883a 	mov	r5,sp
80207180:	8809883a 	mov	r4,r17
80207184:	1025883a 	mov	r18,r2
80207188:	1821883a 	mov	r16,r3
8020718c:	0206efc0 	call	80206efc <__b2d>
80207190:	8a000417 	ldw	r8,16(r17)
80207194:	99000417 	ldw	r4,16(r19)
80207198:	d9400117 	ldw	r5,4(sp)
8020719c:	2209c83a 	sub	r4,r4,r8
802071a0:	2010917a 	slli	r8,r4,5
802071a4:	d9000017 	ldw	r4,0(sp)
802071a8:	2909c83a 	sub	r4,r5,r4
802071ac:	4109883a 	add	r4,r8,r4
802071b0:	01000e0e 	bge	zero,r4,802071ec <__ratio+0x98>
802071b4:	2008953a 	slli	r4,r4,20
802071b8:	2421883a 	add	r16,r4,r16
802071bc:	100d883a 	mov	r6,r2
802071c0:	180f883a 	mov	r7,r3
802071c4:	9009883a 	mov	r4,r18
802071c8:	800b883a 	mov	r5,r16
802071cc:	020b0400 	call	8020b040 <__divdf3>
802071d0:	dfc00617 	ldw	ra,24(sp)
802071d4:	dcc00517 	ldw	r19,20(sp)
802071d8:	dc800417 	ldw	r18,16(sp)
802071dc:	dc400317 	ldw	r17,12(sp)
802071e0:	dc000217 	ldw	r16,8(sp)
802071e4:	dec00704 	addi	sp,sp,28
802071e8:	f800283a 	ret
802071ec:	2008953a 	slli	r4,r4,20
802071f0:	1907c83a 	sub	r3,r3,r4
802071f4:	003ff106 	br	802071bc <__reset+0xfa1e71bc>

802071f8 <_mprec_log10>:
802071f8:	defffe04 	addi	sp,sp,-8
802071fc:	dc000015 	stw	r16,0(sp)
80207200:	dfc00115 	stw	ra,4(sp)
80207204:	008005c4 	movi	r2,23
80207208:	2021883a 	mov	r16,r4
8020720c:	11000d0e 	bge	r2,r4,80207244 <_mprec_log10+0x4c>
80207210:	0005883a 	mov	r2,zero
80207214:	00cffc34 	movhi	r3,16368
80207218:	843fffc4 	addi	r16,r16,-1
8020721c:	000d883a 	mov	r6,zero
80207220:	01d00934 	movhi	r7,16420
80207224:	1009883a 	mov	r4,r2
80207228:	180b883a 	mov	r5,r3
8020722c:	020bb800 	call	8020bb80 <__muldf3>
80207230:	803ff91e 	bne	r16,zero,80207218 <__reset+0xfa1e7218>
80207234:	dfc00117 	ldw	ra,4(sp)
80207238:	dc000017 	ldw	r16,0(sp)
8020723c:	dec00204 	addi	sp,sp,8
80207240:	f800283a 	ret
80207244:	202090fa 	slli	r16,r4,3
80207248:	00a00874 	movhi	r2,32801
8020724c:	10868b04 	addi	r2,r2,6700
80207250:	1421883a 	add	r16,r2,r16
80207254:	80800017 	ldw	r2,0(r16)
80207258:	80c00117 	ldw	r3,4(r16)
8020725c:	dfc00117 	ldw	ra,4(sp)
80207260:	dc000017 	ldw	r16,0(sp)
80207264:	dec00204 	addi	sp,sp,8
80207268:	f800283a 	ret

8020726c <__copybits>:
8020726c:	297fffc4 	addi	r5,r5,-1
80207270:	280fd17a 	srai	r7,r5,5
80207274:	30c00417 	ldw	r3,16(r6)
80207278:	30800504 	addi	r2,r6,20
8020727c:	39c00044 	addi	r7,r7,1
80207280:	18c7883a 	add	r3,r3,r3
80207284:	39cf883a 	add	r7,r7,r7
80207288:	18c7883a 	add	r3,r3,r3
8020728c:	39cf883a 	add	r7,r7,r7
80207290:	10c7883a 	add	r3,r2,r3
80207294:	21cf883a 	add	r7,r4,r7
80207298:	10c00d2e 	bgeu	r2,r3,802072d0 <__copybits+0x64>
8020729c:	200b883a 	mov	r5,r4
802072a0:	12000017 	ldw	r8,0(r2)
802072a4:	29400104 	addi	r5,r5,4
802072a8:	10800104 	addi	r2,r2,4
802072ac:	2a3fff15 	stw	r8,-4(r5)
802072b0:	10fffb36 	bltu	r2,r3,802072a0 <__reset+0xfa1e72a0>
802072b4:	1985c83a 	sub	r2,r3,r6
802072b8:	10bffac4 	addi	r2,r2,-21
802072bc:	1004d0ba 	srli	r2,r2,2
802072c0:	10800044 	addi	r2,r2,1
802072c4:	1085883a 	add	r2,r2,r2
802072c8:	1085883a 	add	r2,r2,r2
802072cc:	2089883a 	add	r4,r4,r2
802072d0:	21c0032e 	bgeu	r4,r7,802072e0 <__copybits+0x74>
802072d4:	20000015 	stw	zero,0(r4)
802072d8:	21000104 	addi	r4,r4,4
802072dc:	21fffd36 	bltu	r4,r7,802072d4 <__reset+0xfa1e72d4>
802072e0:	f800283a 	ret

802072e4 <__any_on>:
802072e4:	20c00417 	ldw	r3,16(r4)
802072e8:	2805d17a 	srai	r2,r5,5
802072ec:	21000504 	addi	r4,r4,20
802072f0:	18800d0e 	bge	r3,r2,80207328 <__any_on+0x44>
802072f4:	18c7883a 	add	r3,r3,r3
802072f8:	18c7883a 	add	r3,r3,r3
802072fc:	20c7883a 	add	r3,r4,r3
80207300:	20c0192e 	bgeu	r4,r3,80207368 <__any_on+0x84>
80207304:	18bfff17 	ldw	r2,-4(r3)
80207308:	18ffff04 	addi	r3,r3,-4
8020730c:	1000041e 	bne	r2,zero,80207320 <__any_on+0x3c>
80207310:	20c0142e 	bgeu	r4,r3,80207364 <__any_on+0x80>
80207314:	18ffff04 	addi	r3,r3,-4
80207318:	19400017 	ldw	r5,0(r3)
8020731c:	283ffc26 	beq	r5,zero,80207310 <__reset+0xfa1e7310>
80207320:	00800044 	movi	r2,1
80207324:	f800283a 	ret
80207328:	10c00a0e 	bge	r2,r3,80207354 <__any_on+0x70>
8020732c:	1085883a 	add	r2,r2,r2
80207330:	1085883a 	add	r2,r2,r2
80207334:	294007cc 	andi	r5,r5,31
80207338:	2087883a 	add	r3,r4,r2
8020733c:	283ff026 	beq	r5,zero,80207300 <__reset+0xfa1e7300>
80207340:	19800017 	ldw	r6,0(r3)
80207344:	3144d83a 	srl	r2,r6,r5
80207348:	114a983a 	sll	r5,r2,r5
8020734c:	317ff41e 	bne	r6,r5,80207320 <__reset+0xfa1e7320>
80207350:	003feb06 	br	80207300 <__reset+0xfa1e7300>
80207354:	1085883a 	add	r2,r2,r2
80207358:	1085883a 	add	r2,r2,r2
8020735c:	2087883a 	add	r3,r4,r2
80207360:	003fe706 	br	80207300 <__reset+0xfa1e7300>
80207364:	f800283a 	ret
80207368:	0005883a 	mov	r2,zero
8020736c:	f800283a 	ret

80207370 <_realloc_r>:
80207370:	defff604 	addi	sp,sp,-40
80207374:	dc800215 	stw	r18,8(sp)
80207378:	dfc00915 	stw	ra,36(sp)
8020737c:	df000815 	stw	fp,32(sp)
80207380:	ddc00715 	stw	r23,28(sp)
80207384:	dd800615 	stw	r22,24(sp)
80207388:	dd400515 	stw	r21,20(sp)
8020738c:	dd000415 	stw	r20,16(sp)
80207390:	dcc00315 	stw	r19,12(sp)
80207394:	dc400115 	stw	r17,4(sp)
80207398:	dc000015 	stw	r16,0(sp)
8020739c:	3025883a 	mov	r18,r6
802073a0:	2800b726 	beq	r5,zero,80207680 <_realloc_r+0x310>
802073a4:	282b883a 	mov	r21,r5
802073a8:	2029883a 	mov	r20,r4
802073ac:	020d28c0 	call	8020d28c <__malloc_lock>
802073b0:	a8bfff17 	ldw	r2,-4(r21)
802073b4:	043fff04 	movi	r16,-4
802073b8:	90c002c4 	addi	r3,r18,11
802073bc:	01000584 	movi	r4,22
802073c0:	acfffe04 	addi	r19,r21,-8
802073c4:	1420703a 	and	r16,r2,r16
802073c8:	20c0332e 	bgeu	r4,r3,80207498 <_realloc_r+0x128>
802073cc:	047ffe04 	movi	r17,-8
802073d0:	1c62703a 	and	r17,r3,r17
802073d4:	8807883a 	mov	r3,r17
802073d8:	88005816 	blt	r17,zero,8020753c <_realloc_r+0x1cc>
802073dc:	8c805736 	bltu	r17,r18,8020753c <_realloc_r+0x1cc>
802073e0:	80c0300e 	bge	r16,r3,802074a4 <_realloc_r+0x134>
802073e4:	07200874 	movhi	fp,32801
802073e8:	e708d304 	addi	fp,fp,9036
802073ec:	e1c00217 	ldw	r7,8(fp)
802073f0:	9c09883a 	add	r4,r19,r16
802073f4:	22000117 	ldw	r8,4(r4)
802073f8:	21c06326 	beq	r4,r7,80207588 <_realloc_r+0x218>
802073fc:	017fff84 	movi	r5,-2
80207400:	414a703a 	and	r5,r8,r5
80207404:	214b883a 	add	r5,r4,r5
80207408:	29800117 	ldw	r6,4(r5)
8020740c:	3180004c 	andi	r6,r6,1
80207410:	30003f26 	beq	r6,zero,80207510 <_realloc_r+0x1a0>
80207414:	1080004c 	andi	r2,r2,1
80207418:	10008326 	beq	r2,zero,80207628 <_realloc_r+0x2b8>
8020741c:	900b883a 	mov	r5,r18
80207420:	a009883a 	mov	r4,r20
80207424:	02058000 	call	80205800 <_malloc_r>
80207428:	1025883a 	mov	r18,r2
8020742c:	10011e26 	beq	r2,zero,802078a8 <_realloc_r+0x538>
80207430:	a93fff17 	ldw	r4,-4(r21)
80207434:	10fffe04 	addi	r3,r2,-8
80207438:	00bfff84 	movi	r2,-2
8020743c:	2084703a 	and	r2,r4,r2
80207440:	9885883a 	add	r2,r19,r2
80207444:	1880ee26 	beq	r3,r2,80207800 <_realloc_r+0x490>
80207448:	81bfff04 	addi	r6,r16,-4
8020744c:	00800904 	movi	r2,36
80207450:	1180b836 	bltu	r2,r6,80207734 <_realloc_r+0x3c4>
80207454:	00c004c4 	movi	r3,19
80207458:	19809636 	bltu	r3,r6,802076b4 <_realloc_r+0x344>
8020745c:	9005883a 	mov	r2,r18
80207460:	a807883a 	mov	r3,r21
80207464:	19000017 	ldw	r4,0(r3)
80207468:	11000015 	stw	r4,0(r2)
8020746c:	19000117 	ldw	r4,4(r3)
80207470:	11000115 	stw	r4,4(r2)
80207474:	18c00217 	ldw	r3,8(r3)
80207478:	10c00215 	stw	r3,8(r2)
8020747c:	a80b883a 	mov	r5,r21
80207480:	a009883a 	mov	r4,r20
80207484:	0204c140 	call	80204c14 <_free_r>
80207488:	a009883a 	mov	r4,r20
8020748c:	020d2b00 	call	8020d2b0 <__malloc_unlock>
80207490:	9005883a 	mov	r2,r18
80207494:	00001206 	br	802074e0 <_realloc_r+0x170>
80207498:	00c00404 	movi	r3,16
8020749c:	1823883a 	mov	r17,r3
802074a0:	003fce06 	br	802073dc <__reset+0xfa1e73dc>
802074a4:	a825883a 	mov	r18,r21
802074a8:	8445c83a 	sub	r2,r16,r17
802074ac:	00c003c4 	movi	r3,15
802074b0:	18802636 	bltu	r3,r2,8020754c <_realloc_r+0x1dc>
802074b4:	99800117 	ldw	r6,4(r19)
802074b8:	9c07883a 	add	r3,r19,r16
802074bc:	3180004c 	andi	r6,r6,1
802074c0:	3420b03a 	or	r16,r6,r16
802074c4:	9c000115 	stw	r16,4(r19)
802074c8:	18800117 	ldw	r2,4(r3)
802074cc:	10800054 	ori	r2,r2,1
802074d0:	18800115 	stw	r2,4(r3)
802074d4:	a009883a 	mov	r4,r20
802074d8:	020d2b00 	call	8020d2b0 <__malloc_unlock>
802074dc:	9005883a 	mov	r2,r18
802074e0:	dfc00917 	ldw	ra,36(sp)
802074e4:	df000817 	ldw	fp,32(sp)
802074e8:	ddc00717 	ldw	r23,28(sp)
802074ec:	dd800617 	ldw	r22,24(sp)
802074f0:	dd400517 	ldw	r21,20(sp)
802074f4:	dd000417 	ldw	r20,16(sp)
802074f8:	dcc00317 	ldw	r19,12(sp)
802074fc:	dc800217 	ldw	r18,8(sp)
80207500:	dc400117 	ldw	r17,4(sp)
80207504:	dc000017 	ldw	r16,0(sp)
80207508:	dec00a04 	addi	sp,sp,40
8020750c:	f800283a 	ret
80207510:	017fff04 	movi	r5,-4
80207514:	414a703a 	and	r5,r8,r5
80207518:	814d883a 	add	r6,r16,r5
8020751c:	30c01f16 	blt	r6,r3,8020759c <_realloc_r+0x22c>
80207520:	20800317 	ldw	r2,12(r4)
80207524:	20c00217 	ldw	r3,8(r4)
80207528:	a825883a 	mov	r18,r21
8020752c:	3021883a 	mov	r16,r6
80207530:	18800315 	stw	r2,12(r3)
80207534:	10c00215 	stw	r3,8(r2)
80207538:	003fdb06 	br	802074a8 <__reset+0xfa1e74a8>
8020753c:	00800304 	movi	r2,12
80207540:	a0800015 	stw	r2,0(r20)
80207544:	0005883a 	mov	r2,zero
80207548:	003fe506 	br	802074e0 <__reset+0xfa1e74e0>
8020754c:	98c00117 	ldw	r3,4(r19)
80207550:	9c4b883a 	add	r5,r19,r17
80207554:	11000054 	ori	r4,r2,1
80207558:	18c0004c 	andi	r3,r3,1
8020755c:	1c62b03a 	or	r17,r3,r17
80207560:	9c400115 	stw	r17,4(r19)
80207564:	29000115 	stw	r4,4(r5)
80207568:	2885883a 	add	r2,r5,r2
8020756c:	10c00117 	ldw	r3,4(r2)
80207570:	29400204 	addi	r5,r5,8
80207574:	a009883a 	mov	r4,r20
80207578:	18c00054 	ori	r3,r3,1
8020757c:	10c00115 	stw	r3,4(r2)
80207580:	0204c140 	call	80204c14 <_free_r>
80207584:	003fd306 	br	802074d4 <__reset+0xfa1e74d4>
80207588:	017fff04 	movi	r5,-4
8020758c:	414a703a 	and	r5,r8,r5
80207590:	89800404 	addi	r6,r17,16
80207594:	8151883a 	add	r8,r16,r5
80207598:	4180590e 	bge	r8,r6,80207700 <_realloc_r+0x390>
8020759c:	1080004c 	andi	r2,r2,1
802075a0:	103f9e1e 	bne	r2,zero,8020741c <__reset+0xfa1e741c>
802075a4:	adbffe17 	ldw	r22,-8(r21)
802075a8:	00bfff04 	movi	r2,-4
802075ac:	9dadc83a 	sub	r22,r19,r22
802075b0:	b1800117 	ldw	r6,4(r22)
802075b4:	3084703a 	and	r2,r6,r2
802075b8:	20002026 	beq	r4,zero,8020763c <_realloc_r+0x2cc>
802075bc:	80af883a 	add	r23,r16,r2
802075c0:	b96f883a 	add	r23,r23,r5
802075c4:	21c05f26 	beq	r4,r7,80207744 <_realloc_r+0x3d4>
802075c8:	b8c01c16 	blt	r23,r3,8020763c <_realloc_r+0x2cc>
802075cc:	20800317 	ldw	r2,12(r4)
802075d0:	20c00217 	ldw	r3,8(r4)
802075d4:	81bfff04 	addi	r6,r16,-4
802075d8:	01000904 	movi	r4,36
802075dc:	18800315 	stw	r2,12(r3)
802075e0:	10c00215 	stw	r3,8(r2)
802075e4:	b0c00217 	ldw	r3,8(r22)
802075e8:	b0800317 	ldw	r2,12(r22)
802075ec:	b4800204 	addi	r18,r22,8
802075f0:	18800315 	stw	r2,12(r3)
802075f4:	10c00215 	stw	r3,8(r2)
802075f8:	21801b36 	bltu	r4,r6,80207668 <_realloc_r+0x2f8>
802075fc:	008004c4 	movi	r2,19
80207600:	1180352e 	bgeu	r2,r6,802076d8 <_realloc_r+0x368>
80207604:	a8800017 	ldw	r2,0(r21)
80207608:	b0800215 	stw	r2,8(r22)
8020760c:	a8800117 	ldw	r2,4(r21)
80207610:	b0800315 	stw	r2,12(r22)
80207614:	008006c4 	movi	r2,27
80207618:	11807f36 	bltu	r2,r6,80207818 <_realloc_r+0x4a8>
8020761c:	b0800404 	addi	r2,r22,16
80207620:	ad400204 	addi	r21,r21,8
80207624:	00002d06 	br	802076dc <_realloc_r+0x36c>
80207628:	adbffe17 	ldw	r22,-8(r21)
8020762c:	00bfff04 	movi	r2,-4
80207630:	9dadc83a 	sub	r22,r19,r22
80207634:	b1000117 	ldw	r4,4(r22)
80207638:	2084703a 	and	r2,r4,r2
8020763c:	b03f7726 	beq	r22,zero,8020741c <__reset+0xfa1e741c>
80207640:	80af883a 	add	r23,r16,r2
80207644:	b8ff7516 	blt	r23,r3,8020741c <__reset+0xfa1e741c>
80207648:	b0800317 	ldw	r2,12(r22)
8020764c:	b0c00217 	ldw	r3,8(r22)
80207650:	81bfff04 	addi	r6,r16,-4
80207654:	01000904 	movi	r4,36
80207658:	18800315 	stw	r2,12(r3)
8020765c:	10c00215 	stw	r3,8(r2)
80207660:	b4800204 	addi	r18,r22,8
80207664:	21bfe52e 	bgeu	r4,r6,802075fc <__reset+0xfa1e75fc>
80207668:	a80b883a 	mov	r5,r21
8020766c:	9009883a 	mov	r4,r18
80207670:	02060f00 	call	802060f0 <memmove>
80207674:	b821883a 	mov	r16,r23
80207678:	b027883a 	mov	r19,r22
8020767c:	003f8a06 	br	802074a8 <__reset+0xfa1e74a8>
80207680:	300b883a 	mov	r5,r6
80207684:	dfc00917 	ldw	ra,36(sp)
80207688:	df000817 	ldw	fp,32(sp)
8020768c:	ddc00717 	ldw	r23,28(sp)
80207690:	dd800617 	ldw	r22,24(sp)
80207694:	dd400517 	ldw	r21,20(sp)
80207698:	dd000417 	ldw	r20,16(sp)
8020769c:	dcc00317 	ldw	r19,12(sp)
802076a0:	dc800217 	ldw	r18,8(sp)
802076a4:	dc400117 	ldw	r17,4(sp)
802076a8:	dc000017 	ldw	r16,0(sp)
802076ac:	dec00a04 	addi	sp,sp,40
802076b0:	02058001 	jmpi	80205800 <_malloc_r>
802076b4:	a8c00017 	ldw	r3,0(r21)
802076b8:	90c00015 	stw	r3,0(r18)
802076bc:	a8c00117 	ldw	r3,4(r21)
802076c0:	90c00115 	stw	r3,4(r18)
802076c4:	00c006c4 	movi	r3,27
802076c8:	19804536 	bltu	r3,r6,802077e0 <_realloc_r+0x470>
802076cc:	90800204 	addi	r2,r18,8
802076d0:	a8c00204 	addi	r3,r21,8
802076d4:	003f6306 	br	80207464 <__reset+0xfa1e7464>
802076d8:	9005883a 	mov	r2,r18
802076dc:	a8c00017 	ldw	r3,0(r21)
802076e0:	b821883a 	mov	r16,r23
802076e4:	b027883a 	mov	r19,r22
802076e8:	10c00015 	stw	r3,0(r2)
802076ec:	a8c00117 	ldw	r3,4(r21)
802076f0:	10c00115 	stw	r3,4(r2)
802076f4:	a8c00217 	ldw	r3,8(r21)
802076f8:	10c00215 	stw	r3,8(r2)
802076fc:	003f6a06 	br	802074a8 <__reset+0xfa1e74a8>
80207700:	9c67883a 	add	r19,r19,r17
80207704:	4445c83a 	sub	r2,r8,r17
80207708:	e4c00215 	stw	r19,8(fp)
8020770c:	10800054 	ori	r2,r2,1
80207710:	98800115 	stw	r2,4(r19)
80207714:	a8bfff17 	ldw	r2,-4(r21)
80207718:	a009883a 	mov	r4,r20
8020771c:	1080004c 	andi	r2,r2,1
80207720:	1462b03a 	or	r17,r2,r17
80207724:	ac7fff15 	stw	r17,-4(r21)
80207728:	020d2b00 	call	8020d2b0 <__malloc_unlock>
8020772c:	a805883a 	mov	r2,r21
80207730:	003f6b06 	br	802074e0 <__reset+0xfa1e74e0>
80207734:	a80b883a 	mov	r5,r21
80207738:	9009883a 	mov	r4,r18
8020773c:	02060f00 	call	802060f0 <memmove>
80207740:	003f4e06 	br	8020747c <__reset+0xfa1e747c>
80207744:	89000404 	addi	r4,r17,16
80207748:	b93fbc16 	blt	r23,r4,8020763c <__reset+0xfa1e763c>
8020774c:	b0800317 	ldw	r2,12(r22)
80207750:	b0c00217 	ldw	r3,8(r22)
80207754:	81bfff04 	addi	r6,r16,-4
80207758:	01000904 	movi	r4,36
8020775c:	18800315 	stw	r2,12(r3)
80207760:	10c00215 	stw	r3,8(r2)
80207764:	b4800204 	addi	r18,r22,8
80207768:	21804336 	bltu	r4,r6,80207878 <_realloc_r+0x508>
8020776c:	008004c4 	movi	r2,19
80207770:	11803f2e 	bgeu	r2,r6,80207870 <_realloc_r+0x500>
80207774:	a8800017 	ldw	r2,0(r21)
80207778:	b0800215 	stw	r2,8(r22)
8020777c:	a8800117 	ldw	r2,4(r21)
80207780:	b0800315 	stw	r2,12(r22)
80207784:	008006c4 	movi	r2,27
80207788:	11803f36 	bltu	r2,r6,80207888 <_realloc_r+0x518>
8020778c:	b0800404 	addi	r2,r22,16
80207790:	ad400204 	addi	r21,r21,8
80207794:	a8c00017 	ldw	r3,0(r21)
80207798:	10c00015 	stw	r3,0(r2)
8020779c:	a8c00117 	ldw	r3,4(r21)
802077a0:	10c00115 	stw	r3,4(r2)
802077a4:	a8c00217 	ldw	r3,8(r21)
802077a8:	10c00215 	stw	r3,8(r2)
802077ac:	b447883a 	add	r3,r22,r17
802077b0:	bc45c83a 	sub	r2,r23,r17
802077b4:	e0c00215 	stw	r3,8(fp)
802077b8:	10800054 	ori	r2,r2,1
802077bc:	18800115 	stw	r2,4(r3)
802077c0:	b0800117 	ldw	r2,4(r22)
802077c4:	a009883a 	mov	r4,r20
802077c8:	1080004c 	andi	r2,r2,1
802077cc:	1462b03a 	or	r17,r2,r17
802077d0:	b4400115 	stw	r17,4(r22)
802077d4:	020d2b00 	call	8020d2b0 <__malloc_unlock>
802077d8:	9005883a 	mov	r2,r18
802077dc:	003f4006 	br	802074e0 <__reset+0xfa1e74e0>
802077e0:	a8c00217 	ldw	r3,8(r21)
802077e4:	90c00215 	stw	r3,8(r18)
802077e8:	a8c00317 	ldw	r3,12(r21)
802077ec:	90c00315 	stw	r3,12(r18)
802077f0:	30801126 	beq	r6,r2,80207838 <_realloc_r+0x4c8>
802077f4:	90800404 	addi	r2,r18,16
802077f8:	a8c00404 	addi	r3,r21,16
802077fc:	003f1906 	br	80207464 <__reset+0xfa1e7464>
80207800:	90ffff17 	ldw	r3,-4(r18)
80207804:	00bfff04 	movi	r2,-4
80207808:	a825883a 	mov	r18,r21
8020780c:	1884703a 	and	r2,r3,r2
80207810:	80a1883a 	add	r16,r16,r2
80207814:	003f2406 	br	802074a8 <__reset+0xfa1e74a8>
80207818:	a8800217 	ldw	r2,8(r21)
8020781c:	b0800415 	stw	r2,16(r22)
80207820:	a8800317 	ldw	r2,12(r21)
80207824:	b0800515 	stw	r2,20(r22)
80207828:	31000a26 	beq	r6,r4,80207854 <_realloc_r+0x4e4>
8020782c:	b0800604 	addi	r2,r22,24
80207830:	ad400404 	addi	r21,r21,16
80207834:	003fa906 	br	802076dc <__reset+0xfa1e76dc>
80207838:	a9000417 	ldw	r4,16(r21)
8020783c:	90800604 	addi	r2,r18,24
80207840:	a8c00604 	addi	r3,r21,24
80207844:	91000415 	stw	r4,16(r18)
80207848:	a9000517 	ldw	r4,20(r21)
8020784c:	91000515 	stw	r4,20(r18)
80207850:	003f0406 	br	80207464 <__reset+0xfa1e7464>
80207854:	a8c00417 	ldw	r3,16(r21)
80207858:	ad400604 	addi	r21,r21,24
8020785c:	b0800804 	addi	r2,r22,32
80207860:	b0c00615 	stw	r3,24(r22)
80207864:	a8ffff17 	ldw	r3,-4(r21)
80207868:	b0c00715 	stw	r3,28(r22)
8020786c:	003f9b06 	br	802076dc <__reset+0xfa1e76dc>
80207870:	9005883a 	mov	r2,r18
80207874:	003fc706 	br	80207794 <__reset+0xfa1e7794>
80207878:	a80b883a 	mov	r5,r21
8020787c:	9009883a 	mov	r4,r18
80207880:	02060f00 	call	802060f0 <memmove>
80207884:	003fc906 	br	802077ac <__reset+0xfa1e77ac>
80207888:	a8800217 	ldw	r2,8(r21)
8020788c:	b0800415 	stw	r2,16(r22)
80207890:	a8800317 	ldw	r2,12(r21)
80207894:	b0800515 	stw	r2,20(r22)
80207898:	31000726 	beq	r6,r4,802078b8 <_realloc_r+0x548>
8020789c:	b0800604 	addi	r2,r22,24
802078a0:	ad400404 	addi	r21,r21,16
802078a4:	003fbb06 	br	80207794 <__reset+0xfa1e7794>
802078a8:	a009883a 	mov	r4,r20
802078ac:	020d2b00 	call	8020d2b0 <__malloc_unlock>
802078b0:	0005883a 	mov	r2,zero
802078b4:	003f0a06 	br	802074e0 <__reset+0xfa1e74e0>
802078b8:	a8c00417 	ldw	r3,16(r21)
802078bc:	ad400604 	addi	r21,r21,24
802078c0:	b0800804 	addi	r2,r22,32
802078c4:	b0c00615 	stw	r3,24(r22)
802078c8:	a8ffff17 	ldw	r3,-4(r21)
802078cc:	b0c00715 	stw	r3,28(r22)
802078d0:	003fb006 	br	80207794 <__reset+0xfa1e7794>

802078d4 <__fpclassifyd>:
802078d4:	00a00034 	movhi	r2,32768
802078d8:	10bfffc4 	addi	r2,r2,-1
802078dc:	2884703a 	and	r2,r5,r2
802078e0:	10000726 	beq	r2,zero,80207900 <__fpclassifyd+0x2c>
802078e4:	00fffc34 	movhi	r3,65520
802078e8:	019ff834 	movhi	r6,32736
802078ec:	28c7883a 	add	r3,r5,r3
802078f0:	31bfffc4 	addi	r6,r6,-1
802078f4:	30c00536 	bltu	r6,r3,8020790c <__fpclassifyd+0x38>
802078f8:	00800104 	movi	r2,4
802078fc:	f800283a 	ret
80207900:	2000021e 	bne	r4,zero,8020790c <__fpclassifyd+0x38>
80207904:	00800084 	movi	r2,2
80207908:	f800283a 	ret
8020790c:	00dffc34 	movhi	r3,32752
80207910:	019ff834 	movhi	r6,32736
80207914:	28cb883a 	add	r5,r5,r3
80207918:	31bfffc4 	addi	r6,r6,-1
8020791c:	317ff62e 	bgeu	r6,r5,802078f8 <__reset+0xfa1e78f8>
80207920:	01400434 	movhi	r5,16
80207924:	297fffc4 	addi	r5,r5,-1
80207928:	28800236 	bltu	r5,r2,80207934 <__fpclassifyd+0x60>
8020792c:	008000c4 	movi	r2,3
80207930:	f800283a 	ret
80207934:	10c00226 	beq	r2,r3,80207940 <__fpclassifyd+0x6c>
80207938:	0005883a 	mov	r2,zero
8020793c:	f800283a 	ret
80207940:	2005003a 	cmpeq	r2,r4,zero
80207944:	f800283a 	ret

80207948 <_sbrk_r>:
80207948:	defffd04 	addi	sp,sp,-12
8020794c:	dc000015 	stw	r16,0(sp)
80207950:	04200874 	movhi	r16,32801
80207954:	dc400115 	stw	r17,4(sp)
80207958:	840eac04 	addi	r16,r16,15024
8020795c:	2023883a 	mov	r17,r4
80207960:	2809883a 	mov	r4,r5
80207964:	dfc00215 	stw	ra,8(sp)
80207968:	80000015 	stw	zero,0(r16)
8020796c:	020d4700 	call	8020d470 <sbrk>
80207970:	00ffffc4 	movi	r3,-1
80207974:	10c00526 	beq	r2,r3,8020798c <_sbrk_r+0x44>
80207978:	dfc00217 	ldw	ra,8(sp)
8020797c:	dc400117 	ldw	r17,4(sp)
80207980:	dc000017 	ldw	r16,0(sp)
80207984:	dec00304 	addi	sp,sp,12
80207988:	f800283a 	ret
8020798c:	80c00017 	ldw	r3,0(r16)
80207990:	183ff926 	beq	r3,zero,80207978 <__reset+0xfa1e7978>
80207994:	88c00015 	stw	r3,0(r17)
80207998:	003ff706 	br	80207978 <__reset+0xfa1e7978>

8020799c <__sread>:
8020799c:	defffe04 	addi	sp,sp,-8
802079a0:	dc000015 	stw	r16,0(sp)
802079a4:	2821883a 	mov	r16,r5
802079a8:	2940038f 	ldh	r5,14(r5)
802079ac:	dfc00115 	stw	ra,4(sp)
802079b0:	02097900 	call	80209790 <_read_r>
802079b4:	10000716 	blt	r2,zero,802079d4 <__sread+0x38>
802079b8:	80c01417 	ldw	r3,80(r16)
802079bc:	1887883a 	add	r3,r3,r2
802079c0:	80c01415 	stw	r3,80(r16)
802079c4:	dfc00117 	ldw	ra,4(sp)
802079c8:	dc000017 	ldw	r16,0(sp)
802079cc:	dec00204 	addi	sp,sp,8
802079d0:	f800283a 	ret
802079d4:	80c0030b 	ldhu	r3,12(r16)
802079d8:	18fbffcc 	andi	r3,r3,61439
802079dc:	80c0030d 	sth	r3,12(r16)
802079e0:	dfc00117 	ldw	ra,4(sp)
802079e4:	dc000017 	ldw	r16,0(sp)
802079e8:	dec00204 	addi	sp,sp,8
802079ec:	f800283a 	ret

802079f0 <__seofread>:
802079f0:	0005883a 	mov	r2,zero
802079f4:	f800283a 	ret

802079f8 <__swrite>:
802079f8:	2880030b 	ldhu	r2,12(r5)
802079fc:	defffb04 	addi	sp,sp,-20
80207a00:	dcc00315 	stw	r19,12(sp)
80207a04:	dc800215 	stw	r18,8(sp)
80207a08:	dc400115 	stw	r17,4(sp)
80207a0c:	dc000015 	stw	r16,0(sp)
80207a10:	dfc00415 	stw	ra,16(sp)
80207a14:	10c0400c 	andi	r3,r2,256
80207a18:	2821883a 	mov	r16,r5
80207a1c:	2023883a 	mov	r17,r4
80207a20:	3025883a 	mov	r18,r6
80207a24:	3827883a 	mov	r19,r7
80207a28:	18000526 	beq	r3,zero,80207a40 <__swrite+0x48>
80207a2c:	2940038f 	ldh	r5,14(r5)
80207a30:	01c00084 	movi	r7,2
80207a34:	000d883a 	mov	r6,zero
80207a38:	02097300 	call	80209730 <_lseek_r>
80207a3c:	8080030b 	ldhu	r2,12(r16)
80207a40:	8140038f 	ldh	r5,14(r16)
80207a44:	10bbffcc 	andi	r2,r2,61439
80207a48:	980f883a 	mov	r7,r19
80207a4c:	900d883a 	mov	r6,r18
80207a50:	8809883a 	mov	r4,r17
80207a54:	8080030d 	sth	r2,12(r16)
80207a58:	dfc00417 	ldw	ra,16(sp)
80207a5c:	dcc00317 	ldw	r19,12(sp)
80207a60:	dc800217 	ldw	r18,8(sp)
80207a64:	dc400117 	ldw	r17,4(sp)
80207a68:	dc000017 	ldw	r16,0(sp)
80207a6c:	dec00504 	addi	sp,sp,20
80207a70:	02091fc1 	jmpi	802091fc <_write_r>

80207a74 <__sseek>:
80207a74:	defffe04 	addi	sp,sp,-8
80207a78:	dc000015 	stw	r16,0(sp)
80207a7c:	2821883a 	mov	r16,r5
80207a80:	2940038f 	ldh	r5,14(r5)
80207a84:	dfc00115 	stw	ra,4(sp)
80207a88:	02097300 	call	80209730 <_lseek_r>
80207a8c:	00ffffc4 	movi	r3,-1
80207a90:	10c00826 	beq	r2,r3,80207ab4 <__sseek+0x40>
80207a94:	80c0030b 	ldhu	r3,12(r16)
80207a98:	80801415 	stw	r2,80(r16)
80207a9c:	18c40014 	ori	r3,r3,4096
80207aa0:	80c0030d 	sth	r3,12(r16)
80207aa4:	dfc00117 	ldw	ra,4(sp)
80207aa8:	dc000017 	ldw	r16,0(sp)
80207aac:	dec00204 	addi	sp,sp,8
80207ab0:	f800283a 	ret
80207ab4:	80c0030b 	ldhu	r3,12(r16)
80207ab8:	18fbffcc 	andi	r3,r3,61439
80207abc:	80c0030d 	sth	r3,12(r16)
80207ac0:	dfc00117 	ldw	ra,4(sp)
80207ac4:	dc000017 	ldw	r16,0(sp)
80207ac8:	dec00204 	addi	sp,sp,8
80207acc:	f800283a 	ret

80207ad0 <__sclose>:
80207ad0:	2940038f 	ldh	r5,14(r5)
80207ad4:	020925c1 	jmpi	8020925c <_close_r>

80207ad8 <strcmp>:
80207ad8:	2144b03a 	or	r2,r4,r5
80207adc:	108000cc 	andi	r2,r2,3
80207ae0:	1000171e 	bne	r2,zero,80207b40 <strcmp+0x68>
80207ae4:	20800017 	ldw	r2,0(r4)
80207ae8:	28c00017 	ldw	r3,0(r5)
80207aec:	10c0141e 	bne	r2,r3,80207b40 <strcmp+0x68>
80207af0:	027fbff4 	movhi	r9,65279
80207af4:	4a7fbfc4 	addi	r9,r9,-257
80207af8:	0086303a 	nor	r3,zero,r2
80207afc:	02202074 	movhi	r8,32897
80207b00:	1245883a 	add	r2,r2,r9
80207b04:	42202004 	addi	r8,r8,-32640
80207b08:	10c4703a 	and	r2,r2,r3
80207b0c:	1204703a 	and	r2,r2,r8
80207b10:	10000226 	beq	r2,zero,80207b1c <strcmp+0x44>
80207b14:	00002306 	br	80207ba4 <strcmp+0xcc>
80207b18:	1000221e 	bne	r2,zero,80207ba4 <strcmp+0xcc>
80207b1c:	21000104 	addi	r4,r4,4
80207b20:	20c00017 	ldw	r3,0(r4)
80207b24:	29400104 	addi	r5,r5,4
80207b28:	29800017 	ldw	r6,0(r5)
80207b2c:	1a4f883a 	add	r7,r3,r9
80207b30:	00c4303a 	nor	r2,zero,r3
80207b34:	3884703a 	and	r2,r7,r2
80207b38:	1204703a 	and	r2,r2,r8
80207b3c:	19bff626 	beq	r3,r6,80207b18 <__reset+0xfa1e7b18>
80207b40:	20800003 	ldbu	r2,0(r4)
80207b44:	10c03fcc 	andi	r3,r2,255
80207b48:	18c0201c 	xori	r3,r3,128
80207b4c:	18ffe004 	addi	r3,r3,-128
80207b50:	18000c26 	beq	r3,zero,80207b84 <strcmp+0xac>
80207b54:	29800007 	ldb	r6,0(r5)
80207b58:	19800326 	beq	r3,r6,80207b68 <strcmp+0x90>
80207b5c:	00001306 	br	80207bac <strcmp+0xd4>
80207b60:	29800007 	ldb	r6,0(r5)
80207b64:	11800b1e 	bne	r2,r6,80207b94 <strcmp+0xbc>
80207b68:	21000044 	addi	r4,r4,1
80207b6c:	20c00003 	ldbu	r3,0(r4)
80207b70:	29400044 	addi	r5,r5,1
80207b74:	18803fcc 	andi	r2,r3,255
80207b78:	1080201c 	xori	r2,r2,128
80207b7c:	10bfe004 	addi	r2,r2,-128
80207b80:	103ff71e 	bne	r2,zero,80207b60 <__reset+0xfa1e7b60>
80207b84:	0007883a 	mov	r3,zero
80207b88:	28800003 	ldbu	r2,0(r5)
80207b8c:	1885c83a 	sub	r2,r3,r2
80207b90:	f800283a 	ret
80207b94:	28800003 	ldbu	r2,0(r5)
80207b98:	18c03fcc 	andi	r3,r3,255
80207b9c:	1885c83a 	sub	r2,r3,r2
80207ba0:	f800283a 	ret
80207ba4:	0005883a 	mov	r2,zero
80207ba8:	f800283a 	ret
80207bac:	10c03fcc 	andi	r3,r2,255
80207bb0:	003ff506 	br	80207b88 <__reset+0xfa1e7b88>

80207bb4 <__sprint_r.part.0>:
80207bb4:	28801917 	ldw	r2,100(r5)
80207bb8:	defff604 	addi	sp,sp,-40
80207bbc:	dd400515 	stw	r21,20(sp)
80207bc0:	dfc00915 	stw	ra,36(sp)
80207bc4:	df000815 	stw	fp,32(sp)
80207bc8:	ddc00715 	stw	r23,28(sp)
80207bcc:	dd800615 	stw	r22,24(sp)
80207bd0:	dd000415 	stw	r20,16(sp)
80207bd4:	dcc00315 	stw	r19,12(sp)
80207bd8:	dc800215 	stw	r18,8(sp)
80207bdc:	dc400115 	stw	r17,4(sp)
80207be0:	dc000015 	stw	r16,0(sp)
80207be4:	1088000c 	andi	r2,r2,8192
80207be8:	302b883a 	mov	r21,r6
80207bec:	10002e26 	beq	r2,zero,80207ca8 <__sprint_r.part.0+0xf4>
80207bf0:	30800217 	ldw	r2,8(r6)
80207bf4:	35800017 	ldw	r22,0(r6)
80207bf8:	10002926 	beq	r2,zero,80207ca0 <__sprint_r.part.0+0xec>
80207bfc:	2827883a 	mov	r19,r5
80207c00:	2029883a 	mov	r20,r4
80207c04:	b5c00104 	addi	r23,r22,4
80207c08:	04bfffc4 	movi	r18,-1
80207c0c:	bc400017 	ldw	r17,0(r23)
80207c10:	b4000017 	ldw	r16,0(r22)
80207c14:	0039883a 	mov	fp,zero
80207c18:	8822d0ba 	srli	r17,r17,2
80207c1c:	8800031e 	bne	r17,zero,80207c2c <__sprint_r.part.0+0x78>
80207c20:	00001806 	br	80207c84 <__sprint_r.part.0+0xd0>
80207c24:	84000104 	addi	r16,r16,4
80207c28:	8f001526 	beq	r17,fp,80207c80 <__sprint_r.part.0+0xcc>
80207c2c:	81400017 	ldw	r5,0(r16)
80207c30:	980d883a 	mov	r6,r19
80207c34:	a009883a 	mov	r4,r20
80207c38:	02095dc0 	call	802095dc <_fputwc_r>
80207c3c:	e7000044 	addi	fp,fp,1
80207c40:	14bff81e 	bne	r2,r18,80207c24 <__reset+0xfa1e7c24>
80207c44:	9005883a 	mov	r2,r18
80207c48:	a8000215 	stw	zero,8(r21)
80207c4c:	a8000115 	stw	zero,4(r21)
80207c50:	dfc00917 	ldw	ra,36(sp)
80207c54:	df000817 	ldw	fp,32(sp)
80207c58:	ddc00717 	ldw	r23,28(sp)
80207c5c:	dd800617 	ldw	r22,24(sp)
80207c60:	dd400517 	ldw	r21,20(sp)
80207c64:	dd000417 	ldw	r20,16(sp)
80207c68:	dcc00317 	ldw	r19,12(sp)
80207c6c:	dc800217 	ldw	r18,8(sp)
80207c70:	dc400117 	ldw	r17,4(sp)
80207c74:	dc000017 	ldw	r16,0(sp)
80207c78:	dec00a04 	addi	sp,sp,40
80207c7c:	f800283a 	ret
80207c80:	a8800217 	ldw	r2,8(r21)
80207c84:	8c63883a 	add	r17,r17,r17
80207c88:	8c63883a 	add	r17,r17,r17
80207c8c:	1445c83a 	sub	r2,r2,r17
80207c90:	a8800215 	stw	r2,8(r21)
80207c94:	b5800204 	addi	r22,r22,8
80207c98:	bdc00204 	addi	r23,r23,8
80207c9c:	103fdb1e 	bne	r2,zero,80207c0c <__reset+0xfa1e7c0c>
80207ca0:	0005883a 	mov	r2,zero
80207ca4:	003fe806 	br	80207c48 <__reset+0xfa1e7c48>
80207ca8:	0204f240 	call	80204f24 <__sfvwrite_r>
80207cac:	003fe606 	br	80207c48 <__reset+0xfa1e7c48>

80207cb0 <__sprint_r>:
80207cb0:	30c00217 	ldw	r3,8(r6)
80207cb4:	18000126 	beq	r3,zero,80207cbc <__sprint_r+0xc>
80207cb8:	0207bb41 	jmpi	80207bb4 <__sprint_r.part.0>
80207cbc:	30000115 	stw	zero,4(r6)
80207cc0:	0005883a 	mov	r2,zero
80207cc4:	f800283a 	ret

80207cc8 <___vfiprintf_internal_r>:
80207cc8:	deffc904 	addi	sp,sp,-220
80207ccc:	df003515 	stw	fp,212(sp)
80207cd0:	dd003115 	stw	r20,196(sp)
80207cd4:	dfc03615 	stw	ra,216(sp)
80207cd8:	ddc03415 	stw	r23,208(sp)
80207cdc:	dd803315 	stw	r22,204(sp)
80207ce0:	dd403215 	stw	r21,200(sp)
80207ce4:	dcc03015 	stw	r19,192(sp)
80207ce8:	dc802f15 	stw	r18,188(sp)
80207cec:	dc402e15 	stw	r17,184(sp)
80207cf0:	dc002d15 	stw	r16,180(sp)
80207cf4:	d9002015 	stw	r4,128(sp)
80207cf8:	d9c02215 	stw	r7,136(sp)
80207cfc:	2829883a 	mov	r20,r5
80207d00:	3039883a 	mov	fp,r6
80207d04:	20000226 	beq	r4,zero,80207d10 <___vfiprintf_internal_r+0x48>
80207d08:	20800e17 	ldw	r2,56(r4)
80207d0c:	1000cf26 	beq	r2,zero,8020804c <___vfiprintf_internal_r+0x384>
80207d10:	a080030b 	ldhu	r2,12(r20)
80207d14:	10c8000c 	andi	r3,r2,8192
80207d18:	1800061e 	bne	r3,zero,80207d34 <___vfiprintf_internal_r+0x6c>
80207d1c:	a1001917 	ldw	r4,100(r20)
80207d20:	00f7ffc4 	movi	r3,-8193
80207d24:	10880014 	ori	r2,r2,8192
80207d28:	20c6703a 	and	r3,r4,r3
80207d2c:	a080030d 	sth	r2,12(r20)
80207d30:	a0c01915 	stw	r3,100(r20)
80207d34:	10c0020c 	andi	r3,r2,8
80207d38:	1800a926 	beq	r3,zero,80207fe0 <___vfiprintf_internal_r+0x318>
80207d3c:	a0c00417 	ldw	r3,16(r20)
80207d40:	1800a726 	beq	r3,zero,80207fe0 <___vfiprintf_internal_r+0x318>
80207d44:	1080068c 	andi	r2,r2,26
80207d48:	00c00284 	movi	r3,10
80207d4c:	10c0ac26 	beq	r2,r3,80208000 <___vfiprintf_internal_r+0x338>
80207d50:	da801a04 	addi	r10,sp,104
80207d54:	da801e15 	stw	r10,120(sp)
80207d58:	d8801e17 	ldw	r2,120(sp)
80207d5c:	da8019c4 	addi	r10,sp,103
80207d60:	05a00874 	movhi	r22,32801
80207d64:	05e00874 	movhi	r23,32801
80207d68:	da801f15 	stw	r10,124(sp)
80207d6c:	1295c83a 	sub	r10,r2,r10
80207d70:	b586c104 	addi	r22,r22,6916
80207d74:	bdc6bd04 	addi	r23,r23,6900
80207d78:	dec01a15 	stw	sp,104(sp)
80207d7c:	d8001c15 	stw	zero,112(sp)
80207d80:	d8001b15 	stw	zero,108(sp)
80207d84:	d8002615 	stw	zero,152(sp)
80207d88:	d8002315 	stw	zero,140(sp)
80207d8c:	da802715 	stw	r10,156(sp)
80207d90:	d811883a 	mov	r8,sp
80207d94:	dd002115 	stw	r20,132(sp)
80207d98:	e021883a 	mov	r16,fp
80207d9c:	80800007 	ldb	r2,0(r16)
80207da0:	1003ea26 	beq	r2,zero,80208d4c <___vfiprintf_internal_r+0x1084>
80207da4:	00c00944 	movi	r3,37
80207da8:	8025883a 	mov	r18,r16
80207dac:	10c0021e 	bne	r2,r3,80207db8 <___vfiprintf_internal_r+0xf0>
80207db0:	00001606 	br	80207e0c <___vfiprintf_internal_r+0x144>
80207db4:	10c00326 	beq	r2,r3,80207dc4 <___vfiprintf_internal_r+0xfc>
80207db8:	94800044 	addi	r18,r18,1
80207dbc:	90800007 	ldb	r2,0(r18)
80207dc0:	103ffc1e 	bne	r2,zero,80207db4 <__reset+0xfa1e7db4>
80207dc4:	9423c83a 	sub	r17,r18,r16
80207dc8:	88001026 	beq	r17,zero,80207e0c <___vfiprintf_internal_r+0x144>
80207dcc:	d8c01c17 	ldw	r3,112(sp)
80207dd0:	d8801b17 	ldw	r2,108(sp)
80207dd4:	44000015 	stw	r16,0(r8)
80207dd8:	88c7883a 	add	r3,r17,r3
80207ddc:	10800044 	addi	r2,r2,1
80207de0:	44400115 	stw	r17,4(r8)
80207de4:	d8c01c15 	stw	r3,112(sp)
80207de8:	d8801b15 	stw	r2,108(sp)
80207dec:	010001c4 	movi	r4,7
80207df0:	2080760e 	bge	r4,r2,80207fcc <___vfiprintf_internal_r+0x304>
80207df4:	1803821e 	bne	r3,zero,80208c00 <___vfiprintf_internal_r+0xf38>
80207df8:	da802317 	ldw	r10,140(sp)
80207dfc:	d8001b15 	stw	zero,108(sp)
80207e00:	d811883a 	mov	r8,sp
80207e04:	5455883a 	add	r10,r10,r17
80207e08:	da802315 	stw	r10,140(sp)
80207e0c:	90800007 	ldb	r2,0(r18)
80207e10:	10044626 	beq	r2,zero,80208f2c <___vfiprintf_internal_r+0x1264>
80207e14:	90c00047 	ldb	r3,1(r18)
80207e18:	94000044 	addi	r16,r18,1
80207e1c:	d8001d85 	stb	zero,118(sp)
80207e20:	0009883a 	mov	r4,zero
80207e24:	000f883a 	mov	r7,zero
80207e28:	027fffc4 	movi	r9,-1
80207e2c:	0023883a 	mov	r17,zero
80207e30:	0029883a 	mov	r20,zero
80207e34:	01401604 	movi	r5,88
80207e38:	01800244 	movi	r6,9
80207e3c:	03400a84 	movi	r13,42
80207e40:	03001b04 	movi	r12,108
80207e44:	84000044 	addi	r16,r16,1
80207e48:	18bff804 	addi	r2,r3,-32
80207e4c:	28827336 	bltu	r5,r2,8020881c <___vfiprintf_internal_r+0xb54>
80207e50:	100490ba 	slli	r2,r2,2
80207e54:	02a00834 	movhi	r10,32800
80207e58:	529f9a04 	addi	r10,r10,32360
80207e5c:	1285883a 	add	r2,r2,r10
80207e60:	10800017 	ldw	r2,0(r2)
80207e64:	1000683a 	jmp	r2
80207e68:	80208550 	cmplti	zero,r16,-32235
80207e6c:	8020881c 	xori	zero,r16,33312
80207e70:	8020881c 	xori	zero,r16,33312
80207e74:	80208570 	cmpltui	zero,r16,33301
80207e78:	8020881c 	xori	zero,r16,33312
80207e7c:	8020881c 	xori	zero,r16,33312
80207e80:	8020881c 	xori	zero,r16,33312
80207e84:	8020881c 	xori	zero,r16,33312
80207e88:	8020881c 	xori	zero,r16,33312
80207e8c:	8020881c 	xori	zero,r16,33312
80207e90:	80208758 	cmpnei	zero,r16,-32227
80207e94:	80208774 	orhi	zero,r16,33309
80207e98:	8020881c 	xori	zero,r16,33312
80207e9c:	8020805c 	xori	zero,r16,33281
80207ea0:	80208784 	addi	zero,r16,-32226
80207ea4:	8020881c 	xori	zero,r16,33312
80207ea8:	8020857c 	xorhi	zero,r16,33301
80207eac:	80208588 	cmpgei	zero,r16,-32234
80207eb0:	80208588 	cmpgei	zero,r16,-32234
80207eb4:	80208588 	cmpgei	zero,r16,-32234
80207eb8:	80208588 	cmpgei	zero,r16,-32234
80207ebc:	80208588 	cmpgei	zero,r16,-32234
80207ec0:	80208588 	cmpgei	zero,r16,-32234
80207ec4:	80208588 	cmpgei	zero,r16,-32234
80207ec8:	80208588 	cmpgei	zero,r16,-32234
80207ecc:	80208588 	cmpgei	zero,r16,-32234
80207ed0:	8020881c 	xori	zero,r16,33312
80207ed4:	8020881c 	xori	zero,r16,33312
80207ed8:	8020881c 	xori	zero,r16,33312
80207edc:	8020881c 	xori	zero,r16,33312
80207ee0:	8020881c 	xori	zero,r16,33312
80207ee4:	8020881c 	xori	zero,r16,33312
80207ee8:	8020881c 	xori	zero,r16,33312
80207eec:	8020881c 	xori	zero,r16,33312
80207ef0:	8020881c 	xori	zero,r16,33312
80207ef4:	8020881c 	xori	zero,r16,33312
80207ef8:	802085b4 	orhi	zero,r16,33302
80207efc:	8020881c 	xori	zero,r16,33312
80207f00:	8020881c 	xori	zero,r16,33312
80207f04:	8020881c 	xori	zero,r16,33312
80207f08:	8020881c 	xori	zero,r16,33312
80207f0c:	8020881c 	xori	zero,r16,33312
80207f10:	8020881c 	xori	zero,r16,33312
80207f14:	8020881c 	xori	zero,r16,33312
80207f18:	8020881c 	xori	zero,r16,33312
80207f1c:	8020881c 	xori	zero,r16,33312
80207f20:	8020881c 	xori	zero,r16,33312
80207f24:	802085ec 	andhi	zero,r16,33303
80207f28:	8020881c 	xori	zero,r16,33312
80207f2c:	8020881c 	xori	zero,r16,33312
80207f30:	8020881c 	xori	zero,r16,33312
80207f34:	8020881c 	xori	zero,r16,33312
80207f38:	8020881c 	xori	zero,r16,33312
80207f3c:	80208644 	addi	zero,r16,-32231
80207f40:	8020881c 	xori	zero,r16,33312
80207f44:	8020881c 	xori	zero,r16,33312
80207f48:	802086b4 	orhi	zero,r16,33306
80207f4c:	8020881c 	xori	zero,r16,33312
80207f50:	8020881c 	xori	zero,r16,33312
80207f54:	8020881c 	xori	zero,r16,33312
80207f58:	8020881c 	xori	zero,r16,33312
80207f5c:	8020881c 	xori	zero,r16,33312
80207f60:	8020881c 	xori	zero,r16,33312
80207f64:	8020881c 	xori	zero,r16,33312
80207f68:	8020881c 	xori	zero,r16,33312
80207f6c:	8020881c 	xori	zero,r16,33312
80207f70:	8020881c 	xori	zero,r16,33312
80207f74:	80208460 	cmpeqi	zero,r16,-32239
80207f78:	8020848c 	andi	zero,r16,33298
80207f7c:	8020881c 	xori	zero,r16,33312
80207f80:	8020881c 	xori	zero,r16,33312
80207f84:	8020881c 	xori	zero,r16,33312
80207f88:	802087c4 	addi	zero,r16,-32225
80207f8c:	8020848c 	andi	zero,r16,33298
80207f90:	8020881c 	xori	zero,r16,33312
80207f94:	8020881c 	xori	zero,r16,33312
80207f98:	80208320 	cmpeqi	zero,r16,-32244
80207f9c:	8020881c 	xori	zero,r16,33312
80207fa0:	80208330 	cmpltui	zero,r16,33292
80207fa4:	8020836c 	andhi	zero,r16,33293
80207fa8:	80208068 	cmpgeui	zero,r16,33281
80207fac:	80208314 	ori	zero,r16,33292
80207fb0:	8020881c 	xori	zero,r16,33312
80207fb4:	802086f0 	cmpltui	zero,r16,33307
80207fb8:	8020881c 	xori	zero,r16,33312
80207fbc:	80208748 	cmpgei	zero,r16,-32227
80207fc0:	8020881c 	xori	zero,r16,33312
80207fc4:	8020881c 	xori	zero,r16,33312
80207fc8:	8020840c 	andi	zero,r16,33296
80207fcc:	42000204 	addi	r8,r8,8
80207fd0:	da802317 	ldw	r10,140(sp)
80207fd4:	5455883a 	add	r10,r10,r17
80207fd8:	da802315 	stw	r10,140(sp)
80207fdc:	003f8b06 	br	80207e0c <__reset+0xfa1e7e0c>
80207fe0:	d9002017 	ldw	r4,128(sp)
80207fe4:	a00b883a 	mov	r5,r20
80207fe8:	0202acc0 	call	80202acc <__swsetup_r>
80207fec:	1003b11e 	bne	r2,zero,80208eb4 <___vfiprintf_internal_r+0x11ec>
80207ff0:	a080030b 	ldhu	r2,12(r20)
80207ff4:	00c00284 	movi	r3,10
80207ff8:	1080068c 	andi	r2,r2,26
80207ffc:	10ff541e 	bne	r2,r3,80207d50 <__reset+0xfa1e7d50>
80208000:	a080038f 	ldh	r2,14(r20)
80208004:	103f5216 	blt	r2,zero,80207d50 <__reset+0xfa1e7d50>
80208008:	d9c02217 	ldw	r7,136(sp)
8020800c:	d9002017 	ldw	r4,128(sp)
80208010:	e00d883a 	mov	r6,fp
80208014:	a00b883a 	mov	r5,r20
80208018:	02091400 	call	80209140 <__sbprintf>
8020801c:	dfc03617 	ldw	ra,216(sp)
80208020:	df003517 	ldw	fp,212(sp)
80208024:	ddc03417 	ldw	r23,208(sp)
80208028:	dd803317 	ldw	r22,204(sp)
8020802c:	dd403217 	ldw	r21,200(sp)
80208030:	dd003117 	ldw	r20,196(sp)
80208034:	dcc03017 	ldw	r19,192(sp)
80208038:	dc802f17 	ldw	r18,188(sp)
8020803c:	dc402e17 	ldw	r17,184(sp)
80208040:	dc002d17 	ldw	r16,180(sp)
80208044:	dec03704 	addi	sp,sp,220
80208048:	f800283a 	ret
8020804c:	0204aa00 	call	80204aa0 <__sinit>
80208050:	003f2f06 	br	80207d10 <__reset+0xfa1e7d10>
80208054:	0463c83a 	sub	r17,zero,r17
80208058:	d8802215 	stw	r2,136(sp)
8020805c:	a5000114 	ori	r20,r20,4
80208060:	80c00007 	ldb	r3,0(r16)
80208064:	003f7706 	br	80207e44 <__reset+0xfa1e7e44>
80208068:	00800c04 	movi	r2,48
8020806c:	da802217 	ldw	r10,136(sp)
80208070:	d8801d05 	stb	r2,116(sp)
80208074:	00801e04 	movi	r2,120
80208078:	d8801d45 	stb	r2,117(sp)
8020807c:	d8001d85 	stb	zero,118(sp)
80208080:	50c00104 	addi	r3,r10,4
80208084:	54800017 	ldw	r18,0(r10)
80208088:	0027883a 	mov	r19,zero
8020808c:	a0800094 	ori	r2,r20,2
80208090:	48030b16 	blt	r9,zero,80208cc0 <___vfiprintf_internal_r+0xff8>
80208094:	00bfdfc4 	movi	r2,-129
80208098:	a096703a 	and	r11,r20,r2
8020809c:	d8c02215 	stw	r3,136(sp)
802080a0:	5d000094 	ori	r20,r11,2
802080a4:	90032b1e 	bne	r18,zero,80208d54 <___vfiprintf_internal_r+0x108c>
802080a8:	00a00874 	movhi	r2,32801
802080ac:	10865c04 	addi	r2,r2,6512
802080b0:	d8802615 	stw	r2,152(sp)
802080b4:	0039883a 	mov	fp,zero
802080b8:	48017b1e 	bne	r9,zero,802086a8 <___vfiprintf_internal_r+0x9e0>
802080bc:	0013883a 	mov	r9,zero
802080c0:	0027883a 	mov	r19,zero
802080c4:	dd401a04 	addi	r21,sp,104
802080c8:	4825883a 	mov	r18,r9
802080cc:	4cc0010e 	bge	r9,r19,802080d4 <___vfiprintf_internal_r+0x40c>
802080d0:	9825883a 	mov	r18,r19
802080d4:	e7003fcc 	andi	fp,fp,255
802080d8:	e700201c 	xori	fp,fp,128
802080dc:	e73fe004 	addi	fp,fp,-128
802080e0:	e0000126 	beq	fp,zero,802080e8 <___vfiprintf_internal_r+0x420>
802080e4:	94800044 	addi	r18,r18,1
802080e8:	a380008c 	andi	r14,r20,2
802080ec:	70000126 	beq	r14,zero,802080f4 <___vfiprintf_internal_r+0x42c>
802080f0:	94800084 	addi	r18,r18,2
802080f4:	a700210c 	andi	fp,r20,132
802080f8:	e001df1e 	bne	fp,zero,80208878 <___vfiprintf_internal_r+0xbb0>
802080fc:	8c87c83a 	sub	r3,r17,r18
80208100:	00c1dd0e 	bge	zero,r3,80208878 <___vfiprintf_internal_r+0xbb0>
80208104:	01c00404 	movi	r7,16
80208108:	d8801c17 	ldw	r2,112(sp)
8020810c:	38c3ad0e 	bge	r7,r3,80208fc4 <___vfiprintf_internal_r+0x12fc>
80208110:	02a00874 	movhi	r10,32801
80208114:	5286c104 	addi	r10,r10,6916
80208118:	dc002915 	stw	r16,164(sp)
8020811c:	d9801b17 	ldw	r6,108(sp)
80208120:	da802415 	stw	r10,144(sp)
80208124:	03c001c4 	movi	r15,7
80208128:	da402515 	stw	r9,148(sp)
8020812c:	db802815 	stw	r14,160(sp)
80208130:	1821883a 	mov	r16,r3
80208134:	00000506 	br	8020814c <___vfiprintf_internal_r+0x484>
80208138:	31400084 	addi	r5,r6,2
8020813c:	42000204 	addi	r8,r8,8
80208140:	200d883a 	mov	r6,r4
80208144:	843ffc04 	addi	r16,r16,-16
80208148:	3c000d0e 	bge	r7,r16,80208180 <___vfiprintf_internal_r+0x4b8>
8020814c:	10800404 	addi	r2,r2,16
80208150:	31000044 	addi	r4,r6,1
80208154:	45800015 	stw	r22,0(r8)
80208158:	41c00115 	stw	r7,4(r8)
8020815c:	d8801c15 	stw	r2,112(sp)
80208160:	d9001b15 	stw	r4,108(sp)
80208164:	793ff40e 	bge	r15,r4,80208138 <__reset+0xfa1e8138>
80208168:	1001b51e 	bne	r2,zero,80208840 <___vfiprintf_internal_r+0xb78>
8020816c:	843ffc04 	addi	r16,r16,-16
80208170:	000d883a 	mov	r6,zero
80208174:	01400044 	movi	r5,1
80208178:	d811883a 	mov	r8,sp
8020817c:	3c3ff316 	blt	r7,r16,8020814c <__reset+0xfa1e814c>
80208180:	8007883a 	mov	r3,r16
80208184:	da402517 	ldw	r9,148(sp)
80208188:	db802817 	ldw	r14,160(sp)
8020818c:	dc002917 	ldw	r16,164(sp)
80208190:	da802417 	ldw	r10,144(sp)
80208194:	1885883a 	add	r2,r3,r2
80208198:	40c00115 	stw	r3,4(r8)
8020819c:	42800015 	stw	r10,0(r8)
802081a0:	d8801c15 	stw	r2,112(sp)
802081a4:	d9401b15 	stw	r5,108(sp)
802081a8:	00c001c4 	movi	r3,7
802081ac:	19426016 	blt	r3,r5,80208b30 <___vfiprintf_internal_r+0xe68>
802081b0:	d8c01d87 	ldb	r3,118(sp)
802081b4:	42000204 	addi	r8,r8,8
802081b8:	29000044 	addi	r4,r5,1
802081bc:	1801b31e 	bne	r3,zero,8020888c <___vfiprintf_internal_r+0xbc4>
802081c0:	7001c026 	beq	r14,zero,802088c4 <___vfiprintf_internal_r+0xbfc>
802081c4:	d8c01d04 	addi	r3,sp,116
802081c8:	10800084 	addi	r2,r2,2
802081cc:	40c00015 	stw	r3,0(r8)
802081d0:	00c00084 	movi	r3,2
802081d4:	40c00115 	stw	r3,4(r8)
802081d8:	d8801c15 	stw	r2,112(sp)
802081dc:	d9001b15 	stw	r4,108(sp)
802081e0:	00c001c4 	movi	r3,7
802081e4:	1902650e 	bge	r3,r4,80208b7c <___vfiprintf_internal_r+0xeb4>
802081e8:	10029a1e 	bne	r2,zero,80208c54 <___vfiprintf_internal_r+0xf8c>
802081ec:	00c02004 	movi	r3,128
802081f0:	01000044 	movi	r4,1
802081f4:	000b883a 	mov	r5,zero
802081f8:	d811883a 	mov	r8,sp
802081fc:	e0c1b31e 	bne	fp,r3,802088cc <___vfiprintf_internal_r+0xc04>
80208200:	8cb9c83a 	sub	fp,r17,r18
80208204:	0701b10e 	bge	zero,fp,802088cc <___vfiprintf_internal_r+0xc04>
80208208:	01c00404 	movi	r7,16
8020820c:	3f03890e 	bge	r7,fp,80209034 <___vfiprintf_internal_r+0x136c>
80208210:	00e00874 	movhi	r3,32801
80208214:	18c6bd04 	addi	r3,r3,6900
80208218:	d8c02415 	stw	r3,144(sp)
8020821c:	8007883a 	mov	r3,r16
80208220:	034001c4 	movi	r13,7
80208224:	e021883a 	mov	r16,fp
80208228:	da402515 	stw	r9,148(sp)
8020822c:	1839883a 	mov	fp,r3
80208230:	00000506 	br	80208248 <___vfiprintf_internal_r+0x580>
80208234:	29800084 	addi	r6,r5,2
80208238:	42000204 	addi	r8,r8,8
8020823c:	180b883a 	mov	r5,r3
80208240:	843ffc04 	addi	r16,r16,-16
80208244:	3c000d0e 	bge	r7,r16,8020827c <___vfiprintf_internal_r+0x5b4>
80208248:	10800404 	addi	r2,r2,16
8020824c:	28c00044 	addi	r3,r5,1
80208250:	45c00015 	stw	r23,0(r8)
80208254:	41c00115 	stw	r7,4(r8)
80208258:	d8801c15 	stw	r2,112(sp)
8020825c:	d8c01b15 	stw	r3,108(sp)
80208260:	68fff40e 	bge	r13,r3,80208234 <__reset+0xfa1e8234>
80208264:	1002241e 	bne	r2,zero,80208af8 <___vfiprintf_internal_r+0xe30>
80208268:	843ffc04 	addi	r16,r16,-16
8020826c:	01800044 	movi	r6,1
80208270:	000b883a 	mov	r5,zero
80208274:	d811883a 	mov	r8,sp
80208278:	3c3ff316 	blt	r7,r16,80208248 <__reset+0xfa1e8248>
8020827c:	da402517 	ldw	r9,148(sp)
80208280:	e007883a 	mov	r3,fp
80208284:	8039883a 	mov	fp,r16
80208288:	1821883a 	mov	r16,r3
8020828c:	d8c02417 	ldw	r3,144(sp)
80208290:	1705883a 	add	r2,r2,fp
80208294:	47000115 	stw	fp,4(r8)
80208298:	40c00015 	stw	r3,0(r8)
8020829c:	d8801c15 	stw	r2,112(sp)
802082a0:	d9801b15 	stw	r6,108(sp)
802082a4:	00c001c4 	movi	r3,7
802082a8:	19827616 	blt	r3,r6,80208c84 <___vfiprintf_internal_r+0xfbc>
802082ac:	4cf9c83a 	sub	fp,r9,r19
802082b0:	42000204 	addi	r8,r8,8
802082b4:	31000044 	addi	r4,r6,1
802082b8:	300b883a 	mov	r5,r6
802082bc:	07018516 	blt	zero,fp,802088d4 <___vfiprintf_internal_r+0xc0c>
802082c0:	9885883a 	add	r2,r19,r2
802082c4:	45400015 	stw	r21,0(r8)
802082c8:	44c00115 	stw	r19,4(r8)
802082cc:	d8801c15 	stw	r2,112(sp)
802082d0:	d9001b15 	stw	r4,108(sp)
802082d4:	00c001c4 	movi	r3,7
802082d8:	1901dd0e 	bge	r3,r4,80208a50 <___vfiprintf_internal_r+0xd88>
802082dc:	1002401e 	bne	r2,zero,80208be0 <___vfiprintf_internal_r+0xf18>
802082e0:	d8001b15 	stw	zero,108(sp)
802082e4:	a2c0010c 	andi	r11,r20,4
802082e8:	58000226 	beq	r11,zero,802082f4 <___vfiprintf_internal_r+0x62c>
802082ec:	8ca7c83a 	sub	r19,r17,r18
802082f0:	04c2f216 	blt	zero,r19,80208ebc <___vfiprintf_internal_r+0x11f4>
802082f4:	8c80010e 	bge	r17,r18,802082fc <___vfiprintf_internal_r+0x634>
802082f8:	9023883a 	mov	r17,r18
802082fc:	da802317 	ldw	r10,140(sp)
80208300:	5455883a 	add	r10,r10,r17
80208304:	da802315 	stw	r10,140(sp)
80208308:	d8001b15 	stw	zero,108(sp)
8020830c:	d811883a 	mov	r8,sp
80208310:	003ea206 	br	80207d9c <__reset+0xfa1e7d9c>
80208314:	a5000814 	ori	r20,r20,32
80208318:	80c00007 	ldb	r3,0(r16)
8020831c:	003ec906 	br	80207e44 <__reset+0xfa1e7e44>
80208320:	80c00007 	ldb	r3,0(r16)
80208324:	1b030926 	beq	r3,r12,80208f4c <___vfiprintf_internal_r+0x1284>
80208328:	a5000414 	ori	r20,r20,16
8020832c:	003ec506 	br	80207e44 <__reset+0xfa1e7e44>
80208330:	21003fcc 	andi	r4,r4,255
80208334:	20035e1e 	bne	r4,zero,802090b0 <___vfiprintf_internal_r+0x13e8>
80208338:	a080080c 	andi	r2,r20,32
8020833c:	1002a526 	beq	r2,zero,80208dd4 <___vfiprintf_internal_r+0x110c>
80208340:	da802217 	ldw	r10,136(sp)
80208344:	50800017 	ldw	r2,0(r10)
80208348:	da802317 	ldw	r10,140(sp)
8020834c:	5007d7fa 	srai	r3,r10,31
80208350:	da802217 	ldw	r10,136(sp)
80208354:	10c00115 	stw	r3,4(r2)
80208358:	52800104 	addi	r10,r10,4
8020835c:	da802215 	stw	r10,136(sp)
80208360:	da802317 	ldw	r10,140(sp)
80208364:	12800015 	stw	r10,0(r2)
80208368:	003e8c06 	br	80207d9c <__reset+0xfa1e7d9c>
8020836c:	21003fcc 	andi	r4,r4,255
80208370:	2003511e 	bne	r4,zero,802090b8 <___vfiprintf_internal_r+0x13f0>
80208374:	a080080c 	andi	r2,r20,32
80208378:	1000a126 	beq	r2,zero,80208600 <___vfiprintf_internal_r+0x938>
8020837c:	da802217 	ldw	r10,136(sp)
80208380:	d8001d85 	stb	zero,118(sp)
80208384:	50800204 	addi	r2,r10,8
80208388:	54800017 	ldw	r18,0(r10)
8020838c:	54c00117 	ldw	r19,4(r10)
80208390:	4802b416 	blt	r9,zero,80208e64 <___vfiprintf_internal_r+0x119c>
80208394:	013fdfc4 	movi	r4,-129
80208398:	94c6b03a 	or	r3,r18,r19
8020839c:	d8802215 	stw	r2,136(sp)
802083a0:	a128703a 	and	r20,r20,r4
802083a4:	1800a226 	beq	r3,zero,80208630 <___vfiprintf_internal_r+0x968>
802083a8:	0039883a 	mov	fp,zero
802083ac:	dd401a04 	addi	r21,sp,104
802083b0:	9006d0fa 	srli	r3,r18,3
802083b4:	9808977a 	slli	r4,r19,29
802083b8:	9826d0fa 	srli	r19,r19,3
802083bc:	948001cc 	andi	r18,r18,7
802083c0:	90800c04 	addi	r2,r18,48
802083c4:	ad7fffc4 	addi	r21,r21,-1
802083c8:	20e4b03a 	or	r18,r4,r3
802083cc:	a8800005 	stb	r2,0(r21)
802083d0:	94c6b03a 	or	r3,r18,r19
802083d4:	183ff61e 	bne	r3,zero,802083b0 <__reset+0xfa1e83b0>
802083d8:	a0c0004c 	andi	r3,r20,1
802083dc:	18005926 	beq	r3,zero,80208544 <___vfiprintf_internal_r+0x87c>
802083e0:	10803fcc 	andi	r2,r2,255
802083e4:	1080201c 	xori	r2,r2,128
802083e8:	10bfe004 	addi	r2,r2,-128
802083ec:	00c00c04 	movi	r3,48
802083f0:	10c05426 	beq	r2,r3,80208544 <___vfiprintf_internal_r+0x87c>
802083f4:	da801e17 	ldw	r10,120(sp)
802083f8:	a8bfffc4 	addi	r2,r21,-1
802083fc:	a8ffffc5 	stb	r3,-1(r21)
80208400:	50a7c83a 	sub	r19,r10,r2
80208404:	102b883a 	mov	r21,r2
80208408:	003f2f06 	br	802080c8 <__reset+0xfa1e80c8>
8020840c:	21003fcc 	andi	r4,r4,255
80208410:	2003421e 	bne	r4,zero,8020911c <___vfiprintf_internal_r+0x1454>
80208414:	00a00874 	movhi	r2,32801
80208418:	10865c04 	addi	r2,r2,6512
8020841c:	d8802615 	stw	r2,152(sp)
80208420:	a080080c 	andi	r2,r20,32
80208424:	1000aa26 	beq	r2,zero,802086d0 <___vfiprintf_internal_r+0xa08>
80208428:	da802217 	ldw	r10,136(sp)
8020842c:	54800017 	ldw	r18,0(r10)
80208430:	54c00117 	ldw	r19,4(r10)
80208434:	52800204 	addi	r10,r10,8
80208438:	da802215 	stw	r10,136(sp)
8020843c:	a080004c 	andi	r2,r20,1
80208440:	1001d226 	beq	r2,zero,80208b8c <___vfiprintf_internal_r+0xec4>
80208444:	94c4b03a 	or	r2,r18,r19
80208448:	1002351e 	bne	r2,zero,80208d20 <___vfiprintf_internal_r+0x1058>
8020844c:	d8001d85 	stb	zero,118(sp)
80208450:	48022216 	blt	r9,zero,80208cdc <___vfiprintf_internal_r+0x1014>
80208454:	00bfdfc4 	movi	r2,-129
80208458:	a0a8703a 	and	r20,r20,r2
8020845c:	003f1506 	br	802080b4 <__reset+0xfa1e80b4>
80208460:	da802217 	ldw	r10,136(sp)
80208464:	04800044 	movi	r18,1
80208468:	d8001d85 	stb	zero,118(sp)
8020846c:	50800017 	ldw	r2,0(r10)
80208470:	52800104 	addi	r10,r10,4
80208474:	da802215 	stw	r10,136(sp)
80208478:	d8801005 	stb	r2,64(sp)
8020847c:	9027883a 	mov	r19,r18
80208480:	dd401004 	addi	r21,sp,64
80208484:	0013883a 	mov	r9,zero
80208488:	003f1706 	br	802080e8 <__reset+0xfa1e80e8>
8020848c:	21003fcc 	andi	r4,r4,255
80208490:	2003201e 	bne	r4,zero,80209114 <___vfiprintf_internal_r+0x144c>
80208494:	a080080c 	andi	r2,r20,32
80208498:	10004b26 	beq	r2,zero,802085c8 <___vfiprintf_internal_r+0x900>
8020849c:	da802217 	ldw	r10,136(sp)
802084a0:	50800117 	ldw	r2,4(r10)
802084a4:	54800017 	ldw	r18,0(r10)
802084a8:	52800204 	addi	r10,r10,8
802084ac:	da802215 	stw	r10,136(sp)
802084b0:	1027883a 	mov	r19,r2
802084b4:	10022c16 	blt	r2,zero,80208d68 <___vfiprintf_internal_r+0x10a0>
802084b8:	df001d83 	ldbu	fp,118(sp)
802084bc:	48007216 	blt	r9,zero,80208688 <___vfiprintf_internal_r+0x9c0>
802084c0:	00ffdfc4 	movi	r3,-129
802084c4:	94c4b03a 	or	r2,r18,r19
802084c8:	a0e8703a 	and	r20,r20,r3
802084cc:	1000cc26 	beq	r2,zero,80208800 <___vfiprintf_internal_r+0xb38>
802084d0:	98021026 	beq	r19,zero,80208d14 <___vfiprintf_internal_r+0x104c>
802084d4:	dc402415 	stw	r17,144(sp)
802084d8:	dc002515 	stw	r16,148(sp)
802084dc:	9823883a 	mov	r17,r19
802084e0:	9021883a 	mov	r16,r18
802084e4:	dd401a04 	addi	r21,sp,104
802084e8:	4825883a 	mov	r18,r9
802084ec:	4027883a 	mov	r19,r8
802084f0:	8009883a 	mov	r4,r16
802084f4:	880b883a 	mov	r5,r17
802084f8:	01800284 	movi	r6,10
802084fc:	000f883a 	mov	r7,zero
80208500:	020a0a80 	call	8020a0a8 <__umoddi3>
80208504:	10800c04 	addi	r2,r2,48
80208508:	ad7fffc4 	addi	r21,r21,-1
8020850c:	8009883a 	mov	r4,r16
80208510:	880b883a 	mov	r5,r17
80208514:	a8800005 	stb	r2,0(r21)
80208518:	01800284 	movi	r6,10
8020851c:	000f883a 	mov	r7,zero
80208520:	0209b300 	call	80209b30 <__udivdi3>
80208524:	1021883a 	mov	r16,r2
80208528:	10c4b03a 	or	r2,r2,r3
8020852c:	1823883a 	mov	r17,r3
80208530:	103fef1e 	bne	r2,zero,802084f0 <__reset+0xfa1e84f0>
80208534:	dc402417 	ldw	r17,144(sp)
80208538:	dc002517 	ldw	r16,148(sp)
8020853c:	9013883a 	mov	r9,r18
80208540:	9811883a 	mov	r8,r19
80208544:	da801e17 	ldw	r10,120(sp)
80208548:	5567c83a 	sub	r19,r10,r21
8020854c:	003ede06 	br	802080c8 <__reset+0xfa1e80c8>
80208550:	38803fcc 	andi	r2,r7,255
80208554:	1080201c 	xori	r2,r2,128
80208558:	10bfe004 	addi	r2,r2,-128
8020855c:	1002371e 	bne	r2,zero,80208e3c <___vfiprintf_internal_r+0x1174>
80208560:	01000044 	movi	r4,1
80208564:	01c00804 	movi	r7,32
80208568:	80c00007 	ldb	r3,0(r16)
8020856c:	003e3506 	br	80207e44 <__reset+0xfa1e7e44>
80208570:	a5000054 	ori	r20,r20,1
80208574:	80c00007 	ldb	r3,0(r16)
80208578:	003e3206 	br	80207e44 <__reset+0xfa1e7e44>
8020857c:	a5002014 	ori	r20,r20,128
80208580:	80c00007 	ldb	r3,0(r16)
80208584:	003e2f06 	br	80207e44 <__reset+0xfa1e7e44>
80208588:	8015883a 	mov	r10,r16
8020858c:	0023883a 	mov	r17,zero
80208590:	18bff404 	addi	r2,r3,-48
80208594:	50c00007 	ldb	r3,0(r10)
80208598:	8c4002a4 	muli	r17,r17,10
8020859c:	84000044 	addi	r16,r16,1
802085a0:	8015883a 	mov	r10,r16
802085a4:	1463883a 	add	r17,r2,r17
802085a8:	18bff404 	addi	r2,r3,-48
802085ac:	30bff92e 	bgeu	r6,r2,80208594 <__reset+0xfa1e8594>
802085b0:	003e2506 	br	80207e48 <__reset+0xfa1e7e48>
802085b4:	21003fcc 	andi	r4,r4,255
802085b8:	2002d41e 	bne	r4,zero,8020910c <___vfiprintf_internal_r+0x1444>
802085bc:	a5000414 	ori	r20,r20,16
802085c0:	a080080c 	andi	r2,r20,32
802085c4:	103fb51e 	bne	r2,zero,8020849c <__reset+0xfa1e849c>
802085c8:	a080040c 	andi	r2,r20,16
802085cc:	1001f826 	beq	r2,zero,80208db0 <___vfiprintf_internal_r+0x10e8>
802085d0:	da802217 	ldw	r10,136(sp)
802085d4:	54800017 	ldw	r18,0(r10)
802085d8:	52800104 	addi	r10,r10,4
802085dc:	da802215 	stw	r10,136(sp)
802085e0:	9027d7fa 	srai	r19,r18,31
802085e4:	9805883a 	mov	r2,r19
802085e8:	003fb206 	br	802084b4 <__reset+0xfa1e84b4>
802085ec:	21003fcc 	andi	r4,r4,255
802085f0:	2002c41e 	bne	r4,zero,80209104 <___vfiprintf_internal_r+0x143c>
802085f4:	a5000414 	ori	r20,r20,16
802085f8:	a080080c 	andi	r2,r20,32
802085fc:	103f5f1e 	bne	r2,zero,8020837c <__reset+0xfa1e837c>
80208600:	a080040c 	andi	r2,r20,16
80208604:	10020f26 	beq	r2,zero,80208e44 <___vfiprintf_internal_r+0x117c>
80208608:	da802217 	ldw	r10,136(sp)
8020860c:	d8001d85 	stb	zero,118(sp)
80208610:	0027883a 	mov	r19,zero
80208614:	50800104 	addi	r2,r10,4
80208618:	54800017 	ldw	r18,0(r10)
8020861c:	48021116 	blt	r9,zero,80208e64 <___vfiprintf_internal_r+0x119c>
80208620:	00ffdfc4 	movi	r3,-129
80208624:	d8802215 	stw	r2,136(sp)
80208628:	a0e8703a 	and	r20,r20,r3
8020862c:	903f5e1e 	bne	r18,zero,802083a8 <__reset+0xfa1e83a8>
80208630:	0039883a 	mov	fp,zero
80208634:	4802a626 	beq	r9,zero,802090d0 <___vfiprintf_internal_r+0x1408>
80208638:	0025883a 	mov	r18,zero
8020863c:	0027883a 	mov	r19,zero
80208640:	003f5a06 	br	802083ac <__reset+0xfa1e83ac>
80208644:	21003fcc 	andi	r4,r4,255
80208648:	20029f1e 	bne	r4,zero,802090c8 <___vfiprintf_internal_r+0x1400>
8020864c:	a5000414 	ori	r20,r20,16
80208650:	a080080c 	andi	r2,r20,32
80208654:	10005e1e 	bne	r2,zero,802087d0 <___vfiprintf_internal_r+0xb08>
80208658:	a080040c 	andi	r2,r20,16
8020865c:	1001a21e 	bne	r2,zero,80208ce8 <___vfiprintf_internal_r+0x1020>
80208660:	a080100c 	andi	r2,r20,64
80208664:	d8001d85 	stb	zero,118(sp)
80208668:	da802217 	ldw	r10,136(sp)
8020866c:	1002231e 	bne	r2,zero,80208efc <___vfiprintf_internal_r+0x1234>
80208670:	50800104 	addi	r2,r10,4
80208674:	54800017 	ldw	r18,0(r10)
80208678:	0027883a 	mov	r19,zero
8020867c:	4801a00e 	bge	r9,zero,80208d00 <___vfiprintf_internal_r+0x1038>
80208680:	d8802215 	stw	r2,136(sp)
80208684:	0039883a 	mov	fp,zero
80208688:	94c4b03a 	or	r2,r18,r19
8020868c:	103f901e 	bne	r2,zero,802084d0 <__reset+0xfa1e84d0>
80208690:	00800044 	movi	r2,1
80208694:	10803fcc 	andi	r2,r2,255
80208698:	00c00044 	movi	r3,1
8020869c:	10c05926 	beq	r2,r3,80208804 <___vfiprintf_internal_r+0xb3c>
802086a0:	00c00084 	movi	r3,2
802086a4:	10ffe41e 	bne	r2,r3,80208638 <__reset+0xfa1e8638>
802086a8:	0025883a 	mov	r18,zero
802086ac:	0027883a 	mov	r19,zero
802086b0:	00013d06 	br	80208ba8 <___vfiprintf_internal_r+0xee0>
802086b4:	21003fcc 	andi	r4,r4,255
802086b8:	2002811e 	bne	r4,zero,802090c0 <___vfiprintf_internal_r+0x13f8>
802086bc:	00a00874 	movhi	r2,32801
802086c0:	10865704 	addi	r2,r2,6492
802086c4:	d8802615 	stw	r2,152(sp)
802086c8:	a080080c 	andi	r2,r20,32
802086cc:	103f561e 	bne	r2,zero,80208428 <__reset+0xfa1e8428>
802086d0:	a080040c 	andi	r2,r20,16
802086d4:	1001d126 	beq	r2,zero,80208e1c <___vfiprintf_internal_r+0x1154>
802086d8:	da802217 	ldw	r10,136(sp)
802086dc:	0027883a 	mov	r19,zero
802086e0:	54800017 	ldw	r18,0(r10)
802086e4:	52800104 	addi	r10,r10,4
802086e8:	da802215 	stw	r10,136(sp)
802086ec:	003f5306 	br	8020843c <__reset+0xfa1e843c>
802086f0:	da802217 	ldw	r10,136(sp)
802086f4:	d8001d85 	stb	zero,118(sp)
802086f8:	55400017 	ldw	r21,0(r10)
802086fc:	50c00104 	addi	r3,r10,4
80208700:	a8024226 	beq	r21,zero,8020900c <___vfiprintf_internal_r+0x1344>
80208704:	48021816 	blt	r9,zero,80208f68 <___vfiprintf_internal_r+0x12a0>
80208708:	480d883a 	mov	r6,r9
8020870c:	000b883a 	mov	r5,zero
80208710:	a809883a 	mov	r4,r21
80208714:	d8c02a15 	stw	r3,168(sp)
80208718:	da002b15 	stw	r8,172(sp)
8020871c:	da402c15 	stw	r9,176(sp)
80208720:	020600c0 	call	8020600c <memchr>
80208724:	d8c02a17 	ldw	r3,168(sp)
80208728:	da002b17 	ldw	r8,172(sp)
8020872c:	da402c17 	ldw	r9,176(sp)
80208730:	10024826 	beq	r2,zero,80209054 <___vfiprintf_internal_r+0x138c>
80208734:	1567c83a 	sub	r19,r2,r21
80208738:	df001d83 	ldbu	fp,118(sp)
8020873c:	d8c02215 	stw	r3,136(sp)
80208740:	0013883a 	mov	r9,zero
80208744:	003e6006 	br	802080c8 <__reset+0xfa1e80c8>
80208748:	21003fcc 	andi	r4,r4,255
8020874c:	203fc026 	beq	r4,zero,80208650 <__reset+0xfa1e8650>
80208750:	d9c01d85 	stb	r7,118(sp)
80208754:	003fbe06 	br	80208650 <__reset+0xfa1e8650>
80208758:	da802217 	ldw	r10,136(sp)
8020875c:	54400017 	ldw	r17,0(r10)
80208760:	50800104 	addi	r2,r10,4
80208764:	883e3b16 	blt	r17,zero,80208054 <__reset+0xfa1e8054>
80208768:	d8802215 	stw	r2,136(sp)
8020876c:	80c00007 	ldb	r3,0(r16)
80208770:	003db406 	br	80207e44 <__reset+0xfa1e7e44>
80208774:	01000044 	movi	r4,1
80208778:	01c00ac4 	movi	r7,43
8020877c:	80c00007 	ldb	r3,0(r16)
80208780:	003db006 	br	80207e44 <__reset+0xfa1e7e44>
80208784:	80c00007 	ldb	r3,0(r16)
80208788:	82800044 	addi	r10,r16,1
8020878c:	1b423c26 	beq	r3,r13,80209080 <___vfiprintf_internal_r+0x13b8>
80208790:	18bff404 	addi	r2,r3,-48
80208794:	0013883a 	mov	r9,zero
80208798:	30822b36 	bltu	r6,r2,80209048 <___vfiprintf_internal_r+0x1380>
8020879c:	50c00007 	ldb	r3,0(r10)
802087a0:	4a4002a4 	muli	r9,r9,10
802087a4:	54000044 	addi	r16,r10,1
802087a8:	8015883a 	mov	r10,r16
802087ac:	4893883a 	add	r9,r9,r2
802087b0:	18bff404 	addi	r2,r3,-48
802087b4:	30bff92e 	bgeu	r6,r2,8020879c <__reset+0xfa1e879c>
802087b8:	483da30e 	bge	r9,zero,80207e48 <__reset+0xfa1e7e48>
802087bc:	027fffc4 	movi	r9,-1
802087c0:	003da106 	br	80207e48 <__reset+0xfa1e7e48>
802087c4:	a5001014 	ori	r20,r20,64
802087c8:	80c00007 	ldb	r3,0(r16)
802087cc:	003d9d06 	br	80207e44 <__reset+0xfa1e7e44>
802087d0:	da802217 	ldw	r10,136(sp)
802087d4:	d8001d85 	stb	zero,118(sp)
802087d8:	50c00204 	addi	r3,r10,8
802087dc:	54800017 	ldw	r18,0(r10)
802087e0:	54c00117 	ldw	r19,4(r10)
802087e4:	4801ca16 	blt	r9,zero,80208f10 <___vfiprintf_internal_r+0x1248>
802087e8:	013fdfc4 	movi	r4,-129
802087ec:	94c4b03a 	or	r2,r18,r19
802087f0:	d8c02215 	stw	r3,136(sp)
802087f4:	a128703a 	and	r20,r20,r4
802087f8:	0039883a 	mov	fp,zero
802087fc:	103f341e 	bne	r2,zero,802084d0 <__reset+0xfa1e84d0>
80208800:	483e2e26 	beq	r9,zero,802080bc <__reset+0xfa1e80bc>
80208804:	0025883a 	mov	r18,zero
80208808:	94800c04 	addi	r18,r18,48
8020880c:	dc8019c5 	stb	r18,103(sp)
80208810:	dcc02717 	ldw	r19,156(sp)
80208814:	dd4019c4 	addi	r21,sp,103
80208818:	003e2b06 	br	802080c8 <__reset+0xfa1e80c8>
8020881c:	21003fcc 	andi	r4,r4,255
80208820:	2002361e 	bne	r4,zero,802090fc <___vfiprintf_internal_r+0x1434>
80208824:	1801c126 	beq	r3,zero,80208f2c <___vfiprintf_internal_r+0x1264>
80208828:	04800044 	movi	r18,1
8020882c:	d8c01005 	stb	r3,64(sp)
80208830:	d8001d85 	stb	zero,118(sp)
80208834:	9027883a 	mov	r19,r18
80208838:	dd401004 	addi	r21,sp,64
8020883c:	003f1106 	br	80208484 <__reset+0xfa1e8484>
80208840:	d9402117 	ldw	r5,132(sp)
80208844:	d9002017 	ldw	r4,128(sp)
80208848:	d9801a04 	addi	r6,sp,104
8020884c:	d9c02b15 	stw	r7,172(sp)
80208850:	dbc02a15 	stw	r15,168(sp)
80208854:	0207bb40 	call	80207bb4 <__sprint_r.part.0>
80208858:	d9c02b17 	ldw	r7,172(sp)
8020885c:	dbc02a17 	ldw	r15,168(sp)
80208860:	10006d1e 	bne	r2,zero,80208a18 <___vfiprintf_internal_r+0xd50>
80208864:	d9801b17 	ldw	r6,108(sp)
80208868:	d8801c17 	ldw	r2,112(sp)
8020886c:	d811883a 	mov	r8,sp
80208870:	31400044 	addi	r5,r6,1
80208874:	003e3306 	br	80208144 <__reset+0xfa1e8144>
80208878:	d9401b17 	ldw	r5,108(sp)
8020887c:	d8801c17 	ldw	r2,112(sp)
80208880:	29000044 	addi	r4,r5,1
80208884:	d8c01d87 	ldb	r3,118(sp)
80208888:	183e4d26 	beq	r3,zero,802081c0 <__reset+0xfa1e81c0>
8020888c:	00c00044 	movi	r3,1
80208890:	d9401d84 	addi	r5,sp,118
80208894:	10c5883a 	add	r2,r2,r3
80208898:	41400015 	stw	r5,0(r8)
8020889c:	40c00115 	stw	r3,4(r8)
802088a0:	d8801c15 	stw	r2,112(sp)
802088a4:	d9001b15 	stw	r4,108(sp)
802088a8:	014001c4 	movi	r5,7
802088ac:	2900a90e 	bge	r5,r4,80208b54 <___vfiprintf_internal_r+0xe8c>
802088b0:	1000da1e 	bne	r2,zero,80208c1c <___vfiprintf_internal_r+0xf54>
802088b4:	7000ab1e 	bne	r14,zero,80208b64 <___vfiprintf_internal_r+0xe9c>
802088b8:	000b883a 	mov	r5,zero
802088bc:	1809883a 	mov	r4,r3
802088c0:	d811883a 	mov	r8,sp
802088c4:	00c02004 	movi	r3,128
802088c8:	e0fe4d26 	beq	fp,r3,80208200 <__reset+0xfa1e8200>
802088cc:	4cf9c83a 	sub	fp,r9,r19
802088d0:	073e7b0e 	bge	zero,fp,802082c0 <__reset+0xfa1e82c0>
802088d4:	01c00404 	movi	r7,16
802088d8:	3f01900e 	bge	r7,fp,80208f1c <___vfiprintf_internal_r+0x1254>
802088dc:	00e00874 	movhi	r3,32801
802088e0:	18c6bd04 	addi	r3,r3,6900
802088e4:	d8c02415 	stw	r3,144(sp)
802088e8:	034001c4 	movi	r13,7
802088ec:	00000506 	br	80208904 <___vfiprintf_internal_r+0xc3c>
802088f0:	29000084 	addi	r4,r5,2
802088f4:	42000204 	addi	r8,r8,8
802088f8:	180b883a 	mov	r5,r3
802088fc:	e73ffc04 	addi	fp,fp,-16
80208900:	3f000d0e 	bge	r7,fp,80208938 <___vfiprintf_internal_r+0xc70>
80208904:	10800404 	addi	r2,r2,16
80208908:	28c00044 	addi	r3,r5,1
8020890c:	45c00015 	stw	r23,0(r8)
80208910:	41c00115 	stw	r7,4(r8)
80208914:	d8801c15 	stw	r2,112(sp)
80208918:	d8c01b15 	stw	r3,108(sp)
8020891c:	68fff40e 	bge	r13,r3,802088f0 <__reset+0xfa1e88f0>
80208920:	1000101e 	bne	r2,zero,80208964 <___vfiprintf_internal_r+0xc9c>
80208924:	e73ffc04 	addi	fp,fp,-16
80208928:	01000044 	movi	r4,1
8020892c:	000b883a 	mov	r5,zero
80208930:	d811883a 	mov	r8,sp
80208934:	3f3ff316 	blt	r7,fp,80208904 <__reset+0xfa1e8904>
80208938:	da802417 	ldw	r10,144(sp)
8020893c:	1705883a 	add	r2,r2,fp
80208940:	47000115 	stw	fp,4(r8)
80208944:	42800015 	stw	r10,0(r8)
80208948:	d8801c15 	stw	r2,112(sp)
8020894c:	d9001b15 	stw	r4,108(sp)
80208950:	00c001c4 	movi	r3,7
80208954:	19003616 	blt	r3,r4,80208a30 <___vfiprintf_internal_r+0xd68>
80208958:	42000204 	addi	r8,r8,8
8020895c:	21000044 	addi	r4,r4,1
80208960:	003e5706 	br	802082c0 <__reset+0xfa1e82c0>
80208964:	d9402117 	ldw	r5,132(sp)
80208968:	d9002017 	ldw	r4,128(sp)
8020896c:	d9801a04 	addi	r6,sp,104
80208970:	d9c02b15 	stw	r7,172(sp)
80208974:	db402a15 	stw	r13,168(sp)
80208978:	0207bb40 	call	80207bb4 <__sprint_r.part.0>
8020897c:	d9c02b17 	ldw	r7,172(sp)
80208980:	db402a17 	ldw	r13,168(sp)
80208984:	1000241e 	bne	r2,zero,80208a18 <___vfiprintf_internal_r+0xd50>
80208988:	d9401b17 	ldw	r5,108(sp)
8020898c:	d8801c17 	ldw	r2,112(sp)
80208990:	d811883a 	mov	r8,sp
80208994:	29000044 	addi	r4,r5,1
80208998:	003fd806 	br	802088fc <__reset+0xfa1e88fc>
8020899c:	d9401b17 	ldw	r5,108(sp)
802089a0:	00e00874 	movhi	r3,32801
802089a4:	18c6c104 	addi	r3,r3,6916
802089a8:	d8c02415 	stw	r3,144(sp)
802089ac:	29400044 	addi	r5,r5,1
802089b0:	d8c02417 	ldw	r3,144(sp)
802089b4:	14c5883a 	add	r2,r2,r19
802089b8:	44c00115 	stw	r19,4(r8)
802089bc:	40c00015 	stw	r3,0(r8)
802089c0:	d8801c15 	stw	r2,112(sp)
802089c4:	d9401b15 	stw	r5,108(sp)
802089c8:	00c001c4 	movi	r3,7
802089cc:	1940070e 	bge	r3,r5,802089ec <___vfiprintf_internal_r+0xd24>
802089d0:	103e4826 	beq	r2,zero,802082f4 <__reset+0xfa1e82f4>
802089d4:	d9402117 	ldw	r5,132(sp)
802089d8:	d9002017 	ldw	r4,128(sp)
802089dc:	d9801a04 	addi	r6,sp,104
802089e0:	0207bb40 	call	80207bb4 <__sprint_r.part.0>
802089e4:	10000c1e 	bne	r2,zero,80208a18 <___vfiprintf_internal_r+0xd50>
802089e8:	d8801c17 	ldw	r2,112(sp)
802089ec:	8c80010e 	bge	r17,r18,802089f4 <___vfiprintf_internal_r+0xd2c>
802089f0:	9023883a 	mov	r17,r18
802089f4:	da802317 	ldw	r10,140(sp)
802089f8:	5455883a 	add	r10,r10,r17
802089fc:	da802315 	stw	r10,140(sp)
80208a00:	103e4126 	beq	r2,zero,80208308 <__reset+0xfa1e8308>
80208a04:	d9402117 	ldw	r5,132(sp)
80208a08:	d9002017 	ldw	r4,128(sp)
80208a0c:	d9801a04 	addi	r6,sp,104
80208a10:	0207bb40 	call	80207bb4 <__sprint_r.part.0>
80208a14:	103e3c26 	beq	r2,zero,80208308 <__reset+0xfa1e8308>
80208a18:	dd002117 	ldw	r20,132(sp)
80208a1c:	a080030b 	ldhu	r2,12(r20)
80208a20:	1080100c 	andi	r2,r2,64
80208a24:	1001231e 	bne	r2,zero,80208eb4 <___vfiprintf_internal_r+0x11ec>
80208a28:	d8802317 	ldw	r2,140(sp)
80208a2c:	003d7b06 	br	8020801c <__reset+0xfa1e801c>
80208a30:	1000991e 	bne	r2,zero,80208c98 <___vfiprintf_internal_r+0xfd0>
80208a34:	00c00044 	movi	r3,1
80208a38:	9805883a 	mov	r2,r19
80208a3c:	dd400015 	stw	r21,0(sp)
80208a40:	dcc00115 	stw	r19,4(sp)
80208a44:	dcc01c15 	stw	r19,112(sp)
80208a48:	d8c01b15 	stw	r3,108(sp)
80208a4c:	d811883a 	mov	r8,sp
80208a50:	42000204 	addi	r8,r8,8
80208a54:	a2c0010c 	andi	r11,r20,4
80208a58:	583fe426 	beq	r11,zero,802089ec <__reset+0xfa1e89ec>
80208a5c:	8ca7c83a 	sub	r19,r17,r18
80208a60:	04ffe20e 	bge	zero,r19,802089ec <__reset+0xfa1e89ec>
80208a64:	01c00404 	movi	r7,16
80208a68:	3cffcc0e 	bge	r7,r19,8020899c <__reset+0xfa1e899c>
80208a6c:	02a00874 	movhi	r10,32801
80208a70:	5286c104 	addi	r10,r10,6916
80208a74:	d9001b17 	ldw	r4,108(sp)
80208a78:	da802415 	stw	r10,144(sp)
80208a7c:	382b883a 	mov	r21,r7
80208a80:	050001c4 	movi	r20,7
80208a84:	df002017 	ldw	fp,128(sp)
80208a88:	00000506 	br	80208aa0 <___vfiprintf_internal_r+0xdd8>
80208a8c:	21400084 	addi	r5,r4,2
80208a90:	42000204 	addi	r8,r8,8
80208a94:	1809883a 	mov	r4,r3
80208a98:	9cfffc04 	addi	r19,r19,-16
80208a9c:	acffc40e 	bge	r21,r19,802089b0 <__reset+0xfa1e89b0>
80208aa0:	10800404 	addi	r2,r2,16
80208aa4:	20c00044 	addi	r3,r4,1
80208aa8:	45800015 	stw	r22,0(r8)
80208aac:	45400115 	stw	r21,4(r8)
80208ab0:	d8801c15 	stw	r2,112(sp)
80208ab4:	d8c01b15 	stw	r3,108(sp)
80208ab8:	a0fff40e 	bge	r20,r3,80208a8c <__reset+0xfa1e8a8c>
80208abc:	1000041e 	bne	r2,zero,80208ad0 <___vfiprintf_internal_r+0xe08>
80208ac0:	01400044 	movi	r5,1
80208ac4:	0009883a 	mov	r4,zero
80208ac8:	d811883a 	mov	r8,sp
80208acc:	003ff206 	br	80208a98 <__reset+0xfa1e8a98>
80208ad0:	d9402117 	ldw	r5,132(sp)
80208ad4:	d9801a04 	addi	r6,sp,104
80208ad8:	e009883a 	mov	r4,fp
80208adc:	0207bb40 	call	80207bb4 <__sprint_r.part.0>
80208ae0:	103fcd1e 	bne	r2,zero,80208a18 <__reset+0xfa1e8a18>
80208ae4:	d9001b17 	ldw	r4,108(sp)
80208ae8:	d8801c17 	ldw	r2,112(sp)
80208aec:	d811883a 	mov	r8,sp
80208af0:	21400044 	addi	r5,r4,1
80208af4:	003fe806 	br	80208a98 <__reset+0xfa1e8a98>
80208af8:	d9402117 	ldw	r5,132(sp)
80208afc:	d9002017 	ldw	r4,128(sp)
80208b00:	d9801a04 	addi	r6,sp,104
80208b04:	d9c02b15 	stw	r7,172(sp)
80208b08:	db402a15 	stw	r13,168(sp)
80208b0c:	0207bb40 	call	80207bb4 <__sprint_r.part.0>
80208b10:	d9c02b17 	ldw	r7,172(sp)
80208b14:	db402a17 	ldw	r13,168(sp)
80208b18:	103fbf1e 	bne	r2,zero,80208a18 <__reset+0xfa1e8a18>
80208b1c:	d9401b17 	ldw	r5,108(sp)
80208b20:	d8801c17 	ldw	r2,112(sp)
80208b24:	d811883a 	mov	r8,sp
80208b28:	29800044 	addi	r6,r5,1
80208b2c:	003dc406 	br	80208240 <__reset+0xfa1e8240>
80208b30:	1000d21e 	bne	r2,zero,80208e7c <___vfiprintf_internal_r+0x11b4>
80208b34:	d8c01d87 	ldb	r3,118(sp)
80208b38:	18009526 	beq	r3,zero,80208d90 <___vfiprintf_internal_r+0x10c8>
80208b3c:	00800044 	movi	r2,1
80208b40:	d8c01d84 	addi	r3,sp,118
80208b44:	1009883a 	mov	r4,r2
80208b48:	d8c00015 	stw	r3,0(sp)
80208b4c:	d8800115 	stw	r2,4(sp)
80208b50:	d811883a 	mov	r8,sp
80208b54:	200b883a 	mov	r5,r4
80208b58:	42000204 	addi	r8,r8,8
80208b5c:	21000044 	addi	r4,r4,1
80208b60:	003d9706 	br	802081c0 <__reset+0xfa1e81c0>
80208b64:	d9001d04 	addi	r4,sp,116
80208b68:	00800084 	movi	r2,2
80208b6c:	d9000015 	stw	r4,0(sp)
80208b70:	d8800115 	stw	r2,4(sp)
80208b74:	1809883a 	mov	r4,r3
80208b78:	d811883a 	mov	r8,sp
80208b7c:	200b883a 	mov	r5,r4
80208b80:	42000204 	addi	r8,r8,8
80208b84:	21000044 	addi	r4,r4,1
80208b88:	003f4e06 	br	802088c4 <__reset+0xfa1e88c4>
80208b8c:	d8001d85 	stb	zero,118(sp)
80208b90:	48005016 	blt	r9,zero,80208cd4 <___vfiprintf_internal_r+0x100c>
80208b94:	00ffdfc4 	movi	r3,-129
80208b98:	94c4b03a 	or	r2,r18,r19
80208b9c:	a0e8703a 	and	r20,r20,r3
80208ba0:	103d4426 	beq	r2,zero,802080b4 <__reset+0xfa1e80b4>
80208ba4:	0039883a 	mov	fp,zero
80208ba8:	d9002617 	ldw	r4,152(sp)
80208bac:	dd401a04 	addi	r21,sp,104
80208bb0:	908003cc 	andi	r2,r18,15
80208bb4:	9806973a 	slli	r3,r19,28
80208bb8:	2085883a 	add	r2,r4,r2
80208bbc:	9024d13a 	srli	r18,r18,4
80208bc0:	10800003 	ldbu	r2,0(r2)
80208bc4:	9826d13a 	srli	r19,r19,4
80208bc8:	ad7fffc4 	addi	r21,r21,-1
80208bcc:	1ca4b03a 	or	r18,r3,r18
80208bd0:	a8800005 	stb	r2,0(r21)
80208bd4:	94c4b03a 	or	r2,r18,r19
80208bd8:	103ff51e 	bne	r2,zero,80208bb0 <__reset+0xfa1e8bb0>
80208bdc:	003e5906 	br	80208544 <__reset+0xfa1e8544>
80208be0:	d9402117 	ldw	r5,132(sp)
80208be4:	d9002017 	ldw	r4,128(sp)
80208be8:	d9801a04 	addi	r6,sp,104
80208bec:	0207bb40 	call	80207bb4 <__sprint_r.part.0>
80208bf0:	103f891e 	bne	r2,zero,80208a18 <__reset+0xfa1e8a18>
80208bf4:	d8801c17 	ldw	r2,112(sp)
80208bf8:	d811883a 	mov	r8,sp
80208bfc:	003f9506 	br	80208a54 <__reset+0xfa1e8a54>
80208c00:	d9402117 	ldw	r5,132(sp)
80208c04:	d9002017 	ldw	r4,128(sp)
80208c08:	d9801a04 	addi	r6,sp,104
80208c0c:	0207bb40 	call	80207bb4 <__sprint_r.part.0>
80208c10:	103f811e 	bne	r2,zero,80208a18 <__reset+0xfa1e8a18>
80208c14:	d811883a 	mov	r8,sp
80208c18:	003ced06 	br	80207fd0 <__reset+0xfa1e7fd0>
80208c1c:	d9402117 	ldw	r5,132(sp)
80208c20:	d9002017 	ldw	r4,128(sp)
80208c24:	d9801a04 	addi	r6,sp,104
80208c28:	da402c15 	stw	r9,176(sp)
80208c2c:	db802a15 	stw	r14,168(sp)
80208c30:	0207bb40 	call	80207bb4 <__sprint_r.part.0>
80208c34:	da402c17 	ldw	r9,176(sp)
80208c38:	db802a17 	ldw	r14,168(sp)
80208c3c:	103f761e 	bne	r2,zero,80208a18 <__reset+0xfa1e8a18>
80208c40:	d9401b17 	ldw	r5,108(sp)
80208c44:	d8801c17 	ldw	r2,112(sp)
80208c48:	d811883a 	mov	r8,sp
80208c4c:	29000044 	addi	r4,r5,1
80208c50:	003d5b06 	br	802081c0 <__reset+0xfa1e81c0>
80208c54:	d9402117 	ldw	r5,132(sp)
80208c58:	d9002017 	ldw	r4,128(sp)
80208c5c:	d9801a04 	addi	r6,sp,104
80208c60:	da402c15 	stw	r9,176(sp)
80208c64:	0207bb40 	call	80207bb4 <__sprint_r.part.0>
80208c68:	da402c17 	ldw	r9,176(sp)
80208c6c:	103f6a1e 	bne	r2,zero,80208a18 <__reset+0xfa1e8a18>
80208c70:	d9401b17 	ldw	r5,108(sp)
80208c74:	d8801c17 	ldw	r2,112(sp)
80208c78:	d811883a 	mov	r8,sp
80208c7c:	29000044 	addi	r4,r5,1
80208c80:	003f1006 	br	802088c4 <__reset+0xfa1e88c4>
80208c84:	1000c31e 	bne	r2,zero,80208f94 <___vfiprintf_internal_r+0x12cc>
80208c88:	01000044 	movi	r4,1
80208c8c:	000b883a 	mov	r5,zero
80208c90:	d811883a 	mov	r8,sp
80208c94:	003f0d06 	br	802088cc <__reset+0xfa1e88cc>
80208c98:	d9402117 	ldw	r5,132(sp)
80208c9c:	d9002017 	ldw	r4,128(sp)
80208ca0:	d9801a04 	addi	r6,sp,104
80208ca4:	0207bb40 	call	80207bb4 <__sprint_r.part.0>
80208ca8:	103f5b1e 	bne	r2,zero,80208a18 <__reset+0xfa1e8a18>
80208cac:	d9001b17 	ldw	r4,108(sp)
80208cb0:	d8801c17 	ldw	r2,112(sp)
80208cb4:	d811883a 	mov	r8,sp
80208cb8:	21000044 	addi	r4,r4,1
80208cbc:	003d8006 	br	802082c0 <__reset+0xfa1e82c0>
80208cc0:	01200874 	movhi	r4,32801
80208cc4:	21065c04 	addi	r4,r4,6512
80208cc8:	d9002615 	stw	r4,152(sp)
80208ccc:	d8c02215 	stw	r3,136(sp)
80208cd0:	1029883a 	mov	r20,r2
80208cd4:	94c4b03a 	or	r2,r18,r19
80208cd8:	103fb21e 	bne	r2,zero,80208ba4 <__reset+0xfa1e8ba4>
80208cdc:	0039883a 	mov	fp,zero
80208ce0:	00800084 	movi	r2,2
80208ce4:	003e6b06 	br	80208694 <__reset+0xfa1e8694>
80208ce8:	da802217 	ldw	r10,136(sp)
80208cec:	d8001d85 	stb	zero,118(sp)
80208cf0:	0027883a 	mov	r19,zero
80208cf4:	50800104 	addi	r2,r10,4
80208cf8:	54800017 	ldw	r18,0(r10)
80208cfc:	483e6016 	blt	r9,zero,80208680 <__reset+0xfa1e8680>
80208d00:	00ffdfc4 	movi	r3,-129
80208d04:	d8802215 	stw	r2,136(sp)
80208d08:	a0e8703a 	and	r20,r20,r3
80208d0c:	0039883a 	mov	fp,zero
80208d10:	903ebb26 	beq	r18,zero,80208800 <__reset+0xfa1e8800>
80208d14:	00800244 	movi	r2,9
80208d18:	14bdee36 	bltu	r2,r18,802084d4 <__reset+0xfa1e84d4>
80208d1c:	003eba06 	br	80208808 <__reset+0xfa1e8808>
80208d20:	00800c04 	movi	r2,48
80208d24:	d8c01d45 	stb	r3,117(sp)
80208d28:	d8801d05 	stb	r2,116(sp)
80208d2c:	d8001d85 	stb	zero,118(sp)
80208d30:	a0c00094 	ori	r3,r20,2
80208d34:	4800a916 	blt	r9,zero,80208fdc <___vfiprintf_internal_r+0x1314>
80208d38:	00bfdfc4 	movi	r2,-129
80208d3c:	a096703a 	and	r11,r20,r2
80208d40:	5d000094 	ori	r20,r11,2
80208d44:	0039883a 	mov	fp,zero
80208d48:	003f9706 	br	80208ba8 <__reset+0xfa1e8ba8>
80208d4c:	8025883a 	mov	r18,r16
80208d50:	003c2e06 	br	80207e0c <__reset+0xfa1e7e0c>
80208d54:	00a00874 	movhi	r2,32801
80208d58:	10865c04 	addi	r2,r2,6512
80208d5c:	0039883a 	mov	fp,zero
80208d60:	d8802615 	stw	r2,152(sp)
80208d64:	003f9006 	br	80208ba8 <__reset+0xfa1e8ba8>
80208d68:	04a5c83a 	sub	r18,zero,r18
80208d6c:	07000b44 	movi	fp,45
80208d70:	9004c03a 	cmpne	r2,r18,zero
80208d74:	04e7c83a 	sub	r19,zero,r19
80208d78:	df001d85 	stb	fp,118(sp)
80208d7c:	98a7c83a 	sub	r19,r19,r2
80208d80:	48009f16 	blt	r9,zero,80209000 <___vfiprintf_internal_r+0x1338>
80208d84:	00bfdfc4 	movi	r2,-129
80208d88:	a0a8703a 	and	r20,r20,r2
80208d8c:	003dd006 	br	802084d0 <__reset+0xfa1e84d0>
80208d90:	70004c26 	beq	r14,zero,80208ec4 <___vfiprintf_internal_r+0x11fc>
80208d94:	00800084 	movi	r2,2
80208d98:	d8c01d04 	addi	r3,sp,116
80208d9c:	d8c00015 	stw	r3,0(sp)
80208da0:	d8800115 	stw	r2,4(sp)
80208da4:	01000044 	movi	r4,1
80208da8:	d811883a 	mov	r8,sp
80208dac:	003f7306 	br	80208b7c <__reset+0xfa1e8b7c>
80208db0:	a080100c 	andi	r2,r20,64
80208db4:	da802217 	ldw	r10,136(sp)
80208db8:	103e0626 	beq	r2,zero,802085d4 <__reset+0xfa1e85d4>
80208dbc:	5480000f 	ldh	r18,0(r10)
80208dc0:	52800104 	addi	r10,r10,4
80208dc4:	da802215 	stw	r10,136(sp)
80208dc8:	9027d7fa 	srai	r19,r18,31
80208dcc:	9805883a 	mov	r2,r19
80208dd0:	003db806 	br	802084b4 <__reset+0xfa1e84b4>
80208dd4:	a080040c 	andi	r2,r20,16
80208dd8:	1000091e 	bne	r2,zero,80208e00 <___vfiprintf_internal_r+0x1138>
80208ddc:	a2c0100c 	andi	r11,r20,64
80208de0:	58000726 	beq	r11,zero,80208e00 <___vfiprintf_internal_r+0x1138>
80208de4:	da802217 	ldw	r10,136(sp)
80208de8:	50800017 	ldw	r2,0(r10)
80208dec:	52800104 	addi	r10,r10,4
80208df0:	da802215 	stw	r10,136(sp)
80208df4:	da802317 	ldw	r10,140(sp)
80208df8:	1280000d 	sth	r10,0(r2)
80208dfc:	003be706 	br	80207d9c <__reset+0xfa1e7d9c>
80208e00:	da802217 	ldw	r10,136(sp)
80208e04:	50800017 	ldw	r2,0(r10)
80208e08:	52800104 	addi	r10,r10,4
80208e0c:	da802215 	stw	r10,136(sp)
80208e10:	da802317 	ldw	r10,140(sp)
80208e14:	12800015 	stw	r10,0(r2)
80208e18:	003be006 	br	80207d9c <__reset+0xfa1e7d9c>
80208e1c:	a080100c 	andi	r2,r20,64
80208e20:	da802217 	ldw	r10,136(sp)
80208e24:	10003026 	beq	r2,zero,80208ee8 <___vfiprintf_internal_r+0x1220>
80208e28:	5480000b 	ldhu	r18,0(r10)
80208e2c:	52800104 	addi	r10,r10,4
80208e30:	0027883a 	mov	r19,zero
80208e34:	da802215 	stw	r10,136(sp)
80208e38:	003d8006 	br	8020843c <__reset+0xfa1e843c>
80208e3c:	80c00007 	ldb	r3,0(r16)
80208e40:	003c0006 	br	80207e44 <__reset+0xfa1e7e44>
80208e44:	a080100c 	andi	r2,r20,64
80208e48:	d8001d85 	stb	zero,118(sp)
80208e4c:	da802217 	ldw	r10,136(sp)
80208e50:	1000201e 	bne	r2,zero,80208ed4 <___vfiprintf_internal_r+0x120c>
80208e54:	50800104 	addi	r2,r10,4
80208e58:	54800017 	ldw	r18,0(r10)
80208e5c:	0027883a 	mov	r19,zero
80208e60:	483def0e 	bge	r9,zero,80208620 <__reset+0xfa1e8620>
80208e64:	94c6b03a 	or	r3,r18,r19
80208e68:	d8802215 	stw	r2,136(sp)
80208e6c:	183d4e1e 	bne	r3,zero,802083a8 <__reset+0xfa1e83a8>
80208e70:	0039883a 	mov	fp,zero
80208e74:	0005883a 	mov	r2,zero
80208e78:	003e0606 	br	80208694 <__reset+0xfa1e8694>
80208e7c:	d9402117 	ldw	r5,132(sp)
80208e80:	d9002017 	ldw	r4,128(sp)
80208e84:	d9801a04 	addi	r6,sp,104
80208e88:	da402c15 	stw	r9,176(sp)
80208e8c:	db802a15 	stw	r14,168(sp)
80208e90:	0207bb40 	call	80207bb4 <__sprint_r.part.0>
80208e94:	da402c17 	ldw	r9,176(sp)
80208e98:	db802a17 	ldw	r14,168(sp)
80208e9c:	103ede1e 	bne	r2,zero,80208a18 <__reset+0xfa1e8a18>
80208ea0:	d9401b17 	ldw	r5,108(sp)
80208ea4:	d8801c17 	ldw	r2,112(sp)
80208ea8:	d811883a 	mov	r8,sp
80208eac:	29000044 	addi	r4,r5,1
80208eb0:	003e7406 	br	80208884 <__reset+0xfa1e8884>
80208eb4:	00bfffc4 	movi	r2,-1
80208eb8:	003c5806 	br	8020801c <__reset+0xfa1e801c>
80208ebc:	d811883a 	mov	r8,sp
80208ec0:	003ee806 	br	80208a64 <__reset+0xfa1e8a64>
80208ec4:	000b883a 	mov	r5,zero
80208ec8:	01000044 	movi	r4,1
80208ecc:	d811883a 	mov	r8,sp
80208ed0:	003e7c06 	br	802088c4 <__reset+0xfa1e88c4>
80208ed4:	50800104 	addi	r2,r10,4
80208ed8:	5480000b 	ldhu	r18,0(r10)
80208edc:	0027883a 	mov	r19,zero
80208ee0:	483dcf0e 	bge	r9,zero,80208620 <__reset+0xfa1e8620>
80208ee4:	003fdf06 	br	80208e64 <__reset+0xfa1e8e64>
80208ee8:	54800017 	ldw	r18,0(r10)
80208eec:	52800104 	addi	r10,r10,4
80208ef0:	0027883a 	mov	r19,zero
80208ef4:	da802215 	stw	r10,136(sp)
80208ef8:	003d5006 	br	8020843c <__reset+0xfa1e843c>
80208efc:	50800104 	addi	r2,r10,4
80208f00:	5480000b 	ldhu	r18,0(r10)
80208f04:	0027883a 	mov	r19,zero
80208f08:	483f7d0e 	bge	r9,zero,80208d00 <__reset+0xfa1e8d00>
80208f0c:	003ddc06 	br	80208680 <__reset+0xfa1e8680>
80208f10:	d8c02215 	stw	r3,136(sp)
80208f14:	0039883a 	mov	fp,zero
80208f18:	003ddb06 	br	80208688 <__reset+0xfa1e8688>
80208f1c:	02a00874 	movhi	r10,32801
80208f20:	5286bd04 	addi	r10,r10,6900
80208f24:	da802415 	stw	r10,144(sp)
80208f28:	003e8306 	br	80208938 <__reset+0xfa1e8938>
80208f2c:	d8801c17 	ldw	r2,112(sp)
80208f30:	dd002117 	ldw	r20,132(sp)
80208f34:	103eb926 	beq	r2,zero,80208a1c <__reset+0xfa1e8a1c>
80208f38:	d9002017 	ldw	r4,128(sp)
80208f3c:	d9801a04 	addi	r6,sp,104
80208f40:	a00b883a 	mov	r5,r20
80208f44:	0207bb40 	call	80207bb4 <__sprint_r.part.0>
80208f48:	003eb406 	br	80208a1c <__reset+0xfa1e8a1c>
80208f4c:	80c00043 	ldbu	r3,1(r16)
80208f50:	a5000814 	ori	r20,r20,32
80208f54:	84000044 	addi	r16,r16,1
80208f58:	18c03fcc 	andi	r3,r3,255
80208f5c:	18c0201c 	xori	r3,r3,128
80208f60:	18ffe004 	addi	r3,r3,-128
80208f64:	003bb706 	br	80207e44 <__reset+0xfa1e7e44>
80208f68:	a809883a 	mov	r4,r21
80208f6c:	d8c02a15 	stw	r3,168(sp)
80208f70:	da002b15 	stw	r8,172(sp)
80208f74:	02007640 	call	80200764 <strlen>
80208f78:	d8c02a17 	ldw	r3,168(sp)
80208f7c:	1027883a 	mov	r19,r2
80208f80:	df001d83 	ldbu	fp,118(sp)
80208f84:	d8c02215 	stw	r3,136(sp)
80208f88:	0013883a 	mov	r9,zero
80208f8c:	da002b17 	ldw	r8,172(sp)
80208f90:	003c4d06 	br	802080c8 <__reset+0xfa1e80c8>
80208f94:	d9402117 	ldw	r5,132(sp)
80208f98:	d9002017 	ldw	r4,128(sp)
80208f9c:	d9801a04 	addi	r6,sp,104
80208fa0:	da402c15 	stw	r9,176(sp)
80208fa4:	0207bb40 	call	80207bb4 <__sprint_r.part.0>
80208fa8:	da402c17 	ldw	r9,176(sp)
80208fac:	103e9a1e 	bne	r2,zero,80208a18 <__reset+0xfa1e8a18>
80208fb0:	d9401b17 	ldw	r5,108(sp)
80208fb4:	d8801c17 	ldw	r2,112(sp)
80208fb8:	d811883a 	mov	r8,sp
80208fbc:	29000044 	addi	r4,r5,1
80208fc0:	003e4206 	br	802088cc <__reset+0xfa1e88cc>
80208fc4:	d9401b17 	ldw	r5,108(sp)
80208fc8:	01200874 	movhi	r4,32801
80208fcc:	2106c104 	addi	r4,r4,6916
80208fd0:	d9002415 	stw	r4,144(sp)
80208fd4:	29400044 	addi	r5,r5,1
80208fd8:	003c6d06 	br	80208190 <__reset+0xfa1e8190>
80208fdc:	0039883a 	mov	fp,zero
80208fe0:	00800084 	movi	r2,2
80208fe4:	10803fcc 	andi	r2,r2,255
80208fe8:	01000044 	movi	r4,1
80208fec:	11001e26 	beq	r2,r4,80209068 <___vfiprintf_internal_r+0x13a0>
80208ff0:	01000084 	movi	r4,2
80208ff4:	11001e1e 	bne	r2,r4,80209070 <___vfiprintf_internal_r+0x13a8>
80208ff8:	1829883a 	mov	r20,r3
80208ffc:	003eea06 	br	80208ba8 <__reset+0xfa1e8ba8>
80209000:	a007883a 	mov	r3,r20
80209004:	00800044 	movi	r2,1
80209008:	003ff606 	br	80208fe4 <__reset+0xfa1e8fe4>
8020900c:	00800184 	movi	r2,6
80209010:	1240012e 	bgeu	r2,r9,80209018 <___vfiprintf_internal_r+0x1350>
80209014:	1013883a 	mov	r9,r2
80209018:	4827883a 	mov	r19,r9
8020901c:	4825883a 	mov	r18,r9
80209020:	48001516 	blt	r9,zero,80209078 <___vfiprintf_internal_r+0x13b0>
80209024:	05600874 	movhi	r21,32801
80209028:	d8c02215 	stw	r3,136(sp)
8020902c:	ad466104 	addi	r21,r21,6532
80209030:	003d1406 	br	80208484 <__reset+0xfa1e8484>
80209034:	02a00874 	movhi	r10,32801
80209038:	5286bd04 	addi	r10,r10,6900
8020903c:	da802415 	stw	r10,144(sp)
80209040:	200d883a 	mov	r6,r4
80209044:	003c9106 	br	8020828c <__reset+0xfa1e828c>
80209048:	5021883a 	mov	r16,r10
8020904c:	0013883a 	mov	r9,zero
80209050:	003b7d06 	br	80207e48 <__reset+0xfa1e7e48>
80209054:	4827883a 	mov	r19,r9
80209058:	df001d83 	ldbu	fp,118(sp)
8020905c:	d8c02215 	stw	r3,136(sp)
80209060:	0013883a 	mov	r9,zero
80209064:	003c1806 	br	802080c8 <__reset+0xfa1e80c8>
80209068:	1829883a 	mov	r20,r3
8020906c:	003d1806 	br	802084d0 <__reset+0xfa1e84d0>
80209070:	1829883a 	mov	r20,r3
80209074:	003ccd06 	br	802083ac <__reset+0xfa1e83ac>
80209078:	0025883a 	mov	r18,zero
8020907c:	003fe906 	br	80209024 <__reset+0xfa1e9024>
80209080:	d8802217 	ldw	r2,136(sp)
80209084:	80c00043 	ldbu	r3,1(r16)
80209088:	5021883a 	mov	r16,r10
8020908c:	12400017 	ldw	r9,0(r2)
80209090:	10800104 	addi	r2,r2,4
80209094:	d8802215 	stw	r2,136(sp)
80209098:	483faf0e 	bge	r9,zero,80208f58 <__reset+0xfa1e8f58>
8020909c:	18c03fcc 	andi	r3,r3,255
802090a0:	18c0201c 	xori	r3,r3,128
802090a4:	027fffc4 	movi	r9,-1
802090a8:	18ffe004 	addi	r3,r3,-128
802090ac:	003b6506 	br	80207e44 <__reset+0xfa1e7e44>
802090b0:	d9c01d85 	stb	r7,118(sp)
802090b4:	003ca006 	br	80208338 <__reset+0xfa1e8338>
802090b8:	d9c01d85 	stb	r7,118(sp)
802090bc:	003cad06 	br	80208374 <__reset+0xfa1e8374>
802090c0:	d9c01d85 	stb	r7,118(sp)
802090c4:	003d7d06 	br	802086bc <__reset+0xfa1e86bc>
802090c8:	d9c01d85 	stb	r7,118(sp)
802090cc:	003d5f06 	br	8020864c <__reset+0xfa1e864c>
802090d0:	a080004c 	andi	r2,r20,1
802090d4:	0039883a 	mov	fp,zero
802090d8:	10000526 	beq	r2,zero,802090f0 <___vfiprintf_internal_r+0x1428>
802090dc:	00800c04 	movi	r2,48
802090e0:	d88019c5 	stb	r2,103(sp)
802090e4:	dcc02717 	ldw	r19,156(sp)
802090e8:	dd4019c4 	addi	r21,sp,103
802090ec:	003bf606 	br	802080c8 <__reset+0xfa1e80c8>
802090f0:	0027883a 	mov	r19,zero
802090f4:	dd401a04 	addi	r21,sp,104
802090f8:	003bf306 	br	802080c8 <__reset+0xfa1e80c8>
802090fc:	d9c01d85 	stb	r7,118(sp)
80209100:	003dc806 	br	80208824 <__reset+0xfa1e8824>
80209104:	d9c01d85 	stb	r7,118(sp)
80209108:	003d3a06 	br	802085f4 <__reset+0xfa1e85f4>
8020910c:	d9c01d85 	stb	r7,118(sp)
80209110:	003d2a06 	br	802085bc <__reset+0xfa1e85bc>
80209114:	d9c01d85 	stb	r7,118(sp)
80209118:	003cde06 	br	80208494 <__reset+0xfa1e8494>
8020911c:	d9c01d85 	stb	r7,118(sp)
80209120:	003cbc06 	br	80208414 <__reset+0xfa1e8414>

80209124 <__vfiprintf_internal>:
80209124:	00a00874 	movhi	r2,32801
80209128:	108e9404 	addi	r2,r2,14928
8020912c:	300f883a 	mov	r7,r6
80209130:	280d883a 	mov	r6,r5
80209134:	200b883a 	mov	r5,r4
80209138:	11000017 	ldw	r4,0(r2)
8020913c:	0207cc81 	jmpi	80207cc8 <___vfiprintf_internal_r>

80209140 <__sbprintf>:
80209140:	2880030b 	ldhu	r2,12(r5)
80209144:	2ac01917 	ldw	r11,100(r5)
80209148:	2a80038b 	ldhu	r10,14(r5)
8020914c:	2a400717 	ldw	r9,28(r5)
80209150:	2a000917 	ldw	r8,36(r5)
80209154:	defee204 	addi	sp,sp,-1144
80209158:	00c10004 	movi	r3,1024
8020915c:	dc011a15 	stw	r16,1128(sp)
80209160:	10bfff4c 	andi	r2,r2,65533
80209164:	2821883a 	mov	r16,r5
80209168:	d8cb883a 	add	r5,sp,r3
8020916c:	dc811c15 	stw	r18,1136(sp)
80209170:	dc411b15 	stw	r17,1132(sp)
80209174:	dfc11d15 	stw	ra,1140(sp)
80209178:	2025883a 	mov	r18,r4
8020917c:	d881030d 	sth	r2,1036(sp)
80209180:	dac11915 	stw	r11,1124(sp)
80209184:	da81038d 	sth	r10,1038(sp)
80209188:	da410715 	stw	r9,1052(sp)
8020918c:	da010915 	stw	r8,1060(sp)
80209190:	dec10015 	stw	sp,1024(sp)
80209194:	dec10415 	stw	sp,1040(sp)
80209198:	d8c10215 	stw	r3,1032(sp)
8020919c:	d8c10515 	stw	r3,1044(sp)
802091a0:	d8010615 	stw	zero,1048(sp)
802091a4:	0207cc80 	call	80207cc8 <___vfiprintf_internal_r>
802091a8:	1023883a 	mov	r17,r2
802091ac:	10000416 	blt	r2,zero,802091c0 <__sbprintf+0x80>
802091b0:	d9410004 	addi	r5,sp,1024
802091b4:	9009883a 	mov	r4,r18
802091b8:	02046c40 	call	802046c4 <_fflush_r>
802091bc:	10000d1e 	bne	r2,zero,802091f4 <__sbprintf+0xb4>
802091c0:	d881030b 	ldhu	r2,1036(sp)
802091c4:	1080100c 	andi	r2,r2,64
802091c8:	10000326 	beq	r2,zero,802091d8 <__sbprintf+0x98>
802091cc:	8080030b 	ldhu	r2,12(r16)
802091d0:	10801014 	ori	r2,r2,64
802091d4:	8080030d 	sth	r2,12(r16)
802091d8:	8805883a 	mov	r2,r17
802091dc:	dfc11d17 	ldw	ra,1140(sp)
802091e0:	dc811c17 	ldw	r18,1136(sp)
802091e4:	dc411b17 	ldw	r17,1132(sp)
802091e8:	dc011a17 	ldw	r16,1128(sp)
802091ec:	dec11e04 	addi	sp,sp,1144
802091f0:	f800283a 	ret
802091f4:	047fffc4 	movi	r17,-1
802091f8:	003ff106 	br	802091c0 <__reset+0xfa1e91c0>

802091fc <_write_r>:
802091fc:	defffd04 	addi	sp,sp,-12
80209200:	2805883a 	mov	r2,r5
80209204:	dc000015 	stw	r16,0(sp)
80209208:	04200874 	movhi	r16,32801
8020920c:	dc400115 	stw	r17,4(sp)
80209210:	300b883a 	mov	r5,r6
80209214:	840eac04 	addi	r16,r16,15024
80209218:	2023883a 	mov	r17,r4
8020921c:	380d883a 	mov	r6,r7
80209220:	1009883a 	mov	r4,r2
80209224:	dfc00215 	stw	ra,8(sp)
80209228:	80000015 	stw	zero,0(r16)
8020922c:	020d58c0 	call	8020d58c <write>
80209230:	00ffffc4 	movi	r3,-1
80209234:	10c00526 	beq	r2,r3,8020924c <_write_r+0x50>
80209238:	dfc00217 	ldw	ra,8(sp)
8020923c:	dc400117 	ldw	r17,4(sp)
80209240:	dc000017 	ldw	r16,0(sp)
80209244:	dec00304 	addi	sp,sp,12
80209248:	f800283a 	ret
8020924c:	80c00017 	ldw	r3,0(r16)
80209250:	183ff926 	beq	r3,zero,80209238 <__reset+0xfa1e9238>
80209254:	88c00015 	stw	r3,0(r17)
80209258:	003ff706 	br	80209238 <__reset+0xfa1e9238>

8020925c <_close_r>:
8020925c:	defffd04 	addi	sp,sp,-12
80209260:	dc000015 	stw	r16,0(sp)
80209264:	04200874 	movhi	r16,32801
80209268:	dc400115 	stw	r17,4(sp)
8020926c:	840eac04 	addi	r16,r16,15024
80209270:	2023883a 	mov	r17,r4
80209274:	2809883a 	mov	r4,r5
80209278:	dfc00215 	stw	ra,8(sp)
8020927c:	80000015 	stw	zero,0(r16)
80209280:	020ce380 	call	8020ce38 <close>
80209284:	00ffffc4 	movi	r3,-1
80209288:	10c00526 	beq	r2,r3,802092a0 <_close_r+0x44>
8020928c:	dfc00217 	ldw	ra,8(sp)
80209290:	dc400117 	ldw	r17,4(sp)
80209294:	dc000017 	ldw	r16,0(sp)
80209298:	dec00304 	addi	sp,sp,12
8020929c:	f800283a 	ret
802092a0:	80c00017 	ldw	r3,0(r16)
802092a4:	183ff926 	beq	r3,zero,8020928c <__reset+0xfa1e928c>
802092a8:	88c00015 	stw	r3,0(r17)
802092ac:	003ff706 	br	8020928c <__reset+0xfa1e928c>

802092b0 <_calloc_r>:
802092b0:	298b383a 	mul	r5,r5,r6
802092b4:	defffe04 	addi	sp,sp,-8
802092b8:	dfc00115 	stw	ra,4(sp)
802092bc:	dc000015 	stw	r16,0(sp)
802092c0:	02058000 	call	80205800 <_malloc_r>
802092c4:	10002926 	beq	r2,zero,8020936c <_calloc_r+0xbc>
802092c8:	11bfff17 	ldw	r6,-4(r2)
802092cc:	1021883a 	mov	r16,r2
802092d0:	00bfff04 	movi	r2,-4
802092d4:	308c703a 	and	r6,r6,r2
802092d8:	00c00904 	movi	r3,36
802092dc:	308d883a 	add	r6,r6,r2
802092e0:	19801636 	bltu	r3,r6,8020933c <_calloc_r+0x8c>
802092e4:	008004c4 	movi	r2,19
802092e8:	11800b2e 	bgeu	r2,r6,80209318 <_calloc_r+0x68>
802092ec:	80000015 	stw	zero,0(r16)
802092f0:	80000115 	stw	zero,4(r16)
802092f4:	008006c4 	movi	r2,27
802092f8:	11801a2e 	bgeu	r2,r6,80209364 <_calloc_r+0xb4>
802092fc:	80000215 	stw	zero,8(r16)
80209300:	80000315 	stw	zero,12(r16)
80209304:	30c0151e 	bne	r6,r3,8020935c <_calloc_r+0xac>
80209308:	80000415 	stw	zero,16(r16)
8020930c:	80800604 	addi	r2,r16,24
80209310:	80000515 	stw	zero,20(r16)
80209314:	00000106 	br	8020931c <_calloc_r+0x6c>
80209318:	8005883a 	mov	r2,r16
8020931c:	10000015 	stw	zero,0(r2)
80209320:	10000115 	stw	zero,4(r2)
80209324:	10000215 	stw	zero,8(r2)
80209328:	8005883a 	mov	r2,r16
8020932c:	dfc00117 	ldw	ra,4(sp)
80209330:	dc000017 	ldw	r16,0(sp)
80209334:	dec00204 	addi	sp,sp,8
80209338:	f800283a 	ret
8020933c:	000b883a 	mov	r5,zero
80209340:	8009883a 	mov	r4,r16
80209344:	020624c0 	call	8020624c <memset>
80209348:	8005883a 	mov	r2,r16
8020934c:	dfc00117 	ldw	ra,4(sp)
80209350:	dc000017 	ldw	r16,0(sp)
80209354:	dec00204 	addi	sp,sp,8
80209358:	f800283a 	ret
8020935c:	80800404 	addi	r2,r16,16
80209360:	003fee06 	br	8020931c <__reset+0xfa1e931c>
80209364:	80800204 	addi	r2,r16,8
80209368:	003fec06 	br	8020931c <__reset+0xfa1e931c>
8020936c:	0005883a 	mov	r2,zero
80209370:	003fee06 	br	8020932c <__reset+0xfa1e932c>

80209374 <_fclose_r>:
80209374:	28003926 	beq	r5,zero,8020945c <_fclose_r+0xe8>
80209378:	defffc04 	addi	sp,sp,-16
8020937c:	dc400115 	stw	r17,4(sp)
80209380:	dc000015 	stw	r16,0(sp)
80209384:	dfc00315 	stw	ra,12(sp)
80209388:	dc800215 	stw	r18,8(sp)
8020938c:	2023883a 	mov	r17,r4
80209390:	2821883a 	mov	r16,r5
80209394:	20000226 	beq	r4,zero,802093a0 <_fclose_r+0x2c>
80209398:	20800e17 	ldw	r2,56(r4)
8020939c:	10002726 	beq	r2,zero,8020943c <_fclose_r+0xc8>
802093a0:	8080030f 	ldh	r2,12(r16)
802093a4:	1000071e 	bne	r2,zero,802093c4 <_fclose_r+0x50>
802093a8:	0005883a 	mov	r2,zero
802093ac:	dfc00317 	ldw	ra,12(sp)
802093b0:	dc800217 	ldw	r18,8(sp)
802093b4:	dc400117 	ldw	r17,4(sp)
802093b8:	dc000017 	ldw	r16,0(sp)
802093bc:	dec00404 	addi	sp,sp,16
802093c0:	f800283a 	ret
802093c4:	800b883a 	mov	r5,r16
802093c8:	8809883a 	mov	r4,r17
802093cc:	02044a80 	call	802044a8 <__sflush_r>
802093d0:	1025883a 	mov	r18,r2
802093d4:	80800b17 	ldw	r2,44(r16)
802093d8:	10000426 	beq	r2,zero,802093ec <_fclose_r+0x78>
802093dc:	81400717 	ldw	r5,28(r16)
802093e0:	8809883a 	mov	r4,r17
802093e4:	103ee83a 	callr	r2
802093e8:	10001616 	blt	r2,zero,80209444 <_fclose_r+0xd0>
802093ec:	8080030b 	ldhu	r2,12(r16)
802093f0:	1080200c 	andi	r2,r2,128
802093f4:	1000151e 	bne	r2,zero,8020944c <_fclose_r+0xd8>
802093f8:	81400c17 	ldw	r5,48(r16)
802093fc:	28000526 	beq	r5,zero,80209414 <_fclose_r+0xa0>
80209400:	80801004 	addi	r2,r16,64
80209404:	28800226 	beq	r5,r2,80209410 <_fclose_r+0x9c>
80209408:	8809883a 	mov	r4,r17
8020940c:	0204c140 	call	80204c14 <_free_r>
80209410:	80000c15 	stw	zero,48(r16)
80209414:	81401117 	ldw	r5,68(r16)
80209418:	28000326 	beq	r5,zero,80209428 <_fclose_r+0xb4>
8020941c:	8809883a 	mov	r4,r17
80209420:	0204c140 	call	80204c14 <_free_r>
80209424:	80001115 	stw	zero,68(r16)
80209428:	0204ab00 	call	80204ab0 <__sfp_lock_acquire>
8020942c:	8000030d 	sth	zero,12(r16)
80209430:	0204ab40 	call	80204ab4 <__sfp_lock_release>
80209434:	9005883a 	mov	r2,r18
80209438:	003fdc06 	br	802093ac <__reset+0xfa1e93ac>
8020943c:	0204aa00 	call	80204aa0 <__sinit>
80209440:	003fd706 	br	802093a0 <__reset+0xfa1e93a0>
80209444:	04bfffc4 	movi	r18,-1
80209448:	003fe806 	br	802093ec <__reset+0xfa1e93ec>
8020944c:	81400417 	ldw	r5,16(r16)
80209450:	8809883a 	mov	r4,r17
80209454:	0204c140 	call	80204c14 <_free_r>
80209458:	003fe706 	br	802093f8 <__reset+0xfa1e93f8>
8020945c:	0005883a 	mov	r2,zero
80209460:	f800283a 	ret

80209464 <fclose>:
80209464:	00a00874 	movhi	r2,32801
80209468:	108e9404 	addi	r2,r2,14928
8020946c:	200b883a 	mov	r5,r4
80209470:	11000017 	ldw	r4,0(r2)
80209474:	02093741 	jmpi	80209374 <_fclose_r>

80209478 <__fputwc>:
80209478:	defff804 	addi	sp,sp,-32
8020947c:	dcc00415 	stw	r19,16(sp)
80209480:	dc800315 	stw	r18,12(sp)
80209484:	dc000115 	stw	r16,4(sp)
80209488:	dfc00715 	stw	ra,28(sp)
8020948c:	dd400615 	stw	r21,24(sp)
80209490:	dd000515 	stw	r20,20(sp)
80209494:	dc400215 	stw	r17,8(sp)
80209498:	2027883a 	mov	r19,r4
8020949c:	2825883a 	mov	r18,r5
802094a0:	3021883a 	mov	r16,r6
802094a4:	02055f00 	call	802055f0 <__locale_mb_cur_max>
802094a8:	00c00044 	movi	r3,1
802094ac:	10c03e26 	beq	r2,r3,802095a8 <__fputwc+0x130>
802094b0:	81c01704 	addi	r7,r16,92
802094b4:	900d883a 	mov	r6,r18
802094b8:	d80b883a 	mov	r5,sp
802094bc:	9809883a 	mov	r4,r19
802094c0:	02099480 	call	80209948 <_wcrtomb_r>
802094c4:	1029883a 	mov	r20,r2
802094c8:	00bfffc4 	movi	r2,-1
802094cc:	a0802026 	beq	r20,r2,80209550 <__fputwc+0xd8>
802094d0:	d9400003 	ldbu	r5,0(sp)
802094d4:	a0001c26 	beq	r20,zero,80209548 <__fputwc+0xd0>
802094d8:	0023883a 	mov	r17,zero
802094dc:	05400284 	movi	r21,10
802094e0:	00000906 	br	80209508 <__fputwc+0x90>
802094e4:	80800017 	ldw	r2,0(r16)
802094e8:	11400005 	stb	r5,0(r2)
802094ec:	80c00017 	ldw	r3,0(r16)
802094f0:	18c00044 	addi	r3,r3,1
802094f4:	80c00015 	stw	r3,0(r16)
802094f8:	8c400044 	addi	r17,r17,1
802094fc:	dc45883a 	add	r2,sp,r17
80209500:	8d00112e 	bgeu	r17,r20,80209548 <__fputwc+0xd0>
80209504:	11400003 	ldbu	r5,0(r2)
80209508:	80c00217 	ldw	r3,8(r16)
8020950c:	18ffffc4 	addi	r3,r3,-1
80209510:	80c00215 	stw	r3,8(r16)
80209514:	183ff30e 	bge	r3,zero,802094e4 <__reset+0xfa1e94e4>
80209518:	80800617 	ldw	r2,24(r16)
8020951c:	18801916 	blt	r3,r2,80209584 <__fputwc+0x10c>
80209520:	80800017 	ldw	r2,0(r16)
80209524:	11400005 	stb	r5,0(r2)
80209528:	80800017 	ldw	r2,0(r16)
8020952c:	10c00003 	ldbu	r3,0(r2)
80209530:	10800044 	addi	r2,r2,1
80209534:	1d402326 	beq	r3,r21,802095c4 <__fputwc+0x14c>
80209538:	80800015 	stw	r2,0(r16)
8020953c:	8c400044 	addi	r17,r17,1
80209540:	dc45883a 	add	r2,sp,r17
80209544:	8d3fef36 	bltu	r17,r20,80209504 <__reset+0xfa1e9504>
80209548:	9005883a 	mov	r2,r18
8020954c:	00000406 	br	80209560 <__fputwc+0xe8>
80209550:	80c0030b 	ldhu	r3,12(r16)
80209554:	a005883a 	mov	r2,r20
80209558:	18c01014 	ori	r3,r3,64
8020955c:	80c0030d 	sth	r3,12(r16)
80209560:	dfc00717 	ldw	ra,28(sp)
80209564:	dd400617 	ldw	r21,24(sp)
80209568:	dd000517 	ldw	r20,20(sp)
8020956c:	dcc00417 	ldw	r19,16(sp)
80209570:	dc800317 	ldw	r18,12(sp)
80209574:	dc400217 	ldw	r17,8(sp)
80209578:	dc000117 	ldw	r16,4(sp)
8020957c:	dec00804 	addi	sp,sp,32
80209580:	f800283a 	ret
80209584:	800d883a 	mov	r6,r16
80209588:	29403fcc 	andi	r5,r5,255
8020958c:	9809883a 	mov	r4,r19
80209590:	02097f00 	call	802097f0 <__swbuf_r>
80209594:	10bfffe0 	cmpeqi	r2,r2,-1
80209598:	10803fcc 	andi	r2,r2,255
8020959c:	103fd626 	beq	r2,zero,802094f8 <__reset+0xfa1e94f8>
802095a0:	00bfffc4 	movi	r2,-1
802095a4:	003fee06 	br	80209560 <__reset+0xfa1e9560>
802095a8:	90ffffc4 	addi	r3,r18,-1
802095ac:	01003f84 	movi	r4,254
802095b0:	20ffbf36 	bltu	r4,r3,802094b0 <__reset+0xfa1e94b0>
802095b4:	900b883a 	mov	r5,r18
802095b8:	dc800005 	stb	r18,0(sp)
802095bc:	1029883a 	mov	r20,r2
802095c0:	003fc506 	br	802094d8 <__reset+0xfa1e94d8>
802095c4:	800d883a 	mov	r6,r16
802095c8:	a80b883a 	mov	r5,r21
802095cc:	9809883a 	mov	r4,r19
802095d0:	02097f00 	call	802097f0 <__swbuf_r>
802095d4:	10bfffe0 	cmpeqi	r2,r2,-1
802095d8:	003fef06 	br	80209598 <__reset+0xfa1e9598>

802095dc <_fputwc_r>:
802095dc:	3080030b 	ldhu	r2,12(r6)
802095e0:	10c8000c 	andi	r3,r2,8192
802095e4:	1800051e 	bne	r3,zero,802095fc <_fputwc_r+0x20>
802095e8:	30c01917 	ldw	r3,100(r6)
802095ec:	10880014 	ori	r2,r2,8192
802095f0:	3080030d 	sth	r2,12(r6)
802095f4:	18880014 	ori	r2,r3,8192
802095f8:	30801915 	stw	r2,100(r6)
802095fc:	02094781 	jmpi	80209478 <__fputwc>

80209600 <fputwc>:
80209600:	00a00874 	movhi	r2,32801
80209604:	defffc04 	addi	sp,sp,-16
80209608:	108e9404 	addi	r2,r2,14928
8020960c:	dc000115 	stw	r16,4(sp)
80209610:	14000017 	ldw	r16,0(r2)
80209614:	dc400215 	stw	r17,8(sp)
80209618:	dfc00315 	stw	ra,12(sp)
8020961c:	2023883a 	mov	r17,r4
80209620:	80000226 	beq	r16,zero,8020962c <fputwc+0x2c>
80209624:	80800e17 	ldw	r2,56(r16)
80209628:	10001026 	beq	r2,zero,8020966c <fputwc+0x6c>
8020962c:	2880030b 	ldhu	r2,12(r5)
80209630:	10c8000c 	andi	r3,r2,8192
80209634:	1800051e 	bne	r3,zero,8020964c <fputwc+0x4c>
80209638:	28c01917 	ldw	r3,100(r5)
8020963c:	10880014 	ori	r2,r2,8192
80209640:	2880030d 	sth	r2,12(r5)
80209644:	18880014 	ori	r2,r3,8192
80209648:	28801915 	stw	r2,100(r5)
8020964c:	280d883a 	mov	r6,r5
80209650:	8009883a 	mov	r4,r16
80209654:	880b883a 	mov	r5,r17
80209658:	dfc00317 	ldw	ra,12(sp)
8020965c:	dc400217 	ldw	r17,8(sp)
80209660:	dc000117 	ldw	r16,4(sp)
80209664:	dec00404 	addi	sp,sp,16
80209668:	02094781 	jmpi	80209478 <__fputwc>
8020966c:	8009883a 	mov	r4,r16
80209670:	d9400015 	stw	r5,0(sp)
80209674:	0204aa00 	call	80204aa0 <__sinit>
80209678:	d9400017 	ldw	r5,0(sp)
8020967c:	003feb06 	br	8020962c <__reset+0xfa1e962c>

80209680 <_fstat_r>:
80209680:	defffd04 	addi	sp,sp,-12
80209684:	2805883a 	mov	r2,r5
80209688:	dc000015 	stw	r16,0(sp)
8020968c:	04200874 	movhi	r16,32801
80209690:	dc400115 	stw	r17,4(sp)
80209694:	840eac04 	addi	r16,r16,15024
80209698:	2023883a 	mov	r17,r4
8020969c:	300b883a 	mov	r5,r6
802096a0:	1009883a 	mov	r4,r2
802096a4:	dfc00215 	stw	ra,8(sp)
802096a8:	80000015 	stw	zero,0(r16)
802096ac:	020cf700 	call	8020cf70 <fstat>
802096b0:	00ffffc4 	movi	r3,-1
802096b4:	10c00526 	beq	r2,r3,802096cc <_fstat_r+0x4c>
802096b8:	dfc00217 	ldw	ra,8(sp)
802096bc:	dc400117 	ldw	r17,4(sp)
802096c0:	dc000017 	ldw	r16,0(sp)
802096c4:	dec00304 	addi	sp,sp,12
802096c8:	f800283a 	ret
802096cc:	80c00017 	ldw	r3,0(r16)
802096d0:	183ff926 	beq	r3,zero,802096b8 <__reset+0xfa1e96b8>
802096d4:	88c00015 	stw	r3,0(r17)
802096d8:	003ff706 	br	802096b8 <__reset+0xfa1e96b8>

802096dc <_isatty_r>:
802096dc:	defffd04 	addi	sp,sp,-12
802096e0:	dc000015 	stw	r16,0(sp)
802096e4:	04200874 	movhi	r16,32801
802096e8:	dc400115 	stw	r17,4(sp)
802096ec:	840eac04 	addi	r16,r16,15024
802096f0:	2023883a 	mov	r17,r4
802096f4:	2809883a 	mov	r4,r5
802096f8:	dfc00215 	stw	ra,8(sp)
802096fc:	80000015 	stw	zero,0(r16)
80209700:	020d05c0 	call	8020d05c <isatty>
80209704:	00ffffc4 	movi	r3,-1
80209708:	10c00526 	beq	r2,r3,80209720 <_isatty_r+0x44>
8020970c:	dfc00217 	ldw	ra,8(sp)
80209710:	dc400117 	ldw	r17,4(sp)
80209714:	dc000017 	ldw	r16,0(sp)
80209718:	dec00304 	addi	sp,sp,12
8020971c:	f800283a 	ret
80209720:	80c00017 	ldw	r3,0(r16)
80209724:	183ff926 	beq	r3,zero,8020970c <__reset+0xfa1e970c>
80209728:	88c00015 	stw	r3,0(r17)
8020972c:	003ff706 	br	8020970c <__reset+0xfa1e970c>

80209730 <_lseek_r>:
80209730:	defffd04 	addi	sp,sp,-12
80209734:	2805883a 	mov	r2,r5
80209738:	dc000015 	stw	r16,0(sp)
8020973c:	04200874 	movhi	r16,32801
80209740:	dc400115 	stw	r17,4(sp)
80209744:	300b883a 	mov	r5,r6
80209748:	840eac04 	addi	r16,r16,15024
8020974c:	2023883a 	mov	r17,r4
80209750:	380d883a 	mov	r6,r7
80209754:	1009883a 	mov	r4,r2
80209758:	dfc00215 	stw	ra,8(sp)
8020975c:	80000015 	stw	zero,0(r16)
80209760:	020d13c0 	call	8020d13c <lseek>
80209764:	00ffffc4 	movi	r3,-1
80209768:	10c00526 	beq	r2,r3,80209780 <_lseek_r+0x50>
8020976c:	dfc00217 	ldw	ra,8(sp)
80209770:	dc400117 	ldw	r17,4(sp)
80209774:	dc000017 	ldw	r16,0(sp)
80209778:	dec00304 	addi	sp,sp,12
8020977c:	f800283a 	ret
80209780:	80c00017 	ldw	r3,0(r16)
80209784:	183ff926 	beq	r3,zero,8020976c <__reset+0xfa1e976c>
80209788:	88c00015 	stw	r3,0(r17)
8020978c:	003ff706 	br	8020976c <__reset+0xfa1e976c>

80209790 <_read_r>:
80209790:	defffd04 	addi	sp,sp,-12
80209794:	2805883a 	mov	r2,r5
80209798:	dc000015 	stw	r16,0(sp)
8020979c:	04200874 	movhi	r16,32801
802097a0:	dc400115 	stw	r17,4(sp)
802097a4:	300b883a 	mov	r5,r6
802097a8:	840eac04 	addi	r16,r16,15024
802097ac:	2023883a 	mov	r17,r4
802097b0:	380d883a 	mov	r6,r7
802097b4:	1009883a 	mov	r4,r2
802097b8:	dfc00215 	stw	ra,8(sp)
802097bc:	80000015 	stw	zero,0(r16)
802097c0:	020d3100 	call	8020d310 <read>
802097c4:	00ffffc4 	movi	r3,-1
802097c8:	10c00526 	beq	r2,r3,802097e0 <_read_r+0x50>
802097cc:	dfc00217 	ldw	ra,8(sp)
802097d0:	dc400117 	ldw	r17,4(sp)
802097d4:	dc000017 	ldw	r16,0(sp)
802097d8:	dec00304 	addi	sp,sp,12
802097dc:	f800283a 	ret
802097e0:	80c00017 	ldw	r3,0(r16)
802097e4:	183ff926 	beq	r3,zero,802097cc <__reset+0xfa1e97cc>
802097e8:	88c00015 	stw	r3,0(r17)
802097ec:	003ff706 	br	802097cc <__reset+0xfa1e97cc>

802097f0 <__swbuf_r>:
802097f0:	defffb04 	addi	sp,sp,-20
802097f4:	dcc00315 	stw	r19,12(sp)
802097f8:	dc800215 	stw	r18,8(sp)
802097fc:	dc000015 	stw	r16,0(sp)
80209800:	dfc00415 	stw	ra,16(sp)
80209804:	dc400115 	stw	r17,4(sp)
80209808:	2025883a 	mov	r18,r4
8020980c:	2827883a 	mov	r19,r5
80209810:	3021883a 	mov	r16,r6
80209814:	20000226 	beq	r4,zero,80209820 <__swbuf_r+0x30>
80209818:	20800e17 	ldw	r2,56(r4)
8020981c:	10004226 	beq	r2,zero,80209928 <__swbuf_r+0x138>
80209820:	80800617 	ldw	r2,24(r16)
80209824:	8100030b 	ldhu	r4,12(r16)
80209828:	80800215 	stw	r2,8(r16)
8020982c:	2080020c 	andi	r2,r4,8
80209830:	10003626 	beq	r2,zero,8020990c <__swbuf_r+0x11c>
80209834:	80c00417 	ldw	r3,16(r16)
80209838:	18003426 	beq	r3,zero,8020990c <__swbuf_r+0x11c>
8020983c:	2088000c 	andi	r2,r4,8192
80209840:	9c403fcc 	andi	r17,r19,255
80209844:	10001a26 	beq	r2,zero,802098b0 <__swbuf_r+0xc0>
80209848:	80800017 	ldw	r2,0(r16)
8020984c:	81000517 	ldw	r4,20(r16)
80209850:	10c7c83a 	sub	r3,r2,r3
80209854:	1900200e 	bge	r3,r4,802098d8 <__swbuf_r+0xe8>
80209858:	18c00044 	addi	r3,r3,1
8020985c:	81000217 	ldw	r4,8(r16)
80209860:	11400044 	addi	r5,r2,1
80209864:	81400015 	stw	r5,0(r16)
80209868:	213fffc4 	addi	r4,r4,-1
8020986c:	81000215 	stw	r4,8(r16)
80209870:	14c00005 	stb	r19,0(r2)
80209874:	80800517 	ldw	r2,20(r16)
80209878:	10c01e26 	beq	r2,r3,802098f4 <__swbuf_r+0x104>
8020987c:	8080030b 	ldhu	r2,12(r16)
80209880:	1080004c 	andi	r2,r2,1
80209884:	10000226 	beq	r2,zero,80209890 <__swbuf_r+0xa0>
80209888:	00800284 	movi	r2,10
8020988c:	88801926 	beq	r17,r2,802098f4 <__swbuf_r+0x104>
80209890:	8805883a 	mov	r2,r17
80209894:	dfc00417 	ldw	ra,16(sp)
80209898:	dcc00317 	ldw	r19,12(sp)
8020989c:	dc800217 	ldw	r18,8(sp)
802098a0:	dc400117 	ldw	r17,4(sp)
802098a4:	dc000017 	ldw	r16,0(sp)
802098a8:	dec00504 	addi	sp,sp,20
802098ac:	f800283a 	ret
802098b0:	81401917 	ldw	r5,100(r16)
802098b4:	00b7ffc4 	movi	r2,-8193
802098b8:	21080014 	ori	r4,r4,8192
802098bc:	2884703a 	and	r2,r5,r2
802098c0:	80801915 	stw	r2,100(r16)
802098c4:	80800017 	ldw	r2,0(r16)
802098c8:	8100030d 	sth	r4,12(r16)
802098cc:	81000517 	ldw	r4,20(r16)
802098d0:	10c7c83a 	sub	r3,r2,r3
802098d4:	193fe016 	blt	r3,r4,80209858 <__reset+0xfa1e9858>
802098d8:	800b883a 	mov	r5,r16
802098dc:	9009883a 	mov	r4,r18
802098e0:	02046c40 	call	802046c4 <_fflush_r>
802098e4:	1000071e 	bne	r2,zero,80209904 <__swbuf_r+0x114>
802098e8:	80800017 	ldw	r2,0(r16)
802098ec:	00c00044 	movi	r3,1
802098f0:	003fda06 	br	8020985c <__reset+0xfa1e985c>
802098f4:	800b883a 	mov	r5,r16
802098f8:	9009883a 	mov	r4,r18
802098fc:	02046c40 	call	802046c4 <_fflush_r>
80209900:	103fe326 	beq	r2,zero,80209890 <__reset+0xfa1e9890>
80209904:	00bfffc4 	movi	r2,-1
80209908:	003fe206 	br	80209894 <__reset+0xfa1e9894>
8020990c:	800b883a 	mov	r5,r16
80209910:	9009883a 	mov	r4,r18
80209914:	0202acc0 	call	80202acc <__swsetup_r>
80209918:	103ffa1e 	bne	r2,zero,80209904 <__reset+0xfa1e9904>
8020991c:	8100030b 	ldhu	r4,12(r16)
80209920:	80c00417 	ldw	r3,16(r16)
80209924:	003fc506 	br	8020983c <__reset+0xfa1e983c>
80209928:	0204aa00 	call	80204aa0 <__sinit>
8020992c:	003fbc06 	br	80209820 <__reset+0xfa1e9820>

80209930 <__swbuf>:
80209930:	00a00874 	movhi	r2,32801
80209934:	108e9404 	addi	r2,r2,14928
80209938:	280d883a 	mov	r6,r5
8020993c:	200b883a 	mov	r5,r4
80209940:	11000017 	ldw	r4,0(r2)
80209944:	02097f01 	jmpi	802097f0 <__swbuf_r>

80209948 <_wcrtomb_r>:
80209948:	defff604 	addi	sp,sp,-40
8020994c:	00a00874 	movhi	r2,32801
80209950:	dc800815 	stw	r18,32(sp)
80209954:	dc400715 	stw	r17,28(sp)
80209958:	dc000615 	stw	r16,24(sp)
8020995c:	108e9804 	addi	r2,r2,14944
80209960:	dfc00915 	stw	ra,36(sp)
80209964:	2021883a 	mov	r16,r4
80209968:	3823883a 	mov	r17,r7
8020996c:	14800017 	ldw	r18,0(r2)
80209970:	28001426 	beq	r5,zero,802099c4 <_wcrtomb_r+0x7c>
80209974:	d9400415 	stw	r5,16(sp)
80209978:	d9800515 	stw	r6,20(sp)
8020997c:	02055e40 	call	802055e4 <__locale_charset>
80209980:	d9800517 	ldw	r6,20(sp)
80209984:	d9400417 	ldw	r5,16(sp)
80209988:	100f883a 	mov	r7,r2
8020998c:	dc400015 	stw	r17,0(sp)
80209990:	8009883a 	mov	r4,r16
80209994:	903ee83a 	callr	r18
80209998:	00ffffc4 	movi	r3,-1
8020999c:	10c0031e 	bne	r2,r3,802099ac <_wcrtomb_r+0x64>
802099a0:	88000015 	stw	zero,0(r17)
802099a4:	00c02284 	movi	r3,138
802099a8:	80c00015 	stw	r3,0(r16)
802099ac:	dfc00917 	ldw	ra,36(sp)
802099b0:	dc800817 	ldw	r18,32(sp)
802099b4:	dc400717 	ldw	r17,28(sp)
802099b8:	dc000617 	ldw	r16,24(sp)
802099bc:	dec00a04 	addi	sp,sp,40
802099c0:	f800283a 	ret
802099c4:	02055e40 	call	802055e4 <__locale_charset>
802099c8:	100f883a 	mov	r7,r2
802099cc:	dc400015 	stw	r17,0(sp)
802099d0:	000d883a 	mov	r6,zero
802099d4:	d9400104 	addi	r5,sp,4
802099d8:	8009883a 	mov	r4,r16
802099dc:	903ee83a 	callr	r18
802099e0:	003fed06 	br	80209998 <__reset+0xfa1e9998>

802099e4 <wcrtomb>:
802099e4:	defff604 	addi	sp,sp,-40
802099e8:	00a00874 	movhi	r2,32801
802099ec:	dc800615 	stw	r18,24(sp)
802099f0:	dc400515 	stw	r17,20(sp)
802099f4:	108e9404 	addi	r2,r2,14928
802099f8:	dfc00915 	stw	ra,36(sp)
802099fc:	dd000815 	stw	r20,32(sp)
80209a00:	dcc00715 	stw	r19,28(sp)
80209a04:	dc000415 	stw	r16,16(sp)
80209a08:	3025883a 	mov	r18,r6
80209a0c:	14400017 	ldw	r17,0(r2)
80209a10:	20001926 	beq	r4,zero,80209a78 <wcrtomb+0x94>
80209a14:	00a00874 	movhi	r2,32801
80209a18:	108e9804 	addi	r2,r2,14944
80209a1c:	15000017 	ldw	r20,0(r2)
80209a20:	2021883a 	mov	r16,r4
80209a24:	2827883a 	mov	r19,r5
80209a28:	02055e40 	call	802055e4 <__locale_charset>
80209a2c:	100f883a 	mov	r7,r2
80209a30:	dc800015 	stw	r18,0(sp)
80209a34:	980d883a 	mov	r6,r19
80209a38:	800b883a 	mov	r5,r16
80209a3c:	8809883a 	mov	r4,r17
80209a40:	a03ee83a 	callr	r20
80209a44:	00ffffc4 	movi	r3,-1
80209a48:	10c0031e 	bne	r2,r3,80209a58 <wcrtomb+0x74>
80209a4c:	90000015 	stw	zero,0(r18)
80209a50:	00c02284 	movi	r3,138
80209a54:	88c00015 	stw	r3,0(r17)
80209a58:	dfc00917 	ldw	ra,36(sp)
80209a5c:	dd000817 	ldw	r20,32(sp)
80209a60:	dcc00717 	ldw	r19,28(sp)
80209a64:	dc800617 	ldw	r18,24(sp)
80209a68:	dc400517 	ldw	r17,20(sp)
80209a6c:	dc000417 	ldw	r16,16(sp)
80209a70:	dec00a04 	addi	sp,sp,40
80209a74:	f800283a 	ret
80209a78:	00a00874 	movhi	r2,32801
80209a7c:	108e9804 	addi	r2,r2,14944
80209a80:	14000017 	ldw	r16,0(r2)
80209a84:	02055e40 	call	802055e4 <__locale_charset>
80209a88:	100f883a 	mov	r7,r2
80209a8c:	dc800015 	stw	r18,0(sp)
80209a90:	000d883a 	mov	r6,zero
80209a94:	d9400104 	addi	r5,sp,4
80209a98:	8809883a 	mov	r4,r17
80209a9c:	803ee83a 	callr	r16
80209aa0:	003fe806 	br	80209a44 <__reset+0xfa1e9a44>

80209aa4 <__ascii_wctomb>:
80209aa4:	28000526 	beq	r5,zero,80209abc <__ascii_wctomb+0x18>
80209aa8:	00803fc4 	movi	r2,255
80209aac:	11800536 	bltu	r2,r6,80209ac4 <__ascii_wctomb+0x20>
80209ab0:	29800005 	stb	r6,0(r5)
80209ab4:	00800044 	movi	r2,1
80209ab8:	f800283a 	ret
80209abc:	0005883a 	mov	r2,zero
80209ac0:	f800283a 	ret
80209ac4:	00802284 	movi	r2,138
80209ac8:	20800015 	stw	r2,0(r4)
80209acc:	00bfffc4 	movi	r2,-1
80209ad0:	f800283a 	ret

80209ad4 <_wctomb_r>:
80209ad4:	00a00874 	movhi	r2,32801
80209ad8:	defff904 	addi	sp,sp,-28
80209adc:	108e9804 	addi	r2,r2,14944
80209ae0:	dfc00615 	stw	ra,24(sp)
80209ae4:	dc400515 	stw	r17,20(sp)
80209ae8:	dc000415 	stw	r16,16(sp)
80209aec:	3823883a 	mov	r17,r7
80209af0:	14000017 	ldw	r16,0(r2)
80209af4:	d9000115 	stw	r4,4(sp)
80209af8:	d9400215 	stw	r5,8(sp)
80209afc:	d9800315 	stw	r6,12(sp)
80209b00:	02055e40 	call	802055e4 <__locale_charset>
80209b04:	d9800317 	ldw	r6,12(sp)
80209b08:	d9400217 	ldw	r5,8(sp)
80209b0c:	d9000117 	ldw	r4,4(sp)
80209b10:	100f883a 	mov	r7,r2
80209b14:	dc400015 	stw	r17,0(sp)
80209b18:	803ee83a 	callr	r16
80209b1c:	dfc00617 	ldw	ra,24(sp)
80209b20:	dc400517 	ldw	r17,20(sp)
80209b24:	dc000417 	ldw	r16,16(sp)
80209b28:	dec00704 	addi	sp,sp,28
80209b2c:	f800283a 	ret

80209b30 <__udivdi3>:
80209b30:	defff504 	addi	sp,sp,-44
80209b34:	dcc00415 	stw	r19,16(sp)
80209b38:	dc000115 	stw	r16,4(sp)
80209b3c:	dfc00a15 	stw	ra,40(sp)
80209b40:	df000915 	stw	fp,36(sp)
80209b44:	ddc00815 	stw	r23,32(sp)
80209b48:	dd800715 	stw	r22,28(sp)
80209b4c:	dd400615 	stw	r21,24(sp)
80209b50:	dd000515 	stw	r20,20(sp)
80209b54:	dc800315 	stw	r18,12(sp)
80209b58:	dc400215 	stw	r17,8(sp)
80209b5c:	2027883a 	mov	r19,r4
80209b60:	2821883a 	mov	r16,r5
80209b64:	3800411e 	bne	r7,zero,80209c6c <__udivdi3+0x13c>
80209b68:	3023883a 	mov	r17,r6
80209b6c:	2025883a 	mov	r18,r4
80209b70:	2980522e 	bgeu	r5,r6,80209cbc <__udivdi3+0x18c>
80209b74:	00bfffd4 	movui	r2,65535
80209b78:	282d883a 	mov	r22,r5
80209b7c:	1180a836 	bltu	r2,r6,80209e20 <__udivdi3+0x2f0>
80209b80:	00803fc4 	movi	r2,255
80209b84:	1185803a 	cmpltu	r2,r2,r6
80209b88:	100490fa 	slli	r2,r2,3
80209b8c:	3086d83a 	srl	r3,r6,r2
80209b90:	01200874 	movhi	r4,32801
80209b94:	2106c504 	addi	r4,r4,6932
80209b98:	20c7883a 	add	r3,r4,r3
80209b9c:	18c00003 	ldbu	r3,0(r3)
80209ba0:	1885883a 	add	r2,r3,r2
80209ba4:	00c00804 	movi	r3,32
80209ba8:	1887c83a 	sub	r3,r3,r2
80209bac:	18000526 	beq	r3,zero,80209bc4 <__udivdi3+0x94>
80209bb0:	80e0983a 	sll	r16,r16,r3
80209bb4:	9884d83a 	srl	r2,r19,r2
80209bb8:	30e2983a 	sll	r17,r6,r3
80209bbc:	98e4983a 	sll	r18,r19,r3
80209bc0:	142cb03a 	or	r22,r2,r16
80209bc4:	882ad43a 	srli	r21,r17,16
80209bc8:	b009883a 	mov	r4,r22
80209bcc:	8d3fffcc 	andi	r20,r17,65535
80209bd0:	a80b883a 	mov	r5,r21
80209bd4:	020a73c0 	call	8020a73c <__umodsi3>
80209bd8:	b009883a 	mov	r4,r22
80209bdc:	a80b883a 	mov	r5,r21
80209be0:	1027883a 	mov	r19,r2
80209be4:	020a6d80 	call	8020a6d8 <__udivsi3>
80209be8:	102d883a 	mov	r22,r2
80209bec:	9826943a 	slli	r19,r19,16
80209bf0:	9004d43a 	srli	r2,r18,16
80209bf4:	a5a1383a 	mul	r16,r20,r22
80209bf8:	14c4b03a 	or	r2,r2,r19
80209bfc:	1400052e 	bgeu	r2,r16,80209c14 <__udivdi3+0xe4>
80209c00:	1445883a 	add	r2,r2,r17
80209c04:	b0ffffc4 	addi	r3,r22,-1
80209c08:	14400136 	bltu	r2,r17,80209c10 <__udivdi3+0xe0>
80209c0c:	14012336 	bltu	r2,r16,8020a09c <__udivdi3+0x56c>
80209c10:	182d883a 	mov	r22,r3
80209c14:	1421c83a 	sub	r16,r2,r16
80209c18:	a80b883a 	mov	r5,r21
80209c1c:	8009883a 	mov	r4,r16
80209c20:	020a73c0 	call	8020a73c <__umodsi3>
80209c24:	1027883a 	mov	r19,r2
80209c28:	a80b883a 	mov	r5,r21
80209c2c:	8009883a 	mov	r4,r16
80209c30:	020a6d80 	call	8020a6d8 <__udivsi3>
80209c34:	9826943a 	slli	r19,r19,16
80209c38:	a0a9383a 	mul	r20,r20,r2
80209c3c:	94bfffcc 	andi	r18,r18,65535
80209c40:	94e4b03a 	or	r18,r18,r19
80209c44:	9500052e 	bgeu	r18,r20,80209c5c <__udivdi3+0x12c>
80209c48:	8ca5883a 	add	r18,r17,r18
80209c4c:	10ffffc4 	addi	r3,r2,-1
80209c50:	9440f136 	bltu	r18,r17,8020a018 <__udivdi3+0x4e8>
80209c54:	9500f02e 	bgeu	r18,r20,8020a018 <__udivdi3+0x4e8>
80209c58:	10bfff84 	addi	r2,r2,-2
80209c5c:	b00c943a 	slli	r6,r22,16
80209c60:	0007883a 	mov	r3,zero
80209c64:	3084b03a 	or	r2,r6,r2
80209c68:	00005906 	br	80209dd0 <__udivdi3+0x2a0>
80209c6c:	29c05636 	bltu	r5,r7,80209dc8 <__udivdi3+0x298>
80209c70:	00bfffd4 	movui	r2,65535
80209c74:	11c0622e 	bgeu	r2,r7,80209e00 <__udivdi3+0x2d0>
80209c78:	00804034 	movhi	r2,256
80209c7c:	10bfffc4 	addi	r2,r2,-1
80209c80:	11c0ee36 	bltu	r2,r7,8020a03c <__udivdi3+0x50c>
80209c84:	00800404 	movi	r2,16
80209c88:	3886d83a 	srl	r3,r7,r2
80209c8c:	01200874 	movhi	r4,32801
80209c90:	2106c504 	addi	r4,r4,6932
80209c94:	20c7883a 	add	r3,r4,r3
80209c98:	18c00003 	ldbu	r3,0(r3)
80209c9c:	05400804 	movi	r21,32
80209ca0:	1885883a 	add	r2,r3,r2
80209ca4:	a8abc83a 	sub	r21,r21,r2
80209ca8:	a800621e 	bne	r21,zero,80209e34 <__udivdi3+0x304>
80209cac:	3c00e936 	bltu	r7,r16,8020a054 <__udivdi3+0x524>
80209cb0:	9985403a 	cmpgeu	r2,r19,r6
80209cb4:	0007883a 	mov	r3,zero
80209cb8:	00004506 	br	80209dd0 <__udivdi3+0x2a0>
80209cbc:	3000041e 	bne	r6,zero,80209cd0 <__udivdi3+0x1a0>
80209cc0:	000b883a 	mov	r5,zero
80209cc4:	01000044 	movi	r4,1
80209cc8:	020a6d80 	call	8020a6d8 <__udivsi3>
80209ccc:	1023883a 	mov	r17,r2
80209cd0:	00bfffd4 	movui	r2,65535
80209cd4:	14404e2e 	bgeu	r2,r17,80209e10 <__udivdi3+0x2e0>
80209cd8:	00804034 	movhi	r2,256
80209cdc:	10bfffc4 	addi	r2,r2,-1
80209ce0:	1440d836 	bltu	r2,r17,8020a044 <__udivdi3+0x514>
80209ce4:	00800404 	movi	r2,16
80209ce8:	8886d83a 	srl	r3,r17,r2
80209cec:	01200874 	movhi	r4,32801
80209cf0:	2106c504 	addi	r4,r4,6932
80209cf4:	20c7883a 	add	r3,r4,r3
80209cf8:	18c00003 	ldbu	r3,0(r3)
80209cfc:	1885883a 	add	r2,r3,r2
80209d00:	00c00804 	movi	r3,32
80209d04:	1887c83a 	sub	r3,r3,r2
80209d08:	18008f1e 	bne	r3,zero,80209f48 <__udivdi3+0x418>
80209d0c:	882ad43a 	srli	r21,r17,16
80209d10:	8461c83a 	sub	r16,r16,r17
80209d14:	8d3fffcc 	andi	r20,r17,65535
80209d18:	00c00044 	movi	r3,1
80209d1c:	8009883a 	mov	r4,r16
80209d20:	a80b883a 	mov	r5,r21
80209d24:	d8c00015 	stw	r3,0(sp)
80209d28:	020a73c0 	call	8020a73c <__umodsi3>
80209d2c:	8009883a 	mov	r4,r16
80209d30:	a80b883a 	mov	r5,r21
80209d34:	1027883a 	mov	r19,r2
80209d38:	020a6d80 	call	8020a6d8 <__udivsi3>
80209d3c:	9826943a 	slli	r19,r19,16
80209d40:	9008d43a 	srli	r4,r18,16
80209d44:	1521383a 	mul	r16,r2,r20
80209d48:	102d883a 	mov	r22,r2
80209d4c:	24c8b03a 	or	r4,r4,r19
80209d50:	d8c00017 	ldw	r3,0(sp)
80209d54:	2400052e 	bgeu	r4,r16,80209d6c <__udivdi3+0x23c>
80209d58:	2449883a 	add	r4,r4,r17
80209d5c:	b0bfffc4 	addi	r2,r22,-1
80209d60:	24400136 	bltu	r4,r17,80209d68 <__udivdi3+0x238>
80209d64:	2400ca36 	bltu	r4,r16,8020a090 <__udivdi3+0x560>
80209d68:	102d883a 	mov	r22,r2
80209d6c:	2421c83a 	sub	r16,r4,r16
80209d70:	a80b883a 	mov	r5,r21
80209d74:	8009883a 	mov	r4,r16
80209d78:	d8c00015 	stw	r3,0(sp)
80209d7c:	020a73c0 	call	8020a73c <__umodsi3>
80209d80:	1027883a 	mov	r19,r2
80209d84:	a80b883a 	mov	r5,r21
80209d88:	8009883a 	mov	r4,r16
80209d8c:	020a6d80 	call	8020a6d8 <__udivsi3>
80209d90:	9826943a 	slli	r19,r19,16
80209d94:	1529383a 	mul	r20,r2,r20
80209d98:	94bfffcc 	andi	r18,r18,65535
80209d9c:	94e4b03a 	or	r18,r18,r19
80209da0:	d8c00017 	ldw	r3,0(sp)
80209da4:	9500052e 	bgeu	r18,r20,80209dbc <__udivdi3+0x28c>
80209da8:	8ca5883a 	add	r18,r17,r18
80209dac:	113fffc4 	addi	r4,r2,-1
80209db0:	94409736 	bltu	r18,r17,8020a010 <__udivdi3+0x4e0>
80209db4:	9500962e 	bgeu	r18,r20,8020a010 <__udivdi3+0x4e0>
80209db8:	10bfff84 	addi	r2,r2,-2
80209dbc:	b00c943a 	slli	r6,r22,16
80209dc0:	3084b03a 	or	r2,r6,r2
80209dc4:	00000206 	br	80209dd0 <__udivdi3+0x2a0>
80209dc8:	0007883a 	mov	r3,zero
80209dcc:	0005883a 	mov	r2,zero
80209dd0:	dfc00a17 	ldw	ra,40(sp)
80209dd4:	df000917 	ldw	fp,36(sp)
80209dd8:	ddc00817 	ldw	r23,32(sp)
80209ddc:	dd800717 	ldw	r22,28(sp)
80209de0:	dd400617 	ldw	r21,24(sp)
80209de4:	dd000517 	ldw	r20,20(sp)
80209de8:	dcc00417 	ldw	r19,16(sp)
80209dec:	dc800317 	ldw	r18,12(sp)
80209df0:	dc400217 	ldw	r17,8(sp)
80209df4:	dc000117 	ldw	r16,4(sp)
80209df8:	dec00b04 	addi	sp,sp,44
80209dfc:	f800283a 	ret
80209e00:	00803fc4 	movi	r2,255
80209e04:	11c5803a 	cmpltu	r2,r2,r7
80209e08:	100490fa 	slli	r2,r2,3
80209e0c:	003f9e06 	br	80209c88 <__reset+0xfa1e9c88>
80209e10:	00803fc4 	movi	r2,255
80209e14:	1445803a 	cmpltu	r2,r2,r17
80209e18:	100490fa 	slli	r2,r2,3
80209e1c:	003fb206 	br	80209ce8 <__reset+0xfa1e9ce8>
80209e20:	00804034 	movhi	r2,256
80209e24:	10bfffc4 	addi	r2,r2,-1
80209e28:	11808836 	bltu	r2,r6,8020a04c <__udivdi3+0x51c>
80209e2c:	00800404 	movi	r2,16
80209e30:	003f5606 	br	80209b8c <__reset+0xfa1e9b8c>
80209e34:	30aed83a 	srl	r23,r6,r2
80209e38:	3d4e983a 	sll	r7,r7,r21
80209e3c:	80acd83a 	srl	r22,r16,r2
80209e40:	9884d83a 	srl	r2,r19,r2
80209e44:	3deeb03a 	or	r23,r7,r23
80209e48:	b824d43a 	srli	r18,r23,16
80209e4c:	8560983a 	sll	r16,r16,r21
80209e50:	b009883a 	mov	r4,r22
80209e54:	900b883a 	mov	r5,r18
80209e58:	3568983a 	sll	r20,r6,r21
80209e5c:	1420b03a 	or	r16,r2,r16
80209e60:	020a73c0 	call	8020a73c <__umodsi3>
80209e64:	b009883a 	mov	r4,r22
80209e68:	900b883a 	mov	r5,r18
80209e6c:	1023883a 	mov	r17,r2
80209e70:	020a6d80 	call	8020a6d8 <__udivsi3>
80209e74:	8808943a 	slli	r4,r17,16
80209e78:	bf3fffcc 	andi	fp,r23,65535
80209e7c:	8006d43a 	srli	r3,r16,16
80209e80:	e0a3383a 	mul	r17,fp,r2
80209e84:	100d883a 	mov	r6,r2
80209e88:	1906b03a 	or	r3,r3,r4
80209e8c:	1c40042e 	bgeu	r3,r17,80209ea0 <__udivdi3+0x370>
80209e90:	1dc7883a 	add	r3,r3,r23
80209e94:	10bfffc4 	addi	r2,r2,-1
80209e98:	1dc0752e 	bgeu	r3,r23,8020a070 <__udivdi3+0x540>
80209e9c:	100d883a 	mov	r6,r2
80209ea0:	1c63c83a 	sub	r17,r3,r17
80209ea4:	900b883a 	mov	r5,r18
80209ea8:	8809883a 	mov	r4,r17
80209eac:	d9800015 	stw	r6,0(sp)
80209eb0:	020a73c0 	call	8020a73c <__umodsi3>
80209eb4:	102d883a 	mov	r22,r2
80209eb8:	8809883a 	mov	r4,r17
80209ebc:	900b883a 	mov	r5,r18
80209ec0:	020a6d80 	call	8020a6d8 <__udivsi3>
80209ec4:	b02c943a 	slli	r22,r22,16
80209ec8:	e089383a 	mul	r4,fp,r2
80209ecc:	843fffcc 	andi	r16,r16,65535
80209ed0:	85a0b03a 	or	r16,r16,r22
80209ed4:	d9800017 	ldw	r6,0(sp)
80209ed8:	8100042e 	bgeu	r16,r4,80209eec <__udivdi3+0x3bc>
80209edc:	85e1883a 	add	r16,r16,r23
80209ee0:	10ffffc4 	addi	r3,r2,-1
80209ee4:	85c05e2e 	bgeu	r16,r23,8020a060 <__udivdi3+0x530>
80209ee8:	1805883a 	mov	r2,r3
80209eec:	300c943a 	slli	r6,r6,16
80209ef0:	a17fffcc 	andi	r5,r20,65535
80209ef4:	a028d43a 	srli	r20,r20,16
80209ef8:	3084b03a 	or	r2,r6,r2
80209efc:	10ffffcc 	andi	r3,r2,65535
80209f00:	100cd43a 	srli	r6,r2,16
80209f04:	194f383a 	mul	r7,r3,r5
80209f08:	1d07383a 	mul	r3,r3,r20
80209f0c:	314b383a 	mul	r5,r6,r5
80209f10:	3810d43a 	srli	r8,r7,16
80209f14:	8121c83a 	sub	r16,r16,r4
80209f18:	1947883a 	add	r3,r3,r5
80209f1c:	40c7883a 	add	r3,r8,r3
80209f20:	350d383a 	mul	r6,r6,r20
80209f24:	1940022e 	bgeu	r3,r5,80209f30 <__udivdi3+0x400>
80209f28:	01000074 	movhi	r4,1
80209f2c:	310d883a 	add	r6,r6,r4
80209f30:	1828d43a 	srli	r20,r3,16
80209f34:	a18d883a 	add	r6,r20,r6
80209f38:	81803e36 	bltu	r16,r6,8020a034 <__udivdi3+0x504>
80209f3c:	81803826 	beq	r16,r6,8020a020 <__udivdi3+0x4f0>
80209f40:	0007883a 	mov	r3,zero
80209f44:	003fa206 	br	80209dd0 <__reset+0xfa1e9dd0>
80209f48:	88e2983a 	sll	r17,r17,r3
80209f4c:	80a8d83a 	srl	r20,r16,r2
80209f50:	80e0983a 	sll	r16,r16,r3
80209f54:	882ad43a 	srli	r21,r17,16
80209f58:	9884d83a 	srl	r2,r19,r2
80209f5c:	a009883a 	mov	r4,r20
80209f60:	a80b883a 	mov	r5,r21
80209f64:	142eb03a 	or	r23,r2,r16
80209f68:	98e4983a 	sll	r18,r19,r3
80209f6c:	020a73c0 	call	8020a73c <__umodsi3>
80209f70:	a009883a 	mov	r4,r20
80209f74:	a80b883a 	mov	r5,r21
80209f78:	1021883a 	mov	r16,r2
80209f7c:	020a6d80 	call	8020a6d8 <__udivsi3>
80209f80:	1039883a 	mov	fp,r2
80209f84:	8d3fffcc 	andi	r20,r17,65535
80209f88:	8020943a 	slli	r16,r16,16
80209f8c:	b804d43a 	srli	r2,r23,16
80209f90:	a72d383a 	mul	r22,r20,fp
80209f94:	1404b03a 	or	r2,r2,r16
80209f98:	1580062e 	bgeu	r2,r22,80209fb4 <__udivdi3+0x484>
80209f9c:	1445883a 	add	r2,r2,r17
80209fa0:	e0ffffc4 	addi	r3,fp,-1
80209fa4:	14403836 	bltu	r2,r17,8020a088 <__udivdi3+0x558>
80209fa8:	1580372e 	bgeu	r2,r22,8020a088 <__udivdi3+0x558>
80209fac:	e73fff84 	addi	fp,fp,-2
80209fb0:	1445883a 	add	r2,r2,r17
80209fb4:	15adc83a 	sub	r22,r2,r22
80209fb8:	a80b883a 	mov	r5,r21
80209fbc:	b009883a 	mov	r4,r22
80209fc0:	020a73c0 	call	8020a73c <__umodsi3>
80209fc4:	1027883a 	mov	r19,r2
80209fc8:	b009883a 	mov	r4,r22
80209fcc:	a80b883a 	mov	r5,r21
80209fd0:	020a6d80 	call	8020a6d8 <__udivsi3>
80209fd4:	9826943a 	slli	r19,r19,16
80209fd8:	a0a1383a 	mul	r16,r20,r2
80209fdc:	b93fffcc 	andi	r4,r23,65535
80209fe0:	24c8b03a 	or	r4,r4,r19
80209fe4:	2400062e 	bgeu	r4,r16,8020a000 <__udivdi3+0x4d0>
80209fe8:	2449883a 	add	r4,r4,r17
80209fec:	10ffffc4 	addi	r3,r2,-1
80209ff0:	24402336 	bltu	r4,r17,8020a080 <__udivdi3+0x550>
80209ff4:	2400222e 	bgeu	r4,r16,8020a080 <__udivdi3+0x550>
80209ff8:	10bfff84 	addi	r2,r2,-2
80209ffc:	2449883a 	add	r4,r4,r17
8020a000:	e038943a 	slli	fp,fp,16
8020a004:	2421c83a 	sub	r16,r4,r16
8020a008:	e086b03a 	or	r3,fp,r2
8020a00c:	003f4306 	br	80209d1c <__reset+0xfa1e9d1c>
8020a010:	2005883a 	mov	r2,r4
8020a014:	003f6906 	br	80209dbc <__reset+0xfa1e9dbc>
8020a018:	1805883a 	mov	r2,r3
8020a01c:	003f0f06 	br	80209c5c <__reset+0xfa1e9c5c>
8020a020:	1806943a 	slli	r3,r3,16
8020a024:	9d66983a 	sll	r19,r19,r21
8020a028:	39ffffcc 	andi	r7,r7,65535
8020a02c:	19c7883a 	add	r3,r3,r7
8020a030:	98ffc32e 	bgeu	r19,r3,80209f40 <__reset+0xfa1e9f40>
8020a034:	10bfffc4 	addi	r2,r2,-1
8020a038:	003fc106 	br	80209f40 <__reset+0xfa1e9f40>
8020a03c:	00800604 	movi	r2,24
8020a040:	003f1106 	br	80209c88 <__reset+0xfa1e9c88>
8020a044:	00800604 	movi	r2,24
8020a048:	003f2706 	br	80209ce8 <__reset+0xfa1e9ce8>
8020a04c:	00800604 	movi	r2,24
8020a050:	003ece06 	br	80209b8c <__reset+0xfa1e9b8c>
8020a054:	0007883a 	mov	r3,zero
8020a058:	00800044 	movi	r2,1
8020a05c:	003f5c06 	br	80209dd0 <__reset+0xfa1e9dd0>
8020a060:	813fa12e 	bgeu	r16,r4,80209ee8 <__reset+0xfa1e9ee8>
8020a064:	10bfff84 	addi	r2,r2,-2
8020a068:	85e1883a 	add	r16,r16,r23
8020a06c:	003f9f06 	br	80209eec <__reset+0xfa1e9eec>
8020a070:	1c7f8a2e 	bgeu	r3,r17,80209e9c <__reset+0xfa1e9e9c>
8020a074:	31bfff84 	addi	r6,r6,-2
8020a078:	1dc7883a 	add	r3,r3,r23
8020a07c:	003f8806 	br	80209ea0 <__reset+0xfa1e9ea0>
8020a080:	1805883a 	mov	r2,r3
8020a084:	003fde06 	br	8020a000 <__reset+0xfa1ea000>
8020a088:	1839883a 	mov	fp,r3
8020a08c:	003fc906 	br	80209fb4 <__reset+0xfa1e9fb4>
8020a090:	b5bfff84 	addi	r22,r22,-2
8020a094:	2449883a 	add	r4,r4,r17
8020a098:	003f3406 	br	80209d6c <__reset+0xfa1e9d6c>
8020a09c:	b5bfff84 	addi	r22,r22,-2
8020a0a0:	1445883a 	add	r2,r2,r17
8020a0a4:	003edb06 	br	80209c14 <__reset+0xfa1e9c14>

8020a0a8 <__umoddi3>:
8020a0a8:	defff404 	addi	sp,sp,-48
8020a0ac:	df000a15 	stw	fp,40(sp)
8020a0b0:	dc400315 	stw	r17,12(sp)
8020a0b4:	dc000215 	stw	r16,8(sp)
8020a0b8:	dfc00b15 	stw	ra,44(sp)
8020a0bc:	ddc00915 	stw	r23,36(sp)
8020a0c0:	dd800815 	stw	r22,32(sp)
8020a0c4:	dd400715 	stw	r21,28(sp)
8020a0c8:	dd000615 	stw	r20,24(sp)
8020a0cc:	dcc00515 	stw	r19,20(sp)
8020a0d0:	dc800415 	stw	r18,16(sp)
8020a0d4:	2021883a 	mov	r16,r4
8020a0d8:	2823883a 	mov	r17,r5
8020a0dc:	2839883a 	mov	fp,r5
8020a0e0:	38003c1e 	bne	r7,zero,8020a1d4 <__umoddi3+0x12c>
8020a0e4:	3027883a 	mov	r19,r6
8020a0e8:	2029883a 	mov	r20,r4
8020a0ec:	2980512e 	bgeu	r5,r6,8020a234 <__umoddi3+0x18c>
8020a0f0:	00bfffd4 	movui	r2,65535
8020a0f4:	11809a36 	bltu	r2,r6,8020a360 <__umoddi3+0x2b8>
8020a0f8:	01003fc4 	movi	r4,255
8020a0fc:	2189803a 	cmpltu	r4,r4,r6
8020a100:	200890fa 	slli	r4,r4,3
8020a104:	3104d83a 	srl	r2,r6,r4
8020a108:	00e00874 	movhi	r3,32801
8020a10c:	18c6c504 	addi	r3,r3,6932
8020a110:	1885883a 	add	r2,r3,r2
8020a114:	10c00003 	ldbu	r3,0(r2)
8020a118:	00800804 	movi	r2,32
8020a11c:	1909883a 	add	r4,r3,r4
8020a120:	1125c83a 	sub	r18,r2,r4
8020a124:	90000526 	beq	r18,zero,8020a13c <__umoddi3+0x94>
8020a128:	8ca2983a 	sll	r17,r17,r18
8020a12c:	8108d83a 	srl	r4,r16,r4
8020a130:	34a6983a 	sll	r19,r6,r18
8020a134:	84a8983a 	sll	r20,r16,r18
8020a138:	2478b03a 	or	fp,r4,r17
8020a13c:	982ed43a 	srli	r23,r19,16
8020a140:	e009883a 	mov	r4,fp
8020a144:	9dbfffcc 	andi	r22,r19,65535
8020a148:	b80b883a 	mov	r5,r23
8020a14c:	020a73c0 	call	8020a73c <__umodsi3>
8020a150:	e009883a 	mov	r4,fp
8020a154:	b80b883a 	mov	r5,r23
8020a158:	102b883a 	mov	r21,r2
8020a15c:	020a6d80 	call	8020a6d8 <__udivsi3>
8020a160:	a806943a 	slli	r3,r21,16
8020a164:	a008d43a 	srli	r4,r20,16
8020a168:	b085383a 	mul	r2,r22,r2
8020a16c:	20c8b03a 	or	r4,r4,r3
8020a170:	2080032e 	bgeu	r4,r2,8020a180 <__umoddi3+0xd8>
8020a174:	24c9883a 	add	r4,r4,r19
8020a178:	24c00136 	bltu	r4,r19,8020a180 <__umoddi3+0xd8>
8020a17c:	20811036 	bltu	r4,r2,8020a5c0 <__umoddi3+0x518>
8020a180:	20abc83a 	sub	r21,r4,r2
8020a184:	b80b883a 	mov	r5,r23
8020a188:	a809883a 	mov	r4,r21
8020a18c:	020a73c0 	call	8020a73c <__umodsi3>
8020a190:	1023883a 	mov	r17,r2
8020a194:	b80b883a 	mov	r5,r23
8020a198:	a809883a 	mov	r4,r21
8020a19c:	020a6d80 	call	8020a6d8 <__udivsi3>
8020a1a0:	8822943a 	slli	r17,r17,16
8020a1a4:	b085383a 	mul	r2,r22,r2
8020a1a8:	a0ffffcc 	andi	r3,r20,65535
8020a1ac:	1c46b03a 	or	r3,r3,r17
8020a1b0:	1880042e 	bgeu	r3,r2,8020a1c4 <__umoddi3+0x11c>
8020a1b4:	1cc7883a 	add	r3,r3,r19
8020a1b8:	1cc00236 	bltu	r3,r19,8020a1c4 <__umoddi3+0x11c>
8020a1bc:	1880012e 	bgeu	r3,r2,8020a1c4 <__umoddi3+0x11c>
8020a1c0:	1cc7883a 	add	r3,r3,r19
8020a1c4:	1885c83a 	sub	r2,r3,r2
8020a1c8:	1484d83a 	srl	r2,r2,r18
8020a1cc:	0007883a 	mov	r3,zero
8020a1d0:	00004f06 	br	8020a310 <__umoddi3+0x268>
8020a1d4:	29c04c36 	bltu	r5,r7,8020a308 <__umoddi3+0x260>
8020a1d8:	00bfffd4 	movui	r2,65535
8020a1dc:	11c0582e 	bgeu	r2,r7,8020a340 <__umoddi3+0x298>
8020a1e0:	00804034 	movhi	r2,256
8020a1e4:	10bfffc4 	addi	r2,r2,-1
8020a1e8:	11c0e736 	bltu	r2,r7,8020a588 <__umoddi3+0x4e0>
8020a1ec:	01000404 	movi	r4,16
8020a1f0:	3904d83a 	srl	r2,r7,r4
8020a1f4:	00e00874 	movhi	r3,32801
8020a1f8:	18c6c504 	addi	r3,r3,6932
8020a1fc:	1885883a 	add	r2,r3,r2
8020a200:	14c00003 	ldbu	r19,0(r2)
8020a204:	00c00804 	movi	r3,32
8020a208:	9927883a 	add	r19,r19,r4
8020a20c:	1ce9c83a 	sub	r20,r3,r19
8020a210:	a000581e 	bne	r20,zero,8020a374 <__umoddi3+0x2cc>
8020a214:	3c400136 	bltu	r7,r17,8020a21c <__umoddi3+0x174>
8020a218:	8180eb36 	bltu	r16,r6,8020a5c8 <__umoddi3+0x520>
8020a21c:	8185c83a 	sub	r2,r16,r6
8020a220:	89e3c83a 	sub	r17,r17,r7
8020a224:	8089803a 	cmpltu	r4,r16,r2
8020a228:	8939c83a 	sub	fp,r17,r4
8020a22c:	e007883a 	mov	r3,fp
8020a230:	00003706 	br	8020a310 <__umoddi3+0x268>
8020a234:	3000041e 	bne	r6,zero,8020a248 <__umoddi3+0x1a0>
8020a238:	000b883a 	mov	r5,zero
8020a23c:	01000044 	movi	r4,1
8020a240:	020a6d80 	call	8020a6d8 <__udivsi3>
8020a244:	1027883a 	mov	r19,r2
8020a248:	00bfffd4 	movui	r2,65535
8020a24c:	14c0402e 	bgeu	r2,r19,8020a350 <__umoddi3+0x2a8>
8020a250:	00804034 	movhi	r2,256
8020a254:	10bfffc4 	addi	r2,r2,-1
8020a258:	14c0cd36 	bltu	r2,r19,8020a590 <__umoddi3+0x4e8>
8020a25c:	00800404 	movi	r2,16
8020a260:	9886d83a 	srl	r3,r19,r2
8020a264:	01200874 	movhi	r4,32801
8020a268:	2106c504 	addi	r4,r4,6932
8020a26c:	20c7883a 	add	r3,r4,r3
8020a270:	18c00003 	ldbu	r3,0(r3)
8020a274:	1887883a 	add	r3,r3,r2
8020a278:	00800804 	movi	r2,32
8020a27c:	10e5c83a 	sub	r18,r2,r3
8020a280:	9000901e 	bne	r18,zero,8020a4c4 <__umoddi3+0x41c>
8020a284:	982cd43a 	srli	r22,r19,16
8020a288:	8ce3c83a 	sub	r17,r17,r19
8020a28c:	9d7fffcc 	andi	r21,r19,65535
8020a290:	b00b883a 	mov	r5,r22
8020a294:	8809883a 	mov	r4,r17
8020a298:	020a73c0 	call	8020a73c <__umodsi3>
8020a29c:	8809883a 	mov	r4,r17
8020a2a0:	b00b883a 	mov	r5,r22
8020a2a4:	1021883a 	mov	r16,r2
8020a2a8:	020a6d80 	call	8020a6d8 <__udivsi3>
8020a2ac:	8006943a 	slli	r3,r16,16
8020a2b0:	a008d43a 	srli	r4,r20,16
8020a2b4:	1545383a 	mul	r2,r2,r21
8020a2b8:	20c8b03a 	or	r4,r4,r3
8020a2bc:	2080042e 	bgeu	r4,r2,8020a2d0 <__umoddi3+0x228>
8020a2c0:	24c9883a 	add	r4,r4,r19
8020a2c4:	24c00236 	bltu	r4,r19,8020a2d0 <__umoddi3+0x228>
8020a2c8:	2080012e 	bgeu	r4,r2,8020a2d0 <__umoddi3+0x228>
8020a2cc:	24c9883a 	add	r4,r4,r19
8020a2d0:	20a1c83a 	sub	r16,r4,r2
8020a2d4:	b00b883a 	mov	r5,r22
8020a2d8:	8009883a 	mov	r4,r16
8020a2dc:	020a73c0 	call	8020a73c <__umodsi3>
8020a2e0:	1023883a 	mov	r17,r2
8020a2e4:	b00b883a 	mov	r5,r22
8020a2e8:	8009883a 	mov	r4,r16
8020a2ec:	020a6d80 	call	8020a6d8 <__udivsi3>
8020a2f0:	8822943a 	slli	r17,r17,16
8020a2f4:	1545383a 	mul	r2,r2,r21
8020a2f8:	a53fffcc 	andi	r20,r20,65535
8020a2fc:	a446b03a 	or	r3,r20,r17
8020a300:	18bfb02e 	bgeu	r3,r2,8020a1c4 <__reset+0xfa1ea1c4>
8020a304:	003fab06 	br	8020a1b4 <__reset+0xfa1ea1b4>
8020a308:	2005883a 	mov	r2,r4
8020a30c:	2807883a 	mov	r3,r5
8020a310:	dfc00b17 	ldw	ra,44(sp)
8020a314:	df000a17 	ldw	fp,40(sp)
8020a318:	ddc00917 	ldw	r23,36(sp)
8020a31c:	dd800817 	ldw	r22,32(sp)
8020a320:	dd400717 	ldw	r21,28(sp)
8020a324:	dd000617 	ldw	r20,24(sp)
8020a328:	dcc00517 	ldw	r19,20(sp)
8020a32c:	dc800417 	ldw	r18,16(sp)
8020a330:	dc400317 	ldw	r17,12(sp)
8020a334:	dc000217 	ldw	r16,8(sp)
8020a338:	dec00c04 	addi	sp,sp,48
8020a33c:	f800283a 	ret
8020a340:	04c03fc4 	movi	r19,255
8020a344:	99c9803a 	cmpltu	r4,r19,r7
8020a348:	200890fa 	slli	r4,r4,3
8020a34c:	003fa806 	br	8020a1f0 <__reset+0xfa1ea1f0>
8020a350:	00803fc4 	movi	r2,255
8020a354:	14c5803a 	cmpltu	r2,r2,r19
8020a358:	100490fa 	slli	r2,r2,3
8020a35c:	003fc006 	br	8020a260 <__reset+0xfa1ea260>
8020a360:	00804034 	movhi	r2,256
8020a364:	10bfffc4 	addi	r2,r2,-1
8020a368:	11808b36 	bltu	r2,r6,8020a598 <__umoddi3+0x4f0>
8020a36c:	01000404 	movi	r4,16
8020a370:	003f6406 	br	8020a104 <__reset+0xfa1ea104>
8020a374:	34c4d83a 	srl	r2,r6,r19
8020a378:	3d0e983a 	sll	r7,r7,r20
8020a37c:	8cf8d83a 	srl	fp,r17,r19
8020a380:	8d10983a 	sll	r8,r17,r20
8020a384:	38aab03a 	or	r21,r7,r2
8020a388:	a82cd43a 	srli	r22,r21,16
8020a38c:	84e2d83a 	srl	r17,r16,r19
8020a390:	e009883a 	mov	r4,fp
8020a394:	b00b883a 	mov	r5,r22
8020a398:	8a22b03a 	or	r17,r17,r8
8020a39c:	3524983a 	sll	r18,r6,r20
8020a3a0:	020a73c0 	call	8020a73c <__umodsi3>
8020a3a4:	e009883a 	mov	r4,fp
8020a3a8:	b00b883a 	mov	r5,r22
8020a3ac:	102f883a 	mov	r23,r2
8020a3b0:	020a6d80 	call	8020a6d8 <__udivsi3>
8020a3b4:	100d883a 	mov	r6,r2
8020a3b8:	b808943a 	slli	r4,r23,16
8020a3bc:	aa3fffcc 	andi	r8,r21,65535
8020a3c0:	8804d43a 	srli	r2,r17,16
8020a3c4:	41af383a 	mul	r23,r8,r6
8020a3c8:	8520983a 	sll	r16,r16,r20
8020a3cc:	1104b03a 	or	r2,r2,r4
8020a3d0:	15c0042e 	bgeu	r2,r23,8020a3e4 <__umoddi3+0x33c>
8020a3d4:	1545883a 	add	r2,r2,r21
8020a3d8:	30ffffc4 	addi	r3,r6,-1
8020a3dc:	1540742e 	bgeu	r2,r21,8020a5b0 <__umoddi3+0x508>
8020a3e0:	180d883a 	mov	r6,r3
8020a3e4:	15efc83a 	sub	r23,r2,r23
8020a3e8:	b00b883a 	mov	r5,r22
8020a3ec:	b809883a 	mov	r4,r23
8020a3f0:	d9800115 	stw	r6,4(sp)
8020a3f4:	da000015 	stw	r8,0(sp)
8020a3f8:	020a73c0 	call	8020a73c <__umodsi3>
8020a3fc:	b00b883a 	mov	r5,r22
8020a400:	b809883a 	mov	r4,r23
8020a404:	1039883a 	mov	fp,r2
8020a408:	020a6d80 	call	8020a6d8 <__udivsi3>
8020a40c:	da000017 	ldw	r8,0(sp)
8020a410:	e038943a 	slli	fp,fp,16
8020a414:	100b883a 	mov	r5,r2
8020a418:	4089383a 	mul	r4,r8,r2
8020a41c:	8a3fffcc 	andi	r8,r17,65535
8020a420:	4710b03a 	or	r8,r8,fp
8020a424:	d9800117 	ldw	r6,4(sp)
8020a428:	4100042e 	bgeu	r8,r4,8020a43c <__umoddi3+0x394>
8020a42c:	4551883a 	add	r8,r8,r21
8020a430:	10bfffc4 	addi	r2,r2,-1
8020a434:	45405a2e 	bgeu	r8,r21,8020a5a0 <__umoddi3+0x4f8>
8020a438:	100b883a 	mov	r5,r2
8020a43c:	300c943a 	slli	r6,r6,16
8020a440:	91ffffcc 	andi	r7,r18,65535
8020a444:	9004d43a 	srli	r2,r18,16
8020a448:	314cb03a 	or	r6,r6,r5
8020a44c:	317fffcc 	andi	r5,r6,65535
8020a450:	300cd43a 	srli	r6,r6,16
8020a454:	29d3383a 	mul	r9,r5,r7
8020a458:	288b383a 	mul	r5,r5,r2
8020a45c:	31cf383a 	mul	r7,r6,r7
8020a460:	4806d43a 	srli	r3,r9,16
8020a464:	4111c83a 	sub	r8,r8,r4
8020a468:	29cb883a 	add	r5,r5,r7
8020a46c:	194b883a 	add	r5,r3,r5
8020a470:	3085383a 	mul	r2,r6,r2
8020a474:	29c0022e 	bgeu	r5,r7,8020a480 <__umoddi3+0x3d8>
8020a478:	00c00074 	movhi	r3,1
8020a47c:	10c5883a 	add	r2,r2,r3
8020a480:	2808d43a 	srli	r4,r5,16
8020a484:	280a943a 	slli	r5,r5,16
8020a488:	4a7fffcc 	andi	r9,r9,65535
8020a48c:	2085883a 	add	r2,r4,r2
8020a490:	2a4b883a 	add	r5,r5,r9
8020a494:	40803636 	bltu	r8,r2,8020a570 <__umoddi3+0x4c8>
8020a498:	40804d26 	beq	r8,r2,8020a5d0 <__umoddi3+0x528>
8020a49c:	4089c83a 	sub	r4,r8,r2
8020a4a0:	280f883a 	mov	r7,r5
8020a4a4:	81cfc83a 	sub	r7,r16,r7
8020a4a8:	81c7803a 	cmpltu	r3,r16,r7
8020a4ac:	20c7c83a 	sub	r3,r4,r3
8020a4b0:	1cc4983a 	sll	r2,r3,r19
8020a4b4:	3d0ed83a 	srl	r7,r7,r20
8020a4b8:	1d06d83a 	srl	r3,r3,r20
8020a4bc:	11c4b03a 	or	r2,r2,r7
8020a4c0:	003f9306 	br	8020a310 <__reset+0xfa1ea310>
8020a4c4:	9ca6983a 	sll	r19,r19,r18
8020a4c8:	88e8d83a 	srl	r20,r17,r3
8020a4cc:	80c4d83a 	srl	r2,r16,r3
8020a4d0:	982cd43a 	srli	r22,r19,16
8020a4d4:	8ca2983a 	sll	r17,r17,r18
8020a4d8:	a009883a 	mov	r4,r20
8020a4dc:	b00b883a 	mov	r5,r22
8020a4e0:	1478b03a 	or	fp,r2,r17
8020a4e4:	020a73c0 	call	8020a73c <__umodsi3>
8020a4e8:	a009883a 	mov	r4,r20
8020a4ec:	b00b883a 	mov	r5,r22
8020a4f0:	1023883a 	mov	r17,r2
8020a4f4:	020a6d80 	call	8020a6d8 <__udivsi3>
8020a4f8:	9d7fffcc 	andi	r21,r19,65535
8020a4fc:	880a943a 	slli	r5,r17,16
8020a500:	e008d43a 	srli	r4,fp,16
8020a504:	a885383a 	mul	r2,r21,r2
8020a508:	84a8983a 	sll	r20,r16,r18
8020a50c:	2148b03a 	or	r4,r4,r5
8020a510:	2080042e 	bgeu	r4,r2,8020a524 <__umoddi3+0x47c>
8020a514:	24c9883a 	add	r4,r4,r19
8020a518:	24c00236 	bltu	r4,r19,8020a524 <__umoddi3+0x47c>
8020a51c:	2080012e 	bgeu	r4,r2,8020a524 <__umoddi3+0x47c>
8020a520:	24c9883a 	add	r4,r4,r19
8020a524:	20a3c83a 	sub	r17,r4,r2
8020a528:	b00b883a 	mov	r5,r22
8020a52c:	8809883a 	mov	r4,r17
8020a530:	020a73c0 	call	8020a73c <__umodsi3>
8020a534:	102f883a 	mov	r23,r2
8020a538:	8809883a 	mov	r4,r17
8020a53c:	b00b883a 	mov	r5,r22
8020a540:	020a6d80 	call	8020a6d8 <__udivsi3>
8020a544:	b82e943a 	slli	r23,r23,16
8020a548:	a885383a 	mul	r2,r21,r2
8020a54c:	e13fffcc 	andi	r4,fp,65535
8020a550:	25c8b03a 	or	r4,r4,r23
8020a554:	2080042e 	bgeu	r4,r2,8020a568 <__umoddi3+0x4c0>
8020a558:	24c9883a 	add	r4,r4,r19
8020a55c:	24c00236 	bltu	r4,r19,8020a568 <__umoddi3+0x4c0>
8020a560:	2080012e 	bgeu	r4,r2,8020a568 <__umoddi3+0x4c0>
8020a564:	24c9883a 	add	r4,r4,r19
8020a568:	20a3c83a 	sub	r17,r4,r2
8020a56c:	003f4806 	br	8020a290 <__reset+0xfa1ea290>
8020a570:	2c8fc83a 	sub	r7,r5,r18
8020a574:	1545c83a 	sub	r2,r2,r21
8020a578:	29cb803a 	cmpltu	r5,r5,r7
8020a57c:	1145c83a 	sub	r2,r2,r5
8020a580:	4089c83a 	sub	r4,r8,r2
8020a584:	003fc706 	br	8020a4a4 <__reset+0xfa1ea4a4>
8020a588:	01000604 	movi	r4,24
8020a58c:	003f1806 	br	8020a1f0 <__reset+0xfa1ea1f0>
8020a590:	00800604 	movi	r2,24
8020a594:	003f3206 	br	8020a260 <__reset+0xfa1ea260>
8020a598:	01000604 	movi	r4,24
8020a59c:	003ed906 	br	8020a104 <__reset+0xfa1ea104>
8020a5a0:	413fa52e 	bgeu	r8,r4,8020a438 <__reset+0xfa1ea438>
8020a5a4:	297fff84 	addi	r5,r5,-2
8020a5a8:	4551883a 	add	r8,r8,r21
8020a5ac:	003fa306 	br	8020a43c <__reset+0xfa1ea43c>
8020a5b0:	15ff8b2e 	bgeu	r2,r23,8020a3e0 <__reset+0xfa1ea3e0>
8020a5b4:	31bfff84 	addi	r6,r6,-2
8020a5b8:	1545883a 	add	r2,r2,r21
8020a5bc:	003f8906 	br	8020a3e4 <__reset+0xfa1ea3e4>
8020a5c0:	24c9883a 	add	r4,r4,r19
8020a5c4:	003eee06 	br	8020a180 <__reset+0xfa1ea180>
8020a5c8:	8005883a 	mov	r2,r16
8020a5cc:	003f1706 	br	8020a22c <__reset+0xfa1ea22c>
8020a5d0:	817fe736 	bltu	r16,r5,8020a570 <__reset+0xfa1ea570>
8020a5d4:	280f883a 	mov	r7,r5
8020a5d8:	0009883a 	mov	r4,zero
8020a5dc:	003fb106 	br	8020a4a4 <__reset+0xfa1ea4a4>

8020a5e0 <__divsi3>:
8020a5e0:	20001b16 	blt	r4,zero,8020a650 <__divsi3+0x70>
8020a5e4:	000f883a 	mov	r7,zero
8020a5e8:	28001616 	blt	r5,zero,8020a644 <__divsi3+0x64>
8020a5ec:	200d883a 	mov	r6,r4
8020a5f0:	29001a2e 	bgeu	r5,r4,8020a65c <__divsi3+0x7c>
8020a5f4:	00800804 	movi	r2,32
8020a5f8:	00c00044 	movi	r3,1
8020a5fc:	00000106 	br	8020a604 <__divsi3+0x24>
8020a600:	10000d26 	beq	r2,zero,8020a638 <__divsi3+0x58>
8020a604:	294b883a 	add	r5,r5,r5
8020a608:	10bfffc4 	addi	r2,r2,-1
8020a60c:	18c7883a 	add	r3,r3,r3
8020a610:	293ffb36 	bltu	r5,r4,8020a600 <__reset+0xfa1ea600>
8020a614:	0005883a 	mov	r2,zero
8020a618:	18000726 	beq	r3,zero,8020a638 <__divsi3+0x58>
8020a61c:	0005883a 	mov	r2,zero
8020a620:	31400236 	bltu	r6,r5,8020a62c <__divsi3+0x4c>
8020a624:	314dc83a 	sub	r6,r6,r5
8020a628:	10c4b03a 	or	r2,r2,r3
8020a62c:	1806d07a 	srli	r3,r3,1
8020a630:	280ad07a 	srli	r5,r5,1
8020a634:	183ffa1e 	bne	r3,zero,8020a620 <__reset+0xfa1ea620>
8020a638:	38000126 	beq	r7,zero,8020a640 <__divsi3+0x60>
8020a63c:	0085c83a 	sub	r2,zero,r2
8020a640:	f800283a 	ret
8020a644:	014bc83a 	sub	r5,zero,r5
8020a648:	39c0005c 	xori	r7,r7,1
8020a64c:	003fe706 	br	8020a5ec <__reset+0xfa1ea5ec>
8020a650:	0109c83a 	sub	r4,zero,r4
8020a654:	01c00044 	movi	r7,1
8020a658:	003fe306 	br	8020a5e8 <__reset+0xfa1ea5e8>
8020a65c:	00c00044 	movi	r3,1
8020a660:	003fee06 	br	8020a61c <__reset+0xfa1ea61c>

8020a664 <__modsi3>:
8020a664:	20001716 	blt	r4,zero,8020a6c4 <__modsi3+0x60>
8020a668:	000f883a 	mov	r7,zero
8020a66c:	2005883a 	mov	r2,r4
8020a670:	28001216 	blt	r5,zero,8020a6bc <__modsi3+0x58>
8020a674:	2900162e 	bgeu	r5,r4,8020a6d0 <__modsi3+0x6c>
8020a678:	01800804 	movi	r6,32
8020a67c:	00c00044 	movi	r3,1
8020a680:	00000106 	br	8020a688 <__modsi3+0x24>
8020a684:	30000a26 	beq	r6,zero,8020a6b0 <__modsi3+0x4c>
8020a688:	294b883a 	add	r5,r5,r5
8020a68c:	31bfffc4 	addi	r6,r6,-1
8020a690:	18c7883a 	add	r3,r3,r3
8020a694:	293ffb36 	bltu	r5,r4,8020a684 <__reset+0xfa1ea684>
8020a698:	18000526 	beq	r3,zero,8020a6b0 <__modsi3+0x4c>
8020a69c:	1806d07a 	srli	r3,r3,1
8020a6a0:	11400136 	bltu	r2,r5,8020a6a8 <__modsi3+0x44>
8020a6a4:	1145c83a 	sub	r2,r2,r5
8020a6a8:	280ad07a 	srli	r5,r5,1
8020a6ac:	183ffb1e 	bne	r3,zero,8020a69c <__reset+0xfa1ea69c>
8020a6b0:	38000126 	beq	r7,zero,8020a6b8 <__modsi3+0x54>
8020a6b4:	0085c83a 	sub	r2,zero,r2
8020a6b8:	f800283a 	ret
8020a6bc:	014bc83a 	sub	r5,zero,r5
8020a6c0:	003fec06 	br	8020a674 <__reset+0xfa1ea674>
8020a6c4:	0109c83a 	sub	r4,zero,r4
8020a6c8:	01c00044 	movi	r7,1
8020a6cc:	003fe706 	br	8020a66c <__reset+0xfa1ea66c>
8020a6d0:	00c00044 	movi	r3,1
8020a6d4:	003ff106 	br	8020a69c <__reset+0xfa1ea69c>

8020a6d8 <__udivsi3>:
8020a6d8:	200d883a 	mov	r6,r4
8020a6dc:	2900152e 	bgeu	r5,r4,8020a734 <__udivsi3+0x5c>
8020a6e0:	28001416 	blt	r5,zero,8020a734 <__udivsi3+0x5c>
8020a6e4:	00800804 	movi	r2,32
8020a6e8:	00c00044 	movi	r3,1
8020a6ec:	00000206 	br	8020a6f8 <__udivsi3+0x20>
8020a6f0:	10000e26 	beq	r2,zero,8020a72c <__udivsi3+0x54>
8020a6f4:	28000516 	blt	r5,zero,8020a70c <__udivsi3+0x34>
8020a6f8:	294b883a 	add	r5,r5,r5
8020a6fc:	10bfffc4 	addi	r2,r2,-1
8020a700:	18c7883a 	add	r3,r3,r3
8020a704:	293ffa36 	bltu	r5,r4,8020a6f0 <__reset+0xfa1ea6f0>
8020a708:	18000826 	beq	r3,zero,8020a72c <__udivsi3+0x54>
8020a70c:	0005883a 	mov	r2,zero
8020a710:	31400236 	bltu	r6,r5,8020a71c <__udivsi3+0x44>
8020a714:	314dc83a 	sub	r6,r6,r5
8020a718:	10c4b03a 	or	r2,r2,r3
8020a71c:	1806d07a 	srli	r3,r3,1
8020a720:	280ad07a 	srli	r5,r5,1
8020a724:	183ffa1e 	bne	r3,zero,8020a710 <__reset+0xfa1ea710>
8020a728:	f800283a 	ret
8020a72c:	0005883a 	mov	r2,zero
8020a730:	f800283a 	ret
8020a734:	00c00044 	movi	r3,1
8020a738:	003ff406 	br	8020a70c <__reset+0xfa1ea70c>

8020a73c <__umodsi3>:
8020a73c:	2005883a 	mov	r2,r4
8020a740:	2900122e 	bgeu	r5,r4,8020a78c <__umodsi3+0x50>
8020a744:	28001116 	blt	r5,zero,8020a78c <__umodsi3+0x50>
8020a748:	01800804 	movi	r6,32
8020a74c:	00c00044 	movi	r3,1
8020a750:	00000206 	br	8020a75c <__umodsi3+0x20>
8020a754:	30000c26 	beq	r6,zero,8020a788 <__umodsi3+0x4c>
8020a758:	28000516 	blt	r5,zero,8020a770 <__umodsi3+0x34>
8020a75c:	294b883a 	add	r5,r5,r5
8020a760:	31bfffc4 	addi	r6,r6,-1
8020a764:	18c7883a 	add	r3,r3,r3
8020a768:	293ffa36 	bltu	r5,r4,8020a754 <__reset+0xfa1ea754>
8020a76c:	18000626 	beq	r3,zero,8020a788 <__umodsi3+0x4c>
8020a770:	1806d07a 	srli	r3,r3,1
8020a774:	11400136 	bltu	r2,r5,8020a77c <__umodsi3+0x40>
8020a778:	1145c83a 	sub	r2,r2,r5
8020a77c:	280ad07a 	srli	r5,r5,1
8020a780:	183ffb1e 	bne	r3,zero,8020a770 <__reset+0xfa1ea770>
8020a784:	f800283a 	ret
8020a788:	f800283a 	ret
8020a78c:	00c00044 	movi	r3,1
8020a790:	003ff706 	br	8020a770 <__reset+0xfa1ea770>

8020a794 <__adddf3>:
8020a794:	02c00434 	movhi	r11,16
8020a798:	5affffc4 	addi	r11,r11,-1
8020a79c:	2806d7fa 	srli	r3,r5,31
8020a7a0:	2ad4703a 	and	r10,r5,r11
8020a7a4:	3ad2703a 	and	r9,r7,r11
8020a7a8:	3804d53a 	srli	r2,r7,20
8020a7ac:	3018d77a 	srli	r12,r6,29
8020a7b0:	280ad53a 	srli	r5,r5,20
8020a7b4:	501490fa 	slli	r10,r10,3
8020a7b8:	2010d77a 	srli	r8,r4,29
8020a7bc:	481290fa 	slli	r9,r9,3
8020a7c0:	380ed7fa 	srli	r7,r7,31
8020a7c4:	defffb04 	addi	sp,sp,-20
8020a7c8:	dc800215 	stw	r18,8(sp)
8020a7cc:	dc400115 	stw	r17,4(sp)
8020a7d0:	dc000015 	stw	r16,0(sp)
8020a7d4:	dfc00415 	stw	ra,16(sp)
8020a7d8:	dcc00315 	stw	r19,12(sp)
8020a7dc:	1c803fcc 	andi	r18,r3,255
8020a7e0:	2c01ffcc 	andi	r16,r5,2047
8020a7e4:	5210b03a 	or	r8,r10,r8
8020a7e8:	202290fa 	slli	r17,r4,3
8020a7ec:	1081ffcc 	andi	r2,r2,2047
8020a7f0:	4b12b03a 	or	r9,r9,r12
8020a7f4:	300c90fa 	slli	r6,r6,3
8020a7f8:	91c07526 	beq	r18,r7,8020a9d0 <__adddf3+0x23c>
8020a7fc:	8087c83a 	sub	r3,r16,r2
8020a800:	00c0ab0e 	bge	zero,r3,8020aab0 <__adddf3+0x31c>
8020a804:	10002a1e 	bne	r2,zero,8020a8b0 <__adddf3+0x11c>
8020a808:	4984b03a 	or	r2,r9,r6
8020a80c:	1000961e 	bne	r2,zero,8020aa68 <__adddf3+0x2d4>
8020a810:	888001cc 	andi	r2,r17,7
8020a814:	10000726 	beq	r2,zero,8020a834 <__adddf3+0xa0>
8020a818:	888003cc 	andi	r2,r17,15
8020a81c:	00c00104 	movi	r3,4
8020a820:	10c00426 	beq	r2,r3,8020a834 <__adddf3+0xa0>
8020a824:	88c7883a 	add	r3,r17,r3
8020a828:	1c63803a 	cmpltu	r17,r3,r17
8020a82c:	4451883a 	add	r8,r8,r17
8020a830:	1823883a 	mov	r17,r3
8020a834:	4080202c 	andhi	r2,r8,128
8020a838:	10005926 	beq	r2,zero,8020a9a0 <__adddf3+0x20c>
8020a83c:	84000044 	addi	r16,r16,1
8020a840:	0081ffc4 	movi	r2,2047
8020a844:	8080ba26 	beq	r16,r2,8020ab30 <__adddf3+0x39c>
8020a848:	00bfe034 	movhi	r2,65408
8020a84c:	10bfffc4 	addi	r2,r2,-1
8020a850:	4090703a 	and	r8,r8,r2
8020a854:	4004977a 	slli	r2,r8,29
8020a858:	4010927a 	slli	r8,r8,9
8020a85c:	8822d0fa 	srli	r17,r17,3
8020a860:	8401ffcc 	andi	r16,r16,2047
8020a864:	4010d33a 	srli	r8,r8,12
8020a868:	9007883a 	mov	r3,r18
8020a86c:	1444b03a 	or	r2,r2,r17
8020a870:	8401ffcc 	andi	r16,r16,2047
8020a874:	8020953a 	slli	r16,r16,20
8020a878:	18c03fcc 	andi	r3,r3,255
8020a87c:	01000434 	movhi	r4,16
8020a880:	213fffc4 	addi	r4,r4,-1
8020a884:	180697fa 	slli	r3,r3,31
8020a888:	4110703a 	and	r8,r8,r4
8020a88c:	4410b03a 	or	r8,r8,r16
8020a890:	40c6b03a 	or	r3,r8,r3
8020a894:	dfc00417 	ldw	ra,16(sp)
8020a898:	dcc00317 	ldw	r19,12(sp)
8020a89c:	dc800217 	ldw	r18,8(sp)
8020a8a0:	dc400117 	ldw	r17,4(sp)
8020a8a4:	dc000017 	ldw	r16,0(sp)
8020a8a8:	dec00504 	addi	sp,sp,20
8020a8ac:	f800283a 	ret
8020a8b0:	0081ffc4 	movi	r2,2047
8020a8b4:	80bfd626 	beq	r16,r2,8020a810 <__reset+0xfa1ea810>
8020a8b8:	4a402034 	orhi	r9,r9,128
8020a8bc:	00800e04 	movi	r2,56
8020a8c0:	10c09f16 	blt	r2,r3,8020ab40 <__adddf3+0x3ac>
8020a8c4:	008007c4 	movi	r2,31
8020a8c8:	10c0c216 	blt	r2,r3,8020abd4 <__adddf3+0x440>
8020a8cc:	00800804 	movi	r2,32
8020a8d0:	10c5c83a 	sub	r2,r2,r3
8020a8d4:	488a983a 	sll	r5,r9,r2
8020a8d8:	30c8d83a 	srl	r4,r6,r3
8020a8dc:	3084983a 	sll	r2,r6,r2
8020a8e0:	48c6d83a 	srl	r3,r9,r3
8020a8e4:	290cb03a 	or	r6,r5,r4
8020a8e8:	1004c03a 	cmpne	r2,r2,zero
8020a8ec:	308cb03a 	or	r6,r6,r2
8020a8f0:	898dc83a 	sub	r6,r17,r6
8020a8f4:	89a3803a 	cmpltu	r17,r17,r6
8020a8f8:	40d1c83a 	sub	r8,r8,r3
8020a8fc:	4451c83a 	sub	r8,r8,r17
8020a900:	3023883a 	mov	r17,r6
8020a904:	4080202c 	andhi	r2,r8,128
8020a908:	10002326 	beq	r2,zero,8020a998 <__adddf3+0x204>
8020a90c:	04c02034 	movhi	r19,128
8020a910:	9cffffc4 	addi	r19,r19,-1
8020a914:	44e6703a 	and	r19,r8,r19
8020a918:	98007626 	beq	r19,zero,8020aaf4 <__adddf3+0x360>
8020a91c:	9809883a 	mov	r4,r19
8020a920:	020cd980 	call	8020cd98 <__clzsi2>
8020a924:	10fffe04 	addi	r3,r2,-8
8020a928:	010007c4 	movi	r4,31
8020a92c:	20c07716 	blt	r4,r3,8020ab0c <__adddf3+0x378>
8020a930:	00800804 	movi	r2,32
8020a934:	10c5c83a 	sub	r2,r2,r3
8020a938:	8884d83a 	srl	r2,r17,r2
8020a93c:	98d0983a 	sll	r8,r19,r3
8020a940:	88e2983a 	sll	r17,r17,r3
8020a944:	1204b03a 	or	r2,r2,r8
8020a948:	1c007416 	blt	r3,r16,8020ab1c <__adddf3+0x388>
8020a94c:	1c21c83a 	sub	r16,r3,r16
8020a950:	82000044 	addi	r8,r16,1
8020a954:	00c007c4 	movi	r3,31
8020a958:	1a009116 	blt	r3,r8,8020aba0 <__adddf3+0x40c>
8020a95c:	00c00804 	movi	r3,32
8020a960:	1a07c83a 	sub	r3,r3,r8
8020a964:	8a08d83a 	srl	r4,r17,r8
8020a968:	88e2983a 	sll	r17,r17,r3
8020a96c:	10c6983a 	sll	r3,r2,r3
8020a970:	1210d83a 	srl	r8,r2,r8
8020a974:	8804c03a 	cmpne	r2,r17,zero
8020a978:	1906b03a 	or	r3,r3,r4
8020a97c:	18a2b03a 	or	r17,r3,r2
8020a980:	0021883a 	mov	r16,zero
8020a984:	003fa206 	br	8020a810 <__reset+0xfa1ea810>
8020a988:	1890b03a 	or	r8,r3,r2
8020a98c:	40017d26 	beq	r8,zero,8020af84 <__adddf3+0x7f0>
8020a990:	1011883a 	mov	r8,r2
8020a994:	1823883a 	mov	r17,r3
8020a998:	888001cc 	andi	r2,r17,7
8020a99c:	103f9e1e 	bne	r2,zero,8020a818 <__reset+0xfa1ea818>
8020a9a0:	4004977a 	slli	r2,r8,29
8020a9a4:	8822d0fa 	srli	r17,r17,3
8020a9a8:	4010d0fa 	srli	r8,r8,3
8020a9ac:	9007883a 	mov	r3,r18
8020a9b0:	1444b03a 	or	r2,r2,r17
8020a9b4:	0101ffc4 	movi	r4,2047
8020a9b8:	81002426 	beq	r16,r4,8020aa4c <__adddf3+0x2b8>
8020a9bc:	8120703a 	and	r16,r16,r4
8020a9c0:	01000434 	movhi	r4,16
8020a9c4:	213fffc4 	addi	r4,r4,-1
8020a9c8:	4110703a 	and	r8,r8,r4
8020a9cc:	003fa806 	br	8020a870 <__reset+0xfa1ea870>
8020a9d0:	8089c83a 	sub	r4,r16,r2
8020a9d4:	01005e0e 	bge	zero,r4,8020ab50 <__adddf3+0x3bc>
8020a9d8:	10002b26 	beq	r2,zero,8020aa88 <__adddf3+0x2f4>
8020a9dc:	0081ffc4 	movi	r2,2047
8020a9e0:	80bf8b26 	beq	r16,r2,8020a810 <__reset+0xfa1ea810>
8020a9e4:	4a402034 	orhi	r9,r9,128
8020a9e8:	00800e04 	movi	r2,56
8020a9ec:	1100a40e 	bge	r2,r4,8020ac80 <__adddf3+0x4ec>
8020a9f0:	498cb03a 	or	r6,r9,r6
8020a9f4:	300ac03a 	cmpne	r5,r6,zero
8020a9f8:	0013883a 	mov	r9,zero
8020a9fc:	2c4b883a 	add	r5,r5,r17
8020aa00:	2c63803a 	cmpltu	r17,r5,r17
8020aa04:	4a11883a 	add	r8,r9,r8
8020aa08:	8a11883a 	add	r8,r17,r8
8020aa0c:	2823883a 	mov	r17,r5
8020aa10:	4080202c 	andhi	r2,r8,128
8020aa14:	103fe026 	beq	r2,zero,8020a998 <__reset+0xfa1ea998>
8020aa18:	84000044 	addi	r16,r16,1
8020aa1c:	0081ffc4 	movi	r2,2047
8020aa20:	8080d226 	beq	r16,r2,8020ad6c <__adddf3+0x5d8>
8020aa24:	00bfe034 	movhi	r2,65408
8020aa28:	10bfffc4 	addi	r2,r2,-1
8020aa2c:	4090703a 	and	r8,r8,r2
8020aa30:	880ad07a 	srli	r5,r17,1
8020aa34:	400897fa 	slli	r4,r8,31
8020aa38:	88c0004c 	andi	r3,r17,1
8020aa3c:	28e2b03a 	or	r17,r5,r3
8020aa40:	4010d07a 	srli	r8,r8,1
8020aa44:	2462b03a 	or	r17,r4,r17
8020aa48:	003f7106 	br	8020a810 <__reset+0xfa1ea810>
8020aa4c:	4088b03a 	or	r4,r8,r2
8020aa50:	20014526 	beq	r4,zero,8020af68 <__adddf3+0x7d4>
8020aa54:	01000434 	movhi	r4,16
8020aa58:	42000234 	orhi	r8,r8,8
8020aa5c:	213fffc4 	addi	r4,r4,-1
8020aa60:	4110703a 	and	r8,r8,r4
8020aa64:	003f8206 	br	8020a870 <__reset+0xfa1ea870>
8020aa68:	18ffffc4 	addi	r3,r3,-1
8020aa6c:	1800491e 	bne	r3,zero,8020ab94 <__adddf3+0x400>
8020aa70:	898bc83a 	sub	r5,r17,r6
8020aa74:	8963803a 	cmpltu	r17,r17,r5
8020aa78:	4251c83a 	sub	r8,r8,r9
8020aa7c:	4451c83a 	sub	r8,r8,r17
8020aa80:	2823883a 	mov	r17,r5
8020aa84:	003f9f06 	br	8020a904 <__reset+0xfa1ea904>
8020aa88:	4984b03a 	or	r2,r9,r6
8020aa8c:	103f6026 	beq	r2,zero,8020a810 <__reset+0xfa1ea810>
8020aa90:	213fffc4 	addi	r4,r4,-1
8020aa94:	2000931e 	bne	r4,zero,8020ace4 <__adddf3+0x550>
8020aa98:	898d883a 	add	r6,r17,r6
8020aa9c:	3463803a 	cmpltu	r17,r6,r17
8020aaa0:	4251883a 	add	r8,r8,r9
8020aaa4:	8a11883a 	add	r8,r17,r8
8020aaa8:	3023883a 	mov	r17,r6
8020aaac:	003fd806 	br	8020aa10 <__reset+0xfa1eaa10>
8020aab0:	1800541e 	bne	r3,zero,8020ac04 <__adddf3+0x470>
8020aab4:	80800044 	addi	r2,r16,1
8020aab8:	1081ffcc 	andi	r2,r2,2047
8020aabc:	00c00044 	movi	r3,1
8020aac0:	1880a00e 	bge	r3,r2,8020ad44 <__adddf3+0x5b0>
8020aac4:	8989c83a 	sub	r4,r17,r6
8020aac8:	8905803a 	cmpltu	r2,r17,r4
8020aacc:	4267c83a 	sub	r19,r8,r9
8020aad0:	98a7c83a 	sub	r19,r19,r2
8020aad4:	9880202c 	andhi	r2,r19,128
8020aad8:	10006326 	beq	r2,zero,8020ac68 <__adddf3+0x4d4>
8020aadc:	3463c83a 	sub	r17,r6,r17
8020aae0:	4a07c83a 	sub	r3,r9,r8
8020aae4:	344d803a 	cmpltu	r6,r6,r17
8020aae8:	19a7c83a 	sub	r19,r3,r6
8020aaec:	3825883a 	mov	r18,r7
8020aaf0:	983f8a1e 	bne	r19,zero,8020a91c <__reset+0xfa1ea91c>
8020aaf4:	8809883a 	mov	r4,r17
8020aaf8:	020cd980 	call	8020cd98 <__clzsi2>
8020aafc:	10800804 	addi	r2,r2,32
8020ab00:	10fffe04 	addi	r3,r2,-8
8020ab04:	010007c4 	movi	r4,31
8020ab08:	20ff890e 	bge	r4,r3,8020a930 <__reset+0xfa1ea930>
8020ab0c:	10bff604 	addi	r2,r2,-40
8020ab10:	8884983a 	sll	r2,r17,r2
8020ab14:	0023883a 	mov	r17,zero
8020ab18:	1c3f8c0e 	bge	r3,r16,8020a94c <__reset+0xfa1ea94c>
8020ab1c:	023fe034 	movhi	r8,65408
8020ab20:	423fffc4 	addi	r8,r8,-1
8020ab24:	80e1c83a 	sub	r16,r16,r3
8020ab28:	1210703a 	and	r8,r2,r8
8020ab2c:	003f3806 	br	8020a810 <__reset+0xfa1ea810>
8020ab30:	9007883a 	mov	r3,r18
8020ab34:	0011883a 	mov	r8,zero
8020ab38:	0005883a 	mov	r2,zero
8020ab3c:	003f4c06 	br	8020a870 <__reset+0xfa1ea870>
8020ab40:	498cb03a 	or	r6,r9,r6
8020ab44:	300cc03a 	cmpne	r6,r6,zero
8020ab48:	0007883a 	mov	r3,zero
8020ab4c:	003f6806 	br	8020a8f0 <__reset+0xfa1ea8f0>
8020ab50:	20009c1e 	bne	r4,zero,8020adc4 <__adddf3+0x630>
8020ab54:	80800044 	addi	r2,r16,1
8020ab58:	1141ffcc 	andi	r5,r2,2047
8020ab5c:	01000044 	movi	r4,1
8020ab60:	2140670e 	bge	r4,r5,8020ad00 <__adddf3+0x56c>
8020ab64:	0101ffc4 	movi	r4,2047
8020ab68:	11007f26 	beq	r2,r4,8020ad68 <__adddf3+0x5d4>
8020ab6c:	898d883a 	add	r6,r17,r6
8020ab70:	4247883a 	add	r3,r8,r9
8020ab74:	3451803a 	cmpltu	r8,r6,r17
8020ab78:	40d1883a 	add	r8,r8,r3
8020ab7c:	402297fa 	slli	r17,r8,31
8020ab80:	300cd07a 	srli	r6,r6,1
8020ab84:	4010d07a 	srli	r8,r8,1
8020ab88:	1021883a 	mov	r16,r2
8020ab8c:	89a2b03a 	or	r17,r17,r6
8020ab90:	003f1f06 	br	8020a810 <__reset+0xfa1ea810>
8020ab94:	0081ffc4 	movi	r2,2047
8020ab98:	80bf481e 	bne	r16,r2,8020a8bc <__reset+0xfa1ea8bc>
8020ab9c:	003f1c06 	br	8020a810 <__reset+0xfa1ea810>
8020aba0:	843ff844 	addi	r16,r16,-31
8020aba4:	01000804 	movi	r4,32
8020aba8:	1406d83a 	srl	r3,r2,r16
8020abac:	41005026 	beq	r8,r4,8020acf0 <__adddf3+0x55c>
8020abb0:	01001004 	movi	r4,64
8020abb4:	2211c83a 	sub	r8,r4,r8
8020abb8:	1204983a 	sll	r2,r2,r8
8020abbc:	88a2b03a 	or	r17,r17,r2
8020abc0:	8822c03a 	cmpne	r17,r17,zero
8020abc4:	1c62b03a 	or	r17,r3,r17
8020abc8:	0011883a 	mov	r8,zero
8020abcc:	0021883a 	mov	r16,zero
8020abd0:	003f7106 	br	8020a998 <__reset+0xfa1ea998>
8020abd4:	193ff804 	addi	r4,r3,-32
8020abd8:	00800804 	movi	r2,32
8020abdc:	4908d83a 	srl	r4,r9,r4
8020abe0:	18804526 	beq	r3,r2,8020acf8 <__adddf3+0x564>
8020abe4:	00801004 	movi	r2,64
8020abe8:	10c5c83a 	sub	r2,r2,r3
8020abec:	4886983a 	sll	r3,r9,r2
8020abf0:	198cb03a 	or	r6,r3,r6
8020abf4:	300cc03a 	cmpne	r6,r6,zero
8020abf8:	218cb03a 	or	r6,r4,r6
8020abfc:	0007883a 	mov	r3,zero
8020ac00:	003f3b06 	br	8020a8f0 <__reset+0xfa1ea8f0>
8020ac04:	80002a26 	beq	r16,zero,8020acb0 <__adddf3+0x51c>
8020ac08:	0101ffc4 	movi	r4,2047
8020ac0c:	11006826 	beq	r2,r4,8020adb0 <__adddf3+0x61c>
8020ac10:	00c7c83a 	sub	r3,zero,r3
8020ac14:	42002034 	orhi	r8,r8,128
8020ac18:	01000e04 	movi	r4,56
8020ac1c:	20c07c16 	blt	r4,r3,8020ae10 <__adddf3+0x67c>
8020ac20:	010007c4 	movi	r4,31
8020ac24:	20c0da16 	blt	r4,r3,8020af90 <__adddf3+0x7fc>
8020ac28:	01000804 	movi	r4,32
8020ac2c:	20c9c83a 	sub	r4,r4,r3
8020ac30:	4114983a 	sll	r10,r8,r4
8020ac34:	88cad83a 	srl	r5,r17,r3
8020ac38:	8908983a 	sll	r4,r17,r4
8020ac3c:	40c6d83a 	srl	r3,r8,r3
8020ac40:	5162b03a 	or	r17,r10,r5
8020ac44:	2008c03a 	cmpne	r4,r4,zero
8020ac48:	8922b03a 	or	r17,r17,r4
8020ac4c:	3463c83a 	sub	r17,r6,r17
8020ac50:	48c7c83a 	sub	r3,r9,r3
8020ac54:	344d803a 	cmpltu	r6,r6,r17
8020ac58:	1991c83a 	sub	r8,r3,r6
8020ac5c:	1021883a 	mov	r16,r2
8020ac60:	3825883a 	mov	r18,r7
8020ac64:	003f2706 	br	8020a904 <__reset+0xfa1ea904>
8020ac68:	24d0b03a 	or	r8,r4,r19
8020ac6c:	40001b1e 	bne	r8,zero,8020acdc <__adddf3+0x548>
8020ac70:	0005883a 	mov	r2,zero
8020ac74:	0007883a 	mov	r3,zero
8020ac78:	0021883a 	mov	r16,zero
8020ac7c:	003f4d06 	br	8020a9b4 <__reset+0xfa1ea9b4>
8020ac80:	008007c4 	movi	r2,31
8020ac84:	11003c16 	blt	r2,r4,8020ad78 <__adddf3+0x5e4>
8020ac88:	00800804 	movi	r2,32
8020ac8c:	1105c83a 	sub	r2,r2,r4
8020ac90:	488e983a 	sll	r7,r9,r2
8020ac94:	310ad83a 	srl	r5,r6,r4
8020ac98:	3084983a 	sll	r2,r6,r2
8020ac9c:	4912d83a 	srl	r9,r9,r4
8020aca0:	394ab03a 	or	r5,r7,r5
8020aca4:	1004c03a 	cmpne	r2,r2,zero
8020aca8:	288ab03a 	or	r5,r5,r2
8020acac:	003f5306 	br	8020a9fc <__reset+0xfa1ea9fc>
8020acb0:	4448b03a 	or	r4,r8,r17
8020acb4:	20003e26 	beq	r4,zero,8020adb0 <__adddf3+0x61c>
8020acb8:	00c6303a 	nor	r3,zero,r3
8020acbc:	18003a1e 	bne	r3,zero,8020ada8 <__adddf3+0x614>
8020acc0:	3463c83a 	sub	r17,r6,r17
8020acc4:	4a07c83a 	sub	r3,r9,r8
8020acc8:	344d803a 	cmpltu	r6,r6,r17
8020accc:	1991c83a 	sub	r8,r3,r6
8020acd0:	1021883a 	mov	r16,r2
8020acd4:	3825883a 	mov	r18,r7
8020acd8:	003f0a06 	br	8020a904 <__reset+0xfa1ea904>
8020acdc:	2023883a 	mov	r17,r4
8020ace0:	003f0d06 	br	8020a918 <__reset+0xfa1ea918>
8020ace4:	0081ffc4 	movi	r2,2047
8020ace8:	80bf3f1e 	bne	r16,r2,8020a9e8 <__reset+0xfa1ea9e8>
8020acec:	003ec806 	br	8020a810 <__reset+0xfa1ea810>
8020acf0:	0005883a 	mov	r2,zero
8020acf4:	003fb106 	br	8020abbc <__reset+0xfa1eabbc>
8020acf8:	0007883a 	mov	r3,zero
8020acfc:	003fbc06 	br	8020abf0 <__reset+0xfa1eabf0>
8020ad00:	4444b03a 	or	r2,r8,r17
8020ad04:	8000871e 	bne	r16,zero,8020af24 <__adddf3+0x790>
8020ad08:	1000ba26 	beq	r2,zero,8020aff4 <__adddf3+0x860>
8020ad0c:	4984b03a 	or	r2,r9,r6
8020ad10:	103ebf26 	beq	r2,zero,8020a810 <__reset+0xfa1ea810>
8020ad14:	8985883a 	add	r2,r17,r6
8020ad18:	4247883a 	add	r3,r8,r9
8020ad1c:	1451803a 	cmpltu	r8,r2,r17
8020ad20:	40d1883a 	add	r8,r8,r3
8020ad24:	40c0202c 	andhi	r3,r8,128
8020ad28:	1023883a 	mov	r17,r2
8020ad2c:	183f1a26 	beq	r3,zero,8020a998 <__reset+0xfa1ea998>
8020ad30:	00bfe034 	movhi	r2,65408
8020ad34:	10bfffc4 	addi	r2,r2,-1
8020ad38:	2021883a 	mov	r16,r4
8020ad3c:	4090703a 	and	r8,r8,r2
8020ad40:	003eb306 	br	8020a810 <__reset+0xfa1ea810>
8020ad44:	4444b03a 	or	r2,r8,r17
8020ad48:	8000291e 	bne	r16,zero,8020adf0 <__adddf3+0x65c>
8020ad4c:	10004b1e 	bne	r2,zero,8020ae7c <__adddf3+0x6e8>
8020ad50:	4990b03a 	or	r8,r9,r6
8020ad54:	40008b26 	beq	r8,zero,8020af84 <__adddf3+0x7f0>
8020ad58:	4811883a 	mov	r8,r9
8020ad5c:	3023883a 	mov	r17,r6
8020ad60:	3825883a 	mov	r18,r7
8020ad64:	003eaa06 	br	8020a810 <__reset+0xfa1ea810>
8020ad68:	1021883a 	mov	r16,r2
8020ad6c:	0011883a 	mov	r8,zero
8020ad70:	0005883a 	mov	r2,zero
8020ad74:	003f0f06 	br	8020a9b4 <__reset+0xfa1ea9b4>
8020ad78:	217ff804 	addi	r5,r4,-32
8020ad7c:	00800804 	movi	r2,32
8020ad80:	494ad83a 	srl	r5,r9,r5
8020ad84:	20807d26 	beq	r4,r2,8020af7c <__adddf3+0x7e8>
8020ad88:	00801004 	movi	r2,64
8020ad8c:	1109c83a 	sub	r4,r2,r4
8020ad90:	4912983a 	sll	r9,r9,r4
8020ad94:	498cb03a 	or	r6,r9,r6
8020ad98:	300cc03a 	cmpne	r6,r6,zero
8020ad9c:	298ab03a 	or	r5,r5,r6
8020ada0:	0013883a 	mov	r9,zero
8020ada4:	003f1506 	br	8020a9fc <__reset+0xfa1ea9fc>
8020ada8:	0101ffc4 	movi	r4,2047
8020adac:	113f9a1e 	bne	r2,r4,8020ac18 <__reset+0xfa1eac18>
8020adb0:	4811883a 	mov	r8,r9
8020adb4:	3023883a 	mov	r17,r6
8020adb8:	1021883a 	mov	r16,r2
8020adbc:	3825883a 	mov	r18,r7
8020adc0:	003e9306 	br	8020a810 <__reset+0xfa1ea810>
8020adc4:	8000161e 	bne	r16,zero,8020ae20 <__adddf3+0x68c>
8020adc8:	444ab03a 	or	r5,r8,r17
8020adcc:	28005126 	beq	r5,zero,8020af14 <__adddf3+0x780>
8020add0:	0108303a 	nor	r4,zero,r4
8020add4:	20004d1e 	bne	r4,zero,8020af0c <__adddf3+0x778>
8020add8:	89a3883a 	add	r17,r17,r6
8020addc:	4253883a 	add	r9,r8,r9
8020ade0:	898d803a 	cmpltu	r6,r17,r6
8020ade4:	3251883a 	add	r8,r6,r9
8020ade8:	1021883a 	mov	r16,r2
8020adec:	003f0806 	br	8020aa10 <__reset+0xfa1eaa10>
8020adf0:	1000301e 	bne	r2,zero,8020aeb4 <__adddf3+0x720>
8020adf4:	4984b03a 	or	r2,r9,r6
8020adf8:	10007126 	beq	r2,zero,8020afc0 <__adddf3+0x82c>
8020adfc:	4811883a 	mov	r8,r9
8020ae00:	3023883a 	mov	r17,r6
8020ae04:	3825883a 	mov	r18,r7
8020ae08:	0401ffc4 	movi	r16,2047
8020ae0c:	003e8006 	br	8020a810 <__reset+0xfa1ea810>
8020ae10:	4462b03a 	or	r17,r8,r17
8020ae14:	8822c03a 	cmpne	r17,r17,zero
8020ae18:	0007883a 	mov	r3,zero
8020ae1c:	003f8b06 	br	8020ac4c <__reset+0xfa1eac4c>
8020ae20:	0141ffc4 	movi	r5,2047
8020ae24:	11403b26 	beq	r2,r5,8020af14 <__adddf3+0x780>
8020ae28:	0109c83a 	sub	r4,zero,r4
8020ae2c:	42002034 	orhi	r8,r8,128
8020ae30:	01400e04 	movi	r5,56
8020ae34:	29006716 	blt	r5,r4,8020afd4 <__adddf3+0x840>
8020ae38:	014007c4 	movi	r5,31
8020ae3c:	29007016 	blt	r5,r4,8020b000 <__adddf3+0x86c>
8020ae40:	01400804 	movi	r5,32
8020ae44:	290bc83a 	sub	r5,r5,r4
8020ae48:	4154983a 	sll	r10,r8,r5
8020ae4c:	890ed83a 	srl	r7,r17,r4
8020ae50:	894a983a 	sll	r5,r17,r5
8020ae54:	4108d83a 	srl	r4,r8,r4
8020ae58:	51e2b03a 	or	r17,r10,r7
8020ae5c:	280ac03a 	cmpne	r5,r5,zero
8020ae60:	8962b03a 	or	r17,r17,r5
8020ae64:	89a3883a 	add	r17,r17,r6
8020ae68:	2253883a 	add	r9,r4,r9
8020ae6c:	898d803a 	cmpltu	r6,r17,r6
8020ae70:	3251883a 	add	r8,r6,r9
8020ae74:	1021883a 	mov	r16,r2
8020ae78:	003ee506 	br	8020aa10 <__reset+0xfa1eaa10>
8020ae7c:	4984b03a 	or	r2,r9,r6
8020ae80:	103e6326 	beq	r2,zero,8020a810 <__reset+0xfa1ea810>
8020ae84:	8987c83a 	sub	r3,r17,r6
8020ae88:	88c9803a 	cmpltu	r4,r17,r3
8020ae8c:	4245c83a 	sub	r2,r8,r9
8020ae90:	1105c83a 	sub	r2,r2,r4
8020ae94:	1100202c 	andhi	r4,r2,128
8020ae98:	203ebb26 	beq	r4,zero,8020a988 <__reset+0xfa1ea988>
8020ae9c:	3463c83a 	sub	r17,r6,r17
8020aea0:	4a07c83a 	sub	r3,r9,r8
8020aea4:	344d803a 	cmpltu	r6,r6,r17
8020aea8:	1991c83a 	sub	r8,r3,r6
8020aeac:	3825883a 	mov	r18,r7
8020aeb0:	003e5706 	br	8020a810 <__reset+0xfa1ea810>
8020aeb4:	4984b03a 	or	r2,r9,r6
8020aeb8:	10002e26 	beq	r2,zero,8020af74 <__adddf3+0x7e0>
8020aebc:	4004d0fa 	srli	r2,r8,3
8020aec0:	8822d0fa 	srli	r17,r17,3
8020aec4:	4010977a 	slli	r8,r8,29
8020aec8:	10c0022c 	andhi	r3,r2,8
8020aecc:	4462b03a 	or	r17,r8,r17
8020aed0:	18000826 	beq	r3,zero,8020aef4 <__adddf3+0x760>
8020aed4:	4808d0fa 	srli	r4,r9,3
8020aed8:	20c0022c 	andhi	r3,r4,8
8020aedc:	1800051e 	bne	r3,zero,8020aef4 <__adddf3+0x760>
8020aee0:	300cd0fa 	srli	r6,r6,3
8020aee4:	4806977a 	slli	r3,r9,29
8020aee8:	2005883a 	mov	r2,r4
8020aeec:	3825883a 	mov	r18,r7
8020aef0:	19a2b03a 	or	r17,r3,r6
8020aef4:	8810d77a 	srli	r8,r17,29
8020aef8:	100490fa 	slli	r2,r2,3
8020aefc:	882290fa 	slli	r17,r17,3
8020af00:	0401ffc4 	movi	r16,2047
8020af04:	4090b03a 	or	r8,r8,r2
8020af08:	003e4106 	br	8020a810 <__reset+0xfa1ea810>
8020af0c:	0141ffc4 	movi	r5,2047
8020af10:	117fc71e 	bne	r2,r5,8020ae30 <__reset+0xfa1eae30>
8020af14:	4811883a 	mov	r8,r9
8020af18:	3023883a 	mov	r17,r6
8020af1c:	1021883a 	mov	r16,r2
8020af20:	003e3b06 	br	8020a810 <__reset+0xfa1ea810>
8020af24:	10002f26 	beq	r2,zero,8020afe4 <__adddf3+0x850>
8020af28:	4984b03a 	or	r2,r9,r6
8020af2c:	10001126 	beq	r2,zero,8020af74 <__adddf3+0x7e0>
8020af30:	4004d0fa 	srli	r2,r8,3
8020af34:	8822d0fa 	srli	r17,r17,3
8020af38:	4010977a 	slli	r8,r8,29
8020af3c:	10c0022c 	andhi	r3,r2,8
8020af40:	4462b03a 	or	r17,r8,r17
8020af44:	183feb26 	beq	r3,zero,8020aef4 <__reset+0xfa1eaef4>
8020af48:	4808d0fa 	srli	r4,r9,3
8020af4c:	20c0022c 	andhi	r3,r4,8
8020af50:	183fe81e 	bne	r3,zero,8020aef4 <__reset+0xfa1eaef4>
8020af54:	300cd0fa 	srli	r6,r6,3
8020af58:	4806977a 	slli	r3,r9,29
8020af5c:	2005883a 	mov	r2,r4
8020af60:	19a2b03a 	or	r17,r3,r6
8020af64:	003fe306 	br	8020aef4 <__reset+0xfa1eaef4>
8020af68:	0011883a 	mov	r8,zero
8020af6c:	0005883a 	mov	r2,zero
8020af70:	003e3f06 	br	8020a870 <__reset+0xfa1ea870>
8020af74:	0401ffc4 	movi	r16,2047
8020af78:	003e2506 	br	8020a810 <__reset+0xfa1ea810>
8020af7c:	0013883a 	mov	r9,zero
8020af80:	003f8406 	br	8020ad94 <__reset+0xfa1ead94>
8020af84:	0005883a 	mov	r2,zero
8020af88:	0007883a 	mov	r3,zero
8020af8c:	003e8906 	br	8020a9b4 <__reset+0xfa1ea9b4>
8020af90:	197ff804 	addi	r5,r3,-32
8020af94:	01000804 	movi	r4,32
8020af98:	414ad83a 	srl	r5,r8,r5
8020af9c:	19002426 	beq	r3,r4,8020b030 <__adddf3+0x89c>
8020afa0:	01001004 	movi	r4,64
8020afa4:	20c7c83a 	sub	r3,r4,r3
8020afa8:	40c6983a 	sll	r3,r8,r3
8020afac:	1c46b03a 	or	r3,r3,r17
8020afb0:	1806c03a 	cmpne	r3,r3,zero
8020afb4:	28e2b03a 	or	r17,r5,r3
8020afb8:	0007883a 	mov	r3,zero
8020afbc:	003f2306 	br	8020ac4c <__reset+0xfa1eac4c>
8020afc0:	0007883a 	mov	r3,zero
8020afc4:	5811883a 	mov	r8,r11
8020afc8:	00bfffc4 	movi	r2,-1
8020afcc:	0401ffc4 	movi	r16,2047
8020afd0:	003e7806 	br	8020a9b4 <__reset+0xfa1ea9b4>
8020afd4:	4462b03a 	or	r17,r8,r17
8020afd8:	8822c03a 	cmpne	r17,r17,zero
8020afdc:	0009883a 	mov	r4,zero
8020afe0:	003fa006 	br	8020ae64 <__reset+0xfa1eae64>
8020afe4:	4811883a 	mov	r8,r9
8020afe8:	3023883a 	mov	r17,r6
8020afec:	0401ffc4 	movi	r16,2047
8020aff0:	003e0706 	br	8020a810 <__reset+0xfa1ea810>
8020aff4:	4811883a 	mov	r8,r9
8020aff8:	3023883a 	mov	r17,r6
8020affc:	003e0406 	br	8020a810 <__reset+0xfa1ea810>
8020b000:	21fff804 	addi	r7,r4,-32
8020b004:	01400804 	movi	r5,32
8020b008:	41ced83a 	srl	r7,r8,r7
8020b00c:	21400a26 	beq	r4,r5,8020b038 <__adddf3+0x8a4>
8020b010:	01401004 	movi	r5,64
8020b014:	2909c83a 	sub	r4,r5,r4
8020b018:	4108983a 	sll	r4,r8,r4
8020b01c:	2448b03a 	or	r4,r4,r17
8020b020:	2008c03a 	cmpne	r4,r4,zero
8020b024:	3922b03a 	or	r17,r7,r4
8020b028:	0009883a 	mov	r4,zero
8020b02c:	003f8d06 	br	8020ae64 <__reset+0xfa1eae64>
8020b030:	0007883a 	mov	r3,zero
8020b034:	003fdd06 	br	8020afac <__reset+0xfa1eafac>
8020b038:	0009883a 	mov	r4,zero
8020b03c:	003ff706 	br	8020b01c <__reset+0xfa1eb01c>

8020b040 <__divdf3>:
8020b040:	defff204 	addi	sp,sp,-56
8020b044:	dd400915 	stw	r21,36(sp)
8020b048:	282ad53a 	srli	r21,r5,20
8020b04c:	dd000815 	stw	r20,32(sp)
8020b050:	2828d7fa 	srli	r20,r5,31
8020b054:	dc000415 	stw	r16,16(sp)
8020b058:	04000434 	movhi	r16,16
8020b05c:	df000c15 	stw	fp,48(sp)
8020b060:	843fffc4 	addi	r16,r16,-1
8020b064:	dfc00d15 	stw	ra,52(sp)
8020b068:	ddc00b15 	stw	r23,44(sp)
8020b06c:	dd800a15 	stw	r22,40(sp)
8020b070:	dcc00715 	stw	r19,28(sp)
8020b074:	dc800615 	stw	r18,24(sp)
8020b078:	dc400515 	stw	r17,20(sp)
8020b07c:	ad41ffcc 	andi	r21,r21,2047
8020b080:	2c20703a 	and	r16,r5,r16
8020b084:	a7003fcc 	andi	fp,r20,255
8020b088:	a8006126 	beq	r21,zero,8020b210 <__divdf3+0x1d0>
8020b08c:	0081ffc4 	movi	r2,2047
8020b090:	2025883a 	mov	r18,r4
8020b094:	a8803726 	beq	r21,r2,8020b174 <__divdf3+0x134>
8020b098:	80800434 	orhi	r2,r16,16
8020b09c:	100490fa 	slli	r2,r2,3
8020b0a0:	2020d77a 	srli	r16,r4,29
8020b0a4:	202490fa 	slli	r18,r4,3
8020b0a8:	ad7f0044 	addi	r21,r21,-1023
8020b0ac:	80a0b03a 	or	r16,r16,r2
8020b0b0:	0027883a 	mov	r19,zero
8020b0b4:	0013883a 	mov	r9,zero
8020b0b8:	3804d53a 	srli	r2,r7,20
8020b0bc:	382cd7fa 	srli	r22,r7,31
8020b0c0:	04400434 	movhi	r17,16
8020b0c4:	8c7fffc4 	addi	r17,r17,-1
8020b0c8:	1081ffcc 	andi	r2,r2,2047
8020b0cc:	3011883a 	mov	r8,r6
8020b0d0:	3c62703a 	and	r17,r7,r17
8020b0d4:	b5c03fcc 	andi	r23,r22,255
8020b0d8:	10006c26 	beq	r2,zero,8020b28c <__divdf3+0x24c>
8020b0dc:	00c1ffc4 	movi	r3,2047
8020b0e0:	10c06426 	beq	r2,r3,8020b274 <__divdf3+0x234>
8020b0e4:	88c00434 	orhi	r3,r17,16
8020b0e8:	180690fa 	slli	r3,r3,3
8020b0ec:	3022d77a 	srli	r17,r6,29
8020b0f0:	301090fa 	slli	r8,r6,3
8020b0f4:	10bf0044 	addi	r2,r2,-1023
8020b0f8:	88e2b03a 	or	r17,r17,r3
8020b0fc:	000f883a 	mov	r7,zero
8020b100:	a58cf03a 	xor	r6,r20,r22
8020b104:	3cc8b03a 	or	r4,r7,r19
8020b108:	a8abc83a 	sub	r21,r21,r2
8020b10c:	008003c4 	movi	r2,15
8020b110:	3007883a 	mov	r3,r6
8020b114:	34c03fcc 	andi	r19,r6,255
8020b118:	11009036 	bltu	r2,r4,8020b35c <__divdf3+0x31c>
8020b11c:	200890ba 	slli	r4,r4,2
8020b120:	00a00874 	movhi	r2,32801
8020b124:	10ac4d04 	addi	r2,r2,-20172
8020b128:	2089883a 	add	r4,r4,r2
8020b12c:	20800017 	ldw	r2,0(r4)
8020b130:	1000683a 	jmp	r2
8020b134:	8020b35c 	xori	zero,r16,33485
8020b138:	8020b1ac 	andhi	zero,r16,33478
8020b13c:	8020b34c 	andi	zero,r16,33485
8020b140:	8020b1a0 	cmpeqi	zero,r16,-32058
8020b144:	8020b34c 	andi	zero,r16,33485
8020b148:	8020b320 	cmpeqi	zero,r16,-32052
8020b14c:	8020b34c 	andi	zero,r16,33485
8020b150:	8020b1a0 	cmpeqi	zero,r16,-32058
8020b154:	8020b1ac 	andhi	zero,r16,33478
8020b158:	8020b1ac 	andhi	zero,r16,33478
8020b15c:	8020b320 	cmpeqi	zero,r16,-32052
8020b160:	8020b1a0 	cmpeqi	zero,r16,-32058
8020b164:	8020b190 	cmplti	zero,r16,-32058
8020b168:	8020b190 	cmplti	zero,r16,-32058
8020b16c:	8020b190 	cmplti	zero,r16,-32058
8020b170:	8020b640 	call	88020b64 <__reset+0x2000b64>
8020b174:	2404b03a 	or	r2,r4,r16
8020b178:	1000661e 	bne	r2,zero,8020b314 <__divdf3+0x2d4>
8020b17c:	04c00204 	movi	r19,8
8020b180:	0021883a 	mov	r16,zero
8020b184:	0025883a 	mov	r18,zero
8020b188:	02400084 	movi	r9,2
8020b18c:	003fca06 	br	8020b0b8 <__reset+0xfa1eb0b8>
8020b190:	8023883a 	mov	r17,r16
8020b194:	9011883a 	mov	r8,r18
8020b198:	e02f883a 	mov	r23,fp
8020b19c:	480f883a 	mov	r7,r9
8020b1a0:	00800084 	movi	r2,2
8020b1a4:	3881311e 	bne	r7,r2,8020b66c <__divdf3+0x62c>
8020b1a8:	b827883a 	mov	r19,r23
8020b1ac:	98c0004c 	andi	r3,r19,1
8020b1b0:	0081ffc4 	movi	r2,2047
8020b1b4:	000b883a 	mov	r5,zero
8020b1b8:	0025883a 	mov	r18,zero
8020b1bc:	1004953a 	slli	r2,r2,20
8020b1c0:	18c03fcc 	andi	r3,r3,255
8020b1c4:	04400434 	movhi	r17,16
8020b1c8:	8c7fffc4 	addi	r17,r17,-1
8020b1cc:	180697fa 	slli	r3,r3,31
8020b1d0:	2c4a703a 	and	r5,r5,r17
8020b1d4:	288ab03a 	or	r5,r5,r2
8020b1d8:	28c6b03a 	or	r3,r5,r3
8020b1dc:	9005883a 	mov	r2,r18
8020b1e0:	dfc00d17 	ldw	ra,52(sp)
8020b1e4:	df000c17 	ldw	fp,48(sp)
8020b1e8:	ddc00b17 	ldw	r23,44(sp)
8020b1ec:	dd800a17 	ldw	r22,40(sp)
8020b1f0:	dd400917 	ldw	r21,36(sp)
8020b1f4:	dd000817 	ldw	r20,32(sp)
8020b1f8:	dcc00717 	ldw	r19,28(sp)
8020b1fc:	dc800617 	ldw	r18,24(sp)
8020b200:	dc400517 	ldw	r17,20(sp)
8020b204:	dc000417 	ldw	r16,16(sp)
8020b208:	dec00e04 	addi	sp,sp,56
8020b20c:	f800283a 	ret
8020b210:	2404b03a 	or	r2,r4,r16
8020b214:	2027883a 	mov	r19,r4
8020b218:	10003926 	beq	r2,zero,8020b300 <__divdf3+0x2c0>
8020b21c:	80012e26 	beq	r16,zero,8020b6d8 <__divdf3+0x698>
8020b220:	8009883a 	mov	r4,r16
8020b224:	d9800315 	stw	r6,12(sp)
8020b228:	d9c00215 	stw	r7,8(sp)
8020b22c:	020cd980 	call	8020cd98 <__clzsi2>
8020b230:	d9800317 	ldw	r6,12(sp)
8020b234:	d9c00217 	ldw	r7,8(sp)
8020b238:	113ffd44 	addi	r4,r2,-11
8020b23c:	00c00704 	movi	r3,28
8020b240:	19012116 	blt	r3,r4,8020b6c8 <__divdf3+0x688>
8020b244:	00c00744 	movi	r3,29
8020b248:	147ffe04 	addi	r17,r2,-8
8020b24c:	1907c83a 	sub	r3,r3,r4
8020b250:	8460983a 	sll	r16,r16,r17
8020b254:	98c6d83a 	srl	r3,r19,r3
8020b258:	9c64983a 	sll	r18,r19,r17
8020b25c:	1c20b03a 	or	r16,r3,r16
8020b260:	1080fcc4 	addi	r2,r2,1011
8020b264:	00abc83a 	sub	r21,zero,r2
8020b268:	0027883a 	mov	r19,zero
8020b26c:	0013883a 	mov	r9,zero
8020b270:	003f9106 	br	8020b0b8 <__reset+0xfa1eb0b8>
8020b274:	3446b03a 	or	r3,r6,r17
8020b278:	18001f1e 	bne	r3,zero,8020b2f8 <__divdf3+0x2b8>
8020b27c:	0023883a 	mov	r17,zero
8020b280:	0011883a 	mov	r8,zero
8020b284:	01c00084 	movi	r7,2
8020b288:	003f9d06 	br	8020b100 <__reset+0xfa1eb100>
8020b28c:	3446b03a 	or	r3,r6,r17
8020b290:	18001526 	beq	r3,zero,8020b2e8 <__divdf3+0x2a8>
8020b294:	88011b26 	beq	r17,zero,8020b704 <__divdf3+0x6c4>
8020b298:	8809883a 	mov	r4,r17
8020b29c:	d9800315 	stw	r6,12(sp)
8020b2a0:	da400115 	stw	r9,4(sp)
8020b2a4:	020cd980 	call	8020cd98 <__clzsi2>
8020b2a8:	d9800317 	ldw	r6,12(sp)
8020b2ac:	da400117 	ldw	r9,4(sp)
8020b2b0:	113ffd44 	addi	r4,r2,-11
8020b2b4:	00c00704 	movi	r3,28
8020b2b8:	19010e16 	blt	r3,r4,8020b6f4 <__divdf3+0x6b4>
8020b2bc:	00c00744 	movi	r3,29
8020b2c0:	123ffe04 	addi	r8,r2,-8
8020b2c4:	1907c83a 	sub	r3,r3,r4
8020b2c8:	8a22983a 	sll	r17,r17,r8
8020b2cc:	30c6d83a 	srl	r3,r6,r3
8020b2d0:	3210983a 	sll	r8,r6,r8
8020b2d4:	1c62b03a 	or	r17,r3,r17
8020b2d8:	1080fcc4 	addi	r2,r2,1011
8020b2dc:	0085c83a 	sub	r2,zero,r2
8020b2e0:	000f883a 	mov	r7,zero
8020b2e4:	003f8606 	br	8020b100 <__reset+0xfa1eb100>
8020b2e8:	0023883a 	mov	r17,zero
8020b2ec:	0011883a 	mov	r8,zero
8020b2f0:	01c00044 	movi	r7,1
8020b2f4:	003f8206 	br	8020b100 <__reset+0xfa1eb100>
8020b2f8:	01c000c4 	movi	r7,3
8020b2fc:	003f8006 	br	8020b100 <__reset+0xfa1eb100>
8020b300:	04c00104 	movi	r19,4
8020b304:	0021883a 	mov	r16,zero
8020b308:	0025883a 	mov	r18,zero
8020b30c:	02400044 	movi	r9,1
8020b310:	003f6906 	br	8020b0b8 <__reset+0xfa1eb0b8>
8020b314:	04c00304 	movi	r19,12
8020b318:	024000c4 	movi	r9,3
8020b31c:	003f6606 	br	8020b0b8 <__reset+0xfa1eb0b8>
8020b320:	01400434 	movhi	r5,16
8020b324:	0007883a 	mov	r3,zero
8020b328:	297fffc4 	addi	r5,r5,-1
8020b32c:	04bfffc4 	movi	r18,-1
8020b330:	0081ffc4 	movi	r2,2047
8020b334:	003fa106 	br	8020b1bc <__reset+0xfa1eb1bc>
8020b338:	00c00044 	movi	r3,1
8020b33c:	1887c83a 	sub	r3,r3,r2
8020b340:	01000e04 	movi	r4,56
8020b344:	20c1210e 	bge	r4,r3,8020b7cc <__divdf3+0x78c>
8020b348:	98c0004c 	andi	r3,r19,1
8020b34c:	0005883a 	mov	r2,zero
8020b350:	000b883a 	mov	r5,zero
8020b354:	0025883a 	mov	r18,zero
8020b358:	003f9806 	br	8020b1bc <__reset+0xfa1eb1bc>
8020b35c:	8c00fd36 	bltu	r17,r16,8020b754 <__divdf3+0x714>
8020b360:	8440fb26 	beq	r16,r17,8020b750 <__divdf3+0x710>
8020b364:	8007883a 	mov	r3,r16
8020b368:	ad7fffc4 	addi	r21,r21,-1
8020b36c:	0021883a 	mov	r16,zero
8020b370:	4004d63a 	srli	r2,r8,24
8020b374:	8822923a 	slli	r17,r17,8
8020b378:	1809883a 	mov	r4,r3
8020b37c:	402c923a 	slli	r22,r8,8
8020b380:	88b8b03a 	or	fp,r17,r2
8020b384:	e028d43a 	srli	r20,fp,16
8020b388:	d8c00015 	stw	r3,0(sp)
8020b38c:	e5ffffcc 	andi	r23,fp,65535
8020b390:	a00b883a 	mov	r5,r20
8020b394:	020a6d80 	call	8020a6d8 <__udivsi3>
8020b398:	d8c00017 	ldw	r3,0(sp)
8020b39c:	a00b883a 	mov	r5,r20
8020b3a0:	d8800315 	stw	r2,12(sp)
8020b3a4:	1809883a 	mov	r4,r3
8020b3a8:	020a73c0 	call	8020a73c <__umodsi3>
8020b3ac:	d9800317 	ldw	r6,12(sp)
8020b3b0:	1006943a 	slli	r3,r2,16
8020b3b4:	9004d43a 	srli	r2,r18,16
8020b3b8:	b9a3383a 	mul	r17,r23,r6
8020b3bc:	10c4b03a 	or	r2,r2,r3
8020b3c0:	1440062e 	bgeu	r2,r17,8020b3dc <__divdf3+0x39c>
8020b3c4:	1705883a 	add	r2,r2,fp
8020b3c8:	30ffffc4 	addi	r3,r6,-1
8020b3cc:	1700ee36 	bltu	r2,fp,8020b788 <__divdf3+0x748>
8020b3d0:	1440ed2e 	bgeu	r2,r17,8020b788 <__divdf3+0x748>
8020b3d4:	31bfff84 	addi	r6,r6,-2
8020b3d8:	1705883a 	add	r2,r2,fp
8020b3dc:	1463c83a 	sub	r17,r2,r17
8020b3e0:	a00b883a 	mov	r5,r20
8020b3e4:	8809883a 	mov	r4,r17
8020b3e8:	d9800315 	stw	r6,12(sp)
8020b3ec:	020a6d80 	call	8020a6d8 <__udivsi3>
8020b3f0:	a00b883a 	mov	r5,r20
8020b3f4:	8809883a 	mov	r4,r17
8020b3f8:	d8800215 	stw	r2,8(sp)
8020b3fc:	020a73c0 	call	8020a73c <__umodsi3>
8020b400:	d9c00217 	ldw	r7,8(sp)
8020b404:	1004943a 	slli	r2,r2,16
8020b408:	94bfffcc 	andi	r18,r18,65535
8020b40c:	b9d1383a 	mul	r8,r23,r7
8020b410:	90a4b03a 	or	r18,r18,r2
8020b414:	d9800317 	ldw	r6,12(sp)
8020b418:	9200062e 	bgeu	r18,r8,8020b434 <__divdf3+0x3f4>
8020b41c:	9725883a 	add	r18,r18,fp
8020b420:	38bfffc4 	addi	r2,r7,-1
8020b424:	9700d636 	bltu	r18,fp,8020b780 <__divdf3+0x740>
8020b428:	9200d52e 	bgeu	r18,r8,8020b780 <__divdf3+0x740>
8020b42c:	39ffff84 	addi	r7,r7,-2
8020b430:	9725883a 	add	r18,r18,fp
8020b434:	3004943a 	slli	r2,r6,16
8020b438:	b012d43a 	srli	r9,r22,16
8020b43c:	b1bfffcc 	andi	r6,r22,65535
8020b440:	11e2b03a 	or	r17,r2,r7
8020b444:	8806d43a 	srli	r3,r17,16
8020b448:	893fffcc 	andi	r4,r17,65535
8020b44c:	218b383a 	mul	r5,r4,r6
8020b450:	30c5383a 	mul	r2,r6,r3
8020b454:	2249383a 	mul	r4,r4,r9
8020b458:	280ed43a 	srli	r7,r5,16
8020b45c:	9225c83a 	sub	r18,r18,r8
8020b460:	2089883a 	add	r4,r4,r2
8020b464:	3909883a 	add	r4,r7,r4
8020b468:	1a47383a 	mul	r3,r3,r9
8020b46c:	2080022e 	bgeu	r4,r2,8020b478 <__divdf3+0x438>
8020b470:	00800074 	movhi	r2,1
8020b474:	1887883a 	add	r3,r3,r2
8020b478:	2004d43a 	srli	r2,r4,16
8020b47c:	2008943a 	slli	r4,r4,16
8020b480:	297fffcc 	andi	r5,r5,65535
8020b484:	10c7883a 	add	r3,r2,r3
8020b488:	2149883a 	add	r4,r4,r5
8020b48c:	90c0a536 	bltu	r18,r3,8020b724 <__divdf3+0x6e4>
8020b490:	90c0bf26 	beq	r18,r3,8020b790 <__divdf3+0x750>
8020b494:	90c7c83a 	sub	r3,r18,r3
8020b498:	810fc83a 	sub	r7,r16,r4
8020b49c:	81e5803a 	cmpltu	r18,r16,r7
8020b4a0:	1ca5c83a 	sub	r18,r3,r18
8020b4a4:	e480c126 	beq	fp,r18,8020b7ac <__divdf3+0x76c>
8020b4a8:	a00b883a 	mov	r5,r20
8020b4ac:	9009883a 	mov	r4,r18
8020b4b0:	d9800315 	stw	r6,12(sp)
8020b4b4:	d9c00215 	stw	r7,8(sp)
8020b4b8:	da400115 	stw	r9,4(sp)
8020b4bc:	020a6d80 	call	8020a6d8 <__udivsi3>
8020b4c0:	a00b883a 	mov	r5,r20
8020b4c4:	9009883a 	mov	r4,r18
8020b4c8:	d8800015 	stw	r2,0(sp)
8020b4cc:	020a73c0 	call	8020a73c <__umodsi3>
8020b4d0:	d9c00217 	ldw	r7,8(sp)
8020b4d4:	da000017 	ldw	r8,0(sp)
8020b4d8:	1006943a 	slli	r3,r2,16
8020b4dc:	3804d43a 	srli	r2,r7,16
8020b4e0:	ba21383a 	mul	r16,r23,r8
8020b4e4:	d9800317 	ldw	r6,12(sp)
8020b4e8:	10c4b03a 	or	r2,r2,r3
8020b4ec:	da400117 	ldw	r9,4(sp)
8020b4f0:	1400062e 	bgeu	r2,r16,8020b50c <__divdf3+0x4cc>
8020b4f4:	1705883a 	add	r2,r2,fp
8020b4f8:	40ffffc4 	addi	r3,r8,-1
8020b4fc:	1700ad36 	bltu	r2,fp,8020b7b4 <__divdf3+0x774>
8020b500:	1400ac2e 	bgeu	r2,r16,8020b7b4 <__divdf3+0x774>
8020b504:	423fff84 	addi	r8,r8,-2
8020b508:	1705883a 	add	r2,r2,fp
8020b50c:	1421c83a 	sub	r16,r2,r16
8020b510:	a00b883a 	mov	r5,r20
8020b514:	8009883a 	mov	r4,r16
8020b518:	d9800315 	stw	r6,12(sp)
8020b51c:	d9c00215 	stw	r7,8(sp)
8020b520:	da000015 	stw	r8,0(sp)
8020b524:	da400115 	stw	r9,4(sp)
8020b528:	020a6d80 	call	8020a6d8 <__udivsi3>
8020b52c:	8009883a 	mov	r4,r16
8020b530:	a00b883a 	mov	r5,r20
8020b534:	1025883a 	mov	r18,r2
8020b538:	020a73c0 	call	8020a73c <__umodsi3>
8020b53c:	d9c00217 	ldw	r7,8(sp)
8020b540:	1004943a 	slli	r2,r2,16
8020b544:	bcaf383a 	mul	r23,r23,r18
8020b548:	393fffcc 	andi	r4,r7,65535
8020b54c:	2088b03a 	or	r4,r4,r2
8020b550:	d9800317 	ldw	r6,12(sp)
8020b554:	da000017 	ldw	r8,0(sp)
8020b558:	da400117 	ldw	r9,4(sp)
8020b55c:	25c0062e 	bgeu	r4,r23,8020b578 <__divdf3+0x538>
8020b560:	2709883a 	add	r4,r4,fp
8020b564:	90bfffc4 	addi	r2,r18,-1
8020b568:	27009436 	bltu	r4,fp,8020b7bc <__divdf3+0x77c>
8020b56c:	25c0932e 	bgeu	r4,r23,8020b7bc <__divdf3+0x77c>
8020b570:	94bfff84 	addi	r18,r18,-2
8020b574:	2709883a 	add	r4,r4,fp
8020b578:	4004943a 	slli	r2,r8,16
8020b57c:	25efc83a 	sub	r23,r4,r23
8020b580:	1490b03a 	or	r8,r2,r18
8020b584:	4008d43a 	srli	r4,r8,16
8020b588:	40ffffcc 	andi	r3,r8,65535
8020b58c:	30c5383a 	mul	r2,r6,r3
8020b590:	1a47383a 	mul	r3,r3,r9
8020b594:	310d383a 	mul	r6,r6,r4
8020b598:	100ad43a 	srli	r5,r2,16
8020b59c:	4913383a 	mul	r9,r9,r4
8020b5a0:	1987883a 	add	r3,r3,r6
8020b5a4:	28c7883a 	add	r3,r5,r3
8020b5a8:	1980022e 	bgeu	r3,r6,8020b5b4 <__divdf3+0x574>
8020b5ac:	01000074 	movhi	r4,1
8020b5b0:	4913883a 	add	r9,r9,r4
8020b5b4:	1808d43a 	srli	r4,r3,16
8020b5b8:	1806943a 	slli	r3,r3,16
8020b5bc:	10bfffcc 	andi	r2,r2,65535
8020b5c0:	2253883a 	add	r9,r4,r9
8020b5c4:	1887883a 	add	r3,r3,r2
8020b5c8:	ba403836 	bltu	r23,r9,8020b6ac <__divdf3+0x66c>
8020b5cc:	ba403626 	beq	r23,r9,8020b6a8 <__divdf3+0x668>
8020b5d0:	42000054 	ori	r8,r8,1
8020b5d4:	a880ffc4 	addi	r2,r21,1023
8020b5d8:	00bf570e 	bge	zero,r2,8020b338 <__reset+0xfa1eb338>
8020b5dc:	40c001cc 	andi	r3,r8,7
8020b5e0:	18000726 	beq	r3,zero,8020b600 <__divdf3+0x5c0>
8020b5e4:	40c003cc 	andi	r3,r8,15
8020b5e8:	01000104 	movi	r4,4
8020b5ec:	19000426 	beq	r3,r4,8020b600 <__divdf3+0x5c0>
8020b5f0:	4107883a 	add	r3,r8,r4
8020b5f4:	1a11803a 	cmpltu	r8,r3,r8
8020b5f8:	8a23883a 	add	r17,r17,r8
8020b5fc:	1811883a 	mov	r8,r3
8020b600:	88c0402c 	andhi	r3,r17,256
8020b604:	18000426 	beq	r3,zero,8020b618 <__divdf3+0x5d8>
8020b608:	00ffc034 	movhi	r3,65280
8020b60c:	18ffffc4 	addi	r3,r3,-1
8020b610:	a8810004 	addi	r2,r21,1024
8020b614:	88e2703a 	and	r17,r17,r3
8020b618:	00c1ff84 	movi	r3,2046
8020b61c:	18bee316 	blt	r3,r2,8020b1ac <__reset+0xfa1eb1ac>
8020b620:	8824977a 	slli	r18,r17,29
8020b624:	4010d0fa 	srli	r8,r8,3
8020b628:	8822927a 	slli	r17,r17,9
8020b62c:	1081ffcc 	andi	r2,r2,2047
8020b630:	9224b03a 	or	r18,r18,r8
8020b634:	880ad33a 	srli	r5,r17,12
8020b638:	98c0004c 	andi	r3,r19,1
8020b63c:	003edf06 	br	8020b1bc <__reset+0xfa1eb1bc>
8020b640:	8080022c 	andhi	r2,r16,8
8020b644:	10001226 	beq	r2,zero,8020b690 <__divdf3+0x650>
8020b648:	8880022c 	andhi	r2,r17,8
8020b64c:	1000101e 	bne	r2,zero,8020b690 <__divdf3+0x650>
8020b650:	00800434 	movhi	r2,16
8020b654:	89400234 	orhi	r5,r17,8
8020b658:	10bfffc4 	addi	r2,r2,-1
8020b65c:	b007883a 	mov	r3,r22
8020b660:	288a703a 	and	r5,r5,r2
8020b664:	4025883a 	mov	r18,r8
8020b668:	003f3106 	br	8020b330 <__reset+0xfa1eb330>
8020b66c:	008000c4 	movi	r2,3
8020b670:	3880a626 	beq	r7,r2,8020b90c <__divdf3+0x8cc>
8020b674:	00800044 	movi	r2,1
8020b678:	3880521e 	bne	r7,r2,8020b7c4 <__divdf3+0x784>
8020b67c:	b807883a 	mov	r3,r23
8020b680:	0005883a 	mov	r2,zero
8020b684:	000b883a 	mov	r5,zero
8020b688:	0025883a 	mov	r18,zero
8020b68c:	003ecb06 	br	8020b1bc <__reset+0xfa1eb1bc>
8020b690:	00800434 	movhi	r2,16
8020b694:	81400234 	orhi	r5,r16,8
8020b698:	10bfffc4 	addi	r2,r2,-1
8020b69c:	a007883a 	mov	r3,r20
8020b6a0:	288a703a 	and	r5,r5,r2
8020b6a4:	003f2206 	br	8020b330 <__reset+0xfa1eb330>
8020b6a8:	183fca26 	beq	r3,zero,8020b5d4 <__reset+0xfa1eb5d4>
8020b6ac:	e5ef883a 	add	r23,fp,r23
8020b6b0:	40bfffc4 	addi	r2,r8,-1
8020b6b4:	bf00392e 	bgeu	r23,fp,8020b79c <__divdf3+0x75c>
8020b6b8:	1011883a 	mov	r8,r2
8020b6bc:	ba7fc41e 	bne	r23,r9,8020b5d0 <__reset+0xfa1eb5d0>
8020b6c0:	b0ffc31e 	bne	r22,r3,8020b5d0 <__reset+0xfa1eb5d0>
8020b6c4:	003fc306 	br	8020b5d4 <__reset+0xfa1eb5d4>
8020b6c8:	143ff604 	addi	r16,r2,-40
8020b6cc:	9c20983a 	sll	r16,r19,r16
8020b6d0:	0025883a 	mov	r18,zero
8020b6d4:	003ee206 	br	8020b260 <__reset+0xfa1eb260>
8020b6d8:	d9800315 	stw	r6,12(sp)
8020b6dc:	d9c00215 	stw	r7,8(sp)
8020b6e0:	020cd980 	call	8020cd98 <__clzsi2>
8020b6e4:	10800804 	addi	r2,r2,32
8020b6e8:	d9c00217 	ldw	r7,8(sp)
8020b6ec:	d9800317 	ldw	r6,12(sp)
8020b6f0:	003ed106 	br	8020b238 <__reset+0xfa1eb238>
8020b6f4:	147ff604 	addi	r17,r2,-40
8020b6f8:	3462983a 	sll	r17,r6,r17
8020b6fc:	0011883a 	mov	r8,zero
8020b700:	003ef506 	br	8020b2d8 <__reset+0xfa1eb2d8>
8020b704:	3009883a 	mov	r4,r6
8020b708:	d9800315 	stw	r6,12(sp)
8020b70c:	da400115 	stw	r9,4(sp)
8020b710:	020cd980 	call	8020cd98 <__clzsi2>
8020b714:	10800804 	addi	r2,r2,32
8020b718:	da400117 	ldw	r9,4(sp)
8020b71c:	d9800317 	ldw	r6,12(sp)
8020b720:	003ee306 	br	8020b2b0 <__reset+0xfa1eb2b0>
8020b724:	85a1883a 	add	r16,r16,r22
8020b728:	8585803a 	cmpltu	r2,r16,r22
8020b72c:	1705883a 	add	r2,r2,fp
8020b730:	14a5883a 	add	r18,r2,r18
8020b734:	88bfffc4 	addi	r2,r17,-1
8020b738:	e4800c2e 	bgeu	fp,r18,8020b76c <__divdf3+0x72c>
8020b73c:	90c03e36 	bltu	r18,r3,8020b838 <__divdf3+0x7f8>
8020b740:	1c806926 	beq	r3,r18,8020b8e8 <__divdf3+0x8a8>
8020b744:	90c7c83a 	sub	r3,r18,r3
8020b748:	1023883a 	mov	r17,r2
8020b74c:	003f5206 	br	8020b498 <__reset+0xfa1eb498>
8020b750:	923f0436 	bltu	r18,r8,8020b364 <__reset+0xfa1eb364>
8020b754:	800897fa 	slli	r4,r16,31
8020b758:	9004d07a 	srli	r2,r18,1
8020b75c:	8006d07a 	srli	r3,r16,1
8020b760:	902097fa 	slli	r16,r18,31
8020b764:	20a4b03a 	or	r18,r4,r2
8020b768:	003f0106 	br	8020b370 <__reset+0xfa1eb370>
8020b76c:	e4bff51e 	bne	fp,r18,8020b744 <__reset+0xfa1eb744>
8020b770:	85bff22e 	bgeu	r16,r22,8020b73c <__reset+0xfa1eb73c>
8020b774:	e0c7c83a 	sub	r3,fp,r3
8020b778:	1023883a 	mov	r17,r2
8020b77c:	003f4606 	br	8020b498 <__reset+0xfa1eb498>
8020b780:	100f883a 	mov	r7,r2
8020b784:	003f2b06 	br	8020b434 <__reset+0xfa1eb434>
8020b788:	180d883a 	mov	r6,r3
8020b78c:	003f1306 	br	8020b3dc <__reset+0xfa1eb3dc>
8020b790:	813fe436 	bltu	r16,r4,8020b724 <__reset+0xfa1eb724>
8020b794:	0007883a 	mov	r3,zero
8020b798:	003f3f06 	br	8020b498 <__reset+0xfa1eb498>
8020b79c:	ba402c36 	bltu	r23,r9,8020b850 <__divdf3+0x810>
8020b7a0:	4dc05426 	beq	r9,r23,8020b8f4 <__divdf3+0x8b4>
8020b7a4:	1011883a 	mov	r8,r2
8020b7a8:	003f8906 	br	8020b5d0 <__reset+0xfa1eb5d0>
8020b7ac:	023fffc4 	movi	r8,-1
8020b7b0:	003f8806 	br	8020b5d4 <__reset+0xfa1eb5d4>
8020b7b4:	1811883a 	mov	r8,r3
8020b7b8:	003f5406 	br	8020b50c <__reset+0xfa1eb50c>
8020b7bc:	1025883a 	mov	r18,r2
8020b7c0:	003f6d06 	br	8020b578 <__reset+0xfa1eb578>
8020b7c4:	b827883a 	mov	r19,r23
8020b7c8:	003f8206 	br	8020b5d4 <__reset+0xfa1eb5d4>
8020b7cc:	010007c4 	movi	r4,31
8020b7d0:	20c02616 	blt	r4,r3,8020b86c <__divdf3+0x82c>
8020b7d4:	00800804 	movi	r2,32
8020b7d8:	10c5c83a 	sub	r2,r2,r3
8020b7dc:	888a983a 	sll	r5,r17,r2
8020b7e0:	40c8d83a 	srl	r4,r8,r3
8020b7e4:	4084983a 	sll	r2,r8,r2
8020b7e8:	88e2d83a 	srl	r17,r17,r3
8020b7ec:	2906b03a 	or	r3,r5,r4
8020b7f0:	1004c03a 	cmpne	r2,r2,zero
8020b7f4:	1886b03a 	or	r3,r3,r2
8020b7f8:	188001cc 	andi	r2,r3,7
8020b7fc:	10000726 	beq	r2,zero,8020b81c <__divdf3+0x7dc>
8020b800:	188003cc 	andi	r2,r3,15
8020b804:	01000104 	movi	r4,4
8020b808:	11000426 	beq	r2,r4,8020b81c <__divdf3+0x7dc>
8020b80c:	1805883a 	mov	r2,r3
8020b810:	10c00104 	addi	r3,r2,4
8020b814:	1885803a 	cmpltu	r2,r3,r2
8020b818:	88a3883a 	add	r17,r17,r2
8020b81c:	8880202c 	andhi	r2,r17,128
8020b820:	10002726 	beq	r2,zero,8020b8c0 <__divdf3+0x880>
8020b824:	98c0004c 	andi	r3,r19,1
8020b828:	00800044 	movi	r2,1
8020b82c:	000b883a 	mov	r5,zero
8020b830:	0025883a 	mov	r18,zero
8020b834:	003e6106 	br	8020b1bc <__reset+0xfa1eb1bc>
8020b838:	85a1883a 	add	r16,r16,r22
8020b83c:	8585803a 	cmpltu	r2,r16,r22
8020b840:	1705883a 	add	r2,r2,fp
8020b844:	14a5883a 	add	r18,r2,r18
8020b848:	8c7fff84 	addi	r17,r17,-2
8020b84c:	003f1106 	br	8020b494 <__reset+0xfa1eb494>
8020b850:	b589883a 	add	r4,r22,r22
8020b854:	25ad803a 	cmpltu	r22,r4,r22
8020b858:	b739883a 	add	fp,r22,fp
8020b85c:	40bfff84 	addi	r2,r8,-2
8020b860:	bf2f883a 	add	r23,r23,fp
8020b864:	202d883a 	mov	r22,r4
8020b868:	003f9306 	br	8020b6b8 <__reset+0xfa1eb6b8>
8020b86c:	013ff844 	movi	r4,-31
8020b870:	2085c83a 	sub	r2,r4,r2
8020b874:	8888d83a 	srl	r4,r17,r2
8020b878:	00800804 	movi	r2,32
8020b87c:	18802126 	beq	r3,r2,8020b904 <__divdf3+0x8c4>
8020b880:	00801004 	movi	r2,64
8020b884:	10c5c83a 	sub	r2,r2,r3
8020b888:	8884983a 	sll	r2,r17,r2
8020b88c:	1204b03a 	or	r2,r2,r8
8020b890:	1004c03a 	cmpne	r2,r2,zero
8020b894:	2084b03a 	or	r2,r4,r2
8020b898:	144001cc 	andi	r17,r2,7
8020b89c:	88000d1e 	bne	r17,zero,8020b8d4 <__divdf3+0x894>
8020b8a0:	000b883a 	mov	r5,zero
8020b8a4:	1024d0fa 	srli	r18,r2,3
8020b8a8:	98c0004c 	andi	r3,r19,1
8020b8ac:	0005883a 	mov	r2,zero
8020b8b0:	9464b03a 	or	r18,r18,r17
8020b8b4:	003e4106 	br	8020b1bc <__reset+0xfa1eb1bc>
8020b8b8:	1007883a 	mov	r3,r2
8020b8bc:	0023883a 	mov	r17,zero
8020b8c0:	880a927a 	slli	r5,r17,9
8020b8c4:	1805883a 	mov	r2,r3
8020b8c8:	8822977a 	slli	r17,r17,29
8020b8cc:	280ad33a 	srli	r5,r5,12
8020b8d0:	003ff406 	br	8020b8a4 <__reset+0xfa1eb8a4>
8020b8d4:	10c003cc 	andi	r3,r2,15
8020b8d8:	01000104 	movi	r4,4
8020b8dc:	193ff626 	beq	r3,r4,8020b8b8 <__reset+0xfa1eb8b8>
8020b8e0:	0023883a 	mov	r17,zero
8020b8e4:	003fca06 	br	8020b810 <__reset+0xfa1eb810>
8020b8e8:	813fd336 	bltu	r16,r4,8020b838 <__reset+0xfa1eb838>
8020b8ec:	1023883a 	mov	r17,r2
8020b8f0:	003fa806 	br	8020b794 <__reset+0xfa1eb794>
8020b8f4:	b0ffd636 	bltu	r22,r3,8020b850 <__reset+0xfa1eb850>
8020b8f8:	1011883a 	mov	r8,r2
8020b8fc:	b0ff341e 	bne	r22,r3,8020b5d0 <__reset+0xfa1eb5d0>
8020b900:	003f3406 	br	8020b5d4 <__reset+0xfa1eb5d4>
8020b904:	0005883a 	mov	r2,zero
8020b908:	003fe006 	br	8020b88c <__reset+0xfa1eb88c>
8020b90c:	00800434 	movhi	r2,16
8020b910:	89400234 	orhi	r5,r17,8
8020b914:	10bfffc4 	addi	r2,r2,-1
8020b918:	b807883a 	mov	r3,r23
8020b91c:	288a703a 	and	r5,r5,r2
8020b920:	4025883a 	mov	r18,r8
8020b924:	003e8206 	br	8020b330 <__reset+0xfa1eb330>

8020b928 <__eqdf2>:
8020b928:	2804d53a 	srli	r2,r5,20
8020b92c:	3806d53a 	srli	r3,r7,20
8020b930:	02000434 	movhi	r8,16
8020b934:	423fffc4 	addi	r8,r8,-1
8020b938:	1081ffcc 	andi	r2,r2,2047
8020b93c:	0281ffc4 	movi	r10,2047
8020b940:	2a12703a 	and	r9,r5,r8
8020b944:	18c1ffcc 	andi	r3,r3,2047
8020b948:	3a10703a 	and	r8,r7,r8
8020b94c:	280ad7fa 	srli	r5,r5,31
8020b950:	380ed7fa 	srli	r7,r7,31
8020b954:	12801026 	beq	r2,r10,8020b998 <__eqdf2+0x70>
8020b958:	0281ffc4 	movi	r10,2047
8020b95c:	1a800a26 	beq	r3,r10,8020b988 <__eqdf2+0x60>
8020b960:	10c00226 	beq	r2,r3,8020b96c <__eqdf2+0x44>
8020b964:	00800044 	movi	r2,1
8020b968:	f800283a 	ret
8020b96c:	4a3ffd1e 	bne	r9,r8,8020b964 <__reset+0xfa1eb964>
8020b970:	21bffc1e 	bne	r4,r6,8020b964 <__reset+0xfa1eb964>
8020b974:	29c00c26 	beq	r5,r7,8020b9a8 <__eqdf2+0x80>
8020b978:	103ffa1e 	bne	r2,zero,8020b964 <__reset+0xfa1eb964>
8020b97c:	2244b03a 	or	r2,r4,r9
8020b980:	1004c03a 	cmpne	r2,r2,zero
8020b984:	f800283a 	ret
8020b988:	3214b03a 	or	r10,r6,r8
8020b98c:	503ff426 	beq	r10,zero,8020b960 <__reset+0xfa1eb960>
8020b990:	00800044 	movi	r2,1
8020b994:	f800283a 	ret
8020b998:	2254b03a 	or	r10,r4,r9
8020b99c:	503fee26 	beq	r10,zero,8020b958 <__reset+0xfa1eb958>
8020b9a0:	00800044 	movi	r2,1
8020b9a4:	f800283a 	ret
8020b9a8:	0005883a 	mov	r2,zero
8020b9ac:	f800283a 	ret

8020b9b0 <__gedf2>:
8020b9b0:	2804d53a 	srli	r2,r5,20
8020b9b4:	3806d53a 	srli	r3,r7,20
8020b9b8:	02000434 	movhi	r8,16
8020b9bc:	423fffc4 	addi	r8,r8,-1
8020b9c0:	1081ffcc 	andi	r2,r2,2047
8020b9c4:	0241ffc4 	movi	r9,2047
8020b9c8:	2a14703a 	and	r10,r5,r8
8020b9cc:	18c1ffcc 	andi	r3,r3,2047
8020b9d0:	3a10703a 	and	r8,r7,r8
8020b9d4:	280ad7fa 	srli	r5,r5,31
8020b9d8:	380ed7fa 	srli	r7,r7,31
8020b9dc:	12401d26 	beq	r2,r9,8020ba54 <__gedf2+0xa4>
8020b9e0:	0241ffc4 	movi	r9,2047
8020b9e4:	1a401226 	beq	r3,r9,8020ba30 <__gedf2+0x80>
8020b9e8:	1000081e 	bne	r2,zero,8020ba0c <__gedf2+0x5c>
8020b9ec:	2296b03a 	or	r11,r4,r10
8020b9f0:	5813003a 	cmpeq	r9,r11,zero
8020b9f4:	1800091e 	bne	r3,zero,8020ba1c <__gedf2+0x6c>
8020b9f8:	3218b03a 	or	r12,r6,r8
8020b9fc:	6000071e 	bne	r12,zero,8020ba1c <__gedf2+0x6c>
8020ba00:	0005883a 	mov	r2,zero
8020ba04:	5800101e 	bne	r11,zero,8020ba48 <__gedf2+0x98>
8020ba08:	f800283a 	ret
8020ba0c:	18000c1e 	bne	r3,zero,8020ba40 <__gedf2+0x90>
8020ba10:	3212b03a 	or	r9,r6,r8
8020ba14:	48000c26 	beq	r9,zero,8020ba48 <__gedf2+0x98>
8020ba18:	0013883a 	mov	r9,zero
8020ba1c:	39c03fcc 	andi	r7,r7,255
8020ba20:	48000826 	beq	r9,zero,8020ba44 <__gedf2+0x94>
8020ba24:	38000926 	beq	r7,zero,8020ba4c <__gedf2+0x9c>
8020ba28:	00800044 	movi	r2,1
8020ba2c:	f800283a 	ret
8020ba30:	3212b03a 	or	r9,r6,r8
8020ba34:	483fec26 	beq	r9,zero,8020b9e8 <__reset+0xfa1eb9e8>
8020ba38:	00bfff84 	movi	r2,-2
8020ba3c:	f800283a 	ret
8020ba40:	39c03fcc 	andi	r7,r7,255
8020ba44:	29c00626 	beq	r5,r7,8020ba60 <__gedf2+0xb0>
8020ba48:	283ff726 	beq	r5,zero,8020ba28 <__reset+0xfa1eba28>
8020ba4c:	00bfffc4 	movi	r2,-1
8020ba50:	f800283a 	ret
8020ba54:	2292b03a 	or	r9,r4,r10
8020ba58:	483fe126 	beq	r9,zero,8020b9e0 <__reset+0xfa1eb9e0>
8020ba5c:	003ff606 	br	8020ba38 <__reset+0xfa1eba38>
8020ba60:	18bff916 	blt	r3,r2,8020ba48 <__reset+0xfa1eba48>
8020ba64:	10c00316 	blt	r2,r3,8020ba74 <__gedf2+0xc4>
8020ba68:	42bff736 	bltu	r8,r10,8020ba48 <__reset+0xfa1eba48>
8020ba6c:	52000326 	beq	r10,r8,8020ba7c <__gedf2+0xcc>
8020ba70:	5200042e 	bgeu	r10,r8,8020ba84 <__gedf2+0xd4>
8020ba74:	283fec1e 	bne	r5,zero,8020ba28 <__reset+0xfa1eba28>
8020ba78:	003ff406 	br	8020ba4c <__reset+0xfa1eba4c>
8020ba7c:	313ff236 	bltu	r6,r4,8020ba48 <__reset+0xfa1eba48>
8020ba80:	21bffc36 	bltu	r4,r6,8020ba74 <__reset+0xfa1eba74>
8020ba84:	0005883a 	mov	r2,zero
8020ba88:	f800283a 	ret

8020ba8c <__ledf2>:
8020ba8c:	2804d53a 	srli	r2,r5,20
8020ba90:	3810d53a 	srli	r8,r7,20
8020ba94:	00c00434 	movhi	r3,16
8020ba98:	18ffffc4 	addi	r3,r3,-1
8020ba9c:	1081ffcc 	andi	r2,r2,2047
8020baa0:	0241ffc4 	movi	r9,2047
8020baa4:	28d4703a 	and	r10,r5,r3
8020baa8:	4201ffcc 	andi	r8,r8,2047
8020baac:	38c6703a 	and	r3,r7,r3
8020bab0:	280ad7fa 	srli	r5,r5,31
8020bab4:	380ed7fa 	srli	r7,r7,31
8020bab8:	12401f26 	beq	r2,r9,8020bb38 <__ledf2+0xac>
8020babc:	0241ffc4 	movi	r9,2047
8020bac0:	42401426 	beq	r8,r9,8020bb14 <__ledf2+0x88>
8020bac4:	1000091e 	bne	r2,zero,8020baec <__ledf2+0x60>
8020bac8:	2296b03a 	or	r11,r4,r10
8020bacc:	5813003a 	cmpeq	r9,r11,zero
8020bad0:	29403fcc 	andi	r5,r5,255
8020bad4:	40000a1e 	bne	r8,zero,8020bb00 <__ledf2+0x74>
8020bad8:	30d8b03a 	or	r12,r6,r3
8020badc:	6000081e 	bne	r12,zero,8020bb00 <__ledf2+0x74>
8020bae0:	0005883a 	mov	r2,zero
8020bae4:	5800111e 	bne	r11,zero,8020bb2c <__ledf2+0xa0>
8020bae8:	f800283a 	ret
8020baec:	29403fcc 	andi	r5,r5,255
8020baf0:	40000c1e 	bne	r8,zero,8020bb24 <__ledf2+0x98>
8020baf4:	30d2b03a 	or	r9,r6,r3
8020baf8:	48000c26 	beq	r9,zero,8020bb2c <__ledf2+0xa0>
8020bafc:	0013883a 	mov	r9,zero
8020bb00:	39c03fcc 	andi	r7,r7,255
8020bb04:	48000826 	beq	r9,zero,8020bb28 <__ledf2+0x9c>
8020bb08:	38001126 	beq	r7,zero,8020bb50 <__ledf2+0xc4>
8020bb0c:	00800044 	movi	r2,1
8020bb10:	f800283a 	ret
8020bb14:	30d2b03a 	or	r9,r6,r3
8020bb18:	483fea26 	beq	r9,zero,8020bac4 <__reset+0xfa1ebac4>
8020bb1c:	00800084 	movi	r2,2
8020bb20:	f800283a 	ret
8020bb24:	39c03fcc 	andi	r7,r7,255
8020bb28:	39400726 	beq	r7,r5,8020bb48 <__ledf2+0xbc>
8020bb2c:	2800081e 	bne	r5,zero,8020bb50 <__ledf2+0xc4>
8020bb30:	00800044 	movi	r2,1
8020bb34:	f800283a 	ret
8020bb38:	2292b03a 	or	r9,r4,r10
8020bb3c:	483fdf26 	beq	r9,zero,8020babc <__reset+0xfa1ebabc>
8020bb40:	00800084 	movi	r2,2
8020bb44:	f800283a 	ret
8020bb48:	4080030e 	bge	r8,r2,8020bb58 <__ledf2+0xcc>
8020bb4c:	383fef26 	beq	r7,zero,8020bb0c <__reset+0xfa1ebb0c>
8020bb50:	00bfffc4 	movi	r2,-1
8020bb54:	f800283a 	ret
8020bb58:	123feb16 	blt	r2,r8,8020bb08 <__reset+0xfa1ebb08>
8020bb5c:	1abff336 	bltu	r3,r10,8020bb2c <__reset+0xfa1ebb2c>
8020bb60:	50c00326 	beq	r10,r3,8020bb70 <__ledf2+0xe4>
8020bb64:	50c0042e 	bgeu	r10,r3,8020bb78 <__ledf2+0xec>
8020bb68:	283fe81e 	bne	r5,zero,8020bb0c <__reset+0xfa1ebb0c>
8020bb6c:	003ff806 	br	8020bb50 <__reset+0xfa1ebb50>
8020bb70:	313fee36 	bltu	r6,r4,8020bb2c <__reset+0xfa1ebb2c>
8020bb74:	21bffc36 	bltu	r4,r6,8020bb68 <__reset+0xfa1ebb68>
8020bb78:	0005883a 	mov	r2,zero
8020bb7c:	f800283a 	ret

8020bb80 <__muldf3>:
8020bb80:	defff304 	addi	sp,sp,-52
8020bb84:	2804d53a 	srli	r2,r5,20
8020bb88:	dd800915 	stw	r22,36(sp)
8020bb8c:	282cd7fa 	srli	r22,r5,31
8020bb90:	dc000315 	stw	r16,12(sp)
8020bb94:	04000434 	movhi	r16,16
8020bb98:	dd400815 	stw	r21,32(sp)
8020bb9c:	dc800515 	stw	r18,20(sp)
8020bba0:	843fffc4 	addi	r16,r16,-1
8020bba4:	dfc00c15 	stw	ra,48(sp)
8020bba8:	df000b15 	stw	fp,44(sp)
8020bbac:	ddc00a15 	stw	r23,40(sp)
8020bbb0:	dd000715 	stw	r20,28(sp)
8020bbb4:	dcc00615 	stw	r19,24(sp)
8020bbb8:	dc400415 	stw	r17,16(sp)
8020bbbc:	1481ffcc 	andi	r18,r2,2047
8020bbc0:	2c20703a 	and	r16,r5,r16
8020bbc4:	b02b883a 	mov	r21,r22
8020bbc8:	b2403fcc 	andi	r9,r22,255
8020bbcc:	90006026 	beq	r18,zero,8020bd50 <__muldf3+0x1d0>
8020bbd0:	0081ffc4 	movi	r2,2047
8020bbd4:	2029883a 	mov	r20,r4
8020bbd8:	90803626 	beq	r18,r2,8020bcb4 <__muldf3+0x134>
8020bbdc:	80800434 	orhi	r2,r16,16
8020bbe0:	100490fa 	slli	r2,r2,3
8020bbe4:	2020d77a 	srli	r16,r4,29
8020bbe8:	202890fa 	slli	r20,r4,3
8020bbec:	94bf0044 	addi	r18,r18,-1023
8020bbf0:	80a0b03a 	or	r16,r16,r2
8020bbf4:	0027883a 	mov	r19,zero
8020bbf8:	0039883a 	mov	fp,zero
8020bbfc:	3804d53a 	srli	r2,r7,20
8020bc00:	382ed7fa 	srli	r23,r7,31
8020bc04:	04400434 	movhi	r17,16
8020bc08:	8c7fffc4 	addi	r17,r17,-1
8020bc0c:	1081ffcc 	andi	r2,r2,2047
8020bc10:	3011883a 	mov	r8,r6
8020bc14:	3c62703a 	and	r17,r7,r17
8020bc18:	ba803fcc 	andi	r10,r23,255
8020bc1c:	10006d26 	beq	r2,zero,8020bdd4 <__muldf3+0x254>
8020bc20:	00c1ffc4 	movi	r3,2047
8020bc24:	10c06526 	beq	r2,r3,8020bdbc <__muldf3+0x23c>
8020bc28:	88c00434 	orhi	r3,r17,16
8020bc2c:	180690fa 	slli	r3,r3,3
8020bc30:	3022d77a 	srli	r17,r6,29
8020bc34:	301090fa 	slli	r8,r6,3
8020bc38:	10bf0044 	addi	r2,r2,-1023
8020bc3c:	88e2b03a 	or	r17,r17,r3
8020bc40:	000b883a 	mov	r5,zero
8020bc44:	9085883a 	add	r2,r18,r2
8020bc48:	2cc8b03a 	or	r4,r5,r19
8020bc4c:	00c003c4 	movi	r3,15
8020bc50:	bdacf03a 	xor	r22,r23,r22
8020bc54:	12c00044 	addi	r11,r2,1
8020bc58:	19009936 	bltu	r3,r4,8020bec0 <__muldf3+0x340>
8020bc5c:	200890ba 	slli	r4,r4,2
8020bc60:	00e00874 	movhi	r3,32801
8020bc64:	18ef1d04 	addi	r3,r3,-17292
8020bc68:	20c9883a 	add	r4,r4,r3
8020bc6c:	20c00017 	ldw	r3,0(r4)
8020bc70:	1800683a 	jmp	r3
8020bc74:	8020bec0 	call	88020bec <__reset+0x2000bec>
8020bc78:	8020bcd4 	ori	zero,r16,33523
8020bc7c:	8020bcd4 	ori	zero,r16,33523
8020bc80:	8020bcd0 	cmplti	zero,r16,-32013
8020bc84:	8020be9c 	xori	zero,r16,33530
8020bc88:	8020be9c 	xori	zero,r16,33530
8020bc8c:	8020be84 	addi	zero,r16,-32006
8020bc90:	8020bcd0 	cmplti	zero,r16,-32013
8020bc94:	8020be9c 	xori	zero,r16,33530
8020bc98:	8020be84 	addi	zero,r16,-32006
8020bc9c:	8020be9c 	xori	zero,r16,33530
8020bca0:	8020bcd0 	cmplti	zero,r16,-32013
8020bca4:	8020beac 	andhi	zero,r16,33530
8020bca8:	8020beac 	andhi	zero,r16,33530
8020bcac:	8020beac 	andhi	zero,r16,33530
8020bcb0:	8020c0c8 	cmpgei	zero,r16,-31997
8020bcb4:	2404b03a 	or	r2,r4,r16
8020bcb8:	10006f1e 	bne	r2,zero,8020be78 <__muldf3+0x2f8>
8020bcbc:	04c00204 	movi	r19,8
8020bcc0:	0021883a 	mov	r16,zero
8020bcc4:	0029883a 	mov	r20,zero
8020bcc8:	07000084 	movi	fp,2
8020bccc:	003fcb06 	br	8020bbfc <__reset+0xfa1ebbfc>
8020bcd0:	502d883a 	mov	r22,r10
8020bcd4:	00800084 	movi	r2,2
8020bcd8:	28805726 	beq	r5,r2,8020be38 <__muldf3+0x2b8>
8020bcdc:	008000c4 	movi	r2,3
8020bce0:	28816626 	beq	r5,r2,8020c27c <__muldf3+0x6fc>
8020bce4:	00800044 	movi	r2,1
8020bce8:	2881411e 	bne	r5,r2,8020c1f0 <__muldf3+0x670>
8020bcec:	b02b883a 	mov	r21,r22
8020bcf0:	0005883a 	mov	r2,zero
8020bcf4:	000b883a 	mov	r5,zero
8020bcf8:	0029883a 	mov	r20,zero
8020bcfc:	1004953a 	slli	r2,r2,20
8020bd00:	a8c03fcc 	andi	r3,r21,255
8020bd04:	04400434 	movhi	r17,16
8020bd08:	8c7fffc4 	addi	r17,r17,-1
8020bd0c:	180697fa 	slli	r3,r3,31
8020bd10:	2c4a703a 	and	r5,r5,r17
8020bd14:	288ab03a 	or	r5,r5,r2
8020bd18:	28c6b03a 	or	r3,r5,r3
8020bd1c:	a005883a 	mov	r2,r20
8020bd20:	dfc00c17 	ldw	ra,48(sp)
8020bd24:	df000b17 	ldw	fp,44(sp)
8020bd28:	ddc00a17 	ldw	r23,40(sp)
8020bd2c:	dd800917 	ldw	r22,36(sp)
8020bd30:	dd400817 	ldw	r21,32(sp)
8020bd34:	dd000717 	ldw	r20,28(sp)
8020bd38:	dcc00617 	ldw	r19,24(sp)
8020bd3c:	dc800517 	ldw	r18,20(sp)
8020bd40:	dc400417 	ldw	r17,16(sp)
8020bd44:	dc000317 	ldw	r16,12(sp)
8020bd48:	dec00d04 	addi	sp,sp,52
8020bd4c:	f800283a 	ret
8020bd50:	2404b03a 	or	r2,r4,r16
8020bd54:	2027883a 	mov	r19,r4
8020bd58:	10004226 	beq	r2,zero,8020be64 <__muldf3+0x2e4>
8020bd5c:	8000fc26 	beq	r16,zero,8020c150 <__muldf3+0x5d0>
8020bd60:	8009883a 	mov	r4,r16
8020bd64:	d9800215 	stw	r6,8(sp)
8020bd68:	d9c00015 	stw	r7,0(sp)
8020bd6c:	da400115 	stw	r9,4(sp)
8020bd70:	020cd980 	call	8020cd98 <__clzsi2>
8020bd74:	d9800217 	ldw	r6,8(sp)
8020bd78:	d9c00017 	ldw	r7,0(sp)
8020bd7c:	da400117 	ldw	r9,4(sp)
8020bd80:	113ffd44 	addi	r4,r2,-11
8020bd84:	00c00704 	movi	r3,28
8020bd88:	1900ed16 	blt	r3,r4,8020c140 <__muldf3+0x5c0>
8020bd8c:	00c00744 	movi	r3,29
8020bd90:	147ffe04 	addi	r17,r2,-8
8020bd94:	1907c83a 	sub	r3,r3,r4
8020bd98:	8460983a 	sll	r16,r16,r17
8020bd9c:	98c6d83a 	srl	r3,r19,r3
8020bda0:	9c68983a 	sll	r20,r19,r17
8020bda4:	1c20b03a 	or	r16,r3,r16
8020bda8:	1080fcc4 	addi	r2,r2,1011
8020bdac:	00a5c83a 	sub	r18,zero,r2
8020bdb0:	0027883a 	mov	r19,zero
8020bdb4:	0039883a 	mov	fp,zero
8020bdb8:	003f9006 	br	8020bbfc <__reset+0xfa1ebbfc>
8020bdbc:	3446b03a 	or	r3,r6,r17
8020bdc0:	1800261e 	bne	r3,zero,8020be5c <__muldf3+0x2dc>
8020bdc4:	0023883a 	mov	r17,zero
8020bdc8:	0011883a 	mov	r8,zero
8020bdcc:	01400084 	movi	r5,2
8020bdd0:	003f9c06 	br	8020bc44 <__reset+0xfa1ebc44>
8020bdd4:	3446b03a 	or	r3,r6,r17
8020bdd8:	18001c26 	beq	r3,zero,8020be4c <__muldf3+0x2cc>
8020bddc:	8800ce26 	beq	r17,zero,8020c118 <__muldf3+0x598>
8020bde0:	8809883a 	mov	r4,r17
8020bde4:	d9800215 	stw	r6,8(sp)
8020bde8:	da400115 	stw	r9,4(sp)
8020bdec:	da800015 	stw	r10,0(sp)
8020bdf0:	020cd980 	call	8020cd98 <__clzsi2>
8020bdf4:	d9800217 	ldw	r6,8(sp)
8020bdf8:	da400117 	ldw	r9,4(sp)
8020bdfc:	da800017 	ldw	r10,0(sp)
8020be00:	113ffd44 	addi	r4,r2,-11
8020be04:	00c00704 	movi	r3,28
8020be08:	1900bf16 	blt	r3,r4,8020c108 <__muldf3+0x588>
8020be0c:	00c00744 	movi	r3,29
8020be10:	123ffe04 	addi	r8,r2,-8
8020be14:	1907c83a 	sub	r3,r3,r4
8020be18:	8a22983a 	sll	r17,r17,r8
8020be1c:	30c6d83a 	srl	r3,r6,r3
8020be20:	3210983a 	sll	r8,r6,r8
8020be24:	1c62b03a 	or	r17,r3,r17
8020be28:	1080fcc4 	addi	r2,r2,1011
8020be2c:	0085c83a 	sub	r2,zero,r2
8020be30:	000b883a 	mov	r5,zero
8020be34:	003f8306 	br	8020bc44 <__reset+0xfa1ebc44>
8020be38:	b02b883a 	mov	r21,r22
8020be3c:	0081ffc4 	movi	r2,2047
8020be40:	000b883a 	mov	r5,zero
8020be44:	0029883a 	mov	r20,zero
8020be48:	003fac06 	br	8020bcfc <__reset+0xfa1ebcfc>
8020be4c:	0023883a 	mov	r17,zero
8020be50:	0011883a 	mov	r8,zero
8020be54:	01400044 	movi	r5,1
8020be58:	003f7a06 	br	8020bc44 <__reset+0xfa1ebc44>
8020be5c:	014000c4 	movi	r5,3
8020be60:	003f7806 	br	8020bc44 <__reset+0xfa1ebc44>
8020be64:	04c00104 	movi	r19,4
8020be68:	0021883a 	mov	r16,zero
8020be6c:	0029883a 	mov	r20,zero
8020be70:	07000044 	movi	fp,1
8020be74:	003f6106 	br	8020bbfc <__reset+0xfa1ebbfc>
8020be78:	04c00304 	movi	r19,12
8020be7c:	070000c4 	movi	fp,3
8020be80:	003f5e06 	br	8020bbfc <__reset+0xfa1ebbfc>
8020be84:	01400434 	movhi	r5,16
8020be88:	002b883a 	mov	r21,zero
8020be8c:	297fffc4 	addi	r5,r5,-1
8020be90:	053fffc4 	movi	r20,-1
8020be94:	0081ffc4 	movi	r2,2047
8020be98:	003f9806 	br	8020bcfc <__reset+0xfa1ebcfc>
8020be9c:	8023883a 	mov	r17,r16
8020bea0:	a011883a 	mov	r8,r20
8020bea4:	e00b883a 	mov	r5,fp
8020bea8:	003f8a06 	br	8020bcd4 <__reset+0xfa1ebcd4>
8020beac:	8023883a 	mov	r17,r16
8020beb0:	a011883a 	mov	r8,r20
8020beb4:	482d883a 	mov	r22,r9
8020beb8:	e00b883a 	mov	r5,fp
8020bebc:	003f8506 	br	8020bcd4 <__reset+0xfa1ebcd4>
8020bec0:	a00ad43a 	srli	r5,r20,16
8020bec4:	401ad43a 	srli	r13,r8,16
8020bec8:	a53fffcc 	andi	r20,r20,65535
8020becc:	423fffcc 	andi	r8,r8,65535
8020bed0:	4519383a 	mul	r12,r8,r20
8020bed4:	4147383a 	mul	r3,r8,r5
8020bed8:	6d09383a 	mul	r4,r13,r20
8020bedc:	600cd43a 	srli	r6,r12,16
8020bee0:	2b5d383a 	mul	r14,r5,r13
8020bee4:	20c9883a 	add	r4,r4,r3
8020bee8:	310d883a 	add	r6,r6,r4
8020beec:	30c0022e 	bgeu	r6,r3,8020bef8 <__muldf3+0x378>
8020bef0:	00c00074 	movhi	r3,1
8020bef4:	70dd883a 	add	r14,r14,r3
8020bef8:	8826d43a 	srli	r19,r17,16
8020befc:	8bffffcc 	andi	r15,r17,65535
8020bf00:	7d23383a 	mul	r17,r15,r20
8020bf04:	7949383a 	mul	r4,r15,r5
8020bf08:	9d29383a 	mul	r20,r19,r20
8020bf0c:	8814d43a 	srli	r10,r17,16
8020bf10:	3012943a 	slli	r9,r6,16
8020bf14:	a129883a 	add	r20,r20,r4
8020bf18:	633fffcc 	andi	r12,r12,65535
8020bf1c:	5515883a 	add	r10,r10,r20
8020bf20:	3006d43a 	srli	r3,r6,16
8020bf24:	4b13883a 	add	r9,r9,r12
8020bf28:	2ccb383a 	mul	r5,r5,r19
8020bf2c:	5100022e 	bgeu	r10,r4,8020bf38 <__muldf3+0x3b8>
8020bf30:	01000074 	movhi	r4,1
8020bf34:	290b883a 	add	r5,r5,r4
8020bf38:	802ad43a 	srli	r21,r16,16
8020bf3c:	843fffcc 	andi	r16,r16,65535
8020bf40:	440d383a 	mul	r6,r8,r16
8020bf44:	4565383a 	mul	r18,r8,r21
8020bf48:	8349383a 	mul	r4,r16,r13
8020bf4c:	500e943a 	slli	r7,r10,16
8020bf50:	3010d43a 	srli	r8,r6,16
8020bf54:	5028d43a 	srli	r20,r10,16
8020bf58:	2489883a 	add	r4,r4,r18
8020bf5c:	8abfffcc 	andi	r10,r17,65535
8020bf60:	3a95883a 	add	r10,r7,r10
8020bf64:	4119883a 	add	r12,r8,r4
8020bf68:	a169883a 	add	r20,r20,r5
8020bf6c:	1a87883a 	add	r3,r3,r10
8020bf70:	6d5b383a 	mul	r13,r13,r21
8020bf74:	6480022e 	bgeu	r12,r18,8020bf80 <__muldf3+0x400>
8020bf78:	01000074 	movhi	r4,1
8020bf7c:	691b883a 	add	r13,r13,r4
8020bf80:	7c25383a 	mul	r18,r15,r16
8020bf84:	7d4b383a 	mul	r5,r15,r21
8020bf88:	84cf383a 	mul	r7,r16,r19
8020bf8c:	901ed43a 	srli	r15,r18,16
8020bf90:	6008d43a 	srli	r4,r12,16
8020bf94:	6010943a 	slli	r8,r12,16
8020bf98:	394f883a 	add	r7,r7,r5
8020bf9c:	333fffcc 	andi	r12,r6,65535
8020bfa0:	79df883a 	add	r15,r15,r7
8020bfa4:	235b883a 	add	r13,r4,r13
8020bfa8:	9d63383a 	mul	r17,r19,r21
8020bfac:	4309883a 	add	r4,r8,r12
8020bfb0:	7940022e 	bgeu	r15,r5,8020bfbc <__muldf3+0x43c>
8020bfb4:	01400074 	movhi	r5,1
8020bfb8:	8963883a 	add	r17,r17,r5
8020bfbc:	780a943a 	slli	r5,r15,16
8020bfc0:	91bfffcc 	andi	r6,r18,65535
8020bfc4:	70c7883a 	add	r3,r14,r3
8020bfc8:	298d883a 	add	r6,r5,r6
8020bfcc:	1a8f803a 	cmpltu	r7,r3,r10
8020bfd0:	350b883a 	add	r5,r6,r20
8020bfd4:	20c7883a 	add	r3,r4,r3
8020bfd8:	3955883a 	add	r10,r7,r5
8020bfdc:	1909803a 	cmpltu	r4,r3,r4
8020bfe0:	6a91883a 	add	r8,r13,r10
8020bfe4:	780cd43a 	srli	r6,r15,16
8020bfe8:	2219883a 	add	r12,r4,r8
8020bfec:	2d0b803a 	cmpltu	r5,r5,r20
8020bff0:	51cf803a 	cmpltu	r7,r10,r7
8020bff4:	29ceb03a 	or	r7,r5,r7
8020bff8:	4351803a 	cmpltu	r8,r8,r13
8020bffc:	610b803a 	cmpltu	r5,r12,r4
8020c000:	4148b03a 	or	r4,r8,r5
8020c004:	398f883a 	add	r7,r7,r6
8020c008:	3909883a 	add	r4,r7,r4
8020c00c:	1810927a 	slli	r8,r3,9
8020c010:	2449883a 	add	r4,r4,r17
8020c014:	2008927a 	slli	r4,r4,9
8020c018:	6022d5fa 	srli	r17,r12,23
8020c01c:	1806d5fa 	srli	r3,r3,23
8020c020:	4252b03a 	or	r9,r8,r9
8020c024:	600a927a 	slli	r5,r12,9
8020c028:	4810c03a 	cmpne	r8,r9,zero
8020c02c:	2462b03a 	or	r17,r4,r17
8020c030:	40c6b03a 	or	r3,r8,r3
8020c034:	8900402c 	andhi	r4,r17,256
8020c038:	1950b03a 	or	r8,r3,r5
8020c03c:	20000726 	beq	r4,zero,8020c05c <__muldf3+0x4dc>
8020c040:	4006d07a 	srli	r3,r8,1
8020c044:	880497fa 	slli	r2,r17,31
8020c048:	4200004c 	andi	r8,r8,1
8020c04c:	8822d07a 	srli	r17,r17,1
8020c050:	1a10b03a 	or	r8,r3,r8
8020c054:	1210b03a 	or	r8,r2,r8
8020c058:	5805883a 	mov	r2,r11
8020c05c:	1140ffc4 	addi	r5,r2,1023
8020c060:	0140440e 	bge	zero,r5,8020c174 <__muldf3+0x5f4>
8020c064:	40c001cc 	andi	r3,r8,7
8020c068:	18000726 	beq	r3,zero,8020c088 <__muldf3+0x508>
8020c06c:	40c003cc 	andi	r3,r8,15
8020c070:	01000104 	movi	r4,4
8020c074:	19000426 	beq	r3,r4,8020c088 <__muldf3+0x508>
8020c078:	4107883a 	add	r3,r8,r4
8020c07c:	1a11803a 	cmpltu	r8,r3,r8
8020c080:	8a23883a 	add	r17,r17,r8
8020c084:	1811883a 	mov	r8,r3
8020c088:	88c0402c 	andhi	r3,r17,256
8020c08c:	18000426 	beq	r3,zero,8020c0a0 <__muldf3+0x520>
8020c090:	11410004 	addi	r5,r2,1024
8020c094:	00bfc034 	movhi	r2,65280
8020c098:	10bfffc4 	addi	r2,r2,-1
8020c09c:	88a2703a 	and	r17,r17,r2
8020c0a0:	0081ff84 	movi	r2,2046
8020c0a4:	117f6416 	blt	r2,r5,8020be38 <__reset+0xfa1ebe38>
8020c0a8:	8828977a 	slli	r20,r17,29
8020c0ac:	4010d0fa 	srli	r8,r8,3
8020c0b0:	8822927a 	slli	r17,r17,9
8020c0b4:	2881ffcc 	andi	r2,r5,2047
8020c0b8:	a228b03a 	or	r20,r20,r8
8020c0bc:	880ad33a 	srli	r5,r17,12
8020c0c0:	b02b883a 	mov	r21,r22
8020c0c4:	003f0d06 	br	8020bcfc <__reset+0xfa1ebcfc>
8020c0c8:	8080022c 	andhi	r2,r16,8
8020c0cc:	10000926 	beq	r2,zero,8020c0f4 <__muldf3+0x574>
8020c0d0:	8880022c 	andhi	r2,r17,8
8020c0d4:	1000071e 	bne	r2,zero,8020c0f4 <__muldf3+0x574>
8020c0d8:	00800434 	movhi	r2,16
8020c0dc:	89400234 	orhi	r5,r17,8
8020c0e0:	10bfffc4 	addi	r2,r2,-1
8020c0e4:	b82b883a 	mov	r21,r23
8020c0e8:	288a703a 	and	r5,r5,r2
8020c0ec:	4029883a 	mov	r20,r8
8020c0f0:	003f6806 	br	8020be94 <__reset+0xfa1ebe94>
8020c0f4:	00800434 	movhi	r2,16
8020c0f8:	81400234 	orhi	r5,r16,8
8020c0fc:	10bfffc4 	addi	r2,r2,-1
8020c100:	288a703a 	and	r5,r5,r2
8020c104:	003f6306 	br	8020be94 <__reset+0xfa1ebe94>
8020c108:	147ff604 	addi	r17,r2,-40
8020c10c:	3462983a 	sll	r17,r6,r17
8020c110:	0011883a 	mov	r8,zero
8020c114:	003f4406 	br	8020be28 <__reset+0xfa1ebe28>
8020c118:	3009883a 	mov	r4,r6
8020c11c:	d9800215 	stw	r6,8(sp)
8020c120:	da400115 	stw	r9,4(sp)
8020c124:	da800015 	stw	r10,0(sp)
8020c128:	020cd980 	call	8020cd98 <__clzsi2>
8020c12c:	10800804 	addi	r2,r2,32
8020c130:	da800017 	ldw	r10,0(sp)
8020c134:	da400117 	ldw	r9,4(sp)
8020c138:	d9800217 	ldw	r6,8(sp)
8020c13c:	003f3006 	br	8020be00 <__reset+0xfa1ebe00>
8020c140:	143ff604 	addi	r16,r2,-40
8020c144:	9c20983a 	sll	r16,r19,r16
8020c148:	0029883a 	mov	r20,zero
8020c14c:	003f1606 	br	8020bda8 <__reset+0xfa1ebda8>
8020c150:	d9800215 	stw	r6,8(sp)
8020c154:	d9c00015 	stw	r7,0(sp)
8020c158:	da400115 	stw	r9,4(sp)
8020c15c:	020cd980 	call	8020cd98 <__clzsi2>
8020c160:	10800804 	addi	r2,r2,32
8020c164:	da400117 	ldw	r9,4(sp)
8020c168:	d9c00017 	ldw	r7,0(sp)
8020c16c:	d9800217 	ldw	r6,8(sp)
8020c170:	003f0306 	br	8020bd80 <__reset+0xfa1ebd80>
8020c174:	00c00044 	movi	r3,1
8020c178:	1947c83a 	sub	r3,r3,r5
8020c17c:	00800e04 	movi	r2,56
8020c180:	10feda16 	blt	r2,r3,8020bcec <__reset+0xfa1ebcec>
8020c184:	008007c4 	movi	r2,31
8020c188:	10c01b16 	blt	r2,r3,8020c1f8 <__muldf3+0x678>
8020c18c:	00800804 	movi	r2,32
8020c190:	10c5c83a 	sub	r2,r2,r3
8020c194:	888a983a 	sll	r5,r17,r2
8020c198:	40c8d83a 	srl	r4,r8,r3
8020c19c:	4084983a 	sll	r2,r8,r2
8020c1a0:	88e2d83a 	srl	r17,r17,r3
8020c1a4:	2906b03a 	or	r3,r5,r4
8020c1a8:	1004c03a 	cmpne	r2,r2,zero
8020c1ac:	1886b03a 	or	r3,r3,r2
8020c1b0:	188001cc 	andi	r2,r3,7
8020c1b4:	10000726 	beq	r2,zero,8020c1d4 <__muldf3+0x654>
8020c1b8:	188003cc 	andi	r2,r3,15
8020c1bc:	01000104 	movi	r4,4
8020c1c0:	11000426 	beq	r2,r4,8020c1d4 <__muldf3+0x654>
8020c1c4:	1805883a 	mov	r2,r3
8020c1c8:	10c00104 	addi	r3,r2,4
8020c1cc:	1885803a 	cmpltu	r2,r3,r2
8020c1d0:	88a3883a 	add	r17,r17,r2
8020c1d4:	8880202c 	andhi	r2,r17,128
8020c1d8:	10001c26 	beq	r2,zero,8020c24c <__muldf3+0x6cc>
8020c1dc:	b02b883a 	mov	r21,r22
8020c1e0:	00800044 	movi	r2,1
8020c1e4:	000b883a 	mov	r5,zero
8020c1e8:	0029883a 	mov	r20,zero
8020c1ec:	003ec306 	br	8020bcfc <__reset+0xfa1ebcfc>
8020c1f0:	5805883a 	mov	r2,r11
8020c1f4:	003f9906 	br	8020c05c <__reset+0xfa1ec05c>
8020c1f8:	00bff844 	movi	r2,-31
8020c1fc:	1145c83a 	sub	r2,r2,r5
8020c200:	8888d83a 	srl	r4,r17,r2
8020c204:	00800804 	movi	r2,32
8020c208:	18801a26 	beq	r3,r2,8020c274 <__muldf3+0x6f4>
8020c20c:	00801004 	movi	r2,64
8020c210:	10c5c83a 	sub	r2,r2,r3
8020c214:	8884983a 	sll	r2,r17,r2
8020c218:	1204b03a 	or	r2,r2,r8
8020c21c:	1004c03a 	cmpne	r2,r2,zero
8020c220:	2084b03a 	or	r2,r4,r2
8020c224:	144001cc 	andi	r17,r2,7
8020c228:	88000d1e 	bne	r17,zero,8020c260 <__muldf3+0x6e0>
8020c22c:	000b883a 	mov	r5,zero
8020c230:	1028d0fa 	srli	r20,r2,3
8020c234:	b02b883a 	mov	r21,r22
8020c238:	0005883a 	mov	r2,zero
8020c23c:	a468b03a 	or	r20,r20,r17
8020c240:	003eae06 	br	8020bcfc <__reset+0xfa1ebcfc>
8020c244:	1007883a 	mov	r3,r2
8020c248:	0023883a 	mov	r17,zero
8020c24c:	880a927a 	slli	r5,r17,9
8020c250:	1805883a 	mov	r2,r3
8020c254:	8822977a 	slli	r17,r17,29
8020c258:	280ad33a 	srli	r5,r5,12
8020c25c:	003ff406 	br	8020c230 <__reset+0xfa1ec230>
8020c260:	10c003cc 	andi	r3,r2,15
8020c264:	01000104 	movi	r4,4
8020c268:	193ff626 	beq	r3,r4,8020c244 <__reset+0xfa1ec244>
8020c26c:	0023883a 	mov	r17,zero
8020c270:	003fd506 	br	8020c1c8 <__reset+0xfa1ec1c8>
8020c274:	0005883a 	mov	r2,zero
8020c278:	003fe706 	br	8020c218 <__reset+0xfa1ec218>
8020c27c:	00800434 	movhi	r2,16
8020c280:	89400234 	orhi	r5,r17,8
8020c284:	10bfffc4 	addi	r2,r2,-1
8020c288:	b02b883a 	mov	r21,r22
8020c28c:	288a703a 	and	r5,r5,r2
8020c290:	4029883a 	mov	r20,r8
8020c294:	003eff06 	br	8020be94 <__reset+0xfa1ebe94>

8020c298 <__subdf3>:
8020c298:	02000434 	movhi	r8,16
8020c29c:	423fffc4 	addi	r8,r8,-1
8020c2a0:	defffb04 	addi	sp,sp,-20
8020c2a4:	2a14703a 	and	r10,r5,r8
8020c2a8:	3812d53a 	srli	r9,r7,20
8020c2ac:	3a10703a 	and	r8,r7,r8
8020c2b0:	2006d77a 	srli	r3,r4,29
8020c2b4:	3004d77a 	srli	r2,r6,29
8020c2b8:	dc000015 	stw	r16,0(sp)
8020c2bc:	501490fa 	slli	r10,r10,3
8020c2c0:	2820d53a 	srli	r16,r5,20
8020c2c4:	401090fa 	slli	r8,r8,3
8020c2c8:	dc800215 	stw	r18,8(sp)
8020c2cc:	dc400115 	stw	r17,4(sp)
8020c2d0:	dfc00415 	stw	ra,16(sp)
8020c2d4:	202290fa 	slli	r17,r4,3
8020c2d8:	dcc00315 	stw	r19,12(sp)
8020c2dc:	4a41ffcc 	andi	r9,r9,2047
8020c2e0:	0101ffc4 	movi	r4,2047
8020c2e4:	2824d7fa 	srli	r18,r5,31
8020c2e8:	8401ffcc 	andi	r16,r16,2047
8020c2ec:	50c6b03a 	or	r3,r10,r3
8020c2f0:	380ed7fa 	srli	r7,r7,31
8020c2f4:	408ab03a 	or	r5,r8,r2
8020c2f8:	300c90fa 	slli	r6,r6,3
8020c2fc:	49009626 	beq	r9,r4,8020c558 <__subdf3+0x2c0>
8020c300:	39c0005c 	xori	r7,r7,1
8020c304:	8245c83a 	sub	r2,r16,r9
8020c308:	3c807426 	beq	r7,r18,8020c4dc <__subdf3+0x244>
8020c30c:	0080af0e 	bge	zero,r2,8020c5cc <__subdf3+0x334>
8020c310:	48002a1e 	bne	r9,zero,8020c3bc <__subdf3+0x124>
8020c314:	2988b03a 	or	r4,r5,r6
8020c318:	20009a1e 	bne	r4,zero,8020c584 <__subdf3+0x2ec>
8020c31c:	888001cc 	andi	r2,r17,7
8020c320:	10000726 	beq	r2,zero,8020c340 <__subdf3+0xa8>
8020c324:	888003cc 	andi	r2,r17,15
8020c328:	01000104 	movi	r4,4
8020c32c:	11000426 	beq	r2,r4,8020c340 <__subdf3+0xa8>
8020c330:	890b883a 	add	r5,r17,r4
8020c334:	2c63803a 	cmpltu	r17,r5,r17
8020c338:	1c47883a 	add	r3,r3,r17
8020c33c:	2823883a 	mov	r17,r5
8020c340:	1880202c 	andhi	r2,r3,128
8020c344:	10005926 	beq	r2,zero,8020c4ac <__subdf3+0x214>
8020c348:	84000044 	addi	r16,r16,1
8020c34c:	0081ffc4 	movi	r2,2047
8020c350:	8080be26 	beq	r16,r2,8020c64c <__subdf3+0x3b4>
8020c354:	017fe034 	movhi	r5,65408
8020c358:	297fffc4 	addi	r5,r5,-1
8020c35c:	1946703a 	and	r3,r3,r5
8020c360:	1804977a 	slli	r2,r3,29
8020c364:	1806927a 	slli	r3,r3,9
8020c368:	8822d0fa 	srli	r17,r17,3
8020c36c:	8401ffcc 	andi	r16,r16,2047
8020c370:	180ad33a 	srli	r5,r3,12
8020c374:	9100004c 	andi	r4,r18,1
8020c378:	1444b03a 	or	r2,r2,r17
8020c37c:	80c1ffcc 	andi	r3,r16,2047
8020c380:	1820953a 	slli	r16,r3,20
8020c384:	20c03fcc 	andi	r3,r4,255
8020c388:	180897fa 	slli	r4,r3,31
8020c38c:	00c00434 	movhi	r3,16
8020c390:	18ffffc4 	addi	r3,r3,-1
8020c394:	28c6703a 	and	r3,r5,r3
8020c398:	1c06b03a 	or	r3,r3,r16
8020c39c:	1906b03a 	or	r3,r3,r4
8020c3a0:	dfc00417 	ldw	ra,16(sp)
8020c3a4:	dcc00317 	ldw	r19,12(sp)
8020c3a8:	dc800217 	ldw	r18,8(sp)
8020c3ac:	dc400117 	ldw	r17,4(sp)
8020c3b0:	dc000017 	ldw	r16,0(sp)
8020c3b4:	dec00504 	addi	sp,sp,20
8020c3b8:	f800283a 	ret
8020c3bc:	0101ffc4 	movi	r4,2047
8020c3c0:	813fd626 	beq	r16,r4,8020c31c <__reset+0xfa1ec31c>
8020c3c4:	29402034 	orhi	r5,r5,128
8020c3c8:	01000e04 	movi	r4,56
8020c3cc:	2080a316 	blt	r4,r2,8020c65c <__subdf3+0x3c4>
8020c3d0:	010007c4 	movi	r4,31
8020c3d4:	2080c616 	blt	r4,r2,8020c6f0 <__subdf3+0x458>
8020c3d8:	01000804 	movi	r4,32
8020c3dc:	2089c83a 	sub	r4,r4,r2
8020c3e0:	2910983a 	sll	r8,r5,r4
8020c3e4:	308ed83a 	srl	r7,r6,r2
8020c3e8:	3108983a 	sll	r4,r6,r4
8020c3ec:	2884d83a 	srl	r2,r5,r2
8020c3f0:	41ccb03a 	or	r6,r8,r7
8020c3f4:	2008c03a 	cmpne	r4,r4,zero
8020c3f8:	310cb03a 	or	r6,r6,r4
8020c3fc:	898dc83a 	sub	r6,r17,r6
8020c400:	89a3803a 	cmpltu	r17,r17,r6
8020c404:	1887c83a 	sub	r3,r3,r2
8020c408:	1c47c83a 	sub	r3,r3,r17
8020c40c:	3023883a 	mov	r17,r6
8020c410:	1880202c 	andhi	r2,r3,128
8020c414:	10002326 	beq	r2,zero,8020c4a4 <__subdf3+0x20c>
8020c418:	04c02034 	movhi	r19,128
8020c41c:	9cffffc4 	addi	r19,r19,-1
8020c420:	1ce6703a 	and	r19,r3,r19
8020c424:	98007a26 	beq	r19,zero,8020c610 <__subdf3+0x378>
8020c428:	9809883a 	mov	r4,r19
8020c42c:	020cd980 	call	8020cd98 <__clzsi2>
8020c430:	113ffe04 	addi	r4,r2,-8
8020c434:	00c007c4 	movi	r3,31
8020c438:	19007b16 	blt	r3,r4,8020c628 <__subdf3+0x390>
8020c43c:	00800804 	movi	r2,32
8020c440:	1105c83a 	sub	r2,r2,r4
8020c444:	8884d83a 	srl	r2,r17,r2
8020c448:	9906983a 	sll	r3,r19,r4
8020c44c:	8922983a 	sll	r17,r17,r4
8020c450:	10c4b03a 	or	r2,r2,r3
8020c454:	24007816 	blt	r4,r16,8020c638 <__subdf3+0x3a0>
8020c458:	2421c83a 	sub	r16,r4,r16
8020c45c:	80c00044 	addi	r3,r16,1
8020c460:	010007c4 	movi	r4,31
8020c464:	20c09516 	blt	r4,r3,8020c6bc <__subdf3+0x424>
8020c468:	01400804 	movi	r5,32
8020c46c:	28cbc83a 	sub	r5,r5,r3
8020c470:	88c8d83a 	srl	r4,r17,r3
8020c474:	8962983a 	sll	r17,r17,r5
8020c478:	114a983a 	sll	r5,r2,r5
8020c47c:	10c6d83a 	srl	r3,r2,r3
8020c480:	8804c03a 	cmpne	r2,r17,zero
8020c484:	290ab03a 	or	r5,r5,r4
8020c488:	28a2b03a 	or	r17,r5,r2
8020c48c:	0021883a 	mov	r16,zero
8020c490:	003fa206 	br	8020c31c <__reset+0xfa1ec31c>
8020c494:	2090b03a 	or	r8,r4,r2
8020c498:	40018e26 	beq	r8,zero,8020cad4 <__subdf3+0x83c>
8020c49c:	1007883a 	mov	r3,r2
8020c4a0:	2023883a 	mov	r17,r4
8020c4a4:	888001cc 	andi	r2,r17,7
8020c4a8:	103f9e1e 	bne	r2,zero,8020c324 <__reset+0xfa1ec324>
8020c4ac:	1804977a 	slli	r2,r3,29
8020c4b0:	8822d0fa 	srli	r17,r17,3
8020c4b4:	1810d0fa 	srli	r8,r3,3
8020c4b8:	9100004c 	andi	r4,r18,1
8020c4bc:	1444b03a 	or	r2,r2,r17
8020c4c0:	00c1ffc4 	movi	r3,2047
8020c4c4:	80c02826 	beq	r16,r3,8020c568 <__subdf3+0x2d0>
8020c4c8:	01400434 	movhi	r5,16
8020c4cc:	297fffc4 	addi	r5,r5,-1
8020c4d0:	80e0703a 	and	r16,r16,r3
8020c4d4:	414a703a 	and	r5,r8,r5
8020c4d8:	003fa806 	br	8020c37c <__reset+0xfa1ec37c>
8020c4dc:	0080630e 	bge	zero,r2,8020c66c <__subdf3+0x3d4>
8020c4e0:	48003026 	beq	r9,zero,8020c5a4 <__subdf3+0x30c>
8020c4e4:	0101ffc4 	movi	r4,2047
8020c4e8:	813f8c26 	beq	r16,r4,8020c31c <__reset+0xfa1ec31c>
8020c4ec:	29402034 	orhi	r5,r5,128
8020c4f0:	01000e04 	movi	r4,56
8020c4f4:	2080a90e 	bge	r4,r2,8020c79c <__subdf3+0x504>
8020c4f8:	298cb03a 	or	r6,r5,r6
8020c4fc:	3012c03a 	cmpne	r9,r6,zero
8020c500:	0005883a 	mov	r2,zero
8020c504:	4c53883a 	add	r9,r9,r17
8020c508:	4c63803a 	cmpltu	r17,r9,r17
8020c50c:	10c7883a 	add	r3,r2,r3
8020c510:	88c7883a 	add	r3,r17,r3
8020c514:	4823883a 	mov	r17,r9
8020c518:	1880202c 	andhi	r2,r3,128
8020c51c:	1000d026 	beq	r2,zero,8020c860 <__subdf3+0x5c8>
8020c520:	84000044 	addi	r16,r16,1
8020c524:	0081ffc4 	movi	r2,2047
8020c528:	8080fe26 	beq	r16,r2,8020c924 <__subdf3+0x68c>
8020c52c:	00bfe034 	movhi	r2,65408
8020c530:	10bfffc4 	addi	r2,r2,-1
8020c534:	1886703a 	and	r3,r3,r2
8020c538:	880ad07a 	srli	r5,r17,1
8020c53c:	180497fa 	slli	r2,r3,31
8020c540:	8900004c 	andi	r4,r17,1
8020c544:	2922b03a 	or	r17,r5,r4
8020c548:	1806d07a 	srli	r3,r3,1
8020c54c:	1462b03a 	or	r17,r2,r17
8020c550:	3825883a 	mov	r18,r7
8020c554:	003f7106 	br	8020c31c <__reset+0xfa1ec31c>
8020c558:	2984b03a 	or	r2,r5,r6
8020c55c:	103f6826 	beq	r2,zero,8020c300 <__reset+0xfa1ec300>
8020c560:	39c03fcc 	andi	r7,r7,255
8020c564:	003f6706 	br	8020c304 <__reset+0xfa1ec304>
8020c568:	4086b03a 	or	r3,r8,r2
8020c56c:	18015226 	beq	r3,zero,8020cab8 <__subdf3+0x820>
8020c570:	00c00434 	movhi	r3,16
8020c574:	41400234 	orhi	r5,r8,8
8020c578:	18ffffc4 	addi	r3,r3,-1
8020c57c:	28ca703a 	and	r5,r5,r3
8020c580:	003f7e06 	br	8020c37c <__reset+0xfa1ec37c>
8020c584:	10bfffc4 	addi	r2,r2,-1
8020c588:	1000491e 	bne	r2,zero,8020c6b0 <__subdf3+0x418>
8020c58c:	898fc83a 	sub	r7,r17,r6
8020c590:	89e3803a 	cmpltu	r17,r17,r7
8020c594:	1947c83a 	sub	r3,r3,r5
8020c598:	1c47c83a 	sub	r3,r3,r17
8020c59c:	3823883a 	mov	r17,r7
8020c5a0:	003f9b06 	br	8020c410 <__reset+0xfa1ec410>
8020c5a4:	2988b03a 	or	r4,r5,r6
8020c5a8:	203f5c26 	beq	r4,zero,8020c31c <__reset+0xfa1ec31c>
8020c5ac:	10bfffc4 	addi	r2,r2,-1
8020c5b0:	1000931e 	bne	r2,zero,8020c800 <__subdf3+0x568>
8020c5b4:	898d883a 	add	r6,r17,r6
8020c5b8:	3463803a 	cmpltu	r17,r6,r17
8020c5bc:	1947883a 	add	r3,r3,r5
8020c5c0:	88c7883a 	add	r3,r17,r3
8020c5c4:	3023883a 	mov	r17,r6
8020c5c8:	003fd306 	br	8020c518 <__reset+0xfa1ec518>
8020c5cc:	1000541e 	bne	r2,zero,8020c720 <__subdf3+0x488>
8020c5d0:	80800044 	addi	r2,r16,1
8020c5d4:	1081ffcc 	andi	r2,r2,2047
8020c5d8:	01000044 	movi	r4,1
8020c5dc:	2080a20e 	bge	r4,r2,8020c868 <__subdf3+0x5d0>
8020c5e0:	8989c83a 	sub	r4,r17,r6
8020c5e4:	8905803a 	cmpltu	r2,r17,r4
8020c5e8:	1967c83a 	sub	r19,r3,r5
8020c5ec:	98a7c83a 	sub	r19,r19,r2
8020c5f0:	9880202c 	andhi	r2,r19,128
8020c5f4:	10006326 	beq	r2,zero,8020c784 <__subdf3+0x4ec>
8020c5f8:	3463c83a 	sub	r17,r6,r17
8020c5fc:	28c7c83a 	sub	r3,r5,r3
8020c600:	344d803a 	cmpltu	r6,r6,r17
8020c604:	19a7c83a 	sub	r19,r3,r6
8020c608:	3825883a 	mov	r18,r7
8020c60c:	983f861e 	bne	r19,zero,8020c428 <__reset+0xfa1ec428>
8020c610:	8809883a 	mov	r4,r17
8020c614:	020cd980 	call	8020cd98 <__clzsi2>
8020c618:	10800804 	addi	r2,r2,32
8020c61c:	113ffe04 	addi	r4,r2,-8
8020c620:	00c007c4 	movi	r3,31
8020c624:	193f850e 	bge	r3,r4,8020c43c <__reset+0xfa1ec43c>
8020c628:	10bff604 	addi	r2,r2,-40
8020c62c:	8884983a 	sll	r2,r17,r2
8020c630:	0023883a 	mov	r17,zero
8020c634:	243f880e 	bge	r4,r16,8020c458 <__reset+0xfa1ec458>
8020c638:	00ffe034 	movhi	r3,65408
8020c63c:	18ffffc4 	addi	r3,r3,-1
8020c640:	8121c83a 	sub	r16,r16,r4
8020c644:	10c6703a 	and	r3,r2,r3
8020c648:	003f3406 	br	8020c31c <__reset+0xfa1ec31c>
8020c64c:	9100004c 	andi	r4,r18,1
8020c650:	000b883a 	mov	r5,zero
8020c654:	0005883a 	mov	r2,zero
8020c658:	003f4806 	br	8020c37c <__reset+0xfa1ec37c>
8020c65c:	298cb03a 	or	r6,r5,r6
8020c660:	300cc03a 	cmpne	r6,r6,zero
8020c664:	0005883a 	mov	r2,zero
8020c668:	003f6406 	br	8020c3fc <__reset+0xfa1ec3fc>
8020c66c:	10009a1e 	bne	r2,zero,8020c8d8 <__subdf3+0x640>
8020c670:	82400044 	addi	r9,r16,1
8020c674:	4881ffcc 	andi	r2,r9,2047
8020c678:	02800044 	movi	r10,1
8020c67c:	5080670e 	bge	r10,r2,8020c81c <__subdf3+0x584>
8020c680:	0081ffc4 	movi	r2,2047
8020c684:	4880af26 	beq	r9,r2,8020c944 <__subdf3+0x6ac>
8020c688:	898d883a 	add	r6,r17,r6
8020c68c:	1945883a 	add	r2,r3,r5
8020c690:	3447803a 	cmpltu	r3,r6,r17
8020c694:	1887883a 	add	r3,r3,r2
8020c698:	182297fa 	slli	r17,r3,31
8020c69c:	300cd07a 	srli	r6,r6,1
8020c6a0:	1806d07a 	srli	r3,r3,1
8020c6a4:	4821883a 	mov	r16,r9
8020c6a8:	89a2b03a 	or	r17,r17,r6
8020c6ac:	003f1b06 	br	8020c31c <__reset+0xfa1ec31c>
8020c6b0:	0101ffc4 	movi	r4,2047
8020c6b4:	813f441e 	bne	r16,r4,8020c3c8 <__reset+0xfa1ec3c8>
8020c6b8:	003f1806 	br	8020c31c <__reset+0xfa1ec31c>
8020c6bc:	843ff844 	addi	r16,r16,-31
8020c6c0:	01400804 	movi	r5,32
8020c6c4:	1408d83a 	srl	r4,r2,r16
8020c6c8:	19405026 	beq	r3,r5,8020c80c <__subdf3+0x574>
8020c6cc:	01401004 	movi	r5,64
8020c6d0:	28c7c83a 	sub	r3,r5,r3
8020c6d4:	10c4983a 	sll	r2,r2,r3
8020c6d8:	88a2b03a 	or	r17,r17,r2
8020c6dc:	8822c03a 	cmpne	r17,r17,zero
8020c6e0:	2462b03a 	or	r17,r4,r17
8020c6e4:	0007883a 	mov	r3,zero
8020c6e8:	0021883a 	mov	r16,zero
8020c6ec:	003f6d06 	br	8020c4a4 <__reset+0xfa1ec4a4>
8020c6f0:	11fff804 	addi	r7,r2,-32
8020c6f4:	01000804 	movi	r4,32
8020c6f8:	29ced83a 	srl	r7,r5,r7
8020c6fc:	11004526 	beq	r2,r4,8020c814 <__subdf3+0x57c>
8020c700:	01001004 	movi	r4,64
8020c704:	2089c83a 	sub	r4,r4,r2
8020c708:	2904983a 	sll	r2,r5,r4
8020c70c:	118cb03a 	or	r6,r2,r6
8020c710:	300cc03a 	cmpne	r6,r6,zero
8020c714:	398cb03a 	or	r6,r7,r6
8020c718:	0005883a 	mov	r2,zero
8020c71c:	003f3706 	br	8020c3fc <__reset+0xfa1ec3fc>
8020c720:	80002a26 	beq	r16,zero,8020c7cc <__subdf3+0x534>
8020c724:	0101ffc4 	movi	r4,2047
8020c728:	49006626 	beq	r9,r4,8020c8c4 <__subdf3+0x62c>
8020c72c:	0085c83a 	sub	r2,zero,r2
8020c730:	18c02034 	orhi	r3,r3,128
8020c734:	01000e04 	movi	r4,56
8020c738:	20807e16 	blt	r4,r2,8020c934 <__subdf3+0x69c>
8020c73c:	010007c4 	movi	r4,31
8020c740:	2080e716 	blt	r4,r2,8020cae0 <__subdf3+0x848>
8020c744:	01000804 	movi	r4,32
8020c748:	2089c83a 	sub	r4,r4,r2
8020c74c:	1914983a 	sll	r10,r3,r4
8020c750:	8890d83a 	srl	r8,r17,r2
8020c754:	8908983a 	sll	r4,r17,r4
8020c758:	1884d83a 	srl	r2,r3,r2
8020c75c:	5222b03a 	or	r17,r10,r8
8020c760:	2006c03a 	cmpne	r3,r4,zero
8020c764:	88e2b03a 	or	r17,r17,r3
8020c768:	3463c83a 	sub	r17,r6,r17
8020c76c:	2885c83a 	sub	r2,r5,r2
8020c770:	344d803a 	cmpltu	r6,r6,r17
8020c774:	1187c83a 	sub	r3,r2,r6
8020c778:	4821883a 	mov	r16,r9
8020c77c:	3825883a 	mov	r18,r7
8020c780:	003f2306 	br	8020c410 <__reset+0xfa1ec410>
8020c784:	24d0b03a 	or	r8,r4,r19
8020c788:	40001b1e 	bne	r8,zero,8020c7f8 <__subdf3+0x560>
8020c78c:	0005883a 	mov	r2,zero
8020c790:	0009883a 	mov	r4,zero
8020c794:	0021883a 	mov	r16,zero
8020c798:	003f4906 	br	8020c4c0 <__reset+0xfa1ec4c0>
8020c79c:	010007c4 	movi	r4,31
8020c7a0:	20803a16 	blt	r4,r2,8020c88c <__subdf3+0x5f4>
8020c7a4:	01000804 	movi	r4,32
8020c7a8:	2089c83a 	sub	r4,r4,r2
8020c7ac:	2912983a 	sll	r9,r5,r4
8020c7b0:	3090d83a 	srl	r8,r6,r2
8020c7b4:	3108983a 	sll	r4,r6,r4
8020c7b8:	2884d83a 	srl	r2,r5,r2
8020c7bc:	4a12b03a 	or	r9,r9,r8
8020c7c0:	2008c03a 	cmpne	r4,r4,zero
8020c7c4:	4912b03a 	or	r9,r9,r4
8020c7c8:	003f4e06 	br	8020c504 <__reset+0xfa1ec504>
8020c7cc:	1c48b03a 	or	r4,r3,r17
8020c7d0:	20003c26 	beq	r4,zero,8020c8c4 <__subdf3+0x62c>
8020c7d4:	0084303a 	nor	r2,zero,r2
8020c7d8:	1000381e 	bne	r2,zero,8020c8bc <__subdf3+0x624>
8020c7dc:	3463c83a 	sub	r17,r6,r17
8020c7e0:	28c5c83a 	sub	r2,r5,r3
8020c7e4:	344d803a 	cmpltu	r6,r6,r17
8020c7e8:	1187c83a 	sub	r3,r2,r6
8020c7ec:	4821883a 	mov	r16,r9
8020c7f0:	3825883a 	mov	r18,r7
8020c7f4:	003f0606 	br	8020c410 <__reset+0xfa1ec410>
8020c7f8:	2023883a 	mov	r17,r4
8020c7fc:	003f0906 	br	8020c424 <__reset+0xfa1ec424>
8020c800:	0101ffc4 	movi	r4,2047
8020c804:	813f3a1e 	bne	r16,r4,8020c4f0 <__reset+0xfa1ec4f0>
8020c808:	003ec406 	br	8020c31c <__reset+0xfa1ec31c>
8020c80c:	0005883a 	mov	r2,zero
8020c810:	003fb106 	br	8020c6d8 <__reset+0xfa1ec6d8>
8020c814:	0005883a 	mov	r2,zero
8020c818:	003fbc06 	br	8020c70c <__reset+0xfa1ec70c>
8020c81c:	1c44b03a 	or	r2,r3,r17
8020c820:	80008e1e 	bne	r16,zero,8020ca5c <__subdf3+0x7c4>
8020c824:	1000c826 	beq	r2,zero,8020cb48 <__subdf3+0x8b0>
8020c828:	2984b03a 	or	r2,r5,r6
8020c82c:	103ebb26 	beq	r2,zero,8020c31c <__reset+0xfa1ec31c>
8020c830:	8989883a 	add	r4,r17,r6
8020c834:	1945883a 	add	r2,r3,r5
8020c838:	2447803a 	cmpltu	r3,r4,r17
8020c83c:	1887883a 	add	r3,r3,r2
8020c840:	1880202c 	andhi	r2,r3,128
8020c844:	2023883a 	mov	r17,r4
8020c848:	103f1626 	beq	r2,zero,8020c4a4 <__reset+0xfa1ec4a4>
8020c84c:	00bfe034 	movhi	r2,65408
8020c850:	10bfffc4 	addi	r2,r2,-1
8020c854:	5021883a 	mov	r16,r10
8020c858:	1886703a 	and	r3,r3,r2
8020c85c:	003eaf06 	br	8020c31c <__reset+0xfa1ec31c>
8020c860:	3825883a 	mov	r18,r7
8020c864:	003f0f06 	br	8020c4a4 <__reset+0xfa1ec4a4>
8020c868:	1c44b03a 	or	r2,r3,r17
8020c86c:	8000251e 	bne	r16,zero,8020c904 <__subdf3+0x66c>
8020c870:	1000661e 	bne	r2,zero,8020ca0c <__subdf3+0x774>
8020c874:	2990b03a 	or	r8,r5,r6
8020c878:	40009626 	beq	r8,zero,8020cad4 <__subdf3+0x83c>
8020c87c:	2807883a 	mov	r3,r5
8020c880:	3023883a 	mov	r17,r6
8020c884:	3825883a 	mov	r18,r7
8020c888:	003ea406 	br	8020c31c <__reset+0xfa1ec31c>
8020c88c:	127ff804 	addi	r9,r2,-32
8020c890:	01000804 	movi	r4,32
8020c894:	2a52d83a 	srl	r9,r5,r9
8020c898:	11008c26 	beq	r2,r4,8020cacc <__subdf3+0x834>
8020c89c:	01001004 	movi	r4,64
8020c8a0:	2085c83a 	sub	r2,r4,r2
8020c8a4:	2884983a 	sll	r2,r5,r2
8020c8a8:	118cb03a 	or	r6,r2,r6
8020c8ac:	300cc03a 	cmpne	r6,r6,zero
8020c8b0:	4992b03a 	or	r9,r9,r6
8020c8b4:	0005883a 	mov	r2,zero
8020c8b8:	003f1206 	br	8020c504 <__reset+0xfa1ec504>
8020c8bc:	0101ffc4 	movi	r4,2047
8020c8c0:	493f9c1e 	bne	r9,r4,8020c734 <__reset+0xfa1ec734>
8020c8c4:	2807883a 	mov	r3,r5
8020c8c8:	3023883a 	mov	r17,r6
8020c8cc:	4821883a 	mov	r16,r9
8020c8d0:	3825883a 	mov	r18,r7
8020c8d4:	003e9106 	br	8020c31c <__reset+0xfa1ec31c>
8020c8d8:	80001f1e 	bne	r16,zero,8020c958 <__subdf3+0x6c0>
8020c8dc:	1c48b03a 	or	r4,r3,r17
8020c8e0:	20005a26 	beq	r4,zero,8020ca4c <__subdf3+0x7b4>
8020c8e4:	0084303a 	nor	r2,zero,r2
8020c8e8:	1000561e 	bne	r2,zero,8020ca44 <__subdf3+0x7ac>
8020c8ec:	89a3883a 	add	r17,r17,r6
8020c8f0:	1945883a 	add	r2,r3,r5
8020c8f4:	898d803a 	cmpltu	r6,r17,r6
8020c8f8:	3087883a 	add	r3,r6,r2
8020c8fc:	4821883a 	mov	r16,r9
8020c900:	003f0506 	br	8020c518 <__reset+0xfa1ec518>
8020c904:	10002b1e 	bne	r2,zero,8020c9b4 <__subdf3+0x71c>
8020c908:	2984b03a 	or	r2,r5,r6
8020c90c:	10008026 	beq	r2,zero,8020cb10 <__subdf3+0x878>
8020c910:	2807883a 	mov	r3,r5
8020c914:	3023883a 	mov	r17,r6
8020c918:	3825883a 	mov	r18,r7
8020c91c:	0401ffc4 	movi	r16,2047
8020c920:	003e7e06 	br	8020c31c <__reset+0xfa1ec31c>
8020c924:	3809883a 	mov	r4,r7
8020c928:	0011883a 	mov	r8,zero
8020c92c:	0005883a 	mov	r2,zero
8020c930:	003ee306 	br	8020c4c0 <__reset+0xfa1ec4c0>
8020c934:	1c62b03a 	or	r17,r3,r17
8020c938:	8822c03a 	cmpne	r17,r17,zero
8020c93c:	0005883a 	mov	r2,zero
8020c940:	003f8906 	br	8020c768 <__reset+0xfa1ec768>
8020c944:	3809883a 	mov	r4,r7
8020c948:	4821883a 	mov	r16,r9
8020c94c:	0011883a 	mov	r8,zero
8020c950:	0005883a 	mov	r2,zero
8020c954:	003eda06 	br	8020c4c0 <__reset+0xfa1ec4c0>
8020c958:	0101ffc4 	movi	r4,2047
8020c95c:	49003b26 	beq	r9,r4,8020ca4c <__subdf3+0x7b4>
8020c960:	0085c83a 	sub	r2,zero,r2
8020c964:	18c02034 	orhi	r3,r3,128
8020c968:	01000e04 	movi	r4,56
8020c96c:	20806e16 	blt	r4,r2,8020cb28 <__subdf3+0x890>
8020c970:	010007c4 	movi	r4,31
8020c974:	20807716 	blt	r4,r2,8020cb54 <__subdf3+0x8bc>
8020c978:	01000804 	movi	r4,32
8020c97c:	2089c83a 	sub	r4,r4,r2
8020c980:	1914983a 	sll	r10,r3,r4
8020c984:	8890d83a 	srl	r8,r17,r2
8020c988:	8908983a 	sll	r4,r17,r4
8020c98c:	1884d83a 	srl	r2,r3,r2
8020c990:	5222b03a 	or	r17,r10,r8
8020c994:	2006c03a 	cmpne	r3,r4,zero
8020c998:	88e2b03a 	or	r17,r17,r3
8020c99c:	89a3883a 	add	r17,r17,r6
8020c9a0:	1145883a 	add	r2,r2,r5
8020c9a4:	898d803a 	cmpltu	r6,r17,r6
8020c9a8:	3087883a 	add	r3,r6,r2
8020c9ac:	4821883a 	mov	r16,r9
8020c9b0:	003ed906 	br	8020c518 <__reset+0xfa1ec518>
8020c9b4:	2984b03a 	or	r2,r5,r6
8020c9b8:	10004226 	beq	r2,zero,8020cac4 <__subdf3+0x82c>
8020c9bc:	1808d0fa 	srli	r4,r3,3
8020c9c0:	8822d0fa 	srli	r17,r17,3
8020c9c4:	1806977a 	slli	r3,r3,29
8020c9c8:	2080022c 	andhi	r2,r4,8
8020c9cc:	1c62b03a 	or	r17,r3,r17
8020c9d0:	10000826 	beq	r2,zero,8020c9f4 <__subdf3+0x75c>
8020c9d4:	2812d0fa 	srli	r9,r5,3
8020c9d8:	4880022c 	andhi	r2,r9,8
8020c9dc:	1000051e 	bne	r2,zero,8020c9f4 <__subdf3+0x75c>
8020c9e0:	300cd0fa 	srli	r6,r6,3
8020c9e4:	2804977a 	slli	r2,r5,29
8020c9e8:	4809883a 	mov	r4,r9
8020c9ec:	3825883a 	mov	r18,r7
8020c9f0:	11a2b03a 	or	r17,r2,r6
8020c9f4:	8806d77a 	srli	r3,r17,29
8020c9f8:	200890fa 	slli	r4,r4,3
8020c9fc:	882290fa 	slli	r17,r17,3
8020ca00:	0401ffc4 	movi	r16,2047
8020ca04:	1906b03a 	or	r3,r3,r4
8020ca08:	003e4406 	br	8020c31c <__reset+0xfa1ec31c>
8020ca0c:	2984b03a 	or	r2,r5,r6
8020ca10:	103e4226 	beq	r2,zero,8020c31c <__reset+0xfa1ec31c>
8020ca14:	8989c83a 	sub	r4,r17,r6
8020ca18:	8911803a 	cmpltu	r8,r17,r4
8020ca1c:	1945c83a 	sub	r2,r3,r5
8020ca20:	1205c83a 	sub	r2,r2,r8
8020ca24:	1200202c 	andhi	r8,r2,128
8020ca28:	403e9a26 	beq	r8,zero,8020c494 <__reset+0xfa1ec494>
8020ca2c:	3463c83a 	sub	r17,r6,r17
8020ca30:	28c5c83a 	sub	r2,r5,r3
8020ca34:	344d803a 	cmpltu	r6,r6,r17
8020ca38:	1187c83a 	sub	r3,r2,r6
8020ca3c:	3825883a 	mov	r18,r7
8020ca40:	003e3606 	br	8020c31c <__reset+0xfa1ec31c>
8020ca44:	0101ffc4 	movi	r4,2047
8020ca48:	493fc71e 	bne	r9,r4,8020c968 <__reset+0xfa1ec968>
8020ca4c:	2807883a 	mov	r3,r5
8020ca50:	3023883a 	mov	r17,r6
8020ca54:	4821883a 	mov	r16,r9
8020ca58:	003e3006 	br	8020c31c <__reset+0xfa1ec31c>
8020ca5c:	10003626 	beq	r2,zero,8020cb38 <__subdf3+0x8a0>
8020ca60:	2984b03a 	or	r2,r5,r6
8020ca64:	10001726 	beq	r2,zero,8020cac4 <__subdf3+0x82c>
8020ca68:	1808d0fa 	srli	r4,r3,3
8020ca6c:	8822d0fa 	srli	r17,r17,3
8020ca70:	1806977a 	slli	r3,r3,29
8020ca74:	2080022c 	andhi	r2,r4,8
8020ca78:	1c62b03a 	or	r17,r3,r17
8020ca7c:	10000726 	beq	r2,zero,8020ca9c <__subdf3+0x804>
8020ca80:	2812d0fa 	srli	r9,r5,3
8020ca84:	4880022c 	andhi	r2,r9,8
8020ca88:	1000041e 	bne	r2,zero,8020ca9c <__subdf3+0x804>
8020ca8c:	300cd0fa 	srli	r6,r6,3
8020ca90:	2804977a 	slli	r2,r5,29
8020ca94:	4809883a 	mov	r4,r9
8020ca98:	11a2b03a 	or	r17,r2,r6
8020ca9c:	8806d77a 	srli	r3,r17,29
8020caa0:	200890fa 	slli	r4,r4,3
8020caa4:	882290fa 	slli	r17,r17,3
8020caa8:	3825883a 	mov	r18,r7
8020caac:	1906b03a 	or	r3,r3,r4
8020cab0:	0401ffc4 	movi	r16,2047
8020cab4:	003e1906 	br	8020c31c <__reset+0xfa1ec31c>
8020cab8:	000b883a 	mov	r5,zero
8020cabc:	0005883a 	mov	r2,zero
8020cac0:	003e2e06 	br	8020c37c <__reset+0xfa1ec37c>
8020cac4:	0401ffc4 	movi	r16,2047
8020cac8:	003e1406 	br	8020c31c <__reset+0xfa1ec31c>
8020cacc:	0005883a 	mov	r2,zero
8020cad0:	003f7506 	br	8020c8a8 <__reset+0xfa1ec8a8>
8020cad4:	0005883a 	mov	r2,zero
8020cad8:	0009883a 	mov	r4,zero
8020cadc:	003e7806 	br	8020c4c0 <__reset+0xfa1ec4c0>
8020cae0:	123ff804 	addi	r8,r2,-32
8020cae4:	01000804 	movi	r4,32
8020cae8:	1a10d83a 	srl	r8,r3,r8
8020caec:	11002526 	beq	r2,r4,8020cb84 <__subdf3+0x8ec>
8020caf0:	01001004 	movi	r4,64
8020caf4:	2085c83a 	sub	r2,r4,r2
8020caf8:	1884983a 	sll	r2,r3,r2
8020cafc:	1444b03a 	or	r2,r2,r17
8020cb00:	1004c03a 	cmpne	r2,r2,zero
8020cb04:	40a2b03a 	or	r17,r8,r2
8020cb08:	0005883a 	mov	r2,zero
8020cb0c:	003f1606 	br	8020c768 <__reset+0xfa1ec768>
8020cb10:	02000434 	movhi	r8,16
8020cb14:	0009883a 	mov	r4,zero
8020cb18:	423fffc4 	addi	r8,r8,-1
8020cb1c:	00bfffc4 	movi	r2,-1
8020cb20:	0401ffc4 	movi	r16,2047
8020cb24:	003e6606 	br	8020c4c0 <__reset+0xfa1ec4c0>
8020cb28:	1c62b03a 	or	r17,r3,r17
8020cb2c:	8822c03a 	cmpne	r17,r17,zero
8020cb30:	0005883a 	mov	r2,zero
8020cb34:	003f9906 	br	8020c99c <__reset+0xfa1ec99c>
8020cb38:	2807883a 	mov	r3,r5
8020cb3c:	3023883a 	mov	r17,r6
8020cb40:	0401ffc4 	movi	r16,2047
8020cb44:	003df506 	br	8020c31c <__reset+0xfa1ec31c>
8020cb48:	2807883a 	mov	r3,r5
8020cb4c:	3023883a 	mov	r17,r6
8020cb50:	003df206 	br	8020c31c <__reset+0xfa1ec31c>
8020cb54:	123ff804 	addi	r8,r2,-32
8020cb58:	01000804 	movi	r4,32
8020cb5c:	1a10d83a 	srl	r8,r3,r8
8020cb60:	11000a26 	beq	r2,r4,8020cb8c <__subdf3+0x8f4>
8020cb64:	01001004 	movi	r4,64
8020cb68:	2085c83a 	sub	r2,r4,r2
8020cb6c:	1884983a 	sll	r2,r3,r2
8020cb70:	1444b03a 	or	r2,r2,r17
8020cb74:	1004c03a 	cmpne	r2,r2,zero
8020cb78:	40a2b03a 	or	r17,r8,r2
8020cb7c:	0005883a 	mov	r2,zero
8020cb80:	003f8606 	br	8020c99c <__reset+0xfa1ec99c>
8020cb84:	0005883a 	mov	r2,zero
8020cb88:	003fdc06 	br	8020cafc <__reset+0xfa1ecafc>
8020cb8c:	0005883a 	mov	r2,zero
8020cb90:	003ff706 	br	8020cb70 <__reset+0xfa1ecb70>

8020cb94 <__fixdfsi>:
8020cb94:	280cd53a 	srli	r6,r5,20
8020cb98:	00c00434 	movhi	r3,16
8020cb9c:	18ffffc4 	addi	r3,r3,-1
8020cba0:	3181ffcc 	andi	r6,r6,2047
8020cba4:	01c0ff84 	movi	r7,1022
8020cba8:	28c6703a 	and	r3,r5,r3
8020cbac:	280ad7fa 	srli	r5,r5,31
8020cbb0:	3980120e 	bge	r7,r6,8020cbfc <__fixdfsi+0x68>
8020cbb4:	00810744 	movi	r2,1053
8020cbb8:	11800c16 	blt	r2,r6,8020cbec <__fixdfsi+0x58>
8020cbbc:	00810cc4 	movi	r2,1075
8020cbc0:	1185c83a 	sub	r2,r2,r6
8020cbc4:	01c007c4 	movi	r7,31
8020cbc8:	18c00434 	orhi	r3,r3,16
8020cbcc:	38800d16 	blt	r7,r2,8020cc04 <__fixdfsi+0x70>
8020cbd0:	31befb44 	addi	r6,r6,-1043
8020cbd4:	2084d83a 	srl	r2,r4,r2
8020cbd8:	1986983a 	sll	r3,r3,r6
8020cbdc:	1884b03a 	or	r2,r3,r2
8020cbe0:	28000726 	beq	r5,zero,8020cc00 <__fixdfsi+0x6c>
8020cbe4:	0085c83a 	sub	r2,zero,r2
8020cbe8:	f800283a 	ret
8020cbec:	00a00034 	movhi	r2,32768
8020cbf0:	10bfffc4 	addi	r2,r2,-1
8020cbf4:	2885883a 	add	r2,r5,r2
8020cbf8:	f800283a 	ret
8020cbfc:	0005883a 	mov	r2,zero
8020cc00:	f800283a 	ret
8020cc04:	008104c4 	movi	r2,1043
8020cc08:	1185c83a 	sub	r2,r2,r6
8020cc0c:	1884d83a 	srl	r2,r3,r2
8020cc10:	003ff306 	br	8020cbe0 <__reset+0xfa1ecbe0>

8020cc14 <__floatsidf>:
8020cc14:	defffd04 	addi	sp,sp,-12
8020cc18:	dfc00215 	stw	ra,8(sp)
8020cc1c:	dc400115 	stw	r17,4(sp)
8020cc20:	dc000015 	stw	r16,0(sp)
8020cc24:	20002b26 	beq	r4,zero,8020ccd4 <__floatsidf+0xc0>
8020cc28:	2023883a 	mov	r17,r4
8020cc2c:	2020d7fa 	srli	r16,r4,31
8020cc30:	20002d16 	blt	r4,zero,8020cce8 <__floatsidf+0xd4>
8020cc34:	8809883a 	mov	r4,r17
8020cc38:	020cd980 	call	8020cd98 <__clzsi2>
8020cc3c:	01410784 	movi	r5,1054
8020cc40:	288bc83a 	sub	r5,r5,r2
8020cc44:	01010cc4 	movi	r4,1075
8020cc48:	2149c83a 	sub	r4,r4,r5
8020cc4c:	00c007c4 	movi	r3,31
8020cc50:	1900160e 	bge	r3,r4,8020ccac <__floatsidf+0x98>
8020cc54:	00c104c4 	movi	r3,1043
8020cc58:	1947c83a 	sub	r3,r3,r5
8020cc5c:	88c6983a 	sll	r3,r17,r3
8020cc60:	00800434 	movhi	r2,16
8020cc64:	10bfffc4 	addi	r2,r2,-1
8020cc68:	1886703a 	and	r3,r3,r2
8020cc6c:	2941ffcc 	andi	r5,r5,2047
8020cc70:	800d883a 	mov	r6,r16
8020cc74:	0005883a 	mov	r2,zero
8020cc78:	280a953a 	slli	r5,r5,20
8020cc7c:	31803fcc 	andi	r6,r6,255
8020cc80:	01000434 	movhi	r4,16
8020cc84:	300c97fa 	slli	r6,r6,31
8020cc88:	213fffc4 	addi	r4,r4,-1
8020cc8c:	1906703a 	and	r3,r3,r4
8020cc90:	1946b03a 	or	r3,r3,r5
8020cc94:	1986b03a 	or	r3,r3,r6
8020cc98:	dfc00217 	ldw	ra,8(sp)
8020cc9c:	dc400117 	ldw	r17,4(sp)
8020cca0:	dc000017 	ldw	r16,0(sp)
8020cca4:	dec00304 	addi	sp,sp,12
8020cca8:	f800283a 	ret
8020ccac:	00c002c4 	movi	r3,11
8020ccb0:	1887c83a 	sub	r3,r3,r2
8020ccb4:	88c6d83a 	srl	r3,r17,r3
8020ccb8:	8904983a 	sll	r2,r17,r4
8020ccbc:	01000434 	movhi	r4,16
8020ccc0:	213fffc4 	addi	r4,r4,-1
8020ccc4:	2941ffcc 	andi	r5,r5,2047
8020ccc8:	1906703a 	and	r3,r3,r4
8020cccc:	800d883a 	mov	r6,r16
8020ccd0:	003fe906 	br	8020cc78 <__reset+0xfa1ecc78>
8020ccd4:	000d883a 	mov	r6,zero
8020ccd8:	000b883a 	mov	r5,zero
8020ccdc:	0007883a 	mov	r3,zero
8020cce0:	0005883a 	mov	r2,zero
8020cce4:	003fe406 	br	8020cc78 <__reset+0xfa1ecc78>
8020cce8:	0123c83a 	sub	r17,zero,r4
8020ccec:	003fd106 	br	8020cc34 <__reset+0xfa1ecc34>

8020ccf0 <__floatunsidf>:
8020ccf0:	defffe04 	addi	sp,sp,-8
8020ccf4:	dc000015 	stw	r16,0(sp)
8020ccf8:	dfc00115 	stw	ra,4(sp)
8020ccfc:	2021883a 	mov	r16,r4
8020cd00:	20002226 	beq	r4,zero,8020cd8c <__floatunsidf+0x9c>
8020cd04:	020cd980 	call	8020cd98 <__clzsi2>
8020cd08:	01010784 	movi	r4,1054
8020cd0c:	2089c83a 	sub	r4,r4,r2
8020cd10:	01810cc4 	movi	r6,1075
8020cd14:	310dc83a 	sub	r6,r6,r4
8020cd18:	00c007c4 	movi	r3,31
8020cd1c:	1980120e 	bge	r3,r6,8020cd68 <__floatunsidf+0x78>
8020cd20:	00c104c4 	movi	r3,1043
8020cd24:	1907c83a 	sub	r3,r3,r4
8020cd28:	80ca983a 	sll	r5,r16,r3
8020cd2c:	00800434 	movhi	r2,16
8020cd30:	10bfffc4 	addi	r2,r2,-1
8020cd34:	2101ffcc 	andi	r4,r4,2047
8020cd38:	0021883a 	mov	r16,zero
8020cd3c:	288a703a 	and	r5,r5,r2
8020cd40:	2008953a 	slli	r4,r4,20
8020cd44:	00c00434 	movhi	r3,16
8020cd48:	18ffffc4 	addi	r3,r3,-1
8020cd4c:	28c6703a 	and	r3,r5,r3
8020cd50:	8005883a 	mov	r2,r16
8020cd54:	1906b03a 	or	r3,r3,r4
8020cd58:	dfc00117 	ldw	ra,4(sp)
8020cd5c:	dc000017 	ldw	r16,0(sp)
8020cd60:	dec00204 	addi	sp,sp,8
8020cd64:	f800283a 	ret
8020cd68:	00c002c4 	movi	r3,11
8020cd6c:	188bc83a 	sub	r5,r3,r2
8020cd70:	814ad83a 	srl	r5,r16,r5
8020cd74:	00c00434 	movhi	r3,16
8020cd78:	18ffffc4 	addi	r3,r3,-1
8020cd7c:	81a0983a 	sll	r16,r16,r6
8020cd80:	2101ffcc 	andi	r4,r4,2047
8020cd84:	28ca703a 	and	r5,r5,r3
8020cd88:	003fed06 	br	8020cd40 <__reset+0xfa1ecd40>
8020cd8c:	0009883a 	mov	r4,zero
8020cd90:	000b883a 	mov	r5,zero
8020cd94:	003fea06 	br	8020cd40 <__reset+0xfa1ecd40>

8020cd98 <__clzsi2>:
8020cd98:	00bfffd4 	movui	r2,65535
8020cd9c:	11000536 	bltu	r2,r4,8020cdb4 <__clzsi2+0x1c>
8020cda0:	00803fc4 	movi	r2,255
8020cda4:	11000f36 	bltu	r2,r4,8020cde4 <__clzsi2+0x4c>
8020cda8:	00800804 	movi	r2,32
8020cdac:	0007883a 	mov	r3,zero
8020cdb0:	00000506 	br	8020cdc8 <__clzsi2+0x30>
8020cdb4:	00804034 	movhi	r2,256
8020cdb8:	10bfffc4 	addi	r2,r2,-1
8020cdbc:	11000c2e 	bgeu	r2,r4,8020cdf0 <__clzsi2+0x58>
8020cdc0:	00800204 	movi	r2,8
8020cdc4:	00c00604 	movi	r3,24
8020cdc8:	20c8d83a 	srl	r4,r4,r3
8020cdcc:	00e00874 	movhi	r3,32801
8020cdd0:	18c6c504 	addi	r3,r3,6932
8020cdd4:	1909883a 	add	r4,r3,r4
8020cdd8:	20c00003 	ldbu	r3,0(r4)
8020cddc:	10c5c83a 	sub	r2,r2,r3
8020cde0:	f800283a 	ret
8020cde4:	00800604 	movi	r2,24
8020cde8:	00c00204 	movi	r3,8
8020cdec:	003ff606 	br	8020cdc8 <__reset+0xfa1ecdc8>
8020cdf0:	00800404 	movi	r2,16
8020cdf4:	1007883a 	mov	r3,r2
8020cdf8:	003ff306 	br	8020cdc8 <__reset+0xfa1ecdc8>

8020cdfc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
8020cdfc:	defffe04 	addi	sp,sp,-8
8020ce00:	dfc00115 	stw	ra,4(sp)
8020ce04:	df000015 	stw	fp,0(sp)
8020ce08:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
8020ce0c:	d0a00b17 	ldw	r2,-32724(gp)
8020ce10:	10000326 	beq	r2,zero,8020ce20 <alt_get_errno+0x24>
8020ce14:	d0a00b17 	ldw	r2,-32724(gp)
8020ce18:	103ee83a 	callr	r2
8020ce1c:	00000106 	br	8020ce24 <alt_get_errno+0x28>
8020ce20:	d0a01904 	addi	r2,gp,-32668
}
8020ce24:	e037883a 	mov	sp,fp
8020ce28:	dfc00117 	ldw	ra,4(sp)
8020ce2c:	df000017 	ldw	fp,0(sp)
8020ce30:	dec00204 	addi	sp,sp,8
8020ce34:	f800283a 	ret

8020ce38 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
8020ce38:	defffb04 	addi	sp,sp,-20
8020ce3c:	dfc00415 	stw	ra,16(sp)
8020ce40:	df000315 	stw	fp,12(sp)
8020ce44:	df000304 	addi	fp,sp,12
8020ce48:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
8020ce4c:	e0bfff17 	ldw	r2,-4(fp)
8020ce50:	10000616 	blt	r2,zero,8020ce6c <close+0x34>
8020ce54:	e0bfff17 	ldw	r2,-4(fp)
8020ce58:	10c00324 	muli	r3,r2,12
8020ce5c:	00a00874 	movhi	r2,32801
8020ce60:	1089df04 	addi	r2,r2,10108
8020ce64:	1885883a 	add	r2,r3,r2
8020ce68:	00000106 	br	8020ce70 <close+0x38>
8020ce6c:	0005883a 	mov	r2,zero
8020ce70:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
8020ce74:	e0bffd17 	ldw	r2,-12(fp)
8020ce78:	10001926 	beq	r2,zero,8020cee0 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
8020ce7c:	e0bffd17 	ldw	r2,-12(fp)
8020ce80:	10800017 	ldw	r2,0(r2)
8020ce84:	10800417 	ldw	r2,16(r2)
8020ce88:	10000626 	beq	r2,zero,8020cea4 <close+0x6c>
8020ce8c:	e0bffd17 	ldw	r2,-12(fp)
8020ce90:	10800017 	ldw	r2,0(r2)
8020ce94:	10800417 	ldw	r2,16(r2)
8020ce98:	e13ffd17 	ldw	r4,-12(fp)
8020ce9c:	103ee83a 	callr	r2
8020cea0:	00000106 	br	8020cea8 <close+0x70>
8020cea4:	0005883a 	mov	r2,zero
8020cea8:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
8020ceac:	e13fff17 	ldw	r4,-4(fp)
8020ceb0:	020d40c0 	call	8020d40c <alt_release_fd>
    if (rval < 0)
8020ceb4:	e0bffe17 	ldw	r2,-8(fp)
8020ceb8:	1000070e 	bge	r2,zero,8020ced8 <close+0xa0>
    {
      ALT_ERRNO = -rval;
8020cebc:	020cdfc0 	call	8020cdfc <alt_get_errno>
8020cec0:	1007883a 	mov	r3,r2
8020cec4:	e0bffe17 	ldw	r2,-8(fp)
8020cec8:	0085c83a 	sub	r2,zero,r2
8020cecc:	18800015 	stw	r2,0(r3)
      return -1;
8020ced0:	00bfffc4 	movi	r2,-1
8020ced4:	00000706 	br	8020cef4 <close+0xbc>
    }
    return 0;
8020ced8:	0005883a 	mov	r2,zero
8020cedc:	00000506 	br	8020cef4 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
8020cee0:	020cdfc0 	call	8020cdfc <alt_get_errno>
8020cee4:	1007883a 	mov	r3,r2
8020cee8:	00801444 	movi	r2,81
8020ceec:	18800015 	stw	r2,0(r3)
    return -1;
8020cef0:	00bfffc4 	movi	r2,-1
  }
}
8020cef4:	e037883a 	mov	sp,fp
8020cef8:	dfc00117 	ldw	ra,4(sp)
8020cefc:	df000017 	ldw	fp,0(sp)
8020cf00:	dec00204 	addi	sp,sp,8
8020cf04:	f800283a 	ret

8020cf08 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
8020cf08:	defffc04 	addi	sp,sp,-16
8020cf0c:	df000315 	stw	fp,12(sp)
8020cf10:	df000304 	addi	fp,sp,12
8020cf14:	e13ffd15 	stw	r4,-12(fp)
8020cf18:	e17ffe15 	stw	r5,-8(fp)
8020cf1c:	e1bfff15 	stw	r6,-4(fp)
  return len;
8020cf20:	e0bfff17 	ldw	r2,-4(fp)
}
8020cf24:	e037883a 	mov	sp,fp
8020cf28:	df000017 	ldw	fp,0(sp)
8020cf2c:	dec00104 	addi	sp,sp,4
8020cf30:	f800283a 	ret

8020cf34 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
8020cf34:	defffe04 	addi	sp,sp,-8
8020cf38:	dfc00115 	stw	ra,4(sp)
8020cf3c:	df000015 	stw	fp,0(sp)
8020cf40:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
8020cf44:	d0a00b17 	ldw	r2,-32724(gp)
8020cf48:	10000326 	beq	r2,zero,8020cf58 <alt_get_errno+0x24>
8020cf4c:	d0a00b17 	ldw	r2,-32724(gp)
8020cf50:	103ee83a 	callr	r2
8020cf54:	00000106 	br	8020cf5c <alt_get_errno+0x28>
8020cf58:	d0a01904 	addi	r2,gp,-32668
}
8020cf5c:	e037883a 	mov	sp,fp
8020cf60:	dfc00117 	ldw	ra,4(sp)
8020cf64:	df000017 	ldw	fp,0(sp)
8020cf68:	dec00204 	addi	sp,sp,8
8020cf6c:	f800283a 	ret

8020cf70 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
8020cf70:	defffb04 	addi	sp,sp,-20
8020cf74:	dfc00415 	stw	ra,16(sp)
8020cf78:	df000315 	stw	fp,12(sp)
8020cf7c:	df000304 	addi	fp,sp,12
8020cf80:	e13ffe15 	stw	r4,-8(fp)
8020cf84:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
8020cf88:	e0bffe17 	ldw	r2,-8(fp)
8020cf8c:	10000616 	blt	r2,zero,8020cfa8 <fstat+0x38>
8020cf90:	e0bffe17 	ldw	r2,-8(fp)
8020cf94:	10c00324 	muli	r3,r2,12
8020cf98:	00a00874 	movhi	r2,32801
8020cf9c:	1089df04 	addi	r2,r2,10108
8020cfa0:	1885883a 	add	r2,r3,r2
8020cfa4:	00000106 	br	8020cfac <fstat+0x3c>
8020cfa8:	0005883a 	mov	r2,zero
8020cfac:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
8020cfb0:	e0bffd17 	ldw	r2,-12(fp)
8020cfb4:	10001026 	beq	r2,zero,8020cff8 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
8020cfb8:	e0bffd17 	ldw	r2,-12(fp)
8020cfbc:	10800017 	ldw	r2,0(r2)
8020cfc0:	10800817 	ldw	r2,32(r2)
8020cfc4:	10000726 	beq	r2,zero,8020cfe4 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
8020cfc8:	e0bffd17 	ldw	r2,-12(fp)
8020cfcc:	10800017 	ldw	r2,0(r2)
8020cfd0:	10800817 	ldw	r2,32(r2)
8020cfd4:	e17fff17 	ldw	r5,-4(fp)
8020cfd8:	e13ffd17 	ldw	r4,-12(fp)
8020cfdc:	103ee83a 	callr	r2
8020cfe0:	00000a06 	br	8020d00c <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
8020cfe4:	e0bfff17 	ldw	r2,-4(fp)
8020cfe8:	00c80004 	movi	r3,8192
8020cfec:	10c00115 	stw	r3,4(r2)
      return 0;
8020cff0:	0005883a 	mov	r2,zero
8020cff4:	00000506 	br	8020d00c <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
8020cff8:	020cf340 	call	8020cf34 <alt_get_errno>
8020cffc:	1007883a 	mov	r3,r2
8020d000:	00801444 	movi	r2,81
8020d004:	18800015 	stw	r2,0(r3)
    return -1;
8020d008:	00bfffc4 	movi	r2,-1
  }
}
8020d00c:	e037883a 	mov	sp,fp
8020d010:	dfc00117 	ldw	ra,4(sp)
8020d014:	df000017 	ldw	fp,0(sp)
8020d018:	dec00204 	addi	sp,sp,8
8020d01c:	f800283a 	ret

8020d020 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
8020d020:	defffe04 	addi	sp,sp,-8
8020d024:	dfc00115 	stw	ra,4(sp)
8020d028:	df000015 	stw	fp,0(sp)
8020d02c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
8020d030:	d0a00b17 	ldw	r2,-32724(gp)
8020d034:	10000326 	beq	r2,zero,8020d044 <alt_get_errno+0x24>
8020d038:	d0a00b17 	ldw	r2,-32724(gp)
8020d03c:	103ee83a 	callr	r2
8020d040:	00000106 	br	8020d048 <alt_get_errno+0x28>
8020d044:	d0a01904 	addi	r2,gp,-32668
}
8020d048:	e037883a 	mov	sp,fp
8020d04c:	dfc00117 	ldw	ra,4(sp)
8020d050:	df000017 	ldw	fp,0(sp)
8020d054:	dec00204 	addi	sp,sp,8
8020d058:	f800283a 	ret

8020d05c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
8020d05c:	deffed04 	addi	sp,sp,-76
8020d060:	dfc01215 	stw	ra,72(sp)
8020d064:	df001115 	stw	fp,68(sp)
8020d068:	df001104 	addi	fp,sp,68
8020d06c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
8020d070:	e0bfff17 	ldw	r2,-4(fp)
8020d074:	10000616 	blt	r2,zero,8020d090 <isatty+0x34>
8020d078:	e0bfff17 	ldw	r2,-4(fp)
8020d07c:	10c00324 	muli	r3,r2,12
8020d080:	00a00874 	movhi	r2,32801
8020d084:	1089df04 	addi	r2,r2,10108
8020d088:	1885883a 	add	r2,r3,r2
8020d08c:	00000106 	br	8020d094 <isatty+0x38>
8020d090:	0005883a 	mov	r2,zero
8020d094:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
8020d098:	e0bfef17 	ldw	r2,-68(fp)
8020d09c:	10000e26 	beq	r2,zero,8020d0d8 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
8020d0a0:	e0bfef17 	ldw	r2,-68(fp)
8020d0a4:	10800017 	ldw	r2,0(r2)
8020d0a8:	10800817 	ldw	r2,32(r2)
8020d0ac:	1000021e 	bne	r2,zero,8020d0b8 <isatty+0x5c>
    {
      return 1;
8020d0b0:	00800044 	movi	r2,1
8020d0b4:	00000d06 	br	8020d0ec <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
8020d0b8:	e0bff004 	addi	r2,fp,-64
8020d0bc:	100b883a 	mov	r5,r2
8020d0c0:	e13fff17 	ldw	r4,-4(fp)
8020d0c4:	020cf700 	call	8020cf70 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
8020d0c8:	e0bff117 	ldw	r2,-60(fp)
8020d0cc:	10880020 	cmpeqi	r2,r2,8192
8020d0d0:	10803fcc 	andi	r2,r2,255
8020d0d4:	00000506 	br	8020d0ec <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
8020d0d8:	020d0200 	call	8020d020 <alt_get_errno>
8020d0dc:	1007883a 	mov	r3,r2
8020d0e0:	00801444 	movi	r2,81
8020d0e4:	18800015 	stw	r2,0(r3)
    return 0;
8020d0e8:	0005883a 	mov	r2,zero
  }
}
8020d0ec:	e037883a 	mov	sp,fp
8020d0f0:	dfc00117 	ldw	ra,4(sp)
8020d0f4:	df000017 	ldw	fp,0(sp)
8020d0f8:	dec00204 	addi	sp,sp,8
8020d0fc:	f800283a 	ret

8020d100 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
8020d100:	defffe04 	addi	sp,sp,-8
8020d104:	dfc00115 	stw	ra,4(sp)
8020d108:	df000015 	stw	fp,0(sp)
8020d10c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
8020d110:	d0a00b17 	ldw	r2,-32724(gp)
8020d114:	10000326 	beq	r2,zero,8020d124 <alt_get_errno+0x24>
8020d118:	d0a00b17 	ldw	r2,-32724(gp)
8020d11c:	103ee83a 	callr	r2
8020d120:	00000106 	br	8020d128 <alt_get_errno+0x28>
8020d124:	d0a01904 	addi	r2,gp,-32668
}
8020d128:	e037883a 	mov	sp,fp
8020d12c:	dfc00117 	ldw	ra,4(sp)
8020d130:	df000017 	ldw	fp,0(sp)
8020d134:	dec00204 	addi	sp,sp,8
8020d138:	f800283a 	ret

8020d13c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
8020d13c:	defff904 	addi	sp,sp,-28
8020d140:	dfc00615 	stw	ra,24(sp)
8020d144:	df000515 	stw	fp,20(sp)
8020d148:	df000504 	addi	fp,sp,20
8020d14c:	e13ffd15 	stw	r4,-12(fp)
8020d150:	e17ffe15 	stw	r5,-8(fp)
8020d154:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
8020d158:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
8020d15c:	e0bffd17 	ldw	r2,-12(fp)
8020d160:	10000616 	blt	r2,zero,8020d17c <lseek+0x40>
8020d164:	e0bffd17 	ldw	r2,-12(fp)
8020d168:	10c00324 	muli	r3,r2,12
8020d16c:	00a00874 	movhi	r2,32801
8020d170:	1089df04 	addi	r2,r2,10108
8020d174:	1885883a 	add	r2,r3,r2
8020d178:	00000106 	br	8020d180 <lseek+0x44>
8020d17c:	0005883a 	mov	r2,zero
8020d180:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
8020d184:	e0bffc17 	ldw	r2,-16(fp)
8020d188:	10001026 	beq	r2,zero,8020d1cc <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
8020d18c:	e0bffc17 	ldw	r2,-16(fp)
8020d190:	10800017 	ldw	r2,0(r2)
8020d194:	10800717 	ldw	r2,28(r2)
8020d198:	10000926 	beq	r2,zero,8020d1c0 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
8020d19c:	e0bffc17 	ldw	r2,-16(fp)
8020d1a0:	10800017 	ldw	r2,0(r2)
8020d1a4:	10800717 	ldw	r2,28(r2)
8020d1a8:	e1bfff17 	ldw	r6,-4(fp)
8020d1ac:	e17ffe17 	ldw	r5,-8(fp)
8020d1b0:	e13ffc17 	ldw	r4,-16(fp)
8020d1b4:	103ee83a 	callr	r2
8020d1b8:	e0bffb15 	stw	r2,-20(fp)
8020d1bc:	00000506 	br	8020d1d4 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
8020d1c0:	00bfde84 	movi	r2,-134
8020d1c4:	e0bffb15 	stw	r2,-20(fp)
8020d1c8:	00000206 	br	8020d1d4 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
8020d1cc:	00bfebc4 	movi	r2,-81
8020d1d0:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
8020d1d4:	e0bffb17 	ldw	r2,-20(fp)
8020d1d8:	1000070e 	bge	r2,zero,8020d1f8 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
8020d1dc:	020d1000 	call	8020d100 <alt_get_errno>
8020d1e0:	1007883a 	mov	r3,r2
8020d1e4:	e0bffb17 	ldw	r2,-20(fp)
8020d1e8:	0085c83a 	sub	r2,zero,r2
8020d1ec:	18800015 	stw	r2,0(r3)
    rc = -1;
8020d1f0:	00bfffc4 	movi	r2,-1
8020d1f4:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
8020d1f8:	e0bffb17 	ldw	r2,-20(fp)
}
8020d1fc:	e037883a 	mov	sp,fp
8020d200:	dfc00117 	ldw	ra,4(sp)
8020d204:	df000017 	ldw	fp,0(sp)
8020d208:	dec00204 	addi	sp,sp,8
8020d20c:	f800283a 	ret

8020d210 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
8020d210:	defffd04 	addi	sp,sp,-12
8020d214:	dfc00215 	stw	ra,8(sp)
8020d218:	df000115 	stw	fp,4(sp)
8020d21c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
8020d220:	0009883a 	mov	r4,zero
8020d224:	020d6b80 	call	8020d6b8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
8020d228:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
8020d22c:	020d6f00 	call	8020d6f0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
8020d230:	01a00874 	movhi	r6,32801
8020d234:	31870804 	addi	r6,r6,7200
8020d238:	01600874 	movhi	r5,32801
8020d23c:	29470804 	addi	r5,r5,7200
8020d240:	01200874 	movhi	r4,32801
8020d244:	21070804 	addi	r4,r4,7200
8020d248:	0210ac40 	call	80210ac4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
8020d24c:	02106100 	call	80210610 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
8020d250:	01200874 	movhi	r4,32801
8020d254:	21019c04 	addi	r4,r4,1648
8020d258:	021140c0 	call	8021140c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
8020d25c:	d0a01a17 	ldw	r2,-32664(gp)
8020d260:	d0e01b17 	ldw	r3,-32660(gp)
8020d264:	d1201c17 	ldw	r4,-32656(gp)
8020d268:	200d883a 	mov	r6,r4
8020d26c:	180b883a 	mov	r5,r3
8020d270:	1009883a 	mov	r4,r2
8020d274:	020027c0 	call	8020027c <main>
8020d278:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
8020d27c:	01000044 	movi	r4,1
8020d280:	020ce380 	call	8020ce38 <close>
  exit (result);
8020d284:	e13fff17 	ldw	r4,-4(fp)
8020d288:	02114200 	call	80211420 <exit>

8020d28c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
8020d28c:	defffe04 	addi	sp,sp,-8
8020d290:	df000115 	stw	fp,4(sp)
8020d294:	df000104 	addi	fp,sp,4
8020d298:	e13fff15 	stw	r4,-4(fp)
}
8020d29c:	0001883a 	nop
8020d2a0:	e037883a 	mov	sp,fp
8020d2a4:	df000017 	ldw	fp,0(sp)
8020d2a8:	dec00104 	addi	sp,sp,4
8020d2ac:	f800283a 	ret

8020d2b0 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
8020d2b0:	defffe04 	addi	sp,sp,-8
8020d2b4:	df000115 	stw	fp,4(sp)
8020d2b8:	df000104 	addi	fp,sp,4
8020d2bc:	e13fff15 	stw	r4,-4(fp)
}
8020d2c0:	0001883a 	nop
8020d2c4:	e037883a 	mov	sp,fp
8020d2c8:	df000017 	ldw	fp,0(sp)
8020d2cc:	dec00104 	addi	sp,sp,4
8020d2d0:	f800283a 	ret

8020d2d4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
8020d2d4:	defffe04 	addi	sp,sp,-8
8020d2d8:	dfc00115 	stw	ra,4(sp)
8020d2dc:	df000015 	stw	fp,0(sp)
8020d2e0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
8020d2e4:	d0a00b17 	ldw	r2,-32724(gp)
8020d2e8:	10000326 	beq	r2,zero,8020d2f8 <alt_get_errno+0x24>
8020d2ec:	d0a00b17 	ldw	r2,-32724(gp)
8020d2f0:	103ee83a 	callr	r2
8020d2f4:	00000106 	br	8020d2fc <alt_get_errno+0x28>
8020d2f8:	d0a01904 	addi	r2,gp,-32668
}
8020d2fc:	e037883a 	mov	sp,fp
8020d300:	dfc00117 	ldw	ra,4(sp)
8020d304:	df000017 	ldw	fp,0(sp)
8020d308:	dec00204 	addi	sp,sp,8
8020d30c:	f800283a 	ret

8020d310 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
8020d310:	defff904 	addi	sp,sp,-28
8020d314:	dfc00615 	stw	ra,24(sp)
8020d318:	df000515 	stw	fp,20(sp)
8020d31c:	df000504 	addi	fp,sp,20
8020d320:	e13ffd15 	stw	r4,-12(fp)
8020d324:	e17ffe15 	stw	r5,-8(fp)
8020d328:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
8020d32c:	e0bffd17 	ldw	r2,-12(fp)
8020d330:	10000616 	blt	r2,zero,8020d34c <read+0x3c>
8020d334:	e0bffd17 	ldw	r2,-12(fp)
8020d338:	10c00324 	muli	r3,r2,12
8020d33c:	00a00874 	movhi	r2,32801
8020d340:	1089df04 	addi	r2,r2,10108
8020d344:	1885883a 	add	r2,r3,r2
8020d348:	00000106 	br	8020d350 <read+0x40>
8020d34c:	0005883a 	mov	r2,zero
8020d350:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
8020d354:	e0bffb17 	ldw	r2,-20(fp)
8020d358:	10002226 	beq	r2,zero,8020d3e4 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
8020d35c:	e0bffb17 	ldw	r2,-20(fp)
8020d360:	10800217 	ldw	r2,8(r2)
8020d364:	108000cc 	andi	r2,r2,3
8020d368:	10800060 	cmpeqi	r2,r2,1
8020d36c:	1000181e 	bne	r2,zero,8020d3d0 <read+0xc0>
        (fd->dev->read))
8020d370:	e0bffb17 	ldw	r2,-20(fp)
8020d374:	10800017 	ldw	r2,0(r2)
8020d378:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
8020d37c:	10001426 	beq	r2,zero,8020d3d0 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
8020d380:	e0bffb17 	ldw	r2,-20(fp)
8020d384:	10800017 	ldw	r2,0(r2)
8020d388:	10800517 	ldw	r2,20(r2)
8020d38c:	e0ffff17 	ldw	r3,-4(fp)
8020d390:	180d883a 	mov	r6,r3
8020d394:	e17ffe17 	ldw	r5,-8(fp)
8020d398:	e13ffb17 	ldw	r4,-20(fp)
8020d39c:	103ee83a 	callr	r2
8020d3a0:	e0bffc15 	stw	r2,-16(fp)
8020d3a4:	e0bffc17 	ldw	r2,-16(fp)
8020d3a8:	1000070e 	bge	r2,zero,8020d3c8 <read+0xb8>
        {
          ALT_ERRNO = -rval;
8020d3ac:	020d2d40 	call	8020d2d4 <alt_get_errno>
8020d3b0:	1007883a 	mov	r3,r2
8020d3b4:	e0bffc17 	ldw	r2,-16(fp)
8020d3b8:	0085c83a 	sub	r2,zero,r2
8020d3bc:	18800015 	stw	r2,0(r3)
          return -1;
8020d3c0:	00bfffc4 	movi	r2,-1
8020d3c4:	00000c06 	br	8020d3f8 <read+0xe8>
        }
        return rval;
8020d3c8:	e0bffc17 	ldw	r2,-16(fp)
8020d3cc:	00000a06 	br	8020d3f8 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
8020d3d0:	020d2d40 	call	8020d2d4 <alt_get_errno>
8020d3d4:	1007883a 	mov	r3,r2
8020d3d8:	00800344 	movi	r2,13
8020d3dc:	18800015 	stw	r2,0(r3)
8020d3e0:	00000406 	br	8020d3f4 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
8020d3e4:	020d2d40 	call	8020d2d4 <alt_get_errno>
8020d3e8:	1007883a 	mov	r3,r2
8020d3ec:	00801444 	movi	r2,81
8020d3f0:	18800015 	stw	r2,0(r3)
  }
  return -1;
8020d3f4:	00bfffc4 	movi	r2,-1
}
8020d3f8:	e037883a 	mov	sp,fp
8020d3fc:	dfc00117 	ldw	ra,4(sp)
8020d400:	df000017 	ldw	fp,0(sp)
8020d404:	dec00204 	addi	sp,sp,8
8020d408:	f800283a 	ret

8020d40c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
8020d40c:	defffe04 	addi	sp,sp,-8
8020d410:	df000115 	stw	fp,4(sp)
8020d414:	df000104 	addi	fp,sp,4
8020d418:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
8020d41c:	e0bfff17 	ldw	r2,-4(fp)
8020d420:	108000d0 	cmplti	r2,r2,3
8020d424:	10000d1e 	bne	r2,zero,8020d45c <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
8020d428:	00a00874 	movhi	r2,32801
8020d42c:	1089df04 	addi	r2,r2,10108
8020d430:	e0ffff17 	ldw	r3,-4(fp)
8020d434:	18c00324 	muli	r3,r3,12
8020d438:	10c5883a 	add	r2,r2,r3
8020d43c:	10800204 	addi	r2,r2,8
8020d440:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
8020d444:	00a00874 	movhi	r2,32801
8020d448:	1089df04 	addi	r2,r2,10108
8020d44c:	e0ffff17 	ldw	r3,-4(fp)
8020d450:	18c00324 	muli	r3,r3,12
8020d454:	10c5883a 	add	r2,r2,r3
8020d458:	10000015 	stw	zero,0(r2)
  }
}
8020d45c:	0001883a 	nop
8020d460:	e037883a 	mov	sp,fp
8020d464:	df000017 	ldw	fp,0(sp)
8020d468:	dec00104 	addi	sp,sp,4
8020d46c:	f800283a 	ret

8020d470 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
8020d470:	defff904 	addi	sp,sp,-28
8020d474:	df000615 	stw	fp,24(sp)
8020d478:	df000604 	addi	fp,sp,24
8020d47c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8020d480:	0005303a 	rdctl	r2,status
8020d484:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8020d488:	e0fffe17 	ldw	r3,-8(fp)
8020d48c:	00bfff84 	movi	r2,-2
8020d490:	1884703a 	and	r2,r3,r2
8020d494:	1001703a 	wrctl	status,r2
  
  return context;
8020d498:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
8020d49c:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
8020d4a0:	d0a00c17 	ldw	r2,-32720(gp)
8020d4a4:	10c000c4 	addi	r3,r2,3
8020d4a8:	00bfff04 	movi	r2,-4
8020d4ac:	1884703a 	and	r2,r3,r2
8020d4b0:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
8020d4b4:	d0e00c17 	ldw	r3,-32720(gp)
8020d4b8:	e0bfff17 	ldw	r2,-4(fp)
8020d4bc:	1887883a 	add	r3,r3,r2
8020d4c0:	00a00bb4 	movhi	r2,32814
8020d4c4:	10800004 	addi	r2,r2,0
8020d4c8:	10c0062e 	bgeu	r2,r3,8020d4e4 <sbrk+0x74>
8020d4cc:	e0bffb17 	ldw	r2,-20(fp)
8020d4d0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8020d4d4:	e0bffa17 	ldw	r2,-24(fp)
8020d4d8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
8020d4dc:	00bfffc4 	movi	r2,-1
8020d4e0:	00000b06 	br	8020d510 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
8020d4e4:	d0a00c17 	ldw	r2,-32720(gp)
8020d4e8:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
8020d4ec:	d0e00c17 	ldw	r3,-32720(gp)
8020d4f0:	e0bfff17 	ldw	r2,-4(fp)
8020d4f4:	1885883a 	add	r2,r3,r2
8020d4f8:	d0a00c15 	stw	r2,-32720(gp)
8020d4fc:	e0bffb17 	ldw	r2,-20(fp)
8020d500:	e0bffc15 	stw	r2,-16(fp)
8020d504:	e0bffc17 	ldw	r2,-16(fp)
8020d508:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
8020d50c:	e0bffd17 	ldw	r2,-12(fp)
} 
8020d510:	e037883a 	mov	sp,fp
8020d514:	df000017 	ldw	fp,0(sp)
8020d518:	dec00104 	addi	sp,sp,4
8020d51c:	f800283a 	ret

8020d520 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
8020d520:	defffd04 	addi	sp,sp,-12
8020d524:	dfc00215 	stw	ra,8(sp)
8020d528:	df000115 	stw	fp,4(sp)
8020d52c:	df000104 	addi	fp,sp,4
8020d530:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
8020d534:	e13fff17 	ldw	r4,-4(fp)
8020d538:	02103e00 	call	802103e0 <alt_busy_sleep>
}
8020d53c:	e037883a 	mov	sp,fp
8020d540:	dfc00117 	ldw	ra,4(sp)
8020d544:	df000017 	ldw	fp,0(sp)
8020d548:	dec00204 	addi	sp,sp,8
8020d54c:	f800283a 	ret

8020d550 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
8020d550:	defffe04 	addi	sp,sp,-8
8020d554:	dfc00115 	stw	ra,4(sp)
8020d558:	df000015 	stw	fp,0(sp)
8020d55c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
8020d560:	d0a00b17 	ldw	r2,-32724(gp)
8020d564:	10000326 	beq	r2,zero,8020d574 <alt_get_errno+0x24>
8020d568:	d0a00b17 	ldw	r2,-32724(gp)
8020d56c:	103ee83a 	callr	r2
8020d570:	00000106 	br	8020d578 <alt_get_errno+0x28>
8020d574:	d0a01904 	addi	r2,gp,-32668
}
8020d578:	e037883a 	mov	sp,fp
8020d57c:	dfc00117 	ldw	ra,4(sp)
8020d580:	df000017 	ldw	fp,0(sp)
8020d584:	dec00204 	addi	sp,sp,8
8020d588:	f800283a 	ret

8020d58c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
8020d58c:	defff904 	addi	sp,sp,-28
8020d590:	dfc00615 	stw	ra,24(sp)
8020d594:	df000515 	stw	fp,20(sp)
8020d598:	df000504 	addi	fp,sp,20
8020d59c:	e13ffd15 	stw	r4,-12(fp)
8020d5a0:	e17ffe15 	stw	r5,-8(fp)
8020d5a4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
8020d5a8:	e0bffd17 	ldw	r2,-12(fp)
8020d5ac:	10000616 	blt	r2,zero,8020d5c8 <write+0x3c>
8020d5b0:	e0bffd17 	ldw	r2,-12(fp)
8020d5b4:	10c00324 	muli	r3,r2,12
8020d5b8:	00a00874 	movhi	r2,32801
8020d5bc:	1089df04 	addi	r2,r2,10108
8020d5c0:	1885883a 	add	r2,r3,r2
8020d5c4:	00000106 	br	8020d5cc <write+0x40>
8020d5c8:	0005883a 	mov	r2,zero
8020d5cc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
8020d5d0:	e0bffb17 	ldw	r2,-20(fp)
8020d5d4:	10002126 	beq	r2,zero,8020d65c <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
8020d5d8:	e0bffb17 	ldw	r2,-20(fp)
8020d5dc:	10800217 	ldw	r2,8(r2)
8020d5e0:	108000cc 	andi	r2,r2,3
8020d5e4:	10001826 	beq	r2,zero,8020d648 <write+0xbc>
8020d5e8:	e0bffb17 	ldw	r2,-20(fp)
8020d5ec:	10800017 	ldw	r2,0(r2)
8020d5f0:	10800617 	ldw	r2,24(r2)
8020d5f4:	10001426 	beq	r2,zero,8020d648 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
8020d5f8:	e0bffb17 	ldw	r2,-20(fp)
8020d5fc:	10800017 	ldw	r2,0(r2)
8020d600:	10800617 	ldw	r2,24(r2)
8020d604:	e0ffff17 	ldw	r3,-4(fp)
8020d608:	180d883a 	mov	r6,r3
8020d60c:	e17ffe17 	ldw	r5,-8(fp)
8020d610:	e13ffb17 	ldw	r4,-20(fp)
8020d614:	103ee83a 	callr	r2
8020d618:	e0bffc15 	stw	r2,-16(fp)
8020d61c:	e0bffc17 	ldw	r2,-16(fp)
8020d620:	1000070e 	bge	r2,zero,8020d640 <write+0xb4>
      {
        ALT_ERRNO = -rval;
8020d624:	020d5500 	call	8020d550 <alt_get_errno>
8020d628:	1007883a 	mov	r3,r2
8020d62c:	e0bffc17 	ldw	r2,-16(fp)
8020d630:	0085c83a 	sub	r2,zero,r2
8020d634:	18800015 	stw	r2,0(r3)
        return -1;
8020d638:	00bfffc4 	movi	r2,-1
8020d63c:	00000c06 	br	8020d670 <write+0xe4>
      }
      return rval;
8020d640:	e0bffc17 	ldw	r2,-16(fp)
8020d644:	00000a06 	br	8020d670 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
8020d648:	020d5500 	call	8020d550 <alt_get_errno>
8020d64c:	1007883a 	mov	r3,r2
8020d650:	00800344 	movi	r2,13
8020d654:	18800015 	stw	r2,0(r3)
8020d658:	00000406 	br	8020d66c <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
8020d65c:	020d5500 	call	8020d550 <alt_get_errno>
8020d660:	1007883a 	mov	r3,r2
8020d664:	00801444 	movi	r2,81
8020d668:	18800015 	stw	r2,0(r3)
  }
  return -1;
8020d66c:	00bfffc4 	movi	r2,-1
}
8020d670:	e037883a 	mov	sp,fp
8020d674:	dfc00117 	ldw	ra,4(sp)
8020d678:	df000017 	ldw	fp,0(sp)
8020d67c:	dec00204 	addi	sp,sp,8
8020d680:	f800283a 	ret

8020d684 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
8020d684:	defffd04 	addi	sp,sp,-12
8020d688:	dfc00215 	stw	ra,8(sp)
8020d68c:	df000115 	stw	fp,4(sp)
8020d690:	df000104 	addi	fp,sp,4
8020d694:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
8020d698:	d1600804 	addi	r5,gp,-32736
8020d69c:	e13fff17 	ldw	r4,-4(fp)
8020d6a0:	021056c0 	call	8021056c <alt_dev_llist_insert>
}
8020d6a4:	e037883a 	mov	sp,fp
8020d6a8:	dfc00117 	ldw	ra,4(sp)
8020d6ac:	df000017 	ldw	fp,0(sp)
8020d6b0:	dec00204 	addi	sp,sp,8
8020d6b4:	f800283a 	ret

8020d6b8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
8020d6b8:	defffd04 	addi	sp,sp,-12
8020d6bc:	dfc00215 	stw	ra,8(sp)
8020d6c0:	df000115 	stw	fp,4(sp)
8020d6c4:	df000104 	addi	fp,sp,4
8020d6c8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
8020d6cc:	02111a00 	call	802111a0 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
8020d6d0:	00800044 	movi	r2,1
8020d6d4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
8020d6d8:	0001883a 	nop
8020d6dc:	e037883a 	mov	sp,fp
8020d6e0:	dfc00117 	ldw	ra,4(sp)
8020d6e4:	df000017 	ldw	fp,0(sp)
8020d6e8:	dec00204 	addi	sp,sp,8
8020d6ec:	f800283a 	ret

8020d6f0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
8020d6f0:	defffe04 	addi	sp,sp,-8
8020d6f4:	dfc00115 	stw	ra,4(sp)
8020d6f8:	df000015 	stw	fp,0(sp)
8020d6fc:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_1MS, timer_1ms);
8020d700:	01c0fa04 	movi	r7,1000
8020d704:	01800104 	movi	r6,4
8020d708:	000b883a 	mov	r5,zero
8020d70c:	01208034 	movhi	r4,33280
8020d710:	21022004 	addi	r4,r4,2176
8020d714:	020e2980 	call	8020e298 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1US, timer_1us);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
8020d718:	018000c4 	movi	r6,3
8020d71c:	000b883a 	mov	r5,zero
8020d720:	01200874 	movhi	r4,32801
8020d724:	210a4a04 	addi	r4,r4,10536
8020d728:	020d91c0 	call	8020d91c <altera_avalon_jtag_uart_init>
8020d72c:	01200874 	movhi	r4,32801
8020d730:	210a4004 	addi	r4,r4,10496
8020d734:	020d6840 	call	8020d684 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS, sysid_qsys);
8020d738:	0001883a 	nop
    ALTERA_MSGDMA_INIT ( DMA_DDR_M1, dma_DDR_M1);
8020d73c:	00a00874 	movhi	r2,32801
8020d740:	108e5804 	addi	r2,r2,14688
8020d744:	10c00717 	ldw	r3,28(r2)
8020d748:	00a00874 	movhi	r2,32801
8020d74c:	108e5804 	addi	r2,r2,14688
8020d750:	10800817 	ldw	r2,32(r2)
8020d754:	100d883a 	mov	r6,r2
8020d758:	180b883a 	mov	r5,r3
8020d75c:	01200874 	movhi	r4,32801
8020d760:	210e5804 	addi	r4,r4,14688
8020d764:	02100040 	call	80210004 <alt_msgdma_init>
    ALTERA_MSGDMA_INIT ( DMA_DDR_M2, dma_DDR_M2);
8020d768:	00a00874 	movhi	r2,32801
8020d76c:	108e7004 	addi	r2,r2,14784
8020d770:	10c00717 	ldw	r3,28(r2)
8020d774:	00a00874 	movhi	r2,32801
8020d778:	108e7004 	addi	r2,r2,14784
8020d77c:	10800817 	ldw	r2,32(r2)
8020d780:	100d883a 	mov	r6,r2
8020d784:	180b883a 	mov	r5,r3
8020d788:	01200874 	movhi	r4,32801
8020d78c:	210e7004 	addi	r4,r4,14784
8020d790:	02100040 	call	80210004 <alt_msgdma_init>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( ALTERA_UP_SD_CARD_AVALON_INTERFACE_0, Altera_UP_SD_Card_Avalon_Interface_0);
8020d794:	01200874 	movhi	r4,32801
8020d798:	210e8804 	addi	r4,r4,14880
8020d79c:	020d6840 	call	8020d684 <alt_dev_reg>
}
8020d7a0:	0001883a 	nop
8020d7a4:	e037883a 	mov	sp,fp
8020d7a8:	dfc00117 	ldw	ra,4(sp)
8020d7ac:	df000017 	ldw	fp,0(sp)
8020d7b0:	dec00204 	addi	sp,sp,8
8020d7b4:	f800283a 	ret

8020d7b8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
8020d7b8:	defffa04 	addi	sp,sp,-24
8020d7bc:	dfc00515 	stw	ra,20(sp)
8020d7c0:	df000415 	stw	fp,16(sp)
8020d7c4:	df000404 	addi	fp,sp,16
8020d7c8:	e13ffd15 	stw	r4,-12(fp)
8020d7cc:	e17ffe15 	stw	r5,-8(fp)
8020d7d0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
8020d7d4:	e0bffd17 	ldw	r2,-12(fp)
8020d7d8:	10800017 	ldw	r2,0(r2)
8020d7dc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
8020d7e0:	e0bffc17 	ldw	r2,-16(fp)
8020d7e4:	10c00a04 	addi	r3,r2,40
8020d7e8:	e0bffd17 	ldw	r2,-12(fp)
8020d7ec:	10800217 	ldw	r2,8(r2)
8020d7f0:	100f883a 	mov	r7,r2
8020d7f4:	e1bfff17 	ldw	r6,-4(fp)
8020d7f8:	e17ffe17 	ldw	r5,-8(fp)
8020d7fc:	1809883a 	mov	r4,r3
8020d800:	020dde00 	call	8020dde0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
8020d804:	e037883a 	mov	sp,fp
8020d808:	dfc00117 	ldw	ra,4(sp)
8020d80c:	df000017 	ldw	fp,0(sp)
8020d810:	dec00204 	addi	sp,sp,8
8020d814:	f800283a 	ret

8020d818 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
8020d818:	defffa04 	addi	sp,sp,-24
8020d81c:	dfc00515 	stw	ra,20(sp)
8020d820:	df000415 	stw	fp,16(sp)
8020d824:	df000404 	addi	fp,sp,16
8020d828:	e13ffd15 	stw	r4,-12(fp)
8020d82c:	e17ffe15 	stw	r5,-8(fp)
8020d830:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
8020d834:	e0bffd17 	ldw	r2,-12(fp)
8020d838:	10800017 	ldw	r2,0(r2)
8020d83c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
8020d840:	e0bffc17 	ldw	r2,-16(fp)
8020d844:	10c00a04 	addi	r3,r2,40
8020d848:	e0bffd17 	ldw	r2,-12(fp)
8020d84c:	10800217 	ldw	r2,8(r2)
8020d850:	100f883a 	mov	r7,r2
8020d854:	e1bfff17 	ldw	r6,-4(fp)
8020d858:	e17ffe17 	ldw	r5,-8(fp)
8020d85c:	1809883a 	mov	r4,r3
8020d860:	020dffc0 	call	8020dffc <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
8020d864:	e037883a 	mov	sp,fp
8020d868:	dfc00117 	ldw	ra,4(sp)
8020d86c:	df000017 	ldw	fp,0(sp)
8020d870:	dec00204 	addi	sp,sp,8
8020d874:	f800283a 	ret

8020d878 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
8020d878:	defffc04 	addi	sp,sp,-16
8020d87c:	dfc00315 	stw	ra,12(sp)
8020d880:	df000215 	stw	fp,8(sp)
8020d884:	df000204 	addi	fp,sp,8
8020d888:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
8020d88c:	e0bfff17 	ldw	r2,-4(fp)
8020d890:	10800017 	ldw	r2,0(r2)
8020d894:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
8020d898:	e0bffe17 	ldw	r2,-8(fp)
8020d89c:	10c00a04 	addi	r3,r2,40
8020d8a0:	e0bfff17 	ldw	r2,-4(fp)
8020d8a4:	10800217 	ldw	r2,8(r2)
8020d8a8:	100b883a 	mov	r5,r2
8020d8ac:	1809883a 	mov	r4,r3
8020d8b0:	020dc880 	call	8020dc88 <altera_avalon_jtag_uart_close>
}
8020d8b4:	e037883a 	mov	sp,fp
8020d8b8:	dfc00117 	ldw	ra,4(sp)
8020d8bc:	df000017 	ldw	fp,0(sp)
8020d8c0:	dec00204 	addi	sp,sp,8
8020d8c4:	f800283a 	ret

8020d8c8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
8020d8c8:	defffa04 	addi	sp,sp,-24
8020d8cc:	dfc00515 	stw	ra,20(sp)
8020d8d0:	df000415 	stw	fp,16(sp)
8020d8d4:	df000404 	addi	fp,sp,16
8020d8d8:	e13ffd15 	stw	r4,-12(fp)
8020d8dc:	e17ffe15 	stw	r5,-8(fp)
8020d8e0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
8020d8e4:	e0bffd17 	ldw	r2,-12(fp)
8020d8e8:	10800017 	ldw	r2,0(r2)
8020d8ec:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
8020d8f0:	e0bffc17 	ldw	r2,-16(fp)
8020d8f4:	10800a04 	addi	r2,r2,40
8020d8f8:	e1bfff17 	ldw	r6,-4(fp)
8020d8fc:	e17ffe17 	ldw	r5,-8(fp)
8020d900:	1009883a 	mov	r4,r2
8020d904:	020dcf00 	call	8020dcf0 <altera_avalon_jtag_uart_ioctl>
}
8020d908:	e037883a 	mov	sp,fp
8020d90c:	dfc00117 	ldw	ra,4(sp)
8020d910:	df000017 	ldw	fp,0(sp)
8020d914:	dec00204 	addi	sp,sp,8
8020d918:	f800283a 	ret

8020d91c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
8020d91c:	defffa04 	addi	sp,sp,-24
8020d920:	dfc00515 	stw	ra,20(sp)
8020d924:	df000415 	stw	fp,16(sp)
8020d928:	df000404 	addi	fp,sp,16
8020d92c:	e13ffd15 	stw	r4,-12(fp)
8020d930:	e17ffe15 	stw	r5,-8(fp)
8020d934:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
8020d938:	e0bffd17 	ldw	r2,-12(fp)
8020d93c:	00c00044 	movi	r3,1
8020d940:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
8020d944:	e0bffd17 	ldw	r2,-12(fp)
8020d948:	10800017 	ldw	r2,0(r2)
8020d94c:	10800104 	addi	r2,r2,4
8020d950:	1007883a 	mov	r3,r2
8020d954:	e0bffd17 	ldw	r2,-12(fp)
8020d958:	10800817 	ldw	r2,32(r2)
8020d95c:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
8020d960:	e0bffe17 	ldw	r2,-8(fp)
8020d964:	e0ffff17 	ldw	r3,-4(fp)
8020d968:	d8000015 	stw	zero,0(sp)
8020d96c:	e1fffd17 	ldw	r7,-12(fp)
8020d970:	01a00874 	movhi	r6,32801
8020d974:	31b67704 	addi	r6,r6,-9764
8020d978:	180b883a 	mov	r5,r3
8020d97c:	1009883a 	mov	r4,r2
8020d980:	02107600 	call	80210760 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
8020d984:	e0bffd17 	ldw	r2,-12(fp)
8020d988:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
8020d98c:	e0bffd17 	ldw	r2,-12(fp)
8020d990:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
8020d994:	d0e01e17 	ldw	r3,-32648(gp)
8020d998:	e1fffd17 	ldw	r7,-12(fp)
8020d99c:	01a00874 	movhi	r6,32801
8020d9a0:	31b6fa04 	addi	r6,r6,-9240
8020d9a4:	180b883a 	mov	r5,r3
8020d9a8:	1009883a 	mov	r4,r2
8020d9ac:	02102b40 	call	802102b4 <alt_alarm_start>
8020d9b0:	1000040e 	bge	r2,zero,8020d9c4 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
8020d9b4:	e0fffd17 	ldw	r3,-12(fp)
8020d9b8:	00a00034 	movhi	r2,32768
8020d9bc:	10bfffc4 	addi	r2,r2,-1
8020d9c0:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
8020d9c4:	0001883a 	nop
8020d9c8:	e037883a 	mov	sp,fp
8020d9cc:	dfc00117 	ldw	ra,4(sp)
8020d9d0:	df000017 	ldw	fp,0(sp)
8020d9d4:	dec00204 	addi	sp,sp,8
8020d9d8:	f800283a 	ret

8020d9dc <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
8020d9dc:	defff804 	addi	sp,sp,-32
8020d9e0:	df000715 	stw	fp,28(sp)
8020d9e4:	df000704 	addi	fp,sp,28
8020d9e8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
8020d9ec:	e0bfff17 	ldw	r2,-4(fp)
8020d9f0:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
8020d9f4:	e0bffb17 	ldw	r2,-20(fp)
8020d9f8:	10800017 	ldw	r2,0(r2)
8020d9fc:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
8020da00:	e0bffc17 	ldw	r2,-16(fp)
8020da04:	10800104 	addi	r2,r2,4
8020da08:	10800037 	ldwio	r2,0(r2)
8020da0c:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
8020da10:	e0bffd17 	ldw	r2,-12(fp)
8020da14:	1080c00c 	andi	r2,r2,768
8020da18:	10006d26 	beq	r2,zero,8020dbd0 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
8020da1c:	e0bffd17 	ldw	r2,-12(fp)
8020da20:	1080400c 	andi	r2,r2,256
8020da24:	10003526 	beq	r2,zero,8020dafc <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
8020da28:	00800074 	movhi	r2,1
8020da2c:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
8020da30:	e0bffb17 	ldw	r2,-20(fp)
8020da34:	10800a17 	ldw	r2,40(r2)
8020da38:	10800044 	addi	r2,r2,1
8020da3c:	1081ffcc 	andi	r2,r2,2047
8020da40:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
8020da44:	e0bffb17 	ldw	r2,-20(fp)
8020da48:	10c00b17 	ldw	r3,44(r2)
8020da4c:	e0bffe17 	ldw	r2,-8(fp)
8020da50:	18801526 	beq	r3,r2,8020daa8 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
8020da54:	e0bffc17 	ldw	r2,-16(fp)
8020da58:	10800037 	ldwio	r2,0(r2)
8020da5c:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
8020da60:	e0bff917 	ldw	r2,-28(fp)
8020da64:	10a0000c 	andi	r2,r2,32768
8020da68:	10001126 	beq	r2,zero,8020dab0 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
8020da6c:	e0bffb17 	ldw	r2,-20(fp)
8020da70:	10800a17 	ldw	r2,40(r2)
8020da74:	e0fff917 	ldw	r3,-28(fp)
8020da78:	1809883a 	mov	r4,r3
8020da7c:	e0fffb17 	ldw	r3,-20(fp)
8020da80:	1885883a 	add	r2,r3,r2
8020da84:	10800e04 	addi	r2,r2,56
8020da88:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
8020da8c:	e0bffb17 	ldw	r2,-20(fp)
8020da90:	10800a17 	ldw	r2,40(r2)
8020da94:	10800044 	addi	r2,r2,1
8020da98:	10c1ffcc 	andi	r3,r2,2047
8020da9c:	e0bffb17 	ldw	r2,-20(fp)
8020daa0:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
8020daa4:	003fe206 	br	8020da30 <__reset+0xfa1eda30>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
8020daa8:	0001883a 	nop
8020daac:	00000106 	br	8020dab4 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
8020dab0:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
8020dab4:	e0bff917 	ldw	r2,-28(fp)
8020dab8:	10bfffec 	andhi	r2,r2,65535
8020dabc:	10000f26 	beq	r2,zero,8020dafc <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
8020dac0:	e0bffb17 	ldw	r2,-20(fp)
8020dac4:	10c00817 	ldw	r3,32(r2)
8020dac8:	00bfff84 	movi	r2,-2
8020dacc:	1886703a 	and	r3,r3,r2
8020dad0:	e0bffb17 	ldw	r2,-20(fp)
8020dad4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
8020dad8:	e0bffc17 	ldw	r2,-16(fp)
8020dadc:	10800104 	addi	r2,r2,4
8020dae0:	1007883a 	mov	r3,r2
8020dae4:	e0bffb17 	ldw	r2,-20(fp)
8020dae8:	10800817 	ldw	r2,32(r2)
8020daec:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
8020daf0:	e0bffc17 	ldw	r2,-16(fp)
8020daf4:	10800104 	addi	r2,r2,4
8020daf8:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
8020dafc:	e0bffd17 	ldw	r2,-12(fp)
8020db00:	1080800c 	andi	r2,r2,512
8020db04:	103fbe26 	beq	r2,zero,8020da00 <__reset+0xfa1eda00>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
8020db08:	e0bffd17 	ldw	r2,-12(fp)
8020db0c:	1004d43a 	srli	r2,r2,16
8020db10:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
8020db14:	00001406 	br	8020db68 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
8020db18:	e0bffc17 	ldw	r2,-16(fp)
8020db1c:	e0fffb17 	ldw	r3,-20(fp)
8020db20:	18c00d17 	ldw	r3,52(r3)
8020db24:	e13ffb17 	ldw	r4,-20(fp)
8020db28:	20c7883a 	add	r3,r4,r3
8020db2c:	18c20e04 	addi	r3,r3,2104
8020db30:	18c00003 	ldbu	r3,0(r3)
8020db34:	18c03fcc 	andi	r3,r3,255
8020db38:	18c0201c 	xori	r3,r3,128
8020db3c:	18ffe004 	addi	r3,r3,-128
8020db40:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
8020db44:	e0bffb17 	ldw	r2,-20(fp)
8020db48:	10800d17 	ldw	r2,52(r2)
8020db4c:	10800044 	addi	r2,r2,1
8020db50:	10c1ffcc 	andi	r3,r2,2047
8020db54:	e0bffb17 	ldw	r2,-20(fp)
8020db58:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
8020db5c:	e0bffa17 	ldw	r2,-24(fp)
8020db60:	10bfffc4 	addi	r2,r2,-1
8020db64:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
8020db68:	e0bffa17 	ldw	r2,-24(fp)
8020db6c:	10000526 	beq	r2,zero,8020db84 <altera_avalon_jtag_uart_irq+0x1a8>
8020db70:	e0bffb17 	ldw	r2,-20(fp)
8020db74:	10c00d17 	ldw	r3,52(r2)
8020db78:	e0bffb17 	ldw	r2,-20(fp)
8020db7c:	10800c17 	ldw	r2,48(r2)
8020db80:	18bfe51e 	bne	r3,r2,8020db18 <__reset+0xfa1edb18>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
8020db84:	e0bffa17 	ldw	r2,-24(fp)
8020db88:	103f9d26 	beq	r2,zero,8020da00 <__reset+0xfa1eda00>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
8020db8c:	e0bffb17 	ldw	r2,-20(fp)
8020db90:	10c00817 	ldw	r3,32(r2)
8020db94:	00bfff44 	movi	r2,-3
8020db98:	1886703a 	and	r3,r3,r2
8020db9c:	e0bffb17 	ldw	r2,-20(fp)
8020dba0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
8020dba4:	e0bffb17 	ldw	r2,-20(fp)
8020dba8:	10800017 	ldw	r2,0(r2)
8020dbac:	10800104 	addi	r2,r2,4
8020dbb0:	1007883a 	mov	r3,r2
8020dbb4:	e0bffb17 	ldw	r2,-20(fp)
8020dbb8:	10800817 	ldw	r2,32(r2)
8020dbbc:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
8020dbc0:	e0bffc17 	ldw	r2,-16(fp)
8020dbc4:	10800104 	addi	r2,r2,4
8020dbc8:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
8020dbcc:	003f8c06 	br	8020da00 <__reset+0xfa1eda00>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
8020dbd0:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
8020dbd4:	0001883a 	nop
8020dbd8:	e037883a 	mov	sp,fp
8020dbdc:	df000017 	ldw	fp,0(sp)
8020dbe0:	dec00104 	addi	sp,sp,4
8020dbe4:	f800283a 	ret

8020dbe8 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
8020dbe8:	defff804 	addi	sp,sp,-32
8020dbec:	df000715 	stw	fp,28(sp)
8020dbf0:	df000704 	addi	fp,sp,28
8020dbf4:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
8020dbf8:	e0bffb17 	ldw	r2,-20(fp)
8020dbfc:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
8020dc00:	e0bff917 	ldw	r2,-28(fp)
8020dc04:	10800017 	ldw	r2,0(r2)
8020dc08:	10800104 	addi	r2,r2,4
8020dc0c:	10800037 	ldwio	r2,0(r2)
8020dc10:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
8020dc14:	e0bffa17 	ldw	r2,-24(fp)
8020dc18:	1081000c 	andi	r2,r2,1024
8020dc1c:	10000b26 	beq	r2,zero,8020dc4c <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
8020dc20:	e0bff917 	ldw	r2,-28(fp)
8020dc24:	10800017 	ldw	r2,0(r2)
8020dc28:	10800104 	addi	r2,r2,4
8020dc2c:	1007883a 	mov	r3,r2
8020dc30:	e0bff917 	ldw	r2,-28(fp)
8020dc34:	10800817 	ldw	r2,32(r2)
8020dc38:	10810014 	ori	r2,r2,1024
8020dc3c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
8020dc40:	e0bff917 	ldw	r2,-28(fp)
8020dc44:	10000915 	stw	zero,36(r2)
8020dc48:	00000a06 	br	8020dc74 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
8020dc4c:	e0bff917 	ldw	r2,-28(fp)
8020dc50:	10c00917 	ldw	r3,36(r2)
8020dc54:	00a00034 	movhi	r2,32768
8020dc58:	10bfff04 	addi	r2,r2,-4
8020dc5c:	10c00536 	bltu	r2,r3,8020dc74 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
8020dc60:	e0bff917 	ldw	r2,-28(fp)
8020dc64:	10800917 	ldw	r2,36(r2)
8020dc68:	10c00044 	addi	r3,r2,1
8020dc6c:	e0bff917 	ldw	r2,-28(fp)
8020dc70:	10c00915 	stw	r3,36(r2)
8020dc74:	d0a01e17 	ldw	r2,-32648(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
8020dc78:	e037883a 	mov	sp,fp
8020dc7c:	df000017 	ldw	fp,0(sp)
8020dc80:	dec00104 	addi	sp,sp,4
8020dc84:	f800283a 	ret

8020dc88 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
8020dc88:	defffd04 	addi	sp,sp,-12
8020dc8c:	df000215 	stw	fp,8(sp)
8020dc90:	df000204 	addi	fp,sp,8
8020dc94:	e13ffe15 	stw	r4,-8(fp)
8020dc98:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
8020dc9c:	00000506 	br	8020dcb4 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
8020dca0:	e0bfff17 	ldw	r2,-4(fp)
8020dca4:	1090000c 	andi	r2,r2,16384
8020dca8:	10000226 	beq	r2,zero,8020dcb4 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
8020dcac:	00bffd44 	movi	r2,-11
8020dcb0:	00000b06 	br	8020dce0 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
8020dcb4:	e0bffe17 	ldw	r2,-8(fp)
8020dcb8:	10c00d17 	ldw	r3,52(r2)
8020dcbc:	e0bffe17 	ldw	r2,-8(fp)
8020dcc0:	10800c17 	ldw	r2,48(r2)
8020dcc4:	18800526 	beq	r3,r2,8020dcdc <altera_avalon_jtag_uart_close+0x54>
8020dcc8:	e0bffe17 	ldw	r2,-8(fp)
8020dccc:	10c00917 	ldw	r3,36(r2)
8020dcd0:	e0bffe17 	ldw	r2,-8(fp)
8020dcd4:	10800117 	ldw	r2,4(r2)
8020dcd8:	18bff136 	bltu	r3,r2,8020dca0 <__reset+0xfa1edca0>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
8020dcdc:	0005883a 	mov	r2,zero
}
8020dce0:	e037883a 	mov	sp,fp
8020dce4:	df000017 	ldw	fp,0(sp)
8020dce8:	dec00104 	addi	sp,sp,4
8020dcec:	f800283a 	ret

8020dcf0 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
8020dcf0:	defffa04 	addi	sp,sp,-24
8020dcf4:	df000515 	stw	fp,20(sp)
8020dcf8:	df000504 	addi	fp,sp,20
8020dcfc:	e13ffd15 	stw	r4,-12(fp)
8020dd00:	e17ffe15 	stw	r5,-8(fp)
8020dd04:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
8020dd08:	00bff9c4 	movi	r2,-25
8020dd0c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
8020dd10:	e0bffe17 	ldw	r2,-8(fp)
8020dd14:	10da8060 	cmpeqi	r3,r2,27137
8020dd18:	1800031e 	bne	r3,zero,8020dd28 <altera_avalon_jtag_uart_ioctl+0x38>
8020dd1c:	109a80a0 	cmpeqi	r2,r2,27138
8020dd20:	1000181e 	bne	r2,zero,8020dd84 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
8020dd24:	00002906 	br	8020ddcc <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
8020dd28:	e0bffd17 	ldw	r2,-12(fp)
8020dd2c:	10c00117 	ldw	r3,4(r2)
8020dd30:	00a00034 	movhi	r2,32768
8020dd34:	10bfffc4 	addi	r2,r2,-1
8020dd38:	18802126 	beq	r3,r2,8020ddc0 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
8020dd3c:	e0bfff17 	ldw	r2,-4(fp)
8020dd40:	10800017 	ldw	r2,0(r2)
8020dd44:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
8020dd48:	e0bffc17 	ldw	r2,-16(fp)
8020dd4c:	10800090 	cmplti	r2,r2,2
8020dd50:	1000061e 	bne	r2,zero,8020dd6c <altera_avalon_jtag_uart_ioctl+0x7c>
8020dd54:	e0fffc17 	ldw	r3,-16(fp)
8020dd58:	00a00034 	movhi	r2,32768
8020dd5c:	10bfffc4 	addi	r2,r2,-1
8020dd60:	18800226 	beq	r3,r2,8020dd6c <altera_avalon_jtag_uart_ioctl+0x7c>
8020dd64:	e0bffc17 	ldw	r2,-16(fp)
8020dd68:	00000206 	br	8020dd74 <altera_avalon_jtag_uart_ioctl+0x84>
8020dd6c:	00a00034 	movhi	r2,32768
8020dd70:	10bfff84 	addi	r2,r2,-2
8020dd74:	e0fffd17 	ldw	r3,-12(fp)
8020dd78:	18800115 	stw	r2,4(r3)
      rc = 0;
8020dd7c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
8020dd80:	00000f06 	br	8020ddc0 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
8020dd84:	e0bffd17 	ldw	r2,-12(fp)
8020dd88:	10c00117 	ldw	r3,4(r2)
8020dd8c:	00a00034 	movhi	r2,32768
8020dd90:	10bfffc4 	addi	r2,r2,-1
8020dd94:	18800c26 	beq	r3,r2,8020ddc8 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
8020dd98:	e0bffd17 	ldw	r2,-12(fp)
8020dd9c:	10c00917 	ldw	r3,36(r2)
8020dda0:	e0bffd17 	ldw	r2,-12(fp)
8020dda4:	10800117 	ldw	r2,4(r2)
8020dda8:	1885803a 	cmpltu	r2,r3,r2
8020ddac:	10c03fcc 	andi	r3,r2,255
8020ddb0:	e0bfff17 	ldw	r2,-4(fp)
8020ddb4:	10c00015 	stw	r3,0(r2)
      rc = 0;
8020ddb8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
8020ddbc:	00000206 	br	8020ddc8 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
8020ddc0:	0001883a 	nop
8020ddc4:	00000106 	br	8020ddcc <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
8020ddc8:	0001883a 	nop

  default:
    break;
  }

  return rc;
8020ddcc:	e0bffb17 	ldw	r2,-20(fp)
}
8020ddd0:	e037883a 	mov	sp,fp
8020ddd4:	df000017 	ldw	fp,0(sp)
8020ddd8:	dec00104 	addi	sp,sp,4
8020dddc:	f800283a 	ret

8020dde0 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
8020dde0:	defff304 	addi	sp,sp,-52
8020dde4:	dfc00c15 	stw	ra,48(sp)
8020dde8:	df000b15 	stw	fp,44(sp)
8020ddec:	df000b04 	addi	fp,sp,44
8020ddf0:	e13ffc15 	stw	r4,-16(fp)
8020ddf4:	e17ffd15 	stw	r5,-12(fp)
8020ddf8:	e1bffe15 	stw	r6,-8(fp)
8020ddfc:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
8020de00:	e0bffd17 	ldw	r2,-12(fp)
8020de04:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
8020de08:	00004706 	br	8020df28 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
8020de0c:	e0bffc17 	ldw	r2,-16(fp)
8020de10:	10800a17 	ldw	r2,40(r2)
8020de14:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
8020de18:	e0bffc17 	ldw	r2,-16(fp)
8020de1c:	10800b17 	ldw	r2,44(r2)
8020de20:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
8020de24:	e0fff717 	ldw	r3,-36(fp)
8020de28:	e0bff817 	ldw	r2,-32(fp)
8020de2c:	18800536 	bltu	r3,r2,8020de44 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
8020de30:	e0fff717 	ldw	r3,-36(fp)
8020de34:	e0bff817 	ldw	r2,-32(fp)
8020de38:	1885c83a 	sub	r2,r3,r2
8020de3c:	e0bff615 	stw	r2,-40(fp)
8020de40:	00000406 	br	8020de54 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
8020de44:	00c20004 	movi	r3,2048
8020de48:	e0bff817 	ldw	r2,-32(fp)
8020de4c:	1885c83a 	sub	r2,r3,r2
8020de50:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
8020de54:	e0bff617 	ldw	r2,-40(fp)
8020de58:	10001e26 	beq	r2,zero,8020ded4 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
8020de5c:	e0fffe17 	ldw	r3,-8(fp)
8020de60:	e0bff617 	ldw	r2,-40(fp)
8020de64:	1880022e 	bgeu	r3,r2,8020de70 <altera_avalon_jtag_uart_read+0x90>
        n = space;
8020de68:	e0bffe17 	ldw	r2,-8(fp)
8020de6c:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
8020de70:	e0bffc17 	ldw	r2,-16(fp)
8020de74:	10c00e04 	addi	r3,r2,56
8020de78:	e0bff817 	ldw	r2,-32(fp)
8020de7c:	1885883a 	add	r2,r3,r2
8020de80:	e1bff617 	ldw	r6,-40(fp)
8020de84:	100b883a 	mov	r5,r2
8020de88:	e13ff517 	ldw	r4,-44(fp)
8020de8c:	02004dc0 	call	802004dc <memcpy>
      ptr   += n;
8020de90:	e0fff517 	ldw	r3,-44(fp)
8020de94:	e0bff617 	ldw	r2,-40(fp)
8020de98:	1885883a 	add	r2,r3,r2
8020de9c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
8020dea0:	e0fffe17 	ldw	r3,-8(fp)
8020dea4:	e0bff617 	ldw	r2,-40(fp)
8020dea8:	1885c83a 	sub	r2,r3,r2
8020deac:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
8020deb0:	e0fff817 	ldw	r3,-32(fp)
8020deb4:	e0bff617 	ldw	r2,-40(fp)
8020deb8:	1885883a 	add	r2,r3,r2
8020debc:	10c1ffcc 	andi	r3,r2,2047
8020dec0:	e0bffc17 	ldw	r2,-16(fp)
8020dec4:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
8020dec8:	e0bffe17 	ldw	r2,-8(fp)
8020decc:	00bfcf16 	blt	zero,r2,8020de0c <__reset+0xfa1ede0c>
8020ded0:	00000106 	br	8020ded8 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
8020ded4:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
8020ded8:	e0fff517 	ldw	r3,-44(fp)
8020dedc:	e0bffd17 	ldw	r2,-12(fp)
8020dee0:	1880141e 	bne	r3,r2,8020df34 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
8020dee4:	e0bfff17 	ldw	r2,-4(fp)
8020dee8:	1090000c 	andi	r2,r2,16384
8020deec:	1000131e 	bne	r2,zero,8020df3c <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
8020def0:	0001883a 	nop
8020def4:	e0bffc17 	ldw	r2,-16(fp)
8020def8:	10c00a17 	ldw	r3,40(r2)
8020defc:	e0bff717 	ldw	r2,-36(fp)
8020df00:	1880051e 	bne	r3,r2,8020df18 <altera_avalon_jtag_uart_read+0x138>
8020df04:	e0bffc17 	ldw	r2,-16(fp)
8020df08:	10c00917 	ldw	r3,36(r2)
8020df0c:	e0bffc17 	ldw	r2,-16(fp)
8020df10:	10800117 	ldw	r2,4(r2)
8020df14:	18bff736 	bltu	r3,r2,8020def4 <__reset+0xfa1edef4>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
8020df18:	e0bffc17 	ldw	r2,-16(fp)
8020df1c:	10c00a17 	ldw	r3,40(r2)
8020df20:	e0bff717 	ldw	r2,-36(fp)
8020df24:	18800726 	beq	r3,r2,8020df44 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
8020df28:	e0bffe17 	ldw	r2,-8(fp)
8020df2c:	00bfb716 	blt	zero,r2,8020de0c <__reset+0xfa1ede0c>
8020df30:	00000506 	br	8020df48 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
8020df34:	0001883a 	nop
8020df38:	00000306 	br	8020df48 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
8020df3c:	0001883a 	nop
8020df40:	00000106 	br	8020df48 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
8020df44:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
8020df48:	e0fff517 	ldw	r3,-44(fp)
8020df4c:	e0bffd17 	ldw	r2,-12(fp)
8020df50:	18801826 	beq	r3,r2,8020dfb4 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8020df54:	0005303a 	rdctl	r2,status
8020df58:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8020df5c:	e0fffb17 	ldw	r3,-20(fp)
8020df60:	00bfff84 	movi	r2,-2
8020df64:	1884703a 	and	r2,r3,r2
8020df68:	1001703a 	wrctl	status,r2
  
  return context;
8020df6c:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
8020df70:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
8020df74:	e0bffc17 	ldw	r2,-16(fp)
8020df78:	10800817 	ldw	r2,32(r2)
8020df7c:	10c00054 	ori	r3,r2,1
8020df80:	e0bffc17 	ldw	r2,-16(fp)
8020df84:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
8020df88:	e0bffc17 	ldw	r2,-16(fp)
8020df8c:	10800017 	ldw	r2,0(r2)
8020df90:	10800104 	addi	r2,r2,4
8020df94:	1007883a 	mov	r3,r2
8020df98:	e0bffc17 	ldw	r2,-16(fp)
8020df9c:	10800817 	ldw	r2,32(r2)
8020dfa0:	18800035 	stwio	r2,0(r3)
8020dfa4:	e0bffa17 	ldw	r2,-24(fp)
8020dfa8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8020dfac:	e0bff917 	ldw	r2,-28(fp)
8020dfb0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
8020dfb4:	e0fff517 	ldw	r3,-44(fp)
8020dfb8:	e0bffd17 	ldw	r2,-12(fp)
8020dfbc:	18800426 	beq	r3,r2,8020dfd0 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
8020dfc0:	e0fff517 	ldw	r3,-44(fp)
8020dfc4:	e0bffd17 	ldw	r2,-12(fp)
8020dfc8:	1885c83a 	sub	r2,r3,r2
8020dfcc:	00000606 	br	8020dfe8 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
8020dfd0:	e0bfff17 	ldw	r2,-4(fp)
8020dfd4:	1090000c 	andi	r2,r2,16384
8020dfd8:	10000226 	beq	r2,zero,8020dfe4 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
8020dfdc:	00bffd44 	movi	r2,-11
8020dfe0:	00000106 	br	8020dfe8 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
8020dfe4:	00bffec4 	movi	r2,-5
}
8020dfe8:	e037883a 	mov	sp,fp
8020dfec:	dfc00117 	ldw	ra,4(sp)
8020dff0:	df000017 	ldw	fp,0(sp)
8020dff4:	dec00204 	addi	sp,sp,8
8020dff8:	f800283a 	ret

8020dffc <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
8020dffc:	defff304 	addi	sp,sp,-52
8020e000:	dfc00c15 	stw	ra,48(sp)
8020e004:	df000b15 	stw	fp,44(sp)
8020e008:	df000b04 	addi	fp,sp,44
8020e00c:	e13ffc15 	stw	r4,-16(fp)
8020e010:	e17ffd15 	stw	r5,-12(fp)
8020e014:	e1bffe15 	stw	r6,-8(fp)
8020e018:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
8020e01c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
8020e020:	e0bffd17 	ldw	r2,-12(fp)
8020e024:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
8020e028:	00003706 	br	8020e108 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
8020e02c:	e0bffc17 	ldw	r2,-16(fp)
8020e030:	10800c17 	ldw	r2,48(r2)
8020e034:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
8020e038:	e0bffc17 	ldw	r2,-16(fp)
8020e03c:	10800d17 	ldw	r2,52(r2)
8020e040:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
8020e044:	e0fff917 	ldw	r3,-28(fp)
8020e048:	e0bff517 	ldw	r2,-44(fp)
8020e04c:	1880062e 	bgeu	r3,r2,8020e068 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
8020e050:	e0fff517 	ldw	r3,-44(fp)
8020e054:	e0bff917 	ldw	r2,-28(fp)
8020e058:	1885c83a 	sub	r2,r3,r2
8020e05c:	10bfffc4 	addi	r2,r2,-1
8020e060:	e0bff615 	stw	r2,-40(fp)
8020e064:	00000b06 	br	8020e094 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
8020e068:	e0bff517 	ldw	r2,-44(fp)
8020e06c:	10000526 	beq	r2,zero,8020e084 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
8020e070:	00c20004 	movi	r3,2048
8020e074:	e0bff917 	ldw	r2,-28(fp)
8020e078:	1885c83a 	sub	r2,r3,r2
8020e07c:	e0bff615 	stw	r2,-40(fp)
8020e080:	00000406 	br	8020e094 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
8020e084:	00c1ffc4 	movi	r3,2047
8020e088:	e0bff917 	ldw	r2,-28(fp)
8020e08c:	1885c83a 	sub	r2,r3,r2
8020e090:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
8020e094:	e0bff617 	ldw	r2,-40(fp)
8020e098:	10001e26 	beq	r2,zero,8020e114 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
8020e09c:	e0fffe17 	ldw	r3,-8(fp)
8020e0a0:	e0bff617 	ldw	r2,-40(fp)
8020e0a4:	1880022e 	bgeu	r3,r2,8020e0b0 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
8020e0a8:	e0bffe17 	ldw	r2,-8(fp)
8020e0ac:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
8020e0b0:	e0bffc17 	ldw	r2,-16(fp)
8020e0b4:	10c20e04 	addi	r3,r2,2104
8020e0b8:	e0bff917 	ldw	r2,-28(fp)
8020e0bc:	1885883a 	add	r2,r3,r2
8020e0c0:	e1bff617 	ldw	r6,-40(fp)
8020e0c4:	e17ffd17 	ldw	r5,-12(fp)
8020e0c8:	1009883a 	mov	r4,r2
8020e0cc:	02004dc0 	call	802004dc <memcpy>
      ptr   += n;
8020e0d0:	e0fffd17 	ldw	r3,-12(fp)
8020e0d4:	e0bff617 	ldw	r2,-40(fp)
8020e0d8:	1885883a 	add	r2,r3,r2
8020e0dc:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
8020e0e0:	e0fffe17 	ldw	r3,-8(fp)
8020e0e4:	e0bff617 	ldw	r2,-40(fp)
8020e0e8:	1885c83a 	sub	r2,r3,r2
8020e0ec:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
8020e0f0:	e0fff917 	ldw	r3,-28(fp)
8020e0f4:	e0bff617 	ldw	r2,-40(fp)
8020e0f8:	1885883a 	add	r2,r3,r2
8020e0fc:	10c1ffcc 	andi	r3,r2,2047
8020e100:	e0bffc17 	ldw	r2,-16(fp)
8020e104:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
8020e108:	e0bffe17 	ldw	r2,-8(fp)
8020e10c:	00bfc716 	blt	zero,r2,8020e02c <__reset+0xfa1ee02c>
8020e110:	00000106 	br	8020e118 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
8020e114:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8020e118:	0005303a 	rdctl	r2,status
8020e11c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8020e120:	e0fffb17 	ldw	r3,-20(fp)
8020e124:	00bfff84 	movi	r2,-2
8020e128:	1884703a 	and	r2,r3,r2
8020e12c:	1001703a 	wrctl	status,r2
  
  return context;
8020e130:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
8020e134:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
8020e138:	e0bffc17 	ldw	r2,-16(fp)
8020e13c:	10800817 	ldw	r2,32(r2)
8020e140:	10c00094 	ori	r3,r2,2
8020e144:	e0bffc17 	ldw	r2,-16(fp)
8020e148:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
8020e14c:	e0bffc17 	ldw	r2,-16(fp)
8020e150:	10800017 	ldw	r2,0(r2)
8020e154:	10800104 	addi	r2,r2,4
8020e158:	1007883a 	mov	r3,r2
8020e15c:	e0bffc17 	ldw	r2,-16(fp)
8020e160:	10800817 	ldw	r2,32(r2)
8020e164:	18800035 	stwio	r2,0(r3)
8020e168:	e0bffa17 	ldw	r2,-24(fp)
8020e16c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8020e170:	e0bff817 	ldw	r2,-32(fp)
8020e174:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
8020e178:	e0bffe17 	ldw	r2,-8(fp)
8020e17c:	0080100e 	bge	zero,r2,8020e1c0 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
8020e180:	e0bfff17 	ldw	r2,-4(fp)
8020e184:	1090000c 	andi	r2,r2,16384
8020e188:	1000101e 	bne	r2,zero,8020e1cc <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
8020e18c:	0001883a 	nop
8020e190:	e0bffc17 	ldw	r2,-16(fp)
8020e194:	10c00d17 	ldw	r3,52(r2)
8020e198:	e0bff517 	ldw	r2,-44(fp)
8020e19c:	1880051e 	bne	r3,r2,8020e1b4 <altera_avalon_jtag_uart_write+0x1b8>
8020e1a0:	e0bffc17 	ldw	r2,-16(fp)
8020e1a4:	10c00917 	ldw	r3,36(r2)
8020e1a8:	e0bffc17 	ldw	r2,-16(fp)
8020e1ac:	10800117 	ldw	r2,4(r2)
8020e1b0:	18bff736 	bltu	r3,r2,8020e190 <__reset+0xfa1ee190>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
8020e1b4:	e0bffc17 	ldw	r2,-16(fp)
8020e1b8:	10800917 	ldw	r2,36(r2)
8020e1bc:	1000051e 	bne	r2,zero,8020e1d4 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
8020e1c0:	e0bffe17 	ldw	r2,-8(fp)
8020e1c4:	00bfd016 	blt	zero,r2,8020e108 <__reset+0xfa1ee108>
8020e1c8:	00000306 	br	8020e1d8 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
8020e1cc:	0001883a 	nop
8020e1d0:	00000106 	br	8020e1d8 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
8020e1d4:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
8020e1d8:	e0fffd17 	ldw	r3,-12(fp)
8020e1dc:	e0bff717 	ldw	r2,-36(fp)
8020e1e0:	18800426 	beq	r3,r2,8020e1f4 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
8020e1e4:	e0fffd17 	ldw	r3,-12(fp)
8020e1e8:	e0bff717 	ldw	r2,-36(fp)
8020e1ec:	1885c83a 	sub	r2,r3,r2
8020e1f0:	00000606 	br	8020e20c <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
8020e1f4:	e0bfff17 	ldw	r2,-4(fp)
8020e1f8:	1090000c 	andi	r2,r2,16384
8020e1fc:	10000226 	beq	r2,zero,8020e208 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
8020e200:	00bffd44 	movi	r2,-11
8020e204:	00000106 	br	8020e20c <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
8020e208:	00bffec4 	movi	r2,-5
}
8020e20c:	e037883a 	mov	sp,fp
8020e210:	dfc00117 	ldw	ra,4(sp)
8020e214:	df000017 	ldw	fp,0(sp)
8020e218:	dec00204 	addi	sp,sp,8
8020e21c:	f800283a 	ret

8020e220 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
8020e220:	defffa04 	addi	sp,sp,-24
8020e224:	dfc00515 	stw	ra,20(sp)
8020e228:	df000415 	stw	fp,16(sp)
8020e22c:	df000404 	addi	fp,sp,16
8020e230:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
8020e234:	0007883a 	mov	r3,zero
8020e238:	e0bfff17 	ldw	r2,-4(fp)
8020e23c:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
8020e240:	e0bfff17 	ldw	r2,-4(fp)
8020e244:	10800104 	addi	r2,r2,4
8020e248:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8020e24c:	0005303a 	rdctl	r2,status
8020e250:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8020e254:	e0fffd17 	ldw	r3,-12(fp)
8020e258:	00bfff84 	movi	r2,-2
8020e25c:	1884703a 	and	r2,r3,r2
8020e260:	1001703a 	wrctl	status,r2
  
  return context;
8020e264:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
8020e268:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
8020e26c:	02110980 	call	80211098 <alt_tick>
8020e270:	e0bffc17 	ldw	r2,-16(fp)
8020e274:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8020e278:	e0bffe17 	ldw	r2,-8(fp)
8020e27c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
8020e280:	0001883a 	nop
8020e284:	e037883a 	mov	sp,fp
8020e288:	dfc00117 	ldw	ra,4(sp)
8020e28c:	df000017 	ldw	fp,0(sp)
8020e290:	dec00204 	addi	sp,sp,8
8020e294:	f800283a 	ret

8020e298 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
8020e298:	defff804 	addi	sp,sp,-32
8020e29c:	dfc00715 	stw	ra,28(sp)
8020e2a0:	df000615 	stw	fp,24(sp)
8020e2a4:	df000604 	addi	fp,sp,24
8020e2a8:	e13ffc15 	stw	r4,-16(fp)
8020e2ac:	e17ffd15 	stw	r5,-12(fp)
8020e2b0:	e1bffe15 	stw	r6,-8(fp)
8020e2b4:	e1ffff15 	stw	r7,-4(fp)
8020e2b8:	e0bfff17 	ldw	r2,-4(fp)
8020e2bc:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
8020e2c0:	d0a01e17 	ldw	r2,-32648(gp)
8020e2c4:	1000021e 	bne	r2,zero,8020e2d0 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
8020e2c8:	e0bffb17 	ldw	r2,-20(fp)
8020e2cc:	d0a01e15 	stw	r2,-32648(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
8020e2d0:	e0bffc17 	ldw	r2,-16(fp)
8020e2d4:	10800104 	addi	r2,r2,4
8020e2d8:	00c001c4 	movi	r3,7
8020e2dc:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
8020e2e0:	d8000015 	stw	zero,0(sp)
8020e2e4:	e1fffc17 	ldw	r7,-16(fp)
8020e2e8:	01a00874 	movhi	r6,32801
8020e2ec:	31b88804 	addi	r6,r6,-7648
8020e2f0:	e17ffe17 	ldw	r5,-8(fp)
8020e2f4:	e13ffd17 	ldw	r4,-12(fp)
8020e2f8:	02107600 	call	80210760 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
8020e2fc:	0001883a 	nop
8020e300:	e037883a 	mov	sp,fp
8020e304:	dfc00117 	ldw	ra,4(sp)
8020e308:	df000017 	ldw	fp,0(sp)
8020e30c:	dec00204 	addi	sp,sp,8
8020e310:	f800283a 	ret

8020e314 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
8020e314:	defffe04 	addi	sp,sp,-8
8020e318:	dfc00115 	stw	ra,4(sp)
8020e31c:	df000015 	stw	fp,0(sp)
8020e320:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
8020e324:	d0a00b17 	ldw	r2,-32724(gp)
8020e328:	10000326 	beq	r2,zero,8020e338 <alt_get_errno+0x24>
8020e32c:	d0a00b17 	ldw	r2,-32724(gp)
8020e330:	103ee83a 	callr	r2
8020e334:	00000106 	br	8020e33c <alt_get_errno+0x28>
8020e338:	d0a01904 	addi	r2,gp,-32668
}
8020e33c:	e037883a 	mov	sp,fp
8020e340:	dfc00117 	ldw	ra,4(sp)
8020e344:	df000017 	ldw	fp,0(sp)
8020e348:	dec00204 	addi	sp,sp,8
8020e34c:	f800283a 	ret

8020e350 <alt_msgdma_write_standard_descriptor>:
 */
static int alt_msgdma_write_standard_descriptor (
    alt_u32 *csr_base, 
    alt_u32 *descriptor_base,
    alt_msgdma_standard_descriptor *descriptor)
{
8020e350:	defffc04 	addi	sp,sp,-16
8020e354:	df000315 	stw	fp,12(sp)
8020e358:	df000304 	addi	fp,sp,12
8020e35c:	e13ffd15 	stw	r4,-12(fp)
8020e360:	e17ffe15 	stw	r5,-8(fp)
8020e364:	e1bfff15 	stw	r6,-4(fp)
    if (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(csr_base) & 
8020e368:	e0bffd17 	ldw	r2,-12(fp)
8020e36c:	10800037 	ldwio	r2,0(r2)
8020e370:	1080010c 	andi	r2,r2,4
8020e374:	10000226 	beq	r2,zero,8020e380 <alt_msgdma_write_standard_descriptor+0x30>
        ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK))
    {
      /*at least one descriptor buffer is full, returning so that this function 
        is non-blocking*/
        return -ENOSPC;
8020e378:	00bff904 	movi	r2,-28
8020e37c:	00001506 	br	8020e3d4 <alt_msgdma_write_standard_descriptor+0x84>
    }

    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS(descriptor_base, 
8020e380:	e0bfff17 	ldw	r2,-4(fp)
8020e384:	10800017 	ldw	r2,0(r2)
8020e388:	1007883a 	mov	r3,r2
8020e38c:	e0bffe17 	ldw	r2,-8(fp)
8020e390:	10c00035 	stwio	r3,0(r2)
        (alt_u32)descriptor->read_address);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS(descriptor_base, 
8020e394:	e0bffe17 	ldw	r2,-8(fp)
8020e398:	10800104 	addi	r2,r2,4
8020e39c:	e0ffff17 	ldw	r3,-4(fp)
8020e3a0:	18c00117 	ldw	r3,4(r3)
8020e3a4:	10c00035 	stwio	r3,0(r2)
    (    alt_u32)descriptor->write_address);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_LENGTH(descriptor_base, 
8020e3a8:	e0bffe17 	ldw	r2,-8(fp)
8020e3ac:	10800204 	addi	r2,r2,8
8020e3b0:	e0ffff17 	ldw	r3,-4(fp)
8020e3b4:	18c00217 	ldw	r3,8(r3)
8020e3b8:	10c00035 	stwio	r3,0(r2)
        descriptor->transfer_length);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_CONTROL_STANDARD(descriptor_base, 
8020e3bc:	e0bffe17 	ldw	r2,-8(fp)
8020e3c0:	10800304 	addi	r2,r2,12
8020e3c4:	e0ffff17 	ldw	r3,-4(fp)
8020e3c8:	18c00317 	ldw	r3,12(r3)
8020e3cc:	10c00035 	stwio	r3,0(r2)
        descriptor->control);
        return 0;
8020e3d0:	0005883a 	mov	r2,zero
}
8020e3d4:	e037883a 	mov	sp,fp
8020e3d8:	df000017 	ldw	fp,0(sp)
8020e3dc:	dec00104 	addi	sp,sp,4
8020e3e0:	f800283a 	ret

8020e3e4 <alt_msgdma_write_extended_descriptor>:
 */
static int alt_msgdma_write_extended_descriptor (
    alt_u32 *csr_base, 
    alt_u32 *descriptor_base,
    alt_msgdma_extended_descriptor *descriptor)
{
8020e3e4:	defffc04 	addi	sp,sp,-16
8020e3e8:	df000315 	stw	fp,12(sp)
8020e3ec:	df000304 	addi	fp,sp,12
8020e3f0:	e13ffd15 	stw	r4,-12(fp)
8020e3f4:	e17ffe15 	stw	r5,-8(fp)
8020e3f8:	e1bfff15 	stw	r6,-4(fp)
    if (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(csr_base) & 
8020e3fc:	e0bffd17 	ldw	r2,-12(fp)
8020e400:	10800037 	ldwio	r2,0(r2)
8020e404:	1080010c 	andi	r2,r2,4
8020e408:	10000226 	beq	r2,zero,8020e414 <alt_msgdma_write_extended_descriptor+0x30>
        ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK))
    {
      /*at least one descriptor buffer is full, returning so that this function 
    is non-blocking*/
        return -ENOSPC;
8020e40c:	00bff904 	movi	r2,-28
8020e410:	00003b06 	br	8020e500 <alt_msgdma_write_extended_descriptor+0x11c>
    }

    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS(
8020e414:	e0bfff17 	ldw	r2,-4(fp)
8020e418:	10800017 	ldw	r2,0(r2)
8020e41c:	1007883a 	mov	r3,r2
8020e420:	e0bffe17 	ldw	r2,-8(fp)
8020e424:	10c00035 	stwio	r3,0(r2)
        descriptor_base, 
        (alt_u32)descriptor->read_address_low);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS(
8020e428:	e0bffe17 	ldw	r2,-8(fp)
8020e42c:	10800104 	addi	r2,r2,4
8020e430:	e0ffff17 	ldw	r3,-4(fp)
8020e434:	18c00117 	ldw	r3,4(r3)
8020e438:	10c00035 	stwio	r3,0(r2)
        descriptor_base, 
        (alt_u32)descriptor->write_address_low);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_LENGTH(
8020e43c:	e0bffe17 	ldw	r2,-8(fp)
8020e440:	10800204 	addi	r2,r2,8
8020e444:	e0ffff17 	ldw	r3,-4(fp)
8020e448:	18c00217 	ldw	r3,8(r3)
8020e44c:	10c00035 	stwio	r3,0(r2)
        descriptor_base, 
        descriptor->transfer_length);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_SEQUENCE_NUMBER(
8020e450:	e0bffe17 	ldw	r2,-8(fp)
8020e454:	10800304 	addi	r2,r2,12
8020e458:	e0ffff17 	ldw	r3,-4(fp)
8020e45c:	18c0030b 	ldhu	r3,12(r3)
8020e460:	18ffffcc 	andi	r3,r3,65535
8020e464:	10c0002d 	sthio	r3,0(r2)
        descriptor_base, 
        descriptor->sequence_number);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_BURST(
8020e468:	e0bffe17 	ldw	r2,-8(fp)
8020e46c:	10800384 	addi	r2,r2,14
8020e470:	e0ffff17 	ldw	r3,-4(fp)
8020e474:	18c00383 	ldbu	r3,14(r3)
8020e478:	18c03fcc 	andi	r3,r3,255
8020e47c:	10c00025 	stbio	r3,0(r2)
        descriptor_base, 
        descriptor->read_burst_count);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_BURST(
8020e480:	e0bffe17 	ldw	r2,-8(fp)
8020e484:	108003c4 	addi	r2,r2,15
8020e488:	e0ffff17 	ldw	r3,-4(fp)
8020e48c:	18c003c3 	ldbu	r3,15(r3)
8020e490:	18c03fcc 	andi	r3,r3,255
8020e494:	10c00025 	stbio	r3,0(r2)
        descriptor_base, 
        descriptor->write_burst_count);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_STRIDE(
8020e498:	e0bffe17 	ldw	r2,-8(fp)
8020e49c:	10800404 	addi	r2,r2,16
8020e4a0:	e0ffff17 	ldw	r3,-4(fp)
8020e4a4:	18c0040b 	ldhu	r3,16(r3)
8020e4a8:	18ffffcc 	andi	r3,r3,65535
8020e4ac:	10c0002d 	sthio	r3,0(r2)
        descriptor_base, 
        descriptor->read_stride);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_STRIDE(
8020e4b0:	e0bffe17 	ldw	r2,-8(fp)
8020e4b4:	10800484 	addi	r2,r2,18
8020e4b8:	e0ffff17 	ldw	r3,-4(fp)
8020e4bc:	18c0048b 	ldhu	r3,18(r3)
8020e4c0:	18ffffcc 	andi	r3,r3,65535
8020e4c4:	10c0002d 	sthio	r3,0(r2)
        descriptor_base, 
        descriptor->write_stride);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS_HIGH(descriptor_base, 0);
8020e4c8:	e0bffe17 	ldw	r2,-8(fp)
8020e4cc:	10800504 	addi	r2,r2,20
8020e4d0:	0007883a 	mov	r3,zero
8020e4d4:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS_HIGH(descriptor_base, 0);
8020e4d8:	e0bffe17 	ldw	r2,-8(fp)
8020e4dc:	10800604 	addi	r2,r2,24
8020e4e0:	0007883a 	mov	r3,zero
8020e4e4:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_CONTROL_ENHANCED(
8020e4e8:	e0bffe17 	ldw	r2,-8(fp)
8020e4ec:	10800704 	addi	r2,r2,28
8020e4f0:	e0ffff17 	ldw	r3,-4(fp)
8020e4f4:	18c00717 	ldw	r3,28(r3)
8020e4f8:	10c00035 	stwio	r3,0(r2)
        descriptor_base, 
        descriptor->control);
    return 0;
8020e4fc:	0005883a 	mov	r2,zero
}
8020e500:	e037883a 	mov	sp,fp
8020e504:	df000017 	ldw	fp,0(sp)
8020e508:	dec00104 	addi	sp,sp,4
8020e50c:	f800283a 	ret

8020e510 <alt_msgdma_irq>:
 * alt_msgdma_irq()
 *
 * Interrupt handler for the Modular Scatter-Gather DMA controller.
 */
static void alt_msgdma_irq(void *context)
{
8020e510:	defff804 	addi	sp,sp,-32
8020e514:	dfc00715 	stw	ra,28(sp)
8020e518:	df000615 	stw	fp,24(sp)
8020e51c:	df000604 	addi	fp,sp,24
8020e520:	e13fff15 	stw	r4,-4(fp)
    alt_msgdma_dev *dev = (alt_msgdma_dev *) context;
8020e524:	e0bfff17 	ldw	r2,-4(fp)
8020e528:	e0bffa15 	stw	r2,-24(fp)
    alt_irq_context cpu_sr;
    alt_u32 temporary_control;

    
    /* disable global interrupt*/
    if (dev->prefetcher_enable)
8020e52c:	e0bffa17 	ldw	r2,-24(fp)
8020e530:	10801783 	ldbu	r2,94(r2)
8020e534:	10803fcc 	andi	r2,r2,255
8020e538:	10001126 	beq	r2,zero,8020e580 <alt_msgdma_irq+0x70>
    {
        temporary_control = 
                IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
8020e53c:	e0bffa17 	ldw	r2,-24(fp)
8020e540:	10800617 	ldw	r2,24(r2)
8020e544:	10800037 	ldwio	r2,0(r2)

    
    /* disable global interrupt*/
    if (dev->prefetcher_enable)
    {
        temporary_control = 
8020e548:	1007883a 	mov	r3,r2
8020e54c:	00bffdc4 	movi	r2,-9
8020e550:	1884703a 	and	r2,r3,r2
8020e554:	e0bffb15 	stw	r2,-20(fp)
                IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
                & ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_CLR_MASK;
        
        IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
8020e558:	e0bffa17 	ldw	r2,-24(fp)
8020e55c:	10800617 	ldw	r2,24(r2)
8020e560:	e0fffb17 	ldw	r3,-20(fp)
8020e564:	10c00035 	stwio	r3,0(r2)
                temporary_control);
        
        /* clear the IRQ status- W1C */
        IOWR_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base,
8020e568:	e0bffa17 	ldw	r2,-24(fp)
8020e56c:	10800617 	ldw	r2,24(r2)
8020e570:	10800404 	addi	r2,r2,16
8020e574:	00c00044 	movi	r3,1
8020e578:	10c00035 	stwio	r3,0(r2)
8020e57c:	00001106 	br	8020e5c4 <alt_msgdma_irq+0xb4>
                ALT_MSGDMA_PREFETCHER_STATUS_IRQ_SET_MASK);
    }
    else
    {
        temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base)
8020e580:	e0bffa17 	ldw	r2,-24(fp)
8020e584:	10800317 	ldw	r2,12(r2)
8020e588:	10800104 	addi	r2,r2,4
8020e58c:	10800037 	ldwio	r2,0(r2)
8020e590:	1007883a 	mov	r3,r2
8020e594:	00bffbc4 	movi	r2,-17
8020e598:	1884703a 	and	r2,r3,r2
8020e59c:	e0bffb15 	stw	r2,-20(fp)
                & (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
        
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
8020e5a0:	e0bffa17 	ldw	r2,-24(fp)
8020e5a4:	10800317 	ldw	r2,12(r2)
8020e5a8:	10800104 	addi	r2,r2,4
8020e5ac:	e0fffb17 	ldw	r3,-20(fp)
8020e5b0:	10c00035 	stwio	r3,0(r2)
        /* clear the IRQ status */
        IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base,
8020e5b4:	e0bffa17 	ldw	r2,-24(fp)
8020e5b8:	10800317 	ldw	r2,12(r2)
8020e5bc:	00c08004 	movi	r3,512
8020e5c0:	10c00035 	stwio	r3,0(r2)
    * Other interrupts are explicitly disabled if callbacks
    * are registered because there is no guarantee that they are 
    * pre-emption-safe. This allows the driver to support 
    * interrupt pre-emption.
    */
    if(dev->callback) 
8020e5c4:	e0bffa17 	ldw	r2,-24(fp)
8020e5c8:	10800b17 	ldw	r2,44(r2)
8020e5cc:	10001226 	beq	r2,zero,8020e618 <alt_msgdma_irq+0x108>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8020e5d0:	0005303a 	rdctl	r2,status
8020e5d4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8020e5d8:	e0fffd17 	ldw	r3,-12(fp)
8020e5dc:	00bfff84 	movi	r2,-2
8020e5e0:	1884703a 	and	r2,r3,r2
8020e5e4:	1001703a 	wrctl	status,r2
  
  return context;
8020e5e8:	e0bffd17 	ldw	r2,-12(fp)
    {
        cpu_sr = alt_irq_disable_all();
8020e5ec:	e0bffc15 	stw	r2,-16(fp)
        dev->callback (dev->callback_context);
8020e5f0:	e0bffa17 	ldw	r2,-24(fp)
8020e5f4:	10800b17 	ldw	r2,44(r2)
8020e5f8:	e0fffa17 	ldw	r3,-24(fp)
8020e5fc:	18c00c17 	ldw	r3,48(r3)
8020e600:	1809883a 	mov	r4,r3
8020e604:	103ee83a 	callr	r2
8020e608:	e0bffc17 	ldw	r2,-16(fp)
8020e60c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8020e610:	e0bffe17 	ldw	r2,-8(fp)
8020e614:	1001703a 	wrctl	status,r2
        alt_irq_enable_all(cpu_sr);
    }

    /* enable global interrupt */
    if (dev->prefetcher_enable)
8020e618:	e0bffa17 	ldw	r2,-24(fp)
8020e61c:	10801783 	ldbu	r2,94(r2)
8020e620:	10803fcc 	andi	r2,r2,255
8020e624:	10000a26 	beq	r2,zero,8020e650 <alt_msgdma_irq+0x140>
    {
        temporary_control = 
                IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
8020e628:	e0bffa17 	ldw	r2,-24(fp)
8020e62c:	10800617 	ldw	r2,24(r2)
8020e630:	10800037 	ldwio	r2,0(r2)
                | ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
8020e634:	10800214 	ori	r2,r2,8
    }

    /* enable global interrupt */
    if (dev->prefetcher_enable)
    {
        temporary_control = 
8020e638:	e0bffb15 	stw	r2,-20(fp)
                IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
                | ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
        
        IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
8020e63c:	e0bffa17 	ldw	r2,-24(fp)
8020e640:	10800617 	ldw	r2,24(r2)
8020e644:	e0fffb17 	ldw	r3,-20(fp)
8020e648:	10c00035 	stwio	r3,0(r2)
                | (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
        
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
    }

    return;
8020e64c:	00000c06 	br	8020e680 <alt_msgdma_irq+0x170>
        IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
                temporary_control);
    }
    else
    {
        temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) 
8020e650:	e0bffa17 	ldw	r2,-24(fp)
8020e654:	10800317 	ldw	r2,12(r2)
8020e658:	10800104 	addi	r2,r2,4
8020e65c:	10800037 	ldwio	r2,0(r2)
                | (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
8020e660:	10800414 	ori	r2,r2,16
        IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
                temporary_control);
    }
    else
    {
        temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) 
8020e664:	e0bffb15 	stw	r2,-20(fp)
                | (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
        
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
8020e668:	e0bffa17 	ldw	r2,-24(fp)
8020e66c:	10800317 	ldw	r2,12(r2)
8020e670:	10800104 	addi	r2,r2,4
8020e674:	e0fffb17 	ldw	r3,-20(fp)
8020e678:	10c00035 	stwio	r3,0(r2)
    }

    return;
8020e67c:	0001883a 	nop
}
8020e680:	e037883a 	mov	sp,fp
8020e684:	dfc00117 	ldw	ra,4(sp)
8020e688:	df000017 	ldw	fp,0(sp)
8020e68c:	dec00204 	addi	sp,sp,8
8020e690:	f800283a 	ret

8020e694 <alt_msgdma_construct_standard_descriptor>:
    alt_msgdma_standard_descriptor *descriptor,
    alt_u32 *read_address, 
    alt_u32 *write_address, 
    alt_u32 length, 
    alt_u32 control)
{
8020e694:	defffb04 	addi	sp,sp,-20
8020e698:	df000415 	stw	fp,16(sp)
8020e69c:	df000404 	addi	fp,sp,16
8020e6a0:	e13ffc15 	stw	r4,-16(fp)
8020e6a4:	e17ffd15 	stw	r5,-12(fp)
8020e6a8:	e1bffe15 	stw	r6,-8(fp)
8020e6ac:	e1ffff15 	stw	r7,-4(fp)
    if(dev->max_byte < length ||
8020e6b0:	e0bffc17 	ldw	r2,-16(fp)
8020e6b4:	10c01217 	ldw	r3,72(r2)
8020e6b8:	e0800117 	ldw	r2,4(fp)
8020e6bc:	18800436 	bltu	r3,r2,8020e6d0 <alt_msgdma_construct_standard_descriptor+0x3c>
       dev->enhanced_features != 0
8020e6c0:	e0bffc17 	ldw	r2,-16(fp)
8020e6c4:	10801703 	ldbu	r2,92(r2)
    alt_u32 *read_address, 
    alt_u32 *write_address, 
    alt_u32 length, 
    alt_u32 control)
{
    if(dev->max_byte < length ||
8020e6c8:	10803fcc 	andi	r2,r2,255
8020e6cc:	10000226 	beq	r2,zero,8020e6d8 <alt_msgdma_construct_standard_descriptor+0x44>
       dev->enhanced_features != 0
      )
    {
        return -EINVAL;
8020e6d0:	00bffa84 	movi	r2,-22
8020e6d4:	00000e06 	br	8020e710 <alt_msgdma_construct_standard_descriptor+0x7c>
    }
    descriptor->read_address = read_address;
8020e6d8:	e0bffd17 	ldw	r2,-12(fp)
8020e6dc:	e0fffe17 	ldw	r3,-8(fp)
8020e6e0:	10c00015 	stw	r3,0(r2)
    descriptor->write_address = write_address;
8020e6e4:	e0bffd17 	ldw	r2,-12(fp)
8020e6e8:	e0ffff17 	ldw	r3,-4(fp)
8020e6ec:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
8020e6f0:	e0bffd17 	ldw	r2,-12(fp)
8020e6f4:	e0c00117 	ldw	r3,4(fp)
8020e6f8:	10c00215 	stw	r3,8(r2)
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
8020e6fc:	e0800217 	ldw	r2,8(fp)
8020e700:	10e00034 	orhi	r3,r2,32768
8020e704:	e0bffd17 	ldw	r2,-12(fp)
8020e708:	10c00315 	stw	r3,12(r2)
    
    return 0;
8020e70c:	0005883a 	mov	r2,zero
}
8020e710:	e037883a 	mov	sp,fp
8020e714:	df000017 	ldw	fp,0(sp)
8020e718:	dec00104 	addi	sp,sp,4
8020e71c:	f800283a 	ret

8020e720 <alt_msgdma_construct_extended_descriptor>:
    alt_u16 sequence_number, 
    alt_u8 read_burst_count, 
    alt_u8 write_burst_count,
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
8020e720:	defff604 	addi	sp,sp,-40
8020e724:	df000915 	stw	fp,36(sp)
8020e728:	df000904 	addi	fp,sp,36
8020e72c:	e13ff715 	stw	r4,-36(fp)
8020e730:	e17ff815 	stw	r5,-32(fp)
8020e734:	e1bff915 	stw	r6,-28(fp)
8020e738:	e1fffa15 	stw	r7,-24(fp)
8020e73c:	e1800317 	ldw	r6,12(fp)
8020e740:	e1400417 	ldw	r5,16(fp)
8020e744:	e1000517 	ldw	r4,20(fp)
8020e748:	e0c00617 	ldw	r3,24(fp)
8020e74c:	e0800717 	ldw	r2,28(fp)
8020e750:	e1bffb0d 	sth	r6,-20(fp)
8020e754:	e17ffc05 	stb	r5,-16(fp)
8020e758:	e13ffd05 	stb	r4,-12(fp)
8020e75c:	e0fffe0d 	sth	r3,-8(fp)
8020e760:	e0bfff0d 	sth	r2,-4(fp)
    if(dev->max_byte < length ||
8020e764:	e0bff717 	ldw	r2,-36(fp)
8020e768:	10c01217 	ldw	r3,72(r2)
8020e76c:	e0800117 	ldw	r2,4(fp)
8020e770:	18801936 	bltu	r3,r2,8020e7d8 <alt_msgdma_construct_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
8020e774:	e13ff717 	ldw	r4,-36(fp)
8020e778:	20801317 	ldw	r2,76(r4)
8020e77c:	20c01417 	ldw	r3,80(r4)
8020e780:	e13ffe0b 	ldhu	r4,-8(fp)
8020e784:	213fffcc 	andi	r4,r4,65535
8020e788:	2015883a 	mov	r10,r4
8020e78c:	0017883a 	mov	r11,zero
    alt_u8 read_burst_count, 
    alt_u8 write_burst_count,
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
    if(dev->max_byte < length ||
8020e790:	1ac01136 	bltu	r3,r11,8020e7d8 <alt_msgdma_construct_extended_descriptor+0xb8>
8020e794:	58c0011e 	bne	r11,r3,8020e79c <alt_msgdma_construct_extended_descriptor+0x7c>
8020e798:	12800f36 	bltu	r2,r10,8020e7d8 <alt_msgdma_construct_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
8020e79c:	e13ff717 	ldw	r4,-36(fp)
8020e7a0:	20801317 	ldw	r2,76(r4)
8020e7a4:	20c01417 	ldw	r3,80(r4)
8020e7a8:	e13fff0b 	ldhu	r4,-4(fp)
8020e7ac:	213fffcc 	andi	r4,r4,65535
8020e7b0:	2011883a 	mov	r8,r4
8020e7b4:	0013883a 	mov	r9,zero
    alt_u8 write_burst_count,
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
    if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
8020e7b8:	1a400736 	bltu	r3,r9,8020e7d8 <alt_msgdma_construct_extended_descriptor+0xb8>
8020e7bc:	48c0011e 	bne	r9,r3,8020e7c4 <alt_msgdma_construct_extended_descriptor+0xa4>
8020e7c0:	12000536 	bltu	r2,r8,8020e7d8 <alt_msgdma_construct_extended_descriptor+0xb8>
       dev->max_stride < write_stride ||
       dev->enhanced_features != 1 
8020e7c4:	e0bff717 	ldw	r2,-36(fp)
8020e7c8:	10801703 	ldbu	r2,92(r2)
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
    if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
8020e7cc:	10803fcc 	andi	r2,r2,255
8020e7d0:	10800060 	cmpeqi	r2,r2,1
8020e7d4:	1000021e 	bne	r2,zero,8020e7e0 <alt_msgdma_construct_extended_descriptor+0xc0>
       dev->enhanced_features != 1 
      )
    {
        return -EINVAL;
8020e7d8:	00bffa84 	movi	r2,-22
8020e7dc:	00002106 	br	8020e864 <alt_msgdma_construct_extended_descriptor+0x144>
    }
    
    descriptor->read_address_low = read_address;
8020e7e0:	e0bff817 	ldw	r2,-32(fp)
8020e7e4:	e0fff917 	ldw	r3,-28(fp)
8020e7e8:	10c00015 	stw	r3,0(r2)
    descriptor->write_address_low = write_address;
8020e7ec:	e0bff817 	ldw	r2,-32(fp)
8020e7f0:	e0fffa17 	ldw	r3,-24(fp)
8020e7f4:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
8020e7f8:	e0bff817 	ldw	r2,-32(fp)
8020e7fc:	e0c00117 	ldw	r3,4(fp)
8020e800:	10c00215 	stw	r3,8(r2)
    descriptor->sequence_number = sequence_number;
8020e804:	e0bff817 	ldw	r2,-32(fp)
8020e808:	e0fffb0b 	ldhu	r3,-20(fp)
8020e80c:	10c0030d 	sth	r3,12(r2)
    descriptor->read_burst_count = read_burst_count;
8020e810:	e0bff817 	ldw	r2,-32(fp)
8020e814:	e0fffc03 	ldbu	r3,-16(fp)
8020e818:	10c00385 	stb	r3,14(r2)
    descriptor->write_burst_count = write_burst_count;
8020e81c:	e0bff817 	ldw	r2,-32(fp)
8020e820:	e0fffd03 	ldbu	r3,-12(fp)
8020e824:	10c003c5 	stb	r3,15(r2)
    descriptor->read_stride = read_stride;
8020e828:	e0bff817 	ldw	r2,-32(fp)
8020e82c:	e0fffe0b 	ldhu	r3,-8(fp)
8020e830:	10c0040d 	sth	r3,16(r2)
    descriptor->write_stride = write_stride;
8020e834:	e0bff817 	ldw	r2,-32(fp)
8020e838:	e0ffff0b 	ldhu	r3,-4(fp)
8020e83c:	10c0048d 	sth	r3,18(r2)
    descriptor->read_address_high = NULL;
8020e840:	e0bff817 	ldw	r2,-32(fp)
8020e844:	10000515 	stw	zero,20(r2)
    descriptor->write_address_high = NULL;
8020e848:	e0bff817 	ldw	r2,-32(fp)
8020e84c:	10000615 	stw	zero,24(r2)
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
8020e850:	e0800217 	ldw	r2,8(fp)
8020e854:	10e00034 	orhi	r3,r2,32768
8020e858:	e0bff817 	ldw	r2,-32(fp)
8020e85c:	10c00715 	stw	r3,28(r2)

  return 0 ;
8020e860:	0005883a 	mov	r2,zero

}
8020e864:	e037883a 	mov	sp,fp
8020e868:	df000017 	ldw	fp,0(sp)
8020e86c:	dec00104 	addi	sp,sp,4
8020e870:	f800283a 	ret

8020e874 <alt_msgdma_descriptor_async_transfer>:
 */
static int alt_msgdma_descriptor_async_transfer (
    alt_msgdma_dev *dev, 
    alt_msgdma_standard_descriptor *standard_desc, 
    alt_msgdma_extended_descriptor *extended_desc)
{
8020e874:	defff004 	addi	sp,sp,-64
8020e878:	dfc00f15 	stw	ra,60(sp)
8020e87c:	df000e15 	stw	fp,56(sp)
8020e880:	df000e04 	addi	fp,sp,56
8020e884:	e13ffd15 	stw	r4,-12(fp)
8020e888:	e17ffe15 	stw	r5,-8(fp)
8020e88c:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 control = 0;
8020e890:	e03ff315 	stw	zero,-52(fp)
    alt_irq_context context = 0;
8020e894:	e03ff415 	stw	zero,-48(fp)
    alt_u16 counter = 0;
8020e898:	e03ff20d 	sth	zero,-56(fp)
    alt_u32 fifo_read_fill_level = (
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
8020e89c:	e0bffd17 	ldw	r2,-12(fp)
8020e8a0:	10800317 	ldw	r2,12(r2)
8020e8a4:	10800204 	addi	r2,r2,8
8020e8a8:	10800037 	ldwio	r2,0(r2)
    alt_msgdma_extended_descriptor *extended_desc)
{
    alt_u32 control = 0;
    alt_irq_context context = 0;
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
8020e8ac:	10bfffcc 	andi	r2,r2,65535
8020e8b0:	e0bff515 	stw	r2,-44(fp)
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
        ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
        ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
8020e8b4:	e0bffd17 	ldw	r2,-12(fp)
8020e8b8:	10800317 	ldw	r2,12(r2)
8020e8bc:	10800204 	addi	r2,r2,8
8020e8c0:	10800037 	ldwio	r2,0(r2)
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
        ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
        ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
8020e8c4:	1004d43a 	srli	r2,r2,16
8020e8c8:	e0bff615 	stw	r2,-40(fp)
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
        ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
        ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;

    /* Return with error immediately if one of read/write buffer is full */
    if((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
8020e8cc:	e0bffd17 	ldw	r2,-12(fp)
8020e8d0:	10800917 	ldw	r2,36(r2)
8020e8d4:	e0fff617 	ldw	r3,-40(fp)
8020e8d8:	1880042e 	bgeu	r3,r2,8020e8ec <alt_msgdma_descriptor_async_transfer+0x78>
        (dev->descriptor_fifo_depth <= fifo_read_fill_level))
8020e8dc:	e0bffd17 	ldw	r2,-12(fp)
8020e8e0:	10800917 	ldw	r2,36(r2)
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
        ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
        ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;

    /* Return with error immediately if one of read/write buffer is full */
    if((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
8020e8e4:	e0fff517 	ldw	r3,-44(fp)
8020e8e8:	18800236 	bltu	r3,r2,8020e8f4 <alt_msgdma_descriptor_async_transfer+0x80>
        (dev->descriptor_fifo_depth <= fifo_read_fill_level))
    {
        /*at least one write or read FIFO descriptor buffer is full,
        returning so that this function is non-blocking*/
        return -ENOSPC;
8020e8ec:	00bff904 	movi	r2,-28
8020e8f0:	00008f06 	br	8020eb30 <alt_msgdma_descriptor_async_transfer+0x2bc>
    ALT_SEM_PEND (dev->regs_lock, 0);
    
    /* Stop the msgdma dispatcher from issuing more descriptors to the
    read or write masters  */
    /* stop issuing more descriptors */
    control = ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
8020e8f4:	00800804 	movi	r2,32
8020e8f8:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8020e8fc:	0005303a 	rdctl	r2,status
8020e900:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8020e904:	e0fff717 	ldw	r3,-36(fp)
8020e908:	00bfff84 	movi	r2,-2
8020e90c:	1884703a 	and	r2,r3,r2
8020e910:	1001703a 	wrctl	status,r2
  
  return context;
8020e914:	e0bff717 	ldw	r2,-36(fp)
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();
8020e918:	e0bff415 	stw	r2,-48(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
8020e91c:	e0bffd17 	ldw	r2,-12(fp)
8020e920:	10800317 	ldw	r2,12(r2)
8020e924:	10800104 	addi	r2,r2,4
8020e928:	e0fff317 	ldw	r3,-52(fp)
8020e92c:	10c00035 	stwio	r3,0(r2)
    /*
    * Clear any (previous) status register information
    * that might occlude our error checking later.
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
8020e930:	e0bffd17 	ldw	r2,-12(fp)
8020e934:	10800317 	ldw	r2,12(r2)
8020e938:	e0fffd17 	ldw	r3,-12(fp)
8020e93c:	18c00317 	ldw	r3,12(r3)
8020e940:	18c00037 	ldwio	r3,0(r3)
8020e944:	10c00035 	stwio	r3,0(r2)
8020e948:	e0bff417 	ldw	r2,-48(fp)
8020e94c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8020e950:	e0bffc17 	ldw	r2,-16(fp)
8020e954:	1001703a 	wrctl	status,r2
        dev->csr_base, 
        IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
    alt_irq_enable_all(context);

    if (NULL != standard_desc && NULL == extended_desc)
8020e958:	e0bffe17 	ldw	r2,-8(fp)
8020e95c:	10001a26 	beq	r2,zero,8020e9c8 <alt_msgdma_descriptor_async_transfer+0x154>
8020e960:	e0bfff17 	ldw	r2,-4(fp)
8020e964:	1000181e 	bne	r2,zero,8020e9c8 <alt_msgdma_descriptor_async_transfer+0x154>
    {
        /*writing descriptor structure to the dispatcher, wait until descriptor 
      write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
8020e968:	00000d06 	br	8020e9a0 <alt_msgdma_descriptor_async_transfer+0x12c>
        dev->csr_base, dev->descriptor_base, standard_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
8020e96c:	01000044 	movi	r4,1
8020e970:	02103e00 	call	802103e0 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
8020e974:	e0bff20b 	ldhu	r2,-56(fp)
8020e978:	1084e230 	cmpltui	r2,r2,5000
8020e97c:	1000051e 	bne	r2,zero,8020e994 <alt_msgdma_descriptor_async_transfer+0x120>
            {
                alt_printf("time out after 5 msec while waiting" 
8020e980:	01200874 	movhi	r4,32801
8020e984:	21072d04 	addi	r4,r4,7348
8020e988:	0210d940 	call	80210d94 <alt_printf>
                * registers semaphore so that other threads can access the 
                * registers.
                */
                ALT_SEM_POST (dev->regs_lock);
                
                return -ETIME;
8020e98c:	00bff084 	movi	r2,-62
8020e990:	00006706 	br	8020eb30 <alt_msgdma_descriptor_async_transfer+0x2bc>
            }
            counter++; 
8020e994:	e0bff20b 	ldhu	r2,-56(fp)
8020e998:	10800044 	addi	r2,r2,1
8020e99c:	e0bff20d 	sth	r2,-56(fp)

    if (NULL != standard_desc && NULL == extended_desc)
    {
        /*writing descriptor structure to the dispatcher, wait until descriptor 
      write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
8020e9a0:	e0bffd17 	ldw	r2,-12(fp)
8020e9a4:	10c00317 	ldw	r3,12(r2)
8020e9a8:	e0bffd17 	ldw	r2,-12(fp)
8020e9ac:	10800417 	ldw	r2,16(r2)
8020e9b0:	e1bffe17 	ldw	r6,-8(fp)
8020e9b4:	100b883a 	mov	r5,r2
8020e9b8:	1809883a 	mov	r4,r3
8020e9bc:	020e3500 	call	8020e350 <alt_msgdma_write_standard_descriptor>
8020e9c0:	103fea1e 	bne	r2,zero,8020e96c <__reset+0xfa1ee96c>
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
        dev->csr_base, 
        IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
    alt_irq_enable_all(context);

    if (NULL != standard_desc && NULL == extended_desc)
8020e9c4:	00001f06 	br	8020ea44 <alt_msgdma_descriptor_async_transfer+0x1d0>
                return -ETIME;
            }
            counter++; 
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
8020e9c8:	e0bffe17 	ldw	r2,-8(fp)
8020e9cc:	10001b1e 	bne	r2,zero,8020ea3c <alt_msgdma_descriptor_async_transfer+0x1c8>
8020e9d0:	e0bfff17 	ldw	r2,-4(fp)
8020e9d4:	10001926 	beq	r2,zero,8020ea3c <alt_msgdma_descriptor_async_transfer+0x1c8>
    {
        counter = 0; /* reset counter */
8020e9d8:	e03ff20d 	sth	zero,-56(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
      write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
8020e9dc:	00000d06 	br	8020ea14 <alt_msgdma_descriptor_async_transfer+0x1a0>
        dev->csr_base, 
        dev->descriptor_base, 
        extended_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
8020e9e0:	01000044 	movi	r4,1
8020e9e4:	02103e00 	call	802103e0 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
8020e9e8:	e0bff20b 	ldhu	r2,-56(fp)
8020e9ec:	1084e230 	cmpltui	r2,r2,5000
8020e9f0:	1000051e 	bne	r2,zero,8020ea08 <alt_msgdma_descriptor_async_transfer+0x194>
            {
                alt_printf("time out after 5 msec while waiting free FIFO buffer" 
8020e9f4:	01200874 	movhi	r4,32801
8020e9f8:	21074304 	addi	r4,r4,7436
8020e9fc:	0210d940 	call	80210d94 <alt_printf>
                * registers semaphore so that other threads can access the 
                * registers.
                */
                ALT_SEM_POST (dev->regs_lock);
                
                return -ETIME;
8020ea00:	00bff084 	movi	r2,-62
8020ea04:	00004a06 	br	8020eb30 <alt_msgdma_descriptor_async_transfer+0x2bc>
            }
            counter++; 
8020ea08:	e0bff20b 	ldhu	r2,-56(fp)
8020ea0c:	10800044 	addi	r2,r2,1
8020ea10:	e0bff20d 	sth	r2,-56(fp)
    else if (NULL == standard_desc && NULL != extended_desc)
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
      write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
8020ea14:	e0bffd17 	ldw	r2,-12(fp)
8020ea18:	10c00317 	ldw	r3,12(r2)
8020ea1c:	e0bffd17 	ldw	r2,-12(fp)
8020ea20:	10800417 	ldw	r2,16(r2)
8020ea24:	e1bfff17 	ldw	r6,-4(fp)
8020ea28:	100b883a 	mov	r5,r2
8020ea2c:	1809883a 	mov	r4,r3
8020ea30:	020e3e40 	call	8020e3e4 <alt_msgdma_write_extended_descriptor>
8020ea34:	103fea1e 	bne	r2,zero,8020e9e0 <__reset+0xfa1ee9e0>
                return -ETIME;
            }
            counter++; 
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
8020ea38:	00000206 	br	8020ea44 <alt_msgdma_descriptor_async_transfer+0x1d0>
        * semaphore so that other threads can access the registers.
        */
        ALT_SEM_POST (dev->regs_lock);
        
        /* operation not permitted due to descriptor type conflict */
        return -EPERM; 
8020ea3c:	00bfffc4 	movi	r2,-1
8020ea40:	00003b06 	br	8020eb30 <alt_msgdma_descriptor_async_transfer+0x2bc>
    * If a callback routine has been previously registered which will be
    * called from the msgdma ISR. Set up controller to:
    *  - Run
    *  - Stop on an error with any particular descriptor
    */
    if(dev->callback)
8020ea44:	e0bffd17 	ldw	r2,-12(fp)
8020ea48:	10800b17 	ldw	r2,44(r2)
8020ea4c:	10001c26 	beq	r2,zero,8020eac0 <alt_msgdma_descriptor_async_transfer+0x24c>
    {

        control |= (dev->control |
8020ea50:	e0bffd17 	ldw	r2,-12(fp)
8020ea54:	10c00d17 	ldw	r3,52(r2)
8020ea58:	e0bff317 	ldw	r2,-52(fp)
8020ea5c:	1884b03a 	or	r2,r3,r2
8020ea60:	10800514 	ori	r2,r2,20
8020ea64:	e0bff315 	stw	r2,-52(fp)
                    ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK |
                    ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK );
        control &=  (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
8020ea68:	e0fff317 	ldw	r3,-52(fp)
8020ea6c:	00bff7c4 	movi	r2,-33
8020ea70:	1884703a 	and	r2,r3,r2
8020ea74:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8020ea78:	0005303a 	rdctl	r2,status
8020ea7c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8020ea80:	e0fffa17 	ldw	r3,-24(fp)
8020ea84:	00bfff84 	movi	r2,-2
8020ea88:	1884703a 	and	r2,r3,r2
8020ea8c:	1001703a 	wrctl	status,r2
  
  return context;
8020ea90:	e0bffa17 	ldw	r2,-24(fp)
    /* making sure the read-modify-write below can't be pre-empted */
        context = alt_irq_disable_all(); 
8020ea94:	e0bff415 	stw	r2,-48(fp)
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
8020ea98:	e0bffd17 	ldw	r2,-12(fp)
8020ea9c:	10800317 	ldw	r2,12(r2)
8020eaa0:	10800104 	addi	r2,r2,4
8020eaa4:	e0fff317 	ldw	r3,-52(fp)
8020eaa8:	10c00035 	stwio	r3,0(r2)
8020eaac:	e0bff417 	ldw	r2,-48(fp)
8020eab0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8020eab4:	e0bff817 	ldw	r2,-32(fp)
8020eab8:	1001703a 	wrctl	status,r2
8020eabc:	00001b06 	br	8020eb2c <alt_msgdma_descriptor_async_transfer+0x2b8>
    *   - Stop on an error with any particular descriptor
    *   - Disable interrupt generation
    */
    else
    {
        control |= (dev->control |
8020eac0:	e0bffd17 	ldw	r2,-12(fp)
8020eac4:	10c00d17 	ldw	r3,52(r2)
8020eac8:	e0bff317 	ldw	r2,-52(fp)
8020eacc:	1884b03a 	or	r2,r3,r2
8020ead0:	10800114 	ori	r2,r2,4
8020ead4:	e0bff315 	stw	r2,-52(fp)
                    ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK );
        control &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) &
8020ead8:	e0fff317 	ldw	r3,-52(fp)
8020eadc:	00bff3c4 	movi	r2,-49
8020eae0:	1884703a 	and	r2,r3,r2
8020eae4:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8020eae8:	0005303a 	rdctl	r2,status
8020eaec:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8020eaf0:	e0fffb17 	ldw	r3,-20(fp)
8020eaf4:	00bfff84 	movi	r2,-2
8020eaf8:	1884703a 	and	r2,r3,r2
8020eafc:	1001703a 	wrctl	status,r2
  
  return context;
8020eb00:	e0bffb17 	ldw	r2,-20(fp)
                   (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
        /* making sure the read-modify-write below can't be pre-empted */
        context = alt_irq_disable_all();
8020eb04:	e0bff415 	stw	r2,-48(fp)
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
8020eb08:	e0bffd17 	ldw	r2,-12(fp)
8020eb0c:	10800317 	ldw	r2,12(r2)
8020eb10:	10800104 	addi	r2,r2,4
8020eb14:	e0fff317 	ldw	r3,-52(fp)
8020eb18:	10c00035 	stwio	r3,0(r2)
8020eb1c:	e0bff417 	ldw	r2,-48(fp)
8020eb20:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8020eb24:	e0bff917 	ldw	r2,-28(fp)
8020eb28:	1001703a 	wrctl	status,r2
     * Now that access to the registers is complete, release the registers
     * semaphore so that other threads can access the registers.
     */
    ALT_SEM_POST (dev->regs_lock);
    
    return 0;
8020eb2c:	0005883a 	mov	r2,zero
}
8020eb30:	e037883a 	mov	sp,fp
8020eb34:	dfc00117 	ldw	ra,4(sp)
8020eb38:	df000017 	ldw	fp,0(sp)
8020eb3c:	dec00204 	addi	sp,sp,8
8020eb40:	f800283a 	ret

8020eb44 <alt_msgdma_descriptor_sync_transfer>:
 */
static int alt_msgdma_descriptor_sync_transfer (
    alt_msgdma_dev *dev, 
    alt_msgdma_standard_descriptor *standard_desc, 
    alt_msgdma_extended_descriptor *extended_desc)
{
8020eb44:	defff004 	addi	sp,sp,-64
8020eb48:	dfc00f15 	stw	ra,60(sp)
8020eb4c:	df000e15 	stw	fp,56(sp)
8020eb50:	df000e04 	addi	fp,sp,56
8020eb54:	e13ffd15 	stw	r4,-12(fp)
8020eb58:	e17ffe15 	stw	r5,-8(fp)
8020eb5c:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 control=0;
8020eb60:	e03ff615 	stw	zero,-40(fp)
    alt_irq_context context=0;
8020eb64:	e03ff715 	stw	zero,-36(fp)
    alt_u32 csr_status = 0;
8020eb68:	e03ff215 	stw	zero,-56(fp)
    alt_u16 counter = 0;
8020eb6c:	e03ff30d 	sth	zero,-52(fp)
    alt_u32 fifo_read_fill_level = (
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
8020eb70:	e0bffd17 	ldw	r2,-12(fp)
8020eb74:	10800317 	ldw	r2,12(r2)
8020eb78:	10800204 	addi	r2,r2,8
8020eb7c:	10800037 	ldwio	r2,0(r2)
{
    alt_u32 control=0;
    alt_irq_context context=0;
    alt_u32 csr_status = 0;
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
8020eb80:	10bfffcc 	andi	r2,r2,65535
8020eb84:	e0bff415 	stw	r2,-48(fp)
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
        ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
        ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
8020eb88:	e0bffd17 	ldw	r2,-12(fp)
8020eb8c:	10800317 	ldw	r2,12(r2)
8020eb90:	10800204 	addi	r2,r2,8
8020eb94:	10800037 	ldwio	r2,0(r2)
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
        ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
        ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
8020eb98:	1004d43a 	srli	r2,r2,16
8020eb9c:	e0bff515 	stw	r2,-44(fp)
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
        ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
        ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;
    alt_u32 error = ALTERA_MSGDMA_CSR_STOPPED_ON_ERROR_MASK | 
8020eba0:	00807804 	movi	r2,480
8020eba4:	e0bff815 	stw	r2,-32(fp)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
8020eba8:	00001906 	br	8020ec10 <alt_msgdma_descriptor_sync_transfer+0xcc>
        (dev->descriptor_fifo_depth <= fifo_read_fill_level))
    { 
        alt_busy_sleep(1); /* delay 1us */
8020ebac:	01000044 	movi	r4,1
8020ebb0:	02103e00 	call	802103e0 <alt_busy_sleep>
        if(5000 <= counter) /* time_out if waiting longer than 5 msec */
8020ebb4:	e0bff30b 	ldhu	r2,-52(fp)
8020ebb8:	1084e230 	cmpltui	r2,r2,5000
8020ebbc:	1000051e 	bne	r2,zero,8020ebd4 <alt_msgdma_descriptor_sync_transfer+0x90>
        {
            alt_printf("time out after 5 msec while waiting free FIFO buffer"
8020ebc0:	01200874 	movhi	r4,32801
8020ebc4:	21075904 	addi	r4,r4,7524
8020ebc8:	0210d940 	call	80210d94 <alt_printf>
                " for storing descriptor\n");
            return -ETIME;
8020ebcc:	00bff084 	movi	r2,-62
8020ebd0:	0000b506 	br	8020eea8 <alt_msgdma_descriptor_sync_transfer+0x364>
        }
        counter++;  
8020ebd4:	e0bff30b 	ldhu	r2,-52(fp)
8020ebd8:	10800044 	addi	r2,r2,1
8020ebdc:	e0bff30d 	sth	r2,-52(fp)
        fifo_read_fill_level = (
            IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
8020ebe0:	e0bffd17 	ldw	r2,-12(fp)
8020ebe4:	10800317 	ldw	r2,12(r2)
8020ebe8:	10800204 	addi	r2,r2,8
8020ebec:	10800037 	ldwio	r2,0(r2)
            alt_printf("time out after 5 msec while waiting free FIFO buffer"
                " for storing descriptor\n");
            return -ETIME;
        }
        counter++;  
        fifo_read_fill_level = (
8020ebf0:	10bfffcc 	andi	r2,r2,65535
8020ebf4:	e0bff415 	stw	r2,-48(fp)
            IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
            ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
            ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
        fifo_write_fill_level = (
            IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
8020ebf8:	e0bffd17 	ldw	r2,-12(fp)
8020ebfc:	10800317 	ldw	r2,12(r2)
8020ec00:	10800204 	addi	r2,r2,8
8020ec04:	10800037 	ldwio	r2,0(r2)
        counter++;  
        fifo_read_fill_level = (
            IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
            ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
            ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
        fifo_write_fill_level = (
8020ec08:	1004d43a 	srli	r2,r2,16
8020ec0c:	e0bff515 	stw	r2,-44(fp)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
8020ec10:	e0bffd17 	ldw	r2,-12(fp)
8020ec14:	10800917 	ldw	r2,36(r2)
8020ec18:	e0fff517 	ldw	r3,-44(fp)
8020ec1c:	18bfe32e 	bgeu	r3,r2,8020ebac <__reset+0xfa1eebac>
        (dev->descriptor_fifo_depth <= fifo_read_fill_level))
8020ec20:	e0bffd17 	ldw	r2,-12(fp)
8020ec24:	10800917 	ldw	r2,36(r2)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
8020ec28:	e0fff417 	ldw	r3,-48(fp)
8020ec2c:	18bfdf2e 	bgeu	r3,r2,8020ebac <__reset+0xfa1eebac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8020ec30:	0005303a 	rdctl	r2,status
8020ec34:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8020ec38:	e0fffc17 	ldw	r3,-16(fp)
8020ec3c:	00bfff84 	movi	r2,-2
8020ec40:	1884703a 	and	r2,r3,r2
8020ec44:	1001703a 	wrctl	status,r2
  
  return context;
8020ec48:	e0bffc17 	ldw	r2,-16(fp)
    ALT_SEM_PEND (dev->regs_lock, 0);
    
    /* Stop the msgdma dispatcher from issuing more descriptors to the
    read or write masters  */
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();
8020ec4c:	e0bff715 	stw	r2,-36(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
8020ec50:	e0bffd17 	ldw	r2,-12(fp)
8020ec54:	10800317 	ldw	r2,12(r2)
8020ec58:	10800104 	addi	r2,r2,4
8020ec5c:	00c00804 	movi	r3,32
8020ec60:	10c00035 	stwio	r3,0(r2)
        ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
    /*
    * Clear any (previous) status register information
    * that might occlude our error checking later.
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
8020ec64:	e0bffd17 	ldw	r2,-12(fp)
8020ec68:	10800317 	ldw	r2,12(r2)
8020ec6c:	e0fffd17 	ldw	r3,-12(fp)
8020ec70:	18c00317 	ldw	r3,12(r3)
8020ec74:	18c00037 	ldwio	r3,0(r3)
8020ec78:	10c00035 	stwio	r3,0(r2)
        dev->csr_base, 
        IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));

    if (NULL != standard_desc && NULL == extended_desc)
8020ec7c:	e0bffe17 	ldw	r2,-8(fp)
8020ec80:	10001b26 	beq	r2,zero,8020ecf0 <alt_msgdma_descriptor_sync_transfer+0x1ac>
8020ec84:	e0bfff17 	ldw	r2,-4(fp)
8020ec88:	1000191e 	bne	r2,zero,8020ecf0 <alt_msgdma_descriptor_sync_transfer+0x1ac>
    {
        counter = 0; /* reset counter */
8020ec8c:	e03ff30d 	sth	zero,-52(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
          write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
8020ec90:	00000d06 	br	8020ecc8 <alt_msgdma_descriptor_sync_transfer+0x184>
            dev->csr_base, dev->descriptor_base, standard_desc))
        {     
            alt_busy_sleep(1); /* delay 1us */
8020ec94:	01000044 	movi	r4,1
8020ec98:	02103e00 	call	802103e0 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
8020ec9c:	e0bff30b 	ldhu	r2,-52(fp)
8020eca0:	1084e230 	cmpltui	r2,r2,5000
8020eca4:	1000051e 	bne	r2,zero,8020ecbc <alt_msgdma_descriptor_sync_transfer+0x178>
            {
                alt_printf("time out after 5 msec while writing standard" 
8020eca8:	01200874 	movhi	r4,32801
8020ecac:	21076d04 	addi	r4,r4,7604
8020ecb0:	0210d940 	call	80210d94 <alt_printf>
                * registers semaphore so that other threads can access the 
                * registers.
                */
                ALT_SEM_POST (dev->regs_lock);
                
                return -ETIME;
8020ecb4:	00bff084 	movi	r2,-62
8020ecb8:	00007b06 	br	8020eea8 <alt_msgdma_descriptor_sync_transfer+0x364>
            }
            counter++;    
8020ecbc:	e0bff30b 	ldhu	r2,-52(fp)
8020ecc0:	10800044 	addi	r2,r2,1
8020ecc4:	e0bff30d 	sth	r2,-52(fp)
    if (NULL != standard_desc && NULL == extended_desc)
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
          write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
8020ecc8:	e0bffd17 	ldw	r2,-12(fp)
8020eccc:	10c00317 	ldw	r3,12(r2)
8020ecd0:	e0bffd17 	ldw	r2,-12(fp)
8020ecd4:	10800417 	ldw	r2,16(r2)
8020ecd8:	e1bffe17 	ldw	r6,-8(fp)
8020ecdc:	100b883a 	mov	r5,r2
8020ece0:	1809883a 	mov	r4,r3
8020ece4:	020e3500 	call	8020e350 <alt_msgdma_write_standard_descriptor>
8020ece8:	103fea1e 	bne	r2,zero,8020ec94 <__reset+0xfa1eec94>
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
        dev->csr_base, 
        IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));

    if (NULL != standard_desc && NULL == extended_desc)
8020ecec:	00001f06 	br	8020ed6c <alt_msgdma_descriptor_sync_transfer+0x228>
                return -ETIME;
            }
            counter++;    
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
8020ecf0:	e0bffe17 	ldw	r2,-8(fp)
8020ecf4:	10001b1e 	bne	r2,zero,8020ed64 <alt_msgdma_descriptor_sync_transfer+0x220>
8020ecf8:	e0bfff17 	ldw	r2,-4(fp)
8020ecfc:	10001926 	beq	r2,zero,8020ed64 <alt_msgdma_descriptor_sync_transfer+0x220>
    {
        counter = 0; /* reset counter */
8020ed00:	e03ff30d 	sth	zero,-52(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
          write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
8020ed04:	00000d06 	br	8020ed3c <alt_msgdma_descriptor_sync_transfer+0x1f8>
            dev->csr_base, dev->descriptor_base, extended_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
8020ed08:	01000044 	movi	r4,1
8020ed0c:	02103e00 	call	802103e0 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
8020ed10:	e0bff30b 	ldhu	r2,-52(fp)
8020ed14:	1084e230 	cmpltui	r2,r2,5000
8020ed18:	1000051e 	bne	r2,zero,8020ed30 <alt_msgdma_descriptor_sync_transfer+0x1ec>
            {
                alt_printf("time out after 5 msec while writing extended" 
8020ed1c:	01200874 	movhi	r4,32801
8020ed20:	21077e04 	addi	r4,r4,7672
8020ed24:	0210d940 	call	80210d94 <alt_printf>
                * registers semaphore so that other threads can access the 
                * registers.
                */
                ALT_SEM_POST (dev->regs_lock);
                
                return -ETIME;
8020ed28:	00bff084 	movi	r2,-62
8020ed2c:	00005e06 	br	8020eea8 <alt_msgdma_descriptor_sync_transfer+0x364>
            }
            counter++;
8020ed30:	e0bff30b 	ldhu	r2,-52(fp)
8020ed34:	10800044 	addi	r2,r2,1
8020ed38:	e0bff30d 	sth	r2,-52(fp)
    else if (NULL == standard_desc && NULL != extended_desc)
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
          write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
8020ed3c:	e0bffd17 	ldw	r2,-12(fp)
8020ed40:	10c00317 	ldw	r3,12(r2)
8020ed44:	e0bffd17 	ldw	r2,-12(fp)
8020ed48:	10800417 	ldw	r2,16(r2)
8020ed4c:	e1bfff17 	ldw	r6,-4(fp)
8020ed50:	100b883a 	mov	r5,r2
8020ed54:	1809883a 	mov	r4,r3
8020ed58:	020e3e40 	call	8020e3e4 <alt_msgdma_write_extended_descriptor>
8020ed5c:	103fea1e 	bne	r2,zero,8020ed08 <__reset+0xfa1eed08>
                return -ETIME;
            }
            counter++;    
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
8020ed60:	00000206 	br	8020ed6c <alt_msgdma_descriptor_sync_transfer+0x228>
        * semaphore so that other threads can access the registers.
        */
        ALT_SEM_POST (dev->regs_lock);
        
        /* operation not permitted due to descriptor type conflict */
        return -EPERM; 
8020ed64:	00bfffc4 	movi	r2,-1
8020ed68:	00004f06 	br	8020eea8 <alt_msgdma_descriptor_sync_transfer+0x364>
    * Set up msgdma controller to:
    * - Disable interrupt generation
    * - Run once a valid descriptor is written to controller
    * - Stop on an error with any particular descriptor
    */
     IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
8020ed6c:	e0bffd17 	ldw	r2,-12(fp)
8020ed70:	10800317 	ldw	r2,12(r2)
8020ed74:	10800104 	addi	r2,r2,4
8020ed78:	e0fffd17 	ldw	r3,-12(fp)
8020ed7c:	19000d17 	ldw	r4,52(r3)
8020ed80:	00fff2c4 	movi	r3,-53
8020ed84:	20c6703a 	and	r3,r4,r3
8020ed88:	18c00114 	ori	r3,r3,4
8020ed8c:	10c00035 	stwio	r3,0(r2)
8020ed90:	e0bff717 	ldw	r2,-36(fp)
8020ed94:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8020ed98:	e0bff917 	ldw	r2,-28(fp)
8020ed9c:	1001703a 	wrctl	status,r2
        (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) &
        (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK)) ;
     
    alt_irq_enable_all(context);
     
    counter = 0; /* reset counter */ 
8020eda0:	e03ff30d 	sth	zero,-52(fp)
    
    csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
8020eda4:	e0bffd17 	ldw	r2,-12(fp)
8020eda8:	10800317 	ldw	r2,12(r2)
8020edac:	10800037 	ldwio	r2,0(r2)
8020edb0:	e0bff215 	stw	r2,-56(fp)
    
    /* Wait for any pending transfers to complete or checking any errors or 
    conditions causing descriptor to stop dispatching */
    while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK))
8020edb4:	00001106 	br	8020edfc <alt_msgdma_descriptor_sync_transfer+0x2b8>
    {
        alt_busy_sleep(1); /* delay 1us */
8020edb8:	01000044 	movi	r4,1
8020edbc:	02103e00 	call	802103e0 <alt_busy_sleep>
        if(5000 <= counter) /* time_out if waiting longer than 5 msec */
8020edc0:	e0bff30b 	ldhu	r2,-52(fp)
8020edc4:	1084e230 	cmpltui	r2,r2,5000
8020edc8:	1000051e 	bne	r2,zero,8020ede0 <alt_msgdma_descriptor_sync_transfer+0x29c>
        {
            alt_printf("time out after 5 msec while waiting for any pending" 
8020edcc:	01200874 	movhi	r4,32801
8020edd0:	21078f04 	addi	r4,r4,7740
8020edd4:	0210d940 	call	80210d94 <alt_printf>
            * Now that access to the registers is complete, release the registers
            * semaphore so that other threads can access the registers.
            */
            ALT_SEM_POST (dev->regs_lock);
            
            return -ETIME;
8020edd8:	00bff084 	movi	r2,-62
8020eddc:	00003206 	br	8020eea8 <alt_msgdma_descriptor_sync_transfer+0x364>
        }
        counter++;
8020ede0:	e0bff30b 	ldhu	r2,-52(fp)
8020ede4:	10800044 	addi	r2,r2,1
8020ede8:	e0bff30d 	sth	r2,-52(fp)
        csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
8020edec:	e0bffd17 	ldw	r2,-12(fp)
8020edf0:	10800317 	ldw	r2,12(r2)
8020edf4:	10800037 	ldwio	r2,0(r2)
8020edf8:	e0bff215 	stw	r2,-56(fp)
    
    csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
    
    /* Wait for any pending transfers to complete or checking any errors or 
    conditions causing descriptor to stop dispatching */
    while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK))
8020edfc:	e0fff217 	ldw	r3,-56(fp)
8020ee00:	e0bff817 	ldw	r2,-32(fp)
8020ee04:	1884703a 	and	r2,r3,r2
8020ee08:	1000031e 	bne	r2,zero,8020ee18 <alt_msgdma_descriptor_sync_transfer+0x2d4>
8020ee0c:	e0bff217 	ldw	r2,-56(fp)
8020ee10:	1080004c 	andi	r2,r2,1
8020ee14:	103fe81e 	bne	r2,zero,8020edb8 <__reset+0xfa1eedb8>
    }
    

    /*Errors or conditions causing the dispatcher stopping issuing read/write 
      commands to masters*/
    if(0 != (csr_status & error))
8020ee18:	e0fff217 	ldw	r3,-56(fp)
8020ee1c:	e0bff817 	ldw	r2,-32(fp)
8020ee20:	1884703a 	and	r2,r3,r2
8020ee24:	10000226 	beq	r2,zero,8020ee30 <alt_msgdma_descriptor_sync_transfer+0x2ec>
        * Now that access to the registers is complete, release the registers
        * semaphore so that other threads can access the registers.
        */
        ALT_SEM_POST (dev->regs_lock);
        
        return error;
8020ee28:	e0bff817 	ldw	r2,-32(fp)
8020ee2c:	00001e06 	br	8020eea8 <alt_msgdma_descriptor_sync_transfer+0x364>
    }

    /* Stop the msgdma dispatcher from issuing more descriptors to the
    read or write masters  */
    /* stop issuing more descriptors */
    control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) | 
8020ee30:	e0bffd17 	ldw	r2,-12(fp)
8020ee34:	10800317 	ldw	r2,12(r2)
8020ee38:	10800104 	addi	r2,r2,4
8020ee3c:	10800037 	ldwio	r2,0(r2)
8020ee40:	10800814 	ori	r2,r2,32
8020ee44:	e0bff615 	stw	r2,-40(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8020ee48:	0005303a 	rdctl	r2,status
8020ee4c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8020ee50:	e0fffa17 	ldw	r3,-24(fp)
8020ee54:	00bfff84 	movi	r2,-2
8020ee58:	1884703a 	and	r2,r3,r2
8020ee5c:	1001703a 	wrctl	status,r2
  
  return context;
8020ee60:	e0bffa17 	ldw	r2,-24(fp)
    ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();  
8020ee64:	e0bff715 	stw	r2,-36(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
8020ee68:	e0bffd17 	ldw	r2,-12(fp)
8020ee6c:	10800317 	ldw	r2,12(r2)
8020ee70:	10800104 	addi	r2,r2,4
8020ee74:	e0fff617 	ldw	r3,-40(fp)
8020ee78:	10c00035 	stwio	r3,0(r2)
    /*
    * Clear any (previous) status register information
    * that might occlude our error checking later.
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
8020ee7c:	e0bffd17 	ldw	r2,-12(fp)
8020ee80:	10800317 	ldw	r2,12(r2)
8020ee84:	e0fffd17 	ldw	r3,-12(fp)
8020ee88:	18c00317 	ldw	r3,12(r3)
8020ee8c:	18c00037 	ldwio	r3,0(r3)
8020ee90:	10c00035 	stwio	r3,0(r2)
8020ee94:	e0bff717 	ldw	r2,-36(fp)
8020ee98:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8020ee9c:	e0bffb17 	ldw	r2,-20(fp)
8020eea0:	1001703a 	wrctl	status,r2
    * Now that access to the registers is complete, release the registers
    * semaphore so that other threads can access the registers.
    */
    ALT_SEM_POST (dev->regs_lock);
    
    return 0;
8020eea4:	0005883a 	mov	r2,zero

}
8020eea8:	e037883a 	mov	sp,fp
8020eeac:	dfc00117 	ldw	ra,4(sp)
8020eeb0:	df000017 	ldw	fp,0(sp)
8020eeb4:	dec00204 	addi	sp,sp,8
8020eeb8:	f800283a 	ret

8020eebc <alt_msgdma_construct_standard_st_to_mm_descriptor>:
 */
int alt_msgdma_construct_standard_st_to_mm_descriptor (
    alt_msgdma_dev *dev,
    alt_msgdma_standard_descriptor *descriptor,
    alt_u32 *write_address, alt_u32 length, alt_u32 control)
{
8020eebc:	defff804 	addi	sp,sp,-32
8020eec0:	dfc00715 	stw	ra,28(sp)
8020eec4:	df000615 	stw	fp,24(sp)
8020eec8:	df000604 	addi	fp,sp,24
8020eecc:	e13ffc15 	stw	r4,-16(fp)
8020eed0:	e17ffd15 	stw	r5,-12(fp)
8020eed4:	e1bffe15 	stw	r6,-8(fp)
8020eed8:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, NULL, 
8020eedc:	e0800217 	ldw	r2,8(fp)
8020eee0:	d8800115 	stw	r2,4(sp)
8020eee4:	e0bfff17 	ldw	r2,-4(fp)
8020eee8:	d8800015 	stw	r2,0(sp)
8020eeec:	e1fffe17 	ldw	r7,-8(fp)
8020eef0:	000d883a 	mov	r6,zero
8020eef4:	e17ffd17 	ldw	r5,-12(fp)
8020eef8:	e13ffc17 	ldw	r4,-16(fp)
8020eefc:	020e6940 	call	8020e694 <alt_msgdma_construct_standard_descriptor>
            write_address, length, control);
}
8020ef00:	e037883a 	mov	sp,fp
8020ef04:	dfc00117 	ldw	ra,4(sp)
8020ef08:	df000017 	ldw	fp,0(sp)
8020ef0c:	dec00204 	addi	sp,sp,8
8020ef10:	f800283a 	ret

8020ef14 <alt_msgdma_construct_standard_mm_to_st_descriptor>:
    alt_msgdma_dev *dev,
    alt_msgdma_standard_descriptor *descriptor,
    alt_u32 *read_address,
    alt_u32 length,
    alt_u32 control)
{
8020ef14:	defff804 	addi	sp,sp,-32
8020ef18:	dfc00715 	stw	ra,28(sp)
8020ef1c:	df000615 	stw	fp,24(sp)
8020ef20:	df000604 	addi	fp,sp,24
8020ef24:	e13ffc15 	stw	r4,-16(fp)
8020ef28:	e17ffd15 	stw	r5,-12(fp)
8020ef2c:	e1bffe15 	stw	r6,-8(fp)
8020ef30:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, read_address, 
8020ef34:	e0800217 	ldw	r2,8(fp)
8020ef38:	d8800115 	stw	r2,4(sp)
8020ef3c:	e0bfff17 	ldw	r2,-4(fp)
8020ef40:	d8800015 	stw	r2,0(sp)
8020ef44:	000f883a 	mov	r7,zero
8020ef48:	e1bffe17 	ldw	r6,-8(fp)
8020ef4c:	e17ffd17 	ldw	r5,-12(fp)
8020ef50:	e13ffc17 	ldw	r4,-16(fp)
8020ef54:	020e6940 	call	8020e694 <alt_msgdma_construct_standard_descriptor>
            NULL, length, control);

}
8020ef58:	e037883a 	mov	sp,fp
8020ef5c:	dfc00117 	ldw	ra,4(sp)
8020ef60:	df000017 	ldw	fp,0(sp)
8020ef64:	dec00204 	addi	sp,sp,8
8020ef68:	f800283a 	ret

8020ef6c <alt_msgdma_construct_standard_mm_to_mm_descriptor>:
    alt_msgdma_standard_descriptor *descriptor,
    alt_u32 *read_address, 
    alt_u32 *write_address, 
    alt_u32 length, 
    alt_u32 control)
{
8020ef6c:	defff804 	addi	sp,sp,-32
8020ef70:	dfc00715 	stw	ra,28(sp)
8020ef74:	df000615 	stw	fp,24(sp)
8020ef78:	df000604 	addi	fp,sp,24
8020ef7c:	e13ffc15 	stw	r4,-16(fp)
8020ef80:	e17ffd15 	stw	r5,-12(fp)
8020ef84:	e1bffe15 	stw	r6,-8(fp)
8020ef88:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, read_address, 
8020ef8c:	e0800317 	ldw	r2,12(fp)
8020ef90:	d8800115 	stw	r2,4(sp)
8020ef94:	e0800217 	ldw	r2,8(fp)
8020ef98:	d8800015 	stw	r2,0(sp)
8020ef9c:	e1ffff17 	ldw	r7,-4(fp)
8020efa0:	e1bffe17 	ldw	r6,-8(fp)
8020efa4:	e17ffd17 	ldw	r5,-12(fp)
8020efa8:	e13ffc17 	ldw	r4,-16(fp)
8020efac:	020e6940 	call	8020e694 <alt_msgdma_construct_standard_descriptor>
            write_address, length, control);
}
8020efb0:	e037883a 	mov	sp,fp
8020efb4:	dfc00117 	ldw	ra,4(sp)
8020efb8:	df000017 	ldw	fp,0(sp)
8020efbc:	dec00204 	addi	sp,sp,8
8020efc0:	f800283a 	ret

8020efc4 <alt_msgdma_construct_extended_st_to_mm_descriptor>:
    alt_u32 length, 
    alt_u32 control, 
    alt_u16 sequence_number, 
    alt_u8 write_burst_count, 
    alt_u16 write_stride)
{
8020efc4:	defff004 	addi	sp,sp,-64
8020efc8:	dfc00f15 	stw	ra,60(sp)
8020efcc:	df000e15 	stw	fp,56(sp)
8020efd0:	df000e04 	addi	fp,sp,56
8020efd4:	e13ff915 	stw	r4,-28(fp)
8020efd8:	e17ffa15 	stw	r5,-24(fp)
8020efdc:	e1bffb15 	stw	r6,-20(fp)
8020efe0:	e1fffc15 	stw	r7,-16(fp)
8020efe4:	e1000317 	ldw	r4,12(fp)
8020efe8:	e0c00417 	ldw	r3,16(fp)
8020efec:	e0800517 	ldw	r2,20(fp)
8020eff0:	e13ffd0d 	sth	r4,-12(fp)
8020eff4:	e0fffe05 	stb	r3,-8(fp)
8020eff8:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, 
8020effc:	e0bffd0b 	ldhu	r2,-12(fp)
8020f000:	e0fffe03 	ldbu	r3,-8(fp)
8020f004:	e13fff0b 	ldhu	r4,-4(fp)
8020f008:	d9000615 	stw	r4,24(sp)
8020f00c:	d8000515 	stw	zero,20(sp)
8020f010:	d8c00415 	stw	r3,16(sp)
8020f014:	d8000315 	stw	zero,12(sp)
8020f018:	d8800215 	stw	r2,8(sp)
8020f01c:	e0800217 	ldw	r2,8(fp)
8020f020:	d8800115 	stw	r2,4(sp)
8020f024:	e0bffc17 	ldw	r2,-16(fp)
8020f028:	d8800015 	stw	r2,0(sp)
8020f02c:	e1fffb17 	ldw	r7,-20(fp)
8020f030:	000d883a 	mov	r6,zero
8020f034:	e17ffa17 	ldw	r5,-24(fp)
8020f038:	e13ff917 	ldw	r4,-28(fp)
8020f03c:	020e7200 	call	8020e720 <alt_msgdma_construct_extended_descriptor>
            NULL, write_address, length, control, sequence_number, 0, 
            write_burst_count, 0, write_stride);
}
8020f040:	e037883a 	mov	sp,fp
8020f044:	dfc00117 	ldw	ra,4(sp)
8020f048:	df000017 	ldw	fp,0(sp)
8020f04c:	dec00204 	addi	sp,sp,8
8020f050:	f800283a 	ret

8020f054 <alt_msgdma_construct_extended_mm_to_st_descriptor>:
    alt_u32 length,
    alt_u32 control,
    alt_u16 sequence_number,
    alt_u8 read_burst_count, 
    alt_u16 read_stride)
{
8020f054:	defff004 	addi	sp,sp,-64
8020f058:	dfc00f15 	stw	ra,60(sp)
8020f05c:	df000e15 	stw	fp,56(sp)
8020f060:	df000e04 	addi	fp,sp,56
8020f064:	e13ff915 	stw	r4,-28(fp)
8020f068:	e17ffa15 	stw	r5,-24(fp)
8020f06c:	e1bffb15 	stw	r6,-20(fp)
8020f070:	e1fffc15 	stw	r7,-16(fp)
8020f074:	e1000317 	ldw	r4,12(fp)
8020f078:	e0c00417 	ldw	r3,16(fp)
8020f07c:	e0800517 	ldw	r2,20(fp)
8020f080:	e13ffd0d 	sth	r4,-12(fp)
8020f084:	e0fffe05 	stb	r3,-8(fp)
8020f088:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, read_address, 
8020f08c:	e0bffd0b 	ldhu	r2,-12(fp)
8020f090:	e0fffe03 	ldbu	r3,-8(fp)
8020f094:	e13fff0b 	ldhu	r4,-4(fp)
8020f098:	d8000615 	stw	zero,24(sp)
8020f09c:	d9000515 	stw	r4,20(sp)
8020f0a0:	d8000415 	stw	zero,16(sp)
8020f0a4:	d8c00315 	stw	r3,12(sp)
8020f0a8:	d8800215 	stw	r2,8(sp)
8020f0ac:	e0800217 	ldw	r2,8(fp)
8020f0b0:	d8800115 	stw	r2,4(sp)
8020f0b4:	e0bffc17 	ldw	r2,-16(fp)
8020f0b8:	d8800015 	stw	r2,0(sp)
8020f0bc:	000f883a 	mov	r7,zero
8020f0c0:	e1bffb17 	ldw	r6,-20(fp)
8020f0c4:	e17ffa17 	ldw	r5,-24(fp)
8020f0c8:	e13ff917 	ldw	r4,-28(fp)
8020f0cc:	020e7200 	call	8020e720 <alt_msgdma_construct_extended_descriptor>
            NULL, length, control, sequence_number, read_burst_count, 0, 
            read_stride, 0);

}
8020f0d0:	e037883a 	mov	sp,fp
8020f0d4:	dfc00117 	ldw	ra,4(sp)
8020f0d8:	df000017 	ldw	fp,0(sp)
8020f0dc:	dec00204 	addi	sp,sp,8
8020f0e0:	f800283a 	ret

8020f0e4 <alt_msgdma_construct_extended_mm_to_mm_descriptor>:
    alt_u16 sequence_number, 
    alt_u8 read_burst_count, 
    alt_u8 write_burst_count,
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
8020f0e4:	deffee04 	addi	sp,sp,-72
8020f0e8:	dfc01115 	stw	ra,68(sp)
8020f0ec:	df001015 	stw	fp,64(sp)
8020f0f0:	df001004 	addi	fp,sp,64
8020f0f4:	e13ff715 	stw	r4,-36(fp)
8020f0f8:	e17ff815 	stw	r5,-32(fp)
8020f0fc:	e1bff915 	stw	r6,-28(fp)
8020f100:	e1fffa15 	stw	r7,-24(fp)
8020f104:	e1800417 	ldw	r6,16(fp)
8020f108:	e1400517 	ldw	r5,20(fp)
8020f10c:	e1000617 	ldw	r4,24(fp)
8020f110:	e0c00717 	ldw	r3,28(fp)
8020f114:	e0800817 	ldw	r2,32(fp)
8020f118:	e1bffb0d 	sth	r6,-20(fp)
8020f11c:	e17ffc05 	stb	r5,-16(fp)
8020f120:	e13ffd05 	stb	r4,-12(fp)
8020f124:	e0fffe0d 	sth	r3,-8(fp)
8020f128:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, 
8020f12c:	e0bffb0b 	ldhu	r2,-20(fp)
8020f130:	e0fffc03 	ldbu	r3,-16(fp)
8020f134:	e13ffd03 	ldbu	r4,-12(fp)
8020f138:	e17ffe0b 	ldhu	r5,-8(fp)
8020f13c:	e1bfff0b 	ldhu	r6,-4(fp)
8020f140:	d9800615 	stw	r6,24(sp)
8020f144:	d9400515 	stw	r5,20(sp)
8020f148:	d9000415 	stw	r4,16(sp)
8020f14c:	d8c00315 	stw	r3,12(sp)
8020f150:	d8800215 	stw	r2,8(sp)
8020f154:	e0800317 	ldw	r2,12(fp)
8020f158:	d8800115 	stw	r2,4(sp)
8020f15c:	e0800217 	ldw	r2,8(fp)
8020f160:	d8800015 	stw	r2,0(sp)
8020f164:	e1fffa17 	ldw	r7,-24(fp)
8020f168:	e1bff917 	ldw	r6,-28(fp)
8020f16c:	e17ff817 	ldw	r5,-32(fp)
8020f170:	e13ff717 	ldw	r4,-36(fp)
8020f174:	020e7200 	call	8020e720 <alt_msgdma_construct_extended_descriptor>
            read_address, write_address, length, control, sequence_number, 
            read_burst_count, write_burst_count, read_stride, write_stride);

}
8020f178:	e037883a 	mov	sp,fp
8020f17c:	dfc00117 	ldw	ra,4(sp)
8020f180:	df000017 	ldw	fp,0(sp)
8020f184:	dec00204 	addi	sp,sp,8
8020f188:	f800283a 	ret

8020f18c <alt_msgdma_construct_prefetcher_standard_descriptor>:
    alt_msgdma_prefetcher_standard_descriptor *descriptor,
    alt_u32 read_address, 
    alt_u32 write_address, 
    alt_u32 length, 
    alt_u32 control)
{
8020f18c:	defffb04 	addi	sp,sp,-20
8020f190:	df000415 	stw	fp,16(sp)
8020f194:	df000404 	addi	fp,sp,16
8020f198:	e13ffc15 	stw	r4,-16(fp)
8020f19c:	e17ffd15 	stw	r5,-12(fp)
8020f1a0:	e1bffe15 	stw	r6,-8(fp)
8020f1a4:	e1ffff15 	stw	r7,-4(fp)
    if(dev->max_byte < length ||
8020f1a8:	e0bffc17 	ldw	r2,-16(fp)
8020f1ac:	10c01217 	ldw	r3,72(r2)
8020f1b0:	e0800117 	ldw	r2,4(fp)
8020f1b4:	18800436 	bltu	r3,r2,8020f1c8 <alt_msgdma_construct_prefetcher_standard_descriptor+0x3c>
       dev->enhanced_features != 0
8020f1b8:	e0bffc17 	ldw	r2,-16(fp)
8020f1bc:	10801703 	ldbu	r2,92(r2)
    alt_u32 read_address, 
    alt_u32 write_address, 
    alt_u32 length, 
    alt_u32 control)
{
    if(dev->max_byte < length ||
8020f1c0:	10803fcc 	andi	r2,r2,255
8020f1c4:	10000226 	beq	r2,zero,8020f1d0 <alt_msgdma_construct_prefetcher_standard_descriptor+0x44>
       dev->enhanced_features != 0
      )
    {
        return -EINVAL;
8020f1c8:	00bffa84 	movi	r2,-22
8020f1cc:	00001406 	br	8020f220 <alt_msgdma_construct_prefetcher_standard_descriptor+0x94>
    }
    descriptor->read_address = read_address;
8020f1d0:	e0bffd17 	ldw	r2,-12(fp)
8020f1d4:	e0fffe17 	ldw	r3,-8(fp)
8020f1d8:	10c00015 	stw	r3,0(r2)
    descriptor->write_address = write_address;
8020f1dc:	e0bffd17 	ldw	r2,-12(fp)
8020f1e0:	e0ffff17 	ldw	r3,-4(fp)
8020f1e4:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
8020f1e8:	e0bffd17 	ldw	r2,-12(fp)
8020f1ec:	e0c00117 	ldw	r3,4(fp)
8020f1f0:	10c00215 	stw	r3,8(r2)
    /* have descriptor point to itself for park_mode */
    descriptor->next_desc_ptr = (alt_u32)descriptor;  
8020f1f4:	e0fffd17 	ldw	r3,-12(fp)
8020f1f8:	e0bffd17 	ldw	r2,-12(fp)
8020f1fc:	10c00315 	stw	r3,12(r2)
    
    /* clear control own_by_hw bit field (SW owns this descriptor)*/
    descriptor->control = (control 
            & ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
            | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
8020f200:	e0c00217 	ldw	r3,8(fp)
8020f204:	00900034 	movhi	r2,16384
8020f208:	10bfffc4 	addi	r2,r2,-1
8020f20c:	1884703a 	and	r2,r3,r2
8020f210:	10e00034 	orhi	r3,r2,32768
    descriptor->transfer_length = length;
    /* have descriptor point to itself for park_mode */
    descriptor->next_desc_ptr = (alt_u32)descriptor;  
    
    /* clear control own_by_hw bit field (SW owns this descriptor)*/
    descriptor->control = (control 
8020f214:	e0bffd17 	ldw	r2,-12(fp)
8020f218:	10c00715 	stw	r3,28(r2)
            & ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
            | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
    
    return 0;
8020f21c:	0005883a 	mov	r2,zero
}
8020f220:	e037883a 	mov	sp,fp
8020f224:	df000017 	ldw	fp,0(sp)
8020f228:	dec00104 	addi	sp,sp,4
8020f22c:	f800283a 	ret

8020f230 <alt_msgdma_construct_prefetcher_extended_descriptor>:
    alt_u16 sequence_number, 
    alt_u8 read_burst_count, 
    alt_u8 write_burst_count,
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
8020f230:	defff404 	addi	sp,sp,-48
8020f234:	df000b15 	stw	fp,44(sp)
8020f238:	df000b04 	addi	fp,sp,44
8020f23c:	e13ff715 	stw	r4,-36(fp)
8020f240:	e17ff815 	stw	r5,-32(fp)
8020f244:	e1bff915 	stw	r6,-28(fp)
8020f248:	e1fffa15 	stw	r7,-24(fp)
8020f24c:	e1800517 	ldw	r6,20(fp)
8020f250:	e1400617 	ldw	r5,24(fp)
8020f254:	e1000717 	ldw	r4,28(fp)
8020f258:	e0c00817 	ldw	r3,32(fp)
8020f25c:	e0800917 	ldw	r2,36(fp)
8020f260:	e1bffb0d 	sth	r6,-20(fp)
8020f264:	e17ffc05 	stb	r5,-16(fp)
8020f268:	e13ffd05 	stb	r4,-12(fp)
8020f26c:	e0fffe0d 	sth	r3,-8(fp)
8020f270:	e0bfff0d 	sth	r2,-4(fp)
    msgdma_addr64 node_addr;
    
    if(dev->max_byte < length ||
8020f274:	e0bff717 	ldw	r2,-36(fp)
8020f278:	10c01217 	ldw	r3,72(r2)
8020f27c:	e0800317 	ldw	r2,12(fp)
8020f280:	18801936 	bltu	r3,r2,8020f2e8 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
8020f284:	e13ff717 	ldw	r4,-36(fp)
8020f288:	20801317 	ldw	r2,76(r4)
8020f28c:	20c01417 	ldw	r3,80(r4)
8020f290:	e13ffe0b 	ldhu	r4,-8(fp)
8020f294:	213fffcc 	andi	r4,r4,65535
8020f298:	2015883a 	mov	r10,r4
8020f29c:	0017883a 	mov	r11,zero
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
    msgdma_addr64 node_addr;
    
    if(dev->max_byte < length ||
8020f2a0:	1ac01136 	bltu	r3,r11,8020f2e8 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
8020f2a4:	58c0011e 	bne	r11,r3,8020f2ac <alt_msgdma_construct_prefetcher_extended_descriptor+0x7c>
8020f2a8:	12800f36 	bltu	r2,r10,8020f2e8 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
8020f2ac:	e13ff717 	ldw	r4,-36(fp)
8020f2b0:	20801317 	ldw	r2,76(r4)
8020f2b4:	20c01417 	ldw	r3,80(r4)
8020f2b8:	e13fff0b 	ldhu	r4,-4(fp)
8020f2bc:	213fffcc 	andi	r4,r4,65535
8020f2c0:	2011883a 	mov	r8,r4
8020f2c4:	0013883a 	mov	r9,zero
    alt_u16 write_stride)
{
    msgdma_addr64 node_addr;
    
    if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
8020f2c8:	1a400736 	bltu	r3,r9,8020f2e8 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
8020f2cc:	48c0011e 	bne	r9,r3,8020f2d4 <alt_msgdma_construct_prefetcher_extended_descriptor+0xa4>
8020f2d0:	12000536 	bltu	r2,r8,8020f2e8 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
       dev->max_stride < write_stride ||
       dev->enhanced_features != 1 
8020f2d4:	e0bff717 	ldw	r2,-36(fp)
8020f2d8:	10801703 	ldbu	r2,92(r2)
{
    msgdma_addr64 node_addr;
    
    if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
8020f2dc:	10803fcc 	andi	r2,r2,255
8020f2e0:	10800060 	cmpeqi	r2,r2,1
8020f2e4:	1000021e 	bne	r2,zero,8020f2f0 <alt_msgdma_construct_prefetcher_extended_descriptor+0xc0>
       dev->enhanced_features != 1 
      )
    {
        return -EINVAL;
8020f2e8:	00bffa84 	movi	r2,-22
8020f2ec:	00003106 	br	8020f3b4 <alt_msgdma_construct_prefetcher_extended_descriptor+0x184>
    }
    
    descriptor->read_address_high = read_address_high;
8020f2f0:	e0bff817 	ldw	r2,-32(fp)
8020f2f4:	e0fff917 	ldw	r3,-28(fp)
8020f2f8:	10c00915 	stw	r3,36(r2)
    descriptor->read_address_low = read_address_low;
8020f2fc:	e0bff817 	ldw	r2,-32(fp)
8020f300:	e0fffa17 	ldw	r3,-24(fp)
8020f304:	10c00015 	stw	r3,0(r2)
    descriptor->write_address_high = write_address_high;
8020f308:	e0bff817 	ldw	r2,-32(fp)
8020f30c:	e0c00117 	ldw	r3,4(fp)
8020f310:	10c00a15 	stw	r3,40(r2)
    descriptor->write_address_low = write_address_low;
8020f314:	e0bff817 	ldw	r2,-32(fp)
8020f318:	e0c00217 	ldw	r3,8(fp)
8020f31c:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
8020f320:	e0bff817 	ldw	r2,-32(fp)
8020f324:	e0c00317 	ldw	r3,12(fp)
8020f328:	10c00215 	stw	r3,8(r2)
    descriptor->sequence_number = sequence_number;
8020f32c:	e0bff817 	ldw	r2,-32(fp)
8020f330:	e0fffb0b 	ldhu	r3,-20(fp)
8020f334:	10c0070d 	sth	r3,28(r2)
    descriptor->read_burst_count = read_burst_count;
8020f338:	e0bff817 	ldw	r2,-32(fp)
8020f33c:	e0fffc03 	ldbu	r3,-16(fp)
8020f340:	10c00785 	stb	r3,30(r2)
    descriptor->write_burst_count = write_burst_count;
8020f344:	e0bff817 	ldw	r2,-32(fp)
8020f348:	e0fffd03 	ldbu	r3,-12(fp)
8020f34c:	10c007c5 	stb	r3,31(r2)
    descriptor->read_stride = read_stride;
8020f350:	e0bff817 	ldw	r2,-32(fp)
8020f354:	e0fffe0b 	ldhu	r3,-8(fp)
8020f358:	10c0080d 	sth	r3,32(r2)
    descriptor->write_stride = write_stride;
8020f35c:	e0bff817 	ldw	r2,-32(fp)
8020f360:	e0ffff0b 	ldhu	r3,-4(fp)
8020f364:	10c0088d 	sth	r3,34(r2)
    /* have descriptor point to itself */
    node_addr.u64 = (uintptr_t)descriptor;
8020f368:	e0bff817 	ldw	r2,-32(fp)
8020f36c:	1019883a 	mov	r12,r2
8020f370:	001b883a 	mov	r13,zero
8020f374:	e33ff515 	stw	r12,-44(fp)
8020f378:	e37ff615 	stw	r13,-40(fp)
    descriptor->next_desc_ptr_low = node_addr.u32[0];  
8020f37c:	e0fff517 	ldw	r3,-44(fp)
8020f380:	e0bff817 	ldw	r2,-32(fp)
8020f384:	10c00315 	stw	r3,12(r2)
    descriptor->next_desc_ptr_high = node_addr.u32[1];
8020f388:	e0fff617 	ldw	r3,-40(fp)
8020f38c:	e0bff817 	ldw	r2,-32(fp)
8020f390:	10c00b15 	stw	r3,44(r2)
    
    /* clear control own_by_hw bit field (SW still owns this descriptor). */
    descriptor->control = (control 
            & ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
            | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
8020f394:	e0c00417 	ldw	r3,16(fp)
8020f398:	00900034 	movhi	r2,16384
8020f39c:	10bfffc4 	addi	r2,r2,-1
8020f3a0:	1884703a 	and	r2,r3,r2
8020f3a4:	10e00034 	orhi	r3,r2,32768
    node_addr.u64 = (uintptr_t)descriptor;
    descriptor->next_desc_ptr_low = node_addr.u32[0];  
    descriptor->next_desc_ptr_high = node_addr.u32[1];
    
    /* clear control own_by_hw bit field (SW still owns this descriptor). */
    descriptor->control = (control 
8020f3a8:	e0bff817 	ldw	r2,-32(fp)
8020f3ac:	10c00f15 	stw	r3,60(r2)
            & ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
            | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;

  return 0 ;
8020f3b0:	0005883a 	mov	r2,zero
}
8020f3b4:	e037883a 	mov	sp,fp
8020f3b8:	df000017 	ldw	fp,0(sp)
8020f3bc:	dec00104 	addi	sp,sp,4
8020f3c0:	f800283a 	ret

8020f3c4 <alt_msgdma_construct_prefetcher_standard_mm_to_mm_descriptor>:
    alt_msgdma_prefetcher_standard_descriptor *descriptor,
    alt_u32 read_address,
    alt_u32 write_address,
    alt_u32 length,
    alt_u32 control)
{
8020f3c4:	defff804 	addi	sp,sp,-32
8020f3c8:	dfc00715 	stw	ra,28(sp)
8020f3cc:	df000615 	stw	fp,24(sp)
8020f3d0:	df000604 	addi	fp,sp,24
8020f3d4:	e13ffc15 	stw	r4,-16(fp)
8020f3d8:	e17ffd15 	stw	r5,-12(fp)
8020f3dc:	e1bffe15 	stw	r6,-8(fp)
8020f3e0:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
8020f3e4:	e0800317 	ldw	r2,12(fp)
8020f3e8:	d8800115 	stw	r2,4(sp)
8020f3ec:	e0800217 	ldw	r2,8(fp)
8020f3f0:	d8800015 	stw	r2,0(sp)
8020f3f4:	e1ffff17 	ldw	r7,-4(fp)
8020f3f8:	e1bffe17 	ldw	r6,-8(fp)
8020f3fc:	e17ffd17 	ldw	r5,-12(fp)
8020f400:	e13ffc17 	ldw	r4,-16(fp)
8020f404:	020f18c0 	call	8020f18c <alt_msgdma_construct_prefetcher_standard_descriptor>
            read_address, write_address, length, control);
}
8020f408:	e037883a 	mov	sp,fp
8020f40c:	dfc00117 	ldw	ra,4(sp)
8020f410:	df000017 	ldw	fp,0(sp)
8020f414:	dec00204 	addi	sp,sp,8
8020f418:	f800283a 	ret

8020f41c <alt_msgdma_construct_prefetcher_standard_st_to_mm_descriptor>:
    alt_msgdma_dev *dev,
    alt_msgdma_prefetcher_standard_descriptor *descriptor, 
    alt_u32 write_address, 
    alt_u32 length, 
    alt_u32 control)
{
8020f41c:	defff804 	addi	sp,sp,-32
8020f420:	dfc00715 	stw	ra,28(sp)
8020f424:	df000615 	stw	fp,24(sp)
8020f428:	df000604 	addi	fp,sp,24
8020f42c:	e13ffc15 	stw	r4,-16(fp)
8020f430:	e17ffd15 	stw	r5,-12(fp)
8020f434:	e1bffe15 	stw	r6,-8(fp)
8020f438:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
8020f43c:	e0800217 	ldw	r2,8(fp)
8020f440:	d8800115 	stw	r2,4(sp)
8020f444:	e0bfff17 	ldw	r2,-4(fp)
8020f448:	d8800015 	stw	r2,0(sp)
8020f44c:	e1fffe17 	ldw	r7,-8(fp)
8020f450:	000d883a 	mov	r6,zero
8020f454:	e17ffd17 	ldw	r5,-12(fp)
8020f458:	e13ffc17 	ldw	r4,-16(fp)
8020f45c:	020f18c0 	call	8020f18c <alt_msgdma_construct_prefetcher_standard_descriptor>
            0, write_address, length, control);
}
8020f460:	e037883a 	mov	sp,fp
8020f464:	dfc00117 	ldw	ra,4(sp)
8020f468:	df000017 	ldw	fp,0(sp)
8020f46c:	dec00204 	addi	sp,sp,8
8020f470:	f800283a 	ret

8020f474 <alt_msgdma_construct_prefetcher_standard_mm_to_st_descriptor>:
    alt_msgdma_dev *dev,
    alt_msgdma_prefetcher_standard_descriptor *descriptor, 
    alt_u32 read_address, 
    alt_u32 length, 
    alt_u32 control)
{
8020f474:	defff804 	addi	sp,sp,-32
8020f478:	dfc00715 	stw	ra,28(sp)
8020f47c:	df000615 	stw	fp,24(sp)
8020f480:	df000604 	addi	fp,sp,24
8020f484:	e13ffc15 	stw	r4,-16(fp)
8020f488:	e17ffd15 	stw	r5,-12(fp)
8020f48c:	e1bffe15 	stw	r6,-8(fp)
8020f490:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
8020f494:	e0800217 	ldw	r2,8(fp)
8020f498:	d8800115 	stw	r2,4(sp)
8020f49c:	e0bfff17 	ldw	r2,-4(fp)
8020f4a0:	d8800015 	stw	r2,0(sp)
8020f4a4:	000f883a 	mov	r7,zero
8020f4a8:	e1bffe17 	ldw	r6,-8(fp)
8020f4ac:	e17ffd17 	ldw	r5,-12(fp)
8020f4b0:	e13ffc17 	ldw	r4,-16(fp)
8020f4b4:	020f18c0 	call	8020f18c <alt_msgdma_construct_prefetcher_standard_descriptor>
            read_address, 0, length, control);
}
8020f4b8:	e037883a 	mov	sp,fp
8020f4bc:	dfc00117 	ldw	ra,4(sp)
8020f4c0:	df000017 	ldw	fp,0(sp)
8020f4c4:	dec00204 	addi	sp,sp,8
8020f4c8:	f800283a 	ret

8020f4cc <alt_msgdma_construct_prefetcher_extended_st_to_mm_descriptor>:
    alt_u32 length, 
    alt_u32 control, 
    alt_u16 sequence_number,
    alt_u8 write_burst_count,
    alt_u16 write_stride)
{
8020f4cc:	deffee04 	addi	sp,sp,-72
8020f4d0:	dfc01115 	stw	ra,68(sp)
8020f4d4:	df001015 	stw	fp,64(sp)
8020f4d8:	df001004 	addi	fp,sp,64
8020f4dc:	e13ff915 	stw	r4,-28(fp)
8020f4e0:	e17ffa15 	stw	r5,-24(fp)
8020f4e4:	e1bffb15 	stw	r6,-20(fp)
8020f4e8:	e1fffc15 	stw	r7,-16(fp)
8020f4ec:	e1000417 	ldw	r4,16(fp)
8020f4f0:	e0c00517 	ldw	r3,20(fp)
8020f4f4:	e0800617 	ldw	r2,24(fp)
8020f4f8:	e13ffd0d 	sth	r4,-12(fp)
8020f4fc:	e0fffe05 	stb	r3,-8(fp)
8020f500:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor, 
8020f504:	e0bffd0b 	ldhu	r2,-12(fp)
8020f508:	e0fffe03 	ldbu	r3,-8(fp)
8020f50c:	e13fff0b 	ldhu	r4,-4(fp)
8020f510:	d9000815 	stw	r4,32(sp)
8020f514:	d8000715 	stw	zero,28(sp)
8020f518:	d8c00615 	stw	r3,24(sp)
8020f51c:	d8000515 	stw	zero,20(sp)
8020f520:	d8800415 	stw	r2,16(sp)
8020f524:	e0800317 	ldw	r2,12(fp)
8020f528:	d8800315 	stw	r2,12(sp)
8020f52c:	e0800217 	ldw	r2,8(fp)
8020f530:	d8800215 	stw	r2,8(sp)
8020f534:	e0bffc17 	ldw	r2,-16(fp)
8020f538:	d8800115 	stw	r2,4(sp)
8020f53c:	e0bffb17 	ldw	r2,-20(fp)
8020f540:	d8800015 	stw	r2,0(sp)
8020f544:	000f883a 	mov	r7,zero
8020f548:	000d883a 	mov	r6,zero
8020f54c:	e17ffa17 	ldw	r5,-24(fp)
8020f550:	e13ff917 	ldw	r4,-28(fp)
8020f554:	020f2300 	call	8020f230 <alt_msgdma_construct_prefetcher_extended_descriptor>
            0, 0, write_address_high, write_address_low, length, control, 
            sequence_number, 0, write_burst_count, 0, write_stride);
}
8020f558:	e037883a 	mov	sp,fp
8020f55c:	dfc00117 	ldw	ra,4(sp)
8020f560:	df000017 	ldw	fp,0(sp)
8020f564:	dec00204 	addi	sp,sp,8
8020f568:	f800283a 	ret

8020f56c <alt_msgdma_construct_prefetcher_extended_mm_to_st_descriptor>:
    alt_u32 length, 
    alt_u32 control, 
    alt_u16 sequence_number, 
    alt_u8 read_burst_count, 
    alt_u16 read_stride)
{
8020f56c:	deffee04 	addi	sp,sp,-72
8020f570:	dfc01115 	stw	ra,68(sp)
8020f574:	df001015 	stw	fp,64(sp)
8020f578:	df001004 	addi	fp,sp,64
8020f57c:	e13ff915 	stw	r4,-28(fp)
8020f580:	e17ffa15 	stw	r5,-24(fp)
8020f584:	e1bffb15 	stw	r6,-20(fp)
8020f588:	e1fffc15 	stw	r7,-16(fp)
8020f58c:	e1000417 	ldw	r4,16(fp)
8020f590:	e0c00517 	ldw	r3,20(fp)
8020f594:	e0800617 	ldw	r2,24(fp)
8020f598:	e13ffd0d 	sth	r4,-12(fp)
8020f59c:	e0fffe05 	stb	r3,-8(fp)
8020f5a0:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor,
8020f5a4:	e0bffd0b 	ldhu	r2,-12(fp)
8020f5a8:	e0fffe03 	ldbu	r3,-8(fp)
8020f5ac:	e13fff0b 	ldhu	r4,-4(fp)
8020f5b0:	d8000815 	stw	zero,32(sp)
8020f5b4:	d9000715 	stw	r4,28(sp)
8020f5b8:	d8000615 	stw	zero,24(sp)
8020f5bc:	d8c00515 	stw	r3,20(sp)
8020f5c0:	d8800415 	stw	r2,16(sp)
8020f5c4:	e0800317 	ldw	r2,12(fp)
8020f5c8:	d8800315 	stw	r2,12(sp)
8020f5cc:	e0800217 	ldw	r2,8(fp)
8020f5d0:	d8800215 	stw	r2,8(sp)
8020f5d4:	d8000115 	stw	zero,4(sp)
8020f5d8:	d8000015 	stw	zero,0(sp)
8020f5dc:	e1fffc17 	ldw	r7,-16(fp)
8020f5e0:	e1bffb17 	ldw	r6,-20(fp)
8020f5e4:	e17ffa17 	ldw	r5,-24(fp)
8020f5e8:	e13ff917 	ldw	r4,-28(fp)
8020f5ec:	020f2300 	call	8020f230 <alt_msgdma_construct_prefetcher_extended_descriptor>
            read_address_high, read_address_low, 0, 0, length, control, 
            sequence_number, read_burst_count, 0, read_stride, 0);
}
8020f5f0:	e037883a 	mov	sp,fp
8020f5f4:	dfc00117 	ldw	ra,4(sp)
8020f5f8:	df000017 	ldw	fp,0(sp)
8020f5fc:	dec00204 	addi	sp,sp,8
8020f600:	f800283a 	ret

8020f604 <alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor>:
    alt_u16 sequence_number,
    alt_u8 read_burst_count,
    alt_u8 write_burst_count, 
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
8020f604:	deffec04 	addi	sp,sp,-80
8020f608:	dfc01315 	stw	ra,76(sp)
8020f60c:	df001215 	stw	fp,72(sp)
8020f610:	df001204 	addi	fp,sp,72
8020f614:	e13ff715 	stw	r4,-36(fp)
8020f618:	e17ff815 	stw	r5,-32(fp)
8020f61c:	e1bff915 	stw	r6,-28(fp)
8020f620:	e1fffa15 	stw	r7,-24(fp)
8020f624:	e1800617 	ldw	r6,24(fp)
8020f628:	e1400717 	ldw	r5,28(fp)
8020f62c:	e1000817 	ldw	r4,32(fp)
8020f630:	e0c00917 	ldw	r3,36(fp)
8020f634:	e0800a17 	ldw	r2,40(fp)
8020f638:	e1bffb0d 	sth	r6,-20(fp)
8020f63c:	e17ffc05 	stb	r5,-16(fp)
8020f640:	e13ffd05 	stb	r4,-12(fp)
8020f644:	e0fffe0d 	sth	r3,-8(fp)
8020f648:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor,
8020f64c:	e0bffb0b 	ldhu	r2,-20(fp)
8020f650:	e0fffc03 	ldbu	r3,-16(fp)
8020f654:	e13ffd03 	ldbu	r4,-12(fp)
8020f658:	e17ffe0b 	ldhu	r5,-8(fp)
8020f65c:	e1bfff0b 	ldhu	r6,-4(fp)
8020f660:	d9800815 	stw	r6,32(sp)
8020f664:	d9400715 	stw	r5,28(sp)
8020f668:	d9000615 	stw	r4,24(sp)
8020f66c:	d8c00515 	stw	r3,20(sp)
8020f670:	d8800415 	stw	r2,16(sp)
8020f674:	e0800517 	ldw	r2,20(fp)
8020f678:	d8800315 	stw	r2,12(sp)
8020f67c:	e0800417 	ldw	r2,16(fp)
8020f680:	d8800215 	stw	r2,8(sp)
8020f684:	e0800317 	ldw	r2,12(fp)
8020f688:	d8800115 	stw	r2,4(sp)
8020f68c:	e0800217 	ldw	r2,8(fp)
8020f690:	d8800015 	stw	r2,0(sp)
8020f694:	e1fffa17 	ldw	r7,-24(fp)
8020f698:	e1bff917 	ldw	r6,-28(fp)
8020f69c:	e17ff817 	ldw	r5,-32(fp)
8020f6a0:	e13ff717 	ldw	r4,-36(fp)
8020f6a4:	020f2300 	call	8020f230 <alt_msgdma_construct_prefetcher_extended_descriptor>
            read_address_high, read_address_low, write_address_high, 
            write_address_low, length, control, sequence_number, 
            read_burst_count, write_burst_count, read_stride, write_stride);

}
8020f6a8:	e037883a 	mov	sp,fp
8020f6ac:	dfc00117 	ldw	ra,4(sp)
8020f6b0:	df000017 	ldw	fp,0(sp)
8020f6b4:	dec00204 	addi	sp,sp,8
8020f6b8:	f800283a 	ret

8020f6bc <alt_msgdma_prefetcher_add_standard_desc_to_list>:
 *           descriptor.next_ptr not pointing back to itslef)
 */
int alt_msgdma_prefetcher_add_standard_desc_to_list (
    alt_msgdma_prefetcher_standard_descriptor** list,
    alt_msgdma_prefetcher_standard_descriptor* descriptor)
{
8020f6bc:	defffc04 	addi	sp,sp,-16
8020f6c0:	df000315 	stw	fp,12(sp)
8020f6c4:	df000304 	addi	fp,sp,12
8020f6c8:	e13ffe15 	stw	r4,-8(fp)
8020f6cc:	e17fff15 	stw	r5,-4(fp)
    alt_msgdma_prefetcher_standard_descriptor *last_descr_ptr;
    
    if (descriptor == NULL)
8020f6d0:	e0bfff17 	ldw	r2,-4(fp)
8020f6d4:	1000021e 	bne	r2,zero,8020f6e0 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x24>
    {
        return -EINVAL;  /* this descriptor cannot be NULL */
8020f6d8:	00bffa84 	movi	r2,-22
8020f6dc:	00002f06 	br	8020f79c <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
    }
    if (descriptor->next_desc_ptr != (alt_u32)descriptor)
8020f6e0:	e0bfff17 	ldw	r2,-4(fp)
8020f6e4:	10c00317 	ldw	r3,12(r2)
8020f6e8:	e0bfff17 	ldw	r2,-4(fp)
8020f6ec:	18800226 	beq	r3,r2,8020f6f8 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x3c>
    {
        return -EINVAL;  /* descriptor.next_ptr must point to itself */
8020f6f0:	00bffa84 	movi	r2,-22
8020f6f4:	00002906 	br	8020f79c <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
    }
    if (*list == NULL)
8020f6f8:	e0bffe17 	ldw	r2,-8(fp)
8020f6fc:	10800017 	ldw	r2,0(r2)
8020f700:	1000051e 	bne	r2,zero,8020f718 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x5c>
    {
        *list = descriptor;  /* make this root-node if list is empty */
8020f704:	e0bffe17 	ldw	r2,-8(fp)
8020f708:	e0ffff17 	ldw	r3,-4(fp)
8020f70c:	10c00015 	stw	r3,0(r2)
        return 0;  /* successfully added */
8020f710:	0005883a 	mov	r2,zero
8020f714:	00002106 	br	8020f79c <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
    }
    if (*list == descriptor)
8020f718:	e0bffe17 	ldw	r2,-8(fp)
8020f71c:	10c00017 	ldw	r3,0(r2)
8020f720:	e0bfff17 	ldw	r2,-4(fp)
8020f724:	1880021e 	bne	r3,r2,8020f730 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x74>
    {
        return -EINVAL;  /* this descriptor cannot already be root-node */
8020f728:	00bffa84 	movi	r2,-22
8020f72c:	00001b06 	br	8020f79c <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
    }
    
    /* get to last node in the list */
    last_descr_ptr = *list; /* start at list root-node */
8020f730:	e0bffe17 	ldw	r2,-8(fp)
8020f734:	10800017 	ldw	r2,0(r2)
8020f738:	e0bffd15 	stw	r2,-12(fp)
    /* traverse list until you get the last node */
    while (last_descr_ptr->next_desc_ptr != (alt_u32)*list)  
8020f73c:	00000906 	br	8020f764 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xa8>
    {
        if (last_descr_ptr->next_desc_ptr == (alt_u32)descriptor)
8020f740:	e0bffd17 	ldw	r2,-12(fp)
8020f744:	10c00317 	ldw	r3,12(r2)
8020f748:	e0bfff17 	ldw	r2,-4(fp)
8020f74c:	1880021e 	bne	r3,r2,8020f758 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x9c>
        {
            return -EINVAL;  /* descriptor cannot already be in the list */
8020f750:	00bffa84 	movi	r2,-22
8020f754:	00001106 	br	8020f79c <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
        }
        last_descr_ptr = 
            (alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
8020f758:	e0bffd17 	ldw	r2,-12(fp)
8020f75c:	10800317 	ldw	r2,12(r2)
    {
        if (last_descr_ptr->next_desc_ptr == (alt_u32)descriptor)
        {
            return -EINVAL;  /* descriptor cannot already be in the list */
        }
        last_descr_ptr = 
8020f760:	e0bffd15 	stw	r2,-12(fp)
    }
    
    /* get to last node in the list */
    last_descr_ptr = *list; /* start at list root-node */
    /* traverse list until you get the last node */
    while (last_descr_ptr->next_desc_ptr != (alt_u32)*list)  
8020f764:	e0bffd17 	ldw	r2,-12(fp)
8020f768:	10800317 	ldw	r2,12(r2)
8020f76c:	e0fffe17 	ldw	r3,-8(fp)
8020f770:	18c00017 	ldw	r3,0(r3)
8020f774:	10fff21e 	bne	r2,r3,8020f740 <__reset+0xfa1ef740>
        }
        last_descr_ptr = 
            (alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
    }
    /* add this descriptor to end of list */
    last_descr_ptr->next_desc_ptr = (alt_u32)((uintptr_t)descriptor);
8020f778:	e0ffff17 	ldw	r3,-4(fp)
8020f77c:	e0bffd17 	ldw	r2,-12(fp)
8020f780:	10c00315 	stw	r3,12(r2)
    /* ensure new last pointer points the start of the list */
    descriptor->next_desc_ptr = (alt_u32)((uintptr_t)*list);  
8020f784:	e0bffe17 	ldw	r2,-8(fp)
8020f788:	10800017 	ldw	r2,0(r2)
8020f78c:	1007883a 	mov	r3,r2
8020f790:	e0bfff17 	ldw	r2,-4(fp)
8020f794:	10c00315 	stw	r3,12(r2)
    return 0; /* successfully added */
8020f798:	0005883a 	mov	r2,zero
}
8020f79c:	e037883a 	mov	sp,fp
8020f7a0:	df000017 	ldw	fp,0(sp)
8020f7a4:	dec00104 	addi	sp,sp,4
8020f7a8:	f800283a 	ret

8020f7ac <alt_msgdma_prefetcher_add_extended_desc_to_list>:

int alt_msgdma_prefetcher_add_extended_desc_to_list (
    alt_msgdma_prefetcher_extended_descriptor** list,
    alt_msgdma_prefetcher_extended_descriptor* descriptor)
{
8020f7ac:	defff804 	addi	sp,sp,-32
8020f7b0:	df000715 	stw	fp,28(sp)
8020f7b4:	df000704 	addi	fp,sp,28
8020f7b8:	e13ffe15 	stw	r4,-8(fp)
8020f7bc:	e17fff15 	stw	r5,-4(fp)
    alt_msgdma_prefetcher_extended_descriptor *last_descr_ptr;
    msgdma_addr64 root_node_addr, next_node_addr;
    
    if (descriptor == NULL)
8020f7c0:	e13fff17 	ldw	r4,-4(fp)
8020f7c4:	2000021e 	bne	r4,zero,8020f7d0 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x24>
    {
        return -EINVAL;  /* this descriptor cannot be NULL */
8020f7c8:	00bffa84 	movi	r2,-22
8020f7cc:	00005906 	br	8020f934 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
    }
    
    next_node_addr.u64 = (uintptr_t)descriptor;
8020f7d0:	e13fff17 	ldw	r4,-4(fp)
8020f7d4:	2015883a 	mov	r10,r4
8020f7d8:	0017883a 	mov	r11,zero
8020f7dc:	e2bffc15 	stw	r10,-16(fp)
8020f7e0:	e2fffd15 	stw	r11,-12(fp)
    if( (descriptor->next_desc_ptr_low != next_node_addr.u32[0]) ||
8020f7e4:	e13fff17 	ldw	r4,-4(fp)
8020f7e8:	21400317 	ldw	r5,12(r4)
8020f7ec:	e13ffc17 	ldw	r4,-16(fp)
8020f7f0:	2900041e 	bne	r5,r4,8020f804 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x58>
        (descriptor->next_desc_ptr_high != next_node_addr.u32[1]))
8020f7f4:	e13fff17 	ldw	r4,-4(fp)
8020f7f8:	21400b17 	ldw	r5,44(r4)
8020f7fc:	e13ffd17 	ldw	r4,-12(fp)
    {
        return -EINVAL;  /* this descriptor cannot be NULL */
    }
    
    next_node_addr.u64 = (uintptr_t)descriptor;
    if( (descriptor->next_desc_ptr_low != next_node_addr.u32[0]) ||
8020f800:	29000226 	beq	r5,r4,8020f80c <alt_msgdma_prefetcher_add_extended_desc_to_list+0x60>
        (descriptor->next_desc_ptr_high != next_node_addr.u32[1]))
    {
        return -EINVAL;  /* descriptor.next_ptr must point to itself */
8020f804:	00bffa84 	movi	r2,-22
8020f808:	00004a06 	br	8020f934 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
    }
    
    if (*list == NULL)
8020f80c:	e13ffe17 	ldw	r4,-8(fp)
8020f810:	21000017 	ldw	r4,0(r4)
8020f814:	2000051e 	bne	r4,zero,8020f82c <alt_msgdma_prefetcher_add_extended_desc_to_list+0x80>
    {
        *list = descriptor;  /* make this the root-node if list is empty */
8020f818:	e0bffe17 	ldw	r2,-8(fp)
8020f81c:	e0ffff17 	ldw	r3,-4(fp)
8020f820:	10c00015 	stw	r3,0(r2)
        return 0;
8020f824:	0005883a 	mov	r2,zero
8020f828:	00004206 	br	8020f934 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
    }
    if (*list == descriptor)
8020f82c:	e13ffe17 	ldw	r4,-8(fp)
8020f830:	21400017 	ldw	r5,0(r4)
8020f834:	e13fff17 	ldw	r4,-4(fp)
8020f838:	2900021e 	bne	r5,r4,8020f844 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x98>
    {
        return -EINVAL;  /* this descriptor cannot already be root-node */
8020f83c:	00bffa84 	movi	r2,-22
8020f840:	00003c06 	br	8020f934 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
    }
    
    /* get to last node in the list */
    last_descr_ptr = *list; /* start at list root-node */
8020f844:	e13ffe17 	ldw	r4,-8(fp)
8020f848:	21000017 	ldw	r4,0(r4)
8020f84c:	e13ff915 	stw	r4,-28(fp)
    /* the last nodes next ptr should point to the root node*/
    root_node_addr.u64 = (uintptr_t)*list;
8020f850:	e13ffe17 	ldw	r4,-8(fp)
8020f854:	21000017 	ldw	r4,0(r4)
8020f858:	2011883a 	mov	r8,r4
8020f85c:	0013883a 	mov	r9,zero
8020f860:	e23ffa15 	stw	r8,-24(fp)
8020f864:	e27ffb15 	stw	r9,-20(fp)
    
    /* traverse list until you get the last node */
    while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
8020f868:	00001806 	br	8020f8cc <alt_msgdma_prefetcher_add_extended_desc_to_list+0x120>
        || (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
    {
        /* first check if descriptor already in the list */
        next_node_addr.u64 = (uintptr_t)descriptor;
8020f86c:	e13fff17 	ldw	r4,-4(fp)
8020f870:	200d883a 	mov	r6,r4
8020f874:	000f883a 	mov	r7,zero
8020f878:	e1bffc15 	stw	r6,-16(fp)
8020f87c:	e1fffd15 	stw	r7,-12(fp)
        if ((last_descr_ptr->next_desc_ptr_low == next_node_addr.u32[0])
8020f880:	e13ff917 	ldw	r4,-28(fp)
8020f884:	21400317 	ldw	r5,12(r4)
8020f888:	e13ffc17 	ldw	r4,-16(fp)
8020f88c:	2900061e 	bne	r5,r4,8020f8a8 <alt_msgdma_prefetcher_add_extended_desc_to_list+0xfc>
            && (last_descr_ptr->next_desc_ptr_high == next_node_addr.u32[1]))
8020f890:	e13ff917 	ldw	r4,-28(fp)
8020f894:	21400b17 	ldw	r5,44(r4)
8020f898:	e13ffd17 	ldw	r4,-12(fp)
8020f89c:	2900021e 	bne	r5,r4,8020f8a8 <alt_msgdma_prefetcher_add_extended_desc_to_list+0xfc>
        {
            return -EINVAL;  /* descriptor cannot already be in the list */
8020f8a0:	00bffa84 	movi	r2,-22
8020f8a4:	00002306 	br	8020f934 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
        }
        /* go to next node in list, using 64 bit address */
        next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
8020f8a8:	e13ff917 	ldw	r4,-28(fp)
8020f8ac:	21000317 	ldw	r4,12(r4)
8020f8b0:	e13ffc15 	stw	r4,-16(fp)
        next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
8020f8b4:	e13ff917 	ldw	r4,-28(fp)
8020f8b8:	21000b17 	ldw	r4,44(r4)
8020f8bc:	e13ffd15 	stw	r4,-12(fp)
        last_descr_ptr = 
            (alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
8020f8c0:	e13ffc17 	ldw	r4,-16(fp)
8020f8c4:	e17ffd17 	ldw	r5,-12(fp)
            return -EINVAL;  /* descriptor cannot already be in the list */
        }
        /* go to next node in list, using 64 bit address */
        next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
        next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
        last_descr_ptr = 
8020f8c8:	e13ff915 	stw	r4,-28(fp)
    last_descr_ptr = *list; /* start at list root-node */
    /* the last nodes next ptr should point to the root node*/
    root_node_addr.u64 = (uintptr_t)*list;
    
    /* traverse list until you get the last node */
    while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
8020f8cc:	e13ff917 	ldw	r4,-28(fp)
8020f8d0:	21400317 	ldw	r5,12(r4)
8020f8d4:	e13ffa17 	ldw	r4,-24(fp)
8020f8d8:	293fe41e 	bne	r5,r4,8020f86c <__reset+0xfa1ef86c>
        || (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
8020f8dc:	e13ff917 	ldw	r4,-28(fp)
8020f8e0:	21400b17 	ldw	r5,44(r4)
8020f8e4:	e13ffb17 	ldw	r4,-20(fp)
8020f8e8:	293fe01e 	bne	r5,r4,8020f86c <__reset+0xfa1ef86c>
        next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
        last_descr_ptr = 
            (alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
    }
    /* add this descriptor to end of list */
    next_node_addr.u64 = (uintptr_t)descriptor;
8020f8ec:	e13fff17 	ldw	r4,-4(fp)
8020f8f0:	2005883a 	mov	r2,r4
8020f8f4:	0007883a 	mov	r3,zero
8020f8f8:	e0bffc15 	stw	r2,-16(fp)
8020f8fc:	e0fffd15 	stw	r3,-12(fp)
    last_descr_ptr->next_desc_ptr_low = next_node_addr.u32[0];
8020f900:	e0fffc17 	ldw	r3,-16(fp)
8020f904:	e0bff917 	ldw	r2,-28(fp)
8020f908:	10c00315 	stw	r3,12(r2)
    last_descr_ptr->next_desc_ptr_high = next_node_addr.u32[1];
8020f90c:	e0fffd17 	ldw	r3,-12(fp)
8020f910:	e0bff917 	ldw	r2,-28(fp)
8020f914:	10c00b15 	stw	r3,44(r2)
    /* ensure new last pointer points the beginning of the list */
    descriptor->next_desc_ptr_low = root_node_addr.u32[0];
8020f918:	e0fffa17 	ldw	r3,-24(fp)
8020f91c:	e0bfff17 	ldw	r2,-4(fp)
8020f920:	10c00315 	stw	r3,12(r2)
    descriptor->next_desc_ptr_high = root_node_addr.u32[1];
8020f924:	e0fffb17 	ldw	r3,-20(fp)
8020f928:	e0bfff17 	ldw	r2,-4(fp)
8020f92c:	10c00b15 	stw	r3,44(r2)
    return 0;
8020f930:	0005883a 	mov	r2,zero
}
8020f934:	e037883a 	mov	sp,fp
8020f938:	df000017 	ldw	fp,0(sp)
8020f93c:	dec00104 	addi	sp,sp,4
8020f940:	f800283a 	ret

8020f944 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits>:
 */ 
int alt_msgdma_prefetcher_set_std_list_own_by_hw_bits (
    alt_msgdma_prefetcher_standard_descriptor *list,
    alt_u8 last_desc_owned_by_sw,
    alt_u8 dcache_flush_desc_list)    
{
8020f944:	defff804 	addi	sp,sp,-32
8020f948:	dfc00715 	stw	ra,28(sp)
8020f94c:	df000615 	stw	fp,24(sp)
8020f950:	df000604 	addi	fp,sp,24
8020f954:	e13ffd15 	stw	r4,-12(fp)
8020f958:	2807883a 	mov	r3,r5
8020f95c:	3005883a 	mov	r2,r6
8020f960:	e0fffe05 	stb	r3,-8(fp)
8020f964:	e0bfff05 	stb	r2,-4(fp)
    alt_u32 descriptor_control_field = 0;
8020f968:	e03ffc15 	stw	zero,-16(fp)
    alt_msgdma_prefetcher_standard_descriptor *last_descr_ptr;
    alt_u32 descriptor_count = 0;
8020f96c:	e03ffb15 	stw	zero,-20(fp)
    
    if (list == NULL)
8020f970:	e0bffd17 	ldw	r2,-12(fp)
8020f974:	1000021e 	bne	r2,zero,8020f980 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x3c>
    {
        return -EINVAL;  /* this list cannot be empty */
8020f978:	00bffa84 	movi	r2,-22
8020f97c:	00002f06 	br	8020fa3c <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0xf8>
    }

    /* update all nodes in the list */
    last_descr_ptr = list; /* start at list root-node */
8020f980:	e0bffd17 	ldw	r2,-12(fp)
8020f984:	e0bffa15 	stw	r2,-24(fp)
    /* traverse list to update all of the nodes */
    while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
8020f988:	00000d06 	br	8020f9c0 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x7c>
    {
        /* get current value */
        descriptor_control_field = last_descr_ptr->control;
8020f98c:	e0bffa17 	ldw	r2,-24(fp)
8020f990:	10800717 	ldw	r2,28(r2)
8020f994:	e0bffc15 	stw	r2,-16(fp)
        /* update own_by_hw bit only */
        last_descr_ptr->control = descriptor_control_field 
                | ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
8020f998:	e0bffc17 	ldw	r2,-16(fp)
8020f99c:	10d00034 	orhi	r3,r2,16384
    while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
    {
        /* get current value */
        descriptor_control_field = last_descr_ptr->control;
        /* update own_by_hw bit only */
        last_descr_ptr->control = descriptor_control_field 
8020f9a0:	e0bffa17 	ldw	r2,-24(fp)
8020f9a4:	10c00715 	stw	r3,28(r2)
                | ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
        /* go to next node in list */
        last_descr_ptr = 
            (alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
8020f9a8:	e0bffa17 	ldw	r2,-24(fp)
8020f9ac:	10800317 	ldw	r2,12(r2)
        descriptor_control_field = last_descr_ptr->control;
        /* update own_by_hw bit only */
        last_descr_ptr->control = descriptor_control_field 
                | ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
        /* go to next node in list */
        last_descr_ptr = 
8020f9b0:	e0bffa15 	stw	r2,-24(fp)
            (alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
            
        descriptor_count++;
8020f9b4:	e0bffb17 	ldw	r2,-20(fp)
8020f9b8:	10800044 	addi	r2,r2,1
8020f9bc:	e0bffb15 	stw	r2,-20(fp)
    }

    /* update all nodes in the list */
    last_descr_ptr = list; /* start at list root-node */
    /* traverse list to update all of the nodes */
    while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
8020f9c0:	e0bffa17 	ldw	r2,-24(fp)
8020f9c4:	10c00317 	ldw	r3,12(r2)
8020f9c8:	e0bffd17 	ldw	r2,-12(fp)
8020f9cc:	18bfef1e 	bne	r3,r2,8020f98c <__reset+0xfa1ef98c>
            (alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
            
        descriptor_count++;
    }
    /* update the last node in the list, currently last_descr_ptr after while loop */
    descriptor_control_field = last_descr_ptr->control;    /* get current value */
8020f9d0:	e0bffa17 	ldw	r2,-24(fp)
8020f9d4:	10800717 	ldw	r2,28(r2)
8020f9d8:	e0bffc15 	stw	r2,-16(fp)
    /* update own_by_hw bit only */
    if (last_desc_owned_by_sw)
8020f9dc:	e0bffe03 	ldbu	r2,-8(fp)
8020f9e0:	10000726 	beq	r2,zero,8020fa00 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0xbc>
    {
        last_descr_ptr->control = descriptor_control_field 
            & ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK;
8020f9e4:	e0fffc17 	ldw	r3,-16(fp)
8020f9e8:	00b00034 	movhi	r2,49152
8020f9ec:	10bfffc4 	addi	r2,r2,-1
8020f9f0:	1886703a 	and	r3,r3,r2
    /* update the last node in the list, currently last_descr_ptr after while loop */
    descriptor_control_field = last_descr_ptr->control;    /* get current value */
    /* update own_by_hw bit only */
    if (last_desc_owned_by_sw)
    {
        last_descr_ptr->control = descriptor_control_field 
8020f9f4:	e0bffa17 	ldw	r2,-24(fp)
8020f9f8:	10c00715 	stw	r3,28(r2)
8020f9fc:	00000406 	br	8020fa10 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0xcc>
            & ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK;
    }
    else {
        last_descr_ptr->control = descriptor_control_field 
            | ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;        
8020fa00:	e0bffc17 	ldw	r2,-16(fp)
8020fa04:	10d00034 	orhi	r3,r2,16384
    {
        last_descr_ptr->control = descriptor_control_field 
            & ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK;
    }
    else {
        last_descr_ptr->control = descriptor_control_field 
8020fa08:	e0bffa17 	ldw	r2,-24(fp)
8020fa0c:	10c00715 	stw	r3,28(r2)
            | ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;        
    }
    
    descriptor_count++;
8020fa10:	e0bffb17 	ldw	r2,-20(fp)
8020fa14:	10800044 	addi	r2,r2,1
8020fa18:	e0bffb15 	stw	r2,-20(fp)
    
    if (dcache_flush_desc_list)
8020fa1c:	e0bfff03 	ldbu	r2,-4(fp)
8020fa20:	10000526 	beq	r2,zero,8020fa38 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0xf4>
    {        
        alt_dcache_flush(list,sizeof(alt_msgdma_prefetcher_standard_descriptor) * descriptor_count);
8020fa24:	e0bffb17 	ldw	r2,-20(fp)
8020fa28:	1004917a 	slli	r2,r2,5
8020fa2c:	100b883a 	mov	r5,r2
8020fa30:	e13ffd17 	ldw	r4,-12(fp)
8020fa34:	02105080 	call	80210508 <alt_dcache_flush>
    }
    
    return 0;
8020fa38:	0005883a 	mov	r2,zero
}
8020fa3c:	e037883a 	mov	sp,fp
8020fa40:	dfc00117 	ldw	ra,4(sp)
8020fa44:	df000017 	ldw	fp,0(sp)
8020fa48:	dec00204 	addi	sp,sp,8
8020fa4c:	f800283a 	ret

8020fa50 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits>:
 */    
int alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits (
    alt_msgdma_prefetcher_extended_descriptor *list,
    alt_u8 last_desc_owned_by_sw,
    alt_u8 dcache_flush_desc_list) 
{    
8020fa50:	defff404 	addi	sp,sp,-48
8020fa54:	dfc00b15 	stw	ra,44(sp)
8020fa58:	df000a15 	stw	fp,40(sp)
8020fa5c:	df000a04 	addi	fp,sp,40
8020fa60:	e13ffd15 	stw	r4,-12(fp)
8020fa64:	3009883a 	mov	r4,r6
8020fa68:	e17ffe05 	stb	r5,-8(fp)
8020fa6c:	e13fff05 	stb	r4,-4(fp)
    alt_u32 descriptor_control_field = 0;
8020fa70:	e03ff815 	stw	zero,-32(fp)
    msgdma_addr64 root_node_addr, next_node_addr;
    alt_msgdma_prefetcher_extended_descriptor *last_descr_ptr;
    alt_u32 descriptor_count = 0;
8020fa74:	e03ff715 	stw	zero,-36(fp)
    
    if (list == NULL)
8020fa78:	e13ffd17 	ldw	r4,-12(fp)
8020fa7c:	2000021e 	bne	r4,zero,8020fa88 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x38>
    {
        return -EINVAL;  /* this list cannot be empty */
8020fa80:	00bffa84 	movi	r2,-22
8020fa84:	00003e06 	br	8020fb80 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x130>
    }
    
    /* update all nodes in the list */
    last_descr_ptr = list; /* start at list root-node */
8020fa88:	e13ffd17 	ldw	r4,-12(fp)
8020fa8c:	e13ff615 	stw	r4,-40(fp)
    /* the last nodes next ptr should point to the root node*/
    root_node_addr.u64 = (uintptr_t)list;
8020fa90:	e13ffd17 	ldw	r4,-12(fp)
8020fa94:	2005883a 	mov	r2,r4
8020fa98:	0007883a 	mov	r3,zero
8020fa9c:	e0bff915 	stw	r2,-28(fp)
8020faa0:	e0fffa15 	stw	r3,-24(fp)

    /* traverse list until you get the last node */
    while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
8020faa4:	00001306 	br	8020faf4 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0xa4>
        || (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
    {
        /* start with current value */
        descriptor_control_field = last_descr_ptr->control;
8020faa8:	e0bff617 	ldw	r2,-40(fp)
8020faac:	10800f17 	ldw	r2,60(r2)
8020fab0:	e0bff815 	stw	r2,-32(fp)
        /* update own_by_hw bit only */
        last_descr_ptr->control = descriptor_control_field 
                | ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
8020fab4:	e0bff817 	ldw	r2,-32(fp)
8020fab8:	10d00034 	orhi	r3,r2,16384
        || (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
    {
        /* start with current value */
        descriptor_control_field = last_descr_ptr->control;
        /* update own_by_hw bit only */
        last_descr_ptr->control = descriptor_control_field 
8020fabc:	e0bff617 	ldw	r2,-40(fp)
8020fac0:	10c00f15 	stw	r3,60(r2)
                | ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
        /* go to next node in list, using 64 bit address */
        next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
8020fac4:	e0bff617 	ldw	r2,-40(fp)
8020fac8:	10800317 	ldw	r2,12(r2)
8020facc:	e0bffb15 	stw	r2,-20(fp)
        next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
8020fad0:	e0bff617 	ldw	r2,-40(fp)
8020fad4:	10800b17 	ldw	r2,44(r2)
8020fad8:	e0bffc15 	stw	r2,-16(fp)
        last_descr_ptr = 
            (alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
8020fadc:	e0bffb17 	ldw	r2,-20(fp)
8020fae0:	e0fffc17 	ldw	r3,-16(fp)
        last_descr_ptr->control = descriptor_control_field 
                | ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
        /* go to next node in list, using 64 bit address */
        next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
        next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
        last_descr_ptr = 
8020fae4:	e0bff615 	stw	r2,-40(fp)
            (alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
        descriptor_count++;            
8020fae8:	e0bff717 	ldw	r2,-36(fp)
8020faec:	10800044 	addi	r2,r2,1
8020faf0:	e0bff715 	stw	r2,-36(fp)
    last_descr_ptr = list; /* start at list root-node */
    /* the last nodes next ptr should point to the root node*/
    root_node_addr.u64 = (uintptr_t)list;

    /* traverse list until you get the last node */
    while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
8020faf4:	e0bff617 	ldw	r2,-40(fp)
8020faf8:	10c00317 	ldw	r3,12(r2)
8020fafc:	e0bff917 	ldw	r2,-28(fp)
8020fb00:	18bfe91e 	bne	r3,r2,8020faa8 <__reset+0xfa1efaa8>
        || (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
8020fb04:	e0bff617 	ldw	r2,-40(fp)
8020fb08:	10c00b17 	ldw	r3,44(r2)
8020fb0c:	e0bffa17 	ldw	r2,-24(fp)
8020fb10:	18bfe51e 	bne	r3,r2,8020faa8 <__reset+0xfa1efaa8>
        last_descr_ptr = 
            (alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
        descriptor_count++;            
    }
    /* update the last node in the list, currently last_descr_ptr after while loop */
    descriptor_control_field = last_descr_ptr->control;    /* start with current value */
8020fb14:	e0bff617 	ldw	r2,-40(fp)
8020fb18:	10800f17 	ldw	r2,60(r2)
8020fb1c:	e0bff815 	stw	r2,-32(fp)
    /* update own_by_hw bit only */
    if (last_desc_owned_by_sw)
8020fb20:	e0bffe03 	ldbu	r2,-8(fp)
8020fb24:	10000726 	beq	r2,zero,8020fb44 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0xf4>
    {
        last_descr_ptr->control = descriptor_control_field 
            & ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK;
8020fb28:	e0fff817 	ldw	r3,-32(fp)
8020fb2c:	00b00034 	movhi	r2,49152
8020fb30:	10bfffc4 	addi	r2,r2,-1
8020fb34:	1886703a 	and	r3,r3,r2
    /* update the last node in the list, currently last_descr_ptr after while loop */
    descriptor_control_field = last_descr_ptr->control;    /* start with current value */
    /* update own_by_hw bit only */
    if (last_desc_owned_by_sw)
    {
        last_descr_ptr->control = descriptor_control_field 
8020fb38:	e0bff617 	ldw	r2,-40(fp)
8020fb3c:	10c00f15 	stw	r3,60(r2)
8020fb40:	00000406 	br	8020fb54 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x104>
            & ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK;
    }
    else {
        last_descr_ptr->control = descriptor_control_field 
            | ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;        
8020fb44:	e0bff817 	ldw	r2,-32(fp)
8020fb48:	10d00034 	orhi	r3,r2,16384
    {
        last_descr_ptr->control = descriptor_control_field 
            & ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK;
    }
    else {
        last_descr_ptr->control = descriptor_control_field 
8020fb4c:	e0bff617 	ldw	r2,-40(fp)
8020fb50:	10c00f15 	stw	r3,60(r2)
            | ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;        
    }
    
    descriptor_count++;
8020fb54:	e0bff717 	ldw	r2,-36(fp)
8020fb58:	10800044 	addi	r2,r2,1
8020fb5c:	e0bff715 	stw	r2,-36(fp)
    
    if (dcache_flush_desc_list)
8020fb60:	e0bfff03 	ldbu	r2,-4(fp)
8020fb64:	10000526 	beq	r2,zero,8020fb7c <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x12c>
    {        
        alt_dcache_flush(list,sizeof(alt_msgdma_prefetcher_extended_descriptor) * descriptor_count);        
8020fb68:	e0bff717 	ldw	r2,-36(fp)
8020fb6c:	100491ba 	slli	r2,r2,6
8020fb70:	100b883a 	mov	r5,r2
8020fb74:	e13ffd17 	ldw	r4,-12(fp)
8020fb78:	02105080 	call	80210508 <alt_dcache_flush>
    }
    
    return 0;
8020fb7c:	0005883a 	mov	r2,zero
}
8020fb80:	e037883a 	mov	sp,fp
8020fb84:	dfc00117 	ldw	ra,4(sp)
8020fb88:	df000017 	ldw	fp,0(sp)
8020fb8c:	dec00204 	addi	sp,sp,8
8020fb90:	f800283a 	ret

8020fb94 <alt_msgdma_start_prefetcher_with_list_addr>:
int alt_msgdma_start_prefetcher_with_list_addr (
    alt_msgdma_dev *dev,
    alt_u64  list_addr,
    alt_u8 park_mode_en,
    alt_u8 poll_en)
{
8020fb94:	deffef04 	addi	sp,sp,-68
8020fb98:	df001015 	stw	fp,64(sp)
8020fb9c:	df001004 	addi	fp,sp,64
8020fba0:	e13ffb15 	stw	r4,-20(fp)
8020fba4:	e17ffc15 	stw	r5,-16(fp)
8020fba8:	e1bffd15 	stw	r6,-12(fp)
8020fbac:	3807883a 	mov	r3,r7
8020fbb0:	e0800117 	ldw	r2,4(fp)
8020fbb4:	e0fffe05 	stb	r3,-8(fp)
8020fbb8:	e0bfff05 	stb	r2,-4(fp)
    alt_u32 prefetcher_ctl = 0;
8020fbbc:	e03ff015 	stw	zero,-64(fp)
    alt_u32 dispatcher_ctl = 0;
8020fbc0:	e03ff115 	stw	zero,-60(fp)
    alt_irq_context context = 0;
8020fbc4:	e03ff215 	stw	zero,-56(fp)
    
    /* use helper struct to get easy access to hi/low address */
    msgdma_addr64 root_node_addr;
    root_node_addr.u64 = list_addr;  
8020fbc8:	e0bffc17 	ldw	r2,-16(fp)
8020fbcc:	e0bff915 	stw	r2,-28(fp)
8020fbd0:	e0bffd17 	ldw	r2,-12(fp)
8020fbd4:	e0bffa15 	stw	r2,-24(fp)
     * semaphore. This ensures that accessing registers is thread-safe.
     */
    ALT_SEM_PEND (dev->regs_lock, 0);
    
    /* case where prefetcher already started, return busy error */ 
    prefetcher_ctl = IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base);
8020fbd8:	e0bffb17 	ldw	r2,-20(fp)
8020fbdc:	10800617 	ldw	r2,24(r2)
8020fbe0:	10800037 	ldwio	r2,0(r2)
8020fbe4:	e0bff015 	stw	r2,-64(fp)
    if(ALT_MSGDMA_PREFETCHER_CTRL_RUN_GET(prefetcher_ctl)){
8020fbe8:	e0bff017 	ldw	r2,-64(fp)
8020fbec:	1080004c 	andi	r2,r2,1
8020fbf0:	10000226 	beq	r2,zero,8020fbfc <alt_msgdma_start_prefetcher_with_list_addr+0x68>
        /* release the registers semaphore */
        ALT_SEM_POST (dev->regs_lock);
        return -EBUSY;
8020fbf4:	00bffc04 	movi	r2,-16
8020fbf8:	00009206 	br	8020fe44 <alt_msgdma_start_prefetcher_with_list_addr+0x2b0>
    }
        
    /* Stop the msgdma dispatcher from issuing more descriptors to the
       read or write masters  */
    /* stop issuing more descriptors */
    dispatcher_ctl = ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
8020fbfc:	00800804 	movi	r2,32
8020fc00:	e0bff115 	stw	r2,-60(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8020fc04:	0005303a 	rdctl	r2,status
8020fc08:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8020fc0c:	e0fff517 	ldw	r3,-44(fp)
8020fc10:	00bfff84 	movi	r2,-2
8020fc14:	1884703a 	and	r2,r3,r2
8020fc18:	1001703a 	wrctl	status,r2
  
  return context;
8020fc1c:	e0bff517 	ldw	r2,-44(fp)
    
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();
8020fc20:	e0bff215 	stw	r2,-56(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
8020fc24:	e0bffb17 	ldw	r2,-20(fp)
8020fc28:	10800317 	ldw	r2,12(r2)
8020fc2c:	10800104 	addi	r2,r2,4
8020fc30:	e0fff117 	ldw	r3,-60(fp)
8020fc34:	10c00035 	stwio	r3,0(r2)
    /*
     * Clear any (previous) status register information
     * that might occlude our error checking later.
     */
    IOWR_ALTERA_MSGDMA_CSR_STATUS( dev->csr_base, 
8020fc38:	e0bffb17 	ldw	r2,-20(fp)
8020fc3c:	10800317 	ldw	r2,12(r2)
8020fc40:	e0fffb17 	ldw	r3,-20(fp)
8020fc44:	18c00317 	ldw	r3,12(r3)
8020fc48:	18c00037 	ldwio	r3,0(r3)
8020fc4c:	10c00035 	stwio	r3,0(r2)
8020fc50:	e0bff217 	ldw	r2,-56(fp)
8020fc54:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8020fc58:	e0bff317 	ldw	r2,-52(fp)
8020fc5c:	1001703a 	wrctl	status,r2
     * If a callback routine has been previously registered which will be
     * called from the msgdma ISR. Set up dispatcher to:
     *  - Run
     *  - Stop on an error with any particular descriptor
     */
    if(dev->callback)
8020fc60:	e0bffb17 	ldw	r2,-20(fp)
8020fc64:	10800b17 	ldw	r2,44(r2)
8020fc68:	10002326 	beq	r2,zero,8020fcf8 <alt_msgdma_start_prefetcher_with_list_addr+0x164>
    {
        dispatcher_ctl |= (dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK 
8020fc6c:	e0bffb17 	ldw	r2,-20(fp)
8020fc70:	10c00d17 	ldw	r3,52(r2)
8020fc74:	e0bff117 	ldw	r2,-60(fp)
8020fc78:	1884b03a 	or	r2,r3,r2
8020fc7c:	10800514 	ori	r2,r2,20
8020fc80:	e0bff115 	stw	r2,-60(fp)
                | ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK );
        dispatcher_ctl &=  (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
8020fc84:	e0fff117 	ldw	r3,-60(fp)
8020fc88:	00bff7c4 	movi	r2,-33
8020fc8c:	1884703a 	and	r2,r3,r2
8020fc90:	e0bff115 	stw	r2,-60(fp)
        
        prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
8020fc94:	e0bff017 	ldw	r2,-64(fp)
8020fc98:	10800214 	ori	r2,r2,8
8020fc9c:	e0bff015 	stw	r2,-64(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8020fca0:	0005303a 	rdctl	r2,status
8020fca4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8020fca8:	e0fff717 	ldw	r3,-36(fp)
8020fcac:	00bfff84 	movi	r2,-2
8020fcb0:	1884703a 	and	r2,r3,r2
8020fcb4:	1001703a 	wrctl	status,r2
  
  return context;
8020fcb8:	e0bff717 	ldw	r2,-36(fp)
        /* making sure the read-modify-write below can't be pre-empted */
        context = alt_irq_disable_all(); 
8020fcbc:	e0bff215 	stw	r2,-56(fp)
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
8020fcc0:	e0bffb17 	ldw	r2,-20(fp)
8020fcc4:	10800317 	ldw	r2,12(r2)
8020fcc8:	10800104 	addi	r2,r2,4
8020fccc:	e0fff117 	ldw	r3,-60(fp)
8020fcd0:	10c00035 	stwio	r3,0(r2)
        IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
8020fcd4:	e0bffb17 	ldw	r2,-20(fp)
8020fcd8:	10800617 	ldw	r2,24(r2)
8020fcdc:	e0fff017 	ldw	r3,-64(fp)
8020fce0:	10c00035 	stwio	r3,0(r2)
8020fce4:	e0bff217 	ldw	r2,-56(fp)
8020fce8:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8020fcec:	e0bff417 	ldw	r2,-48(fp)
8020fcf0:	1001703a 	wrctl	status,r2
8020fcf4:	00002306 	br	8020fd84 <alt_msgdma_start_prefetcher_with_list_addr+0x1f0>
      *   - Stop on an error with any particular descriptor
      *   - Disable interrupt generation
      */
     else
     {
         dispatcher_ctl |= (dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK);
8020fcf8:	e0bffb17 	ldw	r2,-20(fp)
8020fcfc:	10c00d17 	ldw	r3,52(r2)
8020fd00:	e0bff117 	ldw	r2,-60(fp)
8020fd04:	1884b03a 	or	r2,r3,r2
8020fd08:	10800114 	ori	r2,r2,4
8020fd0c:	e0bff115 	stw	r2,-60(fp)
         dispatcher_ctl &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) 
8020fd10:	e0fff117 	ldw	r3,-60(fp)
8020fd14:	00bff3c4 	movi	r2,-49
8020fd18:	1884703a 	and	r2,r3,r2
8020fd1c:	e0bff115 	stw	r2,-60(fp)
                 & (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
         prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_CLR_MASK;
8020fd20:	e0fff017 	ldw	r3,-64(fp)
8020fd24:	00bffdc4 	movi	r2,-9
8020fd28:	1884703a 	and	r2,r3,r2
8020fd2c:	e0bff015 	stw	r2,-64(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8020fd30:	0005303a 	rdctl	r2,status
8020fd34:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8020fd38:	e0fff817 	ldw	r3,-32(fp)
8020fd3c:	00bfff84 	movi	r2,-2
8020fd40:	1884703a 	and	r2,r3,r2
8020fd44:	1001703a 	wrctl	status,r2
  
  return context;
8020fd48:	e0bff817 	ldw	r2,-32(fp)
         /* making sure the read-modify-write below can't be pre-empted */
         context = alt_irq_disable_all();
8020fd4c:	e0bff215 	stw	r2,-56(fp)
         IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
8020fd50:	e0bffb17 	ldw	r2,-20(fp)
8020fd54:	10800317 	ldw	r2,12(r2)
8020fd58:	10800104 	addi	r2,r2,4
8020fd5c:	e0fff117 	ldw	r3,-60(fp)
8020fd60:	10c00035 	stwio	r3,0(r2)
         IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
8020fd64:	e0bffb17 	ldw	r2,-20(fp)
8020fd68:	10800617 	ldw	r2,24(r2)
8020fd6c:	e0fff017 	ldw	r3,-64(fp)
8020fd70:	10c00035 	stwio	r3,0(r2)
8020fd74:	e0bff217 	ldw	r2,-56(fp)
8020fd78:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8020fd7c:	e0bff617 	ldw	r2,-40(fp)
8020fd80:	1001703a 	wrctl	status,r2
         alt_irq_enable_all(context);
     }   
    
     /* set next descriptor registers to point to the list root-node */
     IOWR_ALT_MSGDMA_PREFETCHER_NEXT_DESCRIPTOR_PTR_LOW(dev->prefetcher_base,
8020fd84:	e0bffb17 	ldw	r2,-20(fp)
8020fd88:	10800617 	ldw	r2,24(r2)
8020fd8c:	10800104 	addi	r2,r2,4
8020fd90:	e0fff917 	ldw	r3,-28(fp)
8020fd94:	10c00035 	stwio	r3,0(r2)
             root_node_addr.u32[0]);
     IOWR_ALT_MSGDMA_PREFETCHER_NEXT_DESCRIPTOR_PTR_HIGH(dev->prefetcher_base,
8020fd98:	e0bffb17 	ldw	r2,-20(fp)
8020fd9c:	10800617 	ldw	r2,24(r2)
8020fda0:	10800204 	addi	r2,r2,8
8020fda4:	e0fffa17 	ldw	r3,-24(fp)
8020fda8:	10c00035 	stwio	r3,0(r2)
             root_node_addr.u32[1]);
        
     /* set park-mode */
     if (park_mode_en){
8020fdac:	e0bffe03 	ldbu	r2,-8(fp)
8020fdb0:	10000426 	beq	r2,zero,8020fdc4 <alt_msgdma_start_prefetcher_with_list_addr+0x230>
         prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_SET_MASK;
8020fdb4:	e0bff017 	ldw	r2,-64(fp)
8020fdb8:	10800414 	ori	r2,r2,16
8020fdbc:	e0bff015 	stw	r2,-64(fp)
8020fdc0:	00000406 	br	8020fdd4 <alt_msgdma_start_prefetcher_with_list_addr+0x240>
     }
     else {
         prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_CLR_MASK;
8020fdc4:	e0fff017 	ldw	r3,-64(fp)
8020fdc8:	00bffbc4 	movi	r2,-17
8020fdcc:	1884703a 	and	r2,r3,r2
8020fdd0:	e0bff015 	stw	r2,-64(fp)
     }
     
     /* set poll-en */
     if (poll_en){
8020fdd4:	e0bfff03 	ldbu	r2,-4(fp)
8020fdd8:	10000e26 	beq	r2,zero,8020fe14 <alt_msgdma_start_prefetcher_with_list_addr+0x280>
         prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_DESC_POLL_EN_MASK; 
8020fddc:	e0bff017 	ldw	r2,-64(fp)
8020fde0:	10800094 	ori	r2,r2,2
8020fde4:	e0bff015 	stw	r2,-64(fp)
         if(IORD_ALT_MSGDMA_PREFETCHER_DESCRIPTOR_POLLING_FREQ(
8020fde8:	e0bffb17 	ldw	r2,-20(fp)
8020fdec:	10800617 	ldw	r2,24(r2)
8020fdf0:	10800304 	addi	r2,r2,12
8020fdf4:	10800037 	ldwio	r2,0(r2)
8020fdf8:	10000a1e 	bne	r2,zero,8020fe24 <alt_msgdma_start_prefetcher_with_list_addr+0x290>
                 dev->prefetcher_base) == 0){
             /* set poll frequency to some non-zero default value */
             IOWR_ALT_MSGDMA_PREFETCHER_DESCRIPTOR_POLLING_FREQ(
8020fdfc:	e0bffb17 	ldw	r2,-20(fp)
8020fe00:	10800617 	ldw	r2,24(r2)
8020fe04:	10800304 	addi	r2,r2,12
8020fe08:	00c03fc4 	movi	r3,255
8020fe0c:	10c00035 	stwio	r3,0(r2)
8020fe10:	00000406 	br	8020fe24 <alt_msgdma_start_prefetcher_with_list_addr+0x290>
                     dev->prefetcher_base, 0xFF);
         }
     }
     else {
         prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_DESC_POLL_EN_CLR_MASK; 
8020fe14:	e0fff017 	ldw	r3,-64(fp)
8020fe18:	00bfff44 	movi	r2,-3
8020fe1c:	1884703a 	and	r2,r3,r2
8020fe20:	e0bff015 	stw	r2,-64(fp)
     }
     
     /* set the prefetcher run bit */
     prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_RUN_SET_MASK;
8020fe24:	e0bff017 	ldw	r2,-64(fp)
8020fe28:	10800054 	ori	r2,r2,1
8020fe2c:	e0bff015 	stw	r2,-64(fp)
     /* start the dma since run bit is set */
     IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
8020fe30:	e0bffb17 	ldw	r2,-20(fp)
8020fe34:	10800617 	ldw	r2,24(r2)
8020fe38:	e0fff017 	ldw	r3,-64(fp)
8020fe3c:	10c00035 	stwio	r3,0(r2)
      * Now that access to the registers is complete, release the registers
      * semaphore so that other threads can access the registers.
      */
     ALT_SEM_POST (dev->regs_lock);
     
     return 0;
8020fe40:	0005883a 	mov	r2,zero
}
8020fe44:	e037883a 	mov	sp,fp
8020fe48:	df000017 	ldw	fp,0(sp)
8020fe4c:	dec00104 	addi	sp,sp,4
8020fe50:	f800283a 	ret

8020fe54 <alt_msgdma_start_prefetcher_with_std_desc_list>:
    alt_msgdma_prefetcher_standard_descriptor *list,
    alt_u8 park_mode_en,
    alt_u8 poll_en,
    alt_u8 last_desc_owned_by_sw,
    alt_u8 dcache_flush_desc_list)
{    
8020fe54:	defff504 	addi	sp,sp,-44
8020fe58:	dfc00a15 	stw	ra,40(sp)
8020fe5c:	df000915 	stw	fp,36(sp)
8020fe60:	dc400815 	stw	r17,32(sp)
8020fe64:	dc000715 	stw	r16,28(sp)
8020fe68:	df000904 	addi	fp,sp,36
8020fe6c:	e13ff815 	stw	r4,-32(fp)
8020fe70:	e17ff915 	stw	r5,-28(fp)
8020fe74:	300b883a 	mov	r5,r6
8020fe78:	3809883a 	mov	r4,r7
8020fe7c:	e0c00217 	ldw	r3,8(fp)
8020fe80:	e0800317 	ldw	r2,12(fp)
8020fe84:	e17ffa05 	stb	r5,-24(fp)
8020fe88:	e13ffb05 	stb	r4,-20(fp)
8020fe8c:	e0fffc05 	stb	r3,-16(fp)
8020fe90:	e0bffd05 	stb	r2,-12(fp)
    if (alt_msgdma_prefetcher_set_std_list_own_by_hw_bits(list,last_desc_owned_by_sw,dcache_flush_desc_list) != 0)
8020fe94:	e0bffc03 	ldbu	r2,-16(fp)
8020fe98:	e0fffd03 	ldbu	r3,-12(fp)
8020fe9c:	180d883a 	mov	r6,r3
8020fea0:	100b883a 	mov	r5,r2
8020fea4:	e13ff917 	ldw	r4,-28(fp)
8020fea8:	020f9440 	call	8020f944 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits>
8020feac:	10000226 	beq	r2,zero,8020feb8 <alt_msgdma_start_prefetcher_with_std_desc_list+0x64>
    {
        return -EINVAL;
8020feb0:	00bffa84 	movi	r2,-22
8020feb4:	00000b06 	br	8020fee4 <alt_msgdma_start_prefetcher_with_std_desc_list+0x90>
    }

    return alt_msgdma_start_prefetcher_with_list_addr (dev, (uintptr_t)list,
8020feb8:	e0bff917 	ldw	r2,-28(fp)
8020febc:	1021883a 	mov	r16,r2
8020fec0:	0023883a 	mov	r17,zero
8020fec4:	e0fffa03 	ldbu	r3,-24(fp)
8020fec8:	e0bffb03 	ldbu	r2,-20(fp)
8020fecc:	d8800015 	stw	r2,0(sp)
8020fed0:	180f883a 	mov	r7,r3
8020fed4:	800b883a 	mov	r5,r16
8020fed8:	880d883a 	mov	r6,r17
8020fedc:	e13ff817 	ldw	r4,-32(fp)
8020fee0:	020fb940 	call	8020fb94 <alt_msgdma_start_prefetcher_with_list_addr>
            park_mode_en, poll_en);
}
8020fee4:	e6fffe04 	addi	sp,fp,-8
8020fee8:	dfc00317 	ldw	ra,12(sp)
8020feec:	df000217 	ldw	fp,8(sp)
8020fef0:	dc400117 	ldw	r17,4(sp)
8020fef4:	dc000017 	ldw	r16,0(sp)
8020fef8:	dec00404 	addi	sp,sp,16
8020fefc:	f800283a 	ret

8020ff00 <alt_msgdma_start_prefetcher_with_extd_desc_list>:
    alt_msgdma_prefetcher_extended_descriptor *list,
    alt_u8 park_mode_en,
    alt_u8 poll_en,
    alt_u8 last_desc_owned_by_sw,
    alt_u8 dcache_flush_desc_list)
{
8020ff00:	defff504 	addi	sp,sp,-44
8020ff04:	dfc00a15 	stw	ra,40(sp)
8020ff08:	df000915 	stw	fp,36(sp)
8020ff0c:	dc400815 	stw	r17,32(sp)
8020ff10:	dc000715 	stw	r16,28(sp)
8020ff14:	df000904 	addi	fp,sp,36
8020ff18:	e13ff815 	stw	r4,-32(fp)
8020ff1c:	e17ff915 	stw	r5,-28(fp)
8020ff20:	300b883a 	mov	r5,r6
8020ff24:	3809883a 	mov	r4,r7
8020ff28:	e0c00217 	ldw	r3,8(fp)
8020ff2c:	e0800317 	ldw	r2,12(fp)
8020ff30:	e17ffa05 	stb	r5,-24(fp)
8020ff34:	e13ffb05 	stb	r4,-20(fp)
8020ff38:	e0fffc05 	stb	r3,-16(fp)
8020ff3c:	e0bffd05 	stb	r2,-12(fp)
    
     if (alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits(list,last_desc_owned_by_sw,dcache_flush_desc_list) != 0)
8020ff40:	e0bffc03 	ldbu	r2,-16(fp)
8020ff44:	e0fffd03 	ldbu	r3,-12(fp)
8020ff48:	180d883a 	mov	r6,r3
8020ff4c:	100b883a 	mov	r5,r2
8020ff50:	e13ff917 	ldw	r4,-28(fp)
8020ff54:	020fa500 	call	8020fa50 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits>
8020ff58:	10000226 	beq	r2,zero,8020ff64 <alt_msgdma_start_prefetcher_with_extd_desc_list+0x64>
    {
        return -EINVAL;
8020ff5c:	00bffa84 	movi	r2,-22
8020ff60:	00000b06 	br	8020ff90 <alt_msgdma_start_prefetcher_with_extd_desc_list+0x90>
    }
        
    return alt_msgdma_start_prefetcher_with_list_addr (dev, (uintptr_t)list, 
8020ff64:	e0bff917 	ldw	r2,-28(fp)
8020ff68:	1021883a 	mov	r16,r2
8020ff6c:	0023883a 	mov	r17,zero
8020ff70:	e0fffa03 	ldbu	r3,-24(fp)
8020ff74:	e0bffb03 	ldbu	r2,-20(fp)
8020ff78:	d8800015 	stw	r2,0(sp)
8020ff7c:	180f883a 	mov	r7,r3
8020ff80:	800b883a 	mov	r5,r16
8020ff84:	880d883a 	mov	r6,r17
8020ff88:	e13ff817 	ldw	r4,-32(fp)
8020ff8c:	020fb940 	call	8020fb94 <alt_msgdma_start_prefetcher_with_list_addr>
            park_mode_en, poll_en);
}
8020ff90:	e6fffe04 	addi	sp,fp,-8
8020ff94:	dfc00317 	ldw	ra,12(sp)
8020ff98:	df000217 	ldw	fp,8(sp)
8020ff9c:	dc400117 	ldw	r17,4(sp)
8020ffa0:	dc000017 	ldw	r16,0(sp)
8020ffa4:	dec00404 	addi	sp,sp,16
8020ffa8:	f800283a 	ret

8020ffac <alt_msgdma_open>:
 * Returns:
 * - Pointer to msgdma device instance structure, or null if the device
 *   could not be opened.
 */
alt_msgdma_dev* alt_msgdma_open (const char* name)
{
8020ffac:	defffc04 	addi	sp,sp,-16
8020ffb0:	dfc00315 	stw	ra,12(sp)
8020ffb4:	df000215 	stw	fp,8(sp)
8020ffb8:	df000204 	addi	fp,sp,8
8020ffbc:	e13fff15 	stw	r4,-4(fp)
    alt_msgdma_dev* dev = NULL;
8020ffc0:	e03ffe15 	stw	zero,-8(fp)

    dev = (alt_msgdma_dev*) alt_find_dev (name, &alt_msgdma_list);
8020ffc4:	d1600d04 	addi	r5,gp,-32716
8020ffc8:	e13fff17 	ldw	r4,-4(fp)
8020ffcc:	02106d00 	call	802106d0 <alt_find_dev>
8020ffd0:	e0bffe15 	stw	r2,-8(fp)

    if (NULL == dev)
8020ffd4:	e0bffe17 	ldw	r2,-8(fp)
8020ffd8:	1000041e 	bne	r2,zero,8020ffec <alt_msgdma_open+0x40>
    {
        ALT_ERRNO = ENODEV;
8020ffdc:	020e3140 	call	8020e314 <alt_get_errno>
8020ffe0:	1007883a 	mov	r3,r2
8020ffe4:	008004c4 	movi	r2,19
8020ffe8:	18800015 	stw	r2,0(r3)
    }

    return dev;
8020ffec:	e0bffe17 	ldw	r2,-8(fp)
}
8020fff0:	e037883a 	mov	sp,fp
8020fff4:	dfc00117 	ldw	ra,4(sp)
8020fff8:	df000017 	ldw	fp,0(sp)
8020fffc:	dec00204 	addi	sp,sp,8
80210000:	f800283a 	ret

80210004 <alt_msgdma_init>:
 * This routine disables interrupts, descriptor processing,
 * registers a specific instance of the device with the HAL,
 * and installs an interrupt handler for the device.
 */
void alt_msgdma_init (alt_msgdma_dev *dev, alt_u32 ic_id, alt_u32 irq)
{
80210004:	defff804 	addi	sp,sp,-32
80210008:	dfc00715 	stw	ra,28(sp)
8021000c:	df000615 	stw	fp,24(sp)
80210010:	df000604 	addi	fp,sp,24
80210014:	e13ffd15 	stw	r4,-12(fp)
80210018:	e17ffe15 	stw	r5,-8(fp)
8021001c:	e1bfff15 	stw	r6,-4(fp)
    extern alt_llist alt_msgdma_list;
    alt_u32 temporary_control;
    int error;

    if (dev->prefetcher_enable)
80210020:	e0bffd17 	ldw	r2,-12(fp)
80210024:	10801783 	ldbu	r2,94(r2)
80210028:	10803fcc 	andi	r2,r2,255
8021002c:	10000b26 	beq	r2,zero,8021005c <alt_msgdma_init+0x58>
    {
        /* start prefetcher reset sequence */
        IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, 
80210030:	e0bffd17 	ldw	r2,-12(fp)
80210034:	10800617 	ldw	r2,24(r2)
80210038:	00c00104 	movi	r3,4
8021003c:	10c00035 	stwio	r3,0(r2)
                ALT_MSGDMA_PREFETCHER_CTRL_RESET_SET_MASK);
        /* wait until hw clears the bit */
        while(ALT_MSGDMA_PREFETCHER_CTRL_RESET_GET(
80210040:	0001883a 	nop
80210044:	e0bffd17 	ldw	r2,-12(fp)
80210048:	10800617 	ldw	r2,24(r2)
8021004c:	10800037 	ldwio	r2,0(r2)
80210050:	1080010c 	andi	r2,r2,4
80210054:	1005d0ba 	srai	r2,r2,2
80210058:	103ffa1e 	bne	r2,zero,80210044 <__reset+0xfa1f0044>
    }    
    
    /* Reset the registers and FIFOs of the dispatcher and master modules */
    /* set the reset bit, no need to read the control register first since 
    this write is going to clear it out */
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
8021005c:	e0bffd17 	ldw	r2,-12(fp)
80210060:	10800317 	ldw	r2,12(r2)
80210064:	10800104 	addi	r2,r2,4
80210068:	00c00084 	movi	r3,2
8021006c:	10c00035 	stwio	r3,0(r2)
    while(0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base)
80210070:	0001883a 	nop
80210074:	e0bffd17 	ldw	r2,-12(fp)
80210078:	10800317 	ldw	r2,12(r2)
8021007c:	10800037 	ldwio	r2,0(r2)
            & ALTERA_MSGDMA_CSR_RESET_STATE_MASK));
80210080:	1080100c 	andi	r2,r2,64
    
    /* Reset the registers and FIFOs of the dispatcher and master modules */
    /* set the reset bit, no need to read the control register first since 
    this write is going to clear it out */
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
    while(0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base)
80210084:	103ffb1e 	bne	r2,zero,80210074 <__reset+0xfa1f0074>
    * Disable interrupts, halt descriptor processing,
    * and clear status register content
    */

    /* disable global interrupt */
    temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base)
80210088:	e0bffd17 	ldw	r2,-12(fp)
8021008c:	10800317 	ldw	r2,12(r2)
80210090:	10800104 	addi	r2,r2,4
80210094:	10800037 	ldwio	r2,0(r2)
80210098:	1007883a 	mov	r3,r2
8021009c:	00bffbc4 	movi	r2,-17
802100a0:	1884703a 	and	r2,r3,r2
802100a4:	e0bffb15 	stw	r2,-20(fp)
            & (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    /* stopping descriptor */
    temporary_control |= ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
802100a8:	e0bffb17 	ldw	r2,-20(fp)
802100ac:	10800814 	ori	r2,r2,32
802100b0:	e0bffb15 	stw	r2,-20(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
802100b4:	e0bffd17 	ldw	r2,-12(fp)
802100b8:	10800317 	ldw	r2,12(r2)
802100bc:	10800104 	addi	r2,r2,4
802100c0:	e0fffb17 	ldw	r3,-20(fp)
802100c4:	10c00035 	stwio	r3,0(r2)

    /* clear the CSR status register */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base, 
802100c8:	e0bffd17 	ldw	r2,-12(fp)
802100cc:	10800317 	ldw	r2,12(r2)
802100d0:	e0fffd17 	ldw	r3,-12(fp)
802100d4:	18c00317 	ldw	r3,12(r3)
802100d8:	18c00037 	ldwio	r3,0(r3)
802100dc:	10c00035 	stwio	r3,0(r2)
            IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
    
    if (dev->prefetcher_enable)
802100e0:	e0bffd17 	ldw	r2,-12(fp)
802100e4:	10801783 	ldbu	r2,94(r2)
802100e8:	10803fcc 	andi	r2,r2,255
802100ec:	10000826 	beq	r2,zero,80210110 <alt_msgdma_init+0x10c>
    {
        /* clear all status bits that are set, since theyre W1C */
        IOWR_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base, 
802100f0:	e0bffd17 	ldw	r2,-12(fp)
802100f4:	10800617 	ldw	r2,24(r2)
802100f8:	10800404 	addi	r2,r2,16
802100fc:	e0fffd17 	ldw	r3,-12(fp)
80210100:	18c00617 	ldw	r3,24(r3)
80210104:	18c00404 	addi	r3,r3,16
80210108:	18c00037 	ldwio	r3,0(r3)
8021010c:	10c00035 	stwio	r3,0(r2)
                IORD_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base));
    }

    /* Register this instance of the msgdma controller with HAL */
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_msgdma_list);
80210110:	d1600d04 	addi	r5,gp,-32716
80210114:	e13ffd17 	ldw	r4,-12(fp)
80210118:	021056c0 	call	8021056c <alt_dev_llist_insert>
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
8021011c:	0005883a 	mov	r2,zero

    /*
     * Creating semaphores used to protect access to the registers 
     * when running in a multi-threaded environment.
     */
    error = ALT_SEM_CREATE (&dev->regs_lock, 1);
80210120:	e0bffc15 	stw	r2,-16(fp)
            
    if (!error)
80210124:	e0bffc17 	ldw	r2,-16(fp)
80210128:	1000081e 	bne	r2,zero,8021014c <alt_msgdma_init+0x148>
    {        
        /* Install IRQ handler */
        alt_ic_isr_register(ic_id, irq, alt_msgdma_irq, dev, 0x0);
8021012c:	d8000015 	stw	zero,0(sp)
80210130:	e1fffd17 	ldw	r7,-12(fp)
80210134:	01a00874 	movhi	r6,32801
80210138:	31b94404 	addi	r6,r6,-6896
8021013c:	e17fff17 	ldw	r5,-4(fp)
80210140:	e13ffe17 	ldw	r4,-8(fp)
80210144:	02107600 	call	80210760 <alt_ic_isr_register>
    else
    {
        alt_printf("failed to create semaphores\n");
    }
    
    return;
80210148:	00000406 	br	8021015c <alt_msgdma_init+0x158>
        /* Install IRQ handler */
        alt_ic_isr_register(ic_id, irq, alt_msgdma_irq, dev, 0x0);
    }
    else
    {
        alt_printf("failed to create semaphores\n");
8021014c:	01200874 	movhi	r4,32801
80210150:	2107a104 	addi	r4,r4,7812
80210154:	0210d940 	call	80210d94 <alt_printf>
    }
    
    return;
80210158:	0001883a 	nop

}
8021015c:	e037883a 	mov	sp,fp
80210160:	dfc00117 	ldw	ra,4(sp)
80210164:	df000017 	ldw	fp,0(sp)
80210168:	dec00204 	addi	sp,sp,8
8021016c:	f800283a 	ret

80210170 <alt_msgdma_register_callback>:
void alt_msgdma_register_callback(
    alt_msgdma_dev *dev,
    alt_msgdma_callback callback,
    alt_u32 control,
    void *context)
{
80210170:	defffb04 	addi	sp,sp,-20
80210174:	df000415 	stw	fp,16(sp)
80210178:	df000404 	addi	fp,sp,16
8021017c:	e13ffc15 	stw	r4,-16(fp)
80210180:	e17ffd15 	stw	r5,-12(fp)
80210184:	e1bffe15 	stw	r6,-8(fp)
80210188:	e1ffff15 	stw	r7,-4(fp)
    dev->callback         = callback;
8021018c:	e0bffc17 	ldw	r2,-16(fp)
80210190:	e0fffd17 	ldw	r3,-12(fp)
80210194:	10c00b15 	stw	r3,44(r2)
    dev->callback_context = context;
80210198:	e0bffc17 	ldw	r2,-16(fp)
8021019c:	e0ffff17 	ldw	r3,-4(fp)
802101a0:	10c00c15 	stw	r3,48(r2)
    dev->control          = control;
802101a4:	e0bffc17 	ldw	r2,-16(fp)
802101a8:	e0fffe17 	ldw	r3,-8(fp)
802101ac:	10c00d15 	stw	r3,52(r2)

    return ;
802101b0:	0001883a 	nop
}
802101b4:	e037883a 	mov	sp,fp
802101b8:	df000017 	ldw	fp,0(sp)
802101bc:	dec00104 	addi	sp,sp,4
802101c0:	f800283a 	ret

802101c4 <alt_msgdma_standard_descriptor_async_transfer>:
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
int alt_msgdma_standard_descriptor_async_transfer(
    alt_msgdma_dev *dev,
    alt_msgdma_standard_descriptor *desc)
{
802101c4:	defffc04 	addi	sp,sp,-16
802101c8:	dfc00315 	stw	ra,12(sp)
802101cc:	df000215 	stw	fp,8(sp)
802101d0:	df000204 	addi	fp,sp,8
802101d4:	e13ffe15 	stw	r4,-8(fp)
802101d8:	e17fff15 	stw	r5,-4(fp)
   /*
   * Error detection/handling should be performed at the application
   * or callback level as appropriate.
   */
    return alt_msgdma_descriptor_async_transfer(dev, desc, NULL);
802101dc:	000d883a 	mov	r6,zero
802101e0:	e17fff17 	ldw	r5,-4(fp)
802101e4:	e13ffe17 	ldw	r4,-8(fp)
802101e8:	020e8740 	call	8020e874 <alt_msgdma_descriptor_async_transfer>

}
802101ec:	e037883a 	mov	sp,fp
802101f0:	dfc00117 	ldw	ra,4(sp)
802101f4:	df000017 	ldw	fp,0(sp)
802101f8:	dec00204 	addi	sp,sp,8
802101fc:	f800283a 	ret

80210200 <alt_msgdma_extended_descriptor_async_transfer>:
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
int alt_msgdma_extended_descriptor_async_transfer(
    alt_msgdma_dev *dev,
    alt_msgdma_extended_descriptor *desc)
{
80210200:	defffc04 	addi	sp,sp,-16
80210204:	dfc00315 	stw	ra,12(sp)
80210208:	df000215 	stw	fp,8(sp)
8021020c:	df000204 	addi	fp,sp,8
80210210:	e13ffe15 	stw	r4,-8(fp)
80210214:	e17fff15 	stw	r5,-4(fp)
    /*
    * Error detection/handling should be performed at the application
    * or callback level as appropriate.
    */
    return alt_msgdma_descriptor_async_transfer(dev, NULL, desc);
80210218:	e1bfff17 	ldw	r6,-4(fp)
8021021c:	000b883a 	mov	r5,zero
80210220:	e13ffe17 	ldw	r4,-8(fp)
80210224:	020e8740 	call	8020e874 <alt_msgdma_descriptor_async_transfer>
}
80210228:	e037883a 	mov	sp,fp
8021022c:	dfc00117 	ldw	ra,4(sp)
80210230:	df000017 	ldw	fp,0(sp)
80210234:	dec00204 	addi	sp,sp,8
80210238:	f800283a 	ret

8021023c <alt_msgdma_standard_descriptor_sync_transfer>:
 *           return -ETIME (Time out and skipping the looping after 5 msec)
 */
int alt_msgdma_standard_descriptor_sync_transfer(
    alt_msgdma_dev *dev,
    alt_msgdma_standard_descriptor *desc)
{
8021023c:	defffc04 	addi	sp,sp,-16
80210240:	dfc00315 	stw	ra,12(sp)
80210244:	df000215 	stw	fp,8(sp)
80210248:	df000204 	addi	fp,sp,8
8021024c:	e13ffe15 	stw	r4,-8(fp)
80210250:	e17fff15 	stw	r5,-4(fp)
    return alt_msgdma_descriptor_sync_transfer(dev, desc, NULL);
80210254:	000d883a 	mov	r6,zero
80210258:	e17fff17 	ldw	r5,-4(fp)
8021025c:	e13ffe17 	ldw	r4,-8(fp)
80210260:	020eb440 	call	8020eb44 <alt_msgdma_descriptor_sync_transfer>
}
80210264:	e037883a 	mov	sp,fp
80210268:	dfc00117 	ldw	ra,4(sp)
8021026c:	df000017 	ldw	fp,0(sp)
80210270:	dec00204 	addi	sp,sp,8
80210274:	f800283a 	ret

80210278 <alt_msgdma_extended_descriptor_sync_transfer>:
 *           return -ETIME (Time out and skipping the looping after 5 msec)
 */
int alt_msgdma_extended_descriptor_sync_transfer(
    alt_msgdma_dev *dev,
    alt_msgdma_extended_descriptor *desc)
{
80210278:	defffc04 	addi	sp,sp,-16
8021027c:	dfc00315 	stw	ra,12(sp)
80210280:	df000215 	stw	fp,8(sp)
80210284:	df000204 	addi	fp,sp,8
80210288:	e13ffe15 	stw	r4,-8(fp)
8021028c:	e17fff15 	stw	r5,-4(fp)
    return alt_msgdma_descriptor_sync_transfer(dev, NULL, desc);
80210290:	e1bfff17 	ldw	r6,-4(fp)
80210294:	000b883a 	mov	r5,zero
80210298:	e13ffe17 	ldw	r4,-8(fp)
8021029c:	020eb440 	call	8020eb44 <alt_msgdma_descriptor_sync_transfer>
}
802102a0:	e037883a 	mov	sp,fp
802102a4:	dfc00117 	ldw	ra,4(sp)
802102a8:	df000017 	ldw	fp,0(sp)
802102ac:	dec00204 	addi	sp,sp,8
802102b0:	f800283a 	ret

802102b4 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
802102b4:	defff504 	addi	sp,sp,-44
802102b8:	df000a15 	stw	fp,40(sp)
802102bc:	df000a04 	addi	fp,sp,40
802102c0:	e13ffc15 	stw	r4,-16(fp)
802102c4:	e17ffd15 	stw	r5,-12(fp)
802102c8:	e1bffe15 	stw	r6,-8(fp)
802102cc:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
802102d0:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
802102d4:	d0a01e17 	ldw	r2,-32648(gp)
  
  if (alt_ticks_per_second ())
802102d8:	10003c26 	beq	r2,zero,802103cc <alt_alarm_start+0x118>
  {
    if (alarm)
802102dc:	e0bffc17 	ldw	r2,-16(fp)
802102e0:	10003826 	beq	r2,zero,802103c4 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
802102e4:	e0bffc17 	ldw	r2,-16(fp)
802102e8:	e0fffe17 	ldw	r3,-8(fp)
802102ec:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
802102f0:	e0bffc17 	ldw	r2,-16(fp)
802102f4:	e0ffff17 	ldw	r3,-4(fp)
802102f8:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
802102fc:	0005303a 	rdctl	r2,status
80210300:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80210304:	e0fff917 	ldw	r3,-28(fp)
80210308:	00bfff84 	movi	r2,-2
8021030c:	1884703a 	and	r2,r3,r2
80210310:	1001703a 	wrctl	status,r2
  
  return context;
80210314:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
80210318:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
8021031c:	d0a01f17 	ldw	r2,-32644(gp)
      
      current_nticks = alt_nticks();
80210320:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
80210324:	e0fffd17 	ldw	r3,-12(fp)
80210328:	e0bff617 	ldw	r2,-40(fp)
8021032c:	1885883a 	add	r2,r3,r2
80210330:	10c00044 	addi	r3,r2,1
80210334:	e0bffc17 	ldw	r2,-16(fp)
80210338:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
8021033c:	e0bffc17 	ldw	r2,-16(fp)
80210340:	10c00217 	ldw	r3,8(r2)
80210344:	e0bff617 	ldw	r2,-40(fp)
80210348:	1880042e 	bgeu	r3,r2,8021035c <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
8021034c:	e0bffc17 	ldw	r2,-16(fp)
80210350:	00c00044 	movi	r3,1
80210354:	10c00405 	stb	r3,16(r2)
80210358:	00000206 	br	80210364 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
8021035c:	e0bffc17 	ldw	r2,-16(fp)
80210360:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
80210364:	e0bffc17 	ldw	r2,-16(fp)
80210368:	d0e01004 	addi	r3,gp,-32704
8021036c:	e0fffa15 	stw	r3,-24(fp)
80210370:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
80210374:	e0bffb17 	ldw	r2,-20(fp)
80210378:	e0fffa17 	ldw	r3,-24(fp)
8021037c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
80210380:	e0bffa17 	ldw	r2,-24(fp)
80210384:	10c00017 	ldw	r3,0(r2)
80210388:	e0bffb17 	ldw	r2,-20(fp)
8021038c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
80210390:	e0bffa17 	ldw	r2,-24(fp)
80210394:	10800017 	ldw	r2,0(r2)
80210398:	e0fffb17 	ldw	r3,-20(fp)
8021039c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
802103a0:	e0bffa17 	ldw	r2,-24(fp)
802103a4:	e0fffb17 	ldw	r3,-20(fp)
802103a8:	10c00015 	stw	r3,0(r2)
802103ac:	e0bff817 	ldw	r2,-32(fp)
802103b0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
802103b4:	e0bff717 	ldw	r2,-36(fp)
802103b8:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
802103bc:	0005883a 	mov	r2,zero
802103c0:	00000306 	br	802103d0 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
802103c4:	00bffa84 	movi	r2,-22
802103c8:	00000106 	br	802103d0 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
802103cc:	00bfde84 	movi	r2,-134
  }
}
802103d0:	e037883a 	mov	sp,fp
802103d4:	df000017 	ldw	fp,0(sp)
802103d8:	dec00104 	addi	sp,sp,4
802103dc:	f800283a 	ret

802103e0 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
802103e0:	defffb04 	addi	sp,sp,-20
802103e4:	df000415 	stw	fp,16(sp)
802103e8:	df000404 	addi	fp,sp,16
802103ec:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
802103f0:	008000c4 	movi	r2,3
802103f4:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
802103f8:	e0fffd17 	ldw	r3,-12(fp)
802103fc:	008003f4 	movhi	r2,15
80210400:	10909004 	addi	r2,r2,16960
80210404:	1887383a 	mul	r3,r3,r2
80210408:	00817db4 	movhi	r2,1526
8021040c:	10b84004 	addi	r2,r2,-7936
80210410:	10c7203a 	divu	r3,r2,r3
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
80210414:	00a00034 	movhi	r2,32768
80210418:	10bfffc4 	addi	r2,r2,-1
8021041c:	10c5203a 	divu	r2,r2,r3
80210420:	e0ffff17 	ldw	r3,-4(fp)
80210424:	1885203a 	divu	r2,r3,r2
80210428:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
8021042c:	e0bffe17 	ldw	r2,-8(fp)
80210430:	10002526 	beq	r2,zero,802104c8 <alt_busy_sleep+0xe8>
  {
    for(i=0;i<big_loops;i++)
80210434:	e03ffc15 	stw	zero,-16(fp)
80210438:	00001406 	br	8021048c <alt_busy_sleep+0xac>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
8021043c:	00a00034 	movhi	r2,32768
80210440:	10bfffc4 	addi	r2,r2,-1
80210444:	10bfffc4 	addi	r2,r2,-1
80210448:	103ffe1e 	bne	r2,zero,80210444 <__reset+0xfa1f0444>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
8021044c:	e0fffd17 	ldw	r3,-12(fp)
80210450:	008003f4 	movhi	r2,15
80210454:	10909004 	addi	r2,r2,16960
80210458:	1887383a 	mul	r3,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
8021045c:	00817db4 	movhi	r2,1526
80210460:	10b84004 	addi	r2,r2,-7936
80210464:	10c7203a 	divu	r3,r2,r3
80210468:	00a00034 	movhi	r2,32768
8021046c:	10bfffc4 	addi	r2,r2,-1
80210470:	10c5203a 	divu	r2,r2,r3
80210474:	e0ffff17 	ldw	r3,-4(fp)
80210478:	1885c83a 	sub	r2,r3,r2
8021047c:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
80210480:	e0bffc17 	ldw	r2,-16(fp)
80210484:	10800044 	addi	r2,r2,1
80210488:	e0bffc15 	stw	r2,-16(fp)
8021048c:	e0fffc17 	ldw	r3,-16(fp)
80210490:	e0bffe17 	ldw	r2,-8(fp)
80210494:	18bfe916 	blt	r3,r2,8021043c <__reset+0xfa1f043c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
80210498:	e0fffd17 	ldw	r3,-12(fp)
8021049c:	008003f4 	movhi	r2,15
802104a0:	10909004 	addi	r2,r2,16960
802104a4:	1887383a 	mul	r3,r3,r2
802104a8:	00817db4 	movhi	r2,1526
802104ac:	10b84004 	addi	r2,r2,-7936
802104b0:	10c7203a 	divu	r3,r2,r3
802104b4:	e0bfff17 	ldw	r2,-4(fp)
802104b8:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
802104bc:	10bfffc4 	addi	r2,r2,-1
802104c0:	103ffe1e 	bne	r2,zero,802104bc <__reset+0xfa1f04bc>
802104c4:	00000b06 	br	802104f4 <alt_busy_sleep+0x114>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
802104c8:	e0fffd17 	ldw	r3,-12(fp)
802104cc:	008003f4 	movhi	r2,15
802104d0:	10909004 	addi	r2,r2,16960
802104d4:	1887383a 	mul	r3,r3,r2
802104d8:	00817db4 	movhi	r2,1526
802104dc:	10b84004 	addi	r2,r2,-7936
802104e0:	10c7203a 	divu	r3,r2,r3
802104e4:	e0bfff17 	ldw	r2,-4(fp)
802104e8:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
802104ec:	10bfffc4 	addi	r2,r2,-1
802104f0:	00bffe16 	blt	zero,r2,802104ec <__reset+0xfa1f04ec>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
802104f4:	0005883a 	mov	r2,zero
}
802104f8:	e037883a 	mov	sp,fp
802104fc:	df000017 	ldw	fp,0(sp)
80210500:	dec00104 	addi	sp,sp,4
80210504:	f800283a 	ret

80210508 <alt_dcache_flush>:
 *
 * Any dirty lines in the data cache are written back to memory.
 */

void alt_dcache_flush (void* start, alt_u32 len)
{
80210508:	defffd04 	addi	sp,sp,-12
8021050c:	df000215 	stw	fp,8(sp)
80210510:	df000204 	addi	fp,sp,8
80210514:	e13ffe15 	stw	r4,-8(fp)
80210518:	e17fff15 	stw	r5,-4(fp)
  {
    ALT_FLUSH_DATA(i);
  }

#endif /* NIOS2_DCACHE_SIZE > 0 */
}
8021051c:	0001883a 	nop
80210520:	e037883a 	mov	sp,fp
80210524:	df000017 	ldw	fp,0(sp)
80210528:	dec00104 	addi	sp,sp,4
8021052c:	f800283a 	ret

80210530 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
80210530:	defffe04 	addi	sp,sp,-8
80210534:	dfc00115 	stw	ra,4(sp)
80210538:	df000015 	stw	fp,0(sp)
8021053c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
80210540:	d0a00b17 	ldw	r2,-32724(gp)
80210544:	10000326 	beq	r2,zero,80210554 <alt_get_errno+0x24>
80210548:	d0a00b17 	ldw	r2,-32724(gp)
8021054c:	103ee83a 	callr	r2
80210550:	00000106 	br	80210558 <alt_get_errno+0x28>
80210554:	d0a01904 	addi	r2,gp,-32668
}
80210558:	e037883a 	mov	sp,fp
8021055c:	dfc00117 	ldw	ra,4(sp)
80210560:	df000017 	ldw	fp,0(sp)
80210564:	dec00204 	addi	sp,sp,8
80210568:	f800283a 	ret

8021056c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
8021056c:	defffa04 	addi	sp,sp,-24
80210570:	dfc00515 	stw	ra,20(sp)
80210574:	df000415 	stw	fp,16(sp)
80210578:	df000404 	addi	fp,sp,16
8021057c:	e13ffe15 	stw	r4,-8(fp)
80210580:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
80210584:	e0bffe17 	ldw	r2,-8(fp)
80210588:	10000326 	beq	r2,zero,80210598 <alt_dev_llist_insert+0x2c>
8021058c:	e0bffe17 	ldw	r2,-8(fp)
80210590:	10800217 	ldw	r2,8(r2)
80210594:	1000061e 	bne	r2,zero,802105b0 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
80210598:	02105300 	call	80210530 <alt_get_errno>
8021059c:	1007883a 	mov	r3,r2
802105a0:	00800584 	movi	r2,22
802105a4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
802105a8:	00bffa84 	movi	r2,-22
802105ac:	00001306 	br	802105fc <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
802105b0:	e0bffe17 	ldw	r2,-8(fp)
802105b4:	e0ffff17 	ldw	r3,-4(fp)
802105b8:	e0fffc15 	stw	r3,-16(fp)
802105bc:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
802105c0:	e0bffd17 	ldw	r2,-12(fp)
802105c4:	e0fffc17 	ldw	r3,-16(fp)
802105c8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
802105cc:	e0bffc17 	ldw	r2,-16(fp)
802105d0:	10c00017 	ldw	r3,0(r2)
802105d4:	e0bffd17 	ldw	r2,-12(fp)
802105d8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
802105dc:	e0bffc17 	ldw	r2,-16(fp)
802105e0:	10800017 	ldw	r2,0(r2)
802105e4:	e0fffd17 	ldw	r3,-12(fp)
802105e8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
802105ec:	e0bffc17 	ldw	r2,-16(fp)
802105f0:	e0fffd17 	ldw	r3,-12(fp)
802105f4:	10c00015 	stw	r3,0(r2)

  return 0;  
802105f8:	0005883a 	mov	r2,zero
}
802105fc:	e037883a 	mov	sp,fp
80210600:	dfc00117 	ldw	ra,4(sp)
80210604:	df000017 	ldw	fp,0(sp)
80210608:	dec00204 	addi	sp,sp,8
8021060c:	f800283a 	ret

80210610 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
80210610:	defffd04 	addi	sp,sp,-12
80210614:	dfc00215 	stw	ra,8(sp)
80210618:	df000115 	stw	fp,4(sp)
8021061c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
80210620:	00a00874 	movhi	r2,32801
80210624:	10864104 	addi	r2,r2,6404
80210628:	e0bfff15 	stw	r2,-4(fp)
8021062c:	00000606 	br	80210648 <_do_ctors+0x38>
        (*ctor) (); 
80210630:	e0bfff17 	ldw	r2,-4(fp)
80210634:	10800017 	ldw	r2,0(r2)
80210638:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
8021063c:	e0bfff17 	ldw	r2,-4(fp)
80210640:	10bfff04 	addi	r2,r2,-4
80210644:	e0bfff15 	stw	r2,-4(fp)
80210648:	e0ffff17 	ldw	r3,-4(fp)
8021064c:	00a00874 	movhi	r2,32801
80210650:	10864204 	addi	r2,r2,6408
80210654:	18bff62e 	bgeu	r3,r2,80210630 <__reset+0xfa1f0630>
        (*ctor) (); 
}
80210658:	0001883a 	nop
8021065c:	e037883a 	mov	sp,fp
80210660:	dfc00117 	ldw	ra,4(sp)
80210664:	df000017 	ldw	fp,0(sp)
80210668:	dec00204 	addi	sp,sp,8
8021066c:	f800283a 	ret

80210670 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
80210670:	defffd04 	addi	sp,sp,-12
80210674:	dfc00215 	stw	ra,8(sp)
80210678:	df000115 	stw	fp,4(sp)
8021067c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
80210680:	00a00874 	movhi	r2,32801
80210684:	10864104 	addi	r2,r2,6404
80210688:	e0bfff15 	stw	r2,-4(fp)
8021068c:	00000606 	br	802106a8 <_do_dtors+0x38>
        (*dtor) (); 
80210690:	e0bfff17 	ldw	r2,-4(fp)
80210694:	10800017 	ldw	r2,0(r2)
80210698:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
8021069c:	e0bfff17 	ldw	r2,-4(fp)
802106a0:	10bfff04 	addi	r2,r2,-4
802106a4:	e0bfff15 	stw	r2,-4(fp)
802106a8:	e0ffff17 	ldw	r3,-4(fp)
802106ac:	00a00874 	movhi	r2,32801
802106b0:	10864204 	addi	r2,r2,6408
802106b4:	18bff62e 	bgeu	r3,r2,80210690 <__reset+0xfa1f0690>
        (*dtor) (); 
}
802106b8:	0001883a 	nop
802106bc:	e037883a 	mov	sp,fp
802106c0:	dfc00117 	ldw	ra,4(sp)
802106c4:	df000017 	ldw	fp,0(sp)
802106c8:	dec00204 	addi	sp,sp,8
802106cc:	f800283a 	ret

802106d0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
802106d0:	defffa04 	addi	sp,sp,-24
802106d4:	dfc00515 	stw	ra,20(sp)
802106d8:	df000415 	stw	fp,16(sp)
802106dc:	df000404 	addi	fp,sp,16
802106e0:	e13ffe15 	stw	r4,-8(fp)
802106e4:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
802106e8:	e0bfff17 	ldw	r2,-4(fp)
802106ec:	10800017 	ldw	r2,0(r2)
802106f0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
802106f4:	e13ffe17 	ldw	r4,-8(fp)
802106f8:	02007640 	call	80200764 <strlen>
802106fc:	10800044 	addi	r2,r2,1
80210700:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
80210704:	00000d06 	br	8021073c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
80210708:	e0bffc17 	ldw	r2,-16(fp)
8021070c:	10800217 	ldw	r2,8(r2)
80210710:	e0fffd17 	ldw	r3,-12(fp)
80210714:	180d883a 	mov	r6,r3
80210718:	e17ffe17 	ldw	r5,-8(fp)
8021071c:	1009883a 	mov	r4,r2
80210720:	02114580 	call	80211458 <memcmp>
80210724:	1000021e 	bne	r2,zero,80210730 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
80210728:	e0bffc17 	ldw	r2,-16(fp)
8021072c:	00000706 	br	8021074c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
80210730:	e0bffc17 	ldw	r2,-16(fp)
80210734:	10800017 	ldw	r2,0(r2)
80210738:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
8021073c:	e0fffc17 	ldw	r3,-16(fp)
80210740:	e0bfff17 	ldw	r2,-4(fp)
80210744:	18bff01e 	bne	r3,r2,80210708 <__reset+0xfa1f0708>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
80210748:	0005883a 	mov	r2,zero
}
8021074c:	e037883a 	mov	sp,fp
80210750:	dfc00117 	ldw	ra,4(sp)
80210754:	df000017 	ldw	fp,0(sp)
80210758:	dec00204 	addi	sp,sp,8
8021075c:	f800283a 	ret

80210760 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
80210760:	defff904 	addi	sp,sp,-28
80210764:	dfc00615 	stw	ra,24(sp)
80210768:	df000515 	stw	fp,20(sp)
8021076c:	df000504 	addi	fp,sp,20
80210770:	e13ffc15 	stw	r4,-16(fp)
80210774:	e17ffd15 	stw	r5,-12(fp)
80210778:	e1bffe15 	stw	r6,-8(fp)
8021077c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
80210780:	e0800217 	ldw	r2,8(fp)
80210784:	d8800015 	stw	r2,0(sp)
80210788:	e1ffff17 	ldw	r7,-4(fp)
8021078c:	e1bffe17 	ldw	r6,-8(fp)
80210790:	e17ffd17 	ldw	r5,-12(fp)
80210794:	e13ffc17 	ldw	r4,-16(fp)
80210798:	02109100 	call	80210910 <alt_iic_isr_register>
}  
8021079c:	e037883a 	mov	sp,fp
802107a0:	dfc00117 	ldw	ra,4(sp)
802107a4:	df000017 	ldw	fp,0(sp)
802107a8:	dec00204 	addi	sp,sp,8
802107ac:	f800283a 	ret

802107b0 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
802107b0:	defff904 	addi	sp,sp,-28
802107b4:	df000615 	stw	fp,24(sp)
802107b8:	df000604 	addi	fp,sp,24
802107bc:	e13ffe15 	stw	r4,-8(fp)
802107c0:	e17fff15 	stw	r5,-4(fp)
802107c4:	e0bfff17 	ldw	r2,-4(fp)
802107c8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
802107cc:	0005303a 	rdctl	r2,status
802107d0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
802107d4:	e0fffb17 	ldw	r3,-20(fp)
802107d8:	00bfff84 	movi	r2,-2
802107dc:	1884703a 	and	r2,r3,r2
802107e0:	1001703a 	wrctl	status,r2
  
  return context;
802107e4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
802107e8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
802107ec:	00c00044 	movi	r3,1
802107f0:	e0bffa17 	ldw	r2,-24(fp)
802107f4:	1884983a 	sll	r2,r3,r2
802107f8:	1007883a 	mov	r3,r2
802107fc:	d0a01d17 	ldw	r2,-32652(gp)
80210800:	1884b03a 	or	r2,r3,r2
80210804:	d0a01d15 	stw	r2,-32652(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
80210808:	d0a01d17 	ldw	r2,-32652(gp)
8021080c:	100170fa 	wrctl	ienable,r2
80210810:	e0bffc17 	ldw	r2,-16(fp)
80210814:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80210818:	e0bffd17 	ldw	r2,-12(fp)
8021081c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
80210820:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
80210824:	0001883a 	nop
}
80210828:	e037883a 	mov	sp,fp
8021082c:	df000017 	ldw	fp,0(sp)
80210830:	dec00104 	addi	sp,sp,4
80210834:	f800283a 	ret

80210838 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
80210838:	defff904 	addi	sp,sp,-28
8021083c:	df000615 	stw	fp,24(sp)
80210840:	df000604 	addi	fp,sp,24
80210844:	e13ffe15 	stw	r4,-8(fp)
80210848:	e17fff15 	stw	r5,-4(fp)
8021084c:	e0bfff17 	ldw	r2,-4(fp)
80210850:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80210854:	0005303a 	rdctl	r2,status
80210858:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8021085c:	e0fffb17 	ldw	r3,-20(fp)
80210860:	00bfff84 	movi	r2,-2
80210864:	1884703a 	and	r2,r3,r2
80210868:	1001703a 	wrctl	status,r2
  
  return context;
8021086c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
80210870:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
80210874:	00c00044 	movi	r3,1
80210878:	e0bffa17 	ldw	r2,-24(fp)
8021087c:	1884983a 	sll	r2,r3,r2
80210880:	0084303a 	nor	r2,zero,r2
80210884:	1007883a 	mov	r3,r2
80210888:	d0a01d17 	ldw	r2,-32652(gp)
8021088c:	1884703a 	and	r2,r3,r2
80210890:	d0a01d15 	stw	r2,-32652(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
80210894:	d0a01d17 	ldw	r2,-32652(gp)
80210898:	100170fa 	wrctl	ienable,r2
8021089c:	e0bffc17 	ldw	r2,-16(fp)
802108a0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
802108a4:	e0bffd17 	ldw	r2,-12(fp)
802108a8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
802108ac:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
802108b0:	0001883a 	nop
}
802108b4:	e037883a 	mov	sp,fp
802108b8:	df000017 	ldw	fp,0(sp)
802108bc:	dec00104 	addi	sp,sp,4
802108c0:	f800283a 	ret

802108c4 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
802108c4:	defffc04 	addi	sp,sp,-16
802108c8:	df000315 	stw	fp,12(sp)
802108cc:	df000304 	addi	fp,sp,12
802108d0:	e13ffe15 	stw	r4,-8(fp)
802108d4:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
802108d8:	000530fa 	rdctl	r2,ienable
802108dc:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
802108e0:	00c00044 	movi	r3,1
802108e4:	e0bfff17 	ldw	r2,-4(fp)
802108e8:	1884983a 	sll	r2,r3,r2
802108ec:	1007883a 	mov	r3,r2
802108f0:	e0bffd17 	ldw	r2,-12(fp)
802108f4:	1884703a 	and	r2,r3,r2
802108f8:	1004c03a 	cmpne	r2,r2,zero
802108fc:	10803fcc 	andi	r2,r2,255
}
80210900:	e037883a 	mov	sp,fp
80210904:	df000017 	ldw	fp,0(sp)
80210908:	dec00104 	addi	sp,sp,4
8021090c:	f800283a 	ret

80210910 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
80210910:	defff504 	addi	sp,sp,-44
80210914:	dfc00a15 	stw	ra,40(sp)
80210918:	df000915 	stw	fp,36(sp)
8021091c:	df000904 	addi	fp,sp,36
80210920:	e13ffc15 	stw	r4,-16(fp)
80210924:	e17ffd15 	stw	r5,-12(fp)
80210928:	e1bffe15 	stw	r6,-8(fp)
8021092c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
80210930:	00bffa84 	movi	r2,-22
80210934:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
80210938:	e0bffd17 	ldw	r2,-12(fp)
8021093c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
80210940:	e0bff817 	ldw	r2,-32(fp)
80210944:	10800808 	cmpgei	r2,r2,32
80210948:	1000271e 	bne	r2,zero,802109e8 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8021094c:	0005303a 	rdctl	r2,status
80210950:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80210954:	e0fffb17 	ldw	r3,-20(fp)
80210958:	00bfff84 	movi	r2,-2
8021095c:	1884703a 	and	r2,r3,r2
80210960:	1001703a 	wrctl	status,r2
  
  return context;
80210964:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
80210968:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
8021096c:	00a00874 	movhi	r2,32801
80210970:	108ede04 	addi	r2,r2,15224
80210974:	e0fff817 	ldw	r3,-32(fp)
80210978:	180690fa 	slli	r3,r3,3
8021097c:	10c5883a 	add	r2,r2,r3
80210980:	e0fffe17 	ldw	r3,-8(fp)
80210984:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
80210988:	00a00874 	movhi	r2,32801
8021098c:	108ede04 	addi	r2,r2,15224
80210990:	e0fff817 	ldw	r3,-32(fp)
80210994:	180690fa 	slli	r3,r3,3
80210998:	10c5883a 	add	r2,r2,r3
8021099c:	10800104 	addi	r2,r2,4
802109a0:	e0ffff17 	ldw	r3,-4(fp)
802109a4:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
802109a8:	e0bffe17 	ldw	r2,-8(fp)
802109ac:	10000526 	beq	r2,zero,802109c4 <alt_iic_isr_register+0xb4>
802109b0:	e0bff817 	ldw	r2,-32(fp)
802109b4:	100b883a 	mov	r5,r2
802109b8:	e13ffc17 	ldw	r4,-16(fp)
802109bc:	02107b00 	call	802107b0 <alt_ic_irq_enable>
802109c0:	00000406 	br	802109d4 <alt_iic_isr_register+0xc4>
802109c4:	e0bff817 	ldw	r2,-32(fp)
802109c8:	100b883a 	mov	r5,r2
802109cc:	e13ffc17 	ldw	r4,-16(fp)
802109d0:	02108380 	call	80210838 <alt_ic_irq_disable>
802109d4:	e0bff715 	stw	r2,-36(fp)
802109d8:	e0bffa17 	ldw	r2,-24(fp)
802109dc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
802109e0:	e0bff917 	ldw	r2,-28(fp)
802109e4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
802109e8:	e0bff717 	ldw	r2,-36(fp)
}
802109ec:	e037883a 	mov	sp,fp
802109f0:	dfc00117 	ldw	ra,4(sp)
802109f4:	df000017 	ldw	fp,0(sp)
802109f8:	dec00204 	addi	sp,sp,8
802109fc:	f800283a 	ret

80210a00 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
80210a00:	defff904 	addi	sp,sp,-28
80210a04:	dfc00615 	stw	ra,24(sp)
80210a08:	df000515 	stw	fp,20(sp)
80210a0c:	df000504 	addi	fp,sp,20
80210a10:	e13ffc15 	stw	r4,-16(fp)
80210a14:	e17ffd15 	stw	r5,-12(fp)
80210a18:	e1bffe15 	stw	r6,-8(fp)
80210a1c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
80210a20:	e1bfff17 	ldw	r6,-4(fp)
80210a24:	e17ffe17 	ldw	r5,-8(fp)
80210a28:	e13ffd17 	ldw	r4,-12(fp)
80210a2c:	0210c400 	call	80210c40 <open>
80210a30:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
80210a34:	e0bffb17 	ldw	r2,-20(fp)
80210a38:	10001c16 	blt	r2,zero,80210aac <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
80210a3c:	00a00874 	movhi	r2,32801
80210a40:	1089df04 	addi	r2,r2,10108
80210a44:	e0fffb17 	ldw	r3,-20(fp)
80210a48:	18c00324 	muli	r3,r3,12
80210a4c:	10c5883a 	add	r2,r2,r3
80210a50:	10c00017 	ldw	r3,0(r2)
80210a54:	e0bffc17 	ldw	r2,-16(fp)
80210a58:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
80210a5c:	00a00874 	movhi	r2,32801
80210a60:	1089df04 	addi	r2,r2,10108
80210a64:	e0fffb17 	ldw	r3,-20(fp)
80210a68:	18c00324 	muli	r3,r3,12
80210a6c:	10c5883a 	add	r2,r2,r3
80210a70:	10800104 	addi	r2,r2,4
80210a74:	10c00017 	ldw	r3,0(r2)
80210a78:	e0bffc17 	ldw	r2,-16(fp)
80210a7c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
80210a80:	00a00874 	movhi	r2,32801
80210a84:	1089df04 	addi	r2,r2,10108
80210a88:	e0fffb17 	ldw	r3,-20(fp)
80210a8c:	18c00324 	muli	r3,r3,12
80210a90:	10c5883a 	add	r2,r2,r3
80210a94:	10800204 	addi	r2,r2,8
80210a98:	10c00017 	ldw	r3,0(r2)
80210a9c:	e0bffc17 	ldw	r2,-16(fp)
80210aa0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
80210aa4:	e13ffb17 	ldw	r4,-20(fp)
80210aa8:	020d40c0 	call	8020d40c <alt_release_fd>
  }
} 
80210aac:	0001883a 	nop
80210ab0:	e037883a 	mov	sp,fp
80210ab4:	dfc00117 	ldw	ra,4(sp)
80210ab8:	df000017 	ldw	fp,0(sp)
80210abc:	dec00204 	addi	sp,sp,8
80210ac0:	f800283a 	ret

80210ac4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
80210ac4:	defffb04 	addi	sp,sp,-20
80210ac8:	dfc00415 	stw	ra,16(sp)
80210acc:	df000315 	stw	fp,12(sp)
80210ad0:	df000304 	addi	fp,sp,12
80210ad4:	e13ffd15 	stw	r4,-12(fp)
80210ad8:	e17ffe15 	stw	r5,-8(fp)
80210adc:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
80210ae0:	01c07fc4 	movi	r7,511
80210ae4:	01800044 	movi	r6,1
80210ae8:	e17ffd17 	ldw	r5,-12(fp)
80210aec:	01200874 	movhi	r4,32801
80210af0:	2109e204 	addi	r4,r4,10120
80210af4:	0210a000 	call	80210a00 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
80210af8:	01c07fc4 	movi	r7,511
80210afc:	000d883a 	mov	r6,zero
80210b00:	e17ffe17 	ldw	r5,-8(fp)
80210b04:	01200874 	movhi	r4,32801
80210b08:	2109df04 	addi	r4,r4,10108
80210b0c:	0210a000 	call	80210a00 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
80210b10:	01c07fc4 	movi	r7,511
80210b14:	01800044 	movi	r6,1
80210b18:	e17fff17 	ldw	r5,-4(fp)
80210b1c:	01200874 	movhi	r4,32801
80210b20:	2109e504 	addi	r4,r4,10132
80210b24:	0210a000 	call	80210a00 <alt_open_fd>
}  
80210b28:	0001883a 	nop
80210b2c:	e037883a 	mov	sp,fp
80210b30:	dfc00117 	ldw	ra,4(sp)
80210b34:	df000017 	ldw	fp,0(sp)
80210b38:	dec00204 	addi	sp,sp,8
80210b3c:	f800283a 	ret

80210b40 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
80210b40:	defffe04 	addi	sp,sp,-8
80210b44:	dfc00115 	stw	ra,4(sp)
80210b48:	df000015 	stw	fp,0(sp)
80210b4c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
80210b50:	d0a00b17 	ldw	r2,-32724(gp)
80210b54:	10000326 	beq	r2,zero,80210b64 <alt_get_errno+0x24>
80210b58:	d0a00b17 	ldw	r2,-32724(gp)
80210b5c:	103ee83a 	callr	r2
80210b60:	00000106 	br	80210b68 <alt_get_errno+0x28>
80210b64:	d0a01904 	addi	r2,gp,-32668
}
80210b68:	e037883a 	mov	sp,fp
80210b6c:	dfc00117 	ldw	ra,4(sp)
80210b70:	df000017 	ldw	fp,0(sp)
80210b74:	dec00204 	addi	sp,sp,8
80210b78:	f800283a 	ret

80210b7c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
80210b7c:	defffd04 	addi	sp,sp,-12
80210b80:	df000215 	stw	fp,8(sp)
80210b84:	df000204 	addi	fp,sp,8
80210b88:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
80210b8c:	e0bfff17 	ldw	r2,-4(fp)
80210b90:	10800217 	ldw	r2,8(r2)
80210b94:	10d00034 	orhi	r3,r2,16384
80210b98:	e0bfff17 	ldw	r2,-4(fp)
80210b9c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
80210ba0:	e03ffe15 	stw	zero,-8(fp)
80210ba4:	00001d06 	br	80210c1c <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
80210ba8:	00a00874 	movhi	r2,32801
80210bac:	1089df04 	addi	r2,r2,10108
80210bb0:	e0fffe17 	ldw	r3,-8(fp)
80210bb4:	18c00324 	muli	r3,r3,12
80210bb8:	10c5883a 	add	r2,r2,r3
80210bbc:	10c00017 	ldw	r3,0(r2)
80210bc0:	e0bfff17 	ldw	r2,-4(fp)
80210bc4:	10800017 	ldw	r2,0(r2)
80210bc8:	1880111e 	bne	r3,r2,80210c10 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
80210bcc:	00a00874 	movhi	r2,32801
80210bd0:	1089df04 	addi	r2,r2,10108
80210bd4:	e0fffe17 	ldw	r3,-8(fp)
80210bd8:	18c00324 	muli	r3,r3,12
80210bdc:	10c5883a 	add	r2,r2,r3
80210be0:	10800204 	addi	r2,r2,8
80210be4:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
80210be8:	1000090e 	bge	r2,zero,80210c10 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
80210bec:	e0bffe17 	ldw	r2,-8(fp)
80210bf0:	10c00324 	muli	r3,r2,12
80210bf4:	00a00874 	movhi	r2,32801
80210bf8:	1089df04 	addi	r2,r2,10108
80210bfc:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
80210c00:	e0bfff17 	ldw	r2,-4(fp)
80210c04:	18800226 	beq	r3,r2,80210c10 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
80210c08:	00bffcc4 	movi	r2,-13
80210c0c:	00000806 	br	80210c30 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
80210c10:	e0bffe17 	ldw	r2,-8(fp)
80210c14:	10800044 	addi	r2,r2,1
80210c18:	e0bffe15 	stw	r2,-8(fp)
80210c1c:	d0a00a17 	ldw	r2,-32728(gp)
80210c20:	1007883a 	mov	r3,r2
80210c24:	e0bffe17 	ldw	r2,-8(fp)
80210c28:	18bfdf2e 	bgeu	r3,r2,80210ba8 <__reset+0xfa1f0ba8>
    }
  }
  
  /* The device is not locked */
 
  return 0;
80210c2c:	0005883a 	mov	r2,zero
}
80210c30:	e037883a 	mov	sp,fp
80210c34:	df000017 	ldw	fp,0(sp)
80210c38:	dec00104 	addi	sp,sp,4
80210c3c:	f800283a 	ret

80210c40 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
80210c40:	defff604 	addi	sp,sp,-40
80210c44:	dfc00915 	stw	ra,36(sp)
80210c48:	df000815 	stw	fp,32(sp)
80210c4c:	df000804 	addi	fp,sp,32
80210c50:	e13ffd15 	stw	r4,-12(fp)
80210c54:	e17ffe15 	stw	r5,-8(fp)
80210c58:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
80210c5c:	00bfffc4 	movi	r2,-1
80210c60:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
80210c64:	00bffb44 	movi	r2,-19
80210c68:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
80210c6c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
80210c70:	d1600804 	addi	r5,gp,-32736
80210c74:	e13ffd17 	ldw	r4,-12(fp)
80210c78:	02106d00 	call	802106d0 <alt_find_dev>
80210c7c:	e0bff815 	stw	r2,-32(fp)
80210c80:	e0bff817 	ldw	r2,-32(fp)
80210c84:	1000051e 	bne	r2,zero,80210c9c <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
80210c88:	e13ffd17 	ldw	r4,-12(fp)
80210c8c:	02111c40 	call	802111c4 <alt_find_file>
80210c90:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
80210c94:	00800044 	movi	r2,1
80210c98:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
80210c9c:	e0bff817 	ldw	r2,-32(fp)
80210ca0:	10002926 	beq	r2,zero,80210d48 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
80210ca4:	e13ff817 	ldw	r4,-32(fp)
80210ca8:	02112cc0 	call	802112cc <alt_get_fd>
80210cac:	e0bff915 	stw	r2,-28(fp)
80210cb0:	e0bff917 	ldw	r2,-28(fp)
80210cb4:	1000030e 	bge	r2,zero,80210cc4 <open+0x84>
    {
      status = index;
80210cb8:	e0bff917 	ldw	r2,-28(fp)
80210cbc:	e0bffa15 	stw	r2,-24(fp)
80210cc0:	00002306 	br	80210d50 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
80210cc4:	e0bff917 	ldw	r2,-28(fp)
80210cc8:	10c00324 	muli	r3,r2,12
80210ccc:	00a00874 	movhi	r2,32801
80210cd0:	1089df04 	addi	r2,r2,10108
80210cd4:	1885883a 	add	r2,r3,r2
80210cd8:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
80210cdc:	e0fffe17 	ldw	r3,-8(fp)
80210ce0:	00900034 	movhi	r2,16384
80210ce4:	10bfffc4 	addi	r2,r2,-1
80210ce8:	1886703a 	and	r3,r3,r2
80210cec:	e0bffc17 	ldw	r2,-16(fp)
80210cf0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
80210cf4:	e0bffb17 	ldw	r2,-20(fp)
80210cf8:	1000051e 	bne	r2,zero,80210d10 <open+0xd0>
80210cfc:	e13ffc17 	ldw	r4,-16(fp)
80210d00:	0210b7c0 	call	80210b7c <alt_file_locked>
80210d04:	e0bffa15 	stw	r2,-24(fp)
80210d08:	e0bffa17 	ldw	r2,-24(fp)
80210d0c:	10001016 	blt	r2,zero,80210d50 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
80210d10:	e0bff817 	ldw	r2,-32(fp)
80210d14:	10800317 	ldw	r2,12(r2)
80210d18:	10000826 	beq	r2,zero,80210d3c <open+0xfc>
80210d1c:	e0bff817 	ldw	r2,-32(fp)
80210d20:	10800317 	ldw	r2,12(r2)
80210d24:	e1ffff17 	ldw	r7,-4(fp)
80210d28:	e1bffe17 	ldw	r6,-8(fp)
80210d2c:	e17ffd17 	ldw	r5,-12(fp)
80210d30:	e13ffc17 	ldw	r4,-16(fp)
80210d34:	103ee83a 	callr	r2
80210d38:	00000106 	br	80210d40 <open+0x100>
80210d3c:	0005883a 	mov	r2,zero
80210d40:	e0bffa15 	stw	r2,-24(fp)
80210d44:	00000206 	br	80210d50 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
80210d48:	00bffb44 	movi	r2,-19
80210d4c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
80210d50:	e0bffa17 	ldw	r2,-24(fp)
80210d54:	1000090e 	bge	r2,zero,80210d7c <open+0x13c>
  {
    alt_release_fd (index);  
80210d58:	e13ff917 	ldw	r4,-28(fp)
80210d5c:	020d40c0 	call	8020d40c <alt_release_fd>
    ALT_ERRNO = -status;
80210d60:	0210b400 	call	80210b40 <alt_get_errno>
80210d64:	1007883a 	mov	r3,r2
80210d68:	e0bffa17 	ldw	r2,-24(fp)
80210d6c:	0085c83a 	sub	r2,zero,r2
80210d70:	18800015 	stw	r2,0(r3)
    return -1;
80210d74:	00bfffc4 	movi	r2,-1
80210d78:	00000106 	br	80210d80 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
80210d7c:	e0bff917 	ldw	r2,-28(fp)
}
80210d80:	e037883a 	mov	sp,fp
80210d84:	dfc00117 	ldw	ra,4(sp)
80210d88:	df000017 	ldw	fp,0(sp)
80210d8c:	dec00204 	addi	sp,sp,8
80210d90:	f800283a 	ret

80210d94 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
80210d94:	defff204 	addi	sp,sp,-56
80210d98:	dfc00a15 	stw	ra,40(sp)
80210d9c:	df000915 	stw	fp,36(sp)
80210da0:	df000904 	addi	fp,sp,36
80210da4:	e13fff15 	stw	r4,-4(fp)
80210da8:	e1400215 	stw	r5,8(fp)
80210dac:	e1800315 	stw	r6,12(fp)
80210db0:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
80210db4:	e0800204 	addi	r2,fp,8
80210db8:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
80210dbc:	e0bfff17 	ldw	r2,-4(fp)
80210dc0:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
80210dc4:	00006f06 	br	80210f84 <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
80210dc8:	e0bff807 	ldb	r2,-32(fp)
80210dcc:	10800960 	cmpeqi	r2,r2,37
80210dd0:	1000041e 	bne	r2,zero,80210de4 <alt_printf+0x50>
        {
            alt_putchar(c);
80210dd4:	e0bff807 	ldb	r2,-32(fp)
80210dd8:	1009883a 	mov	r4,r2
80210ddc:	0210fc00 	call	80210fc0 <alt_putchar>
80210de0:	00006806 	br	80210f84 <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
80210de4:	e0bff717 	ldw	r2,-36(fp)
80210de8:	10c00044 	addi	r3,r2,1
80210dec:	e0fff715 	stw	r3,-36(fp)
80210df0:	10800003 	ldbu	r2,0(r2)
80210df4:	e0bff805 	stb	r2,-32(fp)
80210df8:	e0bff807 	ldb	r2,-32(fp)
80210dfc:	10006926 	beq	r2,zero,80210fa4 <alt_printf+0x210>
            {
                if (c == '%')
80210e00:	e0bff807 	ldb	r2,-32(fp)
80210e04:	10800958 	cmpnei	r2,r2,37
80210e08:	1000041e 	bne	r2,zero,80210e1c <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
80210e0c:	e0bff807 	ldb	r2,-32(fp)
80210e10:	1009883a 	mov	r4,r2
80210e14:	0210fc00 	call	80210fc0 <alt_putchar>
80210e18:	00005a06 	br	80210f84 <alt_printf+0x1f0>
                } 
                else if (c == 'c')
80210e1c:	e0bff807 	ldb	r2,-32(fp)
80210e20:	108018d8 	cmpnei	r2,r2,99
80210e24:	1000081e 	bne	r2,zero,80210e48 <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
80210e28:	e0bffe17 	ldw	r2,-8(fp)
80210e2c:	10c00104 	addi	r3,r2,4
80210e30:	e0fffe15 	stw	r3,-8(fp)
80210e34:	10800017 	ldw	r2,0(r2)
80210e38:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
80210e3c:	e13ffd17 	ldw	r4,-12(fp)
80210e40:	0210fc00 	call	80210fc0 <alt_putchar>
80210e44:	00004f06 	br	80210f84 <alt_printf+0x1f0>
                }
                else if (c == 'x')
80210e48:	e0bff807 	ldb	r2,-32(fp)
80210e4c:	10801e18 	cmpnei	r2,r2,120
80210e50:	1000341e 	bne	r2,zero,80210f24 <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
80210e54:	e0bffe17 	ldw	r2,-8(fp)
80210e58:	10c00104 	addi	r3,r2,4
80210e5c:	e0fffe15 	stw	r3,-8(fp)
80210e60:	10800017 	ldw	r2,0(r2)
80210e64:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
80210e68:	e0bffb17 	ldw	r2,-20(fp)
80210e6c:	1000031e 	bne	r2,zero,80210e7c <alt_printf+0xe8>
                    {
                        alt_putchar('0');
80210e70:	01000c04 	movi	r4,48
80210e74:	0210fc00 	call	80210fc0 <alt_putchar>
                        continue;
80210e78:	00004206 	br	80210f84 <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
80210e7c:	00800704 	movi	r2,28
80210e80:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
80210e84:	00000306 	br	80210e94 <alt_printf+0x100>
                        digit_shift -= 4;
80210e88:	e0bff917 	ldw	r2,-28(fp)
80210e8c:	10bfff04 	addi	r2,r2,-4
80210e90:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
80210e94:	00c003c4 	movi	r3,15
80210e98:	e0bff917 	ldw	r2,-28(fp)
80210e9c:	1884983a 	sll	r2,r3,r2
80210ea0:	1007883a 	mov	r3,r2
80210ea4:	e0bffb17 	ldw	r2,-20(fp)
80210ea8:	1884703a 	and	r2,r3,r2
80210eac:	103ff626 	beq	r2,zero,80210e88 <__reset+0xfa1f0e88>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
80210eb0:	00001906 	br	80210f18 <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
80210eb4:	00c003c4 	movi	r3,15
80210eb8:	e0bff917 	ldw	r2,-28(fp)
80210ebc:	1884983a 	sll	r2,r3,r2
80210ec0:	1007883a 	mov	r3,r2
80210ec4:	e0bffb17 	ldw	r2,-20(fp)
80210ec8:	1886703a 	and	r3,r3,r2
80210ecc:	e0bff917 	ldw	r2,-28(fp)
80210ed0:	1884d83a 	srl	r2,r3,r2
80210ed4:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
80210ed8:	e0bffc17 	ldw	r2,-16(fp)
80210edc:	108002a8 	cmpgeui	r2,r2,10
80210ee0:	1000041e 	bne	r2,zero,80210ef4 <alt_printf+0x160>
                            c = '0' + digit;
80210ee4:	e0bffc17 	ldw	r2,-16(fp)
80210ee8:	10800c04 	addi	r2,r2,48
80210eec:	e0bff805 	stb	r2,-32(fp)
80210ef0:	00000306 	br	80210f00 <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
80210ef4:	e0bffc17 	ldw	r2,-16(fp)
80210ef8:	108015c4 	addi	r2,r2,87
80210efc:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
80210f00:	e0bff807 	ldb	r2,-32(fp)
80210f04:	1009883a 	mov	r4,r2
80210f08:	0210fc00 	call	80210fc0 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
80210f0c:	e0bff917 	ldw	r2,-28(fp)
80210f10:	10bfff04 	addi	r2,r2,-4
80210f14:	e0bff915 	stw	r2,-28(fp)
80210f18:	e0bff917 	ldw	r2,-28(fp)
80210f1c:	103fe50e 	bge	r2,zero,80210eb4 <__reset+0xfa1f0eb4>
80210f20:	00001806 	br	80210f84 <alt_printf+0x1f0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
80210f24:	e0bff807 	ldb	r2,-32(fp)
80210f28:	10801cd8 	cmpnei	r2,r2,115
80210f2c:	1000151e 	bne	r2,zero,80210f84 <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
80210f30:	e0bffe17 	ldw	r2,-8(fp)
80210f34:	10c00104 	addi	r3,r2,4
80210f38:	e0fffe15 	stw	r3,-8(fp)
80210f3c:	10800017 	ldw	r2,0(r2)
80210f40:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
80210f44:	00000906 	br	80210f6c <alt_printf+0x1d8>
                      alt_putchar(*s++);
80210f48:	e0bffa17 	ldw	r2,-24(fp)
80210f4c:	10c00044 	addi	r3,r2,1
80210f50:	e0fffa15 	stw	r3,-24(fp)
80210f54:	10800003 	ldbu	r2,0(r2)
80210f58:	10803fcc 	andi	r2,r2,255
80210f5c:	1080201c 	xori	r2,r2,128
80210f60:	10bfe004 	addi	r2,r2,-128
80210f64:	1009883a 	mov	r4,r2
80210f68:	0210fc00 	call	80210fc0 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
80210f6c:	e0bffa17 	ldw	r2,-24(fp)
80210f70:	10800003 	ldbu	r2,0(r2)
80210f74:	10803fcc 	andi	r2,r2,255
80210f78:	1080201c 	xori	r2,r2,128
80210f7c:	10bfe004 	addi	r2,r2,-128
80210f80:	103ff11e 	bne	r2,zero,80210f48 <__reset+0xfa1f0f48>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
80210f84:	e0bff717 	ldw	r2,-36(fp)
80210f88:	10c00044 	addi	r3,r2,1
80210f8c:	e0fff715 	stw	r3,-36(fp)
80210f90:	10800003 	ldbu	r2,0(r2)
80210f94:	e0bff805 	stb	r2,-32(fp)
80210f98:	e0bff807 	ldb	r2,-32(fp)
80210f9c:	103f8a1e 	bne	r2,zero,80210dc8 <__reset+0xfa1f0dc8>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
80210fa0:	00000106 	br	80210fa8 <alt_printf+0x214>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
80210fa4:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
80210fa8:	0001883a 	nop
80210fac:	e037883a 	mov	sp,fp
80210fb0:	dfc00117 	ldw	ra,4(sp)
80210fb4:	df000017 	ldw	fp,0(sp)
80210fb8:	dec00504 	addi	sp,sp,20
80210fbc:	f800283a 	ret

80210fc0 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
80210fc0:	defffd04 	addi	sp,sp,-12
80210fc4:	dfc00215 	stw	ra,8(sp)
80210fc8:	df000115 	stw	fp,4(sp)
80210fcc:	df000104 	addi	fp,sp,4
80210fd0:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
80210fd4:	d0a00117 	ldw	r2,-32764(gp)
80210fd8:	10800217 	ldw	r2,8(r2)
80210fdc:	100b883a 	mov	r5,r2
80210fe0:	e13fff17 	ldw	r4,-4(fp)
80210fe4:	02115740 	call	80211574 <putc>
#endif
#endif
}
80210fe8:	e037883a 	mov	sp,fp
80210fec:	dfc00117 	ldw	ra,4(sp)
80210ff0:	df000017 	ldw	fp,0(sp)
80210ff4:	dec00204 	addi	sp,sp,8
80210ff8:	f800283a 	ret

80210ffc <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
80210ffc:	defffa04 	addi	sp,sp,-24
80211000:	df000515 	stw	fp,20(sp)
80211004:	df000504 	addi	fp,sp,20
80211008:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8021100c:	0005303a 	rdctl	r2,status
80211010:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80211014:	e0fffc17 	ldw	r3,-16(fp)
80211018:	00bfff84 	movi	r2,-2
8021101c:	1884703a 	and	r2,r3,r2
80211020:	1001703a 	wrctl	status,r2
  
  return context;
80211024:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
80211028:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
8021102c:	e0bfff17 	ldw	r2,-4(fp)
80211030:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
80211034:	e0bffd17 	ldw	r2,-12(fp)
80211038:	10800017 	ldw	r2,0(r2)
8021103c:	e0fffd17 	ldw	r3,-12(fp)
80211040:	18c00117 	ldw	r3,4(r3)
80211044:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
80211048:	e0bffd17 	ldw	r2,-12(fp)
8021104c:	10800117 	ldw	r2,4(r2)
80211050:	e0fffd17 	ldw	r3,-12(fp)
80211054:	18c00017 	ldw	r3,0(r3)
80211058:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
8021105c:	e0bffd17 	ldw	r2,-12(fp)
80211060:	e0fffd17 	ldw	r3,-12(fp)
80211064:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
80211068:	e0bffd17 	ldw	r2,-12(fp)
8021106c:	e0fffd17 	ldw	r3,-12(fp)
80211070:	10c00015 	stw	r3,0(r2)
80211074:	e0bffb17 	ldw	r2,-20(fp)
80211078:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8021107c:	e0bffe17 	ldw	r2,-8(fp)
80211080:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
80211084:	0001883a 	nop
80211088:	e037883a 	mov	sp,fp
8021108c:	df000017 	ldw	fp,0(sp)
80211090:	dec00104 	addi	sp,sp,4
80211094:	f800283a 	ret

80211098 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
80211098:	defffb04 	addi	sp,sp,-20
8021109c:	dfc00415 	stw	ra,16(sp)
802110a0:	df000315 	stw	fp,12(sp)
802110a4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
802110a8:	d0a01017 	ldw	r2,-32704(gp)
802110ac:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
802110b0:	d0a01f17 	ldw	r2,-32644(gp)
802110b4:	10800044 	addi	r2,r2,1
802110b8:	d0a01f15 	stw	r2,-32644(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
802110bc:	00002e06 	br	80211178 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
802110c0:	e0bffd17 	ldw	r2,-12(fp)
802110c4:	10800017 	ldw	r2,0(r2)
802110c8:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
802110cc:	e0bffd17 	ldw	r2,-12(fp)
802110d0:	10800403 	ldbu	r2,16(r2)
802110d4:	10803fcc 	andi	r2,r2,255
802110d8:	10000426 	beq	r2,zero,802110ec <alt_tick+0x54>
802110dc:	d0a01f17 	ldw	r2,-32644(gp)
802110e0:	1000021e 	bne	r2,zero,802110ec <alt_tick+0x54>
    {
      alarm->rollover = 0;
802110e4:	e0bffd17 	ldw	r2,-12(fp)
802110e8:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
802110ec:	e0bffd17 	ldw	r2,-12(fp)
802110f0:	10800217 	ldw	r2,8(r2)
802110f4:	d0e01f17 	ldw	r3,-32644(gp)
802110f8:	18801d36 	bltu	r3,r2,80211170 <alt_tick+0xd8>
802110fc:	e0bffd17 	ldw	r2,-12(fp)
80211100:	10800403 	ldbu	r2,16(r2)
80211104:	10803fcc 	andi	r2,r2,255
80211108:	1000191e 	bne	r2,zero,80211170 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
8021110c:	e0bffd17 	ldw	r2,-12(fp)
80211110:	10800317 	ldw	r2,12(r2)
80211114:	e0fffd17 	ldw	r3,-12(fp)
80211118:	18c00517 	ldw	r3,20(r3)
8021111c:	1809883a 	mov	r4,r3
80211120:	103ee83a 	callr	r2
80211124:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
80211128:	e0bfff17 	ldw	r2,-4(fp)
8021112c:	1000031e 	bne	r2,zero,8021113c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
80211130:	e13ffd17 	ldw	r4,-12(fp)
80211134:	0210ffc0 	call	80210ffc <alt_alarm_stop>
80211138:	00000d06 	br	80211170 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
8021113c:	e0bffd17 	ldw	r2,-12(fp)
80211140:	10c00217 	ldw	r3,8(r2)
80211144:	e0bfff17 	ldw	r2,-4(fp)
80211148:	1887883a 	add	r3,r3,r2
8021114c:	e0bffd17 	ldw	r2,-12(fp)
80211150:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
80211154:	e0bffd17 	ldw	r2,-12(fp)
80211158:	10c00217 	ldw	r3,8(r2)
8021115c:	d0a01f17 	ldw	r2,-32644(gp)
80211160:	1880032e 	bgeu	r3,r2,80211170 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
80211164:	e0bffd17 	ldw	r2,-12(fp)
80211168:	00c00044 	movi	r3,1
8021116c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
80211170:	e0bffe17 	ldw	r2,-8(fp)
80211174:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
80211178:	e0fffd17 	ldw	r3,-12(fp)
8021117c:	d0a01004 	addi	r2,gp,-32704
80211180:	18bfcf1e 	bne	r3,r2,802110c0 <__reset+0xfa1f10c0>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
80211184:	0001883a 	nop
}
80211188:	0001883a 	nop
8021118c:	e037883a 	mov	sp,fp
80211190:	dfc00117 	ldw	ra,4(sp)
80211194:	df000017 	ldw	fp,0(sp)
80211198:	dec00204 	addi	sp,sp,8
8021119c:	f800283a 	ret

802111a0 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
802111a0:	deffff04 	addi	sp,sp,-4
802111a4:	df000015 	stw	fp,0(sp)
802111a8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
802111ac:	000170fa 	wrctl	ienable,zero
}
802111b0:	0001883a 	nop
802111b4:	e037883a 	mov	sp,fp
802111b8:	df000017 	ldw	fp,0(sp)
802111bc:	dec00104 	addi	sp,sp,4
802111c0:	f800283a 	ret

802111c4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
802111c4:	defffb04 	addi	sp,sp,-20
802111c8:	dfc00415 	stw	ra,16(sp)
802111cc:	df000315 	stw	fp,12(sp)
802111d0:	df000304 	addi	fp,sp,12
802111d4:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
802111d8:	d0a00617 	ldw	r2,-32744(gp)
802111dc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
802111e0:	00003106 	br	802112a8 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
802111e4:	e0bffd17 	ldw	r2,-12(fp)
802111e8:	10800217 	ldw	r2,8(r2)
802111ec:	1009883a 	mov	r4,r2
802111f0:	02007640 	call	80200764 <strlen>
802111f4:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
802111f8:	e0bffd17 	ldw	r2,-12(fp)
802111fc:	10c00217 	ldw	r3,8(r2)
80211200:	e0bffe17 	ldw	r2,-8(fp)
80211204:	10bfffc4 	addi	r2,r2,-1
80211208:	1885883a 	add	r2,r3,r2
8021120c:	10800003 	ldbu	r2,0(r2)
80211210:	10803fcc 	andi	r2,r2,255
80211214:	1080201c 	xori	r2,r2,128
80211218:	10bfe004 	addi	r2,r2,-128
8021121c:	10800bd8 	cmpnei	r2,r2,47
80211220:	1000031e 	bne	r2,zero,80211230 <alt_find_file+0x6c>
    {
      len -= 1;
80211224:	e0bffe17 	ldw	r2,-8(fp)
80211228:	10bfffc4 	addi	r2,r2,-1
8021122c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
80211230:	e0bffe17 	ldw	r2,-8(fp)
80211234:	e0ffff17 	ldw	r3,-4(fp)
80211238:	1885883a 	add	r2,r3,r2
8021123c:	10800003 	ldbu	r2,0(r2)
80211240:	10803fcc 	andi	r2,r2,255
80211244:	1080201c 	xori	r2,r2,128
80211248:	10bfe004 	addi	r2,r2,-128
8021124c:	10800be0 	cmpeqi	r2,r2,47
80211250:	1000081e 	bne	r2,zero,80211274 <alt_find_file+0xb0>
80211254:	e0bffe17 	ldw	r2,-8(fp)
80211258:	e0ffff17 	ldw	r3,-4(fp)
8021125c:	1885883a 	add	r2,r3,r2
80211260:	10800003 	ldbu	r2,0(r2)
80211264:	10803fcc 	andi	r2,r2,255
80211268:	1080201c 	xori	r2,r2,128
8021126c:	10bfe004 	addi	r2,r2,-128
80211270:	10000a1e 	bne	r2,zero,8021129c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
80211274:	e0bffd17 	ldw	r2,-12(fp)
80211278:	10800217 	ldw	r2,8(r2)
8021127c:	e0fffe17 	ldw	r3,-8(fp)
80211280:	180d883a 	mov	r6,r3
80211284:	e17fff17 	ldw	r5,-4(fp)
80211288:	1009883a 	mov	r4,r2
8021128c:	02114580 	call	80211458 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
80211290:	1000021e 	bne	r2,zero,8021129c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
80211294:	e0bffd17 	ldw	r2,-12(fp)
80211298:	00000706 	br	802112b8 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
8021129c:	e0bffd17 	ldw	r2,-12(fp)
802112a0:	10800017 	ldw	r2,0(r2)
802112a4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
802112a8:	e0fffd17 	ldw	r3,-12(fp)
802112ac:	d0a00604 	addi	r2,gp,-32744
802112b0:	18bfcc1e 	bne	r3,r2,802111e4 <__reset+0xfa1f11e4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
802112b4:	0005883a 	mov	r2,zero
}
802112b8:	e037883a 	mov	sp,fp
802112bc:	dfc00117 	ldw	ra,4(sp)
802112c0:	df000017 	ldw	fp,0(sp)
802112c4:	dec00204 	addi	sp,sp,8
802112c8:	f800283a 	ret

802112cc <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
802112cc:	defffc04 	addi	sp,sp,-16
802112d0:	df000315 	stw	fp,12(sp)
802112d4:	df000304 	addi	fp,sp,12
802112d8:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
802112dc:	00bffa04 	movi	r2,-24
802112e0:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
802112e4:	e03ffd15 	stw	zero,-12(fp)
802112e8:	00001906 	br	80211350 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
802112ec:	00a00874 	movhi	r2,32801
802112f0:	1089df04 	addi	r2,r2,10108
802112f4:	e0fffd17 	ldw	r3,-12(fp)
802112f8:	18c00324 	muli	r3,r3,12
802112fc:	10c5883a 	add	r2,r2,r3
80211300:	10800017 	ldw	r2,0(r2)
80211304:	10000f1e 	bne	r2,zero,80211344 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
80211308:	00a00874 	movhi	r2,32801
8021130c:	1089df04 	addi	r2,r2,10108
80211310:	e0fffd17 	ldw	r3,-12(fp)
80211314:	18c00324 	muli	r3,r3,12
80211318:	10c5883a 	add	r2,r2,r3
8021131c:	e0ffff17 	ldw	r3,-4(fp)
80211320:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
80211324:	d0e00a17 	ldw	r3,-32728(gp)
80211328:	e0bffd17 	ldw	r2,-12(fp)
8021132c:	1880020e 	bge	r3,r2,80211338 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
80211330:	e0bffd17 	ldw	r2,-12(fp)
80211334:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
80211338:	e0bffd17 	ldw	r2,-12(fp)
8021133c:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
80211340:	00000606 	br	8021135c <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
80211344:	e0bffd17 	ldw	r2,-12(fp)
80211348:	10800044 	addi	r2,r2,1
8021134c:	e0bffd15 	stw	r2,-12(fp)
80211350:	e0bffd17 	ldw	r2,-12(fp)
80211354:	10800810 	cmplti	r2,r2,32
80211358:	103fe41e 	bne	r2,zero,802112ec <__reset+0xfa1f12ec>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
8021135c:	e0bffe17 	ldw	r2,-8(fp)
}
80211360:	e037883a 	mov	sp,fp
80211364:	df000017 	ldw	fp,0(sp)
80211368:	dec00104 	addi	sp,sp,4
8021136c:	f800283a 	ret

80211370 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
80211370:	defffe04 	addi	sp,sp,-8
80211374:	df000115 	stw	fp,4(sp)
80211378:	df000104 	addi	fp,sp,4
8021137c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
80211380:	e0bfff17 	ldw	r2,-4(fp)
80211384:	10bffe84 	addi	r2,r2,-6
80211388:	10c00428 	cmpgeui	r3,r2,16
8021138c:	18001a1e 	bne	r3,zero,802113f8 <alt_exception_cause_generated_bad_addr+0x88>
80211390:	100690ba 	slli	r3,r2,2
80211394:	00a00874 	movhi	r2,32801
80211398:	1084ea04 	addi	r2,r2,5032
8021139c:	1885883a 	add	r2,r3,r2
802113a0:	10800017 	ldw	r2,0(r2)
802113a4:	1000683a 	jmp	r2
802113a8:	802113e8 	cmpgeui	zero,r16,33871
802113ac:	802113e8 	cmpgeui	zero,r16,33871
802113b0:	802113f8 	rdprs	zero,r16,-31665
802113b4:	802113f8 	rdprs	zero,r16,-31665
802113b8:	802113f8 	rdprs	zero,r16,-31665
802113bc:	802113e8 	cmpgeui	zero,r16,33871
802113c0:	802113f0 	cmpltui	zero,r16,33871
802113c4:	802113f8 	rdprs	zero,r16,-31665
802113c8:	802113e8 	cmpgeui	zero,r16,33871
802113cc:	802113e8 	cmpgeui	zero,r16,33871
802113d0:	802113f8 	rdprs	zero,r16,-31665
802113d4:	802113e8 	cmpgeui	zero,r16,33871
802113d8:	802113f0 	cmpltui	zero,r16,33871
802113dc:	802113f8 	rdprs	zero,r16,-31665
802113e0:	802113f8 	rdprs	zero,r16,-31665
802113e4:	802113e8 	cmpgeui	zero,r16,33871
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
802113e8:	00800044 	movi	r2,1
802113ec:	00000306 	br	802113fc <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
802113f0:	0005883a 	mov	r2,zero
802113f4:	00000106 	br	802113fc <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
802113f8:	0005883a 	mov	r2,zero
  }
}
802113fc:	e037883a 	mov	sp,fp
80211400:	df000017 	ldw	fp,0(sp)
80211404:	dec00104 	addi	sp,sp,4
80211408:	f800283a 	ret

8021140c <atexit>:
8021140c:	200b883a 	mov	r5,r4
80211410:	000f883a 	mov	r7,zero
80211414:	000d883a 	mov	r6,zero
80211418:	0009883a 	mov	r4,zero
8021141c:	021163c1 	jmpi	8021163c <__register_exitproc>

80211420 <exit>:
80211420:	defffe04 	addi	sp,sp,-8
80211424:	000b883a 	mov	r5,zero
80211428:	dc000015 	stw	r16,0(sp)
8021142c:	dfc00115 	stw	ra,4(sp)
80211430:	2021883a 	mov	r16,r4
80211434:	02117540 	call	80211754 <__call_exitprocs>
80211438:	00a00874 	movhi	r2,32801
8021143c:	108e9304 	addi	r2,r2,14924
80211440:	11000017 	ldw	r4,0(r2)
80211444:	20800f17 	ldw	r2,60(r4)
80211448:	10000126 	beq	r2,zero,80211450 <exit+0x30>
8021144c:	103ee83a 	callr	r2
80211450:	8009883a 	mov	r4,r16
80211454:	02118d40 	call	802118d4 <_exit>

80211458 <memcmp>:
80211458:	01c000c4 	movi	r7,3
8021145c:	3980192e 	bgeu	r7,r6,802114c4 <memcmp+0x6c>
80211460:	2144b03a 	or	r2,r4,r5
80211464:	11c4703a 	and	r2,r2,r7
80211468:	10000f26 	beq	r2,zero,802114a8 <memcmp+0x50>
8021146c:	20800003 	ldbu	r2,0(r4)
80211470:	28c00003 	ldbu	r3,0(r5)
80211474:	10c0151e 	bne	r2,r3,802114cc <memcmp+0x74>
80211478:	31bfff84 	addi	r6,r6,-2
8021147c:	01ffffc4 	movi	r7,-1
80211480:	00000406 	br	80211494 <memcmp+0x3c>
80211484:	20800003 	ldbu	r2,0(r4)
80211488:	28c00003 	ldbu	r3,0(r5)
8021148c:	31bfffc4 	addi	r6,r6,-1
80211490:	10c00e1e 	bne	r2,r3,802114cc <memcmp+0x74>
80211494:	21000044 	addi	r4,r4,1
80211498:	29400044 	addi	r5,r5,1
8021149c:	31fff91e 	bne	r6,r7,80211484 <__reset+0xfa1f1484>
802114a0:	0005883a 	mov	r2,zero
802114a4:	f800283a 	ret
802114a8:	20c00017 	ldw	r3,0(r4)
802114ac:	28800017 	ldw	r2,0(r5)
802114b0:	18bfee1e 	bne	r3,r2,8021146c <__reset+0xfa1f146c>
802114b4:	31bfff04 	addi	r6,r6,-4
802114b8:	21000104 	addi	r4,r4,4
802114bc:	29400104 	addi	r5,r5,4
802114c0:	39bff936 	bltu	r7,r6,802114a8 <__reset+0xfa1f14a8>
802114c4:	303fe91e 	bne	r6,zero,8021146c <__reset+0xfa1f146c>
802114c8:	003ff506 	br	802114a0 <__reset+0xfa1f14a0>
802114cc:	10c5c83a 	sub	r2,r2,r3
802114d0:	f800283a 	ret

802114d4 <_putc_r>:
802114d4:	defffc04 	addi	sp,sp,-16
802114d8:	dc000215 	stw	r16,8(sp)
802114dc:	dfc00315 	stw	ra,12(sp)
802114e0:	2021883a 	mov	r16,r4
802114e4:	20000226 	beq	r4,zero,802114f0 <_putc_r+0x1c>
802114e8:	20800e17 	ldw	r2,56(r4)
802114ec:	10001b26 	beq	r2,zero,8021155c <_putc_r+0x88>
802114f0:	30800217 	ldw	r2,8(r6)
802114f4:	10bfffc4 	addi	r2,r2,-1
802114f8:	30800215 	stw	r2,8(r6)
802114fc:	10000a16 	blt	r2,zero,80211528 <_putc_r+0x54>
80211500:	30800017 	ldw	r2,0(r6)
80211504:	11400005 	stb	r5,0(r2)
80211508:	30800017 	ldw	r2,0(r6)
8021150c:	10c00044 	addi	r3,r2,1
80211510:	30c00015 	stw	r3,0(r6)
80211514:	10800003 	ldbu	r2,0(r2)
80211518:	dfc00317 	ldw	ra,12(sp)
8021151c:	dc000217 	ldw	r16,8(sp)
80211520:	dec00404 	addi	sp,sp,16
80211524:	f800283a 	ret
80211528:	30c00617 	ldw	r3,24(r6)
8021152c:	10c00616 	blt	r2,r3,80211548 <_putc_r+0x74>
80211530:	30800017 	ldw	r2,0(r6)
80211534:	00c00284 	movi	r3,10
80211538:	11400005 	stb	r5,0(r2)
8021153c:	30800017 	ldw	r2,0(r6)
80211540:	11400003 	ldbu	r5,0(r2)
80211544:	28fff11e 	bne	r5,r3,8021150c <__reset+0xfa1f150c>
80211548:	8009883a 	mov	r4,r16
8021154c:	dfc00317 	ldw	ra,12(sp)
80211550:	dc000217 	ldw	r16,8(sp)
80211554:	dec00404 	addi	sp,sp,16
80211558:	02097f01 	jmpi	802097f0 <__swbuf_r>
8021155c:	d9400015 	stw	r5,0(sp)
80211560:	d9800115 	stw	r6,4(sp)
80211564:	0204aa00 	call	80204aa0 <__sinit>
80211568:	d9800117 	ldw	r6,4(sp)
8021156c:	d9400017 	ldw	r5,0(sp)
80211570:	003fdf06 	br	802114f0 <__reset+0xfa1f14f0>

80211574 <putc>:
80211574:	00a00874 	movhi	r2,32801
80211578:	defffc04 	addi	sp,sp,-16
8021157c:	108e9404 	addi	r2,r2,14928
80211580:	dc000115 	stw	r16,4(sp)
80211584:	14000017 	ldw	r16,0(r2)
80211588:	dc400215 	stw	r17,8(sp)
8021158c:	dfc00315 	stw	ra,12(sp)
80211590:	2023883a 	mov	r17,r4
80211594:	80000226 	beq	r16,zero,802115a0 <putc+0x2c>
80211598:	80800e17 	ldw	r2,56(r16)
8021159c:	10001a26 	beq	r2,zero,80211608 <putc+0x94>
802115a0:	28800217 	ldw	r2,8(r5)
802115a4:	10bfffc4 	addi	r2,r2,-1
802115a8:	28800215 	stw	r2,8(r5)
802115ac:	10000b16 	blt	r2,zero,802115dc <putc+0x68>
802115b0:	28800017 	ldw	r2,0(r5)
802115b4:	14400005 	stb	r17,0(r2)
802115b8:	28800017 	ldw	r2,0(r5)
802115bc:	10c00044 	addi	r3,r2,1
802115c0:	28c00015 	stw	r3,0(r5)
802115c4:	10800003 	ldbu	r2,0(r2)
802115c8:	dfc00317 	ldw	ra,12(sp)
802115cc:	dc400217 	ldw	r17,8(sp)
802115d0:	dc000117 	ldw	r16,4(sp)
802115d4:	dec00404 	addi	sp,sp,16
802115d8:	f800283a 	ret
802115dc:	28c00617 	ldw	r3,24(r5)
802115e0:	10c00e16 	blt	r2,r3,8021161c <putc+0xa8>
802115e4:	28800017 	ldw	r2,0(r5)
802115e8:	01000284 	movi	r4,10
802115ec:	14400005 	stb	r17,0(r2)
802115f0:	28800017 	ldw	r2,0(r5)
802115f4:	10c00003 	ldbu	r3,0(r2)
802115f8:	193ff01e 	bne	r3,r4,802115bc <__reset+0xfa1f15bc>
802115fc:	280d883a 	mov	r6,r5
80211600:	180b883a 	mov	r5,r3
80211604:	00000706 	br	80211624 <putc+0xb0>
80211608:	8009883a 	mov	r4,r16
8021160c:	d9400015 	stw	r5,0(sp)
80211610:	0204aa00 	call	80204aa0 <__sinit>
80211614:	d9400017 	ldw	r5,0(sp)
80211618:	003fe106 	br	802115a0 <__reset+0xfa1f15a0>
8021161c:	280d883a 	mov	r6,r5
80211620:	880b883a 	mov	r5,r17
80211624:	8009883a 	mov	r4,r16
80211628:	dfc00317 	ldw	ra,12(sp)
8021162c:	dc400217 	ldw	r17,8(sp)
80211630:	dc000117 	ldw	r16,4(sp)
80211634:	dec00404 	addi	sp,sp,16
80211638:	02097f01 	jmpi	802097f0 <__swbuf_r>

8021163c <__register_exitproc>:
8021163c:	defffa04 	addi	sp,sp,-24
80211640:	dc000315 	stw	r16,12(sp)
80211644:	04200874 	movhi	r16,32801
80211648:	840e9304 	addi	r16,r16,14924
8021164c:	80c00017 	ldw	r3,0(r16)
80211650:	dc400415 	stw	r17,16(sp)
80211654:	dfc00515 	stw	ra,20(sp)
80211658:	18805217 	ldw	r2,328(r3)
8021165c:	2023883a 	mov	r17,r4
80211660:	10003726 	beq	r2,zero,80211740 <__register_exitproc+0x104>
80211664:	10c00117 	ldw	r3,4(r2)
80211668:	010007c4 	movi	r4,31
8021166c:	20c00e16 	blt	r4,r3,802116a8 <__register_exitproc+0x6c>
80211670:	1a000044 	addi	r8,r3,1
80211674:	8800221e 	bne	r17,zero,80211700 <__register_exitproc+0xc4>
80211678:	18c00084 	addi	r3,r3,2
8021167c:	18c7883a 	add	r3,r3,r3
80211680:	18c7883a 	add	r3,r3,r3
80211684:	12000115 	stw	r8,4(r2)
80211688:	10c7883a 	add	r3,r2,r3
8021168c:	19400015 	stw	r5,0(r3)
80211690:	0005883a 	mov	r2,zero
80211694:	dfc00517 	ldw	ra,20(sp)
80211698:	dc400417 	ldw	r17,16(sp)
8021169c:	dc000317 	ldw	r16,12(sp)
802116a0:	dec00604 	addi	sp,sp,24
802116a4:	f800283a 	ret
802116a8:	00800034 	movhi	r2,0
802116ac:	10800004 	addi	r2,r2,0
802116b0:	10002626 	beq	r2,zero,8021174c <__register_exitproc+0x110>
802116b4:	01006404 	movi	r4,400
802116b8:	d9400015 	stw	r5,0(sp)
802116bc:	d9800115 	stw	r6,4(sp)
802116c0:	d9c00215 	stw	r7,8(sp)
802116c4:	00000000 	call	80000000 <__alt_mem_onchip_memory-0x200000>
802116c8:	d9400017 	ldw	r5,0(sp)
802116cc:	d9800117 	ldw	r6,4(sp)
802116d0:	d9c00217 	ldw	r7,8(sp)
802116d4:	10001d26 	beq	r2,zero,8021174c <__register_exitproc+0x110>
802116d8:	81000017 	ldw	r4,0(r16)
802116dc:	10000115 	stw	zero,4(r2)
802116e0:	02000044 	movi	r8,1
802116e4:	22405217 	ldw	r9,328(r4)
802116e8:	0007883a 	mov	r3,zero
802116ec:	12400015 	stw	r9,0(r2)
802116f0:	20805215 	stw	r2,328(r4)
802116f4:	10006215 	stw	zero,392(r2)
802116f8:	10006315 	stw	zero,396(r2)
802116fc:	883fde26 	beq	r17,zero,80211678 <__reset+0xfa1f1678>
80211700:	18c9883a 	add	r4,r3,r3
80211704:	2109883a 	add	r4,r4,r4
80211708:	1109883a 	add	r4,r2,r4
8021170c:	21802215 	stw	r6,136(r4)
80211710:	01800044 	movi	r6,1
80211714:	12406217 	ldw	r9,392(r2)
80211718:	30cc983a 	sll	r6,r6,r3
8021171c:	4992b03a 	or	r9,r9,r6
80211720:	12406215 	stw	r9,392(r2)
80211724:	21c04215 	stw	r7,264(r4)
80211728:	01000084 	movi	r4,2
8021172c:	893fd21e 	bne	r17,r4,80211678 <__reset+0xfa1f1678>
80211730:	11006317 	ldw	r4,396(r2)
80211734:	218cb03a 	or	r6,r4,r6
80211738:	11806315 	stw	r6,396(r2)
8021173c:	003fce06 	br	80211678 <__reset+0xfa1f1678>
80211740:	18805304 	addi	r2,r3,332
80211744:	18805215 	stw	r2,328(r3)
80211748:	003fc606 	br	80211664 <__reset+0xfa1f1664>
8021174c:	00bfffc4 	movi	r2,-1
80211750:	003fd006 	br	80211694 <__reset+0xfa1f1694>

80211754 <__call_exitprocs>:
80211754:	defff504 	addi	sp,sp,-44
80211758:	df000915 	stw	fp,36(sp)
8021175c:	dd400615 	stw	r21,24(sp)
80211760:	dc800315 	stw	r18,12(sp)
80211764:	dfc00a15 	stw	ra,40(sp)
80211768:	ddc00815 	stw	r23,32(sp)
8021176c:	dd800715 	stw	r22,28(sp)
80211770:	dd000515 	stw	r20,20(sp)
80211774:	dcc00415 	stw	r19,16(sp)
80211778:	dc400215 	stw	r17,8(sp)
8021177c:	dc000115 	stw	r16,4(sp)
80211780:	d9000015 	stw	r4,0(sp)
80211784:	2839883a 	mov	fp,r5
80211788:	04800044 	movi	r18,1
8021178c:	057fffc4 	movi	r21,-1
80211790:	00a00874 	movhi	r2,32801
80211794:	108e9304 	addi	r2,r2,14924
80211798:	12000017 	ldw	r8,0(r2)
8021179c:	45005217 	ldw	r20,328(r8)
802117a0:	44c05204 	addi	r19,r8,328
802117a4:	a0001c26 	beq	r20,zero,80211818 <__call_exitprocs+0xc4>
802117a8:	a0800117 	ldw	r2,4(r20)
802117ac:	15ffffc4 	addi	r23,r2,-1
802117b0:	b8000d16 	blt	r23,zero,802117e8 <__call_exitprocs+0x94>
802117b4:	14000044 	addi	r16,r2,1
802117b8:	8421883a 	add	r16,r16,r16
802117bc:	8421883a 	add	r16,r16,r16
802117c0:	84402004 	addi	r17,r16,128
802117c4:	a463883a 	add	r17,r20,r17
802117c8:	a421883a 	add	r16,r20,r16
802117cc:	e0001e26 	beq	fp,zero,80211848 <__call_exitprocs+0xf4>
802117d0:	80804017 	ldw	r2,256(r16)
802117d4:	e0801c26 	beq	fp,r2,80211848 <__call_exitprocs+0xf4>
802117d8:	bdffffc4 	addi	r23,r23,-1
802117dc:	843fff04 	addi	r16,r16,-4
802117e0:	8c7fff04 	addi	r17,r17,-4
802117e4:	bd7ff91e 	bne	r23,r21,802117cc <__reset+0xfa1f17cc>
802117e8:	00800034 	movhi	r2,0
802117ec:	10800004 	addi	r2,r2,0
802117f0:	10000926 	beq	r2,zero,80211818 <__call_exitprocs+0xc4>
802117f4:	a0800117 	ldw	r2,4(r20)
802117f8:	1000301e 	bne	r2,zero,802118bc <__call_exitprocs+0x168>
802117fc:	a0800017 	ldw	r2,0(r20)
80211800:	10003226 	beq	r2,zero,802118cc <__call_exitprocs+0x178>
80211804:	a009883a 	mov	r4,r20
80211808:	98800015 	stw	r2,0(r19)
8021180c:	00000000 	call	80000000 <__alt_mem_onchip_memory-0x200000>
80211810:	9d000017 	ldw	r20,0(r19)
80211814:	a03fe41e 	bne	r20,zero,802117a8 <__reset+0xfa1f17a8>
80211818:	dfc00a17 	ldw	ra,40(sp)
8021181c:	df000917 	ldw	fp,36(sp)
80211820:	ddc00817 	ldw	r23,32(sp)
80211824:	dd800717 	ldw	r22,28(sp)
80211828:	dd400617 	ldw	r21,24(sp)
8021182c:	dd000517 	ldw	r20,20(sp)
80211830:	dcc00417 	ldw	r19,16(sp)
80211834:	dc800317 	ldw	r18,12(sp)
80211838:	dc400217 	ldw	r17,8(sp)
8021183c:	dc000117 	ldw	r16,4(sp)
80211840:	dec00b04 	addi	sp,sp,44
80211844:	f800283a 	ret
80211848:	a0800117 	ldw	r2,4(r20)
8021184c:	80c00017 	ldw	r3,0(r16)
80211850:	10bfffc4 	addi	r2,r2,-1
80211854:	15c01426 	beq	r2,r23,802118a8 <__call_exitprocs+0x154>
80211858:	80000015 	stw	zero,0(r16)
8021185c:	183fde26 	beq	r3,zero,802117d8 <__reset+0xfa1f17d8>
80211860:	95c8983a 	sll	r4,r18,r23
80211864:	a0806217 	ldw	r2,392(r20)
80211868:	a5800117 	ldw	r22,4(r20)
8021186c:	2084703a 	and	r2,r4,r2
80211870:	10000b26 	beq	r2,zero,802118a0 <__call_exitprocs+0x14c>
80211874:	a0806317 	ldw	r2,396(r20)
80211878:	2088703a 	and	r4,r4,r2
8021187c:	20000c1e 	bne	r4,zero,802118b0 <__call_exitprocs+0x15c>
80211880:	89400017 	ldw	r5,0(r17)
80211884:	d9000017 	ldw	r4,0(sp)
80211888:	183ee83a 	callr	r3
8021188c:	a0800117 	ldw	r2,4(r20)
80211890:	15bfbf1e 	bne	r2,r22,80211790 <__reset+0xfa1f1790>
80211894:	98800017 	ldw	r2,0(r19)
80211898:	153fcf26 	beq	r2,r20,802117d8 <__reset+0xfa1f17d8>
8021189c:	003fbc06 	br	80211790 <__reset+0xfa1f1790>
802118a0:	183ee83a 	callr	r3
802118a4:	003ff906 	br	8021188c <__reset+0xfa1f188c>
802118a8:	a5c00115 	stw	r23,4(r20)
802118ac:	003feb06 	br	8021185c <__reset+0xfa1f185c>
802118b0:	89000017 	ldw	r4,0(r17)
802118b4:	183ee83a 	callr	r3
802118b8:	003ff406 	br	8021188c <__reset+0xfa1f188c>
802118bc:	a0800017 	ldw	r2,0(r20)
802118c0:	a027883a 	mov	r19,r20
802118c4:	1029883a 	mov	r20,r2
802118c8:	003fb606 	br	802117a4 <__reset+0xfa1f17a4>
802118cc:	0005883a 	mov	r2,zero
802118d0:	003ffb06 	br	802118c0 <__reset+0xfa1f18c0>

802118d4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
802118d4:	defffd04 	addi	sp,sp,-12
802118d8:	df000215 	stw	fp,8(sp)
802118dc:	df000204 	addi	fp,sp,8
802118e0:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
802118e4:	0001883a 	nop
802118e8:	e0bfff17 	ldw	r2,-4(fp)
802118ec:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
802118f0:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
802118f4:	10000226 	beq	r2,zero,80211900 <_exit+0x2c>
    ALT_SIM_FAIL();
802118f8:	002af070 	cmpltui	zero,zero,43969
802118fc:	00000106 	br	80211904 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
80211900:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
80211904:	003fff06 	br	80211904 <__reset+0xfa1f1904>
